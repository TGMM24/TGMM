
// Generated from CSharpParser.g4 by ANTLR 4.13.0


#include "CSharpParserListener.h"

#include "CSharpParser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct CSharpParserStaticData final {
  CSharpParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  CSharpParserStaticData(const CSharpParserStaticData&) = delete;
  CSharpParserStaticData(CSharpParserStaticData&&) = delete;
  CSharpParserStaticData& operator=(const CSharpParserStaticData&) = delete;
  CSharpParserStaticData& operator=(CSharpParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag csharpparserParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
CSharpParserStaticData *csharpparserParserStaticData = nullptr;

void csharpparserParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (csharpparserParserStaticData != nullptr) {
    return;
  }
#else
  assert(csharpparserParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<CSharpParserStaticData>(
    std::vector<std::string>{
      "compilation_unit", "namespace_or_type_name", "type_", "base_type", 
      "tuple_type", "tuple_element", "simple_type", "numeric_type", "integral_type", 
      "floating_point_type", "class_type", "type_argument_list", "argument_list", 
      "argument", "expression", "non_assignment_expression", "assignment", 
      "assignment_operator", "conditional_expression", "null_coalescing_expression", 
      "conditional_or_expression", "conditional_and_expression", "inclusive_or_expression", 
      "exclusive_or_expression", "and_expression", "equality_expression", 
      "relational_expression", "shift_expression", "additive_expression", 
      "multiplicative_expression", "switch_expression", "switch_expression_arms", 
      "switch_expression_arm", "range_expression", "unary_expression", "primary_expression", 
      "primary_expression_start", "throwable_expression", "throw_expression", 
      "member_access", "bracket_expression", "indexer_argument", "predefined_type", 
      "expression_list", "object_or_collection_initializer", "object_initializer", 
      "member_initializer_list", "member_initializer", "initializer_value", 
      "collection_initializer", "element_initializer", "anonymous_object_initializer", 
      "member_declarator_list", "member_declarator", "unbound_type_name", 
      "generic_dimension_specifier", "isType", "isTypePatternArms", "isTypePatternArm", 
      "lambda_expression", "anonymous_function_signature", "explicit_anonymous_function_parameter_list", 
      "explicit_anonymous_function_parameter", "implicit_anonymous_function_parameter_list", 
      "anonymous_function_body", "query_expression", "from_clause", "query_body", 
      "query_body_clause", "let_clause", "where_clause", "combined_join_clause", 
      "orderby_clause", "ordering", "select_or_group_clause", "query_continuation", 
      "statement", "declarationStatement", "local_function_declaration", 
      "local_function_header", "local_function_modifiers", "local_function_body", 
      "labeled_Statement", "embedded_statement", "simple_embedded_statement", 
      "block", "local_variable_declaration", "local_variable_type", "local_variable_declarator", 
      "local_variable_initializer", "local_constant_declaration", "if_body", 
      "switch_section", "switch_label", "case_guard", "statement_list", 
      "for_initializer", "for_iterator", "catch_clauses", "specific_catch_clause", 
      "general_catch_clause", "exception_filter", "finally_clause", "resource_acquisition", 
      "namespace_declaration", "qualified_identifier", "namespace_body", 
      "extern_alias_directives", "extern_alias_directive", "using_directives", 
      "using_directive", "namespace_member_declarations", "namespace_member_declaration", 
      "type_declaration", "qualified_alias_member", "type_parameter_list", 
      "type_parameter", "class_base", "interface_type_list", "type_parameter_constraints_clauses", 
      "type_parameter_constraints_clause", "type_parameter_constraints", 
      "primary_constraint", "secondary_constraints", "constructor_constraint", 
      "class_body", "class_member_declarations", "class_member_declaration", 
      "all_member_modifiers", "all_member_modifier", "common_member_declaration", 
      "typed_member_declaration", "constant_declarators", "constant_declarator", 
      "variable_declarators", "variable_declarator", "variable_initializer", 
      "return_type", "member_name", "method_body", "formal_parameter_list", 
      "fixed_parameters", "fixed_parameter", "parameter_modifier", "parameter_array", 
      "accessor_declarations", "get_accessor_declaration", "set_accessor_declaration", 
      "accessor_modifier", "accessor_body", "event_accessor_declarations", 
      "add_accessor_declaration", "remove_accessor_declaration", "overloadable_operator", 
      "conversion_operator_declarator", "constructor_initializer", "body", 
      "struct_interfaces", "struct_body", "struct_member_declaration", "array_type", 
      "rank_specifier", "array_initializer", "variant_type_parameter_list", 
      "variant_type_parameter", "variance_annotation", "interface_base", 
      "interface_body", "interface_member_declaration", "interface_accessors", 
      "enum_base", "enum_body", "enum_member_declaration", "global_attribute_section", 
      "global_attribute_target", "attributes", "attribute_section", "attribute_target", 
      "attribute_list", "attribute", "attribute_argument", "pointer_type", 
      "fixed_pointer_declarators", "fixed_pointer_declarator", "fixed_pointer_initializer", 
      "fixed_size_buffer_declarator", "stackalloc_initializer", "right_arrow", 
      "right_shift", "right_shift_assignment", "literal", "boolean_literal", 
      "string_literal", "interpolated_regular_string", "interpolated_verbatium_string", 
      "interpolated_regular_string_part", "interpolated_verbatium_string_part", 
      "interpolated_string_expression", "keyword", "class_definition", "struct_definition", 
      "interface_definition", "enum_definition", "delegate_definition", 
      "event_declaration", "field_declaration", "property_declaration", 
      "constant_declaration", "indexer_declaration", "destructor_definition", 
      "constructor_declaration", "method_declaration", "method_member_name", 
      "operator_declaration", "arg_declaration", "method_invocation", "object_creation_expression", 
      "identifier"
    },
    std::vector<std::string>{
      "", "'\\u00EF\\u00BB\\u00BF'", "", "'/***/'", "", "", "", "", "'#'", 
      "'abstract'", "'add'", "'alias'", "'__arglist'", "'as'", "'ascending'", 
      "'async'", "'await'", "'base'", "'bool'", "'break'", "'by'", "'byte'", 
      "'case'", "'catch'", "'char'", "'checked'", "'class'", "'const'", 
      "'continue'", "'decimal'", "'default'", "'delegate'", "'descending'", 
      "'do'", "'double'", "'dynamic'", "'else'", "'enum'", "'equals'", "'event'", 
      "'explicit'", "'extern'", "'false'", "'finally'", "'fixed'", "'float'", 
      "'for'", "'foreach'", "'from'", "'get'", "'goto'", "'group'", "'if'", 
      "'implicit'", "'in'", "'int'", "'interface'", "'internal'", "'into'", 
      "'is'", "'join'", "'let'", "'lock'", "'long'", "'nameof'", "'namespace'", 
      "'new'", "'null'", "'object'", "'on'", "'operator'", "'orderby'", 
      "'out'", "'override'", "'params'", "'partial'", "'private'", "'protected'", 
      "'public'", "'readonly'", "'ref'", "'remove'", "'return'", "'sbyte'", 
      "'sealed'", "'select'", "'set'", "'short'", "'sizeof'", "'stackalloc'", 
      "'static'", "'string'", "'struct'", "'switch'", "'this'", "'throw'", 
      "'true'", "'try'", "'typeof'", "'uint'", "'ulong'", "'unchecked'", 
      "'unmanaged'", "'unsafe'", "'ushort'", "'using'", "'var'", "'virtual'", 
      "'void'", "'volatile'", "'when'", "'where'", "'while'", "'yield'", 
      "", "", "", "", "", "", "", "", "", "", "", "'{'", "'}'", "'['", "']'", 
      "'('", "')'", "'.'", "','", "':'", "';'", "'+'", "'-'", "'*'", "'/'", 
      "'%'", "'&'", "'|'", "'^'", "'!'", "'~'", "'='", "'<'", "'>'", "'\\u003F'", 
      "'::'", "'\\u003F\\u003F'", "'++'", "'--'", "'&&'", "'||'", "'->'", 
      "'=='", "'!='", "'<='", "'>='", "'+='", "'-='", "'*='", "'/='", "'%='", 
      "'&='", "'|='", "'^='", "'<<'", "'<<='", "'\\u003F\\u003F='", "'..'", 
      "'{{'", "", "", "", "", "", "", "", "", "", "", "'define'", "'undef'", 
      "'elif'", "'endif'", "'line'", "", "", "", "", "", "", "'hidden'", 
      "", "", "", "'}}'"
    },
    std::vector<std::string>{
      "", "BYTE_ORDER_MARK", "SINGLE_LINE_DOC_COMMENT", "EMPTY_DELIMITED_DOC_COMMENT", 
      "DELIMITED_DOC_COMMENT", "SINGLE_LINE_COMMENT", "DELIMITED_COMMENT", 
      "WHITESPACES", "SHARP", "ABSTRACT", "ADD", "ALIAS", "ARGLIST", "AS", 
      "ASCENDING", "ASYNC", "AWAIT", "BASE", "BOOL", "BREAK", "BY", "BYTE", 
      "CASE", "CATCH", "CHAR", "CHECKED", "CLASS", "CONST", "CONTINUE", 
      "DECIMAL", "DEFAULT", "DELEGATE", "DESCENDING", "DO", "DOUBLE", "DYNAMIC", 
      "ELSE", "ENUM", "EQUALS", "EVENT", "EXPLICIT", "EXTERN", "FALSE", 
      "FINALLY", "FIXED", "FLOAT", "FOR", "FOREACH", "FROM", "GET", "GOTO", 
      "GROUP", "IF", "IMPLICIT", "IN", "INT", "INTERFACE", "INTERNAL", "INTO", 
      "IS", "JOIN", "LET", "LOCK", "LONG", "NAMEOF", "NAMESPACE", "NEW", 
      "NULL_", "OBJECT", "ON", "OPERATOR", "ORDERBY", "OUT", "OVERRIDE", 
      "PARAMS", "PARTIAL", "PRIVATE", "PROTECTED", "PUBLIC", "READONLY", 
      "REF", "REMOVE", "RETURN", "SBYTE", "SEALED", "SELECT", "SET", "SHORT", 
      "SIZEOF", "STACKALLOC", "STATIC", "STRING", "STRUCT", "SWITCH", "THIS", 
      "THROW", "TRUE", "TRY", "TYPEOF", "UINT", "ULONG", "UNCHECKED", "UNMANAGED", 
      "UNSAFE", "USHORT", "USING", "VAR", "VIRTUAL", "VOID", "VOLATILE", 
      "WHEN", "WHERE", "WHILE", "YIELD", "IDENTIFIER", "LITERAL_ACCESS", 
      "INTEGER_LITERAL", "HEX_INTEGER_LITERAL", "BIN_INTEGER_LITERAL", "REAL_LITERAL", 
      "CHARACTER_LITERAL", "REGULAR_STRING", "VERBATIUM_STRING", "INTERPOLATED_REGULAR_STRING_START", 
      "INTERPOLATED_VERBATIUM_STRING_START", "OPEN_BRACE", "CLOSE_BRACE", 
      "OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_PARENS", "CLOSE_PARENS", "DOT", 
      "COMMA", "COLON", "SEMICOLON", "PLUS", "MINUS", "STAR", "DIV", "PERCENT", 
      "AMP", "BITWISE_OR", "CARET", "BANG", "TILDE", "ASSIGNMENT", "LT", 
      "GT", "INTERR", "DOUBLE_COLON", "OP_COALESCING", "OP_INC", "OP_DEC", 
      "OP_AND", "OP_OR", "OP_PTR", "OP_EQ", "OP_NE", "OP_LE", "OP_GE", "OP_ADD_ASSIGNMENT", 
      "OP_SUB_ASSIGNMENT", "OP_MULT_ASSIGNMENT", "OP_DIV_ASSIGNMENT", "OP_MOD_ASSIGNMENT", 
      "OP_AND_ASSIGNMENT", "OP_OR_ASSIGNMENT", "OP_XOR_ASSIGNMENT", "OP_LEFT_SHIFT", 
      "OP_LEFT_SHIFT_ASSIGNMENT", "OP_COALESCING_ASSIGNMENT", "OP_RANGE", 
      "DOUBLE_CURLY_INSIDE", "OPEN_BRACE_INSIDE", "REGULAR_CHAR_INSIDE", 
      "VERBATIUM_DOUBLE_QUOTE_INSIDE", "DOUBLE_QUOTE_INSIDE", "REGULAR_STRING_INSIDE", 
      "VERBATIUM_INSIDE_STRING", "CLOSE_BRACE_INSIDE", "FORMAT_STRING", 
      "DIRECTIVE_WHITESPACES", "DIGITS", "DEFINE", "UNDEF", "ELIF", "ENDIF", 
      "LINE", "ERROR", "WARNING", "REGION", "ENDREGION", "PRAGMA", "NULLABLE", 
      "DIRECTIVE_HIDDEN", "CONDITIONAL_SYMBOL", "DIRECTIVE_NEW_LINE", "TEXT", 
      "DOUBLE_CURLY_CLOSE_INSIDE"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,198,2644,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,
  	7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,
  	7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,
  	7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,
  	7,122,2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,
  	7,128,2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,
  	7,134,2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,
  	7,140,2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,
  	7,146,2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,
  	7,152,2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,
  	7,158,2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
  	7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,
  	7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,
  	7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,
  	7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,
  	7,188,2,189,7,189,2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,
  	7,194,2,195,7,195,2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,
  	7,200,2,201,7,201,2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,
  	7,206,2,207,7,207,2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,
  	7,212,2,213,7,213,2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,1,0,
  	3,0,438,8,0,1,0,3,0,441,8,0,1,0,3,0,444,8,0,1,0,5,0,447,8,0,10,0,12,0,
  	450,9,0,1,0,3,0,453,8,0,1,0,1,0,1,1,1,1,3,1,459,8,1,1,1,3,1,462,8,1,1,
  	1,1,1,1,1,3,1,467,8,1,5,1,469,8,1,10,1,12,1,472,9,1,1,2,1,2,1,2,1,2,5,
  	2,478,8,2,10,2,12,2,481,9,2,1,3,1,3,1,3,1,3,1,3,3,3,488,8,3,1,4,1,4,1,
  	4,1,4,4,4,494,8,4,11,4,12,4,495,1,4,1,4,1,5,1,5,3,5,502,8,5,1,6,1,6,3,
  	6,506,8,6,1,7,1,7,1,7,3,7,511,8,7,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,10,
  	3,10,521,8,10,1,11,1,11,1,11,1,11,5,11,527,8,11,10,11,12,11,530,9,11,
  	1,11,1,11,1,12,1,12,1,12,5,12,537,8,12,10,12,12,12,540,9,12,1,13,1,13,
  	1,13,3,13,545,8,13,1,13,3,13,548,8,13,1,13,1,13,3,13,552,8,13,1,13,1,
  	13,1,14,1,14,1,14,1,14,3,14,560,8,14,1,15,1,15,1,15,3,15,565,8,15,1,16,
  	1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,575,8,16,1,17,1,17,1,17,1,17,
  	1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,588,8,17,1,18,1,18,1,18,1,18,
  	1,18,1,18,3,18,596,8,18,1,19,1,19,1,19,1,19,3,19,602,8,19,3,19,604,8,
  	19,1,20,1,20,1,20,5,20,609,8,20,10,20,12,20,612,9,20,1,21,1,21,1,21,5,
  	21,617,8,21,10,21,12,21,620,9,21,1,22,1,22,1,22,5,22,625,8,22,10,22,12,
  	22,628,9,22,1,23,1,23,1,23,5,23,633,8,23,10,23,12,23,636,9,23,1,24,1,
  	24,1,24,5,24,641,8,24,10,24,12,24,644,9,24,1,25,1,25,1,25,5,25,649,8,
  	25,10,25,12,25,652,9,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,5,26,661,8,
  	26,10,26,12,26,664,9,26,1,27,1,27,1,27,3,27,669,8,27,1,27,5,27,672,8,
  	27,10,27,12,27,675,9,27,1,28,1,28,1,28,5,28,680,8,28,10,28,12,28,683,
  	9,28,1,29,1,29,1,29,5,29,688,8,29,10,29,12,29,691,9,29,1,30,1,30,1,30,
  	1,30,1,30,3,30,698,8,30,3,30,700,8,30,1,30,3,30,703,8,30,1,31,1,31,1,
  	31,5,31,708,8,31,10,31,12,31,711,9,31,1,32,1,32,3,32,715,8,32,1,32,1,
  	32,1,32,1,33,1,33,3,33,722,8,33,1,33,1,33,3,33,726,8,33,3,33,728,8,33,
  	1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
  	1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,756,
  	8,34,1,35,1,35,3,35,760,8,35,1,35,5,35,763,8,35,10,35,12,35,766,9,35,
  	1,35,3,35,769,8,35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,777,8,35,1,35,3,
  	35,780,8,35,1,35,5,35,783,8,35,10,35,12,35,786,9,35,1,35,3,35,789,8,35,
  	5,35,791,8,35,10,35,12,35,794,9,35,1,36,1,36,1,36,3,36,799,8,36,1,36,
  	1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,813,8,36,
  	1,36,1,36,1,36,1,36,3,36,819,8,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,
  	1,36,5,36,829,8,36,10,36,12,36,832,9,36,1,36,3,36,835,8,36,1,36,4,36,
  	838,8,36,11,36,12,36,839,1,36,1,36,3,36,844,8,36,1,36,1,36,1,36,1,36,
  	3,36,850,8,36,1,36,1,36,1,36,1,36,4,36,856,8,36,11,36,12,36,857,1,36,
  	1,36,1,36,1,36,1,36,1,36,1,36,3,36,867,8,36,1,36,1,36,1,36,1,36,1,36,
  	1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,885,8,36,
  	1,36,3,36,888,8,36,1,36,1,36,1,36,3,36,893,8,36,1,36,3,36,896,8,36,1,
  	36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,5,36,909,8,36,10,
  	36,12,36,912,9,36,1,36,1,36,1,36,3,36,917,8,36,1,37,1,37,3,37,921,8,37,
  	1,38,1,38,1,38,1,39,3,39,927,8,39,1,39,1,39,1,39,3,39,932,8,39,1,40,3,
  	40,935,8,40,1,40,1,40,1,40,1,40,5,40,941,8,40,10,40,12,40,944,9,40,1,
  	40,1,40,1,41,1,41,1,41,3,41,951,8,41,1,41,1,41,1,42,1,42,1,43,1,43,1,
  	43,5,43,960,8,43,10,43,12,43,963,9,43,1,44,1,44,3,44,967,8,44,1,45,1,
  	45,1,45,3,45,972,8,45,3,45,974,8,45,1,45,1,45,1,46,1,46,1,46,5,46,981,
  	8,46,10,46,12,46,984,9,46,1,47,1,47,1,47,1,47,1,47,3,47,991,8,47,1,47,
  	1,47,1,47,1,48,1,48,3,48,998,8,48,1,49,1,49,1,49,1,49,5,49,1004,8,49,
  	10,49,12,49,1007,9,49,1,49,3,49,1010,8,49,1,49,1,49,1,50,1,50,1,50,1,
  	50,1,50,3,50,1019,8,50,1,51,1,51,1,51,3,51,1024,8,51,3,51,1026,8,51,1,
  	51,1,51,1,52,1,52,1,52,5,52,1033,8,52,10,52,12,52,1036,9,52,1,53,1,53,
  	1,53,1,53,1,53,3,53,1043,8,53,1,54,1,54,3,54,1047,8,54,1,54,1,54,1,54,
  	3,54,1052,8,54,3,54,1054,8,54,1,54,1,54,1,54,3,54,1059,8,54,5,54,1061,
  	8,54,10,54,12,54,1064,9,54,1,55,1,55,5,55,1068,8,55,10,55,12,55,1071,
  	9,55,1,55,1,55,1,56,1,56,1,56,5,56,1078,8,56,10,56,12,56,1081,9,56,1,
  	56,3,56,1084,8,56,1,56,3,56,1087,8,56,1,56,3,56,1090,8,56,1,57,1,57,1,
  	57,1,57,5,57,1096,8,57,10,57,12,57,1099,9,57,1,57,1,57,1,58,1,58,1,58,
  	1,58,1,59,3,59,1108,8,59,1,59,1,59,1,59,1,59,1,60,1,60,1,60,1,60,1,60,
  	1,60,1,60,1,60,1,60,1,60,1,60,3,60,1125,8,60,1,61,1,61,1,61,5,61,1130,
  	8,61,10,61,12,61,1133,9,61,1,62,3,62,1136,8,62,1,62,1,62,1,62,1,63,1,
  	63,1,63,5,63,1144,8,63,10,63,12,63,1147,9,63,1,64,1,64,3,64,1151,8,64,
  	1,65,1,65,1,65,1,66,1,66,3,66,1158,8,66,1,66,1,66,1,66,1,66,1,67,5,67,
  	1165,8,67,10,67,12,67,1168,9,67,1,67,1,67,3,67,1172,8,67,1,68,1,68,1,
  	68,1,68,1,68,3,68,1179,8,68,1,69,1,69,1,69,1,69,1,69,1,70,1,70,1,70,1,
  	71,1,71,3,71,1191,8,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,3,
  	71,1202,8,71,1,72,1,72,1,72,1,72,5,72,1208,8,72,10,72,12,72,1211,9,72,
  	1,73,1,73,3,73,1215,8,73,1,74,1,74,1,74,1,74,1,74,1,74,1,74,3,74,1224,
  	8,74,1,75,1,75,1,75,1,75,1,76,1,76,1,76,3,76,1233,8,76,1,77,1,77,1,77,
  	1,77,1,77,1,77,1,77,3,77,1242,8,77,1,78,1,78,1,78,1,79,3,79,1248,8,79,
  	1,79,1,79,1,79,3,79,1253,8,79,1,79,1,79,3,79,1257,8,79,1,79,1,79,3,79,
  	1261,8,79,1,80,1,80,3,80,1265,8,80,1,80,1,80,3,80,1269,8,80,1,81,1,81,
  	1,81,1,81,1,81,3,81,1276,8,81,1,82,1,82,1,82,1,82,1,83,1,83,3,83,1284,
  	8,83,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,3,84,1297,
  	8,84,1,84,1,84,1,84,1,84,1,84,1,84,5,84,1305,8,84,10,84,12,84,1308,9,
  	84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,
  	84,1,84,1,84,1,84,1,84,1,84,3,84,1329,8,84,1,84,1,84,3,84,1333,8,84,1,
  	84,1,84,3,84,1337,8,84,1,84,1,84,1,84,3,84,1342,8,84,1,84,1,84,1,84,1,
  	84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,
  	84,3,84,1362,8,84,1,84,1,84,1,84,3,84,1367,8,84,1,84,1,84,1,84,3,84,1372,
  	8,84,1,84,1,84,1,84,1,84,1,84,3,84,1379,8,84,1,84,3,84,1382,8,84,1,84,
  	1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,
  	1,84,1,84,1,84,1,84,1,84,3,84,1404,8,84,1,84,1,84,1,84,1,84,1,84,1,84,
  	1,84,1,84,1,84,1,84,3,84,1416,8,84,1,85,1,85,3,85,1420,8,85,1,85,1,85,
  	1,86,1,86,1,86,1,86,3,86,1428,8,86,1,86,1,86,1,86,1,86,1,86,1,86,5,86,
  	1436,8,86,10,86,12,86,1439,9,86,1,86,1,86,1,86,1,86,3,86,1445,8,86,1,
  	87,1,87,3,87,1449,8,87,1,88,1,88,1,88,3,88,1454,8,88,1,88,3,88,1457,8,
  	88,1,89,1,89,1,89,3,89,1462,8,89,1,90,1,90,1,90,1,90,1,91,1,91,3,91,1470,
  	8,91,1,92,4,92,1473,8,92,11,92,12,92,1474,1,92,1,92,1,93,1,93,1,93,3,
  	93,1482,8,93,1,93,1,93,1,93,1,93,3,93,1488,8,93,1,94,1,94,1,94,1,95,4,
  	95,1494,8,95,11,95,12,95,1495,1,96,1,96,1,96,1,96,5,96,1502,8,96,10,96,
  	12,96,1505,9,96,3,96,1507,8,96,1,97,1,97,1,97,5,97,1512,8,97,10,97,12,
  	97,1515,9,97,1,98,1,98,5,98,1519,8,98,10,98,12,98,1522,9,98,1,98,3,98,
  	1525,8,98,1,98,3,98,1528,8,98,1,99,1,99,1,99,1,99,3,99,1534,8,99,1,99,
  	1,99,3,99,1538,8,99,1,99,1,99,1,100,1,100,3,100,1544,8,100,1,100,1,100,
  	1,101,1,101,1,101,1,101,1,101,1,102,1,102,1,102,1,103,1,103,3,103,1558,
  	8,103,1,104,1,104,1,104,1,104,3,104,1564,8,104,1,105,1,105,1,105,5,105,
  	1569,8,105,10,105,12,105,1572,9,105,1,106,1,106,3,106,1576,8,106,1,106,
  	3,106,1579,8,106,1,106,3,106,1582,8,106,1,106,1,106,1,107,4,107,1587,
  	8,107,11,107,12,107,1588,1,108,1,108,1,108,1,108,1,108,1,109,4,109,1597,
  	8,109,11,109,12,109,1598,1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,
  	110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,3,110,1616,8,110,1,111,
  	4,111,1619,8,111,11,111,12,111,1620,1,112,1,112,3,112,1625,8,112,1,113,
  	3,113,1628,8,113,1,113,3,113,1631,8,113,1,113,1,113,1,113,1,113,1,113,
  	3,113,1638,8,113,1,114,1,114,1,114,1,114,3,114,1644,8,114,1,115,1,115,
  	1,115,1,115,5,115,1650,8,115,10,115,12,115,1653,9,115,1,115,1,115,1,116,
  	3,116,1658,8,116,1,116,1,116,1,117,1,117,1,117,1,117,5,117,1666,8,117,
  	10,117,12,117,1669,9,117,1,118,1,118,1,118,5,118,1674,8,118,10,118,12,
  	118,1677,9,118,1,119,4,119,1680,8,119,11,119,12,119,1681,1,120,1,120,
  	1,120,1,120,1,120,1,121,1,121,1,121,1,121,3,121,1693,8,121,1,121,1,121,
  	3,121,1697,8,121,3,121,1699,8,121,1,122,1,122,1,122,3,122,1704,8,122,
  	1,122,1,122,3,122,1708,8,122,1,123,1,123,1,123,5,123,1713,8,123,10,123,
  	12,123,1716,9,123,1,124,1,124,1,124,1,124,1,125,1,125,3,125,1724,8,125,
  	1,125,1,125,1,126,4,126,1729,8,126,11,126,12,126,1730,1,127,3,127,1734,
  	8,127,1,127,3,127,1737,8,127,1,127,1,127,3,127,1741,8,127,1,128,4,128,
  	1744,8,128,11,128,12,128,1745,1,129,1,129,1,130,1,130,1,130,1,130,1,130,
  	1,130,1,130,1,130,1,130,3,130,1759,8,130,1,130,1,130,1,130,1,130,1,130,
  	1,130,1,130,1,130,3,130,1769,8,130,1,131,1,131,1,131,1,131,1,131,3,131,
  	1776,8,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,
  	3,131,1788,8,131,1,132,1,132,1,132,5,132,1793,8,132,10,132,12,132,1796,
  	9,132,1,133,1,133,1,133,1,133,1,134,1,134,1,134,5,134,1805,8,134,10,134,
  	12,134,1808,9,134,1,135,1,135,1,135,3,135,1813,8,135,1,136,1,136,3,136,
  	1817,8,136,1,137,1,137,3,137,1821,8,137,1,138,1,138,1,139,1,139,3,139,
  	1827,8,139,1,140,1,140,1,140,1,140,3,140,1833,8,140,3,140,1835,8,140,
  	1,141,1,141,1,141,5,141,1840,8,141,10,141,12,141,1843,9,141,1,142,3,142,
  	1846,8,142,1,142,3,142,1849,8,142,1,142,1,142,3,142,1853,8,142,1,143,
  	1,143,1,143,1,143,1,143,1,143,1,143,1,143,3,143,1863,8,143,1,144,3,144,
  	1866,8,144,1,144,1,144,1,144,1,144,1,145,3,145,1873,8,145,1,145,3,145,
  	1876,8,145,1,145,1,145,1,145,3,145,1881,8,145,1,145,1,145,1,145,3,145,
  	1886,8,145,3,145,1888,8,145,1,146,3,146,1891,8,146,1,146,3,146,1894,8,
  	146,1,146,1,146,1,146,1,147,3,147,1900,8,147,1,147,3,147,1903,8,147,1,
  	147,1,147,1,147,1,148,1,148,1,148,1,148,1,148,1,148,1,148,3,148,1915,
  	8,148,1,149,1,149,3,149,1919,8,149,1,150,3,150,1922,8,150,1,150,1,150,
  	1,150,1,150,1,150,1,150,1,150,1,150,3,150,1932,8,150,1,151,3,151,1935,
  	8,151,1,151,1,151,1,151,1,152,3,152,1941,8,152,1,152,1,152,1,152,1,153,
  	1,153,1,153,1,153,1,153,1,153,1,153,1,153,1,153,1,153,1,153,1,153,1,153,
  	1,153,1,153,1,153,1,153,1,153,1,153,1,153,1,153,1,153,3,153,1968,8,153,
  	1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,155,1,155,1,155,1,155,3,155,
  	1981,8,155,1,155,1,155,1,156,1,156,3,156,1987,8,156,1,157,1,157,1,157,
  	1,158,1,158,5,158,1994,8,158,10,158,12,158,1997,9,158,1,158,1,158,1,159,
  	3,159,2002,8,159,1,159,3,159,2005,8,159,1,159,1,159,1,159,1,159,4,159,
  	2011,8,159,11,159,12,159,2012,1,159,1,159,3,159,2017,8,159,1,160,1,160,
  	5,160,2021,8,160,10,160,12,160,2024,9,160,1,160,4,160,2027,8,160,11,160,
  	12,160,2028,1,161,1,161,5,161,2033,8,161,10,161,12,161,2036,9,161,1,161,
  	1,161,1,162,1,162,1,162,1,162,5,162,2044,8,162,10,162,12,162,2047,9,162,
  	1,162,3,162,2050,8,162,3,162,2052,8,162,1,162,1,162,1,163,1,163,1,163,
  	1,163,5,163,2060,8,163,10,163,12,163,2063,9,163,1,163,1,163,1,164,3,164,
  	2068,8,164,1,164,3,164,2071,8,164,1,164,1,164,1,165,1,165,1,166,1,166,
  	1,166,1,167,1,167,5,167,2082,8,167,10,167,12,167,2085,9,167,1,167,1,167,
  	1,168,3,168,2090,8,168,1,168,3,168,2093,8,168,1,168,3,168,2096,8,168,
  	1,168,1,168,1,168,1,168,1,168,3,168,2103,8,168,1,168,1,168,1,168,3,168,
  	2108,8,168,1,168,1,168,3,168,2112,8,168,1,168,1,168,3,168,2116,8,168,
  	1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,
  	1,168,1,168,1,168,3,168,2133,8,168,1,168,3,168,2136,8,168,1,168,1,168,
  	1,168,3,168,2141,8,168,1,168,1,168,3,168,2145,8,168,1,168,1,168,3,168,
  	2149,8,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,3,168,2158,8,168,
  	1,169,3,169,2161,8,169,1,169,1,169,1,169,3,169,2166,8,169,1,169,1,169,
  	3,169,2170,8,169,1,169,1,169,1,169,3,169,2175,8,169,1,169,1,169,3,169,
  	2179,8,169,3,169,2181,8,169,1,170,1,170,1,170,1,171,1,171,1,171,1,171,
  	5,171,2190,8,171,10,171,12,171,2193,9,171,1,171,3,171,2196,8,171,3,171,
  	2198,8,171,1,171,1,171,1,172,3,172,2203,8,172,1,172,1,172,1,172,3,172,
  	2208,8,172,1,173,1,173,1,173,1,173,1,173,3,173,2215,8,173,1,173,1,173,
  	1,174,1,174,3,174,2221,8,174,1,175,4,175,2224,8,175,11,175,12,175,2225,
  	1,176,1,176,1,176,1,176,3,176,2232,8,176,1,176,1,176,3,176,2236,8,176,
  	1,176,1,176,1,177,1,177,3,177,2242,8,177,1,178,1,178,1,178,5,178,2247,
  	8,178,10,178,12,178,2250,9,178,1,179,1,179,1,179,1,179,1,179,5,179,2257,
  	8,179,10,179,12,179,2260,9,179,3,179,2262,8,179,1,179,3,179,2265,8,179,
  	1,180,1,180,1,180,3,180,2270,8,180,1,180,1,180,1,181,1,181,3,181,2276,
  	8,181,1,181,1,181,5,181,2280,8,181,10,181,12,181,2283,9,181,1,181,1,181,
  	1,181,1,181,3,181,2289,8,181,1,182,1,182,1,182,5,182,2294,8,182,10,182,
  	12,182,2297,9,182,1,183,1,183,1,183,1,183,1,184,3,184,2304,8,184,1,184,
  	1,184,3,184,2308,8,184,1,185,1,185,1,185,1,185,1,185,1,186,1,186,1,186,
  	1,186,1,186,1,186,1,186,1,186,3,186,2323,8,186,1,186,1,186,3,186,2327,
  	8,186,1,186,1,186,1,186,1,186,1,186,5,186,2334,8,186,10,186,12,186,2337,
  	9,186,1,186,3,186,2340,8,186,1,186,1,186,3,186,2344,8,186,1,187,1,187,
  	1,187,1,187,1,188,1,188,1,188,1,188,1,189,1,189,1,189,1,189,1,190,1,190,
  	1,190,1,190,1,190,1,190,1,190,1,190,3,190,2366,8,190,1,191,1,191,1,192,
  	1,192,1,192,1,192,3,192,2374,8,192,1,193,1,193,5,193,2378,8,193,10,193,
  	12,193,2381,9,193,1,193,1,193,1,194,1,194,5,194,2387,8,194,10,194,12,
  	194,2390,9,194,1,194,1,194,1,195,1,195,1,195,1,195,3,195,2398,8,195,1,
  	196,1,196,1,196,1,196,3,196,2404,8,196,1,197,1,197,1,197,5,197,2409,8,
  	197,10,197,12,197,2412,9,197,1,197,1,197,4,197,2416,8,197,11,197,12,197,
  	2417,3,197,2420,8,197,1,198,1,198,1,199,1,199,1,199,3,199,2427,8,199,
  	1,199,3,199,2430,8,199,1,199,3,199,2433,8,199,1,199,1,199,3,199,2437,
  	8,199,1,200,3,200,2440,8,200,1,200,1,200,1,200,3,200,2445,8,200,1,200,
  	3,200,2448,8,200,1,200,3,200,2451,8,200,1,200,1,200,3,200,2455,8,200,
  	1,201,1,201,1,201,3,201,2460,8,201,1,201,3,201,2463,8,201,1,201,3,201,
  	2466,8,201,1,201,1,201,3,201,2470,8,201,1,202,1,202,1,202,3,202,2475,
  	8,202,1,202,1,202,3,202,2479,8,202,1,203,1,203,1,203,1,203,3,203,2485,
  	8,203,1,203,1,203,3,203,2489,8,203,1,203,1,203,3,203,2493,8,203,1,203,
  	1,203,1,204,1,204,1,204,1,204,1,204,1,204,1,204,1,204,1,204,1,204,3,204,
  	2507,8,204,1,205,1,205,1,205,1,206,1,206,1,206,1,206,1,206,1,206,1,206,
  	1,206,3,206,2520,8,206,1,206,1,206,1,206,1,206,3,206,2526,8,206,1,207,
  	1,207,1,207,1,207,1,207,1,208,1,208,1,208,1,208,1,208,1,208,1,208,1,208,
  	1,208,1,208,1,208,1,208,3,208,2545,8,208,1,209,1,209,1,209,1,209,1,209,
  	1,209,1,210,1,210,1,210,3,210,2556,8,210,1,210,1,210,3,210,2560,8,210,
  	1,210,1,210,1,211,1,211,3,211,2566,8,211,1,211,1,211,3,211,2570,8,211,
  	1,211,1,211,3,211,2574,8,211,1,211,1,211,1,211,1,211,1,211,3,211,2581,
  	8,211,1,212,1,212,1,212,1,212,1,212,3,212,2588,8,212,1,212,3,212,2591,
  	8,212,1,212,1,212,5,212,2595,8,212,10,212,12,212,2598,9,212,1,213,1,213,
  	1,213,1,213,3,213,2604,8,213,1,213,1,213,1,213,3,213,2609,8,213,1,213,
  	3,213,2612,8,213,1,213,1,213,1,213,1,213,1,213,1,213,3,213,2620,8,213,
  	1,214,1,214,1,214,1,214,3,214,2626,8,214,1,215,1,215,3,215,2630,8,215,
  	1,215,1,215,1,216,1,216,3,216,2636,8,216,1,216,1,216,3,216,2640,8,216,
  	1,217,1,217,1,217,0,0,218,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,
  	32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,
  	78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,
  	118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,
  	154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,
  	190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,
  	226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,258,260,
  	262,264,266,268,270,272,274,276,278,280,282,284,286,288,290,292,294,296,
  	298,300,302,304,306,308,310,312,314,316,318,320,322,324,326,328,330,332,
  	334,336,338,340,342,344,346,348,350,352,354,356,358,360,362,364,366,368,
  	370,372,374,376,378,380,382,384,386,388,390,392,394,396,398,400,402,404,
  	406,408,410,412,414,416,418,420,422,424,426,428,430,432,434,0,19,8,0,
  	21,21,24,24,55,55,63,63,83,83,87,87,99,100,104,104,2,0,34,34,45,45,3,
  	0,54,54,72,72,80,80,1,0,156,157,2,0,146,147,158,159,1,0,135,136,1,0,137,
  	139,14,0,18,18,21,21,24,24,29,29,34,34,45,45,55,55,63,63,68,68,83,83,
  	87,87,91,91,99,100,104,104,2,0,14,14,32,32,2,0,15,15,103,103,12,0,9,9,
  	15,15,41,41,57,57,66,66,73,73,75,79,84,84,90,90,103,103,107,107,109,109,
  	2,0,40,40,53,53,2,0,17,17,94,94,2,0,137,137,148,148,2,0,54,54,72,72,2,
  	0,42,42,96,96,19,0,9,9,13,13,17,19,21,31,33,34,36,37,39,47,50,50,52,57,
  	59,59,62,63,65,68,70,70,72,74,76,80,82,84,87,105,107,109,112,112,1,0,
  	79,80,20,0,10,12,14,16,20,20,32,32,35,35,38,38,48,49,51,51,58,58,60,61,
  	64,64,69,69,71,71,75,75,81,81,85,86,102,102,106,106,110,111,113,114,2914,
  	0,437,1,0,0,0,2,461,1,0,0,0,4,473,1,0,0,0,6,487,1,0,0,0,8,489,1,0,0,0,
  	10,499,1,0,0,0,12,505,1,0,0,0,14,510,1,0,0,0,16,512,1,0,0,0,18,514,1,
  	0,0,0,20,520,1,0,0,0,22,522,1,0,0,0,24,533,1,0,0,0,26,544,1,0,0,0,28,
  	559,1,0,0,0,30,564,1,0,0,0,32,574,1,0,0,0,34,587,1,0,0,0,36,589,1,0,0,
  	0,38,597,1,0,0,0,40,605,1,0,0,0,42,613,1,0,0,0,44,621,1,0,0,0,46,629,
  	1,0,0,0,48,637,1,0,0,0,50,645,1,0,0,0,52,653,1,0,0,0,54,665,1,0,0,0,56,
  	676,1,0,0,0,58,684,1,0,0,0,60,692,1,0,0,0,62,704,1,0,0,0,64,712,1,0,0,
  	0,66,727,1,0,0,0,68,755,1,0,0,0,70,757,1,0,0,0,72,916,1,0,0,0,74,920,
  	1,0,0,0,76,922,1,0,0,0,78,926,1,0,0,0,80,934,1,0,0,0,82,950,1,0,0,0,84,
  	954,1,0,0,0,86,956,1,0,0,0,88,966,1,0,0,0,90,968,1,0,0,0,92,977,1,0,0,
  	0,94,990,1,0,0,0,96,997,1,0,0,0,98,999,1,0,0,0,100,1018,1,0,0,0,102,1020,
  	1,0,0,0,104,1029,1,0,0,0,106,1042,1,0,0,0,108,1044,1,0,0,0,110,1065,1,
  	0,0,0,112,1074,1,0,0,0,114,1091,1,0,0,0,116,1102,1,0,0,0,118,1107,1,0,
  	0,0,120,1124,1,0,0,0,122,1126,1,0,0,0,124,1135,1,0,0,0,126,1140,1,0,0,
  	0,128,1150,1,0,0,0,130,1152,1,0,0,0,132,1155,1,0,0,0,134,1166,1,0,0,0,
  	136,1178,1,0,0,0,138,1180,1,0,0,0,140,1185,1,0,0,0,142,1188,1,0,0,0,144,
  	1203,1,0,0,0,146,1212,1,0,0,0,148,1223,1,0,0,0,150,1225,1,0,0,0,152,1232,
  	1,0,0,0,154,1241,1,0,0,0,156,1243,1,0,0,0,158,1247,1,0,0,0,160,1268,1,
  	0,0,0,162,1275,1,0,0,0,164,1277,1,0,0,0,166,1283,1,0,0,0,168,1415,1,0,
  	0,0,170,1417,1,0,0,0,172,1444,1,0,0,0,174,1448,1,0,0,0,176,1450,1,0,0,
  	0,178,1461,1,0,0,0,180,1463,1,0,0,0,182,1469,1,0,0,0,184,1472,1,0,0,0,
  	186,1487,1,0,0,0,188,1489,1,0,0,0,190,1493,1,0,0,0,192,1506,1,0,0,0,194,
  	1508,1,0,0,0,196,1527,1,0,0,0,198,1529,1,0,0,0,200,1541,1,0,0,0,202,1547,
  	1,0,0,0,204,1552,1,0,0,0,206,1557,1,0,0,0,208,1559,1,0,0,0,210,1565,1,
  	0,0,0,212,1573,1,0,0,0,214,1586,1,0,0,0,216,1590,1,0,0,0,218,1596,1,0,
  	0,0,220,1615,1,0,0,0,222,1618,1,0,0,0,224,1624,1,0,0,0,226,1627,1,0,0,
  	0,228,1639,1,0,0,0,230,1645,1,0,0,0,232,1657,1,0,0,0,234,1661,1,0,0,0,
  	236,1670,1,0,0,0,238,1679,1,0,0,0,240,1683,1,0,0,0,242,1698,1,0,0,0,244,
  	1707,1,0,0,0,246,1709,1,0,0,0,248,1717,1,0,0,0,250,1721,1,0,0,0,252,1728,
  	1,0,0,0,254,1733,1,0,0,0,256,1743,1,0,0,0,258,1747,1,0,0,0,260,1768,1,
  	0,0,0,262,1775,1,0,0,0,264,1789,1,0,0,0,266,1797,1,0,0,0,268,1801,1,0,
  	0,0,270,1809,1,0,0,0,272,1816,1,0,0,0,274,1820,1,0,0,0,276,1822,1,0,0,
  	0,278,1826,1,0,0,0,280,1834,1,0,0,0,282,1836,1,0,0,0,284,1852,1,0,0,0,
  	286,1862,1,0,0,0,288,1865,1,0,0,0,290,1872,1,0,0,0,292,1890,1,0,0,0,294,
  	1899,1,0,0,0,296,1914,1,0,0,0,298,1918,1,0,0,0,300,1921,1,0,0,0,302,1934,
  	1,0,0,0,304,1940,1,0,0,0,306,1967,1,0,0,0,308,1969,1,0,0,0,310,1976,1,
  	0,0,0,312,1986,1,0,0,0,314,1988,1,0,0,0,316,1991,1,0,0,0,318,2001,1,0,
  	0,0,320,2018,1,0,0,0,322,2030,1,0,0,0,324,2039,1,0,0,0,326,2055,1,0,0,
  	0,328,2067,1,0,0,0,330,2074,1,0,0,0,332,2076,1,0,0,0,334,2079,1,0,0,0,
  	336,2089,1,0,0,0,338,2160,1,0,0,0,340,2182,1,0,0,0,342,2185,1,0,0,0,344,
  	2202,1,0,0,0,346,2209,1,0,0,0,348,2220,1,0,0,0,350,2223,1,0,0,0,352,2227,
  	1,0,0,0,354,2241,1,0,0,0,356,2243,1,0,0,0,358,2251,1,0,0,0,360,2269,1,
  	0,0,0,362,2288,1,0,0,0,364,2290,1,0,0,0,366,2298,1,0,0,0,368,2307,1,0,
  	0,0,370,2309,1,0,0,0,372,2343,1,0,0,0,374,2345,1,0,0,0,376,2349,1,0,0,
  	0,378,2353,1,0,0,0,380,2365,1,0,0,0,382,2367,1,0,0,0,384,2373,1,0,0,0,
  	386,2375,1,0,0,0,388,2384,1,0,0,0,390,2397,1,0,0,0,392,2403,1,0,0,0,394,
  	2405,1,0,0,0,396,2421,1,0,0,0,398,2423,1,0,0,0,400,2439,1,0,0,0,402,2456,
  	1,0,0,0,404,2471,1,0,0,0,406,2480,1,0,0,0,408,2496,1,0,0,0,410,2508,1,
  	0,0,0,412,2511,1,0,0,0,414,2527,1,0,0,0,416,2532,1,0,0,0,418,2546,1,0,
  	0,0,420,2552,1,0,0,0,422,2563,1,0,0,0,424,2587,1,0,0,0,426,2599,1,0,0,
  	0,428,2621,1,0,0,0,430,2627,1,0,0,0,432,2633,1,0,0,0,434,2641,1,0,0,0,
  	436,438,5,1,0,0,437,436,1,0,0,0,437,438,1,0,0,0,438,440,1,0,0,0,439,441,
  	3,214,107,0,440,439,1,0,0,0,440,441,1,0,0,0,441,443,1,0,0,0,442,444,3,
  	218,109,0,443,442,1,0,0,0,443,444,1,0,0,0,444,448,1,0,0,0,445,447,3,346,
  	173,0,446,445,1,0,0,0,447,450,1,0,0,0,448,446,1,0,0,0,448,449,1,0,0,0,
  	449,452,1,0,0,0,450,448,1,0,0,0,451,453,3,222,111,0,452,451,1,0,0,0,452,
  	453,1,0,0,0,453,454,1,0,0,0,454,455,5,0,0,1,455,1,1,0,0,0,456,458,3,434,
  	217,0,457,459,3,22,11,0,458,457,1,0,0,0,458,459,1,0,0,0,459,462,1,0,0,
  	0,460,462,3,228,114,0,461,456,1,0,0,0,461,460,1,0,0,0,462,470,1,0,0,0,
  	463,464,5,131,0,0,464,466,3,434,217,0,465,467,3,22,11,0,466,465,1,0,0,
  	0,466,467,1,0,0,0,467,469,1,0,0,0,468,463,1,0,0,0,469,472,1,0,0,0,470,
  	468,1,0,0,0,470,471,1,0,0,0,471,3,1,0,0,0,472,470,1,0,0,0,473,479,3,6,
  	3,0,474,478,5,148,0,0,475,478,3,322,161,0,476,478,5,137,0,0,477,474,1,
  	0,0,0,477,475,1,0,0,0,477,476,1,0,0,0,478,481,1,0,0,0,479,477,1,0,0,0,
  	479,480,1,0,0,0,480,5,1,0,0,0,481,479,1,0,0,0,482,488,3,12,6,0,483,488,
  	3,20,10,0,484,485,5,108,0,0,485,488,5,137,0,0,486,488,3,8,4,0,487,482,
  	1,0,0,0,487,483,1,0,0,0,487,484,1,0,0,0,487,486,1,0,0,0,488,7,1,0,0,0,
  	489,490,5,129,0,0,490,493,3,10,5,0,491,492,5,132,0,0,492,494,3,10,5,0,
  	493,491,1,0,0,0,494,495,1,0,0,0,495,493,1,0,0,0,495,496,1,0,0,0,496,497,
  	1,0,0,0,497,498,5,130,0,0,498,9,1,0,0,0,499,501,3,4,2,0,500,502,3,434,
  	217,0,501,500,1,0,0,0,501,502,1,0,0,0,502,11,1,0,0,0,503,506,3,14,7,0,
  	504,506,5,18,0,0,505,503,1,0,0,0,505,504,1,0,0,0,506,13,1,0,0,0,507,511,
  	3,16,8,0,508,511,3,18,9,0,509,511,5,29,0,0,510,507,1,0,0,0,510,508,1,
  	0,0,0,510,509,1,0,0,0,511,15,1,0,0,0,512,513,7,0,0,0,513,17,1,0,0,0,514,
  	515,7,1,0,0,515,19,1,0,0,0,516,521,3,2,1,0,517,521,5,68,0,0,518,521,5,
  	35,0,0,519,521,5,91,0,0,520,516,1,0,0,0,520,517,1,0,0,0,520,518,1,0,0,
  	0,520,519,1,0,0,0,521,21,1,0,0,0,522,523,5,146,0,0,523,528,3,4,2,0,524,
  	525,5,132,0,0,525,527,3,4,2,0,526,524,1,0,0,0,527,530,1,0,0,0,528,526,
  	1,0,0,0,528,529,1,0,0,0,529,531,1,0,0,0,530,528,1,0,0,0,531,532,5,147,
  	0,0,532,23,1,0,0,0,533,538,3,26,13,0,534,535,5,132,0,0,535,537,3,26,13,
  	0,536,534,1,0,0,0,537,540,1,0,0,0,538,536,1,0,0,0,538,539,1,0,0,0,539,
  	25,1,0,0,0,540,538,1,0,0,0,541,542,3,434,217,0,542,543,5,133,0,0,543,
  	545,1,0,0,0,544,541,1,0,0,0,544,545,1,0,0,0,545,547,1,0,0,0,546,548,7,
  	2,0,0,547,546,1,0,0,0,547,548,1,0,0,0,548,551,1,0,0,0,549,552,5,106,0,
  	0,550,552,3,4,2,0,551,549,1,0,0,0,551,550,1,0,0,0,551,552,1,0,0,0,552,
  	553,1,0,0,0,553,554,3,28,14,0,554,27,1,0,0,0,555,560,3,32,16,0,556,560,
  	3,30,15,0,557,558,5,80,0,0,558,560,3,30,15,0,559,555,1,0,0,0,559,556,
  	1,0,0,0,559,557,1,0,0,0,560,29,1,0,0,0,561,565,3,118,59,0,562,565,3,130,
  	65,0,563,565,3,36,18,0,564,561,1,0,0,0,564,562,1,0,0,0,564,563,1,0,0,
  	0,565,31,1,0,0,0,566,567,3,68,34,0,567,568,3,34,17,0,568,569,3,28,14,
  	0,569,575,1,0,0,0,570,571,3,68,34,0,571,572,5,170,0,0,572,573,3,74,37,
  	0,573,575,1,0,0,0,574,566,1,0,0,0,574,570,1,0,0,0,575,33,1,0,0,0,576,
  	588,5,145,0,0,577,588,5,160,0,0,578,588,5,161,0,0,579,588,5,162,0,0,580,
  	588,5,163,0,0,581,588,5,164,0,0,582,588,5,165,0,0,583,588,5,166,0,0,584,
  	588,5,167,0,0,585,588,5,169,0,0,586,588,3,378,189,0,587,576,1,0,0,0,587,
  	577,1,0,0,0,587,578,1,0,0,0,587,579,1,0,0,0,587,580,1,0,0,0,587,581,1,
  	0,0,0,587,582,1,0,0,0,587,583,1,0,0,0,587,584,1,0,0,0,587,585,1,0,0,0,
  	587,586,1,0,0,0,588,35,1,0,0,0,589,595,3,38,19,0,590,591,5,148,0,0,591,
  	592,3,74,37,0,592,593,5,133,0,0,593,594,3,74,37,0,594,596,1,0,0,0,595,
  	590,1,0,0,0,595,596,1,0,0,0,596,37,1,0,0,0,597,603,3,40,20,0,598,601,
  	5,150,0,0,599,602,3,38,19,0,600,602,3,76,38,0,601,599,1,0,0,0,601,600,
  	1,0,0,0,602,604,1,0,0,0,603,598,1,0,0,0,603,604,1,0,0,0,604,39,1,0,0,
  	0,605,610,3,42,21,0,606,607,5,154,0,0,607,609,3,42,21,0,608,606,1,0,0,
  	0,609,612,1,0,0,0,610,608,1,0,0,0,610,611,1,0,0,0,611,41,1,0,0,0,612,
  	610,1,0,0,0,613,618,3,44,22,0,614,615,5,153,0,0,615,617,3,44,22,0,616,
  	614,1,0,0,0,617,620,1,0,0,0,618,616,1,0,0,0,618,619,1,0,0,0,619,43,1,
  	0,0,0,620,618,1,0,0,0,621,626,3,46,23,0,622,623,5,141,0,0,623,625,3,46,
  	23,0,624,622,1,0,0,0,625,628,1,0,0,0,626,624,1,0,0,0,626,627,1,0,0,0,
  	627,45,1,0,0,0,628,626,1,0,0,0,629,634,3,48,24,0,630,631,5,142,0,0,631,
  	633,3,48,24,0,632,630,1,0,0,0,633,636,1,0,0,0,634,632,1,0,0,0,634,635,
  	1,0,0,0,635,47,1,0,0,0,636,634,1,0,0,0,637,642,3,50,25,0,638,639,5,140,
  	0,0,639,641,3,50,25,0,640,638,1,0,0,0,641,644,1,0,0,0,642,640,1,0,0,0,
  	642,643,1,0,0,0,643,49,1,0,0,0,644,642,1,0,0,0,645,650,3,52,26,0,646,
  	647,7,3,0,0,647,649,3,52,26,0,648,646,1,0,0,0,649,652,1,0,0,0,650,648,
  	1,0,0,0,650,651,1,0,0,0,651,51,1,0,0,0,652,650,1,0,0,0,653,662,3,54,27,
  	0,654,655,7,4,0,0,655,661,3,54,27,0,656,657,5,59,0,0,657,661,3,112,56,
  	0,658,659,5,13,0,0,659,661,3,4,2,0,660,654,1,0,0,0,660,656,1,0,0,0,660,
  	658,1,0,0,0,661,664,1,0,0,0,662,660,1,0,0,0,662,663,1,0,0,0,663,53,1,
  	0,0,0,664,662,1,0,0,0,665,673,3,56,28,0,666,669,5,168,0,0,667,669,3,376,
  	188,0,668,666,1,0,0,0,668,667,1,0,0,0,669,670,1,0,0,0,670,672,3,56,28,
  	0,671,668,1,0,0,0,672,675,1,0,0,0,673,671,1,0,0,0,673,674,1,0,0,0,674,
  	55,1,0,0,0,675,673,1,0,0,0,676,681,3,58,29,0,677,678,7,5,0,0,678,680,
  	3,58,29,0,679,677,1,0,0,0,680,683,1,0,0,0,681,679,1,0,0,0,681,682,1,0,
  	0,0,682,57,1,0,0,0,683,681,1,0,0,0,684,689,3,60,30,0,685,686,7,6,0,0,
  	686,688,3,60,30,0,687,685,1,0,0,0,688,691,1,0,0,0,689,687,1,0,0,0,689,
  	690,1,0,0,0,690,59,1,0,0,0,691,689,1,0,0,0,692,702,3,66,33,0,693,694,
  	5,93,0,0,694,699,5,125,0,0,695,697,3,62,31,0,696,698,5,132,0,0,697,696,
  	1,0,0,0,697,698,1,0,0,0,698,700,1,0,0,0,699,695,1,0,0,0,699,700,1,0,0,
  	0,700,701,1,0,0,0,701,703,5,126,0,0,702,693,1,0,0,0,702,703,1,0,0,0,703,
  	61,1,0,0,0,704,709,3,64,32,0,705,706,5,132,0,0,706,708,3,64,32,0,707,
  	705,1,0,0,0,708,711,1,0,0,0,709,707,1,0,0,0,709,710,1,0,0,0,710,63,1,
  	0,0,0,711,709,1,0,0,0,712,714,3,28,14,0,713,715,3,188,94,0,714,713,1,
  	0,0,0,714,715,1,0,0,0,715,716,1,0,0,0,716,717,3,374,187,0,717,718,3,74,
  	37,0,718,65,1,0,0,0,719,728,3,68,34,0,720,722,3,68,34,0,721,720,1,0,0,
  	0,721,722,1,0,0,0,722,723,1,0,0,0,723,725,5,171,0,0,724,726,3,68,34,0,
  	725,724,1,0,0,0,725,726,1,0,0,0,726,728,1,0,0,0,727,719,1,0,0,0,727,721,
  	1,0,0,0,728,67,1,0,0,0,729,756,3,70,35,0,730,731,5,135,0,0,731,756,3,
  	68,34,0,732,733,5,136,0,0,733,756,3,68,34,0,734,735,5,143,0,0,735,756,
  	3,68,34,0,736,737,5,144,0,0,737,756,3,68,34,0,738,739,5,151,0,0,739,756,
  	3,68,34,0,740,741,5,152,0,0,741,756,3,68,34,0,742,743,5,129,0,0,743,744,
  	3,4,2,0,744,745,5,130,0,0,745,746,3,68,34,0,746,756,1,0,0,0,747,748,5,
  	16,0,0,748,756,3,68,34,0,749,750,5,140,0,0,750,756,3,68,34,0,751,752,
  	5,137,0,0,752,756,3,68,34,0,753,754,5,142,0,0,754,756,3,68,34,0,755,729,
  	1,0,0,0,755,730,1,0,0,0,755,732,1,0,0,0,755,734,1,0,0,0,755,736,1,0,0,
  	0,755,738,1,0,0,0,755,740,1,0,0,0,755,742,1,0,0,0,755,747,1,0,0,0,755,
  	749,1,0,0,0,755,751,1,0,0,0,755,753,1,0,0,0,756,69,1,0,0,0,757,759,3,
  	72,36,0,758,760,5,143,0,0,759,758,1,0,0,0,759,760,1,0,0,0,760,764,1,0,
  	0,0,761,763,3,80,40,0,762,761,1,0,0,0,763,766,1,0,0,0,764,762,1,0,0,0,
  	764,765,1,0,0,0,765,768,1,0,0,0,766,764,1,0,0,0,767,769,5,143,0,0,768,
  	767,1,0,0,0,768,769,1,0,0,0,769,792,1,0,0,0,770,777,3,78,39,0,771,777,
  	3,430,215,0,772,777,5,151,0,0,773,777,5,152,0,0,774,775,5,155,0,0,775,
  	777,3,434,217,0,776,770,1,0,0,0,776,771,1,0,0,0,776,772,1,0,0,0,776,773,
  	1,0,0,0,776,774,1,0,0,0,777,779,1,0,0,0,778,780,5,143,0,0,779,778,1,0,
  	0,0,779,780,1,0,0,0,780,784,1,0,0,0,781,783,3,80,40,0,782,781,1,0,0,0,
  	783,786,1,0,0,0,784,782,1,0,0,0,784,785,1,0,0,0,785,788,1,0,0,0,786,784,
  	1,0,0,0,787,789,5,143,0,0,788,787,1,0,0,0,788,789,1,0,0,0,789,791,1,0,
  	0,0,790,776,1,0,0,0,791,794,1,0,0,0,792,790,1,0,0,0,792,793,1,0,0,0,793,
  	71,1,0,0,0,794,792,1,0,0,0,795,917,3,380,190,0,796,798,3,434,217,0,797,
  	799,3,22,11,0,798,797,1,0,0,0,798,799,1,0,0,0,799,917,1,0,0,0,800,801,
  	5,129,0,0,801,802,3,28,14,0,802,803,5,130,0,0,803,917,1,0,0,0,804,917,
  	3,84,42,0,805,917,3,228,114,0,806,917,5,115,0,0,807,917,5,94,0,0,808,
  	818,5,17,0,0,809,810,5,131,0,0,810,812,3,434,217,0,811,813,3,22,11,0,
  	812,811,1,0,0,0,812,813,1,0,0,0,813,819,1,0,0,0,814,815,5,127,0,0,815,
  	816,3,86,43,0,816,817,5,128,0,0,817,819,1,0,0,0,818,809,1,0,0,0,818,814,
  	1,0,0,0,819,917,1,0,0,0,820,849,5,66,0,0,821,843,3,4,2,0,822,844,3,432,
  	216,0,823,844,3,88,44,0,824,825,5,127,0,0,825,826,3,86,43,0,826,830,5,
  	128,0,0,827,829,3,322,161,0,828,827,1,0,0,0,829,832,1,0,0,0,830,828,1,
  	0,0,0,830,831,1,0,0,0,831,834,1,0,0,0,832,830,1,0,0,0,833,835,3,324,162,
  	0,834,833,1,0,0,0,834,835,1,0,0,0,835,844,1,0,0,0,836,838,3,322,161,0,
  	837,836,1,0,0,0,838,839,1,0,0,0,839,837,1,0,0,0,839,840,1,0,0,0,840,841,
  	1,0,0,0,841,842,3,324,162,0,842,844,1,0,0,0,843,822,1,0,0,0,843,823,1,
  	0,0,0,843,824,1,0,0,0,843,837,1,0,0,0,844,850,1,0,0,0,845,850,3,102,51,
  	0,846,847,3,322,161,0,847,848,3,324,162,0,848,850,1,0,0,0,849,821,1,0,
  	0,0,849,845,1,0,0,0,849,846,1,0,0,0,850,917,1,0,0,0,851,852,5,129,0,0,
  	852,855,3,26,13,0,853,854,5,132,0,0,854,856,3,26,13,0,855,853,1,0,0,0,
  	856,857,1,0,0,0,857,855,1,0,0,0,857,858,1,0,0,0,858,859,1,0,0,0,859,860,
  	5,130,0,0,860,917,1,0,0,0,861,862,5,98,0,0,862,866,5,129,0,0,863,867,
  	3,108,54,0,864,867,3,4,2,0,865,867,5,108,0,0,866,863,1,0,0,0,866,864,
  	1,0,0,0,866,865,1,0,0,0,867,868,1,0,0,0,868,917,5,130,0,0,869,870,5,25,
  	0,0,870,871,5,129,0,0,871,872,3,28,14,0,872,873,5,130,0,0,873,917,1,0,
  	0,0,874,875,5,101,0,0,875,876,5,129,0,0,876,877,3,28,14,0,877,878,5,130,
  	0,0,878,917,1,0,0,0,879,884,5,30,0,0,880,881,5,129,0,0,881,882,3,4,2,
  	0,882,883,5,130,0,0,883,885,1,0,0,0,884,880,1,0,0,0,884,885,1,0,0,0,885,
  	917,1,0,0,0,886,888,5,15,0,0,887,886,1,0,0,0,887,888,1,0,0,0,888,889,
  	1,0,0,0,889,895,5,31,0,0,890,892,5,129,0,0,891,893,3,122,61,0,892,891,
  	1,0,0,0,892,893,1,0,0,0,893,894,1,0,0,0,894,896,5,130,0,0,895,890,1,0,
  	0,0,895,896,1,0,0,0,896,897,1,0,0,0,897,917,3,170,85,0,898,899,5,88,0,
  	0,899,900,5,129,0,0,900,901,3,4,2,0,901,902,5,130,0,0,902,917,1,0,0,0,
  	903,904,5,64,0,0,904,910,5,129,0,0,905,906,3,434,217,0,906,907,5,131,
  	0,0,907,909,1,0,0,0,908,905,1,0,0,0,909,912,1,0,0,0,910,908,1,0,0,0,910,
  	911,1,0,0,0,911,913,1,0,0,0,912,910,1,0,0,0,913,914,3,434,217,0,914,915,
  	5,130,0,0,915,917,1,0,0,0,916,795,1,0,0,0,916,796,1,0,0,0,916,800,1,0,
  	0,0,916,804,1,0,0,0,916,805,1,0,0,0,916,806,1,0,0,0,916,807,1,0,0,0,916,
  	808,1,0,0,0,916,820,1,0,0,0,916,851,1,0,0,0,916,861,1,0,0,0,916,869,1,
  	0,0,0,916,874,1,0,0,0,916,879,1,0,0,0,916,887,1,0,0,0,916,898,1,0,0,0,
  	916,903,1,0,0,0,917,73,1,0,0,0,918,921,3,28,14,0,919,921,3,76,38,0,920,
  	918,1,0,0,0,920,919,1,0,0,0,921,75,1,0,0,0,922,923,5,95,0,0,923,924,3,
  	28,14,0,924,77,1,0,0,0,925,927,5,148,0,0,926,925,1,0,0,0,926,927,1,0,
  	0,0,927,928,1,0,0,0,928,929,5,131,0,0,929,931,3,434,217,0,930,932,3,22,
  	11,0,931,930,1,0,0,0,931,932,1,0,0,0,932,79,1,0,0,0,933,935,5,148,0,0,
  	934,933,1,0,0,0,934,935,1,0,0,0,935,936,1,0,0,0,936,937,5,127,0,0,937,
  	942,3,82,41,0,938,939,5,132,0,0,939,941,3,82,41,0,940,938,1,0,0,0,941,
  	944,1,0,0,0,942,940,1,0,0,0,942,943,1,0,0,0,943,945,1,0,0,0,944,942,1,
  	0,0,0,945,946,5,128,0,0,946,81,1,0,0,0,947,948,3,434,217,0,948,949,5,
  	133,0,0,949,951,1,0,0,0,950,947,1,0,0,0,950,951,1,0,0,0,951,952,1,0,0,
  	0,952,953,3,28,14,0,953,83,1,0,0,0,954,955,7,7,0,0,955,85,1,0,0,0,956,
  	961,3,28,14,0,957,958,5,132,0,0,958,960,3,28,14,0,959,957,1,0,0,0,960,
  	963,1,0,0,0,961,959,1,0,0,0,961,962,1,0,0,0,962,87,1,0,0,0,963,961,1,
  	0,0,0,964,967,3,90,45,0,965,967,3,98,49,0,966,964,1,0,0,0,966,965,1,0,
  	0,0,967,89,1,0,0,0,968,973,5,125,0,0,969,971,3,92,46,0,970,972,5,132,
  	0,0,971,970,1,0,0,0,971,972,1,0,0,0,972,974,1,0,0,0,973,969,1,0,0,0,973,
  	974,1,0,0,0,974,975,1,0,0,0,975,976,5,126,0,0,976,91,1,0,0,0,977,982,
  	3,94,47,0,978,979,5,132,0,0,979,981,3,94,47,0,980,978,1,0,0,0,981,984,
  	1,0,0,0,982,980,1,0,0,0,982,983,1,0,0,0,983,93,1,0,0,0,984,982,1,0,0,
  	0,985,991,3,434,217,0,986,987,5,127,0,0,987,988,3,28,14,0,988,989,5,128,
  	0,0,989,991,1,0,0,0,990,985,1,0,0,0,990,986,1,0,0,0,991,992,1,0,0,0,992,
  	993,5,145,0,0,993,994,3,96,48,0,994,95,1,0,0,0,995,998,3,28,14,0,996,
  	998,3,88,44,0,997,995,1,0,0,0,997,996,1,0,0,0,998,97,1,0,0,0,999,1000,
  	5,125,0,0,1000,1005,3,100,50,0,1001,1002,5,132,0,0,1002,1004,3,100,50,
  	0,1003,1001,1,0,0,0,1004,1007,1,0,0,0,1005,1003,1,0,0,0,1005,1006,1,0,
  	0,0,1006,1009,1,0,0,0,1007,1005,1,0,0,0,1008,1010,5,132,0,0,1009,1008,
  	1,0,0,0,1009,1010,1,0,0,0,1010,1011,1,0,0,0,1011,1012,5,126,0,0,1012,
  	99,1,0,0,0,1013,1019,3,30,15,0,1014,1015,5,125,0,0,1015,1016,3,86,43,
  	0,1016,1017,5,126,0,0,1017,1019,1,0,0,0,1018,1013,1,0,0,0,1018,1014,1,
  	0,0,0,1019,101,1,0,0,0,1020,1025,5,125,0,0,1021,1023,3,104,52,0,1022,
  	1024,5,132,0,0,1023,1022,1,0,0,0,1023,1024,1,0,0,0,1024,1026,1,0,0,0,
  	1025,1021,1,0,0,0,1025,1026,1,0,0,0,1026,1027,1,0,0,0,1027,1028,5,126,
  	0,0,1028,103,1,0,0,0,1029,1034,3,106,53,0,1030,1031,5,132,0,0,1031,1033,
  	3,106,53,0,1032,1030,1,0,0,0,1033,1036,1,0,0,0,1034,1032,1,0,0,0,1034,
  	1035,1,0,0,0,1035,105,1,0,0,0,1036,1034,1,0,0,0,1037,1043,3,70,35,0,1038,
  	1039,3,434,217,0,1039,1040,5,145,0,0,1040,1041,3,28,14,0,1041,1043,1,
  	0,0,0,1042,1037,1,0,0,0,1042,1038,1,0,0,0,1043,107,1,0,0,0,1044,1053,
  	3,434,217,0,1045,1047,3,110,55,0,1046,1045,1,0,0,0,1046,1047,1,0,0,0,
  	1047,1054,1,0,0,0,1048,1049,5,149,0,0,1049,1051,3,434,217,0,1050,1052,
  	3,110,55,0,1051,1050,1,0,0,0,1051,1052,1,0,0,0,1052,1054,1,0,0,0,1053,
  	1046,1,0,0,0,1053,1048,1,0,0,0,1054,1062,1,0,0,0,1055,1056,5,131,0,0,
  	1056,1058,3,434,217,0,1057,1059,3,110,55,0,1058,1057,1,0,0,0,1058,1059,
  	1,0,0,0,1059,1061,1,0,0,0,1060,1055,1,0,0,0,1061,1064,1,0,0,0,1062,1060,
  	1,0,0,0,1062,1063,1,0,0,0,1063,109,1,0,0,0,1064,1062,1,0,0,0,1065,1069,
  	5,146,0,0,1066,1068,5,132,0,0,1067,1066,1,0,0,0,1068,1071,1,0,0,0,1069,
  	1067,1,0,0,0,1069,1070,1,0,0,0,1070,1072,1,0,0,0,1071,1069,1,0,0,0,1072,
  	1073,5,147,0,0,1073,111,1,0,0,0,1074,1079,3,6,3,0,1075,1078,3,322,161,
  	0,1076,1078,5,137,0,0,1077,1075,1,0,0,0,1077,1076,1,0,0,0,1078,1081,1,
  	0,0,0,1079,1077,1,0,0,0,1079,1080,1,0,0,0,1080,1083,1,0,0,0,1081,1079,
  	1,0,0,0,1082,1084,5,148,0,0,1083,1082,1,0,0,0,1083,1084,1,0,0,0,1084,
  	1086,1,0,0,0,1085,1087,3,114,57,0,1086,1085,1,0,0,0,1086,1087,1,0,0,0,
  	1087,1089,1,0,0,0,1088,1090,3,434,217,0,1089,1088,1,0,0,0,1089,1090,1,
  	0,0,0,1090,113,1,0,0,0,1091,1092,5,125,0,0,1092,1097,3,116,58,0,1093,
  	1094,5,132,0,0,1094,1096,3,116,58,0,1095,1093,1,0,0,0,1096,1099,1,0,0,
  	0,1097,1095,1,0,0,0,1097,1098,1,0,0,0,1098,1100,1,0,0,0,1099,1097,1,0,
  	0,0,1100,1101,5,126,0,0,1101,115,1,0,0,0,1102,1103,3,434,217,0,1103,1104,
  	5,133,0,0,1104,1105,3,28,14,0,1105,117,1,0,0,0,1106,1108,5,15,0,0,1107,
  	1106,1,0,0,0,1107,1108,1,0,0,0,1108,1109,1,0,0,0,1109,1110,3,120,60,0,
  	1110,1111,3,374,187,0,1111,1112,3,128,64,0,1112,119,1,0,0,0,1113,1114,
  	5,129,0,0,1114,1125,5,130,0,0,1115,1116,5,129,0,0,1116,1117,3,122,61,
  	0,1117,1118,5,130,0,0,1118,1125,1,0,0,0,1119,1120,5,129,0,0,1120,1121,
  	3,126,63,0,1121,1122,5,130,0,0,1122,1125,1,0,0,0,1123,1125,3,434,217,
  	0,1124,1113,1,0,0,0,1124,1115,1,0,0,0,1124,1119,1,0,0,0,1124,1123,1,0,
  	0,0,1125,121,1,0,0,0,1126,1131,3,124,62,0,1127,1128,5,132,0,0,1128,1130,
  	3,124,62,0,1129,1127,1,0,0,0,1130,1133,1,0,0,0,1131,1129,1,0,0,0,1131,
  	1132,1,0,0,0,1132,123,1,0,0,0,1133,1131,1,0,0,0,1134,1136,7,2,0,0,1135,
  	1134,1,0,0,0,1135,1136,1,0,0,0,1136,1137,1,0,0,0,1137,1138,3,4,2,0,1138,
  	1139,3,434,217,0,1139,125,1,0,0,0,1140,1145,3,434,217,0,1141,1142,5,132,
  	0,0,1142,1144,3,434,217,0,1143,1141,1,0,0,0,1144,1147,1,0,0,0,1145,1143,
  	1,0,0,0,1145,1146,1,0,0,0,1146,127,1,0,0,0,1147,1145,1,0,0,0,1148,1151,
  	3,74,37,0,1149,1151,3,170,85,0,1150,1148,1,0,0,0,1150,1149,1,0,0,0,1151,
  	129,1,0,0,0,1152,1153,3,132,66,0,1153,1154,3,134,67,0,1154,131,1,0,0,
  	0,1155,1157,5,48,0,0,1156,1158,3,4,2,0,1157,1156,1,0,0,0,1157,1158,1,
  	0,0,0,1158,1159,1,0,0,0,1159,1160,3,434,217,0,1160,1161,5,54,0,0,1161,
  	1162,3,28,14,0,1162,133,1,0,0,0,1163,1165,3,136,68,0,1164,1163,1,0,0,
  	0,1165,1168,1,0,0,0,1166,1164,1,0,0,0,1166,1167,1,0,0,0,1167,1169,1,0,
  	0,0,1168,1166,1,0,0,0,1169,1171,3,148,74,0,1170,1172,3,150,75,0,1171,
  	1170,1,0,0,0,1171,1172,1,0,0,0,1172,135,1,0,0,0,1173,1179,3,132,66,0,
  	1174,1179,3,138,69,0,1175,1179,3,140,70,0,1176,1179,3,142,71,0,1177,1179,
  	3,144,72,0,1178,1173,1,0,0,0,1178,1174,1,0,0,0,1178,1175,1,0,0,0,1178,
  	1176,1,0,0,0,1178,1177,1,0,0,0,1179,137,1,0,0,0,1180,1181,5,61,0,0,1181,
  	1182,3,434,217,0,1182,1183,5,145,0,0,1183,1184,3,28,14,0,1184,139,1,0,
  	0,0,1185,1186,5,111,0,0,1186,1187,3,28,14,0,1187,141,1,0,0,0,1188,1190,
  	5,60,0,0,1189,1191,3,4,2,0,1190,1189,1,0,0,0,1190,1191,1,0,0,0,1191,1192,
  	1,0,0,0,1192,1193,3,434,217,0,1193,1194,5,54,0,0,1194,1195,3,28,14,0,
  	1195,1196,5,69,0,0,1196,1197,3,28,14,0,1197,1198,5,38,0,0,1198,1201,3,
  	28,14,0,1199,1200,5,58,0,0,1200,1202,3,434,217,0,1201,1199,1,0,0,0,1201,
  	1202,1,0,0,0,1202,143,1,0,0,0,1203,1204,5,71,0,0,1204,1209,3,146,73,0,
  	1205,1206,5,132,0,0,1206,1208,3,146,73,0,1207,1205,1,0,0,0,1208,1211,
  	1,0,0,0,1209,1207,1,0,0,0,1209,1210,1,0,0,0,1210,145,1,0,0,0,1211,1209,
  	1,0,0,0,1212,1214,3,28,14,0,1213,1215,7,8,0,0,1214,1213,1,0,0,0,1214,
  	1215,1,0,0,0,1215,147,1,0,0,0,1216,1217,5,85,0,0,1217,1224,3,28,14,0,
  	1218,1219,5,51,0,0,1219,1220,3,28,14,0,1220,1221,5,20,0,0,1221,1222,3,
  	28,14,0,1222,1224,1,0,0,0,1223,1216,1,0,0,0,1223,1218,1,0,0,0,1224,149,
  	1,0,0,0,1225,1226,5,58,0,0,1226,1227,3,434,217,0,1227,1228,3,134,67,0,
  	1228,151,1,0,0,0,1229,1233,3,164,82,0,1230,1233,3,154,77,0,1231,1233,
  	3,166,83,0,1232,1229,1,0,0,0,1232,1230,1,0,0,0,1232,1231,1,0,0,0,1233,
  	153,1,0,0,0,1234,1235,3,172,86,0,1235,1236,5,134,0,0,1236,1242,1,0,0,
  	0,1237,1238,3,180,90,0,1238,1239,5,134,0,0,1239,1242,1,0,0,0,1240,1242,
  	3,156,78,0,1241,1234,1,0,0,0,1241,1237,1,0,0,0,1241,1240,1,0,0,0,1242,
  	155,1,0,0,0,1243,1244,3,158,79,0,1244,1245,3,162,81,0,1245,157,1,0,0,
  	0,1246,1248,3,160,80,0,1247,1246,1,0,0,0,1247,1248,1,0,0,0,1248,1249,
  	1,0,0,0,1249,1250,3,274,137,0,1250,1252,3,434,217,0,1251,1253,3,230,115,
  	0,1252,1251,1,0,0,0,1252,1253,1,0,0,0,1253,1254,1,0,0,0,1254,1256,5,129,
  	0,0,1255,1257,3,280,140,0,1256,1255,1,0,0,0,1256,1257,1,0,0,0,1257,1258,
  	1,0,0,0,1258,1260,5,130,0,0,1259,1261,3,238,119,0,1260,1259,1,0,0,0,1260,
  	1261,1,0,0,0,1261,159,1,0,0,0,1262,1264,7,9,0,0,1263,1265,5,90,0,0,1264,
  	1263,1,0,0,0,1264,1265,1,0,0,0,1265,1269,1,0,0,0,1266,1267,5,90,0,0,1267,
  	1269,7,9,0,0,1268,1262,1,0,0,0,1268,1266,1,0,0,0,1269,161,1,0,0,0,1270,
  	1276,3,170,85,0,1271,1272,3,374,187,0,1272,1273,3,74,37,0,1273,1274,5,
  	134,0,0,1274,1276,1,0,0,0,1275,1270,1,0,0,0,1275,1271,1,0,0,0,1276,163,
  	1,0,0,0,1277,1278,3,434,217,0,1278,1279,5,133,0,0,1279,1280,3,152,76,
  	0,1280,165,1,0,0,0,1281,1284,3,170,85,0,1282,1284,3,168,84,0,1283,1281,
  	1,0,0,0,1283,1282,1,0,0,0,1284,167,1,0,0,0,1285,1416,5,134,0,0,1286,1287,
  	3,28,14,0,1287,1288,5,134,0,0,1288,1416,1,0,0,0,1289,1290,5,52,0,0,1290,
  	1291,5,129,0,0,1291,1292,3,28,14,0,1292,1293,5,130,0,0,1293,1296,3,182,
  	91,0,1294,1295,5,36,0,0,1295,1297,3,182,91,0,1296,1294,1,0,0,0,1296,1297,
  	1,0,0,0,1297,1416,1,0,0,0,1298,1299,5,93,0,0,1299,1300,5,129,0,0,1300,
  	1301,3,28,14,0,1301,1302,5,130,0,0,1302,1306,5,125,0,0,1303,1305,3,184,
  	92,0,1304,1303,1,0,0,0,1305,1308,1,0,0,0,1306,1304,1,0,0,0,1306,1307,
  	1,0,0,0,1307,1309,1,0,0,0,1308,1306,1,0,0,0,1309,1310,5,126,0,0,1310,
  	1416,1,0,0,0,1311,1312,5,112,0,0,1312,1313,5,129,0,0,1313,1314,3,28,14,
  	0,1314,1315,5,130,0,0,1315,1316,3,166,83,0,1316,1416,1,0,0,0,1317,1318,
  	5,33,0,0,1318,1319,3,166,83,0,1319,1320,5,112,0,0,1320,1321,5,129,0,0,
  	1321,1322,3,28,14,0,1322,1323,5,130,0,0,1323,1324,5,134,0,0,1324,1416,
  	1,0,0,0,1325,1326,5,46,0,0,1326,1328,5,129,0,0,1327,1329,3,192,96,0,1328,
  	1327,1,0,0,0,1328,1329,1,0,0,0,1329,1330,1,0,0,0,1330,1332,5,134,0,0,
  	1331,1333,3,28,14,0,1332,1331,1,0,0,0,1332,1333,1,0,0,0,1333,1334,1,0,
  	0,0,1334,1336,5,134,0,0,1335,1337,3,194,97,0,1336,1335,1,0,0,0,1336,1337,
  	1,0,0,0,1337,1338,1,0,0,0,1338,1339,5,130,0,0,1339,1416,3,166,83,0,1340,
  	1342,5,16,0,0,1341,1340,1,0,0,0,1341,1342,1,0,0,0,1342,1343,1,0,0,0,1343,
  	1344,5,47,0,0,1344,1345,5,129,0,0,1345,1346,3,174,87,0,1346,1347,3,434,
  	217,0,1347,1348,5,54,0,0,1348,1349,3,28,14,0,1349,1350,5,130,0,0,1350,
  	1351,3,166,83,0,1351,1416,1,0,0,0,1352,1353,5,19,0,0,1353,1416,5,134,
  	0,0,1354,1355,5,28,0,0,1355,1416,5,134,0,0,1356,1361,5,50,0,0,1357,1362,
  	3,434,217,0,1358,1359,5,22,0,0,1359,1362,3,28,14,0,1360,1362,5,30,0,0,
  	1361,1357,1,0,0,0,1361,1358,1,0,0,0,1361,1360,1,0,0,0,1362,1363,1,0,0,
  	0,1363,1416,5,134,0,0,1364,1366,5,82,0,0,1365,1367,3,28,14,0,1366,1365,
  	1,0,0,0,1366,1367,1,0,0,0,1367,1368,1,0,0,0,1368,1416,5,134,0,0,1369,
  	1371,5,95,0,0,1370,1372,3,28,14,0,1371,1370,1,0,0,0,1371,1372,1,0,0,0,
  	1372,1373,1,0,0,0,1373,1416,5,134,0,0,1374,1375,5,97,0,0,1375,1381,3,
  	170,85,0,1376,1378,3,196,98,0,1377,1379,3,204,102,0,1378,1377,1,0,0,0,
  	1378,1379,1,0,0,0,1379,1382,1,0,0,0,1380,1382,3,204,102,0,1381,1376,1,
  	0,0,0,1381,1380,1,0,0,0,1382,1416,1,0,0,0,1383,1384,5,25,0,0,1384,1416,
  	3,170,85,0,1385,1386,5,101,0,0,1386,1416,3,170,85,0,1387,1388,5,62,0,
  	0,1388,1389,5,129,0,0,1389,1390,3,28,14,0,1390,1391,5,130,0,0,1391,1392,
  	3,166,83,0,1392,1416,1,0,0,0,1393,1394,5,105,0,0,1394,1395,5,129,0,0,
  	1395,1396,3,206,103,0,1396,1397,5,130,0,0,1397,1398,3,166,83,0,1398,1416,
  	1,0,0,0,1399,1403,5,113,0,0,1400,1401,5,82,0,0,1401,1404,3,28,14,0,1402,
  	1404,5,19,0,0,1403,1400,1,0,0,0,1403,1402,1,0,0,0,1404,1405,1,0,0,0,1405,
  	1416,5,134,0,0,1406,1407,5,103,0,0,1407,1416,3,170,85,0,1408,1409,5,44,
  	0,0,1409,1410,5,129,0,0,1410,1411,3,362,181,0,1411,1412,3,364,182,0,1412,
  	1413,5,130,0,0,1413,1414,3,166,83,0,1414,1416,1,0,0,0,1415,1285,1,0,0,
  	0,1415,1286,1,0,0,0,1415,1289,1,0,0,0,1415,1298,1,0,0,0,1415,1311,1,0,
  	0,0,1415,1317,1,0,0,0,1415,1325,1,0,0,0,1415,1341,1,0,0,0,1415,1352,1,
  	0,0,0,1415,1354,1,0,0,0,1415,1356,1,0,0,0,1415,1364,1,0,0,0,1415,1369,
  	1,0,0,0,1415,1374,1,0,0,0,1415,1383,1,0,0,0,1415,1385,1,0,0,0,1415,1387,
  	1,0,0,0,1415,1393,1,0,0,0,1415,1399,1,0,0,0,1415,1406,1,0,0,0,1415,1408,
  	1,0,0,0,1416,169,1,0,0,0,1417,1419,5,125,0,0,1418,1420,3,190,95,0,1419,
  	1418,1,0,0,0,1419,1420,1,0,0,0,1420,1421,1,0,0,0,1421,1422,5,126,0,0,
  	1422,171,1,0,0,0,1423,1428,5,105,0,0,1424,1428,5,80,0,0,1425,1426,5,80,
  	0,0,1426,1428,5,79,0,0,1427,1423,1,0,0,0,1427,1424,1,0,0,0,1427,1425,
  	1,0,0,0,1427,1428,1,0,0,0,1428,1429,1,0,0,0,1429,1430,3,174,87,0,1430,
  	1437,3,176,88,0,1431,1432,5,132,0,0,1432,1433,3,176,88,0,1433,1434,4,
  	86,0,0,1434,1436,1,0,0,0,1435,1431,1,0,0,0,1436,1439,1,0,0,0,1437,1435,
  	1,0,0,0,1437,1438,1,0,0,0,1438,1445,1,0,0,0,1439,1437,1,0,0,0,1440,1441,
  	5,44,0,0,1441,1442,3,362,181,0,1442,1443,3,364,182,0,1443,1445,1,0,0,
  	0,1444,1427,1,0,0,0,1444,1440,1,0,0,0,1445,173,1,0,0,0,1446,1449,5,106,
  	0,0,1447,1449,3,4,2,0,1448,1446,1,0,0,0,1448,1447,1,0,0,0,1449,175,1,
  	0,0,0,1450,1456,3,434,217,0,1451,1453,5,145,0,0,1452,1454,5,80,0,0,1453,
  	1452,1,0,0,0,1453,1454,1,0,0,0,1454,1455,1,0,0,0,1455,1457,3,178,89,0,
  	1456,1451,1,0,0,0,1456,1457,1,0,0,0,1457,177,1,0,0,0,1458,1462,3,28,14,
  	0,1459,1462,3,324,162,0,1460,1462,3,372,186,0,1461,1458,1,0,0,0,1461,
  	1459,1,0,0,0,1461,1460,1,0,0,0,1462,179,1,0,0,0,1463,1464,5,27,0,0,1464,
  	1465,3,4,2,0,1465,1466,3,264,132,0,1466,181,1,0,0,0,1467,1470,3,170,85,
  	0,1468,1470,3,168,84,0,1469,1467,1,0,0,0,1469,1468,1,0,0,0,1470,183,1,
  	0,0,0,1471,1473,3,186,93,0,1472,1471,1,0,0,0,1473,1474,1,0,0,0,1474,1472,
  	1,0,0,0,1474,1475,1,0,0,0,1475,1476,1,0,0,0,1476,1477,3,190,95,0,1477,
  	185,1,0,0,0,1478,1479,5,22,0,0,1479,1481,3,28,14,0,1480,1482,3,188,94,
  	0,1481,1480,1,0,0,0,1481,1482,1,0,0,0,1482,1483,1,0,0,0,1483,1484,5,133,
  	0,0,1484,1488,1,0,0,0,1485,1486,5,30,0,0,1486,1488,5,133,0,0,1487,1478,
  	1,0,0,0,1487,1485,1,0,0,0,1488,187,1,0,0,0,1489,1490,5,110,0,0,1490,1491,
  	3,28,14,0,1491,189,1,0,0,0,1492,1494,3,152,76,0,1493,1492,1,0,0,0,1494,
  	1495,1,0,0,0,1495,1493,1,0,0,0,1495,1496,1,0,0,0,1496,191,1,0,0,0,1497,
  	1507,3,172,86,0,1498,1503,3,28,14,0,1499,1500,5,132,0,0,1500,1502,3,28,
  	14,0,1501,1499,1,0,0,0,1502,1505,1,0,0,0,1503,1501,1,0,0,0,1503,1504,
  	1,0,0,0,1504,1507,1,0,0,0,1505,1503,1,0,0,0,1506,1497,1,0,0,0,1506,1498,
  	1,0,0,0,1507,193,1,0,0,0,1508,1513,3,28,14,0,1509,1510,5,132,0,0,1510,
  	1512,3,28,14,0,1511,1509,1,0,0,0,1512,1515,1,0,0,0,1513,1511,1,0,0,0,
  	1513,1514,1,0,0,0,1514,195,1,0,0,0,1515,1513,1,0,0,0,1516,1520,3,198,
  	99,0,1517,1519,3,198,99,0,1518,1517,1,0,0,0,1519,1522,1,0,0,0,1520,1518,
  	1,0,0,0,1520,1521,1,0,0,0,1521,1524,1,0,0,0,1522,1520,1,0,0,0,1523,1525,
  	3,200,100,0,1524,1523,1,0,0,0,1524,1525,1,0,0,0,1525,1528,1,0,0,0,1526,
  	1528,3,200,100,0,1527,1516,1,0,0,0,1527,1526,1,0,0,0,1528,197,1,0,0,0,
  	1529,1530,5,23,0,0,1530,1531,5,129,0,0,1531,1533,3,20,10,0,1532,1534,
  	3,434,217,0,1533,1532,1,0,0,0,1533,1534,1,0,0,0,1534,1535,1,0,0,0,1535,
  	1537,5,130,0,0,1536,1538,3,202,101,0,1537,1536,1,0,0,0,1537,1538,1,0,
  	0,0,1538,1539,1,0,0,0,1539,1540,3,170,85,0,1540,199,1,0,0,0,1541,1543,
  	5,23,0,0,1542,1544,3,202,101,0,1543,1542,1,0,0,0,1543,1544,1,0,0,0,1544,
  	1545,1,0,0,0,1545,1546,3,170,85,0,1546,201,1,0,0,0,1547,1548,5,110,0,
  	0,1548,1549,5,129,0,0,1549,1550,3,28,14,0,1550,1551,5,130,0,0,1551,203,
  	1,0,0,0,1552,1553,5,43,0,0,1553,1554,3,170,85,0,1554,205,1,0,0,0,1555,
  	1558,3,172,86,0,1556,1558,3,28,14,0,1557,1555,1,0,0,0,1557,1556,1,0,0,
  	0,1558,207,1,0,0,0,1559,1560,5,65,0,0,1560,1561,3,210,105,0,1561,1563,
  	3,212,106,0,1562,1564,5,134,0,0,1563,1562,1,0,0,0,1563,1564,1,0,0,0,1564,
  	209,1,0,0,0,1565,1570,3,434,217,0,1566,1567,5,131,0,0,1567,1569,3,434,
  	217,0,1568,1566,1,0,0,0,1569,1572,1,0,0,0,1570,1568,1,0,0,0,1570,1571,
  	1,0,0,0,1571,211,1,0,0,0,1572,1570,1,0,0,0,1573,1575,5,125,0,0,1574,1576,
  	3,214,107,0,1575,1574,1,0,0,0,1575,1576,1,0,0,0,1576,1578,1,0,0,0,1577,
  	1579,3,218,109,0,1578,1577,1,0,0,0,1578,1579,1,0,0,0,1579,1581,1,0,0,
  	0,1580,1582,3,222,111,0,1581,1580,1,0,0,0,1581,1582,1,0,0,0,1582,1583,
  	1,0,0,0,1583,1584,5,126,0,0,1584,213,1,0,0,0,1585,1587,3,216,108,0,1586,
  	1585,1,0,0,0,1587,1588,1,0,0,0,1588,1586,1,0,0,0,1588,1589,1,0,0,0,1589,
  	215,1,0,0,0,1590,1591,5,41,0,0,1591,1592,5,11,0,0,1592,1593,3,434,217,
  	0,1593,1594,5,134,0,0,1594,217,1,0,0,0,1595,1597,3,220,110,0,1596,1595,
  	1,0,0,0,1597,1598,1,0,0,0,1598,1596,1,0,0,0,1598,1599,1,0,0,0,1599,219,
  	1,0,0,0,1600,1601,5,105,0,0,1601,1602,3,434,217,0,1602,1603,5,145,0,0,
  	1603,1604,3,2,1,0,1604,1605,5,134,0,0,1605,1616,1,0,0,0,1606,1607,5,105,
  	0,0,1607,1608,3,2,1,0,1608,1609,5,134,0,0,1609,1616,1,0,0,0,1610,1611,
  	5,105,0,0,1611,1612,5,90,0,0,1612,1613,3,2,1,0,1613,1614,5,134,0,0,1614,
  	1616,1,0,0,0,1615,1600,1,0,0,0,1615,1606,1,0,0,0,1615,1610,1,0,0,0,1616,
  	221,1,0,0,0,1617,1619,3,224,112,0,1618,1617,1,0,0,0,1619,1620,1,0,0,0,
  	1620,1618,1,0,0,0,1620,1621,1,0,0,0,1621,223,1,0,0,0,1622,1625,3,208,
  	104,0,1623,1625,3,226,113,0,1624,1622,1,0,0,0,1624,1623,1,0,0,0,1625,
  	225,1,0,0,0,1626,1628,3,350,175,0,1627,1626,1,0,0,0,1627,1628,1,0,0,0,
  	1628,1630,1,0,0,0,1629,1631,3,256,128,0,1630,1629,1,0,0,0,1630,1631,1,
  	0,0,0,1631,1637,1,0,0,0,1632,1638,3,398,199,0,1633,1638,3,400,200,0,1634,
  	1638,3,402,201,0,1635,1638,3,404,202,0,1636,1638,3,406,203,0,1637,1632,
  	1,0,0,0,1637,1633,1,0,0,0,1637,1634,1,0,0,0,1637,1635,1,0,0,0,1637,1636,
  	1,0,0,0,1638,227,1,0,0,0,1639,1640,3,434,217,0,1640,1641,5,149,0,0,1641,
  	1643,3,434,217,0,1642,1644,3,22,11,0,1643,1642,1,0,0,0,1643,1644,1,0,
  	0,0,1644,229,1,0,0,0,1645,1646,5,146,0,0,1646,1651,3,232,116,0,1647,1648,
  	5,132,0,0,1648,1650,3,232,116,0,1649,1647,1,0,0,0,1650,1653,1,0,0,0,1651,
  	1649,1,0,0,0,1651,1652,1,0,0,0,1652,1654,1,0,0,0,1653,1651,1,0,0,0,1654,
  	1655,5,147,0,0,1655,231,1,0,0,0,1656,1658,3,350,175,0,1657,1656,1,0,0,
  	0,1657,1658,1,0,0,0,1658,1659,1,0,0,0,1659,1660,3,434,217,0,1660,233,
  	1,0,0,0,1661,1662,5,133,0,0,1662,1667,3,20,10,0,1663,1664,5,132,0,0,1664,
  	1666,3,2,1,0,1665,1663,1,0,0,0,1666,1669,1,0,0,0,1667,1665,1,0,0,0,1667,
  	1668,1,0,0,0,1668,235,1,0,0,0,1669,1667,1,0,0,0,1670,1675,3,2,1,0,1671,
  	1672,5,132,0,0,1672,1674,3,2,1,0,1673,1671,1,0,0,0,1674,1677,1,0,0,0,
  	1675,1673,1,0,0,0,1675,1676,1,0,0,0,1676,237,1,0,0,0,1677,1675,1,0,0,
  	0,1678,1680,3,240,120,0,1679,1678,1,0,0,0,1680,1681,1,0,0,0,1681,1679,
  	1,0,0,0,1681,1682,1,0,0,0,1682,239,1,0,0,0,1683,1684,5,111,0,0,1684,1685,
  	3,434,217,0,1685,1686,5,133,0,0,1686,1687,3,242,121,0,1687,241,1,0,0,
  	0,1688,1699,3,248,124,0,1689,1692,3,244,122,0,1690,1691,5,132,0,0,1691,
  	1693,3,246,123,0,1692,1690,1,0,0,0,1692,1693,1,0,0,0,1693,1696,1,0,0,
  	0,1694,1695,5,132,0,0,1695,1697,3,248,124,0,1696,1694,1,0,0,0,1696,1697,
  	1,0,0,0,1697,1699,1,0,0,0,1698,1688,1,0,0,0,1698,1689,1,0,0,0,1699,243,
  	1,0,0,0,1700,1708,3,20,10,0,1701,1703,5,26,0,0,1702,1704,5,148,0,0,1703,
  	1702,1,0,0,0,1703,1704,1,0,0,0,1704,1708,1,0,0,0,1705,1708,5,92,0,0,1706,
  	1708,5,102,0,0,1707,1700,1,0,0,0,1707,1701,1,0,0,0,1707,1705,1,0,0,0,
  	1707,1706,1,0,0,0,1708,245,1,0,0,0,1709,1714,3,2,1,0,1710,1711,5,132,
  	0,0,1711,1713,3,2,1,0,1712,1710,1,0,0,0,1713,1716,1,0,0,0,1714,1712,1,
  	0,0,0,1714,1715,1,0,0,0,1715,247,1,0,0,0,1716,1714,1,0,0,0,1717,1718,
  	5,66,0,0,1718,1719,5,129,0,0,1719,1720,5,130,0,0,1720,249,1,0,0,0,1721,
  	1723,5,125,0,0,1722,1724,3,252,126,0,1723,1722,1,0,0,0,1723,1724,1,0,
  	0,0,1724,1725,1,0,0,0,1725,1726,5,126,0,0,1726,251,1,0,0,0,1727,1729,
  	3,254,127,0,1728,1727,1,0,0,0,1729,1730,1,0,0,0,1730,1728,1,0,0,0,1730,
  	1731,1,0,0,0,1731,253,1,0,0,0,1732,1734,3,350,175,0,1733,1732,1,0,0,0,
  	1733,1734,1,0,0,0,1734,1736,1,0,0,0,1735,1737,3,256,128,0,1736,1735,1,
  	0,0,0,1736,1737,1,0,0,0,1737,1740,1,0,0,0,1738,1741,3,260,130,0,1739,
  	1741,3,418,209,0,1740,1738,1,0,0,0,1740,1739,1,0,0,0,1741,255,1,0,0,0,
  	1742,1744,3,258,129,0,1743,1742,1,0,0,0,1744,1745,1,0,0,0,1745,1743,1,
  	0,0,0,1745,1746,1,0,0,0,1746,257,1,0,0,0,1747,1748,7,10,0,0,1748,259,
  	1,0,0,0,1749,1769,3,414,207,0,1750,1769,3,262,131,0,1751,1769,3,408,204,
  	0,1752,1758,3,308,154,0,1753,1759,3,312,156,0,1754,1755,3,374,187,0,1755,
  	1756,3,74,37,0,1756,1757,5,134,0,0,1757,1759,1,0,0,0,1758,1753,1,0,0,
  	0,1758,1754,1,0,0,0,1759,1769,1,0,0,0,1760,1769,3,420,210,0,1761,1762,
  	5,108,0,0,1762,1769,3,422,211,0,1763,1769,3,398,199,0,1764,1769,3,400,
  	200,0,1765,1769,3,402,201,0,1766,1769,3,404,202,0,1767,1769,3,406,203,
  	0,1768,1749,1,0,0,0,1768,1750,1,0,0,0,1768,1751,1,0,0,0,1768,1752,1,0,
  	0,0,1768,1760,1,0,0,0,1768,1761,1,0,0,0,1768,1763,1,0,0,0,1768,1764,1,
  	0,0,0,1768,1765,1,0,0,0,1768,1766,1,0,0,0,1768,1767,1,0,0,0,1769,261,
  	1,0,0,0,1770,1776,5,80,0,0,1771,1772,5,79,0,0,1772,1776,5,80,0,0,1773,
  	1774,5,80,0,0,1774,1776,5,79,0,0,1775,1770,1,0,0,0,1775,1771,1,0,0,0,
  	1775,1773,1,0,0,0,1775,1776,1,0,0,0,1776,1777,1,0,0,0,1777,1787,3,4,2,
  	0,1778,1779,3,2,1,0,1779,1780,5,131,0,0,1780,1781,3,416,208,0,1781,1788,
  	1,0,0,0,1782,1788,3,422,211,0,1783,1788,3,412,206,0,1784,1788,3,416,208,
  	0,1785,1788,3,426,213,0,1786,1788,3,410,205,0,1787,1778,1,0,0,0,1787,
  	1782,1,0,0,0,1787,1783,1,0,0,0,1787,1784,1,0,0,0,1787,1785,1,0,0,0,1787,
  	1786,1,0,0,0,1788,263,1,0,0,0,1789,1794,3,266,133,0,1790,1791,5,132,0,
  	0,1791,1793,3,266,133,0,1792,1790,1,0,0,0,1793,1796,1,0,0,0,1794,1792,
  	1,0,0,0,1794,1795,1,0,0,0,1795,265,1,0,0,0,1796,1794,1,0,0,0,1797,1798,
  	3,434,217,0,1798,1799,5,145,0,0,1799,1800,3,28,14,0,1800,267,1,0,0,0,
  	1801,1806,3,270,135,0,1802,1803,5,132,0,0,1803,1805,3,270,135,0,1804,
  	1802,1,0,0,0,1805,1808,1,0,0,0,1806,1804,1,0,0,0,1806,1807,1,0,0,0,1807,
  	269,1,0,0,0,1808,1806,1,0,0,0,1809,1812,3,434,217,0,1810,1811,5,145,0,
  	0,1811,1813,3,272,136,0,1812,1810,1,0,0,0,1812,1813,1,0,0,0,1813,271,
  	1,0,0,0,1814,1817,3,28,14,0,1815,1817,3,324,162,0,1816,1814,1,0,0,0,1816,
  	1815,1,0,0,0,1817,273,1,0,0,0,1818,1821,3,4,2,0,1819,1821,5,108,0,0,1820,
  	1818,1,0,0,0,1820,1819,1,0,0,0,1821,275,1,0,0,0,1822,1823,3,2,1,0,1823,
  	277,1,0,0,0,1824,1827,3,170,85,0,1825,1827,5,134,0,0,1826,1824,1,0,0,
  	0,1826,1825,1,0,0,0,1827,279,1,0,0,0,1828,1835,3,288,144,0,1829,1832,
  	3,282,141,0,1830,1831,5,132,0,0,1831,1833,3,288,144,0,1832,1830,1,0,0,
  	0,1832,1833,1,0,0,0,1833,1835,1,0,0,0,1834,1828,1,0,0,0,1834,1829,1,0,
  	0,0,1835,281,1,0,0,0,1836,1841,3,284,142,0,1837,1838,5,132,0,0,1838,1840,
  	3,284,142,0,1839,1837,1,0,0,0,1840,1843,1,0,0,0,1841,1839,1,0,0,0,1841,
  	1842,1,0,0,0,1842,283,1,0,0,0,1843,1841,1,0,0,0,1844,1846,3,350,175,0,
  	1845,1844,1,0,0,0,1845,1846,1,0,0,0,1846,1848,1,0,0,0,1847,1849,3,286,
  	143,0,1848,1847,1,0,0,0,1848,1849,1,0,0,0,1849,1850,1,0,0,0,1850,1853,
  	3,428,214,0,1851,1853,5,12,0,0,1852,1845,1,0,0,0,1852,1851,1,0,0,0,1853,
  	285,1,0,0,0,1854,1863,5,80,0,0,1855,1863,5,72,0,0,1856,1863,5,54,0,0,
  	1857,1858,5,80,0,0,1858,1863,5,94,0,0,1859,1860,5,54,0,0,1860,1863,5,
  	94,0,0,1861,1863,5,94,0,0,1862,1854,1,0,0,0,1862,1855,1,0,0,0,1862,1856,
  	1,0,0,0,1862,1857,1,0,0,0,1862,1859,1,0,0,0,1862,1861,1,0,0,0,1863,287,
  	1,0,0,0,1864,1866,3,350,175,0,1865,1864,1,0,0,0,1865,1866,1,0,0,0,1866,
  	1867,1,0,0,0,1867,1868,5,74,0,0,1868,1869,3,320,160,0,1869,1870,3,434,
  	217,0,1870,289,1,0,0,0,1871,1873,3,350,175,0,1872,1871,1,0,0,0,1872,1873,
  	1,0,0,0,1873,1875,1,0,0,0,1874,1876,3,296,148,0,1875,1874,1,0,0,0,1875,
  	1876,1,0,0,0,1876,1887,1,0,0,0,1877,1878,5,49,0,0,1878,1880,3,298,149,
  	0,1879,1881,3,294,147,0,1880,1879,1,0,0,0,1880,1881,1,0,0,0,1881,1888,
  	1,0,0,0,1882,1883,5,86,0,0,1883,1885,3,298,149,0,1884,1886,3,292,146,
  	0,1885,1884,1,0,0,0,1885,1886,1,0,0,0,1886,1888,1,0,0,0,1887,1877,1,0,
  	0,0,1887,1882,1,0,0,0,1888,291,1,0,0,0,1889,1891,3,350,175,0,1890,1889,
  	1,0,0,0,1890,1891,1,0,0,0,1891,1893,1,0,0,0,1892,1894,3,296,148,0,1893,
  	1892,1,0,0,0,1893,1894,1,0,0,0,1894,1895,1,0,0,0,1895,1896,5,49,0,0,1896,
  	1897,3,298,149,0,1897,293,1,0,0,0,1898,1900,3,350,175,0,1899,1898,1,0,
  	0,0,1899,1900,1,0,0,0,1900,1902,1,0,0,0,1901,1903,3,296,148,0,1902,1901,
  	1,0,0,0,1902,1903,1,0,0,0,1903,1904,1,0,0,0,1904,1905,5,86,0,0,1905,1906,
  	3,298,149,0,1906,295,1,0,0,0,1907,1915,5,77,0,0,1908,1915,5,57,0,0,1909,
  	1915,5,76,0,0,1910,1911,5,77,0,0,1911,1915,5,57,0,0,1912,1913,5,57,0,
  	0,1913,1915,5,77,0,0,1914,1907,1,0,0,0,1914,1908,1,0,0,0,1914,1909,1,
  	0,0,0,1914,1910,1,0,0,0,1914,1912,1,0,0,0,1915,297,1,0,0,0,1916,1919,
  	3,170,85,0,1917,1919,5,134,0,0,1918,1916,1,0,0,0,1918,1917,1,0,0,0,1919,
  	299,1,0,0,0,1920,1922,3,350,175,0,1921,1920,1,0,0,0,1921,1922,1,0,0,0,
  	1922,1931,1,0,0,0,1923,1924,5,10,0,0,1924,1925,3,170,85,0,1925,1926,3,
  	304,152,0,1926,1932,1,0,0,0,1927,1928,5,81,0,0,1928,1929,3,170,85,0,1929,
  	1930,3,302,151,0,1930,1932,1,0,0,0,1931,1923,1,0,0,0,1931,1927,1,0,0,
  	0,1932,301,1,0,0,0,1933,1935,3,350,175,0,1934,1933,1,0,0,0,1934,1935,
  	1,0,0,0,1935,1936,1,0,0,0,1936,1937,5,10,0,0,1937,1938,3,170,85,0,1938,
  	303,1,0,0,0,1939,1941,3,350,175,0,1940,1939,1,0,0,0,1940,1941,1,0,0,0,
  	1941,1942,1,0,0,0,1942,1943,5,81,0,0,1943,1944,3,170,85,0,1944,305,1,
  	0,0,0,1945,1968,5,135,0,0,1946,1968,5,136,0,0,1947,1968,5,143,0,0,1948,
  	1968,5,144,0,0,1949,1968,5,151,0,0,1950,1968,5,152,0,0,1951,1968,5,96,
  	0,0,1952,1968,5,42,0,0,1953,1968,5,137,0,0,1954,1968,5,138,0,0,1955,1968,
  	5,139,0,0,1956,1968,5,140,0,0,1957,1968,5,141,0,0,1958,1968,5,142,0,0,
  	1959,1968,5,168,0,0,1960,1968,3,376,188,0,1961,1968,5,156,0,0,1962,1968,
  	5,157,0,0,1963,1968,5,147,0,0,1964,1968,5,146,0,0,1965,1968,5,159,0,0,
  	1966,1968,5,158,0,0,1967,1945,1,0,0,0,1967,1946,1,0,0,0,1967,1947,1,0,
  	0,0,1967,1948,1,0,0,0,1967,1949,1,0,0,0,1967,1950,1,0,0,0,1967,1951,1,
  	0,0,0,1967,1952,1,0,0,0,1967,1953,1,0,0,0,1967,1954,1,0,0,0,1967,1955,
  	1,0,0,0,1967,1956,1,0,0,0,1967,1957,1,0,0,0,1967,1958,1,0,0,0,1967,1959,
  	1,0,0,0,1967,1960,1,0,0,0,1967,1961,1,0,0,0,1967,1962,1,0,0,0,1967,1963,
  	1,0,0,0,1967,1964,1,0,0,0,1967,1965,1,0,0,0,1967,1966,1,0,0,0,1968,307,
  	1,0,0,0,1969,1970,7,11,0,0,1970,1971,5,70,0,0,1971,1972,3,4,2,0,1972,
  	1973,5,129,0,0,1973,1974,3,428,214,0,1974,1975,5,130,0,0,1975,309,1,0,
  	0,0,1976,1977,5,133,0,0,1977,1978,7,12,0,0,1978,1980,5,129,0,0,1979,1981,
  	3,24,12,0,1980,1979,1,0,0,0,1980,1981,1,0,0,0,1981,1982,1,0,0,0,1982,
  	1983,5,130,0,0,1983,311,1,0,0,0,1984,1987,3,170,85,0,1985,1987,5,134,
  	0,0,1986,1984,1,0,0,0,1986,1985,1,0,0,0,1987,313,1,0,0,0,1988,1989,5,
  	133,0,0,1989,1990,3,236,118,0,1990,315,1,0,0,0,1991,1995,5,125,0,0,1992,
  	1994,3,318,159,0,1993,1992,1,0,0,0,1994,1997,1,0,0,0,1995,1993,1,0,0,
  	0,1995,1996,1,0,0,0,1996,1998,1,0,0,0,1997,1995,1,0,0,0,1998,1999,5,126,
  	0,0,1999,317,1,0,0,0,2000,2002,3,350,175,0,2001,2000,1,0,0,0,2001,2002,
  	1,0,0,0,2002,2004,1,0,0,0,2003,2005,3,256,128,0,2004,2003,1,0,0,0,2004,
  	2005,1,0,0,0,2005,2016,1,0,0,0,2006,2017,3,260,130,0,2007,2008,5,44,0,
  	0,2008,2010,3,4,2,0,2009,2011,3,370,185,0,2010,2009,1,0,0,0,2011,2012,
  	1,0,0,0,2012,2010,1,0,0,0,2012,2013,1,0,0,0,2013,2014,1,0,0,0,2014,2015,
  	5,134,0,0,2015,2017,1,0,0,0,2016,2006,1,0,0,0,2016,2007,1,0,0,0,2017,
  	319,1,0,0,0,2018,2026,3,6,3,0,2019,2021,7,13,0,0,2020,2019,1,0,0,0,2021,
  	2024,1,0,0,0,2022,2020,1,0,0,0,2022,2023,1,0,0,0,2023,2025,1,0,0,0,2024,
  	2022,1,0,0,0,2025,2027,3,322,161,0,2026,2022,1,0,0,0,2027,2028,1,0,0,
  	0,2028,2026,1,0,0,0,2028,2029,1,0,0,0,2029,321,1,0,0,0,2030,2034,5,127,
  	0,0,2031,2033,5,132,0,0,2032,2031,1,0,0,0,2033,2036,1,0,0,0,2034,2032,
  	1,0,0,0,2034,2035,1,0,0,0,2035,2037,1,0,0,0,2036,2034,1,0,0,0,2037,2038,
  	5,128,0,0,2038,323,1,0,0,0,2039,2051,5,125,0,0,2040,2045,3,272,136,0,
  	2041,2042,5,132,0,0,2042,2044,3,272,136,0,2043,2041,1,0,0,0,2044,2047,
  	1,0,0,0,2045,2043,1,0,0,0,2045,2046,1,0,0,0,2046,2049,1,0,0,0,2047,2045,
  	1,0,0,0,2048,2050,5,132,0,0,2049,2048,1,0,0,0,2049,2050,1,0,0,0,2050,
  	2052,1,0,0,0,2051,2040,1,0,0,0,2051,2052,1,0,0,0,2052,2053,1,0,0,0,2053,
  	2054,5,126,0,0,2054,325,1,0,0,0,2055,2056,5,146,0,0,2056,2061,3,328,164,
  	0,2057,2058,5,132,0,0,2058,2060,3,328,164,0,2059,2057,1,0,0,0,2060,2063,
  	1,0,0,0,2061,2059,1,0,0,0,2061,2062,1,0,0,0,2062,2064,1,0,0,0,2063,2061,
  	1,0,0,0,2064,2065,5,147,0,0,2065,327,1,0,0,0,2066,2068,3,350,175,0,2067,
  	2066,1,0,0,0,2067,2068,1,0,0,0,2068,2070,1,0,0,0,2069,2071,3,330,165,
  	0,2070,2069,1,0,0,0,2070,2071,1,0,0,0,2071,2072,1,0,0,0,2072,2073,3,434,
  	217,0,2073,329,1,0,0,0,2074,2075,7,14,0,0,2075,331,1,0,0,0,2076,2077,
  	5,133,0,0,2077,2078,3,236,118,0,2078,333,1,0,0,0,2079,2083,5,125,0,0,
  	2080,2082,3,336,168,0,2081,2080,1,0,0,0,2082,2085,1,0,0,0,2083,2081,1,
  	0,0,0,2083,2084,1,0,0,0,2084,2086,1,0,0,0,2085,2083,1,0,0,0,2086,2087,
  	5,126,0,0,2087,335,1,0,0,0,2088,2090,3,350,175,0,2089,2088,1,0,0,0,2089,
  	2090,1,0,0,0,2090,2092,1,0,0,0,2091,2093,5,66,0,0,2092,2091,1,0,0,0,2092,
  	2093,1,0,0,0,2093,2157,1,0,0,0,2094,2096,5,103,0,0,2095,2094,1,0,0,0,
  	2095,2096,1,0,0,0,2096,2102,1,0,0,0,2097,2103,5,80,0,0,2098,2099,5,80,
  	0,0,2099,2103,5,79,0,0,2100,2101,5,79,0,0,2101,2103,5,80,0,0,2102,2097,
  	1,0,0,0,2102,2098,1,0,0,0,2102,2100,1,0,0,0,2102,2103,1,0,0,0,2103,2104,
  	1,0,0,0,2104,2132,3,4,2,0,2105,2107,3,434,217,0,2106,2108,3,230,115,0,
  	2107,2106,1,0,0,0,2107,2108,1,0,0,0,2108,2109,1,0,0,0,2109,2111,5,129,
  	0,0,2110,2112,3,280,140,0,2111,2110,1,0,0,0,2111,2112,1,0,0,0,2112,2113,
  	1,0,0,0,2113,2115,5,130,0,0,2114,2116,3,238,119,0,2115,2114,1,0,0,0,2115,
  	2116,1,0,0,0,2116,2117,1,0,0,0,2117,2118,5,134,0,0,2118,2133,1,0,0,0,
  	2119,2120,3,434,217,0,2120,2121,5,125,0,0,2121,2122,3,338,169,0,2122,
  	2123,5,126,0,0,2123,2133,1,0,0,0,2124,2125,5,94,0,0,2125,2126,5,127,0,
  	0,2126,2127,3,280,140,0,2127,2128,5,128,0,0,2128,2129,5,125,0,0,2129,
  	2130,3,338,169,0,2130,2131,5,126,0,0,2131,2133,1,0,0,0,2132,2105,1,0,
  	0,0,2132,2119,1,0,0,0,2132,2124,1,0,0,0,2133,2158,1,0,0,0,2134,2136,5,
  	103,0,0,2135,2134,1,0,0,0,2135,2136,1,0,0,0,2136,2137,1,0,0,0,2137,2138,
  	5,108,0,0,2138,2140,3,434,217,0,2139,2141,3,230,115,0,2140,2139,1,0,0,
  	0,2140,2141,1,0,0,0,2141,2142,1,0,0,0,2142,2144,5,129,0,0,2143,2145,3,
  	280,140,0,2144,2143,1,0,0,0,2144,2145,1,0,0,0,2145,2146,1,0,0,0,2146,
  	2148,5,130,0,0,2147,2149,3,238,119,0,2148,2147,1,0,0,0,2148,2149,1,0,
  	0,0,2149,2150,1,0,0,0,2150,2151,5,134,0,0,2151,2158,1,0,0,0,2152,2153,
  	5,39,0,0,2153,2154,3,4,2,0,2154,2155,3,434,217,0,2155,2156,5,134,0,0,
  	2156,2158,1,0,0,0,2157,2095,1,0,0,0,2157,2135,1,0,0,0,2157,2152,1,0,0,
  	0,2158,337,1,0,0,0,2159,2161,3,350,175,0,2160,2159,1,0,0,0,2160,2161,
  	1,0,0,0,2161,2180,1,0,0,0,2162,2163,5,49,0,0,2163,2169,5,134,0,0,2164,
  	2166,3,350,175,0,2165,2164,1,0,0,0,2165,2166,1,0,0,0,2166,2167,1,0,0,
  	0,2167,2168,5,86,0,0,2168,2170,5,134,0,0,2169,2165,1,0,0,0,2169,2170,
  	1,0,0,0,2170,2181,1,0,0,0,2171,2172,5,86,0,0,2172,2178,5,134,0,0,2173,
  	2175,3,350,175,0,2174,2173,1,0,0,0,2174,2175,1,0,0,0,2175,2176,1,0,0,
  	0,2176,2177,5,49,0,0,2177,2179,5,134,0,0,2178,2174,1,0,0,0,2178,2179,
  	1,0,0,0,2179,2181,1,0,0,0,2180,2162,1,0,0,0,2180,2171,1,0,0,0,2181,339,
  	1,0,0,0,2182,2183,5,133,0,0,2183,2184,3,4,2,0,2184,341,1,0,0,0,2185,2197,
  	5,125,0,0,2186,2191,3,344,172,0,2187,2188,5,132,0,0,2188,2190,3,344,172,
  	0,2189,2187,1,0,0,0,2190,2193,1,0,0,0,2191,2189,1,0,0,0,2191,2192,1,0,
  	0,0,2192,2195,1,0,0,0,2193,2191,1,0,0,0,2194,2196,5,132,0,0,2195,2194,
  	1,0,0,0,2195,2196,1,0,0,0,2196,2198,1,0,0,0,2197,2186,1,0,0,0,2197,2198,
  	1,0,0,0,2198,2199,1,0,0,0,2199,2200,5,126,0,0,2200,343,1,0,0,0,2201,2203,
  	3,350,175,0,2202,2201,1,0,0,0,2202,2203,1,0,0,0,2203,2204,1,0,0,0,2204,
  	2207,3,434,217,0,2205,2206,5,145,0,0,2206,2208,3,28,14,0,2207,2205,1,
  	0,0,0,2207,2208,1,0,0,0,2208,345,1,0,0,0,2209,2210,5,127,0,0,2210,2211,
  	3,348,174,0,2211,2212,5,133,0,0,2212,2214,3,356,178,0,2213,2215,5,132,
  	0,0,2214,2213,1,0,0,0,2214,2215,1,0,0,0,2215,2216,1,0,0,0,2216,2217,5,
  	128,0,0,2217,347,1,0,0,0,2218,2221,3,396,198,0,2219,2221,3,434,217,0,
  	2220,2218,1,0,0,0,2220,2219,1,0,0,0,2221,349,1,0,0,0,2222,2224,3,352,
  	176,0,2223,2222,1,0,0,0,2224,2225,1,0,0,0,2225,2223,1,0,0,0,2225,2226,
  	1,0,0,0,2226,351,1,0,0,0,2227,2231,5,127,0,0,2228,2229,3,354,177,0,2229,
  	2230,5,133,0,0,2230,2232,1,0,0,0,2231,2228,1,0,0,0,2231,2232,1,0,0,0,
  	2232,2233,1,0,0,0,2233,2235,3,356,178,0,2234,2236,5,132,0,0,2235,2234,
  	1,0,0,0,2235,2236,1,0,0,0,2236,2237,1,0,0,0,2237,2238,5,128,0,0,2238,
  	353,1,0,0,0,2239,2242,3,396,198,0,2240,2242,3,434,217,0,2241,2239,1,0,
  	0,0,2241,2240,1,0,0,0,2242,355,1,0,0,0,2243,2248,3,358,179,0,2244,2245,
  	5,132,0,0,2245,2247,3,358,179,0,2246,2244,1,0,0,0,2247,2250,1,0,0,0,2248,
  	2246,1,0,0,0,2248,2249,1,0,0,0,2249,357,1,0,0,0,2250,2248,1,0,0,0,2251,
  	2264,3,2,1,0,2252,2261,5,129,0,0,2253,2258,3,360,180,0,2254,2255,5,132,
  	0,0,2255,2257,3,360,180,0,2256,2254,1,0,0,0,2257,2260,1,0,0,0,2258,2256,
  	1,0,0,0,2258,2259,1,0,0,0,2259,2262,1,0,0,0,2260,2258,1,0,0,0,2261,2253,
  	1,0,0,0,2261,2262,1,0,0,0,2262,2263,1,0,0,0,2263,2265,5,130,0,0,2264,
  	2252,1,0,0,0,2264,2265,1,0,0,0,2265,359,1,0,0,0,2266,2267,3,434,217,0,
  	2267,2268,5,133,0,0,2268,2270,1,0,0,0,2269,2266,1,0,0,0,2269,2270,1,0,
  	0,0,2270,2271,1,0,0,0,2271,2272,3,28,14,0,2272,361,1,0,0,0,2273,2276,
  	3,12,6,0,2274,2276,3,20,10,0,2275,2273,1,0,0,0,2275,2274,1,0,0,0,2276,
  	2281,1,0,0,0,2277,2280,3,322,161,0,2278,2280,5,148,0,0,2279,2277,1,0,
  	0,0,2279,2278,1,0,0,0,2280,2283,1,0,0,0,2281,2279,1,0,0,0,2281,2282,1,
  	0,0,0,2282,2284,1,0,0,0,2283,2281,1,0,0,0,2284,2285,5,137,0,0,2285,2289,
  	1,0,0,0,2286,2287,5,108,0,0,2287,2289,5,137,0,0,2288,2275,1,0,0,0,2288,
  	2286,1,0,0,0,2289,363,1,0,0,0,2290,2295,3,366,183,0,2291,2292,5,132,0,
  	0,2292,2294,3,366,183,0,2293,2291,1,0,0,0,2294,2297,1,0,0,0,2295,2293,
  	1,0,0,0,2295,2296,1,0,0,0,2296,365,1,0,0,0,2297,2295,1,0,0,0,2298,2299,
  	3,434,217,0,2299,2300,5,145,0,0,2300,2301,3,368,184,0,2301,367,1,0,0,
  	0,2302,2304,5,140,0,0,2303,2302,1,0,0,0,2303,2304,1,0,0,0,2304,2305,1,
  	0,0,0,2305,2308,3,28,14,0,2306,2308,3,372,186,0,2307,2303,1,0,0,0,2307,
  	2306,1,0,0,0,2308,369,1,0,0,0,2309,2310,3,434,217,0,2310,2311,5,127,0,
  	0,2311,2312,3,28,14,0,2312,2313,5,128,0,0,2313,371,1,0,0,0,2314,2315,
  	5,89,0,0,2315,2316,3,4,2,0,2316,2317,5,127,0,0,2317,2318,3,28,14,0,2318,
  	2319,5,128,0,0,2319,2344,1,0,0,0,2320,2322,5,89,0,0,2321,2323,3,4,2,0,
  	2322,2321,1,0,0,0,2322,2323,1,0,0,0,2323,2324,1,0,0,0,2324,2326,5,127,
  	0,0,2325,2327,3,28,14,0,2326,2325,1,0,0,0,2326,2327,1,0,0,0,2327,2328,
  	1,0,0,0,2328,2329,5,128,0,0,2329,2330,5,125,0,0,2330,2335,3,28,14,0,2331,
  	2332,5,132,0,0,2332,2334,3,28,14,0,2333,2331,1,0,0,0,2334,2337,1,0,0,
  	0,2335,2333,1,0,0,0,2335,2336,1,0,0,0,2336,2339,1,0,0,0,2337,2335,1,0,
  	0,0,2338,2340,5,132,0,0,2339,2338,1,0,0,0,2339,2340,1,0,0,0,2340,2341,
  	1,0,0,0,2341,2342,5,126,0,0,2342,2344,1,0,0,0,2343,2314,1,0,0,0,2343,
  	2320,1,0,0,0,2344,373,1,0,0,0,2345,2346,5,145,0,0,2346,2347,5,147,0,0,
  	2347,2348,4,187,1,1,2348,375,1,0,0,0,2349,2350,5,147,0,0,2350,2351,5,
  	147,0,0,2351,2352,4,188,2,1,2352,377,1,0,0,0,2353,2354,5,147,0,0,2354,
  	2355,5,159,0,0,2355,2356,4,189,3,1,2356,379,1,0,0,0,2357,2366,3,382,191,
  	0,2358,2366,3,384,192,0,2359,2366,5,116,0,0,2360,2366,5,117,0,0,2361,
  	2366,5,118,0,0,2362,2366,5,119,0,0,2363,2366,5,120,0,0,2364,2366,5,67,
  	0,0,2365,2357,1,0,0,0,2365,2358,1,0,0,0,2365,2359,1,0,0,0,2365,2360,1,
  	0,0,0,2365,2361,1,0,0,0,2365,2362,1,0,0,0,2365,2363,1,0,0,0,2365,2364,
  	1,0,0,0,2366,381,1,0,0,0,2367,2368,7,15,0,0,2368,383,1,0,0,0,2369,2374,
  	3,386,193,0,2370,2374,3,388,194,0,2371,2374,5,121,0,0,2372,2374,5,122,
  	0,0,2373,2369,1,0,0,0,2373,2370,1,0,0,0,2373,2371,1,0,0,0,2373,2372,1,
  	0,0,0,2374,385,1,0,0,0,2375,2379,5,123,0,0,2376,2378,3,390,195,0,2377,
  	2376,1,0,0,0,2378,2381,1,0,0,0,2379,2377,1,0,0,0,2379,2380,1,0,0,0,2380,
  	2382,1,0,0,0,2381,2379,1,0,0,0,2382,2383,5,176,0,0,2383,387,1,0,0,0,2384,
  	2388,5,124,0,0,2385,2387,3,392,196,0,2386,2385,1,0,0,0,2387,2390,1,0,
  	0,0,2388,2386,1,0,0,0,2388,2389,1,0,0,0,2389,2391,1,0,0,0,2390,2388,1,
  	0,0,0,2391,2392,5,176,0,0,2392,389,1,0,0,0,2393,2398,3,394,197,0,2394,
  	2398,5,172,0,0,2395,2398,5,174,0,0,2396,2398,5,177,0,0,2397,2393,1,0,
  	0,0,2397,2394,1,0,0,0,2397,2395,1,0,0,0,2397,2396,1,0,0,0,2398,391,1,
  	0,0,0,2399,2404,3,394,197,0,2400,2404,5,172,0,0,2401,2404,5,175,0,0,2402,
  	2404,5,178,0,0,2403,2399,1,0,0,0,2403,2400,1,0,0,0,2403,2401,1,0,0,0,
  	2403,2402,1,0,0,0,2404,393,1,0,0,0,2405,2410,3,28,14,0,2406,2407,5,132,
  	0,0,2407,2409,3,28,14,0,2408,2406,1,0,0,0,2409,2412,1,0,0,0,2410,2408,
  	1,0,0,0,2410,2411,1,0,0,0,2411,2419,1,0,0,0,2412,2410,1,0,0,0,2413,2415,
  	5,133,0,0,2414,2416,5,180,0,0,2415,2414,1,0,0,0,2416,2417,1,0,0,0,2417,
  	2415,1,0,0,0,2417,2418,1,0,0,0,2418,2420,1,0,0,0,2419,2413,1,0,0,0,2419,
  	2420,1,0,0,0,2420,395,1,0,0,0,2421,2422,7,16,0,0,2422,397,1,0,0,0,2423,
  	2424,5,26,0,0,2424,2426,3,434,217,0,2425,2427,3,230,115,0,2426,2425,1,
  	0,0,0,2426,2427,1,0,0,0,2427,2429,1,0,0,0,2428,2430,3,234,117,0,2429,
  	2428,1,0,0,0,2429,2430,1,0,0,0,2430,2432,1,0,0,0,2431,2433,3,238,119,
  	0,2432,2431,1,0,0,0,2432,2433,1,0,0,0,2433,2434,1,0,0,0,2434,2436,3,250,
  	125,0,2435,2437,5,134,0,0,2436,2435,1,0,0,0,2436,2437,1,0,0,0,2437,399,
  	1,0,0,0,2438,2440,7,17,0,0,2439,2438,1,0,0,0,2439,2440,1,0,0,0,2440,2441,
  	1,0,0,0,2441,2442,5,92,0,0,2442,2444,3,434,217,0,2443,2445,3,230,115,
  	0,2444,2443,1,0,0,0,2444,2445,1,0,0,0,2445,2447,1,0,0,0,2446,2448,3,314,
  	157,0,2447,2446,1,0,0,0,2447,2448,1,0,0,0,2448,2450,1,0,0,0,2449,2451,
  	3,238,119,0,2450,2449,1,0,0,0,2450,2451,1,0,0,0,2451,2452,1,0,0,0,2452,
  	2454,3,316,158,0,2453,2455,5,134,0,0,2454,2453,1,0,0,0,2454,2455,1,0,
  	0,0,2455,401,1,0,0,0,2456,2457,5,56,0,0,2457,2459,3,434,217,0,2458,2460,
  	3,326,163,0,2459,2458,1,0,0,0,2459,2460,1,0,0,0,2460,2462,1,0,0,0,2461,
  	2463,3,332,166,0,2462,2461,1,0,0,0,2462,2463,1,0,0,0,2463,2465,1,0,0,
  	0,2464,2466,3,238,119,0,2465,2464,1,0,0,0,2465,2466,1,0,0,0,2466,2467,
  	1,0,0,0,2467,2469,3,250,125,0,2468,2470,5,134,0,0,2469,2468,1,0,0,0,2469,
  	2470,1,0,0,0,2470,403,1,0,0,0,2471,2472,5,37,0,0,2472,2474,3,434,217,
  	0,2473,2475,3,340,170,0,2474,2473,1,0,0,0,2474,2475,1,0,0,0,2475,2476,
  	1,0,0,0,2476,2478,3,342,171,0,2477,2479,5,134,0,0,2478,2477,1,0,0,0,2478,
  	2479,1,0,0,0,2479,405,1,0,0,0,2480,2481,5,31,0,0,2481,2482,3,274,137,
  	0,2482,2484,3,434,217,0,2483,2485,3,326,163,0,2484,2483,1,0,0,0,2484,
  	2485,1,0,0,0,2485,2486,1,0,0,0,2486,2488,5,129,0,0,2487,2489,3,280,140,
  	0,2488,2487,1,0,0,0,2488,2489,1,0,0,0,2489,2490,1,0,0,0,2490,2492,5,130,
  	0,0,2491,2493,3,238,119,0,2492,2491,1,0,0,0,2492,2493,1,0,0,0,2493,2494,
  	1,0,0,0,2494,2495,5,134,0,0,2495,407,1,0,0,0,2496,2497,5,39,0,0,2497,
  	2506,3,4,2,0,2498,2499,3,268,134,0,2499,2500,5,134,0,0,2500,2507,1,0,
  	0,0,2501,2502,3,276,138,0,2502,2503,5,125,0,0,2503,2504,3,300,150,0,2504,
  	2505,5,126,0,0,2505,2507,1,0,0,0,2506,2498,1,0,0,0,2506,2501,1,0,0,0,
  	2507,409,1,0,0,0,2508,2509,3,268,134,0,2509,2510,5,134,0,0,2510,411,1,
  	0,0,0,2511,2525,3,276,138,0,2512,2513,5,125,0,0,2513,2514,3,290,145,0,
  	2514,2519,5,126,0,0,2515,2516,5,145,0,0,2516,2517,3,272,136,0,2517,2518,
  	5,134,0,0,2518,2520,1,0,0,0,2519,2515,1,0,0,0,2519,2520,1,0,0,0,2520,
  	2526,1,0,0,0,2521,2522,3,374,187,0,2522,2523,3,74,37,0,2523,2524,5,134,
  	0,0,2524,2526,1,0,0,0,2525,2512,1,0,0,0,2525,2521,1,0,0,0,2526,413,1,
  	0,0,0,2527,2528,5,27,0,0,2528,2529,3,4,2,0,2529,2530,3,264,132,0,2530,
  	2531,5,134,0,0,2531,415,1,0,0,0,2532,2533,5,94,0,0,2533,2534,5,127,0,
  	0,2534,2535,3,280,140,0,2535,2544,5,128,0,0,2536,2537,5,125,0,0,2537,
  	2538,3,290,145,0,2538,2539,5,126,0,0,2539,2545,1,0,0,0,2540,2541,3,374,
  	187,0,2541,2542,3,74,37,0,2542,2543,5,134,0,0,2543,2545,1,0,0,0,2544,
  	2536,1,0,0,0,2544,2540,1,0,0,0,2545,417,1,0,0,0,2546,2547,5,144,0,0,2547,
  	2548,3,434,217,0,2548,2549,5,129,0,0,2549,2550,5,130,0,0,2550,2551,3,
  	312,156,0,2551,419,1,0,0,0,2552,2553,3,434,217,0,2553,2555,5,129,0,0,
  	2554,2556,3,280,140,0,2555,2554,1,0,0,0,2555,2556,1,0,0,0,2556,2557,1,
  	0,0,0,2557,2559,5,130,0,0,2558,2560,3,310,155,0,2559,2558,1,0,0,0,2559,
  	2560,1,0,0,0,2560,2561,1,0,0,0,2561,2562,3,312,156,0,2562,421,1,0,0,0,
  	2563,2565,3,424,212,0,2564,2566,3,230,115,0,2565,2564,1,0,0,0,2565,2566,
  	1,0,0,0,2566,2567,1,0,0,0,2567,2569,5,129,0,0,2568,2570,3,280,140,0,2569,
  	2568,1,0,0,0,2569,2570,1,0,0,0,2570,2571,1,0,0,0,2571,2573,5,130,0,0,
  	2572,2574,3,238,119,0,2573,2572,1,0,0,0,2573,2574,1,0,0,0,2574,2580,1,
  	0,0,0,2575,2581,3,278,139,0,2576,2577,3,374,187,0,2577,2578,3,74,37,0,
  	2578,2579,5,134,0,0,2579,2581,1,0,0,0,2580,2575,1,0,0,0,2580,2576,1,0,
  	0,0,2581,423,1,0,0,0,2582,2588,3,434,217,0,2583,2584,3,434,217,0,2584,
  	2585,5,149,0,0,2585,2586,3,434,217,0,2586,2588,1,0,0,0,2587,2582,1,0,
  	0,0,2587,2583,1,0,0,0,2588,2596,1,0,0,0,2589,2591,3,22,11,0,2590,2589,
  	1,0,0,0,2590,2591,1,0,0,0,2591,2592,1,0,0,0,2592,2593,5,131,0,0,2593,
  	2595,3,434,217,0,2594,2590,1,0,0,0,2595,2598,1,0,0,0,2596,2594,1,0,0,
  	0,2596,2597,1,0,0,0,2597,425,1,0,0,0,2598,2596,1,0,0,0,2599,2600,5,70,
  	0,0,2600,2601,3,306,153,0,2601,2603,5,129,0,0,2602,2604,5,54,0,0,2603,
  	2602,1,0,0,0,2603,2604,1,0,0,0,2604,2605,1,0,0,0,2605,2611,3,428,214,
  	0,2606,2608,5,132,0,0,2607,2609,5,54,0,0,2608,2607,1,0,0,0,2608,2609,
  	1,0,0,0,2609,2610,1,0,0,0,2610,2612,3,428,214,0,2611,2606,1,0,0,0,2611,
  	2612,1,0,0,0,2612,2613,1,0,0,0,2613,2619,5,130,0,0,2614,2620,3,312,156,
  	0,2615,2616,3,374,187,0,2616,2617,3,74,37,0,2617,2618,5,134,0,0,2618,
  	2620,1,0,0,0,2619,2614,1,0,0,0,2619,2615,1,0,0,0,2620,427,1,0,0,0,2621,
  	2622,3,4,2,0,2622,2625,3,434,217,0,2623,2624,5,145,0,0,2624,2626,3,28,
  	14,0,2625,2623,1,0,0,0,2625,2626,1,0,0,0,2626,429,1,0,0,0,2627,2629,5,
  	129,0,0,2628,2630,3,24,12,0,2629,2628,1,0,0,0,2629,2630,1,0,0,0,2630,
  	2631,1,0,0,0,2631,2632,5,130,0,0,2632,431,1,0,0,0,2633,2635,5,129,0,0,
  	2634,2636,3,24,12,0,2635,2634,1,0,0,0,2635,2636,1,0,0,0,2636,2637,1,0,
  	0,0,2637,2639,5,130,0,0,2638,2640,3,88,44,0,2639,2638,1,0,0,0,2639,2640,
  	1,0,0,0,2640,433,1,0,0,0,2641,2642,7,18,0,0,2642,435,1,0,0,0,344,437,
  	440,443,448,452,458,461,466,470,477,479,487,495,501,505,510,520,528,538,
  	544,547,551,559,564,574,587,595,601,603,610,618,626,634,642,650,660,662,
  	668,673,681,689,697,699,702,709,714,721,725,727,755,759,764,768,776,779,
  	784,788,792,798,812,818,830,834,839,843,849,857,866,884,887,892,895,910,
  	916,920,926,931,934,942,950,961,966,971,973,982,990,997,1005,1009,1018,
  	1023,1025,1034,1042,1046,1051,1053,1058,1062,1069,1077,1079,1083,1086,
  	1089,1097,1107,1124,1131,1135,1145,1150,1157,1166,1171,1178,1190,1201,
  	1209,1214,1223,1232,1241,1247,1252,1256,1260,1264,1268,1275,1283,1296,
  	1306,1328,1332,1336,1341,1361,1366,1371,1378,1381,1403,1415,1419,1427,
  	1437,1444,1448,1453,1456,1461,1469,1474,1481,1487,1495,1503,1506,1513,
  	1520,1524,1527,1533,1537,1543,1557,1563,1570,1575,1578,1581,1588,1598,
  	1615,1620,1624,1627,1630,1637,1643,1651,1657,1667,1675,1681,1692,1696,
  	1698,1703,1707,1714,1723,1730,1733,1736,1740,1745,1758,1768,1775,1787,
  	1794,1806,1812,1816,1820,1826,1832,1834,1841,1845,1848,1852,1862,1865,
  	1872,1875,1880,1885,1887,1890,1893,1899,1902,1914,1918,1921,1931,1934,
  	1940,1967,1980,1986,1995,2001,2004,2012,2016,2022,2028,2034,2045,2049,
  	2051,2061,2067,2070,2083,2089,2092,2095,2102,2107,2111,2115,2132,2135,
  	2140,2144,2148,2157,2160,2165,2169,2174,2178,2180,2191,2195,2197,2202,
  	2207,2214,2220,2225,2231,2235,2241,2248,2258,2261,2264,2269,2275,2279,
  	2281,2288,2295,2303,2307,2322,2326,2335,2339,2343,2365,2373,2379,2388,
  	2397,2403,2410,2417,2419,2426,2429,2432,2436,2439,2444,2447,2450,2454,
  	2459,2462,2465,2469,2474,2478,2484,2488,2492,2506,2519,2525,2544,2555,
  	2559,2565,2569,2573,2580,2587,2590,2596,2603,2608,2611,2619,2625,2629,
  	2635,2639
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  csharpparserParserStaticData = staticData.release();
}

}

CSharpParser::CSharpParser(TokenStream *input) : CSharpParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

CSharpParser::CSharpParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : CSharpParserBase(input) {
  CSharpParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *csharpparserParserStaticData->atn, csharpparserParserStaticData->decisionToDFA, csharpparserParserStaticData->sharedContextCache, options);
}

CSharpParser::~CSharpParser() {
  delete _interpreter;
}

const atn::ATN& CSharpParser::getATN() const {
  return *csharpparserParserStaticData->atn;
}

std::string CSharpParser::getGrammarFileName() const {
  return "CSharpParser.g4";
}

const std::vector<std::string>& CSharpParser::getRuleNames() const {
  return csharpparserParserStaticData->ruleNames;
}

const dfa::Vocabulary& CSharpParser::getVocabulary() const {
  return csharpparserParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView CSharpParser::getSerializedATN() const {
  return csharpparserParserStaticData->serializedATN;
}


//----------------- Compilation_unitContext ------------------------------------------------------------------

CSharpParser::Compilation_unitContext::Compilation_unitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Compilation_unitContext::EOF() {
  return getToken(CSharpParser::EOF, 0);
}

tree::TerminalNode* CSharpParser::Compilation_unitContext::BYTE_ORDER_MARK() {
  return getToken(CSharpParser::BYTE_ORDER_MARK, 0);
}

CSharpParser::Extern_alias_directivesContext* CSharpParser::Compilation_unitContext::extern_alias_directives() {
  return getRuleContext<CSharpParser::Extern_alias_directivesContext>(0);
}

CSharpParser::Using_directivesContext* CSharpParser::Compilation_unitContext::using_directives() {
  return getRuleContext<CSharpParser::Using_directivesContext>(0);
}

std::vector<CSharpParser::Global_attribute_sectionContext *> CSharpParser::Compilation_unitContext::global_attribute_section() {
  return getRuleContexts<CSharpParser::Global_attribute_sectionContext>();
}

CSharpParser::Global_attribute_sectionContext* CSharpParser::Compilation_unitContext::global_attribute_section(size_t i) {
  return getRuleContext<CSharpParser::Global_attribute_sectionContext>(i);
}

CSharpParser::Namespace_member_declarationsContext* CSharpParser::Compilation_unitContext::namespace_member_declarations() {
  return getRuleContext<CSharpParser::Namespace_member_declarationsContext>(0);
}


size_t CSharpParser::Compilation_unitContext::getRuleIndex() const {
  return CSharpParser::RuleCompilation_unit;
}

void CSharpParser::Compilation_unitContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCompilation_unit(this);
}

void CSharpParser::Compilation_unitContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCompilation_unit(this);
}

CSharpParser::Compilation_unitContext* CSharpParser::compilation_unit() {
  Compilation_unitContext *_localctx = _tracker.createInstance<Compilation_unitContext>(_ctx, getState());
  enterRule(_localctx, 0, CSharpParser::RuleCompilation_unit);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(437);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::BYTE_ORDER_MARK) {
      setState(436);
      match(CSharpParser::BYTE_ORDER_MARK);
    }
    setState(440);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 1, _ctx)) {
    case 1: {
      setState(439);
      extern_alias_directives();
      break;
    }

    default:
      break;
    }
    setState(443);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::USING) {
      setState(442);
      using_directives();
    }
    setState(448);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 3, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(445);
        global_attribute_section(); 
      }
      setState(450);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 3, _ctx);
    }
    setState(452);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 216175120790618624) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 4611708283706211587) != 0)) {
      setState(451);
      namespace_member_declarations();
    }
    setState(454);
    match(CSharpParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Namespace_or_type_nameContext ------------------------------------------------------------------

CSharpParser::Namespace_or_type_nameContext::Namespace_or_type_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::IdentifierContext *> CSharpParser::Namespace_or_type_nameContext::identifier() {
  return getRuleContexts<CSharpParser::IdentifierContext>();
}

CSharpParser::IdentifierContext* CSharpParser::Namespace_or_type_nameContext::identifier(size_t i) {
  return getRuleContext<CSharpParser::IdentifierContext>(i);
}

CSharpParser::Qualified_alias_memberContext* CSharpParser::Namespace_or_type_nameContext::qualified_alias_member() {
  return getRuleContext<CSharpParser::Qualified_alias_memberContext>(0);
}

std::vector<tree::TerminalNode *> CSharpParser::Namespace_or_type_nameContext::DOT() {
  return getTokens(CSharpParser::DOT);
}

tree::TerminalNode* CSharpParser::Namespace_or_type_nameContext::DOT(size_t i) {
  return getToken(CSharpParser::DOT, i);
}

std::vector<CSharpParser::Type_argument_listContext *> CSharpParser::Namespace_or_type_nameContext::type_argument_list() {
  return getRuleContexts<CSharpParser::Type_argument_listContext>();
}

CSharpParser::Type_argument_listContext* CSharpParser::Namespace_or_type_nameContext::type_argument_list(size_t i) {
  return getRuleContext<CSharpParser::Type_argument_listContext>(i);
}


size_t CSharpParser::Namespace_or_type_nameContext::getRuleIndex() const {
  return CSharpParser::RuleNamespace_or_type_name;
}

void CSharpParser::Namespace_or_type_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamespace_or_type_name(this);
}

void CSharpParser::Namespace_or_type_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamespace_or_type_name(this);
}

CSharpParser::Namespace_or_type_nameContext* CSharpParser::namespace_or_type_name() {
  Namespace_or_type_nameContext *_localctx = _tracker.createInstance<Namespace_or_type_nameContext>(_ctx, getState());
  enterRule(_localctx, 2, CSharpParser::RuleNamespace_or_type_name);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(461);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 6, _ctx)) {
    case 1: {
      setState(456);
      identifier();
      setState(458);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 5, _ctx)) {
      case 1: {
        setState(457);
        type_argument_list();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      setState(460);
      qualified_alias_member();
      break;
    }

    default:
      break;
    }
    setState(470);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 8, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(463);
        match(CSharpParser::DOT);
        setState(464);
        identifier();
        setState(466);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 7, _ctx)) {
        case 1: {
          setState(465);
          type_argument_list();
          break;
        }

        default:
          break;
        } 
      }
      setState(472);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 8, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_Context ------------------------------------------------------------------

CSharpParser::Type_Context::Type_Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Base_typeContext* CSharpParser::Type_Context::base_type() {
  return getRuleContext<CSharpParser::Base_typeContext>(0);
}

std::vector<tree::TerminalNode *> CSharpParser::Type_Context::INTERR() {
  return getTokens(CSharpParser::INTERR);
}

tree::TerminalNode* CSharpParser::Type_Context::INTERR(size_t i) {
  return getToken(CSharpParser::INTERR, i);
}

std::vector<CSharpParser::Rank_specifierContext *> CSharpParser::Type_Context::rank_specifier() {
  return getRuleContexts<CSharpParser::Rank_specifierContext>();
}

CSharpParser::Rank_specifierContext* CSharpParser::Type_Context::rank_specifier(size_t i) {
  return getRuleContext<CSharpParser::Rank_specifierContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::Type_Context::STAR() {
  return getTokens(CSharpParser::STAR);
}

tree::TerminalNode* CSharpParser::Type_Context::STAR(size_t i) {
  return getToken(CSharpParser::STAR, i);
}


size_t CSharpParser::Type_Context::getRuleIndex() const {
  return CSharpParser::RuleType_;
}

void CSharpParser::Type_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_(this);
}

void CSharpParser::Type_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_(this);
}

CSharpParser::Type_Context* CSharpParser::type_() {
  Type_Context *_localctx = _tracker.createInstance<Type_Context>(_ctx, getState());
  enterRule(_localctx, 4, CSharpParser::RuleType_);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(473);
    base_type();
    setState(479);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 10, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(477);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case CSharpParser::INTERR: {
            setState(474);
            match(CSharpParser::INTERR);
            break;
          }

          case CSharpParser::OPEN_BRACKET: {
            setState(475);
            rank_specifier();
            break;
          }

          case CSharpParser::STAR: {
            setState(476);
            match(CSharpParser::STAR);
            break;
          }

        default:
          throw NoViableAltException(this);
        } 
      }
      setState(481);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 10, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Base_typeContext ------------------------------------------------------------------

CSharpParser::Base_typeContext::Base_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Simple_typeContext* CSharpParser::Base_typeContext::simple_type() {
  return getRuleContext<CSharpParser::Simple_typeContext>(0);
}

CSharpParser::Class_typeContext* CSharpParser::Base_typeContext::class_type() {
  return getRuleContext<CSharpParser::Class_typeContext>(0);
}

tree::TerminalNode* CSharpParser::Base_typeContext::VOID() {
  return getToken(CSharpParser::VOID, 0);
}

tree::TerminalNode* CSharpParser::Base_typeContext::STAR() {
  return getToken(CSharpParser::STAR, 0);
}

CSharpParser::Tuple_typeContext* CSharpParser::Base_typeContext::tuple_type() {
  return getRuleContext<CSharpParser::Tuple_typeContext>(0);
}


size_t CSharpParser::Base_typeContext::getRuleIndex() const {
  return CSharpParser::RuleBase_type;
}

void CSharpParser::Base_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBase_type(this);
}

void CSharpParser::Base_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBase_type(this);
}

CSharpParser::Base_typeContext* CSharpParser::base_type() {
  Base_typeContext *_localctx = _tracker.createInstance<Base_typeContext>(_ctx, getState());
  enterRule(_localctx, 6, CSharpParser::RuleBase_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(487);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::BOOL:
      case CSharpParser::BYTE:
      case CSharpParser::CHAR:
      case CSharpParser::DECIMAL:
      case CSharpParser::DOUBLE:
      case CSharpParser::FLOAT:
      case CSharpParser::INT:
      case CSharpParser::LONG:
      case CSharpParser::SBYTE:
      case CSharpParser::SHORT:
      case CSharpParser::UINT:
      case CSharpParser::ULONG:
      case CSharpParser::USHORT: {
        enterOuterAlt(_localctx, 1);
        setState(482);
        simple_type();
        break;
      }

      case CSharpParser::ADD:
      case CSharpParser::ALIAS:
      case CSharpParser::ARGLIST:
      case CSharpParser::ASCENDING:
      case CSharpParser::ASYNC:
      case CSharpParser::AWAIT:
      case CSharpParser::BY:
      case CSharpParser::DESCENDING:
      case CSharpParser::DYNAMIC:
      case CSharpParser::EQUALS:
      case CSharpParser::FROM:
      case CSharpParser::GET:
      case CSharpParser::GROUP:
      case CSharpParser::INTO:
      case CSharpParser::JOIN:
      case CSharpParser::LET:
      case CSharpParser::NAMEOF:
      case CSharpParser::OBJECT:
      case CSharpParser::ON:
      case CSharpParser::ORDERBY:
      case CSharpParser::PARTIAL:
      case CSharpParser::REMOVE:
      case CSharpParser::SELECT:
      case CSharpParser::SET:
      case CSharpParser::STRING:
      case CSharpParser::UNMANAGED:
      case CSharpParser::VAR:
      case CSharpParser::WHEN:
      case CSharpParser::WHERE:
      case CSharpParser::YIELD:
      case CSharpParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 2);
        setState(483);
        class_type();
        break;
      }

      case CSharpParser::VOID: {
        enterOuterAlt(_localctx, 3);
        setState(484);
        match(CSharpParser::VOID);
        setState(485);
        match(CSharpParser::STAR);
        break;
      }

      case CSharpParser::OPEN_PARENS: {
        enterOuterAlt(_localctx, 4);
        setState(486);
        tuple_type();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Tuple_typeContext ------------------------------------------------------------------

CSharpParser::Tuple_typeContext::Tuple_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Tuple_typeContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

std::vector<CSharpParser::Tuple_elementContext *> CSharpParser::Tuple_typeContext::tuple_element() {
  return getRuleContexts<CSharpParser::Tuple_elementContext>();
}

CSharpParser::Tuple_elementContext* CSharpParser::Tuple_typeContext::tuple_element(size_t i) {
  return getRuleContext<CSharpParser::Tuple_elementContext>(i);
}

tree::TerminalNode* CSharpParser::Tuple_typeContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}

std::vector<tree::TerminalNode *> CSharpParser::Tuple_typeContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::Tuple_typeContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}


size_t CSharpParser::Tuple_typeContext::getRuleIndex() const {
  return CSharpParser::RuleTuple_type;
}

void CSharpParser::Tuple_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTuple_type(this);
}

void CSharpParser::Tuple_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTuple_type(this);
}

CSharpParser::Tuple_typeContext* CSharpParser::tuple_type() {
  Tuple_typeContext *_localctx = _tracker.createInstance<Tuple_typeContext>(_ctx, getState());
  enterRule(_localctx, 8, CSharpParser::RuleTuple_type);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(489);
    match(CSharpParser::OPEN_PARENS);
    setState(490);
    tuple_element();
    setState(493); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(491);
      match(CSharpParser::COMMA);
      setState(492);
      tuple_element();
      setState(495); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == CSharpParser::COMMA);
    setState(497);
    match(CSharpParser::CLOSE_PARENS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Tuple_elementContext ------------------------------------------------------------------

CSharpParser::Tuple_elementContext::Tuple_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Type_Context* CSharpParser::Tuple_elementContext::type_() {
  return getRuleContext<CSharpParser::Type_Context>(0);
}

CSharpParser::IdentifierContext* CSharpParser::Tuple_elementContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}


size_t CSharpParser::Tuple_elementContext::getRuleIndex() const {
  return CSharpParser::RuleTuple_element;
}

void CSharpParser::Tuple_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTuple_element(this);
}

void CSharpParser::Tuple_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTuple_element(this);
}

CSharpParser::Tuple_elementContext* CSharpParser::tuple_element() {
  Tuple_elementContext *_localctx = _tracker.createInstance<Tuple_elementContext>(_ctx, getState());
  enterRule(_localctx, 10, CSharpParser::RuleTuple_element);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(499);
    type_();
    setState(501);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3750091428249852928) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 1904629023639713) != 0)) {
      setState(500);
      identifier();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Simple_typeContext ------------------------------------------------------------------

CSharpParser::Simple_typeContext::Simple_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Numeric_typeContext* CSharpParser::Simple_typeContext::numeric_type() {
  return getRuleContext<CSharpParser::Numeric_typeContext>(0);
}

tree::TerminalNode* CSharpParser::Simple_typeContext::BOOL() {
  return getToken(CSharpParser::BOOL, 0);
}


size_t CSharpParser::Simple_typeContext::getRuleIndex() const {
  return CSharpParser::RuleSimple_type;
}

void CSharpParser::Simple_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimple_type(this);
}

void CSharpParser::Simple_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimple_type(this);
}

CSharpParser::Simple_typeContext* CSharpParser::simple_type() {
  Simple_typeContext *_localctx = _tracker.createInstance<Simple_typeContext>(_ctx, getState());
  enterRule(_localctx, 12, CSharpParser::RuleSimple_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(505);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::BYTE:
      case CSharpParser::CHAR:
      case CSharpParser::DECIMAL:
      case CSharpParser::DOUBLE:
      case CSharpParser::FLOAT:
      case CSharpParser::INT:
      case CSharpParser::LONG:
      case CSharpParser::SBYTE:
      case CSharpParser::SHORT:
      case CSharpParser::UINT:
      case CSharpParser::ULONG:
      case CSharpParser::USHORT: {
        enterOuterAlt(_localctx, 1);
        setState(503);
        numeric_type();
        break;
      }

      case CSharpParser::BOOL: {
        enterOuterAlt(_localctx, 2);
        setState(504);
        match(CSharpParser::BOOL);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Numeric_typeContext ------------------------------------------------------------------

CSharpParser::Numeric_typeContext::Numeric_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Integral_typeContext* CSharpParser::Numeric_typeContext::integral_type() {
  return getRuleContext<CSharpParser::Integral_typeContext>(0);
}

CSharpParser::Floating_point_typeContext* CSharpParser::Numeric_typeContext::floating_point_type() {
  return getRuleContext<CSharpParser::Floating_point_typeContext>(0);
}

tree::TerminalNode* CSharpParser::Numeric_typeContext::DECIMAL() {
  return getToken(CSharpParser::DECIMAL, 0);
}


size_t CSharpParser::Numeric_typeContext::getRuleIndex() const {
  return CSharpParser::RuleNumeric_type;
}

void CSharpParser::Numeric_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNumeric_type(this);
}

void CSharpParser::Numeric_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNumeric_type(this);
}

CSharpParser::Numeric_typeContext* CSharpParser::numeric_type() {
  Numeric_typeContext *_localctx = _tracker.createInstance<Numeric_typeContext>(_ctx, getState());
  enterRule(_localctx, 14, CSharpParser::RuleNumeric_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(510);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::BYTE:
      case CSharpParser::CHAR:
      case CSharpParser::INT:
      case CSharpParser::LONG:
      case CSharpParser::SBYTE:
      case CSharpParser::SHORT:
      case CSharpParser::UINT:
      case CSharpParser::ULONG:
      case CSharpParser::USHORT: {
        enterOuterAlt(_localctx, 1);
        setState(507);
        integral_type();
        break;
      }

      case CSharpParser::DOUBLE:
      case CSharpParser::FLOAT: {
        enterOuterAlt(_localctx, 2);
        setState(508);
        floating_point_type();
        break;
      }

      case CSharpParser::DECIMAL: {
        enterOuterAlt(_localctx, 3);
        setState(509);
        match(CSharpParser::DECIMAL);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Integral_typeContext ------------------------------------------------------------------

CSharpParser::Integral_typeContext::Integral_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Integral_typeContext::SBYTE() {
  return getToken(CSharpParser::SBYTE, 0);
}

tree::TerminalNode* CSharpParser::Integral_typeContext::BYTE() {
  return getToken(CSharpParser::BYTE, 0);
}

tree::TerminalNode* CSharpParser::Integral_typeContext::SHORT() {
  return getToken(CSharpParser::SHORT, 0);
}

tree::TerminalNode* CSharpParser::Integral_typeContext::USHORT() {
  return getToken(CSharpParser::USHORT, 0);
}

tree::TerminalNode* CSharpParser::Integral_typeContext::INT() {
  return getToken(CSharpParser::INT, 0);
}

tree::TerminalNode* CSharpParser::Integral_typeContext::UINT() {
  return getToken(CSharpParser::UINT, 0);
}

tree::TerminalNode* CSharpParser::Integral_typeContext::LONG() {
  return getToken(CSharpParser::LONG, 0);
}

tree::TerminalNode* CSharpParser::Integral_typeContext::ULONG() {
  return getToken(CSharpParser::ULONG, 0);
}

tree::TerminalNode* CSharpParser::Integral_typeContext::CHAR() {
  return getToken(CSharpParser::CHAR, 0);
}


size_t CSharpParser::Integral_typeContext::getRuleIndex() const {
  return CSharpParser::RuleIntegral_type;
}

void CSharpParser::Integral_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIntegral_type(this);
}

void CSharpParser::Integral_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIntegral_type(this);
}

CSharpParser::Integral_typeContext* CSharpParser::integral_type() {
  Integral_typeContext *_localctx = _tracker.createInstance<Integral_typeContext>(_ctx, getState());
  enterRule(_localctx, 16, CSharpParser::RuleIntegral_type);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(512);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -9187343239816937472) != 0) || ((((_la - 83) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 83)) & 2293777) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Floating_point_typeContext ------------------------------------------------------------------

CSharpParser::Floating_point_typeContext::Floating_point_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Floating_point_typeContext::FLOAT() {
  return getToken(CSharpParser::FLOAT, 0);
}

tree::TerminalNode* CSharpParser::Floating_point_typeContext::DOUBLE() {
  return getToken(CSharpParser::DOUBLE, 0);
}


size_t CSharpParser::Floating_point_typeContext::getRuleIndex() const {
  return CSharpParser::RuleFloating_point_type;
}

void CSharpParser::Floating_point_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFloating_point_type(this);
}

void CSharpParser::Floating_point_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFloating_point_type(this);
}

CSharpParser::Floating_point_typeContext* CSharpParser::floating_point_type() {
  Floating_point_typeContext *_localctx = _tracker.createInstance<Floating_point_typeContext>(_ctx, getState());
  enterRule(_localctx, 18, CSharpParser::RuleFloating_point_type);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(514);
    _la = _input->LA(1);
    if (!(_la == CSharpParser::DOUBLE

    || _la == CSharpParser::FLOAT)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Class_typeContext ------------------------------------------------------------------

CSharpParser::Class_typeContext::Class_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Namespace_or_type_nameContext* CSharpParser::Class_typeContext::namespace_or_type_name() {
  return getRuleContext<CSharpParser::Namespace_or_type_nameContext>(0);
}

tree::TerminalNode* CSharpParser::Class_typeContext::OBJECT() {
  return getToken(CSharpParser::OBJECT, 0);
}

tree::TerminalNode* CSharpParser::Class_typeContext::DYNAMIC() {
  return getToken(CSharpParser::DYNAMIC, 0);
}

tree::TerminalNode* CSharpParser::Class_typeContext::STRING() {
  return getToken(CSharpParser::STRING, 0);
}


size_t CSharpParser::Class_typeContext::getRuleIndex() const {
  return CSharpParser::RuleClass_type;
}

void CSharpParser::Class_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClass_type(this);
}

void CSharpParser::Class_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClass_type(this);
}

CSharpParser::Class_typeContext* CSharpParser::class_type() {
  Class_typeContext *_localctx = _tracker.createInstance<Class_typeContext>(_ctx, getState());
  enterRule(_localctx, 20, CSharpParser::RuleClass_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(520);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 16, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(516);
      namespace_or_type_name();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(517);
      match(CSharpParser::OBJECT);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(518);
      match(CSharpParser::DYNAMIC);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(519);
      match(CSharpParser::STRING);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_argument_listContext ------------------------------------------------------------------

CSharpParser::Type_argument_listContext::Type_argument_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Type_argument_listContext::LT() {
  return getToken(CSharpParser::LT, 0);
}

std::vector<CSharpParser::Type_Context *> CSharpParser::Type_argument_listContext::type_() {
  return getRuleContexts<CSharpParser::Type_Context>();
}

CSharpParser::Type_Context* CSharpParser::Type_argument_listContext::type_(size_t i) {
  return getRuleContext<CSharpParser::Type_Context>(i);
}

tree::TerminalNode* CSharpParser::Type_argument_listContext::GT() {
  return getToken(CSharpParser::GT, 0);
}

std::vector<tree::TerminalNode *> CSharpParser::Type_argument_listContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::Type_argument_listContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}


size_t CSharpParser::Type_argument_listContext::getRuleIndex() const {
  return CSharpParser::RuleType_argument_list;
}

void CSharpParser::Type_argument_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_argument_list(this);
}

void CSharpParser::Type_argument_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_argument_list(this);
}

CSharpParser::Type_argument_listContext* CSharpParser::type_argument_list() {
  Type_argument_listContext *_localctx = _tracker.createInstance<Type_argument_listContext>(_ctx, getState());
  enterRule(_localctx, 22, CSharpParser::RuleType_argument_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(522);
    match(CSharpParser::LT);
    setState(523);
    type_();
    setState(528);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CSharpParser::COMMA) {
      setState(524);
      match(CSharpParser::COMMA);
      setState(525);
      type_();
      setState(530);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(531);
    match(CSharpParser::GT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Argument_listContext ------------------------------------------------------------------

CSharpParser::Argument_listContext::Argument_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::ArgumentContext *> CSharpParser::Argument_listContext::argument() {
  return getRuleContexts<CSharpParser::ArgumentContext>();
}

CSharpParser::ArgumentContext* CSharpParser::Argument_listContext::argument(size_t i) {
  return getRuleContext<CSharpParser::ArgumentContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::Argument_listContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::Argument_listContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}


size_t CSharpParser::Argument_listContext::getRuleIndex() const {
  return CSharpParser::RuleArgument_list;
}

void CSharpParser::Argument_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArgument_list(this);
}

void CSharpParser::Argument_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArgument_list(this);
}

CSharpParser::Argument_listContext* CSharpParser::argument_list() {
  Argument_listContext *_localctx = _tracker.createInstance<Argument_listContext>(_ctx, getState());
  enterRule(_localctx, 24, CSharpParser::RuleArgument_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(533);
    argument();
    setState(538);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CSharpParser::COMMA) {
      setState(534);
      match(CSharpParser::COMMA);
      setState(535);
      argument();
      setState(540);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArgumentContext ------------------------------------------------------------------

CSharpParser::ArgumentContext::ArgumentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::ExpressionContext* CSharpParser::ArgumentContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}

CSharpParser::IdentifierContext* CSharpParser::ArgumentContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

tree::TerminalNode* CSharpParser::ArgumentContext::COLON() {
  return getToken(CSharpParser::COLON, 0);
}

tree::TerminalNode* CSharpParser::ArgumentContext::VAR() {
  return getToken(CSharpParser::VAR, 0);
}

CSharpParser::Type_Context* CSharpParser::ArgumentContext::type_() {
  return getRuleContext<CSharpParser::Type_Context>(0);
}

tree::TerminalNode* CSharpParser::ArgumentContext::REF() {
  return getToken(CSharpParser::REF, 0);
}

tree::TerminalNode* CSharpParser::ArgumentContext::OUT() {
  return getToken(CSharpParser::OUT, 0);
}

tree::TerminalNode* CSharpParser::ArgumentContext::IN() {
  return getToken(CSharpParser::IN, 0);
}


size_t CSharpParser::ArgumentContext::getRuleIndex() const {
  return CSharpParser::RuleArgument;
}

void CSharpParser::ArgumentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArgument(this);
}

void CSharpParser::ArgumentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArgument(this);
}

CSharpParser::ArgumentContext* CSharpParser::argument() {
  ArgumentContext *_localctx = _tracker.createInstance<ArgumentContext>(_ctx, getState());
  enterRule(_localctx, 26, CSharpParser::RuleArgument);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(544);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 19, _ctx)) {
    case 1: {
      setState(541);
      identifier();
      setState(542);
      match(CSharpParser::COLON);
      break;
    }

    default:
      break;
    }
    setState(547);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 20, _ctx)) {
    case 1: {
      setState(546);
      antlrcpp::downCast<ArgumentContext *>(_localctx)->refout = _input->LT(1);
      _la = _input->LA(1);
      if (!(((((_la - 54) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 54)) & 67371009) != 0))) {
        antlrcpp::downCast<ArgumentContext *>(_localctx)->refout = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    default:
      break;
    }
    setState(551);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 21, _ctx)) {
    case 1: {
      setState(549);
      match(CSharpParser::VAR);
      break;
    }

    case 2: {
      setState(550);
      type_();
      break;
    }

    default:
      break;
    }
    setState(553);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionContext ------------------------------------------------------------------

CSharpParser::ExpressionContext::ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::AssignmentContext* CSharpParser::ExpressionContext::assignment() {
  return getRuleContext<CSharpParser::AssignmentContext>(0);
}

CSharpParser::Non_assignment_expressionContext* CSharpParser::ExpressionContext::non_assignment_expression() {
  return getRuleContext<CSharpParser::Non_assignment_expressionContext>(0);
}

tree::TerminalNode* CSharpParser::ExpressionContext::REF() {
  return getToken(CSharpParser::REF, 0);
}


size_t CSharpParser::ExpressionContext::getRuleIndex() const {
  return CSharpParser::RuleExpression;
}

void CSharpParser::ExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpression(this);
}

void CSharpParser::ExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpression(this);
}

CSharpParser::ExpressionContext* CSharpParser::expression() {
  ExpressionContext *_localctx = _tracker.createInstance<ExpressionContext>(_ctx, getState());
  enterRule(_localctx, 28, CSharpParser::RuleExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(559);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 22, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(555);
      assignment();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(556);
      non_assignment_expression();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(557);
      match(CSharpParser::REF);
      setState(558);
      non_assignment_expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Non_assignment_expressionContext ------------------------------------------------------------------

CSharpParser::Non_assignment_expressionContext::Non_assignment_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Lambda_expressionContext* CSharpParser::Non_assignment_expressionContext::lambda_expression() {
  return getRuleContext<CSharpParser::Lambda_expressionContext>(0);
}

CSharpParser::Query_expressionContext* CSharpParser::Non_assignment_expressionContext::query_expression() {
  return getRuleContext<CSharpParser::Query_expressionContext>(0);
}

CSharpParser::Conditional_expressionContext* CSharpParser::Non_assignment_expressionContext::conditional_expression() {
  return getRuleContext<CSharpParser::Conditional_expressionContext>(0);
}


size_t CSharpParser::Non_assignment_expressionContext::getRuleIndex() const {
  return CSharpParser::RuleNon_assignment_expression;
}

void CSharpParser::Non_assignment_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNon_assignment_expression(this);
}

void CSharpParser::Non_assignment_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNon_assignment_expression(this);
}

CSharpParser::Non_assignment_expressionContext* CSharpParser::non_assignment_expression() {
  Non_assignment_expressionContext *_localctx = _tracker.createInstance<Non_assignment_expressionContext>(_ctx, getState());
  enterRule(_localctx, 30, CSharpParser::RuleNon_assignment_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(564);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 23, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(561);
      lambda_expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(562);
      query_expression();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(563);
      conditional_expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssignmentContext ------------------------------------------------------------------

CSharpParser::AssignmentContext::AssignmentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Unary_expressionContext* CSharpParser::AssignmentContext::unary_expression() {
  return getRuleContext<CSharpParser::Unary_expressionContext>(0);
}

CSharpParser::Assignment_operatorContext* CSharpParser::AssignmentContext::assignment_operator() {
  return getRuleContext<CSharpParser::Assignment_operatorContext>(0);
}

CSharpParser::ExpressionContext* CSharpParser::AssignmentContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}

tree::TerminalNode* CSharpParser::AssignmentContext::OP_COALESCING_ASSIGNMENT() {
  return getToken(CSharpParser::OP_COALESCING_ASSIGNMENT, 0);
}

CSharpParser::Throwable_expressionContext* CSharpParser::AssignmentContext::throwable_expression() {
  return getRuleContext<CSharpParser::Throwable_expressionContext>(0);
}


size_t CSharpParser::AssignmentContext::getRuleIndex() const {
  return CSharpParser::RuleAssignment;
}

void CSharpParser::AssignmentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssignment(this);
}

void CSharpParser::AssignmentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssignment(this);
}

CSharpParser::AssignmentContext* CSharpParser::assignment() {
  AssignmentContext *_localctx = _tracker.createInstance<AssignmentContext>(_ctx, getState());
  enterRule(_localctx, 32, CSharpParser::RuleAssignment);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(574);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 24, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(566);
      unary_expression();
      setState(567);
      assignment_operator();
      setState(568);
      expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(570);
      unary_expression();
      setState(571);
      match(CSharpParser::OP_COALESCING_ASSIGNMENT);
      setState(572);
      throwable_expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Assignment_operatorContext ------------------------------------------------------------------

CSharpParser::Assignment_operatorContext::Assignment_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Assignment_operatorContext::ASSIGNMENT() {
  return getToken(CSharpParser::ASSIGNMENT, 0);
}

tree::TerminalNode* CSharpParser::Assignment_operatorContext::OP_ADD_ASSIGNMENT() {
  return getToken(CSharpParser::OP_ADD_ASSIGNMENT, 0);
}

tree::TerminalNode* CSharpParser::Assignment_operatorContext::OP_SUB_ASSIGNMENT() {
  return getToken(CSharpParser::OP_SUB_ASSIGNMENT, 0);
}

tree::TerminalNode* CSharpParser::Assignment_operatorContext::OP_MULT_ASSIGNMENT() {
  return getToken(CSharpParser::OP_MULT_ASSIGNMENT, 0);
}

tree::TerminalNode* CSharpParser::Assignment_operatorContext::OP_DIV_ASSIGNMENT() {
  return getToken(CSharpParser::OP_DIV_ASSIGNMENT, 0);
}

tree::TerminalNode* CSharpParser::Assignment_operatorContext::OP_MOD_ASSIGNMENT() {
  return getToken(CSharpParser::OP_MOD_ASSIGNMENT, 0);
}

tree::TerminalNode* CSharpParser::Assignment_operatorContext::OP_AND_ASSIGNMENT() {
  return getToken(CSharpParser::OP_AND_ASSIGNMENT, 0);
}

tree::TerminalNode* CSharpParser::Assignment_operatorContext::OP_OR_ASSIGNMENT() {
  return getToken(CSharpParser::OP_OR_ASSIGNMENT, 0);
}

tree::TerminalNode* CSharpParser::Assignment_operatorContext::OP_XOR_ASSIGNMENT() {
  return getToken(CSharpParser::OP_XOR_ASSIGNMENT, 0);
}

tree::TerminalNode* CSharpParser::Assignment_operatorContext::OP_LEFT_SHIFT_ASSIGNMENT() {
  return getToken(CSharpParser::OP_LEFT_SHIFT_ASSIGNMENT, 0);
}

CSharpParser::Right_shift_assignmentContext* CSharpParser::Assignment_operatorContext::right_shift_assignment() {
  return getRuleContext<CSharpParser::Right_shift_assignmentContext>(0);
}


size_t CSharpParser::Assignment_operatorContext::getRuleIndex() const {
  return CSharpParser::RuleAssignment_operator;
}

void CSharpParser::Assignment_operatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssignment_operator(this);
}

void CSharpParser::Assignment_operatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssignment_operator(this);
}

CSharpParser::Assignment_operatorContext* CSharpParser::assignment_operator() {
  Assignment_operatorContext *_localctx = _tracker.createInstance<Assignment_operatorContext>(_ctx, getState());
  enterRule(_localctx, 34, CSharpParser::RuleAssignment_operator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(587);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::ASSIGNMENT: {
        enterOuterAlt(_localctx, 1);
        setState(576);
        match(CSharpParser::ASSIGNMENT);
        break;
      }

      case CSharpParser::OP_ADD_ASSIGNMENT: {
        enterOuterAlt(_localctx, 2);
        setState(577);
        match(CSharpParser::OP_ADD_ASSIGNMENT);
        break;
      }

      case CSharpParser::OP_SUB_ASSIGNMENT: {
        enterOuterAlt(_localctx, 3);
        setState(578);
        match(CSharpParser::OP_SUB_ASSIGNMENT);
        break;
      }

      case CSharpParser::OP_MULT_ASSIGNMENT: {
        enterOuterAlt(_localctx, 4);
        setState(579);
        match(CSharpParser::OP_MULT_ASSIGNMENT);
        break;
      }

      case CSharpParser::OP_DIV_ASSIGNMENT: {
        enterOuterAlt(_localctx, 5);
        setState(580);
        match(CSharpParser::OP_DIV_ASSIGNMENT);
        break;
      }

      case CSharpParser::OP_MOD_ASSIGNMENT: {
        enterOuterAlt(_localctx, 6);
        setState(581);
        match(CSharpParser::OP_MOD_ASSIGNMENT);
        break;
      }

      case CSharpParser::OP_AND_ASSIGNMENT: {
        enterOuterAlt(_localctx, 7);
        setState(582);
        match(CSharpParser::OP_AND_ASSIGNMENT);
        break;
      }

      case CSharpParser::OP_OR_ASSIGNMENT: {
        enterOuterAlt(_localctx, 8);
        setState(583);
        match(CSharpParser::OP_OR_ASSIGNMENT);
        break;
      }

      case CSharpParser::OP_XOR_ASSIGNMENT: {
        enterOuterAlt(_localctx, 9);
        setState(584);
        match(CSharpParser::OP_XOR_ASSIGNMENT);
        break;
      }

      case CSharpParser::OP_LEFT_SHIFT_ASSIGNMENT: {
        enterOuterAlt(_localctx, 10);
        setState(585);
        match(CSharpParser::OP_LEFT_SHIFT_ASSIGNMENT);
        break;
      }

      case CSharpParser::GT: {
        enterOuterAlt(_localctx, 11);
        setState(586);
        right_shift_assignment();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Conditional_expressionContext ------------------------------------------------------------------

CSharpParser::Conditional_expressionContext::Conditional_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Null_coalescing_expressionContext* CSharpParser::Conditional_expressionContext::null_coalescing_expression() {
  return getRuleContext<CSharpParser::Null_coalescing_expressionContext>(0);
}

tree::TerminalNode* CSharpParser::Conditional_expressionContext::INTERR() {
  return getToken(CSharpParser::INTERR, 0);
}

std::vector<CSharpParser::Throwable_expressionContext *> CSharpParser::Conditional_expressionContext::throwable_expression() {
  return getRuleContexts<CSharpParser::Throwable_expressionContext>();
}

CSharpParser::Throwable_expressionContext* CSharpParser::Conditional_expressionContext::throwable_expression(size_t i) {
  return getRuleContext<CSharpParser::Throwable_expressionContext>(i);
}

tree::TerminalNode* CSharpParser::Conditional_expressionContext::COLON() {
  return getToken(CSharpParser::COLON, 0);
}


size_t CSharpParser::Conditional_expressionContext::getRuleIndex() const {
  return CSharpParser::RuleConditional_expression;
}

void CSharpParser::Conditional_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConditional_expression(this);
}

void CSharpParser::Conditional_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConditional_expression(this);
}

CSharpParser::Conditional_expressionContext* CSharpParser::conditional_expression() {
  Conditional_expressionContext *_localctx = _tracker.createInstance<Conditional_expressionContext>(_ctx, getState());
  enterRule(_localctx, 36, CSharpParser::RuleConditional_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(589);
    null_coalescing_expression();
    setState(595);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 26, _ctx)) {
    case 1: {
      setState(590);
      match(CSharpParser::INTERR);
      setState(591);
      throwable_expression();
      setState(592);
      match(CSharpParser::COLON);
      setState(593);
      throwable_expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Null_coalescing_expressionContext ------------------------------------------------------------------

CSharpParser::Null_coalescing_expressionContext::Null_coalescing_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Conditional_or_expressionContext* CSharpParser::Null_coalescing_expressionContext::conditional_or_expression() {
  return getRuleContext<CSharpParser::Conditional_or_expressionContext>(0);
}

tree::TerminalNode* CSharpParser::Null_coalescing_expressionContext::OP_COALESCING() {
  return getToken(CSharpParser::OP_COALESCING, 0);
}

CSharpParser::Null_coalescing_expressionContext* CSharpParser::Null_coalescing_expressionContext::null_coalescing_expression() {
  return getRuleContext<CSharpParser::Null_coalescing_expressionContext>(0);
}

CSharpParser::Throw_expressionContext* CSharpParser::Null_coalescing_expressionContext::throw_expression() {
  return getRuleContext<CSharpParser::Throw_expressionContext>(0);
}


size_t CSharpParser::Null_coalescing_expressionContext::getRuleIndex() const {
  return CSharpParser::RuleNull_coalescing_expression;
}

void CSharpParser::Null_coalescing_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNull_coalescing_expression(this);
}

void CSharpParser::Null_coalescing_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNull_coalescing_expression(this);
}

CSharpParser::Null_coalescing_expressionContext* CSharpParser::null_coalescing_expression() {
  Null_coalescing_expressionContext *_localctx = _tracker.createInstance<Null_coalescing_expressionContext>(_ctx, getState());
  enterRule(_localctx, 38, CSharpParser::RuleNull_coalescing_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(597);
    conditional_or_expression();
    setState(603);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 28, _ctx)) {
    case 1: {
      setState(598);
      match(CSharpParser::OP_COALESCING);
      setState(601);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case CSharpParser::ADD:
        case CSharpParser::ALIAS:
        case CSharpParser::ARGLIST:
        case CSharpParser::ASCENDING:
        case CSharpParser::ASYNC:
        case CSharpParser::AWAIT:
        case CSharpParser::BASE:
        case CSharpParser::BOOL:
        case CSharpParser::BY:
        case CSharpParser::BYTE:
        case CSharpParser::CHAR:
        case CSharpParser::CHECKED:
        case CSharpParser::DECIMAL:
        case CSharpParser::DEFAULT:
        case CSharpParser::DELEGATE:
        case CSharpParser::DESCENDING:
        case CSharpParser::DOUBLE:
        case CSharpParser::DYNAMIC:
        case CSharpParser::EQUALS:
        case CSharpParser::FALSE:
        case CSharpParser::FLOAT:
        case CSharpParser::FROM:
        case CSharpParser::GET:
        case CSharpParser::GROUP:
        case CSharpParser::INT:
        case CSharpParser::INTO:
        case CSharpParser::JOIN:
        case CSharpParser::LET:
        case CSharpParser::LONG:
        case CSharpParser::NAMEOF:
        case CSharpParser::NEW:
        case CSharpParser::NULL_:
        case CSharpParser::OBJECT:
        case CSharpParser::ON:
        case CSharpParser::ORDERBY:
        case CSharpParser::PARTIAL:
        case CSharpParser::REMOVE:
        case CSharpParser::SBYTE:
        case CSharpParser::SELECT:
        case CSharpParser::SET:
        case CSharpParser::SHORT:
        case CSharpParser::SIZEOF:
        case CSharpParser::STRING:
        case CSharpParser::THIS:
        case CSharpParser::TRUE:
        case CSharpParser::TYPEOF:
        case CSharpParser::UINT:
        case CSharpParser::ULONG:
        case CSharpParser::UNCHECKED:
        case CSharpParser::UNMANAGED:
        case CSharpParser::USHORT:
        case CSharpParser::VAR:
        case CSharpParser::WHEN:
        case CSharpParser::WHERE:
        case CSharpParser::YIELD:
        case CSharpParser::IDENTIFIER:
        case CSharpParser::LITERAL_ACCESS:
        case CSharpParser::INTEGER_LITERAL:
        case CSharpParser::HEX_INTEGER_LITERAL:
        case CSharpParser::BIN_INTEGER_LITERAL:
        case CSharpParser::REAL_LITERAL:
        case CSharpParser::CHARACTER_LITERAL:
        case CSharpParser::REGULAR_STRING:
        case CSharpParser::VERBATIUM_STRING:
        case CSharpParser::INTERPOLATED_REGULAR_STRING_START:
        case CSharpParser::INTERPOLATED_VERBATIUM_STRING_START:
        case CSharpParser::OPEN_PARENS:
        case CSharpParser::PLUS:
        case CSharpParser::MINUS:
        case CSharpParser::STAR:
        case CSharpParser::AMP:
        case CSharpParser::CARET:
        case CSharpParser::BANG:
        case CSharpParser::TILDE:
        case CSharpParser::OP_INC:
        case CSharpParser::OP_DEC:
        case CSharpParser::OP_RANGE: {
          setState(599);
          null_coalescing_expression();
          break;
        }

        case CSharpParser::THROW: {
          setState(600);
          throw_expression();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Conditional_or_expressionContext ------------------------------------------------------------------

CSharpParser::Conditional_or_expressionContext::Conditional_or_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::Conditional_and_expressionContext *> CSharpParser::Conditional_or_expressionContext::conditional_and_expression() {
  return getRuleContexts<CSharpParser::Conditional_and_expressionContext>();
}

CSharpParser::Conditional_and_expressionContext* CSharpParser::Conditional_or_expressionContext::conditional_and_expression(size_t i) {
  return getRuleContext<CSharpParser::Conditional_and_expressionContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::Conditional_or_expressionContext::OP_OR() {
  return getTokens(CSharpParser::OP_OR);
}

tree::TerminalNode* CSharpParser::Conditional_or_expressionContext::OP_OR(size_t i) {
  return getToken(CSharpParser::OP_OR, i);
}


size_t CSharpParser::Conditional_or_expressionContext::getRuleIndex() const {
  return CSharpParser::RuleConditional_or_expression;
}

void CSharpParser::Conditional_or_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConditional_or_expression(this);
}

void CSharpParser::Conditional_or_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConditional_or_expression(this);
}

CSharpParser::Conditional_or_expressionContext* CSharpParser::conditional_or_expression() {
  Conditional_or_expressionContext *_localctx = _tracker.createInstance<Conditional_or_expressionContext>(_ctx, getState());
  enterRule(_localctx, 40, CSharpParser::RuleConditional_or_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(605);
    conditional_and_expression();
    setState(610);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 29, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(606);
        match(CSharpParser::OP_OR);
        setState(607);
        conditional_and_expression(); 
      }
      setState(612);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 29, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Conditional_and_expressionContext ------------------------------------------------------------------

CSharpParser::Conditional_and_expressionContext::Conditional_and_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::Inclusive_or_expressionContext *> CSharpParser::Conditional_and_expressionContext::inclusive_or_expression() {
  return getRuleContexts<CSharpParser::Inclusive_or_expressionContext>();
}

CSharpParser::Inclusive_or_expressionContext* CSharpParser::Conditional_and_expressionContext::inclusive_or_expression(size_t i) {
  return getRuleContext<CSharpParser::Inclusive_or_expressionContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::Conditional_and_expressionContext::OP_AND() {
  return getTokens(CSharpParser::OP_AND);
}

tree::TerminalNode* CSharpParser::Conditional_and_expressionContext::OP_AND(size_t i) {
  return getToken(CSharpParser::OP_AND, i);
}


size_t CSharpParser::Conditional_and_expressionContext::getRuleIndex() const {
  return CSharpParser::RuleConditional_and_expression;
}

void CSharpParser::Conditional_and_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConditional_and_expression(this);
}

void CSharpParser::Conditional_and_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConditional_and_expression(this);
}

CSharpParser::Conditional_and_expressionContext* CSharpParser::conditional_and_expression() {
  Conditional_and_expressionContext *_localctx = _tracker.createInstance<Conditional_and_expressionContext>(_ctx, getState());
  enterRule(_localctx, 42, CSharpParser::RuleConditional_and_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(613);
    inclusive_or_expression();
    setState(618);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 30, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(614);
        match(CSharpParser::OP_AND);
        setState(615);
        inclusive_or_expression(); 
      }
      setState(620);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 30, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Inclusive_or_expressionContext ------------------------------------------------------------------

CSharpParser::Inclusive_or_expressionContext::Inclusive_or_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::Exclusive_or_expressionContext *> CSharpParser::Inclusive_or_expressionContext::exclusive_or_expression() {
  return getRuleContexts<CSharpParser::Exclusive_or_expressionContext>();
}

CSharpParser::Exclusive_or_expressionContext* CSharpParser::Inclusive_or_expressionContext::exclusive_or_expression(size_t i) {
  return getRuleContext<CSharpParser::Exclusive_or_expressionContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::Inclusive_or_expressionContext::BITWISE_OR() {
  return getTokens(CSharpParser::BITWISE_OR);
}

tree::TerminalNode* CSharpParser::Inclusive_or_expressionContext::BITWISE_OR(size_t i) {
  return getToken(CSharpParser::BITWISE_OR, i);
}


size_t CSharpParser::Inclusive_or_expressionContext::getRuleIndex() const {
  return CSharpParser::RuleInclusive_or_expression;
}

void CSharpParser::Inclusive_or_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInclusive_or_expression(this);
}

void CSharpParser::Inclusive_or_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInclusive_or_expression(this);
}

CSharpParser::Inclusive_or_expressionContext* CSharpParser::inclusive_or_expression() {
  Inclusive_or_expressionContext *_localctx = _tracker.createInstance<Inclusive_or_expressionContext>(_ctx, getState());
  enterRule(_localctx, 44, CSharpParser::RuleInclusive_or_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(621);
    exclusive_or_expression();
    setState(626);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 31, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(622);
        match(CSharpParser::BITWISE_OR);
        setState(623);
        exclusive_or_expression(); 
      }
      setState(628);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 31, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Exclusive_or_expressionContext ------------------------------------------------------------------

CSharpParser::Exclusive_or_expressionContext::Exclusive_or_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::And_expressionContext *> CSharpParser::Exclusive_or_expressionContext::and_expression() {
  return getRuleContexts<CSharpParser::And_expressionContext>();
}

CSharpParser::And_expressionContext* CSharpParser::Exclusive_or_expressionContext::and_expression(size_t i) {
  return getRuleContext<CSharpParser::And_expressionContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::Exclusive_or_expressionContext::CARET() {
  return getTokens(CSharpParser::CARET);
}

tree::TerminalNode* CSharpParser::Exclusive_or_expressionContext::CARET(size_t i) {
  return getToken(CSharpParser::CARET, i);
}


size_t CSharpParser::Exclusive_or_expressionContext::getRuleIndex() const {
  return CSharpParser::RuleExclusive_or_expression;
}

void CSharpParser::Exclusive_or_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExclusive_or_expression(this);
}

void CSharpParser::Exclusive_or_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExclusive_or_expression(this);
}

CSharpParser::Exclusive_or_expressionContext* CSharpParser::exclusive_or_expression() {
  Exclusive_or_expressionContext *_localctx = _tracker.createInstance<Exclusive_or_expressionContext>(_ctx, getState());
  enterRule(_localctx, 46, CSharpParser::RuleExclusive_or_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(629);
    and_expression();
    setState(634);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 32, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(630);
        match(CSharpParser::CARET);
        setState(631);
        and_expression(); 
      }
      setState(636);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 32, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- And_expressionContext ------------------------------------------------------------------

CSharpParser::And_expressionContext::And_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::Equality_expressionContext *> CSharpParser::And_expressionContext::equality_expression() {
  return getRuleContexts<CSharpParser::Equality_expressionContext>();
}

CSharpParser::Equality_expressionContext* CSharpParser::And_expressionContext::equality_expression(size_t i) {
  return getRuleContext<CSharpParser::Equality_expressionContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::And_expressionContext::AMP() {
  return getTokens(CSharpParser::AMP);
}

tree::TerminalNode* CSharpParser::And_expressionContext::AMP(size_t i) {
  return getToken(CSharpParser::AMP, i);
}


size_t CSharpParser::And_expressionContext::getRuleIndex() const {
  return CSharpParser::RuleAnd_expression;
}

void CSharpParser::And_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnd_expression(this);
}

void CSharpParser::And_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnd_expression(this);
}

CSharpParser::And_expressionContext* CSharpParser::and_expression() {
  And_expressionContext *_localctx = _tracker.createInstance<And_expressionContext>(_ctx, getState());
  enterRule(_localctx, 48, CSharpParser::RuleAnd_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(637);
    equality_expression();
    setState(642);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 33, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(638);
        match(CSharpParser::AMP);
        setState(639);
        equality_expression(); 
      }
      setState(644);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 33, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Equality_expressionContext ------------------------------------------------------------------

CSharpParser::Equality_expressionContext::Equality_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::Relational_expressionContext *> CSharpParser::Equality_expressionContext::relational_expression() {
  return getRuleContexts<CSharpParser::Relational_expressionContext>();
}

CSharpParser::Relational_expressionContext* CSharpParser::Equality_expressionContext::relational_expression(size_t i) {
  return getRuleContext<CSharpParser::Relational_expressionContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::Equality_expressionContext::OP_EQ() {
  return getTokens(CSharpParser::OP_EQ);
}

tree::TerminalNode* CSharpParser::Equality_expressionContext::OP_EQ(size_t i) {
  return getToken(CSharpParser::OP_EQ, i);
}

std::vector<tree::TerminalNode *> CSharpParser::Equality_expressionContext::OP_NE() {
  return getTokens(CSharpParser::OP_NE);
}

tree::TerminalNode* CSharpParser::Equality_expressionContext::OP_NE(size_t i) {
  return getToken(CSharpParser::OP_NE, i);
}


size_t CSharpParser::Equality_expressionContext::getRuleIndex() const {
  return CSharpParser::RuleEquality_expression;
}

void CSharpParser::Equality_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEquality_expression(this);
}

void CSharpParser::Equality_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEquality_expression(this);
}

CSharpParser::Equality_expressionContext* CSharpParser::equality_expression() {
  Equality_expressionContext *_localctx = _tracker.createInstance<Equality_expressionContext>(_ctx, getState());
  enterRule(_localctx, 50, CSharpParser::RuleEquality_expression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(645);
    relational_expression();
    setState(650);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 34, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(646);
        _la = _input->LA(1);
        if (!(_la == CSharpParser::OP_EQ

        || _la == CSharpParser::OP_NE)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(647);
        relational_expression(); 
      }
      setState(652);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 34, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Relational_expressionContext ------------------------------------------------------------------

CSharpParser::Relational_expressionContext::Relational_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::Shift_expressionContext *> CSharpParser::Relational_expressionContext::shift_expression() {
  return getRuleContexts<CSharpParser::Shift_expressionContext>();
}

CSharpParser::Shift_expressionContext* CSharpParser::Relational_expressionContext::shift_expression(size_t i) {
  return getRuleContext<CSharpParser::Shift_expressionContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::Relational_expressionContext::IS() {
  return getTokens(CSharpParser::IS);
}

tree::TerminalNode* CSharpParser::Relational_expressionContext::IS(size_t i) {
  return getToken(CSharpParser::IS, i);
}

std::vector<CSharpParser::IsTypeContext *> CSharpParser::Relational_expressionContext::isType() {
  return getRuleContexts<CSharpParser::IsTypeContext>();
}

CSharpParser::IsTypeContext* CSharpParser::Relational_expressionContext::isType(size_t i) {
  return getRuleContext<CSharpParser::IsTypeContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::Relational_expressionContext::AS() {
  return getTokens(CSharpParser::AS);
}

tree::TerminalNode* CSharpParser::Relational_expressionContext::AS(size_t i) {
  return getToken(CSharpParser::AS, i);
}

std::vector<CSharpParser::Type_Context *> CSharpParser::Relational_expressionContext::type_() {
  return getRuleContexts<CSharpParser::Type_Context>();
}

CSharpParser::Type_Context* CSharpParser::Relational_expressionContext::type_(size_t i) {
  return getRuleContext<CSharpParser::Type_Context>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::Relational_expressionContext::LT() {
  return getTokens(CSharpParser::LT);
}

tree::TerminalNode* CSharpParser::Relational_expressionContext::LT(size_t i) {
  return getToken(CSharpParser::LT, i);
}

std::vector<tree::TerminalNode *> CSharpParser::Relational_expressionContext::GT() {
  return getTokens(CSharpParser::GT);
}

tree::TerminalNode* CSharpParser::Relational_expressionContext::GT(size_t i) {
  return getToken(CSharpParser::GT, i);
}

std::vector<tree::TerminalNode *> CSharpParser::Relational_expressionContext::OP_LE() {
  return getTokens(CSharpParser::OP_LE);
}

tree::TerminalNode* CSharpParser::Relational_expressionContext::OP_LE(size_t i) {
  return getToken(CSharpParser::OP_LE, i);
}

std::vector<tree::TerminalNode *> CSharpParser::Relational_expressionContext::OP_GE() {
  return getTokens(CSharpParser::OP_GE);
}

tree::TerminalNode* CSharpParser::Relational_expressionContext::OP_GE(size_t i) {
  return getToken(CSharpParser::OP_GE, i);
}


size_t CSharpParser::Relational_expressionContext::getRuleIndex() const {
  return CSharpParser::RuleRelational_expression;
}

void CSharpParser::Relational_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRelational_expression(this);
}

void CSharpParser::Relational_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRelational_expression(this);
}

CSharpParser::Relational_expressionContext* CSharpParser::relational_expression() {
  Relational_expressionContext *_localctx = _tracker.createInstance<Relational_expressionContext>(_ctx, getState());
  enterRule(_localctx, 52, CSharpParser::RuleRelational_expression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(653);
    shift_expression();
    setState(662);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 36, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(660);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case CSharpParser::LT:
          case CSharpParser::GT:
          case CSharpParser::OP_LE:
          case CSharpParser::OP_GE: {
            setState(654);
            _la = _input->LA(1);
            if (!(((((_la - 146) & ~ 0x3fULL) == 0) &&
              ((1ULL << (_la - 146)) & 12291) != 0))) {
            _errHandler->recoverInline(this);
            }
            else {
              _errHandler->reportMatch(this);
              consume();
            }
            setState(655);
            shift_expression();
            break;
          }

          case CSharpParser::IS: {
            setState(656);
            match(CSharpParser::IS);
            setState(657);
            isType();
            break;
          }

          case CSharpParser::AS: {
            setState(658);
            match(CSharpParser::AS);
            setState(659);
            type_();
            break;
          }

        default:
          throw NoViableAltException(this);
        } 
      }
      setState(664);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 36, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Shift_expressionContext ------------------------------------------------------------------

CSharpParser::Shift_expressionContext::Shift_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::Additive_expressionContext *> CSharpParser::Shift_expressionContext::additive_expression() {
  return getRuleContexts<CSharpParser::Additive_expressionContext>();
}

CSharpParser::Additive_expressionContext* CSharpParser::Shift_expressionContext::additive_expression(size_t i) {
  return getRuleContext<CSharpParser::Additive_expressionContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::Shift_expressionContext::OP_LEFT_SHIFT() {
  return getTokens(CSharpParser::OP_LEFT_SHIFT);
}

tree::TerminalNode* CSharpParser::Shift_expressionContext::OP_LEFT_SHIFT(size_t i) {
  return getToken(CSharpParser::OP_LEFT_SHIFT, i);
}

std::vector<CSharpParser::Right_shiftContext *> CSharpParser::Shift_expressionContext::right_shift() {
  return getRuleContexts<CSharpParser::Right_shiftContext>();
}

CSharpParser::Right_shiftContext* CSharpParser::Shift_expressionContext::right_shift(size_t i) {
  return getRuleContext<CSharpParser::Right_shiftContext>(i);
}


size_t CSharpParser::Shift_expressionContext::getRuleIndex() const {
  return CSharpParser::RuleShift_expression;
}

void CSharpParser::Shift_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShift_expression(this);
}

void CSharpParser::Shift_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShift_expression(this);
}

CSharpParser::Shift_expressionContext* CSharpParser::shift_expression() {
  Shift_expressionContext *_localctx = _tracker.createInstance<Shift_expressionContext>(_ctx, getState());
  enterRule(_localctx, 54, CSharpParser::RuleShift_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(665);
    additive_expression();
    setState(673);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 38, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(668);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case CSharpParser::OP_LEFT_SHIFT: {
            setState(666);
            match(CSharpParser::OP_LEFT_SHIFT);
            break;
          }

          case CSharpParser::GT: {
            setState(667);
            right_shift();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(670);
        additive_expression(); 
      }
      setState(675);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 38, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Additive_expressionContext ------------------------------------------------------------------

CSharpParser::Additive_expressionContext::Additive_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::Multiplicative_expressionContext *> CSharpParser::Additive_expressionContext::multiplicative_expression() {
  return getRuleContexts<CSharpParser::Multiplicative_expressionContext>();
}

CSharpParser::Multiplicative_expressionContext* CSharpParser::Additive_expressionContext::multiplicative_expression(size_t i) {
  return getRuleContext<CSharpParser::Multiplicative_expressionContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::Additive_expressionContext::PLUS() {
  return getTokens(CSharpParser::PLUS);
}

tree::TerminalNode* CSharpParser::Additive_expressionContext::PLUS(size_t i) {
  return getToken(CSharpParser::PLUS, i);
}

std::vector<tree::TerminalNode *> CSharpParser::Additive_expressionContext::MINUS() {
  return getTokens(CSharpParser::MINUS);
}

tree::TerminalNode* CSharpParser::Additive_expressionContext::MINUS(size_t i) {
  return getToken(CSharpParser::MINUS, i);
}


size_t CSharpParser::Additive_expressionContext::getRuleIndex() const {
  return CSharpParser::RuleAdditive_expression;
}

void CSharpParser::Additive_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAdditive_expression(this);
}

void CSharpParser::Additive_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAdditive_expression(this);
}

CSharpParser::Additive_expressionContext* CSharpParser::additive_expression() {
  Additive_expressionContext *_localctx = _tracker.createInstance<Additive_expressionContext>(_ctx, getState());
  enterRule(_localctx, 56, CSharpParser::RuleAdditive_expression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(676);
    multiplicative_expression();
    setState(681);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 39, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(677);
        _la = _input->LA(1);
        if (!(_la == CSharpParser::PLUS

        || _la == CSharpParser::MINUS)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(678);
        multiplicative_expression(); 
      }
      setState(683);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 39, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Multiplicative_expressionContext ------------------------------------------------------------------

CSharpParser::Multiplicative_expressionContext::Multiplicative_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::Switch_expressionContext *> CSharpParser::Multiplicative_expressionContext::switch_expression() {
  return getRuleContexts<CSharpParser::Switch_expressionContext>();
}

CSharpParser::Switch_expressionContext* CSharpParser::Multiplicative_expressionContext::switch_expression(size_t i) {
  return getRuleContext<CSharpParser::Switch_expressionContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::Multiplicative_expressionContext::STAR() {
  return getTokens(CSharpParser::STAR);
}

tree::TerminalNode* CSharpParser::Multiplicative_expressionContext::STAR(size_t i) {
  return getToken(CSharpParser::STAR, i);
}

std::vector<tree::TerminalNode *> CSharpParser::Multiplicative_expressionContext::DIV() {
  return getTokens(CSharpParser::DIV);
}

tree::TerminalNode* CSharpParser::Multiplicative_expressionContext::DIV(size_t i) {
  return getToken(CSharpParser::DIV, i);
}

std::vector<tree::TerminalNode *> CSharpParser::Multiplicative_expressionContext::PERCENT() {
  return getTokens(CSharpParser::PERCENT);
}

tree::TerminalNode* CSharpParser::Multiplicative_expressionContext::PERCENT(size_t i) {
  return getToken(CSharpParser::PERCENT, i);
}


size_t CSharpParser::Multiplicative_expressionContext::getRuleIndex() const {
  return CSharpParser::RuleMultiplicative_expression;
}

void CSharpParser::Multiplicative_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMultiplicative_expression(this);
}

void CSharpParser::Multiplicative_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMultiplicative_expression(this);
}

CSharpParser::Multiplicative_expressionContext* CSharpParser::multiplicative_expression() {
  Multiplicative_expressionContext *_localctx = _tracker.createInstance<Multiplicative_expressionContext>(_ctx, getState());
  enterRule(_localctx, 58, CSharpParser::RuleMultiplicative_expression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(684);
    switch_expression();
    setState(689);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 40, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(685);
        _la = _input->LA(1);
        if (!(((((_la - 137) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 137)) & 7) != 0))) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(686);
        switch_expression(); 
      }
      setState(691);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 40, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Switch_expressionContext ------------------------------------------------------------------

CSharpParser::Switch_expressionContext::Switch_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Range_expressionContext* CSharpParser::Switch_expressionContext::range_expression() {
  return getRuleContext<CSharpParser::Range_expressionContext>(0);
}

tree::TerminalNode* CSharpParser::Switch_expressionContext::SWITCH() {
  return getToken(CSharpParser::SWITCH, 0);
}

tree::TerminalNode* CSharpParser::Switch_expressionContext::OPEN_BRACE() {
  return getToken(CSharpParser::OPEN_BRACE, 0);
}

tree::TerminalNode* CSharpParser::Switch_expressionContext::CLOSE_BRACE() {
  return getToken(CSharpParser::CLOSE_BRACE, 0);
}

CSharpParser::Switch_expression_armsContext* CSharpParser::Switch_expressionContext::switch_expression_arms() {
  return getRuleContext<CSharpParser::Switch_expression_armsContext>(0);
}

tree::TerminalNode* CSharpParser::Switch_expressionContext::COMMA() {
  return getToken(CSharpParser::COMMA, 0);
}


size_t CSharpParser::Switch_expressionContext::getRuleIndex() const {
  return CSharpParser::RuleSwitch_expression;
}

void CSharpParser::Switch_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSwitch_expression(this);
}

void CSharpParser::Switch_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSwitch_expression(this);
}

CSharpParser::Switch_expressionContext* CSharpParser::switch_expression() {
  Switch_expressionContext *_localctx = _tracker.createInstance<Switch_expressionContext>(_ctx, getState());
  enterRule(_localctx, 60, CSharpParser::RuleSwitch_expression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(692);
    range_expression();
    setState(702);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 43, _ctx)) {
    case 1: {
      setState(693);
      match(CSharpParser::SWITCH);
      setState(694);
      match(CSharpParser::OPEN_BRACE);
      setState(699);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -5437212208176571392) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 2305497201161996477) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 129)) & 4398059153857) != 0)) {
        setState(695);
        switch_expression_arms();
        setState(697);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CSharpParser::COMMA) {
          setState(696);
          match(CSharpParser::COMMA);
        }
      }
      setState(701);
      match(CSharpParser::CLOSE_BRACE);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Switch_expression_armsContext ------------------------------------------------------------------

CSharpParser::Switch_expression_armsContext::Switch_expression_armsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::Switch_expression_armContext *> CSharpParser::Switch_expression_armsContext::switch_expression_arm() {
  return getRuleContexts<CSharpParser::Switch_expression_armContext>();
}

CSharpParser::Switch_expression_armContext* CSharpParser::Switch_expression_armsContext::switch_expression_arm(size_t i) {
  return getRuleContext<CSharpParser::Switch_expression_armContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::Switch_expression_armsContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::Switch_expression_armsContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}


size_t CSharpParser::Switch_expression_armsContext::getRuleIndex() const {
  return CSharpParser::RuleSwitch_expression_arms;
}

void CSharpParser::Switch_expression_armsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSwitch_expression_arms(this);
}

void CSharpParser::Switch_expression_armsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSwitch_expression_arms(this);
}

CSharpParser::Switch_expression_armsContext* CSharpParser::switch_expression_arms() {
  Switch_expression_armsContext *_localctx = _tracker.createInstance<Switch_expression_armsContext>(_ctx, getState());
  enterRule(_localctx, 62, CSharpParser::RuleSwitch_expression_arms);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(704);
    switch_expression_arm();
    setState(709);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 44, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(705);
        match(CSharpParser::COMMA);
        setState(706);
        switch_expression_arm(); 
      }
      setState(711);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 44, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Switch_expression_armContext ------------------------------------------------------------------

CSharpParser::Switch_expression_armContext::Switch_expression_armContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::ExpressionContext* CSharpParser::Switch_expression_armContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}

CSharpParser::Right_arrowContext* CSharpParser::Switch_expression_armContext::right_arrow() {
  return getRuleContext<CSharpParser::Right_arrowContext>(0);
}

CSharpParser::Throwable_expressionContext* CSharpParser::Switch_expression_armContext::throwable_expression() {
  return getRuleContext<CSharpParser::Throwable_expressionContext>(0);
}

CSharpParser::Case_guardContext* CSharpParser::Switch_expression_armContext::case_guard() {
  return getRuleContext<CSharpParser::Case_guardContext>(0);
}


size_t CSharpParser::Switch_expression_armContext::getRuleIndex() const {
  return CSharpParser::RuleSwitch_expression_arm;
}

void CSharpParser::Switch_expression_armContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSwitch_expression_arm(this);
}

void CSharpParser::Switch_expression_armContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSwitch_expression_arm(this);
}

CSharpParser::Switch_expression_armContext* CSharpParser::switch_expression_arm() {
  Switch_expression_armContext *_localctx = _tracker.createInstance<Switch_expression_armContext>(_ctx, getState());
  enterRule(_localctx, 64, CSharpParser::RuleSwitch_expression_arm);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(712);
    expression();
    setState(714);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::WHEN) {
      setState(713);
      case_guard();
    }
    setState(716);
    right_arrow();
    setState(717);
    throwable_expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Range_expressionContext ------------------------------------------------------------------

CSharpParser::Range_expressionContext::Range_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::Unary_expressionContext *> CSharpParser::Range_expressionContext::unary_expression() {
  return getRuleContexts<CSharpParser::Unary_expressionContext>();
}

CSharpParser::Unary_expressionContext* CSharpParser::Range_expressionContext::unary_expression(size_t i) {
  return getRuleContext<CSharpParser::Unary_expressionContext>(i);
}

tree::TerminalNode* CSharpParser::Range_expressionContext::OP_RANGE() {
  return getToken(CSharpParser::OP_RANGE, 0);
}


size_t CSharpParser::Range_expressionContext::getRuleIndex() const {
  return CSharpParser::RuleRange_expression;
}

void CSharpParser::Range_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRange_expression(this);
}

void CSharpParser::Range_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRange_expression(this);
}

CSharpParser::Range_expressionContext* CSharpParser::range_expression() {
  Range_expressionContext *_localctx = _tracker.createInstance<Range_expressionContext>(_ctx, getState());
  enterRule(_localctx, 66, CSharpParser::RuleRange_expression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(727);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 48, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(719);
      unary_expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(721);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -5437212208176571392) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 2305497201161930941) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 129)) & 12642753) != 0)) {
        setState(720);
        unary_expression();
      }
      setState(723);
      match(CSharpParser::OP_RANGE);
      setState(725);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 47, _ctx)) {
      case 1: {
        setState(724);
        unary_expression();
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Unary_expressionContext ------------------------------------------------------------------

CSharpParser::Unary_expressionContext::Unary_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Primary_expressionContext* CSharpParser::Unary_expressionContext::primary_expression() {
  return getRuleContext<CSharpParser::Primary_expressionContext>(0);
}

tree::TerminalNode* CSharpParser::Unary_expressionContext::PLUS() {
  return getToken(CSharpParser::PLUS, 0);
}

CSharpParser::Unary_expressionContext* CSharpParser::Unary_expressionContext::unary_expression() {
  return getRuleContext<CSharpParser::Unary_expressionContext>(0);
}

tree::TerminalNode* CSharpParser::Unary_expressionContext::MINUS() {
  return getToken(CSharpParser::MINUS, 0);
}

tree::TerminalNode* CSharpParser::Unary_expressionContext::BANG() {
  return getToken(CSharpParser::BANG, 0);
}

tree::TerminalNode* CSharpParser::Unary_expressionContext::TILDE() {
  return getToken(CSharpParser::TILDE, 0);
}

tree::TerminalNode* CSharpParser::Unary_expressionContext::OP_INC() {
  return getToken(CSharpParser::OP_INC, 0);
}

tree::TerminalNode* CSharpParser::Unary_expressionContext::OP_DEC() {
  return getToken(CSharpParser::OP_DEC, 0);
}

tree::TerminalNode* CSharpParser::Unary_expressionContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

CSharpParser::Type_Context* CSharpParser::Unary_expressionContext::type_() {
  return getRuleContext<CSharpParser::Type_Context>(0);
}

tree::TerminalNode* CSharpParser::Unary_expressionContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}

tree::TerminalNode* CSharpParser::Unary_expressionContext::AWAIT() {
  return getToken(CSharpParser::AWAIT, 0);
}

tree::TerminalNode* CSharpParser::Unary_expressionContext::AMP() {
  return getToken(CSharpParser::AMP, 0);
}

tree::TerminalNode* CSharpParser::Unary_expressionContext::STAR() {
  return getToken(CSharpParser::STAR, 0);
}

tree::TerminalNode* CSharpParser::Unary_expressionContext::CARET() {
  return getToken(CSharpParser::CARET, 0);
}


size_t CSharpParser::Unary_expressionContext::getRuleIndex() const {
  return CSharpParser::RuleUnary_expression;
}

void CSharpParser::Unary_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnary_expression(this);
}

void CSharpParser::Unary_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnary_expression(this);
}

CSharpParser::Unary_expressionContext* CSharpParser::unary_expression() {
  Unary_expressionContext *_localctx = _tracker.createInstance<Unary_expressionContext>(_ctx, getState());
  enterRule(_localctx, 68, CSharpParser::RuleUnary_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(755);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 49, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(729);
      primary_expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(730);
      match(CSharpParser::PLUS);
      setState(731);
      unary_expression();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(732);
      match(CSharpParser::MINUS);
      setState(733);
      unary_expression();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(734);
      match(CSharpParser::BANG);
      setState(735);
      unary_expression();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(736);
      match(CSharpParser::TILDE);
      setState(737);
      unary_expression();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(738);
      match(CSharpParser::OP_INC);
      setState(739);
      unary_expression();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(740);
      match(CSharpParser::OP_DEC);
      setState(741);
      unary_expression();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(742);
      match(CSharpParser::OPEN_PARENS);
      setState(743);
      type_();
      setState(744);
      match(CSharpParser::CLOSE_PARENS);
      setState(745);
      unary_expression();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(747);
      match(CSharpParser::AWAIT);
      setState(748);
      unary_expression();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(749);
      match(CSharpParser::AMP);
      setState(750);
      unary_expression();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(751);
      match(CSharpParser::STAR);
      setState(752);
      unary_expression();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(753);
      match(CSharpParser::CARET);
      setState(754);
      unary_expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Primary_expressionContext ------------------------------------------------------------------

CSharpParser::Primary_expressionContext::Primary_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Primary_expression_startContext* CSharpParser::Primary_expressionContext::primary_expression_start() {
  return getRuleContext<CSharpParser::Primary_expression_startContext>(0);
}

std::vector<tree::TerminalNode *> CSharpParser::Primary_expressionContext::BANG() {
  return getTokens(CSharpParser::BANG);
}

tree::TerminalNode* CSharpParser::Primary_expressionContext::BANG(size_t i) {
  return getToken(CSharpParser::BANG, i);
}

std::vector<CSharpParser::Bracket_expressionContext *> CSharpParser::Primary_expressionContext::bracket_expression() {
  return getRuleContexts<CSharpParser::Bracket_expressionContext>();
}

CSharpParser::Bracket_expressionContext* CSharpParser::Primary_expressionContext::bracket_expression(size_t i) {
  return getRuleContext<CSharpParser::Bracket_expressionContext>(i);
}

std::vector<CSharpParser::Member_accessContext *> CSharpParser::Primary_expressionContext::member_access() {
  return getRuleContexts<CSharpParser::Member_accessContext>();
}

CSharpParser::Member_accessContext* CSharpParser::Primary_expressionContext::member_access(size_t i) {
  return getRuleContext<CSharpParser::Member_accessContext>(i);
}

std::vector<CSharpParser::Method_invocationContext *> CSharpParser::Primary_expressionContext::method_invocation() {
  return getRuleContexts<CSharpParser::Method_invocationContext>();
}

CSharpParser::Method_invocationContext* CSharpParser::Primary_expressionContext::method_invocation(size_t i) {
  return getRuleContext<CSharpParser::Method_invocationContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::Primary_expressionContext::OP_INC() {
  return getTokens(CSharpParser::OP_INC);
}

tree::TerminalNode* CSharpParser::Primary_expressionContext::OP_INC(size_t i) {
  return getToken(CSharpParser::OP_INC, i);
}

std::vector<tree::TerminalNode *> CSharpParser::Primary_expressionContext::OP_DEC() {
  return getTokens(CSharpParser::OP_DEC);
}

tree::TerminalNode* CSharpParser::Primary_expressionContext::OP_DEC(size_t i) {
  return getToken(CSharpParser::OP_DEC, i);
}

std::vector<tree::TerminalNode *> CSharpParser::Primary_expressionContext::OP_PTR() {
  return getTokens(CSharpParser::OP_PTR);
}

tree::TerminalNode* CSharpParser::Primary_expressionContext::OP_PTR(size_t i) {
  return getToken(CSharpParser::OP_PTR, i);
}

std::vector<CSharpParser::IdentifierContext *> CSharpParser::Primary_expressionContext::identifier() {
  return getRuleContexts<CSharpParser::IdentifierContext>();
}

CSharpParser::IdentifierContext* CSharpParser::Primary_expressionContext::identifier(size_t i) {
  return getRuleContext<CSharpParser::IdentifierContext>(i);
}


size_t CSharpParser::Primary_expressionContext::getRuleIndex() const {
  return CSharpParser::RulePrimary_expression;
}

void CSharpParser::Primary_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimary_expression(this);
}

void CSharpParser::Primary_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimary_expression(this);
}

CSharpParser::Primary_expressionContext* CSharpParser::primary_expression() {
  Primary_expressionContext *_localctx = _tracker.createInstance<Primary_expressionContext>(_ctx, getState());
  enterRule(_localctx, 70, CSharpParser::RulePrimary_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(757);
    antlrcpp::downCast<Primary_expressionContext *>(_localctx)->pe = primary_expression_start();
    setState(759);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 50, _ctx)) {
    case 1: {
      setState(758);
      match(CSharpParser::BANG);
      break;
    }

    default:
      break;
    }
    setState(764);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 51, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(761);
        bracket_expression(); 
      }
      setState(766);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 51, _ctx);
    }
    setState(768);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 52, _ctx)) {
    case 1: {
      setState(767);
      match(CSharpParser::BANG);
      break;
    }

    default:
      break;
    }
    setState(792);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 57, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(776);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case CSharpParser::DOT:
          case CSharpParser::INTERR: {
            setState(770);
            member_access();
            break;
          }

          case CSharpParser::OPEN_PARENS: {
            setState(771);
            method_invocation();
            break;
          }

          case CSharpParser::OP_INC: {
            setState(772);
            match(CSharpParser::OP_INC);
            break;
          }

          case CSharpParser::OP_DEC: {
            setState(773);
            match(CSharpParser::OP_DEC);
            break;
          }

          case CSharpParser::OP_PTR: {
            setState(774);
            match(CSharpParser::OP_PTR);
            setState(775);
            identifier();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(779);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 54, _ctx)) {
        case 1: {
          setState(778);
          match(CSharpParser::BANG);
          break;
        }

        default:
          break;
        }
        setState(784);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 55, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(781);
            bracket_expression(); 
          }
          setState(786);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 55, _ctx);
        }
        setState(788);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 56, _ctx)) {
        case 1: {
          setState(787);
          match(CSharpParser::BANG);
          break;
        }

        default:
          break;
        } 
      }
      setState(794);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 57, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Primary_expression_startContext ------------------------------------------------------------------

CSharpParser::Primary_expression_startContext::Primary_expression_startContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CSharpParser::Primary_expression_startContext::getRuleIndex() const {
  return CSharpParser::RulePrimary_expression_start;
}

void CSharpParser::Primary_expression_startContext::copyFrom(Primary_expression_startContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- LiteralAccessExpressionContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::LiteralAccessExpressionContext::LITERAL_ACCESS() {
  return getToken(CSharpParser::LITERAL_ACCESS, 0);
}

CSharpParser::LiteralAccessExpressionContext::LiteralAccessExpressionContext(Primary_expression_startContext *ctx) { copyFrom(ctx); }

void CSharpParser::LiteralAccessExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteralAccessExpression(this);
}
void CSharpParser::LiteralAccessExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteralAccessExpression(this);
}
//----------------- DefaultValueExpressionContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::DefaultValueExpressionContext::DEFAULT() {
  return getToken(CSharpParser::DEFAULT, 0);
}

tree::TerminalNode* CSharpParser::DefaultValueExpressionContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

CSharpParser::Type_Context* CSharpParser::DefaultValueExpressionContext::type_() {
  return getRuleContext<CSharpParser::Type_Context>(0);
}

tree::TerminalNode* CSharpParser::DefaultValueExpressionContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}

CSharpParser::DefaultValueExpressionContext::DefaultValueExpressionContext(Primary_expression_startContext *ctx) { copyFrom(ctx); }

void CSharpParser::DefaultValueExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDefaultValueExpression(this);
}
void CSharpParser::DefaultValueExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDefaultValueExpression(this);
}
//----------------- BaseAccessExpressionContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::BaseAccessExpressionContext::BASE() {
  return getToken(CSharpParser::BASE, 0);
}

tree::TerminalNode* CSharpParser::BaseAccessExpressionContext::DOT() {
  return getToken(CSharpParser::DOT, 0);
}

CSharpParser::IdentifierContext* CSharpParser::BaseAccessExpressionContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

tree::TerminalNode* CSharpParser::BaseAccessExpressionContext::OPEN_BRACKET() {
  return getToken(CSharpParser::OPEN_BRACKET, 0);
}

CSharpParser::Expression_listContext* CSharpParser::BaseAccessExpressionContext::expression_list() {
  return getRuleContext<CSharpParser::Expression_listContext>(0);
}

tree::TerminalNode* CSharpParser::BaseAccessExpressionContext::CLOSE_BRACKET() {
  return getToken(CSharpParser::CLOSE_BRACKET, 0);
}

CSharpParser::Type_argument_listContext* CSharpParser::BaseAccessExpressionContext::type_argument_list() {
  return getRuleContext<CSharpParser::Type_argument_listContext>(0);
}

CSharpParser::BaseAccessExpressionContext::BaseAccessExpressionContext(Primary_expression_startContext *ctx) { copyFrom(ctx); }

void CSharpParser::BaseAccessExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBaseAccessExpression(this);
}
void CSharpParser::BaseAccessExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBaseAccessExpression(this);
}
//----------------- SizeofExpressionContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::SizeofExpressionContext::SIZEOF() {
  return getToken(CSharpParser::SIZEOF, 0);
}

tree::TerminalNode* CSharpParser::SizeofExpressionContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

CSharpParser::Type_Context* CSharpParser::SizeofExpressionContext::type_() {
  return getRuleContext<CSharpParser::Type_Context>(0);
}

tree::TerminalNode* CSharpParser::SizeofExpressionContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}

CSharpParser::SizeofExpressionContext::SizeofExpressionContext(Primary_expression_startContext *ctx) { copyFrom(ctx); }

void CSharpParser::SizeofExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSizeofExpression(this);
}
void CSharpParser::SizeofExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSizeofExpression(this);
}
//----------------- ParenthesisExpressionsContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::ParenthesisExpressionsContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

CSharpParser::ExpressionContext* CSharpParser::ParenthesisExpressionsContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}

tree::TerminalNode* CSharpParser::ParenthesisExpressionsContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}

CSharpParser::ParenthesisExpressionsContext::ParenthesisExpressionsContext(Primary_expression_startContext *ctx) { copyFrom(ctx); }

void CSharpParser::ParenthesisExpressionsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParenthesisExpressions(this);
}
void CSharpParser::ParenthesisExpressionsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParenthesisExpressions(this);
}
//----------------- ThisReferenceExpressionContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::ThisReferenceExpressionContext::THIS() {
  return getToken(CSharpParser::THIS, 0);
}

CSharpParser::ThisReferenceExpressionContext::ThisReferenceExpressionContext(Primary_expression_startContext *ctx) { copyFrom(ctx); }

void CSharpParser::ThisReferenceExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterThisReferenceExpression(this);
}
void CSharpParser::ThisReferenceExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitThisReferenceExpression(this);
}
//----------------- ObjectCreationExpressionContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::ObjectCreationExpressionContext::NEW() {
  return getToken(CSharpParser::NEW, 0);
}

CSharpParser::Type_Context* CSharpParser::ObjectCreationExpressionContext::type_() {
  return getRuleContext<CSharpParser::Type_Context>(0);
}

CSharpParser::Anonymous_object_initializerContext* CSharpParser::ObjectCreationExpressionContext::anonymous_object_initializer() {
  return getRuleContext<CSharpParser::Anonymous_object_initializerContext>(0);
}

std::vector<CSharpParser::Rank_specifierContext *> CSharpParser::ObjectCreationExpressionContext::rank_specifier() {
  return getRuleContexts<CSharpParser::Rank_specifierContext>();
}

CSharpParser::Rank_specifierContext* CSharpParser::ObjectCreationExpressionContext::rank_specifier(size_t i) {
  return getRuleContext<CSharpParser::Rank_specifierContext>(i);
}

CSharpParser::Array_initializerContext* CSharpParser::ObjectCreationExpressionContext::array_initializer() {
  return getRuleContext<CSharpParser::Array_initializerContext>(0);
}

CSharpParser::Object_creation_expressionContext* CSharpParser::ObjectCreationExpressionContext::object_creation_expression() {
  return getRuleContext<CSharpParser::Object_creation_expressionContext>(0);
}

CSharpParser::Object_or_collection_initializerContext* CSharpParser::ObjectCreationExpressionContext::object_or_collection_initializer() {
  return getRuleContext<CSharpParser::Object_or_collection_initializerContext>(0);
}

tree::TerminalNode* CSharpParser::ObjectCreationExpressionContext::OPEN_BRACKET() {
  return getToken(CSharpParser::OPEN_BRACKET, 0);
}

CSharpParser::Expression_listContext* CSharpParser::ObjectCreationExpressionContext::expression_list() {
  return getRuleContext<CSharpParser::Expression_listContext>(0);
}

tree::TerminalNode* CSharpParser::ObjectCreationExpressionContext::CLOSE_BRACKET() {
  return getToken(CSharpParser::CLOSE_BRACKET, 0);
}

CSharpParser::ObjectCreationExpressionContext::ObjectCreationExpressionContext(Primary_expression_startContext *ctx) { copyFrom(ctx); }

void CSharpParser::ObjectCreationExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterObjectCreationExpression(this);
}
void CSharpParser::ObjectCreationExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitObjectCreationExpression(this);
}
//----------------- AnonymousMethodExpressionContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::AnonymousMethodExpressionContext::DELEGATE() {
  return getToken(CSharpParser::DELEGATE, 0);
}

CSharpParser::BlockContext* CSharpParser::AnonymousMethodExpressionContext::block() {
  return getRuleContext<CSharpParser::BlockContext>(0);
}

tree::TerminalNode* CSharpParser::AnonymousMethodExpressionContext::ASYNC() {
  return getToken(CSharpParser::ASYNC, 0);
}

tree::TerminalNode* CSharpParser::AnonymousMethodExpressionContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

tree::TerminalNode* CSharpParser::AnonymousMethodExpressionContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}

CSharpParser::Explicit_anonymous_function_parameter_listContext* CSharpParser::AnonymousMethodExpressionContext::explicit_anonymous_function_parameter_list() {
  return getRuleContext<CSharpParser::Explicit_anonymous_function_parameter_listContext>(0);
}

CSharpParser::AnonymousMethodExpressionContext::AnonymousMethodExpressionContext(Primary_expression_startContext *ctx) { copyFrom(ctx); }

void CSharpParser::AnonymousMethodExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnonymousMethodExpression(this);
}
void CSharpParser::AnonymousMethodExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnonymousMethodExpression(this);
}
//----------------- TypeofExpressionContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::TypeofExpressionContext::TYPEOF() {
  return getToken(CSharpParser::TYPEOF, 0);
}

tree::TerminalNode* CSharpParser::TypeofExpressionContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

tree::TerminalNode* CSharpParser::TypeofExpressionContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}

CSharpParser::Unbound_type_nameContext* CSharpParser::TypeofExpressionContext::unbound_type_name() {
  return getRuleContext<CSharpParser::Unbound_type_nameContext>(0);
}

CSharpParser::Type_Context* CSharpParser::TypeofExpressionContext::type_() {
  return getRuleContext<CSharpParser::Type_Context>(0);
}

tree::TerminalNode* CSharpParser::TypeofExpressionContext::VOID() {
  return getToken(CSharpParser::VOID, 0);
}

CSharpParser::TypeofExpressionContext::TypeofExpressionContext(Primary_expression_startContext *ctx) { copyFrom(ctx); }

void CSharpParser::TypeofExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeofExpression(this);
}
void CSharpParser::TypeofExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeofExpression(this);
}
//----------------- TupleExpressionContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::TupleExpressionContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

std::vector<CSharpParser::ArgumentContext *> CSharpParser::TupleExpressionContext::argument() {
  return getRuleContexts<CSharpParser::ArgumentContext>();
}

CSharpParser::ArgumentContext* CSharpParser::TupleExpressionContext::argument(size_t i) {
  return getRuleContext<CSharpParser::ArgumentContext>(i);
}

tree::TerminalNode* CSharpParser::TupleExpressionContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}

std::vector<tree::TerminalNode *> CSharpParser::TupleExpressionContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::TupleExpressionContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}

CSharpParser::TupleExpressionContext::TupleExpressionContext(Primary_expression_startContext *ctx) { copyFrom(ctx); }

void CSharpParser::TupleExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTupleExpression(this);
}
void CSharpParser::TupleExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTupleExpression(this);
}
//----------------- UncheckedExpressionContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::UncheckedExpressionContext::UNCHECKED() {
  return getToken(CSharpParser::UNCHECKED, 0);
}

tree::TerminalNode* CSharpParser::UncheckedExpressionContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

CSharpParser::ExpressionContext* CSharpParser::UncheckedExpressionContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}

tree::TerminalNode* CSharpParser::UncheckedExpressionContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}

CSharpParser::UncheckedExpressionContext::UncheckedExpressionContext(Primary_expression_startContext *ctx) { copyFrom(ctx); }

void CSharpParser::UncheckedExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUncheckedExpression(this);
}
void CSharpParser::UncheckedExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUncheckedExpression(this);
}
//----------------- SimpleNameExpressionContext ------------------------------------------------------------------

CSharpParser::IdentifierContext* CSharpParser::SimpleNameExpressionContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

CSharpParser::Type_argument_listContext* CSharpParser::SimpleNameExpressionContext::type_argument_list() {
  return getRuleContext<CSharpParser::Type_argument_listContext>(0);
}

CSharpParser::SimpleNameExpressionContext::SimpleNameExpressionContext(Primary_expression_startContext *ctx) { copyFrom(ctx); }

void CSharpParser::SimpleNameExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimpleNameExpression(this);
}
void CSharpParser::SimpleNameExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimpleNameExpression(this);
}
//----------------- MemberAccessExpressionContext ------------------------------------------------------------------

CSharpParser::Predefined_typeContext* CSharpParser::MemberAccessExpressionContext::predefined_type() {
  return getRuleContext<CSharpParser::Predefined_typeContext>(0);
}

CSharpParser::Qualified_alias_memberContext* CSharpParser::MemberAccessExpressionContext::qualified_alias_member() {
  return getRuleContext<CSharpParser::Qualified_alias_memberContext>(0);
}

CSharpParser::MemberAccessExpressionContext::MemberAccessExpressionContext(Primary_expression_startContext *ctx) { copyFrom(ctx); }

void CSharpParser::MemberAccessExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMemberAccessExpression(this);
}
void CSharpParser::MemberAccessExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMemberAccessExpression(this);
}
//----------------- CheckedExpressionContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::CheckedExpressionContext::CHECKED() {
  return getToken(CSharpParser::CHECKED, 0);
}

tree::TerminalNode* CSharpParser::CheckedExpressionContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

CSharpParser::ExpressionContext* CSharpParser::CheckedExpressionContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}

tree::TerminalNode* CSharpParser::CheckedExpressionContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}

CSharpParser::CheckedExpressionContext::CheckedExpressionContext(Primary_expression_startContext *ctx) { copyFrom(ctx); }

void CSharpParser::CheckedExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCheckedExpression(this);
}
void CSharpParser::CheckedExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCheckedExpression(this);
}
//----------------- LiteralExpressionContext ------------------------------------------------------------------

CSharpParser::LiteralContext* CSharpParser::LiteralExpressionContext::literal() {
  return getRuleContext<CSharpParser::LiteralContext>(0);
}

CSharpParser::LiteralExpressionContext::LiteralExpressionContext(Primary_expression_startContext *ctx) { copyFrom(ctx); }

void CSharpParser::LiteralExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteralExpression(this);
}
void CSharpParser::LiteralExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteralExpression(this);
}
//----------------- NameofExpressionContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::NameofExpressionContext::NAMEOF() {
  return getToken(CSharpParser::NAMEOF, 0);
}

tree::TerminalNode* CSharpParser::NameofExpressionContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

std::vector<CSharpParser::IdentifierContext *> CSharpParser::NameofExpressionContext::identifier() {
  return getRuleContexts<CSharpParser::IdentifierContext>();
}

CSharpParser::IdentifierContext* CSharpParser::NameofExpressionContext::identifier(size_t i) {
  return getRuleContext<CSharpParser::IdentifierContext>(i);
}

tree::TerminalNode* CSharpParser::NameofExpressionContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}

std::vector<tree::TerminalNode *> CSharpParser::NameofExpressionContext::DOT() {
  return getTokens(CSharpParser::DOT);
}

tree::TerminalNode* CSharpParser::NameofExpressionContext::DOT(size_t i) {
  return getToken(CSharpParser::DOT, i);
}

CSharpParser::NameofExpressionContext::NameofExpressionContext(Primary_expression_startContext *ctx) { copyFrom(ctx); }

void CSharpParser::NameofExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNameofExpression(this);
}
void CSharpParser::NameofExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNameofExpression(this);
}
CSharpParser::Primary_expression_startContext* CSharpParser::primary_expression_start() {
  Primary_expression_startContext *_localctx = _tracker.createInstance<Primary_expression_startContext>(_ctx, getState());
  enterRule(_localctx, 72, CSharpParser::RulePrimary_expression_start);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(916);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 73, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<CSharpParser::LiteralExpressionContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(795);
      literal();
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<CSharpParser::SimpleNameExpressionContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(796);
      identifier();
      setState(798);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 58, _ctx)) {
      case 1: {
        setState(797);
        type_argument_list();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<CSharpParser::ParenthesisExpressionsContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(800);
      match(CSharpParser::OPEN_PARENS);
      setState(801);
      expression();
      setState(802);
      match(CSharpParser::CLOSE_PARENS);
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<CSharpParser::MemberAccessExpressionContext>(_localctx);
      enterOuterAlt(_localctx, 4);
      setState(804);
      predefined_type();
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<CSharpParser::MemberAccessExpressionContext>(_localctx);
      enterOuterAlt(_localctx, 5);
      setState(805);
      qualified_alias_member();
      break;
    }

    case 6: {
      _localctx = _tracker.createInstance<CSharpParser::LiteralAccessExpressionContext>(_localctx);
      enterOuterAlt(_localctx, 6);
      setState(806);
      match(CSharpParser::LITERAL_ACCESS);
      break;
    }

    case 7: {
      _localctx = _tracker.createInstance<CSharpParser::ThisReferenceExpressionContext>(_localctx);
      enterOuterAlt(_localctx, 7);
      setState(807);
      match(CSharpParser::THIS);
      break;
    }

    case 8: {
      _localctx = _tracker.createInstance<CSharpParser::BaseAccessExpressionContext>(_localctx);
      enterOuterAlt(_localctx, 8);
      setState(808);
      match(CSharpParser::BASE);
      setState(818);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case CSharpParser::DOT: {
          setState(809);
          match(CSharpParser::DOT);
          setState(810);
          identifier();
          setState(812);
          _errHandler->sync(this);

          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 59, _ctx)) {
          case 1: {
            setState(811);
            type_argument_list();
            break;
          }

          default:
            break;
          }
          break;
        }

        case CSharpParser::OPEN_BRACKET: {
          setState(814);
          match(CSharpParser::OPEN_BRACKET);
          setState(815);
          expression_list();
          setState(816);
          match(CSharpParser::CLOSE_BRACKET);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 9: {
      _localctx = _tracker.createInstance<CSharpParser::ObjectCreationExpressionContext>(_localctx);
      enterOuterAlt(_localctx, 9);
      setState(820);
      match(CSharpParser::NEW);
      setState(849);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case CSharpParser::ADD:
        case CSharpParser::ALIAS:
        case CSharpParser::ARGLIST:
        case CSharpParser::ASCENDING:
        case CSharpParser::ASYNC:
        case CSharpParser::AWAIT:
        case CSharpParser::BOOL:
        case CSharpParser::BY:
        case CSharpParser::BYTE:
        case CSharpParser::CHAR:
        case CSharpParser::DECIMAL:
        case CSharpParser::DESCENDING:
        case CSharpParser::DOUBLE:
        case CSharpParser::DYNAMIC:
        case CSharpParser::EQUALS:
        case CSharpParser::FLOAT:
        case CSharpParser::FROM:
        case CSharpParser::GET:
        case CSharpParser::GROUP:
        case CSharpParser::INT:
        case CSharpParser::INTO:
        case CSharpParser::JOIN:
        case CSharpParser::LET:
        case CSharpParser::LONG:
        case CSharpParser::NAMEOF:
        case CSharpParser::OBJECT:
        case CSharpParser::ON:
        case CSharpParser::ORDERBY:
        case CSharpParser::PARTIAL:
        case CSharpParser::REMOVE:
        case CSharpParser::SBYTE:
        case CSharpParser::SELECT:
        case CSharpParser::SET:
        case CSharpParser::SHORT:
        case CSharpParser::STRING:
        case CSharpParser::UINT:
        case CSharpParser::ULONG:
        case CSharpParser::UNMANAGED:
        case CSharpParser::USHORT:
        case CSharpParser::VAR:
        case CSharpParser::VOID:
        case CSharpParser::WHEN:
        case CSharpParser::WHERE:
        case CSharpParser::YIELD:
        case CSharpParser::IDENTIFIER:
        case CSharpParser::OPEN_PARENS: {
          setState(821);
          type_();
          setState(843);
          _errHandler->sync(this);
          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 64, _ctx)) {
          case 1: {
            setState(822);
            object_creation_expression();
            break;
          }

          case 2: {
            setState(823);
            object_or_collection_initializer();
            break;
          }

          case 3: {
            setState(824);
            match(CSharpParser::OPEN_BRACKET);
            setState(825);
            expression_list();
            setState(826);
            match(CSharpParser::CLOSE_BRACKET);
            setState(830);
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 61, _ctx);
            while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
              if (alt == 1) {
                setState(827);
                rank_specifier(); 
              }
              setState(832);
              _errHandler->sync(this);
              alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 61, _ctx);
            }
            setState(834);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 62, _ctx)) {
            case 1: {
              setState(833);
              array_initializer();
              break;
            }

            default:
              break;
            }
            break;
          }

          case 4: {
            setState(837); 
            _errHandler->sync(this);
            _la = _input->LA(1);
            do {
              setState(836);
              rank_specifier();
              setState(839); 
              _errHandler->sync(this);
              _la = _input->LA(1);
            } while (_la == CSharpParser::OPEN_BRACKET);
            setState(841);
            array_initializer();
            break;
          }

          default:
            break;
          }
          break;
        }

        case CSharpParser::OPEN_BRACE: {
          setState(845);
          anonymous_object_initializer();
          break;
        }

        case CSharpParser::OPEN_BRACKET: {
          setState(846);
          rank_specifier();
          setState(847);
          array_initializer();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 10: {
      _localctx = _tracker.createInstance<CSharpParser::TupleExpressionContext>(_localctx);
      enterOuterAlt(_localctx, 10);
      setState(851);
      match(CSharpParser::OPEN_PARENS);
      setState(852);
      argument();
      setState(855); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(853);
        match(CSharpParser::COMMA);
        setState(854);
        argument();
        setState(857); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == CSharpParser::COMMA);
      setState(859);
      match(CSharpParser::CLOSE_PARENS);
      break;
    }

    case 11: {
      _localctx = _tracker.createInstance<CSharpParser::TypeofExpressionContext>(_localctx);
      enterOuterAlt(_localctx, 11);
      setState(861);
      match(CSharpParser::TYPEOF);
      setState(862);
      match(CSharpParser::OPEN_PARENS);
      setState(866);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 67, _ctx)) {
      case 1: {
        setState(863);
        unbound_type_name();
        break;
      }

      case 2: {
        setState(864);
        type_();
        break;
      }

      case 3: {
        setState(865);
        match(CSharpParser::VOID);
        break;
      }

      default:
        break;
      }
      setState(868);
      match(CSharpParser::CLOSE_PARENS);
      break;
    }

    case 12: {
      _localctx = _tracker.createInstance<CSharpParser::CheckedExpressionContext>(_localctx);
      enterOuterAlt(_localctx, 12);
      setState(869);
      match(CSharpParser::CHECKED);
      setState(870);
      match(CSharpParser::OPEN_PARENS);
      setState(871);
      expression();
      setState(872);
      match(CSharpParser::CLOSE_PARENS);
      break;
    }

    case 13: {
      _localctx = _tracker.createInstance<CSharpParser::UncheckedExpressionContext>(_localctx);
      enterOuterAlt(_localctx, 13);
      setState(874);
      match(CSharpParser::UNCHECKED);
      setState(875);
      match(CSharpParser::OPEN_PARENS);
      setState(876);
      expression();
      setState(877);
      match(CSharpParser::CLOSE_PARENS);
      break;
    }

    case 14: {
      _localctx = _tracker.createInstance<CSharpParser::DefaultValueExpressionContext>(_localctx);
      enterOuterAlt(_localctx, 14);
      setState(879);
      match(CSharpParser::DEFAULT);
      setState(884);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 68, _ctx)) {
      case 1: {
        setState(880);
        match(CSharpParser::OPEN_PARENS);
        setState(881);
        type_();
        setState(882);
        match(CSharpParser::CLOSE_PARENS);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 15: {
      _localctx = _tracker.createInstance<CSharpParser::AnonymousMethodExpressionContext>(_localctx);
      enterOuterAlt(_localctx, 15);
      setState(887);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CSharpParser::ASYNC) {
        setState(886);
        match(CSharpParser::ASYNC);
      }
      setState(889);
      match(CSharpParser::DELEGATE);
      setState(895);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CSharpParser::OPEN_PARENS) {
        setState(890);
        match(CSharpParser::OPEN_PARENS);
        setState(892);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 10) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 10)) & 7812956763456032119) != 0) || ((((_la - 75) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 75)) & 18015337681329505) != 0)) {
          setState(891);
          explicit_anonymous_function_parameter_list();
        }
        setState(894);
        match(CSharpParser::CLOSE_PARENS);
      }
      setState(897);
      block();
      break;
    }

    case 16: {
      _localctx = _tracker.createInstance<CSharpParser::SizeofExpressionContext>(_localctx);
      enterOuterAlt(_localctx, 16);
      setState(898);
      match(CSharpParser::SIZEOF);
      setState(899);
      match(CSharpParser::OPEN_PARENS);
      setState(900);
      type_();
      setState(901);
      match(CSharpParser::CLOSE_PARENS);
      break;
    }

    case 17: {
      _localctx = _tracker.createInstance<CSharpParser::NameofExpressionContext>(_localctx);
      enterOuterAlt(_localctx, 17);
      setState(903);
      match(CSharpParser::NAMEOF);
      setState(904);
      match(CSharpParser::OPEN_PARENS);
      setState(910);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 72, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(905);
          identifier();
          setState(906);
          match(CSharpParser::DOT); 
        }
        setState(912);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 72, _ctx);
      }
      setState(913);
      identifier();
      setState(914);
      match(CSharpParser::CLOSE_PARENS);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Throwable_expressionContext ------------------------------------------------------------------

CSharpParser::Throwable_expressionContext::Throwable_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::ExpressionContext* CSharpParser::Throwable_expressionContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}

CSharpParser::Throw_expressionContext* CSharpParser::Throwable_expressionContext::throw_expression() {
  return getRuleContext<CSharpParser::Throw_expressionContext>(0);
}


size_t CSharpParser::Throwable_expressionContext::getRuleIndex() const {
  return CSharpParser::RuleThrowable_expression;
}

void CSharpParser::Throwable_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterThrowable_expression(this);
}

void CSharpParser::Throwable_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitThrowable_expression(this);
}

CSharpParser::Throwable_expressionContext* CSharpParser::throwable_expression() {
  Throwable_expressionContext *_localctx = _tracker.createInstance<Throwable_expressionContext>(_ctx, getState());
  enterRule(_localctx, 74, CSharpParser::RuleThrowable_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(920);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::ADD:
      case CSharpParser::ALIAS:
      case CSharpParser::ARGLIST:
      case CSharpParser::ASCENDING:
      case CSharpParser::ASYNC:
      case CSharpParser::AWAIT:
      case CSharpParser::BASE:
      case CSharpParser::BOOL:
      case CSharpParser::BY:
      case CSharpParser::BYTE:
      case CSharpParser::CHAR:
      case CSharpParser::CHECKED:
      case CSharpParser::DECIMAL:
      case CSharpParser::DEFAULT:
      case CSharpParser::DELEGATE:
      case CSharpParser::DESCENDING:
      case CSharpParser::DOUBLE:
      case CSharpParser::DYNAMIC:
      case CSharpParser::EQUALS:
      case CSharpParser::FALSE:
      case CSharpParser::FLOAT:
      case CSharpParser::FROM:
      case CSharpParser::GET:
      case CSharpParser::GROUP:
      case CSharpParser::INT:
      case CSharpParser::INTO:
      case CSharpParser::JOIN:
      case CSharpParser::LET:
      case CSharpParser::LONG:
      case CSharpParser::NAMEOF:
      case CSharpParser::NEW:
      case CSharpParser::NULL_:
      case CSharpParser::OBJECT:
      case CSharpParser::ON:
      case CSharpParser::ORDERBY:
      case CSharpParser::PARTIAL:
      case CSharpParser::REF:
      case CSharpParser::REMOVE:
      case CSharpParser::SBYTE:
      case CSharpParser::SELECT:
      case CSharpParser::SET:
      case CSharpParser::SHORT:
      case CSharpParser::SIZEOF:
      case CSharpParser::STRING:
      case CSharpParser::THIS:
      case CSharpParser::TRUE:
      case CSharpParser::TYPEOF:
      case CSharpParser::UINT:
      case CSharpParser::ULONG:
      case CSharpParser::UNCHECKED:
      case CSharpParser::UNMANAGED:
      case CSharpParser::USHORT:
      case CSharpParser::VAR:
      case CSharpParser::WHEN:
      case CSharpParser::WHERE:
      case CSharpParser::YIELD:
      case CSharpParser::IDENTIFIER:
      case CSharpParser::LITERAL_ACCESS:
      case CSharpParser::INTEGER_LITERAL:
      case CSharpParser::HEX_INTEGER_LITERAL:
      case CSharpParser::BIN_INTEGER_LITERAL:
      case CSharpParser::REAL_LITERAL:
      case CSharpParser::CHARACTER_LITERAL:
      case CSharpParser::REGULAR_STRING:
      case CSharpParser::VERBATIUM_STRING:
      case CSharpParser::INTERPOLATED_REGULAR_STRING_START:
      case CSharpParser::INTERPOLATED_VERBATIUM_STRING_START:
      case CSharpParser::OPEN_PARENS:
      case CSharpParser::PLUS:
      case CSharpParser::MINUS:
      case CSharpParser::STAR:
      case CSharpParser::AMP:
      case CSharpParser::CARET:
      case CSharpParser::BANG:
      case CSharpParser::TILDE:
      case CSharpParser::OP_INC:
      case CSharpParser::OP_DEC:
      case CSharpParser::OP_RANGE: {
        enterOuterAlt(_localctx, 1);
        setState(918);
        expression();
        break;
      }

      case CSharpParser::THROW: {
        enterOuterAlt(_localctx, 2);
        setState(919);
        throw_expression();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Throw_expressionContext ------------------------------------------------------------------

CSharpParser::Throw_expressionContext::Throw_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Throw_expressionContext::THROW() {
  return getToken(CSharpParser::THROW, 0);
}

CSharpParser::ExpressionContext* CSharpParser::Throw_expressionContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}


size_t CSharpParser::Throw_expressionContext::getRuleIndex() const {
  return CSharpParser::RuleThrow_expression;
}

void CSharpParser::Throw_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterThrow_expression(this);
}

void CSharpParser::Throw_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitThrow_expression(this);
}

CSharpParser::Throw_expressionContext* CSharpParser::throw_expression() {
  Throw_expressionContext *_localctx = _tracker.createInstance<Throw_expressionContext>(_ctx, getState());
  enterRule(_localctx, 76, CSharpParser::RuleThrow_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(922);
    match(CSharpParser::THROW);
    setState(923);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Member_accessContext ------------------------------------------------------------------

CSharpParser::Member_accessContext::Member_accessContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Member_accessContext::DOT() {
  return getToken(CSharpParser::DOT, 0);
}

CSharpParser::IdentifierContext* CSharpParser::Member_accessContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

tree::TerminalNode* CSharpParser::Member_accessContext::INTERR() {
  return getToken(CSharpParser::INTERR, 0);
}

CSharpParser::Type_argument_listContext* CSharpParser::Member_accessContext::type_argument_list() {
  return getRuleContext<CSharpParser::Type_argument_listContext>(0);
}


size_t CSharpParser::Member_accessContext::getRuleIndex() const {
  return CSharpParser::RuleMember_access;
}

void CSharpParser::Member_accessContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMember_access(this);
}

void CSharpParser::Member_accessContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMember_access(this);
}

CSharpParser::Member_accessContext* CSharpParser::member_access() {
  Member_accessContext *_localctx = _tracker.createInstance<Member_accessContext>(_ctx, getState());
  enterRule(_localctx, 78, CSharpParser::RuleMember_access);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(926);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::INTERR) {
      setState(925);
      match(CSharpParser::INTERR);
    }
    setState(928);
    match(CSharpParser::DOT);
    setState(929);
    identifier();
    setState(931);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 76, _ctx)) {
    case 1: {
      setState(930);
      type_argument_list();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Bracket_expressionContext ------------------------------------------------------------------

CSharpParser::Bracket_expressionContext::Bracket_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Bracket_expressionContext::OPEN_BRACKET() {
  return getToken(CSharpParser::OPEN_BRACKET, 0);
}

std::vector<CSharpParser::Indexer_argumentContext *> CSharpParser::Bracket_expressionContext::indexer_argument() {
  return getRuleContexts<CSharpParser::Indexer_argumentContext>();
}

CSharpParser::Indexer_argumentContext* CSharpParser::Bracket_expressionContext::indexer_argument(size_t i) {
  return getRuleContext<CSharpParser::Indexer_argumentContext>(i);
}

tree::TerminalNode* CSharpParser::Bracket_expressionContext::CLOSE_BRACKET() {
  return getToken(CSharpParser::CLOSE_BRACKET, 0);
}

tree::TerminalNode* CSharpParser::Bracket_expressionContext::INTERR() {
  return getToken(CSharpParser::INTERR, 0);
}

std::vector<tree::TerminalNode *> CSharpParser::Bracket_expressionContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::Bracket_expressionContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}


size_t CSharpParser::Bracket_expressionContext::getRuleIndex() const {
  return CSharpParser::RuleBracket_expression;
}

void CSharpParser::Bracket_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBracket_expression(this);
}

void CSharpParser::Bracket_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBracket_expression(this);
}

CSharpParser::Bracket_expressionContext* CSharpParser::bracket_expression() {
  Bracket_expressionContext *_localctx = _tracker.createInstance<Bracket_expressionContext>(_ctx, getState());
  enterRule(_localctx, 80, CSharpParser::RuleBracket_expression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(934);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::INTERR) {
      setState(933);
      match(CSharpParser::INTERR);
    }
    setState(936);
    match(CSharpParser::OPEN_BRACKET);
    setState(937);
    indexer_argument();
    setState(942);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CSharpParser::COMMA) {
      setState(938);
      match(CSharpParser::COMMA);
      setState(939);
      indexer_argument();
      setState(944);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(945);
    match(CSharpParser::CLOSE_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Indexer_argumentContext ------------------------------------------------------------------

CSharpParser::Indexer_argumentContext::Indexer_argumentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::ExpressionContext* CSharpParser::Indexer_argumentContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}

CSharpParser::IdentifierContext* CSharpParser::Indexer_argumentContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

tree::TerminalNode* CSharpParser::Indexer_argumentContext::COLON() {
  return getToken(CSharpParser::COLON, 0);
}


size_t CSharpParser::Indexer_argumentContext::getRuleIndex() const {
  return CSharpParser::RuleIndexer_argument;
}

void CSharpParser::Indexer_argumentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIndexer_argument(this);
}

void CSharpParser::Indexer_argumentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIndexer_argument(this);
}

CSharpParser::Indexer_argumentContext* CSharpParser::indexer_argument() {
  Indexer_argumentContext *_localctx = _tracker.createInstance<Indexer_argumentContext>(_ctx, getState());
  enterRule(_localctx, 82, CSharpParser::RuleIndexer_argument);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(950);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 79, _ctx)) {
    case 1: {
      setState(947);
      identifier();
      setState(948);
      match(CSharpParser::COLON);
      break;
    }

    default:
      break;
    }
    setState(952);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Predefined_typeContext ------------------------------------------------------------------

CSharpParser::Predefined_typeContext::Predefined_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Predefined_typeContext::BOOL() {
  return getToken(CSharpParser::BOOL, 0);
}

tree::TerminalNode* CSharpParser::Predefined_typeContext::BYTE() {
  return getToken(CSharpParser::BYTE, 0);
}

tree::TerminalNode* CSharpParser::Predefined_typeContext::CHAR() {
  return getToken(CSharpParser::CHAR, 0);
}

tree::TerminalNode* CSharpParser::Predefined_typeContext::DECIMAL() {
  return getToken(CSharpParser::DECIMAL, 0);
}

tree::TerminalNode* CSharpParser::Predefined_typeContext::DOUBLE() {
  return getToken(CSharpParser::DOUBLE, 0);
}

tree::TerminalNode* CSharpParser::Predefined_typeContext::FLOAT() {
  return getToken(CSharpParser::FLOAT, 0);
}

tree::TerminalNode* CSharpParser::Predefined_typeContext::INT() {
  return getToken(CSharpParser::INT, 0);
}

tree::TerminalNode* CSharpParser::Predefined_typeContext::LONG() {
  return getToken(CSharpParser::LONG, 0);
}

tree::TerminalNode* CSharpParser::Predefined_typeContext::OBJECT() {
  return getToken(CSharpParser::OBJECT, 0);
}

tree::TerminalNode* CSharpParser::Predefined_typeContext::SBYTE() {
  return getToken(CSharpParser::SBYTE, 0);
}

tree::TerminalNode* CSharpParser::Predefined_typeContext::SHORT() {
  return getToken(CSharpParser::SHORT, 0);
}

tree::TerminalNode* CSharpParser::Predefined_typeContext::STRING() {
  return getToken(CSharpParser::STRING, 0);
}

tree::TerminalNode* CSharpParser::Predefined_typeContext::UINT() {
  return getToken(CSharpParser::UINT, 0);
}

tree::TerminalNode* CSharpParser::Predefined_typeContext::ULONG() {
  return getToken(CSharpParser::ULONG, 0);
}

tree::TerminalNode* CSharpParser::Predefined_typeContext::USHORT() {
  return getToken(CSharpParser::USHORT, 0);
}


size_t CSharpParser::Predefined_typeContext::getRuleIndex() const {
  return CSharpParser::RulePredefined_type;
}

void CSharpParser::Predefined_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPredefined_type(this);
}

void CSharpParser::Predefined_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPredefined_type(this);
}

CSharpParser::Predefined_typeContext* CSharpParser::predefined_type() {
  Predefined_typeContext *_localctx = _tracker.createInstance<Predefined_typeContext>(_ctx, getState());
  enterRule(_localctx, 84, CSharpParser::RulePredefined_type);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(954);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -9187308037727846400) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 75170873345) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expression_listContext ------------------------------------------------------------------

CSharpParser::Expression_listContext::Expression_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::ExpressionContext *> CSharpParser::Expression_listContext::expression() {
  return getRuleContexts<CSharpParser::ExpressionContext>();
}

CSharpParser::ExpressionContext* CSharpParser::Expression_listContext::expression(size_t i) {
  return getRuleContext<CSharpParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::Expression_listContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::Expression_listContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}


size_t CSharpParser::Expression_listContext::getRuleIndex() const {
  return CSharpParser::RuleExpression_list;
}

void CSharpParser::Expression_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpression_list(this);
}

void CSharpParser::Expression_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpression_list(this);
}

CSharpParser::Expression_listContext* CSharpParser::expression_list() {
  Expression_listContext *_localctx = _tracker.createInstance<Expression_listContext>(_ctx, getState());
  enterRule(_localctx, 86, CSharpParser::RuleExpression_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(956);
    expression();
    setState(961);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CSharpParser::COMMA) {
      setState(957);
      match(CSharpParser::COMMA);
      setState(958);
      expression();
      setState(963);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Object_or_collection_initializerContext ------------------------------------------------------------------

CSharpParser::Object_or_collection_initializerContext::Object_or_collection_initializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Object_initializerContext* CSharpParser::Object_or_collection_initializerContext::object_initializer() {
  return getRuleContext<CSharpParser::Object_initializerContext>(0);
}

CSharpParser::Collection_initializerContext* CSharpParser::Object_or_collection_initializerContext::collection_initializer() {
  return getRuleContext<CSharpParser::Collection_initializerContext>(0);
}


size_t CSharpParser::Object_or_collection_initializerContext::getRuleIndex() const {
  return CSharpParser::RuleObject_or_collection_initializer;
}

void CSharpParser::Object_or_collection_initializerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterObject_or_collection_initializer(this);
}

void CSharpParser::Object_or_collection_initializerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitObject_or_collection_initializer(this);
}

CSharpParser::Object_or_collection_initializerContext* CSharpParser::object_or_collection_initializer() {
  Object_or_collection_initializerContext *_localctx = _tracker.createInstance<Object_or_collection_initializerContext>(_ctx, getState());
  enterRule(_localctx, 88, CSharpParser::RuleObject_or_collection_initializer);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(966);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 81, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(964);
      object_initializer();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(965);
      collection_initializer();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Object_initializerContext ------------------------------------------------------------------

CSharpParser::Object_initializerContext::Object_initializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Object_initializerContext::OPEN_BRACE() {
  return getToken(CSharpParser::OPEN_BRACE, 0);
}

tree::TerminalNode* CSharpParser::Object_initializerContext::CLOSE_BRACE() {
  return getToken(CSharpParser::CLOSE_BRACE, 0);
}

CSharpParser::Member_initializer_listContext* CSharpParser::Object_initializerContext::member_initializer_list() {
  return getRuleContext<CSharpParser::Member_initializer_listContext>(0);
}

tree::TerminalNode* CSharpParser::Object_initializerContext::COMMA() {
  return getToken(CSharpParser::COMMA, 0);
}


size_t CSharpParser::Object_initializerContext::getRuleIndex() const {
  return CSharpParser::RuleObject_initializer;
}

void CSharpParser::Object_initializerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterObject_initializer(this);
}

void CSharpParser::Object_initializerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitObject_initializer(this);
}

CSharpParser::Object_initializerContext* CSharpParser::object_initializer() {
  Object_initializerContext *_localctx = _tracker.createInstance<Object_initializerContext>(_ctx, getState());
  enterRule(_localctx, 90, CSharpParser::RuleObject_initializer);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(968);
    match(CSharpParser::OPEN_BRACE);
    setState(973);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3750091428249852928) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & -9221467407831136095) != 0)) {
      setState(969);
      member_initializer_list();
      setState(971);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CSharpParser::COMMA) {
        setState(970);
        match(CSharpParser::COMMA);
      }
    }
    setState(975);
    match(CSharpParser::CLOSE_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Member_initializer_listContext ------------------------------------------------------------------

CSharpParser::Member_initializer_listContext::Member_initializer_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::Member_initializerContext *> CSharpParser::Member_initializer_listContext::member_initializer() {
  return getRuleContexts<CSharpParser::Member_initializerContext>();
}

CSharpParser::Member_initializerContext* CSharpParser::Member_initializer_listContext::member_initializer(size_t i) {
  return getRuleContext<CSharpParser::Member_initializerContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::Member_initializer_listContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::Member_initializer_listContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}


size_t CSharpParser::Member_initializer_listContext::getRuleIndex() const {
  return CSharpParser::RuleMember_initializer_list;
}

void CSharpParser::Member_initializer_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMember_initializer_list(this);
}

void CSharpParser::Member_initializer_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMember_initializer_list(this);
}

CSharpParser::Member_initializer_listContext* CSharpParser::member_initializer_list() {
  Member_initializer_listContext *_localctx = _tracker.createInstance<Member_initializer_listContext>(_ctx, getState());
  enterRule(_localctx, 92, CSharpParser::RuleMember_initializer_list);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(977);
    member_initializer();
    setState(982);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 84, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(978);
        match(CSharpParser::COMMA);
        setState(979);
        member_initializer(); 
      }
      setState(984);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 84, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Member_initializerContext ------------------------------------------------------------------

CSharpParser::Member_initializerContext::Member_initializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Member_initializerContext::ASSIGNMENT() {
  return getToken(CSharpParser::ASSIGNMENT, 0);
}

CSharpParser::Initializer_valueContext* CSharpParser::Member_initializerContext::initializer_value() {
  return getRuleContext<CSharpParser::Initializer_valueContext>(0);
}

CSharpParser::IdentifierContext* CSharpParser::Member_initializerContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

tree::TerminalNode* CSharpParser::Member_initializerContext::OPEN_BRACKET() {
  return getToken(CSharpParser::OPEN_BRACKET, 0);
}

CSharpParser::ExpressionContext* CSharpParser::Member_initializerContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}

tree::TerminalNode* CSharpParser::Member_initializerContext::CLOSE_BRACKET() {
  return getToken(CSharpParser::CLOSE_BRACKET, 0);
}


size_t CSharpParser::Member_initializerContext::getRuleIndex() const {
  return CSharpParser::RuleMember_initializer;
}

void CSharpParser::Member_initializerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMember_initializer(this);
}

void CSharpParser::Member_initializerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMember_initializer(this);
}

CSharpParser::Member_initializerContext* CSharpParser::member_initializer() {
  Member_initializerContext *_localctx = _tracker.createInstance<Member_initializerContext>(_ctx, getState());
  enterRule(_localctx, 94, CSharpParser::RuleMember_initializer);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(990);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::ADD:
      case CSharpParser::ALIAS:
      case CSharpParser::ARGLIST:
      case CSharpParser::ASCENDING:
      case CSharpParser::ASYNC:
      case CSharpParser::AWAIT:
      case CSharpParser::BY:
      case CSharpParser::DESCENDING:
      case CSharpParser::DYNAMIC:
      case CSharpParser::EQUALS:
      case CSharpParser::FROM:
      case CSharpParser::GET:
      case CSharpParser::GROUP:
      case CSharpParser::INTO:
      case CSharpParser::JOIN:
      case CSharpParser::LET:
      case CSharpParser::NAMEOF:
      case CSharpParser::ON:
      case CSharpParser::ORDERBY:
      case CSharpParser::PARTIAL:
      case CSharpParser::REMOVE:
      case CSharpParser::SELECT:
      case CSharpParser::SET:
      case CSharpParser::UNMANAGED:
      case CSharpParser::VAR:
      case CSharpParser::WHEN:
      case CSharpParser::WHERE:
      case CSharpParser::YIELD:
      case CSharpParser::IDENTIFIER: {
        setState(985);
        identifier();
        break;
      }

      case CSharpParser::OPEN_BRACKET: {
        setState(986);
        match(CSharpParser::OPEN_BRACKET);
        setState(987);
        expression();
        setState(988);
        match(CSharpParser::CLOSE_BRACKET);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(992);
    match(CSharpParser::ASSIGNMENT);
    setState(993);
    initializer_value();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Initializer_valueContext ------------------------------------------------------------------

CSharpParser::Initializer_valueContext::Initializer_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::ExpressionContext* CSharpParser::Initializer_valueContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}

CSharpParser::Object_or_collection_initializerContext* CSharpParser::Initializer_valueContext::object_or_collection_initializer() {
  return getRuleContext<CSharpParser::Object_or_collection_initializerContext>(0);
}


size_t CSharpParser::Initializer_valueContext::getRuleIndex() const {
  return CSharpParser::RuleInitializer_value;
}

void CSharpParser::Initializer_valueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInitializer_value(this);
}

void CSharpParser::Initializer_valueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInitializer_value(this);
}

CSharpParser::Initializer_valueContext* CSharpParser::initializer_value() {
  Initializer_valueContext *_localctx = _tracker.createInstance<Initializer_valueContext>(_ctx, getState());
  enterRule(_localctx, 96, CSharpParser::RuleInitializer_value);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(997);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::ADD:
      case CSharpParser::ALIAS:
      case CSharpParser::ARGLIST:
      case CSharpParser::ASCENDING:
      case CSharpParser::ASYNC:
      case CSharpParser::AWAIT:
      case CSharpParser::BASE:
      case CSharpParser::BOOL:
      case CSharpParser::BY:
      case CSharpParser::BYTE:
      case CSharpParser::CHAR:
      case CSharpParser::CHECKED:
      case CSharpParser::DECIMAL:
      case CSharpParser::DEFAULT:
      case CSharpParser::DELEGATE:
      case CSharpParser::DESCENDING:
      case CSharpParser::DOUBLE:
      case CSharpParser::DYNAMIC:
      case CSharpParser::EQUALS:
      case CSharpParser::FALSE:
      case CSharpParser::FLOAT:
      case CSharpParser::FROM:
      case CSharpParser::GET:
      case CSharpParser::GROUP:
      case CSharpParser::INT:
      case CSharpParser::INTO:
      case CSharpParser::JOIN:
      case CSharpParser::LET:
      case CSharpParser::LONG:
      case CSharpParser::NAMEOF:
      case CSharpParser::NEW:
      case CSharpParser::NULL_:
      case CSharpParser::OBJECT:
      case CSharpParser::ON:
      case CSharpParser::ORDERBY:
      case CSharpParser::PARTIAL:
      case CSharpParser::REF:
      case CSharpParser::REMOVE:
      case CSharpParser::SBYTE:
      case CSharpParser::SELECT:
      case CSharpParser::SET:
      case CSharpParser::SHORT:
      case CSharpParser::SIZEOF:
      case CSharpParser::STRING:
      case CSharpParser::THIS:
      case CSharpParser::TRUE:
      case CSharpParser::TYPEOF:
      case CSharpParser::UINT:
      case CSharpParser::ULONG:
      case CSharpParser::UNCHECKED:
      case CSharpParser::UNMANAGED:
      case CSharpParser::USHORT:
      case CSharpParser::VAR:
      case CSharpParser::WHEN:
      case CSharpParser::WHERE:
      case CSharpParser::YIELD:
      case CSharpParser::IDENTIFIER:
      case CSharpParser::LITERAL_ACCESS:
      case CSharpParser::INTEGER_LITERAL:
      case CSharpParser::HEX_INTEGER_LITERAL:
      case CSharpParser::BIN_INTEGER_LITERAL:
      case CSharpParser::REAL_LITERAL:
      case CSharpParser::CHARACTER_LITERAL:
      case CSharpParser::REGULAR_STRING:
      case CSharpParser::VERBATIUM_STRING:
      case CSharpParser::INTERPOLATED_REGULAR_STRING_START:
      case CSharpParser::INTERPOLATED_VERBATIUM_STRING_START:
      case CSharpParser::OPEN_PARENS:
      case CSharpParser::PLUS:
      case CSharpParser::MINUS:
      case CSharpParser::STAR:
      case CSharpParser::AMP:
      case CSharpParser::CARET:
      case CSharpParser::BANG:
      case CSharpParser::TILDE:
      case CSharpParser::OP_INC:
      case CSharpParser::OP_DEC:
      case CSharpParser::OP_RANGE: {
        enterOuterAlt(_localctx, 1);
        setState(995);
        expression();
        break;
      }

      case CSharpParser::OPEN_BRACE: {
        enterOuterAlt(_localctx, 2);
        setState(996);
        object_or_collection_initializer();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Collection_initializerContext ------------------------------------------------------------------

CSharpParser::Collection_initializerContext::Collection_initializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Collection_initializerContext::OPEN_BRACE() {
  return getToken(CSharpParser::OPEN_BRACE, 0);
}

std::vector<CSharpParser::Element_initializerContext *> CSharpParser::Collection_initializerContext::element_initializer() {
  return getRuleContexts<CSharpParser::Element_initializerContext>();
}

CSharpParser::Element_initializerContext* CSharpParser::Collection_initializerContext::element_initializer(size_t i) {
  return getRuleContext<CSharpParser::Element_initializerContext>(i);
}

tree::TerminalNode* CSharpParser::Collection_initializerContext::CLOSE_BRACE() {
  return getToken(CSharpParser::CLOSE_BRACE, 0);
}

std::vector<tree::TerminalNode *> CSharpParser::Collection_initializerContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::Collection_initializerContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}


size_t CSharpParser::Collection_initializerContext::getRuleIndex() const {
  return CSharpParser::RuleCollection_initializer;
}

void CSharpParser::Collection_initializerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCollection_initializer(this);
}

void CSharpParser::Collection_initializerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCollection_initializer(this);
}

CSharpParser::Collection_initializerContext* CSharpParser::collection_initializer() {
  Collection_initializerContext *_localctx = _tracker.createInstance<Collection_initializerContext>(_ctx, getState());
  enterRule(_localctx, 98, CSharpParser::RuleCollection_initializer);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(999);
    match(CSharpParser::OPEN_BRACE);
    setState(1000);
    element_initializer();
    setState(1005);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 87, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1001);
        match(CSharpParser::COMMA);
        setState(1002);
        element_initializer(); 
      }
      setState(1007);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 87, _ctx);
    }
    setState(1009);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::COMMA) {
      setState(1008);
      match(CSharpParser::COMMA);
    }
    setState(1011);
    match(CSharpParser::CLOSE_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Element_initializerContext ------------------------------------------------------------------

CSharpParser::Element_initializerContext::Element_initializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Non_assignment_expressionContext* CSharpParser::Element_initializerContext::non_assignment_expression() {
  return getRuleContext<CSharpParser::Non_assignment_expressionContext>(0);
}

tree::TerminalNode* CSharpParser::Element_initializerContext::OPEN_BRACE() {
  return getToken(CSharpParser::OPEN_BRACE, 0);
}

CSharpParser::Expression_listContext* CSharpParser::Element_initializerContext::expression_list() {
  return getRuleContext<CSharpParser::Expression_listContext>(0);
}

tree::TerminalNode* CSharpParser::Element_initializerContext::CLOSE_BRACE() {
  return getToken(CSharpParser::CLOSE_BRACE, 0);
}


size_t CSharpParser::Element_initializerContext::getRuleIndex() const {
  return CSharpParser::RuleElement_initializer;
}

void CSharpParser::Element_initializerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElement_initializer(this);
}

void CSharpParser::Element_initializerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElement_initializer(this);
}

CSharpParser::Element_initializerContext* CSharpParser::element_initializer() {
  Element_initializerContext *_localctx = _tracker.createInstance<Element_initializerContext>(_ctx, getState());
  enterRule(_localctx, 100, CSharpParser::RuleElement_initializer);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1018);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::ADD:
      case CSharpParser::ALIAS:
      case CSharpParser::ARGLIST:
      case CSharpParser::ASCENDING:
      case CSharpParser::ASYNC:
      case CSharpParser::AWAIT:
      case CSharpParser::BASE:
      case CSharpParser::BOOL:
      case CSharpParser::BY:
      case CSharpParser::BYTE:
      case CSharpParser::CHAR:
      case CSharpParser::CHECKED:
      case CSharpParser::DECIMAL:
      case CSharpParser::DEFAULT:
      case CSharpParser::DELEGATE:
      case CSharpParser::DESCENDING:
      case CSharpParser::DOUBLE:
      case CSharpParser::DYNAMIC:
      case CSharpParser::EQUALS:
      case CSharpParser::FALSE:
      case CSharpParser::FLOAT:
      case CSharpParser::FROM:
      case CSharpParser::GET:
      case CSharpParser::GROUP:
      case CSharpParser::INT:
      case CSharpParser::INTO:
      case CSharpParser::JOIN:
      case CSharpParser::LET:
      case CSharpParser::LONG:
      case CSharpParser::NAMEOF:
      case CSharpParser::NEW:
      case CSharpParser::NULL_:
      case CSharpParser::OBJECT:
      case CSharpParser::ON:
      case CSharpParser::ORDERBY:
      case CSharpParser::PARTIAL:
      case CSharpParser::REMOVE:
      case CSharpParser::SBYTE:
      case CSharpParser::SELECT:
      case CSharpParser::SET:
      case CSharpParser::SHORT:
      case CSharpParser::SIZEOF:
      case CSharpParser::STRING:
      case CSharpParser::THIS:
      case CSharpParser::TRUE:
      case CSharpParser::TYPEOF:
      case CSharpParser::UINT:
      case CSharpParser::ULONG:
      case CSharpParser::UNCHECKED:
      case CSharpParser::UNMANAGED:
      case CSharpParser::USHORT:
      case CSharpParser::VAR:
      case CSharpParser::WHEN:
      case CSharpParser::WHERE:
      case CSharpParser::YIELD:
      case CSharpParser::IDENTIFIER:
      case CSharpParser::LITERAL_ACCESS:
      case CSharpParser::INTEGER_LITERAL:
      case CSharpParser::HEX_INTEGER_LITERAL:
      case CSharpParser::BIN_INTEGER_LITERAL:
      case CSharpParser::REAL_LITERAL:
      case CSharpParser::CHARACTER_LITERAL:
      case CSharpParser::REGULAR_STRING:
      case CSharpParser::VERBATIUM_STRING:
      case CSharpParser::INTERPOLATED_REGULAR_STRING_START:
      case CSharpParser::INTERPOLATED_VERBATIUM_STRING_START:
      case CSharpParser::OPEN_PARENS:
      case CSharpParser::PLUS:
      case CSharpParser::MINUS:
      case CSharpParser::STAR:
      case CSharpParser::AMP:
      case CSharpParser::CARET:
      case CSharpParser::BANG:
      case CSharpParser::TILDE:
      case CSharpParser::OP_INC:
      case CSharpParser::OP_DEC:
      case CSharpParser::OP_RANGE: {
        enterOuterAlt(_localctx, 1);
        setState(1013);
        non_assignment_expression();
        break;
      }

      case CSharpParser::OPEN_BRACE: {
        enterOuterAlt(_localctx, 2);
        setState(1014);
        match(CSharpParser::OPEN_BRACE);
        setState(1015);
        expression_list();
        setState(1016);
        match(CSharpParser::CLOSE_BRACE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Anonymous_object_initializerContext ------------------------------------------------------------------

CSharpParser::Anonymous_object_initializerContext::Anonymous_object_initializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Anonymous_object_initializerContext::OPEN_BRACE() {
  return getToken(CSharpParser::OPEN_BRACE, 0);
}

tree::TerminalNode* CSharpParser::Anonymous_object_initializerContext::CLOSE_BRACE() {
  return getToken(CSharpParser::CLOSE_BRACE, 0);
}

CSharpParser::Member_declarator_listContext* CSharpParser::Anonymous_object_initializerContext::member_declarator_list() {
  return getRuleContext<CSharpParser::Member_declarator_listContext>(0);
}

tree::TerminalNode* CSharpParser::Anonymous_object_initializerContext::COMMA() {
  return getToken(CSharpParser::COMMA, 0);
}


size_t CSharpParser::Anonymous_object_initializerContext::getRuleIndex() const {
  return CSharpParser::RuleAnonymous_object_initializer;
}

void CSharpParser::Anonymous_object_initializerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnonymous_object_initializer(this);
}

void CSharpParser::Anonymous_object_initializerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnonymous_object_initializer(this);
}

CSharpParser::Anonymous_object_initializerContext* CSharpParser::anonymous_object_initializer() {
  Anonymous_object_initializerContext *_localctx = _tracker.createInstance<Anonymous_object_initializerContext>(_ctx, getState());
  enterRule(_localctx, 102, CSharpParser::RuleAnonymous_object_initializer);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1020);
    match(CSharpParser::OPEN_BRACE);
    setState(1025);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 10) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 10)) & 3417425939254529527) != 0) || ((((_la - 75) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 75)) & 19140129564736833) != 0)) {
      setState(1021);
      member_declarator_list();
      setState(1023);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CSharpParser::COMMA) {
        setState(1022);
        match(CSharpParser::COMMA);
      }
    }
    setState(1027);
    match(CSharpParser::CLOSE_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Member_declarator_listContext ------------------------------------------------------------------

CSharpParser::Member_declarator_listContext::Member_declarator_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::Member_declaratorContext *> CSharpParser::Member_declarator_listContext::member_declarator() {
  return getRuleContexts<CSharpParser::Member_declaratorContext>();
}

CSharpParser::Member_declaratorContext* CSharpParser::Member_declarator_listContext::member_declarator(size_t i) {
  return getRuleContext<CSharpParser::Member_declaratorContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::Member_declarator_listContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::Member_declarator_listContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}


size_t CSharpParser::Member_declarator_listContext::getRuleIndex() const {
  return CSharpParser::RuleMember_declarator_list;
}

void CSharpParser::Member_declarator_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMember_declarator_list(this);
}

void CSharpParser::Member_declarator_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMember_declarator_list(this);
}

CSharpParser::Member_declarator_listContext* CSharpParser::member_declarator_list() {
  Member_declarator_listContext *_localctx = _tracker.createInstance<Member_declarator_listContext>(_ctx, getState());
  enterRule(_localctx, 104, CSharpParser::RuleMember_declarator_list);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1029);
    member_declarator();
    setState(1034);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 92, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1030);
        match(CSharpParser::COMMA);
        setState(1031);
        member_declarator(); 
      }
      setState(1036);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 92, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Member_declaratorContext ------------------------------------------------------------------

CSharpParser::Member_declaratorContext::Member_declaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Primary_expressionContext* CSharpParser::Member_declaratorContext::primary_expression() {
  return getRuleContext<CSharpParser::Primary_expressionContext>(0);
}

CSharpParser::IdentifierContext* CSharpParser::Member_declaratorContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

tree::TerminalNode* CSharpParser::Member_declaratorContext::ASSIGNMENT() {
  return getToken(CSharpParser::ASSIGNMENT, 0);
}

CSharpParser::ExpressionContext* CSharpParser::Member_declaratorContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}


size_t CSharpParser::Member_declaratorContext::getRuleIndex() const {
  return CSharpParser::RuleMember_declarator;
}

void CSharpParser::Member_declaratorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMember_declarator(this);
}

void CSharpParser::Member_declaratorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMember_declarator(this);
}

CSharpParser::Member_declaratorContext* CSharpParser::member_declarator() {
  Member_declaratorContext *_localctx = _tracker.createInstance<Member_declaratorContext>(_ctx, getState());
  enterRule(_localctx, 106, CSharpParser::RuleMember_declarator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1042);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 93, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1037);
      primary_expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1038);
      identifier();
      setState(1039);
      match(CSharpParser::ASSIGNMENT);
      setState(1040);
      expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Unbound_type_nameContext ------------------------------------------------------------------

CSharpParser::Unbound_type_nameContext::Unbound_type_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::IdentifierContext *> CSharpParser::Unbound_type_nameContext::identifier() {
  return getRuleContexts<CSharpParser::IdentifierContext>();
}

CSharpParser::IdentifierContext* CSharpParser::Unbound_type_nameContext::identifier(size_t i) {
  return getRuleContext<CSharpParser::IdentifierContext>(i);
}

tree::TerminalNode* CSharpParser::Unbound_type_nameContext::DOUBLE_COLON() {
  return getToken(CSharpParser::DOUBLE_COLON, 0);
}

std::vector<tree::TerminalNode *> CSharpParser::Unbound_type_nameContext::DOT() {
  return getTokens(CSharpParser::DOT);
}

tree::TerminalNode* CSharpParser::Unbound_type_nameContext::DOT(size_t i) {
  return getToken(CSharpParser::DOT, i);
}

std::vector<CSharpParser::Generic_dimension_specifierContext *> CSharpParser::Unbound_type_nameContext::generic_dimension_specifier() {
  return getRuleContexts<CSharpParser::Generic_dimension_specifierContext>();
}

CSharpParser::Generic_dimension_specifierContext* CSharpParser::Unbound_type_nameContext::generic_dimension_specifier(size_t i) {
  return getRuleContext<CSharpParser::Generic_dimension_specifierContext>(i);
}


size_t CSharpParser::Unbound_type_nameContext::getRuleIndex() const {
  return CSharpParser::RuleUnbound_type_name;
}

void CSharpParser::Unbound_type_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnbound_type_name(this);
}

void CSharpParser::Unbound_type_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnbound_type_name(this);
}

CSharpParser::Unbound_type_nameContext* CSharpParser::unbound_type_name() {
  Unbound_type_nameContext *_localctx = _tracker.createInstance<Unbound_type_nameContext>(_ctx, getState());
  enterRule(_localctx, 108, CSharpParser::RuleUnbound_type_name);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1044);
    identifier();
    setState(1053);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::CLOSE_PARENS:
      case CSharpParser::DOT:
      case CSharpParser::LT: {
        setState(1046);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CSharpParser::LT) {
          setState(1045);
          generic_dimension_specifier();
        }
        break;
      }

      case CSharpParser::DOUBLE_COLON: {
        setState(1048);
        match(CSharpParser::DOUBLE_COLON);
        setState(1049);
        identifier();
        setState(1051);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CSharpParser::LT) {
          setState(1050);
          generic_dimension_specifier();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(1062);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CSharpParser::DOT) {
      setState(1055);
      match(CSharpParser::DOT);
      setState(1056);
      identifier();
      setState(1058);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CSharpParser::LT) {
        setState(1057);
        generic_dimension_specifier();
      }
      setState(1064);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Generic_dimension_specifierContext ------------------------------------------------------------------

CSharpParser::Generic_dimension_specifierContext::Generic_dimension_specifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Generic_dimension_specifierContext::LT() {
  return getToken(CSharpParser::LT, 0);
}

tree::TerminalNode* CSharpParser::Generic_dimension_specifierContext::GT() {
  return getToken(CSharpParser::GT, 0);
}

std::vector<tree::TerminalNode *> CSharpParser::Generic_dimension_specifierContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::Generic_dimension_specifierContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}


size_t CSharpParser::Generic_dimension_specifierContext::getRuleIndex() const {
  return CSharpParser::RuleGeneric_dimension_specifier;
}

void CSharpParser::Generic_dimension_specifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGeneric_dimension_specifier(this);
}

void CSharpParser::Generic_dimension_specifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGeneric_dimension_specifier(this);
}

CSharpParser::Generic_dimension_specifierContext* CSharpParser::generic_dimension_specifier() {
  Generic_dimension_specifierContext *_localctx = _tracker.createInstance<Generic_dimension_specifierContext>(_ctx, getState());
  enterRule(_localctx, 110, CSharpParser::RuleGeneric_dimension_specifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1065);
    match(CSharpParser::LT);
    setState(1069);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CSharpParser::COMMA) {
      setState(1066);
      match(CSharpParser::COMMA);
      setState(1071);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1072);
    match(CSharpParser::GT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IsTypeContext ------------------------------------------------------------------

CSharpParser::IsTypeContext::IsTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Base_typeContext* CSharpParser::IsTypeContext::base_type() {
  return getRuleContext<CSharpParser::Base_typeContext>(0);
}

std::vector<CSharpParser::Rank_specifierContext *> CSharpParser::IsTypeContext::rank_specifier() {
  return getRuleContexts<CSharpParser::Rank_specifierContext>();
}

CSharpParser::Rank_specifierContext* CSharpParser::IsTypeContext::rank_specifier(size_t i) {
  return getRuleContext<CSharpParser::Rank_specifierContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::IsTypeContext::STAR() {
  return getTokens(CSharpParser::STAR);
}

tree::TerminalNode* CSharpParser::IsTypeContext::STAR(size_t i) {
  return getToken(CSharpParser::STAR, i);
}

tree::TerminalNode* CSharpParser::IsTypeContext::INTERR() {
  return getToken(CSharpParser::INTERR, 0);
}

CSharpParser::IsTypePatternArmsContext* CSharpParser::IsTypeContext::isTypePatternArms() {
  return getRuleContext<CSharpParser::IsTypePatternArmsContext>(0);
}

CSharpParser::IdentifierContext* CSharpParser::IsTypeContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}


size_t CSharpParser::IsTypeContext::getRuleIndex() const {
  return CSharpParser::RuleIsType;
}

void CSharpParser::IsTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIsType(this);
}

void CSharpParser::IsTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIsType(this);
}

CSharpParser::IsTypeContext* CSharpParser::isType() {
  IsTypeContext *_localctx = _tracker.createInstance<IsTypeContext>(_ctx, getState());
  enterRule(_localctx, 112, CSharpParser::RuleIsType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1074);
    base_type();
    setState(1079);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 101, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1077);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case CSharpParser::OPEN_BRACKET: {
            setState(1075);
            rank_specifier();
            break;
          }

          case CSharpParser::STAR: {
            setState(1076);
            match(CSharpParser::STAR);
            break;
          }

        default:
          throw NoViableAltException(this);
        } 
      }
      setState(1081);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 101, _ctx);
    }
    setState(1083);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 102, _ctx)) {
    case 1: {
      setState(1082);
      match(CSharpParser::INTERR);
      break;
    }

    default:
      break;
    }
    setState(1086);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 103, _ctx)) {
    case 1: {
      setState(1085);
      isTypePatternArms();
      break;
    }

    default:
      break;
    }
    setState(1089);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 104, _ctx)) {
    case 1: {
      setState(1088);
      identifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IsTypePatternArmsContext ------------------------------------------------------------------

CSharpParser::IsTypePatternArmsContext::IsTypePatternArmsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::IsTypePatternArmsContext::OPEN_BRACE() {
  return getToken(CSharpParser::OPEN_BRACE, 0);
}

std::vector<CSharpParser::IsTypePatternArmContext *> CSharpParser::IsTypePatternArmsContext::isTypePatternArm() {
  return getRuleContexts<CSharpParser::IsTypePatternArmContext>();
}

CSharpParser::IsTypePatternArmContext* CSharpParser::IsTypePatternArmsContext::isTypePatternArm(size_t i) {
  return getRuleContext<CSharpParser::IsTypePatternArmContext>(i);
}

tree::TerminalNode* CSharpParser::IsTypePatternArmsContext::CLOSE_BRACE() {
  return getToken(CSharpParser::CLOSE_BRACE, 0);
}

std::vector<tree::TerminalNode *> CSharpParser::IsTypePatternArmsContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::IsTypePatternArmsContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}


size_t CSharpParser::IsTypePatternArmsContext::getRuleIndex() const {
  return CSharpParser::RuleIsTypePatternArms;
}

void CSharpParser::IsTypePatternArmsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIsTypePatternArms(this);
}

void CSharpParser::IsTypePatternArmsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIsTypePatternArms(this);
}

CSharpParser::IsTypePatternArmsContext* CSharpParser::isTypePatternArms() {
  IsTypePatternArmsContext *_localctx = _tracker.createInstance<IsTypePatternArmsContext>(_ctx, getState());
  enterRule(_localctx, 114, CSharpParser::RuleIsTypePatternArms);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1091);
    match(CSharpParser::OPEN_BRACE);
    setState(1092);
    isTypePatternArm();
    setState(1097);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CSharpParser::COMMA) {
      setState(1093);
      match(CSharpParser::COMMA);
      setState(1094);
      isTypePatternArm();
      setState(1099);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1100);
    match(CSharpParser::CLOSE_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IsTypePatternArmContext ------------------------------------------------------------------

CSharpParser::IsTypePatternArmContext::IsTypePatternArmContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::IdentifierContext* CSharpParser::IsTypePatternArmContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

tree::TerminalNode* CSharpParser::IsTypePatternArmContext::COLON() {
  return getToken(CSharpParser::COLON, 0);
}

CSharpParser::ExpressionContext* CSharpParser::IsTypePatternArmContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}


size_t CSharpParser::IsTypePatternArmContext::getRuleIndex() const {
  return CSharpParser::RuleIsTypePatternArm;
}

void CSharpParser::IsTypePatternArmContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIsTypePatternArm(this);
}

void CSharpParser::IsTypePatternArmContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIsTypePatternArm(this);
}

CSharpParser::IsTypePatternArmContext* CSharpParser::isTypePatternArm() {
  IsTypePatternArmContext *_localctx = _tracker.createInstance<IsTypePatternArmContext>(_ctx, getState());
  enterRule(_localctx, 116, CSharpParser::RuleIsTypePatternArm);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1102);
    identifier();
    setState(1103);
    match(CSharpParser::COLON);
    setState(1104);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Lambda_expressionContext ------------------------------------------------------------------

CSharpParser::Lambda_expressionContext::Lambda_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Anonymous_function_signatureContext* CSharpParser::Lambda_expressionContext::anonymous_function_signature() {
  return getRuleContext<CSharpParser::Anonymous_function_signatureContext>(0);
}

CSharpParser::Right_arrowContext* CSharpParser::Lambda_expressionContext::right_arrow() {
  return getRuleContext<CSharpParser::Right_arrowContext>(0);
}

CSharpParser::Anonymous_function_bodyContext* CSharpParser::Lambda_expressionContext::anonymous_function_body() {
  return getRuleContext<CSharpParser::Anonymous_function_bodyContext>(0);
}

tree::TerminalNode* CSharpParser::Lambda_expressionContext::ASYNC() {
  return getToken(CSharpParser::ASYNC, 0);
}


size_t CSharpParser::Lambda_expressionContext::getRuleIndex() const {
  return CSharpParser::RuleLambda_expression;
}

void CSharpParser::Lambda_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLambda_expression(this);
}

void CSharpParser::Lambda_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLambda_expression(this);
}

CSharpParser::Lambda_expressionContext* CSharpParser::lambda_expression() {
  Lambda_expressionContext *_localctx = _tracker.createInstance<Lambda_expressionContext>(_ctx, getState());
  enterRule(_localctx, 118, CSharpParser::RuleLambda_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1107);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 106, _ctx)) {
    case 1: {
      setState(1106);
      match(CSharpParser::ASYNC);
      break;
    }

    default:
      break;
    }
    setState(1109);
    anonymous_function_signature();
    setState(1110);
    right_arrow();
    setState(1111);
    anonymous_function_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Anonymous_function_signatureContext ------------------------------------------------------------------

CSharpParser::Anonymous_function_signatureContext::Anonymous_function_signatureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Anonymous_function_signatureContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

tree::TerminalNode* CSharpParser::Anonymous_function_signatureContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}

CSharpParser::Explicit_anonymous_function_parameter_listContext* CSharpParser::Anonymous_function_signatureContext::explicit_anonymous_function_parameter_list() {
  return getRuleContext<CSharpParser::Explicit_anonymous_function_parameter_listContext>(0);
}

CSharpParser::Implicit_anonymous_function_parameter_listContext* CSharpParser::Anonymous_function_signatureContext::implicit_anonymous_function_parameter_list() {
  return getRuleContext<CSharpParser::Implicit_anonymous_function_parameter_listContext>(0);
}

CSharpParser::IdentifierContext* CSharpParser::Anonymous_function_signatureContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}


size_t CSharpParser::Anonymous_function_signatureContext::getRuleIndex() const {
  return CSharpParser::RuleAnonymous_function_signature;
}

void CSharpParser::Anonymous_function_signatureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnonymous_function_signature(this);
}

void CSharpParser::Anonymous_function_signatureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnonymous_function_signature(this);
}

CSharpParser::Anonymous_function_signatureContext* CSharpParser::anonymous_function_signature() {
  Anonymous_function_signatureContext *_localctx = _tracker.createInstance<Anonymous_function_signatureContext>(_ctx, getState());
  enterRule(_localctx, 120, CSharpParser::RuleAnonymous_function_signature);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1124);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 107, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1113);
      match(CSharpParser::OPEN_PARENS);
      setState(1114);
      match(CSharpParser::CLOSE_PARENS);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1115);
      match(CSharpParser::OPEN_PARENS);
      setState(1116);
      explicit_anonymous_function_parameter_list();
      setState(1117);
      match(CSharpParser::CLOSE_PARENS);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1119);
      match(CSharpParser::OPEN_PARENS);
      setState(1120);
      implicit_anonymous_function_parameter_list();
      setState(1121);
      match(CSharpParser::CLOSE_PARENS);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1123);
      identifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Explicit_anonymous_function_parameter_listContext ------------------------------------------------------------------

CSharpParser::Explicit_anonymous_function_parameter_listContext::Explicit_anonymous_function_parameter_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::Explicit_anonymous_function_parameterContext *> CSharpParser::Explicit_anonymous_function_parameter_listContext::explicit_anonymous_function_parameter() {
  return getRuleContexts<CSharpParser::Explicit_anonymous_function_parameterContext>();
}

CSharpParser::Explicit_anonymous_function_parameterContext* CSharpParser::Explicit_anonymous_function_parameter_listContext::explicit_anonymous_function_parameter(size_t i) {
  return getRuleContext<CSharpParser::Explicit_anonymous_function_parameterContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::Explicit_anonymous_function_parameter_listContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::Explicit_anonymous_function_parameter_listContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}


size_t CSharpParser::Explicit_anonymous_function_parameter_listContext::getRuleIndex() const {
  return CSharpParser::RuleExplicit_anonymous_function_parameter_list;
}

void CSharpParser::Explicit_anonymous_function_parameter_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExplicit_anonymous_function_parameter_list(this);
}

void CSharpParser::Explicit_anonymous_function_parameter_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExplicit_anonymous_function_parameter_list(this);
}

CSharpParser::Explicit_anonymous_function_parameter_listContext* CSharpParser::explicit_anonymous_function_parameter_list() {
  Explicit_anonymous_function_parameter_listContext *_localctx = _tracker.createInstance<Explicit_anonymous_function_parameter_listContext>(_ctx, getState());
  enterRule(_localctx, 122, CSharpParser::RuleExplicit_anonymous_function_parameter_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1126);
    explicit_anonymous_function_parameter();
    setState(1131);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CSharpParser::COMMA) {
      setState(1127);
      match(CSharpParser::COMMA);
      setState(1128);
      explicit_anonymous_function_parameter();
      setState(1133);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Explicit_anonymous_function_parameterContext ------------------------------------------------------------------

CSharpParser::Explicit_anonymous_function_parameterContext::Explicit_anonymous_function_parameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Type_Context* CSharpParser::Explicit_anonymous_function_parameterContext::type_() {
  return getRuleContext<CSharpParser::Type_Context>(0);
}

CSharpParser::IdentifierContext* CSharpParser::Explicit_anonymous_function_parameterContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

tree::TerminalNode* CSharpParser::Explicit_anonymous_function_parameterContext::REF() {
  return getToken(CSharpParser::REF, 0);
}

tree::TerminalNode* CSharpParser::Explicit_anonymous_function_parameterContext::OUT() {
  return getToken(CSharpParser::OUT, 0);
}

tree::TerminalNode* CSharpParser::Explicit_anonymous_function_parameterContext::IN() {
  return getToken(CSharpParser::IN, 0);
}


size_t CSharpParser::Explicit_anonymous_function_parameterContext::getRuleIndex() const {
  return CSharpParser::RuleExplicit_anonymous_function_parameter;
}

void CSharpParser::Explicit_anonymous_function_parameterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExplicit_anonymous_function_parameter(this);
}

void CSharpParser::Explicit_anonymous_function_parameterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExplicit_anonymous_function_parameter(this);
}

CSharpParser::Explicit_anonymous_function_parameterContext* CSharpParser::explicit_anonymous_function_parameter() {
  Explicit_anonymous_function_parameterContext *_localctx = _tracker.createInstance<Explicit_anonymous_function_parameterContext>(_ctx, getState());
  enterRule(_localctx, 124, CSharpParser::RuleExplicit_anonymous_function_parameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1135);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 54) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 54)) & 67371009) != 0)) {
      setState(1134);
      antlrcpp::downCast<Explicit_anonymous_function_parameterContext *>(_localctx)->refout = _input->LT(1);
      _la = _input->LA(1);
      if (!(((((_la - 54) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 54)) & 67371009) != 0))) {
        antlrcpp::downCast<Explicit_anonymous_function_parameterContext *>(_localctx)->refout = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(1137);
    type_();
    setState(1138);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Implicit_anonymous_function_parameter_listContext ------------------------------------------------------------------

CSharpParser::Implicit_anonymous_function_parameter_listContext::Implicit_anonymous_function_parameter_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::IdentifierContext *> CSharpParser::Implicit_anonymous_function_parameter_listContext::identifier() {
  return getRuleContexts<CSharpParser::IdentifierContext>();
}

CSharpParser::IdentifierContext* CSharpParser::Implicit_anonymous_function_parameter_listContext::identifier(size_t i) {
  return getRuleContext<CSharpParser::IdentifierContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::Implicit_anonymous_function_parameter_listContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::Implicit_anonymous_function_parameter_listContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}


size_t CSharpParser::Implicit_anonymous_function_parameter_listContext::getRuleIndex() const {
  return CSharpParser::RuleImplicit_anonymous_function_parameter_list;
}

void CSharpParser::Implicit_anonymous_function_parameter_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImplicit_anonymous_function_parameter_list(this);
}

void CSharpParser::Implicit_anonymous_function_parameter_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImplicit_anonymous_function_parameter_list(this);
}

CSharpParser::Implicit_anonymous_function_parameter_listContext* CSharpParser::implicit_anonymous_function_parameter_list() {
  Implicit_anonymous_function_parameter_listContext *_localctx = _tracker.createInstance<Implicit_anonymous_function_parameter_listContext>(_ctx, getState());
  enterRule(_localctx, 126, CSharpParser::RuleImplicit_anonymous_function_parameter_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1140);
    identifier();
    setState(1145);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CSharpParser::COMMA) {
      setState(1141);
      match(CSharpParser::COMMA);
      setState(1142);
      identifier();
      setState(1147);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Anonymous_function_bodyContext ------------------------------------------------------------------

CSharpParser::Anonymous_function_bodyContext::Anonymous_function_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Throwable_expressionContext* CSharpParser::Anonymous_function_bodyContext::throwable_expression() {
  return getRuleContext<CSharpParser::Throwable_expressionContext>(0);
}

CSharpParser::BlockContext* CSharpParser::Anonymous_function_bodyContext::block() {
  return getRuleContext<CSharpParser::BlockContext>(0);
}


size_t CSharpParser::Anonymous_function_bodyContext::getRuleIndex() const {
  return CSharpParser::RuleAnonymous_function_body;
}

void CSharpParser::Anonymous_function_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnonymous_function_body(this);
}

void CSharpParser::Anonymous_function_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnonymous_function_body(this);
}

CSharpParser::Anonymous_function_bodyContext* CSharpParser::anonymous_function_body() {
  Anonymous_function_bodyContext *_localctx = _tracker.createInstance<Anonymous_function_bodyContext>(_ctx, getState());
  enterRule(_localctx, 128, CSharpParser::RuleAnonymous_function_body);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1150);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::ADD:
      case CSharpParser::ALIAS:
      case CSharpParser::ARGLIST:
      case CSharpParser::ASCENDING:
      case CSharpParser::ASYNC:
      case CSharpParser::AWAIT:
      case CSharpParser::BASE:
      case CSharpParser::BOOL:
      case CSharpParser::BY:
      case CSharpParser::BYTE:
      case CSharpParser::CHAR:
      case CSharpParser::CHECKED:
      case CSharpParser::DECIMAL:
      case CSharpParser::DEFAULT:
      case CSharpParser::DELEGATE:
      case CSharpParser::DESCENDING:
      case CSharpParser::DOUBLE:
      case CSharpParser::DYNAMIC:
      case CSharpParser::EQUALS:
      case CSharpParser::FALSE:
      case CSharpParser::FLOAT:
      case CSharpParser::FROM:
      case CSharpParser::GET:
      case CSharpParser::GROUP:
      case CSharpParser::INT:
      case CSharpParser::INTO:
      case CSharpParser::JOIN:
      case CSharpParser::LET:
      case CSharpParser::LONG:
      case CSharpParser::NAMEOF:
      case CSharpParser::NEW:
      case CSharpParser::NULL_:
      case CSharpParser::OBJECT:
      case CSharpParser::ON:
      case CSharpParser::ORDERBY:
      case CSharpParser::PARTIAL:
      case CSharpParser::REF:
      case CSharpParser::REMOVE:
      case CSharpParser::SBYTE:
      case CSharpParser::SELECT:
      case CSharpParser::SET:
      case CSharpParser::SHORT:
      case CSharpParser::SIZEOF:
      case CSharpParser::STRING:
      case CSharpParser::THIS:
      case CSharpParser::THROW:
      case CSharpParser::TRUE:
      case CSharpParser::TYPEOF:
      case CSharpParser::UINT:
      case CSharpParser::ULONG:
      case CSharpParser::UNCHECKED:
      case CSharpParser::UNMANAGED:
      case CSharpParser::USHORT:
      case CSharpParser::VAR:
      case CSharpParser::WHEN:
      case CSharpParser::WHERE:
      case CSharpParser::YIELD:
      case CSharpParser::IDENTIFIER:
      case CSharpParser::LITERAL_ACCESS:
      case CSharpParser::INTEGER_LITERAL:
      case CSharpParser::HEX_INTEGER_LITERAL:
      case CSharpParser::BIN_INTEGER_LITERAL:
      case CSharpParser::REAL_LITERAL:
      case CSharpParser::CHARACTER_LITERAL:
      case CSharpParser::REGULAR_STRING:
      case CSharpParser::VERBATIUM_STRING:
      case CSharpParser::INTERPOLATED_REGULAR_STRING_START:
      case CSharpParser::INTERPOLATED_VERBATIUM_STRING_START:
      case CSharpParser::OPEN_PARENS:
      case CSharpParser::PLUS:
      case CSharpParser::MINUS:
      case CSharpParser::STAR:
      case CSharpParser::AMP:
      case CSharpParser::CARET:
      case CSharpParser::BANG:
      case CSharpParser::TILDE:
      case CSharpParser::OP_INC:
      case CSharpParser::OP_DEC:
      case CSharpParser::OP_RANGE: {
        enterOuterAlt(_localctx, 1);
        setState(1148);
        throwable_expression();
        break;
      }

      case CSharpParser::OPEN_BRACE: {
        enterOuterAlt(_localctx, 2);
        setState(1149);
        block();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Query_expressionContext ------------------------------------------------------------------

CSharpParser::Query_expressionContext::Query_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::From_clauseContext* CSharpParser::Query_expressionContext::from_clause() {
  return getRuleContext<CSharpParser::From_clauseContext>(0);
}

CSharpParser::Query_bodyContext* CSharpParser::Query_expressionContext::query_body() {
  return getRuleContext<CSharpParser::Query_bodyContext>(0);
}


size_t CSharpParser::Query_expressionContext::getRuleIndex() const {
  return CSharpParser::RuleQuery_expression;
}

void CSharpParser::Query_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQuery_expression(this);
}

void CSharpParser::Query_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQuery_expression(this);
}

CSharpParser::Query_expressionContext* CSharpParser::query_expression() {
  Query_expressionContext *_localctx = _tracker.createInstance<Query_expressionContext>(_ctx, getState());
  enterRule(_localctx, 130, CSharpParser::RuleQuery_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1152);
    from_clause();
    setState(1153);
    query_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- From_clauseContext ------------------------------------------------------------------

CSharpParser::From_clauseContext::From_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::From_clauseContext::FROM() {
  return getToken(CSharpParser::FROM, 0);
}

CSharpParser::IdentifierContext* CSharpParser::From_clauseContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

tree::TerminalNode* CSharpParser::From_clauseContext::IN() {
  return getToken(CSharpParser::IN, 0);
}

CSharpParser::ExpressionContext* CSharpParser::From_clauseContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}

CSharpParser::Type_Context* CSharpParser::From_clauseContext::type_() {
  return getRuleContext<CSharpParser::Type_Context>(0);
}


size_t CSharpParser::From_clauseContext::getRuleIndex() const {
  return CSharpParser::RuleFrom_clause;
}

void CSharpParser::From_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFrom_clause(this);
}

void CSharpParser::From_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFrom_clause(this);
}

CSharpParser::From_clauseContext* CSharpParser::from_clause() {
  From_clauseContext *_localctx = _tracker.createInstance<From_clauseContext>(_ctx, getState());
  enterRule(_localctx, 132, CSharpParser::RuleFrom_clause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1155);
    match(CSharpParser::FROM);
    setState(1157);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 112, _ctx)) {
    case 1: {
      setState(1156);
      type_();
      break;
    }

    default:
      break;
    }
    setState(1159);
    identifier();
    setState(1160);
    match(CSharpParser::IN);
    setState(1161);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Query_bodyContext ------------------------------------------------------------------

CSharpParser::Query_bodyContext::Query_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Select_or_group_clauseContext* CSharpParser::Query_bodyContext::select_or_group_clause() {
  return getRuleContext<CSharpParser::Select_or_group_clauseContext>(0);
}

std::vector<CSharpParser::Query_body_clauseContext *> CSharpParser::Query_bodyContext::query_body_clause() {
  return getRuleContexts<CSharpParser::Query_body_clauseContext>();
}

CSharpParser::Query_body_clauseContext* CSharpParser::Query_bodyContext::query_body_clause(size_t i) {
  return getRuleContext<CSharpParser::Query_body_clauseContext>(i);
}

CSharpParser::Query_continuationContext* CSharpParser::Query_bodyContext::query_continuation() {
  return getRuleContext<CSharpParser::Query_continuationContext>(0);
}


size_t CSharpParser::Query_bodyContext::getRuleIndex() const {
  return CSharpParser::RuleQuery_body;
}

void CSharpParser::Query_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQuery_body(this);
}

void CSharpParser::Query_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQuery_body(this);
}

CSharpParser::Query_bodyContext* CSharpParser::query_body() {
  Query_bodyContext *_localctx = _tracker.createInstance<Query_bodyContext>(_ctx, getState());
  enterRule(_localctx, 134, CSharpParser::RuleQuery_body);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1166);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 48) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 48)) & -9223372036846374911) != 0)) {
      setState(1163);
      query_body_clause();
      setState(1168);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1169);
    select_or_group_clause();
    setState(1171);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 114, _ctx)) {
    case 1: {
      setState(1170);
      query_continuation();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Query_body_clauseContext ------------------------------------------------------------------

CSharpParser::Query_body_clauseContext::Query_body_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::From_clauseContext* CSharpParser::Query_body_clauseContext::from_clause() {
  return getRuleContext<CSharpParser::From_clauseContext>(0);
}

CSharpParser::Let_clauseContext* CSharpParser::Query_body_clauseContext::let_clause() {
  return getRuleContext<CSharpParser::Let_clauseContext>(0);
}

CSharpParser::Where_clauseContext* CSharpParser::Query_body_clauseContext::where_clause() {
  return getRuleContext<CSharpParser::Where_clauseContext>(0);
}

CSharpParser::Combined_join_clauseContext* CSharpParser::Query_body_clauseContext::combined_join_clause() {
  return getRuleContext<CSharpParser::Combined_join_clauseContext>(0);
}

CSharpParser::Orderby_clauseContext* CSharpParser::Query_body_clauseContext::orderby_clause() {
  return getRuleContext<CSharpParser::Orderby_clauseContext>(0);
}


size_t CSharpParser::Query_body_clauseContext::getRuleIndex() const {
  return CSharpParser::RuleQuery_body_clause;
}

void CSharpParser::Query_body_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQuery_body_clause(this);
}

void CSharpParser::Query_body_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQuery_body_clause(this);
}

CSharpParser::Query_body_clauseContext* CSharpParser::query_body_clause() {
  Query_body_clauseContext *_localctx = _tracker.createInstance<Query_body_clauseContext>(_ctx, getState());
  enterRule(_localctx, 136, CSharpParser::RuleQuery_body_clause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1178);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::FROM: {
        enterOuterAlt(_localctx, 1);
        setState(1173);
        from_clause();
        break;
      }

      case CSharpParser::LET: {
        enterOuterAlt(_localctx, 2);
        setState(1174);
        let_clause();
        break;
      }

      case CSharpParser::WHERE: {
        enterOuterAlt(_localctx, 3);
        setState(1175);
        where_clause();
        break;
      }

      case CSharpParser::JOIN: {
        enterOuterAlt(_localctx, 4);
        setState(1176);
        combined_join_clause();
        break;
      }

      case CSharpParser::ORDERBY: {
        enterOuterAlt(_localctx, 5);
        setState(1177);
        orderby_clause();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Let_clauseContext ------------------------------------------------------------------

CSharpParser::Let_clauseContext::Let_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Let_clauseContext::LET() {
  return getToken(CSharpParser::LET, 0);
}

CSharpParser::IdentifierContext* CSharpParser::Let_clauseContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

tree::TerminalNode* CSharpParser::Let_clauseContext::ASSIGNMENT() {
  return getToken(CSharpParser::ASSIGNMENT, 0);
}

CSharpParser::ExpressionContext* CSharpParser::Let_clauseContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}


size_t CSharpParser::Let_clauseContext::getRuleIndex() const {
  return CSharpParser::RuleLet_clause;
}

void CSharpParser::Let_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLet_clause(this);
}

void CSharpParser::Let_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLet_clause(this);
}

CSharpParser::Let_clauseContext* CSharpParser::let_clause() {
  Let_clauseContext *_localctx = _tracker.createInstance<Let_clauseContext>(_ctx, getState());
  enterRule(_localctx, 138, CSharpParser::RuleLet_clause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1180);
    match(CSharpParser::LET);
    setState(1181);
    identifier();
    setState(1182);
    match(CSharpParser::ASSIGNMENT);
    setState(1183);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Where_clauseContext ------------------------------------------------------------------

CSharpParser::Where_clauseContext::Where_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Where_clauseContext::WHERE() {
  return getToken(CSharpParser::WHERE, 0);
}

CSharpParser::ExpressionContext* CSharpParser::Where_clauseContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}


size_t CSharpParser::Where_clauseContext::getRuleIndex() const {
  return CSharpParser::RuleWhere_clause;
}

void CSharpParser::Where_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWhere_clause(this);
}

void CSharpParser::Where_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWhere_clause(this);
}

CSharpParser::Where_clauseContext* CSharpParser::where_clause() {
  Where_clauseContext *_localctx = _tracker.createInstance<Where_clauseContext>(_ctx, getState());
  enterRule(_localctx, 140, CSharpParser::RuleWhere_clause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1185);
    match(CSharpParser::WHERE);
    setState(1186);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Combined_join_clauseContext ------------------------------------------------------------------

CSharpParser::Combined_join_clauseContext::Combined_join_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Combined_join_clauseContext::JOIN() {
  return getToken(CSharpParser::JOIN, 0);
}

std::vector<CSharpParser::IdentifierContext *> CSharpParser::Combined_join_clauseContext::identifier() {
  return getRuleContexts<CSharpParser::IdentifierContext>();
}

CSharpParser::IdentifierContext* CSharpParser::Combined_join_clauseContext::identifier(size_t i) {
  return getRuleContext<CSharpParser::IdentifierContext>(i);
}

tree::TerminalNode* CSharpParser::Combined_join_clauseContext::IN() {
  return getToken(CSharpParser::IN, 0);
}

std::vector<CSharpParser::ExpressionContext *> CSharpParser::Combined_join_clauseContext::expression() {
  return getRuleContexts<CSharpParser::ExpressionContext>();
}

CSharpParser::ExpressionContext* CSharpParser::Combined_join_clauseContext::expression(size_t i) {
  return getRuleContext<CSharpParser::ExpressionContext>(i);
}

tree::TerminalNode* CSharpParser::Combined_join_clauseContext::ON() {
  return getToken(CSharpParser::ON, 0);
}

tree::TerminalNode* CSharpParser::Combined_join_clauseContext::EQUALS() {
  return getToken(CSharpParser::EQUALS, 0);
}

CSharpParser::Type_Context* CSharpParser::Combined_join_clauseContext::type_() {
  return getRuleContext<CSharpParser::Type_Context>(0);
}

tree::TerminalNode* CSharpParser::Combined_join_clauseContext::INTO() {
  return getToken(CSharpParser::INTO, 0);
}


size_t CSharpParser::Combined_join_clauseContext::getRuleIndex() const {
  return CSharpParser::RuleCombined_join_clause;
}

void CSharpParser::Combined_join_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCombined_join_clause(this);
}

void CSharpParser::Combined_join_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCombined_join_clause(this);
}

CSharpParser::Combined_join_clauseContext* CSharpParser::combined_join_clause() {
  Combined_join_clauseContext *_localctx = _tracker.createInstance<Combined_join_clauseContext>(_ctx, getState());
  enterRule(_localctx, 142, CSharpParser::RuleCombined_join_clause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1188);
    match(CSharpParser::JOIN);
    setState(1190);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 116, _ctx)) {
    case 1: {
      setState(1189);
      type_();
      break;
    }

    default:
      break;
    }
    setState(1192);
    identifier();
    setState(1193);
    match(CSharpParser::IN);
    setState(1194);
    expression();
    setState(1195);
    match(CSharpParser::ON);
    setState(1196);
    expression();
    setState(1197);
    match(CSharpParser::EQUALS);
    setState(1198);
    expression();
    setState(1201);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::INTO) {
      setState(1199);
      match(CSharpParser::INTO);
      setState(1200);
      identifier();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Orderby_clauseContext ------------------------------------------------------------------

CSharpParser::Orderby_clauseContext::Orderby_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Orderby_clauseContext::ORDERBY() {
  return getToken(CSharpParser::ORDERBY, 0);
}

std::vector<CSharpParser::OrderingContext *> CSharpParser::Orderby_clauseContext::ordering() {
  return getRuleContexts<CSharpParser::OrderingContext>();
}

CSharpParser::OrderingContext* CSharpParser::Orderby_clauseContext::ordering(size_t i) {
  return getRuleContext<CSharpParser::OrderingContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::Orderby_clauseContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::Orderby_clauseContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}


size_t CSharpParser::Orderby_clauseContext::getRuleIndex() const {
  return CSharpParser::RuleOrderby_clause;
}

void CSharpParser::Orderby_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOrderby_clause(this);
}

void CSharpParser::Orderby_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOrderby_clause(this);
}

CSharpParser::Orderby_clauseContext* CSharpParser::orderby_clause() {
  Orderby_clauseContext *_localctx = _tracker.createInstance<Orderby_clauseContext>(_ctx, getState());
  enterRule(_localctx, 144, CSharpParser::RuleOrderby_clause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1203);
    match(CSharpParser::ORDERBY);
    setState(1204);
    ordering();
    setState(1209);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CSharpParser::COMMA) {
      setState(1205);
      match(CSharpParser::COMMA);
      setState(1206);
      ordering();
      setState(1211);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OrderingContext ------------------------------------------------------------------

CSharpParser::OrderingContext::OrderingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::ExpressionContext* CSharpParser::OrderingContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}

tree::TerminalNode* CSharpParser::OrderingContext::ASCENDING() {
  return getToken(CSharpParser::ASCENDING, 0);
}

tree::TerminalNode* CSharpParser::OrderingContext::DESCENDING() {
  return getToken(CSharpParser::DESCENDING, 0);
}


size_t CSharpParser::OrderingContext::getRuleIndex() const {
  return CSharpParser::RuleOrdering;
}

void CSharpParser::OrderingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOrdering(this);
}

void CSharpParser::OrderingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOrdering(this);
}

CSharpParser::OrderingContext* CSharpParser::ordering() {
  OrderingContext *_localctx = _tracker.createInstance<OrderingContext>(_ctx, getState());
  enterRule(_localctx, 146, CSharpParser::RuleOrdering);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1212);
    expression();
    setState(1214);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::ASCENDING

    || _la == CSharpParser::DESCENDING) {
      setState(1213);
      antlrcpp::downCast<OrderingContext *>(_localctx)->dir = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == CSharpParser::ASCENDING

      || _la == CSharpParser::DESCENDING)) {
        antlrcpp::downCast<OrderingContext *>(_localctx)->dir = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Select_or_group_clauseContext ------------------------------------------------------------------

CSharpParser::Select_or_group_clauseContext::Select_or_group_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Select_or_group_clauseContext::SELECT() {
  return getToken(CSharpParser::SELECT, 0);
}

std::vector<CSharpParser::ExpressionContext *> CSharpParser::Select_or_group_clauseContext::expression() {
  return getRuleContexts<CSharpParser::ExpressionContext>();
}

CSharpParser::ExpressionContext* CSharpParser::Select_or_group_clauseContext::expression(size_t i) {
  return getRuleContext<CSharpParser::ExpressionContext>(i);
}

tree::TerminalNode* CSharpParser::Select_or_group_clauseContext::GROUP() {
  return getToken(CSharpParser::GROUP, 0);
}

tree::TerminalNode* CSharpParser::Select_or_group_clauseContext::BY() {
  return getToken(CSharpParser::BY, 0);
}


size_t CSharpParser::Select_or_group_clauseContext::getRuleIndex() const {
  return CSharpParser::RuleSelect_or_group_clause;
}

void CSharpParser::Select_or_group_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelect_or_group_clause(this);
}

void CSharpParser::Select_or_group_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelect_or_group_clause(this);
}

CSharpParser::Select_or_group_clauseContext* CSharpParser::select_or_group_clause() {
  Select_or_group_clauseContext *_localctx = _tracker.createInstance<Select_or_group_clauseContext>(_ctx, getState());
  enterRule(_localctx, 148, CSharpParser::RuleSelect_or_group_clause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1223);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::SELECT: {
        enterOuterAlt(_localctx, 1);
        setState(1216);
        match(CSharpParser::SELECT);
        setState(1217);
        expression();
        break;
      }

      case CSharpParser::GROUP: {
        enterOuterAlt(_localctx, 2);
        setState(1218);
        match(CSharpParser::GROUP);
        setState(1219);
        expression();
        setState(1220);
        match(CSharpParser::BY);
        setState(1221);
        expression();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Query_continuationContext ------------------------------------------------------------------

CSharpParser::Query_continuationContext::Query_continuationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Query_continuationContext::INTO() {
  return getToken(CSharpParser::INTO, 0);
}

CSharpParser::IdentifierContext* CSharpParser::Query_continuationContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

CSharpParser::Query_bodyContext* CSharpParser::Query_continuationContext::query_body() {
  return getRuleContext<CSharpParser::Query_bodyContext>(0);
}


size_t CSharpParser::Query_continuationContext::getRuleIndex() const {
  return CSharpParser::RuleQuery_continuation;
}

void CSharpParser::Query_continuationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQuery_continuation(this);
}

void CSharpParser::Query_continuationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQuery_continuation(this);
}

CSharpParser::Query_continuationContext* CSharpParser::query_continuation() {
  Query_continuationContext *_localctx = _tracker.createInstance<Query_continuationContext>(_ctx, getState());
  enterRule(_localctx, 150, CSharpParser::RuleQuery_continuation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1225);
    match(CSharpParser::INTO);
    setState(1226);
    identifier();
    setState(1227);
    query_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementContext ------------------------------------------------------------------

CSharpParser::StatementContext::StatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Labeled_StatementContext* CSharpParser::StatementContext::labeled_Statement() {
  return getRuleContext<CSharpParser::Labeled_StatementContext>(0);
}

CSharpParser::DeclarationStatementContext* CSharpParser::StatementContext::declarationStatement() {
  return getRuleContext<CSharpParser::DeclarationStatementContext>(0);
}

CSharpParser::Embedded_statementContext* CSharpParser::StatementContext::embedded_statement() {
  return getRuleContext<CSharpParser::Embedded_statementContext>(0);
}


size_t CSharpParser::StatementContext::getRuleIndex() const {
  return CSharpParser::RuleStatement;
}

void CSharpParser::StatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatement(this);
}

void CSharpParser::StatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatement(this);
}

CSharpParser::StatementContext* CSharpParser::statement() {
  StatementContext *_localctx = _tracker.createInstance<StatementContext>(_ctx, getState());
  enterRule(_localctx, 152, CSharpParser::RuleStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1232);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 121, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1229);
      labeled_Statement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1230);
      declarationStatement();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1231);
      embedded_statement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeclarationStatementContext ------------------------------------------------------------------

CSharpParser::DeclarationStatementContext::DeclarationStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Local_variable_declarationContext* CSharpParser::DeclarationStatementContext::local_variable_declaration() {
  return getRuleContext<CSharpParser::Local_variable_declarationContext>(0);
}

tree::TerminalNode* CSharpParser::DeclarationStatementContext::SEMICOLON() {
  return getToken(CSharpParser::SEMICOLON, 0);
}

CSharpParser::Local_constant_declarationContext* CSharpParser::DeclarationStatementContext::local_constant_declaration() {
  return getRuleContext<CSharpParser::Local_constant_declarationContext>(0);
}

CSharpParser::Local_function_declarationContext* CSharpParser::DeclarationStatementContext::local_function_declaration() {
  return getRuleContext<CSharpParser::Local_function_declarationContext>(0);
}


size_t CSharpParser::DeclarationStatementContext::getRuleIndex() const {
  return CSharpParser::RuleDeclarationStatement;
}

void CSharpParser::DeclarationStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeclarationStatement(this);
}

void CSharpParser::DeclarationStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeclarationStatement(this);
}

CSharpParser::DeclarationStatementContext* CSharpParser::declarationStatement() {
  DeclarationStatementContext *_localctx = _tracker.createInstance<DeclarationStatementContext>(_ctx, getState());
  enterRule(_localctx, 154, CSharpParser::RuleDeclarationStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1241);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 122, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1234);
      local_variable_declaration();
      setState(1235);
      match(CSharpParser::SEMICOLON);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1237);
      local_constant_declaration();
      setState(1238);
      match(CSharpParser::SEMICOLON);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1240);
      local_function_declaration();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Local_function_declarationContext ------------------------------------------------------------------

CSharpParser::Local_function_declarationContext::Local_function_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Local_function_headerContext* CSharpParser::Local_function_declarationContext::local_function_header() {
  return getRuleContext<CSharpParser::Local_function_headerContext>(0);
}

CSharpParser::Local_function_bodyContext* CSharpParser::Local_function_declarationContext::local_function_body() {
  return getRuleContext<CSharpParser::Local_function_bodyContext>(0);
}


size_t CSharpParser::Local_function_declarationContext::getRuleIndex() const {
  return CSharpParser::RuleLocal_function_declaration;
}

void CSharpParser::Local_function_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLocal_function_declaration(this);
}

void CSharpParser::Local_function_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLocal_function_declaration(this);
}

CSharpParser::Local_function_declarationContext* CSharpParser::local_function_declaration() {
  Local_function_declarationContext *_localctx = _tracker.createInstance<Local_function_declarationContext>(_ctx, getState());
  enterRule(_localctx, 156, CSharpParser::RuleLocal_function_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1243);
    local_function_header();
    setState(1244);
    local_function_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Local_function_headerContext ------------------------------------------------------------------

CSharpParser::Local_function_headerContext::Local_function_headerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Return_typeContext* CSharpParser::Local_function_headerContext::return_type() {
  return getRuleContext<CSharpParser::Return_typeContext>(0);
}

CSharpParser::IdentifierContext* CSharpParser::Local_function_headerContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

tree::TerminalNode* CSharpParser::Local_function_headerContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

tree::TerminalNode* CSharpParser::Local_function_headerContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}

CSharpParser::Local_function_modifiersContext* CSharpParser::Local_function_headerContext::local_function_modifiers() {
  return getRuleContext<CSharpParser::Local_function_modifiersContext>(0);
}

CSharpParser::Type_parameter_listContext* CSharpParser::Local_function_headerContext::type_parameter_list() {
  return getRuleContext<CSharpParser::Type_parameter_listContext>(0);
}

CSharpParser::Formal_parameter_listContext* CSharpParser::Local_function_headerContext::formal_parameter_list() {
  return getRuleContext<CSharpParser::Formal_parameter_listContext>(0);
}

CSharpParser::Type_parameter_constraints_clausesContext* CSharpParser::Local_function_headerContext::type_parameter_constraints_clauses() {
  return getRuleContext<CSharpParser::Type_parameter_constraints_clausesContext>(0);
}


size_t CSharpParser::Local_function_headerContext::getRuleIndex() const {
  return CSharpParser::RuleLocal_function_header;
}

void CSharpParser::Local_function_headerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLocal_function_header(this);
}

void CSharpParser::Local_function_headerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLocal_function_header(this);
}

CSharpParser::Local_function_headerContext* CSharpParser::local_function_header() {
  Local_function_headerContext *_localctx = _tracker.createInstance<Local_function_headerContext>(_ctx, getState());
  enterRule(_localctx, 158, CSharpParser::RuleLocal_function_header);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1247);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 123, _ctx)) {
    case 1: {
      setState(1246);
      local_function_modifiers();
      break;
    }

    default:
      break;
    }
    setState(1249);
    return_type();
    setState(1250);
    identifier();
    setState(1252);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::LT) {
      setState(1251);
      type_parameter_list();
    }
    setState(1254);
    match(CSharpParser::OPEN_PARENS);
    setState(1256);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 10) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 10)) & 7812956763456032119) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 74)) & 45037874618448579) != 0)) {
      setState(1255);
      formal_parameter_list();
    }
    setState(1258);
    match(CSharpParser::CLOSE_PARENS);
    setState(1260);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::WHERE) {
      setState(1259);
      type_parameter_constraints_clauses();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Local_function_modifiersContext ------------------------------------------------------------------

CSharpParser::Local_function_modifiersContext::Local_function_modifiersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Local_function_modifiersContext::ASYNC() {
  return getToken(CSharpParser::ASYNC, 0);
}

tree::TerminalNode* CSharpParser::Local_function_modifiersContext::UNSAFE() {
  return getToken(CSharpParser::UNSAFE, 0);
}

tree::TerminalNode* CSharpParser::Local_function_modifiersContext::STATIC() {
  return getToken(CSharpParser::STATIC, 0);
}


size_t CSharpParser::Local_function_modifiersContext::getRuleIndex() const {
  return CSharpParser::RuleLocal_function_modifiers;
}

void CSharpParser::Local_function_modifiersContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLocal_function_modifiers(this);
}

void CSharpParser::Local_function_modifiersContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLocal_function_modifiers(this);
}

CSharpParser::Local_function_modifiersContext* CSharpParser::local_function_modifiers() {
  Local_function_modifiersContext *_localctx = _tracker.createInstance<Local_function_modifiersContext>(_ctx, getState());
  enterRule(_localctx, 160, CSharpParser::RuleLocal_function_modifiers);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1268);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::ASYNC:
      case CSharpParser::UNSAFE: {
        enterOuterAlt(_localctx, 1);
        setState(1262);
        _la = _input->LA(1);
        if (!(_la == CSharpParser::ASYNC || _la == CSharpParser::UNSAFE)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(1264);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CSharpParser::STATIC) {
          setState(1263);
          match(CSharpParser::STATIC);
        }
        break;
      }

      case CSharpParser::STATIC: {
        enterOuterAlt(_localctx, 2);
        setState(1266);
        match(CSharpParser::STATIC);
        setState(1267);
        _la = _input->LA(1);
        if (!(_la == CSharpParser::ASYNC || _la == CSharpParser::UNSAFE)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Local_function_bodyContext ------------------------------------------------------------------

CSharpParser::Local_function_bodyContext::Local_function_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::BlockContext* CSharpParser::Local_function_bodyContext::block() {
  return getRuleContext<CSharpParser::BlockContext>(0);
}

CSharpParser::Right_arrowContext* CSharpParser::Local_function_bodyContext::right_arrow() {
  return getRuleContext<CSharpParser::Right_arrowContext>(0);
}

CSharpParser::Throwable_expressionContext* CSharpParser::Local_function_bodyContext::throwable_expression() {
  return getRuleContext<CSharpParser::Throwable_expressionContext>(0);
}

tree::TerminalNode* CSharpParser::Local_function_bodyContext::SEMICOLON() {
  return getToken(CSharpParser::SEMICOLON, 0);
}


size_t CSharpParser::Local_function_bodyContext::getRuleIndex() const {
  return CSharpParser::RuleLocal_function_body;
}

void CSharpParser::Local_function_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLocal_function_body(this);
}

void CSharpParser::Local_function_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLocal_function_body(this);
}

CSharpParser::Local_function_bodyContext* CSharpParser::local_function_body() {
  Local_function_bodyContext *_localctx = _tracker.createInstance<Local_function_bodyContext>(_ctx, getState());
  enterRule(_localctx, 162, CSharpParser::RuleLocal_function_body);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1275);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::OPEN_BRACE: {
        enterOuterAlt(_localctx, 1);
        setState(1270);
        block();
        break;
      }

      case CSharpParser::ASSIGNMENT: {
        enterOuterAlt(_localctx, 2);
        setState(1271);
        right_arrow();
        setState(1272);
        throwable_expression();
        setState(1273);
        match(CSharpParser::SEMICOLON);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Labeled_StatementContext ------------------------------------------------------------------

CSharpParser::Labeled_StatementContext::Labeled_StatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::IdentifierContext* CSharpParser::Labeled_StatementContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

tree::TerminalNode* CSharpParser::Labeled_StatementContext::COLON() {
  return getToken(CSharpParser::COLON, 0);
}

CSharpParser::StatementContext* CSharpParser::Labeled_StatementContext::statement() {
  return getRuleContext<CSharpParser::StatementContext>(0);
}


size_t CSharpParser::Labeled_StatementContext::getRuleIndex() const {
  return CSharpParser::RuleLabeled_Statement;
}

void CSharpParser::Labeled_StatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLabeled_Statement(this);
}

void CSharpParser::Labeled_StatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLabeled_Statement(this);
}

CSharpParser::Labeled_StatementContext* CSharpParser::labeled_Statement() {
  Labeled_StatementContext *_localctx = _tracker.createInstance<Labeled_StatementContext>(_ctx, getState());
  enterRule(_localctx, 164, CSharpParser::RuleLabeled_Statement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1277);
    identifier();
    setState(1278);
    match(CSharpParser::COLON);
    setState(1279);
    statement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Embedded_statementContext ------------------------------------------------------------------

CSharpParser::Embedded_statementContext::Embedded_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::BlockContext* CSharpParser::Embedded_statementContext::block() {
  return getRuleContext<CSharpParser::BlockContext>(0);
}

CSharpParser::Simple_embedded_statementContext* CSharpParser::Embedded_statementContext::simple_embedded_statement() {
  return getRuleContext<CSharpParser::Simple_embedded_statementContext>(0);
}


size_t CSharpParser::Embedded_statementContext::getRuleIndex() const {
  return CSharpParser::RuleEmbedded_statement;
}

void CSharpParser::Embedded_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEmbedded_statement(this);
}

void CSharpParser::Embedded_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEmbedded_statement(this);
}

CSharpParser::Embedded_statementContext* CSharpParser::embedded_statement() {
  Embedded_statementContext *_localctx = _tracker.createInstance<Embedded_statementContext>(_ctx, getState());
  enterRule(_localctx, 166, CSharpParser::RuleEmbedded_statement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1283);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::OPEN_BRACE: {
        enterOuterAlt(_localctx, 1);
        setState(1281);
        block();
        break;
      }

      case CSharpParser::ADD:
      case CSharpParser::ALIAS:
      case CSharpParser::ARGLIST:
      case CSharpParser::ASCENDING:
      case CSharpParser::ASYNC:
      case CSharpParser::AWAIT:
      case CSharpParser::BASE:
      case CSharpParser::BOOL:
      case CSharpParser::BREAK:
      case CSharpParser::BY:
      case CSharpParser::BYTE:
      case CSharpParser::CHAR:
      case CSharpParser::CHECKED:
      case CSharpParser::CONTINUE:
      case CSharpParser::DECIMAL:
      case CSharpParser::DEFAULT:
      case CSharpParser::DELEGATE:
      case CSharpParser::DESCENDING:
      case CSharpParser::DO:
      case CSharpParser::DOUBLE:
      case CSharpParser::DYNAMIC:
      case CSharpParser::EQUALS:
      case CSharpParser::FALSE:
      case CSharpParser::FIXED:
      case CSharpParser::FLOAT:
      case CSharpParser::FOR:
      case CSharpParser::FOREACH:
      case CSharpParser::FROM:
      case CSharpParser::GET:
      case CSharpParser::GOTO:
      case CSharpParser::GROUP:
      case CSharpParser::IF:
      case CSharpParser::INT:
      case CSharpParser::INTO:
      case CSharpParser::JOIN:
      case CSharpParser::LET:
      case CSharpParser::LOCK:
      case CSharpParser::LONG:
      case CSharpParser::NAMEOF:
      case CSharpParser::NEW:
      case CSharpParser::NULL_:
      case CSharpParser::OBJECT:
      case CSharpParser::ON:
      case CSharpParser::ORDERBY:
      case CSharpParser::PARTIAL:
      case CSharpParser::REF:
      case CSharpParser::REMOVE:
      case CSharpParser::RETURN:
      case CSharpParser::SBYTE:
      case CSharpParser::SELECT:
      case CSharpParser::SET:
      case CSharpParser::SHORT:
      case CSharpParser::SIZEOF:
      case CSharpParser::STRING:
      case CSharpParser::SWITCH:
      case CSharpParser::THIS:
      case CSharpParser::THROW:
      case CSharpParser::TRUE:
      case CSharpParser::TRY:
      case CSharpParser::TYPEOF:
      case CSharpParser::UINT:
      case CSharpParser::ULONG:
      case CSharpParser::UNCHECKED:
      case CSharpParser::UNMANAGED:
      case CSharpParser::UNSAFE:
      case CSharpParser::USHORT:
      case CSharpParser::USING:
      case CSharpParser::VAR:
      case CSharpParser::WHEN:
      case CSharpParser::WHERE:
      case CSharpParser::WHILE:
      case CSharpParser::YIELD:
      case CSharpParser::IDENTIFIER:
      case CSharpParser::LITERAL_ACCESS:
      case CSharpParser::INTEGER_LITERAL:
      case CSharpParser::HEX_INTEGER_LITERAL:
      case CSharpParser::BIN_INTEGER_LITERAL:
      case CSharpParser::REAL_LITERAL:
      case CSharpParser::CHARACTER_LITERAL:
      case CSharpParser::REGULAR_STRING:
      case CSharpParser::VERBATIUM_STRING:
      case CSharpParser::INTERPOLATED_REGULAR_STRING_START:
      case CSharpParser::INTERPOLATED_VERBATIUM_STRING_START:
      case CSharpParser::OPEN_PARENS:
      case CSharpParser::SEMICOLON:
      case CSharpParser::PLUS:
      case CSharpParser::MINUS:
      case CSharpParser::STAR:
      case CSharpParser::AMP:
      case CSharpParser::CARET:
      case CSharpParser::BANG:
      case CSharpParser::TILDE:
      case CSharpParser::OP_INC:
      case CSharpParser::OP_DEC:
      case CSharpParser::OP_RANGE: {
        enterOuterAlt(_localctx, 2);
        setState(1282);
        simple_embedded_statement();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Simple_embedded_statementContext ------------------------------------------------------------------

CSharpParser::Simple_embedded_statementContext::Simple_embedded_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CSharpParser::Simple_embedded_statementContext::getRuleIndex() const {
  return CSharpParser::RuleSimple_embedded_statement;
}

void CSharpParser::Simple_embedded_statementContext::copyFrom(Simple_embedded_statementContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- TryStatementContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::TryStatementContext::TRY() {
  return getToken(CSharpParser::TRY, 0);
}

CSharpParser::BlockContext* CSharpParser::TryStatementContext::block() {
  return getRuleContext<CSharpParser::BlockContext>(0);
}

CSharpParser::Catch_clausesContext* CSharpParser::TryStatementContext::catch_clauses() {
  return getRuleContext<CSharpParser::Catch_clausesContext>(0);
}

CSharpParser::Finally_clauseContext* CSharpParser::TryStatementContext::finally_clause() {
  return getRuleContext<CSharpParser::Finally_clauseContext>(0);
}

CSharpParser::TryStatementContext::TryStatementContext(Simple_embedded_statementContext *ctx) { copyFrom(ctx); }

void CSharpParser::TryStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTryStatement(this);
}
void CSharpParser::TryStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTryStatement(this);
}
//----------------- CheckedStatementContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::CheckedStatementContext::CHECKED() {
  return getToken(CSharpParser::CHECKED, 0);
}

CSharpParser::BlockContext* CSharpParser::CheckedStatementContext::block() {
  return getRuleContext<CSharpParser::BlockContext>(0);
}

CSharpParser::CheckedStatementContext::CheckedStatementContext(Simple_embedded_statementContext *ctx) { copyFrom(ctx); }

void CSharpParser::CheckedStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCheckedStatement(this);
}
void CSharpParser::CheckedStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCheckedStatement(this);
}
//----------------- ThrowStatementContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::ThrowStatementContext::THROW() {
  return getToken(CSharpParser::THROW, 0);
}

tree::TerminalNode* CSharpParser::ThrowStatementContext::SEMICOLON() {
  return getToken(CSharpParser::SEMICOLON, 0);
}

CSharpParser::ExpressionContext* CSharpParser::ThrowStatementContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}

CSharpParser::ThrowStatementContext::ThrowStatementContext(Simple_embedded_statementContext *ctx) { copyFrom(ctx); }

void CSharpParser::ThrowStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterThrowStatement(this);
}
void CSharpParser::ThrowStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitThrowStatement(this);
}
//----------------- TheEmptyStatementContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::TheEmptyStatementContext::SEMICOLON() {
  return getToken(CSharpParser::SEMICOLON, 0);
}

CSharpParser::TheEmptyStatementContext::TheEmptyStatementContext(Simple_embedded_statementContext *ctx) { copyFrom(ctx); }

void CSharpParser::TheEmptyStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTheEmptyStatement(this);
}
void CSharpParser::TheEmptyStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTheEmptyStatement(this);
}
//----------------- UnsafeStatementContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::UnsafeStatementContext::UNSAFE() {
  return getToken(CSharpParser::UNSAFE, 0);
}

CSharpParser::BlockContext* CSharpParser::UnsafeStatementContext::block() {
  return getRuleContext<CSharpParser::BlockContext>(0);
}

CSharpParser::UnsafeStatementContext::UnsafeStatementContext(Simple_embedded_statementContext *ctx) { copyFrom(ctx); }

void CSharpParser::UnsafeStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnsafeStatement(this);
}
void CSharpParser::UnsafeStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnsafeStatement(this);
}
//----------------- ForStatementContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::ForStatementContext::FOR() {
  return getToken(CSharpParser::FOR, 0);
}

tree::TerminalNode* CSharpParser::ForStatementContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

std::vector<tree::TerminalNode *> CSharpParser::ForStatementContext::SEMICOLON() {
  return getTokens(CSharpParser::SEMICOLON);
}

tree::TerminalNode* CSharpParser::ForStatementContext::SEMICOLON(size_t i) {
  return getToken(CSharpParser::SEMICOLON, i);
}

tree::TerminalNode* CSharpParser::ForStatementContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}

CSharpParser::Embedded_statementContext* CSharpParser::ForStatementContext::embedded_statement() {
  return getRuleContext<CSharpParser::Embedded_statementContext>(0);
}

CSharpParser::For_initializerContext* CSharpParser::ForStatementContext::for_initializer() {
  return getRuleContext<CSharpParser::For_initializerContext>(0);
}

CSharpParser::ExpressionContext* CSharpParser::ForStatementContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}

CSharpParser::For_iteratorContext* CSharpParser::ForStatementContext::for_iterator() {
  return getRuleContext<CSharpParser::For_iteratorContext>(0);
}

CSharpParser::ForStatementContext::ForStatementContext(Simple_embedded_statementContext *ctx) { copyFrom(ctx); }

void CSharpParser::ForStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterForStatement(this);
}
void CSharpParser::ForStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitForStatement(this);
}
//----------------- BreakStatementContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::BreakStatementContext::BREAK() {
  return getToken(CSharpParser::BREAK, 0);
}

tree::TerminalNode* CSharpParser::BreakStatementContext::SEMICOLON() {
  return getToken(CSharpParser::SEMICOLON, 0);
}

CSharpParser::BreakStatementContext::BreakStatementContext(Simple_embedded_statementContext *ctx) { copyFrom(ctx); }

void CSharpParser::BreakStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBreakStatement(this);
}
void CSharpParser::BreakStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBreakStatement(this);
}
//----------------- IfStatementContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::IfStatementContext::IF() {
  return getToken(CSharpParser::IF, 0);
}

tree::TerminalNode* CSharpParser::IfStatementContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

CSharpParser::ExpressionContext* CSharpParser::IfStatementContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}

tree::TerminalNode* CSharpParser::IfStatementContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}

std::vector<CSharpParser::If_bodyContext *> CSharpParser::IfStatementContext::if_body() {
  return getRuleContexts<CSharpParser::If_bodyContext>();
}

CSharpParser::If_bodyContext* CSharpParser::IfStatementContext::if_body(size_t i) {
  return getRuleContext<CSharpParser::If_bodyContext>(i);
}

tree::TerminalNode* CSharpParser::IfStatementContext::ELSE() {
  return getToken(CSharpParser::ELSE, 0);
}

CSharpParser::IfStatementContext::IfStatementContext(Simple_embedded_statementContext *ctx) { copyFrom(ctx); }

void CSharpParser::IfStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIfStatement(this);
}
void CSharpParser::IfStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIfStatement(this);
}
//----------------- ReturnStatementContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::ReturnStatementContext::RETURN() {
  return getToken(CSharpParser::RETURN, 0);
}

tree::TerminalNode* CSharpParser::ReturnStatementContext::SEMICOLON() {
  return getToken(CSharpParser::SEMICOLON, 0);
}

CSharpParser::ExpressionContext* CSharpParser::ReturnStatementContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}

CSharpParser::ReturnStatementContext::ReturnStatementContext(Simple_embedded_statementContext *ctx) { copyFrom(ctx); }

void CSharpParser::ReturnStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReturnStatement(this);
}
void CSharpParser::ReturnStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReturnStatement(this);
}
//----------------- GotoStatementContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::GotoStatementContext::GOTO() {
  return getToken(CSharpParser::GOTO, 0);
}

tree::TerminalNode* CSharpParser::GotoStatementContext::SEMICOLON() {
  return getToken(CSharpParser::SEMICOLON, 0);
}

CSharpParser::IdentifierContext* CSharpParser::GotoStatementContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

tree::TerminalNode* CSharpParser::GotoStatementContext::CASE() {
  return getToken(CSharpParser::CASE, 0);
}

CSharpParser::ExpressionContext* CSharpParser::GotoStatementContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}

tree::TerminalNode* CSharpParser::GotoStatementContext::DEFAULT() {
  return getToken(CSharpParser::DEFAULT, 0);
}

CSharpParser::GotoStatementContext::GotoStatementContext(Simple_embedded_statementContext *ctx) { copyFrom(ctx); }

void CSharpParser::GotoStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGotoStatement(this);
}
void CSharpParser::GotoStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGotoStatement(this);
}
//----------------- SwitchStatementContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::SwitchStatementContext::SWITCH() {
  return getToken(CSharpParser::SWITCH, 0);
}

tree::TerminalNode* CSharpParser::SwitchStatementContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

CSharpParser::ExpressionContext* CSharpParser::SwitchStatementContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}

tree::TerminalNode* CSharpParser::SwitchStatementContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}

tree::TerminalNode* CSharpParser::SwitchStatementContext::OPEN_BRACE() {
  return getToken(CSharpParser::OPEN_BRACE, 0);
}

tree::TerminalNode* CSharpParser::SwitchStatementContext::CLOSE_BRACE() {
  return getToken(CSharpParser::CLOSE_BRACE, 0);
}

std::vector<CSharpParser::Switch_sectionContext *> CSharpParser::SwitchStatementContext::switch_section() {
  return getRuleContexts<CSharpParser::Switch_sectionContext>();
}

CSharpParser::Switch_sectionContext* CSharpParser::SwitchStatementContext::switch_section(size_t i) {
  return getRuleContext<CSharpParser::Switch_sectionContext>(i);
}

CSharpParser::SwitchStatementContext::SwitchStatementContext(Simple_embedded_statementContext *ctx) { copyFrom(ctx); }

void CSharpParser::SwitchStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSwitchStatement(this);
}
void CSharpParser::SwitchStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSwitchStatement(this);
}
//----------------- FixedStatementContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::FixedStatementContext::FIXED() {
  return getToken(CSharpParser::FIXED, 0);
}

tree::TerminalNode* CSharpParser::FixedStatementContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

CSharpParser::Pointer_typeContext* CSharpParser::FixedStatementContext::pointer_type() {
  return getRuleContext<CSharpParser::Pointer_typeContext>(0);
}

CSharpParser::Fixed_pointer_declaratorsContext* CSharpParser::FixedStatementContext::fixed_pointer_declarators() {
  return getRuleContext<CSharpParser::Fixed_pointer_declaratorsContext>(0);
}

tree::TerminalNode* CSharpParser::FixedStatementContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}

CSharpParser::Embedded_statementContext* CSharpParser::FixedStatementContext::embedded_statement() {
  return getRuleContext<CSharpParser::Embedded_statementContext>(0);
}

CSharpParser::FixedStatementContext::FixedStatementContext(Simple_embedded_statementContext *ctx) { copyFrom(ctx); }

void CSharpParser::FixedStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFixedStatement(this);
}
void CSharpParser::FixedStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFixedStatement(this);
}
//----------------- WhileStatementContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::WhileStatementContext::WHILE() {
  return getToken(CSharpParser::WHILE, 0);
}

tree::TerminalNode* CSharpParser::WhileStatementContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

CSharpParser::ExpressionContext* CSharpParser::WhileStatementContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}

tree::TerminalNode* CSharpParser::WhileStatementContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}

CSharpParser::Embedded_statementContext* CSharpParser::WhileStatementContext::embedded_statement() {
  return getRuleContext<CSharpParser::Embedded_statementContext>(0);
}

CSharpParser::WhileStatementContext::WhileStatementContext(Simple_embedded_statementContext *ctx) { copyFrom(ctx); }

void CSharpParser::WhileStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWhileStatement(this);
}
void CSharpParser::WhileStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWhileStatement(this);
}
//----------------- DoStatementContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::DoStatementContext::DO() {
  return getToken(CSharpParser::DO, 0);
}

CSharpParser::Embedded_statementContext* CSharpParser::DoStatementContext::embedded_statement() {
  return getRuleContext<CSharpParser::Embedded_statementContext>(0);
}

tree::TerminalNode* CSharpParser::DoStatementContext::WHILE() {
  return getToken(CSharpParser::WHILE, 0);
}

tree::TerminalNode* CSharpParser::DoStatementContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

CSharpParser::ExpressionContext* CSharpParser::DoStatementContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}

tree::TerminalNode* CSharpParser::DoStatementContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}

tree::TerminalNode* CSharpParser::DoStatementContext::SEMICOLON() {
  return getToken(CSharpParser::SEMICOLON, 0);
}

CSharpParser::DoStatementContext::DoStatementContext(Simple_embedded_statementContext *ctx) { copyFrom(ctx); }

void CSharpParser::DoStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDoStatement(this);
}
void CSharpParser::DoStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDoStatement(this);
}
//----------------- ForeachStatementContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::ForeachStatementContext::FOREACH() {
  return getToken(CSharpParser::FOREACH, 0);
}

tree::TerminalNode* CSharpParser::ForeachStatementContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

CSharpParser::Local_variable_typeContext* CSharpParser::ForeachStatementContext::local_variable_type() {
  return getRuleContext<CSharpParser::Local_variable_typeContext>(0);
}

CSharpParser::IdentifierContext* CSharpParser::ForeachStatementContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

tree::TerminalNode* CSharpParser::ForeachStatementContext::IN() {
  return getToken(CSharpParser::IN, 0);
}

CSharpParser::ExpressionContext* CSharpParser::ForeachStatementContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}

tree::TerminalNode* CSharpParser::ForeachStatementContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}

CSharpParser::Embedded_statementContext* CSharpParser::ForeachStatementContext::embedded_statement() {
  return getRuleContext<CSharpParser::Embedded_statementContext>(0);
}

tree::TerminalNode* CSharpParser::ForeachStatementContext::AWAIT() {
  return getToken(CSharpParser::AWAIT, 0);
}

CSharpParser::ForeachStatementContext::ForeachStatementContext(Simple_embedded_statementContext *ctx) { copyFrom(ctx); }

void CSharpParser::ForeachStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterForeachStatement(this);
}
void CSharpParser::ForeachStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitForeachStatement(this);
}
//----------------- UncheckedStatementContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::UncheckedStatementContext::UNCHECKED() {
  return getToken(CSharpParser::UNCHECKED, 0);
}

CSharpParser::BlockContext* CSharpParser::UncheckedStatementContext::block() {
  return getRuleContext<CSharpParser::BlockContext>(0);
}

CSharpParser::UncheckedStatementContext::UncheckedStatementContext(Simple_embedded_statementContext *ctx) { copyFrom(ctx); }

void CSharpParser::UncheckedStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUncheckedStatement(this);
}
void CSharpParser::UncheckedStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUncheckedStatement(this);
}
//----------------- ExpressionStatementContext ------------------------------------------------------------------

CSharpParser::ExpressionContext* CSharpParser::ExpressionStatementContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}

tree::TerminalNode* CSharpParser::ExpressionStatementContext::SEMICOLON() {
  return getToken(CSharpParser::SEMICOLON, 0);
}

CSharpParser::ExpressionStatementContext::ExpressionStatementContext(Simple_embedded_statementContext *ctx) { copyFrom(ctx); }

void CSharpParser::ExpressionStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpressionStatement(this);
}
void CSharpParser::ExpressionStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpressionStatement(this);
}
//----------------- ContinueStatementContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::ContinueStatementContext::CONTINUE() {
  return getToken(CSharpParser::CONTINUE, 0);
}

tree::TerminalNode* CSharpParser::ContinueStatementContext::SEMICOLON() {
  return getToken(CSharpParser::SEMICOLON, 0);
}

CSharpParser::ContinueStatementContext::ContinueStatementContext(Simple_embedded_statementContext *ctx) { copyFrom(ctx); }

void CSharpParser::ContinueStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterContinueStatement(this);
}
void CSharpParser::ContinueStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitContinueStatement(this);
}
//----------------- UsingStatementContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::UsingStatementContext::USING() {
  return getToken(CSharpParser::USING, 0);
}

tree::TerminalNode* CSharpParser::UsingStatementContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

CSharpParser::Resource_acquisitionContext* CSharpParser::UsingStatementContext::resource_acquisition() {
  return getRuleContext<CSharpParser::Resource_acquisitionContext>(0);
}

tree::TerminalNode* CSharpParser::UsingStatementContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}

CSharpParser::Embedded_statementContext* CSharpParser::UsingStatementContext::embedded_statement() {
  return getRuleContext<CSharpParser::Embedded_statementContext>(0);
}

CSharpParser::UsingStatementContext::UsingStatementContext(Simple_embedded_statementContext *ctx) { copyFrom(ctx); }

void CSharpParser::UsingStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUsingStatement(this);
}
void CSharpParser::UsingStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUsingStatement(this);
}
//----------------- LockStatementContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::LockStatementContext::LOCK() {
  return getToken(CSharpParser::LOCK, 0);
}

tree::TerminalNode* CSharpParser::LockStatementContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

CSharpParser::ExpressionContext* CSharpParser::LockStatementContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}

tree::TerminalNode* CSharpParser::LockStatementContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}

CSharpParser::Embedded_statementContext* CSharpParser::LockStatementContext::embedded_statement() {
  return getRuleContext<CSharpParser::Embedded_statementContext>(0);
}

CSharpParser::LockStatementContext::LockStatementContext(Simple_embedded_statementContext *ctx) { copyFrom(ctx); }

void CSharpParser::LockStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLockStatement(this);
}
void CSharpParser::LockStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLockStatement(this);
}
//----------------- YieldStatementContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::YieldStatementContext::YIELD() {
  return getToken(CSharpParser::YIELD, 0);
}

tree::TerminalNode* CSharpParser::YieldStatementContext::SEMICOLON() {
  return getToken(CSharpParser::SEMICOLON, 0);
}

tree::TerminalNode* CSharpParser::YieldStatementContext::RETURN() {
  return getToken(CSharpParser::RETURN, 0);
}

CSharpParser::ExpressionContext* CSharpParser::YieldStatementContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}

tree::TerminalNode* CSharpParser::YieldStatementContext::BREAK() {
  return getToken(CSharpParser::BREAK, 0);
}

CSharpParser::YieldStatementContext::YieldStatementContext(Simple_embedded_statementContext *ctx) { copyFrom(ctx); }

void CSharpParser::YieldStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterYieldStatement(this);
}
void CSharpParser::YieldStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitYieldStatement(this);
}
CSharpParser::Simple_embedded_statementContext* CSharpParser::simple_embedded_statement() {
  Simple_embedded_statementContext *_localctx = _tracker.createInstance<Simple_embedded_statementContext>(_ctx, getState());
  enterRule(_localctx, 168, CSharpParser::RuleSimple_embedded_statement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1415);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 143, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<CSharpParser::TheEmptyStatementContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(1285);
      match(CSharpParser::SEMICOLON);
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<CSharpParser::ExpressionStatementContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(1286);
      expression();
      setState(1287);
      match(CSharpParser::SEMICOLON);
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<CSharpParser::IfStatementContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(1289);
      match(CSharpParser::IF);
      setState(1290);
      match(CSharpParser::OPEN_PARENS);
      setState(1291);
      expression();
      setState(1292);
      match(CSharpParser::CLOSE_PARENS);
      setState(1293);
      if_body();
      setState(1296);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 131, _ctx)) {
      case 1: {
        setState(1294);
        match(CSharpParser::ELSE);
        setState(1295);
        if_body();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<CSharpParser::SwitchStatementContext>(_localctx);
      enterOuterAlt(_localctx, 4);
      setState(1298);
      match(CSharpParser::SWITCH);
      setState(1299);
      match(CSharpParser::OPEN_PARENS);
      setState(1300);
      expression();
      setState(1301);
      match(CSharpParser::CLOSE_PARENS);
      setState(1302);
      match(CSharpParser::OPEN_BRACE);
      setState(1306);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == CSharpParser::CASE

      || _la == CSharpParser::DEFAULT) {
        setState(1303);
        switch_section();
        setState(1308);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1309);
      match(CSharpParser::CLOSE_BRACE);
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<CSharpParser::WhileStatementContext>(_localctx);
      enterOuterAlt(_localctx, 5);
      setState(1311);
      match(CSharpParser::WHILE);
      setState(1312);
      match(CSharpParser::OPEN_PARENS);
      setState(1313);
      expression();
      setState(1314);
      match(CSharpParser::CLOSE_PARENS);
      setState(1315);
      embedded_statement();
      break;
    }

    case 6: {
      _localctx = _tracker.createInstance<CSharpParser::DoStatementContext>(_localctx);
      enterOuterAlt(_localctx, 6);
      setState(1317);
      match(CSharpParser::DO);
      setState(1318);
      embedded_statement();
      setState(1319);
      match(CSharpParser::WHILE);
      setState(1320);
      match(CSharpParser::OPEN_PARENS);
      setState(1321);
      expression();
      setState(1322);
      match(CSharpParser::CLOSE_PARENS);
      setState(1323);
      match(CSharpParser::SEMICOLON);
      break;
    }

    case 7: {
      _localctx = _tracker.createInstance<CSharpParser::ForStatementContext>(_localctx);
      enterOuterAlt(_localctx, 7);
      setState(1325);
      match(CSharpParser::FOR);
      setState(1326);
      match(CSharpParser::OPEN_PARENS);
      setState(1328);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -5437194615990526976) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 2305516992371296445) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 129)) & 4398059153857) != 0)) {
        setState(1327);
        for_initializer();
      }
      setState(1330);
      match(CSharpParser::SEMICOLON);
      setState(1332);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -5437212208176571392) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 2305497201161996477) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 129)) & 4398059153857) != 0)) {
        setState(1331);
        expression();
      }
      setState(1334);
      match(CSharpParser::SEMICOLON);
      setState(1336);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -5437212208176571392) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 2305497201161996477) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 129)) & 4398059153857) != 0)) {
        setState(1335);
        for_iterator();
      }
      setState(1338);
      match(CSharpParser::CLOSE_PARENS);
      setState(1339);
      embedded_statement();
      break;
    }

    case 8: {
      _localctx = _tracker.createInstance<CSharpParser::ForeachStatementContext>(_localctx);
      enterOuterAlt(_localctx, 8);
      setState(1341);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CSharpParser::AWAIT) {
        setState(1340);
        match(CSharpParser::AWAIT);
      }
      setState(1343);
      match(CSharpParser::FOREACH);
      setState(1344);
      match(CSharpParser::OPEN_PARENS);
      setState(1345);
      local_variable_type();
      setState(1346);
      identifier();
      setState(1347);
      match(CSharpParser::IN);
      setState(1348);
      expression();
      setState(1349);
      match(CSharpParser::CLOSE_PARENS);
      setState(1350);
      embedded_statement();
      break;
    }

    case 9: {
      _localctx = _tracker.createInstance<CSharpParser::BreakStatementContext>(_localctx);
      enterOuterAlt(_localctx, 9);
      setState(1352);
      match(CSharpParser::BREAK);
      setState(1353);
      match(CSharpParser::SEMICOLON);
      break;
    }

    case 10: {
      _localctx = _tracker.createInstance<CSharpParser::ContinueStatementContext>(_localctx);
      enterOuterAlt(_localctx, 10);
      setState(1354);
      match(CSharpParser::CONTINUE);
      setState(1355);
      match(CSharpParser::SEMICOLON);
      break;
    }

    case 11: {
      _localctx = _tracker.createInstance<CSharpParser::GotoStatementContext>(_localctx);
      enterOuterAlt(_localctx, 11);
      setState(1356);
      match(CSharpParser::GOTO);
      setState(1361);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case CSharpParser::ADD:
        case CSharpParser::ALIAS:
        case CSharpParser::ARGLIST:
        case CSharpParser::ASCENDING:
        case CSharpParser::ASYNC:
        case CSharpParser::AWAIT:
        case CSharpParser::BY:
        case CSharpParser::DESCENDING:
        case CSharpParser::DYNAMIC:
        case CSharpParser::EQUALS:
        case CSharpParser::FROM:
        case CSharpParser::GET:
        case CSharpParser::GROUP:
        case CSharpParser::INTO:
        case CSharpParser::JOIN:
        case CSharpParser::LET:
        case CSharpParser::NAMEOF:
        case CSharpParser::ON:
        case CSharpParser::ORDERBY:
        case CSharpParser::PARTIAL:
        case CSharpParser::REMOVE:
        case CSharpParser::SELECT:
        case CSharpParser::SET:
        case CSharpParser::UNMANAGED:
        case CSharpParser::VAR:
        case CSharpParser::WHEN:
        case CSharpParser::WHERE:
        case CSharpParser::YIELD:
        case CSharpParser::IDENTIFIER: {
          setState(1357);
          identifier();
          break;
        }

        case CSharpParser::CASE: {
          setState(1358);
          match(CSharpParser::CASE);
          setState(1359);
          expression();
          break;
        }

        case CSharpParser::DEFAULT: {
          setState(1360);
          match(CSharpParser::DEFAULT);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(1363);
      match(CSharpParser::SEMICOLON);
      break;
    }

    case 12: {
      _localctx = _tracker.createInstance<CSharpParser::ReturnStatementContext>(_localctx);
      enterOuterAlt(_localctx, 12);
      setState(1364);
      match(CSharpParser::RETURN);
      setState(1366);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -5437212208176571392) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 2305497201161996477) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 129)) & 4398059153857) != 0)) {
        setState(1365);
        expression();
      }
      setState(1368);
      match(CSharpParser::SEMICOLON);
      break;
    }

    case 13: {
      _localctx = _tracker.createInstance<CSharpParser::ThrowStatementContext>(_localctx);
      enterOuterAlt(_localctx, 13);
      setState(1369);
      match(CSharpParser::THROW);
      setState(1371);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -5437212208176571392) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 2305497201161996477) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 129)) & 4398059153857) != 0)) {
        setState(1370);
        expression();
      }
      setState(1373);
      match(CSharpParser::SEMICOLON);
      break;
    }

    case 14: {
      _localctx = _tracker.createInstance<CSharpParser::TryStatementContext>(_localctx);
      enterOuterAlt(_localctx, 14);
      setState(1374);
      match(CSharpParser::TRY);
      setState(1375);
      block();
      setState(1381);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case CSharpParser::CATCH: {
          setState(1376);
          catch_clauses();
          setState(1378);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CSharpParser::FINALLY) {
            setState(1377);
            finally_clause();
          }
          break;
        }

        case CSharpParser::FINALLY: {
          setState(1380);
          finally_clause();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 15: {
      _localctx = _tracker.createInstance<CSharpParser::CheckedStatementContext>(_localctx);
      enterOuterAlt(_localctx, 15);
      setState(1383);
      match(CSharpParser::CHECKED);
      setState(1384);
      block();
      break;
    }

    case 16: {
      _localctx = _tracker.createInstance<CSharpParser::UncheckedStatementContext>(_localctx);
      enterOuterAlt(_localctx, 16);
      setState(1385);
      match(CSharpParser::UNCHECKED);
      setState(1386);
      block();
      break;
    }

    case 17: {
      _localctx = _tracker.createInstance<CSharpParser::LockStatementContext>(_localctx);
      enterOuterAlt(_localctx, 17);
      setState(1387);
      match(CSharpParser::LOCK);
      setState(1388);
      match(CSharpParser::OPEN_PARENS);
      setState(1389);
      expression();
      setState(1390);
      match(CSharpParser::CLOSE_PARENS);
      setState(1391);
      embedded_statement();
      break;
    }

    case 18: {
      _localctx = _tracker.createInstance<CSharpParser::UsingStatementContext>(_localctx);
      enterOuterAlt(_localctx, 18);
      setState(1393);
      match(CSharpParser::USING);
      setState(1394);
      match(CSharpParser::OPEN_PARENS);
      setState(1395);
      resource_acquisition();
      setState(1396);
      match(CSharpParser::CLOSE_PARENS);
      setState(1397);
      embedded_statement();
      break;
    }

    case 19: {
      _localctx = _tracker.createInstance<CSharpParser::YieldStatementContext>(_localctx);
      enterOuterAlt(_localctx, 19);
      setState(1399);
      match(CSharpParser::YIELD);
      setState(1403);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case CSharpParser::RETURN: {
          setState(1400);
          match(CSharpParser::RETURN);
          setState(1401);
          expression();
          break;
        }

        case CSharpParser::BREAK: {
          setState(1402);
          match(CSharpParser::BREAK);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(1405);
      match(CSharpParser::SEMICOLON);
      break;
    }

    case 20: {
      _localctx = _tracker.createInstance<CSharpParser::UnsafeStatementContext>(_localctx);
      enterOuterAlt(_localctx, 20);
      setState(1406);
      match(CSharpParser::UNSAFE);
      setState(1407);
      block();
      break;
    }

    case 21: {
      _localctx = _tracker.createInstance<CSharpParser::FixedStatementContext>(_localctx);
      enterOuterAlt(_localctx, 21);
      setState(1408);
      match(CSharpParser::FIXED);
      setState(1409);
      match(CSharpParser::OPEN_PARENS);
      setState(1410);
      pointer_type();
      setState(1411);
      fixed_pointer_declarators();
      setState(1412);
      match(CSharpParser::CLOSE_PARENS);
      setState(1413);
      embedded_statement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlockContext ------------------------------------------------------------------

CSharpParser::BlockContext::BlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::BlockContext::OPEN_BRACE() {
  return getToken(CSharpParser::OPEN_BRACE, 0);
}

tree::TerminalNode* CSharpParser::BlockContext::CLOSE_BRACE() {
  return getToken(CSharpParser::CLOSE_BRACE, 0);
}

CSharpParser::Statement_listContext* CSharpParser::BlockContext::statement_list() {
  return getRuleContext<CSharpParser::Statement_listContext>(0);
}


size_t CSharpParser::BlockContext::getRuleIndex() const {
  return CSharpParser::RuleBlock;
}

void CSharpParser::BlockContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBlock(this);
}

void CSharpParser::BlockContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBlock(this);
}

CSharpParser::BlockContext* CSharpParser::block() {
  BlockContext *_localctx = _tracker.createInstance<BlockContext>(_ctx, getState());
  enterRule(_localctx, 170, CSharpParser::RuleBlock);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1417);
    match(CSharpParser::OPEN_BRACE);
    setState(1419);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -819667982803280896) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 4611642037659175101) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 129)) & 4398059153889) != 0)) {
      setState(1418);
      statement_list();
    }
    setState(1421);
    match(CSharpParser::CLOSE_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Local_variable_declarationContext ------------------------------------------------------------------

CSharpParser::Local_variable_declarationContext::Local_variable_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Local_variable_typeContext* CSharpParser::Local_variable_declarationContext::local_variable_type() {
  return getRuleContext<CSharpParser::Local_variable_typeContext>(0);
}

std::vector<CSharpParser::Local_variable_declaratorContext *> CSharpParser::Local_variable_declarationContext::local_variable_declarator() {
  return getRuleContexts<CSharpParser::Local_variable_declaratorContext>();
}

CSharpParser::Local_variable_declaratorContext* CSharpParser::Local_variable_declarationContext::local_variable_declarator(size_t i) {
  return getRuleContext<CSharpParser::Local_variable_declaratorContext>(i);
}

tree::TerminalNode* CSharpParser::Local_variable_declarationContext::USING() {
  return getToken(CSharpParser::USING, 0);
}

tree::TerminalNode* CSharpParser::Local_variable_declarationContext::REF() {
  return getToken(CSharpParser::REF, 0);
}

tree::TerminalNode* CSharpParser::Local_variable_declarationContext::READONLY() {
  return getToken(CSharpParser::READONLY, 0);
}

std::vector<tree::TerminalNode *> CSharpParser::Local_variable_declarationContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::Local_variable_declarationContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}

tree::TerminalNode* CSharpParser::Local_variable_declarationContext::FIXED() {
  return getToken(CSharpParser::FIXED, 0);
}

CSharpParser::Pointer_typeContext* CSharpParser::Local_variable_declarationContext::pointer_type() {
  return getRuleContext<CSharpParser::Pointer_typeContext>(0);
}

CSharpParser::Fixed_pointer_declaratorsContext* CSharpParser::Local_variable_declarationContext::fixed_pointer_declarators() {
  return getRuleContext<CSharpParser::Fixed_pointer_declaratorsContext>(0);
}


size_t CSharpParser::Local_variable_declarationContext::getRuleIndex() const {
  return CSharpParser::RuleLocal_variable_declaration;
}

void CSharpParser::Local_variable_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLocal_variable_declaration(this);
}

void CSharpParser::Local_variable_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLocal_variable_declaration(this);
}

CSharpParser::Local_variable_declarationContext* CSharpParser::local_variable_declaration() {
  Local_variable_declarationContext *_localctx = _tracker.createInstance<Local_variable_declarationContext>(_ctx, getState());
  enterRule(_localctx, 172, CSharpParser::RuleLocal_variable_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1444);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::ADD:
      case CSharpParser::ALIAS:
      case CSharpParser::ARGLIST:
      case CSharpParser::ASCENDING:
      case CSharpParser::ASYNC:
      case CSharpParser::AWAIT:
      case CSharpParser::BOOL:
      case CSharpParser::BY:
      case CSharpParser::BYTE:
      case CSharpParser::CHAR:
      case CSharpParser::DECIMAL:
      case CSharpParser::DESCENDING:
      case CSharpParser::DOUBLE:
      case CSharpParser::DYNAMIC:
      case CSharpParser::EQUALS:
      case CSharpParser::FLOAT:
      case CSharpParser::FROM:
      case CSharpParser::GET:
      case CSharpParser::GROUP:
      case CSharpParser::INT:
      case CSharpParser::INTO:
      case CSharpParser::JOIN:
      case CSharpParser::LET:
      case CSharpParser::LONG:
      case CSharpParser::NAMEOF:
      case CSharpParser::OBJECT:
      case CSharpParser::ON:
      case CSharpParser::ORDERBY:
      case CSharpParser::PARTIAL:
      case CSharpParser::REF:
      case CSharpParser::REMOVE:
      case CSharpParser::SBYTE:
      case CSharpParser::SELECT:
      case CSharpParser::SET:
      case CSharpParser::SHORT:
      case CSharpParser::STRING:
      case CSharpParser::UINT:
      case CSharpParser::ULONG:
      case CSharpParser::UNMANAGED:
      case CSharpParser::USHORT:
      case CSharpParser::USING:
      case CSharpParser::VAR:
      case CSharpParser::VOID:
      case CSharpParser::WHEN:
      case CSharpParser::WHERE:
      case CSharpParser::YIELD:
      case CSharpParser::IDENTIFIER:
      case CSharpParser::OPEN_PARENS: {
        enterOuterAlt(_localctx, 1);
        setState(1427);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 145, _ctx)) {
        case 1: {
          setState(1423);
          match(CSharpParser::USING);
          break;
        }

        case 2: {
          setState(1424);
          match(CSharpParser::REF);
          break;
        }

        case 3: {
          setState(1425);
          match(CSharpParser::REF);
          setState(1426);
          match(CSharpParser::READONLY);
          break;
        }

        default:
          break;
        }
        setState(1429);
        local_variable_type();
        setState(1430);
        local_variable_declarator();
        setState(1437);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == CSharpParser::COMMA) {
          setState(1431);
          match(CSharpParser::COMMA);
          setState(1432);
          local_variable_declarator();
          setState(1433);

          if (!( this.IsLocalVariableDeclaration() )) throw FailedPredicateException(this, " this.IsLocalVariableDeclaration() ");
          setState(1439);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case CSharpParser::FIXED: {
        enterOuterAlt(_localctx, 2);
        setState(1440);
        match(CSharpParser::FIXED);
        setState(1441);
        pointer_type();
        setState(1442);
        fixed_pointer_declarators();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Local_variable_typeContext ------------------------------------------------------------------

CSharpParser::Local_variable_typeContext::Local_variable_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Local_variable_typeContext::VAR() {
  return getToken(CSharpParser::VAR, 0);
}

CSharpParser::Type_Context* CSharpParser::Local_variable_typeContext::type_() {
  return getRuleContext<CSharpParser::Type_Context>(0);
}


size_t CSharpParser::Local_variable_typeContext::getRuleIndex() const {
  return CSharpParser::RuleLocal_variable_type;
}

void CSharpParser::Local_variable_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLocal_variable_type(this);
}

void CSharpParser::Local_variable_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLocal_variable_type(this);
}

CSharpParser::Local_variable_typeContext* CSharpParser::local_variable_type() {
  Local_variable_typeContext *_localctx = _tracker.createInstance<Local_variable_typeContext>(_ctx, getState());
  enterRule(_localctx, 174, CSharpParser::RuleLocal_variable_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1448);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 148, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1446);
      match(CSharpParser::VAR);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1447);
      type_();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Local_variable_declaratorContext ------------------------------------------------------------------

CSharpParser::Local_variable_declaratorContext::Local_variable_declaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::IdentifierContext* CSharpParser::Local_variable_declaratorContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

tree::TerminalNode* CSharpParser::Local_variable_declaratorContext::ASSIGNMENT() {
  return getToken(CSharpParser::ASSIGNMENT, 0);
}

CSharpParser::Local_variable_initializerContext* CSharpParser::Local_variable_declaratorContext::local_variable_initializer() {
  return getRuleContext<CSharpParser::Local_variable_initializerContext>(0);
}

tree::TerminalNode* CSharpParser::Local_variable_declaratorContext::REF() {
  return getToken(CSharpParser::REF, 0);
}


size_t CSharpParser::Local_variable_declaratorContext::getRuleIndex() const {
  return CSharpParser::RuleLocal_variable_declarator;
}

void CSharpParser::Local_variable_declaratorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLocal_variable_declarator(this);
}

void CSharpParser::Local_variable_declaratorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLocal_variable_declarator(this);
}

CSharpParser::Local_variable_declaratorContext* CSharpParser::local_variable_declarator() {
  Local_variable_declaratorContext *_localctx = _tracker.createInstance<Local_variable_declaratorContext>(_ctx, getState());
  enterRule(_localctx, 176, CSharpParser::RuleLocal_variable_declarator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1450);
    identifier();
    setState(1456);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 150, _ctx)) {
    case 1: {
      setState(1451);
      match(CSharpParser::ASSIGNMENT);
      setState(1453);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 149, _ctx)) {
      case 1: {
        setState(1452);
        match(CSharpParser::REF);
        break;
      }

      default:
        break;
      }
      setState(1455);
      local_variable_initializer();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Local_variable_initializerContext ------------------------------------------------------------------

CSharpParser::Local_variable_initializerContext::Local_variable_initializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::ExpressionContext* CSharpParser::Local_variable_initializerContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}

CSharpParser::Array_initializerContext* CSharpParser::Local_variable_initializerContext::array_initializer() {
  return getRuleContext<CSharpParser::Array_initializerContext>(0);
}

CSharpParser::Stackalloc_initializerContext* CSharpParser::Local_variable_initializerContext::stackalloc_initializer() {
  return getRuleContext<CSharpParser::Stackalloc_initializerContext>(0);
}


size_t CSharpParser::Local_variable_initializerContext::getRuleIndex() const {
  return CSharpParser::RuleLocal_variable_initializer;
}

void CSharpParser::Local_variable_initializerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLocal_variable_initializer(this);
}

void CSharpParser::Local_variable_initializerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLocal_variable_initializer(this);
}

CSharpParser::Local_variable_initializerContext* CSharpParser::local_variable_initializer() {
  Local_variable_initializerContext *_localctx = _tracker.createInstance<Local_variable_initializerContext>(_ctx, getState());
  enterRule(_localctx, 178, CSharpParser::RuleLocal_variable_initializer);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1461);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::ADD:
      case CSharpParser::ALIAS:
      case CSharpParser::ARGLIST:
      case CSharpParser::ASCENDING:
      case CSharpParser::ASYNC:
      case CSharpParser::AWAIT:
      case CSharpParser::BASE:
      case CSharpParser::BOOL:
      case CSharpParser::BY:
      case CSharpParser::BYTE:
      case CSharpParser::CHAR:
      case CSharpParser::CHECKED:
      case CSharpParser::DECIMAL:
      case CSharpParser::DEFAULT:
      case CSharpParser::DELEGATE:
      case CSharpParser::DESCENDING:
      case CSharpParser::DOUBLE:
      case CSharpParser::DYNAMIC:
      case CSharpParser::EQUALS:
      case CSharpParser::FALSE:
      case CSharpParser::FLOAT:
      case CSharpParser::FROM:
      case CSharpParser::GET:
      case CSharpParser::GROUP:
      case CSharpParser::INT:
      case CSharpParser::INTO:
      case CSharpParser::JOIN:
      case CSharpParser::LET:
      case CSharpParser::LONG:
      case CSharpParser::NAMEOF:
      case CSharpParser::NEW:
      case CSharpParser::NULL_:
      case CSharpParser::OBJECT:
      case CSharpParser::ON:
      case CSharpParser::ORDERBY:
      case CSharpParser::PARTIAL:
      case CSharpParser::REF:
      case CSharpParser::REMOVE:
      case CSharpParser::SBYTE:
      case CSharpParser::SELECT:
      case CSharpParser::SET:
      case CSharpParser::SHORT:
      case CSharpParser::SIZEOF:
      case CSharpParser::STRING:
      case CSharpParser::THIS:
      case CSharpParser::TRUE:
      case CSharpParser::TYPEOF:
      case CSharpParser::UINT:
      case CSharpParser::ULONG:
      case CSharpParser::UNCHECKED:
      case CSharpParser::UNMANAGED:
      case CSharpParser::USHORT:
      case CSharpParser::VAR:
      case CSharpParser::WHEN:
      case CSharpParser::WHERE:
      case CSharpParser::YIELD:
      case CSharpParser::IDENTIFIER:
      case CSharpParser::LITERAL_ACCESS:
      case CSharpParser::INTEGER_LITERAL:
      case CSharpParser::HEX_INTEGER_LITERAL:
      case CSharpParser::BIN_INTEGER_LITERAL:
      case CSharpParser::REAL_LITERAL:
      case CSharpParser::CHARACTER_LITERAL:
      case CSharpParser::REGULAR_STRING:
      case CSharpParser::VERBATIUM_STRING:
      case CSharpParser::INTERPOLATED_REGULAR_STRING_START:
      case CSharpParser::INTERPOLATED_VERBATIUM_STRING_START:
      case CSharpParser::OPEN_PARENS:
      case CSharpParser::PLUS:
      case CSharpParser::MINUS:
      case CSharpParser::STAR:
      case CSharpParser::AMP:
      case CSharpParser::CARET:
      case CSharpParser::BANG:
      case CSharpParser::TILDE:
      case CSharpParser::OP_INC:
      case CSharpParser::OP_DEC:
      case CSharpParser::OP_RANGE: {
        enterOuterAlt(_localctx, 1);
        setState(1458);
        expression();
        break;
      }

      case CSharpParser::OPEN_BRACE: {
        enterOuterAlt(_localctx, 2);
        setState(1459);
        array_initializer();
        break;
      }

      case CSharpParser::STACKALLOC: {
        enterOuterAlt(_localctx, 3);
        setState(1460);
        stackalloc_initializer();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Local_constant_declarationContext ------------------------------------------------------------------

CSharpParser::Local_constant_declarationContext::Local_constant_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Local_constant_declarationContext::CONST() {
  return getToken(CSharpParser::CONST, 0);
}

CSharpParser::Type_Context* CSharpParser::Local_constant_declarationContext::type_() {
  return getRuleContext<CSharpParser::Type_Context>(0);
}

CSharpParser::Constant_declaratorsContext* CSharpParser::Local_constant_declarationContext::constant_declarators() {
  return getRuleContext<CSharpParser::Constant_declaratorsContext>(0);
}


size_t CSharpParser::Local_constant_declarationContext::getRuleIndex() const {
  return CSharpParser::RuleLocal_constant_declaration;
}

void CSharpParser::Local_constant_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLocal_constant_declaration(this);
}

void CSharpParser::Local_constant_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLocal_constant_declaration(this);
}

CSharpParser::Local_constant_declarationContext* CSharpParser::local_constant_declaration() {
  Local_constant_declarationContext *_localctx = _tracker.createInstance<Local_constant_declarationContext>(_ctx, getState());
  enterRule(_localctx, 180, CSharpParser::RuleLocal_constant_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1463);
    match(CSharpParser::CONST);
    setState(1464);
    type_();
    setState(1465);
    constant_declarators();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- If_bodyContext ------------------------------------------------------------------

CSharpParser::If_bodyContext::If_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::BlockContext* CSharpParser::If_bodyContext::block() {
  return getRuleContext<CSharpParser::BlockContext>(0);
}

CSharpParser::Simple_embedded_statementContext* CSharpParser::If_bodyContext::simple_embedded_statement() {
  return getRuleContext<CSharpParser::Simple_embedded_statementContext>(0);
}


size_t CSharpParser::If_bodyContext::getRuleIndex() const {
  return CSharpParser::RuleIf_body;
}

void CSharpParser::If_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIf_body(this);
}

void CSharpParser::If_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIf_body(this);
}

CSharpParser::If_bodyContext* CSharpParser::if_body() {
  If_bodyContext *_localctx = _tracker.createInstance<If_bodyContext>(_ctx, getState());
  enterRule(_localctx, 182, CSharpParser::RuleIf_body);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1469);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::OPEN_BRACE: {
        enterOuterAlt(_localctx, 1);
        setState(1467);
        block();
        break;
      }

      case CSharpParser::ADD:
      case CSharpParser::ALIAS:
      case CSharpParser::ARGLIST:
      case CSharpParser::ASCENDING:
      case CSharpParser::ASYNC:
      case CSharpParser::AWAIT:
      case CSharpParser::BASE:
      case CSharpParser::BOOL:
      case CSharpParser::BREAK:
      case CSharpParser::BY:
      case CSharpParser::BYTE:
      case CSharpParser::CHAR:
      case CSharpParser::CHECKED:
      case CSharpParser::CONTINUE:
      case CSharpParser::DECIMAL:
      case CSharpParser::DEFAULT:
      case CSharpParser::DELEGATE:
      case CSharpParser::DESCENDING:
      case CSharpParser::DO:
      case CSharpParser::DOUBLE:
      case CSharpParser::DYNAMIC:
      case CSharpParser::EQUALS:
      case CSharpParser::FALSE:
      case CSharpParser::FIXED:
      case CSharpParser::FLOAT:
      case CSharpParser::FOR:
      case CSharpParser::FOREACH:
      case CSharpParser::FROM:
      case CSharpParser::GET:
      case CSharpParser::GOTO:
      case CSharpParser::GROUP:
      case CSharpParser::IF:
      case CSharpParser::INT:
      case CSharpParser::INTO:
      case CSharpParser::JOIN:
      case CSharpParser::LET:
      case CSharpParser::LOCK:
      case CSharpParser::LONG:
      case CSharpParser::NAMEOF:
      case CSharpParser::NEW:
      case CSharpParser::NULL_:
      case CSharpParser::OBJECT:
      case CSharpParser::ON:
      case CSharpParser::ORDERBY:
      case CSharpParser::PARTIAL:
      case CSharpParser::REF:
      case CSharpParser::REMOVE:
      case CSharpParser::RETURN:
      case CSharpParser::SBYTE:
      case CSharpParser::SELECT:
      case CSharpParser::SET:
      case CSharpParser::SHORT:
      case CSharpParser::SIZEOF:
      case CSharpParser::STRING:
      case CSharpParser::SWITCH:
      case CSharpParser::THIS:
      case CSharpParser::THROW:
      case CSharpParser::TRUE:
      case CSharpParser::TRY:
      case CSharpParser::TYPEOF:
      case CSharpParser::UINT:
      case CSharpParser::ULONG:
      case CSharpParser::UNCHECKED:
      case CSharpParser::UNMANAGED:
      case CSharpParser::UNSAFE:
      case CSharpParser::USHORT:
      case CSharpParser::USING:
      case CSharpParser::VAR:
      case CSharpParser::WHEN:
      case CSharpParser::WHERE:
      case CSharpParser::WHILE:
      case CSharpParser::YIELD:
      case CSharpParser::IDENTIFIER:
      case CSharpParser::LITERAL_ACCESS:
      case CSharpParser::INTEGER_LITERAL:
      case CSharpParser::HEX_INTEGER_LITERAL:
      case CSharpParser::BIN_INTEGER_LITERAL:
      case CSharpParser::REAL_LITERAL:
      case CSharpParser::CHARACTER_LITERAL:
      case CSharpParser::REGULAR_STRING:
      case CSharpParser::VERBATIUM_STRING:
      case CSharpParser::INTERPOLATED_REGULAR_STRING_START:
      case CSharpParser::INTERPOLATED_VERBATIUM_STRING_START:
      case CSharpParser::OPEN_PARENS:
      case CSharpParser::SEMICOLON:
      case CSharpParser::PLUS:
      case CSharpParser::MINUS:
      case CSharpParser::STAR:
      case CSharpParser::AMP:
      case CSharpParser::CARET:
      case CSharpParser::BANG:
      case CSharpParser::TILDE:
      case CSharpParser::OP_INC:
      case CSharpParser::OP_DEC:
      case CSharpParser::OP_RANGE: {
        enterOuterAlt(_localctx, 2);
        setState(1468);
        simple_embedded_statement();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Switch_sectionContext ------------------------------------------------------------------

CSharpParser::Switch_sectionContext::Switch_sectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Statement_listContext* CSharpParser::Switch_sectionContext::statement_list() {
  return getRuleContext<CSharpParser::Statement_listContext>(0);
}

std::vector<CSharpParser::Switch_labelContext *> CSharpParser::Switch_sectionContext::switch_label() {
  return getRuleContexts<CSharpParser::Switch_labelContext>();
}

CSharpParser::Switch_labelContext* CSharpParser::Switch_sectionContext::switch_label(size_t i) {
  return getRuleContext<CSharpParser::Switch_labelContext>(i);
}


size_t CSharpParser::Switch_sectionContext::getRuleIndex() const {
  return CSharpParser::RuleSwitch_section;
}

void CSharpParser::Switch_sectionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSwitch_section(this);
}

void CSharpParser::Switch_sectionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSwitch_section(this);
}

CSharpParser::Switch_sectionContext* CSharpParser::switch_section() {
  Switch_sectionContext *_localctx = _tracker.createInstance<Switch_sectionContext>(_ctx, getState());
  enterRule(_localctx, 184, CSharpParser::RuleSwitch_section);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1472); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1471);
              switch_label();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1474); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 153, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(1476);
    statement_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Switch_labelContext ------------------------------------------------------------------

CSharpParser::Switch_labelContext::Switch_labelContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Switch_labelContext::CASE() {
  return getToken(CSharpParser::CASE, 0);
}

CSharpParser::ExpressionContext* CSharpParser::Switch_labelContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}

tree::TerminalNode* CSharpParser::Switch_labelContext::COLON() {
  return getToken(CSharpParser::COLON, 0);
}

CSharpParser::Case_guardContext* CSharpParser::Switch_labelContext::case_guard() {
  return getRuleContext<CSharpParser::Case_guardContext>(0);
}

tree::TerminalNode* CSharpParser::Switch_labelContext::DEFAULT() {
  return getToken(CSharpParser::DEFAULT, 0);
}


size_t CSharpParser::Switch_labelContext::getRuleIndex() const {
  return CSharpParser::RuleSwitch_label;
}

void CSharpParser::Switch_labelContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSwitch_label(this);
}

void CSharpParser::Switch_labelContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSwitch_label(this);
}

CSharpParser::Switch_labelContext* CSharpParser::switch_label() {
  Switch_labelContext *_localctx = _tracker.createInstance<Switch_labelContext>(_ctx, getState());
  enterRule(_localctx, 186, CSharpParser::RuleSwitch_label);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1487);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::CASE: {
        enterOuterAlt(_localctx, 1);
        setState(1478);
        match(CSharpParser::CASE);
        setState(1479);
        expression();
        setState(1481);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CSharpParser::WHEN) {
          setState(1480);
          case_guard();
        }
        setState(1483);
        match(CSharpParser::COLON);
        break;
      }

      case CSharpParser::DEFAULT: {
        enterOuterAlt(_localctx, 2);
        setState(1485);
        match(CSharpParser::DEFAULT);
        setState(1486);
        match(CSharpParser::COLON);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Case_guardContext ------------------------------------------------------------------

CSharpParser::Case_guardContext::Case_guardContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Case_guardContext::WHEN() {
  return getToken(CSharpParser::WHEN, 0);
}

CSharpParser::ExpressionContext* CSharpParser::Case_guardContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}


size_t CSharpParser::Case_guardContext::getRuleIndex() const {
  return CSharpParser::RuleCase_guard;
}

void CSharpParser::Case_guardContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCase_guard(this);
}

void CSharpParser::Case_guardContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCase_guard(this);
}

CSharpParser::Case_guardContext* CSharpParser::case_guard() {
  Case_guardContext *_localctx = _tracker.createInstance<Case_guardContext>(_ctx, getState());
  enterRule(_localctx, 188, CSharpParser::RuleCase_guard);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1489);
    match(CSharpParser::WHEN);
    setState(1490);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Statement_listContext ------------------------------------------------------------------

CSharpParser::Statement_listContext::Statement_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::StatementContext *> CSharpParser::Statement_listContext::statement() {
  return getRuleContexts<CSharpParser::StatementContext>();
}

CSharpParser::StatementContext* CSharpParser::Statement_listContext::statement(size_t i) {
  return getRuleContext<CSharpParser::StatementContext>(i);
}


size_t CSharpParser::Statement_listContext::getRuleIndex() const {
  return CSharpParser::RuleStatement_list;
}

void CSharpParser::Statement_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatement_list(this);
}

void CSharpParser::Statement_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatement_list(this);
}

CSharpParser::Statement_listContext* CSharpParser::statement_list() {
  Statement_listContext *_localctx = _tracker.createInstance<Statement_listContext>(_ctx, getState());
  enterRule(_localctx, 190, CSharpParser::RuleStatement_list);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1493); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1492);
              statement();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1495); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 156, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- For_initializerContext ------------------------------------------------------------------

CSharpParser::For_initializerContext::For_initializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Local_variable_declarationContext* CSharpParser::For_initializerContext::local_variable_declaration() {
  return getRuleContext<CSharpParser::Local_variable_declarationContext>(0);
}

std::vector<CSharpParser::ExpressionContext *> CSharpParser::For_initializerContext::expression() {
  return getRuleContexts<CSharpParser::ExpressionContext>();
}

CSharpParser::ExpressionContext* CSharpParser::For_initializerContext::expression(size_t i) {
  return getRuleContext<CSharpParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::For_initializerContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::For_initializerContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}


size_t CSharpParser::For_initializerContext::getRuleIndex() const {
  return CSharpParser::RuleFor_initializer;
}

void CSharpParser::For_initializerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFor_initializer(this);
}

void CSharpParser::For_initializerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFor_initializer(this);
}

CSharpParser::For_initializerContext* CSharpParser::for_initializer() {
  For_initializerContext *_localctx = _tracker.createInstance<For_initializerContext>(_ctx, getState());
  enterRule(_localctx, 192, CSharpParser::RuleFor_initializer);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1506);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 158, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1497);
      local_variable_declaration();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1498);
      expression();
      setState(1503);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == CSharpParser::COMMA) {
        setState(1499);
        match(CSharpParser::COMMA);
        setState(1500);
        expression();
        setState(1505);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- For_iteratorContext ------------------------------------------------------------------

CSharpParser::For_iteratorContext::For_iteratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::ExpressionContext *> CSharpParser::For_iteratorContext::expression() {
  return getRuleContexts<CSharpParser::ExpressionContext>();
}

CSharpParser::ExpressionContext* CSharpParser::For_iteratorContext::expression(size_t i) {
  return getRuleContext<CSharpParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::For_iteratorContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::For_iteratorContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}


size_t CSharpParser::For_iteratorContext::getRuleIndex() const {
  return CSharpParser::RuleFor_iterator;
}

void CSharpParser::For_iteratorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFor_iterator(this);
}

void CSharpParser::For_iteratorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFor_iterator(this);
}

CSharpParser::For_iteratorContext* CSharpParser::for_iterator() {
  For_iteratorContext *_localctx = _tracker.createInstance<For_iteratorContext>(_ctx, getState());
  enterRule(_localctx, 194, CSharpParser::RuleFor_iterator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1508);
    expression();
    setState(1513);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CSharpParser::COMMA) {
      setState(1509);
      match(CSharpParser::COMMA);
      setState(1510);
      expression();
      setState(1515);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Catch_clausesContext ------------------------------------------------------------------

CSharpParser::Catch_clausesContext::Catch_clausesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::Specific_catch_clauseContext *> CSharpParser::Catch_clausesContext::specific_catch_clause() {
  return getRuleContexts<CSharpParser::Specific_catch_clauseContext>();
}

CSharpParser::Specific_catch_clauseContext* CSharpParser::Catch_clausesContext::specific_catch_clause(size_t i) {
  return getRuleContext<CSharpParser::Specific_catch_clauseContext>(i);
}

CSharpParser::General_catch_clauseContext* CSharpParser::Catch_clausesContext::general_catch_clause() {
  return getRuleContext<CSharpParser::General_catch_clauseContext>(0);
}


size_t CSharpParser::Catch_clausesContext::getRuleIndex() const {
  return CSharpParser::RuleCatch_clauses;
}

void CSharpParser::Catch_clausesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCatch_clauses(this);
}

void CSharpParser::Catch_clausesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCatch_clauses(this);
}

CSharpParser::Catch_clausesContext* CSharpParser::catch_clauses() {
  Catch_clausesContext *_localctx = _tracker.createInstance<Catch_clausesContext>(_ctx, getState());
  enterRule(_localctx, 196, CSharpParser::RuleCatch_clauses);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1527);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 162, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1516);
      specific_catch_clause();
      setState(1520);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 160, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1517);
          specific_catch_clause(); 
        }
        setState(1522);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 160, _ctx);
      }
      setState(1524);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CSharpParser::CATCH) {
        setState(1523);
        general_catch_clause();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1526);
      general_catch_clause();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Specific_catch_clauseContext ------------------------------------------------------------------

CSharpParser::Specific_catch_clauseContext::Specific_catch_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Specific_catch_clauseContext::CATCH() {
  return getToken(CSharpParser::CATCH, 0);
}

tree::TerminalNode* CSharpParser::Specific_catch_clauseContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

CSharpParser::Class_typeContext* CSharpParser::Specific_catch_clauseContext::class_type() {
  return getRuleContext<CSharpParser::Class_typeContext>(0);
}

tree::TerminalNode* CSharpParser::Specific_catch_clauseContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}

CSharpParser::BlockContext* CSharpParser::Specific_catch_clauseContext::block() {
  return getRuleContext<CSharpParser::BlockContext>(0);
}

CSharpParser::IdentifierContext* CSharpParser::Specific_catch_clauseContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

CSharpParser::Exception_filterContext* CSharpParser::Specific_catch_clauseContext::exception_filter() {
  return getRuleContext<CSharpParser::Exception_filterContext>(0);
}


size_t CSharpParser::Specific_catch_clauseContext::getRuleIndex() const {
  return CSharpParser::RuleSpecific_catch_clause;
}

void CSharpParser::Specific_catch_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSpecific_catch_clause(this);
}

void CSharpParser::Specific_catch_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSpecific_catch_clause(this);
}

CSharpParser::Specific_catch_clauseContext* CSharpParser::specific_catch_clause() {
  Specific_catch_clauseContext *_localctx = _tracker.createInstance<Specific_catch_clauseContext>(_ctx, getState());
  enterRule(_localctx, 198, CSharpParser::RuleSpecific_catch_clause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1529);
    match(CSharpParser::CATCH);
    setState(1530);
    match(CSharpParser::OPEN_PARENS);
    setState(1531);
    class_type();
    setState(1533);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3750091428249852928) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 1904629023639713) != 0)) {
      setState(1532);
      identifier();
    }
    setState(1535);
    match(CSharpParser::CLOSE_PARENS);
    setState(1537);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::WHEN) {
      setState(1536);
      exception_filter();
    }
    setState(1539);
    block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- General_catch_clauseContext ------------------------------------------------------------------

CSharpParser::General_catch_clauseContext::General_catch_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::General_catch_clauseContext::CATCH() {
  return getToken(CSharpParser::CATCH, 0);
}

CSharpParser::BlockContext* CSharpParser::General_catch_clauseContext::block() {
  return getRuleContext<CSharpParser::BlockContext>(0);
}

CSharpParser::Exception_filterContext* CSharpParser::General_catch_clauseContext::exception_filter() {
  return getRuleContext<CSharpParser::Exception_filterContext>(0);
}


size_t CSharpParser::General_catch_clauseContext::getRuleIndex() const {
  return CSharpParser::RuleGeneral_catch_clause;
}

void CSharpParser::General_catch_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGeneral_catch_clause(this);
}

void CSharpParser::General_catch_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGeneral_catch_clause(this);
}

CSharpParser::General_catch_clauseContext* CSharpParser::general_catch_clause() {
  General_catch_clauseContext *_localctx = _tracker.createInstance<General_catch_clauseContext>(_ctx, getState());
  enterRule(_localctx, 200, CSharpParser::RuleGeneral_catch_clause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1541);
    match(CSharpParser::CATCH);
    setState(1543);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::WHEN) {
      setState(1542);
      exception_filter();
    }
    setState(1545);
    block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Exception_filterContext ------------------------------------------------------------------

CSharpParser::Exception_filterContext::Exception_filterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Exception_filterContext::WHEN() {
  return getToken(CSharpParser::WHEN, 0);
}

tree::TerminalNode* CSharpParser::Exception_filterContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

CSharpParser::ExpressionContext* CSharpParser::Exception_filterContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}

tree::TerminalNode* CSharpParser::Exception_filterContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}


size_t CSharpParser::Exception_filterContext::getRuleIndex() const {
  return CSharpParser::RuleException_filter;
}

void CSharpParser::Exception_filterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterException_filter(this);
}

void CSharpParser::Exception_filterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitException_filter(this);
}

CSharpParser::Exception_filterContext* CSharpParser::exception_filter() {
  Exception_filterContext *_localctx = _tracker.createInstance<Exception_filterContext>(_ctx, getState());
  enterRule(_localctx, 202, CSharpParser::RuleException_filter);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1547);
    match(CSharpParser::WHEN);
    setState(1548);
    match(CSharpParser::OPEN_PARENS);
    setState(1549);
    expression();
    setState(1550);
    match(CSharpParser::CLOSE_PARENS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Finally_clauseContext ------------------------------------------------------------------

CSharpParser::Finally_clauseContext::Finally_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Finally_clauseContext::FINALLY() {
  return getToken(CSharpParser::FINALLY, 0);
}

CSharpParser::BlockContext* CSharpParser::Finally_clauseContext::block() {
  return getRuleContext<CSharpParser::BlockContext>(0);
}


size_t CSharpParser::Finally_clauseContext::getRuleIndex() const {
  return CSharpParser::RuleFinally_clause;
}

void CSharpParser::Finally_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFinally_clause(this);
}

void CSharpParser::Finally_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFinally_clause(this);
}

CSharpParser::Finally_clauseContext* CSharpParser::finally_clause() {
  Finally_clauseContext *_localctx = _tracker.createInstance<Finally_clauseContext>(_ctx, getState());
  enterRule(_localctx, 204, CSharpParser::RuleFinally_clause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1552);
    match(CSharpParser::FINALLY);
    setState(1553);
    block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Resource_acquisitionContext ------------------------------------------------------------------

CSharpParser::Resource_acquisitionContext::Resource_acquisitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Local_variable_declarationContext* CSharpParser::Resource_acquisitionContext::local_variable_declaration() {
  return getRuleContext<CSharpParser::Local_variable_declarationContext>(0);
}

CSharpParser::ExpressionContext* CSharpParser::Resource_acquisitionContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}


size_t CSharpParser::Resource_acquisitionContext::getRuleIndex() const {
  return CSharpParser::RuleResource_acquisition;
}

void CSharpParser::Resource_acquisitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterResource_acquisition(this);
}

void CSharpParser::Resource_acquisitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitResource_acquisition(this);
}

CSharpParser::Resource_acquisitionContext* CSharpParser::resource_acquisition() {
  Resource_acquisitionContext *_localctx = _tracker.createInstance<Resource_acquisitionContext>(_ctx, getState());
  enterRule(_localctx, 206, CSharpParser::RuleResource_acquisition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1557);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 166, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1555);
      local_variable_declaration();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1556);
      expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Namespace_declarationContext ------------------------------------------------------------------

CSharpParser::Namespace_declarationContext::Namespace_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Namespace_declarationContext::NAMESPACE() {
  return getToken(CSharpParser::NAMESPACE, 0);
}

CSharpParser::Namespace_bodyContext* CSharpParser::Namespace_declarationContext::namespace_body() {
  return getRuleContext<CSharpParser::Namespace_bodyContext>(0);
}

CSharpParser::Qualified_identifierContext* CSharpParser::Namespace_declarationContext::qualified_identifier() {
  return getRuleContext<CSharpParser::Qualified_identifierContext>(0);
}

tree::TerminalNode* CSharpParser::Namespace_declarationContext::SEMICOLON() {
  return getToken(CSharpParser::SEMICOLON, 0);
}


size_t CSharpParser::Namespace_declarationContext::getRuleIndex() const {
  return CSharpParser::RuleNamespace_declaration;
}

void CSharpParser::Namespace_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamespace_declaration(this);
}

void CSharpParser::Namespace_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamespace_declaration(this);
}

CSharpParser::Namespace_declarationContext* CSharpParser::namespace_declaration() {
  Namespace_declarationContext *_localctx = _tracker.createInstance<Namespace_declarationContext>(_ctx, getState());
  enterRule(_localctx, 208, CSharpParser::RuleNamespace_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1559);
    match(CSharpParser::NAMESPACE);
    setState(1560);
    antlrcpp::downCast<Namespace_declarationContext *>(_localctx)->qi = qualified_identifier();
    setState(1561);
    namespace_body();
    setState(1563);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::SEMICOLON) {
      setState(1562);
      match(CSharpParser::SEMICOLON);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Qualified_identifierContext ------------------------------------------------------------------

CSharpParser::Qualified_identifierContext::Qualified_identifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::IdentifierContext *> CSharpParser::Qualified_identifierContext::identifier() {
  return getRuleContexts<CSharpParser::IdentifierContext>();
}

CSharpParser::IdentifierContext* CSharpParser::Qualified_identifierContext::identifier(size_t i) {
  return getRuleContext<CSharpParser::IdentifierContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::Qualified_identifierContext::DOT() {
  return getTokens(CSharpParser::DOT);
}

tree::TerminalNode* CSharpParser::Qualified_identifierContext::DOT(size_t i) {
  return getToken(CSharpParser::DOT, i);
}


size_t CSharpParser::Qualified_identifierContext::getRuleIndex() const {
  return CSharpParser::RuleQualified_identifier;
}

void CSharpParser::Qualified_identifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQualified_identifier(this);
}

void CSharpParser::Qualified_identifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQualified_identifier(this);
}

CSharpParser::Qualified_identifierContext* CSharpParser::qualified_identifier() {
  Qualified_identifierContext *_localctx = _tracker.createInstance<Qualified_identifierContext>(_ctx, getState());
  enterRule(_localctx, 210, CSharpParser::RuleQualified_identifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1565);
    identifier();
    setState(1570);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CSharpParser::DOT) {
      setState(1566);
      match(CSharpParser::DOT);
      setState(1567);
      identifier();
      setState(1572);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Namespace_bodyContext ------------------------------------------------------------------

CSharpParser::Namespace_bodyContext::Namespace_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Namespace_bodyContext::OPEN_BRACE() {
  return getToken(CSharpParser::OPEN_BRACE, 0);
}

tree::TerminalNode* CSharpParser::Namespace_bodyContext::CLOSE_BRACE() {
  return getToken(CSharpParser::CLOSE_BRACE, 0);
}

CSharpParser::Extern_alias_directivesContext* CSharpParser::Namespace_bodyContext::extern_alias_directives() {
  return getRuleContext<CSharpParser::Extern_alias_directivesContext>(0);
}

CSharpParser::Using_directivesContext* CSharpParser::Namespace_bodyContext::using_directives() {
  return getRuleContext<CSharpParser::Using_directivesContext>(0);
}

CSharpParser::Namespace_member_declarationsContext* CSharpParser::Namespace_bodyContext::namespace_member_declarations() {
  return getRuleContext<CSharpParser::Namespace_member_declarationsContext>(0);
}


size_t CSharpParser::Namespace_bodyContext::getRuleIndex() const {
  return CSharpParser::RuleNamespace_body;
}

void CSharpParser::Namespace_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamespace_body(this);
}

void CSharpParser::Namespace_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamespace_body(this);
}

CSharpParser::Namespace_bodyContext* CSharpParser::namespace_body() {
  Namespace_bodyContext *_localctx = _tracker.createInstance<Namespace_bodyContext>(_ctx, getState());
  enterRule(_localctx, 212, CSharpParser::RuleNamespace_body);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1573);
    match(CSharpParser::OPEN_BRACE);
    setState(1575);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 169, _ctx)) {
    case 1: {
      setState(1574);
      extern_alias_directives();
      break;
    }

    default:
      break;
    }
    setState(1578);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::USING) {
      setState(1577);
      using_directives();
    }
    setState(1581);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 216175120790618624) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 4611708283706211587) != 0)) {
      setState(1580);
      namespace_member_declarations();
    }
    setState(1583);
    match(CSharpParser::CLOSE_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Extern_alias_directivesContext ------------------------------------------------------------------

CSharpParser::Extern_alias_directivesContext::Extern_alias_directivesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::Extern_alias_directiveContext *> CSharpParser::Extern_alias_directivesContext::extern_alias_directive() {
  return getRuleContexts<CSharpParser::Extern_alias_directiveContext>();
}

CSharpParser::Extern_alias_directiveContext* CSharpParser::Extern_alias_directivesContext::extern_alias_directive(size_t i) {
  return getRuleContext<CSharpParser::Extern_alias_directiveContext>(i);
}


size_t CSharpParser::Extern_alias_directivesContext::getRuleIndex() const {
  return CSharpParser::RuleExtern_alias_directives;
}

void CSharpParser::Extern_alias_directivesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExtern_alias_directives(this);
}

void CSharpParser::Extern_alias_directivesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExtern_alias_directives(this);
}

CSharpParser::Extern_alias_directivesContext* CSharpParser::extern_alias_directives() {
  Extern_alias_directivesContext *_localctx = _tracker.createInstance<Extern_alias_directivesContext>(_ctx, getState());
  enterRule(_localctx, 214, CSharpParser::RuleExtern_alias_directives);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1586); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1585);
              extern_alias_directive();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1588); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 172, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Extern_alias_directiveContext ------------------------------------------------------------------

CSharpParser::Extern_alias_directiveContext::Extern_alias_directiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Extern_alias_directiveContext::EXTERN() {
  return getToken(CSharpParser::EXTERN, 0);
}

tree::TerminalNode* CSharpParser::Extern_alias_directiveContext::ALIAS() {
  return getToken(CSharpParser::ALIAS, 0);
}

CSharpParser::IdentifierContext* CSharpParser::Extern_alias_directiveContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

tree::TerminalNode* CSharpParser::Extern_alias_directiveContext::SEMICOLON() {
  return getToken(CSharpParser::SEMICOLON, 0);
}


size_t CSharpParser::Extern_alias_directiveContext::getRuleIndex() const {
  return CSharpParser::RuleExtern_alias_directive;
}

void CSharpParser::Extern_alias_directiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExtern_alias_directive(this);
}

void CSharpParser::Extern_alias_directiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExtern_alias_directive(this);
}

CSharpParser::Extern_alias_directiveContext* CSharpParser::extern_alias_directive() {
  Extern_alias_directiveContext *_localctx = _tracker.createInstance<Extern_alias_directiveContext>(_ctx, getState());
  enterRule(_localctx, 216, CSharpParser::RuleExtern_alias_directive);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1590);
    match(CSharpParser::EXTERN);
    setState(1591);
    match(CSharpParser::ALIAS);
    setState(1592);
    identifier();
    setState(1593);
    match(CSharpParser::SEMICOLON);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Using_directivesContext ------------------------------------------------------------------

CSharpParser::Using_directivesContext::Using_directivesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::Using_directiveContext *> CSharpParser::Using_directivesContext::using_directive() {
  return getRuleContexts<CSharpParser::Using_directiveContext>();
}

CSharpParser::Using_directiveContext* CSharpParser::Using_directivesContext::using_directive(size_t i) {
  return getRuleContext<CSharpParser::Using_directiveContext>(i);
}


size_t CSharpParser::Using_directivesContext::getRuleIndex() const {
  return CSharpParser::RuleUsing_directives;
}

void CSharpParser::Using_directivesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUsing_directives(this);
}

void CSharpParser::Using_directivesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUsing_directives(this);
}

CSharpParser::Using_directivesContext* CSharpParser::using_directives() {
  Using_directivesContext *_localctx = _tracker.createInstance<Using_directivesContext>(_ctx, getState());
  enterRule(_localctx, 218, CSharpParser::RuleUsing_directives);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1596); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1595);
      using_directive();
      setState(1598); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == CSharpParser::USING);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Using_directiveContext ------------------------------------------------------------------

CSharpParser::Using_directiveContext::Using_directiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CSharpParser::Using_directiveContext::getRuleIndex() const {
  return CSharpParser::RuleUsing_directive;
}

void CSharpParser::Using_directiveContext::copyFrom(Using_directiveContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- UsingAliasDirectiveContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::UsingAliasDirectiveContext::USING() {
  return getToken(CSharpParser::USING, 0);
}

CSharpParser::IdentifierContext* CSharpParser::UsingAliasDirectiveContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

tree::TerminalNode* CSharpParser::UsingAliasDirectiveContext::ASSIGNMENT() {
  return getToken(CSharpParser::ASSIGNMENT, 0);
}

CSharpParser::Namespace_or_type_nameContext* CSharpParser::UsingAliasDirectiveContext::namespace_or_type_name() {
  return getRuleContext<CSharpParser::Namespace_or_type_nameContext>(0);
}

tree::TerminalNode* CSharpParser::UsingAliasDirectiveContext::SEMICOLON() {
  return getToken(CSharpParser::SEMICOLON, 0);
}

CSharpParser::UsingAliasDirectiveContext::UsingAliasDirectiveContext(Using_directiveContext *ctx) { copyFrom(ctx); }

void CSharpParser::UsingAliasDirectiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUsingAliasDirective(this);
}
void CSharpParser::UsingAliasDirectiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUsingAliasDirective(this);
}
//----------------- UsingNamespaceDirectiveContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::UsingNamespaceDirectiveContext::USING() {
  return getToken(CSharpParser::USING, 0);
}

CSharpParser::Namespace_or_type_nameContext* CSharpParser::UsingNamespaceDirectiveContext::namespace_or_type_name() {
  return getRuleContext<CSharpParser::Namespace_or_type_nameContext>(0);
}

tree::TerminalNode* CSharpParser::UsingNamespaceDirectiveContext::SEMICOLON() {
  return getToken(CSharpParser::SEMICOLON, 0);
}

CSharpParser::UsingNamespaceDirectiveContext::UsingNamespaceDirectiveContext(Using_directiveContext *ctx) { copyFrom(ctx); }

void CSharpParser::UsingNamespaceDirectiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUsingNamespaceDirective(this);
}
void CSharpParser::UsingNamespaceDirectiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUsingNamespaceDirective(this);
}
//----------------- UsingStaticDirectiveContext ------------------------------------------------------------------

tree::TerminalNode* CSharpParser::UsingStaticDirectiveContext::USING() {
  return getToken(CSharpParser::USING, 0);
}

tree::TerminalNode* CSharpParser::UsingStaticDirectiveContext::STATIC() {
  return getToken(CSharpParser::STATIC, 0);
}

CSharpParser::Namespace_or_type_nameContext* CSharpParser::UsingStaticDirectiveContext::namespace_or_type_name() {
  return getRuleContext<CSharpParser::Namespace_or_type_nameContext>(0);
}

tree::TerminalNode* CSharpParser::UsingStaticDirectiveContext::SEMICOLON() {
  return getToken(CSharpParser::SEMICOLON, 0);
}

CSharpParser::UsingStaticDirectiveContext::UsingStaticDirectiveContext(Using_directiveContext *ctx) { copyFrom(ctx); }

void CSharpParser::UsingStaticDirectiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUsingStaticDirective(this);
}
void CSharpParser::UsingStaticDirectiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUsingStaticDirective(this);
}
CSharpParser::Using_directiveContext* CSharpParser::using_directive() {
  Using_directiveContext *_localctx = _tracker.createInstance<Using_directiveContext>(_ctx, getState());
  enterRule(_localctx, 220, CSharpParser::RuleUsing_directive);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1615);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 174, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<CSharpParser::UsingAliasDirectiveContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(1600);
      match(CSharpParser::USING);
      setState(1601);
      identifier();
      setState(1602);
      match(CSharpParser::ASSIGNMENT);
      setState(1603);
      namespace_or_type_name();
      setState(1604);
      match(CSharpParser::SEMICOLON);
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<CSharpParser::UsingNamespaceDirectiveContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(1606);
      match(CSharpParser::USING);
      setState(1607);
      namespace_or_type_name();
      setState(1608);
      match(CSharpParser::SEMICOLON);
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<CSharpParser::UsingStaticDirectiveContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(1610);
      match(CSharpParser::USING);
      setState(1611);
      match(CSharpParser::STATIC);
      setState(1612);
      namespace_or_type_name();
      setState(1613);
      match(CSharpParser::SEMICOLON);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Namespace_member_declarationsContext ------------------------------------------------------------------

CSharpParser::Namespace_member_declarationsContext::Namespace_member_declarationsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::Namespace_member_declarationContext *> CSharpParser::Namespace_member_declarationsContext::namespace_member_declaration() {
  return getRuleContexts<CSharpParser::Namespace_member_declarationContext>();
}

CSharpParser::Namespace_member_declarationContext* CSharpParser::Namespace_member_declarationsContext::namespace_member_declaration(size_t i) {
  return getRuleContext<CSharpParser::Namespace_member_declarationContext>(i);
}


size_t CSharpParser::Namespace_member_declarationsContext::getRuleIndex() const {
  return CSharpParser::RuleNamespace_member_declarations;
}

void CSharpParser::Namespace_member_declarationsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamespace_member_declarations(this);
}

void CSharpParser::Namespace_member_declarationsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamespace_member_declarations(this);
}

CSharpParser::Namespace_member_declarationsContext* CSharpParser::namespace_member_declarations() {
  Namespace_member_declarationsContext *_localctx = _tracker.createInstance<Namespace_member_declarationsContext>(_ctx, getState());
  enterRule(_localctx, 222, CSharpParser::RuleNamespace_member_declarations);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1618); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1617);
      namespace_member_declaration();
      setState(1620); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 216175120790618624) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 4611708283706211587) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Namespace_member_declarationContext ------------------------------------------------------------------

CSharpParser::Namespace_member_declarationContext::Namespace_member_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Namespace_declarationContext* CSharpParser::Namespace_member_declarationContext::namespace_declaration() {
  return getRuleContext<CSharpParser::Namespace_declarationContext>(0);
}

CSharpParser::Type_declarationContext* CSharpParser::Namespace_member_declarationContext::type_declaration() {
  return getRuleContext<CSharpParser::Type_declarationContext>(0);
}


size_t CSharpParser::Namespace_member_declarationContext::getRuleIndex() const {
  return CSharpParser::RuleNamespace_member_declaration;
}

void CSharpParser::Namespace_member_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamespace_member_declaration(this);
}

void CSharpParser::Namespace_member_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamespace_member_declaration(this);
}

CSharpParser::Namespace_member_declarationContext* CSharpParser::namespace_member_declaration() {
  Namespace_member_declarationContext *_localctx = _tracker.createInstance<Namespace_member_declarationContext>(_ctx, getState());
  enterRule(_localctx, 224, CSharpParser::RuleNamespace_member_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1624);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::NAMESPACE: {
        enterOuterAlt(_localctx, 1);
        setState(1622);
        namespace_declaration();
        break;
      }

      case CSharpParser::ABSTRACT:
      case CSharpParser::ASYNC:
      case CSharpParser::CLASS:
      case CSharpParser::DELEGATE:
      case CSharpParser::ENUM:
      case CSharpParser::EXTERN:
      case CSharpParser::INTERFACE:
      case CSharpParser::INTERNAL:
      case CSharpParser::NEW:
      case CSharpParser::OVERRIDE:
      case CSharpParser::PARTIAL:
      case CSharpParser::PRIVATE:
      case CSharpParser::PROTECTED:
      case CSharpParser::PUBLIC:
      case CSharpParser::READONLY:
      case CSharpParser::REF:
      case CSharpParser::SEALED:
      case CSharpParser::STATIC:
      case CSharpParser::STRUCT:
      case CSharpParser::UNSAFE:
      case CSharpParser::VIRTUAL:
      case CSharpParser::VOLATILE:
      case CSharpParser::OPEN_BRACKET: {
        enterOuterAlt(_localctx, 2);
        setState(1623);
        type_declaration();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_declarationContext ------------------------------------------------------------------

CSharpParser::Type_declarationContext::Type_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Class_definitionContext* CSharpParser::Type_declarationContext::class_definition() {
  return getRuleContext<CSharpParser::Class_definitionContext>(0);
}

CSharpParser::Struct_definitionContext* CSharpParser::Type_declarationContext::struct_definition() {
  return getRuleContext<CSharpParser::Struct_definitionContext>(0);
}

CSharpParser::Interface_definitionContext* CSharpParser::Type_declarationContext::interface_definition() {
  return getRuleContext<CSharpParser::Interface_definitionContext>(0);
}

CSharpParser::Enum_definitionContext* CSharpParser::Type_declarationContext::enum_definition() {
  return getRuleContext<CSharpParser::Enum_definitionContext>(0);
}

CSharpParser::Delegate_definitionContext* CSharpParser::Type_declarationContext::delegate_definition() {
  return getRuleContext<CSharpParser::Delegate_definitionContext>(0);
}

CSharpParser::AttributesContext* CSharpParser::Type_declarationContext::attributes() {
  return getRuleContext<CSharpParser::AttributesContext>(0);
}

CSharpParser::All_member_modifiersContext* CSharpParser::Type_declarationContext::all_member_modifiers() {
  return getRuleContext<CSharpParser::All_member_modifiersContext>(0);
}


size_t CSharpParser::Type_declarationContext::getRuleIndex() const {
  return CSharpParser::RuleType_declaration;
}

void CSharpParser::Type_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_declaration(this);
}

void CSharpParser::Type_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_declaration(this);
}

CSharpParser::Type_declarationContext* CSharpParser::type_declaration() {
  Type_declarationContext *_localctx = _tracker.createInstance<Type_declarationContext>(_ctx, getState());
  enterRule(_localctx, 226, CSharpParser::RuleType_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1627);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::OPEN_BRACKET) {
      setState(1626);
      attributes();
    }
    setState(1630);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 178, _ctx)) {
    case 1: {
      setState(1629);
      all_member_modifiers();
      break;
    }

    default:
      break;
    }
    setState(1637);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::CLASS: {
        setState(1632);
        class_definition();
        break;
      }

      case CSharpParser::READONLY:
      case CSharpParser::REF:
      case CSharpParser::STRUCT: {
        setState(1633);
        struct_definition();
        break;
      }

      case CSharpParser::INTERFACE: {
        setState(1634);
        interface_definition();
        break;
      }

      case CSharpParser::ENUM: {
        setState(1635);
        enum_definition();
        break;
      }

      case CSharpParser::DELEGATE: {
        setState(1636);
        delegate_definition();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Qualified_alias_memberContext ------------------------------------------------------------------

CSharpParser::Qualified_alias_memberContext::Qualified_alias_memberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::IdentifierContext *> CSharpParser::Qualified_alias_memberContext::identifier() {
  return getRuleContexts<CSharpParser::IdentifierContext>();
}

CSharpParser::IdentifierContext* CSharpParser::Qualified_alias_memberContext::identifier(size_t i) {
  return getRuleContext<CSharpParser::IdentifierContext>(i);
}

tree::TerminalNode* CSharpParser::Qualified_alias_memberContext::DOUBLE_COLON() {
  return getToken(CSharpParser::DOUBLE_COLON, 0);
}

CSharpParser::Type_argument_listContext* CSharpParser::Qualified_alias_memberContext::type_argument_list() {
  return getRuleContext<CSharpParser::Type_argument_listContext>(0);
}


size_t CSharpParser::Qualified_alias_memberContext::getRuleIndex() const {
  return CSharpParser::RuleQualified_alias_member;
}

void CSharpParser::Qualified_alias_memberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQualified_alias_member(this);
}

void CSharpParser::Qualified_alias_memberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQualified_alias_member(this);
}

CSharpParser::Qualified_alias_memberContext* CSharpParser::qualified_alias_member() {
  Qualified_alias_memberContext *_localctx = _tracker.createInstance<Qualified_alias_memberContext>(_ctx, getState());
  enterRule(_localctx, 228, CSharpParser::RuleQualified_alias_member);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1639);
    identifier();
    setState(1640);
    match(CSharpParser::DOUBLE_COLON);
    setState(1641);
    identifier();
    setState(1643);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 180, _ctx)) {
    case 1: {
      setState(1642);
      type_argument_list();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_parameter_listContext ------------------------------------------------------------------

CSharpParser::Type_parameter_listContext::Type_parameter_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Type_parameter_listContext::LT() {
  return getToken(CSharpParser::LT, 0);
}

std::vector<CSharpParser::Type_parameterContext *> CSharpParser::Type_parameter_listContext::type_parameter() {
  return getRuleContexts<CSharpParser::Type_parameterContext>();
}

CSharpParser::Type_parameterContext* CSharpParser::Type_parameter_listContext::type_parameter(size_t i) {
  return getRuleContext<CSharpParser::Type_parameterContext>(i);
}

tree::TerminalNode* CSharpParser::Type_parameter_listContext::GT() {
  return getToken(CSharpParser::GT, 0);
}

std::vector<tree::TerminalNode *> CSharpParser::Type_parameter_listContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::Type_parameter_listContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}


size_t CSharpParser::Type_parameter_listContext::getRuleIndex() const {
  return CSharpParser::RuleType_parameter_list;
}

void CSharpParser::Type_parameter_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_parameter_list(this);
}

void CSharpParser::Type_parameter_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_parameter_list(this);
}

CSharpParser::Type_parameter_listContext* CSharpParser::type_parameter_list() {
  Type_parameter_listContext *_localctx = _tracker.createInstance<Type_parameter_listContext>(_ctx, getState());
  enterRule(_localctx, 230, CSharpParser::RuleType_parameter_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1645);
    match(CSharpParser::LT);
    setState(1646);
    type_parameter();
    setState(1651);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CSharpParser::COMMA) {
      setState(1647);
      match(CSharpParser::COMMA);
      setState(1648);
      type_parameter();
      setState(1653);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1654);
    match(CSharpParser::GT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_parameterContext ------------------------------------------------------------------

CSharpParser::Type_parameterContext::Type_parameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::IdentifierContext* CSharpParser::Type_parameterContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

CSharpParser::AttributesContext* CSharpParser::Type_parameterContext::attributes() {
  return getRuleContext<CSharpParser::AttributesContext>(0);
}


size_t CSharpParser::Type_parameterContext::getRuleIndex() const {
  return CSharpParser::RuleType_parameter;
}

void CSharpParser::Type_parameterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_parameter(this);
}

void CSharpParser::Type_parameterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_parameter(this);
}

CSharpParser::Type_parameterContext* CSharpParser::type_parameter() {
  Type_parameterContext *_localctx = _tracker.createInstance<Type_parameterContext>(_ctx, getState());
  enterRule(_localctx, 232, CSharpParser::RuleType_parameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1657);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::OPEN_BRACKET) {
      setState(1656);
      attributes();
    }
    setState(1659);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Class_baseContext ------------------------------------------------------------------

CSharpParser::Class_baseContext::Class_baseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Class_baseContext::COLON() {
  return getToken(CSharpParser::COLON, 0);
}

CSharpParser::Class_typeContext* CSharpParser::Class_baseContext::class_type() {
  return getRuleContext<CSharpParser::Class_typeContext>(0);
}

std::vector<tree::TerminalNode *> CSharpParser::Class_baseContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::Class_baseContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}

std::vector<CSharpParser::Namespace_or_type_nameContext *> CSharpParser::Class_baseContext::namespace_or_type_name() {
  return getRuleContexts<CSharpParser::Namespace_or_type_nameContext>();
}

CSharpParser::Namespace_or_type_nameContext* CSharpParser::Class_baseContext::namespace_or_type_name(size_t i) {
  return getRuleContext<CSharpParser::Namespace_or_type_nameContext>(i);
}


size_t CSharpParser::Class_baseContext::getRuleIndex() const {
  return CSharpParser::RuleClass_base;
}

void CSharpParser::Class_baseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClass_base(this);
}

void CSharpParser::Class_baseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClass_base(this);
}

CSharpParser::Class_baseContext* CSharpParser::class_base() {
  Class_baseContext *_localctx = _tracker.createInstance<Class_baseContext>(_ctx, getState());
  enterRule(_localctx, 234, CSharpParser::RuleClass_base);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1661);
    match(CSharpParser::COLON);
    setState(1662);
    class_type();
    setState(1667);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CSharpParser::COMMA) {
      setState(1663);
      match(CSharpParser::COMMA);
      setState(1664);
      namespace_or_type_name();
      setState(1669);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Interface_type_listContext ------------------------------------------------------------------

CSharpParser::Interface_type_listContext::Interface_type_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::Namespace_or_type_nameContext *> CSharpParser::Interface_type_listContext::namespace_or_type_name() {
  return getRuleContexts<CSharpParser::Namespace_or_type_nameContext>();
}

CSharpParser::Namespace_or_type_nameContext* CSharpParser::Interface_type_listContext::namespace_or_type_name(size_t i) {
  return getRuleContext<CSharpParser::Namespace_or_type_nameContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::Interface_type_listContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::Interface_type_listContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}


size_t CSharpParser::Interface_type_listContext::getRuleIndex() const {
  return CSharpParser::RuleInterface_type_list;
}

void CSharpParser::Interface_type_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterface_type_list(this);
}

void CSharpParser::Interface_type_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterface_type_list(this);
}

CSharpParser::Interface_type_listContext* CSharpParser::interface_type_list() {
  Interface_type_listContext *_localctx = _tracker.createInstance<Interface_type_listContext>(_ctx, getState());
  enterRule(_localctx, 236, CSharpParser::RuleInterface_type_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1670);
    namespace_or_type_name();
    setState(1675);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CSharpParser::COMMA) {
      setState(1671);
      match(CSharpParser::COMMA);
      setState(1672);
      namespace_or_type_name();
      setState(1677);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_parameter_constraints_clausesContext ------------------------------------------------------------------

CSharpParser::Type_parameter_constraints_clausesContext::Type_parameter_constraints_clausesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::Type_parameter_constraints_clauseContext *> CSharpParser::Type_parameter_constraints_clausesContext::type_parameter_constraints_clause() {
  return getRuleContexts<CSharpParser::Type_parameter_constraints_clauseContext>();
}

CSharpParser::Type_parameter_constraints_clauseContext* CSharpParser::Type_parameter_constraints_clausesContext::type_parameter_constraints_clause(size_t i) {
  return getRuleContext<CSharpParser::Type_parameter_constraints_clauseContext>(i);
}


size_t CSharpParser::Type_parameter_constraints_clausesContext::getRuleIndex() const {
  return CSharpParser::RuleType_parameter_constraints_clauses;
}

void CSharpParser::Type_parameter_constraints_clausesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_parameter_constraints_clauses(this);
}

void CSharpParser::Type_parameter_constraints_clausesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_parameter_constraints_clauses(this);
}

CSharpParser::Type_parameter_constraints_clausesContext* CSharpParser::type_parameter_constraints_clauses() {
  Type_parameter_constraints_clausesContext *_localctx = _tracker.createInstance<Type_parameter_constraints_clausesContext>(_ctx, getState());
  enterRule(_localctx, 238, CSharpParser::RuleType_parameter_constraints_clauses);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1679); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1678);
      type_parameter_constraints_clause();
      setState(1681); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == CSharpParser::WHERE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_parameter_constraints_clauseContext ------------------------------------------------------------------

CSharpParser::Type_parameter_constraints_clauseContext::Type_parameter_constraints_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Type_parameter_constraints_clauseContext::WHERE() {
  return getToken(CSharpParser::WHERE, 0);
}

CSharpParser::IdentifierContext* CSharpParser::Type_parameter_constraints_clauseContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

tree::TerminalNode* CSharpParser::Type_parameter_constraints_clauseContext::COLON() {
  return getToken(CSharpParser::COLON, 0);
}

CSharpParser::Type_parameter_constraintsContext* CSharpParser::Type_parameter_constraints_clauseContext::type_parameter_constraints() {
  return getRuleContext<CSharpParser::Type_parameter_constraintsContext>(0);
}


size_t CSharpParser::Type_parameter_constraints_clauseContext::getRuleIndex() const {
  return CSharpParser::RuleType_parameter_constraints_clause;
}

void CSharpParser::Type_parameter_constraints_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_parameter_constraints_clause(this);
}

void CSharpParser::Type_parameter_constraints_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_parameter_constraints_clause(this);
}

CSharpParser::Type_parameter_constraints_clauseContext* CSharpParser::type_parameter_constraints_clause() {
  Type_parameter_constraints_clauseContext *_localctx = _tracker.createInstance<Type_parameter_constraints_clauseContext>(_ctx, getState());
  enterRule(_localctx, 240, CSharpParser::RuleType_parameter_constraints_clause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1683);
    match(CSharpParser::WHERE);
    setState(1684);
    identifier();
    setState(1685);
    match(CSharpParser::COLON);
    setState(1686);
    type_parameter_constraints();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_parameter_constraintsContext ------------------------------------------------------------------

CSharpParser::Type_parameter_constraintsContext::Type_parameter_constraintsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Constructor_constraintContext* CSharpParser::Type_parameter_constraintsContext::constructor_constraint() {
  return getRuleContext<CSharpParser::Constructor_constraintContext>(0);
}

CSharpParser::Primary_constraintContext* CSharpParser::Type_parameter_constraintsContext::primary_constraint() {
  return getRuleContext<CSharpParser::Primary_constraintContext>(0);
}

std::vector<tree::TerminalNode *> CSharpParser::Type_parameter_constraintsContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::Type_parameter_constraintsContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}

CSharpParser::Secondary_constraintsContext* CSharpParser::Type_parameter_constraintsContext::secondary_constraints() {
  return getRuleContext<CSharpParser::Secondary_constraintsContext>(0);
}


size_t CSharpParser::Type_parameter_constraintsContext::getRuleIndex() const {
  return CSharpParser::RuleType_parameter_constraints;
}

void CSharpParser::Type_parameter_constraintsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_parameter_constraints(this);
}

void CSharpParser::Type_parameter_constraintsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_parameter_constraints(this);
}

CSharpParser::Type_parameter_constraintsContext* CSharpParser::type_parameter_constraints() {
  Type_parameter_constraintsContext *_localctx = _tracker.createInstance<Type_parameter_constraintsContext>(_ctx, getState());
  enterRule(_localctx, 242, CSharpParser::RuleType_parameter_constraints);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1698);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::NEW: {
        enterOuterAlt(_localctx, 1);
        setState(1688);
        constructor_constraint();
        break;
      }

      case CSharpParser::ADD:
      case CSharpParser::ALIAS:
      case CSharpParser::ARGLIST:
      case CSharpParser::ASCENDING:
      case CSharpParser::ASYNC:
      case CSharpParser::AWAIT:
      case CSharpParser::BY:
      case CSharpParser::CLASS:
      case CSharpParser::DESCENDING:
      case CSharpParser::DYNAMIC:
      case CSharpParser::EQUALS:
      case CSharpParser::FROM:
      case CSharpParser::GET:
      case CSharpParser::GROUP:
      case CSharpParser::INTO:
      case CSharpParser::JOIN:
      case CSharpParser::LET:
      case CSharpParser::NAMEOF:
      case CSharpParser::OBJECT:
      case CSharpParser::ON:
      case CSharpParser::ORDERBY:
      case CSharpParser::PARTIAL:
      case CSharpParser::REMOVE:
      case CSharpParser::SELECT:
      case CSharpParser::SET:
      case CSharpParser::STRING:
      case CSharpParser::STRUCT:
      case CSharpParser::UNMANAGED:
      case CSharpParser::VAR:
      case CSharpParser::WHEN:
      case CSharpParser::WHERE:
      case CSharpParser::YIELD:
      case CSharpParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 2);
        setState(1689);
        primary_constraint();
        setState(1692);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 186, _ctx)) {
        case 1: {
          setState(1690);
          match(CSharpParser::COMMA);
          setState(1691);
          secondary_constraints();
          break;
        }

        default:
          break;
        }
        setState(1696);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CSharpParser::COMMA) {
          setState(1694);
          match(CSharpParser::COMMA);
          setState(1695);
          constructor_constraint();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Primary_constraintContext ------------------------------------------------------------------

CSharpParser::Primary_constraintContext::Primary_constraintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Class_typeContext* CSharpParser::Primary_constraintContext::class_type() {
  return getRuleContext<CSharpParser::Class_typeContext>(0);
}

tree::TerminalNode* CSharpParser::Primary_constraintContext::CLASS() {
  return getToken(CSharpParser::CLASS, 0);
}

tree::TerminalNode* CSharpParser::Primary_constraintContext::INTERR() {
  return getToken(CSharpParser::INTERR, 0);
}

tree::TerminalNode* CSharpParser::Primary_constraintContext::STRUCT() {
  return getToken(CSharpParser::STRUCT, 0);
}

tree::TerminalNode* CSharpParser::Primary_constraintContext::UNMANAGED() {
  return getToken(CSharpParser::UNMANAGED, 0);
}


size_t CSharpParser::Primary_constraintContext::getRuleIndex() const {
  return CSharpParser::RulePrimary_constraint;
}

void CSharpParser::Primary_constraintContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimary_constraint(this);
}

void CSharpParser::Primary_constraintContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimary_constraint(this);
}

CSharpParser::Primary_constraintContext* CSharpParser::primary_constraint() {
  Primary_constraintContext *_localctx = _tracker.createInstance<Primary_constraintContext>(_ctx, getState());
  enterRule(_localctx, 244, CSharpParser::RulePrimary_constraint);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1707);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 190, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1700);
      class_type();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1701);
      match(CSharpParser::CLASS);
      setState(1703);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CSharpParser::INTERR) {
        setState(1702);
        match(CSharpParser::INTERR);
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1705);
      match(CSharpParser::STRUCT);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1706);
      match(CSharpParser::UNMANAGED);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Secondary_constraintsContext ------------------------------------------------------------------

CSharpParser::Secondary_constraintsContext::Secondary_constraintsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::Namespace_or_type_nameContext *> CSharpParser::Secondary_constraintsContext::namespace_or_type_name() {
  return getRuleContexts<CSharpParser::Namespace_or_type_nameContext>();
}

CSharpParser::Namespace_or_type_nameContext* CSharpParser::Secondary_constraintsContext::namespace_or_type_name(size_t i) {
  return getRuleContext<CSharpParser::Namespace_or_type_nameContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::Secondary_constraintsContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::Secondary_constraintsContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}


size_t CSharpParser::Secondary_constraintsContext::getRuleIndex() const {
  return CSharpParser::RuleSecondary_constraints;
}

void CSharpParser::Secondary_constraintsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSecondary_constraints(this);
}

void CSharpParser::Secondary_constraintsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSecondary_constraints(this);
}

CSharpParser::Secondary_constraintsContext* CSharpParser::secondary_constraints() {
  Secondary_constraintsContext *_localctx = _tracker.createInstance<Secondary_constraintsContext>(_ctx, getState());
  enterRule(_localctx, 246, CSharpParser::RuleSecondary_constraints);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1709);
    namespace_or_type_name();
    setState(1714);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 191, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1710);
        match(CSharpParser::COMMA);
        setState(1711);
        namespace_or_type_name(); 
      }
      setState(1716);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 191, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Constructor_constraintContext ------------------------------------------------------------------

CSharpParser::Constructor_constraintContext::Constructor_constraintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Constructor_constraintContext::NEW() {
  return getToken(CSharpParser::NEW, 0);
}

tree::TerminalNode* CSharpParser::Constructor_constraintContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

tree::TerminalNode* CSharpParser::Constructor_constraintContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}


size_t CSharpParser::Constructor_constraintContext::getRuleIndex() const {
  return CSharpParser::RuleConstructor_constraint;
}

void CSharpParser::Constructor_constraintContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstructor_constraint(this);
}

void CSharpParser::Constructor_constraintContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstructor_constraint(this);
}

CSharpParser::Constructor_constraintContext* CSharpParser::constructor_constraint() {
  Constructor_constraintContext *_localctx = _tracker.createInstance<Constructor_constraintContext>(_ctx, getState());
  enterRule(_localctx, 248, CSharpParser::RuleConstructor_constraint);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1717);
    match(CSharpParser::NEW);
    setState(1718);
    match(CSharpParser::OPEN_PARENS);
    setState(1719);
    match(CSharpParser::CLOSE_PARENS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Class_bodyContext ------------------------------------------------------------------

CSharpParser::Class_bodyContext::Class_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Class_bodyContext::OPEN_BRACE() {
  return getToken(CSharpParser::OPEN_BRACE, 0);
}

tree::TerminalNode* CSharpParser::Class_bodyContext::CLOSE_BRACE() {
  return getToken(CSharpParser::CLOSE_BRACE, 0);
}

CSharpParser::Class_member_declarationsContext* CSharpParser::Class_bodyContext::class_member_declarations() {
  return getRuleContext<CSharpParser::Class_member_declarationsContext>(0);
}


size_t CSharpParser::Class_bodyContext::getRuleIndex() const {
  return CSharpParser::RuleClass_body;
}

void CSharpParser::Class_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClass_body(this);
}

void CSharpParser::Class_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClass_body(this);
}

CSharpParser::Class_bodyContext* CSharpParser::class_body() {
  Class_bodyContext *_localctx = _tracker.createInstance<Class_bodyContext>(_ctx, getState());
  enterRule(_localctx, 250, CSharpParser::RuleClass_body);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1721);
    match(CSharpParser::OPEN_BRACE);
    setState(1723);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -5212032640031007232) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & -9221404082353472843) != 0) || _la == CSharpParser::OPEN_PARENS

    || _la == CSharpParser::TILDE) {
      setState(1722);
      class_member_declarations();
    }
    setState(1725);
    match(CSharpParser::CLOSE_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Class_member_declarationsContext ------------------------------------------------------------------

CSharpParser::Class_member_declarationsContext::Class_member_declarationsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::Class_member_declarationContext *> CSharpParser::Class_member_declarationsContext::class_member_declaration() {
  return getRuleContexts<CSharpParser::Class_member_declarationContext>();
}

CSharpParser::Class_member_declarationContext* CSharpParser::Class_member_declarationsContext::class_member_declaration(size_t i) {
  return getRuleContext<CSharpParser::Class_member_declarationContext>(i);
}


size_t CSharpParser::Class_member_declarationsContext::getRuleIndex() const {
  return CSharpParser::RuleClass_member_declarations;
}

void CSharpParser::Class_member_declarationsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClass_member_declarations(this);
}

void CSharpParser::Class_member_declarationsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClass_member_declarations(this);
}

CSharpParser::Class_member_declarationsContext* CSharpParser::class_member_declarations() {
  Class_member_declarationsContext *_localctx = _tracker.createInstance<Class_member_declarationsContext>(_ctx, getState());
  enterRule(_localctx, 252, CSharpParser::RuleClass_member_declarations);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1728); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1727);
      class_member_declaration();
      setState(1730); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -5212032640031007232) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & -9221404082353472843) != 0) || _la == CSharpParser::OPEN_PARENS

    || _la == CSharpParser::TILDE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Class_member_declarationContext ------------------------------------------------------------------

CSharpParser::Class_member_declarationContext::Class_member_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Common_member_declarationContext* CSharpParser::Class_member_declarationContext::common_member_declaration() {
  return getRuleContext<CSharpParser::Common_member_declarationContext>(0);
}

CSharpParser::Destructor_definitionContext* CSharpParser::Class_member_declarationContext::destructor_definition() {
  return getRuleContext<CSharpParser::Destructor_definitionContext>(0);
}

CSharpParser::AttributesContext* CSharpParser::Class_member_declarationContext::attributes() {
  return getRuleContext<CSharpParser::AttributesContext>(0);
}

CSharpParser::All_member_modifiersContext* CSharpParser::Class_member_declarationContext::all_member_modifiers() {
  return getRuleContext<CSharpParser::All_member_modifiersContext>(0);
}


size_t CSharpParser::Class_member_declarationContext::getRuleIndex() const {
  return CSharpParser::RuleClass_member_declaration;
}

void CSharpParser::Class_member_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClass_member_declaration(this);
}

void CSharpParser::Class_member_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClass_member_declaration(this);
}

CSharpParser::Class_member_declarationContext* CSharpParser::class_member_declaration() {
  Class_member_declarationContext *_localctx = _tracker.createInstance<Class_member_declarationContext>(_ctx, getState());
  enterRule(_localctx, 254, CSharpParser::RuleClass_member_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1733);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::OPEN_BRACKET) {
      setState(1732);
      attributes();
    }
    setState(1736);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 195, _ctx)) {
    case 1: {
      setState(1735);
      all_member_modifiers();
      break;
    }

    default:
      break;
    }
    setState(1740);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::ADD:
      case CSharpParser::ALIAS:
      case CSharpParser::ARGLIST:
      case CSharpParser::ASCENDING:
      case CSharpParser::ASYNC:
      case CSharpParser::AWAIT:
      case CSharpParser::BOOL:
      case CSharpParser::BY:
      case CSharpParser::BYTE:
      case CSharpParser::CHAR:
      case CSharpParser::CLASS:
      case CSharpParser::CONST:
      case CSharpParser::DECIMAL:
      case CSharpParser::DELEGATE:
      case CSharpParser::DESCENDING:
      case CSharpParser::DOUBLE:
      case CSharpParser::DYNAMIC:
      case CSharpParser::ENUM:
      case CSharpParser::EQUALS:
      case CSharpParser::EVENT:
      case CSharpParser::EXPLICIT:
      case CSharpParser::FLOAT:
      case CSharpParser::FROM:
      case CSharpParser::GET:
      case CSharpParser::GROUP:
      case CSharpParser::IMPLICIT:
      case CSharpParser::INT:
      case CSharpParser::INTERFACE:
      case CSharpParser::INTO:
      case CSharpParser::JOIN:
      case CSharpParser::LET:
      case CSharpParser::LONG:
      case CSharpParser::NAMEOF:
      case CSharpParser::OBJECT:
      case CSharpParser::ON:
      case CSharpParser::ORDERBY:
      case CSharpParser::PARTIAL:
      case CSharpParser::READONLY:
      case CSharpParser::REF:
      case CSharpParser::REMOVE:
      case CSharpParser::SBYTE:
      case CSharpParser::SELECT:
      case CSharpParser::SET:
      case CSharpParser::SHORT:
      case CSharpParser::STRING:
      case CSharpParser::STRUCT:
      case CSharpParser::UINT:
      case CSharpParser::ULONG:
      case CSharpParser::UNMANAGED:
      case CSharpParser::USHORT:
      case CSharpParser::VAR:
      case CSharpParser::VOID:
      case CSharpParser::WHEN:
      case CSharpParser::WHERE:
      case CSharpParser::YIELD:
      case CSharpParser::IDENTIFIER:
      case CSharpParser::OPEN_PARENS: {
        setState(1738);
        common_member_declaration();
        break;
      }

      case CSharpParser::TILDE: {
        setState(1739);
        destructor_definition();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- All_member_modifiersContext ------------------------------------------------------------------

CSharpParser::All_member_modifiersContext::All_member_modifiersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::All_member_modifierContext *> CSharpParser::All_member_modifiersContext::all_member_modifier() {
  return getRuleContexts<CSharpParser::All_member_modifierContext>();
}

CSharpParser::All_member_modifierContext* CSharpParser::All_member_modifiersContext::all_member_modifier(size_t i) {
  return getRuleContext<CSharpParser::All_member_modifierContext>(i);
}


size_t CSharpParser::All_member_modifiersContext::getRuleIndex() const {
  return CSharpParser::RuleAll_member_modifiers;
}

void CSharpParser::All_member_modifiersContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAll_member_modifiers(this);
}

void CSharpParser::All_member_modifiersContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAll_member_modifiers(this);
}

CSharpParser::All_member_modifiersContext* CSharpParser::all_member_modifiers() {
  All_member_modifiersContext *_localctx = _tracker.createInstance<All_member_modifiersContext>(_ctx, getState());
  enterRule(_localctx, 256, CSharpParser::RuleAll_member_modifiers);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1743); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1742);
              all_member_modifier();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1745); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 197, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- All_member_modifierContext ------------------------------------------------------------------

CSharpParser::All_member_modifierContext::All_member_modifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::All_member_modifierContext::NEW() {
  return getToken(CSharpParser::NEW, 0);
}

tree::TerminalNode* CSharpParser::All_member_modifierContext::PUBLIC() {
  return getToken(CSharpParser::PUBLIC, 0);
}

tree::TerminalNode* CSharpParser::All_member_modifierContext::PROTECTED() {
  return getToken(CSharpParser::PROTECTED, 0);
}

tree::TerminalNode* CSharpParser::All_member_modifierContext::INTERNAL() {
  return getToken(CSharpParser::INTERNAL, 0);
}

tree::TerminalNode* CSharpParser::All_member_modifierContext::PRIVATE() {
  return getToken(CSharpParser::PRIVATE, 0);
}

tree::TerminalNode* CSharpParser::All_member_modifierContext::READONLY() {
  return getToken(CSharpParser::READONLY, 0);
}

tree::TerminalNode* CSharpParser::All_member_modifierContext::VOLATILE() {
  return getToken(CSharpParser::VOLATILE, 0);
}

tree::TerminalNode* CSharpParser::All_member_modifierContext::VIRTUAL() {
  return getToken(CSharpParser::VIRTUAL, 0);
}

tree::TerminalNode* CSharpParser::All_member_modifierContext::SEALED() {
  return getToken(CSharpParser::SEALED, 0);
}

tree::TerminalNode* CSharpParser::All_member_modifierContext::OVERRIDE() {
  return getToken(CSharpParser::OVERRIDE, 0);
}

tree::TerminalNode* CSharpParser::All_member_modifierContext::ABSTRACT() {
  return getToken(CSharpParser::ABSTRACT, 0);
}

tree::TerminalNode* CSharpParser::All_member_modifierContext::STATIC() {
  return getToken(CSharpParser::STATIC, 0);
}

tree::TerminalNode* CSharpParser::All_member_modifierContext::UNSAFE() {
  return getToken(CSharpParser::UNSAFE, 0);
}

tree::TerminalNode* CSharpParser::All_member_modifierContext::EXTERN() {
  return getToken(CSharpParser::EXTERN, 0);
}

tree::TerminalNode* CSharpParser::All_member_modifierContext::PARTIAL() {
  return getToken(CSharpParser::PARTIAL, 0);
}

tree::TerminalNode* CSharpParser::All_member_modifierContext::ASYNC() {
  return getToken(CSharpParser::ASYNC, 0);
}


size_t CSharpParser::All_member_modifierContext::getRuleIndex() const {
  return CSharpParser::RuleAll_member_modifier;
}

void CSharpParser::All_member_modifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAll_member_modifier(this);
}

void CSharpParser::All_member_modifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAll_member_modifier(this);
}

CSharpParser::All_member_modifierContext* CSharpParser::all_member_modifier() {
  All_member_modifierContext *_localctx = _tracker.createInstance<All_member_modifierContext>(_ctx, getState());
  enterRule(_localctx, 258, CSharpParser::RuleAll_member_modifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1747);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 144117387099144704) != 0) || ((((_la - 66) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 66)) & 11132572286593) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Common_member_declarationContext ------------------------------------------------------------------

CSharpParser::Common_member_declarationContext::Common_member_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Constant_declarationContext* CSharpParser::Common_member_declarationContext::constant_declaration() {
  return getRuleContext<CSharpParser::Constant_declarationContext>(0);
}

CSharpParser::Typed_member_declarationContext* CSharpParser::Common_member_declarationContext::typed_member_declaration() {
  return getRuleContext<CSharpParser::Typed_member_declarationContext>(0);
}

CSharpParser::Event_declarationContext* CSharpParser::Common_member_declarationContext::event_declaration() {
  return getRuleContext<CSharpParser::Event_declarationContext>(0);
}

CSharpParser::Conversion_operator_declaratorContext* CSharpParser::Common_member_declarationContext::conversion_operator_declarator() {
  return getRuleContext<CSharpParser::Conversion_operator_declaratorContext>(0);
}

CSharpParser::BodyContext* CSharpParser::Common_member_declarationContext::body() {
  return getRuleContext<CSharpParser::BodyContext>(0);
}

CSharpParser::Right_arrowContext* CSharpParser::Common_member_declarationContext::right_arrow() {
  return getRuleContext<CSharpParser::Right_arrowContext>(0);
}

CSharpParser::Throwable_expressionContext* CSharpParser::Common_member_declarationContext::throwable_expression() {
  return getRuleContext<CSharpParser::Throwable_expressionContext>(0);
}

tree::TerminalNode* CSharpParser::Common_member_declarationContext::SEMICOLON() {
  return getToken(CSharpParser::SEMICOLON, 0);
}

CSharpParser::Constructor_declarationContext* CSharpParser::Common_member_declarationContext::constructor_declaration() {
  return getRuleContext<CSharpParser::Constructor_declarationContext>(0);
}

tree::TerminalNode* CSharpParser::Common_member_declarationContext::VOID() {
  return getToken(CSharpParser::VOID, 0);
}

CSharpParser::Method_declarationContext* CSharpParser::Common_member_declarationContext::method_declaration() {
  return getRuleContext<CSharpParser::Method_declarationContext>(0);
}

CSharpParser::Class_definitionContext* CSharpParser::Common_member_declarationContext::class_definition() {
  return getRuleContext<CSharpParser::Class_definitionContext>(0);
}

CSharpParser::Struct_definitionContext* CSharpParser::Common_member_declarationContext::struct_definition() {
  return getRuleContext<CSharpParser::Struct_definitionContext>(0);
}

CSharpParser::Interface_definitionContext* CSharpParser::Common_member_declarationContext::interface_definition() {
  return getRuleContext<CSharpParser::Interface_definitionContext>(0);
}

CSharpParser::Enum_definitionContext* CSharpParser::Common_member_declarationContext::enum_definition() {
  return getRuleContext<CSharpParser::Enum_definitionContext>(0);
}

CSharpParser::Delegate_definitionContext* CSharpParser::Common_member_declarationContext::delegate_definition() {
  return getRuleContext<CSharpParser::Delegate_definitionContext>(0);
}


size_t CSharpParser::Common_member_declarationContext::getRuleIndex() const {
  return CSharpParser::RuleCommon_member_declaration;
}

void CSharpParser::Common_member_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCommon_member_declaration(this);
}

void CSharpParser::Common_member_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCommon_member_declaration(this);
}

CSharpParser::Common_member_declarationContext* CSharpParser::common_member_declaration() {
  Common_member_declarationContext *_localctx = _tracker.createInstance<Common_member_declarationContext>(_ctx, getState());
  enterRule(_localctx, 260, CSharpParser::RuleCommon_member_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1768);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 199, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1749);
      constant_declaration();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1750);
      typed_member_declaration();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1751);
      event_declaration();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1752);
      conversion_operator_declarator();
      setState(1758);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case CSharpParser::OPEN_BRACE:
        case CSharpParser::SEMICOLON: {
          setState(1753);
          body();
          break;
        }

        case CSharpParser::ASSIGNMENT: {
          setState(1754);
          right_arrow();
          setState(1755);
          throwable_expression();
          setState(1756);
          match(CSharpParser::SEMICOLON);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1760);
      constructor_declaration();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1761);
      match(CSharpParser::VOID);
      setState(1762);
      method_declaration();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1763);
      class_definition();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1764);
      struct_definition();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1765);
      interface_definition();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(1766);
      enum_definition();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(1767);
      delegate_definition();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Typed_member_declarationContext ------------------------------------------------------------------

CSharpParser::Typed_member_declarationContext::Typed_member_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Type_Context* CSharpParser::Typed_member_declarationContext::type_() {
  return getRuleContext<CSharpParser::Type_Context>(0);
}

CSharpParser::Namespace_or_type_nameContext* CSharpParser::Typed_member_declarationContext::namespace_or_type_name() {
  return getRuleContext<CSharpParser::Namespace_or_type_nameContext>(0);
}

tree::TerminalNode* CSharpParser::Typed_member_declarationContext::DOT() {
  return getToken(CSharpParser::DOT, 0);
}

CSharpParser::Indexer_declarationContext* CSharpParser::Typed_member_declarationContext::indexer_declaration() {
  return getRuleContext<CSharpParser::Indexer_declarationContext>(0);
}

CSharpParser::Method_declarationContext* CSharpParser::Typed_member_declarationContext::method_declaration() {
  return getRuleContext<CSharpParser::Method_declarationContext>(0);
}

CSharpParser::Property_declarationContext* CSharpParser::Typed_member_declarationContext::property_declaration() {
  return getRuleContext<CSharpParser::Property_declarationContext>(0);
}

CSharpParser::Operator_declarationContext* CSharpParser::Typed_member_declarationContext::operator_declaration() {
  return getRuleContext<CSharpParser::Operator_declarationContext>(0);
}

CSharpParser::Field_declarationContext* CSharpParser::Typed_member_declarationContext::field_declaration() {
  return getRuleContext<CSharpParser::Field_declarationContext>(0);
}

tree::TerminalNode* CSharpParser::Typed_member_declarationContext::REF() {
  return getToken(CSharpParser::REF, 0);
}

tree::TerminalNode* CSharpParser::Typed_member_declarationContext::READONLY() {
  return getToken(CSharpParser::READONLY, 0);
}


size_t CSharpParser::Typed_member_declarationContext::getRuleIndex() const {
  return CSharpParser::RuleTyped_member_declaration;
}

void CSharpParser::Typed_member_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTyped_member_declaration(this);
}

void CSharpParser::Typed_member_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTyped_member_declaration(this);
}

CSharpParser::Typed_member_declarationContext* CSharpParser::typed_member_declaration() {
  Typed_member_declarationContext *_localctx = _tracker.createInstance<Typed_member_declarationContext>(_ctx, getState());
  enterRule(_localctx, 262, CSharpParser::RuleTyped_member_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1775);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 200, _ctx)) {
    case 1: {
      setState(1770);
      match(CSharpParser::REF);
      break;
    }

    case 2: {
      setState(1771);
      match(CSharpParser::READONLY);
      setState(1772);
      match(CSharpParser::REF);
      break;
    }

    case 3: {
      setState(1773);
      match(CSharpParser::REF);
      setState(1774);
      match(CSharpParser::READONLY);
      break;
    }

    default:
      break;
    }
    setState(1777);
    type_();
    setState(1787);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 201, _ctx)) {
    case 1: {
      setState(1778);
      namespace_or_type_name();
      setState(1779);
      match(CSharpParser::DOT);
      setState(1780);
      indexer_declaration();
      break;
    }

    case 2: {
      setState(1782);
      method_declaration();
      break;
    }

    case 3: {
      setState(1783);
      property_declaration();
      break;
    }

    case 4: {
      setState(1784);
      indexer_declaration();
      break;
    }

    case 5: {
      setState(1785);
      operator_declaration();
      break;
    }

    case 6: {
      setState(1786);
      field_declaration();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Constant_declaratorsContext ------------------------------------------------------------------

CSharpParser::Constant_declaratorsContext::Constant_declaratorsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::Constant_declaratorContext *> CSharpParser::Constant_declaratorsContext::constant_declarator() {
  return getRuleContexts<CSharpParser::Constant_declaratorContext>();
}

CSharpParser::Constant_declaratorContext* CSharpParser::Constant_declaratorsContext::constant_declarator(size_t i) {
  return getRuleContext<CSharpParser::Constant_declaratorContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::Constant_declaratorsContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::Constant_declaratorsContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}


size_t CSharpParser::Constant_declaratorsContext::getRuleIndex() const {
  return CSharpParser::RuleConstant_declarators;
}

void CSharpParser::Constant_declaratorsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstant_declarators(this);
}

void CSharpParser::Constant_declaratorsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstant_declarators(this);
}

CSharpParser::Constant_declaratorsContext* CSharpParser::constant_declarators() {
  Constant_declaratorsContext *_localctx = _tracker.createInstance<Constant_declaratorsContext>(_ctx, getState());
  enterRule(_localctx, 264, CSharpParser::RuleConstant_declarators);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1789);
    constant_declarator();
    setState(1794);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CSharpParser::COMMA) {
      setState(1790);
      match(CSharpParser::COMMA);
      setState(1791);
      constant_declarator();
      setState(1796);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Constant_declaratorContext ------------------------------------------------------------------

CSharpParser::Constant_declaratorContext::Constant_declaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::IdentifierContext* CSharpParser::Constant_declaratorContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

tree::TerminalNode* CSharpParser::Constant_declaratorContext::ASSIGNMENT() {
  return getToken(CSharpParser::ASSIGNMENT, 0);
}

CSharpParser::ExpressionContext* CSharpParser::Constant_declaratorContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}


size_t CSharpParser::Constant_declaratorContext::getRuleIndex() const {
  return CSharpParser::RuleConstant_declarator;
}

void CSharpParser::Constant_declaratorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstant_declarator(this);
}

void CSharpParser::Constant_declaratorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstant_declarator(this);
}

CSharpParser::Constant_declaratorContext* CSharpParser::constant_declarator() {
  Constant_declaratorContext *_localctx = _tracker.createInstance<Constant_declaratorContext>(_ctx, getState());
  enterRule(_localctx, 266, CSharpParser::RuleConstant_declarator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1797);
    identifier();
    setState(1798);
    match(CSharpParser::ASSIGNMENT);
    setState(1799);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Variable_declaratorsContext ------------------------------------------------------------------

CSharpParser::Variable_declaratorsContext::Variable_declaratorsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::Variable_declaratorContext *> CSharpParser::Variable_declaratorsContext::variable_declarator() {
  return getRuleContexts<CSharpParser::Variable_declaratorContext>();
}

CSharpParser::Variable_declaratorContext* CSharpParser::Variable_declaratorsContext::variable_declarator(size_t i) {
  return getRuleContext<CSharpParser::Variable_declaratorContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::Variable_declaratorsContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::Variable_declaratorsContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}


size_t CSharpParser::Variable_declaratorsContext::getRuleIndex() const {
  return CSharpParser::RuleVariable_declarators;
}

void CSharpParser::Variable_declaratorsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariable_declarators(this);
}

void CSharpParser::Variable_declaratorsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariable_declarators(this);
}

CSharpParser::Variable_declaratorsContext* CSharpParser::variable_declarators() {
  Variable_declaratorsContext *_localctx = _tracker.createInstance<Variable_declaratorsContext>(_ctx, getState());
  enterRule(_localctx, 268, CSharpParser::RuleVariable_declarators);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1801);
    variable_declarator();
    setState(1806);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CSharpParser::COMMA) {
      setState(1802);
      match(CSharpParser::COMMA);
      setState(1803);
      variable_declarator();
      setState(1808);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Variable_declaratorContext ------------------------------------------------------------------

CSharpParser::Variable_declaratorContext::Variable_declaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::IdentifierContext* CSharpParser::Variable_declaratorContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

tree::TerminalNode* CSharpParser::Variable_declaratorContext::ASSIGNMENT() {
  return getToken(CSharpParser::ASSIGNMENT, 0);
}

CSharpParser::Variable_initializerContext* CSharpParser::Variable_declaratorContext::variable_initializer() {
  return getRuleContext<CSharpParser::Variable_initializerContext>(0);
}


size_t CSharpParser::Variable_declaratorContext::getRuleIndex() const {
  return CSharpParser::RuleVariable_declarator;
}

void CSharpParser::Variable_declaratorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariable_declarator(this);
}

void CSharpParser::Variable_declaratorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariable_declarator(this);
}

CSharpParser::Variable_declaratorContext* CSharpParser::variable_declarator() {
  Variable_declaratorContext *_localctx = _tracker.createInstance<Variable_declaratorContext>(_ctx, getState());
  enterRule(_localctx, 270, CSharpParser::RuleVariable_declarator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1809);
    identifier();
    setState(1812);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::ASSIGNMENT) {
      setState(1810);
      match(CSharpParser::ASSIGNMENT);
      setState(1811);
      variable_initializer();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Variable_initializerContext ------------------------------------------------------------------

CSharpParser::Variable_initializerContext::Variable_initializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::ExpressionContext* CSharpParser::Variable_initializerContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}

CSharpParser::Array_initializerContext* CSharpParser::Variable_initializerContext::array_initializer() {
  return getRuleContext<CSharpParser::Array_initializerContext>(0);
}


size_t CSharpParser::Variable_initializerContext::getRuleIndex() const {
  return CSharpParser::RuleVariable_initializer;
}

void CSharpParser::Variable_initializerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariable_initializer(this);
}

void CSharpParser::Variable_initializerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariable_initializer(this);
}

CSharpParser::Variable_initializerContext* CSharpParser::variable_initializer() {
  Variable_initializerContext *_localctx = _tracker.createInstance<Variable_initializerContext>(_ctx, getState());
  enterRule(_localctx, 272, CSharpParser::RuleVariable_initializer);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1816);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::ADD:
      case CSharpParser::ALIAS:
      case CSharpParser::ARGLIST:
      case CSharpParser::ASCENDING:
      case CSharpParser::ASYNC:
      case CSharpParser::AWAIT:
      case CSharpParser::BASE:
      case CSharpParser::BOOL:
      case CSharpParser::BY:
      case CSharpParser::BYTE:
      case CSharpParser::CHAR:
      case CSharpParser::CHECKED:
      case CSharpParser::DECIMAL:
      case CSharpParser::DEFAULT:
      case CSharpParser::DELEGATE:
      case CSharpParser::DESCENDING:
      case CSharpParser::DOUBLE:
      case CSharpParser::DYNAMIC:
      case CSharpParser::EQUALS:
      case CSharpParser::FALSE:
      case CSharpParser::FLOAT:
      case CSharpParser::FROM:
      case CSharpParser::GET:
      case CSharpParser::GROUP:
      case CSharpParser::INT:
      case CSharpParser::INTO:
      case CSharpParser::JOIN:
      case CSharpParser::LET:
      case CSharpParser::LONG:
      case CSharpParser::NAMEOF:
      case CSharpParser::NEW:
      case CSharpParser::NULL_:
      case CSharpParser::OBJECT:
      case CSharpParser::ON:
      case CSharpParser::ORDERBY:
      case CSharpParser::PARTIAL:
      case CSharpParser::REF:
      case CSharpParser::REMOVE:
      case CSharpParser::SBYTE:
      case CSharpParser::SELECT:
      case CSharpParser::SET:
      case CSharpParser::SHORT:
      case CSharpParser::SIZEOF:
      case CSharpParser::STRING:
      case CSharpParser::THIS:
      case CSharpParser::TRUE:
      case CSharpParser::TYPEOF:
      case CSharpParser::UINT:
      case CSharpParser::ULONG:
      case CSharpParser::UNCHECKED:
      case CSharpParser::UNMANAGED:
      case CSharpParser::USHORT:
      case CSharpParser::VAR:
      case CSharpParser::WHEN:
      case CSharpParser::WHERE:
      case CSharpParser::YIELD:
      case CSharpParser::IDENTIFIER:
      case CSharpParser::LITERAL_ACCESS:
      case CSharpParser::INTEGER_LITERAL:
      case CSharpParser::HEX_INTEGER_LITERAL:
      case CSharpParser::BIN_INTEGER_LITERAL:
      case CSharpParser::REAL_LITERAL:
      case CSharpParser::CHARACTER_LITERAL:
      case CSharpParser::REGULAR_STRING:
      case CSharpParser::VERBATIUM_STRING:
      case CSharpParser::INTERPOLATED_REGULAR_STRING_START:
      case CSharpParser::INTERPOLATED_VERBATIUM_STRING_START:
      case CSharpParser::OPEN_PARENS:
      case CSharpParser::PLUS:
      case CSharpParser::MINUS:
      case CSharpParser::STAR:
      case CSharpParser::AMP:
      case CSharpParser::CARET:
      case CSharpParser::BANG:
      case CSharpParser::TILDE:
      case CSharpParser::OP_INC:
      case CSharpParser::OP_DEC:
      case CSharpParser::OP_RANGE: {
        enterOuterAlt(_localctx, 1);
        setState(1814);
        expression();
        break;
      }

      case CSharpParser::OPEN_BRACE: {
        enterOuterAlt(_localctx, 2);
        setState(1815);
        array_initializer();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Return_typeContext ------------------------------------------------------------------

CSharpParser::Return_typeContext::Return_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Type_Context* CSharpParser::Return_typeContext::type_() {
  return getRuleContext<CSharpParser::Type_Context>(0);
}

tree::TerminalNode* CSharpParser::Return_typeContext::VOID() {
  return getToken(CSharpParser::VOID, 0);
}


size_t CSharpParser::Return_typeContext::getRuleIndex() const {
  return CSharpParser::RuleReturn_type;
}

void CSharpParser::Return_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReturn_type(this);
}

void CSharpParser::Return_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReturn_type(this);
}

CSharpParser::Return_typeContext* CSharpParser::return_type() {
  Return_typeContext *_localctx = _tracker.createInstance<Return_typeContext>(_ctx, getState());
  enterRule(_localctx, 274, CSharpParser::RuleReturn_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1820);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 206, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1818);
      type_();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1819);
      match(CSharpParser::VOID);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Member_nameContext ------------------------------------------------------------------

CSharpParser::Member_nameContext::Member_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Namespace_or_type_nameContext* CSharpParser::Member_nameContext::namespace_or_type_name() {
  return getRuleContext<CSharpParser::Namespace_or_type_nameContext>(0);
}


size_t CSharpParser::Member_nameContext::getRuleIndex() const {
  return CSharpParser::RuleMember_name;
}

void CSharpParser::Member_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMember_name(this);
}

void CSharpParser::Member_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMember_name(this);
}

CSharpParser::Member_nameContext* CSharpParser::member_name() {
  Member_nameContext *_localctx = _tracker.createInstance<Member_nameContext>(_ctx, getState());
  enterRule(_localctx, 276, CSharpParser::RuleMember_name);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1822);
    namespace_or_type_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Method_bodyContext ------------------------------------------------------------------

CSharpParser::Method_bodyContext::Method_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::BlockContext* CSharpParser::Method_bodyContext::block() {
  return getRuleContext<CSharpParser::BlockContext>(0);
}

tree::TerminalNode* CSharpParser::Method_bodyContext::SEMICOLON() {
  return getToken(CSharpParser::SEMICOLON, 0);
}


size_t CSharpParser::Method_bodyContext::getRuleIndex() const {
  return CSharpParser::RuleMethod_body;
}

void CSharpParser::Method_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethod_body(this);
}

void CSharpParser::Method_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethod_body(this);
}

CSharpParser::Method_bodyContext* CSharpParser::method_body() {
  Method_bodyContext *_localctx = _tracker.createInstance<Method_bodyContext>(_ctx, getState());
  enterRule(_localctx, 278, CSharpParser::RuleMethod_body);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1826);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::OPEN_BRACE: {
        enterOuterAlt(_localctx, 1);
        setState(1824);
        block();
        break;
      }

      case CSharpParser::SEMICOLON: {
        enterOuterAlt(_localctx, 2);
        setState(1825);
        match(CSharpParser::SEMICOLON);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Formal_parameter_listContext ------------------------------------------------------------------

CSharpParser::Formal_parameter_listContext::Formal_parameter_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Parameter_arrayContext* CSharpParser::Formal_parameter_listContext::parameter_array() {
  return getRuleContext<CSharpParser::Parameter_arrayContext>(0);
}

CSharpParser::Fixed_parametersContext* CSharpParser::Formal_parameter_listContext::fixed_parameters() {
  return getRuleContext<CSharpParser::Fixed_parametersContext>(0);
}

tree::TerminalNode* CSharpParser::Formal_parameter_listContext::COMMA() {
  return getToken(CSharpParser::COMMA, 0);
}


size_t CSharpParser::Formal_parameter_listContext::getRuleIndex() const {
  return CSharpParser::RuleFormal_parameter_list;
}

void CSharpParser::Formal_parameter_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFormal_parameter_list(this);
}

void CSharpParser::Formal_parameter_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFormal_parameter_list(this);
}

CSharpParser::Formal_parameter_listContext* CSharpParser::formal_parameter_list() {
  Formal_parameter_listContext *_localctx = _tracker.createInstance<Formal_parameter_listContext>(_ctx, getState());
  enterRule(_localctx, 280, CSharpParser::RuleFormal_parameter_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1834);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 209, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1828);
      parameter_array();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1829);
      fixed_parameters();
      setState(1832);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CSharpParser::COMMA) {
        setState(1830);
        match(CSharpParser::COMMA);
        setState(1831);
        parameter_array();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fixed_parametersContext ------------------------------------------------------------------

CSharpParser::Fixed_parametersContext::Fixed_parametersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::Fixed_parameterContext *> CSharpParser::Fixed_parametersContext::fixed_parameter() {
  return getRuleContexts<CSharpParser::Fixed_parameterContext>();
}

CSharpParser::Fixed_parameterContext* CSharpParser::Fixed_parametersContext::fixed_parameter(size_t i) {
  return getRuleContext<CSharpParser::Fixed_parameterContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::Fixed_parametersContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::Fixed_parametersContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}


size_t CSharpParser::Fixed_parametersContext::getRuleIndex() const {
  return CSharpParser::RuleFixed_parameters;
}

void CSharpParser::Fixed_parametersContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFixed_parameters(this);
}

void CSharpParser::Fixed_parametersContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFixed_parameters(this);
}

CSharpParser::Fixed_parametersContext* CSharpParser::fixed_parameters() {
  Fixed_parametersContext *_localctx = _tracker.createInstance<Fixed_parametersContext>(_ctx, getState());
  enterRule(_localctx, 282, CSharpParser::RuleFixed_parameters);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1836);
    fixed_parameter();
    setState(1841);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 210, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1837);
        match(CSharpParser::COMMA);
        setState(1838);
        fixed_parameter(); 
      }
      setState(1843);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 210, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fixed_parameterContext ------------------------------------------------------------------

CSharpParser::Fixed_parameterContext::Fixed_parameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Arg_declarationContext* CSharpParser::Fixed_parameterContext::arg_declaration() {
  return getRuleContext<CSharpParser::Arg_declarationContext>(0);
}

CSharpParser::AttributesContext* CSharpParser::Fixed_parameterContext::attributes() {
  return getRuleContext<CSharpParser::AttributesContext>(0);
}

CSharpParser::Parameter_modifierContext* CSharpParser::Fixed_parameterContext::parameter_modifier() {
  return getRuleContext<CSharpParser::Parameter_modifierContext>(0);
}

tree::TerminalNode* CSharpParser::Fixed_parameterContext::ARGLIST() {
  return getToken(CSharpParser::ARGLIST, 0);
}


size_t CSharpParser::Fixed_parameterContext::getRuleIndex() const {
  return CSharpParser::RuleFixed_parameter;
}

void CSharpParser::Fixed_parameterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFixed_parameter(this);
}

void CSharpParser::Fixed_parameterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFixed_parameter(this);
}

CSharpParser::Fixed_parameterContext* CSharpParser::fixed_parameter() {
  Fixed_parameterContext *_localctx = _tracker.createInstance<Fixed_parameterContext>(_ctx, getState());
  enterRule(_localctx, 284, CSharpParser::RuleFixed_parameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1852);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 213, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1845);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CSharpParser::OPEN_BRACKET) {
        setState(1844);
        attributes();
      }
      setState(1848);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 54) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 54)) & 1099578998785) != 0)) {
        setState(1847);
        parameter_modifier();
      }
      setState(1850);
      arg_declaration();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1851);
      match(CSharpParser::ARGLIST);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Parameter_modifierContext ------------------------------------------------------------------

CSharpParser::Parameter_modifierContext::Parameter_modifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Parameter_modifierContext::REF() {
  return getToken(CSharpParser::REF, 0);
}

tree::TerminalNode* CSharpParser::Parameter_modifierContext::OUT() {
  return getToken(CSharpParser::OUT, 0);
}

tree::TerminalNode* CSharpParser::Parameter_modifierContext::IN() {
  return getToken(CSharpParser::IN, 0);
}

tree::TerminalNode* CSharpParser::Parameter_modifierContext::THIS() {
  return getToken(CSharpParser::THIS, 0);
}


size_t CSharpParser::Parameter_modifierContext::getRuleIndex() const {
  return CSharpParser::RuleParameter_modifier;
}

void CSharpParser::Parameter_modifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParameter_modifier(this);
}

void CSharpParser::Parameter_modifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParameter_modifier(this);
}

CSharpParser::Parameter_modifierContext* CSharpParser::parameter_modifier() {
  Parameter_modifierContext *_localctx = _tracker.createInstance<Parameter_modifierContext>(_ctx, getState());
  enterRule(_localctx, 286, CSharpParser::RuleParameter_modifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1862);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 214, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1854);
      match(CSharpParser::REF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1855);
      match(CSharpParser::OUT);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1856);
      match(CSharpParser::IN);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1857);
      match(CSharpParser::REF);
      setState(1858);
      match(CSharpParser::THIS);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1859);
      match(CSharpParser::IN);
      setState(1860);
      match(CSharpParser::THIS);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1861);
      match(CSharpParser::THIS);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Parameter_arrayContext ------------------------------------------------------------------

CSharpParser::Parameter_arrayContext::Parameter_arrayContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Parameter_arrayContext::PARAMS() {
  return getToken(CSharpParser::PARAMS, 0);
}

CSharpParser::Array_typeContext* CSharpParser::Parameter_arrayContext::array_type() {
  return getRuleContext<CSharpParser::Array_typeContext>(0);
}

CSharpParser::IdentifierContext* CSharpParser::Parameter_arrayContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

CSharpParser::AttributesContext* CSharpParser::Parameter_arrayContext::attributes() {
  return getRuleContext<CSharpParser::AttributesContext>(0);
}


size_t CSharpParser::Parameter_arrayContext::getRuleIndex() const {
  return CSharpParser::RuleParameter_array;
}

void CSharpParser::Parameter_arrayContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParameter_array(this);
}

void CSharpParser::Parameter_arrayContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParameter_array(this);
}

CSharpParser::Parameter_arrayContext* CSharpParser::parameter_array() {
  Parameter_arrayContext *_localctx = _tracker.createInstance<Parameter_arrayContext>(_ctx, getState());
  enterRule(_localctx, 288, CSharpParser::RuleParameter_array);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1865);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::OPEN_BRACKET) {
      setState(1864);
      attributes();
    }
    setState(1867);
    match(CSharpParser::PARAMS);
    setState(1868);
    array_type();
    setState(1869);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Accessor_declarationsContext ------------------------------------------------------------------

CSharpParser::Accessor_declarationsContext::Accessor_declarationsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Accessor_declarationsContext::GET() {
  return getToken(CSharpParser::GET, 0);
}

CSharpParser::Accessor_bodyContext* CSharpParser::Accessor_declarationsContext::accessor_body() {
  return getRuleContext<CSharpParser::Accessor_bodyContext>(0);
}

tree::TerminalNode* CSharpParser::Accessor_declarationsContext::SET() {
  return getToken(CSharpParser::SET, 0);
}

CSharpParser::AttributesContext* CSharpParser::Accessor_declarationsContext::attributes() {
  return getRuleContext<CSharpParser::AttributesContext>(0);
}

CSharpParser::Accessor_modifierContext* CSharpParser::Accessor_declarationsContext::accessor_modifier() {
  return getRuleContext<CSharpParser::Accessor_modifierContext>(0);
}

CSharpParser::Set_accessor_declarationContext* CSharpParser::Accessor_declarationsContext::set_accessor_declaration() {
  return getRuleContext<CSharpParser::Set_accessor_declarationContext>(0);
}

CSharpParser::Get_accessor_declarationContext* CSharpParser::Accessor_declarationsContext::get_accessor_declaration() {
  return getRuleContext<CSharpParser::Get_accessor_declarationContext>(0);
}


size_t CSharpParser::Accessor_declarationsContext::getRuleIndex() const {
  return CSharpParser::RuleAccessor_declarations;
}

void CSharpParser::Accessor_declarationsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAccessor_declarations(this);
}

void CSharpParser::Accessor_declarationsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAccessor_declarations(this);
}

CSharpParser::Accessor_declarationsContext* CSharpParser::accessor_declarations() {
  Accessor_declarationsContext *_localctx = _tracker.createInstance<Accessor_declarationsContext>(_ctx, getState());
  enterRule(_localctx, 290, CSharpParser::RuleAccessor_declarations);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1872);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::OPEN_BRACKET) {
      setState(1871);
      antlrcpp::downCast<Accessor_declarationsContext *>(_localctx)->attrs = attributes();
    }
    setState(1875);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 57) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 57)) & 1572865) != 0)) {
      setState(1874);
      antlrcpp::downCast<Accessor_declarationsContext *>(_localctx)->mods = accessor_modifier();
    }
    setState(1887);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::GET: {
        setState(1877);
        match(CSharpParser::GET);
        setState(1878);
        accessor_body();
        setState(1880);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CSharpParser::INTERNAL || ((((_la - 76) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 76)) & 2251799813686275) != 0)) {
          setState(1879);
          set_accessor_declaration();
        }
        break;
      }

      case CSharpParser::SET: {
        setState(1882);
        match(CSharpParser::SET);
        setState(1883);
        accessor_body();
        setState(1885);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CSharpParser::GET

        || _la == CSharpParser::INTERNAL || ((((_la - 76) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 76)) & 2251799813685251) != 0)) {
          setState(1884);
          get_accessor_declaration();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Get_accessor_declarationContext ------------------------------------------------------------------

CSharpParser::Get_accessor_declarationContext::Get_accessor_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Get_accessor_declarationContext::GET() {
  return getToken(CSharpParser::GET, 0);
}

CSharpParser::Accessor_bodyContext* CSharpParser::Get_accessor_declarationContext::accessor_body() {
  return getRuleContext<CSharpParser::Accessor_bodyContext>(0);
}

CSharpParser::AttributesContext* CSharpParser::Get_accessor_declarationContext::attributes() {
  return getRuleContext<CSharpParser::AttributesContext>(0);
}

CSharpParser::Accessor_modifierContext* CSharpParser::Get_accessor_declarationContext::accessor_modifier() {
  return getRuleContext<CSharpParser::Accessor_modifierContext>(0);
}


size_t CSharpParser::Get_accessor_declarationContext::getRuleIndex() const {
  return CSharpParser::RuleGet_accessor_declaration;
}

void CSharpParser::Get_accessor_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGet_accessor_declaration(this);
}

void CSharpParser::Get_accessor_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGet_accessor_declaration(this);
}

CSharpParser::Get_accessor_declarationContext* CSharpParser::get_accessor_declaration() {
  Get_accessor_declarationContext *_localctx = _tracker.createInstance<Get_accessor_declarationContext>(_ctx, getState());
  enterRule(_localctx, 292, CSharpParser::RuleGet_accessor_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1890);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::OPEN_BRACKET) {
      setState(1889);
      attributes();
    }
    setState(1893);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 57) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 57)) & 1572865) != 0)) {
      setState(1892);
      accessor_modifier();
    }
    setState(1895);
    match(CSharpParser::GET);
    setState(1896);
    accessor_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Set_accessor_declarationContext ------------------------------------------------------------------

CSharpParser::Set_accessor_declarationContext::Set_accessor_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Set_accessor_declarationContext::SET() {
  return getToken(CSharpParser::SET, 0);
}

CSharpParser::Accessor_bodyContext* CSharpParser::Set_accessor_declarationContext::accessor_body() {
  return getRuleContext<CSharpParser::Accessor_bodyContext>(0);
}

CSharpParser::AttributesContext* CSharpParser::Set_accessor_declarationContext::attributes() {
  return getRuleContext<CSharpParser::AttributesContext>(0);
}

CSharpParser::Accessor_modifierContext* CSharpParser::Set_accessor_declarationContext::accessor_modifier() {
  return getRuleContext<CSharpParser::Accessor_modifierContext>(0);
}


size_t CSharpParser::Set_accessor_declarationContext::getRuleIndex() const {
  return CSharpParser::RuleSet_accessor_declaration;
}

void CSharpParser::Set_accessor_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSet_accessor_declaration(this);
}

void CSharpParser::Set_accessor_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSet_accessor_declaration(this);
}

CSharpParser::Set_accessor_declarationContext* CSharpParser::set_accessor_declaration() {
  Set_accessor_declarationContext *_localctx = _tracker.createInstance<Set_accessor_declarationContext>(_ctx, getState());
  enterRule(_localctx, 294, CSharpParser::RuleSet_accessor_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1899);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::OPEN_BRACKET) {
      setState(1898);
      attributes();
    }
    setState(1902);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 57) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 57)) & 1572865) != 0)) {
      setState(1901);
      accessor_modifier();
    }
    setState(1904);
    match(CSharpParser::SET);
    setState(1905);
    accessor_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Accessor_modifierContext ------------------------------------------------------------------

CSharpParser::Accessor_modifierContext::Accessor_modifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Accessor_modifierContext::PROTECTED() {
  return getToken(CSharpParser::PROTECTED, 0);
}

tree::TerminalNode* CSharpParser::Accessor_modifierContext::INTERNAL() {
  return getToken(CSharpParser::INTERNAL, 0);
}

tree::TerminalNode* CSharpParser::Accessor_modifierContext::PRIVATE() {
  return getToken(CSharpParser::PRIVATE, 0);
}


size_t CSharpParser::Accessor_modifierContext::getRuleIndex() const {
  return CSharpParser::RuleAccessor_modifier;
}

void CSharpParser::Accessor_modifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAccessor_modifier(this);
}

void CSharpParser::Accessor_modifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAccessor_modifier(this);
}

CSharpParser::Accessor_modifierContext* CSharpParser::accessor_modifier() {
  Accessor_modifierContext *_localctx = _tracker.createInstance<Accessor_modifierContext>(_ctx, getState());
  enterRule(_localctx, 296, CSharpParser::RuleAccessor_modifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1914);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 225, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1907);
      match(CSharpParser::PROTECTED);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1908);
      match(CSharpParser::INTERNAL);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1909);
      match(CSharpParser::PRIVATE);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1910);
      match(CSharpParser::PROTECTED);
      setState(1911);
      match(CSharpParser::INTERNAL);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1912);
      match(CSharpParser::INTERNAL);
      setState(1913);
      match(CSharpParser::PROTECTED);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Accessor_bodyContext ------------------------------------------------------------------

CSharpParser::Accessor_bodyContext::Accessor_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::BlockContext* CSharpParser::Accessor_bodyContext::block() {
  return getRuleContext<CSharpParser::BlockContext>(0);
}

tree::TerminalNode* CSharpParser::Accessor_bodyContext::SEMICOLON() {
  return getToken(CSharpParser::SEMICOLON, 0);
}


size_t CSharpParser::Accessor_bodyContext::getRuleIndex() const {
  return CSharpParser::RuleAccessor_body;
}

void CSharpParser::Accessor_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAccessor_body(this);
}

void CSharpParser::Accessor_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAccessor_body(this);
}

CSharpParser::Accessor_bodyContext* CSharpParser::accessor_body() {
  Accessor_bodyContext *_localctx = _tracker.createInstance<Accessor_bodyContext>(_ctx, getState());
  enterRule(_localctx, 298, CSharpParser::RuleAccessor_body);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1918);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::OPEN_BRACE: {
        enterOuterAlt(_localctx, 1);
        setState(1916);
        block();
        break;
      }

      case CSharpParser::SEMICOLON: {
        enterOuterAlt(_localctx, 2);
        setState(1917);
        match(CSharpParser::SEMICOLON);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Event_accessor_declarationsContext ------------------------------------------------------------------

CSharpParser::Event_accessor_declarationsContext::Event_accessor_declarationsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Event_accessor_declarationsContext::ADD() {
  return getToken(CSharpParser::ADD, 0);
}

CSharpParser::BlockContext* CSharpParser::Event_accessor_declarationsContext::block() {
  return getRuleContext<CSharpParser::BlockContext>(0);
}

CSharpParser::Remove_accessor_declarationContext* CSharpParser::Event_accessor_declarationsContext::remove_accessor_declaration() {
  return getRuleContext<CSharpParser::Remove_accessor_declarationContext>(0);
}

tree::TerminalNode* CSharpParser::Event_accessor_declarationsContext::REMOVE() {
  return getToken(CSharpParser::REMOVE, 0);
}

CSharpParser::Add_accessor_declarationContext* CSharpParser::Event_accessor_declarationsContext::add_accessor_declaration() {
  return getRuleContext<CSharpParser::Add_accessor_declarationContext>(0);
}

CSharpParser::AttributesContext* CSharpParser::Event_accessor_declarationsContext::attributes() {
  return getRuleContext<CSharpParser::AttributesContext>(0);
}


size_t CSharpParser::Event_accessor_declarationsContext::getRuleIndex() const {
  return CSharpParser::RuleEvent_accessor_declarations;
}

void CSharpParser::Event_accessor_declarationsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEvent_accessor_declarations(this);
}

void CSharpParser::Event_accessor_declarationsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEvent_accessor_declarations(this);
}

CSharpParser::Event_accessor_declarationsContext* CSharpParser::event_accessor_declarations() {
  Event_accessor_declarationsContext *_localctx = _tracker.createInstance<Event_accessor_declarationsContext>(_ctx, getState());
  enterRule(_localctx, 300, CSharpParser::RuleEvent_accessor_declarations);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1921);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::OPEN_BRACKET) {
      setState(1920);
      attributes();
    }
    setState(1931);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::ADD: {
        setState(1923);
        match(CSharpParser::ADD);
        setState(1924);
        block();
        setState(1925);
        remove_accessor_declaration();
        break;
      }

      case CSharpParser::REMOVE: {
        setState(1927);
        match(CSharpParser::REMOVE);
        setState(1928);
        block();
        setState(1929);
        add_accessor_declaration();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Add_accessor_declarationContext ------------------------------------------------------------------

CSharpParser::Add_accessor_declarationContext::Add_accessor_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Add_accessor_declarationContext::ADD() {
  return getToken(CSharpParser::ADD, 0);
}

CSharpParser::BlockContext* CSharpParser::Add_accessor_declarationContext::block() {
  return getRuleContext<CSharpParser::BlockContext>(0);
}

CSharpParser::AttributesContext* CSharpParser::Add_accessor_declarationContext::attributes() {
  return getRuleContext<CSharpParser::AttributesContext>(0);
}


size_t CSharpParser::Add_accessor_declarationContext::getRuleIndex() const {
  return CSharpParser::RuleAdd_accessor_declaration;
}

void CSharpParser::Add_accessor_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAdd_accessor_declaration(this);
}

void CSharpParser::Add_accessor_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAdd_accessor_declaration(this);
}

CSharpParser::Add_accessor_declarationContext* CSharpParser::add_accessor_declaration() {
  Add_accessor_declarationContext *_localctx = _tracker.createInstance<Add_accessor_declarationContext>(_ctx, getState());
  enterRule(_localctx, 302, CSharpParser::RuleAdd_accessor_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1934);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::OPEN_BRACKET) {
      setState(1933);
      attributes();
    }
    setState(1936);
    match(CSharpParser::ADD);
    setState(1937);
    block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Remove_accessor_declarationContext ------------------------------------------------------------------

CSharpParser::Remove_accessor_declarationContext::Remove_accessor_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Remove_accessor_declarationContext::REMOVE() {
  return getToken(CSharpParser::REMOVE, 0);
}

CSharpParser::BlockContext* CSharpParser::Remove_accessor_declarationContext::block() {
  return getRuleContext<CSharpParser::BlockContext>(0);
}

CSharpParser::AttributesContext* CSharpParser::Remove_accessor_declarationContext::attributes() {
  return getRuleContext<CSharpParser::AttributesContext>(0);
}


size_t CSharpParser::Remove_accessor_declarationContext::getRuleIndex() const {
  return CSharpParser::RuleRemove_accessor_declaration;
}

void CSharpParser::Remove_accessor_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRemove_accessor_declaration(this);
}

void CSharpParser::Remove_accessor_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRemove_accessor_declaration(this);
}

CSharpParser::Remove_accessor_declarationContext* CSharpParser::remove_accessor_declaration() {
  Remove_accessor_declarationContext *_localctx = _tracker.createInstance<Remove_accessor_declarationContext>(_ctx, getState());
  enterRule(_localctx, 304, CSharpParser::RuleRemove_accessor_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1940);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::OPEN_BRACKET) {
      setState(1939);
      attributes();
    }
    setState(1942);
    match(CSharpParser::REMOVE);
    setState(1943);
    block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Overloadable_operatorContext ------------------------------------------------------------------

CSharpParser::Overloadable_operatorContext::Overloadable_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Overloadable_operatorContext::PLUS() {
  return getToken(CSharpParser::PLUS, 0);
}

tree::TerminalNode* CSharpParser::Overloadable_operatorContext::MINUS() {
  return getToken(CSharpParser::MINUS, 0);
}

tree::TerminalNode* CSharpParser::Overloadable_operatorContext::BANG() {
  return getToken(CSharpParser::BANG, 0);
}

tree::TerminalNode* CSharpParser::Overloadable_operatorContext::TILDE() {
  return getToken(CSharpParser::TILDE, 0);
}

tree::TerminalNode* CSharpParser::Overloadable_operatorContext::OP_INC() {
  return getToken(CSharpParser::OP_INC, 0);
}

tree::TerminalNode* CSharpParser::Overloadable_operatorContext::OP_DEC() {
  return getToken(CSharpParser::OP_DEC, 0);
}

tree::TerminalNode* CSharpParser::Overloadable_operatorContext::TRUE() {
  return getToken(CSharpParser::TRUE, 0);
}

tree::TerminalNode* CSharpParser::Overloadable_operatorContext::FALSE() {
  return getToken(CSharpParser::FALSE, 0);
}

tree::TerminalNode* CSharpParser::Overloadable_operatorContext::STAR() {
  return getToken(CSharpParser::STAR, 0);
}

tree::TerminalNode* CSharpParser::Overloadable_operatorContext::DIV() {
  return getToken(CSharpParser::DIV, 0);
}

tree::TerminalNode* CSharpParser::Overloadable_operatorContext::PERCENT() {
  return getToken(CSharpParser::PERCENT, 0);
}

tree::TerminalNode* CSharpParser::Overloadable_operatorContext::AMP() {
  return getToken(CSharpParser::AMP, 0);
}

tree::TerminalNode* CSharpParser::Overloadable_operatorContext::BITWISE_OR() {
  return getToken(CSharpParser::BITWISE_OR, 0);
}

tree::TerminalNode* CSharpParser::Overloadable_operatorContext::CARET() {
  return getToken(CSharpParser::CARET, 0);
}

tree::TerminalNode* CSharpParser::Overloadable_operatorContext::OP_LEFT_SHIFT() {
  return getToken(CSharpParser::OP_LEFT_SHIFT, 0);
}

CSharpParser::Right_shiftContext* CSharpParser::Overloadable_operatorContext::right_shift() {
  return getRuleContext<CSharpParser::Right_shiftContext>(0);
}

tree::TerminalNode* CSharpParser::Overloadable_operatorContext::OP_EQ() {
  return getToken(CSharpParser::OP_EQ, 0);
}

tree::TerminalNode* CSharpParser::Overloadable_operatorContext::OP_NE() {
  return getToken(CSharpParser::OP_NE, 0);
}

tree::TerminalNode* CSharpParser::Overloadable_operatorContext::GT() {
  return getToken(CSharpParser::GT, 0);
}

tree::TerminalNode* CSharpParser::Overloadable_operatorContext::LT() {
  return getToken(CSharpParser::LT, 0);
}

tree::TerminalNode* CSharpParser::Overloadable_operatorContext::OP_GE() {
  return getToken(CSharpParser::OP_GE, 0);
}

tree::TerminalNode* CSharpParser::Overloadable_operatorContext::OP_LE() {
  return getToken(CSharpParser::OP_LE, 0);
}


size_t CSharpParser::Overloadable_operatorContext::getRuleIndex() const {
  return CSharpParser::RuleOverloadable_operator;
}

void CSharpParser::Overloadable_operatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOverloadable_operator(this);
}

void CSharpParser::Overloadable_operatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOverloadable_operator(this);
}

CSharpParser::Overloadable_operatorContext* CSharpParser::overloadable_operator() {
  Overloadable_operatorContext *_localctx = _tracker.createInstance<Overloadable_operatorContext>(_ctx, getState());
  enterRule(_localctx, 306, CSharpParser::RuleOverloadable_operator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1967);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 231, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1945);
      match(CSharpParser::PLUS);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1946);
      match(CSharpParser::MINUS);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1947);
      match(CSharpParser::BANG);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1948);
      match(CSharpParser::TILDE);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1949);
      match(CSharpParser::OP_INC);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1950);
      match(CSharpParser::OP_DEC);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1951);
      match(CSharpParser::TRUE);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1952);
      match(CSharpParser::FALSE);
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1953);
      match(CSharpParser::STAR);
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(1954);
      match(CSharpParser::DIV);
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(1955);
      match(CSharpParser::PERCENT);
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(1956);
      match(CSharpParser::AMP);
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(1957);
      match(CSharpParser::BITWISE_OR);
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(1958);
      match(CSharpParser::CARET);
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(1959);
      match(CSharpParser::OP_LEFT_SHIFT);
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(1960);
      right_shift();
      break;
    }

    case 17: {
      enterOuterAlt(_localctx, 17);
      setState(1961);
      match(CSharpParser::OP_EQ);
      break;
    }

    case 18: {
      enterOuterAlt(_localctx, 18);
      setState(1962);
      match(CSharpParser::OP_NE);
      break;
    }

    case 19: {
      enterOuterAlt(_localctx, 19);
      setState(1963);
      match(CSharpParser::GT);
      break;
    }

    case 20: {
      enterOuterAlt(_localctx, 20);
      setState(1964);
      match(CSharpParser::LT);
      break;
    }

    case 21: {
      enterOuterAlt(_localctx, 21);
      setState(1965);
      match(CSharpParser::OP_GE);
      break;
    }

    case 22: {
      enterOuterAlt(_localctx, 22);
      setState(1966);
      match(CSharpParser::OP_LE);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Conversion_operator_declaratorContext ------------------------------------------------------------------

CSharpParser::Conversion_operator_declaratorContext::Conversion_operator_declaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Conversion_operator_declaratorContext::OPERATOR() {
  return getToken(CSharpParser::OPERATOR, 0);
}

CSharpParser::Type_Context* CSharpParser::Conversion_operator_declaratorContext::type_() {
  return getRuleContext<CSharpParser::Type_Context>(0);
}

tree::TerminalNode* CSharpParser::Conversion_operator_declaratorContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

CSharpParser::Arg_declarationContext* CSharpParser::Conversion_operator_declaratorContext::arg_declaration() {
  return getRuleContext<CSharpParser::Arg_declarationContext>(0);
}

tree::TerminalNode* CSharpParser::Conversion_operator_declaratorContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}

tree::TerminalNode* CSharpParser::Conversion_operator_declaratorContext::IMPLICIT() {
  return getToken(CSharpParser::IMPLICIT, 0);
}

tree::TerminalNode* CSharpParser::Conversion_operator_declaratorContext::EXPLICIT() {
  return getToken(CSharpParser::EXPLICIT, 0);
}


size_t CSharpParser::Conversion_operator_declaratorContext::getRuleIndex() const {
  return CSharpParser::RuleConversion_operator_declarator;
}

void CSharpParser::Conversion_operator_declaratorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConversion_operator_declarator(this);
}

void CSharpParser::Conversion_operator_declaratorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConversion_operator_declarator(this);
}

CSharpParser::Conversion_operator_declaratorContext* CSharpParser::conversion_operator_declarator() {
  Conversion_operator_declaratorContext *_localctx = _tracker.createInstance<Conversion_operator_declaratorContext>(_ctx, getState());
  enterRule(_localctx, 308, CSharpParser::RuleConversion_operator_declarator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1969);
    _la = _input->LA(1);
    if (!(_la == CSharpParser::EXPLICIT

    || _la == CSharpParser::IMPLICIT)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(1970);
    match(CSharpParser::OPERATOR);
    setState(1971);
    type_();
    setState(1972);
    match(CSharpParser::OPEN_PARENS);
    setState(1973);
    arg_declaration();
    setState(1974);
    match(CSharpParser::CLOSE_PARENS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Constructor_initializerContext ------------------------------------------------------------------

CSharpParser::Constructor_initializerContext::Constructor_initializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Constructor_initializerContext::COLON() {
  return getToken(CSharpParser::COLON, 0);
}

tree::TerminalNode* CSharpParser::Constructor_initializerContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

tree::TerminalNode* CSharpParser::Constructor_initializerContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}

tree::TerminalNode* CSharpParser::Constructor_initializerContext::BASE() {
  return getToken(CSharpParser::BASE, 0);
}

tree::TerminalNode* CSharpParser::Constructor_initializerContext::THIS() {
  return getToken(CSharpParser::THIS, 0);
}

CSharpParser::Argument_listContext* CSharpParser::Constructor_initializerContext::argument_list() {
  return getRuleContext<CSharpParser::Argument_listContext>(0);
}


size_t CSharpParser::Constructor_initializerContext::getRuleIndex() const {
  return CSharpParser::RuleConstructor_initializer;
}

void CSharpParser::Constructor_initializerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstructor_initializer(this);
}

void CSharpParser::Constructor_initializerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstructor_initializer(this);
}

CSharpParser::Constructor_initializerContext* CSharpParser::constructor_initializer() {
  Constructor_initializerContext *_localctx = _tracker.createInstance<Constructor_initializerContext>(_ctx, getState());
  enterRule(_localctx, 310, CSharpParser::RuleConstructor_initializer);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1976);
    match(CSharpParser::COLON);
    setState(1977);
    _la = _input->LA(1);
    if (!(_la == CSharpParser::BASE || _la == CSharpParser::THIS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(1978);
    match(CSharpParser::OPEN_PARENS);
    setState(1980);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -5419197809667089408) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 2305514793348041149) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 129)) & 4398059153857) != 0)) {
      setState(1979);
      argument_list();
    }
    setState(1982);
    match(CSharpParser::CLOSE_PARENS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BodyContext ------------------------------------------------------------------

CSharpParser::BodyContext::BodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::BlockContext* CSharpParser::BodyContext::block() {
  return getRuleContext<CSharpParser::BlockContext>(0);
}

tree::TerminalNode* CSharpParser::BodyContext::SEMICOLON() {
  return getToken(CSharpParser::SEMICOLON, 0);
}


size_t CSharpParser::BodyContext::getRuleIndex() const {
  return CSharpParser::RuleBody;
}

void CSharpParser::BodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBody(this);
}

void CSharpParser::BodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBody(this);
}

CSharpParser::BodyContext* CSharpParser::body() {
  BodyContext *_localctx = _tracker.createInstance<BodyContext>(_ctx, getState());
  enterRule(_localctx, 312, CSharpParser::RuleBody);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1986);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::OPEN_BRACE: {
        enterOuterAlt(_localctx, 1);
        setState(1984);
        block();
        break;
      }

      case CSharpParser::SEMICOLON: {
        enterOuterAlt(_localctx, 2);
        setState(1985);
        match(CSharpParser::SEMICOLON);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Struct_interfacesContext ------------------------------------------------------------------

CSharpParser::Struct_interfacesContext::Struct_interfacesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Struct_interfacesContext::COLON() {
  return getToken(CSharpParser::COLON, 0);
}

CSharpParser::Interface_type_listContext* CSharpParser::Struct_interfacesContext::interface_type_list() {
  return getRuleContext<CSharpParser::Interface_type_listContext>(0);
}


size_t CSharpParser::Struct_interfacesContext::getRuleIndex() const {
  return CSharpParser::RuleStruct_interfaces;
}

void CSharpParser::Struct_interfacesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStruct_interfaces(this);
}

void CSharpParser::Struct_interfacesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStruct_interfaces(this);
}

CSharpParser::Struct_interfacesContext* CSharpParser::struct_interfaces() {
  Struct_interfacesContext *_localctx = _tracker.createInstance<Struct_interfacesContext>(_ctx, getState());
  enterRule(_localctx, 314, CSharpParser::RuleStruct_interfaces);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1988);
    match(CSharpParser::COLON);
    setState(1989);
    interface_type_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Struct_bodyContext ------------------------------------------------------------------

CSharpParser::Struct_bodyContext::Struct_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Struct_bodyContext::OPEN_BRACE() {
  return getToken(CSharpParser::OPEN_BRACE, 0);
}

tree::TerminalNode* CSharpParser::Struct_bodyContext::CLOSE_BRACE() {
  return getToken(CSharpParser::CLOSE_BRACE, 0);
}

std::vector<CSharpParser::Struct_member_declarationContext *> CSharpParser::Struct_bodyContext::struct_member_declaration() {
  return getRuleContexts<CSharpParser::Struct_member_declarationContext>();
}

CSharpParser::Struct_member_declarationContext* CSharpParser::Struct_bodyContext::struct_member_declaration(size_t i) {
  return getRuleContext<CSharpParser::Struct_member_declarationContext>(i);
}


size_t CSharpParser::Struct_bodyContext::getRuleIndex() const {
  return CSharpParser::RuleStruct_body;
}

void CSharpParser::Struct_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStruct_body(this);
}

void CSharpParser::Struct_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStruct_body(this);
}

CSharpParser::Struct_bodyContext* CSharpParser::struct_body() {
  Struct_bodyContext *_localctx = _tracker.createInstance<Struct_bodyContext>(_ctx, getState());
  enterRule(_localctx, 316, CSharpParser::RuleStruct_body);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1991);
    match(CSharpParser::OPEN_BRACE);
    setState(1995);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 9) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 9)) & 6547061340561119983) != 0) || ((((_la - 73) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 73)) & 90075836208545277) != 0)) {
      setState(1992);
      struct_member_declaration();
      setState(1997);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1998);
    match(CSharpParser::CLOSE_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Struct_member_declarationContext ------------------------------------------------------------------

CSharpParser::Struct_member_declarationContext::Struct_member_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Common_member_declarationContext* CSharpParser::Struct_member_declarationContext::common_member_declaration() {
  return getRuleContext<CSharpParser::Common_member_declarationContext>(0);
}

tree::TerminalNode* CSharpParser::Struct_member_declarationContext::FIXED() {
  return getToken(CSharpParser::FIXED, 0);
}

CSharpParser::Type_Context* CSharpParser::Struct_member_declarationContext::type_() {
  return getRuleContext<CSharpParser::Type_Context>(0);
}

tree::TerminalNode* CSharpParser::Struct_member_declarationContext::SEMICOLON() {
  return getToken(CSharpParser::SEMICOLON, 0);
}

CSharpParser::AttributesContext* CSharpParser::Struct_member_declarationContext::attributes() {
  return getRuleContext<CSharpParser::AttributesContext>(0);
}

CSharpParser::All_member_modifiersContext* CSharpParser::Struct_member_declarationContext::all_member_modifiers() {
  return getRuleContext<CSharpParser::All_member_modifiersContext>(0);
}

std::vector<CSharpParser::Fixed_size_buffer_declaratorContext *> CSharpParser::Struct_member_declarationContext::fixed_size_buffer_declarator() {
  return getRuleContexts<CSharpParser::Fixed_size_buffer_declaratorContext>();
}

CSharpParser::Fixed_size_buffer_declaratorContext* CSharpParser::Struct_member_declarationContext::fixed_size_buffer_declarator(size_t i) {
  return getRuleContext<CSharpParser::Fixed_size_buffer_declaratorContext>(i);
}


size_t CSharpParser::Struct_member_declarationContext::getRuleIndex() const {
  return CSharpParser::RuleStruct_member_declaration;
}

void CSharpParser::Struct_member_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStruct_member_declaration(this);
}

void CSharpParser::Struct_member_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStruct_member_declaration(this);
}

CSharpParser::Struct_member_declarationContext* CSharpParser::struct_member_declaration() {
  Struct_member_declarationContext *_localctx = _tracker.createInstance<Struct_member_declarationContext>(_ctx, getState());
  enterRule(_localctx, 318, CSharpParser::RuleStruct_member_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2001);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::OPEN_BRACKET) {
      setState(2000);
      attributes();
    }
    setState(2004);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 236, _ctx)) {
    case 1: {
      setState(2003);
      all_member_modifiers();
      break;
    }

    default:
      break;
    }
    setState(2016);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::ADD:
      case CSharpParser::ALIAS:
      case CSharpParser::ARGLIST:
      case CSharpParser::ASCENDING:
      case CSharpParser::ASYNC:
      case CSharpParser::AWAIT:
      case CSharpParser::BOOL:
      case CSharpParser::BY:
      case CSharpParser::BYTE:
      case CSharpParser::CHAR:
      case CSharpParser::CLASS:
      case CSharpParser::CONST:
      case CSharpParser::DECIMAL:
      case CSharpParser::DELEGATE:
      case CSharpParser::DESCENDING:
      case CSharpParser::DOUBLE:
      case CSharpParser::DYNAMIC:
      case CSharpParser::ENUM:
      case CSharpParser::EQUALS:
      case CSharpParser::EVENT:
      case CSharpParser::EXPLICIT:
      case CSharpParser::FLOAT:
      case CSharpParser::FROM:
      case CSharpParser::GET:
      case CSharpParser::GROUP:
      case CSharpParser::IMPLICIT:
      case CSharpParser::INT:
      case CSharpParser::INTERFACE:
      case CSharpParser::INTO:
      case CSharpParser::JOIN:
      case CSharpParser::LET:
      case CSharpParser::LONG:
      case CSharpParser::NAMEOF:
      case CSharpParser::OBJECT:
      case CSharpParser::ON:
      case CSharpParser::ORDERBY:
      case CSharpParser::PARTIAL:
      case CSharpParser::READONLY:
      case CSharpParser::REF:
      case CSharpParser::REMOVE:
      case CSharpParser::SBYTE:
      case CSharpParser::SELECT:
      case CSharpParser::SET:
      case CSharpParser::SHORT:
      case CSharpParser::STRING:
      case CSharpParser::STRUCT:
      case CSharpParser::UINT:
      case CSharpParser::ULONG:
      case CSharpParser::UNMANAGED:
      case CSharpParser::USHORT:
      case CSharpParser::VAR:
      case CSharpParser::VOID:
      case CSharpParser::WHEN:
      case CSharpParser::WHERE:
      case CSharpParser::YIELD:
      case CSharpParser::IDENTIFIER:
      case CSharpParser::OPEN_PARENS: {
        setState(2006);
        common_member_declaration();
        break;
      }

      case CSharpParser::FIXED: {
        setState(2007);
        match(CSharpParser::FIXED);
        setState(2008);
        type_();
        setState(2010); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(2009);
          fixed_size_buffer_declarator();
          setState(2012); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 3750091428249852928) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & 1904629023639713) != 0));
        setState(2014);
        match(CSharpParser::SEMICOLON);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Array_typeContext ------------------------------------------------------------------

CSharpParser::Array_typeContext::Array_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Base_typeContext* CSharpParser::Array_typeContext::base_type() {
  return getRuleContext<CSharpParser::Base_typeContext>(0);
}

std::vector<CSharpParser::Rank_specifierContext *> CSharpParser::Array_typeContext::rank_specifier() {
  return getRuleContexts<CSharpParser::Rank_specifierContext>();
}

CSharpParser::Rank_specifierContext* CSharpParser::Array_typeContext::rank_specifier(size_t i) {
  return getRuleContext<CSharpParser::Rank_specifierContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::Array_typeContext::STAR() {
  return getTokens(CSharpParser::STAR);
}

tree::TerminalNode* CSharpParser::Array_typeContext::STAR(size_t i) {
  return getToken(CSharpParser::STAR, i);
}

std::vector<tree::TerminalNode *> CSharpParser::Array_typeContext::INTERR() {
  return getTokens(CSharpParser::INTERR);
}

tree::TerminalNode* CSharpParser::Array_typeContext::INTERR(size_t i) {
  return getToken(CSharpParser::INTERR, i);
}


size_t CSharpParser::Array_typeContext::getRuleIndex() const {
  return CSharpParser::RuleArray_type;
}

void CSharpParser::Array_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArray_type(this);
}

void CSharpParser::Array_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArray_type(this);
}

CSharpParser::Array_typeContext* CSharpParser::array_type() {
  Array_typeContext *_localctx = _tracker.createInstance<Array_typeContext>(_ctx, getState());
  enterRule(_localctx, 320, CSharpParser::RuleArray_type);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2018);
    base_type();
    setState(2026); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(2022);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == CSharpParser::STAR

      || _la == CSharpParser::INTERR) {
        setState(2019);
        _la = _input->LA(1);
        if (!(_la == CSharpParser::STAR

        || _la == CSharpParser::INTERR)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(2024);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2025);
      rank_specifier();
      setState(2028); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (((((_la - 127) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 127)) & 2098177) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Rank_specifierContext ------------------------------------------------------------------

CSharpParser::Rank_specifierContext::Rank_specifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Rank_specifierContext::OPEN_BRACKET() {
  return getToken(CSharpParser::OPEN_BRACKET, 0);
}

tree::TerminalNode* CSharpParser::Rank_specifierContext::CLOSE_BRACKET() {
  return getToken(CSharpParser::CLOSE_BRACKET, 0);
}

std::vector<tree::TerminalNode *> CSharpParser::Rank_specifierContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::Rank_specifierContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}


size_t CSharpParser::Rank_specifierContext::getRuleIndex() const {
  return CSharpParser::RuleRank_specifier;
}

void CSharpParser::Rank_specifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRank_specifier(this);
}

void CSharpParser::Rank_specifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRank_specifier(this);
}

CSharpParser::Rank_specifierContext* CSharpParser::rank_specifier() {
  Rank_specifierContext *_localctx = _tracker.createInstance<Rank_specifierContext>(_ctx, getState());
  enterRule(_localctx, 322, CSharpParser::RuleRank_specifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2030);
    match(CSharpParser::OPEN_BRACKET);
    setState(2034);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CSharpParser::COMMA) {
      setState(2031);
      match(CSharpParser::COMMA);
      setState(2036);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2037);
    match(CSharpParser::CLOSE_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Array_initializerContext ------------------------------------------------------------------

CSharpParser::Array_initializerContext::Array_initializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Array_initializerContext::OPEN_BRACE() {
  return getToken(CSharpParser::OPEN_BRACE, 0);
}

tree::TerminalNode* CSharpParser::Array_initializerContext::CLOSE_BRACE() {
  return getToken(CSharpParser::CLOSE_BRACE, 0);
}

std::vector<CSharpParser::Variable_initializerContext *> CSharpParser::Array_initializerContext::variable_initializer() {
  return getRuleContexts<CSharpParser::Variable_initializerContext>();
}

CSharpParser::Variable_initializerContext* CSharpParser::Array_initializerContext::variable_initializer(size_t i) {
  return getRuleContext<CSharpParser::Variable_initializerContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::Array_initializerContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::Array_initializerContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}


size_t CSharpParser::Array_initializerContext::getRuleIndex() const {
  return CSharpParser::RuleArray_initializer;
}

void CSharpParser::Array_initializerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArray_initializer(this);
}

void CSharpParser::Array_initializerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArray_initializer(this);
}

CSharpParser::Array_initializerContext* CSharpParser::array_initializer() {
  Array_initializerContext *_localctx = _tracker.createInstance<Array_initializerContext>(_ctx, getState());
  enterRule(_localctx, 324, CSharpParser::RuleArray_initializer);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2039);
    match(CSharpParser::OPEN_BRACE);
    setState(2051);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -5437212208176571392) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 4611340210375690429) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 129)) & 4398059153857) != 0)) {
      setState(2040);
      variable_initializer();
      setState(2045);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 242, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(2041);
          match(CSharpParser::COMMA);
          setState(2042);
          variable_initializer(); 
        }
        setState(2047);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 242, _ctx);
      }
      setState(2049);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CSharpParser::COMMA) {
        setState(2048);
        match(CSharpParser::COMMA);
      }
    }
    setState(2053);
    match(CSharpParser::CLOSE_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Variant_type_parameter_listContext ------------------------------------------------------------------

CSharpParser::Variant_type_parameter_listContext::Variant_type_parameter_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Variant_type_parameter_listContext::LT() {
  return getToken(CSharpParser::LT, 0);
}

std::vector<CSharpParser::Variant_type_parameterContext *> CSharpParser::Variant_type_parameter_listContext::variant_type_parameter() {
  return getRuleContexts<CSharpParser::Variant_type_parameterContext>();
}

CSharpParser::Variant_type_parameterContext* CSharpParser::Variant_type_parameter_listContext::variant_type_parameter(size_t i) {
  return getRuleContext<CSharpParser::Variant_type_parameterContext>(i);
}

tree::TerminalNode* CSharpParser::Variant_type_parameter_listContext::GT() {
  return getToken(CSharpParser::GT, 0);
}

std::vector<tree::TerminalNode *> CSharpParser::Variant_type_parameter_listContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::Variant_type_parameter_listContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}


size_t CSharpParser::Variant_type_parameter_listContext::getRuleIndex() const {
  return CSharpParser::RuleVariant_type_parameter_list;
}

void CSharpParser::Variant_type_parameter_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariant_type_parameter_list(this);
}

void CSharpParser::Variant_type_parameter_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariant_type_parameter_list(this);
}

CSharpParser::Variant_type_parameter_listContext* CSharpParser::variant_type_parameter_list() {
  Variant_type_parameter_listContext *_localctx = _tracker.createInstance<Variant_type_parameter_listContext>(_ctx, getState());
  enterRule(_localctx, 326, CSharpParser::RuleVariant_type_parameter_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2055);
    match(CSharpParser::LT);
    setState(2056);
    variant_type_parameter();
    setState(2061);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CSharpParser::COMMA) {
      setState(2057);
      match(CSharpParser::COMMA);
      setState(2058);
      variant_type_parameter();
      setState(2063);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2064);
    match(CSharpParser::GT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Variant_type_parameterContext ------------------------------------------------------------------

CSharpParser::Variant_type_parameterContext::Variant_type_parameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::IdentifierContext* CSharpParser::Variant_type_parameterContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

CSharpParser::AttributesContext* CSharpParser::Variant_type_parameterContext::attributes() {
  return getRuleContext<CSharpParser::AttributesContext>(0);
}

CSharpParser::Variance_annotationContext* CSharpParser::Variant_type_parameterContext::variance_annotation() {
  return getRuleContext<CSharpParser::Variance_annotationContext>(0);
}


size_t CSharpParser::Variant_type_parameterContext::getRuleIndex() const {
  return CSharpParser::RuleVariant_type_parameter;
}

void CSharpParser::Variant_type_parameterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariant_type_parameter(this);
}

void CSharpParser::Variant_type_parameterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariant_type_parameter(this);
}

CSharpParser::Variant_type_parameterContext* CSharpParser::variant_type_parameter() {
  Variant_type_parameterContext *_localctx = _tracker.createInstance<Variant_type_parameterContext>(_ctx, getState());
  enterRule(_localctx, 328, CSharpParser::RuleVariant_type_parameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2067);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::OPEN_BRACKET) {
      setState(2066);
      attributes();
    }
    setState(2070);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::IN

    || _la == CSharpParser::OUT) {
      setState(2069);
      variance_annotation();
    }
    setState(2072);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Variance_annotationContext ------------------------------------------------------------------

CSharpParser::Variance_annotationContext::Variance_annotationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Variance_annotationContext::IN() {
  return getToken(CSharpParser::IN, 0);
}

tree::TerminalNode* CSharpParser::Variance_annotationContext::OUT() {
  return getToken(CSharpParser::OUT, 0);
}


size_t CSharpParser::Variance_annotationContext::getRuleIndex() const {
  return CSharpParser::RuleVariance_annotation;
}

void CSharpParser::Variance_annotationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariance_annotation(this);
}

void CSharpParser::Variance_annotationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariance_annotation(this);
}

CSharpParser::Variance_annotationContext* CSharpParser::variance_annotation() {
  Variance_annotationContext *_localctx = _tracker.createInstance<Variance_annotationContext>(_ctx, getState());
  enterRule(_localctx, 330, CSharpParser::RuleVariance_annotation);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2074);
    _la = _input->LA(1);
    if (!(_la == CSharpParser::IN

    || _la == CSharpParser::OUT)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Interface_baseContext ------------------------------------------------------------------

CSharpParser::Interface_baseContext::Interface_baseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Interface_baseContext::COLON() {
  return getToken(CSharpParser::COLON, 0);
}

CSharpParser::Interface_type_listContext* CSharpParser::Interface_baseContext::interface_type_list() {
  return getRuleContext<CSharpParser::Interface_type_listContext>(0);
}


size_t CSharpParser::Interface_baseContext::getRuleIndex() const {
  return CSharpParser::RuleInterface_base;
}

void CSharpParser::Interface_baseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterface_base(this);
}

void CSharpParser::Interface_baseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterface_base(this);
}

CSharpParser::Interface_baseContext* CSharpParser::interface_base() {
  Interface_baseContext *_localctx = _tracker.createInstance<Interface_baseContext>(_ctx, getState());
  enterRule(_localctx, 332, CSharpParser::RuleInterface_base);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2076);
    match(CSharpParser::COLON);
    setState(2077);
    interface_type_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Interface_bodyContext ------------------------------------------------------------------

CSharpParser::Interface_bodyContext::Interface_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Interface_bodyContext::OPEN_BRACE() {
  return getToken(CSharpParser::OPEN_BRACE, 0);
}

tree::TerminalNode* CSharpParser::Interface_bodyContext::CLOSE_BRACE() {
  return getToken(CSharpParser::CLOSE_BRACE, 0);
}

std::vector<CSharpParser::Interface_member_declarationContext *> CSharpParser::Interface_bodyContext::interface_member_declaration() {
  return getRuleContexts<CSharpParser::Interface_member_declarationContext>();
}

CSharpParser::Interface_member_declarationContext* CSharpParser::Interface_bodyContext::interface_member_declaration(size_t i) {
  return getRuleContext<CSharpParser::Interface_member_declarationContext>(i);
}


size_t CSharpParser::Interface_bodyContext::getRuleIndex() const {
  return CSharpParser::RuleInterface_body;
}

void CSharpParser::Interface_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterface_body(this);
}

void CSharpParser::Interface_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterface_body(this);
}

CSharpParser::Interface_bodyContext* CSharpParser::interface_body() {
  Interface_bodyContext *_localctx = _tracker.createInstance<Interface_bodyContext>(_ctx, getState());
  enterRule(_localctx, 334, CSharpParser::RuleInterface_body);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2079);
    match(CSharpParser::OPEN_BRACE);
    setState(2083);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 10) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 10)) & 3273310747417398647) != 0) || ((((_la - 75) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 75)) & 22518937577135473) != 0)) {
      setState(2080);
      interface_member_declaration();
      setState(2085);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2086);
    match(CSharpParser::CLOSE_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Interface_member_declarationContext ------------------------------------------------------------------

CSharpParser::Interface_member_declarationContext::Interface_member_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Type_Context* CSharpParser::Interface_member_declarationContext::type_() {
  return getRuleContext<CSharpParser::Type_Context>(0);
}

tree::TerminalNode* CSharpParser::Interface_member_declarationContext::VOID() {
  return getToken(CSharpParser::VOID, 0);
}

CSharpParser::IdentifierContext* CSharpParser::Interface_member_declarationContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

tree::TerminalNode* CSharpParser::Interface_member_declarationContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

tree::TerminalNode* CSharpParser::Interface_member_declarationContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}

tree::TerminalNode* CSharpParser::Interface_member_declarationContext::SEMICOLON() {
  return getToken(CSharpParser::SEMICOLON, 0);
}

tree::TerminalNode* CSharpParser::Interface_member_declarationContext::EVENT() {
  return getToken(CSharpParser::EVENT, 0);
}

CSharpParser::AttributesContext* CSharpParser::Interface_member_declarationContext::attributes() {
  return getRuleContext<CSharpParser::AttributesContext>(0);
}

tree::TerminalNode* CSharpParser::Interface_member_declarationContext::NEW() {
  return getToken(CSharpParser::NEW, 0);
}

tree::TerminalNode* CSharpParser::Interface_member_declarationContext::OPEN_BRACE() {
  return getToken(CSharpParser::OPEN_BRACE, 0);
}

CSharpParser::Interface_accessorsContext* CSharpParser::Interface_member_declarationContext::interface_accessors() {
  return getRuleContext<CSharpParser::Interface_accessorsContext>(0);
}

tree::TerminalNode* CSharpParser::Interface_member_declarationContext::CLOSE_BRACE() {
  return getToken(CSharpParser::CLOSE_BRACE, 0);
}

tree::TerminalNode* CSharpParser::Interface_member_declarationContext::THIS() {
  return getToken(CSharpParser::THIS, 0);
}

tree::TerminalNode* CSharpParser::Interface_member_declarationContext::OPEN_BRACKET() {
  return getToken(CSharpParser::OPEN_BRACKET, 0);
}

CSharpParser::Formal_parameter_listContext* CSharpParser::Interface_member_declarationContext::formal_parameter_list() {
  return getRuleContext<CSharpParser::Formal_parameter_listContext>(0);
}

tree::TerminalNode* CSharpParser::Interface_member_declarationContext::CLOSE_BRACKET() {
  return getToken(CSharpParser::CLOSE_BRACKET, 0);
}

tree::TerminalNode* CSharpParser::Interface_member_declarationContext::UNSAFE() {
  return getToken(CSharpParser::UNSAFE, 0);
}

tree::TerminalNode* CSharpParser::Interface_member_declarationContext::REF() {
  return getToken(CSharpParser::REF, 0);
}

tree::TerminalNode* CSharpParser::Interface_member_declarationContext::READONLY() {
  return getToken(CSharpParser::READONLY, 0);
}

CSharpParser::Type_parameter_listContext* CSharpParser::Interface_member_declarationContext::type_parameter_list() {
  return getRuleContext<CSharpParser::Type_parameter_listContext>(0);
}

CSharpParser::Type_parameter_constraints_clausesContext* CSharpParser::Interface_member_declarationContext::type_parameter_constraints_clauses() {
  return getRuleContext<CSharpParser::Type_parameter_constraints_clausesContext>(0);
}


size_t CSharpParser::Interface_member_declarationContext::getRuleIndex() const {
  return CSharpParser::RuleInterface_member_declaration;
}

void CSharpParser::Interface_member_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterface_member_declaration(this);
}

void CSharpParser::Interface_member_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterface_member_declaration(this);
}

CSharpParser::Interface_member_declarationContext* CSharpParser::interface_member_declaration() {
  Interface_member_declarationContext *_localctx = _tracker.createInstance<Interface_member_declarationContext>(_ctx, getState());
  enterRule(_localctx, 336, CSharpParser::RuleInterface_member_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2089);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::OPEN_BRACKET) {
      setState(2088);
      attributes();
    }
    setState(2092);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::NEW) {
      setState(2091);
      match(CSharpParser::NEW);
    }
    setState(2157);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 261, _ctx)) {
    case 1: {
      setState(2095);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CSharpParser::UNSAFE) {
        setState(2094);
        match(CSharpParser::UNSAFE);
      }
      setState(2102);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 252, _ctx)) {
      case 1: {
        setState(2097);
        match(CSharpParser::REF);
        break;
      }

      case 2: {
        setState(2098);
        match(CSharpParser::REF);
        setState(2099);
        match(CSharpParser::READONLY);
        break;
      }

      case 3: {
        setState(2100);
        match(CSharpParser::READONLY);
        setState(2101);
        match(CSharpParser::REF);
        break;
      }

      default:
        break;
      }
      setState(2104);
      type_();
      setState(2132);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 256, _ctx)) {
      case 1: {
        setState(2105);
        identifier();
        setState(2107);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CSharpParser::LT) {
          setState(2106);
          type_parameter_list();
        }
        setState(2109);
        match(CSharpParser::OPEN_PARENS);
        setState(2111);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 10) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 10)) & 7812956763456032119) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 74)) & 45037874618448579) != 0)) {
          setState(2110);
          formal_parameter_list();
        }
        setState(2113);
        match(CSharpParser::CLOSE_PARENS);
        setState(2115);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CSharpParser::WHERE) {
          setState(2114);
          type_parameter_constraints_clauses();
        }
        setState(2117);
        match(CSharpParser::SEMICOLON);
        break;
      }

      case 2: {
        setState(2119);
        identifier();
        setState(2120);
        match(CSharpParser::OPEN_BRACE);
        setState(2121);
        interface_accessors();
        setState(2122);
        match(CSharpParser::CLOSE_BRACE);
        break;
      }

      case 3: {
        setState(2124);
        match(CSharpParser::THIS);
        setState(2125);
        match(CSharpParser::OPEN_BRACKET);
        setState(2126);
        formal_parameter_list();
        setState(2127);
        match(CSharpParser::CLOSE_BRACKET);
        setState(2128);
        match(CSharpParser::OPEN_BRACE);
        setState(2129);
        interface_accessors();
        setState(2130);
        match(CSharpParser::CLOSE_BRACE);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      setState(2135);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CSharpParser::UNSAFE) {
        setState(2134);
        match(CSharpParser::UNSAFE);
      }
      setState(2137);
      match(CSharpParser::VOID);
      setState(2138);
      identifier();
      setState(2140);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CSharpParser::LT) {
        setState(2139);
        type_parameter_list();
      }
      setState(2142);
      match(CSharpParser::OPEN_PARENS);
      setState(2144);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 10) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 10)) & 7812956763456032119) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 74)) & 45037874618448579) != 0)) {
        setState(2143);
        formal_parameter_list();
      }
      setState(2146);
      match(CSharpParser::CLOSE_PARENS);
      setState(2148);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CSharpParser::WHERE) {
        setState(2147);
        type_parameter_constraints_clauses();
      }
      setState(2150);
      match(CSharpParser::SEMICOLON);
      break;
    }

    case 3: {
      setState(2152);
      match(CSharpParser::EVENT);
      setState(2153);
      type_();
      setState(2154);
      identifier();
      setState(2155);
      match(CSharpParser::SEMICOLON);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Interface_accessorsContext ------------------------------------------------------------------

CSharpParser::Interface_accessorsContext::Interface_accessorsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Interface_accessorsContext::GET() {
  return getToken(CSharpParser::GET, 0);
}

std::vector<tree::TerminalNode *> CSharpParser::Interface_accessorsContext::SEMICOLON() {
  return getTokens(CSharpParser::SEMICOLON);
}

tree::TerminalNode* CSharpParser::Interface_accessorsContext::SEMICOLON(size_t i) {
  return getToken(CSharpParser::SEMICOLON, i);
}

tree::TerminalNode* CSharpParser::Interface_accessorsContext::SET() {
  return getToken(CSharpParser::SET, 0);
}

std::vector<CSharpParser::AttributesContext *> CSharpParser::Interface_accessorsContext::attributes() {
  return getRuleContexts<CSharpParser::AttributesContext>();
}

CSharpParser::AttributesContext* CSharpParser::Interface_accessorsContext::attributes(size_t i) {
  return getRuleContext<CSharpParser::AttributesContext>(i);
}


size_t CSharpParser::Interface_accessorsContext::getRuleIndex() const {
  return CSharpParser::RuleInterface_accessors;
}

void CSharpParser::Interface_accessorsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterface_accessors(this);
}

void CSharpParser::Interface_accessorsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterface_accessors(this);
}

CSharpParser::Interface_accessorsContext* CSharpParser::interface_accessors() {
  Interface_accessorsContext *_localctx = _tracker.createInstance<Interface_accessorsContext>(_ctx, getState());
  enterRule(_localctx, 338, CSharpParser::RuleInterface_accessors);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2160);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::OPEN_BRACKET) {
      setState(2159);
      attributes();
    }
    setState(2180);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::GET: {
        setState(2162);
        match(CSharpParser::GET);
        setState(2163);
        match(CSharpParser::SEMICOLON);
        setState(2169);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CSharpParser::SET

        || _la == CSharpParser::OPEN_BRACKET) {
          setState(2165);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CSharpParser::OPEN_BRACKET) {
            setState(2164);
            attributes();
          }
          setState(2167);
          match(CSharpParser::SET);
          setState(2168);
          match(CSharpParser::SEMICOLON);
        }
        break;
      }

      case CSharpParser::SET: {
        setState(2171);
        match(CSharpParser::SET);
        setState(2172);
        match(CSharpParser::SEMICOLON);
        setState(2178);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CSharpParser::GET || _la == CSharpParser::OPEN_BRACKET) {
          setState(2174);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CSharpParser::OPEN_BRACKET) {
            setState(2173);
            attributes();
          }
          setState(2176);
          match(CSharpParser::GET);
          setState(2177);
          match(CSharpParser::SEMICOLON);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Enum_baseContext ------------------------------------------------------------------

CSharpParser::Enum_baseContext::Enum_baseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Enum_baseContext::COLON() {
  return getToken(CSharpParser::COLON, 0);
}

CSharpParser::Type_Context* CSharpParser::Enum_baseContext::type_() {
  return getRuleContext<CSharpParser::Type_Context>(0);
}


size_t CSharpParser::Enum_baseContext::getRuleIndex() const {
  return CSharpParser::RuleEnum_base;
}

void CSharpParser::Enum_baseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnum_base(this);
}

void CSharpParser::Enum_baseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnum_base(this);
}

CSharpParser::Enum_baseContext* CSharpParser::enum_base() {
  Enum_baseContext *_localctx = _tracker.createInstance<Enum_baseContext>(_ctx, getState());
  enterRule(_localctx, 340, CSharpParser::RuleEnum_base);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2182);
    match(CSharpParser::COLON);
    setState(2183);
    type_();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Enum_bodyContext ------------------------------------------------------------------

CSharpParser::Enum_bodyContext::Enum_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Enum_bodyContext::OPEN_BRACE() {
  return getToken(CSharpParser::OPEN_BRACE, 0);
}

tree::TerminalNode* CSharpParser::Enum_bodyContext::CLOSE_BRACE() {
  return getToken(CSharpParser::CLOSE_BRACE, 0);
}

std::vector<CSharpParser::Enum_member_declarationContext *> CSharpParser::Enum_bodyContext::enum_member_declaration() {
  return getRuleContexts<CSharpParser::Enum_member_declarationContext>();
}

CSharpParser::Enum_member_declarationContext* CSharpParser::Enum_bodyContext::enum_member_declaration(size_t i) {
  return getRuleContext<CSharpParser::Enum_member_declarationContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::Enum_bodyContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::Enum_bodyContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}


size_t CSharpParser::Enum_bodyContext::getRuleIndex() const {
  return CSharpParser::RuleEnum_body;
}

void CSharpParser::Enum_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnum_body(this);
}

void CSharpParser::Enum_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnum_body(this);
}

CSharpParser::Enum_bodyContext* CSharpParser::enum_body() {
  Enum_bodyContext *_localctx = _tracker.createInstance<Enum_bodyContext>(_ctx, getState());
  enterRule(_localctx, 342, CSharpParser::RuleEnum_body);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2185);
    match(CSharpParser::OPEN_BRACE);
    setState(2197);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3750091428249852928) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & -9221467407831136095) != 0)) {
      setState(2186);
      enum_member_declaration();
      setState(2191);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 268, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(2187);
          match(CSharpParser::COMMA);
          setState(2188);
          enum_member_declaration(); 
        }
        setState(2193);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 268, _ctx);
      }
      setState(2195);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CSharpParser::COMMA) {
        setState(2194);
        match(CSharpParser::COMMA);
      }
    }
    setState(2199);
    match(CSharpParser::CLOSE_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Enum_member_declarationContext ------------------------------------------------------------------

CSharpParser::Enum_member_declarationContext::Enum_member_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::IdentifierContext* CSharpParser::Enum_member_declarationContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

CSharpParser::AttributesContext* CSharpParser::Enum_member_declarationContext::attributes() {
  return getRuleContext<CSharpParser::AttributesContext>(0);
}

tree::TerminalNode* CSharpParser::Enum_member_declarationContext::ASSIGNMENT() {
  return getToken(CSharpParser::ASSIGNMENT, 0);
}

CSharpParser::ExpressionContext* CSharpParser::Enum_member_declarationContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}


size_t CSharpParser::Enum_member_declarationContext::getRuleIndex() const {
  return CSharpParser::RuleEnum_member_declaration;
}

void CSharpParser::Enum_member_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnum_member_declaration(this);
}

void CSharpParser::Enum_member_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnum_member_declaration(this);
}

CSharpParser::Enum_member_declarationContext* CSharpParser::enum_member_declaration() {
  Enum_member_declarationContext *_localctx = _tracker.createInstance<Enum_member_declarationContext>(_ctx, getState());
  enterRule(_localctx, 344, CSharpParser::RuleEnum_member_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2202);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::OPEN_BRACKET) {
      setState(2201);
      attributes();
    }
    setState(2204);
    identifier();
    setState(2207);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::ASSIGNMENT) {
      setState(2205);
      match(CSharpParser::ASSIGNMENT);
      setState(2206);
      expression();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Global_attribute_sectionContext ------------------------------------------------------------------

CSharpParser::Global_attribute_sectionContext::Global_attribute_sectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Global_attribute_sectionContext::OPEN_BRACKET() {
  return getToken(CSharpParser::OPEN_BRACKET, 0);
}

CSharpParser::Global_attribute_targetContext* CSharpParser::Global_attribute_sectionContext::global_attribute_target() {
  return getRuleContext<CSharpParser::Global_attribute_targetContext>(0);
}

tree::TerminalNode* CSharpParser::Global_attribute_sectionContext::COLON() {
  return getToken(CSharpParser::COLON, 0);
}

CSharpParser::Attribute_listContext* CSharpParser::Global_attribute_sectionContext::attribute_list() {
  return getRuleContext<CSharpParser::Attribute_listContext>(0);
}

tree::TerminalNode* CSharpParser::Global_attribute_sectionContext::CLOSE_BRACKET() {
  return getToken(CSharpParser::CLOSE_BRACKET, 0);
}

tree::TerminalNode* CSharpParser::Global_attribute_sectionContext::COMMA() {
  return getToken(CSharpParser::COMMA, 0);
}


size_t CSharpParser::Global_attribute_sectionContext::getRuleIndex() const {
  return CSharpParser::RuleGlobal_attribute_section;
}

void CSharpParser::Global_attribute_sectionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGlobal_attribute_section(this);
}

void CSharpParser::Global_attribute_sectionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGlobal_attribute_section(this);
}

CSharpParser::Global_attribute_sectionContext* CSharpParser::global_attribute_section() {
  Global_attribute_sectionContext *_localctx = _tracker.createInstance<Global_attribute_sectionContext>(_ctx, getState());
  enterRule(_localctx, 346, CSharpParser::RuleGlobal_attribute_section);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2209);
    match(CSharpParser::OPEN_BRACKET);
    setState(2210);
    global_attribute_target();
    setState(2211);
    match(CSharpParser::COLON);
    setState(2212);
    attribute_list();
    setState(2214);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::COMMA) {
      setState(2213);
      match(CSharpParser::COMMA);
    }
    setState(2216);
    match(CSharpParser::CLOSE_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Global_attribute_targetContext ------------------------------------------------------------------

CSharpParser::Global_attribute_targetContext::Global_attribute_targetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::KeywordContext* CSharpParser::Global_attribute_targetContext::keyword() {
  return getRuleContext<CSharpParser::KeywordContext>(0);
}

CSharpParser::IdentifierContext* CSharpParser::Global_attribute_targetContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}


size_t CSharpParser::Global_attribute_targetContext::getRuleIndex() const {
  return CSharpParser::RuleGlobal_attribute_target;
}

void CSharpParser::Global_attribute_targetContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGlobal_attribute_target(this);
}

void CSharpParser::Global_attribute_targetContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGlobal_attribute_target(this);
}

CSharpParser::Global_attribute_targetContext* CSharpParser::global_attribute_target() {
  Global_attribute_targetContext *_localctx = _tracker.createInstance<Global_attribute_targetContext>(_ctx, getState());
  enterRule(_localctx, 348, CSharpParser::RuleGlobal_attribute_target);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2220);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 274, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2218);
      keyword();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2219);
      identifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AttributesContext ------------------------------------------------------------------

CSharpParser::AttributesContext::AttributesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::Attribute_sectionContext *> CSharpParser::AttributesContext::attribute_section() {
  return getRuleContexts<CSharpParser::Attribute_sectionContext>();
}

CSharpParser::Attribute_sectionContext* CSharpParser::AttributesContext::attribute_section(size_t i) {
  return getRuleContext<CSharpParser::Attribute_sectionContext>(i);
}


size_t CSharpParser::AttributesContext::getRuleIndex() const {
  return CSharpParser::RuleAttributes;
}

void CSharpParser::AttributesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAttributes(this);
}

void CSharpParser::AttributesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAttributes(this);
}

CSharpParser::AttributesContext* CSharpParser::attributes() {
  AttributesContext *_localctx = _tracker.createInstance<AttributesContext>(_ctx, getState());
  enterRule(_localctx, 350, CSharpParser::RuleAttributes);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2223); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(2222);
      attribute_section();
      setState(2225); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == CSharpParser::OPEN_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Attribute_sectionContext ------------------------------------------------------------------

CSharpParser::Attribute_sectionContext::Attribute_sectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Attribute_sectionContext::OPEN_BRACKET() {
  return getToken(CSharpParser::OPEN_BRACKET, 0);
}

CSharpParser::Attribute_listContext* CSharpParser::Attribute_sectionContext::attribute_list() {
  return getRuleContext<CSharpParser::Attribute_listContext>(0);
}

tree::TerminalNode* CSharpParser::Attribute_sectionContext::CLOSE_BRACKET() {
  return getToken(CSharpParser::CLOSE_BRACKET, 0);
}

CSharpParser::Attribute_targetContext* CSharpParser::Attribute_sectionContext::attribute_target() {
  return getRuleContext<CSharpParser::Attribute_targetContext>(0);
}

tree::TerminalNode* CSharpParser::Attribute_sectionContext::COLON() {
  return getToken(CSharpParser::COLON, 0);
}

tree::TerminalNode* CSharpParser::Attribute_sectionContext::COMMA() {
  return getToken(CSharpParser::COMMA, 0);
}


size_t CSharpParser::Attribute_sectionContext::getRuleIndex() const {
  return CSharpParser::RuleAttribute_section;
}

void CSharpParser::Attribute_sectionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAttribute_section(this);
}

void CSharpParser::Attribute_sectionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAttribute_section(this);
}

CSharpParser::Attribute_sectionContext* CSharpParser::attribute_section() {
  Attribute_sectionContext *_localctx = _tracker.createInstance<Attribute_sectionContext>(_ctx, getState());
  enterRule(_localctx, 352, CSharpParser::RuleAttribute_section);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2227);
    match(CSharpParser::OPEN_BRACKET);
    setState(2231);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 276, _ctx)) {
    case 1: {
      setState(2228);
      attribute_target();
      setState(2229);
      match(CSharpParser::COLON);
      break;
    }

    default:
      break;
    }
    setState(2233);
    attribute_list();
    setState(2235);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::COMMA) {
      setState(2234);
      match(CSharpParser::COMMA);
    }
    setState(2237);
    match(CSharpParser::CLOSE_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Attribute_targetContext ------------------------------------------------------------------

CSharpParser::Attribute_targetContext::Attribute_targetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::KeywordContext* CSharpParser::Attribute_targetContext::keyword() {
  return getRuleContext<CSharpParser::KeywordContext>(0);
}

CSharpParser::IdentifierContext* CSharpParser::Attribute_targetContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}


size_t CSharpParser::Attribute_targetContext::getRuleIndex() const {
  return CSharpParser::RuleAttribute_target;
}

void CSharpParser::Attribute_targetContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAttribute_target(this);
}

void CSharpParser::Attribute_targetContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAttribute_target(this);
}

CSharpParser::Attribute_targetContext* CSharpParser::attribute_target() {
  Attribute_targetContext *_localctx = _tracker.createInstance<Attribute_targetContext>(_ctx, getState());
  enterRule(_localctx, 354, CSharpParser::RuleAttribute_target);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2241);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 278, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2239);
      keyword();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2240);
      identifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Attribute_listContext ------------------------------------------------------------------

CSharpParser::Attribute_listContext::Attribute_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::AttributeContext *> CSharpParser::Attribute_listContext::attribute() {
  return getRuleContexts<CSharpParser::AttributeContext>();
}

CSharpParser::AttributeContext* CSharpParser::Attribute_listContext::attribute(size_t i) {
  return getRuleContext<CSharpParser::AttributeContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::Attribute_listContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::Attribute_listContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}


size_t CSharpParser::Attribute_listContext::getRuleIndex() const {
  return CSharpParser::RuleAttribute_list;
}

void CSharpParser::Attribute_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAttribute_list(this);
}

void CSharpParser::Attribute_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAttribute_list(this);
}

CSharpParser::Attribute_listContext* CSharpParser::attribute_list() {
  Attribute_listContext *_localctx = _tracker.createInstance<Attribute_listContext>(_ctx, getState());
  enterRule(_localctx, 356, CSharpParser::RuleAttribute_list);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2243);
    attribute();
    setState(2248);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 279, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2244);
        match(CSharpParser::COMMA);
        setState(2245);
        attribute(); 
      }
      setState(2250);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 279, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AttributeContext ------------------------------------------------------------------

CSharpParser::AttributeContext::AttributeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Namespace_or_type_nameContext* CSharpParser::AttributeContext::namespace_or_type_name() {
  return getRuleContext<CSharpParser::Namespace_or_type_nameContext>(0);
}

tree::TerminalNode* CSharpParser::AttributeContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

tree::TerminalNode* CSharpParser::AttributeContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}

std::vector<CSharpParser::Attribute_argumentContext *> CSharpParser::AttributeContext::attribute_argument() {
  return getRuleContexts<CSharpParser::Attribute_argumentContext>();
}

CSharpParser::Attribute_argumentContext* CSharpParser::AttributeContext::attribute_argument(size_t i) {
  return getRuleContext<CSharpParser::Attribute_argumentContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::AttributeContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::AttributeContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}


size_t CSharpParser::AttributeContext::getRuleIndex() const {
  return CSharpParser::RuleAttribute;
}

void CSharpParser::AttributeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAttribute(this);
}

void CSharpParser::AttributeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAttribute(this);
}

CSharpParser::AttributeContext* CSharpParser::attribute() {
  AttributeContext *_localctx = _tracker.createInstance<AttributeContext>(_ctx, getState());
  enterRule(_localctx, 358, CSharpParser::RuleAttribute);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2251);
    namespace_or_type_name();
    setState(2264);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::OPEN_PARENS) {
      setState(2252);
      match(CSharpParser::OPEN_PARENS);
      setState(2261);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -5437212208176571392) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 2305497201161996477) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 129)) & 4398059153857) != 0)) {
        setState(2253);
        attribute_argument();
        setState(2258);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == CSharpParser::COMMA) {
          setState(2254);
          match(CSharpParser::COMMA);
          setState(2255);
          attribute_argument();
          setState(2260);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
      }
      setState(2263);
      match(CSharpParser::CLOSE_PARENS);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Attribute_argumentContext ------------------------------------------------------------------

CSharpParser::Attribute_argumentContext::Attribute_argumentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::ExpressionContext* CSharpParser::Attribute_argumentContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}

CSharpParser::IdentifierContext* CSharpParser::Attribute_argumentContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

tree::TerminalNode* CSharpParser::Attribute_argumentContext::COLON() {
  return getToken(CSharpParser::COLON, 0);
}


size_t CSharpParser::Attribute_argumentContext::getRuleIndex() const {
  return CSharpParser::RuleAttribute_argument;
}

void CSharpParser::Attribute_argumentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAttribute_argument(this);
}

void CSharpParser::Attribute_argumentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAttribute_argument(this);
}

CSharpParser::Attribute_argumentContext* CSharpParser::attribute_argument() {
  Attribute_argumentContext *_localctx = _tracker.createInstance<Attribute_argumentContext>(_ctx, getState());
  enterRule(_localctx, 360, CSharpParser::RuleAttribute_argument);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2269);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 283, _ctx)) {
    case 1: {
      setState(2266);
      identifier();
      setState(2267);
      match(CSharpParser::COLON);
      break;
    }

    default:
      break;
    }
    setState(2271);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Pointer_typeContext ------------------------------------------------------------------

CSharpParser::Pointer_typeContext::Pointer_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Pointer_typeContext::STAR() {
  return getToken(CSharpParser::STAR, 0);
}

CSharpParser::Simple_typeContext* CSharpParser::Pointer_typeContext::simple_type() {
  return getRuleContext<CSharpParser::Simple_typeContext>(0);
}

CSharpParser::Class_typeContext* CSharpParser::Pointer_typeContext::class_type() {
  return getRuleContext<CSharpParser::Class_typeContext>(0);
}

std::vector<CSharpParser::Rank_specifierContext *> CSharpParser::Pointer_typeContext::rank_specifier() {
  return getRuleContexts<CSharpParser::Rank_specifierContext>();
}

CSharpParser::Rank_specifierContext* CSharpParser::Pointer_typeContext::rank_specifier(size_t i) {
  return getRuleContext<CSharpParser::Rank_specifierContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::Pointer_typeContext::INTERR() {
  return getTokens(CSharpParser::INTERR);
}

tree::TerminalNode* CSharpParser::Pointer_typeContext::INTERR(size_t i) {
  return getToken(CSharpParser::INTERR, i);
}

tree::TerminalNode* CSharpParser::Pointer_typeContext::VOID() {
  return getToken(CSharpParser::VOID, 0);
}


size_t CSharpParser::Pointer_typeContext::getRuleIndex() const {
  return CSharpParser::RulePointer_type;
}

void CSharpParser::Pointer_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPointer_type(this);
}

void CSharpParser::Pointer_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPointer_type(this);
}

CSharpParser::Pointer_typeContext* CSharpParser::pointer_type() {
  Pointer_typeContext *_localctx = _tracker.createInstance<Pointer_typeContext>(_ctx, getState());
  enterRule(_localctx, 362, CSharpParser::RulePointer_type);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2288);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::ADD:
      case CSharpParser::ALIAS:
      case CSharpParser::ARGLIST:
      case CSharpParser::ASCENDING:
      case CSharpParser::ASYNC:
      case CSharpParser::AWAIT:
      case CSharpParser::BOOL:
      case CSharpParser::BY:
      case CSharpParser::BYTE:
      case CSharpParser::CHAR:
      case CSharpParser::DECIMAL:
      case CSharpParser::DESCENDING:
      case CSharpParser::DOUBLE:
      case CSharpParser::DYNAMIC:
      case CSharpParser::EQUALS:
      case CSharpParser::FLOAT:
      case CSharpParser::FROM:
      case CSharpParser::GET:
      case CSharpParser::GROUP:
      case CSharpParser::INT:
      case CSharpParser::INTO:
      case CSharpParser::JOIN:
      case CSharpParser::LET:
      case CSharpParser::LONG:
      case CSharpParser::NAMEOF:
      case CSharpParser::OBJECT:
      case CSharpParser::ON:
      case CSharpParser::ORDERBY:
      case CSharpParser::PARTIAL:
      case CSharpParser::REMOVE:
      case CSharpParser::SBYTE:
      case CSharpParser::SELECT:
      case CSharpParser::SET:
      case CSharpParser::SHORT:
      case CSharpParser::STRING:
      case CSharpParser::UINT:
      case CSharpParser::ULONG:
      case CSharpParser::UNMANAGED:
      case CSharpParser::USHORT:
      case CSharpParser::VAR:
      case CSharpParser::WHEN:
      case CSharpParser::WHERE:
      case CSharpParser::YIELD:
      case CSharpParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(2275);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case CSharpParser::BOOL:
          case CSharpParser::BYTE:
          case CSharpParser::CHAR:
          case CSharpParser::DECIMAL:
          case CSharpParser::DOUBLE:
          case CSharpParser::FLOAT:
          case CSharpParser::INT:
          case CSharpParser::LONG:
          case CSharpParser::SBYTE:
          case CSharpParser::SHORT:
          case CSharpParser::UINT:
          case CSharpParser::ULONG:
          case CSharpParser::USHORT: {
            setState(2273);
            simple_type();
            break;
          }

          case CSharpParser::ADD:
          case CSharpParser::ALIAS:
          case CSharpParser::ARGLIST:
          case CSharpParser::ASCENDING:
          case CSharpParser::ASYNC:
          case CSharpParser::AWAIT:
          case CSharpParser::BY:
          case CSharpParser::DESCENDING:
          case CSharpParser::DYNAMIC:
          case CSharpParser::EQUALS:
          case CSharpParser::FROM:
          case CSharpParser::GET:
          case CSharpParser::GROUP:
          case CSharpParser::INTO:
          case CSharpParser::JOIN:
          case CSharpParser::LET:
          case CSharpParser::NAMEOF:
          case CSharpParser::OBJECT:
          case CSharpParser::ON:
          case CSharpParser::ORDERBY:
          case CSharpParser::PARTIAL:
          case CSharpParser::REMOVE:
          case CSharpParser::SELECT:
          case CSharpParser::SET:
          case CSharpParser::STRING:
          case CSharpParser::UNMANAGED:
          case CSharpParser::VAR:
          case CSharpParser::WHEN:
          case CSharpParser::WHERE:
          case CSharpParser::YIELD:
          case CSharpParser::IDENTIFIER: {
            setState(2274);
            class_type();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(2281);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == CSharpParser::OPEN_BRACKET

        || _la == CSharpParser::INTERR) {
          setState(2279);
          _errHandler->sync(this);
          switch (_input->LA(1)) {
            case CSharpParser::OPEN_BRACKET: {
              setState(2277);
              rank_specifier();
              break;
            }

            case CSharpParser::INTERR: {
              setState(2278);
              match(CSharpParser::INTERR);
              break;
            }

          default:
            throw NoViableAltException(this);
          }
          setState(2283);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(2284);
        match(CSharpParser::STAR);
        break;
      }

      case CSharpParser::VOID: {
        enterOuterAlt(_localctx, 2);
        setState(2286);
        match(CSharpParser::VOID);
        setState(2287);
        match(CSharpParser::STAR);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fixed_pointer_declaratorsContext ------------------------------------------------------------------

CSharpParser::Fixed_pointer_declaratorsContext::Fixed_pointer_declaratorsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::Fixed_pointer_declaratorContext *> CSharpParser::Fixed_pointer_declaratorsContext::fixed_pointer_declarator() {
  return getRuleContexts<CSharpParser::Fixed_pointer_declaratorContext>();
}

CSharpParser::Fixed_pointer_declaratorContext* CSharpParser::Fixed_pointer_declaratorsContext::fixed_pointer_declarator(size_t i) {
  return getRuleContext<CSharpParser::Fixed_pointer_declaratorContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::Fixed_pointer_declaratorsContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::Fixed_pointer_declaratorsContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}


size_t CSharpParser::Fixed_pointer_declaratorsContext::getRuleIndex() const {
  return CSharpParser::RuleFixed_pointer_declarators;
}

void CSharpParser::Fixed_pointer_declaratorsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFixed_pointer_declarators(this);
}

void CSharpParser::Fixed_pointer_declaratorsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFixed_pointer_declarators(this);
}

CSharpParser::Fixed_pointer_declaratorsContext* CSharpParser::fixed_pointer_declarators() {
  Fixed_pointer_declaratorsContext *_localctx = _tracker.createInstance<Fixed_pointer_declaratorsContext>(_ctx, getState());
  enterRule(_localctx, 364, CSharpParser::RuleFixed_pointer_declarators);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2290);
    fixed_pointer_declarator();
    setState(2295);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CSharpParser::COMMA) {
      setState(2291);
      match(CSharpParser::COMMA);
      setState(2292);
      fixed_pointer_declarator();
      setState(2297);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fixed_pointer_declaratorContext ------------------------------------------------------------------

CSharpParser::Fixed_pointer_declaratorContext::Fixed_pointer_declaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::IdentifierContext* CSharpParser::Fixed_pointer_declaratorContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

tree::TerminalNode* CSharpParser::Fixed_pointer_declaratorContext::ASSIGNMENT() {
  return getToken(CSharpParser::ASSIGNMENT, 0);
}

CSharpParser::Fixed_pointer_initializerContext* CSharpParser::Fixed_pointer_declaratorContext::fixed_pointer_initializer() {
  return getRuleContext<CSharpParser::Fixed_pointer_initializerContext>(0);
}


size_t CSharpParser::Fixed_pointer_declaratorContext::getRuleIndex() const {
  return CSharpParser::RuleFixed_pointer_declarator;
}

void CSharpParser::Fixed_pointer_declaratorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFixed_pointer_declarator(this);
}

void CSharpParser::Fixed_pointer_declaratorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFixed_pointer_declarator(this);
}

CSharpParser::Fixed_pointer_declaratorContext* CSharpParser::fixed_pointer_declarator() {
  Fixed_pointer_declaratorContext *_localctx = _tracker.createInstance<Fixed_pointer_declaratorContext>(_ctx, getState());
  enterRule(_localctx, 366, CSharpParser::RuleFixed_pointer_declarator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2298);
    identifier();
    setState(2299);
    match(CSharpParser::ASSIGNMENT);
    setState(2300);
    fixed_pointer_initializer();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fixed_pointer_initializerContext ------------------------------------------------------------------

CSharpParser::Fixed_pointer_initializerContext::Fixed_pointer_initializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::ExpressionContext* CSharpParser::Fixed_pointer_initializerContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}

tree::TerminalNode* CSharpParser::Fixed_pointer_initializerContext::AMP() {
  return getToken(CSharpParser::AMP, 0);
}

CSharpParser::Stackalloc_initializerContext* CSharpParser::Fixed_pointer_initializerContext::stackalloc_initializer() {
  return getRuleContext<CSharpParser::Stackalloc_initializerContext>(0);
}


size_t CSharpParser::Fixed_pointer_initializerContext::getRuleIndex() const {
  return CSharpParser::RuleFixed_pointer_initializer;
}

void CSharpParser::Fixed_pointer_initializerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFixed_pointer_initializer(this);
}

void CSharpParser::Fixed_pointer_initializerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFixed_pointer_initializer(this);
}

CSharpParser::Fixed_pointer_initializerContext* CSharpParser::fixed_pointer_initializer() {
  Fixed_pointer_initializerContext *_localctx = _tracker.createInstance<Fixed_pointer_initializerContext>(_ctx, getState());
  enterRule(_localctx, 368, CSharpParser::RuleFixed_pointer_initializer);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2307);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::ADD:
      case CSharpParser::ALIAS:
      case CSharpParser::ARGLIST:
      case CSharpParser::ASCENDING:
      case CSharpParser::ASYNC:
      case CSharpParser::AWAIT:
      case CSharpParser::BASE:
      case CSharpParser::BOOL:
      case CSharpParser::BY:
      case CSharpParser::BYTE:
      case CSharpParser::CHAR:
      case CSharpParser::CHECKED:
      case CSharpParser::DECIMAL:
      case CSharpParser::DEFAULT:
      case CSharpParser::DELEGATE:
      case CSharpParser::DESCENDING:
      case CSharpParser::DOUBLE:
      case CSharpParser::DYNAMIC:
      case CSharpParser::EQUALS:
      case CSharpParser::FALSE:
      case CSharpParser::FLOAT:
      case CSharpParser::FROM:
      case CSharpParser::GET:
      case CSharpParser::GROUP:
      case CSharpParser::INT:
      case CSharpParser::INTO:
      case CSharpParser::JOIN:
      case CSharpParser::LET:
      case CSharpParser::LONG:
      case CSharpParser::NAMEOF:
      case CSharpParser::NEW:
      case CSharpParser::NULL_:
      case CSharpParser::OBJECT:
      case CSharpParser::ON:
      case CSharpParser::ORDERBY:
      case CSharpParser::PARTIAL:
      case CSharpParser::REF:
      case CSharpParser::REMOVE:
      case CSharpParser::SBYTE:
      case CSharpParser::SELECT:
      case CSharpParser::SET:
      case CSharpParser::SHORT:
      case CSharpParser::SIZEOF:
      case CSharpParser::STRING:
      case CSharpParser::THIS:
      case CSharpParser::TRUE:
      case CSharpParser::TYPEOF:
      case CSharpParser::UINT:
      case CSharpParser::ULONG:
      case CSharpParser::UNCHECKED:
      case CSharpParser::UNMANAGED:
      case CSharpParser::USHORT:
      case CSharpParser::VAR:
      case CSharpParser::WHEN:
      case CSharpParser::WHERE:
      case CSharpParser::YIELD:
      case CSharpParser::IDENTIFIER:
      case CSharpParser::LITERAL_ACCESS:
      case CSharpParser::INTEGER_LITERAL:
      case CSharpParser::HEX_INTEGER_LITERAL:
      case CSharpParser::BIN_INTEGER_LITERAL:
      case CSharpParser::REAL_LITERAL:
      case CSharpParser::CHARACTER_LITERAL:
      case CSharpParser::REGULAR_STRING:
      case CSharpParser::VERBATIUM_STRING:
      case CSharpParser::INTERPOLATED_REGULAR_STRING_START:
      case CSharpParser::INTERPOLATED_VERBATIUM_STRING_START:
      case CSharpParser::OPEN_PARENS:
      case CSharpParser::PLUS:
      case CSharpParser::MINUS:
      case CSharpParser::STAR:
      case CSharpParser::AMP:
      case CSharpParser::CARET:
      case CSharpParser::BANG:
      case CSharpParser::TILDE:
      case CSharpParser::OP_INC:
      case CSharpParser::OP_DEC:
      case CSharpParser::OP_RANGE: {
        enterOuterAlt(_localctx, 1);
        setState(2303);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 289, _ctx)) {
        case 1: {
          setState(2302);
          match(CSharpParser::AMP);
          break;
        }

        default:
          break;
        }
        setState(2305);
        expression();
        break;
      }

      case CSharpParser::STACKALLOC: {
        enterOuterAlt(_localctx, 2);
        setState(2306);
        stackalloc_initializer();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fixed_size_buffer_declaratorContext ------------------------------------------------------------------

CSharpParser::Fixed_size_buffer_declaratorContext::Fixed_size_buffer_declaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::IdentifierContext* CSharpParser::Fixed_size_buffer_declaratorContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

tree::TerminalNode* CSharpParser::Fixed_size_buffer_declaratorContext::OPEN_BRACKET() {
  return getToken(CSharpParser::OPEN_BRACKET, 0);
}

CSharpParser::ExpressionContext* CSharpParser::Fixed_size_buffer_declaratorContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}

tree::TerminalNode* CSharpParser::Fixed_size_buffer_declaratorContext::CLOSE_BRACKET() {
  return getToken(CSharpParser::CLOSE_BRACKET, 0);
}


size_t CSharpParser::Fixed_size_buffer_declaratorContext::getRuleIndex() const {
  return CSharpParser::RuleFixed_size_buffer_declarator;
}

void CSharpParser::Fixed_size_buffer_declaratorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFixed_size_buffer_declarator(this);
}

void CSharpParser::Fixed_size_buffer_declaratorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFixed_size_buffer_declarator(this);
}

CSharpParser::Fixed_size_buffer_declaratorContext* CSharpParser::fixed_size_buffer_declarator() {
  Fixed_size_buffer_declaratorContext *_localctx = _tracker.createInstance<Fixed_size_buffer_declaratorContext>(_ctx, getState());
  enterRule(_localctx, 370, CSharpParser::RuleFixed_size_buffer_declarator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2309);
    identifier();
    setState(2310);
    match(CSharpParser::OPEN_BRACKET);
    setState(2311);
    expression();
    setState(2312);
    match(CSharpParser::CLOSE_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Stackalloc_initializerContext ------------------------------------------------------------------

CSharpParser::Stackalloc_initializerContext::Stackalloc_initializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Stackalloc_initializerContext::STACKALLOC() {
  return getToken(CSharpParser::STACKALLOC, 0);
}

CSharpParser::Type_Context* CSharpParser::Stackalloc_initializerContext::type_() {
  return getRuleContext<CSharpParser::Type_Context>(0);
}

tree::TerminalNode* CSharpParser::Stackalloc_initializerContext::OPEN_BRACKET() {
  return getToken(CSharpParser::OPEN_BRACKET, 0);
}

std::vector<CSharpParser::ExpressionContext *> CSharpParser::Stackalloc_initializerContext::expression() {
  return getRuleContexts<CSharpParser::ExpressionContext>();
}

CSharpParser::ExpressionContext* CSharpParser::Stackalloc_initializerContext::expression(size_t i) {
  return getRuleContext<CSharpParser::ExpressionContext>(i);
}

tree::TerminalNode* CSharpParser::Stackalloc_initializerContext::CLOSE_BRACKET() {
  return getToken(CSharpParser::CLOSE_BRACKET, 0);
}

tree::TerminalNode* CSharpParser::Stackalloc_initializerContext::OPEN_BRACE() {
  return getToken(CSharpParser::OPEN_BRACE, 0);
}

tree::TerminalNode* CSharpParser::Stackalloc_initializerContext::CLOSE_BRACE() {
  return getToken(CSharpParser::CLOSE_BRACE, 0);
}

std::vector<tree::TerminalNode *> CSharpParser::Stackalloc_initializerContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::Stackalloc_initializerContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}


size_t CSharpParser::Stackalloc_initializerContext::getRuleIndex() const {
  return CSharpParser::RuleStackalloc_initializer;
}

void CSharpParser::Stackalloc_initializerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStackalloc_initializer(this);
}

void CSharpParser::Stackalloc_initializerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStackalloc_initializer(this);
}

CSharpParser::Stackalloc_initializerContext* CSharpParser::stackalloc_initializer() {
  Stackalloc_initializerContext *_localctx = _tracker.createInstance<Stackalloc_initializerContext>(_ctx, getState());
  enterRule(_localctx, 372, CSharpParser::RuleStackalloc_initializer);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(2343);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 295, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2314);
      match(CSharpParser::STACKALLOC);
      setState(2315);
      type_();
      setState(2316);
      match(CSharpParser::OPEN_BRACKET);
      setState(2317);
      expression();
      setState(2318);
      match(CSharpParser::CLOSE_BRACKET);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2320);
      match(CSharpParser::STACKALLOC);
      setState(2322);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 10) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 10)) & 3201253152842599799) != 0) || ((((_la - 75) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 75)) & 18015337681329473) != 0)) {
        setState(2321);
        type_();
      }
      setState(2324);
      match(CSharpParser::OPEN_BRACKET);
      setState(2326);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -5437212208176571392) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 2305497201161996477) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 129)) & 4398059153857) != 0)) {
        setState(2325);
        expression();
      }
      setState(2328);
      match(CSharpParser::CLOSE_BRACKET);
      setState(2329);
      match(CSharpParser::OPEN_BRACE);
      setState(2330);
      expression();
      setState(2335);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 293, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(2331);
          match(CSharpParser::COMMA);
          setState(2332);
          expression(); 
        }
        setState(2337);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 293, _ctx);
      }
      setState(2339);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CSharpParser::COMMA) {
        setState(2338);
        match(CSharpParser::COMMA);
      }
      setState(2341);
      match(CSharpParser::CLOSE_BRACE);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Right_arrowContext ------------------------------------------------------------------

CSharpParser::Right_arrowContext::Right_arrowContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Right_arrowContext::ASSIGNMENT() {
  return getToken(CSharpParser::ASSIGNMENT, 0);
}

tree::TerminalNode* CSharpParser::Right_arrowContext::GT() {
  return getToken(CSharpParser::GT, 0);
}


size_t CSharpParser::Right_arrowContext::getRuleIndex() const {
  return CSharpParser::RuleRight_arrow;
}

void CSharpParser::Right_arrowContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRight_arrow(this);
}

void CSharpParser::Right_arrowContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRight_arrow(this);
}

CSharpParser::Right_arrowContext* CSharpParser::right_arrow() {
  Right_arrowContext *_localctx = _tracker.createInstance<Right_arrowContext>(_ctx, getState());
  enterRule(_localctx, 374, CSharpParser::RuleRight_arrow);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2345);
    antlrcpp::downCast<Right_arrowContext *>(_localctx)->first = match(CSharpParser::ASSIGNMENT);
    setState(2346);
    antlrcpp::downCast<Right_arrowContext *>(_localctx)->second = match(CSharpParser::GT);
    setState(2347);

    if (!((antlrcpp::downCast<Right_arrowContext *>(_localctx)->first != nullptr ? antlrcpp::downCast<Right_arrowContext *>(_localctx)->first->getTokenIndex() : 0) + 1 == (antlrcpp::downCast<Right_arrowContext *>(_localctx)->second != nullptr ? antlrcpp::downCast<Right_arrowContext *>(_localctx)->second->getTokenIndex() : 0))) throw FailedPredicateException(this, "$first.index + 1 == $second.index");
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Right_shiftContext ------------------------------------------------------------------

CSharpParser::Right_shiftContext::Right_shiftContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CSharpParser::Right_shiftContext::GT() {
  return getTokens(CSharpParser::GT);
}

tree::TerminalNode* CSharpParser::Right_shiftContext::GT(size_t i) {
  return getToken(CSharpParser::GT, i);
}


size_t CSharpParser::Right_shiftContext::getRuleIndex() const {
  return CSharpParser::RuleRight_shift;
}

void CSharpParser::Right_shiftContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRight_shift(this);
}

void CSharpParser::Right_shiftContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRight_shift(this);
}

CSharpParser::Right_shiftContext* CSharpParser::right_shift() {
  Right_shiftContext *_localctx = _tracker.createInstance<Right_shiftContext>(_ctx, getState());
  enterRule(_localctx, 376, CSharpParser::RuleRight_shift);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2349);
    antlrcpp::downCast<Right_shiftContext *>(_localctx)->first = match(CSharpParser::GT);
    setState(2350);
    antlrcpp::downCast<Right_shiftContext *>(_localctx)->second = match(CSharpParser::GT);
    setState(2351);

    if (!((antlrcpp::downCast<Right_shiftContext *>(_localctx)->first != nullptr ? antlrcpp::downCast<Right_shiftContext *>(_localctx)->first->getTokenIndex() : 0) + 1 == (antlrcpp::downCast<Right_shiftContext *>(_localctx)->second != nullptr ? antlrcpp::downCast<Right_shiftContext *>(_localctx)->second->getTokenIndex() : 0))) throw FailedPredicateException(this, "$first.index + 1 == $second.index");
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Right_shift_assignmentContext ------------------------------------------------------------------

CSharpParser::Right_shift_assignmentContext::Right_shift_assignmentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Right_shift_assignmentContext::GT() {
  return getToken(CSharpParser::GT, 0);
}

tree::TerminalNode* CSharpParser::Right_shift_assignmentContext::OP_GE() {
  return getToken(CSharpParser::OP_GE, 0);
}


size_t CSharpParser::Right_shift_assignmentContext::getRuleIndex() const {
  return CSharpParser::RuleRight_shift_assignment;
}

void CSharpParser::Right_shift_assignmentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRight_shift_assignment(this);
}

void CSharpParser::Right_shift_assignmentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRight_shift_assignment(this);
}

CSharpParser::Right_shift_assignmentContext* CSharpParser::right_shift_assignment() {
  Right_shift_assignmentContext *_localctx = _tracker.createInstance<Right_shift_assignmentContext>(_ctx, getState());
  enterRule(_localctx, 378, CSharpParser::RuleRight_shift_assignment);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2353);
    antlrcpp::downCast<Right_shift_assignmentContext *>(_localctx)->first = match(CSharpParser::GT);
    setState(2354);
    antlrcpp::downCast<Right_shift_assignmentContext *>(_localctx)->second = match(CSharpParser::OP_GE);
    setState(2355);

    if (!((antlrcpp::downCast<Right_shift_assignmentContext *>(_localctx)->first != nullptr ? antlrcpp::downCast<Right_shift_assignmentContext *>(_localctx)->first->getTokenIndex() : 0) + 1 == (antlrcpp::downCast<Right_shift_assignmentContext *>(_localctx)->second != nullptr ? antlrcpp::downCast<Right_shift_assignmentContext *>(_localctx)->second->getTokenIndex() : 0))) throw FailedPredicateException(this, "$first.index + 1 == $second.index");
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LiteralContext ------------------------------------------------------------------

CSharpParser::LiteralContext::LiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Boolean_literalContext* CSharpParser::LiteralContext::boolean_literal() {
  return getRuleContext<CSharpParser::Boolean_literalContext>(0);
}

CSharpParser::String_literalContext* CSharpParser::LiteralContext::string_literal() {
  return getRuleContext<CSharpParser::String_literalContext>(0);
}

tree::TerminalNode* CSharpParser::LiteralContext::INTEGER_LITERAL() {
  return getToken(CSharpParser::INTEGER_LITERAL, 0);
}

tree::TerminalNode* CSharpParser::LiteralContext::HEX_INTEGER_LITERAL() {
  return getToken(CSharpParser::HEX_INTEGER_LITERAL, 0);
}

tree::TerminalNode* CSharpParser::LiteralContext::BIN_INTEGER_LITERAL() {
  return getToken(CSharpParser::BIN_INTEGER_LITERAL, 0);
}

tree::TerminalNode* CSharpParser::LiteralContext::REAL_LITERAL() {
  return getToken(CSharpParser::REAL_LITERAL, 0);
}

tree::TerminalNode* CSharpParser::LiteralContext::CHARACTER_LITERAL() {
  return getToken(CSharpParser::CHARACTER_LITERAL, 0);
}

tree::TerminalNode* CSharpParser::LiteralContext::NULL_() {
  return getToken(CSharpParser::NULL_, 0);
}


size_t CSharpParser::LiteralContext::getRuleIndex() const {
  return CSharpParser::RuleLiteral;
}

void CSharpParser::LiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteral(this);
}

void CSharpParser::LiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteral(this);
}

CSharpParser::LiteralContext* CSharpParser::literal() {
  LiteralContext *_localctx = _tracker.createInstance<LiteralContext>(_ctx, getState());
  enterRule(_localctx, 380, CSharpParser::RuleLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2365);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::FALSE:
      case CSharpParser::TRUE: {
        enterOuterAlt(_localctx, 1);
        setState(2357);
        boolean_literal();
        break;
      }

      case CSharpParser::REGULAR_STRING:
      case CSharpParser::VERBATIUM_STRING:
      case CSharpParser::INTERPOLATED_REGULAR_STRING_START:
      case CSharpParser::INTERPOLATED_VERBATIUM_STRING_START: {
        enterOuterAlt(_localctx, 2);
        setState(2358);
        string_literal();
        break;
      }

      case CSharpParser::INTEGER_LITERAL: {
        enterOuterAlt(_localctx, 3);
        setState(2359);
        match(CSharpParser::INTEGER_LITERAL);
        break;
      }

      case CSharpParser::HEX_INTEGER_LITERAL: {
        enterOuterAlt(_localctx, 4);
        setState(2360);
        match(CSharpParser::HEX_INTEGER_LITERAL);
        break;
      }

      case CSharpParser::BIN_INTEGER_LITERAL: {
        enterOuterAlt(_localctx, 5);
        setState(2361);
        match(CSharpParser::BIN_INTEGER_LITERAL);
        break;
      }

      case CSharpParser::REAL_LITERAL: {
        enterOuterAlt(_localctx, 6);
        setState(2362);
        match(CSharpParser::REAL_LITERAL);
        break;
      }

      case CSharpParser::CHARACTER_LITERAL: {
        enterOuterAlt(_localctx, 7);
        setState(2363);
        match(CSharpParser::CHARACTER_LITERAL);
        break;
      }

      case CSharpParser::NULL_: {
        enterOuterAlt(_localctx, 8);
        setState(2364);
        match(CSharpParser::NULL_);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Boolean_literalContext ------------------------------------------------------------------

CSharpParser::Boolean_literalContext::Boolean_literalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Boolean_literalContext::TRUE() {
  return getToken(CSharpParser::TRUE, 0);
}

tree::TerminalNode* CSharpParser::Boolean_literalContext::FALSE() {
  return getToken(CSharpParser::FALSE, 0);
}


size_t CSharpParser::Boolean_literalContext::getRuleIndex() const {
  return CSharpParser::RuleBoolean_literal;
}

void CSharpParser::Boolean_literalContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBoolean_literal(this);
}

void CSharpParser::Boolean_literalContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBoolean_literal(this);
}

CSharpParser::Boolean_literalContext* CSharpParser::boolean_literal() {
  Boolean_literalContext *_localctx = _tracker.createInstance<Boolean_literalContext>(_ctx, getState());
  enterRule(_localctx, 382, CSharpParser::RuleBoolean_literal);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2367);
    _la = _input->LA(1);
    if (!(_la == CSharpParser::FALSE

    || _la == CSharpParser::TRUE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- String_literalContext ------------------------------------------------------------------

CSharpParser::String_literalContext::String_literalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Interpolated_regular_stringContext* CSharpParser::String_literalContext::interpolated_regular_string() {
  return getRuleContext<CSharpParser::Interpolated_regular_stringContext>(0);
}

CSharpParser::Interpolated_verbatium_stringContext* CSharpParser::String_literalContext::interpolated_verbatium_string() {
  return getRuleContext<CSharpParser::Interpolated_verbatium_stringContext>(0);
}

tree::TerminalNode* CSharpParser::String_literalContext::REGULAR_STRING() {
  return getToken(CSharpParser::REGULAR_STRING, 0);
}

tree::TerminalNode* CSharpParser::String_literalContext::VERBATIUM_STRING() {
  return getToken(CSharpParser::VERBATIUM_STRING, 0);
}


size_t CSharpParser::String_literalContext::getRuleIndex() const {
  return CSharpParser::RuleString_literal;
}

void CSharpParser::String_literalContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterString_literal(this);
}

void CSharpParser::String_literalContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitString_literal(this);
}

CSharpParser::String_literalContext* CSharpParser::string_literal() {
  String_literalContext *_localctx = _tracker.createInstance<String_literalContext>(_ctx, getState());
  enterRule(_localctx, 384, CSharpParser::RuleString_literal);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2373);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::INTERPOLATED_REGULAR_STRING_START: {
        enterOuterAlt(_localctx, 1);
        setState(2369);
        interpolated_regular_string();
        break;
      }

      case CSharpParser::INTERPOLATED_VERBATIUM_STRING_START: {
        enterOuterAlt(_localctx, 2);
        setState(2370);
        interpolated_verbatium_string();
        break;
      }

      case CSharpParser::REGULAR_STRING: {
        enterOuterAlt(_localctx, 3);
        setState(2371);
        match(CSharpParser::REGULAR_STRING);
        break;
      }

      case CSharpParser::VERBATIUM_STRING: {
        enterOuterAlt(_localctx, 4);
        setState(2372);
        match(CSharpParser::VERBATIUM_STRING);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Interpolated_regular_stringContext ------------------------------------------------------------------

CSharpParser::Interpolated_regular_stringContext::Interpolated_regular_stringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Interpolated_regular_stringContext::INTERPOLATED_REGULAR_STRING_START() {
  return getToken(CSharpParser::INTERPOLATED_REGULAR_STRING_START, 0);
}

tree::TerminalNode* CSharpParser::Interpolated_regular_stringContext::DOUBLE_QUOTE_INSIDE() {
  return getToken(CSharpParser::DOUBLE_QUOTE_INSIDE, 0);
}

std::vector<CSharpParser::Interpolated_regular_string_partContext *> CSharpParser::Interpolated_regular_stringContext::interpolated_regular_string_part() {
  return getRuleContexts<CSharpParser::Interpolated_regular_string_partContext>();
}

CSharpParser::Interpolated_regular_string_partContext* CSharpParser::Interpolated_regular_stringContext::interpolated_regular_string_part(size_t i) {
  return getRuleContext<CSharpParser::Interpolated_regular_string_partContext>(i);
}


size_t CSharpParser::Interpolated_regular_stringContext::getRuleIndex() const {
  return CSharpParser::RuleInterpolated_regular_string;
}

void CSharpParser::Interpolated_regular_stringContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterpolated_regular_string(this);
}

void CSharpParser::Interpolated_regular_stringContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterpolated_regular_string(this);
}

CSharpParser::Interpolated_regular_stringContext* CSharpParser::interpolated_regular_string() {
  Interpolated_regular_stringContext *_localctx = _tracker.createInstance<Interpolated_regular_stringContext>(_ctx, getState());
  enterRule(_localctx, 386, CSharpParser::RuleInterpolated_regular_string);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2375);
    match(CSharpParser::INTERPOLATED_REGULAR_STRING_START);
    setState(2379);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -5437212208176571392) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 2305497201161996477) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 129)) & 329853500975553) != 0)) {
      setState(2376);
      interpolated_regular_string_part();
      setState(2381);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2382);
    match(CSharpParser::DOUBLE_QUOTE_INSIDE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Interpolated_verbatium_stringContext ------------------------------------------------------------------

CSharpParser::Interpolated_verbatium_stringContext::Interpolated_verbatium_stringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Interpolated_verbatium_stringContext::INTERPOLATED_VERBATIUM_STRING_START() {
  return getToken(CSharpParser::INTERPOLATED_VERBATIUM_STRING_START, 0);
}

tree::TerminalNode* CSharpParser::Interpolated_verbatium_stringContext::DOUBLE_QUOTE_INSIDE() {
  return getToken(CSharpParser::DOUBLE_QUOTE_INSIDE, 0);
}

std::vector<CSharpParser::Interpolated_verbatium_string_partContext *> CSharpParser::Interpolated_verbatium_stringContext::interpolated_verbatium_string_part() {
  return getRuleContexts<CSharpParser::Interpolated_verbatium_string_partContext>();
}

CSharpParser::Interpolated_verbatium_string_partContext* CSharpParser::Interpolated_verbatium_stringContext::interpolated_verbatium_string_part(size_t i) {
  return getRuleContext<CSharpParser::Interpolated_verbatium_string_partContext>(i);
}


size_t CSharpParser::Interpolated_verbatium_stringContext::getRuleIndex() const {
  return CSharpParser::RuleInterpolated_verbatium_string;
}

void CSharpParser::Interpolated_verbatium_stringContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterpolated_verbatium_string(this);
}

void CSharpParser::Interpolated_verbatium_stringContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterpolated_verbatium_string(this);
}

CSharpParser::Interpolated_verbatium_stringContext* CSharpParser::interpolated_verbatium_string() {
  Interpolated_verbatium_stringContext *_localctx = _tracker.createInstance<Interpolated_verbatium_stringContext>(_ctx, getState());
  enterRule(_localctx, 388, CSharpParser::RuleInterpolated_verbatium_string);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2384);
    match(CSharpParser::INTERPOLATED_VERBATIUM_STRING_START);
    setState(2388);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -5437212208176571392) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 2305497201161996477) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 129)) & 646512849775041) != 0)) {
      setState(2385);
      interpolated_verbatium_string_part();
      setState(2390);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2391);
    match(CSharpParser::DOUBLE_QUOTE_INSIDE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Interpolated_regular_string_partContext ------------------------------------------------------------------

CSharpParser::Interpolated_regular_string_partContext::Interpolated_regular_string_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Interpolated_string_expressionContext* CSharpParser::Interpolated_regular_string_partContext::interpolated_string_expression() {
  return getRuleContext<CSharpParser::Interpolated_string_expressionContext>(0);
}

tree::TerminalNode* CSharpParser::Interpolated_regular_string_partContext::DOUBLE_CURLY_INSIDE() {
  return getToken(CSharpParser::DOUBLE_CURLY_INSIDE, 0);
}

tree::TerminalNode* CSharpParser::Interpolated_regular_string_partContext::REGULAR_CHAR_INSIDE() {
  return getToken(CSharpParser::REGULAR_CHAR_INSIDE, 0);
}

tree::TerminalNode* CSharpParser::Interpolated_regular_string_partContext::REGULAR_STRING_INSIDE() {
  return getToken(CSharpParser::REGULAR_STRING_INSIDE, 0);
}


size_t CSharpParser::Interpolated_regular_string_partContext::getRuleIndex() const {
  return CSharpParser::RuleInterpolated_regular_string_part;
}

void CSharpParser::Interpolated_regular_string_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterpolated_regular_string_part(this);
}

void CSharpParser::Interpolated_regular_string_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterpolated_regular_string_part(this);
}

CSharpParser::Interpolated_regular_string_partContext* CSharpParser::interpolated_regular_string_part() {
  Interpolated_regular_string_partContext *_localctx = _tracker.createInstance<Interpolated_regular_string_partContext>(_ctx, getState());
  enterRule(_localctx, 390, CSharpParser::RuleInterpolated_regular_string_part);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2397);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::ADD:
      case CSharpParser::ALIAS:
      case CSharpParser::ARGLIST:
      case CSharpParser::ASCENDING:
      case CSharpParser::ASYNC:
      case CSharpParser::AWAIT:
      case CSharpParser::BASE:
      case CSharpParser::BOOL:
      case CSharpParser::BY:
      case CSharpParser::BYTE:
      case CSharpParser::CHAR:
      case CSharpParser::CHECKED:
      case CSharpParser::DECIMAL:
      case CSharpParser::DEFAULT:
      case CSharpParser::DELEGATE:
      case CSharpParser::DESCENDING:
      case CSharpParser::DOUBLE:
      case CSharpParser::DYNAMIC:
      case CSharpParser::EQUALS:
      case CSharpParser::FALSE:
      case CSharpParser::FLOAT:
      case CSharpParser::FROM:
      case CSharpParser::GET:
      case CSharpParser::GROUP:
      case CSharpParser::INT:
      case CSharpParser::INTO:
      case CSharpParser::JOIN:
      case CSharpParser::LET:
      case CSharpParser::LONG:
      case CSharpParser::NAMEOF:
      case CSharpParser::NEW:
      case CSharpParser::NULL_:
      case CSharpParser::OBJECT:
      case CSharpParser::ON:
      case CSharpParser::ORDERBY:
      case CSharpParser::PARTIAL:
      case CSharpParser::REF:
      case CSharpParser::REMOVE:
      case CSharpParser::SBYTE:
      case CSharpParser::SELECT:
      case CSharpParser::SET:
      case CSharpParser::SHORT:
      case CSharpParser::SIZEOF:
      case CSharpParser::STRING:
      case CSharpParser::THIS:
      case CSharpParser::TRUE:
      case CSharpParser::TYPEOF:
      case CSharpParser::UINT:
      case CSharpParser::ULONG:
      case CSharpParser::UNCHECKED:
      case CSharpParser::UNMANAGED:
      case CSharpParser::USHORT:
      case CSharpParser::VAR:
      case CSharpParser::WHEN:
      case CSharpParser::WHERE:
      case CSharpParser::YIELD:
      case CSharpParser::IDENTIFIER:
      case CSharpParser::LITERAL_ACCESS:
      case CSharpParser::INTEGER_LITERAL:
      case CSharpParser::HEX_INTEGER_LITERAL:
      case CSharpParser::BIN_INTEGER_LITERAL:
      case CSharpParser::REAL_LITERAL:
      case CSharpParser::CHARACTER_LITERAL:
      case CSharpParser::REGULAR_STRING:
      case CSharpParser::VERBATIUM_STRING:
      case CSharpParser::INTERPOLATED_REGULAR_STRING_START:
      case CSharpParser::INTERPOLATED_VERBATIUM_STRING_START:
      case CSharpParser::OPEN_PARENS:
      case CSharpParser::PLUS:
      case CSharpParser::MINUS:
      case CSharpParser::STAR:
      case CSharpParser::AMP:
      case CSharpParser::CARET:
      case CSharpParser::BANG:
      case CSharpParser::TILDE:
      case CSharpParser::OP_INC:
      case CSharpParser::OP_DEC:
      case CSharpParser::OP_RANGE: {
        enterOuterAlt(_localctx, 1);
        setState(2393);
        interpolated_string_expression();
        break;
      }

      case CSharpParser::DOUBLE_CURLY_INSIDE: {
        enterOuterAlt(_localctx, 2);
        setState(2394);
        match(CSharpParser::DOUBLE_CURLY_INSIDE);
        break;
      }

      case CSharpParser::REGULAR_CHAR_INSIDE: {
        enterOuterAlt(_localctx, 3);
        setState(2395);
        match(CSharpParser::REGULAR_CHAR_INSIDE);
        break;
      }

      case CSharpParser::REGULAR_STRING_INSIDE: {
        enterOuterAlt(_localctx, 4);
        setState(2396);
        match(CSharpParser::REGULAR_STRING_INSIDE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Interpolated_verbatium_string_partContext ------------------------------------------------------------------

CSharpParser::Interpolated_verbatium_string_partContext::Interpolated_verbatium_string_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Interpolated_string_expressionContext* CSharpParser::Interpolated_verbatium_string_partContext::interpolated_string_expression() {
  return getRuleContext<CSharpParser::Interpolated_string_expressionContext>(0);
}

tree::TerminalNode* CSharpParser::Interpolated_verbatium_string_partContext::DOUBLE_CURLY_INSIDE() {
  return getToken(CSharpParser::DOUBLE_CURLY_INSIDE, 0);
}

tree::TerminalNode* CSharpParser::Interpolated_verbatium_string_partContext::VERBATIUM_DOUBLE_QUOTE_INSIDE() {
  return getToken(CSharpParser::VERBATIUM_DOUBLE_QUOTE_INSIDE, 0);
}

tree::TerminalNode* CSharpParser::Interpolated_verbatium_string_partContext::VERBATIUM_INSIDE_STRING() {
  return getToken(CSharpParser::VERBATIUM_INSIDE_STRING, 0);
}


size_t CSharpParser::Interpolated_verbatium_string_partContext::getRuleIndex() const {
  return CSharpParser::RuleInterpolated_verbatium_string_part;
}

void CSharpParser::Interpolated_verbatium_string_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterpolated_verbatium_string_part(this);
}

void CSharpParser::Interpolated_verbatium_string_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterpolated_verbatium_string_part(this);
}

CSharpParser::Interpolated_verbatium_string_partContext* CSharpParser::interpolated_verbatium_string_part() {
  Interpolated_verbatium_string_partContext *_localctx = _tracker.createInstance<Interpolated_verbatium_string_partContext>(_ctx, getState());
  enterRule(_localctx, 392, CSharpParser::RuleInterpolated_verbatium_string_part);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2403);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::ADD:
      case CSharpParser::ALIAS:
      case CSharpParser::ARGLIST:
      case CSharpParser::ASCENDING:
      case CSharpParser::ASYNC:
      case CSharpParser::AWAIT:
      case CSharpParser::BASE:
      case CSharpParser::BOOL:
      case CSharpParser::BY:
      case CSharpParser::BYTE:
      case CSharpParser::CHAR:
      case CSharpParser::CHECKED:
      case CSharpParser::DECIMAL:
      case CSharpParser::DEFAULT:
      case CSharpParser::DELEGATE:
      case CSharpParser::DESCENDING:
      case CSharpParser::DOUBLE:
      case CSharpParser::DYNAMIC:
      case CSharpParser::EQUALS:
      case CSharpParser::FALSE:
      case CSharpParser::FLOAT:
      case CSharpParser::FROM:
      case CSharpParser::GET:
      case CSharpParser::GROUP:
      case CSharpParser::INT:
      case CSharpParser::INTO:
      case CSharpParser::JOIN:
      case CSharpParser::LET:
      case CSharpParser::LONG:
      case CSharpParser::NAMEOF:
      case CSharpParser::NEW:
      case CSharpParser::NULL_:
      case CSharpParser::OBJECT:
      case CSharpParser::ON:
      case CSharpParser::ORDERBY:
      case CSharpParser::PARTIAL:
      case CSharpParser::REF:
      case CSharpParser::REMOVE:
      case CSharpParser::SBYTE:
      case CSharpParser::SELECT:
      case CSharpParser::SET:
      case CSharpParser::SHORT:
      case CSharpParser::SIZEOF:
      case CSharpParser::STRING:
      case CSharpParser::THIS:
      case CSharpParser::TRUE:
      case CSharpParser::TYPEOF:
      case CSharpParser::UINT:
      case CSharpParser::ULONG:
      case CSharpParser::UNCHECKED:
      case CSharpParser::UNMANAGED:
      case CSharpParser::USHORT:
      case CSharpParser::VAR:
      case CSharpParser::WHEN:
      case CSharpParser::WHERE:
      case CSharpParser::YIELD:
      case CSharpParser::IDENTIFIER:
      case CSharpParser::LITERAL_ACCESS:
      case CSharpParser::INTEGER_LITERAL:
      case CSharpParser::HEX_INTEGER_LITERAL:
      case CSharpParser::BIN_INTEGER_LITERAL:
      case CSharpParser::REAL_LITERAL:
      case CSharpParser::CHARACTER_LITERAL:
      case CSharpParser::REGULAR_STRING:
      case CSharpParser::VERBATIUM_STRING:
      case CSharpParser::INTERPOLATED_REGULAR_STRING_START:
      case CSharpParser::INTERPOLATED_VERBATIUM_STRING_START:
      case CSharpParser::OPEN_PARENS:
      case CSharpParser::PLUS:
      case CSharpParser::MINUS:
      case CSharpParser::STAR:
      case CSharpParser::AMP:
      case CSharpParser::CARET:
      case CSharpParser::BANG:
      case CSharpParser::TILDE:
      case CSharpParser::OP_INC:
      case CSharpParser::OP_DEC:
      case CSharpParser::OP_RANGE: {
        enterOuterAlt(_localctx, 1);
        setState(2399);
        interpolated_string_expression();
        break;
      }

      case CSharpParser::DOUBLE_CURLY_INSIDE: {
        enterOuterAlt(_localctx, 2);
        setState(2400);
        match(CSharpParser::DOUBLE_CURLY_INSIDE);
        break;
      }

      case CSharpParser::VERBATIUM_DOUBLE_QUOTE_INSIDE: {
        enterOuterAlt(_localctx, 3);
        setState(2401);
        match(CSharpParser::VERBATIUM_DOUBLE_QUOTE_INSIDE);
        break;
      }

      case CSharpParser::VERBATIUM_INSIDE_STRING: {
        enterOuterAlt(_localctx, 4);
        setState(2402);
        match(CSharpParser::VERBATIUM_INSIDE_STRING);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Interpolated_string_expressionContext ------------------------------------------------------------------

CSharpParser::Interpolated_string_expressionContext::Interpolated_string_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::ExpressionContext *> CSharpParser::Interpolated_string_expressionContext::expression() {
  return getRuleContexts<CSharpParser::ExpressionContext>();
}

CSharpParser::ExpressionContext* CSharpParser::Interpolated_string_expressionContext::expression(size_t i) {
  return getRuleContext<CSharpParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CSharpParser::Interpolated_string_expressionContext::COMMA() {
  return getTokens(CSharpParser::COMMA);
}

tree::TerminalNode* CSharpParser::Interpolated_string_expressionContext::COMMA(size_t i) {
  return getToken(CSharpParser::COMMA, i);
}

tree::TerminalNode* CSharpParser::Interpolated_string_expressionContext::COLON() {
  return getToken(CSharpParser::COLON, 0);
}

std::vector<tree::TerminalNode *> CSharpParser::Interpolated_string_expressionContext::FORMAT_STRING() {
  return getTokens(CSharpParser::FORMAT_STRING);
}

tree::TerminalNode* CSharpParser::Interpolated_string_expressionContext::FORMAT_STRING(size_t i) {
  return getToken(CSharpParser::FORMAT_STRING, i);
}


size_t CSharpParser::Interpolated_string_expressionContext::getRuleIndex() const {
  return CSharpParser::RuleInterpolated_string_expression;
}

void CSharpParser::Interpolated_string_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterpolated_string_expression(this);
}

void CSharpParser::Interpolated_string_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterpolated_string_expression(this);
}

CSharpParser::Interpolated_string_expressionContext* CSharpParser::interpolated_string_expression() {
  Interpolated_string_expressionContext *_localctx = _tracker.createInstance<Interpolated_string_expressionContext>(_ctx, getState());
  enterRule(_localctx, 394, CSharpParser::RuleInterpolated_string_expression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2405);
    expression();
    setState(2410);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CSharpParser::COMMA) {
      setState(2406);
      match(CSharpParser::COMMA);
      setState(2407);
      expression();
      setState(2412);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2419);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::COLON) {
      setState(2413);
      match(CSharpParser::COLON);
      setState(2415); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(2414);
        match(CSharpParser::FORMAT_STRING);
        setState(2417); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == CSharpParser::FORMAT_STRING);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KeywordContext ------------------------------------------------------------------

CSharpParser::KeywordContext::KeywordContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::KeywordContext::ABSTRACT() {
  return getToken(CSharpParser::ABSTRACT, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::AS() {
  return getToken(CSharpParser::AS, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::BASE() {
  return getToken(CSharpParser::BASE, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::BOOL() {
  return getToken(CSharpParser::BOOL, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::BREAK() {
  return getToken(CSharpParser::BREAK, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::BYTE() {
  return getToken(CSharpParser::BYTE, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::CASE() {
  return getToken(CSharpParser::CASE, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::CATCH() {
  return getToken(CSharpParser::CATCH, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::CHAR() {
  return getToken(CSharpParser::CHAR, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::CHECKED() {
  return getToken(CSharpParser::CHECKED, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::CLASS() {
  return getToken(CSharpParser::CLASS, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::CONST() {
  return getToken(CSharpParser::CONST, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::CONTINUE() {
  return getToken(CSharpParser::CONTINUE, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::DECIMAL() {
  return getToken(CSharpParser::DECIMAL, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::DEFAULT() {
  return getToken(CSharpParser::DEFAULT, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::DELEGATE() {
  return getToken(CSharpParser::DELEGATE, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::DO() {
  return getToken(CSharpParser::DO, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::DOUBLE() {
  return getToken(CSharpParser::DOUBLE, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::ELSE() {
  return getToken(CSharpParser::ELSE, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::ENUM() {
  return getToken(CSharpParser::ENUM, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::EVENT() {
  return getToken(CSharpParser::EVENT, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::EXPLICIT() {
  return getToken(CSharpParser::EXPLICIT, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::EXTERN() {
  return getToken(CSharpParser::EXTERN, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::FALSE() {
  return getToken(CSharpParser::FALSE, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::FINALLY() {
  return getToken(CSharpParser::FINALLY, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::FIXED() {
  return getToken(CSharpParser::FIXED, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::FLOAT() {
  return getToken(CSharpParser::FLOAT, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::FOR() {
  return getToken(CSharpParser::FOR, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::FOREACH() {
  return getToken(CSharpParser::FOREACH, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::GOTO() {
  return getToken(CSharpParser::GOTO, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::IF() {
  return getToken(CSharpParser::IF, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::IMPLICIT() {
  return getToken(CSharpParser::IMPLICIT, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::IN() {
  return getToken(CSharpParser::IN, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::INT() {
  return getToken(CSharpParser::INT, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::INTERFACE() {
  return getToken(CSharpParser::INTERFACE, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::INTERNAL() {
  return getToken(CSharpParser::INTERNAL, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::IS() {
  return getToken(CSharpParser::IS, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::LOCK() {
  return getToken(CSharpParser::LOCK, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::LONG() {
  return getToken(CSharpParser::LONG, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::NAMESPACE() {
  return getToken(CSharpParser::NAMESPACE, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::NEW() {
  return getToken(CSharpParser::NEW, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::NULL_() {
  return getToken(CSharpParser::NULL_, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::OBJECT() {
  return getToken(CSharpParser::OBJECT, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::OPERATOR() {
  return getToken(CSharpParser::OPERATOR, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::OUT() {
  return getToken(CSharpParser::OUT, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::OVERRIDE() {
  return getToken(CSharpParser::OVERRIDE, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::PARAMS() {
  return getToken(CSharpParser::PARAMS, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::PRIVATE() {
  return getToken(CSharpParser::PRIVATE, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::PROTECTED() {
  return getToken(CSharpParser::PROTECTED, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::PUBLIC() {
  return getToken(CSharpParser::PUBLIC, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::READONLY() {
  return getToken(CSharpParser::READONLY, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::REF() {
  return getToken(CSharpParser::REF, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::RETURN() {
  return getToken(CSharpParser::RETURN, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::SBYTE() {
  return getToken(CSharpParser::SBYTE, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::SEALED() {
  return getToken(CSharpParser::SEALED, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::SHORT() {
  return getToken(CSharpParser::SHORT, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::SIZEOF() {
  return getToken(CSharpParser::SIZEOF, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::STACKALLOC() {
  return getToken(CSharpParser::STACKALLOC, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::STATIC() {
  return getToken(CSharpParser::STATIC, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::STRING() {
  return getToken(CSharpParser::STRING, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::STRUCT() {
  return getToken(CSharpParser::STRUCT, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::SWITCH() {
  return getToken(CSharpParser::SWITCH, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::THIS() {
  return getToken(CSharpParser::THIS, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::THROW() {
  return getToken(CSharpParser::THROW, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::TRUE() {
  return getToken(CSharpParser::TRUE, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::TRY() {
  return getToken(CSharpParser::TRY, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::TYPEOF() {
  return getToken(CSharpParser::TYPEOF, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::UINT() {
  return getToken(CSharpParser::UINT, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::ULONG() {
  return getToken(CSharpParser::ULONG, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::UNCHECKED() {
  return getToken(CSharpParser::UNCHECKED, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::UNMANAGED() {
  return getToken(CSharpParser::UNMANAGED, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::UNSAFE() {
  return getToken(CSharpParser::UNSAFE, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::USHORT() {
  return getToken(CSharpParser::USHORT, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::USING() {
  return getToken(CSharpParser::USING, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::VIRTUAL() {
  return getToken(CSharpParser::VIRTUAL, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::VOID() {
  return getToken(CSharpParser::VOID, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::VOLATILE() {
  return getToken(CSharpParser::VOLATILE, 0);
}

tree::TerminalNode* CSharpParser::KeywordContext::WHILE() {
  return getToken(CSharpParser::WHILE, 0);
}


size_t CSharpParser::KeywordContext::getRuleIndex() const {
  return CSharpParser::RuleKeyword;
}

void CSharpParser::KeywordContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterKeyword(this);
}

void CSharpParser::KeywordContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitKeyword(this);
}

CSharpParser::KeywordContext* CSharpParser::keyword() {
  KeywordContext *_localctx = _tracker.createInstance<KeywordContext>(_ctx, getState());
  enterRule(_localctx, 396, CSharpParser::RuleKeyword);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2421);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -3750091428249853440) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 173722833976239) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Class_definitionContext ------------------------------------------------------------------

CSharpParser::Class_definitionContext::Class_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Class_definitionContext::CLASS() {
  return getToken(CSharpParser::CLASS, 0);
}

CSharpParser::IdentifierContext* CSharpParser::Class_definitionContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

CSharpParser::Class_bodyContext* CSharpParser::Class_definitionContext::class_body() {
  return getRuleContext<CSharpParser::Class_bodyContext>(0);
}

CSharpParser::Type_parameter_listContext* CSharpParser::Class_definitionContext::type_parameter_list() {
  return getRuleContext<CSharpParser::Type_parameter_listContext>(0);
}

CSharpParser::Class_baseContext* CSharpParser::Class_definitionContext::class_base() {
  return getRuleContext<CSharpParser::Class_baseContext>(0);
}

CSharpParser::Type_parameter_constraints_clausesContext* CSharpParser::Class_definitionContext::type_parameter_constraints_clauses() {
  return getRuleContext<CSharpParser::Type_parameter_constraints_clausesContext>(0);
}

tree::TerminalNode* CSharpParser::Class_definitionContext::SEMICOLON() {
  return getToken(CSharpParser::SEMICOLON, 0);
}


size_t CSharpParser::Class_definitionContext::getRuleIndex() const {
  return CSharpParser::RuleClass_definition;
}

void CSharpParser::Class_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClass_definition(this);
}

void CSharpParser::Class_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClass_definition(this);
}

CSharpParser::Class_definitionContext* CSharpParser::class_definition() {
  Class_definitionContext *_localctx = _tracker.createInstance<Class_definitionContext>(_ctx, getState());
  enterRule(_localctx, 398, CSharpParser::RuleClass_definition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2423);
    match(CSharpParser::CLASS);
    setState(2424);
    identifier();
    setState(2426);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::LT) {
      setState(2425);
      type_parameter_list();
    }
    setState(2429);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::COLON) {
      setState(2428);
      class_base();
    }
    setState(2432);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::WHERE) {
      setState(2431);
      type_parameter_constraints_clauses();
    }
    setState(2434);
    class_body();
    setState(2436);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::SEMICOLON) {
      setState(2435);
      match(CSharpParser::SEMICOLON);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Struct_definitionContext ------------------------------------------------------------------

CSharpParser::Struct_definitionContext::Struct_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Struct_definitionContext::STRUCT() {
  return getToken(CSharpParser::STRUCT, 0);
}

CSharpParser::IdentifierContext* CSharpParser::Struct_definitionContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

CSharpParser::Struct_bodyContext* CSharpParser::Struct_definitionContext::struct_body() {
  return getRuleContext<CSharpParser::Struct_bodyContext>(0);
}

CSharpParser::Type_parameter_listContext* CSharpParser::Struct_definitionContext::type_parameter_list() {
  return getRuleContext<CSharpParser::Type_parameter_listContext>(0);
}

CSharpParser::Struct_interfacesContext* CSharpParser::Struct_definitionContext::struct_interfaces() {
  return getRuleContext<CSharpParser::Struct_interfacesContext>(0);
}

CSharpParser::Type_parameter_constraints_clausesContext* CSharpParser::Struct_definitionContext::type_parameter_constraints_clauses() {
  return getRuleContext<CSharpParser::Type_parameter_constraints_clausesContext>(0);
}

tree::TerminalNode* CSharpParser::Struct_definitionContext::SEMICOLON() {
  return getToken(CSharpParser::SEMICOLON, 0);
}

tree::TerminalNode* CSharpParser::Struct_definitionContext::READONLY() {
  return getToken(CSharpParser::READONLY, 0);
}

tree::TerminalNode* CSharpParser::Struct_definitionContext::REF() {
  return getToken(CSharpParser::REF, 0);
}


size_t CSharpParser::Struct_definitionContext::getRuleIndex() const {
  return CSharpParser::RuleStruct_definition;
}

void CSharpParser::Struct_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStruct_definition(this);
}

void CSharpParser::Struct_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStruct_definition(this);
}

CSharpParser::Struct_definitionContext* CSharpParser::struct_definition() {
  Struct_definitionContext *_localctx = _tracker.createInstance<Struct_definitionContext>(_ctx, getState());
  enterRule(_localctx, 400, CSharpParser::RuleStruct_definition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2439);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::READONLY

    || _la == CSharpParser::REF) {
      setState(2438);
      _la = _input->LA(1);
      if (!(_la == CSharpParser::READONLY

      || _la == CSharpParser::REF)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(2441);
    match(CSharpParser::STRUCT);
    setState(2442);
    identifier();
    setState(2444);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::LT) {
      setState(2443);
      type_parameter_list();
    }
    setState(2447);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::COLON) {
      setState(2446);
      struct_interfaces();
    }
    setState(2450);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::WHERE) {
      setState(2449);
      type_parameter_constraints_clauses();
    }
    setState(2452);
    struct_body();
    setState(2454);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::SEMICOLON) {
      setState(2453);
      match(CSharpParser::SEMICOLON);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Interface_definitionContext ------------------------------------------------------------------

CSharpParser::Interface_definitionContext::Interface_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Interface_definitionContext::INTERFACE() {
  return getToken(CSharpParser::INTERFACE, 0);
}

CSharpParser::IdentifierContext* CSharpParser::Interface_definitionContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

CSharpParser::Class_bodyContext* CSharpParser::Interface_definitionContext::class_body() {
  return getRuleContext<CSharpParser::Class_bodyContext>(0);
}

CSharpParser::Variant_type_parameter_listContext* CSharpParser::Interface_definitionContext::variant_type_parameter_list() {
  return getRuleContext<CSharpParser::Variant_type_parameter_listContext>(0);
}

CSharpParser::Interface_baseContext* CSharpParser::Interface_definitionContext::interface_base() {
  return getRuleContext<CSharpParser::Interface_baseContext>(0);
}

CSharpParser::Type_parameter_constraints_clausesContext* CSharpParser::Interface_definitionContext::type_parameter_constraints_clauses() {
  return getRuleContext<CSharpParser::Type_parameter_constraints_clausesContext>(0);
}

tree::TerminalNode* CSharpParser::Interface_definitionContext::SEMICOLON() {
  return getToken(CSharpParser::SEMICOLON, 0);
}


size_t CSharpParser::Interface_definitionContext::getRuleIndex() const {
  return CSharpParser::RuleInterface_definition;
}

void CSharpParser::Interface_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterface_definition(this);
}

void CSharpParser::Interface_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterface_definition(this);
}

CSharpParser::Interface_definitionContext* CSharpParser::interface_definition() {
  Interface_definitionContext *_localctx = _tracker.createInstance<Interface_definitionContext>(_ctx, getState());
  enterRule(_localctx, 402, CSharpParser::RuleInterface_definition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2456);
    match(CSharpParser::INTERFACE);
    setState(2457);
    identifier();
    setState(2459);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::LT) {
      setState(2458);
      variant_type_parameter_list();
    }
    setState(2462);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::COLON) {
      setState(2461);
      interface_base();
    }
    setState(2465);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::WHERE) {
      setState(2464);
      type_parameter_constraints_clauses();
    }
    setState(2467);
    class_body();
    setState(2469);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::SEMICOLON) {
      setState(2468);
      match(CSharpParser::SEMICOLON);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Enum_definitionContext ------------------------------------------------------------------

CSharpParser::Enum_definitionContext::Enum_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Enum_definitionContext::ENUM() {
  return getToken(CSharpParser::ENUM, 0);
}

CSharpParser::IdentifierContext* CSharpParser::Enum_definitionContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

CSharpParser::Enum_bodyContext* CSharpParser::Enum_definitionContext::enum_body() {
  return getRuleContext<CSharpParser::Enum_bodyContext>(0);
}

CSharpParser::Enum_baseContext* CSharpParser::Enum_definitionContext::enum_base() {
  return getRuleContext<CSharpParser::Enum_baseContext>(0);
}

tree::TerminalNode* CSharpParser::Enum_definitionContext::SEMICOLON() {
  return getToken(CSharpParser::SEMICOLON, 0);
}


size_t CSharpParser::Enum_definitionContext::getRuleIndex() const {
  return CSharpParser::RuleEnum_definition;
}

void CSharpParser::Enum_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnum_definition(this);
}

void CSharpParser::Enum_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnum_definition(this);
}

CSharpParser::Enum_definitionContext* CSharpParser::enum_definition() {
  Enum_definitionContext *_localctx = _tracker.createInstance<Enum_definitionContext>(_ctx, getState());
  enterRule(_localctx, 404, CSharpParser::RuleEnum_definition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2471);
    match(CSharpParser::ENUM);
    setState(2472);
    identifier();
    setState(2474);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::COLON) {
      setState(2473);
      enum_base();
    }
    setState(2476);
    enum_body();
    setState(2478);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::SEMICOLON) {
      setState(2477);
      match(CSharpParser::SEMICOLON);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Delegate_definitionContext ------------------------------------------------------------------

CSharpParser::Delegate_definitionContext::Delegate_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Delegate_definitionContext::DELEGATE() {
  return getToken(CSharpParser::DELEGATE, 0);
}

CSharpParser::Return_typeContext* CSharpParser::Delegate_definitionContext::return_type() {
  return getRuleContext<CSharpParser::Return_typeContext>(0);
}

CSharpParser::IdentifierContext* CSharpParser::Delegate_definitionContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

tree::TerminalNode* CSharpParser::Delegate_definitionContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

tree::TerminalNode* CSharpParser::Delegate_definitionContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}

tree::TerminalNode* CSharpParser::Delegate_definitionContext::SEMICOLON() {
  return getToken(CSharpParser::SEMICOLON, 0);
}

CSharpParser::Variant_type_parameter_listContext* CSharpParser::Delegate_definitionContext::variant_type_parameter_list() {
  return getRuleContext<CSharpParser::Variant_type_parameter_listContext>(0);
}

CSharpParser::Formal_parameter_listContext* CSharpParser::Delegate_definitionContext::formal_parameter_list() {
  return getRuleContext<CSharpParser::Formal_parameter_listContext>(0);
}

CSharpParser::Type_parameter_constraints_clausesContext* CSharpParser::Delegate_definitionContext::type_parameter_constraints_clauses() {
  return getRuleContext<CSharpParser::Type_parameter_constraints_clausesContext>(0);
}


size_t CSharpParser::Delegate_definitionContext::getRuleIndex() const {
  return CSharpParser::RuleDelegate_definition;
}

void CSharpParser::Delegate_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDelegate_definition(this);
}

void CSharpParser::Delegate_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDelegate_definition(this);
}

CSharpParser::Delegate_definitionContext* CSharpParser::delegate_definition() {
  Delegate_definitionContext *_localctx = _tracker.createInstance<Delegate_definitionContext>(_ctx, getState());
  enterRule(_localctx, 406, CSharpParser::RuleDelegate_definition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2480);
    match(CSharpParser::DELEGATE);
    setState(2481);
    return_type();
    setState(2482);
    identifier();
    setState(2484);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::LT) {
      setState(2483);
      variant_type_parameter_list();
    }
    setState(2486);
    match(CSharpParser::OPEN_PARENS);
    setState(2488);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 10) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 10)) & 7812956763456032119) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 74)) & 45037874618448579) != 0)) {
      setState(2487);
      formal_parameter_list();
    }
    setState(2490);
    match(CSharpParser::CLOSE_PARENS);
    setState(2492);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::WHERE) {
      setState(2491);
      type_parameter_constraints_clauses();
    }
    setState(2494);
    match(CSharpParser::SEMICOLON);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Event_declarationContext ------------------------------------------------------------------

CSharpParser::Event_declarationContext::Event_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Event_declarationContext::EVENT() {
  return getToken(CSharpParser::EVENT, 0);
}

CSharpParser::Type_Context* CSharpParser::Event_declarationContext::type_() {
  return getRuleContext<CSharpParser::Type_Context>(0);
}

CSharpParser::Variable_declaratorsContext* CSharpParser::Event_declarationContext::variable_declarators() {
  return getRuleContext<CSharpParser::Variable_declaratorsContext>(0);
}

tree::TerminalNode* CSharpParser::Event_declarationContext::SEMICOLON() {
  return getToken(CSharpParser::SEMICOLON, 0);
}

CSharpParser::Member_nameContext* CSharpParser::Event_declarationContext::member_name() {
  return getRuleContext<CSharpParser::Member_nameContext>(0);
}

tree::TerminalNode* CSharpParser::Event_declarationContext::OPEN_BRACE() {
  return getToken(CSharpParser::OPEN_BRACE, 0);
}

CSharpParser::Event_accessor_declarationsContext* CSharpParser::Event_declarationContext::event_accessor_declarations() {
  return getRuleContext<CSharpParser::Event_accessor_declarationsContext>(0);
}

tree::TerminalNode* CSharpParser::Event_declarationContext::CLOSE_BRACE() {
  return getToken(CSharpParser::CLOSE_BRACE, 0);
}


size_t CSharpParser::Event_declarationContext::getRuleIndex() const {
  return CSharpParser::RuleEvent_declaration;
}

void CSharpParser::Event_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEvent_declaration(this);
}

void CSharpParser::Event_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEvent_declaration(this);
}

CSharpParser::Event_declarationContext* CSharpParser::event_declaration() {
  Event_declarationContext *_localctx = _tracker.createInstance<Event_declarationContext>(_ctx, getState());
  enterRule(_localctx, 408, CSharpParser::RuleEvent_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2496);
    match(CSharpParser::EVENT);
    setState(2497);
    type_();
    setState(2506);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 323, _ctx)) {
    case 1: {
      setState(2498);
      variable_declarators();
      setState(2499);
      match(CSharpParser::SEMICOLON);
      break;
    }

    case 2: {
      setState(2501);
      member_name();
      setState(2502);
      match(CSharpParser::OPEN_BRACE);
      setState(2503);
      event_accessor_declarations();
      setState(2504);
      match(CSharpParser::CLOSE_BRACE);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Field_declarationContext ------------------------------------------------------------------

CSharpParser::Field_declarationContext::Field_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Variable_declaratorsContext* CSharpParser::Field_declarationContext::variable_declarators() {
  return getRuleContext<CSharpParser::Variable_declaratorsContext>(0);
}

tree::TerminalNode* CSharpParser::Field_declarationContext::SEMICOLON() {
  return getToken(CSharpParser::SEMICOLON, 0);
}


size_t CSharpParser::Field_declarationContext::getRuleIndex() const {
  return CSharpParser::RuleField_declaration;
}

void CSharpParser::Field_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterField_declaration(this);
}

void CSharpParser::Field_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitField_declaration(this);
}

CSharpParser::Field_declarationContext* CSharpParser::field_declaration() {
  Field_declarationContext *_localctx = _tracker.createInstance<Field_declarationContext>(_ctx, getState());
  enterRule(_localctx, 410, CSharpParser::RuleField_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2508);
    variable_declarators();
    setState(2509);
    match(CSharpParser::SEMICOLON);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Property_declarationContext ------------------------------------------------------------------

CSharpParser::Property_declarationContext::Property_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Member_nameContext* CSharpParser::Property_declarationContext::member_name() {
  return getRuleContext<CSharpParser::Member_nameContext>(0);
}

tree::TerminalNode* CSharpParser::Property_declarationContext::OPEN_BRACE() {
  return getToken(CSharpParser::OPEN_BRACE, 0);
}

CSharpParser::Accessor_declarationsContext* CSharpParser::Property_declarationContext::accessor_declarations() {
  return getRuleContext<CSharpParser::Accessor_declarationsContext>(0);
}

tree::TerminalNode* CSharpParser::Property_declarationContext::CLOSE_BRACE() {
  return getToken(CSharpParser::CLOSE_BRACE, 0);
}

CSharpParser::Right_arrowContext* CSharpParser::Property_declarationContext::right_arrow() {
  return getRuleContext<CSharpParser::Right_arrowContext>(0);
}

CSharpParser::Throwable_expressionContext* CSharpParser::Property_declarationContext::throwable_expression() {
  return getRuleContext<CSharpParser::Throwable_expressionContext>(0);
}

tree::TerminalNode* CSharpParser::Property_declarationContext::SEMICOLON() {
  return getToken(CSharpParser::SEMICOLON, 0);
}

tree::TerminalNode* CSharpParser::Property_declarationContext::ASSIGNMENT() {
  return getToken(CSharpParser::ASSIGNMENT, 0);
}

CSharpParser::Variable_initializerContext* CSharpParser::Property_declarationContext::variable_initializer() {
  return getRuleContext<CSharpParser::Variable_initializerContext>(0);
}


size_t CSharpParser::Property_declarationContext::getRuleIndex() const {
  return CSharpParser::RuleProperty_declaration;
}

void CSharpParser::Property_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProperty_declaration(this);
}

void CSharpParser::Property_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProperty_declaration(this);
}

CSharpParser::Property_declarationContext* CSharpParser::property_declaration() {
  Property_declarationContext *_localctx = _tracker.createInstance<Property_declarationContext>(_ctx, getState());
  enterRule(_localctx, 412, CSharpParser::RuleProperty_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2511);
    member_name();
    setState(2525);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::OPEN_BRACE: {
        setState(2512);
        match(CSharpParser::OPEN_BRACE);
        setState(2513);
        accessor_declarations();
        setState(2514);
        match(CSharpParser::CLOSE_BRACE);
        setState(2519);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CSharpParser::ASSIGNMENT) {
          setState(2515);
          match(CSharpParser::ASSIGNMENT);
          setState(2516);
          variable_initializer();
          setState(2517);
          match(CSharpParser::SEMICOLON);
        }
        break;
      }

      case CSharpParser::ASSIGNMENT: {
        setState(2521);
        right_arrow();
        setState(2522);
        throwable_expression();
        setState(2523);
        match(CSharpParser::SEMICOLON);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Constant_declarationContext ------------------------------------------------------------------

CSharpParser::Constant_declarationContext::Constant_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Constant_declarationContext::CONST() {
  return getToken(CSharpParser::CONST, 0);
}

CSharpParser::Type_Context* CSharpParser::Constant_declarationContext::type_() {
  return getRuleContext<CSharpParser::Type_Context>(0);
}

CSharpParser::Constant_declaratorsContext* CSharpParser::Constant_declarationContext::constant_declarators() {
  return getRuleContext<CSharpParser::Constant_declaratorsContext>(0);
}

tree::TerminalNode* CSharpParser::Constant_declarationContext::SEMICOLON() {
  return getToken(CSharpParser::SEMICOLON, 0);
}


size_t CSharpParser::Constant_declarationContext::getRuleIndex() const {
  return CSharpParser::RuleConstant_declaration;
}

void CSharpParser::Constant_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstant_declaration(this);
}

void CSharpParser::Constant_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstant_declaration(this);
}

CSharpParser::Constant_declarationContext* CSharpParser::constant_declaration() {
  Constant_declarationContext *_localctx = _tracker.createInstance<Constant_declarationContext>(_ctx, getState());
  enterRule(_localctx, 414, CSharpParser::RuleConstant_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2527);
    match(CSharpParser::CONST);
    setState(2528);
    type_();
    setState(2529);
    constant_declarators();
    setState(2530);
    match(CSharpParser::SEMICOLON);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Indexer_declarationContext ------------------------------------------------------------------

CSharpParser::Indexer_declarationContext::Indexer_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Indexer_declarationContext::THIS() {
  return getToken(CSharpParser::THIS, 0);
}

tree::TerminalNode* CSharpParser::Indexer_declarationContext::OPEN_BRACKET() {
  return getToken(CSharpParser::OPEN_BRACKET, 0);
}

CSharpParser::Formal_parameter_listContext* CSharpParser::Indexer_declarationContext::formal_parameter_list() {
  return getRuleContext<CSharpParser::Formal_parameter_listContext>(0);
}

tree::TerminalNode* CSharpParser::Indexer_declarationContext::CLOSE_BRACKET() {
  return getToken(CSharpParser::CLOSE_BRACKET, 0);
}

tree::TerminalNode* CSharpParser::Indexer_declarationContext::OPEN_BRACE() {
  return getToken(CSharpParser::OPEN_BRACE, 0);
}

CSharpParser::Accessor_declarationsContext* CSharpParser::Indexer_declarationContext::accessor_declarations() {
  return getRuleContext<CSharpParser::Accessor_declarationsContext>(0);
}

tree::TerminalNode* CSharpParser::Indexer_declarationContext::CLOSE_BRACE() {
  return getToken(CSharpParser::CLOSE_BRACE, 0);
}

CSharpParser::Right_arrowContext* CSharpParser::Indexer_declarationContext::right_arrow() {
  return getRuleContext<CSharpParser::Right_arrowContext>(0);
}

CSharpParser::Throwable_expressionContext* CSharpParser::Indexer_declarationContext::throwable_expression() {
  return getRuleContext<CSharpParser::Throwable_expressionContext>(0);
}

tree::TerminalNode* CSharpParser::Indexer_declarationContext::SEMICOLON() {
  return getToken(CSharpParser::SEMICOLON, 0);
}


size_t CSharpParser::Indexer_declarationContext::getRuleIndex() const {
  return CSharpParser::RuleIndexer_declaration;
}

void CSharpParser::Indexer_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIndexer_declaration(this);
}

void CSharpParser::Indexer_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIndexer_declaration(this);
}

CSharpParser::Indexer_declarationContext* CSharpParser::indexer_declaration() {
  Indexer_declarationContext *_localctx = _tracker.createInstance<Indexer_declarationContext>(_ctx, getState());
  enterRule(_localctx, 416, CSharpParser::RuleIndexer_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2532);
    match(CSharpParser::THIS);
    setState(2533);
    match(CSharpParser::OPEN_BRACKET);
    setState(2534);
    formal_parameter_list();
    setState(2535);
    match(CSharpParser::CLOSE_BRACKET);
    setState(2544);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::OPEN_BRACE: {
        setState(2536);
        match(CSharpParser::OPEN_BRACE);
        setState(2537);
        accessor_declarations();
        setState(2538);
        match(CSharpParser::CLOSE_BRACE);
        break;
      }

      case CSharpParser::ASSIGNMENT: {
        setState(2540);
        right_arrow();
        setState(2541);
        throwable_expression();
        setState(2542);
        match(CSharpParser::SEMICOLON);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Destructor_definitionContext ------------------------------------------------------------------

CSharpParser::Destructor_definitionContext::Destructor_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Destructor_definitionContext::TILDE() {
  return getToken(CSharpParser::TILDE, 0);
}

CSharpParser::IdentifierContext* CSharpParser::Destructor_definitionContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

tree::TerminalNode* CSharpParser::Destructor_definitionContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

tree::TerminalNode* CSharpParser::Destructor_definitionContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}

CSharpParser::BodyContext* CSharpParser::Destructor_definitionContext::body() {
  return getRuleContext<CSharpParser::BodyContext>(0);
}


size_t CSharpParser::Destructor_definitionContext::getRuleIndex() const {
  return CSharpParser::RuleDestructor_definition;
}

void CSharpParser::Destructor_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDestructor_definition(this);
}

void CSharpParser::Destructor_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDestructor_definition(this);
}

CSharpParser::Destructor_definitionContext* CSharpParser::destructor_definition() {
  Destructor_definitionContext *_localctx = _tracker.createInstance<Destructor_definitionContext>(_ctx, getState());
  enterRule(_localctx, 418, CSharpParser::RuleDestructor_definition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2546);
    match(CSharpParser::TILDE);
    setState(2547);
    identifier();
    setState(2548);
    match(CSharpParser::OPEN_PARENS);
    setState(2549);
    match(CSharpParser::CLOSE_PARENS);
    setState(2550);
    body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Constructor_declarationContext ------------------------------------------------------------------

CSharpParser::Constructor_declarationContext::Constructor_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::IdentifierContext* CSharpParser::Constructor_declarationContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

tree::TerminalNode* CSharpParser::Constructor_declarationContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

tree::TerminalNode* CSharpParser::Constructor_declarationContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}

CSharpParser::BodyContext* CSharpParser::Constructor_declarationContext::body() {
  return getRuleContext<CSharpParser::BodyContext>(0);
}

CSharpParser::Formal_parameter_listContext* CSharpParser::Constructor_declarationContext::formal_parameter_list() {
  return getRuleContext<CSharpParser::Formal_parameter_listContext>(0);
}

CSharpParser::Constructor_initializerContext* CSharpParser::Constructor_declarationContext::constructor_initializer() {
  return getRuleContext<CSharpParser::Constructor_initializerContext>(0);
}


size_t CSharpParser::Constructor_declarationContext::getRuleIndex() const {
  return CSharpParser::RuleConstructor_declaration;
}

void CSharpParser::Constructor_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstructor_declaration(this);
}

void CSharpParser::Constructor_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstructor_declaration(this);
}

CSharpParser::Constructor_declarationContext* CSharpParser::constructor_declaration() {
  Constructor_declarationContext *_localctx = _tracker.createInstance<Constructor_declarationContext>(_ctx, getState());
  enterRule(_localctx, 420, CSharpParser::RuleConstructor_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2552);
    identifier();
    setState(2553);
    match(CSharpParser::OPEN_PARENS);
    setState(2555);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 10) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 10)) & 7812956763456032119) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 74)) & 45037874618448579) != 0)) {
      setState(2554);
      formal_parameter_list();
    }
    setState(2557);
    match(CSharpParser::CLOSE_PARENS);
    setState(2559);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::COLON) {
      setState(2558);
      constructor_initializer();
    }
    setState(2561);
    body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Method_declarationContext ------------------------------------------------------------------

CSharpParser::Method_declarationContext::Method_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Method_member_nameContext* CSharpParser::Method_declarationContext::method_member_name() {
  return getRuleContext<CSharpParser::Method_member_nameContext>(0);
}

tree::TerminalNode* CSharpParser::Method_declarationContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

tree::TerminalNode* CSharpParser::Method_declarationContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}

CSharpParser::Method_bodyContext* CSharpParser::Method_declarationContext::method_body() {
  return getRuleContext<CSharpParser::Method_bodyContext>(0);
}

CSharpParser::Right_arrowContext* CSharpParser::Method_declarationContext::right_arrow() {
  return getRuleContext<CSharpParser::Right_arrowContext>(0);
}

CSharpParser::Throwable_expressionContext* CSharpParser::Method_declarationContext::throwable_expression() {
  return getRuleContext<CSharpParser::Throwable_expressionContext>(0);
}

tree::TerminalNode* CSharpParser::Method_declarationContext::SEMICOLON() {
  return getToken(CSharpParser::SEMICOLON, 0);
}

CSharpParser::Type_parameter_listContext* CSharpParser::Method_declarationContext::type_parameter_list() {
  return getRuleContext<CSharpParser::Type_parameter_listContext>(0);
}

CSharpParser::Formal_parameter_listContext* CSharpParser::Method_declarationContext::formal_parameter_list() {
  return getRuleContext<CSharpParser::Formal_parameter_listContext>(0);
}

CSharpParser::Type_parameter_constraints_clausesContext* CSharpParser::Method_declarationContext::type_parameter_constraints_clauses() {
  return getRuleContext<CSharpParser::Type_parameter_constraints_clausesContext>(0);
}


size_t CSharpParser::Method_declarationContext::getRuleIndex() const {
  return CSharpParser::RuleMethod_declaration;
}

void CSharpParser::Method_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethod_declaration(this);
}

void CSharpParser::Method_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethod_declaration(this);
}

CSharpParser::Method_declarationContext* CSharpParser::method_declaration() {
  Method_declarationContext *_localctx = _tracker.createInstance<Method_declarationContext>(_ctx, getState());
  enterRule(_localctx, 422, CSharpParser::RuleMethod_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2563);
    method_member_name();
    setState(2565);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::LT) {
      setState(2564);
      type_parameter_list();
    }
    setState(2567);
    match(CSharpParser::OPEN_PARENS);
    setState(2569);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 10) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 10)) & 7812956763456032119) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 74)) & 45037874618448579) != 0)) {
      setState(2568);
      formal_parameter_list();
    }
    setState(2571);
    match(CSharpParser::CLOSE_PARENS);
    setState(2573);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::WHERE) {
      setState(2572);
      type_parameter_constraints_clauses();
    }
    setState(2580);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::OPEN_BRACE:
      case CSharpParser::SEMICOLON: {
        setState(2575);
        method_body();
        break;
      }

      case CSharpParser::ASSIGNMENT: {
        setState(2576);
        right_arrow();
        setState(2577);
        throwable_expression();
        setState(2578);
        match(CSharpParser::SEMICOLON);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Method_member_nameContext ------------------------------------------------------------------

CSharpParser::Method_member_nameContext::Method_member_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CSharpParser::IdentifierContext *> CSharpParser::Method_member_nameContext::identifier() {
  return getRuleContexts<CSharpParser::IdentifierContext>();
}

CSharpParser::IdentifierContext* CSharpParser::Method_member_nameContext::identifier(size_t i) {
  return getRuleContext<CSharpParser::IdentifierContext>(i);
}

tree::TerminalNode* CSharpParser::Method_member_nameContext::DOUBLE_COLON() {
  return getToken(CSharpParser::DOUBLE_COLON, 0);
}

std::vector<tree::TerminalNode *> CSharpParser::Method_member_nameContext::DOT() {
  return getTokens(CSharpParser::DOT);
}

tree::TerminalNode* CSharpParser::Method_member_nameContext::DOT(size_t i) {
  return getToken(CSharpParser::DOT, i);
}

std::vector<CSharpParser::Type_argument_listContext *> CSharpParser::Method_member_nameContext::type_argument_list() {
  return getRuleContexts<CSharpParser::Type_argument_listContext>();
}

CSharpParser::Type_argument_listContext* CSharpParser::Method_member_nameContext::type_argument_list(size_t i) {
  return getRuleContext<CSharpParser::Type_argument_listContext>(i);
}


size_t CSharpParser::Method_member_nameContext::getRuleIndex() const {
  return CSharpParser::RuleMethod_member_name;
}

void CSharpParser::Method_member_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethod_member_name(this);
}

void CSharpParser::Method_member_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethod_member_name(this);
}

CSharpParser::Method_member_nameContext* CSharpParser::method_member_name() {
  Method_member_nameContext *_localctx = _tracker.createInstance<Method_member_nameContext>(_ctx, getState());
  enterRule(_localctx, 424, CSharpParser::RuleMethod_member_name);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2587);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 333, _ctx)) {
    case 1: {
      setState(2582);
      identifier();
      break;
    }

    case 2: {
      setState(2583);
      identifier();
      setState(2584);
      match(CSharpParser::DOUBLE_COLON);
      setState(2585);
      identifier();
      break;
    }

    default:
      break;
    }
    setState(2596);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 335, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2590);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CSharpParser::LT) {
          setState(2589);
          type_argument_list();
        }
        setState(2592);
        match(CSharpParser::DOT);
        setState(2593);
        identifier(); 
      }
      setState(2598);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 335, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Operator_declarationContext ------------------------------------------------------------------

CSharpParser::Operator_declarationContext::Operator_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Operator_declarationContext::OPERATOR() {
  return getToken(CSharpParser::OPERATOR, 0);
}

CSharpParser::Overloadable_operatorContext* CSharpParser::Operator_declarationContext::overloadable_operator() {
  return getRuleContext<CSharpParser::Overloadable_operatorContext>(0);
}

tree::TerminalNode* CSharpParser::Operator_declarationContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

std::vector<CSharpParser::Arg_declarationContext *> CSharpParser::Operator_declarationContext::arg_declaration() {
  return getRuleContexts<CSharpParser::Arg_declarationContext>();
}

CSharpParser::Arg_declarationContext* CSharpParser::Operator_declarationContext::arg_declaration(size_t i) {
  return getRuleContext<CSharpParser::Arg_declarationContext>(i);
}

tree::TerminalNode* CSharpParser::Operator_declarationContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}

CSharpParser::BodyContext* CSharpParser::Operator_declarationContext::body() {
  return getRuleContext<CSharpParser::BodyContext>(0);
}

CSharpParser::Right_arrowContext* CSharpParser::Operator_declarationContext::right_arrow() {
  return getRuleContext<CSharpParser::Right_arrowContext>(0);
}

CSharpParser::Throwable_expressionContext* CSharpParser::Operator_declarationContext::throwable_expression() {
  return getRuleContext<CSharpParser::Throwable_expressionContext>(0);
}

tree::TerminalNode* CSharpParser::Operator_declarationContext::SEMICOLON() {
  return getToken(CSharpParser::SEMICOLON, 0);
}

std::vector<tree::TerminalNode *> CSharpParser::Operator_declarationContext::IN() {
  return getTokens(CSharpParser::IN);
}

tree::TerminalNode* CSharpParser::Operator_declarationContext::IN(size_t i) {
  return getToken(CSharpParser::IN, i);
}

tree::TerminalNode* CSharpParser::Operator_declarationContext::COMMA() {
  return getToken(CSharpParser::COMMA, 0);
}


size_t CSharpParser::Operator_declarationContext::getRuleIndex() const {
  return CSharpParser::RuleOperator_declaration;
}

void CSharpParser::Operator_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOperator_declaration(this);
}

void CSharpParser::Operator_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOperator_declaration(this);
}

CSharpParser::Operator_declarationContext* CSharpParser::operator_declaration() {
  Operator_declarationContext *_localctx = _tracker.createInstance<Operator_declarationContext>(_ctx, getState());
  enterRule(_localctx, 426, CSharpParser::RuleOperator_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2599);
    match(CSharpParser::OPERATOR);
    setState(2600);
    overloadable_operator();
    setState(2601);
    match(CSharpParser::OPEN_PARENS);
    setState(2603);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::IN) {
      setState(2602);
      match(CSharpParser::IN);
    }
    setState(2605);
    arg_declaration();
    setState(2611);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::COMMA) {
      setState(2606);
      match(CSharpParser::COMMA);
      setState(2608);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CSharpParser::IN) {
        setState(2607);
        match(CSharpParser::IN);
      }
      setState(2610);
      arg_declaration();
    }
    setState(2613);
    match(CSharpParser::CLOSE_PARENS);
    setState(2619);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CSharpParser::OPEN_BRACE:
      case CSharpParser::SEMICOLON: {
        setState(2614);
        body();
        break;
      }

      case CSharpParser::ASSIGNMENT: {
        setState(2615);
        right_arrow();
        setState(2616);
        throwable_expression();
        setState(2617);
        match(CSharpParser::SEMICOLON);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Arg_declarationContext ------------------------------------------------------------------

CSharpParser::Arg_declarationContext::Arg_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CSharpParser::Type_Context* CSharpParser::Arg_declarationContext::type_() {
  return getRuleContext<CSharpParser::Type_Context>(0);
}

CSharpParser::IdentifierContext* CSharpParser::Arg_declarationContext::identifier() {
  return getRuleContext<CSharpParser::IdentifierContext>(0);
}

tree::TerminalNode* CSharpParser::Arg_declarationContext::ASSIGNMENT() {
  return getToken(CSharpParser::ASSIGNMENT, 0);
}

CSharpParser::ExpressionContext* CSharpParser::Arg_declarationContext::expression() {
  return getRuleContext<CSharpParser::ExpressionContext>(0);
}


size_t CSharpParser::Arg_declarationContext::getRuleIndex() const {
  return CSharpParser::RuleArg_declaration;
}

void CSharpParser::Arg_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArg_declaration(this);
}

void CSharpParser::Arg_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArg_declaration(this);
}

CSharpParser::Arg_declarationContext* CSharpParser::arg_declaration() {
  Arg_declarationContext *_localctx = _tracker.createInstance<Arg_declarationContext>(_ctx, getState());
  enterRule(_localctx, 428, CSharpParser::RuleArg_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2621);
    type_();
    setState(2622);
    identifier();
    setState(2625);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CSharpParser::ASSIGNMENT) {
      setState(2623);
      match(CSharpParser::ASSIGNMENT);
      setState(2624);
      expression();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Method_invocationContext ------------------------------------------------------------------

CSharpParser::Method_invocationContext::Method_invocationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Method_invocationContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

tree::TerminalNode* CSharpParser::Method_invocationContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}

CSharpParser::Argument_listContext* CSharpParser::Method_invocationContext::argument_list() {
  return getRuleContext<CSharpParser::Argument_listContext>(0);
}


size_t CSharpParser::Method_invocationContext::getRuleIndex() const {
  return CSharpParser::RuleMethod_invocation;
}

void CSharpParser::Method_invocationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethod_invocation(this);
}

void CSharpParser::Method_invocationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethod_invocation(this);
}

CSharpParser::Method_invocationContext* CSharpParser::method_invocation() {
  Method_invocationContext *_localctx = _tracker.createInstance<Method_invocationContext>(_ctx, getState());
  enterRule(_localctx, 430, CSharpParser::RuleMethod_invocation);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2627);
    match(CSharpParser::OPEN_PARENS);
    setState(2629);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -5419197809667089408) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 2305514793348041149) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 129)) & 4398059153857) != 0)) {
      setState(2628);
      argument_list();
    }
    setState(2631);
    match(CSharpParser::CLOSE_PARENS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Object_creation_expressionContext ------------------------------------------------------------------

CSharpParser::Object_creation_expressionContext::Object_creation_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::Object_creation_expressionContext::OPEN_PARENS() {
  return getToken(CSharpParser::OPEN_PARENS, 0);
}

tree::TerminalNode* CSharpParser::Object_creation_expressionContext::CLOSE_PARENS() {
  return getToken(CSharpParser::CLOSE_PARENS, 0);
}

CSharpParser::Argument_listContext* CSharpParser::Object_creation_expressionContext::argument_list() {
  return getRuleContext<CSharpParser::Argument_listContext>(0);
}

CSharpParser::Object_or_collection_initializerContext* CSharpParser::Object_creation_expressionContext::object_or_collection_initializer() {
  return getRuleContext<CSharpParser::Object_or_collection_initializerContext>(0);
}


size_t CSharpParser::Object_creation_expressionContext::getRuleIndex() const {
  return CSharpParser::RuleObject_creation_expression;
}

void CSharpParser::Object_creation_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterObject_creation_expression(this);
}

void CSharpParser::Object_creation_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitObject_creation_expression(this);
}

CSharpParser::Object_creation_expressionContext* CSharpParser::object_creation_expression() {
  Object_creation_expressionContext *_localctx = _tracker.createInstance<Object_creation_expressionContext>(_ctx, getState());
  enterRule(_localctx, 432, CSharpParser::RuleObject_creation_expression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2633);
    match(CSharpParser::OPEN_PARENS);
    setState(2635);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -5419197809667089408) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 2305514793348041149) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 129)) & 4398059153857) != 0)) {
      setState(2634);
      argument_list();
    }
    setState(2637);
    match(CSharpParser::CLOSE_PARENS);
    setState(2639);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 343, _ctx)) {
    case 1: {
      setState(2638);
      object_or_collection_initializer();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdentifierContext ------------------------------------------------------------------

CSharpParser::IdentifierContext::IdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CSharpParser::IdentifierContext::IDENTIFIER() {
  return getToken(CSharpParser::IDENTIFIER, 0);
}

tree::TerminalNode* CSharpParser::IdentifierContext::ADD() {
  return getToken(CSharpParser::ADD, 0);
}

tree::TerminalNode* CSharpParser::IdentifierContext::ALIAS() {
  return getToken(CSharpParser::ALIAS, 0);
}

tree::TerminalNode* CSharpParser::IdentifierContext::ARGLIST() {
  return getToken(CSharpParser::ARGLIST, 0);
}

tree::TerminalNode* CSharpParser::IdentifierContext::ASCENDING() {
  return getToken(CSharpParser::ASCENDING, 0);
}

tree::TerminalNode* CSharpParser::IdentifierContext::ASYNC() {
  return getToken(CSharpParser::ASYNC, 0);
}

tree::TerminalNode* CSharpParser::IdentifierContext::AWAIT() {
  return getToken(CSharpParser::AWAIT, 0);
}

tree::TerminalNode* CSharpParser::IdentifierContext::BY() {
  return getToken(CSharpParser::BY, 0);
}

tree::TerminalNode* CSharpParser::IdentifierContext::DESCENDING() {
  return getToken(CSharpParser::DESCENDING, 0);
}

tree::TerminalNode* CSharpParser::IdentifierContext::DYNAMIC() {
  return getToken(CSharpParser::DYNAMIC, 0);
}

tree::TerminalNode* CSharpParser::IdentifierContext::EQUALS() {
  return getToken(CSharpParser::EQUALS, 0);
}

tree::TerminalNode* CSharpParser::IdentifierContext::FROM() {
  return getToken(CSharpParser::FROM, 0);
}

tree::TerminalNode* CSharpParser::IdentifierContext::GET() {
  return getToken(CSharpParser::GET, 0);
}

tree::TerminalNode* CSharpParser::IdentifierContext::GROUP() {
  return getToken(CSharpParser::GROUP, 0);
}

tree::TerminalNode* CSharpParser::IdentifierContext::INTO() {
  return getToken(CSharpParser::INTO, 0);
}

tree::TerminalNode* CSharpParser::IdentifierContext::JOIN() {
  return getToken(CSharpParser::JOIN, 0);
}

tree::TerminalNode* CSharpParser::IdentifierContext::LET() {
  return getToken(CSharpParser::LET, 0);
}

tree::TerminalNode* CSharpParser::IdentifierContext::NAMEOF() {
  return getToken(CSharpParser::NAMEOF, 0);
}

tree::TerminalNode* CSharpParser::IdentifierContext::ON() {
  return getToken(CSharpParser::ON, 0);
}

tree::TerminalNode* CSharpParser::IdentifierContext::ORDERBY() {
  return getToken(CSharpParser::ORDERBY, 0);
}

tree::TerminalNode* CSharpParser::IdentifierContext::PARTIAL() {
  return getToken(CSharpParser::PARTIAL, 0);
}

tree::TerminalNode* CSharpParser::IdentifierContext::REMOVE() {
  return getToken(CSharpParser::REMOVE, 0);
}

tree::TerminalNode* CSharpParser::IdentifierContext::SELECT() {
  return getToken(CSharpParser::SELECT, 0);
}

tree::TerminalNode* CSharpParser::IdentifierContext::SET() {
  return getToken(CSharpParser::SET, 0);
}

tree::TerminalNode* CSharpParser::IdentifierContext::UNMANAGED() {
  return getToken(CSharpParser::UNMANAGED, 0);
}

tree::TerminalNode* CSharpParser::IdentifierContext::VAR() {
  return getToken(CSharpParser::VAR, 0);
}

tree::TerminalNode* CSharpParser::IdentifierContext::WHEN() {
  return getToken(CSharpParser::WHEN, 0);
}

tree::TerminalNode* CSharpParser::IdentifierContext::WHERE() {
  return getToken(CSharpParser::WHERE, 0);
}

tree::TerminalNode* CSharpParser::IdentifierContext::YIELD() {
  return getToken(CSharpParser::YIELD, 0);
}


size_t CSharpParser::IdentifierContext::getRuleIndex() const {
  return CSharpParser::RuleIdentifier;
}

void CSharpParser::IdentifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIdentifier(this);
}

void CSharpParser::IdentifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<CSharpParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIdentifier(this);
}

CSharpParser::IdentifierContext* CSharpParser::identifier() {
  IdentifierContext *_localctx = _tracker.createInstance<IdentifierContext>(_ctx, getState());
  enterRule(_localctx, 434, CSharpParser::RuleIdentifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2641);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3750091428249852928) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 1904629023639713) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool CSharpParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 86: return local_variable_declarationSempred(antlrcpp::downCast<Local_variable_declarationContext *>(context), predicateIndex);
    case 187: return right_arrowSempred(antlrcpp::downCast<Right_arrowContext *>(context), predicateIndex);
    case 188: return right_shiftSempred(antlrcpp::downCast<Right_shiftContext *>(context), predicateIndex);
    case 189: return right_shift_assignmentSempred(antlrcpp::downCast<Right_shift_assignmentContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool CSharpParser::local_variable_declarationSempred(Local_variable_declarationContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return  this.IsLocalVariableDeclaration() ;

  default:
    break;
  }
  return true;
}

bool CSharpParser::right_arrowSempred(Right_arrowContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 1: return (antlrcpp::downCast<Right_arrowContext *>(_localctx)->first != nullptr ? antlrcpp::downCast<Right_arrowContext *>(_localctx)->first->getTokenIndex() : 0) + 1 == (antlrcpp::downCast<Right_arrowContext *>(_localctx)->second != nullptr ? antlrcpp::downCast<Right_arrowContext *>(_localctx)->second->getTokenIndex() : 0);

  default:
    break;
  }
  return true;
}

bool CSharpParser::right_shiftSempred(Right_shiftContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 2: return (antlrcpp::downCast<Right_shiftContext *>(_localctx)->first != nullptr ? antlrcpp::downCast<Right_shiftContext *>(_localctx)->first->getTokenIndex() : 0) + 1 == (antlrcpp::downCast<Right_shiftContext *>(_localctx)->second != nullptr ? antlrcpp::downCast<Right_shiftContext *>(_localctx)->second->getTokenIndex() : 0);

  default:
    break;
  }
  return true;
}

bool CSharpParser::right_shift_assignmentSempred(Right_shift_assignmentContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 3: return (antlrcpp::downCast<Right_shift_assignmentContext *>(_localctx)->first != nullptr ? antlrcpp::downCast<Right_shift_assignmentContext *>(_localctx)->first->getTokenIndex() : 0) + 1 == (antlrcpp::downCast<Right_shift_assignmentContext *>(_localctx)->second != nullptr ? antlrcpp::downCast<Right_shift_assignmentContext *>(_localctx)->second->getTokenIndex() : 0);

  default:
    break;
  }
  return true;
}

void CSharpParser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  csharpparserParserInitialize();
#else
  ::antlr4::internal::call_once(csharpparserParserOnceFlag, csharpparserParserInitialize);
#endif
}
