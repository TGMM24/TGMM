
// Generated from ObjectiveCParser.g4 by ANTLR 4.13.0


#include "ObjectiveCParserListener.h"

#include "ObjectiveCParser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct ObjectiveCParserStaticData final {
  ObjectiveCParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  ObjectiveCParserStaticData(const ObjectiveCParserStaticData&) = delete;
  ObjectiveCParserStaticData(ObjectiveCParserStaticData&&) = delete;
  ObjectiveCParserStaticData& operator=(const ObjectiveCParserStaticData&) = delete;
  ObjectiveCParserStaticData& operator=(ObjectiveCParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag objectivecparserParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
ObjectiveCParserStaticData *objectivecparserParserStaticData = nullptr;

void objectivecparserParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (objectivecparserParserStaticData != nullptr) {
    return;
  }
#else
  assert(objectivecparserParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<ObjectiveCParserStaticData>(
    std::vector<std::string>{
      "translationUnit", "topLevelDeclaration", "importDeclaration", "classInterface", 
      "categoryInterface", "classImplementation", "categoryImplementation", 
      "genericTypeSpecifier", "protocolDeclaration", "protocolDeclarationSection", 
      "protocolDeclarationList", "classDeclarationList", "protocolList", 
      "propertyDeclaration", "propertyAttributesList", "propertyAttribute", 
      "protocolName", "instanceVariables", "visibilitySection", "accessModifier", 
      "interfaceDeclarationList", "classMethodDeclaration", "instanceMethodDeclaration", 
      "methodDeclaration", "implementationDefinitionList", "classMethodDefinition", 
      "instanceMethodDefinition", "methodDefinition", "methodSelector", 
      "keywordDeclarator", "selector", "methodType", "propertyImplementation", 
      "propertySynthesizeList", "propertySynthesizeItem", "blockType", "genericsSpecifier", 
      "typeSpecifierWithPrefixes", "dictionaryExpression", "dictionaryPair", 
      "arrayExpression", "boxExpression", "blockParameters", "typeVariableDeclaratorOrName", 
      "blockExpression", "messageExpression", "receiver", "messageSelector", 
      "keywordArgument", "keywordArgumentType", "selectorExpression", "selectorName", 
      "protocolExpression", "encodeExpression", "typeVariableDeclarator", 
      "throwStatement", "tryBlock", "catchStatement", "synchronizedStatement", 
      "autoreleaseStatement", "functionDeclaration", "functionDefinition", 
      "functionSignature", "attribute", "attributeName", "attributeParameters", 
      "attributeParameterList", "attributeParameter", "attributeParameterAssignment", 
      "declaration", "functionCallExpression", "enumDeclaration", "varDeclaration", 
      "typedefDeclaration", "typeDeclaratorList", "typeDeclarator", "declarationSpecifiers", 
      "attributeSpecifier", "initDeclaratorList", "initDeclarator", "structOrUnionSpecifier", 
      "fieldDeclaration", "specifierQualifierList", "ibOutletQualifier", 
      "arcBehaviourSpecifier", "nullabilitySpecifier", "storageClassSpecifier", 
      "typePrefix", "typeQualifier", "protocolQualifier", "typeSpecifier", 
      "typeofExpression", "fieldDeclaratorList", "fieldDeclarator", "enumSpecifier", 
      "enumeratorList", "enumerator", "enumeratorIdentifier", "directDeclarator", 
      "declaratorSuffix", "parameterList", "pointer", "macro", "arrayInitializer", 
      "structInitializer", "initializerList", "typeName", "abstractDeclarator", 
      "abstractDeclaratorSuffix", "parameterDeclarationList", "parameterDeclaration", 
      "declarator", "statement", "labeledStatement", "rangeExpression", 
      "compoundStatement", "selectionStatement", "switchStatement", "switchBlock", 
      "switchSection", "switchLabel", "iterationStatement", "whileStatement", 
      "doStatement", "forStatement", "forLoopInitializer", "forInStatement", 
      "jumpStatement", "expressions", "expression", "assignmentOperator", 
      "castExpression", "initializer", "constantExpression", "unaryExpression", 
      "unaryOperator", "postfixExpression", "postfix", "argumentExpressionList", 
      "argumentExpression", "primaryExpression", "constant", "stringLiteral", 
      "identifier"
    },
    std::vector<std::string>{
      "", "'auto'", "'break'", "'case'", "'char'", "'const'", "'continue'", 
      "'default'", "'do'", "'double'", "", "'enum'", "'extern'", "'float'", 
      "'for'", "'goto'", "", "'inline'", "'int'", "'long'", "'register'", 
      "'restrict'", "'return'", "'short'", "'signed'", "'sizeof'", "'static'", 
      "'struct'", "'switch'", "'typedef'", "'union'", "'unsigned'", "'void'", 
      "'volatile'", "'while'", "'_Bool'", "'_Complex'", "'_Imaginery'", 
      "'true'", "'false'", "'BOOL'", "'Class'", "'bycopy'", "'byref'", "'id'", 
      "'IMP'", "'in'", "'inout'", "'nil'", "'NO'", "'NULL'", "'oneway'", 
      "'out'", "'Protocol'", "'SEL'", "'self'", "'super'", "'YES'", "'@autoreleasepool'", 
      "'@catch'", "'@class'", "'@dynamic'", "'@encode'", "'@end'", "'@finally'", 
      "'@implementation'", "'@interface'", "'@import'", "'@package'", "'@protocol'", 
      "'@optional'", "'@private'", "'@property'", "'@protected'", "'@public'", 
      "'@required'", "'@selector'", "'@synchronized'", "'@synthesize'", 
      "'@throw'", "'@try'", "'atomic'", "'nonatomic'", "'retain'", "'__attribute__'", 
      "'__autoreleasing'", "'__block'", "'__bridge'", "'__bridge_retained'", 
      "'__bridge_transfer'", "'__covariant'", "'__contravariant'", "'__deprecated'", 
      "'__kindof'", "'__strong'", "", "'__unsafe_unretained'", "'__unused'", 
      "'__weak'", "", "", "", "'null_resettable'", "'NS_INLINE'", "'NS_ENUM'", 
      "'NS_OPTIONS'", "'assign'", "'copy'", "'getter'", "'setter'", "'strong'", 
      "'readonly'", "'readwrite'", "'weak'", "'unsafe_unretained'", "'IBOutlet'", 
      "'IBOutletCollection'", "'IBInspectable'", "'IB_DESIGNABLE'", "", 
      "", "", "", "", "'__TVOS_PROHIBITED'", "", "", "", "'{'", "'}'", "'['", 
      "']'", "';'", "','", "'.'", "'->'", "'@'", "'='", "", "", "", "'~'", 
      "'\\u003F'", "':'", "", "", "", "", "", "", "'++'", "'--'", "'+'", 
      "'-'", "'*'", "'/'", "'&'", "'|'", "'^'", "'%'", "'+='", "'-='", "'*='", 
      "'/='", "'&='", "'|='", "'^='", "'%='", "'<<='", "'>>='", "'...'", 
      "", "", "", "", "", "", "", "", "", "", "'\\'", "", "", "", "", "", 
      "", "", "", "'defined'", "", "'elif'", "", "'undef'", "'ifdef'", "'ifndef'", 
      "'endif'"
    },
    std::vector<std::string>{
      "", "AUTO", "BREAK", "CASE", "CHAR", "CONST", "CONTINUE", "DEFAULT", 
      "DO", "DOUBLE", "ELSE", "ENUM", "EXTERN", "FLOAT", "FOR", "GOTO", 
      "IF", "INLINE", "INT", "LONG", "REGISTER", "RESTRICT", "RETURN", "SHORT", 
      "SIGNED", "SIZEOF", "STATIC", "STRUCT", "SWITCH", "TYPEDEF", "UNION", 
      "UNSIGNED", "VOID", "VOLATILE", "WHILE", "BOOL_", "COMPLEX", "IMAGINERY", 
      "TRUE", "FALSE", "BOOL", "Class", "BYCOPY", "BYREF", "ID", "IMP", 
      "IN", "INOUT", "NIL", "NO", "NULL_", "ONEWAY", "OUT", "PROTOCOL_", 
      "SEL", "SELF", "SUPER", "YES", "AUTORELEASEPOOL", "CATCH", "CLASS", 
      "DYNAMIC", "ENCODE", "END", "FINALLY", "IMPLEMENTATION", "INTERFACE", 
      "IMPORT", "PACKAGE", "PROTOCOL", "OPTIONAL", "PRIVATE", "PROPERTY", 
      "PROTECTED", "PUBLIC", "REQUIRED", "SELECTOR", "SYNCHRONIZED", "SYNTHESIZE", 
      "THROW", "TRY", "ATOMIC", "NONATOMIC", "RETAIN", "ATTRIBUTE", "AUTORELEASING_QUALIFIER", 
      "BLOCK", "BRIDGE", "BRIDGE_RETAINED", "BRIDGE_TRANSFER", "COVARIANT", 
      "CONTRAVARIANT", "DEPRECATED", "KINDOF", "STRONG_QUALIFIER", "TYPEOF", 
      "UNSAFE_UNRETAINED_QUALIFIER", "UNUSED", "WEAK_QUALIFIER", "NULL_UNSPECIFIED", 
      "NULLABLE", "NONNULL", "NULL_RESETTABLE", "NS_INLINE", "NS_ENUM", 
      "NS_OPTIONS", "ASSIGN", "COPY", "GETTER", "SETTER", "STRONG", "READONLY", 
      "READWRITE", "WEAK", "UNSAFE_UNRETAINED", "IB_OUTLET", "IB_OUTLET_COLLECTION", 
      "IB_INSPECTABLE", "IB_DESIGNABLE", "NS_ASSUME_NONNULL_BEGIN", "NS_ASSUME_NONNULL_END", 
      "EXTERN_SUFFIX", "IOS_SUFFIX", "MAC_SUFFIX", "TVOS_PROHIBITED", "IDENTIFIER", 
      "LP", "RP", "LBRACE", "RBRACE", "LBRACK", "RBRACK", "SEMI", "COMMA", 
      "DOT", "STRUCTACCESS", "AT", "ASSIGNMENT", "GT", "LT", "BANG", "TILDE", 
      "QUESTION", "COLON", "EQUAL", "LE", "GE", "NOTEQUAL", "AND", "OR", 
      "INC", "DEC", "ADD", "SUB", "MUL", "DIV", "BITAND", "BITOR", "BITXOR", 
      "MOD", "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", "AND_ASSIGN", 
      "OR_ASSIGN", "XOR_ASSIGN", "MOD_ASSIGN", "LSHIFT_ASSIGN", "RSHIFT_ASSIGN", 
      "ELIPSIS", "CHARACTER_LITERAL", "STRING_START", "HEX_LITERAL", "OCTAL_LITERAL", 
      "BINARY_LITERAL", "DECIMAL_LITERAL", "FLOATING_POINT_LITERAL", "WS", 
      "MULTI_COMMENT", "SINGLE_COMMENT", "BACKSLASH", "SHARP", "STRING_NEWLINE", 
      "STRING_END", "STRING_VALUE", "DIRECTIVE_IMPORT", "DIRECTIVE_INCLUDE", 
      "DIRECTIVE_PRAGMA", "DIRECTIVE_DEFINE", "DIRECTIVE_DEFINED", "DIRECTIVE_IF", 
      "DIRECTIVE_ELIF", "DIRECTIVE_ELSE", "DIRECTIVE_UNDEF", "DIRECTIVE_IFDEF", 
      "DIRECTIVE_IFNDEF", "DIRECTIVE_ENDIF", "DIRECTIVE_TRUE", "DIRECTIVE_FALSE", 
      "DIRECTIVE_ERROR", "DIRECTIVE_WARNING", "DIRECTIVE_BANG", "DIRECTIVE_LP", 
      "DIRECTIVE_RP", "DIRECTIVE_EQUAL", "DIRECTIVE_NOTEQUAL", "DIRECTIVE_AND", 
      "DIRECTIVE_OR", "DIRECTIVE_LT", "DIRECTIVE_GT", "DIRECTIVE_LE", "DIRECTIVE_GE", 
      "DIRECTIVE_STRING", "DIRECTIVE_ID", "DIRECTIVE_DECIMAL_LITERAL", "DIRECTIVE_FLOAT", 
      "DIRECTIVE_NEWLINE", "DIRECTIVE_MULTI_COMMENT", "DIRECTIVE_SINGLE_COMMENT", 
      "DIRECTIVE_BACKSLASH_NEWLINE", "DIRECTIVE_TEXT_NEWLINE", "DIRECTIVE_TEXT"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,222,1701,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,
  	7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,
  	7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,
  	7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,
  	7,122,2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,
  	7,128,2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,
  	7,134,2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,
  	7,140,2,141,7,141,2,142,7,142,2,143,7,143,1,0,5,0,290,8,0,10,0,12,0,293,
  	9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,308,8,1,1,
  	2,1,2,1,2,1,2,1,3,3,3,315,8,3,1,3,1,3,1,3,1,3,3,3,321,8,3,1,3,1,3,1,3,
  	1,3,3,3,327,8,3,1,3,3,3,330,8,3,1,3,3,3,333,8,3,1,3,1,3,1,4,1,4,1,4,1,
  	4,3,4,341,8,4,1,4,1,4,1,4,1,4,1,4,3,4,348,8,4,1,4,3,4,351,8,4,1,4,3,4,
  	354,8,4,1,4,1,4,1,5,1,5,1,5,1,5,3,5,362,8,5,1,5,3,5,365,8,5,1,5,3,5,368,
  	8,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,3,6,378,8,6,1,6,1,6,1,7,1,7,1,7,1,
  	7,1,7,1,7,3,7,388,8,7,1,8,1,8,1,8,1,8,1,8,1,8,3,8,396,8,8,1,8,5,8,399,
  	8,8,10,8,12,8,402,9,8,1,8,1,8,1,9,1,9,5,9,408,8,9,10,9,12,9,411,9,9,1,
  	9,4,9,414,8,9,11,9,12,9,415,3,9,418,8,9,1,10,1,10,1,10,1,10,1,11,1,11,
  	1,11,1,11,5,11,428,8,11,10,11,12,11,431,9,11,1,11,1,11,1,12,1,12,1,12,
  	5,12,438,8,12,10,12,12,12,441,9,12,1,13,1,13,1,13,1,13,1,13,3,13,448,
  	8,13,1,13,3,13,451,8,13,1,13,3,13,454,8,13,1,13,1,13,1,14,1,14,1,14,5,
  	14,461,8,14,10,14,12,14,464,9,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,
  	15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,486,
  	8,15,1,16,1,16,1,16,1,16,1,16,3,16,493,8,16,1,16,3,16,496,8,16,1,17,1,
  	17,5,17,500,8,17,10,17,12,17,503,9,17,1,17,1,17,1,18,1,18,5,18,509,8,
  	18,10,18,12,18,512,9,18,1,18,4,18,515,8,18,11,18,12,18,516,3,18,519,8,
  	18,1,19,1,19,1,20,1,20,1,20,1,20,1,20,4,20,528,8,20,11,20,12,20,529,1,
  	21,1,21,1,21,1,22,1,22,1,22,1,23,3,23,539,8,23,1,23,1,23,3,23,543,8,23,
  	1,23,1,23,1,24,1,24,1,24,1,24,1,24,4,24,552,8,24,11,24,12,24,553,1,25,
  	1,25,1,25,1,26,1,26,1,26,1,27,3,27,563,8,27,1,27,1,27,3,27,567,8,27,1,
  	27,3,27,570,8,27,1,27,1,27,1,28,1,28,4,28,576,8,28,11,28,12,28,577,1,
  	28,1,28,3,28,582,8,28,3,28,584,8,28,1,29,3,29,587,8,29,1,29,1,29,5,29,
  	591,8,29,10,29,12,29,594,9,29,1,29,3,29,597,8,29,1,29,1,29,1,30,1,30,
  	3,30,603,8,30,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,
  	1,32,3,32,617,8,32,1,33,1,33,1,33,5,33,622,8,33,10,33,12,33,625,9,33,
  	1,34,1,34,1,34,3,34,630,8,34,1,35,3,35,633,8,35,1,35,1,35,3,35,637,8,
  	35,1,35,1,35,1,35,1,35,3,35,643,8,35,1,35,1,35,3,35,647,8,35,1,36,1,36,
  	1,36,1,36,5,36,653,8,36,10,36,12,36,656,9,36,3,36,658,8,36,1,36,1,36,
  	1,37,5,37,663,8,37,10,37,12,37,666,9,37,1,37,1,37,3,37,670,8,37,1,38,
  	1,38,1,38,1,38,1,38,5,38,677,8,38,10,38,12,38,680,9,38,1,38,3,38,683,
  	8,38,3,38,685,8,38,1,38,1,38,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,
  	3,40,697,8,40,3,40,699,8,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,41,1,
  	41,1,41,3,41,711,8,41,3,41,713,8,41,1,42,1,42,1,42,3,42,718,8,42,1,42,
  	1,42,5,42,722,8,42,10,42,12,42,725,9,42,3,42,727,8,42,1,42,1,42,1,43,
  	1,43,3,43,733,8,43,1,44,1,44,3,44,737,8,44,1,44,3,44,740,8,44,1,44,3,
  	44,743,8,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,46,1,46,3,46,754,8,46,
  	1,47,1,47,4,47,758,8,47,11,47,12,47,759,3,47,762,8,47,1,48,3,48,765,8,
  	48,1,48,1,48,1,48,1,48,5,48,771,8,48,10,48,12,48,774,9,48,1,49,1,49,3,
  	49,778,8,49,1,49,1,49,1,49,1,49,3,49,784,8,49,1,50,1,50,1,50,1,50,1,50,
  	1,51,1,51,3,51,793,8,51,1,51,4,51,796,8,51,11,51,12,51,797,3,51,800,8,
  	51,1,52,1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,
  	55,1,55,1,55,1,55,1,55,1,55,1,55,3,55,822,8,55,1,56,1,56,1,56,5,56,827,
  	8,56,10,56,12,56,830,9,56,1,56,1,56,3,56,834,8,56,1,57,1,57,1,57,1,57,
  	1,57,1,57,1,58,1,58,1,58,1,58,1,58,1,58,1,59,1,59,1,59,1,60,1,60,1,60,
  	1,61,1,61,1,61,1,62,3,62,858,8,62,1,62,1,62,1,62,3,62,863,8,62,1,62,1,
  	62,1,62,3,62,868,8,62,1,63,1,63,3,63,872,8,63,1,64,1,64,3,64,876,8,64,
  	1,65,1,65,3,65,880,8,65,1,65,1,65,1,66,1,66,1,66,5,66,887,8,66,10,66,
  	12,66,890,9,66,1,67,1,67,1,67,1,67,3,67,896,8,67,1,68,1,68,1,68,1,68,
  	1,68,3,68,903,8,68,1,69,1,69,1,69,1,69,3,69,909,8,69,1,70,3,70,912,8,
  	70,1,70,1,70,3,70,916,8,70,1,70,1,70,1,70,1,70,1,70,1,71,3,71,924,8,71,
  	1,71,3,71,927,8,71,1,71,1,71,3,71,931,8,71,1,71,1,71,1,72,1,72,1,72,1,
  	72,3,72,939,8,72,1,72,1,72,1,73,3,73,944,8,73,1,73,1,73,1,73,1,73,1,73,
  	3,73,951,8,73,1,73,1,73,1,74,1,74,1,74,5,74,958,8,74,10,74,12,74,961,
  	9,74,1,75,3,75,964,8,75,1,75,1,75,1,76,1,76,1,76,1,76,1,76,1,76,1,76,
  	1,76,4,76,976,8,76,11,76,12,76,977,1,77,1,77,1,77,1,77,1,77,1,77,5,77,
  	986,8,77,10,77,12,77,989,9,77,1,77,1,77,1,77,1,78,1,78,1,78,5,78,997,
  	8,78,10,78,12,78,1000,9,78,1,79,1,79,1,79,3,79,1005,8,79,1,80,1,80,1,
  	80,3,80,1010,8,80,1,80,1,80,4,80,1014,8,80,11,80,12,80,1015,1,80,1,80,
  	3,80,1020,8,80,1,81,1,81,1,81,3,81,1025,8,81,1,81,1,81,1,82,1,82,1,82,
  	1,82,1,82,1,82,4,82,1035,8,82,11,82,12,82,1036,1,83,1,83,1,83,1,83,1,
  	83,1,83,3,83,1045,8,83,1,84,1,84,1,85,1,85,1,86,1,86,1,87,1,87,1,88,1,
  	88,1,88,1,88,3,88,1059,8,88,1,89,1,89,1,90,1,90,1,90,1,90,1,90,1,90,1,
  	90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,3,90,1078,8,90,3,90,1080,8,
  	90,1,91,1,91,1,91,1,91,1,91,1,92,1,92,1,92,5,92,1090,8,92,10,92,12,92,
  	1093,9,92,1,93,1,93,3,93,1097,8,93,1,93,1,93,3,93,1101,8,93,1,94,1,94,
  	3,94,1105,8,94,1,94,1,94,3,94,1109,8,94,1,94,1,94,1,94,1,94,1,94,3,94,
  	1116,8,94,1,94,1,94,1,94,1,94,3,94,1122,8,94,1,94,1,94,1,94,1,94,1,94,
  	1,94,1,94,1,94,1,94,1,94,3,94,1134,8,94,1,95,1,95,1,95,5,95,1139,8,95,
  	10,95,12,95,1142,9,95,1,95,3,95,1145,8,95,1,96,1,96,1,96,3,96,1150,8,
  	96,1,97,1,97,3,97,1154,8,97,1,98,1,98,1,98,1,98,1,98,3,98,1161,8,98,1,
  	98,5,98,1164,8,98,10,98,12,98,1167,9,98,1,98,1,98,1,98,3,98,1172,8,98,
  	1,98,3,98,1175,8,98,1,98,1,98,3,98,1179,8,98,1,99,1,99,3,99,1183,8,99,
  	1,99,1,99,1,100,1,100,1,100,3,100,1190,8,100,1,101,1,101,3,101,1194,8,
  	101,1,101,3,101,1197,8,101,1,102,1,102,1,102,1,102,1,102,5,102,1204,8,
  	102,10,102,12,102,1207,9,102,1,102,1,102,3,102,1211,8,102,1,103,1,103,
  	1,103,3,103,1216,8,103,3,103,1218,8,103,1,103,1,103,1,104,1,104,1,104,
  	1,104,1,104,1,104,5,104,1228,8,104,10,104,12,104,1231,9,104,1,104,3,104,
  	1234,8,104,3,104,1236,8,104,1,104,1,104,1,105,1,105,1,105,5,105,1243,
  	8,105,10,105,12,105,1246,9,105,1,105,3,105,1249,8,105,1,106,1,106,3,106,
  	1253,8,106,1,106,3,106,1256,8,106,1,107,1,107,3,107,1260,8,107,1,107,
  	1,107,3,107,1264,8,107,1,107,1,107,4,107,1268,8,107,11,107,12,107,1269,
  	1,107,1,107,3,107,1274,8,107,1,107,4,107,1277,8,107,11,107,12,107,1278,
  	3,107,1281,8,107,1,108,1,108,3,108,1285,8,108,1,108,1,108,1,108,3,108,
  	1290,8,108,1,108,3,108,1293,8,108,1,109,1,109,1,109,5,109,1298,8,109,
  	10,109,12,109,1301,9,109,1,110,1,110,1,110,1,110,3,110,1307,8,110,1,111,
  	3,111,1310,8,111,1,111,1,111,1,112,1,112,3,112,1316,8,112,1,112,1,112,
  	3,112,1320,8,112,1,112,1,112,3,112,1324,8,112,1,112,1,112,3,112,1328,
  	8,112,1,112,1,112,3,112,1332,8,112,1,112,1,112,3,112,1336,8,112,1,112,
  	1,112,3,112,1340,8,112,1,112,1,112,3,112,1344,8,112,1,112,1,112,3,112,
  	1348,8,112,1,112,1,112,3,112,1352,8,112,1,112,3,112,1355,8,112,1,113,
  	1,113,1,113,1,113,1,114,1,114,1,114,3,114,1364,8,114,1,115,1,115,1,115,
  	5,115,1369,8,115,10,115,12,115,1372,9,115,1,115,1,115,1,116,1,116,1,116,
  	1,116,1,116,1,116,1,116,3,116,1383,8,116,1,116,3,116,1386,8,116,1,117,
  	1,117,1,117,1,117,1,117,1,117,1,118,1,118,5,118,1396,8,118,10,118,12,
  	118,1399,9,118,1,118,1,118,1,119,4,119,1404,8,119,11,119,12,119,1405,
  	1,119,4,119,1409,8,119,11,119,12,119,1410,1,120,1,120,1,120,1,120,1,120,
  	1,120,3,120,1419,8,120,1,120,1,120,1,120,1,120,3,120,1425,8,120,1,121,
  	1,121,1,121,1,121,3,121,1431,8,121,1,122,1,122,1,122,1,122,1,122,1,122,
  	1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,124,1,124,1,124,3,124,
  	1450,8,124,1,124,1,124,3,124,1454,8,124,1,124,1,124,3,124,1458,8,124,
  	1,124,1,124,1,124,1,125,1,125,1,125,1,125,3,125,1467,8,125,1,126,1,126,
  	1,126,1,126,1,126,3,126,1474,8,126,1,126,1,126,1,126,1,127,1,127,1,127,
  	1,127,1,127,1,127,3,127,1485,8,127,3,127,1487,8,127,1,128,1,128,1,128,
  	5,128,1492,8,128,10,128,12,128,1495,9,128,1,129,1,129,1,129,1,129,1,129,
  	1,129,1,129,1,129,1,129,1,129,3,129,1507,8,129,1,129,1,129,1,129,1,129,
  	1,129,1,129,1,129,1,129,1,129,1,129,1,129,3,129,1520,8,129,1,129,1,129,
  	1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,
  	1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,3,129,
  	1547,8,129,1,129,1,129,5,129,1551,8,129,10,129,12,129,1554,9,129,1,130,
  	1,130,1,131,1,131,1,131,1,131,1,131,1,131,1,131,3,131,1565,8,131,3,131,
  	1567,8,131,1,132,1,132,1,132,3,132,1572,8,132,1,133,1,133,3,133,1576,
  	8,133,1,134,1,134,1,134,1,134,1,134,1,134,1,134,3,134,1585,8,134,1,134,
  	1,134,1,134,1,134,1,134,3,134,1592,8,134,1,135,1,135,1,136,1,136,1,136,
  	5,136,1599,8,136,10,136,12,136,1602,9,136,1,136,1,136,1,136,1,136,5,136,
  	1608,8,136,10,136,12,136,1611,9,136,5,136,1613,8,136,10,136,12,136,1616,
  	9,136,1,137,1,137,1,137,1,137,1,137,1,137,3,137,1624,8,137,1,137,1,137,
  	1,137,1,137,4,137,1630,8,137,11,137,12,137,1631,1,137,1,137,3,137,1636,
  	8,137,1,138,1,138,1,138,5,138,1641,8,138,10,138,12,138,1644,9,138,1,139,
  	1,139,3,139,1648,8,139,1,140,1,140,1,140,1,140,1,140,1,140,1,140,1,140,
  	1,140,1,140,1,140,1,140,1,140,1,140,1,140,3,140,1665,8,140,1,141,1,141,
  	1,141,1,141,3,141,1671,8,141,1,141,1,141,3,141,1675,8,141,1,141,1,141,
  	1,141,1,141,1,141,1,141,1,141,1,141,3,141,1685,8,141,1,142,1,142,5,142,
  	1689,8,142,10,142,12,142,1692,9,142,1,142,4,142,1695,8,142,11,142,12,
  	142,1696,1,143,1,143,1,143,0,2,258,272,144,0,2,4,6,8,10,12,14,16,18,20,
  	22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,
  	68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,
  	112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,
  	148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,
  	184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,
  	220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,
  	256,258,260,262,264,266,268,270,272,274,276,278,280,282,284,286,0,21,
  	2,0,70,70,75,75,1,0,90,91,3,0,68,68,71,71,73,74,2,0,27,27,30,30,4,0,85,
  	85,94,94,96,96,98,98,1,0,99,102,4,0,1,1,12,12,20,20,26,26,4,0,17,17,86,
  	89,93,93,103,103,3,0,42,43,46,47,51,52,1,0,104,105,2,0,154,155,159,159,
  	1,0,152,153,2,0,138,139,145,146,2,0,144,144,147,147,2,0,137,137,160,169,
  	1,0,150,151,3,0,140,141,152,154,156,156,1,0,134,135,1,0,127,127,2,0,183,
  	183,185,185,8,0,40,47,51,56,81,83,85,86,88,93,97,97,99,118,125,125,1886,
  	0,291,1,0,0,0,2,307,1,0,0,0,4,309,1,0,0,0,6,314,1,0,0,0,8,336,1,0,0,0,
  	10,357,1,0,0,0,12,371,1,0,0,0,14,381,1,0,0,0,16,389,1,0,0,0,18,417,1,
  	0,0,0,20,419,1,0,0,0,22,423,1,0,0,0,24,434,1,0,0,0,26,442,1,0,0,0,28,
  	457,1,0,0,0,30,485,1,0,0,0,32,495,1,0,0,0,34,497,1,0,0,0,36,518,1,0,0,
  	0,38,520,1,0,0,0,40,527,1,0,0,0,42,531,1,0,0,0,44,534,1,0,0,0,46,538,
  	1,0,0,0,48,551,1,0,0,0,50,555,1,0,0,0,52,558,1,0,0,0,54,562,1,0,0,0,56,
  	583,1,0,0,0,58,586,1,0,0,0,60,602,1,0,0,0,62,604,1,0,0,0,64,616,1,0,0,
  	0,66,618,1,0,0,0,68,626,1,0,0,0,70,632,1,0,0,0,72,648,1,0,0,0,74,669,
  	1,0,0,0,76,671,1,0,0,0,78,688,1,0,0,0,80,692,1,0,0,0,82,712,1,0,0,0,84,
  	714,1,0,0,0,86,732,1,0,0,0,88,734,1,0,0,0,90,746,1,0,0,0,92,753,1,0,0,
  	0,94,761,1,0,0,0,96,764,1,0,0,0,98,775,1,0,0,0,100,785,1,0,0,0,102,799,
  	1,0,0,0,104,801,1,0,0,0,106,806,1,0,0,0,108,811,1,0,0,0,110,821,1,0,0,
  	0,112,823,1,0,0,0,114,835,1,0,0,0,116,841,1,0,0,0,118,847,1,0,0,0,120,
  	850,1,0,0,0,122,853,1,0,0,0,124,857,1,0,0,0,126,869,1,0,0,0,128,875,1,
  	0,0,0,130,877,1,0,0,0,132,883,1,0,0,0,134,895,1,0,0,0,136,897,1,0,0,0,
  	138,908,1,0,0,0,140,911,1,0,0,0,142,923,1,0,0,0,144,938,1,0,0,0,146,943,
  	1,0,0,0,148,954,1,0,0,0,150,963,1,0,0,0,152,975,1,0,0,0,154,979,1,0,0,
  	0,156,993,1,0,0,0,158,1001,1,0,0,0,160,1006,1,0,0,0,162,1021,1,0,0,0,
  	164,1034,1,0,0,0,166,1044,1,0,0,0,168,1046,1,0,0,0,170,1048,1,0,0,0,172,
  	1050,1,0,0,0,174,1052,1,0,0,0,176,1058,1,0,0,0,178,1060,1,0,0,0,180,1079,
  	1,0,0,0,182,1081,1,0,0,0,184,1086,1,0,0,0,186,1100,1,0,0,0,188,1133,1,
  	0,0,0,190,1135,1,0,0,0,192,1146,1,0,0,0,194,1153,1,0,0,0,196,1178,1,0,
  	0,0,198,1180,1,0,0,0,200,1186,1,0,0,0,202,1191,1,0,0,0,204,1198,1,0,0,
  	0,206,1212,1,0,0,0,208,1221,1,0,0,0,210,1239,1,0,0,0,212,1255,1,0,0,0,
  	214,1280,1,0,0,0,216,1292,1,0,0,0,218,1294,1,0,0,0,220,1306,1,0,0,0,222,
  	1309,1,0,0,0,224,1354,1,0,0,0,226,1356,1,0,0,0,228,1360,1,0,0,0,230,1365,
  	1,0,0,0,232,1385,1,0,0,0,234,1387,1,0,0,0,236,1393,1,0,0,0,238,1403,1,
  	0,0,0,240,1424,1,0,0,0,242,1430,1,0,0,0,244,1432,1,0,0,0,246,1438,1,0,
  	0,0,248,1446,1,0,0,0,250,1466,1,0,0,0,252,1468,1,0,0,0,254,1486,1,0,0,
  	0,256,1488,1,0,0,0,258,1506,1,0,0,0,260,1555,1,0,0,0,262,1566,1,0,0,0,
  	264,1571,1,0,0,0,266,1575,1,0,0,0,268,1591,1,0,0,0,270,1593,1,0,0,0,272,
  	1595,1,0,0,0,274,1635,1,0,0,0,276,1637,1,0,0,0,278,1647,1,0,0,0,280,1664,
  	1,0,0,0,282,1684,1,0,0,0,284,1694,1,0,0,0,286,1698,1,0,0,0,288,290,3,
  	2,1,0,289,288,1,0,0,0,290,293,1,0,0,0,291,289,1,0,0,0,291,292,1,0,0,0,
  	292,294,1,0,0,0,293,291,1,0,0,0,294,295,5,0,0,1,295,1,1,0,0,0,296,308,
  	3,4,2,0,297,308,3,120,60,0,298,308,3,138,69,0,299,308,3,6,3,0,300,308,
  	3,10,5,0,301,308,3,8,4,0,302,308,3,12,6,0,303,308,3,16,8,0,304,308,3,
  	20,10,0,305,308,3,22,11,0,306,308,3,122,61,0,307,296,1,0,0,0,307,297,
  	1,0,0,0,307,298,1,0,0,0,307,299,1,0,0,0,307,300,1,0,0,0,307,301,1,0,0,
  	0,307,302,1,0,0,0,307,303,1,0,0,0,307,304,1,0,0,0,307,305,1,0,0,0,307,
  	306,1,0,0,0,308,3,1,0,0,0,309,310,5,67,0,0,310,311,3,286,143,0,311,312,
  	5,132,0,0,312,5,1,0,0,0,313,315,5,118,0,0,314,313,1,0,0,0,314,315,1,0,
  	0,0,315,316,1,0,0,0,316,317,5,66,0,0,317,320,3,14,7,0,318,319,5,143,0,
  	0,319,321,3,286,143,0,320,318,1,0,0,0,320,321,1,0,0,0,321,326,1,0,0,0,
  	322,323,5,139,0,0,323,324,3,24,12,0,324,325,5,138,0,0,325,327,1,0,0,0,
  	326,322,1,0,0,0,326,327,1,0,0,0,327,329,1,0,0,0,328,330,3,34,17,0,329,
  	328,1,0,0,0,329,330,1,0,0,0,330,332,1,0,0,0,331,333,3,40,20,0,332,331,
  	1,0,0,0,332,333,1,0,0,0,333,334,1,0,0,0,334,335,5,63,0,0,335,7,1,0,0,
  	0,336,337,5,66,0,0,337,338,3,14,7,0,338,340,5,126,0,0,339,341,3,286,143,
  	0,340,339,1,0,0,0,340,341,1,0,0,0,341,342,1,0,0,0,342,347,5,127,0,0,343,
  	344,5,139,0,0,344,345,3,24,12,0,345,346,5,138,0,0,346,348,1,0,0,0,347,
  	343,1,0,0,0,347,348,1,0,0,0,348,350,1,0,0,0,349,351,3,34,17,0,350,349,
  	1,0,0,0,350,351,1,0,0,0,351,353,1,0,0,0,352,354,3,40,20,0,353,352,1,0,
  	0,0,353,354,1,0,0,0,354,355,1,0,0,0,355,356,5,63,0,0,356,9,1,0,0,0,357,
  	358,5,65,0,0,358,361,3,14,7,0,359,360,5,143,0,0,360,362,3,286,143,0,361,
  	359,1,0,0,0,361,362,1,0,0,0,362,364,1,0,0,0,363,365,3,34,17,0,364,363,
  	1,0,0,0,364,365,1,0,0,0,365,367,1,0,0,0,366,368,3,48,24,0,367,366,1,0,
  	0,0,367,368,1,0,0,0,368,369,1,0,0,0,369,370,5,63,0,0,370,11,1,0,0,0,371,
  	372,5,65,0,0,372,373,3,14,7,0,373,374,5,126,0,0,374,375,3,286,143,0,375,
  	377,5,127,0,0,376,378,3,48,24,0,377,376,1,0,0,0,377,378,1,0,0,0,378,379,
  	1,0,0,0,379,380,5,63,0,0,380,13,1,0,0,0,381,387,3,286,143,0,382,383,5,
  	139,0,0,383,384,3,24,12,0,384,385,5,138,0,0,385,388,1,0,0,0,386,388,3,
  	72,36,0,387,382,1,0,0,0,387,386,1,0,0,0,387,388,1,0,0,0,388,15,1,0,0,
  	0,389,390,5,69,0,0,390,395,3,32,16,0,391,392,5,139,0,0,392,393,3,24,12,
  	0,393,394,5,138,0,0,394,396,1,0,0,0,395,391,1,0,0,0,395,396,1,0,0,0,396,
  	400,1,0,0,0,397,399,3,18,9,0,398,397,1,0,0,0,399,402,1,0,0,0,400,398,
  	1,0,0,0,400,401,1,0,0,0,401,403,1,0,0,0,402,400,1,0,0,0,403,404,5,63,
  	0,0,404,17,1,0,0,0,405,409,7,0,0,0,406,408,3,40,20,0,407,406,1,0,0,0,
  	408,411,1,0,0,0,409,407,1,0,0,0,409,410,1,0,0,0,410,418,1,0,0,0,411,409,
  	1,0,0,0,412,414,3,40,20,0,413,412,1,0,0,0,414,415,1,0,0,0,415,413,1,0,
  	0,0,415,416,1,0,0,0,416,418,1,0,0,0,417,405,1,0,0,0,417,413,1,0,0,0,418,
  	19,1,0,0,0,419,420,5,69,0,0,420,421,3,24,12,0,421,422,5,132,0,0,422,21,
  	1,0,0,0,423,424,5,60,0,0,424,429,3,286,143,0,425,426,5,133,0,0,426,428,
  	3,286,143,0,427,425,1,0,0,0,428,431,1,0,0,0,429,427,1,0,0,0,429,430,1,
  	0,0,0,430,432,1,0,0,0,431,429,1,0,0,0,432,433,5,132,0,0,433,23,1,0,0,
  	0,434,439,3,32,16,0,435,436,5,133,0,0,436,438,3,32,16,0,437,435,1,0,0,
  	0,438,441,1,0,0,0,439,437,1,0,0,0,439,440,1,0,0,0,440,25,1,0,0,0,441,
  	439,1,0,0,0,442,447,5,72,0,0,443,444,5,126,0,0,444,445,3,28,14,0,445,
  	446,5,127,0,0,446,448,1,0,0,0,447,443,1,0,0,0,447,448,1,0,0,0,448,450,
  	1,0,0,0,449,451,3,166,83,0,450,449,1,0,0,0,450,451,1,0,0,0,451,453,1,
  	0,0,0,452,454,5,117,0,0,453,452,1,0,0,0,453,454,1,0,0,0,454,455,1,0,0,
  	0,455,456,3,162,81,0,456,27,1,0,0,0,457,462,3,30,15,0,458,459,5,133,0,
  	0,459,461,3,30,15,0,460,458,1,0,0,0,461,464,1,0,0,0,462,460,1,0,0,0,462,
  	463,1,0,0,0,463,29,1,0,0,0,464,462,1,0,0,0,465,486,5,81,0,0,466,486,5,
  	82,0,0,467,486,5,110,0,0,468,486,5,113,0,0,469,486,5,83,0,0,470,486,5,
  	106,0,0,471,486,5,114,0,0,472,486,5,107,0,0,473,486,5,111,0,0,474,486,
  	5,112,0,0,475,476,5,108,0,0,476,477,5,137,0,0,477,486,3,286,143,0,478,
  	479,5,109,0,0,479,480,5,137,0,0,480,481,3,286,143,0,481,482,5,143,0,0,
  	482,486,1,0,0,0,483,486,3,170,85,0,484,486,3,286,143,0,485,465,1,0,0,
  	0,485,466,1,0,0,0,485,467,1,0,0,0,485,468,1,0,0,0,485,469,1,0,0,0,485,
  	470,1,0,0,0,485,471,1,0,0,0,485,472,1,0,0,0,485,473,1,0,0,0,485,474,1,
  	0,0,0,485,475,1,0,0,0,485,478,1,0,0,0,485,483,1,0,0,0,485,484,1,0,0,0,
  	486,31,1,0,0,0,487,488,5,139,0,0,488,489,3,24,12,0,489,490,5,138,0,0,
  	490,496,1,0,0,0,491,493,7,1,0,0,492,491,1,0,0,0,492,493,1,0,0,0,493,494,
  	1,0,0,0,494,496,3,286,143,0,495,487,1,0,0,0,495,492,1,0,0,0,496,33,1,
  	0,0,0,497,501,5,128,0,0,498,500,3,36,18,0,499,498,1,0,0,0,500,503,1,0,
  	0,0,501,499,1,0,0,0,501,502,1,0,0,0,502,504,1,0,0,0,503,501,1,0,0,0,504,
  	505,5,129,0,0,505,35,1,0,0,0,506,510,3,38,19,0,507,509,3,162,81,0,508,
  	507,1,0,0,0,509,512,1,0,0,0,510,508,1,0,0,0,510,511,1,0,0,0,511,519,1,
  	0,0,0,512,510,1,0,0,0,513,515,3,162,81,0,514,513,1,0,0,0,515,516,1,0,
  	0,0,516,514,1,0,0,0,516,517,1,0,0,0,517,519,1,0,0,0,518,506,1,0,0,0,518,
  	514,1,0,0,0,519,37,1,0,0,0,520,521,7,2,0,0,521,39,1,0,0,0,522,528,3,138,
  	69,0,523,528,3,42,21,0,524,528,3,44,22,0,525,528,3,26,13,0,526,528,3,
  	120,60,0,527,522,1,0,0,0,527,523,1,0,0,0,527,524,1,0,0,0,527,525,1,0,
  	0,0,527,526,1,0,0,0,528,529,1,0,0,0,529,527,1,0,0,0,529,530,1,0,0,0,530,
  	41,1,0,0,0,531,532,5,152,0,0,532,533,3,46,23,0,533,43,1,0,0,0,534,535,
  	5,153,0,0,535,536,3,46,23,0,536,45,1,0,0,0,537,539,3,62,31,0,538,537,
  	1,0,0,0,538,539,1,0,0,0,539,540,1,0,0,0,540,542,3,56,28,0,541,543,3,204,
  	102,0,542,541,1,0,0,0,542,543,1,0,0,0,543,544,1,0,0,0,544,545,5,132,0,
  	0,545,47,1,0,0,0,546,552,3,122,61,0,547,552,3,138,69,0,548,552,3,50,25,
  	0,549,552,3,52,26,0,550,552,3,64,32,0,551,546,1,0,0,0,551,547,1,0,0,0,
  	551,548,1,0,0,0,551,549,1,0,0,0,551,550,1,0,0,0,552,553,1,0,0,0,553,551,
  	1,0,0,0,553,554,1,0,0,0,554,49,1,0,0,0,555,556,5,152,0,0,556,557,3,54,
  	27,0,557,51,1,0,0,0,558,559,5,153,0,0,559,560,3,54,27,0,560,53,1,0,0,
  	0,561,563,3,62,31,0,562,561,1,0,0,0,562,563,1,0,0,0,563,564,1,0,0,0,564,
  	566,3,56,28,0,565,567,3,156,78,0,566,565,1,0,0,0,566,567,1,0,0,0,567,
  	569,1,0,0,0,568,570,5,132,0,0,569,568,1,0,0,0,569,570,1,0,0,0,570,571,
  	1,0,0,0,571,572,3,230,115,0,572,55,1,0,0,0,573,584,3,60,30,0,574,576,
  	3,58,29,0,575,574,1,0,0,0,576,577,1,0,0,0,577,575,1,0,0,0,577,578,1,0,
  	0,0,578,581,1,0,0,0,579,580,5,133,0,0,580,582,5,170,0,0,581,579,1,0,0,
  	0,581,582,1,0,0,0,582,584,1,0,0,0,583,573,1,0,0,0,583,575,1,0,0,0,584,
  	57,1,0,0,0,585,587,3,60,30,0,586,585,1,0,0,0,586,587,1,0,0,0,587,588,
  	1,0,0,0,588,592,5,143,0,0,589,591,3,62,31,0,590,589,1,0,0,0,591,594,1,
  	0,0,0,592,590,1,0,0,0,592,593,1,0,0,0,593,596,1,0,0,0,594,592,1,0,0,0,
  	595,597,3,168,84,0,596,595,1,0,0,0,596,597,1,0,0,0,597,598,1,0,0,0,598,
  	599,3,286,143,0,599,59,1,0,0,0,600,603,3,286,143,0,601,603,5,22,0,0,602,
  	600,1,0,0,0,602,601,1,0,0,0,603,61,1,0,0,0,604,605,5,126,0,0,605,606,
  	3,212,106,0,606,607,5,127,0,0,607,63,1,0,0,0,608,609,5,78,0,0,609,610,
  	3,66,33,0,610,611,5,132,0,0,611,617,1,0,0,0,612,613,5,61,0,0,613,614,
  	3,66,33,0,614,615,5,132,0,0,615,617,1,0,0,0,616,608,1,0,0,0,616,612,1,
  	0,0,0,617,65,1,0,0,0,618,623,3,68,34,0,619,620,5,133,0,0,620,622,3,68,
  	34,0,621,619,1,0,0,0,622,625,1,0,0,0,623,621,1,0,0,0,623,624,1,0,0,0,
  	624,67,1,0,0,0,625,623,1,0,0,0,626,629,3,286,143,0,627,628,5,137,0,0,
  	628,630,3,286,143,0,629,627,1,0,0,0,629,630,1,0,0,0,630,69,1,0,0,0,631,
  	633,3,170,85,0,632,631,1,0,0,0,632,633,1,0,0,0,633,634,1,0,0,0,634,636,
  	3,180,90,0,635,637,3,170,85,0,636,635,1,0,0,0,636,637,1,0,0,0,637,638,
  	1,0,0,0,638,639,5,126,0,0,639,642,5,158,0,0,640,643,3,170,85,0,641,643,
  	3,180,90,0,642,640,1,0,0,0,642,641,1,0,0,0,642,643,1,0,0,0,643,644,1,
  	0,0,0,644,646,5,127,0,0,645,647,3,84,42,0,646,645,1,0,0,0,646,647,1,0,
  	0,0,647,71,1,0,0,0,648,657,5,139,0,0,649,654,3,74,37,0,650,651,5,133,
  	0,0,651,653,3,74,37,0,652,650,1,0,0,0,653,656,1,0,0,0,654,652,1,0,0,0,
  	654,655,1,0,0,0,655,658,1,0,0,0,656,654,1,0,0,0,657,649,1,0,0,0,657,658,
  	1,0,0,0,658,659,1,0,0,0,659,660,5,138,0,0,660,73,1,0,0,0,661,663,3,174,
  	87,0,662,661,1,0,0,0,663,666,1,0,0,0,664,662,1,0,0,0,664,665,1,0,0,0,
  	665,667,1,0,0,0,666,664,1,0,0,0,667,670,3,180,90,0,668,670,3,212,106,
  	0,669,664,1,0,0,0,669,668,1,0,0,0,670,75,1,0,0,0,671,672,5,136,0,0,672,
  	684,5,128,0,0,673,678,3,78,39,0,674,675,5,133,0,0,675,677,3,78,39,0,676,
  	674,1,0,0,0,677,680,1,0,0,0,678,676,1,0,0,0,678,679,1,0,0,0,679,682,1,
  	0,0,0,680,678,1,0,0,0,681,683,5,133,0,0,682,681,1,0,0,0,682,683,1,0,0,
  	0,683,685,1,0,0,0,684,673,1,0,0,0,684,685,1,0,0,0,685,686,1,0,0,0,686,
  	687,5,129,0,0,687,77,1,0,0,0,688,689,3,262,131,0,689,690,5,143,0,0,690,
  	691,3,258,129,0,691,79,1,0,0,0,692,693,5,136,0,0,693,698,5,130,0,0,694,
  	696,3,256,128,0,695,697,5,133,0,0,696,695,1,0,0,0,696,697,1,0,0,0,697,
  	699,1,0,0,0,698,694,1,0,0,0,698,699,1,0,0,0,699,700,1,0,0,0,700,701,5,
  	131,0,0,701,81,1,0,0,0,702,703,5,136,0,0,703,704,5,126,0,0,704,705,3,
  	258,129,0,705,706,5,127,0,0,706,713,1,0,0,0,707,710,5,136,0,0,708,711,
  	3,282,141,0,709,711,3,286,143,0,710,708,1,0,0,0,710,709,1,0,0,0,711,713,
  	1,0,0,0,712,702,1,0,0,0,712,707,1,0,0,0,713,83,1,0,0,0,714,726,5,126,
  	0,0,715,718,3,86,43,0,716,718,5,32,0,0,717,715,1,0,0,0,717,716,1,0,0,
  	0,718,723,1,0,0,0,719,720,5,133,0,0,720,722,3,86,43,0,721,719,1,0,0,0,
  	722,725,1,0,0,0,723,721,1,0,0,0,723,724,1,0,0,0,724,727,1,0,0,0,725,723,
  	1,0,0,0,726,717,1,0,0,0,726,727,1,0,0,0,727,728,1,0,0,0,728,729,5,127,
  	0,0,729,85,1,0,0,0,730,733,3,108,54,0,731,733,3,212,106,0,732,730,1,0,
  	0,0,732,731,1,0,0,0,733,87,1,0,0,0,734,736,5,158,0,0,735,737,3,180,90,
  	0,736,735,1,0,0,0,736,737,1,0,0,0,737,739,1,0,0,0,738,740,3,170,85,0,
  	739,738,1,0,0,0,739,740,1,0,0,0,740,742,1,0,0,0,741,743,3,84,42,0,742,
  	741,1,0,0,0,742,743,1,0,0,0,743,744,1,0,0,0,744,745,3,230,115,0,745,89,
  	1,0,0,0,746,747,5,130,0,0,747,748,3,92,46,0,748,749,3,94,47,0,749,750,
  	5,131,0,0,750,91,1,0,0,0,751,754,3,258,129,0,752,754,3,180,90,0,753,751,
  	1,0,0,0,753,752,1,0,0,0,754,93,1,0,0,0,755,762,3,60,30,0,756,758,3,96,
  	48,0,757,756,1,0,0,0,758,759,1,0,0,0,759,757,1,0,0,0,759,760,1,0,0,0,
  	760,762,1,0,0,0,761,755,1,0,0,0,761,757,1,0,0,0,762,95,1,0,0,0,763,765,
  	3,60,30,0,764,763,1,0,0,0,764,765,1,0,0,0,765,766,1,0,0,0,766,767,5,143,
  	0,0,767,772,3,98,49,0,768,769,5,133,0,0,769,771,3,98,49,0,770,768,1,0,
  	0,0,771,774,1,0,0,0,772,770,1,0,0,0,772,773,1,0,0,0,773,97,1,0,0,0,774,
  	772,1,0,0,0,775,777,3,256,128,0,776,778,3,170,85,0,777,776,1,0,0,0,777,
  	778,1,0,0,0,778,783,1,0,0,0,779,780,5,128,0,0,780,781,3,210,105,0,781,
  	782,5,129,0,0,782,784,1,0,0,0,783,779,1,0,0,0,783,784,1,0,0,0,784,99,
  	1,0,0,0,785,786,5,76,0,0,786,787,5,126,0,0,787,788,3,102,51,0,788,789,
  	5,127,0,0,789,101,1,0,0,0,790,800,3,60,30,0,791,793,3,60,30,0,792,791,
  	1,0,0,0,792,793,1,0,0,0,793,794,1,0,0,0,794,796,5,143,0,0,795,792,1,0,
  	0,0,796,797,1,0,0,0,797,795,1,0,0,0,797,798,1,0,0,0,798,800,1,0,0,0,799,
  	790,1,0,0,0,799,795,1,0,0,0,800,103,1,0,0,0,801,802,5,69,0,0,802,803,
  	5,126,0,0,803,804,3,32,16,0,804,805,5,127,0,0,805,105,1,0,0,0,806,807,
  	5,62,0,0,807,808,5,126,0,0,808,809,3,212,106,0,809,810,5,127,0,0,810,
  	107,1,0,0,0,811,812,3,152,76,0,812,813,3,222,111,0,813,109,1,0,0,0,814,
  	815,5,79,0,0,815,816,5,126,0,0,816,817,3,286,143,0,817,818,5,127,0,0,
  	818,822,1,0,0,0,819,820,5,79,0,0,820,822,3,258,129,0,821,814,1,0,0,0,
  	821,819,1,0,0,0,822,111,1,0,0,0,823,824,5,80,0,0,824,828,3,230,115,0,
  	825,827,3,114,57,0,826,825,1,0,0,0,827,830,1,0,0,0,828,826,1,0,0,0,828,
  	829,1,0,0,0,829,833,1,0,0,0,830,828,1,0,0,0,831,832,5,64,0,0,832,834,
  	3,230,115,0,833,831,1,0,0,0,833,834,1,0,0,0,834,113,1,0,0,0,835,836,5,
  	59,0,0,836,837,5,126,0,0,837,838,3,108,54,0,838,839,5,127,0,0,839,840,
  	3,230,115,0,840,115,1,0,0,0,841,842,5,77,0,0,842,843,5,126,0,0,843,844,
  	3,258,129,0,844,845,5,127,0,0,845,846,3,230,115,0,846,117,1,0,0,0,847,
  	848,5,58,0,0,848,849,3,230,115,0,849,119,1,0,0,0,850,851,3,124,62,0,851,
  	852,5,132,0,0,852,121,1,0,0,0,853,854,3,124,62,0,854,855,3,230,115,0,
  	855,123,1,0,0,0,856,858,3,152,76,0,857,856,1,0,0,0,857,858,1,0,0,0,858,
  	859,1,0,0,0,859,860,3,286,143,0,860,862,5,126,0,0,861,863,3,200,100,0,
  	862,861,1,0,0,0,862,863,1,0,0,0,863,864,1,0,0,0,864,865,5,127,0,0,865,
  	867,1,0,0,0,866,868,3,154,77,0,867,866,1,0,0,0,867,868,1,0,0,0,868,125,
  	1,0,0,0,869,871,3,128,64,0,870,872,3,130,65,0,871,870,1,0,0,0,871,872,
  	1,0,0,0,872,127,1,0,0,0,873,876,5,5,0,0,874,876,3,286,143,0,875,873,1,
  	0,0,0,875,874,1,0,0,0,876,129,1,0,0,0,877,879,5,126,0,0,878,880,3,132,
  	66,0,879,878,1,0,0,0,879,880,1,0,0,0,880,881,1,0,0,0,881,882,5,127,0,
  	0,882,131,1,0,0,0,883,888,3,134,67,0,884,885,5,133,0,0,885,887,3,134,
  	67,0,886,884,1,0,0,0,887,890,1,0,0,0,888,886,1,0,0,0,888,889,1,0,0,0,
  	889,133,1,0,0,0,890,888,1,0,0,0,891,896,3,126,63,0,892,896,3,282,141,
  	0,893,896,3,284,142,0,894,896,3,136,68,0,895,891,1,0,0,0,895,892,1,0,
  	0,0,895,893,1,0,0,0,895,894,1,0,0,0,896,135,1,0,0,0,897,898,3,128,64,
  	0,898,902,5,137,0,0,899,903,3,282,141,0,900,903,3,128,64,0,901,903,3,
  	284,142,0,902,899,1,0,0,0,902,900,1,0,0,0,902,901,1,0,0,0,903,137,1,0,
  	0,0,904,909,3,140,70,0,905,909,3,142,71,0,906,909,3,144,72,0,907,909,
  	3,146,73,0,908,904,1,0,0,0,908,905,1,0,0,0,908,906,1,0,0,0,908,907,1,
  	0,0,0,909,139,1,0,0,0,910,912,3,154,77,0,911,910,1,0,0,0,911,912,1,0,
  	0,0,912,913,1,0,0,0,913,915,3,286,143,0,914,916,3,154,77,0,915,914,1,
  	0,0,0,915,916,1,0,0,0,916,917,1,0,0,0,917,918,5,126,0,0,918,919,3,196,
  	98,0,919,920,5,127,0,0,920,921,5,132,0,0,921,141,1,0,0,0,922,924,3,154,
  	77,0,923,922,1,0,0,0,923,924,1,0,0,0,924,926,1,0,0,0,925,927,5,29,0,0,
  	926,925,1,0,0,0,926,927,1,0,0,0,927,928,1,0,0,0,928,930,3,188,94,0,929,
  	931,3,286,143,0,930,929,1,0,0,0,930,931,1,0,0,0,931,932,1,0,0,0,932,933,
  	5,132,0,0,933,143,1,0,0,0,934,935,3,152,76,0,935,936,3,156,78,0,936,939,
  	1,0,0,0,937,939,3,152,76,0,938,934,1,0,0,0,938,937,1,0,0,0,939,940,1,
  	0,0,0,940,941,5,132,0,0,941,145,1,0,0,0,942,944,3,154,77,0,943,942,1,
  	0,0,0,943,944,1,0,0,0,944,945,1,0,0,0,945,950,5,29,0,0,946,947,3,152,
  	76,0,947,948,3,148,74,0,948,951,1,0,0,0,949,951,3,152,76,0,950,946,1,
  	0,0,0,950,949,1,0,0,0,951,952,1,0,0,0,952,953,5,132,0,0,953,147,1,0,0,
  	0,954,959,3,150,75,0,955,956,5,133,0,0,956,958,3,150,75,0,957,955,1,0,
  	0,0,958,961,1,0,0,0,959,957,1,0,0,0,959,960,1,0,0,0,960,149,1,0,0,0,961,
  	959,1,0,0,0,962,964,3,202,101,0,963,962,1,0,0,0,963,964,1,0,0,0,964,965,
  	1,0,0,0,965,966,3,196,98,0,966,151,1,0,0,0,967,976,3,172,86,0,968,976,
  	3,154,77,0,969,976,3,168,84,0,970,976,3,170,85,0,971,976,3,166,83,0,972,
  	976,3,174,87,0,973,976,3,176,88,0,974,976,3,180,90,0,975,967,1,0,0,0,
  	975,968,1,0,0,0,975,969,1,0,0,0,975,970,1,0,0,0,975,971,1,0,0,0,975,972,
  	1,0,0,0,975,973,1,0,0,0,975,974,1,0,0,0,976,977,1,0,0,0,977,975,1,0,0,
  	0,977,978,1,0,0,0,978,153,1,0,0,0,979,980,5,84,0,0,980,981,5,126,0,0,
  	981,982,5,126,0,0,982,987,3,126,63,0,983,984,5,133,0,0,984,986,3,126,
  	63,0,985,983,1,0,0,0,986,989,1,0,0,0,987,985,1,0,0,0,987,988,1,0,0,0,
  	988,990,1,0,0,0,989,987,1,0,0,0,990,991,5,127,0,0,991,992,5,127,0,0,992,
  	155,1,0,0,0,993,998,3,158,79,0,994,995,5,133,0,0,995,997,3,158,79,0,996,
  	994,1,0,0,0,997,1000,1,0,0,0,998,996,1,0,0,0,998,999,1,0,0,0,999,157,
  	1,0,0,0,1000,998,1,0,0,0,1001,1004,3,222,111,0,1002,1003,5,137,0,0,1003,
  	1005,3,264,132,0,1004,1002,1,0,0,0,1004,1005,1,0,0,0,1005,159,1,0,0,0,
  	1006,1019,7,3,0,0,1007,1020,3,286,143,0,1008,1010,3,286,143,0,1009,1008,
  	1,0,0,0,1009,1010,1,0,0,0,1010,1011,1,0,0,0,1011,1013,5,128,0,0,1012,
  	1014,3,162,81,0,1013,1012,1,0,0,0,1014,1015,1,0,0,0,1015,1013,1,0,0,0,
  	1015,1016,1,0,0,0,1016,1017,1,0,0,0,1017,1018,5,129,0,0,1018,1020,1,0,
  	0,0,1019,1007,1,0,0,0,1019,1009,1,0,0,0,1020,161,1,0,0,0,1021,1022,3,
  	164,82,0,1022,1024,3,184,92,0,1023,1025,3,204,102,0,1024,1023,1,0,0,0,
  	1024,1025,1,0,0,0,1025,1026,1,0,0,0,1026,1027,5,132,0,0,1027,163,1,0,
  	0,0,1028,1035,3,168,84,0,1029,1035,3,170,85,0,1030,1035,3,166,83,0,1031,
  	1035,3,174,87,0,1032,1035,3,176,88,0,1033,1035,3,180,90,0,1034,1028,1,
  	0,0,0,1034,1029,1,0,0,0,1034,1030,1,0,0,0,1034,1031,1,0,0,0,1034,1032,
  	1,0,0,0,1034,1033,1,0,0,0,1035,1036,1,0,0,0,1036,1034,1,0,0,0,1036,1037,
  	1,0,0,0,1037,165,1,0,0,0,1038,1039,5,116,0,0,1039,1040,5,126,0,0,1040,
  	1041,3,286,143,0,1041,1042,5,127,0,0,1042,1045,1,0,0,0,1043,1045,5,115,
  	0,0,1044,1038,1,0,0,0,1044,1043,1,0,0,0,1045,167,1,0,0,0,1046,1047,7,
  	4,0,0,1047,169,1,0,0,0,1048,1049,7,5,0,0,1049,171,1,0,0,0,1050,1051,7,
  	6,0,0,1051,173,1,0,0,0,1052,1053,7,7,0,0,1053,175,1,0,0,0,1054,1059,5,
  	5,0,0,1055,1059,5,33,0,0,1056,1059,5,21,0,0,1057,1059,3,178,89,0,1058,
  	1054,1,0,0,0,1058,1055,1,0,0,0,1058,1056,1,0,0,0,1058,1057,1,0,0,0,1059,
  	177,1,0,0,0,1060,1061,7,8,0,0,1061,179,1,0,0,0,1062,1080,5,32,0,0,1063,
  	1080,5,4,0,0,1064,1080,5,23,0,0,1065,1080,5,18,0,0,1066,1080,5,19,0,0,
  	1067,1080,5,13,0,0,1068,1080,5,9,0,0,1069,1080,5,24,0,0,1070,1080,5,31,
  	0,0,1071,1080,3,182,91,0,1072,1080,3,14,7,0,1073,1080,3,160,80,0,1074,
  	1080,3,188,94,0,1075,1077,3,286,143,0,1076,1078,3,202,101,0,1077,1076,
  	1,0,0,0,1077,1078,1,0,0,0,1078,1080,1,0,0,0,1079,1062,1,0,0,0,1079,1063,
  	1,0,0,0,1079,1064,1,0,0,0,1079,1065,1,0,0,0,1079,1066,1,0,0,0,1079,1067,
  	1,0,0,0,1079,1068,1,0,0,0,1079,1069,1,0,0,0,1079,1070,1,0,0,0,1079,1071,
  	1,0,0,0,1079,1072,1,0,0,0,1079,1073,1,0,0,0,1079,1074,1,0,0,0,1079,1075,
  	1,0,0,0,1080,181,1,0,0,0,1081,1082,5,95,0,0,1082,1083,5,126,0,0,1083,
  	1084,3,258,129,0,1084,1085,5,127,0,0,1085,183,1,0,0,0,1086,1091,3,186,
  	93,0,1087,1088,5,133,0,0,1088,1090,3,186,93,0,1089,1087,1,0,0,0,1090,
  	1093,1,0,0,0,1091,1089,1,0,0,0,1091,1092,1,0,0,0,1092,185,1,0,0,0,1093,
  	1091,1,0,0,0,1094,1101,3,222,111,0,1095,1097,3,222,111,0,1096,1095,1,
  	0,0,0,1096,1097,1,0,0,0,1097,1098,1,0,0,0,1098,1099,5,143,0,0,1099,1101,
  	3,282,141,0,1100,1094,1,0,0,0,1100,1096,1,0,0,0,1101,187,1,0,0,0,1102,
  	1108,5,11,0,0,1103,1105,3,286,143,0,1104,1103,1,0,0,0,1104,1105,1,0,0,
  	0,1105,1106,1,0,0,0,1106,1107,5,143,0,0,1107,1109,3,212,106,0,1108,1104,
  	1,0,0,0,1108,1109,1,0,0,0,1109,1121,1,0,0,0,1110,1115,3,286,143,0,1111,
  	1112,5,128,0,0,1112,1113,3,190,95,0,1113,1114,5,129,0,0,1114,1116,1,0,
  	0,0,1115,1111,1,0,0,0,1115,1116,1,0,0,0,1116,1122,1,0,0,0,1117,1118,5,
  	128,0,0,1118,1119,3,190,95,0,1119,1120,5,129,0,0,1120,1122,1,0,0,0,1121,
  	1110,1,0,0,0,1121,1117,1,0,0,0,1122,1134,1,0,0,0,1123,1124,7,9,0,0,1124,
  	1125,5,126,0,0,1125,1126,3,212,106,0,1126,1127,5,133,0,0,1127,1128,3,
  	286,143,0,1128,1129,5,127,0,0,1129,1130,5,128,0,0,1130,1131,3,190,95,
  	0,1131,1132,5,129,0,0,1132,1134,1,0,0,0,1133,1102,1,0,0,0,1133,1123,1,
  	0,0,0,1134,189,1,0,0,0,1135,1140,3,192,96,0,1136,1137,5,133,0,0,1137,
  	1139,3,192,96,0,1138,1136,1,0,0,0,1139,1142,1,0,0,0,1140,1138,1,0,0,0,
  	1140,1141,1,0,0,0,1141,1144,1,0,0,0,1142,1140,1,0,0,0,1143,1145,5,133,
  	0,0,1144,1143,1,0,0,0,1144,1145,1,0,0,0,1145,191,1,0,0,0,1146,1149,3,
  	194,97,0,1147,1148,5,137,0,0,1148,1150,3,258,129,0,1149,1147,1,0,0,0,
  	1149,1150,1,0,0,0,1150,193,1,0,0,0,1151,1154,3,286,143,0,1152,1154,5,
  	7,0,0,1153,1151,1,0,0,0,1153,1152,1,0,0,0,1154,195,1,0,0,0,1155,1161,
  	3,286,143,0,1156,1157,5,126,0,0,1157,1158,3,222,111,0,1158,1159,5,127,
  	0,0,1159,1161,1,0,0,0,1160,1155,1,0,0,0,1160,1156,1,0,0,0,1161,1165,1,
  	0,0,0,1162,1164,3,198,99,0,1163,1162,1,0,0,0,1164,1167,1,0,0,0,1165,1163,
  	1,0,0,0,1165,1166,1,0,0,0,1166,1179,1,0,0,0,1167,1165,1,0,0,0,1168,1169,
  	5,126,0,0,1169,1171,5,158,0,0,1170,1172,3,170,85,0,1171,1170,1,0,0,0,
  	1171,1172,1,0,0,0,1172,1174,1,0,0,0,1173,1175,3,286,143,0,1174,1173,1,
  	0,0,0,1174,1175,1,0,0,0,1175,1176,1,0,0,0,1176,1177,5,127,0,0,1177,1179,
  	3,84,42,0,1178,1160,1,0,0,0,1178,1168,1,0,0,0,1179,197,1,0,0,0,1180,1182,
  	5,130,0,0,1181,1183,3,266,133,0,1182,1181,1,0,0,0,1182,1183,1,0,0,0,1183,
  	1184,1,0,0,0,1184,1185,5,131,0,0,1185,199,1,0,0,0,1186,1189,3,218,109,
  	0,1187,1188,5,133,0,0,1188,1190,5,170,0,0,1189,1187,1,0,0,0,1189,1190,
  	1,0,0,0,1190,201,1,0,0,0,1191,1193,5,154,0,0,1192,1194,3,152,76,0,1193,
  	1192,1,0,0,0,1193,1194,1,0,0,0,1194,1196,1,0,0,0,1195,1197,3,202,101,
  	0,1196,1195,1,0,0,0,1196,1197,1,0,0,0,1197,203,1,0,0,0,1198,1210,3,286,
  	143,0,1199,1200,5,126,0,0,1200,1205,3,280,140,0,1201,1202,5,133,0,0,1202,
  	1204,3,280,140,0,1203,1201,1,0,0,0,1204,1207,1,0,0,0,1205,1203,1,0,0,
  	0,1205,1206,1,0,0,0,1206,1208,1,0,0,0,1207,1205,1,0,0,0,1208,1209,5,127,
  	0,0,1209,1211,1,0,0,0,1210,1199,1,0,0,0,1210,1211,1,0,0,0,1211,205,1,
  	0,0,0,1212,1217,5,128,0,0,1213,1215,3,256,128,0,1214,1216,5,133,0,0,1215,
  	1214,1,0,0,0,1215,1216,1,0,0,0,1216,1218,1,0,0,0,1217,1213,1,0,0,0,1217,
  	1218,1,0,0,0,1218,1219,1,0,0,0,1219,1220,5,129,0,0,1220,207,1,0,0,0,1221,
  	1235,5,128,0,0,1222,1223,5,134,0,0,1223,1229,3,258,129,0,1224,1225,5,
  	133,0,0,1225,1226,5,134,0,0,1226,1228,3,258,129,0,1227,1224,1,0,0,0,1228,
  	1231,1,0,0,0,1229,1227,1,0,0,0,1229,1230,1,0,0,0,1230,1233,1,0,0,0,1231,
  	1229,1,0,0,0,1232,1234,5,133,0,0,1233,1232,1,0,0,0,1233,1234,1,0,0,0,
  	1234,1236,1,0,0,0,1235,1222,1,0,0,0,1235,1236,1,0,0,0,1236,1237,1,0,0,
  	0,1237,1238,5,129,0,0,1238,209,1,0,0,0,1239,1244,3,264,132,0,1240,1241,
  	5,133,0,0,1241,1243,3,264,132,0,1242,1240,1,0,0,0,1243,1246,1,0,0,0,1244,
  	1242,1,0,0,0,1244,1245,1,0,0,0,1245,1248,1,0,0,0,1246,1244,1,0,0,0,1247,
  	1249,5,133,0,0,1248,1247,1,0,0,0,1248,1249,1,0,0,0,1249,211,1,0,0,0,1250,
  	1252,3,164,82,0,1251,1253,3,214,107,0,1252,1251,1,0,0,0,1252,1253,1,0,
  	0,0,1253,1256,1,0,0,0,1254,1256,3,70,35,0,1255,1250,1,0,0,0,1255,1254,
  	1,0,0,0,1256,213,1,0,0,0,1257,1259,3,202,101,0,1258,1260,3,214,107,0,
  	1259,1258,1,0,0,0,1259,1260,1,0,0,0,1260,1281,1,0,0,0,1261,1263,5,126,
  	0,0,1262,1264,3,214,107,0,1263,1262,1,0,0,0,1263,1264,1,0,0,0,1264,1265,
  	1,0,0,0,1265,1267,5,127,0,0,1266,1268,3,216,108,0,1267,1266,1,0,0,0,1268,
  	1269,1,0,0,0,1269,1267,1,0,0,0,1269,1270,1,0,0,0,1270,1281,1,0,0,0,1271,
  	1273,5,130,0,0,1272,1274,3,266,133,0,1273,1272,1,0,0,0,1273,1274,1,0,
  	0,0,1274,1275,1,0,0,0,1275,1277,5,131,0,0,1276,1271,1,0,0,0,1277,1278,
  	1,0,0,0,1278,1276,1,0,0,0,1278,1279,1,0,0,0,1279,1281,1,0,0,0,1280,1257,
  	1,0,0,0,1280,1261,1,0,0,0,1280,1276,1,0,0,0,1281,215,1,0,0,0,1282,1284,
  	5,130,0,0,1283,1285,3,266,133,0,1284,1283,1,0,0,0,1284,1285,1,0,0,0,1285,
  	1286,1,0,0,0,1286,1293,5,131,0,0,1287,1289,5,126,0,0,1288,1290,3,218,
  	109,0,1289,1288,1,0,0,0,1289,1290,1,0,0,0,1290,1291,1,0,0,0,1291,1293,
  	5,127,0,0,1292,1282,1,0,0,0,1292,1287,1,0,0,0,1293,217,1,0,0,0,1294,1299,
  	3,220,110,0,1295,1296,5,133,0,0,1296,1298,3,220,110,0,1297,1295,1,0,0,
  	0,1298,1301,1,0,0,0,1299,1297,1,0,0,0,1299,1300,1,0,0,0,1300,219,1,0,
  	0,0,1301,1299,1,0,0,0,1302,1303,3,152,76,0,1303,1304,3,222,111,0,1304,
  	1307,1,0,0,0,1305,1307,5,32,0,0,1306,1302,1,0,0,0,1306,1305,1,0,0,0,1307,
  	221,1,0,0,0,1308,1310,3,202,101,0,1309,1308,1,0,0,0,1309,1310,1,0,0,0,
  	1310,1311,1,0,0,0,1311,1312,3,196,98,0,1312,223,1,0,0,0,1313,1315,3,226,
  	113,0,1314,1316,5,132,0,0,1315,1314,1,0,0,0,1315,1316,1,0,0,0,1316,1355,
  	1,0,0,0,1317,1319,3,230,115,0,1318,1320,5,132,0,0,1319,1318,1,0,0,0,1319,
  	1320,1,0,0,0,1320,1355,1,0,0,0,1321,1323,3,232,116,0,1322,1324,5,132,
  	0,0,1323,1322,1,0,0,0,1323,1324,1,0,0,0,1324,1355,1,0,0,0,1325,1327,3,
  	242,121,0,1326,1328,5,132,0,0,1327,1326,1,0,0,0,1327,1328,1,0,0,0,1328,
  	1355,1,0,0,0,1329,1331,3,254,127,0,1330,1332,5,132,0,0,1331,1330,1,0,
  	0,0,1331,1332,1,0,0,0,1332,1355,1,0,0,0,1333,1335,3,116,58,0,1334,1336,
  	5,132,0,0,1335,1334,1,0,0,0,1335,1336,1,0,0,0,1336,1355,1,0,0,0,1337,
  	1339,3,118,59,0,1338,1340,5,132,0,0,1339,1338,1,0,0,0,1339,1340,1,0,0,
  	0,1340,1355,1,0,0,0,1341,1343,3,110,55,0,1342,1344,5,132,0,0,1343,1342,
  	1,0,0,0,1343,1344,1,0,0,0,1344,1355,1,0,0,0,1345,1347,3,112,56,0,1346,
  	1348,5,132,0,0,1347,1346,1,0,0,0,1347,1348,1,0,0,0,1348,1355,1,0,0,0,
  	1349,1351,3,256,128,0,1350,1352,5,132,0,0,1351,1350,1,0,0,0,1351,1352,
  	1,0,0,0,1352,1355,1,0,0,0,1353,1355,5,132,0,0,1354,1313,1,0,0,0,1354,
  	1317,1,0,0,0,1354,1321,1,0,0,0,1354,1325,1,0,0,0,1354,1329,1,0,0,0,1354,
  	1333,1,0,0,0,1354,1337,1,0,0,0,1354,1341,1,0,0,0,1354,1345,1,0,0,0,1354,
  	1349,1,0,0,0,1354,1353,1,0,0,0,1355,225,1,0,0,0,1356,1357,3,286,143,0,
  	1357,1358,5,143,0,0,1358,1359,3,224,112,0,1359,227,1,0,0,0,1360,1363,
  	3,266,133,0,1361,1362,5,170,0,0,1362,1364,3,266,133,0,1363,1361,1,0,0,
  	0,1363,1364,1,0,0,0,1364,229,1,0,0,0,1365,1370,5,128,0,0,1366,1369,3,
  	138,69,0,1367,1369,3,224,112,0,1368,1366,1,0,0,0,1368,1367,1,0,0,0,1369,
  	1372,1,0,0,0,1370,1368,1,0,0,0,1370,1371,1,0,0,0,1371,1373,1,0,0,0,1372,
  	1370,1,0,0,0,1373,1374,5,129,0,0,1374,231,1,0,0,0,1375,1376,5,16,0,0,
  	1376,1377,5,126,0,0,1377,1378,3,258,129,0,1378,1379,5,127,0,0,1379,1382,
  	3,224,112,0,1380,1381,5,10,0,0,1381,1383,3,224,112,0,1382,1380,1,0,0,
  	0,1382,1383,1,0,0,0,1383,1386,1,0,0,0,1384,1386,3,234,117,0,1385,1375,
  	1,0,0,0,1385,1384,1,0,0,0,1386,233,1,0,0,0,1387,1388,5,28,0,0,1388,1389,
  	5,126,0,0,1389,1390,3,258,129,0,1390,1391,5,127,0,0,1391,1392,3,236,118,
  	0,1392,235,1,0,0,0,1393,1397,5,128,0,0,1394,1396,3,238,119,0,1395,1394,
  	1,0,0,0,1396,1399,1,0,0,0,1397,1395,1,0,0,0,1397,1398,1,0,0,0,1398,1400,
  	1,0,0,0,1399,1397,1,0,0,0,1400,1401,5,129,0,0,1401,237,1,0,0,0,1402,1404,
  	3,240,120,0,1403,1402,1,0,0,0,1404,1405,1,0,0,0,1405,1403,1,0,0,0,1405,
  	1406,1,0,0,0,1406,1408,1,0,0,0,1407,1409,3,224,112,0,1408,1407,1,0,0,
  	0,1409,1410,1,0,0,0,1410,1408,1,0,0,0,1410,1411,1,0,0,0,1411,239,1,0,
  	0,0,1412,1418,5,3,0,0,1413,1419,3,228,114,0,1414,1415,5,126,0,0,1415,
  	1416,3,228,114,0,1416,1417,5,127,0,0,1417,1419,1,0,0,0,1418,1413,1,0,
  	0,0,1418,1414,1,0,0,0,1419,1420,1,0,0,0,1420,1421,5,143,0,0,1421,1425,
  	1,0,0,0,1422,1423,5,7,0,0,1423,1425,5,143,0,0,1424,1412,1,0,0,0,1424,
  	1422,1,0,0,0,1425,241,1,0,0,0,1426,1431,3,244,122,0,1427,1431,3,246,123,
  	0,1428,1431,3,248,124,0,1429,1431,3,252,126,0,1430,1426,1,0,0,0,1430,
  	1427,1,0,0,0,1430,1428,1,0,0,0,1430,1429,1,0,0,0,1431,243,1,0,0,0,1432,
  	1433,5,34,0,0,1433,1434,5,126,0,0,1434,1435,3,258,129,0,1435,1436,5,127,
  	0,0,1436,1437,3,224,112,0,1437,245,1,0,0,0,1438,1439,5,8,0,0,1439,1440,
  	3,224,112,0,1440,1441,5,34,0,0,1441,1442,5,126,0,0,1442,1443,3,258,129,
  	0,1443,1444,5,127,0,0,1444,1445,5,132,0,0,1445,247,1,0,0,0,1446,1447,
  	5,14,0,0,1447,1449,5,126,0,0,1448,1450,3,250,125,0,1449,1448,1,0,0,0,
  	1449,1450,1,0,0,0,1450,1451,1,0,0,0,1451,1453,5,132,0,0,1452,1454,3,258,
  	129,0,1453,1452,1,0,0,0,1453,1454,1,0,0,0,1454,1455,1,0,0,0,1455,1457,
  	5,132,0,0,1456,1458,3,256,128,0,1457,1456,1,0,0,0,1457,1458,1,0,0,0,1458,
  	1459,1,0,0,0,1459,1460,5,127,0,0,1460,1461,3,224,112,0,1461,249,1,0,0,
  	0,1462,1463,3,152,76,0,1463,1464,3,156,78,0,1464,1467,1,0,0,0,1465,1467,
  	3,256,128,0,1466,1462,1,0,0,0,1466,1465,1,0,0,0,1467,251,1,0,0,0,1468,
  	1469,5,14,0,0,1469,1470,5,126,0,0,1470,1471,3,108,54,0,1471,1473,5,46,
  	0,0,1472,1474,3,258,129,0,1473,1472,1,0,0,0,1473,1474,1,0,0,0,1474,1475,
  	1,0,0,0,1475,1476,5,127,0,0,1476,1477,3,224,112,0,1477,253,1,0,0,0,1478,
  	1479,5,15,0,0,1479,1487,3,286,143,0,1480,1487,5,6,0,0,1481,1487,5,2,0,
  	0,1482,1484,5,22,0,0,1483,1485,3,258,129,0,1484,1483,1,0,0,0,1484,1485,
  	1,0,0,0,1485,1487,1,0,0,0,1486,1478,1,0,0,0,1486,1480,1,0,0,0,1486,1481,
  	1,0,0,0,1486,1482,1,0,0,0,1487,255,1,0,0,0,1488,1493,3,258,129,0,1489,
  	1490,5,133,0,0,1490,1492,3,258,129,0,1491,1489,1,0,0,0,1492,1495,1,0,
  	0,0,1493,1491,1,0,0,0,1493,1494,1,0,0,0,1494,257,1,0,0,0,1495,1493,1,
  	0,0,0,1496,1497,6,129,-1,0,1497,1507,3,262,131,0,1498,1499,5,126,0,0,
  	1499,1500,3,230,115,0,1500,1501,5,127,0,0,1501,1507,1,0,0,0,1502,1503,
  	3,268,134,0,1503,1504,3,260,130,0,1504,1505,3,258,129,1,1505,1507,1,0,
  	0,0,1506,1496,1,0,0,0,1506,1498,1,0,0,0,1506,1502,1,0,0,0,1507,1552,1,
  	0,0,0,1508,1509,10,13,0,0,1509,1510,7,10,0,0,1510,1551,3,258,129,14,1511,
  	1512,10,12,0,0,1512,1513,7,11,0,0,1513,1551,3,258,129,13,1514,1519,10,
  	11,0,0,1515,1516,5,139,0,0,1516,1520,5,139,0,0,1517,1518,5,138,0,0,1518,
  	1520,5,138,0,0,1519,1515,1,0,0,0,1519,1517,1,0,0,0,1520,1521,1,0,0,0,
  	1521,1551,3,258,129,12,1522,1523,10,10,0,0,1523,1524,7,12,0,0,1524,1551,
  	3,258,129,11,1525,1526,10,9,0,0,1526,1527,7,13,0,0,1527,1551,3,258,129,
  	10,1528,1529,10,8,0,0,1529,1530,5,156,0,0,1530,1551,3,258,129,9,1531,
  	1532,10,7,0,0,1532,1533,5,158,0,0,1533,1551,3,258,129,8,1534,1535,10,
  	6,0,0,1535,1536,5,157,0,0,1536,1551,3,258,129,7,1537,1538,10,5,0,0,1538,
  	1539,5,148,0,0,1539,1551,3,258,129,6,1540,1541,10,4,0,0,1541,1542,5,149,
  	0,0,1542,1551,3,258,129,5,1543,1544,10,3,0,0,1544,1546,5,142,0,0,1545,
  	1547,3,258,129,0,1546,1545,1,0,0,0,1546,1547,1,0,0,0,1547,1548,1,0,0,
  	0,1548,1549,5,143,0,0,1549,1551,3,258,129,4,1550,1508,1,0,0,0,1550,1511,
  	1,0,0,0,1550,1514,1,0,0,0,1550,1522,1,0,0,0,1550,1525,1,0,0,0,1550,1528,
  	1,0,0,0,1550,1531,1,0,0,0,1550,1534,1,0,0,0,1550,1537,1,0,0,0,1550,1540,
  	1,0,0,0,1550,1543,1,0,0,0,1551,1554,1,0,0,0,1552,1550,1,0,0,0,1552,1553,
  	1,0,0,0,1553,259,1,0,0,0,1554,1552,1,0,0,0,1555,1556,7,14,0,0,1556,261,
  	1,0,0,0,1557,1567,3,268,134,0,1558,1559,5,126,0,0,1559,1560,3,212,106,
  	0,1560,1561,5,127,0,0,1561,1564,1,0,0,0,1562,1565,3,262,131,0,1563,1565,
  	3,264,132,0,1564,1562,1,0,0,0,1564,1563,1,0,0,0,1565,1567,1,0,0,0,1566,
  	1557,1,0,0,0,1566,1558,1,0,0,0,1567,263,1,0,0,0,1568,1572,3,258,129,0,
  	1569,1572,3,206,103,0,1570,1572,3,208,104,0,1571,1568,1,0,0,0,1571,1569,
  	1,0,0,0,1571,1570,1,0,0,0,1572,265,1,0,0,0,1573,1576,3,286,143,0,1574,
  	1576,3,282,141,0,1575,1573,1,0,0,0,1575,1574,1,0,0,0,1576,267,1,0,0,0,
  	1577,1592,3,272,136,0,1578,1584,5,25,0,0,1579,1585,3,268,134,0,1580,1581,
  	5,126,0,0,1581,1582,3,180,90,0,1582,1583,5,127,0,0,1583,1585,1,0,0,0,
  	1584,1579,1,0,0,0,1584,1580,1,0,0,0,1585,1592,1,0,0,0,1586,1587,7,15,
  	0,0,1587,1592,3,268,134,0,1588,1589,3,270,135,0,1589,1590,3,262,131,0,
  	1590,1592,1,0,0,0,1591,1577,1,0,0,0,1591,1578,1,0,0,0,1591,1586,1,0,0,
  	0,1591,1588,1,0,0,0,1592,269,1,0,0,0,1593,1594,7,16,0,0,1594,271,1,0,
  	0,0,1595,1596,6,136,-1,0,1596,1600,3,280,140,0,1597,1599,3,274,137,0,
  	1598,1597,1,0,0,0,1599,1602,1,0,0,0,1600,1598,1,0,0,0,1600,1601,1,0,0,
  	0,1601,1614,1,0,0,0,1602,1600,1,0,0,0,1603,1604,10,1,0,0,1604,1605,7,
  	17,0,0,1605,1609,3,286,143,0,1606,1608,3,274,137,0,1607,1606,1,0,0,0,
  	1608,1611,1,0,0,0,1609,1607,1,0,0,0,1609,1610,1,0,0,0,1610,1613,1,0,0,
  	0,1611,1609,1,0,0,0,1612,1603,1,0,0,0,1613,1616,1,0,0,0,1614,1612,1,0,
  	0,0,1614,1615,1,0,0,0,1615,273,1,0,0,0,1616,1614,1,0,0,0,1617,1618,5,
  	130,0,0,1618,1619,3,258,129,0,1619,1620,5,131,0,0,1620,1636,1,0,0,0,1621,
  	1623,5,126,0,0,1622,1624,3,276,138,0,1623,1622,1,0,0,0,1623,1624,1,0,
  	0,0,1624,1625,1,0,0,0,1625,1636,5,127,0,0,1626,1629,5,126,0,0,1627,1630,
  	5,133,0,0,1628,1630,8,18,0,0,1629,1627,1,0,0,0,1629,1628,1,0,0,0,1630,
  	1631,1,0,0,0,1631,1629,1,0,0,0,1631,1632,1,0,0,0,1632,1633,1,0,0,0,1633,
  	1636,5,127,0,0,1634,1636,7,15,0,0,1635,1617,1,0,0,0,1635,1621,1,0,0,0,
  	1635,1626,1,0,0,0,1635,1634,1,0,0,0,1636,275,1,0,0,0,1637,1642,3,278,
  	139,0,1638,1639,5,133,0,0,1639,1641,3,278,139,0,1640,1638,1,0,0,0,1641,
  	1644,1,0,0,0,1642,1640,1,0,0,0,1642,1643,1,0,0,0,1643,277,1,0,0,0,1644,
  	1642,1,0,0,0,1645,1648,3,258,129,0,1646,1648,3,180,90,0,1647,1645,1,0,
  	0,0,1647,1646,1,0,0,0,1648,279,1,0,0,0,1649,1665,3,286,143,0,1650,1665,
  	3,282,141,0,1651,1665,3,284,142,0,1652,1653,5,126,0,0,1653,1654,3,258,
  	129,0,1654,1655,5,127,0,0,1655,1665,1,0,0,0,1656,1665,3,90,45,0,1657,
  	1665,3,100,50,0,1658,1665,3,104,52,0,1659,1665,3,106,53,0,1660,1665,3,
  	76,38,0,1661,1665,3,80,40,0,1662,1665,3,82,41,0,1663,1665,3,88,44,0,1664,
  	1649,1,0,0,0,1664,1650,1,0,0,0,1664,1651,1,0,0,0,1664,1652,1,0,0,0,1664,
  	1656,1,0,0,0,1664,1657,1,0,0,0,1664,1658,1,0,0,0,1664,1659,1,0,0,0,1664,
  	1660,1,0,0,0,1664,1661,1,0,0,0,1664,1662,1,0,0,0,1664,1663,1,0,0,0,1665,
  	281,1,0,0,0,1666,1685,5,173,0,0,1667,1685,5,174,0,0,1668,1685,5,175,0,
  	0,1669,1671,7,11,0,0,1670,1669,1,0,0,0,1670,1671,1,0,0,0,1671,1672,1,
  	0,0,0,1672,1685,5,176,0,0,1673,1675,7,11,0,0,1674,1673,1,0,0,0,1674,1675,
  	1,0,0,0,1675,1676,1,0,0,0,1676,1685,5,177,0,0,1677,1685,5,171,0,0,1678,
  	1685,5,48,0,0,1679,1685,5,50,0,0,1680,1685,5,57,0,0,1681,1685,5,49,0,
  	0,1682,1685,5,38,0,0,1683,1685,5,39,0,0,1684,1666,1,0,0,0,1684,1667,1,
  	0,0,0,1684,1668,1,0,0,0,1684,1670,1,0,0,0,1684,1674,1,0,0,0,1684,1677,
  	1,0,0,0,1684,1678,1,0,0,0,1684,1679,1,0,0,0,1684,1680,1,0,0,0,1684,1681,
  	1,0,0,0,1684,1682,1,0,0,0,1684,1683,1,0,0,0,1685,283,1,0,0,0,1686,1690,
  	5,172,0,0,1687,1689,7,19,0,0,1688,1687,1,0,0,0,1689,1692,1,0,0,0,1690,
  	1688,1,0,0,0,1690,1691,1,0,0,0,1691,1693,1,0,0,0,1692,1690,1,0,0,0,1693,
  	1695,5,184,0,0,1694,1686,1,0,0,0,1695,1696,1,0,0,0,1696,1694,1,0,0,0,
  	1696,1697,1,0,0,0,1697,285,1,0,0,0,1698,1699,7,20,0,0,1699,287,1,0,0,
  	0,223,291,307,314,320,326,329,332,340,347,350,353,361,364,367,377,387,
  	395,400,409,415,417,429,439,447,450,453,462,485,492,495,501,510,516,518,
  	527,529,538,542,551,553,562,566,569,577,581,583,586,592,596,602,616,623,
  	629,632,636,642,646,654,657,664,669,678,682,684,696,698,710,712,717,723,
  	726,732,736,739,742,753,759,761,764,772,777,783,792,797,799,821,828,833,
  	857,862,867,871,875,879,888,895,902,908,911,915,923,926,930,938,943,950,
  	959,963,975,977,987,998,1004,1009,1015,1019,1024,1034,1036,1044,1058,
  	1077,1079,1091,1096,1100,1104,1108,1115,1121,1133,1140,1144,1149,1153,
  	1160,1165,1171,1174,1178,1182,1189,1193,1196,1205,1210,1215,1217,1229,
  	1233,1235,1244,1248,1252,1255,1259,1263,1269,1273,1278,1280,1284,1289,
  	1292,1299,1306,1309,1315,1319,1323,1327,1331,1335,1339,1343,1347,1351,
  	1354,1363,1368,1370,1382,1385,1397,1405,1410,1418,1424,1430,1449,1453,
  	1457,1466,1473,1484,1486,1493,1506,1519,1546,1550,1552,1564,1566,1571,
  	1575,1584,1591,1600,1609,1614,1623,1629,1631,1635,1642,1647,1664,1670,
  	1674,1684,1690,1696
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  objectivecparserParserStaticData = staticData.release();
}

}

ObjectiveCParser::ObjectiveCParser(TokenStream *input) : ObjectiveCParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

ObjectiveCParser::ObjectiveCParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  ObjectiveCParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *objectivecparserParserStaticData->atn, objectivecparserParserStaticData->decisionToDFA, objectivecparserParserStaticData->sharedContextCache, options);
}

ObjectiveCParser::~ObjectiveCParser() {
  delete _interpreter;
}

const atn::ATN& ObjectiveCParser::getATN() const {
  return *objectivecparserParserStaticData->atn;
}

std::string ObjectiveCParser::getGrammarFileName() const {
  return "ObjectiveCParser.g4";
}

const std::vector<std::string>& ObjectiveCParser::getRuleNames() const {
  return objectivecparserParserStaticData->ruleNames;
}

const dfa::Vocabulary& ObjectiveCParser::getVocabulary() const {
  return objectivecparserParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView ObjectiveCParser::getSerializedATN() const {
  return objectivecparserParserStaticData->serializedATN;
}


//----------------- TranslationUnitContext ------------------------------------------------------------------

ObjectiveCParser::TranslationUnitContext::TranslationUnitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::TranslationUnitContext::EOF() {
  return getToken(ObjectiveCParser::EOF, 0);
}

std::vector<ObjectiveCParser::TopLevelDeclarationContext *> ObjectiveCParser::TranslationUnitContext::topLevelDeclaration() {
  return getRuleContexts<ObjectiveCParser::TopLevelDeclarationContext>();
}

ObjectiveCParser::TopLevelDeclarationContext* ObjectiveCParser::TranslationUnitContext::topLevelDeclaration(size_t i) {
  return getRuleContext<ObjectiveCParser::TopLevelDeclarationContext>(i);
}


size_t ObjectiveCParser::TranslationUnitContext::getRuleIndex() const {
  return ObjectiveCParser::RuleTranslationUnit;
}

void ObjectiveCParser::TranslationUnitContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTranslationUnit(this);
}

void ObjectiveCParser::TranslationUnitContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTranslationUnit(this);
}

ObjectiveCParser::TranslationUnitContext* ObjectiveCParser::translationUnit() {
  TranslationUnitContext *_localctx = _tracker.createInstance<TranslationUnitContext>(_ctx, getState());
  enterRule(_localctx, 0, ObjectiveCParser::RuleTranslationUnit);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(291);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 1295065285207669298) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 1170935903116263447) != 0)) {
      setState(288);
      topLevelDeclaration();
      setState(293);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(294);
    match(ObjectiveCParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TopLevelDeclarationContext ------------------------------------------------------------------

ObjectiveCParser::TopLevelDeclarationContext::TopLevelDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectiveCParser::ImportDeclarationContext* ObjectiveCParser::TopLevelDeclarationContext::importDeclaration() {
  return getRuleContext<ObjectiveCParser::ImportDeclarationContext>(0);
}

ObjectiveCParser::FunctionDeclarationContext* ObjectiveCParser::TopLevelDeclarationContext::functionDeclaration() {
  return getRuleContext<ObjectiveCParser::FunctionDeclarationContext>(0);
}

ObjectiveCParser::DeclarationContext* ObjectiveCParser::TopLevelDeclarationContext::declaration() {
  return getRuleContext<ObjectiveCParser::DeclarationContext>(0);
}

ObjectiveCParser::ClassInterfaceContext* ObjectiveCParser::TopLevelDeclarationContext::classInterface() {
  return getRuleContext<ObjectiveCParser::ClassInterfaceContext>(0);
}

ObjectiveCParser::ClassImplementationContext* ObjectiveCParser::TopLevelDeclarationContext::classImplementation() {
  return getRuleContext<ObjectiveCParser::ClassImplementationContext>(0);
}

ObjectiveCParser::CategoryInterfaceContext* ObjectiveCParser::TopLevelDeclarationContext::categoryInterface() {
  return getRuleContext<ObjectiveCParser::CategoryInterfaceContext>(0);
}

ObjectiveCParser::CategoryImplementationContext* ObjectiveCParser::TopLevelDeclarationContext::categoryImplementation() {
  return getRuleContext<ObjectiveCParser::CategoryImplementationContext>(0);
}

ObjectiveCParser::ProtocolDeclarationContext* ObjectiveCParser::TopLevelDeclarationContext::protocolDeclaration() {
  return getRuleContext<ObjectiveCParser::ProtocolDeclarationContext>(0);
}

ObjectiveCParser::ProtocolDeclarationListContext* ObjectiveCParser::TopLevelDeclarationContext::protocolDeclarationList() {
  return getRuleContext<ObjectiveCParser::ProtocolDeclarationListContext>(0);
}

ObjectiveCParser::ClassDeclarationListContext* ObjectiveCParser::TopLevelDeclarationContext::classDeclarationList() {
  return getRuleContext<ObjectiveCParser::ClassDeclarationListContext>(0);
}

ObjectiveCParser::FunctionDefinitionContext* ObjectiveCParser::TopLevelDeclarationContext::functionDefinition() {
  return getRuleContext<ObjectiveCParser::FunctionDefinitionContext>(0);
}


size_t ObjectiveCParser::TopLevelDeclarationContext::getRuleIndex() const {
  return ObjectiveCParser::RuleTopLevelDeclaration;
}

void ObjectiveCParser::TopLevelDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTopLevelDeclaration(this);
}

void ObjectiveCParser::TopLevelDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTopLevelDeclaration(this);
}

ObjectiveCParser::TopLevelDeclarationContext* ObjectiveCParser::topLevelDeclaration() {
  TopLevelDeclarationContext *_localctx = _tracker.createInstance<TopLevelDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 2, ObjectiveCParser::RuleTopLevelDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(307);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 1, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(296);
      importDeclaration();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(297);
      functionDeclaration();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(298);
      declaration();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(299);
      classInterface();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(300);
      classImplementation();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(301);
      categoryInterface();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(302);
      categoryImplementation();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(303);
      protocolDeclaration();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(304);
      protocolDeclarationList();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(305);
      classDeclarationList();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(306);
      functionDefinition();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ImportDeclarationContext ------------------------------------------------------------------

ObjectiveCParser::ImportDeclarationContext::ImportDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::ImportDeclarationContext::IMPORT() {
  return getToken(ObjectiveCParser::IMPORT, 0);
}

ObjectiveCParser::IdentifierContext* ObjectiveCParser::ImportDeclarationContext::identifier() {
  return getRuleContext<ObjectiveCParser::IdentifierContext>(0);
}

tree::TerminalNode* ObjectiveCParser::ImportDeclarationContext::SEMI() {
  return getToken(ObjectiveCParser::SEMI, 0);
}


size_t ObjectiveCParser::ImportDeclarationContext::getRuleIndex() const {
  return ObjectiveCParser::RuleImportDeclaration;
}

void ObjectiveCParser::ImportDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImportDeclaration(this);
}

void ObjectiveCParser::ImportDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImportDeclaration(this);
}

ObjectiveCParser::ImportDeclarationContext* ObjectiveCParser::importDeclaration() {
  ImportDeclarationContext *_localctx = _tracker.createInstance<ImportDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 4, ObjectiveCParser::RuleImportDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(309);
    match(ObjectiveCParser::IMPORT);
    setState(310);
    identifier();
    setState(311);
    match(ObjectiveCParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassInterfaceContext ------------------------------------------------------------------

ObjectiveCParser::ClassInterfaceContext::ClassInterfaceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::ClassInterfaceContext::INTERFACE() {
  return getToken(ObjectiveCParser::INTERFACE, 0);
}

tree::TerminalNode* ObjectiveCParser::ClassInterfaceContext::END() {
  return getToken(ObjectiveCParser::END, 0);
}

ObjectiveCParser::GenericTypeSpecifierContext* ObjectiveCParser::ClassInterfaceContext::genericTypeSpecifier() {
  return getRuleContext<ObjectiveCParser::GenericTypeSpecifierContext>(0);
}

tree::TerminalNode* ObjectiveCParser::ClassInterfaceContext::IB_DESIGNABLE() {
  return getToken(ObjectiveCParser::IB_DESIGNABLE, 0);
}

tree::TerminalNode* ObjectiveCParser::ClassInterfaceContext::COLON() {
  return getToken(ObjectiveCParser::COLON, 0);
}

tree::TerminalNode* ObjectiveCParser::ClassInterfaceContext::LT() {
  return getToken(ObjectiveCParser::LT, 0);
}

ObjectiveCParser::ProtocolListContext* ObjectiveCParser::ClassInterfaceContext::protocolList() {
  return getRuleContext<ObjectiveCParser::ProtocolListContext>(0);
}

tree::TerminalNode* ObjectiveCParser::ClassInterfaceContext::GT() {
  return getToken(ObjectiveCParser::GT, 0);
}

ObjectiveCParser::InstanceVariablesContext* ObjectiveCParser::ClassInterfaceContext::instanceVariables() {
  return getRuleContext<ObjectiveCParser::InstanceVariablesContext>(0);
}

ObjectiveCParser::InterfaceDeclarationListContext* ObjectiveCParser::ClassInterfaceContext::interfaceDeclarationList() {
  return getRuleContext<ObjectiveCParser::InterfaceDeclarationListContext>(0);
}

ObjectiveCParser::IdentifierContext* ObjectiveCParser::ClassInterfaceContext::identifier() {
  return getRuleContext<ObjectiveCParser::IdentifierContext>(0);
}


size_t ObjectiveCParser::ClassInterfaceContext::getRuleIndex() const {
  return ObjectiveCParser::RuleClassInterface;
}

void ObjectiveCParser::ClassInterfaceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassInterface(this);
}

void ObjectiveCParser::ClassInterfaceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassInterface(this);
}

ObjectiveCParser::ClassInterfaceContext* ObjectiveCParser::classInterface() {
  ClassInterfaceContext *_localctx = _tracker.createInstance<ClassInterfaceContext>(_ctx, getState());
  enterRule(_localctx, 6, ObjectiveCParser::RuleClassInterface);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(314);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectiveCParser::IB_DESIGNABLE) {
      setState(313);
      match(ObjectiveCParser::IB_DESIGNABLE);
    }
    setState(316);
    match(ObjectiveCParser::INTERFACE);
    setState(317);
    antlrcpp::downCast<ClassInterfaceContext *>(_localctx)->className = genericTypeSpecifier();
    setState(320);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectiveCParser::COLON) {
      setState(318);
      match(ObjectiveCParser::COLON);
      setState(319);
      antlrcpp::downCast<ClassInterfaceContext *>(_localctx)->superclassName = identifier();
    }
    setState(326);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectiveCParser::LT) {
      setState(322);
      match(ObjectiveCParser::LT);
      setState(323);
      protocolList();
      setState(324);
      match(ObjectiveCParser::GT);
    }
    setState(329);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectiveCParser::LBRACE) {
      setState(328);
      instanceVariables();
    }
    setState(332);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 142143780600822322) != 0) || ((((_la - 72) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 72)) & 9147936743095809) != 0) || _la == ObjectiveCParser::ADD

    || _la == ObjectiveCParser::SUB) {
      setState(331);
      interfaceDeclarationList();
    }
    setState(334);
    match(ObjectiveCParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CategoryInterfaceContext ------------------------------------------------------------------

ObjectiveCParser::CategoryInterfaceContext::CategoryInterfaceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::CategoryInterfaceContext::INTERFACE() {
  return getToken(ObjectiveCParser::INTERFACE, 0);
}

tree::TerminalNode* ObjectiveCParser::CategoryInterfaceContext::LP() {
  return getToken(ObjectiveCParser::LP, 0);
}

tree::TerminalNode* ObjectiveCParser::CategoryInterfaceContext::RP() {
  return getToken(ObjectiveCParser::RP, 0);
}

tree::TerminalNode* ObjectiveCParser::CategoryInterfaceContext::END() {
  return getToken(ObjectiveCParser::END, 0);
}

ObjectiveCParser::GenericTypeSpecifierContext* ObjectiveCParser::CategoryInterfaceContext::genericTypeSpecifier() {
  return getRuleContext<ObjectiveCParser::GenericTypeSpecifierContext>(0);
}

tree::TerminalNode* ObjectiveCParser::CategoryInterfaceContext::LT() {
  return getToken(ObjectiveCParser::LT, 0);
}

ObjectiveCParser::ProtocolListContext* ObjectiveCParser::CategoryInterfaceContext::protocolList() {
  return getRuleContext<ObjectiveCParser::ProtocolListContext>(0);
}

tree::TerminalNode* ObjectiveCParser::CategoryInterfaceContext::GT() {
  return getToken(ObjectiveCParser::GT, 0);
}

ObjectiveCParser::InstanceVariablesContext* ObjectiveCParser::CategoryInterfaceContext::instanceVariables() {
  return getRuleContext<ObjectiveCParser::InstanceVariablesContext>(0);
}

ObjectiveCParser::InterfaceDeclarationListContext* ObjectiveCParser::CategoryInterfaceContext::interfaceDeclarationList() {
  return getRuleContext<ObjectiveCParser::InterfaceDeclarationListContext>(0);
}

ObjectiveCParser::IdentifierContext* ObjectiveCParser::CategoryInterfaceContext::identifier() {
  return getRuleContext<ObjectiveCParser::IdentifierContext>(0);
}


size_t ObjectiveCParser::CategoryInterfaceContext::getRuleIndex() const {
  return ObjectiveCParser::RuleCategoryInterface;
}

void ObjectiveCParser::CategoryInterfaceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCategoryInterface(this);
}

void ObjectiveCParser::CategoryInterfaceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCategoryInterface(this);
}

ObjectiveCParser::CategoryInterfaceContext* ObjectiveCParser::categoryInterface() {
  CategoryInterfaceContext *_localctx = _tracker.createInstance<CategoryInterfaceContext>(_ctx, getState());
  enterRule(_localctx, 8, ObjectiveCParser::RuleCategoryInterface);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(336);
    match(ObjectiveCParser::INTERFACE);
    setState(337);
    antlrcpp::downCast<CategoryInterfaceContext *>(_localctx)->categoryName = genericTypeSpecifier();
    setState(338);
    match(ObjectiveCParser::LP);
    setState(340);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 142143763727253504) != 0) || ((((_la - 81) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 81)) & 17867063762871) != 0)) {
      setState(339);
      antlrcpp::downCast<CategoryInterfaceContext *>(_localctx)->className = identifier();
    }
    setState(342);
    match(ObjectiveCParser::RP);
    setState(347);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectiveCParser::LT) {
      setState(343);
      match(ObjectiveCParser::LT);
      setState(344);
      protocolList();
      setState(345);
      match(ObjectiveCParser::GT);
    }
    setState(350);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectiveCParser::LBRACE) {
      setState(349);
      instanceVariables();
    }
    setState(353);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 142143780600822322) != 0) || ((((_la - 72) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 72)) & 9147936743095809) != 0) || _la == ObjectiveCParser::ADD

    || _la == ObjectiveCParser::SUB) {
      setState(352);
      interfaceDeclarationList();
    }
    setState(355);
    match(ObjectiveCParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassImplementationContext ------------------------------------------------------------------

ObjectiveCParser::ClassImplementationContext::ClassImplementationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::ClassImplementationContext::IMPLEMENTATION() {
  return getToken(ObjectiveCParser::IMPLEMENTATION, 0);
}

tree::TerminalNode* ObjectiveCParser::ClassImplementationContext::END() {
  return getToken(ObjectiveCParser::END, 0);
}

ObjectiveCParser::GenericTypeSpecifierContext* ObjectiveCParser::ClassImplementationContext::genericTypeSpecifier() {
  return getRuleContext<ObjectiveCParser::GenericTypeSpecifierContext>(0);
}

tree::TerminalNode* ObjectiveCParser::ClassImplementationContext::COLON() {
  return getToken(ObjectiveCParser::COLON, 0);
}

ObjectiveCParser::InstanceVariablesContext* ObjectiveCParser::ClassImplementationContext::instanceVariables() {
  return getRuleContext<ObjectiveCParser::InstanceVariablesContext>(0);
}

ObjectiveCParser::ImplementationDefinitionListContext* ObjectiveCParser::ClassImplementationContext::implementationDefinitionList() {
  return getRuleContext<ObjectiveCParser::ImplementationDefinitionListContext>(0);
}

ObjectiveCParser::IdentifierContext* ObjectiveCParser::ClassImplementationContext::identifier() {
  return getRuleContext<ObjectiveCParser::IdentifierContext>(0);
}


size_t ObjectiveCParser::ClassImplementationContext::getRuleIndex() const {
  return ObjectiveCParser::RuleClassImplementation;
}

void ObjectiveCParser::ClassImplementationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassImplementation(this);
}

void ObjectiveCParser::ClassImplementationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassImplementation(this);
}

ObjectiveCParser::ClassImplementationContext* ObjectiveCParser::classImplementation() {
  ClassImplementationContext *_localctx = _tracker.createInstance<ClassImplementationContext>(_ctx, getState());
  enterRule(_localctx, 10, ObjectiveCParser::RuleClassImplementation);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(357);
    match(ObjectiveCParser::IMPLEMENTATION);
    setState(358);
    antlrcpp::downCast<ClassImplementationContext *>(_localctx)->className = genericTypeSpecifier();
    setState(361);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectiveCParser::COLON) {
      setState(359);
      match(ObjectiveCParser::COLON);
      setState(360);
      antlrcpp::downCast<ClassImplementationContext *>(_localctx)->superclassName = identifier();
    }
    setState(364);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectiveCParser::LBRACE) {
      setState(363);
      instanceVariables();
    }
    setState(367);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2447986789814516274) != 0) || ((((_la - 78) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 78)) & 142936511610873) != 0) || _la == ObjectiveCParser::ADD

    || _la == ObjectiveCParser::SUB) {
      setState(366);
      implementationDefinitionList();
    }
    setState(369);
    match(ObjectiveCParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CategoryImplementationContext ------------------------------------------------------------------

ObjectiveCParser::CategoryImplementationContext::CategoryImplementationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::CategoryImplementationContext::IMPLEMENTATION() {
  return getToken(ObjectiveCParser::IMPLEMENTATION, 0);
}

tree::TerminalNode* ObjectiveCParser::CategoryImplementationContext::LP() {
  return getToken(ObjectiveCParser::LP, 0);
}

tree::TerminalNode* ObjectiveCParser::CategoryImplementationContext::RP() {
  return getToken(ObjectiveCParser::RP, 0);
}

tree::TerminalNode* ObjectiveCParser::CategoryImplementationContext::END() {
  return getToken(ObjectiveCParser::END, 0);
}

ObjectiveCParser::GenericTypeSpecifierContext* ObjectiveCParser::CategoryImplementationContext::genericTypeSpecifier() {
  return getRuleContext<ObjectiveCParser::GenericTypeSpecifierContext>(0);
}

ObjectiveCParser::IdentifierContext* ObjectiveCParser::CategoryImplementationContext::identifier() {
  return getRuleContext<ObjectiveCParser::IdentifierContext>(0);
}

ObjectiveCParser::ImplementationDefinitionListContext* ObjectiveCParser::CategoryImplementationContext::implementationDefinitionList() {
  return getRuleContext<ObjectiveCParser::ImplementationDefinitionListContext>(0);
}


size_t ObjectiveCParser::CategoryImplementationContext::getRuleIndex() const {
  return ObjectiveCParser::RuleCategoryImplementation;
}

void ObjectiveCParser::CategoryImplementationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCategoryImplementation(this);
}

void ObjectiveCParser::CategoryImplementationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCategoryImplementation(this);
}

ObjectiveCParser::CategoryImplementationContext* ObjectiveCParser::categoryImplementation() {
  CategoryImplementationContext *_localctx = _tracker.createInstance<CategoryImplementationContext>(_ctx, getState());
  enterRule(_localctx, 12, ObjectiveCParser::RuleCategoryImplementation);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(371);
    match(ObjectiveCParser::IMPLEMENTATION);
    setState(372);
    antlrcpp::downCast<CategoryImplementationContext *>(_localctx)->className = genericTypeSpecifier();
    setState(373);
    match(ObjectiveCParser::LP);
    setState(374);
    antlrcpp::downCast<CategoryImplementationContext *>(_localctx)->categoryName = identifier();
    setState(375);
    match(ObjectiveCParser::RP);
    setState(377);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2447986789814516274) != 0) || ((((_la - 78) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 78)) & 142936511610873) != 0) || _la == ObjectiveCParser::ADD

    || _la == ObjectiveCParser::SUB) {
      setState(376);
      implementationDefinitionList();
    }
    setState(379);
    match(ObjectiveCParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GenericTypeSpecifierContext ------------------------------------------------------------------

ObjectiveCParser::GenericTypeSpecifierContext::GenericTypeSpecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectiveCParser::IdentifierContext* ObjectiveCParser::GenericTypeSpecifierContext::identifier() {
  return getRuleContext<ObjectiveCParser::IdentifierContext>(0);
}

ObjectiveCParser::GenericsSpecifierContext* ObjectiveCParser::GenericTypeSpecifierContext::genericsSpecifier() {
  return getRuleContext<ObjectiveCParser::GenericsSpecifierContext>(0);
}

tree::TerminalNode* ObjectiveCParser::GenericTypeSpecifierContext::LT() {
  return getToken(ObjectiveCParser::LT, 0);
}

ObjectiveCParser::ProtocolListContext* ObjectiveCParser::GenericTypeSpecifierContext::protocolList() {
  return getRuleContext<ObjectiveCParser::ProtocolListContext>(0);
}

tree::TerminalNode* ObjectiveCParser::GenericTypeSpecifierContext::GT() {
  return getToken(ObjectiveCParser::GT, 0);
}


size_t ObjectiveCParser::GenericTypeSpecifierContext::getRuleIndex() const {
  return ObjectiveCParser::RuleGenericTypeSpecifier;
}

void ObjectiveCParser::GenericTypeSpecifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGenericTypeSpecifier(this);
}

void ObjectiveCParser::GenericTypeSpecifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGenericTypeSpecifier(this);
}

ObjectiveCParser::GenericTypeSpecifierContext* ObjectiveCParser::genericTypeSpecifier() {
  GenericTypeSpecifierContext *_localctx = _tracker.createInstance<GenericTypeSpecifierContext>(_ctx, getState());
  enterRule(_localctx, 14, ObjectiveCParser::RuleGenericTypeSpecifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(381);
    identifier();
    setState(387);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 15, _ctx)) {
    case 1: {
      setState(382);
      match(ObjectiveCParser::LT);
      setState(383);
      protocolList();
      setState(384);
      match(ObjectiveCParser::GT);
      break;
    }

    case 2: {
      setState(386);
      genericsSpecifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProtocolDeclarationContext ------------------------------------------------------------------

ObjectiveCParser::ProtocolDeclarationContext::ProtocolDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::ProtocolDeclarationContext::PROTOCOL() {
  return getToken(ObjectiveCParser::PROTOCOL, 0);
}

ObjectiveCParser::ProtocolNameContext* ObjectiveCParser::ProtocolDeclarationContext::protocolName() {
  return getRuleContext<ObjectiveCParser::ProtocolNameContext>(0);
}

tree::TerminalNode* ObjectiveCParser::ProtocolDeclarationContext::END() {
  return getToken(ObjectiveCParser::END, 0);
}

tree::TerminalNode* ObjectiveCParser::ProtocolDeclarationContext::LT() {
  return getToken(ObjectiveCParser::LT, 0);
}

ObjectiveCParser::ProtocolListContext* ObjectiveCParser::ProtocolDeclarationContext::protocolList() {
  return getRuleContext<ObjectiveCParser::ProtocolListContext>(0);
}

tree::TerminalNode* ObjectiveCParser::ProtocolDeclarationContext::GT() {
  return getToken(ObjectiveCParser::GT, 0);
}

std::vector<ObjectiveCParser::ProtocolDeclarationSectionContext *> ObjectiveCParser::ProtocolDeclarationContext::protocolDeclarationSection() {
  return getRuleContexts<ObjectiveCParser::ProtocolDeclarationSectionContext>();
}

ObjectiveCParser::ProtocolDeclarationSectionContext* ObjectiveCParser::ProtocolDeclarationContext::protocolDeclarationSection(size_t i) {
  return getRuleContext<ObjectiveCParser::ProtocolDeclarationSectionContext>(i);
}


size_t ObjectiveCParser::ProtocolDeclarationContext::getRuleIndex() const {
  return ObjectiveCParser::RuleProtocolDeclaration;
}

void ObjectiveCParser::ProtocolDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProtocolDeclaration(this);
}

void ObjectiveCParser::ProtocolDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProtocolDeclaration(this);
}

ObjectiveCParser::ProtocolDeclarationContext* ObjectiveCParser::protocolDeclaration() {
  ProtocolDeclarationContext *_localctx = _tracker.createInstance<ProtocolDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 16, ObjectiveCParser::RuleProtocolDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(389);
    match(ObjectiveCParser::PROTOCOL);
    setState(390);
    protocolName();
    setState(395);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectiveCParser::LT) {
      setState(391);
      match(ObjectiveCParser::LT);
      setState(392);
      protocolList();
      setState(393);
      match(ObjectiveCParser::GT);
    }
    setState(400);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 142143780600822322) != 0) || ((((_la - 70) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 70)) & 36591746972383269) != 0) || _la == ObjectiveCParser::ADD

    || _la == ObjectiveCParser::SUB) {
      setState(397);
      protocolDeclarationSection();
      setState(402);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(403);
    match(ObjectiveCParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProtocolDeclarationSectionContext ------------------------------------------------------------------

ObjectiveCParser::ProtocolDeclarationSectionContext::ProtocolDeclarationSectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::ProtocolDeclarationSectionContext::REQUIRED() {
  return getToken(ObjectiveCParser::REQUIRED, 0);
}

tree::TerminalNode* ObjectiveCParser::ProtocolDeclarationSectionContext::OPTIONAL() {
  return getToken(ObjectiveCParser::OPTIONAL, 0);
}

std::vector<ObjectiveCParser::InterfaceDeclarationListContext *> ObjectiveCParser::ProtocolDeclarationSectionContext::interfaceDeclarationList() {
  return getRuleContexts<ObjectiveCParser::InterfaceDeclarationListContext>();
}

ObjectiveCParser::InterfaceDeclarationListContext* ObjectiveCParser::ProtocolDeclarationSectionContext::interfaceDeclarationList(size_t i) {
  return getRuleContext<ObjectiveCParser::InterfaceDeclarationListContext>(i);
}


size_t ObjectiveCParser::ProtocolDeclarationSectionContext::getRuleIndex() const {
  return ObjectiveCParser::RuleProtocolDeclarationSection;
}

void ObjectiveCParser::ProtocolDeclarationSectionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProtocolDeclarationSection(this);
}

void ObjectiveCParser::ProtocolDeclarationSectionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProtocolDeclarationSection(this);
}

ObjectiveCParser::ProtocolDeclarationSectionContext* ObjectiveCParser::protocolDeclarationSection() {
  ProtocolDeclarationSectionContext *_localctx = _tracker.createInstance<ProtocolDeclarationSectionContext>(_ctx, getState());
  enterRule(_localctx, 18, ObjectiveCParser::RuleProtocolDeclarationSection);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(417);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectiveCParser::OPTIONAL:
      case ObjectiveCParser::REQUIRED: {
        enterOuterAlt(_localctx, 1);
        setState(405);
        antlrcpp::downCast<ProtocolDeclarationSectionContext *>(_localctx)->modifier = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == ObjectiveCParser::OPTIONAL

        || _la == ObjectiveCParser::REQUIRED)) {
          antlrcpp::downCast<ProtocolDeclarationSectionContext *>(_localctx)->modifier = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(409);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 18, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(406);
            interfaceDeclarationList(); 
          }
          setState(411);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 18, _ctx);
        }
        break;
      }

      case ObjectiveCParser::AUTO:
      case ObjectiveCParser::CHAR:
      case ObjectiveCParser::CONST:
      case ObjectiveCParser::DOUBLE:
      case ObjectiveCParser::ENUM:
      case ObjectiveCParser::EXTERN:
      case ObjectiveCParser::FLOAT:
      case ObjectiveCParser::INLINE:
      case ObjectiveCParser::INT:
      case ObjectiveCParser::LONG:
      case ObjectiveCParser::REGISTER:
      case ObjectiveCParser::RESTRICT:
      case ObjectiveCParser::SHORT:
      case ObjectiveCParser::SIGNED:
      case ObjectiveCParser::STATIC:
      case ObjectiveCParser::STRUCT:
      case ObjectiveCParser::TYPEDEF:
      case ObjectiveCParser::UNION:
      case ObjectiveCParser::UNSIGNED:
      case ObjectiveCParser::VOID:
      case ObjectiveCParser::VOLATILE:
      case ObjectiveCParser::BOOL:
      case ObjectiveCParser::Class:
      case ObjectiveCParser::BYCOPY:
      case ObjectiveCParser::BYREF:
      case ObjectiveCParser::ID:
      case ObjectiveCParser::IMP:
      case ObjectiveCParser::IN:
      case ObjectiveCParser::INOUT:
      case ObjectiveCParser::ONEWAY:
      case ObjectiveCParser::OUT:
      case ObjectiveCParser::PROTOCOL_:
      case ObjectiveCParser::SEL:
      case ObjectiveCParser::SELF:
      case ObjectiveCParser::SUPER:
      case ObjectiveCParser::PROPERTY:
      case ObjectiveCParser::ATOMIC:
      case ObjectiveCParser::NONATOMIC:
      case ObjectiveCParser::RETAIN:
      case ObjectiveCParser::ATTRIBUTE:
      case ObjectiveCParser::AUTORELEASING_QUALIFIER:
      case ObjectiveCParser::BLOCK:
      case ObjectiveCParser::BRIDGE:
      case ObjectiveCParser::BRIDGE_RETAINED:
      case ObjectiveCParser::BRIDGE_TRANSFER:
      case ObjectiveCParser::COVARIANT:
      case ObjectiveCParser::CONTRAVARIANT:
      case ObjectiveCParser::DEPRECATED:
      case ObjectiveCParser::KINDOF:
      case ObjectiveCParser::STRONG_QUALIFIER:
      case ObjectiveCParser::TYPEOF:
      case ObjectiveCParser::UNSAFE_UNRETAINED_QUALIFIER:
      case ObjectiveCParser::UNUSED:
      case ObjectiveCParser::WEAK_QUALIFIER:
      case ObjectiveCParser::NULL_UNSPECIFIED:
      case ObjectiveCParser::NULLABLE:
      case ObjectiveCParser::NONNULL:
      case ObjectiveCParser::NULL_RESETTABLE:
      case ObjectiveCParser::NS_INLINE:
      case ObjectiveCParser::NS_ENUM:
      case ObjectiveCParser::NS_OPTIONS:
      case ObjectiveCParser::ASSIGN:
      case ObjectiveCParser::COPY:
      case ObjectiveCParser::GETTER:
      case ObjectiveCParser::SETTER:
      case ObjectiveCParser::STRONG:
      case ObjectiveCParser::READONLY:
      case ObjectiveCParser::READWRITE:
      case ObjectiveCParser::WEAK:
      case ObjectiveCParser::UNSAFE_UNRETAINED:
      case ObjectiveCParser::IB_OUTLET:
      case ObjectiveCParser::IB_OUTLET_COLLECTION:
      case ObjectiveCParser::IB_INSPECTABLE:
      case ObjectiveCParser::IB_DESIGNABLE:
      case ObjectiveCParser::IDENTIFIER:
      case ObjectiveCParser::ADD:
      case ObjectiveCParser::SUB: {
        enterOuterAlt(_localctx, 2);
        setState(413); 
        _errHandler->sync(this);
        alt = 1;
        do {
          switch (alt) {
            case 1: {
                  setState(412);
                  interfaceDeclarationList();
                  break;
                }

          default:
            throw NoViableAltException(this);
          }
          setState(415); 
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 19, _ctx);
        } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProtocolDeclarationListContext ------------------------------------------------------------------

ObjectiveCParser::ProtocolDeclarationListContext::ProtocolDeclarationListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::ProtocolDeclarationListContext::PROTOCOL() {
  return getToken(ObjectiveCParser::PROTOCOL, 0);
}

ObjectiveCParser::ProtocolListContext* ObjectiveCParser::ProtocolDeclarationListContext::protocolList() {
  return getRuleContext<ObjectiveCParser::ProtocolListContext>(0);
}

tree::TerminalNode* ObjectiveCParser::ProtocolDeclarationListContext::SEMI() {
  return getToken(ObjectiveCParser::SEMI, 0);
}


size_t ObjectiveCParser::ProtocolDeclarationListContext::getRuleIndex() const {
  return ObjectiveCParser::RuleProtocolDeclarationList;
}

void ObjectiveCParser::ProtocolDeclarationListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProtocolDeclarationList(this);
}

void ObjectiveCParser::ProtocolDeclarationListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProtocolDeclarationList(this);
}

ObjectiveCParser::ProtocolDeclarationListContext* ObjectiveCParser::protocolDeclarationList() {
  ProtocolDeclarationListContext *_localctx = _tracker.createInstance<ProtocolDeclarationListContext>(_ctx, getState());
  enterRule(_localctx, 20, ObjectiveCParser::RuleProtocolDeclarationList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(419);
    match(ObjectiveCParser::PROTOCOL);
    setState(420);
    protocolList();
    setState(421);
    match(ObjectiveCParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassDeclarationListContext ------------------------------------------------------------------

ObjectiveCParser::ClassDeclarationListContext::ClassDeclarationListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::ClassDeclarationListContext::CLASS() {
  return getToken(ObjectiveCParser::CLASS, 0);
}

std::vector<ObjectiveCParser::IdentifierContext *> ObjectiveCParser::ClassDeclarationListContext::identifier() {
  return getRuleContexts<ObjectiveCParser::IdentifierContext>();
}

ObjectiveCParser::IdentifierContext* ObjectiveCParser::ClassDeclarationListContext::identifier(size_t i) {
  return getRuleContext<ObjectiveCParser::IdentifierContext>(i);
}

tree::TerminalNode* ObjectiveCParser::ClassDeclarationListContext::SEMI() {
  return getToken(ObjectiveCParser::SEMI, 0);
}

std::vector<tree::TerminalNode *> ObjectiveCParser::ClassDeclarationListContext::COMMA() {
  return getTokens(ObjectiveCParser::COMMA);
}

tree::TerminalNode* ObjectiveCParser::ClassDeclarationListContext::COMMA(size_t i) {
  return getToken(ObjectiveCParser::COMMA, i);
}


size_t ObjectiveCParser::ClassDeclarationListContext::getRuleIndex() const {
  return ObjectiveCParser::RuleClassDeclarationList;
}

void ObjectiveCParser::ClassDeclarationListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassDeclarationList(this);
}

void ObjectiveCParser::ClassDeclarationListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassDeclarationList(this);
}

ObjectiveCParser::ClassDeclarationListContext* ObjectiveCParser::classDeclarationList() {
  ClassDeclarationListContext *_localctx = _tracker.createInstance<ClassDeclarationListContext>(_ctx, getState());
  enterRule(_localctx, 22, ObjectiveCParser::RuleClassDeclarationList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(423);
    match(ObjectiveCParser::CLASS);
    setState(424);
    identifier();
    setState(429);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectiveCParser::COMMA) {
      setState(425);
      match(ObjectiveCParser::COMMA);
      setState(426);
      identifier();
      setState(431);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(432);
    match(ObjectiveCParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProtocolListContext ------------------------------------------------------------------

ObjectiveCParser::ProtocolListContext::ProtocolListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectiveCParser::ProtocolNameContext *> ObjectiveCParser::ProtocolListContext::protocolName() {
  return getRuleContexts<ObjectiveCParser::ProtocolNameContext>();
}

ObjectiveCParser::ProtocolNameContext* ObjectiveCParser::ProtocolListContext::protocolName(size_t i) {
  return getRuleContext<ObjectiveCParser::ProtocolNameContext>(i);
}

std::vector<tree::TerminalNode *> ObjectiveCParser::ProtocolListContext::COMMA() {
  return getTokens(ObjectiveCParser::COMMA);
}

tree::TerminalNode* ObjectiveCParser::ProtocolListContext::COMMA(size_t i) {
  return getToken(ObjectiveCParser::COMMA, i);
}


size_t ObjectiveCParser::ProtocolListContext::getRuleIndex() const {
  return ObjectiveCParser::RuleProtocolList;
}

void ObjectiveCParser::ProtocolListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProtocolList(this);
}

void ObjectiveCParser::ProtocolListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProtocolList(this);
}

ObjectiveCParser::ProtocolListContext* ObjectiveCParser::protocolList() {
  ProtocolListContext *_localctx = _tracker.createInstance<ProtocolListContext>(_ctx, getState());
  enterRule(_localctx, 24, ObjectiveCParser::RuleProtocolList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(434);
    protocolName();
    setState(439);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectiveCParser::COMMA) {
      setState(435);
      match(ObjectiveCParser::COMMA);
      setState(436);
      protocolName();
      setState(441);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PropertyDeclarationContext ------------------------------------------------------------------

ObjectiveCParser::PropertyDeclarationContext::PropertyDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::PropertyDeclarationContext::PROPERTY() {
  return getToken(ObjectiveCParser::PROPERTY, 0);
}

ObjectiveCParser::FieldDeclarationContext* ObjectiveCParser::PropertyDeclarationContext::fieldDeclaration() {
  return getRuleContext<ObjectiveCParser::FieldDeclarationContext>(0);
}

tree::TerminalNode* ObjectiveCParser::PropertyDeclarationContext::LP() {
  return getToken(ObjectiveCParser::LP, 0);
}

ObjectiveCParser::PropertyAttributesListContext* ObjectiveCParser::PropertyDeclarationContext::propertyAttributesList() {
  return getRuleContext<ObjectiveCParser::PropertyAttributesListContext>(0);
}

tree::TerminalNode* ObjectiveCParser::PropertyDeclarationContext::RP() {
  return getToken(ObjectiveCParser::RP, 0);
}

ObjectiveCParser::IbOutletQualifierContext* ObjectiveCParser::PropertyDeclarationContext::ibOutletQualifier() {
  return getRuleContext<ObjectiveCParser::IbOutletQualifierContext>(0);
}

tree::TerminalNode* ObjectiveCParser::PropertyDeclarationContext::IB_INSPECTABLE() {
  return getToken(ObjectiveCParser::IB_INSPECTABLE, 0);
}


size_t ObjectiveCParser::PropertyDeclarationContext::getRuleIndex() const {
  return ObjectiveCParser::RulePropertyDeclaration;
}

void ObjectiveCParser::PropertyDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPropertyDeclaration(this);
}

void ObjectiveCParser::PropertyDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPropertyDeclaration(this);
}

ObjectiveCParser::PropertyDeclarationContext* ObjectiveCParser::propertyDeclaration() {
  PropertyDeclarationContext *_localctx = _tracker.createInstance<PropertyDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 26, ObjectiveCParser::RulePropertyDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(442);
    match(ObjectiveCParser::PROPERTY);
    setState(447);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectiveCParser::LP) {
      setState(443);
      match(ObjectiveCParser::LP);
      setState(444);
      propertyAttributesList();
      setState(445);
      match(ObjectiveCParser::RP);
    }
    setState(450);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 24, _ctx)) {
    case 1: {
      setState(449);
      ibOutletQualifier();
      break;
    }

    default:
      break;
    }
    setState(453);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 25, _ctx)) {
    case 1: {
      setState(452);
      match(ObjectiveCParser::IB_INSPECTABLE);
      break;
    }

    default:
      break;
    }
    setState(455);
    fieldDeclaration();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PropertyAttributesListContext ------------------------------------------------------------------

ObjectiveCParser::PropertyAttributesListContext::PropertyAttributesListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectiveCParser::PropertyAttributeContext *> ObjectiveCParser::PropertyAttributesListContext::propertyAttribute() {
  return getRuleContexts<ObjectiveCParser::PropertyAttributeContext>();
}

ObjectiveCParser::PropertyAttributeContext* ObjectiveCParser::PropertyAttributesListContext::propertyAttribute(size_t i) {
  return getRuleContext<ObjectiveCParser::PropertyAttributeContext>(i);
}

std::vector<tree::TerminalNode *> ObjectiveCParser::PropertyAttributesListContext::COMMA() {
  return getTokens(ObjectiveCParser::COMMA);
}

tree::TerminalNode* ObjectiveCParser::PropertyAttributesListContext::COMMA(size_t i) {
  return getToken(ObjectiveCParser::COMMA, i);
}


size_t ObjectiveCParser::PropertyAttributesListContext::getRuleIndex() const {
  return ObjectiveCParser::RulePropertyAttributesList;
}

void ObjectiveCParser::PropertyAttributesListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPropertyAttributesList(this);
}

void ObjectiveCParser::PropertyAttributesListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPropertyAttributesList(this);
}

ObjectiveCParser::PropertyAttributesListContext* ObjectiveCParser::propertyAttributesList() {
  PropertyAttributesListContext *_localctx = _tracker.createInstance<PropertyAttributesListContext>(_ctx, getState());
  enterRule(_localctx, 28, ObjectiveCParser::RulePropertyAttributesList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(457);
    propertyAttribute();
    setState(462);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectiveCParser::COMMA) {
      setState(458);
      match(ObjectiveCParser::COMMA);
      setState(459);
      propertyAttribute();
      setState(464);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PropertyAttributeContext ------------------------------------------------------------------

ObjectiveCParser::PropertyAttributeContext::PropertyAttributeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::PropertyAttributeContext::ATOMIC() {
  return getToken(ObjectiveCParser::ATOMIC, 0);
}

tree::TerminalNode* ObjectiveCParser::PropertyAttributeContext::NONATOMIC() {
  return getToken(ObjectiveCParser::NONATOMIC, 0);
}

tree::TerminalNode* ObjectiveCParser::PropertyAttributeContext::STRONG() {
  return getToken(ObjectiveCParser::STRONG, 0);
}

tree::TerminalNode* ObjectiveCParser::PropertyAttributeContext::WEAK() {
  return getToken(ObjectiveCParser::WEAK, 0);
}

tree::TerminalNode* ObjectiveCParser::PropertyAttributeContext::RETAIN() {
  return getToken(ObjectiveCParser::RETAIN, 0);
}

tree::TerminalNode* ObjectiveCParser::PropertyAttributeContext::ASSIGN() {
  return getToken(ObjectiveCParser::ASSIGN, 0);
}

tree::TerminalNode* ObjectiveCParser::PropertyAttributeContext::UNSAFE_UNRETAINED() {
  return getToken(ObjectiveCParser::UNSAFE_UNRETAINED, 0);
}

tree::TerminalNode* ObjectiveCParser::PropertyAttributeContext::COPY() {
  return getToken(ObjectiveCParser::COPY, 0);
}

tree::TerminalNode* ObjectiveCParser::PropertyAttributeContext::READONLY() {
  return getToken(ObjectiveCParser::READONLY, 0);
}

tree::TerminalNode* ObjectiveCParser::PropertyAttributeContext::READWRITE() {
  return getToken(ObjectiveCParser::READWRITE, 0);
}

tree::TerminalNode* ObjectiveCParser::PropertyAttributeContext::GETTER() {
  return getToken(ObjectiveCParser::GETTER, 0);
}

tree::TerminalNode* ObjectiveCParser::PropertyAttributeContext::ASSIGNMENT() {
  return getToken(ObjectiveCParser::ASSIGNMENT, 0);
}

ObjectiveCParser::IdentifierContext* ObjectiveCParser::PropertyAttributeContext::identifier() {
  return getRuleContext<ObjectiveCParser::IdentifierContext>(0);
}

tree::TerminalNode* ObjectiveCParser::PropertyAttributeContext::SETTER() {
  return getToken(ObjectiveCParser::SETTER, 0);
}

tree::TerminalNode* ObjectiveCParser::PropertyAttributeContext::COLON() {
  return getToken(ObjectiveCParser::COLON, 0);
}

ObjectiveCParser::NullabilitySpecifierContext* ObjectiveCParser::PropertyAttributeContext::nullabilitySpecifier() {
  return getRuleContext<ObjectiveCParser::NullabilitySpecifierContext>(0);
}


size_t ObjectiveCParser::PropertyAttributeContext::getRuleIndex() const {
  return ObjectiveCParser::RulePropertyAttribute;
}

void ObjectiveCParser::PropertyAttributeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPropertyAttribute(this);
}

void ObjectiveCParser::PropertyAttributeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPropertyAttribute(this);
}

ObjectiveCParser::PropertyAttributeContext* ObjectiveCParser::propertyAttribute() {
  PropertyAttributeContext *_localctx = _tracker.createInstance<PropertyAttributeContext>(_ctx, getState());
  enterRule(_localctx, 30, ObjectiveCParser::RulePropertyAttribute);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(485);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 27, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(465);
      match(ObjectiveCParser::ATOMIC);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(466);
      match(ObjectiveCParser::NONATOMIC);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(467);
      match(ObjectiveCParser::STRONG);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(468);
      match(ObjectiveCParser::WEAK);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(469);
      match(ObjectiveCParser::RETAIN);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(470);
      match(ObjectiveCParser::ASSIGN);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(471);
      match(ObjectiveCParser::UNSAFE_UNRETAINED);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(472);
      match(ObjectiveCParser::COPY);
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(473);
      match(ObjectiveCParser::READONLY);
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(474);
      match(ObjectiveCParser::READWRITE);
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(475);
      match(ObjectiveCParser::GETTER);
      setState(476);
      match(ObjectiveCParser::ASSIGNMENT);
      setState(477);
      identifier();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(478);
      match(ObjectiveCParser::SETTER);
      setState(479);
      match(ObjectiveCParser::ASSIGNMENT);
      setState(480);
      identifier();
      setState(481);
      match(ObjectiveCParser::COLON);
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(483);
      nullabilitySpecifier();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(484);
      identifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProtocolNameContext ------------------------------------------------------------------

ObjectiveCParser::ProtocolNameContext::ProtocolNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::ProtocolNameContext::LT() {
  return getToken(ObjectiveCParser::LT, 0);
}

ObjectiveCParser::ProtocolListContext* ObjectiveCParser::ProtocolNameContext::protocolList() {
  return getRuleContext<ObjectiveCParser::ProtocolListContext>(0);
}

tree::TerminalNode* ObjectiveCParser::ProtocolNameContext::GT() {
  return getToken(ObjectiveCParser::GT, 0);
}

ObjectiveCParser::IdentifierContext* ObjectiveCParser::ProtocolNameContext::identifier() {
  return getRuleContext<ObjectiveCParser::IdentifierContext>(0);
}

tree::TerminalNode* ObjectiveCParser::ProtocolNameContext::COVARIANT() {
  return getToken(ObjectiveCParser::COVARIANT, 0);
}

tree::TerminalNode* ObjectiveCParser::ProtocolNameContext::CONTRAVARIANT() {
  return getToken(ObjectiveCParser::CONTRAVARIANT, 0);
}


size_t ObjectiveCParser::ProtocolNameContext::getRuleIndex() const {
  return ObjectiveCParser::RuleProtocolName;
}

void ObjectiveCParser::ProtocolNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProtocolName(this);
}

void ObjectiveCParser::ProtocolNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProtocolName(this);
}

ObjectiveCParser::ProtocolNameContext* ObjectiveCParser::protocolName() {
  ProtocolNameContext *_localctx = _tracker.createInstance<ProtocolNameContext>(_ctx, getState());
  enterRule(_localctx, 32, ObjectiveCParser::RuleProtocolName);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(495);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectiveCParser::LT: {
        enterOuterAlt(_localctx, 1);
        setState(487);
        match(ObjectiveCParser::LT);
        setState(488);
        protocolList();
        setState(489);
        match(ObjectiveCParser::GT);
        break;
      }

      case ObjectiveCParser::BOOL:
      case ObjectiveCParser::Class:
      case ObjectiveCParser::BYCOPY:
      case ObjectiveCParser::BYREF:
      case ObjectiveCParser::ID:
      case ObjectiveCParser::IMP:
      case ObjectiveCParser::IN:
      case ObjectiveCParser::INOUT:
      case ObjectiveCParser::ONEWAY:
      case ObjectiveCParser::OUT:
      case ObjectiveCParser::PROTOCOL_:
      case ObjectiveCParser::SEL:
      case ObjectiveCParser::SELF:
      case ObjectiveCParser::SUPER:
      case ObjectiveCParser::ATOMIC:
      case ObjectiveCParser::NONATOMIC:
      case ObjectiveCParser::RETAIN:
      case ObjectiveCParser::AUTORELEASING_QUALIFIER:
      case ObjectiveCParser::BLOCK:
      case ObjectiveCParser::BRIDGE_RETAINED:
      case ObjectiveCParser::BRIDGE_TRANSFER:
      case ObjectiveCParser::COVARIANT:
      case ObjectiveCParser::CONTRAVARIANT:
      case ObjectiveCParser::DEPRECATED:
      case ObjectiveCParser::KINDOF:
      case ObjectiveCParser::UNUSED:
      case ObjectiveCParser::NULL_UNSPECIFIED:
      case ObjectiveCParser::NULLABLE:
      case ObjectiveCParser::NONNULL:
      case ObjectiveCParser::NULL_RESETTABLE:
      case ObjectiveCParser::NS_INLINE:
      case ObjectiveCParser::NS_ENUM:
      case ObjectiveCParser::NS_OPTIONS:
      case ObjectiveCParser::ASSIGN:
      case ObjectiveCParser::COPY:
      case ObjectiveCParser::GETTER:
      case ObjectiveCParser::SETTER:
      case ObjectiveCParser::STRONG:
      case ObjectiveCParser::READONLY:
      case ObjectiveCParser::READWRITE:
      case ObjectiveCParser::WEAK:
      case ObjectiveCParser::UNSAFE_UNRETAINED:
      case ObjectiveCParser::IB_OUTLET:
      case ObjectiveCParser::IB_OUTLET_COLLECTION:
      case ObjectiveCParser::IB_INSPECTABLE:
      case ObjectiveCParser::IB_DESIGNABLE:
      case ObjectiveCParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 2);
        setState(492);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 28, _ctx)) {
        case 1: {
          setState(491);
          _la = _input->LA(1);
          if (!(_la == ObjectiveCParser::COVARIANT

          || _la == ObjectiveCParser::CONTRAVARIANT)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          break;
        }

        default:
          break;
        }
        setState(494);
        identifier();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InstanceVariablesContext ------------------------------------------------------------------

ObjectiveCParser::InstanceVariablesContext::InstanceVariablesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::InstanceVariablesContext::LBRACE() {
  return getToken(ObjectiveCParser::LBRACE, 0);
}

tree::TerminalNode* ObjectiveCParser::InstanceVariablesContext::RBRACE() {
  return getToken(ObjectiveCParser::RBRACE, 0);
}

std::vector<ObjectiveCParser::VisibilitySectionContext *> ObjectiveCParser::InstanceVariablesContext::visibilitySection() {
  return getRuleContexts<ObjectiveCParser::VisibilitySectionContext>();
}

ObjectiveCParser::VisibilitySectionContext* ObjectiveCParser::InstanceVariablesContext::visibilitySection(size_t i) {
  return getRuleContext<ObjectiveCParser::VisibilitySectionContext>(i);
}


size_t ObjectiveCParser::InstanceVariablesContext::getRuleIndex() const {
  return ObjectiveCParser::RuleInstanceVariables;
}

void ObjectiveCParser::InstanceVariablesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInstanceVariables(this);
}

void ObjectiveCParser::InstanceVariablesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInstanceVariables(this);
}

ObjectiveCParser::InstanceVariablesContext* ObjectiveCParser::instanceVariables() {
  InstanceVariablesContext *_localctx = _tracker.createInstance<InstanceVariablesContext>(_ctx, getState());
  enterRule(_localctx, 34, ObjectiveCParser::RuleInstanceVariables);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(497);
    match(ObjectiveCParser::LBRACE);
    setState(501);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 142143779995789872) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 146366987889467497) != 0)) {
      setState(498);
      visibilitySection();
      setState(503);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(504);
    match(ObjectiveCParser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VisibilitySectionContext ------------------------------------------------------------------

ObjectiveCParser::VisibilitySectionContext::VisibilitySectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectiveCParser::AccessModifierContext* ObjectiveCParser::VisibilitySectionContext::accessModifier() {
  return getRuleContext<ObjectiveCParser::AccessModifierContext>(0);
}

std::vector<ObjectiveCParser::FieldDeclarationContext *> ObjectiveCParser::VisibilitySectionContext::fieldDeclaration() {
  return getRuleContexts<ObjectiveCParser::FieldDeclarationContext>();
}

ObjectiveCParser::FieldDeclarationContext* ObjectiveCParser::VisibilitySectionContext::fieldDeclaration(size_t i) {
  return getRuleContext<ObjectiveCParser::FieldDeclarationContext>(i);
}


size_t ObjectiveCParser::VisibilitySectionContext::getRuleIndex() const {
  return ObjectiveCParser::RuleVisibilitySection;
}

void ObjectiveCParser::VisibilitySectionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVisibilitySection(this);
}

void ObjectiveCParser::VisibilitySectionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVisibilitySection(this);
}

ObjectiveCParser::VisibilitySectionContext* ObjectiveCParser::visibilitySection() {
  VisibilitySectionContext *_localctx = _tracker.createInstance<VisibilitySectionContext>(_ctx, getState());
  enterRule(_localctx, 36, ObjectiveCParser::RuleVisibilitySection);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(518);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectiveCParser::PACKAGE:
      case ObjectiveCParser::PRIVATE:
      case ObjectiveCParser::PROTECTED:
      case ObjectiveCParser::PUBLIC: {
        enterOuterAlt(_localctx, 1);
        setState(506);
        accessModifier();
        setState(510);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 31, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(507);
            fieldDeclaration(); 
          }
          setState(512);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 31, _ctx);
        }
        break;
      }

      case ObjectiveCParser::CHAR:
      case ObjectiveCParser::CONST:
      case ObjectiveCParser::DOUBLE:
      case ObjectiveCParser::ENUM:
      case ObjectiveCParser::FLOAT:
      case ObjectiveCParser::INLINE:
      case ObjectiveCParser::INT:
      case ObjectiveCParser::LONG:
      case ObjectiveCParser::RESTRICT:
      case ObjectiveCParser::SHORT:
      case ObjectiveCParser::SIGNED:
      case ObjectiveCParser::STRUCT:
      case ObjectiveCParser::UNION:
      case ObjectiveCParser::UNSIGNED:
      case ObjectiveCParser::VOID:
      case ObjectiveCParser::VOLATILE:
      case ObjectiveCParser::BOOL:
      case ObjectiveCParser::Class:
      case ObjectiveCParser::BYCOPY:
      case ObjectiveCParser::BYREF:
      case ObjectiveCParser::ID:
      case ObjectiveCParser::IMP:
      case ObjectiveCParser::IN:
      case ObjectiveCParser::INOUT:
      case ObjectiveCParser::ONEWAY:
      case ObjectiveCParser::OUT:
      case ObjectiveCParser::PROTOCOL_:
      case ObjectiveCParser::SEL:
      case ObjectiveCParser::SELF:
      case ObjectiveCParser::SUPER:
      case ObjectiveCParser::ATOMIC:
      case ObjectiveCParser::NONATOMIC:
      case ObjectiveCParser::RETAIN:
      case ObjectiveCParser::AUTORELEASING_QUALIFIER:
      case ObjectiveCParser::BLOCK:
      case ObjectiveCParser::BRIDGE:
      case ObjectiveCParser::BRIDGE_RETAINED:
      case ObjectiveCParser::BRIDGE_TRANSFER:
      case ObjectiveCParser::COVARIANT:
      case ObjectiveCParser::CONTRAVARIANT:
      case ObjectiveCParser::DEPRECATED:
      case ObjectiveCParser::KINDOF:
      case ObjectiveCParser::STRONG_QUALIFIER:
      case ObjectiveCParser::TYPEOF:
      case ObjectiveCParser::UNSAFE_UNRETAINED_QUALIFIER:
      case ObjectiveCParser::UNUSED:
      case ObjectiveCParser::WEAK_QUALIFIER:
      case ObjectiveCParser::NULL_UNSPECIFIED:
      case ObjectiveCParser::NULLABLE:
      case ObjectiveCParser::NONNULL:
      case ObjectiveCParser::NULL_RESETTABLE:
      case ObjectiveCParser::NS_INLINE:
      case ObjectiveCParser::NS_ENUM:
      case ObjectiveCParser::NS_OPTIONS:
      case ObjectiveCParser::ASSIGN:
      case ObjectiveCParser::COPY:
      case ObjectiveCParser::GETTER:
      case ObjectiveCParser::SETTER:
      case ObjectiveCParser::STRONG:
      case ObjectiveCParser::READONLY:
      case ObjectiveCParser::READWRITE:
      case ObjectiveCParser::WEAK:
      case ObjectiveCParser::UNSAFE_UNRETAINED:
      case ObjectiveCParser::IB_OUTLET:
      case ObjectiveCParser::IB_OUTLET_COLLECTION:
      case ObjectiveCParser::IB_INSPECTABLE:
      case ObjectiveCParser::IB_DESIGNABLE:
      case ObjectiveCParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 2);
        setState(514); 
        _errHandler->sync(this);
        alt = 1;
        do {
          switch (alt) {
            case 1: {
                  setState(513);
                  fieldDeclaration();
                  break;
                }

          default:
            throw NoViableAltException(this);
          }
          setState(516); 
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 32, _ctx);
        } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AccessModifierContext ------------------------------------------------------------------

ObjectiveCParser::AccessModifierContext::AccessModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::AccessModifierContext::PRIVATE() {
  return getToken(ObjectiveCParser::PRIVATE, 0);
}

tree::TerminalNode* ObjectiveCParser::AccessModifierContext::PROTECTED() {
  return getToken(ObjectiveCParser::PROTECTED, 0);
}

tree::TerminalNode* ObjectiveCParser::AccessModifierContext::PACKAGE() {
  return getToken(ObjectiveCParser::PACKAGE, 0);
}

tree::TerminalNode* ObjectiveCParser::AccessModifierContext::PUBLIC() {
  return getToken(ObjectiveCParser::PUBLIC, 0);
}


size_t ObjectiveCParser::AccessModifierContext::getRuleIndex() const {
  return ObjectiveCParser::RuleAccessModifier;
}

void ObjectiveCParser::AccessModifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAccessModifier(this);
}

void ObjectiveCParser::AccessModifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAccessModifier(this);
}

ObjectiveCParser::AccessModifierContext* ObjectiveCParser::accessModifier() {
  AccessModifierContext *_localctx = _tracker.createInstance<AccessModifierContext>(_ctx, getState());
  enterRule(_localctx, 38, ObjectiveCParser::RuleAccessModifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(520);
    _la = _input->LA(1);
    if (!(((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 105) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceDeclarationListContext ------------------------------------------------------------------

ObjectiveCParser::InterfaceDeclarationListContext::InterfaceDeclarationListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectiveCParser::DeclarationContext *> ObjectiveCParser::InterfaceDeclarationListContext::declaration() {
  return getRuleContexts<ObjectiveCParser::DeclarationContext>();
}

ObjectiveCParser::DeclarationContext* ObjectiveCParser::InterfaceDeclarationListContext::declaration(size_t i) {
  return getRuleContext<ObjectiveCParser::DeclarationContext>(i);
}

std::vector<ObjectiveCParser::ClassMethodDeclarationContext *> ObjectiveCParser::InterfaceDeclarationListContext::classMethodDeclaration() {
  return getRuleContexts<ObjectiveCParser::ClassMethodDeclarationContext>();
}

ObjectiveCParser::ClassMethodDeclarationContext* ObjectiveCParser::InterfaceDeclarationListContext::classMethodDeclaration(size_t i) {
  return getRuleContext<ObjectiveCParser::ClassMethodDeclarationContext>(i);
}

std::vector<ObjectiveCParser::InstanceMethodDeclarationContext *> ObjectiveCParser::InterfaceDeclarationListContext::instanceMethodDeclaration() {
  return getRuleContexts<ObjectiveCParser::InstanceMethodDeclarationContext>();
}

ObjectiveCParser::InstanceMethodDeclarationContext* ObjectiveCParser::InterfaceDeclarationListContext::instanceMethodDeclaration(size_t i) {
  return getRuleContext<ObjectiveCParser::InstanceMethodDeclarationContext>(i);
}

std::vector<ObjectiveCParser::PropertyDeclarationContext *> ObjectiveCParser::InterfaceDeclarationListContext::propertyDeclaration() {
  return getRuleContexts<ObjectiveCParser::PropertyDeclarationContext>();
}

ObjectiveCParser::PropertyDeclarationContext* ObjectiveCParser::InterfaceDeclarationListContext::propertyDeclaration(size_t i) {
  return getRuleContext<ObjectiveCParser::PropertyDeclarationContext>(i);
}

std::vector<ObjectiveCParser::FunctionDeclarationContext *> ObjectiveCParser::InterfaceDeclarationListContext::functionDeclaration() {
  return getRuleContexts<ObjectiveCParser::FunctionDeclarationContext>();
}

ObjectiveCParser::FunctionDeclarationContext* ObjectiveCParser::InterfaceDeclarationListContext::functionDeclaration(size_t i) {
  return getRuleContext<ObjectiveCParser::FunctionDeclarationContext>(i);
}


size_t ObjectiveCParser::InterfaceDeclarationListContext::getRuleIndex() const {
  return ObjectiveCParser::RuleInterfaceDeclarationList;
}

void ObjectiveCParser::InterfaceDeclarationListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterfaceDeclarationList(this);
}

void ObjectiveCParser::InterfaceDeclarationListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterfaceDeclarationList(this);
}

ObjectiveCParser::InterfaceDeclarationListContext* ObjectiveCParser::interfaceDeclarationList() {
  InterfaceDeclarationListContext *_localctx = _tracker.createInstance<InterfaceDeclarationListContext>(_ctx, getState());
  enterRule(_localctx, 40, ObjectiveCParser::RuleInterfaceDeclarationList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(527); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(527);
              _errHandler->sync(this);
              switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 34, _ctx)) {
              case 1: {
                setState(522);
                declaration();
                break;
              }

              case 2: {
                setState(523);
                classMethodDeclaration();
                break;
              }

              case 3: {
                setState(524);
                instanceMethodDeclaration();
                break;
              }

              case 4: {
                setState(525);
                propertyDeclaration();
                break;
              }

              case 5: {
                setState(526);
                functionDeclaration();
                break;
              }

              default:
                break;
              }
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(529); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 35, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassMethodDeclarationContext ------------------------------------------------------------------

ObjectiveCParser::ClassMethodDeclarationContext::ClassMethodDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::ClassMethodDeclarationContext::ADD() {
  return getToken(ObjectiveCParser::ADD, 0);
}

ObjectiveCParser::MethodDeclarationContext* ObjectiveCParser::ClassMethodDeclarationContext::methodDeclaration() {
  return getRuleContext<ObjectiveCParser::MethodDeclarationContext>(0);
}


size_t ObjectiveCParser::ClassMethodDeclarationContext::getRuleIndex() const {
  return ObjectiveCParser::RuleClassMethodDeclaration;
}

void ObjectiveCParser::ClassMethodDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassMethodDeclaration(this);
}

void ObjectiveCParser::ClassMethodDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassMethodDeclaration(this);
}

ObjectiveCParser::ClassMethodDeclarationContext* ObjectiveCParser::classMethodDeclaration() {
  ClassMethodDeclarationContext *_localctx = _tracker.createInstance<ClassMethodDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 42, ObjectiveCParser::RuleClassMethodDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(531);
    match(ObjectiveCParser::ADD);
    setState(532);
    methodDeclaration();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InstanceMethodDeclarationContext ------------------------------------------------------------------

ObjectiveCParser::InstanceMethodDeclarationContext::InstanceMethodDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::InstanceMethodDeclarationContext::SUB() {
  return getToken(ObjectiveCParser::SUB, 0);
}

ObjectiveCParser::MethodDeclarationContext* ObjectiveCParser::InstanceMethodDeclarationContext::methodDeclaration() {
  return getRuleContext<ObjectiveCParser::MethodDeclarationContext>(0);
}


size_t ObjectiveCParser::InstanceMethodDeclarationContext::getRuleIndex() const {
  return ObjectiveCParser::RuleInstanceMethodDeclaration;
}

void ObjectiveCParser::InstanceMethodDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInstanceMethodDeclaration(this);
}

void ObjectiveCParser::InstanceMethodDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInstanceMethodDeclaration(this);
}

ObjectiveCParser::InstanceMethodDeclarationContext* ObjectiveCParser::instanceMethodDeclaration() {
  InstanceMethodDeclarationContext *_localctx = _tracker.createInstance<InstanceMethodDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 44, ObjectiveCParser::RuleInstanceMethodDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(534);
    match(ObjectiveCParser::SUB);
    setState(535);
    methodDeclaration();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MethodDeclarationContext ------------------------------------------------------------------

ObjectiveCParser::MethodDeclarationContext::MethodDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectiveCParser::MethodSelectorContext* ObjectiveCParser::MethodDeclarationContext::methodSelector() {
  return getRuleContext<ObjectiveCParser::MethodSelectorContext>(0);
}

tree::TerminalNode* ObjectiveCParser::MethodDeclarationContext::SEMI() {
  return getToken(ObjectiveCParser::SEMI, 0);
}

ObjectiveCParser::MethodTypeContext* ObjectiveCParser::MethodDeclarationContext::methodType() {
  return getRuleContext<ObjectiveCParser::MethodTypeContext>(0);
}

ObjectiveCParser::MacroContext* ObjectiveCParser::MethodDeclarationContext::macro() {
  return getRuleContext<ObjectiveCParser::MacroContext>(0);
}


size_t ObjectiveCParser::MethodDeclarationContext::getRuleIndex() const {
  return ObjectiveCParser::RuleMethodDeclaration;
}

void ObjectiveCParser::MethodDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethodDeclaration(this);
}

void ObjectiveCParser::MethodDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethodDeclaration(this);
}

ObjectiveCParser::MethodDeclarationContext* ObjectiveCParser::methodDeclaration() {
  MethodDeclarationContext *_localctx = _tracker.createInstance<MethodDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 46, ObjectiveCParser::RuleMethodDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(538);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectiveCParser::LP) {
      setState(537);
      methodType();
    }
    setState(540);
    methodSelector();
    setState(542);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 142143763727253504) != 0) || ((((_la - 81) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 81)) & 17867063762871) != 0)) {
      setState(541);
      macro();
    }
    setState(544);
    match(ObjectiveCParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ImplementationDefinitionListContext ------------------------------------------------------------------

ObjectiveCParser::ImplementationDefinitionListContext::ImplementationDefinitionListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectiveCParser::FunctionDefinitionContext *> ObjectiveCParser::ImplementationDefinitionListContext::functionDefinition() {
  return getRuleContexts<ObjectiveCParser::FunctionDefinitionContext>();
}

ObjectiveCParser::FunctionDefinitionContext* ObjectiveCParser::ImplementationDefinitionListContext::functionDefinition(size_t i) {
  return getRuleContext<ObjectiveCParser::FunctionDefinitionContext>(i);
}

std::vector<ObjectiveCParser::DeclarationContext *> ObjectiveCParser::ImplementationDefinitionListContext::declaration() {
  return getRuleContexts<ObjectiveCParser::DeclarationContext>();
}

ObjectiveCParser::DeclarationContext* ObjectiveCParser::ImplementationDefinitionListContext::declaration(size_t i) {
  return getRuleContext<ObjectiveCParser::DeclarationContext>(i);
}

std::vector<ObjectiveCParser::ClassMethodDefinitionContext *> ObjectiveCParser::ImplementationDefinitionListContext::classMethodDefinition() {
  return getRuleContexts<ObjectiveCParser::ClassMethodDefinitionContext>();
}

ObjectiveCParser::ClassMethodDefinitionContext* ObjectiveCParser::ImplementationDefinitionListContext::classMethodDefinition(size_t i) {
  return getRuleContext<ObjectiveCParser::ClassMethodDefinitionContext>(i);
}

std::vector<ObjectiveCParser::InstanceMethodDefinitionContext *> ObjectiveCParser::ImplementationDefinitionListContext::instanceMethodDefinition() {
  return getRuleContexts<ObjectiveCParser::InstanceMethodDefinitionContext>();
}

ObjectiveCParser::InstanceMethodDefinitionContext* ObjectiveCParser::ImplementationDefinitionListContext::instanceMethodDefinition(size_t i) {
  return getRuleContext<ObjectiveCParser::InstanceMethodDefinitionContext>(i);
}

std::vector<ObjectiveCParser::PropertyImplementationContext *> ObjectiveCParser::ImplementationDefinitionListContext::propertyImplementation() {
  return getRuleContexts<ObjectiveCParser::PropertyImplementationContext>();
}

ObjectiveCParser::PropertyImplementationContext* ObjectiveCParser::ImplementationDefinitionListContext::propertyImplementation(size_t i) {
  return getRuleContext<ObjectiveCParser::PropertyImplementationContext>(i);
}


size_t ObjectiveCParser::ImplementationDefinitionListContext::getRuleIndex() const {
  return ObjectiveCParser::RuleImplementationDefinitionList;
}

void ObjectiveCParser::ImplementationDefinitionListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImplementationDefinitionList(this);
}

void ObjectiveCParser::ImplementationDefinitionListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImplementationDefinitionList(this);
}

ObjectiveCParser::ImplementationDefinitionListContext* ObjectiveCParser::implementationDefinitionList() {
  ImplementationDefinitionListContext *_localctx = _tracker.createInstance<ImplementationDefinitionListContext>(_ctx, getState());
  enterRule(_localctx, 48, ObjectiveCParser::RuleImplementationDefinitionList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(551); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(551);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 38, _ctx)) {
      case 1: {
        setState(546);
        functionDefinition();
        break;
      }

      case 2: {
        setState(547);
        declaration();
        break;
      }

      case 3: {
        setState(548);
        classMethodDefinition();
        break;
      }

      case 4: {
        setState(549);
        instanceMethodDefinition();
        break;
      }

      case 5: {
        setState(550);
        propertyImplementation();
        break;
      }

      default:
        break;
      }
      setState(553); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2447986789814516274) != 0) || ((((_la - 78) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 78)) & 142936511610873) != 0) || _la == ObjectiveCParser::ADD

    || _la == ObjectiveCParser::SUB);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassMethodDefinitionContext ------------------------------------------------------------------

ObjectiveCParser::ClassMethodDefinitionContext::ClassMethodDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::ClassMethodDefinitionContext::ADD() {
  return getToken(ObjectiveCParser::ADD, 0);
}

ObjectiveCParser::MethodDefinitionContext* ObjectiveCParser::ClassMethodDefinitionContext::methodDefinition() {
  return getRuleContext<ObjectiveCParser::MethodDefinitionContext>(0);
}


size_t ObjectiveCParser::ClassMethodDefinitionContext::getRuleIndex() const {
  return ObjectiveCParser::RuleClassMethodDefinition;
}

void ObjectiveCParser::ClassMethodDefinitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassMethodDefinition(this);
}

void ObjectiveCParser::ClassMethodDefinitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassMethodDefinition(this);
}

ObjectiveCParser::ClassMethodDefinitionContext* ObjectiveCParser::classMethodDefinition() {
  ClassMethodDefinitionContext *_localctx = _tracker.createInstance<ClassMethodDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 50, ObjectiveCParser::RuleClassMethodDefinition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(555);
    match(ObjectiveCParser::ADD);
    setState(556);
    methodDefinition();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InstanceMethodDefinitionContext ------------------------------------------------------------------

ObjectiveCParser::InstanceMethodDefinitionContext::InstanceMethodDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::InstanceMethodDefinitionContext::SUB() {
  return getToken(ObjectiveCParser::SUB, 0);
}

ObjectiveCParser::MethodDefinitionContext* ObjectiveCParser::InstanceMethodDefinitionContext::methodDefinition() {
  return getRuleContext<ObjectiveCParser::MethodDefinitionContext>(0);
}


size_t ObjectiveCParser::InstanceMethodDefinitionContext::getRuleIndex() const {
  return ObjectiveCParser::RuleInstanceMethodDefinition;
}

void ObjectiveCParser::InstanceMethodDefinitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInstanceMethodDefinition(this);
}

void ObjectiveCParser::InstanceMethodDefinitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInstanceMethodDefinition(this);
}

ObjectiveCParser::InstanceMethodDefinitionContext* ObjectiveCParser::instanceMethodDefinition() {
  InstanceMethodDefinitionContext *_localctx = _tracker.createInstance<InstanceMethodDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 52, ObjectiveCParser::RuleInstanceMethodDefinition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(558);
    match(ObjectiveCParser::SUB);
    setState(559);
    methodDefinition();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MethodDefinitionContext ------------------------------------------------------------------

ObjectiveCParser::MethodDefinitionContext::MethodDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectiveCParser::MethodSelectorContext* ObjectiveCParser::MethodDefinitionContext::methodSelector() {
  return getRuleContext<ObjectiveCParser::MethodSelectorContext>(0);
}

ObjectiveCParser::CompoundStatementContext* ObjectiveCParser::MethodDefinitionContext::compoundStatement() {
  return getRuleContext<ObjectiveCParser::CompoundStatementContext>(0);
}

ObjectiveCParser::MethodTypeContext* ObjectiveCParser::MethodDefinitionContext::methodType() {
  return getRuleContext<ObjectiveCParser::MethodTypeContext>(0);
}

ObjectiveCParser::InitDeclaratorListContext* ObjectiveCParser::MethodDefinitionContext::initDeclaratorList() {
  return getRuleContext<ObjectiveCParser::InitDeclaratorListContext>(0);
}

tree::TerminalNode* ObjectiveCParser::MethodDefinitionContext::SEMI() {
  return getToken(ObjectiveCParser::SEMI, 0);
}


size_t ObjectiveCParser::MethodDefinitionContext::getRuleIndex() const {
  return ObjectiveCParser::RuleMethodDefinition;
}

void ObjectiveCParser::MethodDefinitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethodDefinition(this);
}

void ObjectiveCParser::MethodDefinitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethodDefinition(this);
}

ObjectiveCParser::MethodDefinitionContext* ObjectiveCParser::methodDefinition() {
  MethodDefinitionContext *_localctx = _tracker.createInstance<MethodDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 54, ObjectiveCParser::RuleMethodDefinition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(562);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectiveCParser::LP) {
      setState(561);
      methodType();
    }
    setState(564);
    methodSelector();
    setState(566);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 40) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 40)) & -414491694415611649) != 0) || ((((_la - 104) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 104)) & 1125899913166847) != 0)) {
      setState(565);
      initDeclaratorList();
    }
    setState(569);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectiveCParser::SEMI) {
      setState(568);
      match(ObjectiveCParser::SEMI);
    }
    setState(571);
    compoundStatement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MethodSelectorContext ------------------------------------------------------------------

ObjectiveCParser::MethodSelectorContext::MethodSelectorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectiveCParser::SelectorContext* ObjectiveCParser::MethodSelectorContext::selector() {
  return getRuleContext<ObjectiveCParser::SelectorContext>(0);
}

std::vector<ObjectiveCParser::KeywordDeclaratorContext *> ObjectiveCParser::MethodSelectorContext::keywordDeclarator() {
  return getRuleContexts<ObjectiveCParser::KeywordDeclaratorContext>();
}

ObjectiveCParser::KeywordDeclaratorContext* ObjectiveCParser::MethodSelectorContext::keywordDeclarator(size_t i) {
  return getRuleContext<ObjectiveCParser::KeywordDeclaratorContext>(i);
}

tree::TerminalNode* ObjectiveCParser::MethodSelectorContext::COMMA() {
  return getToken(ObjectiveCParser::COMMA, 0);
}

tree::TerminalNode* ObjectiveCParser::MethodSelectorContext::ELIPSIS() {
  return getToken(ObjectiveCParser::ELIPSIS, 0);
}


size_t ObjectiveCParser::MethodSelectorContext::getRuleIndex() const {
  return ObjectiveCParser::RuleMethodSelector;
}

void ObjectiveCParser::MethodSelectorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethodSelector(this);
}

void ObjectiveCParser::MethodSelectorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethodSelector(this);
}

ObjectiveCParser::MethodSelectorContext* ObjectiveCParser::methodSelector() {
  MethodSelectorContext *_localctx = _tracker.createInstance<MethodSelectorContext>(_ctx, getState());
  enterRule(_localctx, 56, ObjectiveCParser::RuleMethodSelector);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(583);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 45, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(573);
      selector();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(575); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(574);
                keywordDeclarator();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(577); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 43, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      setState(581);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ObjectiveCParser::COMMA) {
        setState(579);
        match(ObjectiveCParser::COMMA);
        setState(580);
        match(ObjectiveCParser::ELIPSIS);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KeywordDeclaratorContext ------------------------------------------------------------------

ObjectiveCParser::KeywordDeclaratorContext::KeywordDeclaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::KeywordDeclaratorContext::COLON() {
  return getToken(ObjectiveCParser::COLON, 0);
}

ObjectiveCParser::IdentifierContext* ObjectiveCParser::KeywordDeclaratorContext::identifier() {
  return getRuleContext<ObjectiveCParser::IdentifierContext>(0);
}

ObjectiveCParser::SelectorContext* ObjectiveCParser::KeywordDeclaratorContext::selector() {
  return getRuleContext<ObjectiveCParser::SelectorContext>(0);
}

std::vector<ObjectiveCParser::MethodTypeContext *> ObjectiveCParser::KeywordDeclaratorContext::methodType() {
  return getRuleContexts<ObjectiveCParser::MethodTypeContext>();
}

ObjectiveCParser::MethodTypeContext* ObjectiveCParser::KeywordDeclaratorContext::methodType(size_t i) {
  return getRuleContext<ObjectiveCParser::MethodTypeContext>(i);
}

ObjectiveCParser::ArcBehaviourSpecifierContext* ObjectiveCParser::KeywordDeclaratorContext::arcBehaviourSpecifier() {
  return getRuleContext<ObjectiveCParser::ArcBehaviourSpecifierContext>(0);
}


size_t ObjectiveCParser::KeywordDeclaratorContext::getRuleIndex() const {
  return ObjectiveCParser::RuleKeywordDeclarator;
}

void ObjectiveCParser::KeywordDeclaratorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterKeywordDeclarator(this);
}

void ObjectiveCParser::KeywordDeclaratorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitKeywordDeclarator(this);
}

ObjectiveCParser::KeywordDeclaratorContext* ObjectiveCParser::keywordDeclarator() {
  KeywordDeclaratorContext *_localctx = _tracker.createInstance<KeywordDeclaratorContext>(_ctx, getState());
  enterRule(_localctx, 58, ObjectiveCParser::RuleKeywordDeclarator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(586);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 142143763731447808) != 0) || ((((_la - 81) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 81)) & 17867063762871) != 0)) {
      setState(585);
      selector();
    }
    setState(588);
    match(ObjectiveCParser::COLON);
    setState(592);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectiveCParser::LP) {
      setState(589);
      methodType();
      setState(594);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(596);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 48, _ctx)) {
    case 1: {
      setState(595);
      arcBehaviourSpecifier();
      break;
    }

    default:
      break;
    }
    setState(598);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectorContext ------------------------------------------------------------------

ObjectiveCParser::SelectorContext::SelectorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectiveCParser::IdentifierContext* ObjectiveCParser::SelectorContext::identifier() {
  return getRuleContext<ObjectiveCParser::IdentifierContext>(0);
}

tree::TerminalNode* ObjectiveCParser::SelectorContext::RETURN() {
  return getToken(ObjectiveCParser::RETURN, 0);
}


size_t ObjectiveCParser::SelectorContext::getRuleIndex() const {
  return ObjectiveCParser::RuleSelector;
}

void ObjectiveCParser::SelectorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelector(this);
}

void ObjectiveCParser::SelectorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelector(this);
}

ObjectiveCParser::SelectorContext* ObjectiveCParser::selector() {
  SelectorContext *_localctx = _tracker.createInstance<SelectorContext>(_ctx, getState());
  enterRule(_localctx, 60, ObjectiveCParser::RuleSelector);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(602);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectiveCParser::BOOL:
      case ObjectiveCParser::Class:
      case ObjectiveCParser::BYCOPY:
      case ObjectiveCParser::BYREF:
      case ObjectiveCParser::ID:
      case ObjectiveCParser::IMP:
      case ObjectiveCParser::IN:
      case ObjectiveCParser::INOUT:
      case ObjectiveCParser::ONEWAY:
      case ObjectiveCParser::OUT:
      case ObjectiveCParser::PROTOCOL_:
      case ObjectiveCParser::SEL:
      case ObjectiveCParser::SELF:
      case ObjectiveCParser::SUPER:
      case ObjectiveCParser::ATOMIC:
      case ObjectiveCParser::NONATOMIC:
      case ObjectiveCParser::RETAIN:
      case ObjectiveCParser::AUTORELEASING_QUALIFIER:
      case ObjectiveCParser::BLOCK:
      case ObjectiveCParser::BRIDGE_RETAINED:
      case ObjectiveCParser::BRIDGE_TRANSFER:
      case ObjectiveCParser::COVARIANT:
      case ObjectiveCParser::CONTRAVARIANT:
      case ObjectiveCParser::DEPRECATED:
      case ObjectiveCParser::KINDOF:
      case ObjectiveCParser::UNUSED:
      case ObjectiveCParser::NULL_UNSPECIFIED:
      case ObjectiveCParser::NULLABLE:
      case ObjectiveCParser::NONNULL:
      case ObjectiveCParser::NULL_RESETTABLE:
      case ObjectiveCParser::NS_INLINE:
      case ObjectiveCParser::NS_ENUM:
      case ObjectiveCParser::NS_OPTIONS:
      case ObjectiveCParser::ASSIGN:
      case ObjectiveCParser::COPY:
      case ObjectiveCParser::GETTER:
      case ObjectiveCParser::SETTER:
      case ObjectiveCParser::STRONG:
      case ObjectiveCParser::READONLY:
      case ObjectiveCParser::READWRITE:
      case ObjectiveCParser::WEAK:
      case ObjectiveCParser::UNSAFE_UNRETAINED:
      case ObjectiveCParser::IB_OUTLET:
      case ObjectiveCParser::IB_OUTLET_COLLECTION:
      case ObjectiveCParser::IB_INSPECTABLE:
      case ObjectiveCParser::IB_DESIGNABLE:
      case ObjectiveCParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(600);
        identifier();
        break;
      }

      case ObjectiveCParser::RETURN: {
        enterOuterAlt(_localctx, 2);
        setState(601);
        match(ObjectiveCParser::RETURN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MethodTypeContext ------------------------------------------------------------------

ObjectiveCParser::MethodTypeContext::MethodTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::MethodTypeContext::LP() {
  return getToken(ObjectiveCParser::LP, 0);
}

ObjectiveCParser::TypeNameContext* ObjectiveCParser::MethodTypeContext::typeName() {
  return getRuleContext<ObjectiveCParser::TypeNameContext>(0);
}

tree::TerminalNode* ObjectiveCParser::MethodTypeContext::RP() {
  return getToken(ObjectiveCParser::RP, 0);
}


size_t ObjectiveCParser::MethodTypeContext::getRuleIndex() const {
  return ObjectiveCParser::RuleMethodType;
}

void ObjectiveCParser::MethodTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethodType(this);
}

void ObjectiveCParser::MethodTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethodType(this);
}

ObjectiveCParser::MethodTypeContext* ObjectiveCParser::methodType() {
  MethodTypeContext *_localctx = _tracker.createInstance<MethodTypeContext>(_ctx, getState());
  enterRule(_localctx, 62, ObjectiveCParser::RuleMethodType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(604);
    match(ObjectiveCParser::LP);
    setState(605);
    typeName();
    setState(606);
    match(ObjectiveCParser::RP);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PropertyImplementationContext ------------------------------------------------------------------

ObjectiveCParser::PropertyImplementationContext::PropertyImplementationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::PropertyImplementationContext::SYNTHESIZE() {
  return getToken(ObjectiveCParser::SYNTHESIZE, 0);
}

ObjectiveCParser::PropertySynthesizeListContext* ObjectiveCParser::PropertyImplementationContext::propertySynthesizeList() {
  return getRuleContext<ObjectiveCParser::PropertySynthesizeListContext>(0);
}

tree::TerminalNode* ObjectiveCParser::PropertyImplementationContext::SEMI() {
  return getToken(ObjectiveCParser::SEMI, 0);
}

tree::TerminalNode* ObjectiveCParser::PropertyImplementationContext::DYNAMIC() {
  return getToken(ObjectiveCParser::DYNAMIC, 0);
}


size_t ObjectiveCParser::PropertyImplementationContext::getRuleIndex() const {
  return ObjectiveCParser::RulePropertyImplementation;
}

void ObjectiveCParser::PropertyImplementationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPropertyImplementation(this);
}

void ObjectiveCParser::PropertyImplementationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPropertyImplementation(this);
}

ObjectiveCParser::PropertyImplementationContext* ObjectiveCParser::propertyImplementation() {
  PropertyImplementationContext *_localctx = _tracker.createInstance<PropertyImplementationContext>(_ctx, getState());
  enterRule(_localctx, 64, ObjectiveCParser::RulePropertyImplementation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(616);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectiveCParser::SYNTHESIZE: {
        enterOuterAlt(_localctx, 1);
        setState(608);
        match(ObjectiveCParser::SYNTHESIZE);
        setState(609);
        propertySynthesizeList();
        setState(610);
        match(ObjectiveCParser::SEMI);
        break;
      }

      case ObjectiveCParser::DYNAMIC: {
        enterOuterAlt(_localctx, 2);
        setState(612);
        match(ObjectiveCParser::DYNAMIC);
        setState(613);
        propertySynthesizeList();
        setState(614);
        match(ObjectiveCParser::SEMI);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PropertySynthesizeListContext ------------------------------------------------------------------

ObjectiveCParser::PropertySynthesizeListContext::PropertySynthesizeListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectiveCParser::PropertySynthesizeItemContext *> ObjectiveCParser::PropertySynthesizeListContext::propertySynthesizeItem() {
  return getRuleContexts<ObjectiveCParser::PropertySynthesizeItemContext>();
}

ObjectiveCParser::PropertySynthesizeItemContext* ObjectiveCParser::PropertySynthesizeListContext::propertySynthesizeItem(size_t i) {
  return getRuleContext<ObjectiveCParser::PropertySynthesizeItemContext>(i);
}

std::vector<tree::TerminalNode *> ObjectiveCParser::PropertySynthesizeListContext::COMMA() {
  return getTokens(ObjectiveCParser::COMMA);
}

tree::TerminalNode* ObjectiveCParser::PropertySynthesizeListContext::COMMA(size_t i) {
  return getToken(ObjectiveCParser::COMMA, i);
}


size_t ObjectiveCParser::PropertySynthesizeListContext::getRuleIndex() const {
  return ObjectiveCParser::RulePropertySynthesizeList;
}

void ObjectiveCParser::PropertySynthesizeListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPropertySynthesizeList(this);
}

void ObjectiveCParser::PropertySynthesizeListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPropertySynthesizeList(this);
}

ObjectiveCParser::PropertySynthesizeListContext* ObjectiveCParser::propertySynthesizeList() {
  PropertySynthesizeListContext *_localctx = _tracker.createInstance<PropertySynthesizeListContext>(_ctx, getState());
  enterRule(_localctx, 66, ObjectiveCParser::RulePropertySynthesizeList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(618);
    propertySynthesizeItem();
    setState(623);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectiveCParser::COMMA) {
      setState(619);
      match(ObjectiveCParser::COMMA);
      setState(620);
      propertySynthesizeItem();
      setState(625);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PropertySynthesizeItemContext ------------------------------------------------------------------

ObjectiveCParser::PropertySynthesizeItemContext::PropertySynthesizeItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectiveCParser::IdentifierContext *> ObjectiveCParser::PropertySynthesizeItemContext::identifier() {
  return getRuleContexts<ObjectiveCParser::IdentifierContext>();
}

ObjectiveCParser::IdentifierContext* ObjectiveCParser::PropertySynthesizeItemContext::identifier(size_t i) {
  return getRuleContext<ObjectiveCParser::IdentifierContext>(i);
}

tree::TerminalNode* ObjectiveCParser::PropertySynthesizeItemContext::ASSIGNMENT() {
  return getToken(ObjectiveCParser::ASSIGNMENT, 0);
}


size_t ObjectiveCParser::PropertySynthesizeItemContext::getRuleIndex() const {
  return ObjectiveCParser::RulePropertySynthesizeItem;
}

void ObjectiveCParser::PropertySynthesizeItemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPropertySynthesizeItem(this);
}

void ObjectiveCParser::PropertySynthesizeItemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPropertySynthesizeItem(this);
}

ObjectiveCParser::PropertySynthesizeItemContext* ObjectiveCParser::propertySynthesizeItem() {
  PropertySynthesizeItemContext *_localctx = _tracker.createInstance<PropertySynthesizeItemContext>(_ctx, getState());
  enterRule(_localctx, 68, ObjectiveCParser::RulePropertySynthesizeItem);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(626);
    identifier();
    setState(629);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectiveCParser::ASSIGNMENT) {
      setState(627);
      match(ObjectiveCParser::ASSIGNMENT);
      setState(628);
      identifier();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlockTypeContext ------------------------------------------------------------------

ObjectiveCParser::BlockTypeContext::BlockTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectiveCParser::TypeSpecifierContext *> ObjectiveCParser::BlockTypeContext::typeSpecifier() {
  return getRuleContexts<ObjectiveCParser::TypeSpecifierContext>();
}

ObjectiveCParser::TypeSpecifierContext* ObjectiveCParser::BlockTypeContext::typeSpecifier(size_t i) {
  return getRuleContext<ObjectiveCParser::TypeSpecifierContext>(i);
}

tree::TerminalNode* ObjectiveCParser::BlockTypeContext::LP() {
  return getToken(ObjectiveCParser::LP, 0);
}

tree::TerminalNode* ObjectiveCParser::BlockTypeContext::BITXOR() {
  return getToken(ObjectiveCParser::BITXOR, 0);
}

tree::TerminalNode* ObjectiveCParser::BlockTypeContext::RP() {
  return getToken(ObjectiveCParser::RP, 0);
}

std::vector<ObjectiveCParser::NullabilitySpecifierContext *> ObjectiveCParser::BlockTypeContext::nullabilitySpecifier() {
  return getRuleContexts<ObjectiveCParser::NullabilitySpecifierContext>();
}

ObjectiveCParser::NullabilitySpecifierContext* ObjectiveCParser::BlockTypeContext::nullabilitySpecifier(size_t i) {
  return getRuleContext<ObjectiveCParser::NullabilitySpecifierContext>(i);
}

ObjectiveCParser::BlockParametersContext* ObjectiveCParser::BlockTypeContext::blockParameters() {
  return getRuleContext<ObjectiveCParser::BlockParametersContext>(0);
}


size_t ObjectiveCParser::BlockTypeContext::getRuleIndex() const {
  return ObjectiveCParser::RuleBlockType;
}

void ObjectiveCParser::BlockTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBlockType(this);
}

void ObjectiveCParser::BlockTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBlockType(this);
}

ObjectiveCParser::BlockTypeContext* ObjectiveCParser::blockType() {
  BlockTypeContext *_localctx = _tracker.createInstance<BlockTypeContext>(_ctx, getState());
  enterRule(_localctx, 70, ObjectiveCParser::RuleBlockType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(632);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 53, _ctx)) {
    case 1: {
      setState(631);
      nullabilitySpecifier();
      break;
    }

    default:
      break;
    }
    setState(634);
    typeSpecifier();
    setState(636);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 99) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 99)) & 15) != 0)) {
      setState(635);
      nullabilitySpecifier();
    }
    setState(638);
    match(ObjectiveCParser::LP);
    setState(639);
    match(ObjectiveCParser::BITXOR);
    setState(642);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 55, _ctx)) {
    case 1: {
      setState(640);
      nullabilitySpecifier();
      break;
    }

    case 2: {
      setState(641);
      typeSpecifier();
      break;
    }

    default:
      break;
    }
    setState(644);
    match(ObjectiveCParser::RP);
    setState(646);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectiveCParser::LP) {
      setState(645);
      blockParameters();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GenericsSpecifierContext ------------------------------------------------------------------

ObjectiveCParser::GenericsSpecifierContext::GenericsSpecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::GenericsSpecifierContext::LT() {
  return getToken(ObjectiveCParser::LT, 0);
}

tree::TerminalNode* ObjectiveCParser::GenericsSpecifierContext::GT() {
  return getToken(ObjectiveCParser::GT, 0);
}

std::vector<ObjectiveCParser::TypeSpecifierWithPrefixesContext *> ObjectiveCParser::GenericsSpecifierContext::typeSpecifierWithPrefixes() {
  return getRuleContexts<ObjectiveCParser::TypeSpecifierWithPrefixesContext>();
}

ObjectiveCParser::TypeSpecifierWithPrefixesContext* ObjectiveCParser::GenericsSpecifierContext::typeSpecifierWithPrefixes(size_t i) {
  return getRuleContext<ObjectiveCParser::TypeSpecifierWithPrefixesContext>(i);
}

std::vector<tree::TerminalNode *> ObjectiveCParser::GenericsSpecifierContext::COMMA() {
  return getTokens(ObjectiveCParser::COMMA);
}

tree::TerminalNode* ObjectiveCParser::GenericsSpecifierContext::COMMA(size_t i) {
  return getToken(ObjectiveCParser::COMMA, i);
}


size_t ObjectiveCParser::GenericsSpecifierContext::getRuleIndex() const {
  return ObjectiveCParser::RuleGenericsSpecifier;
}

void ObjectiveCParser::GenericsSpecifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGenericsSpecifier(this);
}

void ObjectiveCParser::GenericsSpecifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGenericsSpecifier(this);
}

ObjectiveCParser::GenericsSpecifierContext* ObjectiveCParser::genericsSpecifier() {
  GenericsSpecifierContext *_localctx = _tracker.createInstance<GenericsSpecifierContext>(_ctx, getState());
  enterRule(_localctx, 72, ObjectiveCParser::RuleGenericsSpecifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(648);
    match(ObjectiveCParser::LT);
    setState(657);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 142143779995789872) != 0) || ((((_la - 81) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 81)) & 17867063951351) != 0)) {
      setState(649);
      typeSpecifierWithPrefixes();
      setState(654);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == ObjectiveCParser::COMMA) {
        setState(650);
        match(ObjectiveCParser::COMMA);
        setState(651);
        typeSpecifierWithPrefixes();
        setState(656);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(659);
    match(ObjectiveCParser::GT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeSpecifierWithPrefixesContext ------------------------------------------------------------------

ObjectiveCParser::TypeSpecifierWithPrefixesContext::TypeSpecifierWithPrefixesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectiveCParser::TypeSpecifierContext* ObjectiveCParser::TypeSpecifierWithPrefixesContext::typeSpecifier() {
  return getRuleContext<ObjectiveCParser::TypeSpecifierContext>(0);
}

std::vector<ObjectiveCParser::TypePrefixContext *> ObjectiveCParser::TypeSpecifierWithPrefixesContext::typePrefix() {
  return getRuleContexts<ObjectiveCParser::TypePrefixContext>();
}

ObjectiveCParser::TypePrefixContext* ObjectiveCParser::TypeSpecifierWithPrefixesContext::typePrefix(size_t i) {
  return getRuleContext<ObjectiveCParser::TypePrefixContext>(i);
}

ObjectiveCParser::TypeNameContext* ObjectiveCParser::TypeSpecifierWithPrefixesContext::typeName() {
  return getRuleContext<ObjectiveCParser::TypeNameContext>(0);
}


size_t ObjectiveCParser::TypeSpecifierWithPrefixesContext::getRuleIndex() const {
  return ObjectiveCParser::RuleTypeSpecifierWithPrefixes;
}

void ObjectiveCParser::TypeSpecifierWithPrefixesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeSpecifierWithPrefixes(this);
}

void ObjectiveCParser::TypeSpecifierWithPrefixesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeSpecifierWithPrefixes(this);
}

ObjectiveCParser::TypeSpecifierWithPrefixesContext* ObjectiveCParser::typeSpecifierWithPrefixes() {
  TypeSpecifierWithPrefixesContext *_localctx = _tracker.createInstance<TypeSpecifierWithPrefixesContext>(_ctx, getState());
  enterRule(_localctx, 74, ObjectiveCParser::RuleTypeSpecifierWithPrefixes);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(669);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 60, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(664);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 59, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(661);
          typePrefix(); 
        }
        setState(666);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 59, _ctx);
      }
      setState(667);
      typeSpecifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(668);
      typeName();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DictionaryExpressionContext ------------------------------------------------------------------

ObjectiveCParser::DictionaryExpressionContext::DictionaryExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::DictionaryExpressionContext::AT() {
  return getToken(ObjectiveCParser::AT, 0);
}

tree::TerminalNode* ObjectiveCParser::DictionaryExpressionContext::LBRACE() {
  return getToken(ObjectiveCParser::LBRACE, 0);
}

tree::TerminalNode* ObjectiveCParser::DictionaryExpressionContext::RBRACE() {
  return getToken(ObjectiveCParser::RBRACE, 0);
}

std::vector<ObjectiveCParser::DictionaryPairContext *> ObjectiveCParser::DictionaryExpressionContext::dictionaryPair() {
  return getRuleContexts<ObjectiveCParser::DictionaryPairContext>();
}

ObjectiveCParser::DictionaryPairContext* ObjectiveCParser::DictionaryExpressionContext::dictionaryPair(size_t i) {
  return getRuleContext<ObjectiveCParser::DictionaryPairContext>(i);
}

std::vector<tree::TerminalNode *> ObjectiveCParser::DictionaryExpressionContext::COMMA() {
  return getTokens(ObjectiveCParser::COMMA);
}

tree::TerminalNode* ObjectiveCParser::DictionaryExpressionContext::COMMA(size_t i) {
  return getToken(ObjectiveCParser::COMMA, i);
}


size_t ObjectiveCParser::DictionaryExpressionContext::getRuleIndex() const {
  return ObjectiveCParser::RuleDictionaryExpression;
}

void ObjectiveCParser::DictionaryExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDictionaryExpression(this);
}

void ObjectiveCParser::DictionaryExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDictionaryExpression(this);
}

ObjectiveCParser::DictionaryExpressionContext* ObjectiveCParser::dictionaryExpression() {
  DictionaryExpressionContext *_localctx = _tracker.createInstance<DictionaryExpressionContext>(_ctx, getState());
  enterRule(_localctx, 76, ObjectiveCParser::RuleDictionaryExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(671);
    match(ObjectiveCParser::AT);
    setState(672);
    match(ObjectiveCParser::LBRACE);
    setState(684);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 4899916119734747136) != 0) || ((((_la - 69) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 69)) & 2523141690462269569) != 0) || ((((_la - 136) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 136)) & 4363692523569) != 0)) {
      setState(673);
      dictionaryPair();
      setState(678);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 61, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(674);
          match(ObjectiveCParser::COMMA);
          setState(675);
          dictionaryPair(); 
        }
        setState(680);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 61, _ctx);
      }
      setState(682);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ObjectiveCParser::COMMA) {
        setState(681);
        match(ObjectiveCParser::COMMA);
      }
    }
    setState(686);
    match(ObjectiveCParser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DictionaryPairContext ------------------------------------------------------------------

ObjectiveCParser::DictionaryPairContext::DictionaryPairContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectiveCParser::CastExpressionContext* ObjectiveCParser::DictionaryPairContext::castExpression() {
  return getRuleContext<ObjectiveCParser::CastExpressionContext>(0);
}

tree::TerminalNode* ObjectiveCParser::DictionaryPairContext::COLON() {
  return getToken(ObjectiveCParser::COLON, 0);
}

ObjectiveCParser::ExpressionContext* ObjectiveCParser::DictionaryPairContext::expression() {
  return getRuleContext<ObjectiveCParser::ExpressionContext>(0);
}


size_t ObjectiveCParser::DictionaryPairContext::getRuleIndex() const {
  return ObjectiveCParser::RuleDictionaryPair;
}

void ObjectiveCParser::DictionaryPairContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDictionaryPair(this);
}

void ObjectiveCParser::DictionaryPairContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDictionaryPair(this);
}

ObjectiveCParser::DictionaryPairContext* ObjectiveCParser::dictionaryPair() {
  DictionaryPairContext *_localctx = _tracker.createInstance<DictionaryPairContext>(_ctx, getState());
  enterRule(_localctx, 78, ObjectiveCParser::RuleDictionaryPair);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(688);
    castExpression();
    setState(689);
    match(ObjectiveCParser::COLON);
    setState(690);
    expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayExpressionContext ------------------------------------------------------------------

ObjectiveCParser::ArrayExpressionContext::ArrayExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::ArrayExpressionContext::AT() {
  return getToken(ObjectiveCParser::AT, 0);
}

tree::TerminalNode* ObjectiveCParser::ArrayExpressionContext::LBRACK() {
  return getToken(ObjectiveCParser::LBRACK, 0);
}

tree::TerminalNode* ObjectiveCParser::ArrayExpressionContext::RBRACK() {
  return getToken(ObjectiveCParser::RBRACK, 0);
}

ObjectiveCParser::ExpressionsContext* ObjectiveCParser::ArrayExpressionContext::expressions() {
  return getRuleContext<ObjectiveCParser::ExpressionsContext>(0);
}

tree::TerminalNode* ObjectiveCParser::ArrayExpressionContext::COMMA() {
  return getToken(ObjectiveCParser::COMMA, 0);
}


size_t ObjectiveCParser::ArrayExpressionContext::getRuleIndex() const {
  return ObjectiveCParser::RuleArrayExpression;
}

void ObjectiveCParser::ArrayExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArrayExpression(this);
}

void ObjectiveCParser::ArrayExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArrayExpression(this);
}

ObjectiveCParser::ArrayExpressionContext* ObjectiveCParser::arrayExpression() {
  ArrayExpressionContext *_localctx = _tracker.createInstance<ArrayExpressionContext>(_ctx, getState());
  enterRule(_localctx, 80, ObjectiveCParser::RuleArrayExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(692);
    match(ObjectiveCParser::AT);
    setState(693);
    match(ObjectiveCParser::LBRACK);
    setState(698);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 4899916119734747136) != 0) || ((((_la - 69) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 69)) & 2523141690462269569) != 0) || ((((_la - 136) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 136)) & 4363692523569) != 0)) {
      setState(694);
      expressions();
      setState(696);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ObjectiveCParser::COMMA) {
        setState(695);
        match(ObjectiveCParser::COMMA);
      }
    }
    setState(700);
    match(ObjectiveCParser::RBRACK);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BoxExpressionContext ------------------------------------------------------------------

ObjectiveCParser::BoxExpressionContext::BoxExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::BoxExpressionContext::AT() {
  return getToken(ObjectiveCParser::AT, 0);
}

tree::TerminalNode* ObjectiveCParser::BoxExpressionContext::LP() {
  return getToken(ObjectiveCParser::LP, 0);
}

ObjectiveCParser::ExpressionContext* ObjectiveCParser::BoxExpressionContext::expression() {
  return getRuleContext<ObjectiveCParser::ExpressionContext>(0);
}

tree::TerminalNode* ObjectiveCParser::BoxExpressionContext::RP() {
  return getToken(ObjectiveCParser::RP, 0);
}

ObjectiveCParser::ConstantContext* ObjectiveCParser::BoxExpressionContext::constant() {
  return getRuleContext<ObjectiveCParser::ConstantContext>(0);
}

ObjectiveCParser::IdentifierContext* ObjectiveCParser::BoxExpressionContext::identifier() {
  return getRuleContext<ObjectiveCParser::IdentifierContext>(0);
}


size_t ObjectiveCParser::BoxExpressionContext::getRuleIndex() const {
  return ObjectiveCParser::RuleBoxExpression;
}

void ObjectiveCParser::BoxExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBoxExpression(this);
}

void ObjectiveCParser::BoxExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBoxExpression(this);
}

ObjectiveCParser::BoxExpressionContext* ObjectiveCParser::boxExpression() {
  BoxExpressionContext *_localctx = _tracker.createInstance<BoxExpressionContext>(_ctx, getState());
  enterRule(_localctx, 82, ObjectiveCParser::RuleBoxExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(712);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 67, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(702);
      match(ObjectiveCParser::AT);
      setState(703);
      match(ObjectiveCParser::LP);
      setState(704);
      expression(0);
      setState(705);
      match(ObjectiveCParser::RP);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(707);
      match(ObjectiveCParser::AT);
      setState(710);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case ObjectiveCParser::TRUE:
        case ObjectiveCParser::FALSE:
        case ObjectiveCParser::NIL:
        case ObjectiveCParser::NO:
        case ObjectiveCParser::NULL_:
        case ObjectiveCParser::YES:
        case ObjectiveCParser::ADD:
        case ObjectiveCParser::SUB:
        case ObjectiveCParser::CHARACTER_LITERAL:
        case ObjectiveCParser::HEX_LITERAL:
        case ObjectiveCParser::OCTAL_LITERAL:
        case ObjectiveCParser::BINARY_LITERAL:
        case ObjectiveCParser::DECIMAL_LITERAL:
        case ObjectiveCParser::FLOATING_POINT_LITERAL: {
          setState(708);
          constant();
          break;
        }

        case ObjectiveCParser::BOOL:
        case ObjectiveCParser::Class:
        case ObjectiveCParser::BYCOPY:
        case ObjectiveCParser::BYREF:
        case ObjectiveCParser::ID:
        case ObjectiveCParser::IMP:
        case ObjectiveCParser::IN:
        case ObjectiveCParser::INOUT:
        case ObjectiveCParser::ONEWAY:
        case ObjectiveCParser::OUT:
        case ObjectiveCParser::PROTOCOL_:
        case ObjectiveCParser::SEL:
        case ObjectiveCParser::SELF:
        case ObjectiveCParser::SUPER:
        case ObjectiveCParser::ATOMIC:
        case ObjectiveCParser::NONATOMIC:
        case ObjectiveCParser::RETAIN:
        case ObjectiveCParser::AUTORELEASING_QUALIFIER:
        case ObjectiveCParser::BLOCK:
        case ObjectiveCParser::BRIDGE_RETAINED:
        case ObjectiveCParser::BRIDGE_TRANSFER:
        case ObjectiveCParser::COVARIANT:
        case ObjectiveCParser::CONTRAVARIANT:
        case ObjectiveCParser::DEPRECATED:
        case ObjectiveCParser::KINDOF:
        case ObjectiveCParser::UNUSED:
        case ObjectiveCParser::NULL_UNSPECIFIED:
        case ObjectiveCParser::NULLABLE:
        case ObjectiveCParser::NONNULL:
        case ObjectiveCParser::NULL_RESETTABLE:
        case ObjectiveCParser::NS_INLINE:
        case ObjectiveCParser::NS_ENUM:
        case ObjectiveCParser::NS_OPTIONS:
        case ObjectiveCParser::ASSIGN:
        case ObjectiveCParser::COPY:
        case ObjectiveCParser::GETTER:
        case ObjectiveCParser::SETTER:
        case ObjectiveCParser::STRONG:
        case ObjectiveCParser::READONLY:
        case ObjectiveCParser::READWRITE:
        case ObjectiveCParser::WEAK:
        case ObjectiveCParser::UNSAFE_UNRETAINED:
        case ObjectiveCParser::IB_OUTLET:
        case ObjectiveCParser::IB_OUTLET_COLLECTION:
        case ObjectiveCParser::IB_INSPECTABLE:
        case ObjectiveCParser::IB_DESIGNABLE:
        case ObjectiveCParser::IDENTIFIER: {
          setState(709);
          identifier();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlockParametersContext ------------------------------------------------------------------

ObjectiveCParser::BlockParametersContext::BlockParametersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::BlockParametersContext::LP() {
  return getToken(ObjectiveCParser::LP, 0);
}

tree::TerminalNode* ObjectiveCParser::BlockParametersContext::RP() {
  return getToken(ObjectiveCParser::RP, 0);
}

std::vector<ObjectiveCParser::TypeVariableDeclaratorOrNameContext *> ObjectiveCParser::BlockParametersContext::typeVariableDeclaratorOrName() {
  return getRuleContexts<ObjectiveCParser::TypeVariableDeclaratorOrNameContext>();
}

ObjectiveCParser::TypeVariableDeclaratorOrNameContext* ObjectiveCParser::BlockParametersContext::typeVariableDeclaratorOrName(size_t i) {
  return getRuleContext<ObjectiveCParser::TypeVariableDeclaratorOrNameContext>(i);
}

tree::TerminalNode* ObjectiveCParser::BlockParametersContext::VOID() {
  return getToken(ObjectiveCParser::VOID, 0);
}

std::vector<tree::TerminalNode *> ObjectiveCParser::BlockParametersContext::COMMA() {
  return getTokens(ObjectiveCParser::COMMA);
}

tree::TerminalNode* ObjectiveCParser::BlockParametersContext::COMMA(size_t i) {
  return getToken(ObjectiveCParser::COMMA, i);
}


size_t ObjectiveCParser::BlockParametersContext::getRuleIndex() const {
  return ObjectiveCParser::RuleBlockParameters;
}

void ObjectiveCParser::BlockParametersContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBlockParameters(this);
}

void ObjectiveCParser::BlockParametersContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBlockParameters(this);
}

ObjectiveCParser::BlockParametersContext* ObjectiveCParser::blockParameters() {
  BlockParametersContext *_localctx = _tracker.createInstance<BlockParametersContext>(_ctx, getState());
  enterRule(_localctx, 84, ObjectiveCParser::RuleBlockParameters);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(714);
    match(ObjectiveCParser::LP);
    setState(726);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 142143780063951410) != 0) || ((((_la - 81) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 81)) & 17867063951359) != 0)) {
      setState(717);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 68, _ctx)) {
      case 1: {
        setState(715);
        typeVariableDeclaratorOrName();
        break;
      }

      case 2: {
        setState(716);
        match(ObjectiveCParser::VOID);
        break;
      }

      default:
        break;
      }
      setState(723);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == ObjectiveCParser::COMMA) {
        setState(719);
        match(ObjectiveCParser::COMMA);
        setState(720);
        typeVariableDeclaratorOrName();
        setState(725);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(728);
    match(ObjectiveCParser::RP);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeVariableDeclaratorOrNameContext ------------------------------------------------------------------

ObjectiveCParser::TypeVariableDeclaratorOrNameContext::TypeVariableDeclaratorOrNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectiveCParser::TypeVariableDeclaratorContext* ObjectiveCParser::TypeVariableDeclaratorOrNameContext::typeVariableDeclarator() {
  return getRuleContext<ObjectiveCParser::TypeVariableDeclaratorContext>(0);
}

ObjectiveCParser::TypeNameContext* ObjectiveCParser::TypeVariableDeclaratorOrNameContext::typeName() {
  return getRuleContext<ObjectiveCParser::TypeNameContext>(0);
}


size_t ObjectiveCParser::TypeVariableDeclaratorOrNameContext::getRuleIndex() const {
  return ObjectiveCParser::RuleTypeVariableDeclaratorOrName;
}

void ObjectiveCParser::TypeVariableDeclaratorOrNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeVariableDeclaratorOrName(this);
}

void ObjectiveCParser::TypeVariableDeclaratorOrNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeVariableDeclaratorOrName(this);
}

ObjectiveCParser::TypeVariableDeclaratorOrNameContext* ObjectiveCParser::typeVariableDeclaratorOrName() {
  TypeVariableDeclaratorOrNameContext *_localctx = _tracker.createInstance<TypeVariableDeclaratorOrNameContext>(_ctx, getState());
  enterRule(_localctx, 86, ObjectiveCParser::RuleTypeVariableDeclaratorOrName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(732);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 71, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(730);
      typeVariableDeclarator();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(731);
      typeName();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlockExpressionContext ------------------------------------------------------------------

ObjectiveCParser::BlockExpressionContext::BlockExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::BlockExpressionContext::BITXOR() {
  return getToken(ObjectiveCParser::BITXOR, 0);
}

ObjectiveCParser::CompoundStatementContext* ObjectiveCParser::BlockExpressionContext::compoundStatement() {
  return getRuleContext<ObjectiveCParser::CompoundStatementContext>(0);
}

ObjectiveCParser::TypeSpecifierContext* ObjectiveCParser::BlockExpressionContext::typeSpecifier() {
  return getRuleContext<ObjectiveCParser::TypeSpecifierContext>(0);
}

ObjectiveCParser::NullabilitySpecifierContext* ObjectiveCParser::BlockExpressionContext::nullabilitySpecifier() {
  return getRuleContext<ObjectiveCParser::NullabilitySpecifierContext>(0);
}

ObjectiveCParser::BlockParametersContext* ObjectiveCParser::BlockExpressionContext::blockParameters() {
  return getRuleContext<ObjectiveCParser::BlockParametersContext>(0);
}


size_t ObjectiveCParser::BlockExpressionContext::getRuleIndex() const {
  return ObjectiveCParser::RuleBlockExpression;
}

void ObjectiveCParser::BlockExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBlockExpression(this);
}

void ObjectiveCParser::BlockExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBlockExpression(this);
}

ObjectiveCParser::BlockExpressionContext* ObjectiveCParser::blockExpression() {
  BlockExpressionContext *_localctx = _tracker.createInstance<BlockExpressionContext>(_ctx, getState());
  enterRule(_localctx, 88, ObjectiveCParser::RuleBlockExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(734);
    match(ObjectiveCParser::BITXOR);
    setState(736);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 72, _ctx)) {
    case 1: {
      setState(735);
      typeSpecifier();
      break;
    }

    default:
      break;
    }
    setState(739);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 99) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 99)) & 15) != 0)) {
      setState(738);
      nullabilitySpecifier();
    }
    setState(742);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectiveCParser::LP) {
      setState(741);
      blockParameters();
    }
    setState(744);
    compoundStatement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MessageExpressionContext ------------------------------------------------------------------

ObjectiveCParser::MessageExpressionContext::MessageExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::MessageExpressionContext::LBRACK() {
  return getToken(ObjectiveCParser::LBRACK, 0);
}

ObjectiveCParser::ReceiverContext* ObjectiveCParser::MessageExpressionContext::receiver() {
  return getRuleContext<ObjectiveCParser::ReceiverContext>(0);
}

ObjectiveCParser::MessageSelectorContext* ObjectiveCParser::MessageExpressionContext::messageSelector() {
  return getRuleContext<ObjectiveCParser::MessageSelectorContext>(0);
}

tree::TerminalNode* ObjectiveCParser::MessageExpressionContext::RBRACK() {
  return getToken(ObjectiveCParser::RBRACK, 0);
}


size_t ObjectiveCParser::MessageExpressionContext::getRuleIndex() const {
  return ObjectiveCParser::RuleMessageExpression;
}

void ObjectiveCParser::MessageExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMessageExpression(this);
}

void ObjectiveCParser::MessageExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMessageExpression(this);
}

ObjectiveCParser::MessageExpressionContext* ObjectiveCParser::messageExpression() {
  MessageExpressionContext *_localctx = _tracker.createInstance<MessageExpressionContext>(_ctx, getState());
  enterRule(_localctx, 90, ObjectiveCParser::RuleMessageExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(746);
    match(ObjectiveCParser::LBRACK);
    setState(747);
    receiver();
    setState(748);
    messageSelector();
    setState(749);
    match(ObjectiveCParser::RBRACK);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReceiverContext ------------------------------------------------------------------

ObjectiveCParser::ReceiverContext::ReceiverContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectiveCParser::ExpressionContext* ObjectiveCParser::ReceiverContext::expression() {
  return getRuleContext<ObjectiveCParser::ExpressionContext>(0);
}

ObjectiveCParser::TypeSpecifierContext* ObjectiveCParser::ReceiverContext::typeSpecifier() {
  return getRuleContext<ObjectiveCParser::TypeSpecifierContext>(0);
}


size_t ObjectiveCParser::ReceiverContext::getRuleIndex() const {
  return ObjectiveCParser::RuleReceiver;
}

void ObjectiveCParser::ReceiverContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReceiver(this);
}

void ObjectiveCParser::ReceiverContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReceiver(this);
}

ObjectiveCParser::ReceiverContext* ObjectiveCParser::receiver() {
  ReceiverContext *_localctx = _tracker.createInstance<ReceiverContext>(_ctx, getState());
  enterRule(_localctx, 92, ObjectiveCParser::RuleReceiver);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(753);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 75, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(751);
      expression(0);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(752);
      typeSpecifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MessageSelectorContext ------------------------------------------------------------------

ObjectiveCParser::MessageSelectorContext::MessageSelectorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectiveCParser::SelectorContext* ObjectiveCParser::MessageSelectorContext::selector() {
  return getRuleContext<ObjectiveCParser::SelectorContext>(0);
}

std::vector<ObjectiveCParser::KeywordArgumentContext *> ObjectiveCParser::MessageSelectorContext::keywordArgument() {
  return getRuleContexts<ObjectiveCParser::KeywordArgumentContext>();
}

ObjectiveCParser::KeywordArgumentContext* ObjectiveCParser::MessageSelectorContext::keywordArgument(size_t i) {
  return getRuleContext<ObjectiveCParser::KeywordArgumentContext>(i);
}


size_t ObjectiveCParser::MessageSelectorContext::getRuleIndex() const {
  return ObjectiveCParser::RuleMessageSelector;
}

void ObjectiveCParser::MessageSelectorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMessageSelector(this);
}

void ObjectiveCParser::MessageSelectorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMessageSelector(this);
}

ObjectiveCParser::MessageSelectorContext* ObjectiveCParser::messageSelector() {
  MessageSelectorContext *_localctx = _tracker.createInstance<MessageSelectorContext>(_ctx, getState());
  enterRule(_localctx, 94, ObjectiveCParser::RuleMessageSelector);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(761);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 77, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(755);
      selector();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(757); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(756);
        keywordArgument();
        setState(759); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 142143763731447808) != 0) || ((((_la - 81) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 81)) & 4611703885491150775) != 0));
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KeywordArgumentContext ------------------------------------------------------------------

ObjectiveCParser::KeywordArgumentContext::KeywordArgumentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::KeywordArgumentContext::COLON() {
  return getToken(ObjectiveCParser::COLON, 0);
}

std::vector<ObjectiveCParser::KeywordArgumentTypeContext *> ObjectiveCParser::KeywordArgumentContext::keywordArgumentType() {
  return getRuleContexts<ObjectiveCParser::KeywordArgumentTypeContext>();
}

ObjectiveCParser::KeywordArgumentTypeContext* ObjectiveCParser::KeywordArgumentContext::keywordArgumentType(size_t i) {
  return getRuleContext<ObjectiveCParser::KeywordArgumentTypeContext>(i);
}

ObjectiveCParser::SelectorContext* ObjectiveCParser::KeywordArgumentContext::selector() {
  return getRuleContext<ObjectiveCParser::SelectorContext>(0);
}

std::vector<tree::TerminalNode *> ObjectiveCParser::KeywordArgumentContext::COMMA() {
  return getTokens(ObjectiveCParser::COMMA);
}

tree::TerminalNode* ObjectiveCParser::KeywordArgumentContext::COMMA(size_t i) {
  return getToken(ObjectiveCParser::COMMA, i);
}


size_t ObjectiveCParser::KeywordArgumentContext::getRuleIndex() const {
  return ObjectiveCParser::RuleKeywordArgument;
}

void ObjectiveCParser::KeywordArgumentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterKeywordArgument(this);
}

void ObjectiveCParser::KeywordArgumentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitKeywordArgument(this);
}

ObjectiveCParser::KeywordArgumentContext* ObjectiveCParser::keywordArgument() {
  KeywordArgumentContext *_localctx = _tracker.createInstance<KeywordArgumentContext>(_ctx, getState());
  enterRule(_localctx, 96, ObjectiveCParser::RuleKeywordArgument);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(764);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 142143763731447808) != 0) || ((((_la - 81) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 81)) & 17867063762871) != 0)) {
      setState(763);
      selector();
    }
    setState(766);
    match(ObjectiveCParser::COLON);
    setState(767);
    keywordArgumentType();
    setState(772);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectiveCParser::COMMA) {
      setState(768);
      match(ObjectiveCParser::COMMA);
      setState(769);
      keywordArgumentType();
      setState(774);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KeywordArgumentTypeContext ------------------------------------------------------------------

ObjectiveCParser::KeywordArgumentTypeContext::KeywordArgumentTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectiveCParser::ExpressionsContext* ObjectiveCParser::KeywordArgumentTypeContext::expressions() {
  return getRuleContext<ObjectiveCParser::ExpressionsContext>(0);
}

ObjectiveCParser::NullabilitySpecifierContext* ObjectiveCParser::KeywordArgumentTypeContext::nullabilitySpecifier() {
  return getRuleContext<ObjectiveCParser::NullabilitySpecifierContext>(0);
}

tree::TerminalNode* ObjectiveCParser::KeywordArgumentTypeContext::LBRACE() {
  return getToken(ObjectiveCParser::LBRACE, 0);
}

ObjectiveCParser::InitializerListContext* ObjectiveCParser::KeywordArgumentTypeContext::initializerList() {
  return getRuleContext<ObjectiveCParser::InitializerListContext>(0);
}

tree::TerminalNode* ObjectiveCParser::KeywordArgumentTypeContext::RBRACE() {
  return getToken(ObjectiveCParser::RBRACE, 0);
}


size_t ObjectiveCParser::KeywordArgumentTypeContext::getRuleIndex() const {
  return ObjectiveCParser::RuleKeywordArgumentType;
}

void ObjectiveCParser::KeywordArgumentTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterKeywordArgumentType(this);
}

void ObjectiveCParser::KeywordArgumentTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitKeywordArgumentType(this);
}

ObjectiveCParser::KeywordArgumentTypeContext* ObjectiveCParser::keywordArgumentType() {
  KeywordArgumentTypeContext *_localctx = _tracker.createInstance<KeywordArgumentTypeContext>(_ctx, getState());
  enterRule(_localctx, 98, ObjectiveCParser::RuleKeywordArgumentType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(775);
    expressions();
    setState(777);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 80, _ctx)) {
    case 1: {
      setState(776);
      nullabilitySpecifier();
      break;
    }

    default:
      break;
    }
    setState(783);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectiveCParser::LBRACE) {
      setState(779);
      match(ObjectiveCParser::LBRACE);
      setState(780);
      initializerList();
      setState(781);
      match(ObjectiveCParser::RBRACE);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectorExpressionContext ------------------------------------------------------------------

ObjectiveCParser::SelectorExpressionContext::SelectorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::SelectorExpressionContext::SELECTOR() {
  return getToken(ObjectiveCParser::SELECTOR, 0);
}

tree::TerminalNode* ObjectiveCParser::SelectorExpressionContext::LP() {
  return getToken(ObjectiveCParser::LP, 0);
}

ObjectiveCParser::SelectorNameContext* ObjectiveCParser::SelectorExpressionContext::selectorName() {
  return getRuleContext<ObjectiveCParser::SelectorNameContext>(0);
}

tree::TerminalNode* ObjectiveCParser::SelectorExpressionContext::RP() {
  return getToken(ObjectiveCParser::RP, 0);
}


size_t ObjectiveCParser::SelectorExpressionContext::getRuleIndex() const {
  return ObjectiveCParser::RuleSelectorExpression;
}

void ObjectiveCParser::SelectorExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelectorExpression(this);
}

void ObjectiveCParser::SelectorExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelectorExpression(this);
}

ObjectiveCParser::SelectorExpressionContext* ObjectiveCParser::selectorExpression() {
  SelectorExpressionContext *_localctx = _tracker.createInstance<SelectorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 100, ObjectiveCParser::RuleSelectorExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(785);
    match(ObjectiveCParser::SELECTOR);
    setState(786);
    match(ObjectiveCParser::LP);
    setState(787);
    selectorName();
    setState(788);
    match(ObjectiveCParser::RP);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectorNameContext ------------------------------------------------------------------

ObjectiveCParser::SelectorNameContext::SelectorNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectiveCParser::SelectorContext *> ObjectiveCParser::SelectorNameContext::selector() {
  return getRuleContexts<ObjectiveCParser::SelectorContext>();
}

ObjectiveCParser::SelectorContext* ObjectiveCParser::SelectorNameContext::selector(size_t i) {
  return getRuleContext<ObjectiveCParser::SelectorContext>(i);
}

std::vector<tree::TerminalNode *> ObjectiveCParser::SelectorNameContext::COLON() {
  return getTokens(ObjectiveCParser::COLON);
}

tree::TerminalNode* ObjectiveCParser::SelectorNameContext::COLON(size_t i) {
  return getToken(ObjectiveCParser::COLON, i);
}


size_t ObjectiveCParser::SelectorNameContext::getRuleIndex() const {
  return ObjectiveCParser::RuleSelectorName;
}

void ObjectiveCParser::SelectorNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelectorName(this);
}

void ObjectiveCParser::SelectorNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelectorName(this);
}

ObjectiveCParser::SelectorNameContext* ObjectiveCParser::selectorName() {
  SelectorNameContext *_localctx = _tracker.createInstance<SelectorNameContext>(_ctx, getState());
  enterRule(_localctx, 102, ObjectiveCParser::RuleSelectorName);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(799);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 84, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(790);
      selector();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(795); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(792);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 142143763731447808) != 0) || ((((_la - 81) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 81)) & 17867063762871) != 0)) {
          setState(791);
          selector();
        }
        setState(794);
        match(ObjectiveCParser::COLON);
        setState(797); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 142143763731447808) != 0) || ((((_la - 81) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 81)) & 4611703885491150775) != 0));
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProtocolExpressionContext ------------------------------------------------------------------

ObjectiveCParser::ProtocolExpressionContext::ProtocolExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::ProtocolExpressionContext::PROTOCOL() {
  return getToken(ObjectiveCParser::PROTOCOL, 0);
}

tree::TerminalNode* ObjectiveCParser::ProtocolExpressionContext::LP() {
  return getToken(ObjectiveCParser::LP, 0);
}

ObjectiveCParser::ProtocolNameContext* ObjectiveCParser::ProtocolExpressionContext::protocolName() {
  return getRuleContext<ObjectiveCParser::ProtocolNameContext>(0);
}

tree::TerminalNode* ObjectiveCParser::ProtocolExpressionContext::RP() {
  return getToken(ObjectiveCParser::RP, 0);
}


size_t ObjectiveCParser::ProtocolExpressionContext::getRuleIndex() const {
  return ObjectiveCParser::RuleProtocolExpression;
}

void ObjectiveCParser::ProtocolExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProtocolExpression(this);
}

void ObjectiveCParser::ProtocolExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProtocolExpression(this);
}

ObjectiveCParser::ProtocolExpressionContext* ObjectiveCParser::protocolExpression() {
  ProtocolExpressionContext *_localctx = _tracker.createInstance<ProtocolExpressionContext>(_ctx, getState());
  enterRule(_localctx, 104, ObjectiveCParser::RuleProtocolExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(801);
    match(ObjectiveCParser::PROTOCOL);
    setState(802);
    match(ObjectiveCParser::LP);
    setState(803);
    protocolName();
    setState(804);
    match(ObjectiveCParser::RP);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EncodeExpressionContext ------------------------------------------------------------------

ObjectiveCParser::EncodeExpressionContext::EncodeExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::EncodeExpressionContext::ENCODE() {
  return getToken(ObjectiveCParser::ENCODE, 0);
}

tree::TerminalNode* ObjectiveCParser::EncodeExpressionContext::LP() {
  return getToken(ObjectiveCParser::LP, 0);
}

ObjectiveCParser::TypeNameContext* ObjectiveCParser::EncodeExpressionContext::typeName() {
  return getRuleContext<ObjectiveCParser::TypeNameContext>(0);
}

tree::TerminalNode* ObjectiveCParser::EncodeExpressionContext::RP() {
  return getToken(ObjectiveCParser::RP, 0);
}


size_t ObjectiveCParser::EncodeExpressionContext::getRuleIndex() const {
  return ObjectiveCParser::RuleEncodeExpression;
}

void ObjectiveCParser::EncodeExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEncodeExpression(this);
}

void ObjectiveCParser::EncodeExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEncodeExpression(this);
}

ObjectiveCParser::EncodeExpressionContext* ObjectiveCParser::encodeExpression() {
  EncodeExpressionContext *_localctx = _tracker.createInstance<EncodeExpressionContext>(_ctx, getState());
  enterRule(_localctx, 106, ObjectiveCParser::RuleEncodeExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(806);
    match(ObjectiveCParser::ENCODE);
    setState(807);
    match(ObjectiveCParser::LP);
    setState(808);
    typeName();
    setState(809);
    match(ObjectiveCParser::RP);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeVariableDeclaratorContext ------------------------------------------------------------------

ObjectiveCParser::TypeVariableDeclaratorContext::TypeVariableDeclaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectiveCParser::DeclarationSpecifiersContext* ObjectiveCParser::TypeVariableDeclaratorContext::declarationSpecifiers() {
  return getRuleContext<ObjectiveCParser::DeclarationSpecifiersContext>(0);
}

ObjectiveCParser::DeclaratorContext* ObjectiveCParser::TypeVariableDeclaratorContext::declarator() {
  return getRuleContext<ObjectiveCParser::DeclaratorContext>(0);
}


size_t ObjectiveCParser::TypeVariableDeclaratorContext::getRuleIndex() const {
  return ObjectiveCParser::RuleTypeVariableDeclarator;
}

void ObjectiveCParser::TypeVariableDeclaratorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeVariableDeclarator(this);
}

void ObjectiveCParser::TypeVariableDeclaratorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeVariableDeclarator(this);
}

ObjectiveCParser::TypeVariableDeclaratorContext* ObjectiveCParser::typeVariableDeclarator() {
  TypeVariableDeclaratorContext *_localctx = _tracker.createInstance<TypeVariableDeclaratorContext>(_ctx, getState());
  enterRule(_localctx, 108, ObjectiveCParser::RuleTypeVariableDeclarator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(811);
    declarationSpecifiers();
    setState(812);
    declarator();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ThrowStatementContext ------------------------------------------------------------------

ObjectiveCParser::ThrowStatementContext::ThrowStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::ThrowStatementContext::THROW() {
  return getToken(ObjectiveCParser::THROW, 0);
}

tree::TerminalNode* ObjectiveCParser::ThrowStatementContext::LP() {
  return getToken(ObjectiveCParser::LP, 0);
}

ObjectiveCParser::IdentifierContext* ObjectiveCParser::ThrowStatementContext::identifier() {
  return getRuleContext<ObjectiveCParser::IdentifierContext>(0);
}

tree::TerminalNode* ObjectiveCParser::ThrowStatementContext::RP() {
  return getToken(ObjectiveCParser::RP, 0);
}

ObjectiveCParser::ExpressionContext* ObjectiveCParser::ThrowStatementContext::expression() {
  return getRuleContext<ObjectiveCParser::ExpressionContext>(0);
}


size_t ObjectiveCParser::ThrowStatementContext::getRuleIndex() const {
  return ObjectiveCParser::RuleThrowStatement;
}

void ObjectiveCParser::ThrowStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterThrowStatement(this);
}

void ObjectiveCParser::ThrowStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitThrowStatement(this);
}

ObjectiveCParser::ThrowStatementContext* ObjectiveCParser::throwStatement() {
  ThrowStatementContext *_localctx = _tracker.createInstance<ThrowStatementContext>(_ctx, getState());
  enterRule(_localctx, 110, ObjectiveCParser::RuleThrowStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(821);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 85, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(814);
      match(ObjectiveCParser::THROW);
      setState(815);
      match(ObjectiveCParser::LP);
      setState(816);
      identifier();
      setState(817);
      match(ObjectiveCParser::RP);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(819);
      match(ObjectiveCParser::THROW);
      setState(820);
      expression(0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TryBlockContext ------------------------------------------------------------------

ObjectiveCParser::TryBlockContext::TryBlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::TryBlockContext::TRY() {
  return getToken(ObjectiveCParser::TRY, 0);
}

std::vector<ObjectiveCParser::CompoundStatementContext *> ObjectiveCParser::TryBlockContext::compoundStatement() {
  return getRuleContexts<ObjectiveCParser::CompoundStatementContext>();
}

ObjectiveCParser::CompoundStatementContext* ObjectiveCParser::TryBlockContext::compoundStatement(size_t i) {
  return getRuleContext<ObjectiveCParser::CompoundStatementContext>(i);
}

std::vector<ObjectiveCParser::CatchStatementContext *> ObjectiveCParser::TryBlockContext::catchStatement() {
  return getRuleContexts<ObjectiveCParser::CatchStatementContext>();
}

ObjectiveCParser::CatchStatementContext* ObjectiveCParser::TryBlockContext::catchStatement(size_t i) {
  return getRuleContext<ObjectiveCParser::CatchStatementContext>(i);
}

tree::TerminalNode* ObjectiveCParser::TryBlockContext::FINALLY() {
  return getToken(ObjectiveCParser::FINALLY, 0);
}


size_t ObjectiveCParser::TryBlockContext::getRuleIndex() const {
  return ObjectiveCParser::RuleTryBlock;
}

void ObjectiveCParser::TryBlockContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTryBlock(this);
}

void ObjectiveCParser::TryBlockContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTryBlock(this);
}

ObjectiveCParser::TryBlockContext* ObjectiveCParser::tryBlock() {
  TryBlockContext *_localctx = _tracker.createInstance<TryBlockContext>(_ctx, getState());
  enterRule(_localctx, 112, ObjectiveCParser::RuleTryBlock);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(823);
    match(ObjectiveCParser::TRY);
    setState(824);
    antlrcpp::downCast<TryBlockContext *>(_localctx)->tryStatement = compoundStatement();
    setState(828);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectiveCParser::CATCH) {
      setState(825);
      catchStatement();
      setState(830);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(833);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectiveCParser::FINALLY) {
      setState(831);
      match(ObjectiveCParser::FINALLY);
      setState(832);
      antlrcpp::downCast<TryBlockContext *>(_localctx)->finallyStatement = compoundStatement();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CatchStatementContext ------------------------------------------------------------------

ObjectiveCParser::CatchStatementContext::CatchStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::CatchStatementContext::CATCH() {
  return getToken(ObjectiveCParser::CATCH, 0);
}

tree::TerminalNode* ObjectiveCParser::CatchStatementContext::LP() {
  return getToken(ObjectiveCParser::LP, 0);
}

ObjectiveCParser::TypeVariableDeclaratorContext* ObjectiveCParser::CatchStatementContext::typeVariableDeclarator() {
  return getRuleContext<ObjectiveCParser::TypeVariableDeclaratorContext>(0);
}

tree::TerminalNode* ObjectiveCParser::CatchStatementContext::RP() {
  return getToken(ObjectiveCParser::RP, 0);
}

ObjectiveCParser::CompoundStatementContext* ObjectiveCParser::CatchStatementContext::compoundStatement() {
  return getRuleContext<ObjectiveCParser::CompoundStatementContext>(0);
}


size_t ObjectiveCParser::CatchStatementContext::getRuleIndex() const {
  return ObjectiveCParser::RuleCatchStatement;
}

void ObjectiveCParser::CatchStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCatchStatement(this);
}

void ObjectiveCParser::CatchStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCatchStatement(this);
}

ObjectiveCParser::CatchStatementContext* ObjectiveCParser::catchStatement() {
  CatchStatementContext *_localctx = _tracker.createInstance<CatchStatementContext>(_ctx, getState());
  enterRule(_localctx, 114, ObjectiveCParser::RuleCatchStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(835);
    match(ObjectiveCParser::CATCH);
    setState(836);
    match(ObjectiveCParser::LP);
    setState(837);
    typeVariableDeclarator();
    setState(838);
    match(ObjectiveCParser::RP);
    setState(839);
    compoundStatement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SynchronizedStatementContext ------------------------------------------------------------------

ObjectiveCParser::SynchronizedStatementContext::SynchronizedStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::SynchronizedStatementContext::SYNCHRONIZED() {
  return getToken(ObjectiveCParser::SYNCHRONIZED, 0);
}

tree::TerminalNode* ObjectiveCParser::SynchronizedStatementContext::LP() {
  return getToken(ObjectiveCParser::LP, 0);
}

ObjectiveCParser::ExpressionContext* ObjectiveCParser::SynchronizedStatementContext::expression() {
  return getRuleContext<ObjectiveCParser::ExpressionContext>(0);
}

tree::TerminalNode* ObjectiveCParser::SynchronizedStatementContext::RP() {
  return getToken(ObjectiveCParser::RP, 0);
}

ObjectiveCParser::CompoundStatementContext* ObjectiveCParser::SynchronizedStatementContext::compoundStatement() {
  return getRuleContext<ObjectiveCParser::CompoundStatementContext>(0);
}


size_t ObjectiveCParser::SynchronizedStatementContext::getRuleIndex() const {
  return ObjectiveCParser::RuleSynchronizedStatement;
}

void ObjectiveCParser::SynchronizedStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSynchronizedStatement(this);
}

void ObjectiveCParser::SynchronizedStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSynchronizedStatement(this);
}

ObjectiveCParser::SynchronizedStatementContext* ObjectiveCParser::synchronizedStatement() {
  SynchronizedStatementContext *_localctx = _tracker.createInstance<SynchronizedStatementContext>(_ctx, getState());
  enterRule(_localctx, 116, ObjectiveCParser::RuleSynchronizedStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(841);
    match(ObjectiveCParser::SYNCHRONIZED);
    setState(842);
    match(ObjectiveCParser::LP);
    setState(843);
    expression(0);
    setState(844);
    match(ObjectiveCParser::RP);
    setState(845);
    compoundStatement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AutoreleaseStatementContext ------------------------------------------------------------------

ObjectiveCParser::AutoreleaseStatementContext::AutoreleaseStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::AutoreleaseStatementContext::AUTORELEASEPOOL() {
  return getToken(ObjectiveCParser::AUTORELEASEPOOL, 0);
}

ObjectiveCParser::CompoundStatementContext* ObjectiveCParser::AutoreleaseStatementContext::compoundStatement() {
  return getRuleContext<ObjectiveCParser::CompoundStatementContext>(0);
}


size_t ObjectiveCParser::AutoreleaseStatementContext::getRuleIndex() const {
  return ObjectiveCParser::RuleAutoreleaseStatement;
}

void ObjectiveCParser::AutoreleaseStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAutoreleaseStatement(this);
}

void ObjectiveCParser::AutoreleaseStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAutoreleaseStatement(this);
}

ObjectiveCParser::AutoreleaseStatementContext* ObjectiveCParser::autoreleaseStatement() {
  AutoreleaseStatementContext *_localctx = _tracker.createInstance<AutoreleaseStatementContext>(_ctx, getState());
  enterRule(_localctx, 118, ObjectiveCParser::RuleAutoreleaseStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(847);
    match(ObjectiveCParser::AUTORELEASEPOOL);
    setState(848);
    compoundStatement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionDeclarationContext ------------------------------------------------------------------

ObjectiveCParser::FunctionDeclarationContext::FunctionDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectiveCParser::FunctionSignatureContext* ObjectiveCParser::FunctionDeclarationContext::functionSignature() {
  return getRuleContext<ObjectiveCParser::FunctionSignatureContext>(0);
}

tree::TerminalNode* ObjectiveCParser::FunctionDeclarationContext::SEMI() {
  return getToken(ObjectiveCParser::SEMI, 0);
}


size_t ObjectiveCParser::FunctionDeclarationContext::getRuleIndex() const {
  return ObjectiveCParser::RuleFunctionDeclaration;
}

void ObjectiveCParser::FunctionDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunctionDeclaration(this);
}

void ObjectiveCParser::FunctionDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunctionDeclaration(this);
}

ObjectiveCParser::FunctionDeclarationContext* ObjectiveCParser::functionDeclaration() {
  FunctionDeclarationContext *_localctx = _tracker.createInstance<FunctionDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 120, ObjectiveCParser::RuleFunctionDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(850);
    functionSignature();
    setState(851);
    match(ObjectiveCParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionDefinitionContext ------------------------------------------------------------------

ObjectiveCParser::FunctionDefinitionContext::FunctionDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectiveCParser::FunctionSignatureContext* ObjectiveCParser::FunctionDefinitionContext::functionSignature() {
  return getRuleContext<ObjectiveCParser::FunctionSignatureContext>(0);
}

ObjectiveCParser::CompoundStatementContext* ObjectiveCParser::FunctionDefinitionContext::compoundStatement() {
  return getRuleContext<ObjectiveCParser::CompoundStatementContext>(0);
}


size_t ObjectiveCParser::FunctionDefinitionContext::getRuleIndex() const {
  return ObjectiveCParser::RuleFunctionDefinition;
}

void ObjectiveCParser::FunctionDefinitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunctionDefinition(this);
}

void ObjectiveCParser::FunctionDefinitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunctionDefinition(this);
}

ObjectiveCParser::FunctionDefinitionContext* ObjectiveCParser::functionDefinition() {
  FunctionDefinitionContext *_localctx = _tracker.createInstance<FunctionDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 122, ObjectiveCParser::RuleFunctionDefinition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(853);
    functionSignature();
    setState(854);
    compoundStatement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionSignatureContext ------------------------------------------------------------------

ObjectiveCParser::FunctionSignatureContext::FunctionSignatureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectiveCParser::IdentifierContext* ObjectiveCParser::FunctionSignatureContext::identifier() {
  return getRuleContext<ObjectiveCParser::IdentifierContext>(0);
}

tree::TerminalNode* ObjectiveCParser::FunctionSignatureContext::LP() {
  return getToken(ObjectiveCParser::LP, 0);
}

tree::TerminalNode* ObjectiveCParser::FunctionSignatureContext::RP() {
  return getToken(ObjectiveCParser::RP, 0);
}

ObjectiveCParser::DeclarationSpecifiersContext* ObjectiveCParser::FunctionSignatureContext::declarationSpecifiers() {
  return getRuleContext<ObjectiveCParser::DeclarationSpecifiersContext>(0);
}

ObjectiveCParser::AttributeSpecifierContext* ObjectiveCParser::FunctionSignatureContext::attributeSpecifier() {
  return getRuleContext<ObjectiveCParser::AttributeSpecifierContext>(0);
}

ObjectiveCParser::ParameterListContext* ObjectiveCParser::FunctionSignatureContext::parameterList() {
  return getRuleContext<ObjectiveCParser::ParameterListContext>(0);
}


size_t ObjectiveCParser::FunctionSignatureContext::getRuleIndex() const {
  return ObjectiveCParser::RuleFunctionSignature;
}

void ObjectiveCParser::FunctionSignatureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunctionSignature(this);
}

void ObjectiveCParser::FunctionSignatureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunctionSignature(this);
}

ObjectiveCParser::FunctionSignatureContext* ObjectiveCParser::functionSignature() {
  FunctionSignatureContext *_localctx = _tracker.createInstance<FunctionSignatureContext>(_ctx, getState());
  enterRule(_localctx, 124, ObjectiveCParser::RuleFunctionSignature);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(857);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 88, _ctx)) {
    case 1: {
      setState(856);
      declarationSpecifiers();
      break;
    }

    default:
      break;
    }
    setState(859);
    identifier();

    setState(860);
    match(ObjectiveCParser::LP);
    setState(862);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 142143780063951410) != 0) || ((((_la - 81) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 81)) & 17867063951359) != 0)) {
      setState(861);
      parameterList();
    }
    setState(864);
    match(ObjectiveCParser::RP);
    setState(867);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectiveCParser::ATTRIBUTE) {
      setState(866);
      attributeSpecifier();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AttributeContext ------------------------------------------------------------------

ObjectiveCParser::AttributeContext::AttributeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectiveCParser::AttributeNameContext* ObjectiveCParser::AttributeContext::attributeName() {
  return getRuleContext<ObjectiveCParser::AttributeNameContext>(0);
}

ObjectiveCParser::AttributeParametersContext* ObjectiveCParser::AttributeContext::attributeParameters() {
  return getRuleContext<ObjectiveCParser::AttributeParametersContext>(0);
}


size_t ObjectiveCParser::AttributeContext::getRuleIndex() const {
  return ObjectiveCParser::RuleAttribute;
}

void ObjectiveCParser::AttributeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAttribute(this);
}

void ObjectiveCParser::AttributeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAttribute(this);
}

ObjectiveCParser::AttributeContext* ObjectiveCParser::attribute() {
  AttributeContext *_localctx = _tracker.createInstance<AttributeContext>(_ctx, getState());
  enterRule(_localctx, 126, ObjectiveCParser::RuleAttribute);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(869);
    attributeName();
    setState(871);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectiveCParser::LP) {
      setState(870);
      attributeParameters();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AttributeNameContext ------------------------------------------------------------------

ObjectiveCParser::AttributeNameContext::AttributeNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::AttributeNameContext::CONST() {
  return getToken(ObjectiveCParser::CONST, 0);
}

ObjectiveCParser::IdentifierContext* ObjectiveCParser::AttributeNameContext::identifier() {
  return getRuleContext<ObjectiveCParser::IdentifierContext>(0);
}


size_t ObjectiveCParser::AttributeNameContext::getRuleIndex() const {
  return ObjectiveCParser::RuleAttributeName;
}

void ObjectiveCParser::AttributeNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAttributeName(this);
}

void ObjectiveCParser::AttributeNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAttributeName(this);
}

ObjectiveCParser::AttributeNameContext* ObjectiveCParser::attributeName() {
  AttributeNameContext *_localctx = _tracker.createInstance<AttributeNameContext>(_ctx, getState());
  enterRule(_localctx, 128, ObjectiveCParser::RuleAttributeName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(875);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectiveCParser::CONST: {
        enterOuterAlt(_localctx, 1);
        setState(873);
        match(ObjectiveCParser::CONST);
        break;
      }

      case ObjectiveCParser::BOOL:
      case ObjectiveCParser::Class:
      case ObjectiveCParser::BYCOPY:
      case ObjectiveCParser::BYREF:
      case ObjectiveCParser::ID:
      case ObjectiveCParser::IMP:
      case ObjectiveCParser::IN:
      case ObjectiveCParser::INOUT:
      case ObjectiveCParser::ONEWAY:
      case ObjectiveCParser::OUT:
      case ObjectiveCParser::PROTOCOL_:
      case ObjectiveCParser::SEL:
      case ObjectiveCParser::SELF:
      case ObjectiveCParser::SUPER:
      case ObjectiveCParser::ATOMIC:
      case ObjectiveCParser::NONATOMIC:
      case ObjectiveCParser::RETAIN:
      case ObjectiveCParser::AUTORELEASING_QUALIFIER:
      case ObjectiveCParser::BLOCK:
      case ObjectiveCParser::BRIDGE_RETAINED:
      case ObjectiveCParser::BRIDGE_TRANSFER:
      case ObjectiveCParser::COVARIANT:
      case ObjectiveCParser::CONTRAVARIANT:
      case ObjectiveCParser::DEPRECATED:
      case ObjectiveCParser::KINDOF:
      case ObjectiveCParser::UNUSED:
      case ObjectiveCParser::NULL_UNSPECIFIED:
      case ObjectiveCParser::NULLABLE:
      case ObjectiveCParser::NONNULL:
      case ObjectiveCParser::NULL_RESETTABLE:
      case ObjectiveCParser::NS_INLINE:
      case ObjectiveCParser::NS_ENUM:
      case ObjectiveCParser::NS_OPTIONS:
      case ObjectiveCParser::ASSIGN:
      case ObjectiveCParser::COPY:
      case ObjectiveCParser::GETTER:
      case ObjectiveCParser::SETTER:
      case ObjectiveCParser::STRONG:
      case ObjectiveCParser::READONLY:
      case ObjectiveCParser::READWRITE:
      case ObjectiveCParser::WEAK:
      case ObjectiveCParser::UNSAFE_UNRETAINED:
      case ObjectiveCParser::IB_OUTLET:
      case ObjectiveCParser::IB_OUTLET_COLLECTION:
      case ObjectiveCParser::IB_INSPECTABLE:
      case ObjectiveCParser::IB_DESIGNABLE:
      case ObjectiveCParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 2);
        setState(874);
        identifier();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AttributeParametersContext ------------------------------------------------------------------

ObjectiveCParser::AttributeParametersContext::AttributeParametersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::AttributeParametersContext::LP() {
  return getToken(ObjectiveCParser::LP, 0);
}

tree::TerminalNode* ObjectiveCParser::AttributeParametersContext::RP() {
  return getToken(ObjectiveCParser::RP, 0);
}

ObjectiveCParser::AttributeParameterListContext* ObjectiveCParser::AttributeParametersContext::attributeParameterList() {
  return getRuleContext<ObjectiveCParser::AttributeParameterListContext>(0);
}


size_t ObjectiveCParser::AttributeParametersContext::getRuleIndex() const {
  return ObjectiveCParser::RuleAttributeParameters;
}

void ObjectiveCParser::AttributeParametersContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAttributeParameters(this);
}

void ObjectiveCParser::AttributeParametersContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAttributeParameters(this);
}

ObjectiveCParser::AttributeParametersContext* ObjectiveCParser::attributeParameters() {
  AttributeParametersContext *_localctx = _tracker.createInstance<AttributeParametersContext>(_ctx, getState());
  enterRule(_localctx, 130, ObjectiveCParser::RuleAttributeParameters);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(877);
    match(ObjectiveCParser::LP);
    setState(879);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 288230101273804832) != 0) || ((((_la - 81) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 81)) & 17867063762871) != 0) || ((((_la - 152) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 152)) & 66584579) != 0)) {
      setState(878);
      attributeParameterList();
    }
    setState(881);
    match(ObjectiveCParser::RP);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AttributeParameterListContext ------------------------------------------------------------------

ObjectiveCParser::AttributeParameterListContext::AttributeParameterListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectiveCParser::AttributeParameterContext *> ObjectiveCParser::AttributeParameterListContext::attributeParameter() {
  return getRuleContexts<ObjectiveCParser::AttributeParameterContext>();
}

ObjectiveCParser::AttributeParameterContext* ObjectiveCParser::AttributeParameterListContext::attributeParameter(size_t i) {
  return getRuleContext<ObjectiveCParser::AttributeParameterContext>(i);
}

std::vector<tree::TerminalNode *> ObjectiveCParser::AttributeParameterListContext::COMMA() {
  return getTokens(ObjectiveCParser::COMMA);
}

tree::TerminalNode* ObjectiveCParser::AttributeParameterListContext::COMMA(size_t i) {
  return getToken(ObjectiveCParser::COMMA, i);
}


size_t ObjectiveCParser::AttributeParameterListContext::getRuleIndex() const {
  return ObjectiveCParser::RuleAttributeParameterList;
}

void ObjectiveCParser::AttributeParameterListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAttributeParameterList(this);
}

void ObjectiveCParser::AttributeParameterListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAttributeParameterList(this);
}

ObjectiveCParser::AttributeParameterListContext* ObjectiveCParser::attributeParameterList() {
  AttributeParameterListContext *_localctx = _tracker.createInstance<AttributeParameterListContext>(_ctx, getState());
  enterRule(_localctx, 132, ObjectiveCParser::RuleAttributeParameterList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(883);
    attributeParameter();
    setState(888);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectiveCParser::COMMA) {
      setState(884);
      match(ObjectiveCParser::COMMA);
      setState(885);
      attributeParameter();
      setState(890);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AttributeParameterContext ------------------------------------------------------------------

ObjectiveCParser::AttributeParameterContext::AttributeParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectiveCParser::AttributeContext* ObjectiveCParser::AttributeParameterContext::attribute() {
  return getRuleContext<ObjectiveCParser::AttributeContext>(0);
}

ObjectiveCParser::ConstantContext* ObjectiveCParser::AttributeParameterContext::constant() {
  return getRuleContext<ObjectiveCParser::ConstantContext>(0);
}

ObjectiveCParser::StringLiteralContext* ObjectiveCParser::AttributeParameterContext::stringLiteral() {
  return getRuleContext<ObjectiveCParser::StringLiteralContext>(0);
}

ObjectiveCParser::AttributeParameterAssignmentContext* ObjectiveCParser::AttributeParameterContext::attributeParameterAssignment() {
  return getRuleContext<ObjectiveCParser::AttributeParameterAssignmentContext>(0);
}


size_t ObjectiveCParser::AttributeParameterContext::getRuleIndex() const {
  return ObjectiveCParser::RuleAttributeParameter;
}

void ObjectiveCParser::AttributeParameterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAttributeParameter(this);
}

void ObjectiveCParser::AttributeParameterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAttributeParameter(this);
}

ObjectiveCParser::AttributeParameterContext* ObjectiveCParser::attributeParameter() {
  AttributeParameterContext *_localctx = _tracker.createInstance<AttributeParameterContext>(_ctx, getState());
  enterRule(_localctx, 134, ObjectiveCParser::RuleAttributeParameter);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(895);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 95, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(891);
      attribute();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(892);
      constant();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(893);
      stringLiteral();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(894);
      attributeParameterAssignment();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AttributeParameterAssignmentContext ------------------------------------------------------------------

ObjectiveCParser::AttributeParameterAssignmentContext::AttributeParameterAssignmentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectiveCParser::AttributeNameContext *> ObjectiveCParser::AttributeParameterAssignmentContext::attributeName() {
  return getRuleContexts<ObjectiveCParser::AttributeNameContext>();
}

ObjectiveCParser::AttributeNameContext* ObjectiveCParser::AttributeParameterAssignmentContext::attributeName(size_t i) {
  return getRuleContext<ObjectiveCParser::AttributeNameContext>(i);
}

tree::TerminalNode* ObjectiveCParser::AttributeParameterAssignmentContext::ASSIGNMENT() {
  return getToken(ObjectiveCParser::ASSIGNMENT, 0);
}

ObjectiveCParser::ConstantContext* ObjectiveCParser::AttributeParameterAssignmentContext::constant() {
  return getRuleContext<ObjectiveCParser::ConstantContext>(0);
}

ObjectiveCParser::StringLiteralContext* ObjectiveCParser::AttributeParameterAssignmentContext::stringLiteral() {
  return getRuleContext<ObjectiveCParser::StringLiteralContext>(0);
}


size_t ObjectiveCParser::AttributeParameterAssignmentContext::getRuleIndex() const {
  return ObjectiveCParser::RuleAttributeParameterAssignment;
}

void ObjectiveCParser::AttributeParameterAssignmentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAttributeParameterAssignment(this);
}

void ObjectiveCParser::AttributeParameterAssignmentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAttributeParameterAssignment(this);
}

ObjectiveCParser::AttributeParameterAssignmentContext* ObjectiveCParser::attributeParameterAssignment() {
  AttributeParameterAssignmentContext *_localctx = _tracker.createInstance<AttributeParameterAssignmentContext>(_ctx, getState());
  enterRule(_localctx, 136, ObjectiveCParser::RuleAttributeParameterAssignment);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(897);
    attributeName();
    setState(898);
    match(ObjectiveCParser::ASSIGNMENT);
    setState(902);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectiveCParser::TRUE:
      case ObjectiveCParser::FALSE:
      case ObjectiveCParser::NIL:
      case ObjectiveCParser::NO:
      case ObjectiveCParser::NULL_:
      case ObjectiveCParser::YES:
      case ObjectiveCParser::ADD:
      case ObjectiveCParser::SUB:
      case ObjectiveCParser::CHARACTER_LITERAL:
      case ObjectiveCParser::HEX_LITERAL:
      case ObjectiveCParser::OCTAL_LITERAL:
      case ObjectiveCParser::BINARY_LITERAL:
      case ObjectiveCParser::DECIMAL_LITERAL:
      case ObjectiveCParser::FLOATING_POINT_LITERAL: {
        setState(899);
        constant();
        break;
      }

      case ObjectiveCParser::CONST:
      case ObjectiveCParser::BOOL:
      case ObjectiveCParser::Class:
      case ObjectiveCParser::BYCOPY:
      case ObjectiveCParser::BYREF:
      case ObjectiveCParser::ID:
      case ObjectiveCParser::IMP:
      case ObjectiveCParser::IN:
      case ObjectiveCParser::INOUT:
      case ObjectiveCParser::ONEWAY:
      case ObjectiveCParser::OUT:
      case ObjectiveCParser::PROTOCOL_:
      case ObjectiveCParser::SEL:
      case ObjectiveCParser::SELF:
      case ObjectiveCParser::SUPER:
      case ObjectiveCParser::ATOMIC:
      case ObjectiveCParser::NONATOMIC:
      case ObjectiveCParser::RETAIN:
      case ObjectiveCParser::AUTORELEASING_QUALIFIER:
      case ObjectiveCParser::BLOCK:
      case ObjectiveCParser::BRIDGE_RETAINED:
      case ObjectiveCParser::BRIDGE_TRANSFER:
      case ObjectiveCParser::COVARIANT:
      case ObjectiveCParser::CONTRAVARIANT:
      case ObjectiveCParser::DEPRECATED:
      case ObjectiveCParser::KINDOF:
      case ObjectiveCParser::UNUSED:
      case ObjectiveCParser::NULL_UNSPECIFIED:
      case ObjectiveCParser::NULLABLE:
      case ObjectiveCParser::NONNULL:
      case ObjectiveCParser::NULL_RESETTABLE:
      case ObjectiveCParser::NS_INLINE:
      case ObjectiveCParser::NS_ENUM:
      case ObjectiveCParser::NS_OPTIONS:
      case ObjectiveCParser::ASSIGN:
      case ObjectiveCParser::COPY:
      case ObjectiveCParser::GETTER:
      case ObjectiveCParser::SETTER:
      case ObjectiveCParser::STRONG:
      case ObjectiveCParser::READONLY:
      case ObjectiveCParser::READWRITE:
      case ObjectiveCParser::WEAK:
      case ObjectiveCParser::UNSAFE_UNRETAINED:
      case ObjectiveCParser::IB_OUTLET:
      case ObjectiveCParser::IB_OUTLET_COLLECTION:
      case ObjectiveCParser::IB_INSPECTABLE:
      case ObjectiveCParser::IB_DESIGNABLE:
      case ObjectiveCParser::IDENTIFIER: {
        setState(900);
        attributeName();
        break;
      }

      case ObjectiveCParser::STRING_START: {
        setState(901);
        stringLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeclarationContext ------------------------------------------------------------------

ObjectiveCParser::DeclarationContext::DeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectiveCParser::FunctionCallExpressionContext* ObjectiveCParser::DeclarationContext::functionCallExpression() {
  return getRuleContext<ObjectiveCParser::FunctionCallExpressionContext>(0);
}

ObjectiveCParser::EnumDeclarationContext* ObjectiveCParser::DeclarationContext::enumDeclaration() {
  return getRuleContext<ObjectiveCParser::EnumDeclarationContext>(0);
}

ObjectiveCParser::VarDeclarationContext* ObjectiveCParser::DeclarationContext::varDeclaration() {
  return getRuleContext<ObjectiveCParser::VarDeclarationContext>(0);
}

ObjectiveCParser::TypedefDeclarationContext* ObjectiveCParser::DeclarationContext::typedefDeclaration() {
  return getRuleContext<ObjectiveCParser::TypedefDeclarationContext>(0);
}


size_t ObjectiveCParser::DeclarationContext::getRuleIndex() const {
  return ObjectiveCParser::RuleDeclaration;
}

void ObjectiveCParser::DeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeclaration(this);
}

void ObjectiveCParser::DeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeclaration(this);
}

ObjectiveCParser::DeclarationContext* ObjectiveCParser::declaration() {
  DeclarationContext *_localctx = _tracker.createInstance<DeclarationContext>(_ctx, getState());
  enterRule(_localctx, 138, ObjectiveCParser::RuleDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(908);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 97, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(904);
      functionCallExpression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(905);
      enumDeclaration();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(906);
      varDeclaration();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(907);
      typedefDeclaration();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionCallExpressionContext ------------------------------------------------------------------

ObjectiveCParser::FunctionCallExpressionContext::FunctionCallExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectiveCParser::IdentifierContext* ObjectiveCParser::FunctionCallExpressionContext::identifier() {
  return getRuleContext<ObjectiveCParser::IdentifierContext>(0);
}

tree::TerminalNode* ObjectiveCParser::FunctionCallExpressionContext::LP() {
  return getToken(ObjectiveCParser::LP, 0);
}

ObjectiveCParser::DirectDeclaratorContext* ObjectiveCParser::FunctionCallExpressionContext::directDeclarator() {
  return getRuleContext<ObjectiveCParser::DirectDeclaratorContext>(0);
}

tree::TerminalNode* ObjectiveCParser::FunctionCallExpressionContext::RP() {
  return getToken(ObjectiveCParser::RP, 0);
}

tree::TerminalNode* ObjectiveCParser::FunctionCallExpressionContext::SEMI() {
  return getToken(ObjectiveCParser::SEMI, 0);
}

std::vector<ObjectiveCParser::AttributeSpecifierContext *> ObjectiveCParser::FunctionCallExpressionContext::attributeSpecifier() {
  return getRuleContexts<ObjectiveCParser::AttributeSpecifierContext>();
}

ObjectiveCParser::AttributeSpecifierContext* ObjectiveCParser::FunctionCallExpressionContext::attributeSpecifier(size_t i) {
  return getRuleContext<ObjectiveCParser::AttributeSpecifierContext>(i);
}


size_t ObjectiveCParser::FunctionCallExpressionContext::getRuleIndex() const {
  return ObjectiveCParser::RuleFunctionCallExpression;
}

void ObjectiveCParser::FunctionCallExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunctionCallExpression(this);
}

void ObjectiveCParser::FunctionCallExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunctionCallExpression(this);
}

ObjectiveCParser::FunctionCallExpressionContext* ObjectiveCParser::functionCallExpression() {
  FunctionCallExpressionContext *_localctx = _tracker.createInstance<FunctionCallExpressionContext>(_ctx, getState());
  enterRule(_localctx, 140, ObjectiveCParser::RuleFunctionCallExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(911);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectiveCParser::ATTRIBUTE) {
      setState(910);
      attributeSpecifier();
    }
    setState(913);
    identifier();
    setState(915);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectiveCParser::ATTRIBUTE) {
      setState(914);
      attributeSpecifier();
    }
    setState(917);
    match(ObjectiveCParser::LP);
    setState(918);
    directDeclarator();
    setState(919);
    match(ObjectiveCParser::RP);
    setState(920);
    match(ObjectiveCParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumDeclarationContext ------------------------------------------------------------------

ObjectiveCParser::EnumDeclarationContext::EnumDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectiveCParser::EnumSpecifierContext* ObjectiveCParser::EnumDeclarationContext::enumSpecifier() {
  return getRuleContext<ObjectiveCParser::EnumSpecifierContext>(0);
}

tree::TerminalNode* ObjectiveCParser::EnumDeclarationContext::SEMI() {
  return getToken(ObjectiveCParser::SEMI, 0);
}

ObjectiveCParser::AttributeSpecifierContext* ObjectiveCParser::EnumDeclarationContext::attributeSpecifier() {
  return getRuleContext<ObjectiveCParser::AttributeSpecifierContext>(0);
}

tree::TerminalNode* ObjectiveCParser::EnumDeclarationContext::TYPEDEF() {
  return getToken(ObjectiveCParser::TYPEDEF, 0);
}

ObjectiveCParser::IdentifierContext* ObjectiveCParser::EnumDeclarationContext::identifier() {
  return getRuleContext<ObjectiveCParser::IdentifierContext>(0);
}


size_t ObjectiveCParser::EnumDeclarationContext::getRuleIndex() const {
  return ObjectiveCParser::RuleEnumDeclaration;
}

void ObjectiveCParser::EnumDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumDeclaration(this);
}

void ObjectiveCParser::EnumDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumDeclaration(this);
}

ObjectiveCParser::EnumDeclarationContext* ObjectiveCParser::enumDeclaration() {
  EnumDeclarationContext *_localctx = _tracker.createInstance<EnumDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 142, ObjectiveCParser::RuleEnumDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(923);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectiveCParser::ATTRIBUTE) {
      setState(922);
      attributeSpecifier();
    }
    setState(926);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectiveCParser::TYPEDEF) {
      setState(925);
      match(ObjectiveCParser::TYPEDEF);
    }
    setState(928);
    enumSpecifier();
    setState(930);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 142143763727253504) != 0) || ((((_la - 81) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 81)) & 17867063762871) != 0)) {
      setState(929);
      identifier();
    }
    setState(932);
    match(ObjectiveCParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VarDeclarationContext ------------------------------------------------------------------

ObjectiveCParser::VarDeclarationContext::VarDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::VarDeclarationContext::SEMI() {
  return getToken(ObjectiveCParser::SEMI, 0);
}

ObjectiveCParser::DeclarationSpecifiersContext* ObjectiveCParser::VarDeclarationContext::declarationSpecifiers() {
  return getRuleContext<ObjectiveCParser::DeclarationSpecifiersContext>(0);
}

ObjectiveCParser::InitDeclaratorListContext* ObjectiveCParser::VarDeclarationContext::initDeclaratorList() {
  return getRuleContext<ObjectiveCParser::InitDeclaratorListContext>(0);
}


size_t ObjectiveCParser::VarDeclarationContext::getRuleIndex() const {
  return ObjectiveCParser::RuleVarDeclaration;
}

void ObjectiveCParser::VarDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVarDeclaration(this);
}

void ObjectiveCParser::VarDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVarDeclaration(this);
}

ObjectiveCParser::VarDeclarationContext* ObjectiveCParser::varDeclaration() {
  VarDeclarationContext *_localctx = _tracker.createInstance<VarDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 144, ObjectiveCParser::RuleVarDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(938);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 103, _ctx)) {
    case 1: {
      setState(934);
      declarationSpecifiers();
      setState(935);
      initDeclaratorList();
      break;
    }

    case 2: {
      setState(937);
      declarationSpecifiers();
      break;
    }

    default:
      break;
    }
    setState(940);
    match(ObjectiveCParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypedefDeclarationContext ------------------------------------------------------------------

ObjectiveCParser::TypedefDeclarationContext::TypedefDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::TypedefDeclarationContext::TYPEDEF() {
  return getToken(ObjectiveCParser::TYPEDEF, 0);
}

tree::TerminalNode* ObjectiveCParser::TypedefDeclarationContext::SEMI() {
  return getToken(ObjectiveCParser::SEMI, 0);
}

ObjectiveCParser::DeclarationSpecifiersContext* ObjectiveCParser::TypedefDeclarationContext::declarationSpecifiers() {
  return getRuleContext<ObjectiveCParser::DeclarationSpecifiersContext>(0);
}

ObjectiveCParser::TypeDeclaratorListContext* ObjectiveCParser::TypedefDeclarationContext::typeDeclaratorList() {
  return getRuleContext<ObjectiveCParser::TypeDeclaratorListContext>(0);
}

ObjectiveCParser::AttributeSpecifierContext* ObjectiveCParser::TypedefDeclarationContext::attributeSpecifier() {
  return getRuleContext<ObjectiveCParser::AttributeSpecifierContext>(0);
}


size_t ObjectiveCParser::TypedefDeclarationContext::getRuleIndex() const {
  return ObjectiveCParser::RuleTypedefDeclaration;
}

void ObjectiveCParser::TypedefDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypedefDeclaration(this);
}

void ObjectiveCParser::TypedefDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypedefDeclaration(this);
}

ObjectiveCParser::TypedefDeclarationContext* ObjectiveCParser::typedefDeclaration() {
  TypedefDeclarationContext *_localctx = _tracker.createInstance<TypedefDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 146, ObjectiveCParser::RuleTypedefDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(943);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectiveCParser::ATTRIBUTE) {
      setState(942);
      attributeSpecifier();
    }
    setState(945);
    match(ObjectiveCParser::TYPEDEF);
    setState(950);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 105, _ctx)) {
    case 1: {
      setState(946);
      declarationSpecifiers();
      setState(947);
      typeDeclaratorList();
      break;
    }

    case 2: {
      setState(949);
      declarationSpecifiers();
      break;
    }

    default:
      break;
    }
    setState(952);
    match(ObjectiveCParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeDeclaratorListContext ------------------------------------------------------------------

ObjectiveCParser::TypeDeclaratorListContext::TypeDeclaratorListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectiveCParser::TypeDeclaratorContext *> ObjectiveCParser::TypeDeclaratorListContext::typeDeclarator() {
  return getRuleContexts<ObjectiveCParser::TypeDeclaratorContext>();
}

ObjectiveCParser::TypeDeclaratorContext* ObjectiveCParser::TypeDeclaratorListContext::typeDeclarator(size_t i) {
  return getRuleContext<ObjectiveCParser::TypeDeclaratorContext>(i);
}

std::vector<tree::TerminalNode *> ObjectiveCParser::TypeDeclaratorListContext::COMMA() {
  return getTokens(ObjectiveCParser::COMMA);
}

tree::TerminalNode* ObjectiveCParser::TypeDeclaratorListContext::COMMA(size_t i) {
  return getToken(ObjectiveCParser::COMMA, i);
}


size_t ObjectiveCParser::TypeDeclaratorListContext::getRuleIndex() const {
  return ObjectiveCParser::RuleTypeDeclaratorList;
}

void ObjectiveCParser::TypeDeclaratorListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeDeclaratorList(this);
}

void ObjectiveCParser::TypeDeclaratorListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeDeclaratorList(this);
}

ObjectiveCParser::TypeDeclaratorListContext* ObjectiveCParser::typeDeclaratorList() {
  TypeDeclaratorListContext *_localctx = _tracker.createInstance<TypeDeclaratorListContext>(_ctx, getState());
  enterRule(_localctx, 148, ObjectiveCParser::RuleTypeDeclaratorList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(954);
    typeDeclarator();
    setState(959);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectiveCParser::COMMA) {
      setState(955);
      match(ObjectiveCParser::COMMA);
      setState(956);
      typeDeclarator();
      setState(961);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeDeclaratorContext ------------------------------------------------------------------

ObjectiveCParser::TypeDeclaratorContext::TypeDeclaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectiveCParser::DirectDeclaratorContext* ObjectiveCParser::TypeDeclaratorContext::directDeclarator() {
  return getRuleContext<ObjectiveCParser::DirectDeclaratorContext>(0);
}

ObjectiveCParser::PointerContext* ObjectiveCParser::TypeDeclaratorContext::pointer() {
  return getRuleContext<ObjectiveCParser::PointerContext>(0);
}


size_t ObjectiveCParser::TypeDeclaratorContext::getRuleIndex() const {
  return ObjectiveCParser::RuleTypeDeclarator;
}

void ObjectiveCParser::TypeDeclaratorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeDeclarator(this);
}

void ObjectiveCParser::TypeDeclaratorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeDeclarator(this);
}

ObjectiveCParser::TypeDeclaratorContext* ObjectiveCParser::typeDeclarator() {
  TypeDeclaratorContext *_localctx = _tracker.createInstance<TypeDeclaratorContext>(_ctx, getState());
  enterRule(_localctx, 150, ObjectiveCParser::RuleTypeDeclarator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(963);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectiveCParser::MUL) {
      setState(962);
      pointer();
    }
    setState(965);
    directDeclarator();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeclarationSpecifiersContext ------------------------------------------------------------------

ObjectiveCParser::DeclarationSpecifiersContext::DeclarationSpecifiersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectiveCParser::StorageClassSpecifierContext *> ObjectiveCParser::DeclarationSpecifiersContext::storageClassSpecifier() {
  return getRuleContexts<ObjectiveCParser::StorageClassSpecifierContext>();
}

ObjectiveCParser::StorageClassSpecifierContext* ObjectiveCParser::DeclarationSpecifiersContext::storageClassSpecifier(size_t i) {
  return getRuleContext<ObjectiveCParser::StorageClassSpecifierContext>(i);
}

std::vector<ObjectiveCParser::AttributeSpecifierContext *> ObjectiveCParser::DeclarationSpecifiersContext::attributeSpecifier() {
  return getRuleContexts<ObjectiveCParser::AttributeSpecifierContext>();
}

ObjectiveCParser::AttributeSpecifierContext* ObjectiveCParser::DeclarationSpecifiersContext::attributeSpecifier(size_t i) {
  return getRuleContext<ObjectiveCParser::AttributeSpecifierContext>(i);
}

std::vector<ObjectiveCParser::ArcBehaviourSpecifierContext *> ObjectiveCParser::DeclarationSpecifiersContext::arcBehaviourSpecifier() {
  return getRuleContexts<ObjectiveCParser::ArcBehaviourSpecifierContext>();
}

ObjectiveCParser::ArcBehaviourSpecifierContext* ObjectiveCParser::DeclarationSpecifiersContext::arcBehaviourSpecifier(size_t i) {
  return getRuleContext<ObjectiveCParser::ArcBehaviourSpecifierContext>(i);
}

std::vector<ObjectiveCParser::NullabilitySpecifierContext *> ObjectiveCParser::DeclarationSpecifiersContext::nullabilitySpecifier() {
  return getRuleContexts<ObjectiveCParser::NullabilitySpecifierContext>();
}

ObjectiveCParser::NullabilitySpecifierContext* ObjectiveCParser::DeclarationSpecifiersContext::nullabilitySpecifier(size_t i) {
  return getRuleContext<ObjectiveCParser::NullabilitySpecifierContext>(i);
}

std::vector<ObjectiveCParser::IbOutletQualifierContext *> ObjectiveCParser::DeclarationSpecifiersContext::ibOutletQualifier() {
  return getRuleContexts<ObjectiveCParser::IbOutletQualifierContext>();
}

ObjectiveCParser::IbOutletQualifierContext* ObjectiveCParser::DeclarationSpecifiersContext::ibOutletQualifier(size_t i) {
  return getRuleContext<ObjectiveCParser::IbOutletQualifierContext>(i);
}

std::vector<ObjectiveCParser::TypePrefixContext *> ObjectiveCParser::DeclarationSpecifiersContext::typePrefix() {
  return getRuleContexts<ObjectiveCParser::TypePrefixContext>();
}

ObjectiveCParser::TypePrefixContext* ObjectiveCParser::DeclarationSpecifiersContext::typePrefix(size_t i) {
  return getRuleContext<ObjectiveCParser::TypePrefixContext>(i);
}

std::vector<ObjectiveCParser::TypeQualifierContext *> ObjectiveCParser::DeclarationSpecifiersContext::typeQualifier() {
  return getRuleContexts<ObjectiveCParser::TypeQualifierContext>();
}

ObjectiveCParser::TypeQualifierContext* ObjectiveCParser::DeclarationSpecifiersContext::typeQualifier(size_t i) {
  return getRuleContext<ObjectiveCParser::TypeQualifierContext>(i);
}

std::vector<ObjectiveCParser::TypeSpecifierContext *> ObjectiveCParser::DeclarationSpecifiersContext::typeSpecifier() {
  return getRuleContexts<ObjectiveCParser::TypeSpecifierContext>();
}

ObjectiveCParser::TypeSpecifierContext* ObjectiveCParser::DeclarationSpecifiersContext::typeSpecifier(size_t i) {
  return getRuleContext<ObjectiveCParser::TypeSpecifierContext>(i);
}


size_t ObjectiveCParser::DeclarationSpecifiersContext::getRuleIndex() const {
  return ObjectiveCParser::RuleDeclarationSpecifiers;
}

void ObjectiveCParser::DeclarationSpecifiersContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeclarationSpecifiers(this);
}

void ObjectiveCParser::DeclarationSpecifiersContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeclarationSpecifiers(this);
}

ObjectiveCParser::DeclarationSpecifiersContext* ObjectiveCParser::declarationSpecifiers() {
  DeclarationSpecifiersContext *_localctx = _tracker.createInstance<DeclarationSpecifiersContext>(_ctx, getState());
  enterRule(_localctx, 152, ObjectiveCParser::RuleDeclarationSpecifiers);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(975); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(975);
              _errHandler->sync(this);
              switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 108, _ctx)) {
              case 1: {
                setState(967);
                storageClassSpecifier();
                break;
              }

              case 2: {
                setState(968);
                attributeSpecifier();
                break;
              }

              case 3: {
                setState(969);
                arcBehaviourSpecifier();
                break;
              }

              case 4: {
                setState(970);
                nullabilitySpecifier();
                break;
              }

              case 5: {
                setState(971);
                ibOutletQualifier();
                break;
              }

              case 6: {
                setState(972);
                typePrefix();
                break;
              }

              case 7: {
                setState(973);
                typeQualifier();
                break;
              }

              case 8: {
                setState(974);
                typeSpecifier();
                break;
              }

              default:
                break;
              }
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(977); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 109, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AttributeSpecifierContext ------------------------------------------------------------------

ObjectiveCParser::AttributeSpecifierContext::AttributeSpecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::AttributeSpecifierContext::ATTRIBUTE() {
  return getToken(ObjectiveCParser::ATTRIBUTE, 0);
}

std::vector<tree::TerminalNode *> ObjectiveCParser::AttributeSpecifierContext::LP() {
  return getTokens(ObjectiveCParser::LP);
}

tree::TerminalNode* ObjectiveCParser::AttributeSpecifierContext::LP(size_t i) {
  return getToken(ObjectiveCParser::LP, i);
}

std::vector<ObjectiveCParser::AttributeContext *> ObjectiveCParser::AttributeSpecifierContext::attribute() {
  return getRuleContexts<ObjectiveCParser::AttributeContext>();
}

ObjectiveCParser::AttributeContext* ObjectiveCParser::AttributeSpecifierContext::attribute(size_t i) {
  return getRuleContext<ObjectiveCParser::AttributeContext>(i);
}

std::vector<tree::TerminalNode *> ObjectiveCParser::AttributeSpecifierContext::RP() {
  return getTokens(ObjectiveCParser::RP);
}

tree::TerminalNode* ObjectiveCParser::AttributeSpecifierContext::RP(size_t i) {
  return getToken(ObjectiveCParser::RP, i);
}

std::vector<tree::TerminalNode *> ObjectiveCParser::AttributeSpecifierContext::COMMA() {
  return getTokens(ObjectiveCParser::COMMA);
}

tree::TerminalNode* ObjectiveCParser::AttributeSpecifierContext::COMMA(size_t i) {
  return getToken(ObjectiveCParser::COMMA, i);
}


size_t ObjectiveCParser::AttributeSpecifierContext::getRuleIndex() const {
  return ObjectiveCParser::RuleAttributeSpecifier;
}

void ObjectiveCParser::AttributeSpecifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAttributeSpecifier(this);
}

void ObjectiveCParser::AttributeSpecifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAttributeSpecifier(this);
}

ObjectiveCParser::AttributeSpecifierContext* ObjectiveCParser::attributeSpecifier() {
  AttributeSpecifierContext *_localctx = _tracker.createInstance<AttributeSpecifierContext>(_ctx, getState());
  enterRule(_localctx, 154, ObjectiveCParser::RuleAttributeSpecifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(979);
    match(ObjectiveCParser::ATTRIBUTE);
    setState(980);
    match(ObjectiveCParser::LP);
    setState(981);
    match(ObjectiveCParser::LP);
    setState(982);
    attribute();
    setState(987);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectiveCParser::COMMA) {
      setState(983);
      match(ObjectiveCParser::COMMA);
      setState(984);
      attribute();
      setState(989);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(990);
    match(ObjectiveCParser::RP);
    setState(991);
    match(ObjectiveCParser::RP);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InitDeclaratorListContext ------------------------------------------------------------------

ObjectiveCParser::InitDeclaratorListContext::InitDeclaratorListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectiveCParser::InitDeclaratorContext *> ObjectiveCParser::InitDeclaratorListContext::initDeclarator() {
  return getRuleContexts<ObjectiveCParser::InitDeclaratorContext>();
}

ObjectiveCParser::InitDeclaratorContext* ObjectiveCParser::InitDeclaratorListContext::initDeclarator(size_t i) {
  return getRuleContext<ObjectiveCParser::InitDeclaratorContext>(i);
}

std::vector<tree::TerminalNode *> ObjectiveCParser::InitDeclaratorListContext::COMMA() {
  return getTokens(ObjectiveCParser::COMMA);
}

tree::TerminalNode* ObjectiveCParser::InitDeclaratorListContext::COMMA(size_t i) {
  return getToken(ObjectiveCParser::COMMA, i);
}


size_t ObjectiveCParser::InitDeclaratorListContext::getRuleIndex() const {
  return ObjectiveCParser::RuleInitDeclaratorList;
}

void ObjectiveCParser::InitDeclaratorListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInitDeclaratorList(this);
}

void ObjectiveCParser::InitDeclaratorListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInitDeclaratorList(this);
}

ObjectiveCParser::InitDeclaratorListContext* ObjectiveCParser::initDeclaratorList() {
  InitDeclaratorListContext *_localctx = _tracker.createInstance<InitDeclaratorListContext>(_ctx, getState());
  enterRule(_localctx, 156, ObjectiveCParser::RuleInitDeclaratorList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(993);
    initDeclarator();
    setState(998);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectiveCParser::COMMA) {
      setState(994);
      match(ObjectiveCParser::COMMA);
      setState(995);
      initDeclarator();
      setState(1000);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InitDeclaratorContext ------------------------------------------------------------------

ObjectiveCParser::InitDeclaratorContext::InitDeclaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectiveCParser::DeclaratorContext* ObjectiveCParser::InitDeclaratorContext::declarator() {
  return getRuleContext<ObjectiveCParser::DeclaratorContext>(0);
}

tree::TerminalNode* ObjectiveCParser::InitDeclaratorContext::ASSIGNMENT() {
  return getToken(ObjectiveCParser::ASSIGNMENT, 0);
}

ObjectiveCParser::InitializerContext* ObjectiveCParser::InitDeclaratorContext::initializer() {
  return getRuleContext<ObjectiveCParser::InitializerContext>(0);
}


size_t ObjectiveCParser::InitDeclaratorContext::getRuleIndex() const {
  return ObjectiveCParser::RuleInitDeclarator;
}

void ObjectiveCParser::InitDeclaratorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInitDeclarator(this);
}

void ObjectiveCParser::InitDeclaratorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInitDeclarator(this);
}

ObjectiveCParser::InitDeclaratorContext* ObjectiveCParser::initDeclarator() {
  InitDeclaratorContext *_localctx = _tracker.createInstance<InitDeclaratorContext>(_ctx, getState());
  enterRule(_localctx, 158, ObjectiveCParser::RuleInitDeclarator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1001);
    declarator();
    setState(1004);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectiveCParser::ASSIGNMENT) {
      setState(1002);
      match(ObjectiveCParser::ASSIGNMENT);
      setState(1003);
      initializer();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StructOrUnionSpecifierContext ------------------------------------------------------------------

ObjectiveCParser::StructOrUnionSpecifierContext::StructOrUnionSpecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::StructOrUnionSpecifierContext::STRUCT() {
  return getToken(ObjectiveCParser::STRUCT, 0);
}

tree::TerminalNode* ObjectiveCParser::StructOrUnionSpecifierContext::UNION() {
  return getToken(ObjectiveCParser::UNION, 0);
}

ObjectiveCParser::IdentifierContext* ObjectiveCParser::StructOrUnionSpecifierContext::identifier() {
  return getRuleContext<ObjectiveCParser::IdentifierContext>(0);
}

tree::TerminalNode* ObjectiveCParser::StructOrUnionSpecifierContext::LBRACE() {
  return getToken(ObjectiveCParser::LBRACE, 0);
}

tree::TerminalNode* ObjectiveCParser::StructOrUnionSpecifierContext::RBRACE() {
  return getToken(ObjectiveCParser::RBRACE, 0);
}

std::vector<ObjectiveCParser::FieldDeclarationContext *> ObjectiveCParser::StructOrUnionSpecifierContext::fieldDeclaration() {
  return getRuleContexts<ObjectiveCParser::FieldDeclarationContext>();
}

ObjectiveCParser::FieldDeclarationContext* ObjectiveCParser::StructOrUnionSpecifierContext::fieldDeclaration(size_t i) {
  return getRuleContext<ObjectiveCParser::FieldDeclarationContext>(i);
}


size_t ObjectiveCParser::StructOrUnionSpecifierContext::getRuleIndex() const {
  return ObjectiveCParser::RuleStructOrUnionSpecifier;
}

void ObjectiveCParser::StructOrUnionSpecifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStructOrUnionSpecifier(this);
}

void ObjectiveCParser::StructOrUnionSpecifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStructOrUnionSpecifier(this);
}

ObjectiveCParser::StructOrUnionSpecifierContext* ObjectiveCParser::structOrUnionSpecifier() {
  StructOrUnionSpecifierContext *_localctx = _tracker.createInstance<StructOrUnionSpecifierContext>(_ctx, getState());
  enterRule(_localctx, 160, ObjectiveCParser::RuleStructOrUnionSpecifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1006);
    _la = _input->LA(1);
    if (!(_la == ObjectiveCParser::STRUCT

    || _la == ObjectiveCParser::UNION)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(1019);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 115, _ctx)) {
    case 1: {
      setState(1007);
      identifier();
      break;
    }

    case 2: {
      setState(1009);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 142143763727253504) != 0) || ((((_la - 81) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 81)) & 17867063762871) != 0)) {
        setState(1008);
        identifier();
      }
      setState(1011);
      match(ObjectiveCParser::LBRACE);
      setState(1013); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(1012);
        fieldDeclaration();
        setState(1015); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 142143779995789872) != 0) || ((((_la - 81) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 81)) & 17867063951351) != 0));
      setState(1017);
      match(ObjectiveCParser::RBRACE);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FieldDeclarationContext ------------------------------------------------------------------

ObjectiveCParser::FieldDeclarationContext::FieldDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectiveCParser::SpecifierQualifierListContext* ObjectiveCParser::FieldDeclarationContext::specifierQualifierList() {
  return getRuleContext<ObjectiveCParser::SpecifierQualifierListContext>(0);
}

ObjectiveCParser::FieldDeclaratorListContext* ObjectiveCParser::FieldDeclarationContext::fieldDeclaratorList() {
  return getRuleContext<ObjectiveCParser::FieldDeclaratorListContext>(0);
}

tree::TerminalNode* ObjectiveCParser::FieldDeclarationContext::SEMI() {
  return getToken(ObjectiveCParser::SEMI, 0);
}

ObjectiveCParser::MacroContext* ObjectiveCParser::FieldDeclarationContext::macro() {
  return getRuleContext<ObjectiveCParser::MacroContext>(0);
}


size_t ObjectiveCParser::FieldDeclarationContext::getRuleIndex() const {
  return ObjectiveCParser::RuleFieldDeclaration;
}

void ObjectiveCParser::FieldDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFieldDeclaration(this);
}

void ObjectiveCParser::FieldDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFieldDeclaration(this);
}

ObjectiveCParser::FieldDeclarationContext* ObjectiveCParser::fieldDeclaration() {
  FieldDeclarationContext *_localctx = _tracker.createInstance<FieldDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 162, ObjectiveCParser::RuleFieldDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1021);
    specifierQualifierList();
    setState(1022);
    fieldDeclaratorList();
    setState(1024);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 142143763727253504) != 0) || ((((_la - 81) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 81)) & 17867063762871) != 0)) {
      setState(1023);
      macro();
    }
    setState(1026);
    match(ObjectiveCParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SpecifierQualifierListContext ------------------------------------------------------------------

ObjectiveCParser::SpecifierQualifierListContext::SpecifierQualifierListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectiveCParser::ArcBehaviourSpecifierContext *> ObjectiveCParser::SpecifierQualifierListContext::arcBehaviourSpecifier() {
  return getRuleContexts<ObjectiveCParser::ArcBehaviourSpecifierContext>();
}

ObjectiveCParser::ArcBehaviourSpecifierContext* ObjectiveCParser::SpecifierQualifierListContext::arcBehaviourSpecifier(size_t i) {
  return getRuleContext<ObjectiveCParser::ArcBehaviourSpecifierContext>(i);
}

std::vector<ObjectiveCParser::NullabilitySpecifierContext *> ObjectiveCParser::SpecifierQualifierListContext::nullabilitySpecifier() {
  return getRuleContexts<ObjectiveCParser::NullabilitySpecifierContext>();
}

ObjectiveCParser::NullabilitySpecifierContext* ObjectiveCParser::SpecifierQualifierListContext::nullabilitySpecifier(size_t i) {
  return getRuleContext<ObjectiveCParser::NullabilitySpecifierContext>(i);
}

std::vector<ObjectiveCParser::IbOutletQualifierContext *> ObjectiveCParser::SpecifierQualifierListContext::ibOutletQualifier() {
  return getRuleContexts<ObjectiveCParser::IbOutletQualifierContext>();
}

ObjectiveCParser::IbOutletQualifierContext* ObjectiveCParser::SpecifierQualifierListContext::ibOutletQualifier(size_t i) {
  return getRuleContext<ObjectiveCParser::IbOutletQualifierContext>(i);
}

std::vector<ObjectiveCParser::TypePrefixContext *> ObjectiveCParser::SpecifierQualifierListContext::typePrefix() {
  return getRuleContexts<ObjectiveCParser::TypePrefixContext>();
}

ObjectiveCParser::TypePrefixContext* ObjectiveCParser::SpecifierQualifierListContext::typePrefix(size_t i) {
  return getRuleContext<ObjectiveCParser::TypePrefixContext>(i);
}

std::vector<ObjectiveCParser::TypeQualifierContext *> ObjectiveCParser::SpecifierQualifierListContext::typeQualifier() {
  return getRuleContexts<ObjectiveCParser::TypeQualifierContext>();
}

ObjectiveCParser::TypeQualifierContext* ObjectiveCParser::SpecifierQualifierListContext::typeQualifier(size_t i) {
  return getRuleContext<ObjectiveCParser::TypeQualifierContext>(i);
}

std::vector<ObjectiveCParser::TypeSpecifierContext *> ObjectiveCParser::SpecifierQualifierListContext::typeSpecifier() {
  return getRuleContexts<ObjectiveCParser::TypeSpecifierContext>();
}

ObjectiveCParser::TypeSpecifierContext* ObjectiveCParser::SpecifierQualifierListContext::typeSpecifier(size_t i) {
  return getRuleContext<ObjectiveCParser::TypeSpecifierContext>(i);
}


size_t ObjectiveCParser::SpecifierQualifierListContext::getRuleIndex() const {
  return ObjectiveCParser::RuleSpecifierQualifierList;
}

void ObjectiveCParser::SpecifierQualifierListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSpecifierQualifierList(this);
}

void ObjectiveCParser::SpecifierQualifierListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSpecifierQualifierList(this);
}

ObjectiveCParser::SpecifierQualifierListContext* ObjectiveCParser::specifierQualifierList() {
  SpecifierQualifierListContext *_localctx = _tracker.createInstance<SpecifierQualifierListContext>(_ctx, getState());
  enterRule(_localctx, 164, ObjectiveCParser::RuleSpecifierQualifierList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1034); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1034);
              _errHandler->sync(this);
              switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 117, _ctx)) {
              case 1: {
                setState(1028);
                arcBehaviourSpecifier();
                break;
              }

              case 2: {
                setState(1029);
                nullabilitySpecifier();
                break;
              }

              case 3: {
                setState(1030);
                ibOutletQualifier();
                break;
              }

              case 4: {
                setState(1031);
                typePrefix();
                break;
              }

              case 5: {
                setState(1032);
                typeQualifier();
                break;
              }

              case 6: {
                setState(1033);
                typeSpecifier();
                break;
              }

              default:
                break;
              }
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1036); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 118, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IbOutletQualifierContext ------------------------------------------------------------------

ObjectiveCParser::IbOutletQualifierContext::IbOutletQualifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::IbOutletQualifierContext::IB_OUTLET_COLLECTION() {
  return getToken(ObjectiveCParser::IB_OUTLET_COLLECTION, 0);
}

tree::TerminalNode* ObjectiveCParser::IbOutletQualifierContext::LP() {
  return getToken(ObjectiveCParser::LP, 0);
}

ObjectiveCParser::IdentifierContext* ObjectiveCParser::IbOutletQualifierContext::identifier() {
  return getRuleContext<ObjectiveCParser::IdentifierContext>(0);
}

tree::TerminalNode* ObjectiveCParser::IbOutletQualifierContext::RP() {
  return getToken(ObjectiveCParser::RP, 0);
}

tree::TerminalNode* ObjectiveCParser::IbOutletQualifierContext::IB_OUTLET() {
  return getToken(ObjectiveCParser::IB_OUTLET, 0);
}


size_t ObjectiveCParser::IbOutletQualifierContext::getRuleIndex() const {
  return ObjectiveCParser::RuleIbOutletQualifier;
}

void ObjectiveCParser::IbOutletQualifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIbOutletQualifier(this);
}

void ObjectiveCParser::IbOutletQualifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIbOutletQualifier(this);
}

ObjectiveCParser::IbOutletQualifierContext* ObjectiveCParser::ibOutletQualifier() {
  IbOutletQualifierContext *_localctx = _tracker.createInstance<IbOutletQualifierContext>(_ctx, getState());
  enterRule(_localctx, 166, ObjectiveCParser::RuleIbOutletQualifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1044);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectiveCParser::IB_OUTLET_COLLECTION: {
        enterOuterAlt(_localctx, 1);
        setState(1038);
        match(ObjectiveCParser::IB_OUTLET_COLLECTION);
        setState(1039);
        match(ObjectiveCParser::LP);
        setState(1040);
        identifier();
        setState(1041);
        match(ObjectiveCParser::RP);
        break;
      }

      case ObjectiveCParser::IB_OUTLET: {
        enterOuterAlt(_localctx, 2);
        setState(1043);
        match(ObjectiveCParser::IB_OUTLET);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArcBehaviourSpecifierContext ------------------------------------------------------------------

ObjectiveCParser::ArcBehaviourSpecifierContext::ArcBehaviourSpecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::ArcBehaviourSpecifierContext::WEAK_QUALIFIER() {
  return getToken(ObjectiveCParser::WEAK_QUALIFIER, 0);
}

tree::TerminalNode* ObjectiveCParser::ArcBehaviourSpecifierContext::STRONG_QUALIFIER() {
  return getToken(ObjectiveCParser::STRONG_QUALIFIER, 0);
}

tree::TerminalNode* ObjectiveCParser::ArcBehaviourSpecifierContext::AUTORELEASING_QUALIFIER() {
  return getToken(ObjectiveCParser::AUTORELEASING_QUALIFIER, 0);
}

tree::TerminalNode* ObjectiveCParser::ArcBehaviourSpecifierContext::UNSAFE_UNRETAINED_QUALIFIER() {
  return getToken(ObjectiveCParser::UNSAFE_UNRETAINED_QUALIFIER, 0);
}


size_t ObjectiveCParser::ArcBehaviourSpecifierContext::getRuleIndex() const {
  return ObjectiveCParser::RuleArcBehaviourSpecifier;
}

void ObjectiveCParser::ArcBehaviourSpecifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArcBehaviourSpecifier(this);
}

void ObjectiveCParser::ArcBehaviourSpecifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArcBehaviourSpecifier(this);
}

ObjectiveCParser::ArcBehaviourSpecifierContext* ObjectiveCParser::arcBehaviourSpecifier() {
  ArcBehaviourSpecifierContext *_localctx = _tracker.createInstance<ArcBehaviourSpecifierContext>(_ctx, getState());
  enterRule(_localctx, 168, ObjectiveCParser::RuleArcBehaviourSpecifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1046);
    _la = _input->LA(1);
    if (!(((((_la - 85) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 85)) & 10753) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NullabilitySpecifierContext ------------------------------------------------------------------

ObjectiveCParser::NullabilitySpecifierContext::NullabilitySpecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::NullabilitySpecifierContext::NULL_UNSPECIFIED() {
  return getToken(ObjectiveCParser::NULL_UNSPECIFIED, 0);
}

tree::TerminalNode* ObjectiveCParser::NullabilitySpecifierContext::NULLABLE() {
  return getToken(ObjectiveCParser::NULLABLE, 0);
}

tree::TerminalNode* ObjectiveCParser::NullabilitySpecifierContext::NONNULL() {
  return getToken(ObjectiveCParser::NONNULL, 0);
}

tree::TerminalNode* ObjectiveCParser::NullabilitySpecifierContext::NULL_RESETTABLE() {
  return getToken(ObjectiveCParser::NULL_RESETTABLE, 0);
}


size_t ObjectiveCParser::NullabilitySpecifierContext::getRuleIndex() const {
  return ObjectiveCParser::RuleNullabilitySpecifier;
}

void ObjectiveCParser::NullabilitySpecifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNullabilitySpecifier(this);
}

void ObjectiveCParser::NullabilitySpecifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNullabilitySpecifier(this);
}

ObjectiveCParser::NullabilitySpecifierContext* ObjectiveCParser::nullabilitySpecifier() {
  NullabilitySpecifierContext *_localctx = _tracker.createInstance<NullabilitySpecifierContext>(_ctx, getState());
  enterRule(_localctx, 170, ObjectiveCParser::RuleNullabilitySpecifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1048);
    _la = _input->LA(1);
    if (!(((((_la - 99) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 99)) & 15) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StorageClassSpecifierContext ------------------------------------------------------------------

ObjectiveCParser::StorageClassSpecifierContext::StorageClassSpecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::StorageClassSpecifierContext::AUTO() {
  return getToken(ObjectiveCParser::AUTO, 0);
}

tree::TerminalNode* ObjectiveCParser::StorageClassSpecifierContext::REGISTER() {
  return getToken(ObjectiveCParser::REGISTER, 0);
}

tree::TerminalNode* ObjectiveCParser::StorageClassSpecifierContext::STATIC() {
  return getToken(ObjectiveCParser::STATIC, 0);
}

tree::TerminalNode* ObjectiveCParser::StorageClassSpecifierContext::EXTERN() {
  return getToken(ObjectiveCParser::EXTERN, 0);
}


size_t ObjectiveCParser::StorageClassSpecifierContext::getRuleIndex() const {
  return ObjectiveCParser::RuleStorageClassSpecifier;
}

void ObjectiveCParser::StorageClassSpecifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStorageClassSpecifier(this);
}

void ObjectiveCParser::StorageClassSpecifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStorageClassSpecifier(this);
}

ObjectiveCParser::StorageClassSpecifierContext* ObjectiveCParser::storageClassSpecifier() {
  StorageClassSpecifierContext *_localctx = _tracker.createInstance<StorageClassSpecifierContext>(_ctx, getState());
  enterRule(_localctx, 172, ObjectiveCParser::RuleStorageClassSpecifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1050);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 68161538) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypePrefixContext ------------------------------------------------------------------

ObjectiveCParser::TypePrefixContext::TypePrefixContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::TypePrefixContext::BRIDGE() {
  return getToken(ObjectiveCParser::BRIDGE, 0);
}

tree::TerminalNode* ObjectiveCParser::TypePrefixContext::BRIDGE_TRANSFER() {
  return getToken(ObjectiveCParser::BRIDGE_TRANSFER, 0);
}

tree::TerminalNode* ObjectiveCParser::TypePrefixContext::BRIDGE_RETAINED() {
  return getToken(ObjectiveCParser::BRIDGE_RETAINED, 0);
}

tree::TerminalNode* ObjectiveCParser::TypePrefixContext::BLOCK() {
  return getToken(ObjectiveCParser::BLOCK, 0);
}

tree::TerminalNode* ObjectiveCParser::TypePrefixContext::INLINE() {
  return getToken(ObjectiveCParser::INLINE, 0);
}

tree::TerminalNode* ObjectiveCParser::TypePrefixContext::NS_INLINE() {
  return getToken(ObjectiveCParser::NS_INLINE, 0);
}

tree::TerminalNode* ObjectiveCParser::TypePrefixContext::KINDOF() {
  return getToken(ObjectiveCParser::KINDOF, 0);
}


size_t ObjectiveCParser::TypePrefixContext::getRuleIndex() const {
  return ObjectiveCParser::RuleTypePrefix;
}

void ObjectiveCParser::TypePrefixContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypePrefix(this);
}

void ObjectiveCParser::TypePrefixContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypePrefix(this);
}

ObjectiveCParser::TypePrefixContext* ObjectiveCParser::typePrefix() {
  TypePrefixContext *_localctx = _tracker.createInstance<TypePrefixContext>(_ctx, getState());
  enterRule(_localctx, 174, ObjectiveCParser::RuleTypePrefix);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1052);
    _la = _input->LA(1);
    if (!(_la == ObjectiveCParser::INLINE || ((((_la - 86) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 86)) & 131215) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeQualifierContext ------------------------------------------------------------------

ObjectiveCParser::TypeQualifierContext::TypeQualifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::TypeQualifierContext::CONST() {
  return getToken(ObjectiveCParser::CONST, 0);
}

tree::TerminalNode* ObjectiveCParser::TypeQualifierContext::VOLATILE() {
  return getToken(ObjectiveCParser::VOLATILE, 0);
}

tree::TerminalNode* ObjectiveCParser::TypeQualifierContext::RESTRICT() {
  return getToken(ObjectiveCParser::RESTRICT, 0);
}

ObjectiveCParser::ProtocolQualifierContext* ObjectiveCParser::TypeQualifierContext::protocolQualifier() {
  return getRuleContext<ObjectiveCParser::ProtocolQualifierContext>(0);
}


size_t ObjectiveCParser::TypeQualifierContext::getRuleIndex() const {
  return ObjectiveCParser::RuleTypeQualifier;
}

void ObjectiveCParser::TypeQualifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeQualifier(this);
}

void ObjectiveCParser::TypeQualifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeQualifier(this);
}

ObjectiveCParser::TypeQualifierContext* ObjectiveCParser::typeQualifier() {
  TypeQualifierContext *_localctx = _tracker.createInstance<TypeQualifierContext>(_ctx, getState());
  enterRule(_localctx, 176, ObjectiveCParser::RuleTypeQualifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1058);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectiveCParser::CONST: {
        enterOuterAlt(_localctx, 1);
        setState(1054);
        match(ObjectiveCParser::CONST);
        break;
      }

      case ObjectiveCParser::VOLATILE: {
        enterOuterAlt(_localctx, 2);
        setState(1055);
        match(ObjectiveCParser::VOLATILE);
        break;
      }

      case ObjectiveCParser::RESTRICT: {
        enterOuterAlt(_localctx, 3);
        setState(1056);
        match(ObjectiveCParser::RESTRICT);
        break;
      }

      case ObjectiveCParser::BYCOPY:
      case ObjectiveCParser::BYREF:
      case ObjectiveCParser::IN:
      case ObjectiveCParser::INOUT:
      case ObjectiveCParser::ONEWAY:
      case ObjectiveCParser::OUT: {
        enterOuterAlt(_localctx, 4);
        setState(1057);
        protocolQualifier();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProtocolQualifierContext ------------------------------------------------------------------

ObjectiveCParser::ProtocolQualifierContext::ProtocolQualifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::ProtocolQualifierContext::IN() {
  return getToken(ObjectiveCParser::IN, 0);
}

tree::TerminalNode* ObjectiveCParser::ProtocolQualifierContext::OUT() {
  return getToken(ObjectiveCParser::OUT, 0);
}

tree::TerminalNode* ObjectiveCParser::ProtocolQualifierContext::INOUT() {
  return getToken(ObjectiveCParser::INOUT, 0);
}

tree::TerminalNode* ObjectiveCParser::ProtocolQualifierContext::BYCOPY() {
  return getToken(ObjectiveCParser::BYCOPY, 0);
}

tree::TerminalNode* ObjectiveCParser::ProtocolQualifierContext::BYREF() {
  return getToken(ObjectiveCParser::BYREF, 0);
}

tree::TerminalNode* ObjectiveCParser::ProtocolQualifierContext::ONEWAY() {
  return getToken(ObjectiveCParser::ONEWAY, 0);
}


size_t ObjectiveCParser::ProtocolQualifierContext::getRuleIndex() const {
  return ObjectiveCParser::RuleProtocolQualifier;
}

void ObjectiveCParser::ProtocolQualifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProtocolQualifier(this);
}

void ObjectiveCParser::ProtocolQualifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProtocolQualifier(this);
}

ObjectiveCParser::ProtocolQualifierContext* ObjectiveCParser::protocolQualifier() {
  ProtocolQualifierContext *_localctx = _tracker.createInstance<ProtocolQualifierContext>(_ctx, getState());
  enterRule(_localctx, 178, ObjectiveCParser::RuleProtocolQualifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1060);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 6979699813122048) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeSpecifierContext ------------------------------------------------------------------

ObjectiveCParser::TypeSpecifierContext::TypeSpecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::TypeSpecifierContext::VOID() {
  return getToken(ObjectiveCParser::VOID, 0);
}

tree::TerminalNode* ObjectiveCParser::TypeSpecifierContext::CHAR() {
  return getToken(ObjectiveCParser::CHAR, 0);
}

tree::TerminalNode* ObjectiveCParser::TypeSpecifierContext::SHORT() {
  return getToken(ObjectiveCParser::SHORT, 0);
}

tree::TerminalNode* ObjectiveCParser::TypeSpecifierContext::INT() {
  return getToken(ObjectiveCParser::INT, 0);
}

tree::TerminalNode* ObjectiveCParser::TypeSpecifierContext::LONG() {
  return getToken(ObjectiveCParser::LONG, 0);
}

tree::TerminalNode* ObjectiveCParser::TypeSpecifierContext::FLOAT() {
  return getToken(ObjectiveCParser::FLOAT, 0);
}

tree::TerminalNode* ObjectiveCParser::TypeSpecifierContext::DOUBLE() {
  return getToken(ObjectiveCParser::DOUBLE, 0);
}

tree::TerminalNode* ObjectiveCParser::TypeSpecifierContext::SIGNED() {
  return getToken(ObjectiveCParser::SIGNED, 0);
}

tree::TerminalNode* ObjectiveCParser::TypeSpecifierContext::UNSIGNED() {
  return getToken(ObjectiveCParser::UNSIGNED, 0);
}

ObjectiveCParser::TypeofExpressionContext* ObjectiveCParser::TypeSpecifierContext::typeofExpression() {
  return getRuleContext<ObjectiveCParser::TypeofExpressionContext>(0);
}

ObjectiveCParser::GenericTypeSpecifierContext* ObjectiveCParser::TypeSpecifierContext::genericTypeSpecifier() {
  return getRuleContext<ObjectiveCParser::GenericTypeSpecifierContext>(0);
}

ObjectiveCParser::StructOrUnionSpecifierContext* ObjectiveCParser::TypeSpecifierContext::structOrUnionSpecifier() {
  return getRuleContext<ObjectiveCParser::StructOrUnionSpecifierContext>(0);
}

ObjectiveCParser::EnumSpecifierContext* ObjectiveCParser::TypeSpecifierContext::enumSpecifier() {
  return getRuleContext<ObjectiveCParser::EnumSpecifierContext>(0);
}

ObjectiveCParser::IdentifierContext* ObjectiveCParser::TypeSpecifierContext::identifier() {
  return getRuleContext<ObjectiveCParser::IdentifierContext>(0);
}

ObjectiveCParser::PointerContext* ObjectiveCParser::TypeSpecifierContext::pointer() {
  return getRuleContext<ObjectiveCParser::PointerContext>(0);
}


size_t ObjectiveCParser::TypeSpecifierContext::getRuleIndex() const {
  return ObjectiveCParser::RuleTypeSpecifier;
}

void ObjectiveCParser::TypeSpecifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeSpecifier(this);
}

void ObjectiveCParser::TypeSpecifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeSpecifier(this);
}

ObjectiveCParser::TypeSpecifierContext* ObjectiveCParser::typeSpecifier() {
  TypeSpecifierContext *_localctx = _tracker.createInstance<TypeSpecifierContext>(_ctx, getState());
  enterRule(_localctx, 180, ObjectiveCParser::RuleTypeSpecifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1079);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 122, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1062);
      match(ObjectiveCParser::VOID);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1063);
      match(ObjectiveCParser::CHAR);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1064);
      match(ObjectiveCParser::SHORT);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1065);
      match(ObjectiveCParser::INT);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1066);
      match(ObjectiveCParser::LONG);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1067);
      match(ObjectiveCParser::FLOAT);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1068);
      match(ObjectiveCParser::DOUBLE);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1069);
      match(ObjectiveCParser::SIGNED);
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1070);
      match(ObjectiveCParser::UNSIGNED);
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(1071);
      typeofExpression();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(1072);
      genericTypeSpecifier();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(1073);
      structOrUnionSpecifier();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(1074);
      enumSpecifier();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(1075);
      identifier();
      setState(1077);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 121, _ctx)) {
      case 1: {
        setState(1076);
        pointer();
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeofExpressionContext ------------------------------------------------------------------

ObjectiveCParser::TypeofExpressionContext::TypeofExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::TypeofExpressionContext::TYPEOF() {
  return getToken(ObjectiveCParser::TYPEOF, 0);
}

tree::TerminalNode* ObjectiveCParser::TypeofExpressionContext::LP() {
  return getToken(ObjectiveCParser::LP, 0);
}

ObjectiveCParser::ExpressionContext* ObjectiveCParser::TypeofExpressionContext::expression() {
  return getRuleContext<ObjectiveCParser::ExpressionContext>(0);
}

tree::TerminalNode* ObjectiveCParser::TypeofExpressionContext::RP() {
  return getToken(ObjectiveCParser::RP, 0);
}


size_t ObjectiveCParser::TypeofExpressionContext::getRuleIndex() const {
  return ObjectiveCParser::RuleTypeofExpression;
}

void ObjectiveCParser::TypeofExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeofExpression(this);
}

void ObjectiveCParser::TypeofExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeofExpression(this);
}

ObjectiveCParser::TypeofExpressionContext* ObjectiveCParser::typeofExpression() {
  TypeofExpressionContext *_localctx = _tracker.createInstance<TypeofExpressionContext>(_ctx, getState());
  enterRule(_localctx, 182, ObjectiveCParser::RuleTypeofExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1081);
    match(ObjectiveCParser::TYPEOF);

    setState(1082);
    match(ObjectiveCParser::LP);
    setState(1083);
    expression(0);
    setState(1084);
    match(ObjectiveCParser::RP);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FieldDeclaratorListContext ------------------------------------------------------------------

ObjectiveCParser::FieldDeclaratorListContext::FieldDeclaratorListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectiveCParser::FieldDeclaratorContext *> ObjectiveCParser::FieldDeclaratorListContext::fieldDeclarator() {
  return getRuleContexts<ObjectiveCParser::FieldDeclaratorContext>();
}

ObjectiveCParser::FieldDeclaratorContext* ObjectiveCParser::FieldDeclaratorListContext::fieldDeclarator(size_t i) {
  return getRuleContext<ObjectiveCParser::FieldDeclaratorContext>(i);
}

std::vector<tree::TerminalNode *> ObjectiveCParser::FieldDeclaratorListContext::COMMA() {
  return getTokens(ObjectiveCParser::COMMA);
}

tree::TerminalNode* ObjectiveCParser::FieldDeclaratorListContext::COMMA(size_t i) {
  return getToken(ObjectiveCParser::COMMA, i);
}


size_t ObjectiveCParser::FieldDeclaratorListContext::getRuleIndex() const {
  return ObjectiveCParser::RuleFieldDeclaratorList;
}

void ObjectiveCParser::FieldDeclaratorListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFieldDeclaratorList(this);
}

void ObjectiveCParser::FieldDeclaratorListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFieldDeclaratorList(this);
}

ObjectiveCParser::FieldDeclaratorListContext* ObjectiveCParser::fieldDeclaratorList() {
  FieldDeclaratorListContext *_localctx = _tracker.createInstance<FieldDeclaratorListContext>(_ctx, getState());
  enterRule(_localctx, 184, ObjectiveCParser::RuleFieldDeclaratorList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1086);
    fieldDeclarator();
    setState(1091);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectiveCParser::COMMA) {
      setState(1087);
      match(ObjectiveCParser::COMMA);
      setState(1088);
      fieldDeclarator();
      setState(1093);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FieldDeclaratorContext ------------------------------------------------------------------

ObjectiveCParser::FieldDeclaratorContext::FieldDeclaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectiveCParser::DeclaratorContext* ObjectiveCParser::FieldDeclaratorContext::declarator() {
  return getRuleContext<ObjectiveCParser::DeclaratorContext>(0);
}

tree::TerminalNode* ObjectiveCParser::FieldDeclaratorContext::COLON() {
  return getToken(ObjectiveCParser::COLON, 0);
}

ObjectiveCParser::ConstantContext* ObjectiveCParser::FieldDeclaratorContext::constant() {
  return getRuleContext<ObjectiveCParser::ConstantContext>(0);
}


size_t ObjectiveCParser::FieldDeclaratorContext::getRuleIndex() const {
  return ObjectiveCParser::RuleFieldDeclarator;
}

void ObjectiveCParser::FieldDeclaratorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFieldDeclarator(this);
}

void ObjectiveCParser::FieldDeclaratorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFieldDeclarator(this);
}

ObjectiveCParser::FieldDeclaratorContext* ObjectiveCParser::fieldDeclarator() {
  FieldDeclaratorContext *_localctx = _tracker.createInstance<FieldDeclaratorContext>(_ctx, getState());
  enterRule(_localctx, 186, ObjectiveCParser::RuleFieldDeclarator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1100);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 125, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1094);
      declarator();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1096);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 40) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 40)) & -414491694415611649) != 0) || ((((_la - 104) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 104)) & 1125899913166847) != 0)) {
        setState(1095);
        declarator();
      }
      setState(1098);
      match(ObjectiveCParser::COLON);
      setState(1099);
      constant();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumSpecifierContext ------------------------------------------------------------------

ObjectiveCParser::EnumSpecifierContext::EnumSpecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::EnumSpecifierContext::ENUM() {
  return getToken(ObjectiveCParser::ENUM, 0);
}

std::vector<ObjectiveCParser::IdentifierContext *> ObjectiveCParser::EnumSpecifierContext::identifier() {
  return getRuleContexts<ObjectiveCParser::IdentifierContext>();
}

ObjectiveCParser::IdentifierContext* ObjectiveCParser::EnumSpecifierContext::identifier(size_t i) {
  return getRuleContext<ObjectiveCParser::IdentifierContext>(i);
}

tree::TerminalNode* ObjectiveCParser::EnumSpecifierContext::LBRACE() {
  return getToken(ObjectiveCParser::LBRACE, 0);
}

ObjectiveCParser::EnumeratorListContext* ObjectiveCParser::EnumSpecifierContext::enumeratorList() {
  return getRuleContext<ObjectiveCParser::EnumeratorListContext>(0);
}

tree::TerminalNode* ObjectiveCParser::EnumSpecifierContext::RBRACE() {
  return getToken(ObjectiveCParser::RBRACE, 0);
}

tree::TerminalNode* ObjectiveCParser::EnumSpecifierContext::COLON() {
  return getToken(ObjectiveCParser::COLON, 0);
}

ObjectiveCParser::TypeNameContext* ObjectiveCParser::EnumSpecifierContext::typeName() {
  return getRuleContext<ObjectiveCParser::TypeNameContext>(0);
}

tree::TerminalNode* ObjectiveCParser::EnumSpecifierContext::LP() {
  return getToken(ObjectiveCParser::LP, 0);
}

tree::TerminalNode* ObjectiveCParser::EnumSpecifierContext::COMMA() {
  return getToken(ObjectiveCParser::COMMA, 0);
}

tree::TerminalNode* ObjectiveCParser::EnumSpecifierContext::RP() {
  return getToken(ObjectiveCParser::RP, 0);
}

tree::TerminalNode* ObjectiveCParser::EnumSpecifierContext::NS_OPTIONS() {
  return getToken(ObjectiveCParser::NS_OPTIONS, 0);
}

tree::TerminalNode* ObjectiveCParser::EnumSpecifierContext::NS_ENUM() {
  return getToken(ObjectiveCParser::NS_ENUM, 0);
}


size_t ObjectiveCParser::EnumSpecifierContext::getRuleIndex() const {
  return ObjectiveCParser::RuleEnumSpecifier;
}

void ObjectiveCParser::EnumSpecifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumSpecifier(this);
}

void ObjectiveCParser::EnumSpecifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumSpecifier(this);
}

ObjectiveCParser::EnumSpecifierContext* ObjectiveCParser::enumSpecifier() {
  EnumSpecifierContext *_localctx = _tracker.createInstance<EnumSpecifierContext>(_ctx, getState());
  enterRule(_localctx, 188, ObjectiveCParser::RuleEnumSpecifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1133);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectiveCParser::ENUM: {
        enterOuterAlt(_localctx, 1);
        setState(1102);
        match(ObjectiveCParser::ENUM);
        setState(1108);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 127, _ctx)) {
        case 1: {
          setState(1104);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if ((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 142143763727253504) != 0) || ((((_la - 81) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 81)) & 17867063762871) != 0)) {
            setState(1103);
            identifier();
          }
          setState(1106);
          match(ObjectiveCParser::COLON);
          setState(1107);
          typeName();
          break;
        }

        default:
          break;
        }
        setState(1121);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case ObjectiveCParser::BOOL:
          case ObjectiveCParser::Class:
          case ObjectiveCParser::BYCOPY:
          case ObjectiveCParser::BYREF:
          case ObjectiveCParser::ID:
          case ObjectiveCParser::IMP:
          case ObjectiveCParser::IN:
          case ObjectiveCParser::INOUT:
          case ObjectiveCParser::ONEWAY:
          case ObjectiveCParser::OUT:
          case ObjectiveCParser::PROTOCOL_:
          case ObjectiveCParser::SEL:
          case ObjectiveCParser::SELF:
          case ObjectiveCParser::SUPER:
          case ObjectiveCParser::ATOMIC:
          case ObjectiveCParser::NONATOMIC:
          case ObjectiveCParser::RETAIN:
          case ObjectiveCParser::AUTORELEASING_QUALIFIER:
          case ObjectiveCParser::BLOCK:
          case ObjectiveCParser::BRIDGE_RETAINED:
          case ObjectiveCParser::BRIDGE_TRANSFER:
          case ObjectiveCParser::COVARIANT:
          case ObjectiveCParser::CONTRAVARIANT:
          case ObjectiveCParser::DEPRECATED:
          case ObjectiveCParser::KINDOF:
          case ObjectiveCParser::UNUSED:
          case ObjectiveCParser::NULL_UNSPECIFIED:
          case ObjectiveCParser::NULLABLE:
          case ObjectiveCParser::NONNULL:
          case ObjectiveCParser::NULL_RESETTABLE:
          case ObjectiveCParser::NS_INLINE:
          case ObjectiveCParser::NS_ENUM:
          case ObjectiveCParser::NS_OPTIONS:
          case ObjectiveCParser::ASSIGN:
          case ObjectiveCParser::COPY:
          case ObjectiveCParser::GETTER:
          case ObjectiveCParser::SETTER:
          case ObjectiveCParser::STRONG:
          case ObjectiveCParser::READONLY:
          case ObjectiveCParser::READWRITE:
          case ObjectiveCParser::WEAK:
          case ObjectiveCParser::UNSAFE_UNRETAINED:
          case ObjectiveCParser::IB_OUTLET:
          case ObjectiveCParser::IB_OUTLET_COLLECTION:
          case ObjectiveCParser::IB_INSPECTABLE:
          case ObjectiveCParser::IB_DESIGNABLE:
          case ObjectiveCParser::IDENTIFIER: {
            setState(1110);
            identifier();
            setState(1115);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 128, _ctx)) {
            case 1: {
              setState(1111);
              match(ObjectiveCParser::LBRACE);
              setState(1112);
              enumeratorList();
              setState(1113);
              match(ObjectiveCParser::RBRACE);
              break;
            }

            default:
              break;
            }
            break;
          }

          case ObjectiveCParser::LBRACE: {
            setState(1117);
            match(ObjectiveCParser::LBRACE);
            setState(1118);
            enumeratorList();
            setState(1119);
            match(ObjectiveCParser::RBRACE);
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        break;
      }

      case ObjectiveCParser::NS_ENUM:
      case ObjectiveCParser::NS_OPTIONS: {
        enterOuterAlt(_localctx, 2);
        setState(1123);
        _la = _input->LA(1);
        if (!(_la == ObjectiveCParser::NS_ENUM

        || _la == ObjectiveCParser::NS_OPTIONS)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(1124);
        match(ObjectiveCParser::LP);
        setState(1125);
        typeName();
        setState(1126);
        match(ObjectiveCParser::COMMA);
        setState(1127);
        identifier();
        setState(1128);
        match(ObjectiveCParser::RP);
        setState(1129);
        match(ObjectiveCParser::LBRACE);
        setState(1130);
        enumeratorList();
        setState(1131);
        match(ObjectiveCParser::RBRACE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumeratorListContext ------------------------------------------------------------------

ObjectiveCParser::EnumeratorListContext::EnumeratorListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectiveCParser::EnumeratorContext *> ObjectiveCParser::EnumeratorListContext::enumerator() {
  return getRuleContexts<ObjectiveCParser::EnumeratorContext>();
}

ObjectiveCParser::EnumeratorContext* ObjectiveCParser::EnumeratorListContext::enumerator(size_t i) {
  return getRuleContext<ObjectiveCParser::EnumeratorContext>(i);
}

std::vector<tree::TerminalNode *> ObjectiveCParser::EnumeratorListContext::COMMA() {
  return getTokens(ObjectiveCParser::COMMA);
}

tree::TerminalNode* ObjectiveCParser::EnumeratorListContext::COMMA(size_t i) {
  return getToken(ObjectiveCParser::COMMA, i);
}


size_t ObjectiveCParser::EnumeratorListContext::getRuleIndex() const {
  return ObjectiveCParser::RuleEnumeratorList;
}

void ObjectiveCParser::EnumeratorListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumeratorList(this);
}

void ObjectiveCParser::EnumeratorListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumeratorList(this);
}

ObjectiveCParser::EnumeratorListContext* ObjectiveCParser::enumeratorList() {
  EnumeratorListContext *_localctx = _tracker.createInstance<EnumeratorListContext>(_ctx, getState());
  enterRule(_localctx, 190, ObjectiveCParser::RuleEnumeratorList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1135);
    enumerator();
    setState(1140);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 131, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1136);
        match(ObjectiveCParser::COMMA);
        setState(1137);
        enumerator(); 
      }
      setState(1142);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 131, _ctx);
    }
    setState(1144);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectiveCParser::COMMA) {
      setState(1143);
      match(ObjectiveCParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumeratorContext ------------------------------------------------------------------

ObjectiveCParser::EnumeratorContext::EnumeratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectiveCParser::EnumeratorIdentifierContext* ObjectiveCParser::EnumeratorContext::enumeratorIdentifier() {
  return getRuleContext<ObjectiveCParser::EnumeratorIdentifierContext>(0);
}

tree::TerminalNode* ObjectiveCParser::EnumeratorContext::ASSIGNMENT() {
  return getToken(ObjectiveCParser::ASSIGNMENT, 0);
}

ObjectiveCParser::ExpressionContext* ObjectiveCParser::EnumeratorContext::expression() {
  return getRuleContext<ObjectiveCParser::ExpressionContext>(0);
}


size_t ObjectiveCParser::EnumeratorContext::getRuleIndex() const {
  return ObjectiveCParser::RuleEnumerator;
}

void ObjectiveCParser::EnumeratorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumerator(this);
}

void ObjectiveCParser::EnumeratorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumerator(this);
}

ObjectiveCParser::EnumeratorContext* ObjectiveCParser::enumerator() {
  EnumeratorContext *_localctx = _tracker.createInstance<EnumeratorContext>(_ctx, getState());
  enterRule(_localctx, 192, ObjectiveCParser::RuleEnumerator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1146);
    enumeratorIdentifier();
    setState(1149);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectiveCParser::ASSIGNMENT) {
      setState(1147);
      match(ObjectiveCParser::ASSIGNMENT);
      setState(1148);
      expression(0);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumeratorIdentifierContext ------------------------------------------------------------------

ObjectiveCParser::EnumeratorIdentifierContext::EnumeratorIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectiveCParser::IdentifierContext* ObjectiveCParser::EnumeratorIdentifierContext::identifier() {
  return getRuleContext<ObjectiveCParser::IdentifierContext>(0);
}

tree::TerminalNode* ObjectiveCParser::EnumeratorIdentifierContext::DEFAULT() {
  return getToken(ObjectiveCParser::DEFAULT, 0);
}


size_t ObjectiveCParser::EnumeratorIdentifierContext::getRuleIndex() const {
  return ObjectiveCParser::RuleEnumeratorIdentifier;
}

void ObjectiveCParser::EnumeratorIdentifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumeratorIdentifier(this);
}

void ObjectiveCParser::EnumeratorIdentifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumeratorIdentifier(this);
}

ObjectiveCParser::EnumeratorIdentifierContext* ObjectiveCParser::enumeratorIdentifier() {
  EnumeratorIdentifierContext *_localctx = _tracker.createInstance<EnumeratorIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 194, ObjectiveCParser::RuleEnumeratorIdentifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1153);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectiveCParser::BOOL:
      case ObjectiveCParser::Class:
      case ObjectiveCParser::BYCOPY:
      case ObjectiveCParser::BYREF:
      case ObjectiveCParser::ID:
      case ObjectiveCParser::IMP:
      case ObjectiveCParser::IN:
      case ObjectiveCParser::INOUT:
      case ObjectiveCParser::ONEWAY:
      case ObjectiveCParser::OUT:
      case ObjectiveCParser::PROTOCOL_:
      case ObjectiveCParser::SEL:
      case ObjectiveCParser::SELF:
      case ObjectiveCParser::SUPER:
      case ObjectiveCParser::ATOMIC:
      case ObjectiveCParser::NONATOMIC:
      case ObjectiveCParser::RETAIN:
      case ObjectiveCParser::AUTORELEASING_QUALIFIER:
      case ObjectiveCParser::BLOCK:
      case ObjectiveCParser::BRIDGE_RETAINED:
      case ObjectiveCParser::BRIDGE_TRANSFER:
      case ObjectiveCParser::COVARIANT:
      case ObjectiveCParser::CONTRAVARIANT:
      case ObjectiveCParser::DEPRECATED:
      case ObjectiveCParser::KINDOF:
      case ObjectiveCParser::UNUSED:
      case ObjectiveCParser::NULL_UNSPECIFIED:
      case ObjectiveCParser::NULLABLE:
      case ObjectiveCParser::NONNULL:
      case ObjectiveCParser::NULL_RESETTABLE:
      case ObjectiveCParser::NS_INLINE:
      case ObjectiveCParser::NS_ENUM:
      case ObjectiveCParser::NS_OPTIONS:
      case ObjectiveCParser::ASSIGN:
      case ObjectiveCParser::COPY:
      case ObjectiveCParser::GETTER:
      case ObjectiveCParser::SETTER:
      case ObjectiveCParser::STRONG:
      case ObjectiveCParser::READONLY:
      case ObjectiveCParser::READWRITE:
      case ObjectiveCParser::WEAK:
      case ObjectiveCParser::UNSAFE_UNRETAINED:
      case ObjectiveCParser::IB_OUTLET:
      case ObjectiveCParser::IB_OUTLET_COLLECTION:
      case ObjectiveCParser::IB_INSPECTABLE:
      case ObjectiveCParser::IB_DESIGNABLE:
      case ObjectiveCParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(1151);
        identifier();
        break;
      }

      case ObjectiveCParser::DEFAULT: {
        enterOuterAlt(_localctx, 2);
        setState(1152);
        match(ObjectiveCParser::DEFAULT);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DirectDeclaratorContext ------------------------------------------------------------------

ObjectiveCParser::DirectDeclaratorContext::DirectDeclaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectiveCParser::IdentifierContext* ObjectiveCParser::DirectDeclaratorContext::identifier() {
  return getRuleContext<ObjectiveCParser::IdentifierContext>(0);
}

tree::TerminalNode* ObjectiveCParser::DirectDeclaratorContext::LP() {
  return getToken(ObjectiveCParser::LP, 0);
}

ObjectiveCParser::DeclaratorContext* ObjectiveCParser::DirectDeclaratorContext::declarator() {
  return getRuleContext<ObjectiveCParser::DeclaratorContext>(0);
}

tree::TerminalNode* ObjectiveCParser::DirectDeclaratorContext::RP() {
  return getToken(ObjectiveCParser::RP, 0);
}

std::vector<ObjectiveCParser::DeclaratorSuffixContext *> ObjectiveCParser::DirectDeclaratorContext::declaratorSuffix() {
  return getRuleContexts<ObjectiveCParser::DeclaratorSuffixContext>();
}

ObjectiveCParser::DeclaratorSuffixContext* ObjectiveCParser::DirectDeclaratorContext::declaratorSuffix(size_t i) {
  return getRuleContext<ObjectiveCParser::DeclaratorSuffixContext>(i);
}

tree::TerminalNode* ObjectiveCParser::DirectDeclaratorContext::BITXOR() {
  return getToken(ObjectiveCParser::BITXOR, 0);
}

ObjectiveCParser::BlockParametersContext* ObjectiveCParser::DirectDeclaratorContext::blockParameters() {
  return getRuleContext<ObjectiveCParser::BlockParametersContext>(0);
}

ObjectiveCParser::NullabilitySpecifierContext* ObjectiveCParser::DirectDeclaratorContext::nullabilitySpecifier() {
  return getRuleContext<ObjectiveCParser::NullabilitySpecifierContext>(0);
}


size_t ObjectiveCParser::DirectDeclaratorContext::getRuleIndex() const {
  return ObjectiveCParser::RuleDirectDeclarator;
}

void ObjectiveCParser::DirectDeclaratorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDirectDeclarator(this);
}

void ObjectiveCParser::DirectDeclaratorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDirectDeclarator(this);
}

ObjectiveCParser::DirectDeclaratorContext* ObjectiveCParser::directDeclarator() {
  DirectDeclaratorContext *_localctx = _tracker.createInstance<DirectDeclaratorContext>(_ctx, getState());
  enterRule(_localctx, 196, ObjectiveCParser::RuleDirectDeclarator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1178);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 139, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1160);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case ObjectiveCParser::BOOL:
        case ObjectiveCParser::Class:
        case ObjectiveCParser::BYCOPY:
        case ObjectiveCParser::BYREF:
        case ObjectiveCParser::ID:
        case ObjectiveCParser::IMP:
        case ObjectiveCParser::IN:
        case ObjectiveCParser::INOUT:
        case ObjectiveCParser::ONEWAY:
        case ObjectiveCParser::OUT:
        case ObjectiveCParser::PROTOCOL_:
        case ObjectiveCParser::SEL:
        case ObjectiveCParser::SELF:
        case ObjectiveCParser::SUPER:
        case ObjectiveCParser::ATOMIC:
        case ObjectiveCParser::NONATOMIC:
        case ObjectiveCParser::RETAIN:
        case ObjectiveCParser::AUTORELEASING_QUALIFIER:
        case ObjectiveCParser::BLOCK:
        case ObjectiveCParser::BRIDGE_RETAINED:
        case ObjectiveCParser::BRIDGE_TRANSFER:
        case ObjectiveCParser::COVARIANT:
        case ObjectiveCParser::CONTRAVARIANT:
        case ObjectiveCParser::DEPRECATED:
        case ObjectiveCParser::KINDOF:
        case ObjectiveCParser::UNUSED:
        case ObjectiveCParser::NULL_UNSPECIFIED:
        case ObjectiveCParser::NULLABLE:
        case ObjectiveCParser::NONNULL:
        case ObjectiveCParser::NULL_RESETTABLE:
        case ObjectiveCParser::NS_INLINE:
        case ObjectiveCParser::NS_ENUM:
        case ObjectiveCParser::NS_OPTIONS:
        case ObjectiveCParser::ASSIGN:
        case ObjectiveCParser::COPY:
        case ObjectiveCParser::GETTER:
        case ObjectiveCParser::SETTER:
        case ObjectiveCParser::STRONG:
        case ObjectiveCParser::READONLY:
        case ObjectiveCParser::READWRITE:
        case ObjectiveCParser::WEAK:
        case ObjectiveCParser::UNSAFE_UNRETAINED:
        case ObjectiveCParser::IB_OUTLET:
        case ObjectiveCParser::IB_OUTLET_COLLECTION:
        case ObjectiveCParser::IB_INSPECTABLE:
        case ObjectiveCParser::IB_DESIGNABLE:
        case ObjectiveCParser::IDENTIFIER: {
          setState(1155);
          identifier();
          break;
        }

        case ObjectiveCParser::LP: {
          setState(1156);
          match(ObjectiveCParser::LP);
          setState(1157);
          declarator();
          setState(1158);
          match(ObjectiveCParser::RP);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(1165);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == ObjectiveCParser::LBRACK) {
        setState(1162);
        declaratorSuffix();
        setState(1167);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1168);
      match(ObjectiveCParser::LP);
      setState(1169);
      match(ObjectiveCParser::BITXOR);
      setState(1171);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 137, _ctx)) {
      case 1: {
        setState(1170);
        nullabilitySpecifier();
        break;
      }

      default:
        break;
      }
      setState(1174);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 142143763727253504) != 0) || ((((_la - 81) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 81)) & 17867063762871) != 0)) {
        setState(1173);
        identifier();
      }
      setState(1176);
      match(ObjectiveCParser::RP);
      setState(1177);
      blockParameters();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeclaratorSuffixContext ------------------------------------------------------------------

ObjectiveCParser::DeclaratorSuffixContext::DeclaratorSuffixContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::DeclaratorSuffixContext::LBRACK() {
  return getToken(ObjectiveCParser::LBRACK, 0);
}

tree::TerminalNode* ObjectiveCParser::DeclaratorSuffixContext::RBRACK() {
  return getToken(ObjectiveCParser::RBRACK, 0);
}

ObjectiveCParser::ConstantExpressionContext* ObjectiveCParser::DeclaratorSuffixContext::constantExpression() {
  return getRuleContext<ObjectiveCParser::ConstantExpressionContext>(0);
}


size_t ObjectiveCParser::DeclaratorSuffixContext::getRuleIndex() const {
  return ObjectiveCParser::RuleDeclaratorSuffix;
}

void ObjectiveCParser::DeclaratorSuffixContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeclaratorSuffix(this);
}

void ObjectiveCParser::DeclaratorSuffixContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeclaratorSuffix(this);
}

ObjectiveCParser::DeclaratorSuffixContext* ObjectiveCParser::declaratorSuffix() {
  DeclaratorSuffixContext *_localctx = _tracker.createInstance<DeclaratorSuffixContext>(_ctx, getState());
  enterRule(_localctx, 198, ObjectiveCParser::RuleDeclaratorSuffix);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1180);
    match(ObjectiveCParser::LBRACK);
    setState(1182);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 288230101273804800) != 0) || ((((_la - 81) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 81)) & 17867063762871) != 0) || ((((_la - 152) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 152)) & 65536003) != 0)) {
      setState(1181);
      constantExpression();
    }
    setState(1184);
    match(ObjectiveCParser::RBRACK);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParameterListContext ------------------------------------------------------------------

ObjectiveCParser::ParameterListContext::ParameterListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectiveCParser::ParameterDeclarationListContext* ObjectiveCParser::ParameterListContext::parameterDeclarationList() {
  return getRuleContext<ObjectiveCParser::ParameterDeclarationListContext>(0);
}

tree::TerminalNode* ObjectiveCParser::ParameterListContext::COMMA() {
  return getToken(ObjectiveCParser::COMMA, 0);
}

tree::TerminalNode* ObjectiveCParser::ParameterListContext::ELIPSIS() {
  return getToken(ObjectiveCParser::ELIPSIS, 0);
}


size_t ObjectiveCParser::ParameterListContext::getRuleIndex() const {
  return ObjectiveCParser::RuleParameterList;
}

void ObjectiveCParser::ParameterListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParameterList(this);
}

void ObjectiveCParser::ParameterListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParameterList(this);
}

ObjectiveCParser::ParameterListContext* ObjectiveCParser::parameterList() {
  ParameterListContext *_localctx = _tracker.createInstance<ParameterListContext>(_ctx, getState());
  enterRule(_localctx, 200, ObjectiveCParser::RuleParameterList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1186);
    parameterDeclarationList();
    setState(1189);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectiveCParser::COMMA) {
      setState(1187);
      match(ObjectiveCParser::COMMA);
      setState(1188);
      match(ObjectiveCParser::ELIPSIS);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PointerContext ------------------------------------------------------------------

ObjectiveCParser::PointerContext::PointerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::PointerContext::MUL() {
  return getToken(ObjectiveCParser::MUL, 0);
}

ObjectiveCParser::DeclarationSpecifiersContext* ObjectiveCParser::PointerContext::declarationSpecifiers() {
  return getRuleContext<ObjectiveCParser::DeclarationSpecifiersContext>(0);
}

ObjectiveCParser::PointerContext* ObjectiveCParser::PointerContext::pointer() {
  return getRuleContext<ObjectiveCParser::PointerContext>(0);
}


size_t ObjectiveCParser::PointerContext::getRuleIndex() const {
  return ObjectiveCParser::RulePointer;
}

void ObjectiveCParser::PointerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPointer(this);
}

void ObjectiveCParser::PointerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPointer(this);
}

ObjectiveCParser::PointerContext* ObjectiveCParser::pointer() {
  PointerContext *_localctx = _tracker.createInstance<PointerContext>(_ctx, getState());
  enterRule(_localctx, 202, ObjectiveCParser::RulePointer);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1191);
    match(ObjectiveCParser::MUL);
    setState(1193);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 142, _ctx)) {
    case 1: {
      setState(1192);
      declarationSpecifiers();
      break;
    }

    default:
      break;
    }
    setState(1196);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 143, _ctx)) {
    case 1: {
      setState(1195);
      pointer();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MacroContext ------------------------------------------------------------------

ObjectiveCParser::MacroContext::MacroContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectiveCParser::IdentifierContext* ObjectiveCParser::MacroContext::identifier() {
  return getRuleContext<ObjectiveCParser::IdentifierContext>(0);
}

tree::TerminalNode* ObjectiveCParser::MacroContext::LP() {
  return getToken(ObjectiveCParser::LP, 0);
}

std::vector<ObjectiveCParser::PrimaryExpressionContext *> ObjectiveCParser::MacroContext::primaryExpression() {
  return getRuleContexts<ObjectiveCParser::PrimaryExpressionContext>();
}

ObjectiveCParser::PrimaryExpressionContext* ObjectiveCParser::MacroContext::primaryExpression(size_t i) {
  return getRuleContext<ObjectiveCParser::PrimaryExpressionContext>(i);
}

tree::TerminalNode* ObjectiveCParser::MacroContext::RP() {
  return getToken(ObjectiveCParser::RP, 0);
}

std::vector<tree::TerminalNode *> ObjectiveCParser::MacroContext::COMMA() {
  return getTokens(ObjectiveCParser::COMMA);
}

tree::TerminalNode* ObjectiveCParser::MacroContext::COMMA(size_t i) {
  return getToken(ObjectiveCParser::COMMA, i);
}


size_t ObjectiveCParser::MacroContext::getRuleIndex() const {
  return ObjectiveCParser::RuleMacro;
}

void ObjectiveCParser::MacroContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMacro(this);
}

void ObjectiveCParser::MacroContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMacro(this);
}

ObjectiveCParser::MacroContext* ObjectiveCParser::macro() {
  MacroContext *_localctx = _tracker.createInstance<MacroContext>(_ctx, getState());
  enterRule(_localctx, 204, ObjectiveCParser::RuleMacro);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1198);
    identifier();
    setState(1210);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectiveCParser::LP) {
      setState(1199);
      match(ObjectiveCParser::LP);
      setState(1200);
      primaryExpression();
      setState(1205);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == ObjectiveCParser::COMMA) {
        setState(1201);
        match(ObjectiveCParser::COMMA);
        setState(1202);
        primaryExpression();
        setState(1207);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1208);
      match(ObjectiveCParser::RP);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayInitializerContext ------------------------------------------------------------------

ObjectiveCParser::ArrayInitializerContext::ArrayInitializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::ArrayInitializerContext::LBRACE() {
  return getToken(ObjectiveCParser::LBRACE, 0);
}

tree::TerminalNode* ObjectiveCParser::ArrayInitializerContext::RBRACE() {
  return getToken(ObjectiveCParser::RBRACE, 0);
}

ObjectiveCParser::ExpressionsContext* ObjectiveCParser::ArrayInitializerContext::expressions() {
  return getRuleContext<ObjectiveCParser::ExpressionsContext>(0);
}

tree::TerminalNode* ObjectiveCParser::ArrayInitializerContext::COMMA() {
  return getToken(ObjectiveCParser::COMMA, 0);
}


size_t ObjectiveCParser::ArrayInitializerContext::getRuleIndex() const {
  return ObjectiveCParser::RuleArrayInitializer;
}

void ObjectiveCParser::ArrayInitializerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArrayInitializer(this);
}

void ObjectiveCParser::ArrayInitializerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArrayInitializer(this);
}

ObjectiveCParser::ArrayInitializerContext* ObjectiveCParser::arrayInitializer() {
  ArrayInitializerContext *_localctx = _tracker.createInstance<ArrayInitializerContext>(_ctx, getState());
  enterRule(_localctx, 206, ObjectiveCParser::RuleArrayInitializer);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1212);
    match(ObjectiveCParser::LBRACE);
    setState(1217);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 4899916119734747136) != 0) || ((((_la - 69) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 69)) & 2523141690462269569) != 0) || ((((_la - 136) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 136)) & 4363692523569) != 0)) {
      setState(1213);
      expressions();
      setState(1215);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ObjectiveCParser::COMMA) {
        setState(1214);
        match(ObjectiveCParser::COMMA);
      }
    }
    setState(1219);
    match(ObjectiveCParser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StructInitializerContext ------------------------------------------------------------------

ObjectiveCParser::StructInitializerContext::StructInitializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::StructInitializerContext::LBRACE() {
  return getToken(ObjectiveCParser::LBRACE, 0);
}

tree::TerminalNode* ObjectiveCParser::StructInitializerContext::RBRACE() {
  return getToken(ObjectiveCParser::RBRACE, 0);
}

std::vector<tree::TerminalNode *> ObjectiveCParser::StructInitializerContext::DOT() {
  return getTokens(ObjectiveCParser::DOT);
}

tree::TerminalNode* ObjectiveCParser::StructInitializerContext::DOT(size_t i) {
  return getToken(ObjectiveCParser::DOT, i);
}

std::vector<ObjectiveCParser::ExpressionContext *> ObjectiveCParser::StructInitializerContext::expression() {
  return getRuleContexts<ObjectiveCParser::ExpressionContext>();
}

ObjectiveCParser::ExpressionContext* ObjectiveCParser::StructInitializerContext::expression(size_t i) {
  return getRuleContext<ObjectiveCParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> ObjectiveCParser::StructInitializerContext::COMMA() {
  return getTokens(ObjectiveCParser::COMMA);
}

tree::TerminalNode* ObjectiveCParser::StructInitializerContext::COMMA(size_t i) {
  return getToken(ObjectiveCParser::COMMA, i);
}


size_t ObjectiveCParser::StructInitializerContext::getRuleIndex() const {
  return ObjectiveCParser::RuleStructInitializer;
}

void ObjectiveCParser::StructInitializerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStructInitializer(this);
}

void ObjectiveCParser::StructInitializerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStructInitializer(this);
}

ObjectiveCParser::StructInitializerContext* ObjectiveCParser::structInitializer() {
  StructInitializerContext *_localctx = _tracker.createInstance<StructInitializerContext>(_ctx, getState());
  enterRule(_localctx, 208, ObjectiveCParser::RuleStructInitializer);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1221);
    match(ObjectiveCParser::LBRACE);
    setState(1235);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectiveCParser::DOT) {
      setState(1222);
      match(ObjectiveCParser::DOT);
      setState(1223);
      expression(0);
      setState(1229);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 148, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1224);
          match(ObjectiveCParser::COMMA);
          setState(1225);
          match(ObjectiveCParser::DOT);
          setState(1226);
          expression(0); 
        }
        setState(1231);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 148, _ctx);
      }
      setState(1233);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ObjectiveCParser::COMMA) {
        setState(1232);
        match(ObjectiveCParser::COMMA);
      }
    }
    setState(1237);
    match(ObjectiveCParser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InitializerListContext ------------------------------------------------------------------

ObjectiveCParser::InitializerListContext::InitializerListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectiveCParser::InitializerContext *> ObjectiveCParser::InitializerListContext::initializer() {
  return getRuleContexts<ObjectiveCParser::InitializerContext>();
}

ObjectiveCParser::InitializerContext* ObjectiveCParser::InitializerListContext::initializer(size_t i) {
  return getRuleContext<ObjectiveCParser::InitializerContext>(i);
}

std::vector<tree::TerminalNode *> ObjectiveCParser::InitializerListContext::COMMA() {
  return getTokens(ObjectiveCParser::COMMA);
}

tree::TerminalNode* ObjectiveCParser::InitializerListContext::COMMA(size_t i) {
  return getToken(ObjectiveCParser::COMMA, i);
}


size_t ObjectiveCParser::InitializerListContext::getRuleIndex() const {
  return ObjectiveCParser::RuleInitializerList;
}

void ObjectiveCParser::InitializerListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInitializerList(this);
}

void ObjectiveCParser::InitializerListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInitializerList(this);
}

ObjectiveCParser::InitializerListContext* ObjectiveCParser::initializerList() {
  InitializerListContext *_localctx = _tracker.createInstance<InitializerListContext>(_ctx, getState());
  enterRule(_localctx, 210, ObjectiveCParser::RuleInitializerList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1239);
    initializer();
    setState(1244);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 151, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1240);
        match(ObjectiveCParser::COMMA);
        setState(1241);
        initializer(); 
      }
      setState(1246);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 151, _ctx);
    }
    setState(1248);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectiveCParser::COMMA) {
      setState(1247);
      match(ObjectiveCParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeNameContext ------------------------------------------------------------------

ObjectiveCParser::TypeNameContext::TypeNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectiveCParser::SpecifierQualifierListContext* ObjectiveCParser::TypeNameContext::specifierQualifierList() {
  return getRuleContext<ObjectiveCParser::SpecifierQualifierListContext>(0);
}

ObjectiveCParser::AbstractDeclaratorContext* ObjectiveCParser::TypeNameContext::abstractDeclarator() {
  return getRuleContext<ObjectiveCParser::AbstractDeclaratorContext>(0);
}

ObjectiveCParser::BlockTypeContext* ObjectiveCParser::TypeNameContext::blockType() {
  return getRuleContext<ObjectiveCParser::BlockTypeContext>(0);
}


size_t ObjectiveCParser::TypeNameContext::getRuleIndex() const {
  return ObjectiveCParser::RuleTypeName;
}

void ObjectiveCParser::TypeNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeName(this);
}

void ObjectiveCParser::TypeNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeName(this);
}

ObjectiveCParser::TypeNameContext* ObjectiveCParser::typeName() {
  TypeNameContext *_localctx = _tracker.createInstance<TypeNameContext>(_ctx, getState());
  enterRule(_localctx, 212, ObjectiveCParser::RuleTypeName);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1255);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 154, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1250);
      specifierQualifierList();
      setState(1252);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 126) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 126)) & 268435473) != 0)) {
        setState(1251);
        abstractDeclarator();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1254);
      blockType();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AbstractDeclaratorContext ------------------------------------------------------------------

ObjectiveCParser::AbstractDeclaratorContext::AbstractDeclaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectiveCParser::PointerContext* ObjectiveCParser::AbstractDeclaratorContext::pointer() {
  return getRuleContext<ObjectiveCParser::PointerContext>(0);
}

ObjectiveCParser::AbstractDeclaratorContext* ObjectiveCParser::AbstractDeclaratorContext::abstractDeclarator() {
  return getRuleContext<ObjectiveCParser::AbstractDeclaratorContext>(0);
}

tree::TerminalNode* ObjectiveCParser::AbstractDeclaratorContext::LP() {
  return getToken(ObjectiveCParser::LP, 0);
}

tree::TerminalNode* ObjectiveCParser::AbstractDeclaratorContext::RP() {
  return getToken(ObjectiveCParser::RP, 0);
}

std::vector<ObjectiveCParser::AbstractDeclaratorSuffixContext *> ObjectiveCParser::AbstractDeclaratorContext::abstractDeclaratorSuffix() {
  return getRuleContexts<ObjectiveCParser::AbstractDeclaratorSuffixContext>();
}

ObjectiveCParser::AbstractDeclaratorSuffixContext* ObjectiveCParser::AbstractDeclaratorContext::abstractDeclaratorSuffix(size_t i) {
  return getRuleContext<ObjectiveCParser::AbstractDeclaratorSuffixContext>(i);
}

std::vector<tree::TerminalNode *> ObjectiveCParser::AbstractDeclaratorContext::LBRACK() {
  return getTokens(ObjectiveCParser::LBRACK);
}

tree::TerminalNode* ObjectiveCParser::AbstractDeclaratorContext::LBRACK(size_t i) {
  return getToken(ObjectiveCParser::LBRACK, i);
}

std::vector<tree::TerminalNode *> ObjectiveCParser::AbstractDeclaratorContext::RBRACK() {
  return getTokens(ObjectiveCParser::RBRACK);
}

tree::TerminalNode* ObjectiveCParser::AbstractDeclaratorContext::RBRACK(size_t i) {
  return getToken(ObjectiveCParser::RBRACK, i);
}

std::vector<ObjectiveCParser::ConstantExpressionContext *> ObjectiveCParser::AbstractDeclaratorContext::constantExpression() {
  return getRuleContexts<ObjectiveCParser::ConstantExpressionContext>();
}

ObjectiveCParser::ConstantExpressionContext* ObjectiveCParser::AbstractDeclaratorContext::constantExpression(size_t i) {
  return getRuleContext<ObjectiveCParser::ConstantExpressionContext>(i);
}


size_t ObjectiveCParser::AbstractDeclaratorContext::getRuleIndex() const {
  return ObjectiveCParser::RuleAbstractDeclarator;
}

void ObjectiveCParser::AbstractDeclaratorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAbstractDeclarator(this);
}

void ObjectiveCParser::AbstractDeclaratorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAbstractDeclarator(this);
}

ObjectiveCParser::AbstractDeclaratorContext* ObjectiveCParser::abstractDeclarator() {
  AbstractDeclaratorContext *_localctx = _tracker.createInstance<AbstractDeclaratorContext>(_ctx, getState());
  enterRule(_localctx, 214, ObjectiveCParser::RuleAbstractDeclarator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1280);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectiveCParser::MUL: {
        enterOuterAlt(_localctx, 1);
        setState(1257);
        pointer();
        setState(1259);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 126) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 126)) & 268435473) != 0)) {
          setState(1258);
          abstractDeclarator();
        }
        break;
      }

      case ObjectiveCParser::LP: {
        enterOuterAlt(_localctx, 2);
        setState(1261);
        match(ObjectiveCParser::LP);
        setState(1263);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 126) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 126)) & 268435473) != 0)) {
          setState(1262);
          abstractDeclarator();
        }
        setState(1265);
        match(ObjectiveCParser::RP);
        setState(1267); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(1266);
          abstractDeclaratorSuffix();
          setState(1269); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (_la == ObjectiveCParser::LP

        || _la == ObjectiveCParser::LBRACK);
        break;
      }

      case ObjectiveCParser::LBRACK: {
        enterOuterAlt(_localctx, 3);
        setState(1276); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(1271);
          match(ObjectiveCParser::LBRACK);
          setState(1273);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if ((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 288230101273804800) != 0) || ((((_la - 81) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 81)) & 17867063762871) != 0) || ((((_la - 152) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 152)) & 65536003) != 0)) {
            setState(1272);
            constantExpression();
          }
          setState(1275);
          match(ObjectiveCParser::RBRACK);
          setState(1278); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (_la == ObjectiveCParser::LBRACK);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AbstractDeclaratorSuffixContext ------------------------------------------------------------------

ObjectiveCParser::AbstractDeclaratorSuffixContext::AbstractDeclaratorSuffixContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::AbstractDeclaratorSuffixContext::LBRACK() {
  return getToken(ObjectiveCParser::LBRACK, 0);
}

tree::TerminalNode* ObjectiveCParser::AbstractDeclaratorSuffixContext::RBRACK() {
  return getToken(ObjectiveCParser::RBRACK, 0);
}

ObjectiveCParser::ConstantExpressionContext* ObjectiveCParser::AbstractDeclaratorSuffixContext::constantExpression() {
  return getRuleContext<ObjectiveCParser::ConstantExpressionContext>(0);
}

tree::TerminalNode* ObjectiveCParser::AbstractDeclaratorSuffixContext::LP() {
  return getToken(ObjectiveCParser::LP, 0);
}

tree::TerminalNode* ObjectiveCParser::AbstractDeclaratorSuffixContext::RP() {
  return getToken(ObjectiveCParser::RP, 0);
}

ObjectiveCParser::ParameterDeclarationListContext* ObjectiveCParser::AbstractDeclaratorSuffixContext::parameterDeclarationList() {
  return getRuleContext<ObjectiveCParser::ParameterDeclarationListContext>(0);
}


size_t ObjectiveCParser::AbstractDeclaratorSuffixContext::getRuleIndex() const {
  return ObjectiveCParser::RuleAbstractDeclaratorSuffix;
}

void ObjectiveCParser::AbstractDeclaratorSuffixContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAbstractDeclaratorSuffix(this);
}

void ObjectiveCParser::AbstractDeclaratorSuffixContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAbstractDeclaratorSuffix(this);
}

ObjectiveCParser::AbstractDeclaratorSuffixContext* ObjectiveCParser::abstractDeclaratorSuffix() {
  AbstractDeclaratorSuffixContext *_localctx = _tracker.createInstance<AbstractDeclaratorSuffixContext>(_ctx, getState());
  enterRule(_localctx, 216, ObjectiveCParser::RuleAbstractDeclaratorSuffix);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1292);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectiveCParser::LBRACK: {
        enterOuterAlt(_localctx, 1);
        setState(1282);
        match(ObjectiveCParser::LBRACK);
        setState(1284);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 288230101273804800) != 0) || ((((_la - 81) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 81)) & 17867063762871) != 0) || ((((_la - 152) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 152)) & 65536003) != 0)) {
          setState(1283);
          constantExpression();
        }
        setState(1286);
        match(ObjectiveCParser::RBRACK);
        break;
      }

      case ObjectiveCParser::LP: {
        enterOuterAlt(_localctx, 2);
        setState(1287);
        match(ObjectiveCParser::LP);
        setState(1289);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 142143780063951410) != 0) || ((((_la - 81) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 81)) & 17867063951359) != 0)) {
          setState(1288);
          parameterDeclarationList();
        }
        setState(1291);
        match(ObjectiveCParser::RP);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParameterDeclarationListContext ------------------------------------------------------------------

ObjectiveCParser::ParameterDeclarationListContext::ParameterDeclarationListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectiveCParser::ParameterDeclarationContext *> ObjectiveCParser::ParameterDeclarationListContext::parameterDeclaration() {
  return getRuleContexts<ObjectiveCParser::ParameterDeclarationContext>();
}

ObjectiveCParser::ParameterDeclarationContext* ObjectiveCParser::ParameterDeclarationListContext::parameterDeclaration(size_t i) {
  return getRuleContext<ObjectiveCParser::ParameterDeclarationContext>(i);
}

std::vector<tree::TerminalNode *> ObjectiveCParser::ParameterDeclarationListContext::COMMA() {
  return getTokens(ObjectiveCParser::COMMA);
}

tree::TerminalNode* ObjectiveCParser::ParameterDeclarationListContext::COMMA(size_t i) {
  return getToken(ObjectiveCParser::COMMA, i);
}


size_t ObjectiveCParser::ParameterDeclarationListContext::getRuleIndex() const {
  return ObjectiveCParser::RuleParameterDeclarationList;
}

void ObjectiveCParser::ParameterDeclarationListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParameterDeclarationList(this);
}

void ObjectiveCParser::ParameterDeclarationListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParameterDeclarationList(this);
}

ObjectiveCParser::ParameterDeclarationListContext* ObjectiveCParser::parameterDeclarationList() {
  ParameterDeclarationListContext *_localctx = _tracker.createInstance<ParameterDeclarationListContext>(_ctx, getState());
  enterRule(_localctx, 218, ObjectiveCParser::RuleParameterDeclarationList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1294);
    parameterDeclaration();
    setState(1299);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 164, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1295);
        match(ObjectiveCParser::COMMA);
        setState(1296);
        parameterDeclaration(); 
      }
      setState(1301);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 164, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParameterDeclarationContext ------------------------------------------------------------------

ObjectiveCParser::ParameterDeclarationContext::ParameterDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectiveCParser::DeclarationSpecifiersContext* ObjectiveCParser::ParameterDeclarationContext::declarationSpecifiers() {
  return getRuleContext<ObjectiveCParser::DeclarationSpecifiersContext>(0);
}

ObjectiveCParser::DeclaratorContext* ObjectiveCParser::ParameterDeclarationContext::declarator() {
  return getRuleContext<ObjectiveCParser::DeclaratorContext>(0);
}

tree::TerminalNode* ObjectiveCParser::ParameterDeclarationContext::VOID() {
  return getToken(ObjectiveCParser::VOID, 0);
}


size_t ObjectiveCParser::ParameterDeclarationContext::getRuleIndex() const {
  return ObjectiveCParser::RuleParameterDeclaration;
}

void ObjectiveCParser::ParameterDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParameterDeclaration(this);
}

void ObjectiveCParser::ParameterDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParameterDeclaration(this);
}

ObjectiveCParser::ParameterDeclarationContext* ObjectiveCParser::parameterDeclaration() {
  ParameterDeclarationContext *_localctx = _tracker.createInstance<ParameterDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 220, ObjectiveCParser::RuleParameterDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1306);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 165, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1302);
      declarationSpecifiers();
      setState(1303);
      declarator();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1305);
      match(ObjectiveCParser::VOID);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeclaratorContext ------------------------------------------------------------------

ObjectiveCParser::DeclaratorContext::DeclaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectiveCParser::DirectDeclaratorContext* ObjectiveCParser::DeclaratorContext::directDeclarator() {
  return getRuleContext<ObjectiveCParser::DirectDeclaratorContext>(0);
}

ObjectiveCParser::PointerContext* ObjectiveCParser::DeclaratorContext::pointer() {
  return getRuleContext<ObjectiveCParser::PointerContext>(0);
}


size_t ObjectiveCParser::DeclaratorContext::getRuleIndex() const {
  return ObjectiveCParser::RuleDeclarator;
}

void ObjectiveCParser::DeclaratorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeclarator(this);
}

void ObjectiveCParser::DeclaratorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeclarator(this);
}

ObjectiveCParser::DeclaratorContext* ObjectiveCParser::declarator() {
  DeclaratorContext *_localctx = _tracker.createInstance<DeclaratorContext>(_ctx, getState());
  enterRule(_localctx, 222, ObjectiveCParser::RuleDeclarator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1309);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectiveCParser::MUL) {
      setState(1308);
      pointer();
    }
    setState(1311);
    directDeclarator();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementContext ------------------------------------------------------------------

ObjectiveCParser::StatementContext::StatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectiveCParser::LabeledStatementContext* ObjectiveCParser::StatementContext::labeledStatement() {
  return getRuleContext<ObjectiveCParser::LabeledStatementContext>(0);
}

tree::TerminalNode* ObjectiveCParser::StatementContext::SEMI() {
  return getToken(ObjectiveCParser::SEMI, 0);
}

ObjectiveCParser::CompoundStatementContext* ObjectiveCParser::StatementContext::compoundStatement() {
  return getRuleContext<ObjectiveCParser::CompoundStatementContext>(0);
}

ObjectiveCParser::SelectionStatementContext* ObjectiveCParser::StatementContext::selectionStatement() {
  return getRuleContext<ObjectiveCParser::SelectionStatementContext>(0);
}

ObjectiveCParser::IterationStatementContext* ObjectiveCParser::StatementContext::iterationStatement() {
  return getRuleContext<ObjectiveCParser::IterationStatementContext>(0);
}

ObjectiveCParser::JumpStatementContext* ObjectiveCParser::StatementContext::jumpStatement() {
  return getRuleContext<ObjectiveCParser::JumpStatementContext>(0);
}

ObjectiveCParser::SynchronizedStatementContext* ObjectiveCParser::StatementContext::synchronizedStatement() {
  return getRuleContext<ObjectiveCParser::SynchronizedStatementContext>(0);
}

ObjectiveCParser::AutoreleaseStatementContext* ObjectiveCParser::StatementContext::autoreleaseStatement() {
  return getRuleContext<ObjectiveCParser::AutoreleaseStatementContext>(0);
}

ObjectiveCParser::ThrowStatementContext* ObjectiveCParser::StatementContext::throwStatement() {
  return getRuleContext<ObjectiveCParser::ThrowStatementContext>(0);
}

ObjectiveCParser::TryBlockContext* ObjectiveCParser::StatementContext::tryBlock() {
  return getRuleContext<ObjectiveCParser::TryBlockContext>(0);
}

ObjectiveCParser::ExpressionsContext* ObjectiveCParser::StatementContext::expressions() {
  return getRuleContext<ObjectiveCParser::ExpressionsContext>(0);
}


size_t ObjectiveCParser::StatementContext::getRuleIndex() const {
  return ObjectiveCParser::RuleStatement;
}

void ObjectiveCParser::StatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatement(this);
}

void ObjectiveCParser::StatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatement(this);
}

ObjectiveCParser::StatementContext* ObjectiveCParser::statement() {
  StatementContext *_localctx = _tracker.createInstance<StatementContext>(_ctx, getState());
  enterRule(_localctx, 224, ObjectiveCParser::RuleStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1354);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 177, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1313);
      labeledStatement();
      setState(1315);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 167, _ctx)) {
      case 1: {
        setState(1314);
        match(ObjectiveCParser::SEMI);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1317);
      compoundStatement();
      setState(1319);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 168, _ctx)) {
      case 1: {
        setState(1318);
        match(ObjectiveCParser::SEMI);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1321);
      selectionStatement();
      setState(1323);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 169, _ctx)) {
      case 1: {
        setState(1322);
        match(ObjectiveCParser::SEMI);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1325);
      iterationStatement();
      setState(1327);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 170, _ctx)) {
      case 1: {
        setState(1326);
        match(ObjectiveCParser::SEMI);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1329);
      jumpStatement();
      setState(1331);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 171, _ctx)) {
      case 1: {
        setState(1330);
        match(ObjectiveCParser::SEMI);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1333);
      synchronizedStatement();
      setState(1335);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 172, _ctx)) {
      case 1: {
        setState(1334);
        match(ObjectiveCParser::SEMI);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1337);
      autoreleaseStatement();
      setState(1339);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 173, _ctx)) {
      case 1: {
        setState(1338);
        match(ObjectiveCParser::SEMI);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1341);
      throwStatement();
      setState(1343);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 174, _ctx)) {
      case 1: {
        setState(1342);
        match(ObjectiveCParser::SEMI);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1345);
      tryBlock();
      setState(1347);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 175, _ctx)) {
      case 1: {
        setState(1346);
        match(ObjectiveCParser::SEMI);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(1349);
      expressions();
      setState(1351);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 176, _ctx)) {
      case 1: {
        setState(1350);
        match(ObjectiveCParser::SEMI);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(1353);
      match(ObjectiveCParser::SEMI);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LabeledStatementContext ------------------------------------------------------------------

ObjectiveCParser::LabeledStatementContext::LabeledStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectiveCParser::IdentifierContext* ObjectiveCParser::LabeledStatementContext::identifier() {
  return getRuleContext<ObjectiveCParser::IdentifierContext>(0);
}

tree::TerminalNode* ObjectiveCParser::LabeledStatementContext::COLON() {
  return getToken(ObjectiveCParser::COLON, 0);
}

ObjectiveCParser::StatementContext* ObjectiveCParser::LabeledStatementContext::statement() {
  return getRuleContext<ObjectiveCParser::StatementContext>(0);
}


size_t ObjectiveCParser::LabeledStatementContext::getRuleIndex() const {
  return ObjectiveCParser::RuleLabeledStatement;
}

void ObjectiveCParser::LabeledStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLabeledStatement(this);
}

void ObjectiveCParser::LabeledStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLabeledStatement(this);
}

ObjectiveCParser::LabeledStatementContext* ObjectiveCParser::labeledStatement() {
  LabeledStatementContext *_localctx = _tracker.createInstance<LabeledStatementContext>(_ctx, getState());
  enterRule(_localctx, 226, ObjectiveCParser::RuleLabeledStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1356);
    identifier();
    setState(1357);
    match(ObjectiveCParser::COLON);
    setState(1358);
    statement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RangeExpressionContext ------------------------------------------------------------------

ObjectiveCParser::RangeExpressionContext::RangeExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectiveCParser::ConstantExpressionContext *> ObjectiveCParser::RangeExpressionContext::constantExpression() {
  return getRuleContexts<ObjectiveCParser::ConstantExpressionContext>();
}

ObjectiveCParser::ConstantExpressionContext* ObjectiveCParser::RangeExpressionContext::constantExpression(size_t i) {
  return getRuleContext<ObjectiveCParser::ConstantExpressionContext>(i);
}

tree::TerminalNode* ObjectiveCParser::RangeExpressionContext::ELIPSIS() {
  return getToken(ObjectiveCParser::ELIPSIS, 0);
}


size_t ObjectiveCParser::RangeExpressionContext::getRuleIndex() const {
  return ObjectiveCParser::RuleRangeExpression;
}

void ObjectiveCParser::RangeExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRangeExpression(this);
}

void ObjectiveCParser::RangeExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRangeExpression(this);
}

ObjectiveCParser::RangeExpressionContext* ObjectiveCParser::rangeExpression() {
  RangeExpressionContext *_localctx = _tracker.createInstance<RangeExpressionContext>(_ctx, getState());
  enterRule(_localctx, 228, ObjectiveCParser::RuleRangeExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1360);
    constantExpression();
    setState(1363);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectiveCParser::ELIPSIS) {
      setState(1361);
      match(ObjectiveCParser::ELIPSIS);
      setState(1362);
      constantExpression();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CompoundStatementContext ------------------------------------------------------------------

ObjectiveCParser::CompoundStatementContext::CompoundStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::CompoundStatementContext::LBRACE() {
  return getToken(ObjectiveCParser::LBRACE, 0);
}

tree::TerminalNode* ObjectiveCParser::CompoundStatementContext::RBRACE() {
  return getToken(ObjectiveCParser::RBRACE, 0);
}

std::vector<ObjectiveCParser::DeclarationContext *> ObjectiveCParser::CompoundStatementContext::declaration() {
  return getRuleContexts<ObjectiveCParser::DeclarationContext>();
}

ObjectiveCParser::DeclarationContext* ObjectiveCParser::CompoundStatementContext::declaration(size_t i) {
  return getRuleContext<ObjectiveCParser::DeclarationContext>(i);
}

std::vector<ObjectiveCParser::StatementContext *> ObjectiveCParser::CompoundStatementContext::statement() {
  return getRuleContexts<ObjectiveCParser::StatementContext>();
}

ObjectiveCParser::StatementContext* ObjectiveCParser::CompoundStatementContext::statement(size_t i) {
  return getRuleContext<ObjectiveCParser::StatementContext>(i);
}


size_t ObjectiveCParser::CompoundStatementContext::getRuleIndex() const {
  return ObjectiveCParser::RuleCompoundStatement;
}

void ObjectiveCParser::CompoundStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCompoundStatement(this);
}

void ObjectiveCParser::CompoundStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCompoundStatement(this);
}

ObjectiveCParser::CompoundStatementContext* ObjectiveCParser::compoundStatement() {
  CompoundStatementContext *_localctx = _tracker.createInstance<CompoundStatementContext>(_ctx, getState());
  enterRule(_localctx, 230, ObjectiveCParser::RuleCompoundStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1365);
    match(ObjectiveCParser::LBRACE);
    setState(1370);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 5188146530212641654) != 0) || ((((_la - 69) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 69)) & -6123769593317032575) != 0) || ((((_la - 136) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 136)) & 4363692523569) != 0)) {
      setState(1368);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 179, _ctx)) {
      case 1: {
        setState(1366);
        declaration();
        break;
      }

      case 2: {
        setState(1367);
        statement();
        break;
      }

      default:
        break;
      }
      setState(1372);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1373);
    match(ObjectiveCParser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectionStatementContext ------------------------------------------------------------------

ObjectiveCParser::SelectionStatementContext::SelectionStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::SelectionStatementContext::IF() {
  return getToken(ObjectiveCParser::IF, 0);
}

tree::TerminalNode* ObjectiveCParser::SelectionStatementContext::LP() {
  return getToken(ObjectiveCParser::LP, 0);
}

ObjectiveCParser::ExpressionContext* ObjectiveCParser::SelectionStatementContext::expression() {
  return getRuleContext<ObjectiveCParser::ExpressionContext>(0);
}

tree::TerminalNode* ObjectiveCParser::SelectionStatementContext::RP() {
  return getToken(ObjectiveCParser::RP, 0);
}

std::vector<ObjectiveCParser::StatementContext *> ObjectiveCParser::SelectionStatementContext::statement() {
  return getRuleContexts<ObjectiveCParser::StatementContext>();
}

ObjectiveCParser::StatementContext* ObjectiveCParser::SelectionStatementContext::statement(size_t i) {
  return getRuleContext<ObjectiveCParser::StatementContext>(i);
}

tree::TerminalNode* ObjectiveCParser::SelectionStatementContext::ELSE() {
  return getToken(ObjectiveCParser::ELSE, 0);
}

ObjectiveCParser::SwitchStatementContext* ObjectiveCParser::SelectionStatementContext::switchStatement() {
  return getRuleContext<ObjectiveCParser::SwitchStatementContext>(0);
}


size_t ObjectiveCParser::SelectionStatementContext::getRuleIndex() const {
  return ObjectiveCParser::RuleSelectionStatement;
}

void ObjectiveCParser::SelectionStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelectionStatement(this);
}

void ObjectiveCParser::SelectionStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelectionStatement(this);
}

ObjectiveCParser::SelectionStatementContext* ObjectiveCParser::selectionStatement() {
  SelectionStatementContext *_localctx = _tracker.createInstance<SelectionStatementContext>(_ctx, getState());
  enterRule(_localctx, 232, ObjectiveCParser::RuleSelectionStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1385);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectiveCParser::IF: {
        enterOuterAlt(_localctx, 1);
        setState(1375);
        match(ObjectiveCParser::IF);
        setState(1376);
        match(ObjectiveCParser::LP);
        setState(1377);
        expression(0);
        setState(1378);
        match(ObjectiveCParser::RP);
        setState(1379);
        antlrcpp::downCast<SelectionStatementContext *>(_localctx)->ifBody = statement();
        setState(1382);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 181, _ctx)) {
        case 1: {
          setState(1380);
          match(ObjectiveCParser::ELSE);
          setState(1381);
          antlrcpp::downCast<SelectionStatementContext *>(_localctx)->elseBody = statement();
          break;
        }

        default:
          break;
        }
        break;
      }

      case ObjectiveCParser::SWITCH: {
        enterOuterAlt(_localctx, 2);
        setState(1384);
        switchStatement();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SwitchStatementContext ------------------------------------------------------------------

ObjectiveCParser::SwitchStatementContext::SwitchStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::SwitchStatementContext::SWITCH() {
  return getToken(ObjectiveCParser::SWITCH, 0);
}

tree::TerminalNode* ObjectiveCParser::SwitchStatementContext::LP() {
  return getToken(ObjectiveCParser::LP, 0);
}

ObjectiveCParser::ExpressionContext* ObjectiveCParser::SwitchStatementContext::expression() {
  return getRuleContext<ObjectiveCParser::ExpressionContext>(0);
}

tree::TerminalNode* ObjectiveCParser::SwitchStatementContext::RP() {
  return getToken(ObjectiveCParser::RP, 0);
}

ObjectiveCParser::SwitchBlockContext* ObjectiveCParser::SwitchStatementContext::switchBlock() {
  return getRuleContext<ObjectiveCParser::SwitchBlockContext>(0);
}


size_t ObjectiveCParser::SwitchStatementContext::getRuleIndex() const {
  return ObjectiveCParser::RuleSwitchStatement;
}

void ObjectiveCParser::SwitchStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSwitchStatement(this);
}

void ObjectiveCParser::SwitchStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSwitchStatement(this);
}

ObjectiveCParser::SwitchStatementContext* ObjectiveCParser::switchStatement() {
  SwitchStatementContext *_localctx = _tracker.createInstance<SwitchStatementContext>(_ctx, getState());
  enterRule(_localctx, 234, ObjectiveCParser::RuleSwitchStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1387);
    match(ObjectiveCParser::SWITCH);
    setState(1388);
    match(ObjectiveCParser::LP);
    setState(1389);
    expression(0);
    setState(1390);
    match(ObjectiveCParser::RP);
    setState(1391);
    switchBlock();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SwitchBlockContext ------------------------------------------------------------------

ObjectiveCParser::SwitchBlockContext::SwitchBlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::SwitchBlockContext::LBRACE() {
  return getToken(ObjectiveCParser::LBRACE, 0);
}

tree::TerminalNode* ObjectiveCParser::SwitchBlockContext::RBRACE() {
  return getToken(ObjectiveCParser::RBRACE, 0);
}

std::vector<ObjectiveCParser::SwitchSectionContext *> ObjectiveCParser::SwitchBlockContext::switchSection() {
  return getRuleContexts<ObjectiveCParser::SwitchSectionContext>();
}

ObjectiveCParser::SwitchSectionContext* ObjectiveCParser::SwitchBlockContext::switchSection(size_t i) {
  return getRuleContext<ObjectiveCParser::SwitchSectionContext>(i);
}


size_t ObjectiveCParser::SwitchBlockContext::getRuleIndex() const {
  return ObjectiveCParser::RuleSwitchBlock;
}

void ObjectiveCParser::SwitchBlockContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSwitchBlock(this);
}

void ObjectiveCParser::SwitchBlockContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSwitchBlock(this);
}

ObjectiveCParser::SwitchBlockContext* ObjectiveCParser::switchBlock() {
  SwitchBlockContext *_localctx = _tracker.createInstance<SwitchBlockContext>(_ctx, getState());
  enterRule(_localctx, 236, ObjectiveCParser::RuleSwitchBlock);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1393);
    match(ObjectiveCParser::LBRACE);
    setState(1397);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectiveCParser::CASE

    || _la == ObjectiveCParser::DEFAULT) {
      setState(1394);
      switchSection();
      setState(1399);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1400);
    match(ObjectiveCParser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SwitchSectionContext ------------------------------------------------------------------

ObjectiveCParser::SwitchSectionContext::SwitchSectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectiveCParser::SwitchLabelContext *> ObjectiveCParser::SwitchSectionContext::switchLabel() {
  return getRuleContexts<ObjectiveCParser::SwitchLabelContext>();
}

ObjectiveCParser::SwitchLabelContext* ObjectiveCParser::SwitchSectionContext::switchLabel(size_t i) {
  return getRuleContext<ObjectiveCParser::SwitchLabelContext>(i);
}

std::vector<ObjectiveCParser::StatementContext *> ObjectiveCParser::SwitchSectionContext::statement() {
  return getRuleContexts<ObjectiveCParser::StatementContext>();
}

ObjectiveCParser::StatementContext* ObjectiveCParser::SwitchSectionContext::statement(size_t i) {
  return getRuleContext<ObjectiveCParser::StatementContext>(i);
}


size_t ObjectiveCParser::SwitchSectionContext::getRuleIndex() const {
  return ObjectiveCParser::RuleSwitchSection;
}

void ObjectiveCParser::SwitchSectionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSwitchSection(this);
}

void ObjectiveCParser::SwitchSectionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSwitchSection(this);
}

ObjectiveCParser::SwitchSectionContext* ObjectiveCParser::switchSection() {
  SwitchSectionContext *_localctx = _tracker.createInstance<SwitchSectionContext>(_ctx, getState());
  enterRule(_localctx, 238, ObjectiveCParser::RuleSwitchSection);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1403); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1402);
      switchLabel();
      setState(1405); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == ObjectiveCParser::CASE

    || _la == ObjectiveCParser::DEFAULT);
    setState(1408); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1407);
      statement();
      setState(1410); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 5188146513339072836) != 0) || ((((_la - 69) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 69)) & -6123769594089079423) != 0) || ((((_la - 136) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 136)) & 4363692523569) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SwitchLabelContext ------------------------------------------------------------------

ObjectiveCParser::SwitchLabelContext::SwitchLabelContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::SwitchLabelContext::CASE() {
  return getToken(ObjectiveCParser::CASE, 0);
}

tree::TerminalNode* ObjectiveCParser::SwitchLabelContext::COLON() {
  return getToken(ObjectiveCParser::COLON, 0);
}

ObjectiveCParser::RangeExpressionContext* ObjectiveCParser::SwitchLabelContext::rangeExpression() {
  return getRuleContext<ObjectiveCParser::RangeExpressionContext>(0);
}

tree::TerminalNode* ObjectiveCParser::SwitchLabelContext::LP() {
  return getToken(ObjectiveCParser::LP, 0);
}

tree::TerminalNode* ObjectiveCParser::SwitchLabelContext::RP() {
  return getToken(ObjectiveCParser::RP, 0);
}

tree::TerminalNode* ObjectiveCParser::SwitchLabelContext::DEFAULT() {
  return getToken(ObjectiveCParser::DEFAULT, 0);
}


size_t ObjectiveCParser::SwitchLabelContext::getRuleIndex() const {
  return ObjectiveCParser::RuleSwitchLabel;
}

void ObjectiveCParser::SwitchLabelContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSwitchLabel(this);
}

void ObjectiveCParser::SwitchLabelContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSwitchLabel(this);
}

ObjectiveCParser::SwitchLabelContext* ObjectiveCParser::switchLabel() {
  SwitchLabelContext *_localctx = _tracker.createInstance<SwitchLabelContext>(_ctx, getState());
  enterRule(_localctx, 240, ObjectiveCParser::RuleSwitchLabel);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1424);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectiveCParser::CASE: {
        enterOuterAlt(_localctx, 1);
        setState(1412);
        match(ObjectiveCParser::CASE);
        setState(1418);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case ObjectiveCParser::TRUE:
          case ObjectiveCParser::FALSE:
          case ObjectiveCParser::BOOL:
          case ObjectiveCParser::Class:
          case ObjectiveCParser::BYCOPY:
          case ObjectiveCParser::BYREF:
          case ObjectiveCParser::ID:
          case ObjectiveCParser::IMP:
          case ObjectiveCParser::IN:
          case ObjectiveCParser::INOUT:
          case ObjectiveCParser::NIL:
          case ObjectiveCParser::NO:
          case ObjectiveCParser::NULL_:
          case ObjectiveCParser::ONEWAY:
          case ObjectiveCParser::OUT:
          case ObjectiveCParser::PROTOCOL_:
          case ObjectiveCParser::SEL:
          case ObjectiveCParser::SELF:
          case ObjectiveCParser::SUPER:
          case ObjectiveCParser::YES:
          case ObjectiveCParser::ATOMIC:
          case ObjectiveCParser::NONATOMIC:
          case ObjectiveCParser::RETAIN:
          case ObjectiveCParser::AUTORELEASING_QUALIFIER:
          case ObjectiveCParser::BLOCK:
          case ObjectiveCParser::BRIDGE_RETAINED:
          case ObjectiveCParser::BRIDGE_TRANSFER:
          case ObjectiveCParser::COVARIANT:
          case ObjectiveCParser::CONTRAVARIANT:
          case ObjectiveCParser::DEPRECATED:
          case ObjectiveCParser::KINDOF:
          case ObjectiveCParser::UNUSED:
          case ObjectiveCParser::NULL_UNSPECIFIED:
          case ObjectiveCParser::NULLABLE:
          case ObjectiveCParser::NONNULL:
          case ObjectiveCParser::NULL_RESETTABLE:
          case ObjectiveCParser::NS_INLINE:
          case ObjectiveCParser::NS_ENUM:
          case ObjectiveCParser::NS_OPTIONS:
          case ObjectiveCParser::ASSIGN:
          case ObjectiveCParser::COPY:
          case ObjectiveCParser::GETTER:
          case ObjectiveCParser::SETTER:
          case ObjectiveCParser::STRONG:
          case ObjectiveCParser::READONLY:
          case ObjectiveCParser::READWRITE:
          case ObjectiveCParser::WEAK:
          case ObjectiveCParser::UNSAFE_UNRETAINED:
          case ObjectiveCParser::IB_OUTLET:
          case ObjectiveCParser::IB_OUTLET_COLLECTION:
          case ObjectiveCParser::IB_INSPECTABLE:
          case ObjectiveCParser::IB_DESIGNABLE:
          case ObjectiveCParser::IDENTIFIER:
          case ObjectiveCParser::ADD:
          case ObjectiveCParser::SUB:
          case ObjectiveCParser::CHARACTER_LITERAL:
          case ObjectiveCParser::HEX_LITERAL:
          case ObjectiveCParser::OCTAL_LITERAL:
          case ObjectiveCParser::BINARY_LITERAL:
          case ObjectiveCParser::DECIMAL_LITERAL:
          case ObjectiveCParser::FLOATING_POINT_LITERAL: {
            setState(1413);
            rangeExpression();
            break;
          }

          case ObjectiveCParser::LP: {
            setState(1414);
            match(ObjectiveCParser::LP);
            setState(1415);
            rangeExpression();
            setState(1416);
            match(ObjectiveCParser::RP);
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(1420);
        match(ObjectiveCParser::COLON);
        break;
      }

      case ObjectiveCParser::DEFAULT: {
        enterOuterAlt(_localctx, 2);
        setState(1422);
        match(ObjectiveCParser::DEFAULT);
        setState(1423);
        match(ObjectiveCParser::COLON);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IterationStatementContext ------------------------------------------------------------------

ObjectiveCParser::IterationStatementContext::IterationStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectiveCParser::WhileStatementContext* ObjectiveCParser::IterationStatementContext::whileStatement() {
  return getRuleContext<ObjectiveCParser::WhileStatementContext>(0);
}

ObjectiveCParser::DoStatementContext* ObjectiveCParser::IterationStatementContext::doStatement() {
  return getRuleContext<ObjectiveCParser::DoStatementContext>(0);
}

ObjectiveCParser::ForStatementContext* ObjectiveCParser::IterationStatementContext::forStatement() {
  return getRuleContext<ObjectiveCParser::ForStatementContext>(0);
}

ObjectiveCParser::ForInStatementContext* ObjectiveCParser::IterationStatementContext::forInStatement() {
  return getRuleContext<ObjectiveCParser::ForInStatementContext>(0);
}


size_t ObjectiveCParser::IterationStatementContext::getRuleIndex() const {
  return ObjectiveCParser::RuleIterationStatement;
}

void ObjectiveCParser::IterationStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIterationStatement(this);
}

void ObjectiveCParser::IterationStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIterationStatement(this);
}

ObjectiveCParser::IterationStatementContext* ObjectiveCParser::iterationStatement() {
  IterationStatementContext *_localctx = _tracker.createInstance<IterationStatementContext>(_ctx, getState());
  enterRule(_localctx, 242, ObjectiveCParser::RuleIterationStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1430);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 188, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1426);
      whileStatement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1427);
      doStatement();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1428);
      forStatement();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1429);
      forInStatement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WhileStatementContext ------------------------------------------------------------------

ObjectiveCParser::WhileStatementContext::WhileStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::WhileStatementContext::WHILE() {
  return getToken(ObjectiveCParser::WHILE, 0);
}

tree::TerminalNode* ObjectiveCParser::WhileStatementContext::LP() {
  return getToken(ObjectiveCParser::LP, 0);
}

ObjectiveCParser::ExpressionContext* ObjectiveCParser::WhileStatementContext::expression() {
  return getRuleContext<ObjectiveCParser::ExpressionContext>(0);
}

tree::TerminalNode* ObjectiveCParser::WhileStatementContext::RP() {
  return getToken(ObjectiveCParser::RP, 0);
}

ObjectiveCParser::StatementContext* ObjectiveCParser::WhileStatementContext::statement() {
  return getRuleContext<ObjectiveCParser::StatementContext>(0);
}


size_t ObjectiveCParser::WhileStatementContext::getRuleIndex() const {
  return ObjectiveCParser::RuleWhileStatement;
}

void ObjectiveCParser::WhileStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWhileStatement(this);
}

void ObjectiveCParser::WhileStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWhileStatement(this);
}

ObjectiveCParser::WhileStatementContext* ObjectiveCParser::whileStatement() {
  WhileStatementContext *_localctx = _tracker.createInstance<WhileStatementContext>(_ctx, getState());
  enterRule(_localctx, 244, ObjectiveCParser::RuleWhileStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1432);
    match(ObjectiveCParser::WHILE);
    setState(1433);
    match(ObjectiveCParser::LP);
    setState(1434);
    expression(0);
    setState(1435);
    match(ObjectiveCParser::RP);
    setState(1436);
    statement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DoStatementContext ------------------------------------------------------------------

ObjectiveCParser::DoStatementContext::DoStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::DoStatementContext::DO() {
  return getToken(ObjectiveCParser::DO, 0);
}

ObjectiveCParser::StatementContext* ObjectiveCParser::DoStatementContext::statement() {
  return getRuleContext<ObjectiveCParser::StatementContext>(0);
}

tree::TerminalNode* ObjectiveCParser::DoStatementContext::WHILE() {
  return getToken(ObjectiveCParser::WHILE, 0);
}

tree::TerminalNode* ObjectiveCParser::DoStatementContext::LP() {
  return getToken(ObjectiveCParser::LP, 0);
}

ObjectiveCParser::ExpressionContext* ObjectiveCParser::DoStatementContext::expression() {
  return getRuleContext<ObjectiveCParser::ExpressionContext>(0);
}

tree::TerminalNode* ObjectiveCParser::DoStatementContext::RP() {
  return getToken(ObjectiveCParser::RP, 0);
}

tree::TerminalNode* ObjectiveCParser::DoStatementContext::SEMI() {
  return getToken(ObjectiveCParser::SEMI, 0);
}


size_t ObjectiveCParser::DoStatementContext::getRuleIndex() const {
  return ObjectiveCParser::RuleDoStatement;
}

void ObjectiveCParser::DoStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDoStatement(this);
}

void ObjectiveCParser::DoStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDoStatement(this);
}

ObjectiveCParser::DoStatementContext* ObjectiveCParser::doStatement() {
  DoStatementContext *_localctx = _tracker.createInstance<DoStatementContext>(_ctx, getState());
  enterRule(_localctx, 246, ObjectiveCParser::RuleDoStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1438);
    match(ObjectiveCParser::DO);
    setState(1439);
    statement();
    setState(1440);
    match(ObjectiveCParser::WHILE);
    setState(1441);
    match(ObjectiveCParser::LP);
    setState(1442);
    expression(0);
    setState(1443);
    match(ObjectiveCParser::RP);
    setState(1444);
    match(ObjectiveCParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForStatementContext ------------------------------------------------------------------

ObjectiveCParser::ForStatementContext::ForStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::ForStatementContext::FOR() {
  return getToken(ObjectiveCParser::FOR, 0);
}

tree::TerminalNode* ObjectiveCParser::ForStatementContext::LP() {
  return getToken(ObjectiveCParser::LP, 0);
}

std::vector<tree::TerminalNode *> ObjectiveCParser::ForStatementContext::SEMI() {
  return getTokens(ObjectiveCParser::SEMI);
}

tree::TerminalNode* ObjectiveCParser::ForStatementContext::SEMI(size_t i) {
  return getToken(ObjectiveCParser::SEMI, i);
}

tree::TerminalNode* ObjectiveCParser::ForStatementContext::RP() {
  return getToken(ObjectiveCParser::RP, 0);
}

ObjectiveCParser::StatementContext* ObjectiveCParser::ForStatementContext::statement() {
  return getRuleContext<ObjectiveCParser::StatementContext>(0);
}

ObjectiveCParser::ForLoopInitializerContext* ObjectiveCParser::ForStatementContext::forLoopInitializer() {
  return getRuleContext<ObjectiveCParser::ForLoopInitializerContext>(0);
}

ObjectiveCParser::ExpressionContext* ObjectiveCParser::ForStatementContext::expression() {
  return getRuleContext<ObjectiveCParser::ExpressionContext>(0);
}

ObjectiveCParser::ExpressionsContext* ObjectiveCParser::ForStatementContext::expressions() {
  return getRuleContext<ObjectiveCParser::ExpressionsContext>(0);
}


size_t ObjectiveCParser::ForStatementContext::getRuleIndex() const {
  return ObjectiveCParser::RuleForStatement;
}

void ObjectiveCParser::ForStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterForStatement(this);
}

void ObjectiveCParser::ForStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitForStatement(this);
}

ObjectiveCParser::ForStatementContext* ObjectiveCParser::forStatement() {
  ForStatementContext *_localctx = _tracker.createInstance<ForStatementContext>(_ctx, getState());
  enterRule(_localctx, 248, ObjectiveCParser::RuleForStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1446);
    match(ObjectiveCParser::FOR);
    setState(1447);
    match(ObjectiveCParser::LP);
    setState(1449);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 4899916136071445042) != 0) || ((((_la - 69) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 69)) & 2523141691234316417) != 0) || ((((_la - 136) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 136)) & 4363692523569) != 0)) {
      setState(1448);
      forLoopInitializer();
    }
    setState(1451);
    match(ObjectiveCParser::SEMI);
    setState(1453);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 4899916119734747136) != 0) || ((((_la - 69) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 69)) & 2523141690462269569) != 0) || ((((_la - 136) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 136)) & 4363692523569) != 0)) {
      setState(1452);
      expression(0);
    }
    setState(1455);
    match(ObjectiveCParser::SEMI);
    setState(1457);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 4899916119734747136) != 0) || ((((_la - 69) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 69)) & 2523141690462269569) != 0) || ((((_la - 136) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 136)) & 4363692523569) != 0)) {
      setState(1456);
      expressions();
    }
    setState(1459);
    match(ObjectiveCParser::RP);
    setState(1460);
    statement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForLoopInitializerContext ------------------------------------------------------------------

ObjectiveCParser::ForLoopInitializerContext::ForLoopInitializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectiveCParser::DeclarationSpecifiersContext* ObjectiveCParser::ForLoopInitializerContext::declarationSpecifiers() {
  return getRuleContext<ObjectiveCParser::DeclarationSpecifiersContext>(0);
}

ObjectiveCParser::InitDeclaratorListContext* ObjectiveCParser::ForLoopInitializerContext::initDeclaratorList() {
  return getRuleContext<ObjectiveCParser::InitDeclaratorListContext>(0);
}

ObjectiveCParser::ExpressionsContext* ObjectiveCParser::ForLoopInitializerContext::expressions() {
  return getRuleContext<ObjectiveCParser::ExpressionsContext>(0);
}


size_t ObjectiveCParser::ForLoopInitializerContext::getRuleIndex() const {
  return ObjectiveCParser::RuleForLoopInitializer;
}

void ObjectiveCParser::ForLoopInitializerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterForLoopInitializer(this);
}

void ObjectiveCParser::ForLoopInitializerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitForLoopInitializer(this);
}

ObjectiveCParser::ForLoopInitializerContext* ObjectiveCParser::forLoopInitializer() {
  ForLoopInitializerContext *_localctx = _tracker.createInstance<ForLoopInitializerContext>(_ctx, getState());
  enterRule(_localctx, 250, ObjectiveCParser::RuleForLoopInitializer);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1466);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 192, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1462);
      declarationSpecifiers();
      setState(1463);
      initDeclaratorList();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1465);
      expressions();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForInStatementContext ------------------------------------------------------------------

ObjectiveCParser::ForInStatementContext::ForInStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::ForInStatementContext::FOR() {
  return getToken(ObjectiveCParser::FOR, 0);
}

tree::TerminalNode* ObjectiveCParser::ForInStatementContext::LP() {
  return getToken(ObjectiveCParser::LP, 0);
}

ObjectiveCParser::TypeVariableDeclaratorContext* ObjectiveCParser::ForInStatementContext::typeVariableDeclarator() {
  return getRuleContext<ObjectiveCParser::TypeVariableDeclaratorContext>(0);
}

tree::TerminalNode* ObjectiveCParser::ForInStatementContext::IN() {
  return getToken(ObjectiveCParser::IN, 0);
}

tree::TerminalNode* ObjectiveCParser::ForInStatementContext::RP() {
  return getToken(ObjectiveCParser::RP, 0);
}

ObjectiveCParser::StatementContext* ObjectiveCParser::ForInStatementContext::statement() {
  return getRuleContext<ObjectiveCParser::StatementContext>(0);
}

ObjectiveCParser::ExpressionContext* ObjectiveCParser::ForInStatementContext::expression() {
  return getRuleContext<ObjectiveCParser::ExpressionContext>(0);
}


size_t ObjectiveCParser::ForInStatementContext::getRuleIndex() const {
  return ObjectiveCParser::RuleForInStatement;
}

void ObjectiveCParser::ForInStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterForInStatement(this);
}

void ObjectiveCParser::ForInStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitForInStatement(this);
}

ObjectiveCParser::ForInStatementContext* ObjectiveCParser::forInStatement() {
  ForInStatementContext *_localctx = _tracker.createInstance<ForInStatementContext>(_ctx, getState());
  enterRule(_localctx, 252, ObjectiveCParser::RuleForInStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1468);
    match(ObjectiveCParser::FOR);
    setState(1469);
    match(ObjectiveCParser::LP);
    setState(1470);
    typeVariableDeclarator();
    setState(1471);
    match(ObjectiveCParser::IN);
    setState(1473);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 4899916119734747136) != 0) || ((((_la - 69) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 69)) & 2523141690462269569) != 0) || ((((_la - 136) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 136)) & 4363692523569) != 0)) {
      setState(1472);
      expression(0);
    }
    setState(1475);
    match(ObjectiveCParser::RP);
    setState(1476);
    statement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- JumpStatementContext ------------------------------------------------------------------

ObjectiveCParser::JumpStatementContext::JumpStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::JumpStatementContext::GOTO() {
  return getToken(ObjectiveCParser::GOTO, 0);
}

ObjectiveCParser::IdentifierContext* ObjectiveCParser::JumpStatementContext::identifier() {
  return getRuleContext<ObjectiveCParser::IdentifierContext>(0);
}

tree::TerminalNode* ObjectiveCParser::JumpStatementContext::CONTINUE() {
  return getToken(ObjectiveCParser::CONTINUE, 0);
}

tree::TerminalNode* ObjectiveCParser::JumpStatementContext::BREAK() {
  return getToken(ObjectiveCParser::BREAK, 0);
}

tree::TerminalNode* ObjectiveCParser::JumpStatementContext::RETURN() {
  return getToken(ObjectiveCParser::RETURN, 0);
}

ObjectiveCParser::ExpressionContext* ObjectiveCParser::JumpStatementContext::expression() {
  return getRuleContext<ObjectiveCParser::ExpressionContext>(0);
}


size_t ObjectiveCParser::JumpStatementContext::getRuleIndex() const {
  return ObjectiveCParser::RuleJumpStatement;
}

void ObjectiveCParser::JumpStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterJumpStatement(this);
}

void ObjectiveCParser::JumpStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitJumpStatement(this);
}

ObjectiveCParser::JumpStatementContext* ObjectiveCParser::jumpStatement() {
  JumpStatementContext *_localctx = _tracker.createInstance<JumpStatementContext>(_ctx, getState());
  enterRule(_localctx, 254, ObjectiveCParser::RuleJumpStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1486);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectiveCParser::GOTO: {
        enterOuterAlt(_localctx, 1);
        setState(1478);
        match(ObjectiveCParser::GOTO);
        setState(1479);
        identifier();
        break;
      }

      case ObjectiveCParser::CONTINUE: {
        enterOuterAlt(_localctx, 2);
        setState(1480);
        match(ObjectiveCParser::CONTINUE);
        break;
      }

      case ObjectiveCParser::BREAK: {
        enterOuterAlt(_localctx, 3);
        setState(1481);
        match(ObjectiveCParser::BREAK);
        break;
      }

      case ObjectiveCParser::RETURN: {
        enterOuterAlt(_localctx, 4);
        setState(1482);
        match(ObjectiveCParser::RETURN);
        setState(1484);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 194, _ctx)) {
        case 1: {
          setState(1483);
          expression(0);
          break;
        }

        default:
          break;
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionsContext ------------------------------------------------------------------

ObjectiveCParser::ExpressionsContext::ExpressionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectiveCParser::ExpressionContext *> ObjectiveCParser::ExpressionsContext::expression() {
  return getRuleContexts<ObjectiveCParser::ExpressionContext>();
}

ObjectiveCParser::ExpressionContext* ObjectiveCParser::ExpressionsContext::expression(size_t i) {
  return getRuleContext<ObjectiveCParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> ObjectiveCParser::ExpressionsContext::COMMA() {
  return getTokens(ObjectiveCParser::COMMA);
}

tree::TerminalNode* ObjectiveCParser::ExpressionsContext::COMMA(size_t i) {
  return getToken(ObjectiveCParser::COMMA, i);
}


size_t ObjectiveCParser::ExpressionsContext::getRuleIndex() const {
  return ObjectiveCParser::RuleExpressions;
}

void ObjectiveCParser::ExpressionsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpressions(this);
}

void ObjectiveCParser::ExpressionsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpressions(this);
}

ObjectiveCParser::ExpressionsContext* ObjectiveCParser::expressions() {
  ExpressionsContext *_localctx = _tracker.createInstance<ExpressionsContext>(_ctx, getState());
  enterRule(_localctx, 256, ObjectiveCParser::RuleExpressions);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1488);
    expression(0);
    setState(1493);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 196, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1489);
        match(ObjectiveCParser::COMMA);
        setState(1490);
        expression(0); 
      }
      setState(1495);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 196, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionContext ------------------------------------------------------------------

ObjectiveCParser::ExpressionContext::ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectiveCParser::CastExpressionContext* ObjectiveCParser::ExpressionContext::castExpression() {
  return getRuleContext<ObjectiveCParser::CastExpressionContext>(0);
}

tree::TerminalNode* ObjectiveCParser::ExpressionContext::LP() {
  return getToken(ObjectiveCParser::LP, 0);
}

ObjectiveCParser::CompoundStatementContext* ObjectiveCParser::ExpressionContext::compoundStatement() {
  return getRuleContext<ObjectiveCParser::CompoundStatementContext>(0);
}

tree::TerminalNode* ObjectiveCParser::ExpressionContext::RP() {
  return getToken(ObjectiveCParser::RP, 0);
}

ObjectiveCParser::UnaryExpressionContext* ObjectiveCParser::ExpressionContext::unaryExpression() {
  return getRuleContext<ObjectiveCParser::UnaryExpressionContext>(0);
}

ObjectiveCParser::AssignmentOperatorContext* ObjectiveCParser::ExpressionContext::assignmentOperator() {
  return getRuleContext<ObjectiveCParser::AssignmentOperatorContext>(0);
}

std::vector<ObjectiveCParser::ExpressionContext *> ObjectiveCParser::ExpressionContext::expression() {
  return getRuleContexts<ObjectiveCParser::ExpressionContext>();
}

ObjectiveCParser::ExpressionContext* ObjectiveCParser::ExpressionContext::expression(size_t i) {
  return getRuleContext<ObjectiveCParser::ExpressionContext>(i);
}

tree::TerminalNode* ObjectiveCParser::ExpressionContext::MUL() {
  return getToken(ObjectiveCParser::MUL, 0);
}

tree::TerminalNode* ObjectiveCParser::ExpressionContext::DIV() {
  return getToken(ObjectiveCParser::DIV, 0);
}

tree::TerminalNode* ObjectiveCParser::ExpressionContext::MOD() {
  return getToken(ObjectiveCParser::MOD, 0);
}

tree::TerminalNode* ObjectiveCParser::ExpressionContext::ADD() {
  return getToken(ObjectiveCParser::ADD, 0);
}

tree::TerminalNode* ObjectiveCParser::ExpressionContext::SUB() {
  return getToken(ObjectiveCParser::SUB, 0);
}

std::vector<tree::TerminalNode *> ObjectiveCParser::ExpressionContext::LT() {
  return getTokens(ObjectiveCParser::LT);
}

tree::TerminalNode* ObjectiveCParser::ExpressionContext::LT(size_t i) {
  return getToken(ObjectiveCParser::LT, i);
}

std::vector<tree::TerminalNode *> ObjectiveCParser::ExpressionContext::GT() {
  return getTokens(ObjectiveCParser::GT);
}

tree::TerminalNode* ObjectiveCParser::ExpressionContext::GT(size_t i) {
  return getToken(ObjectiveCParser::GT, i);
}

tree::TerminalNode* ObjectiveCParser::ExpressionContext::LE() {
  return getToken(ObjectiveCParser::LE, 0);
}

tree::TerminalNode* ObjectiveCParser::ExpressionContext::GE() {
  return getToken(ObjectiveCParser::GE, 0);
}

tree::TerminalNode* ObjectiveCParser::ExpressionContext::NOTEQUAL() {
  return getToken(ObjectiveCParser::NOTEQUAL, 0);
}

tree::TerminalNode* ObjectiveCParser::ExpressionContext::EQUAL() {
  return getToken(ObjectiveCParser::EQUAL, 0);
}

tree::TerminalNode* ObjectiveCParser::ExpressionContext::BITAND() {
  return getToken(ObjectiveCParser::BITAND, 0);
}

tree::TerminalNode* ObjectiveCParser::ExpressionContext::BITXOR() {
  return getToken(ObjectiveCParser::BITXOR, 0);
}

tree::TerminalNode* ObjectiveCParser::ExpressionContext::BITOR() {
  return getToken(ObjectiveCParser::BITOR, 0);
}

tree::TerminalNode* ObjectiveCParser::ExpressionContext::AND() {
  return getToken(ObjectiveCParser::AND, 0);
}

tree::TerminalNode* ObjectiveCParser::ExpressionContext::OR() {
  return getToken(ObjectiveCParser::OR, 0);
}

tree::TerminalNode* ObjectiveCParser::ExpressionContext::QUESTION() {
  return getToken(ObjectiveCParser::QUESTION, 0);
}

tree::TerminalNode* ObjectiveCParser::ExpressionContext::COLON() {
  return getToken(ObjectiveCParser::COLON, 0);
}


size_t ObjectiveCParser::ExpressionContext::getRuleIndex() const {
  return ObjectiveCParser::RuleExpression;
}

void ObjectiveCParser::ExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpression(this);
}

void ObjectiveCParser::ExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpression(this);
}


ObjectiveCParser::ExpressionContext* ObjectiveCParser::expression() {
   return expression(0);
}

ObjectiveCParser::ExpressionContext* ObjectiveCParser::expression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  ObjectiveCParser::ExpressionContext *_localctx = _tracker.createInstance<ExpressionContext>(_ctx, parentState);
  ObjectiveCParser::ExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 258;
  enterRecursionRule(_localctx, 258, ObjectiveCParser::RuleExpression, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1506);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 197, _ctx)) {
    case 1: {
      setState(1497);
      castExpression();
      break;
    }

    case 2: {
      setState(1498);
      match(ObjectiveCParser::LP);
      setState(1499);
      compoundStatement();
      setState(1500);
      match(ObjectiveCParser::RP);
      break;
    }

    case 3: {
      setState(1502);
      unaryExpression();
      setState(1503);
      assignmentOperator();
      setState(1504);
      antlrcpp::downCast<ExpressionContext *>(_localctx)->assignmentExpression = expression(1);
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(1552);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 201, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(1550);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 200, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(1508);

          if (!(precpred(_ctx, 13))) throw FailedPredicateException(this, "precpred(_ctx, 13)");
          setState(1509);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->op = _input->LT(1);
          _la = _input->LA(1);
          if (!(((((_la - 154) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 154)) & 35) != 0))) {
            antlrcpp::downCast<ExpressionContext *>(_localctx)->op = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(1510);
          expression(14);
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(1511);

          if (!(precpred(_ctx, 12))) throw FailedPredicateException(this, "precpred(_ctx, 12)");
          setState(1512);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->op = _input->LT(1);
          _la = _input->LA(1);
          if (!(_la == ObjectiveCParser::ADD

          || _la == ObjectiveCParser::SUB)) {
            antlrcpp::downCast<ExpressionContext *>(_localctx)->op = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(1513);
          expression(13);
          break;
        }

        case 3: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(1514);

          if (!(precpred(_ctx, 11))) throw FailedPredicateException(this, "precpred(_ctx, 11)");
          setState(1519);
          _errHandler->sync(this);
          switch (_input->LA(1)) {
            case ObjectiveCParser::LT: {
              setState(1515);
              match(ObjectiveCParser::LT);
              setState(1516);
              match(ObjectiveCParser::LT);
              break;
            }

            case ObjectiveCParser::GT: {
              setState(1517);
              match(ObjectiveCParser::GT);
              setState(1518);
              match(ObjectiveCParser::GT);
              break;
            }

          default:
            throw NoViableAltException(this);
          }
          setState(1521);
          expression(12);
          break;
        }

        case 4: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(1522);

          if (!(precpred(_ctx, 10))) throw FailedPredicateException(this, "precpred(_ctx, 10)");
          setState(1523);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->op = _input->LT(1);
          _la = _input->LA(1);
          if (!(((((_la - 138) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 138)) & 387) != 0))) {
            antlrcpp::downCast<ExpressionContext *>(_localctx)->op = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(1524);
          expression(11);
          break;
        }

        case 5: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(1525);

          if (!(precpred(_ctx, 9))) throw FailedPredicateException(this, "precpred(_ctx, 9)");
          setState(1526);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->op = _input->LT(1);
          _la = _input->LA(1);
          if (!(_la == ObjectiveCParser::EQUAL

          || _la == ObjectiveCParser::NOTEQUAL)) {
            antlrcpp::downCast<ExpressionContext *>(_localctx)->op = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(1527);
          expression(10);
          break;
        }

        case 6: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(1528);

          if (!(precpred(_ctx, 8))) throw FailedPredicateException(this, "precpred(_ctx, 8)");
          setState(1529);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->op = match(ObjectiveCParser::BITAND);
          setState(1530);
          expression(9);
          break;
        }

        case 7: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(1531);

          if (!(precpred(_ctx, 7))) throw FailedPredicateException(this, "precpred(_ctx, 7)");
          setState(1532);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->op = match(ObjectiveCParser::BITXOR);
          setState(1533);
          expression(8);
          break;
        }

        case 8: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(1534);

          if (!(precpred(_ctx, 6))) throw FailedPredicateException(this, "precpred(_ctx, 6)");
          setState(1535);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->op = match(ObjectiveCParser::BITOR);
          setState(1536);
          expression(7);
          break;
        }

        case 9: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(1537);

          if (!(precpred(_ctx, 5))) throw FailedPredicateException(this, "precpred(_ctx, 5)");
          setState(1538);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->op = match(ObjectiveCParser::AND);
          setState(1539);
          expression(6);
          break;
        }

        case 10: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(1540);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(1541);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->op = match(ObjectiveCParser::OR);
          setState(1542);
          expression(5);
          break;
        }

        case 11: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(1543);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(1544);
          match(ObjectiveCParser::QUESTION);
          setState(1546);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if ((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 4899916119734747136) != 0) || ((((_la - 69) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 69)) & 2523141690462269569) != 0) || ((((_la - 136) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 136)) & 4363692523569) != 0)) {
            setState(1545);
            antlrcpp::downCast<ExpressionContext *>(_localctx)->trueExpression = expression(0);
          }
          setState(1548);
          match(ObjectiveCParser::COLON);
          setState(1549);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->falseExpression = expression(4);
          break;
        }

        default:
          break;
        } 
      }
      setState(1554);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 201, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- AssignmentOperatorContext ------------------------------------------------------------------

ObjectiveCParser::AssignmentOperatorContext::AssignmentOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::AssignmentOperatorContext::ASSIGNMENT() {
  return getToken(ObjectiveCParser::ASSIGNMENT, 0);
}

tree::TerminalNode* ObjectiveCParser::AssignmentOperatorContext::MUL_ASSIGN() {
  return getToken(ObjectiveCParser::MUL_ASSIGN, 0);
}

tree::TerminalNode* ObjectiveCParser::AssignmentOperatorContext::DIV_ASSIGN() {
  return getToken(ObjectiveCParser::DIV_ASSIGN, 0);
}

tree::TerminalNode* ObjectiveCParser::AssignmentOperatorContext::MOD_ASSIGN() {
  return getToken(ObjectiveCParser::MOD_ASSIGN, 0);
}

tree::TerminalNode* ObjectiveCParser::AssignmentOperatorContext::ADD_ASSIGN() {
  return getToken(ObjectiveCParser::ADD_ASSIGN, 0);
}

tree::TerminalNode* ObjectiveCParser::AssignmentOperatorContext::SUB_ASSIGN() {
  return getToken(ObjectiveCParser::SUB_ASSIGN, 0);
}

tree::TerminalNode* ObjectiveCParser::AssignmentOperatorContext::LSHIFT_ASSIGN() {
  return getToken(ObjectiveCParser::LSHIFT_ASSIGN, 0);
}

tree::TerminalNode* ObjectiveCParser::AssignmentOperatorContext::RSHIFT_ASSIGN() {
  return getToken(ObjectiveCParser::RSHIFT_ASSIGN, 0);
}

tree::TerminalNode* ObjectiveCParser::AssignmentOperatorContext::AND_ASSIGN() {
  return getToken(ObjectiveCParser::AND_ASSIGN, 0);
}

tree::TerminalNode* ObjectiveCParser::AssignmentOperatorContext::XOR_ASSIGN() {
  return getToken(ObjectiveCParser::XOR_ASSIGN, 0);
}

tree::TerminalNode* ObjectiveCParser::AssignmentOperatorContext::OR_ASSIGN() {
  return getToken(ObjectiveCParser::OR_ASSIGN, 0);
}


size_t ObjectiveCParser::AssignmentOperatorContext::getRuleIndex() const {
  return ObjectiveCParser::RuleAssignmentOperator;
}

void ObjectiveCParser::AssignmentOperatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssignmentOperator(this);
}

void ObjectiveCParser::AssignmentOperatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssignmentOperator(this);
}

ObjectiveCParser::AssignmentOperatorContext* ObjectiveCParser::assignmentOperator() {
  AssignmentOperatorContext *_localctx = _tracker.createInstance<AssignmentOperatorContext>(_ctx, getState());
  enterRule(_localctx, 260, ObjectiveCParser::RuleAssignmentOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1555);
    _la = _input->LA(1);
    if (!(((((_la - 137) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 137)) & 8581545985) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CastExpressionContext ------------------------------------------------------------------

ObjectiveCParser::CastExpressionContext::CastExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectiveCParser::UnaryExpressionContext* ObjectiveCParser::CastExpressionContext::unaryExpression() {
  return getRuleContext<ObjectiveCParser::UnaryExpressionContext>(0);
}

tree::TerminalNode* ObjectiveCParser::CastExpressionContext::LP() {
  return getToken(ObjectiveCParser::LP, 0);
}

ObjectiveCParser::TypeNameContext* ObjectiveCParser::CastExpressionContext::typeName() {
  return getRuleContext<ObjectiveCParser::TypeNameContext>(0);
}

tree::TerminalNode* ObjectiveCParser::CastExpressionContext::RP() {
  return getToken(ObjectiveCParser::RP, 0);
}

ObjectiveCParser::CastExpressionContext* ObjectiveCParser::CastExpressionContext::castExpression() {
  return getRuleContext<ObjectiveCParser::CastExpressionContext>(0);
}

ObjectiveCParser::InitializerContext* ObjectiveCParser::CastExpressionContext::initializer() {
  return getRuleContext<ObjectiveCParser::InitializerContext>(0);
}


size_t ObjectiveCParser::CastExpressionContext::getRuleIndex() const {
  return ObjectiveCParser::RuleCastExpression;
}

void ObjectiveCParser::CastExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCastExpression(this);
}

void ObjectiveCParser::CastExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCastExpression(this);
}

ObjectiveCParser::CastExpressionContext* ObjectiveCParser::castExpression() {
  CastExpressionContext *_localctx = _tracker.createInstance<CastExpressionContext>(_ctx, getState());
  enterRule(_localctx, 262, ObjectiveCParser::RuleCastExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1566);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 203, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1557);
      unaryExpression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1558);
      match(ObjectiveCParser::LP);
      setState(1559);
      typeName();
      setState(1560);
      match(ObjectiveCParser::RP);
      setState(1564);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 202, _ctx)) {
      case 1: {
        setState(1562);
        castExpression();
        break;
      }

      case 2: {
        setState(1563);
        initializer();
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InitializerContext ------------------------------------------------------------------

ObjectiveCParser::InitializerContext::InitializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectiveCParser::ExpressionContext* ObjectiveCParser::InitializerContext::expression() {
  return getRuleContext<ObjectiveCParser::ExpressionContext>(0);
}

ObjectiveCParser::ArrayInitializerContext* ObjectiveCParser::InitializerContext::arrayInitializer() {
  return getRuleContext<ObjectiveCParser::ArrayInitializerContext>(0);
}

ObjectiveCParser::StructInitializerContext* ObjectiveCParser::InitializerContext::structInitializer() {
  return getRuleContext<ObjectiveCParser::StructInitializerContext>(0);
}


size_t ObjectiveCParser::InitializerContext::getRuleIndex() const {
  return ObjectiveCParser::RuleInitializer;
}

void ObjectiveCParser::InitializerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInitializer(this);
}

void ObjectiveCParser::InitializerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInitializer(this);
}

ObjectiveCParser::InitializerContext* ObjectiveCParser::initializer() {
  InitializerContext *_localctx = _tracker.createInstance<InitializerContext>(_ctx, getState());
  enterRule(_localctx, 264, ObjectiveCParser::RuleInitializer);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1571);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 204, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1568);
      expression(0);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1569);
      arrayInitializer();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1570);
      structInitializer();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstantExpressionContext ------------------------------------------------------------------

ObjectiveCParser::ConstantExpressionContext::ConstantExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectiveCParser::IdentifierContext* ObjectiveCParser::ConstantExpressionContext::identifier() {
  return getRuleContext<ObjectiveCParser::IdentifierContext>(0);
}

ObjectiveCParser::ConstantContext* ObjectiveCParser::ConstantExpressionContext::constant() {
  return getRuleContext<ObjectiveCParser::ConstantContext>(0);
}


size_t ObjectiveCParser::ConstantExpressionContext::getRuleIndex() const {
  return ObjectiveCParser::RuleConstantExpression;
}

void ObjectiveCParser::ConstantExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstantExpression(this);
}

void ObjectiveCParser::ConstantExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstantExpression(this);
}

ObjectiveCParser::ConstantExpressionContext* ObjectiveCParser::constantExpression() {
  ConstantExpressionContext *_localctx = _tracker.createInstance<ConstantExpressionContext>(_ctx, getState());
  enterRule(_localctx, 266, ObjectiveCParser::RuleConstantExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1575);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectiveCParser::BOOL:
      case ObjectiveCParser::Class:
      case ObjectiveCParser::BYCOPY:
      case ObjectiveCParser::BYREF:
      case ObjectiveCParser::ID:
      case ObjectiveCParser::IMP:
      case ObjectiveCParser::IN:
      case ObjectiveCParser::INOUT:
      case ObjectiveCParser::ONEWAY:
      case ObjectiveCParser::OUT:
      case ObjectiveCParser::PROTOCOL_:
      case ObjectiveCParser::SEL:
      case ObjectiveCParser::SELF:
      case ObjectiveCParser::SUPER:
      case ObjectiveCParser::ATOMIC:
      case ObjectiveCParser::NONATOMIC:
      case ObjectiveCParser::RETAIN:
      case ObjectiveCParser::AUTORELEASING_QUALIFIER:
      case ObjectiveCParser::BLOCK:
      case ObjectiveCParser::BRIDGE_RETAINED:
      case ObjectiveCParser::BRIDGE_TRANSFER:
      case ObjectiveCParser::COVARIANT:
      case ObjectiveCParser::CONTRAVARIANT:
      case ObjectiveCParser::DEPRECATED:
      case ObjectiveCParser::KINDOF:
      case ObjectiveCParser::UNUSED:
      case ObjectiveCParser::NULL_UNSPECIFIED:
      case ObjectiveCParser::NULLABLE:
      case ObjectiveCParser::NONNULL:
      case ObjectiveCParser::NULL_RESETTABLE:
      case ObjectiveCParser::NS_INLINE:
      case ObjectiveCParser::NS_ENUM:
      case ObjectiveCParser::NS_OPTIONS:
      case ObjectiveCParser::ASSIGN:
      case ObjectiveCParser::COPY:
      case ObjectiveCParser::GETTER:
      case ObjectiveCParser::SETTER:
      case ObjectiveCParser::STRONG:
      case ObjectiveCParser::READONLY:
      case ObjectiveCParser::READWRITE:
      case ObjectiveCParser::WEAK:
      case ObjectiveCParser::UNSAFE_UNRETAINED:
      case ObjectiveCParser::IB_OUTLET:
      case ObjectiveCParser::IB_OUTLET_COLLECTION:
      case ObjectiveCParser::IB_INSPECTABLE:
      case ObjectiveCParser::IB_DESIGNABLE:
      case ObjectiveCParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(1573);
        identifier();
        break;
      }

      case ObjectiveCParser::TRUE:
      case ObjectiveCParser::FALSE:
      case ObjectiveCParser::NIL:
      case ObjectiveCParser::NO:
      case ObjectiveCParser::NULL_:
      case ObjectiveCParser::YES:
      case ObjectiveCParser::ADD:
      case ObjectiveCParser::SUB:
      case ObjectiveCParser::CHARACTER_LITERAL:
      case ObjectiveCParser::HEX_LITERAL:
      case ObjectiveCParser::OCTAL_LITERAL:
      case ObjectiveCParser::BINARY_LITERAL:
      case ObjectiveCParser::DECIMAL_LITERAL:
      case ObjectiveCParser::FLOATING_POINT_LITERAL: {
        enterOuterAlt(_localctx, 2);
        setState(1574);
        constant();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnaryExpressionContext ------------------------------------------------------------------

ObjectiveCParser::UnaryExpressionContext::UnaryExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectiveCParser::PostfixExpressionContext* ObjectiveCParser::UnaryExpressionContext::postfixExpression() {
  return getRuleContext<ObjectiveCParser::PostfixExpressionContext>(0);
}

tree::TerminalNode* ObjectiveCParser::UnaryExpressionContext::SIZEOF() {
  return getToken(ObjectiveCParser::SIZEOF, 0);
}

ObjectiveCParser::UnaryExpressionContext* ObjectiveCParser::UnaryExpressionContext::unaryExpression() {
  return getRuleContext<ObjectiveCParser::UnaryExpressionContext>(0);
}

tree::TerminalNode* ObjectiveCParser::UnaryExpressionContext::LP() {
  return getToken(ObjectiveCParser::LP, 0);
}

ObjectiveCParser::TypeSpecifierContext* ObjectiveCParser::UnaryExpressionContext::typeSpecifier() {
  return getRuleContext<ObjectiveCParser::TypeSpecifierContext>(0);
}

tree::TerminalNode* ObjectiveCParser::UnaryExpressionContext::RP() {
  return getToken(ObjectiveCParser::RP, 0);
}

tree::TerminalNode* ObjectiveCParser::UnaryExpressionContext::INC() {
  return getToken(ObjectiveCParser::INC, 0);
}

tree::TerminalNode* ObjectiveCParser::UnaryExpressionContext::DEC() {
  return getToken(ObjectiveCParser::DEC, 0);
}

ObjectiveCParser::UnaryOperatorContext* ObjectiveCParser::UnaryExpressionContext::unaryOperator() {
  return getRuleContext<ObjectiveCParser::UnaryOperatorContext>(0);
}

ObjectiveCParser::CastExpressionContext* ObjectiveCParser::UnaryExpressionContext::castExpression() {
  return getRuleContext<ObjectiveCParser::CastExpressionContext>(0);
}


size_t ObjectiveCParser::UnaryExpressionContext::getRuleIndex() const {
  return ObjectiveCParser::RuleUnaryExpression;
}

void ObjectiveCParser::UnaryExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnaryExpression(this);
}

void ObjectiveCParser::UnaryExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnaryExpression(this);
}

ObjectiveCParser::UnaryExpressionContext* ObjectiveCParser::unaryExpression() {
  UnaryExpressionContext *_localctx = _tracker.createInstance<UnaryExpressionContext>(_ctx, getState());
  enterRule(_localctx, 268, ObjectiveCParser::RuleUnaryExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1591);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 207, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1577);
      postfixExpression(0);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1578);
      match(ObjectiveCParser::SIZEOF);
      setState(1584);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 206, _ctx)) {
      case 1: {
        setState(1579);
        unaryExpression();
        break;
      }

      case 2: {
        setState(1580);
        match(ObjectiveCParser::LP);
        setState(1581);
        typeSpecifier();
        setState(1582);
        match(ObjectiveCParser::RP);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1586);
      antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->op = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == ObjectiveCParser::INC

      || _la == ObjectiveCParser::DEC)) {
        antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->op = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1587);
      unaryExpression();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1588);
      unaryOperator();
      setState(1589);
      castExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnaryOperatorContext ------------------------------------------------------------------

ObjectiveCParser::UnaryOperatorContext::UnaryOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::UnaryOperatorContext::BITAND() {
  return getToken(ObjectiveCParser::BITAND, 0);
}

tree::TerminalNode* ObjectiveCParser::UnaryOperatorContext::MUL() {
  return getToken(ObjectiveCParser::MUL, 0);
}

tree::TerminalNode* ObjectiveCParser::UnaryOperatorContext::ADD() {
  return getToken(ObjectiveCParser::ADD, 0);
}

tree::TerminalNode* ObjectiveCParser::UnaryOperatorContext::SUB() {
  return getToken(ObjectiveCParser::SUB, 0);
}

tree::TerminalNode* ObjectiveCParser::UnaryOperatorContext::TILDE() {
  return getToken(ObjectiveCParser::TILDE, 0);
}

tree::TerminalNode* ObjectiveCParser::UnaryOperatorContext::BANG() {
  return getToken(ObjectiveCParser::BANG, 0);
}


size_t ObjectiveCParser::UnaryOperatorContext::getRuleIndex() const {
  return ObjectiveCParser::RuleUnaryOperator;
}

void ObjectiveCParser::UnaryOperatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnaryOperator(this);
}

void ObjectiveCParser::UnaryOperatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnaryOperator(this);
}

ObjectiveCParser::UnaryOperatorContext* ObjectiveCParser::unaryOperator() {
  UnaryOperatorContext *_localctx = _tracker.createInstance<UnaryOperatorContext>(_ctx, getState());
  enterRule(_localctx, 270, ObjectiveCParser::RuleUnaryOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1593);
    _la = _input->LA(1);
    if (!(((((_la - 140) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 140)) & 94211) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PostfixExpressionContext ------------------------------------------------------------------

ObjectiveCParser::PostfixExpressionContext::PostfixExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectiveCParser::PrimaryExpressionContext* ObjectiveCParser::PostfixExpressionContext::primaryExpression() {
  return getRuleContext<ObjectiveCParser::PrimaryExpressionContext>(0);
}

std::vector<ObjectiveCParser::PostfixContext *> ObjectiveCParser::PostfixExpressionContext::postfix() {
  return getRuleContexts<ObjectiveCParser::PostfixContext>();
}

ObjectiveCParser::PostfixContext* ObjectiveCParser::PostfixExpressionContext::postfix(size_t i) {
  return getRuleContext<ObjectiveCParser::PostfixContext>(i);
}

ObjectiveCParser::PostfixExpressionContext* ObjectiveCParser::PostfixExpressionContext::postfixExpression() {
  return getRuleContext<ObjectiveCParser::PostfixExpressionContext>(0);
}

ObjectiveCParser::IdentifierContext* ObjectiveCParser::PostfixExpressionContext::identifier() {
  return getRuleContext<ObjectiveCParser::IdentifierContext>(0);
}

tree::TerminalNode* ObjectiveCParser::PostfixExpressionContext::DOT() {
  return getToken(ObjectiveCParser::DOT, 0);
}

tree::TerminalNode* ObjectiveCParser::PostfixExpressionContext::STRUCTACCESS() {
  return getToken(ObjectiveCParser::STRUCTACCESS, 0);
}


size_t ObjectiveCParser::PostfixExpressionContext::getRuleIndex() const {
  return ObjectiveCParser::RulePostfixExpression;
}

void ObjectiveCParser::PostfixExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPostfixExpression(this);
}

void ObjectiveCParser::PostfixExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPostfixExpression(this);
}


ObjectiveCParser::PostfixExpressionContext* ObjectiveCParser::postfixExpression() {
   return postfixExpression(0);
}

ObjectiveCParser::PostfixExpressionContext* ObjectiveCParser::postfixExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  ObjectiveCParser::PostfixExpressionContext *_localctx = _tracker.createInstance<PostfixExpressionContext>(_ctx, parentState);
  ObjectiveCParser::PostfixExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 272;
  enterRecursionRule(_localctx, 272, ObjectiveCParser::RulePostfixExpression, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1596);
    primaryExpression();
    setState(1600);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 208, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1597);
        postfix(); 
      }
      setState(1602);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 208, _ctx);
    }
    _ctx->stop = _input->LT(-1);
    setState(1614);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 210, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<PostfixExpressionContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RulePostfixExpression);
        setState(1603);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(1604);
        _la = _input->LA(1);
        if (!(_la == ObjectiveCParser::DOT

        || _la == ObjectiveCParser::STRUCTACCESS)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(1605);
        identifier();
        setState(1609);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 209, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(1606);
            postfix(); 
          }
          setState(1611);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 209, _ctx);
        } 
      }
      setState(1616);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 210, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- PostfixContext ------------------------------------------------------------------

ObjectiveCParser::PostfixContext::PostfixContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::PostfixContext::LBRACK() {
  return getToken(ObjectiveCParser::LBRACK, 0);
}

ObjectiveCParser::ExpressionContext* ObjectiveCParser::PostfixContext::expression() {
  return getRuleContext<ObjectiveCParser::ExpressionContext>(0);
}

tree::TerminalNode* ObjectiveCParser::PostfixContext::RBRACK() {
  return getToken(ObjectiveCParser::RBRACK, 0);
}

tree::TerminalNode* ObjectiveCParser::PostfixContext::LP() {
  return getToken(ObjectiveCParser::LP, 0);
}

std::vector<tree::TerminalNode *> ObjectiveCParser::PostfixContext::RP() {
  return getTokens(ObjectiveCParser::RP);
}

tree::TerminalNode* ObjectiveCParser::PostfixContext::RP(size_t i) {
  return getToken(ObjectiveCParser::RP, i);
}

ObjectiveCParser::ArgumentExpressionListContext* ObjectiveCParser::PostfixContext::argumentExpressionList() {
  return getRuleContext<ObjectiveCParser::ArgumentExpressionListContext>(0);
}

std::vector<tree::TerminalNode *> ObjectiveCParser::PostfixContext::COMMA() {
  return getTokens(ObjectiveCParser::COMMA);
}

tree::TerminalNode* ObjectiveCParser::PostfixContext::COMMA(size_t i) {
  return getToken(ObjectiveCParser::COMMA, i);
}

tree::TerminalNode* ObjectiveCParser::PostfixContext::INC() {
  return getToken(ObjectiveCParser::INC, 0);
}

tree::TerminalNode* ObjectiveCParser::PostfixContext::DEC() {
  return getToken(ObjectiveCParser::DEC, 0);
}


size_t ObjectiveCParser::PostfixContext::getRuleIndex() const {
  return ObjectiveCParser::RulePostfix;
}

void ObjectiveCParser::PostfixContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPostfix(this);
}

void ObjectiveCParser::PostfixContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPostfix(this);
}

ObjectiveCParser::PostfixContext* ObjectiveCParser::postfix() {
  PostfixContext *_localctx = _tracker.createInstance<PostfixContext>(_ctx, getState());
  enterRule(_localctx, 274, ObjectiveCParser::RulePostfix);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1635);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 214, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1617);
      match(ObjectiveCParser::LBRACK);
      setState(1618);
      expression(0);
      setState(1619);
      match(ObjectiveCParser::RBRACK);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1621);
      match(ObjectiveCParser::LP);
      setState(1623);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 4899916127411120656) != 0) || ((((_la - 69) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 69)) & 2523141690529378433) != 0) || ((((_la - 136) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 136)) & 4363692523569) != 0)) {
        setState(1622);
        argumentExpressionList();
      }
      setState(1625);
      match(ObjectiveCParser::RP);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1626);
      match(ObjectiveCParser::LP);
      setState(1629); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(1629);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 212, _ctx)) {
        case 1: {
          setState(1627);
          match(ObjectiveCParser::COMMA);
          break;
        }

        case 2: {
          setState(1628);
          antlrcpp::downCast<PostfixContext *>(_localctx)->_tset3110 = _input->LT(1);
          _la = _input->LA(1);
          if (_la == 0 || _la == Token::EOF || (_la == ObjectiveCParser::RP)) {
            antlrcpp::downCast<PostfixContext *>(_localctx)->_tset3110 = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          antlrcpp::downCast<PostfixContext *>(_localctx)->macroArguments.push_back(antlrcpp::downCast<PostfixContext *>(_localctx)->_tset3110);
          break;
        }

        default:
          break;
        }
        setState(1631); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -2) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 9223372036854775807) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 128)) & -1) != 0) || ((((_la - 192) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 192)) & 2147483647) != 0));
      setState(1633);
      match(ObjectiveCParser::RP);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1634);
      antlrcpp::downCast<PostfixContext *>(_localctx)->op = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == ObjectiveCParser::INC

      || _la == ObjectiveCParser::DEC)) {
        antlrcpp::downCast<PostfixContext *>(_localctx)->op = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArgumentExpressionListContext ------------------------------------------------------------------

ObjectiveCParser::ArgumentExpressionListContext::ArgumentExpressionListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectiveCParser::ArgumentExpressionContext *> ObjectiveCParser::ArgumentExpressionListContext::argumentExpression() {
  return getRuleContexts<ObjectiveCParser::ArgumentExpressionContext>();
}

ObjectiveCParser::ArgumentExpressionContext* ObjectiveCParser::ArgumentExpressionListContext::argumentExpression(size_t i) {
  return getRuleContext<ObjectiveCParser::ArgumentExpressionContext>(i);
}

std::vector<tree::TerminalNode *> ObjectiveCParser::ArgumentExpressionListContext::COMMA() {
  return getTokens(ObjectiveCParser::COMMA);
}

tree::TerminalNode* ObjectiveCParser::ArgumentExpressionListContext::COMMA(size_t i) {
  return getToken(ObjectiveCParser::COMMA, i);
}


size_t ObjectiveCParser::ArgumentExpressionListContext::getRuleIndex() const {
  return ObjectiveCParser::RuleArgumentExpressionList;
}

void ObjectiveCParser::ArgumentExpressionListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArgumentExpressionList(this);
}

void ObjectiveCParser::ArgumentExpressionListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArgumentExpressionList(this);
}

ObjectiveCParser::ArgumentExpressionListContext* ObjectiveCParser::argumentExpressionList() {
  ArgumentExpressionListContext *_localctx = _tracker.createInstance<ArgumentExpressionListContext>(_ctx, getState());
  enterRule(_localctx, 276, ObjectiveCParser::RuleArgumentExpressionList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1637);
    argumentExpression();
    setState(1642);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectiveCParser::COMMA) {
      setState(1638);
      match(ObjectiveCParser::COMMA);
      setState(1639);
      argumentExpression();
      setState(1644);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArgumentExpressionContext ------------------------------------------------------------------

ObjectiveCParser::ArgumentExpressionContext::ArgumentExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectiveCParser::ExpressionContext* ObjectiveCParser::ArgumentExpressionContext::expression() {
  return getRuleContext<ObjectiveCParser::ExpressionContext>(0);
}

ObjectiveCParser::TypeSpecifierContext* ObjectiveCParser::ArgumentExpressionContext::typeSpecifier() {
  return getRuleContext<ObjectiveCParser::TypeSpecifierContext>(0);
}


size_t ObjectiveCParser::ArgumentExpressionContext::getRuleIndex() const {
  return ObjectiveCParser::RuleArgumentExpression;
}

void ObjectiveCParser::ArgumentExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArgumentExpression(this);
}

void ObjectiveCParser::ArgumentExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArgumentExpression(this);
}

ObjectiveCParser::ArgumentExpressionContext* ObjectiveCParser::argumentExpression() {
  ArgumentExpressionContext *_localctx = _tracker.createInstance<ArgumentExpressionContext>(_ctx, getState());
  enterRule(_localctx, 278, ObjectiveCParser::RuleArgumentExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1647);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 216, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1645);
      expression(0);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1646);
      typeSpecifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrimaryExpressionContext ------------------------------------------------------------------

ObjectiveCParser::PrimaryExpressionContext::PrimaryExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectiveCParser::IdentifierContext* ObjectiveCParser::PrimaryExpressionContext::identifier() {
  return getRuleContext<ObjectiveCParser::IdentifierContext>(0);
}

ObjectiveCParser::ConstantContext* ObjectiveCParser::PrimaryExpressionContext::constant() {
  return getRuleContext<ObjectiveCParser::ConstantContext>(0);
}

ObjectiveCParser::StringLiteralContext* ObjectiveCParser::PrimaryExpressionContext::stringLiteral() {
  return getRuleContext<ObjectiveCParser::StringLiteralContext>(0);
}

tree::TerminalNode* ObjectiveCParser::PrimaryExpressionContext::LP() {
  return getToken(ObjectiveCParser::LP, 0);
}

ObjectiveCParser::ExpressionContext* ObjectiveCParser::PrimaryExpressionContext::expression() {
  return getRuleContext<ObjectiveCParser::ExpressionContext>(0);
}

tree::TerminalNode* ObjectiveCParser::PrimaryExpressionContext::RP() {
  return getToken(ObjectiveCParser::RP, 0);
}

ObjectiveCParser::MessageExpressionContext* ObjectiveCParser::PrimaryExpressionContext::messageExpression() {
  return getRuleContext<ObjectiveCParser::MessageExpressionContext>(0);
}

ObjectiveCParser::SelectorExpressionContext* ObjectiveCParser::PrimaryExpressionContext::selectorExpression() {
  return getRuleContext<ObjectiveCParser::SelectorExpressionContext>(0);
}

ObjectiveCParser::ProtocolExpressionContext* ObjectiveCParser::PrimaryExpressionContext::protocolExpression() {
  return getRuleContext<ObjectiveCParser::ProtocolExpressionContext>(0);
}

ObjectiveCParser::EncodeExpressionContext* ObjectiveCParser::PrimaryExpressionContext::encodeExpression() {
  return getRuleContext<ObjectiveCParser::EncodeExpressionContext>(0);
}

ObjectiveCParser::DictionaryExpressionContext* ObjectiveCParser::PrimaryExpressionContext::dictionaryExpression() {
  return getRuleContext<ObjectiveCParser::DictionaryExpressionContext>(0);
}

ObjectiveCParser::ArrayExpressionContext* ObjectiveCParser::PrimaryExpressionContext::arrayExpression() {
  return getRuleContext<ObjectiveCParser::ArrayExpressionContext>(0);
}

ObjectiveCParser::BoxExpressionContext* ObjectiveCParser::PrimaryExpressionContext::boxExpression() {
  return getRuleContext<ObjectiveCParser::BoxExpressionContext>(0);
}

ObjectiveCParser::BlockExpressionContext* ObjectiveCParser::PrimaryExpressionContext::blockExpression() {
  return getRuleContext<ObjectiveCParser::BlockExpressionContext>(0);
}


size_t ObjectiveCParser::PrimaryExpressionContext::getRuleIndex() const {
  return ObjectiveCParser::RulePrimaryExpression;
}

void ObjectiveCParser::PrimaryExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryExpression(this);
}

void ObjectiveCParser::PrimaryExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryExpression(this);
}

ObjectiveCParser::PrimaryExpressionContext* ObjectiveCParser::primaryExpression() {
  PrimaryExpressionContext *_localctx = _tracker.createInstance<PrimaryExpressionContext>(_ctx, getState());
  enterRule(_localctx, 280, ObjectiveCParser::RulePrimaryExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1664);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 217, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1649);
      identifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1650);
      constant();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1651);
      stringLiteral();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1652);
      match(ObjectiveCParser::LP);
      setState(1653);
      expression(0);
      setState(1654);
      match(ObjectiveCParser::RP);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1656);
      messageExpression();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1657);
      selectorExpression();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1658);
      protocolExpression();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1659);
      encodeExpression();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1660);
      dictionaryExpression();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(1661);
      arrayExpression();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(1662);
      boxExpression();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(1663);
      blockExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstantContext ------------------------------------------------------------------

ObjectiveCParser::ConstantContext::ConstantContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::ConstantContext::HEX_LITERAL() {
  return getToken(ObjectiveCParser::HEX_LITERAL, 0);
}

tree::TerminalNode* ObjectiveCParser::ConstantContext::OCTAL_LITERAL() {
  return getToken(ObjectiveCParser::OCTAL_LITERAL, 0);
}

tree::TerminalNode* ObjectiveCParser::ConstantContext::BINARY_LITERAL() {
  return getToken(ObjectiveCParser::BINARY_LITERAL, 0);
}

tree::TerminalNode* ObjectiveCParser::ConstantContext::DECIMAL_LITERAL() {
  return getToken(ObjectiveCParser::DECIMAL_LITERAL, 0);
}

tree::TerminalNode* ObjectiveCParser::ConstantContext::ADD() {
  return getToken(ObjectiveCParser::ADD, 0);
}

tree::TerminalNode* ObjectiveCParser::ConstantContext::SUB() {
  return getToken(ObjectiveCParser::SUB, 0);
}

tree::TerminalNode* ObjectiveCParser::ConstantContext::FLOATING_POINT_LITERAL() {
  return getToken(ObjectiveCParser::FLOATING_POINT_LITERAL, 0);
}

tree::TerminalNode* ObjectiveCParser::ConstantContext::CHARACTER_LITERAL() {
  return getToken(ObjectiveCParser::CHARACTER_LITERAL, 0);
}

tree::TerminalNode* ObjectiveCParser::ConstantContext::NIL() {
  return getToken(ObjectiveCParser::NIL, 0);
}

tree::TerminalNode* ObjectiveCParser::ConstantContext::NULL_() {
  return getToken(ObjectiveCParser::NULL_, 0);
}

tree::TerminalNode* ObjectiveCParser::ConstantContext::YES() {
  return getToken(ObjectiveCParser::YES, 0);
}

tree::TerminalNode* ObjectiveCParser::ConstantContext::NO() {
  return getToken(ObjectiveCParser::NO, 0);
}

tree::TerminalNode* ObjectiveCParser::ConstantContext::TRUE() {
  return getToken(ObjectiveCParser::TRUE, 0);
}

tree::TerminalNode* ObjectiveCParser::ConstantContext::FALSE() {
  return getToken(ObjectiveCParser::FALSE, 0);
}


size_t ObjectiveCParser::ConstantContext::getRuleIndex() const {
  return ObjectiveCParser::RuleConstant;
}

void ObjectiveCParser::ConstantContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstant(this);
}

void ObjectiveCParser::ConstantContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstant(this);
}

ObjectiveCParser::ConstantContext* ObjectiveCParser::constant() {
  ConstantContext *_localctx = _tracker.createInstance<ConstantContext>(_ctx, getState());
  enterRule(_localctx, 282, ObjectiveCParser::RuleConstant);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1684);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 220, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1666);
      match(ObjectiveCParser::HEX_LITERAL);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1667);
      match(ObjectiveCParser::OCTAL_LITERAL);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1668);
      match(ObjectiveCParser::BINARY_LITERAL);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1670);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ObjectiveCParser::ADD

      || _la == ObjectiveCParser::SUB) {
        setState(1669);
        _la = _input->LA(1);
        if (!(_la == ObjectiveCParser::ADD

        || _la == ObjectiveCParser::SUB)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
      }
      setState(1672);
      match(ObjectiveCParser::DECIMAL_LITERAL);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1674);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ObjectiveCParser::ADD

      || _la == ObjectiveCParser::SUB) {
        setState(1673);
        _la = _input->LA(1);
        if (!(_la == ObjectiveCParser::ADD

        || _la == ObjectiveCParser::SUB)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
      }
      setState(1676);
      match(ObjectiveCParser::FLOATING_POINT_LITERAL);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1677);
      match(ObjectiveCParser::CHARACTER_LITERAL);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1678);
      match(ObjectiveCParser::NIL);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1679);
      match(ObjectiveCParser::NULL_);
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1680);
      match(ObjectiveCParser::YES);
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(1681);
      match(ObjectiveCParser::NO);
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(1682);
      match(ObjectiveCParser::TRUE);
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(1683);
      match(ObjectiveCParser::FALSE);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StringLiteralContext ------------------------------------------------------------------

ObjectiveCParser::StringLiteralContext::StringLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> ObjectiveCParser::StringLiteralContext::STRING_START() {
  return getTokens(ObjectiveCParser::STRING_START);
}

tree::TerminalNode* ObjectiveCParser::StringLiteralContext::STRING_START(size_t i) {
  return getToken(ObjectiveCParser::STRING_START, i);
}

std::vector<tree::TerminalNode *> ObjectiveCParser::StringLiteralContext::STRING_END() {
  return getTokens(ObjectiveCParser::STRING_END);
}

tree::TerminalNode* ObjectiveCParser::StringLiteralContext::STRING_END(size_t i) {
  return getToken(ObjectiveCParser::STRING_END, i);
}

std::vector<tree::TerminalNode *> ObjectiveCParser::StringLiteralContext::STRING_VALUE() {
  return getTokens(ObjectiveCParser::STRING_VALUE);
}

tree::TerminalNode* ObjectiveCParser::StringLiteralContext::STRING_VALUE(size_t i) {
  return getToken(ObjectiveCParser::STRING_VALUE, i);
}

std::vector<tree::TerminalNode *> ObjectiveCParser::StringLiteralContext::STRING_NEWLINE() {
  return getTokens(ObjectiveCParser::STRING_NEWLINE);
}

tree::TerminalNode* ObjectiveCParser::StringLiteralContext::STRING_NEWLINE(size_t i) {
  return getToken(ObjectiveCParser::STRING_NEWLINE, i);
}


size_t ObjectiveCParser::StringLiteralContext::getRuleIndex() const {
  return ObjectiveCParser::RuleStringLiteral;
}

void ObjectiveCParser::StringLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStringLiteral(this);
}

void ObjectiveCParser::StringLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStringLiteral(this);
}

ObjectiveCParser::StringLiteralContext* ObjectiveCParser::stringLiteral() {
  StringLiteralContext *_localctx = _tracker.createInstance<StringLiteralContext>(_ctx, getState());
  enterRule(_localctx, 284, ObjectiveCParser::RuleStringLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1694); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1686);
              match(ObjectiveCParser::STRING_START);
              setState(1690);
              _errHandler->sync(this);
              _la = _input->LA(1);
              while (_la == ObjectiveCParser::STRING_NEWLINE

              || _la == ObjectiveCParser::STRING_VALUE) {
                setState(1687);
                _la = _input->LA(1);
                if (!(_la == ObjectiveCParser::STRING_NEWLINE

                || _la == ObjectiveCParser::STRING_VALUE)) {
                _errHandler->recoverInline(this);
                }
                else {
                  _errHandler->reportMatch(this);
                  consume();
                }
                setState(1692);
                _errHandler->sync(this);
                _la = _input->LA(1);
              }
              setState(1693);
              match(ObjectiveCParser::STRING_END);
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1696); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 222, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdentifierContext ------------------------------------------------------------------

ObjectiveCParser::IdentifierContext::IdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectiveCParser::IdentifierContext::IDENTIFIER() {
  return getToken(ObjectiveCParser::IDENTIFIER, 0);
}

tree::TerminalNode* ObjectiveCParser::IdentifierContext::BOOL() {
  return getToken(ObjectiveCParser::BOOL, 0);
}

tree::TerminalNode* ObjectiveCParser::IdentifierContext::Class() {
  return getToken(ObjectiveCParser::Class, 0);
}

tree::TerminalNode* ObjectiveCParser::IdentifierContext::BYCOPY() {
  return getToken(ObjectiveCParser::BYCOPY, 0);
}

tree::TerminalNode* ObjectiveCParser::IdentifierContext::BYREF() {
  return getToken(ObjectiveCParser::BYREF, 0);
}

tree::TerminalNode* ObjectiveCParser::IdentifierContext::ID() {
  return getToken(ObjectiveCParser::ID, 0);
}

tree::TerminalNode* ObjectiveCParser::IdentifierContext::IMP() {
  return getToken(ObjectiveCParser::IMP, 0);
}

tree::TerminalNode* ObjectiveCParser::IdentifierContext::IN() {
  return getToken(ObjectiveCParser::IN, 0);
}

tree::TerminalNode* ObjectiveCParser::IdentifierContext::INOUT() {
  return getToken(ObjectiveCParser::INOUT, 0);
}

tree::TerminalNode* ObjectiveCParser::IdentifierContext::ONEWAY() {
  return getToken(ObjectiveCParser::ONEWAY, 0);
}

tree::TerminalNode* ObjectiveCParser::IdentifierContext::OUT() {
  return getToken(ObjectiveCParser::OUT, 0);
}

tree::TerminalNode* ObjectiveCParser::IdentifierContext::PROTOCOL_() {
  return getToken(ObjectiveCParser::PROTOCOL_, 0);
}

tree::TerminalNode* ObjectiveCParser::IdentifierContext::SEL() {
  return getToken(ObjectiveCParser::SEL, 0);
}

tree::TerminalNode* ObjectiveCParser::IdentifierContext::SELF() {
  return getToken(ObjectiveCParser::SELF, 0);
}

tree::TerminalNode* ObjectiveCParser::IdentifierContext::SUPER() {
  return getToken(ObjectiveCParser::SUPER, 0);
}

tree::TerminalNode* ObjectiveCParser::IdentifierContext::ATOMIC() {
  return getToken(ObjectiveCParser::ATOMIC, 0);
}

tree::TerminalNode* ObjectiveCParser::IdentifierContext::NONATOMIC() {
  return getToken(ObjectiveCParser::NONATOMIC, 0);
}

tree::TerminalNode* ObjectiveCParser::IdentifierContext::RETAIN() {
  return getToken(ObjectiveCParser::RETAIN, 0);
}

tree::TerminalNode* ObjectiveCParser::IdentifierContext::AUTORELEASING_QUALIFIER() {
  return getToken(ObjectiveCParser::AUTORELEASING_QUALIFIER, 0);
}

tree::TerminalNode* ObjectiveCParser::IdentifierContext::BLOCK() {
  return getToken(ObjectiveCParser::BLOCK, 0);
}

tree::TerminalNode* ObjectiveCParser::IdentifierContext::BRIDGE_RETAINED() {
  return getToken(ObjectiveCParser::BRIDGE_RETAINED, 0);
}

tree::TerminalNode* ObjectiveCParser::IdentifierContext::BRIDGE_TRANSFER() {
  return getToken(ObjectiveCParser::BRIDGE_TRANSFER, 0);
}

tree::TerminalNode* ObjectiveCParser::IdentifierContext::COVARIANT() {
  return getToken(ObjectiveCParser::COVARIANT, 0);
}

tree::TerminalNode* ObjectiveCParser::IdentifierContext::CONTRAVARIANT() {
  return getToken(ObjectiveCParser::CONTRAVARIANT, 0);
}

tree::TerminalNode* ObjectiveCParser::IdentifierContext::DEPRECATED() {
  return getToken(ObjectiveCParser::DEPRECATED, 0);
}

tree::TerminalNode* ObjectiveCParser::IdentifierContext::KINDOF() {
  return getToken(ObjectiveCParser::KINDOF, 0);
}

tree::TerminalNode* ObjectiveCParser::IdentifierContext::UNUSED() {
  return getToken(ObjectiveCParser::UNUSED, 0);
}

tree::TerminalNode* ObjectiveCParser::IdentifierContext::NS_INLINE() {
  return getToken(ObjectiveCParser::NS_INLINE, 0);
}

tree::TerminalNode* ObjectiveCParser::IdentifierContext::NS_ENUM() {
  return getToken(ObjectiveCParser::NS_ENUM, 0);
}

tree::TerminalNode* ObjectiveCParser::IdentifierContext::NS_OPTIONS() {
  return getToken(ObjectiveCParser::NS_OPTIONS, 0);
}

tree::TerminalNode* ObjectiveCParser::IdentifierContext::NULL_UNSPECIFIED() {
  return getToken(ObjectiveCParser::NULL_UNSPECIFIED, 0);
}

tree::TerminalNode* ObjectiveCParser::IdentifierContext::NULLABLE() {
  return getToken(ObjectiveCParser::NULLABLE, 0);
}

tree::TerminalNode* ObjectiveCParser::IdentifierContext::NONNULL() {
  return getToken(ObjectiveCParser::NONNULL, 0);
}

tree::TerminalNode* ObjectiveCParser::IdentifierContext::NULL_RESETTABLE() {
  return getToken(ObjectiveCParser::NULL_RESETTABLE, 0);
}

tree::TerminalNode* ObjectiveCParser::IdentifierContext::ASSIGN() {
  return getToken(ObjectiveCParser::ASSIGN, 0);
}

tree::TerminalNode* ObjectiveCParser::IdentifierContext::COPY() {
  return getToken(ObjectiveCParser::COPY, 0);
}

tree::TerminalNode* ObjectiveCParser::IdentifierContext::GETTER() {
  return getToken(ObjectiveCParser::GETTER, 0);
}

tree::TerminalNode* ObjectiveCParser::IdentifierContext::SETTER() {
  return getToken(ObjectiveCParser::SETTER, 0);
}

tree::TerminalNode* ObjectiveCParser::IdentifierContext::STRONG() {
  return getToken(ObjectiveCParser::STRONG, 0);
}

tree::TerminalNode* ObjectiveCParser::IdentifierContext::READONLY() {
  return getToken(ObjectiveCParser::READONLY, 0);
}

tree::TerminalNode* ObjectiveCParser::IdentifierContext::READWRITE() {
  return getToken(ObjectiveCParser::READWRITE, 0);
}

tree::TerminalNode* ObjectiveCParser::IdentifierContext::WEAK() {
  return getToken(ObjectiveCParser::WEAK, 0);
}

tree::TerminalNode* ObjectiveCParser::IdentifierContext::UNSAFE_UNRETAINED() {
  return getToken(ObjectiveCParser::UNSAFE_UNRETAINED, 0);
}

tree::TerminalNode* ObjectiveCParser::IdentifierContext::IB_OUTLET() {
  return getToken(ObjectiveCParser::IB_OUTLET, 0);
}

tree::TerminalNode* ObjectiveCParser::IdentifierContext::IB_OUTLET_COLLECTION() {
  return getToken(ObjectiveCParser::IB_OUTLET_COLLECTION, 0);
}

tree::TerminalNode* ObjectiveCParser::IdentifierContext::IB_INSPECTABLE() {
  return getToken(ObjectiveCParser::IB_INSPECTABLE, 0);
}

tree::TerminalNode* ObjectiveCParser::IdentifierContext::IB_DESIGNABLE() {
  return getToken(ObjectiveCParser::IB_DESIGNABLE, 0);
}


size_t ObjectiveCParser::IdentifierContext::getRuleIndex() const {
  return ObjectiveCParser::RuleIdentifier;
}

void ObjectiveCParser::IdentifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIdentifier(this);
}

void ObjectiveCParser::IdentifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ObjectiveCParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIdentifier(this);
}

ObjectiveCParser::IdentifierContext* ObjectiveCParser::identifier() {
  IdentifierContext *_localctx = _tracker.createInstance<IdentifierContext>(_ctx, getState());
  enterRule(_localctx, 286, ObjectiveCParser::RuleIdentifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1698);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 142143763727253504) != 0) || ((((_la - 81) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 81)) & 17867063762871) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool ObjectiveCParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 129: return expressionSempred(antlrcpp::downCast<ExpressionContext *>(context), predicateIndex);
    case 136: return postfixExpressionSempred(antlrcpp::downCast<PostfixExpressionContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool ObjectiveCParser::expressionSempred(ExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return precpred(_ctx, 13);
    case 1: return precpred(_ctx, 12);
    case 2: return precpred(_ctx, 11);
    case 3: return precpred(_ctx, 10);
    case 4: return precpred(_ctx, 9);
    case 5: return precpred(_ctx, 8);
    case 6: return precpred(_ctx, 7);
    case 7: return precpred(_ctx, 6);
    case 8: return precpred(_ctx, 5);
    case 9: return precpred(_ctx, 4);
    case 10: return precpred(_ctx, 3);

  default:
    break;
  }
  return true;
}

bool ObjectiveCParser::postfixExpressionSempred(PostfixExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 11: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

void ObjectiveCParser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  objectivecparserParserInitialize();
#else
  ::antlr4::internal::call_once(objectivecparserParserOnceFlag, objectivecparserParserInitialize);
#endif
}
