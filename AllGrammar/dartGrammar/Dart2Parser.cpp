
// Generated from Dart2Parser.g4 by ANTLR 4.13.0


#include "Dart2ParserListener.h"

#include "Dart2Parser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct Dart2ParserStaticData final {
  Dart2ParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  Dart2ParserStaticData(const Dart2ParserStaticData&) = delete;
  Dart2ParserStaticData(Dart2ParserStaticData&&) = delete;
  Dart2ParserStaticData& operator=(const Dart2ParserStaticData&) = delete;
  Dart2ParserStaticData& operator=(Dart2ParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag dart2parserParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
Dart2ParserStaticData *dart2parserParserStaticData = nullptr;

void dart2parserParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (dart2parserParserStaticData != nullptr) {
    return;
  }
#else
  assert(dart2parserParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<Dart2ParserStaticData>(
    std::vector<std::string>{
      "additiveExpression", "additiveOperator", "argumentList", "argumentPart", 
      "arguments", "asOperator", "assertion", "assertStatement", "assignableExpression", 
      "assignableSelector", "assignableSelectorPart", "assignmentOperator", 
      "awaitExpression", "binaryOperator", "bitwiseAndExpression", "bitwiseOperator", 
      "bitwiseOrExpression", "bitwiseXorExpression", "block", "booleanLiteral", 
      "breakStatement", "cascade", "cascadeAssignment", "cascadeSection", 
      "cascadeSectionTail", "cascadeSelector", "catchPart", "classDeclaration", 
      "classMemberDeclaration", "combinator", "compilationUnit", "compoundAssignmentOperator", 
      "conditionalExpression", "configurableUri", "configurationUri", "constantConstructorSignature", 
      "constObjectExpression", "constructorDesignation", "constructorInvocation", 
      "constructorName", "constructorSignature", "continueStatement", "declaration", 
      "declaredIdentifier", "defaultCase", "defaultFormalParameter", "defaultNamedParameter", 
      "doStatement", "dottedIdentifierList", "element", "elements", "enumEntry", 
      "enumType", "equalityExpression", "equalityOperator", "expression", 
      "expressionElement", "expressionList", "expressionStatement", "expressionWithoutCascade", 
      "extensionDeclaration", "factoryConstructorSignature", "fieldFormalParameter", 
      "fieldInitializer", "finalConstVarOrType", "finallyPart", "forElement", 
      "forInitializerStatement", "forLoopParts", "formalParameterList", 
      "formalParameterPart", "forStatement", "functionBody", "functionExpression", 
      "functionExpressionBody", "functionFormalParameter", "functionPrefix", 
      "functionSignature", "functionType", "functionTypeAlias", "functionTypeTail", 
      "functionTypeTails", "getterSignature", "identifier", "identifierList", 
      "ifElement", "ifNullExpression", "ifStatement", "importOrExport", 
      "importSpecification", "incrementOperator", "initializedIdentifier", 
      "initializedIdentifierList", "initializedVariableDeclaration", "initializerExpression", 
      "initializerListEntry", "initializers", "interfaces", "isOperator", 
      "label", "letExpression", "libraryDeclaration", "libraryExport", "libraryImport", 
      "libraryName", "listLiteral", "literal", "localFunctionDeclaration", 
      "localVariableDeclaration", "logicalAndExpression", "logicalOrExpression", 
      "mapElement", "metadata", "metadatum", "methodSignature", "minusOperator", 
      "mixinApplication", "mixinApplicationClass", "mixinDeclaration", "mixins", 
      "multilineString", "multiplicativeExpression", "multiplicativeOperator", 
      "namedArgument", "namedFormalParameters", "namedParameterType", "namedParameterTypes", 
      "negationOperator", "newExpression", "nonLabelledStatement", "normalFormalParameter", 
      "normalFormalParameterNoMetadata", "normalFormalParameters", "normalParameterType", 
      "normalParameterTypes", "nullLiteral", "numericLiteral", "onPart", 
      "operator", "operatorSignature", "optionalOrNamedFormalParameters", 
      "optionalParameterTypes", "optionalPositionalFormalParameters", "optionalPositionalParameterTypes", 
      "parameterTypeList", "partDeclaration", "partDirective", "partHeader", 
      "postfixExpression", "postfixOperator", "prefixOperator", "primary", 
      "qualifiedName", "redirectingFactoryConstructorSignature", "redirection", 
      "relationalExpression", "relationalOperator", "reserved_word", "rethrowStatement", 
      "returnStatement", "selector", "setOrMapLiteral", "setterSignature", 
      "shiftExpression", "shiftOperator", "simpleFormalParameter", "singleLineString", 
      "spreadElement", "statement", "statements", "staticFinalDeclaration", 
      "staticFinalDeclarationList", "stringLiteral", "superclass", "switchCase", 
      "switchStatement", "symbolLiteral", "thisExpression", "throwExpression", 
      "throwExpressionWithoutCascade", "tildeOperator", "topLevelDeclaration", 
      "tryStatement", "type", "typeAlias", "typeArguments", "typeCast", 
      "typedIdentifier", "typeIdentifier", "typeList", "typeName", "typeNotFunction", 
      "typeNotVoid", "typeNotVoidList", "typeNotVoidNotFunction", "typeNotVoidNotFunctionList", 
      "typeParameter", "typeParameters", "typeTest", "unaryExpression", 
      "unconditionalAssignableSelector", "uri", "uriTest", "varOrType", 
      "whileStatement", "yieldEachStatement", "yieldStatement"
    },
    std::vector<std::string>{
      "", "'&'", "'&&'", "'&='", "'@'", "','", "']'", "'}'", "'^'", "'^='", 
      "':'", "')'", "'.'", "'..'", "'...'", "'...\\u003F'", "'=='", "'=>'", 
      "'='", "'>'", "'<'", "'<='", "'<<'", "'<<='", "'-='", "'-'", "'--'", 
      "'!='", "'!'", "'['", "'{'", "'('", "'|'", "'%'", "'%='", "'+'", "'+='", 
      "'++'", "'#'", "'|='", "'||'", "'\\u003F'", "'\\u003F.'", "'\\u003F..'", 
      "'\\u003F\\u003F'", "'\\u003F\\u003F='", "';'", "'/='", "'/'", "'~/'", 
      "'~/='", "'~'", "'*'", "'*='", "'abstract'", "'as'", "'assert'", "'async'", 
      "'await'", "'break'", "'case'", "'catch'", "'class'", "'const'", "'continue'", 
      "'covariant'", "'default'", "'deferred'", "'do'", "'dynamic'", "'else'", 
      "'enum'", "'export'", "'extends'", "'extension'", "'external'", "'factory'", 
      "'false'", "'final'", "'finally'", "'for'", "'Function'", "'get'", 
      "'gtilde'", "'hide'", "'if'", "'implements'", "'import'", "'in'", 
      "'interface'", "'is'", "'late'", "'let'", "'library'", "'mixin'", 
      "'native'", "'new'", "'null'", "'of'", "'on'", "'operator'", "'part'", 
      "'required'", "'rethrow'", "'return'", "'set'", "'show'", "'static'", 
      "'super'", "'switch'", "'sync'", "'this'", "'throw'", "'true'", "'try'", 
      "'typedef'", "'var'", "'void'", "'while'", "'with'", "'yield'"
    },
    std::vector<std::string>{
      "", "A", "AA", "AE", "AT", "C", "CB", "CBC", "CIR", "CIRE", "CO", 
      "CP", "D", "DD", "DDD", "DDDQ", "EE", "EG", "EQ", "GT", "LT", "LTE", 
      "LTLT", "LTLTE", "ME", "MINUS", "MM", "NE", "NOT", "OB", "OBC", "OP", 
      "P", "PC", "PE", "PL", "PLE", "PLPL", "PO", "POE", "PP", "QU", "QUD", 
      "QUDD", "QUQU", "QUQUEQ", "SC", "SE", "SL", "SQS", "SQSE", "SQUIG", 
      "ST", "STE", "ABSTRACT_", "AS_", "ASSERT_", "ASYNC_", "AWAIT_", "BREAK_", 
      "CASE_", "CATCH_", "CLASS_", "CONST_", "CONTINUE_", "COVARIANT_", 
      "DEFAULT_", "DEFERRED_", "DO_", "DYNAMIC_", "ELSE_", "ENUM_", "EXPORT_", 
      "EXTENDS_", "EXTENSION_", "EXTERNAL_", "FACTORY_", "FALSE_", "FINAL_", 
      "FINALLY_", "FOR_", "FUNCTION_", "GET_", "GTILDE_", "HIDE_", "IF_", 
      "IMPLEMENTS_", "IMPORT_", "IN_", "INTERFACE_", "IS_", "LATE_", "LET_", 
      "LIBRARY_", "MIXIN_", "NATIVE_", "NEW_", "NULL_", "OF_", "ON_", "OPERATOR_", 
      "PART_", "REQUIRED_", "RETHROW_", "RETURN_", "SET_", "SHOW_", "STATIC_", 
      "SUPER_", "SWITCH_", "SYNC_", "THIS_", "THROW_", "TRUE_", "TRY_", 
      "TYPEDEF_", "VAR_", "VOID_", "WHILE_", "WITH_", "YIELD_", "NUMBER", 
      "HEX_NUMBER", "SingleLineString", "MultiLineString", "IDENTIFIER", 
      "WHITESPACE", "SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,128,2214,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,
  	7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,
  	7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,
  	7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,
  	7,122,2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,
  	7,128,2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,
  	7,134,2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,
  	7,140,2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,
  	7,146,2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,
  	7,152,2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,
  	7,158,2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
  	7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,
  	7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,
  	7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,
  	7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,
  	7,188,2,189,7,189,2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,
  	7,194,2,195,7,195,2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,
  	7,200,2,201,7,201,2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,
  	7,206,1,0,1,0,1,0,1,0,5,0,419,8,0,10,0,12,0,422,9,0,1,0,1,0,1,0,1,0,4,
  	0,428,8,0,11,0,12,0,429,3,0,432,8,0,1,1,1,1,1,2,1,2,1,2,5,2,439,8,2,10,
  	2,12,2,442,9,2,1,2,1,2,1,2,5,2,447,8,2,10,2,12,2,450,9,2,3,2,452,8,2,
  	1,3,3,3,455,8,3,1,3,1,3,1,4,1,4,1,4,3,4,462,8,4,3,4,464,8,4,1,4,1,4,1,
  	5,1,5,1,6,1,6,1,6,1,6,1,6,3,6,475,8,6,1,6,3,6,478,8,6,1,6,1,6,1,7,1,7,
  	1,7,1,8,1,8,1,8,1,8,1,8,1,8,3,8,491,8,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
  	9,3,9,501,8,9,1,10,5,10,504,8,10,10,10,12,10,507,9,10,1,10,1,10,1,11,
  	1,11,3,11,513,8,11,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,3,13,
  	524,8,13,1,14,1,14,1,14,5,14,529,8,14,10,14,12,14,532,9,14,1,14,1,14,
  	1,14,4,14,537,8,14,11,14,12,14,538,3,14,541,8,14,1,15,1,15,1,16,1,16,
  	1,16,5,16,548,8,16,10,16,12,16,551,9,16,1,16,1,16,1,16,4,16,556,8,16,
  	11,16,12,16,557,3,16,560,8,16,1,17,1,17,1,17,5,17,565,8,17,10,17,12,17,
  	568,9,17,1,17,1,17,1,17,4,17,573,8,17,11,17,12,17,574,3,17,577,8,17,1,
  	18,1,18,1,18,1,18,1,19,1,19,1,20,1,20,3,20,587,8,20,1,20,1,20,1,21,1,
  	21,1,21,1,21,1,21,1,21,1,21,1,21,5,21,599,8,21,10,21,12,21,602,9,21,1,
  	22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,5,24,612,8,24,10,24,12,24,615,9,
  	24,1,24,1,24,1,24,3,24,620,8,24,3,24,622,8,24,1,25,1,25,1,25,1,25,1,25,
  	3,25,629,8,25,1,26,1,26,1,26,1,26,1,26,3,26,636,8,26,1,26,1,26,1,27,3,
  	27,641,8,27,1,27,1,27,1,27,3,27,646,8,27,1,27,3,27,649,8,27,1,27,3,27,
  	652,8,27,1,27,1,27,1,27,1,27,5,27,658,8,27,10,27,12,27,661,9,27,1,27,
  	1,27,1,27,3,27,666,8,27,1,27,1,27,3,27,670,8,27,1,28,1,28,1,28,1,28,1,
  	28,1,28,3,28,678,8,28,1,29,1,29,1,29,1,29,3,29,684,8,29,1,30,1,30,1,30,
  	1,30,3,30,690,8,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
  	1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,712,8,31,1,32,
  	1,32,1,32,1,32,1,32,1,32,3,32,720,8,32,1,33,1,33,5,33,724,8,33,10,33,
  	12,33,727,9,33,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,36,
  	1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,3,37,749,8,37,3,37,751,8,
  	37,1,38,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,3,39,762,8,39,1,40,1,
  	40,1,40,1,41,1,41,3,41,769,8,41,1,41,1,41,1,42,3,42,774,8,42,1,42,1,42,
  	1,42,1,42,1,42,1,42,1,42,1,42,3,42,784,8,42,3,42,786,8,42,1,42,1,42,1,
  	42,3,42,791,8,42,3,42,793,8,42,1,42,1,42,1,42,3,42,798,8,42,3,42,800,
  	8,42,1,42,1,42,3,42,804,8,42,1,42,1,42,1,42,1,42,3,42,810,8,42,1,42,1,
  	42,1,42,1,42,3,42,816,8,42,1,42,1,42,1,42,1,42,1,42,3,42,823,8,42,1,42,
  	1,42,1,42,3,42,828,8,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,3,42,837,8,
  	42,1,42,1,42,1,42,3,42,842,8,42,1,42,1,42,1,42,1,42,3,42,848,8,42,1,42,
  	1,42,3,42,852,8,42,1,42,1,42,3,42,856,8,42,1,42,1,42,1,42,1,42,1,42,1,
  	42,1,42,3,42,865,8,42,1,42,1,42,1,42,3,42,870,8,42,3,42,872,8,42,1,43,
  	3,43,875,8,43,1,43,1,43,1,43,1,44,5,44,881,8,44,10,44,12,44,884,9,44,
  	1,44,1,44,1,44,1,44,1,45,1,45,1,45,3,45,893,8,45,1,46,1,46,3,46,897,8,
  	46,1,46,1,46,1,46,3,46,902,8,46,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,
  	47,1,48,1,48,1,48,5,48,915,8,48,10,48,12,48,918,9,48,1,49,1,49,1,49,1,
  	49,1,49,3,49,925,8,49,1,50,1,50,1,50,5,50,930,8,50,10,50,12,50,933,9,
  	50,1,50,3,50,936,8,50,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,1,52,5,
  	52,947,8,52,10,52,12,52,950,9,52,1,52,3,52,953,8,52,1,52,1,52,1,53,1,
  	53,1,53,1,53,3,53,961,8,53,1,53,1,53,1,53,1,53,3,53,967,8,53,1,54,1,54,
  	1,55,1,55,1,55,1,55,1,55,1,55,1,55,3,55,978,8,55,1,56,1,56,1,57,1,57,
  	1,57,5,57,985,8,57,10,57,12,57,988,9,57,1,58,3,58,991,8,58,1,58,1,58,
  	1,59,1,59,1,59,1,59,1,59,1,59,3,59,1001,8,59,1,60,1,60,3,60,1005,8,60,
  	1,60,3,60,1008,8,60,1,60,1,60,1,60,1,60,1,60,1,60,5,60,1016,8,60,10,60,
  	12,60,1019,9,60,1,60,1,60,1,61,3,61,1024,8,61,1,61,1,61,1,61,1,61,1,62,
  	3,62,1031,8,62,1,62,1,62,1,62,1,62,1,62,3,62,1038,8,62,3,62,1040,8,62,
  	1,63,1,63,3,63,1044,8,63,1,63,1,63,1,63,1,63,1,64,3,64,1051,8,64,1,64,
  	1,64,3,64,1055,8,64,1,64,1,64,3,64,1059,8,64,1,64,3,64,1062,8,64,1,64,
  	3,64,1065,8,64,1,65,1,65,1,65,1,66,3,66,1071,8,66,1,66,1,66,1,66,1,66,
  	1,66,1,66,1,67,1,67,3,67,1081,8,67,1,67,3,67,1084,8,67,1,68,1,68,3,68,
  	1088,8,68,1,68,1,68,3,68,1092,8,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,
  	1,68,1,68,3,68,1103,8,68,1,69,1,69,1,69,1,69,1,69,3,69,1110,8,69,1,69,
  	1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,3,69,1124,8,69,
  	1,70,3,70,1127,8,70,1,70,1,70,1,71,3,71,1132,8,71,1,71,1,71,1,71,1,71,
  	1,71,1,71,1,72,1,72,3,72,1142,8,72,1,72,1,72,3,72,1146,8,72,1,72,1,72,
  	1,72,1,72,1,72,1,72,3,72,1154,8,72,1,72,1,72,3,72,1158,8,72,1,72,3,72,
  	1161,8,72,1,73,1,73,1,73,1,74,3,74,1167,8,74,1,74,1,74,1,74,1,74,3,74,
  	1173,8,74,1,74,1,74,3,74,1177,8,74,1,74,3,74,1180,8,74,1,75,3,75,1183,
  	8,75,1,75,3,75,1186,8,75,1,75,1,75,1,75,3,75,1191,8,75,1,76,3,76,1194,
  	8,76,1,76,1,76,1,77,3,77,1199,8,77,1,77,1,77,1,77,1,78,1,78,1,78,1,78,
  	3,78,1208,8,78,1,79,1,79,1,79,1,79,1,80,1,80,3,80,1216,8,80,1,80,1,80,
  	1,81,1,81,3,81,1222,8,81,1,81,1,81,1,81,3,81,1227,8,81,1,82,3,82,1230,
  	8,82,1,82,1,82,1,82,1,83,1,83,1,84,1,84,1,84,5,84,1240,8,84,10,84,12,
  	84,1243,9,84,1,85,1,85,1,85,1,85,1,85,1,85,1,85,3,85,1252,8,85,1,86,1,
  	86,1,86,5,86,1257,8,86,10,86,12,86,1260,9,86,1,87,1,87,1,87,1,87,1,87,
  	1,87,1,87,3,87,1269,8,87,1,88,1,88,3,88,1273,8,88,1,89,1,89,1,89,3,89,
  	1278,8,89,1,89,1,89,3,89,1282,8,89,1,89,5,89,1285,8,89,10,89,12,89,1288,
  	9,89,1,89,1,89,1,90,1,90,1,91,1,91,1,91,3,91,1297,8,91,1,92,1,92,1,92,
  	5,92,1302,8,92,10,92,12,92,1305,9,92,1,93,1,93,1,93,3,93,1310,8,93,1,
  	93,1,93,5,93,1314,8,93,10,93,12,93,1317,9,93,1,94,1,94,3,94,1321,8,94,
  	1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,3,95,1332,8,95,1,96,1,96,
  	1,96,1,96,5,96,1338,8,96,10,96,12,96,1341,9,96,1,97,1,97,1,97,1,98,1,
  	98,3,98,1348,8,98,1,99,1,99,1,99,1,100,1,100,1,100,1,100,1,100,1,101,
  	3,101,1359,8,101,1,101,5,101,1362,8,101,10,101,12,101,1365,9,101,1,101,
  	5,101,1368,8,101,10,101,12,101,1371,9,101,1,101,1,101,1,101,5,101,1376,
  	8,101,10,101,12,101,1379,9,101,1,102,1,102,1,102,1,102,5,102,1385,8,102,
  	10,102,12,102,1388,9,102,1,102,1,102,1,103,1,103,1,103,1,104,1,104,1,
  	104,1,104,1,104,1,105,3,105,1401,8,105,1,105,3,105,1404,8,105,1,105,1,
  	105,3,105,1408,8,105,1,105,1,105,1,106,1,106,1,106,1,106,1,106,1,106,
  	1,106,3,106,1419,8,106,1,107,1,107,1,107,1,107,1,108,1,108,1,108,1,108,
  	1,109,1,109,1,109,5,109,1432,8,109,10,109,12,109,1435,9,109,1,110,1,110,
  	1,110,5,110,1440,8,110,10,110,12,110,1443,9,110,1,111,1,111,1,111,1,111,
  	1,112,1,112,5,112,1451,8,112,10,112,12,112,1454,9,112,1,113,1,113,1,113,
  	1,113,1,113,3,113,1461,8,113,1,114,1,114,3,114,1465,8,114,1,114,1,114,
  	3,114,1469,8,114,1,114,1,114,3,114,1473,8,114,1,114,1,114,3,114,1477,
  	8,114,1,114,1,114,3,114,1481,8,114,1,115,1,115,1,116,1,116,1,116,3,116,
  	1488,8,116,1,117,1,117,3,117,1492,8,117,1,117,1,117,1,117,1,117,1,118,
  	1,118,1,118,3,118,1501,8,118,1,118,1,118,3,118,1505,8,118,1,118,3,118,
  	1508,8,118,1,118,1,118,1,118,1,118,5,118,1514,8,118,10,118,12,118,1517,
  	9,118,1,118,1,118,1,119,1,119,1,119,1,120,1,120,1,121,1,121,1,121,1,121,
  	5,121,1530,8,121,10,121,12,121,1533,9,121,1,121,1,121,1,121,1,121,4,121,
  	1539,8,121,11,121,12,121,1540,3,121,1543,8,121,1,122,1,122,1,123,1,123,
  	1,123,1,124,1,124,1,124,1,124,5,124,1554,8,124,10,124,12,124,1557,9,124,
  	1,124,3,124,1560,8,124,1,124,1,124,1,125,1,125,3,125,1566,8,125,1,125,
  	1,125,1,126,1,126,1,126,1,126,5,126,1574,8,126,10,126,12,126,1577,9,126,
  	1,126,3,126,1580,8,126,1,126,1,126,1,127,1,127,1,128,1,128,1,128,1,128,
  	1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,
  	1,129,1,129,1,129,1,129,1,129,3,129,1607,8,129,1,130,1,130,1,130,1,131,
  	1,131,1,131,3,131,1615,8,131,1,132,1,132,1,132,5,132,1620,8,132,10,132,
  	12,132,1623,9,132,1,133,1,133,1,133,1,133,1,133,1,133,3,133,1631,8,133,
  	1,134,1,134,1,134,5,134,1636,8,134,10,134,12,134,1639,9,134,1,135,1,135,
  	1,136,1,136,1,137,1,137,1,137,1,137,1,137,1,137,3,137,1651,8,137,1,137,
  	1,137,3,137,1655,8,137,1,138,1,138,1,138,1,138,1,138,1,138,1,138,3,138,
  	1664,8,138,1,139,3,139,1667,8,139,1,139,1,139,1,139,1,139,1,140,1,140,
  	3,140,1675,8,140,1,141,1,141,3,141,1679,8,141,1,142,1,142,1,142,1,142,
  	5,142,1685,8,142,10,142,12,142,1688,9,142,1,142,3,142,1691,8,142,1,142,
  	1,142,1,143,1,143,1,143,3,143,1698,8,143,1,143,1,143,1,144,1,144,1,144,
  	1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,3,144,1713,8,144,1,144,
  	1,144,1,144,1,144,1,144,1,144,3,144,1721,8,144,1,145,1,145,1,145,1,145,
  	5,145,1727,8,145,10,145,12,145,1730,9,145,1,146,1,146,1,146,1,146,1,146,
  	1,147,1,147,1,147,1,147,1,147,3,147,1742,8,147,1,147,1,147,1,148,1,148,
  	1,148,1,148,1,148,5,148,1751,8,148,10,148,12,148,1754,9,148,3,148,1756,
  	8,148,1,149,1,149,1,150,1,150,1,150,3,150,1763,8,150,1,151,1,151,1,151,
  	1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,
  	3,151,1780,8,151,1,152,1,152,1,152,1,152,1,152,1,152,1,152,1,152,1,152,
  	1,152,3,152,1792,8,152,1,153,3,153,1795,8,153,1,153,1,153,1,153,1,153,
  	1,153,1,153,1,154,1,154,1,154,1,154,3,154,1807,8,154,1,154,1,154,1,155,
  	1,155,1,155,1,155,1,155,1,155,3,155,1817,8,155,1,155,1,155,1,155,1,155,
  	3,155,1823,8,155,1,156,1,156,1,156,1,156,1,156,3,156,1830,8,156,1,157,
  	1,157,1,158,1,158,1,158,1,159,1,159,3,159,1839,8,159,1,159,1,159,1,160,
  	1,160,1,160,3,160,1846,8,160,1,161,3,161,1849,8,161,1,161,3,161,1852,
  	8,161,1,161,1,161,3,161,1856,8,161,1,161,1,161,1,162,3,162,1861,8,162,
  	1,162,1,162,1,162,1,162,1,163,1,163,1,163,1,163,5,163,1871,8,163,10,163,
  	12,163,1874,9,163,1,163,1,163,1,163,1,163,4,163,1880,8,163,11,163,12,
  	163,1881,3,163,1884,8,163,1,164,1,164,1,164,1,164,1,164,1,164,3,164,1892,
  	8,164,1,165,1,165,3,165,1896,8,165,1,165,3,165,1899,8,165,1,166,1,166,
  	1,167,1,167,1,167,1,168,5,168,1907,8,168,10,168,12,168,1910,9,168,1,168,
  	1,168,1,169,5,169,1915,8,169,10,169,12,169,1918,9,169,1,170,1,170,1,170,
  	1,170,1,171,1,171,1,171,5,171,1927,8,171,10,171,12,171,1930,9,171,1,172,
  	1,172,4,172,1934,8,172,11,172,12,172,1935,1,173,1,173,1,173,3,173,1941,
  	8,173,1,173,3,173,1944,8,173,1,174,5,174,1947,8,174,10,174,12,174,1950,
  	9,174,1,174,1,174,1,174,1,174,1,174,1,175,1,175,1,175,1,175,1,175,1,175,
  	5,175,1963,8,175,10,175,12,175,1966,9,175,1,175,3,175,1969,8,175,1,175,
  	1,175,1,176,1,176,1,176,1,176,5,176,1977,8,176,10,176,12,176,1980,9,176,
  	1,176,1,176,3,176,1984,8,176,1,177,1,177,1,178,1,178,1,178,1,179,1,179,
  	1,179,1,180,1,180,1,181,1,181,1,181,1,181,1,181,1,181,1,181,1,181,1,181,
  	1,181,1,181,1,181,1,181,1,181,1,181,1,181,1,181,1,181,1,181,1,181,1,181,
  	1,181,1,181,1,181,1,181,1,181,1,181,1,181,3,181,2024,8,181,1,181,1,181,
  	1,181,1,181,1,181,1,181,3,181,2032,8,181,1,181,1,181,1,181,1,181,3,181,
  	2038,8,181,1,181,1,181,1,181,1,181,3,181,2044,8,181,1,182,1,182,1,182,
  	4,182,2049,8,182,11,182,12,182,2050,1,182,3,182,2054,8,182,1,182,3,182,
  	2057,8,182,1,183,1,183,3,183,2061,8,183,1,183,3,183,2064,8,183,1,184,
  	1,184,1,184,3,184,2069,8,184,1,184,1,184,1,184,1,184,1,184,1,184,3,184,
  	2077,8,184,1,185,1,185,1,185,1,185,1,186,1,186,1,186,1,187,1,187,1,187,
  	1,188,1,188,1,189,1,189,1,189,5,189,2094,8,189,10,189,12,189,2097,9,189,
  	1,190,1,190,1,190,3,190,2102,8,190,1,191,1,191,3,191,2106,8,191,1,192,
  	1,192,3,192,2110,8,192,1,192,3,192,2113,8,192,1,193,1,193,1,193,5,193,
  	2118,8,193,10,193,12,193,2121,9,193,1,194,1,194,3,194,2125,8,194,1,194,
  	3,194,2128,8,194,1,194,1,194,3,194,2132,8,194,3,194,2134,8,194,1,195,
  	1,195,1,195,5,195,2139,8,195,10,195,12,195,2142,9,195,1,196,1,196,1,196,
  	1,196,3,196,2148,8,196,1,197,1,197,1,197,1,197,5,197,2154,8,197,10,197,
  	12,197,2157,9,197,1,197,1,197,1,198,1,198,1,198,1,199,1,199,1,199,1,199,
  	1,199,1,199,1,199,3,199,2171,8,199,1,199,1,199,1,199,1,199,1,199,3,199,
  	2178,8,199,1,200,1,200,1,200,1,200,1,200,1,200,3,200,2186,8,200,1,201,
  	1,201,1,202,1,202,1,202,3,202,2193,8,202,1,203,1,203,3,203,2197,8,203,
  	1,204,1,204,1,204,1,204,1,204,1,204,1,205,1,205,1,205,1,205,1,205,1,206,
  	1,206,1,206,1,206,1,206,0,1,42,207,0,2,4,6,8,10,12,14,16,18,20,22,24,
  	26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,
  	72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,
  	114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,
  	150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,
  	186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,
  	222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,
  	258,260,262,264,266,268,270,272,274,276,278,280,282,284,286,288,290,292,
  	294,296,298,300,302,304,306,308,310,312,314,316,318,320,322,324,326,328,
  	330,332,334,336,338,340,342,344,346,348,350,352,354,356,358,360,362,364,
  	366,368,370,372,374,376,378,380,382,384,386,388,390,392,394,396,398,400,
  	402,404,406,408,410,412,0,14,2,0,25,25,35,35,3,0,1,1,8,8,32,32,2,0,77,
  	77,113,113,2,0,13,13,43,43,2,0,10,10,18,18,2,0,16,16,27,27,19,0,54,55,
  	57,58,65,65,67,67,69,69,72,72,74,76,81,82,84,84,86,87,89,89,91,91,93,
  	95,98,102,105,107,110,110,115,115,120,120,125,125,2,0,26,26,37,37,3,0,
  	33,33,48,49,52,52,1,0,121,122,15,0,56,56,59,64,66,66,68,68,70,71,73,73,
  	77,80,85,85,88,88,90,90,96,97,103,104,108,109,111,114,116,119,1,0,14,
  	15,2,0,63,63,78,78,10,0,57,58,69,69,81,81,84,84,95,95,98,99,106,106,110,
  	110,120,120,125,125,2377,0,431,1,0,0,0,2,433,1,0,0,0,4,451,1,0,0,0,6,
  	454,1,0,0,0,8,458,1,0,0,0,10,467,1,0,0,0,12,469,1,0,0,0,14,481,1,0,0,
  	0,16,490,1,0,0,0,18,500,1,0,0,0,20,505,1,0,0,0,22,512,1,0,0,0,24,514,
  	1,0,0,0,26,523,1,0,0,0,28,540,1,0,0,0,30,542,1,0,0,0,32,559,1,0,0,0,34,
  	576,1,0,0,0,36,578,1,0,0,0,38,582,1,0,0,0,40,584,1,0,0,0,42,590,1,0,0,
  	0,44,603,1,0,0,0,46,606,1,0,0,0,48,621,1,0,0,0,50,628,1,0,0,0,52,630,
  	1,0,0,0,54,669,1,0,0,0,56,677,1,0,0,0,58,683,1,0,0,0,60,689,1,0,0,0,62,
  	711,1,0,0,0,64,713,1,0,0,0,66,721,1,0,0,0,68,728,1,0,0,0,70,734,1,0,0,
  	0,72,738,1,0,0,0,74,750,1,0,0,0,76,752,1,0,0,0,78,758,1,0,0,0,80,763,
  	1,0,0,0,82,766,1,0,0,0,84,773,1,0,0,0,86,874,1,0,0,0,88,882,1,0,0,0,90,
  	889,1,0,0,0,92,894,1,0,0,0,94,903,1,0,0,0,96,911,1,0,0,0,98,924,1,0,0,
  	0,100,926,1,0,0,0,102,937,1,0,0,0,104,940,1,0,0,0,106,966,1,0,0,0,108,
  	968,1,0,0,0,110,977,1,0,0,0,112,979,1,0,0,0,114,981,1,0,0,0,116,990,1,
  	0,0,0,118,1000,1,0,0,0,120,1002,1,0,0,0,122,1023,1,0,0,0,124,1030,1,0,
  	0,0,126,1043,1,0,0,0,128,1064,1,0,0,0,130,1066,1,0,0,0,132,1070,1,0,0,
  	0,134,1083,1,0,0,0,136,1102,1,0,0,0,138,1123,1,0,0,0,140,1126,1,0,0,0,
  	142,1131,1,0,0,0,144,1160,1,0,0,0,146,1162,1,0,0,0,148,1179,1,0,0,0,150,
  	1182,1,0,0,0,152,1193,1,0,0,0,154,1198,1,0,0,0,156,1207,1,0,0,0,158,1209,
  	1,0,0,0,160,1213,1,0,0,0,162,1226,1,0,0,0,164,1229,1,0,0,0,166,1234,1,
  	0,0,0,168,1236,1,0,0,0,170,1244,1,0,0,0,172,1253,1,0,0,0,174,1261,1,0,
  	0,0,176,1272,1,0,0,0,178,1274,1,0,0,0,180,1291,1,0,0,0,182,1293,1,0,0,
  	0,184,1298,1,0,0,0,186,1306,1,0,0,0,188,1320,1,0,0,0,190,1331,1,0,0,0,
  	192,1333,1,0,0,0,194,1342,1,0,0,0,196,1345,1,0,0,0,198,1349,1,0,0,0,200,
  	1352,1,0,0,0,202,1358,1,0,0,0,204,1380,1,0,0,0,206,1391,1,0,0,0,208,1394,
  	1,0,0,0,210,1400,1,0,0,0,212,1418,1,0,0,0,214,1420,1,0,0,0,216,1424,1,
  	0,0,0,218,1428,1,0,0,0,220,1436,1,0,0,0,222,1444,1,0,0,0,224,1452,1,0,
  	0,0,226,1460,1,0,0,0,228,1480,1,0,0,0,230,1482,1,0,0,0,232,1484,1,0,0,
  	0,234,1489,1,0,0,0,236,1497,1,0,0,0,238,1520,1,0,0,0,240,1523,1,0,0,0,
  	242,1542,1,0,0,0,244,1544,1,0,0,0,246,1546,1,0,0,0,248,1549,1,0,0,0,250,
  	1563,1,0,0,0,252,1569,1,0,0,0,254,1583,1,0,0,0,256,1585,1,0,0,0,258,1606,
  	1,0,0,0,260,1608,1,0,0,0,262,1614,1,0,0,0,264,1616,1,0,0,0,266,1630,1,
  	0,0,0,268,1632,1,0,0,0,270,1640,1,0,0,0,272,1642,1,0,0,0,274,1654,1,0,
  	0,0,276,1663,1,0,0,0,278,1666,1,0,0,0,280,1674,1,0,0,0,282,1678,1,0,0,
  	0,284,1680,1,0,0,0,286,1694,1,0,0,0,288,1720,1,0,0,0,290,1722,1,0,0,0,
  	292,1731,1,0,0,0,294,1736,1,0,0,0,296,1755,1,0,0,0,298,1757,1,0,0,0,300,
  	1762,1,0,0,0,302,1779,1,0,0,0,304,1791,1,0,0,0,306,1794,1,0,0,0,308,1802,
  	1,0,0,0,310,1822,1,0,0,0,312,1829,1,0,0,0,314,1831,1,0,0,0,316,1833,1,
  	0,0,0,318,1836,1,0,0,0,320,1845,1,0,0,0,322,1848,1,0,0,0,324,1860,1,0,
  	0,0,326,1883,1,0,0,0,328,1891,1,0,0,0,330,1898,1,0,0,0,332,1900,1,0,0,
  	0,334,1902,1,0,0,0,336,1908,1,0,0,0,338,1916,1,0,0,0,340,1919,1,0,0,0,
  	342,1923,1,0,0,0,344,1933,1,0,0,0,346,1943,1,0,0,0,348,1948,1,0,0,0,350,
  	1956,1,0,0,0,352,1972,1,0,0,0,354,1985,1,0,0,0,356,1987,1,0,0,0,358,1990,
  	1,0,0,0,360,1993,1,0,0,0,362,2043,1,0,0,0,364,2045,1,0,0,0,366,2063,1,
  	0,0,0,368,2076,1,0,0,0,370,2078,1,0,0,0,372,2082,1,0,0,0,374,2085,1,0,
  	0,0,376,2088,1,0,0,0,378,2090,1,0,0,0,380,2098,1,0,0,0,382,2105,1,0,0,
  	0,384,2112,1,0,0,0,386,2114,1,0,0,0,388,2133,1,0,0,0,390,2135,1,0,0,0,
  	392,2143,1,0,0,0,394,2149,1,0,0,0,396,2160,1,0,0,0,398,2177,1,0,0,0,400,
  	2185,1,0,0,0,402,2187,1,0,0,0,404,2189,1,0,0,0,406,2196,1,0,0,0,408,2198,
  	1,0,0,0,410,2204,1,0,0,0,412,2209,1,0,0,0,414,420,3,242,121,0,415,416,
  	3,2,1,0,416,417,3,242,121,0,417,419,1,0,0,0,418,415,1,0,0,0,419,422,1,
  	0,0,0,420,418,1,0,0,0,420,421,1,0,0,0,421,432,1,0,0,0,422,420,1,0,0,0,
  	423,427,5,108,0,0,424,425,3,2,1,0,425,426,3,242,121,0,426,428,1,0,0,0,
  	427,424,1,0,0,0,428,429,1,0,0,0,429,427,1,0,0,0,429,430,1,0,0,0,430,432,
  	1,0,0,0,431,414,1,0,0,0,431,423,1,0,0,0,432,1,1,0,0,0,433,434,7,0,0,0,
  	434,3,1,0,0,0,435,440,3,246,123,0,436,437,5,5,0,0,437,439,3,246,123,0,
  	438,436,1,0,0,0,439,442,1,0,0,0,440,438,1,0,0,0,440,441,1,0,0,0,441,452,
  	1,0,0,0,442,440,1,0,0,0,443,448,3,114,57,0,444,445,5,5,0,0,445,447,3,
  	246,123,0,446,444,1,0,0,0,447,450,1,0,0,0,448,446,1,0,0,0,448,449,1,0,
  	0,0,449,452,1,0,0,0,450,448,1,0,0,0,451,435,1,0,0,0,451,443,1,0,0,0,452,
  	5,1,0,0,0,453,455,3,370,185,0,454,453,1,0,0,0,454,455,1,0,0,0,455,456,
  	1,0,0,0,456,457,3,8,4,0,457,7,1,0,0,0,458,463,5,31,0,0,459,461,3,4,2,
  	0,460,462,5,5,0,0,461,460,1,0,0,0,461,462,1,0,0,0,462,464,1,0,0,0,463,
  	459,1,0,0,0,463,464,1,0,0,0,464,465,1,0,0,0,465,466,5,11,0,0,466,9,1,
  	0,0,0,467,468,5,55,0,0,468,11,1,0,0,0,469,470,5,56,0,0,470,471,5,31,0,
  	0,471,474,3,110,55,0,472,473,5,5,0,0,473,475,3,110,55,0,474,472,1,0,0,
  	0,474,475,1,0,0,0,475,477,1,0,0,0,476,478,5,5,0,0,477,476,1,0,0,0,477,
  	478,1,0,0,0,478,479,1,0,0,0,479,480,5,11,0,0,480,13,1,0,0,0,481,482,3,
  	12,6,0,482,483,5,46,0,0,483,15,1,0,0,0,484,485,3,302,151,0,485,486,3,
  	20,10,0,486,491,1,0,0,0,487,488,5,108,0,0,488,491,3,400,200,0,489,491,
  	3,166,83,0,490,484,1,0,0,0,490,487,1,0,0,0,490,489,1,0,0,0,491,17,1,0,
  	0,0,492,501,3,400,200,0,493,494,5,42,0,0,494,501,3,166,83,0,495,496,5,
  	41,0,0,496,497,5,29,0,0,497,498,3,110,55,0,498,499,5,6,0,0,499,501,1,
  	0,0,0,500,492,1,0,0,0,500,493,1,0,0,0,500,495,1,0,0,0,501,19,1,0,0,0,
  	502,504,3,320,160,0,503,502,1,0,0,0,504,507,1,0,0,0,505,503,1,0,0,0,505,
  	506,1,0,0,0,506,508,1,0,0,0,507,505,1,0,0,0,508,509,3,18,9,0,509,21,1,
  	0,0,0,510,513,5,18,0,0,511,513,3,62,31,0,512,510,1,0,0,0,512,511,1,0,
  	0,0,513,23,1,0,0,0,514,515,5,58,0,0,515,516,3,398,199,0,516,25,1,0,0,
  	0,517,524,3,244,122,0,518,524,3,2,1,0,519,524,3,328,164,0,520,524,3,312,
  	156,0,521,524,5,16,0,0,522,524,3,30,15,0,523,517,1,0,0,0,523,518,1,0,
  	0,0,523,519,1,0,0,0,523,520,1,0,0,0,523,521,1,0,0,0,523,522,1,0,0,0,524,
  	27,1,0,0,0,525,530,3,326,163,0,526,527,5,1,0,0,527,529,3,326,163,0,528,
  	526,1,0,0,0,529,532,1,0,0,0,530,528,1,0,0,0,530,531,1,0,0,0,531,541,1,
  	0,0,0,532,530,1,0,0,0,533,536,5,108,0,0,534,535,5,1,0,0,535,537,3,326,
  	163,0,536,534,1,0,0,0,537,538,1,0,0,0,538,536,1,0,0,0,538,539,1,0,0,0,
  	539,541,1,0,0,0,540,525,1,0,0,0,540,533,1,0,0,0,541,29,1,0,0,0,542,543,
  	7,1,0,0,543,31,1,0,0,0,544,549,3,34,17,0,545,546,5,32,0,0,546,548,3,34,
  	17,0,547,545,1,0,0,0,548,551,1,0,0,0,549,547,1,0,0,0,549,550,1,0,0,0,
  	550,560,1,0,0,0,551,549,1,0,0,0,552,555,5,108,0,0,553,554,5,32,0,0,554,
  	556,3,34,17,0,555,553,1,0,0,0,556,557,1,0,0,0,557,555,1,0,0,0,557,558,
  	1,0,0,0,558,560,1,0,0,0,559,544,1,0,0,0,559,552,1,0,0,0,560,33,1,0,0,
  	0,561,566,3,28,14,0,562,563,5,8,0,0,563,565,3,28,14,0,564,562,1,0,0,0,
  	565,568,1,0,0,0,566,564,1,0,0,0,566,567,1,0,0,0,567,577,1,0,0,0,568,566,
  	1,0,0,0,569,572,5,108,0,0,570,571,5,8,0,0,571,573,3,28,14,0,572,570,1,
  	0,0,0,573,574,1,0,0,0,574,572,1,0,0,0,574,575,1,0,0,0,575,577,1,0,0,0,
  	576,561,1,0,0,0,576,569,1,0,0,0,577,35,1,0,0,0,578,579,5,30,0,0,579,580,
  	3,338,169,0,580,581,5,7,0,0,581,37,1,0,0,0,582,583,7,2,0,0,583,39,1,0,
  	0,0,584,586,5,59,0,0,585,587,3,166,83,0,586,585,1,0,0,0,586,587,1,0,0,
  	0,587,588,1,0,0,0,588,589,5,46,0,0,589,41,1,0,0,0,590,591,6,21,-1,0,591,
  	592,3,64,32,0,592,593,7,3,0,0,593,594,3,46,23,0,594,600,1,0,0,0,595,596,
  	10,2,0,0,596,597,5,13,0,0,597,599,3,46,23,0,598,595,1,0,0,0,599,602,1,
  	0,0,0,600,598,1,0,0,0,600,601,1,0,0,0,601,43,1,0,0,0,602,600,1,0,0,0,
  	603,604,3,22,11,0,604,605,3,118,59,0,605,45,1,0,0,0,606,607,3,50,25,0,
  	607,608,3,48,24,0,608,47,1,0,0,0,609,622,3,44,22,0,610,612,3,320,160,
  	0,611,610,1,0,0,0,612,615,1,0,0,0,613,611,1,0,0,0,613,614,1,0,0,0,614,
  	619,1,0,0,0,615,613,1,0,0,0,616,617,3,18,9,0,617,618,3,44,22,0,618,620,
  	1,0,0,0,619,616,1,0,0,0,619,620,1,0,0,0,620,622,1,0,0,0,621,609,1,0,0,
  	0,621,613,1,0,0,0,622,49,1,0,0,0,623,624,5,29,0,0,624,625,3,110,55,0,
  	625,626,5,6,0,0,626,629,1,0,0,0,627,629,3,166,83,0,628,623,1,0,0,0,628,
  	627,1,0,0,0,629,51,1,0,0,0,630,631,5,61,0,0,631,632,5,31,0,0,632,635,
  	3,166,83,0,633,634,5,5,0,0,634,636,3,166,83,0,635,633,1,0,0,0,635,636,
  	1,0,0,0,636,637,1,0,0,0,637,638,5,11,0,0,638,53,1,0,0,0,639,641,5,54,
  	0,0,640,639,1,0,0,0,640,641,1,0,0,0,641,642,1,0,0,0,642,643,5,62,0,0,
  	643,645,3,376,188,0,644,646,3,394,197,0,645,644,1,0,0,0,645,646,1,0,0,
  	0,646,648,1,0,0,0,647,649,3,346,173,0,648,647,1,0,0,0,648,649,1,0,0,0,
  	649,651,1,0,0,0,650,652,3,194,97,0,651,650,1,0,0,0,651,652,1,0,0,0,652,
  	653,1,0,0,0,653,659,5,30,0,0,654,655,3,224,112,0,655,656,3,56,28,0,656,
  	658,1,0,0,0,657,654,1,0,0,0,658,661,1,0,0,0,659,657,1,0,0,0,659,660,1,
  	0,0,0,660,662,1,0,0,0,661,659,1,0,0,0,662,663,5,7,0,0,663,670,1,0,0,0,
  	664,666,5,54,0,0,665,664,1,0,0,0,665,666,1,0,0,0,666,667,1,0,0,0,667,
  	668,5,62,0,0,668,670,3,234,117,0,669,640,1,0,0,0,669,665,1,0,0,0,670,
  	55,1,0,0,0,671,672,3,84,42,0,672,673,5,46,0,0,673,678,1,0,0,0,674,675,
  	3,228,114,0,675,676,3,144,72,0,676,678,1,0,0,0,677,671,1,0,0,0,677,674,
  	1,0,0,0,678,57,1,0,0,0,679,680,5,106,0,0,680,684,3,168,84,0,681,682,5,
  	84,0,0,682,684,3,168,84,0,683,679,1,0,0,0,683,681,1,0,0,0,684,59,1,0,
  	0,0,685,690,3,202,101,0,686,690,3,290,145,0,687,690,3,110,55,0,688,690,
  	3,336,168,0,689,685,1,0,0,0,689,686,1,0,0,0,689,687,1,0,0,0,689,688,1,
  	0,0,0,690,691,1,0,0,0,691,692,5,0,0,1,692,61,1,0,0,0,693,712,5,53,0,0,
  	694,712,5,47,0,0,695,712,5,50,0,0,696,712,5,34,0,0,697,712,5,36,0,0,698,
  	712,5,24,0,0,699,712,5,23,0,0,700,701,5,19,0,0,701,702,5,19,0,0,702,703,
  	5,19,0,0,703,712,5,18,0,0,704,705,5,19,0,0,705,706,5,19,0,0,706,712,5,
  	18,0,0,707,712,5,3,0,0,708,712,5,9,0,0,709,712,5,39,0,0,710,712,5,45,
  	0,0,711,693,1,0,0,0,711,694,1,0,0,0,711,695,1,0,0,0,711,696,1,0,0,0,711,
  	697,1,0,0,0,711,698,1,0,0,0,711,699,1,0,0,0,711,700,1,0,0,0,711,704,1,
  	0,0,0,711,707,1,0,0,0,711,708,1,0,0,0,711,709,1,0,0,0,711,710,1,0,0,0,
  	712,63,1,0,0,0,713,719,3,172,86,0,714,715,5,41,0,0,715,716,3,118,59,0,
  	716,717,5,10,0,0,717,718,3,118,59,0,718,720,1,0,0,0,719,714,1,0,0,0,719,
  	720,1,0,0,0,720,65,1,0,0,0,721,725,3,402,201,0,722,724,3,68,34,0,723,
  	722,1,0,0,0,724,727,1,0,0,0,725,723,1,0,0,0,725,726,1,0,0,0,726,67,1,
  	0,0,0,727,725,1,0,0,0,728,729,5,85,0,0,729,730,5,31,0,0,730,731,3,404,
  	202,0,731,732,5,11,0,0,732,733,3,402,201,0,733,69,1,0,0,0,734,735,5,63,
  	0,0,735,736,3,78,39,0,736,737,3,138,69,0,737,71,1,0,0,0,738,739,5,63,
  	0,0,739,740,3,74,37,0,740,741,3,8,4,0,741,73,1,0,0,0,742,751,3,376,188,
  	0,743,751,3,304,152,0,744,745,3,380,190,0,745,748,3,370,185,0,746,747,
  	5,12,0,0,747,749,3,166,83,0,748,746,1,0,0,0,748,749,1,0,0,0,749,751,1,
  	0,0,0,750,742,1,0,0,0,750,743,1,0,0,0,750,744,1,0,0,0,751,75,1,0,0,0,
  	752,753,3,380,190,0,753,754,3,370,185,0,754,755,5,12,0,0,755,756,3,166,
  	83,0,756,757,3,8,4,0,757,77,1,0,0,0,758,761,3,376,188,0,759,760,5,12,
  	0,0,760,762,3,166,83,0,761,759,1,0,0,0,761,762,1,0,0,0,762,79,1,0,0,0,
  	763,764,3,78,39,0,764,765,3,138,69,0,765,81,1,0,0,0,766,768,5,64,0,0,
  	767,769,3,166,83,0,768,767,1,0,0,0,768,769,1,0,0,0,769,770,1,0,0,0,770,
  	771,5,46,0,0,771,83,1,0,0,0,772,774,5,54,0,0,773,772,1,0,0,0,773,774,
  	1,0,0,0,774,871,1,0,0,0,775,776,5,75,0,0,776,872,3,122,61,0,777,778,5,
  	75,0,0,778,872,3,70,35,0,779,780,5,75,0,0,780,872,3,80,40,0,781,783,5,
  	75,0,0,782,784,5,107,0,0,783,782,1,0,0,0,783,784,1,0,0,0,784,786,1,0,
  	0,0,785,781,1,0,0,0,785,786,1,0,0,0,786,787,1,0,0,0,787,872,3,164,82,
  	0,788,790,5,75,0,0,789,791,5,107,0,0,790,789,1,0,0,0,790,791,1,0,0,0,
  	791,793,1,0,0,0,792,788,1,0,0,0,792,793,1,0,0,0,793,794,1,0,0,0,794,872,
  	3,324,162,0,795,797,5,75,0,0,796,798,5,107,0,0,797,796,1,0,0,0,797,798,
  	1,0,0,0,798,800,1,0,0,0,799,795,1,0,0,0,799,800,1,0,0,0,800,801,1,0,0,
  	0,801,872,3,154,77,0,802,804,5,75,0,0,803,802,1,0,0,0,803,804,1,0,0,0,
  	804,805,1,0,0,0,805,872,3,278,139,0,806,807,5,107,0,0,807,809,5,63,0,
  	0,808,810,3,366,183,0,809,808,1,0,0,0,809,810,1,0,0,0,810,811,1,0,0,0,
  	811,872,3,342,171,0,812,813,5,107,0,0,813,815,5,78,0,0,814,816,3,366,
  	183,0,815,814,1,0,0,0,815,816,1,0,0,0,816,817,1,0,0,0,817,872,3,342,171,
  	0,818,819,5,107,0,0,819,820,5,91,0,0,820,822,5,78,0,0,821,823,3,366,183,
  	0,822,821,1,0,0,0,822,823,1,0,0,0,823,824,1,0,0,0,824,872,3,184,92,0,
  	825,827,5,107,0,0,826,828,5,91,0,0,827,826,1,0,0,0,827,828,1,0,0,0,828,
  	829,1,0,0,0,829,830,3,406,203,0,830,831,3,184,92,0,831,872,1,0,0,0,832,
  	833,5,65,0,0,833,834,5,91,0,0,834,836,5,78,0,0,835,837,3,366,183,0,836,
  	835,1,0,0,0,836,837,1,0,0,0,837,838,1,0,0,0,838,872,3,168,84,0,839,841,
  	5,65,0,0,840,842,5,91,0,0,841,840,1,0,0,0,841,842,1,0,0,0,842,843,1,0,
  	0,0,843,844,3,406,203,0,844,845,3,184,92,0,845,872,1,0,0,0,846,848,5,
  	91,0,0,847,846,1,0,0,0,847,848,1,0,0,0,848,849,1,0,0,0,849,851,5,78,0,
  	0,850,852,3,366,183,0,851,850,1,0,0,0,851,852,1,0,0,0,852,853,1,0,0,0,
  	853,872,3,184,92,0,854,856,5,91,0,0,855,854,1,0,0,0,855,856,1,0,0,0,856,
  	857,1,0,0,0,857,858,3,406,203,0,858,859,3,184,92,0,859,872,1,0,0,0,860,
  	872,3,306,153,0,861,864,3,70,35,0,862,865,3,308,154,0,863,865,3,192,96,
  	0,864,862,1,0,0,0,864,863,1,0,0,0,864,865,1,0,0,0,865,872,1,0,0,0,866,
  	869,3,80,40,0,867,870,3,308,154,0,868,870,3,192,96,0,869,867,1,0,0,0,
  	869,868,1,0,0,0,869,870,1,0,0,0,870,872,1,0,0,0,871,775,1,0,0,0,871,777,
  	1,0,0,0,871,779,1,0,0,0,871,785,1,0,0,0,871,792,1,0,0,0,871,799,1,0,0,
  	0,871,803,1,0,0,0,871,806,1,0,0,0,871,812,1,0,0,0,871,818,1,0,0,0,871,
  	825,1,0,0,0,871,832,1,0,0,0,871,839,1,0,0,0,871,847,1,0,0,0,871,855,1,
  	0,0,0,871,860,1,0,0,0,871,861,1,0,0,0,871,866,1,0,0,0,872,85,1,0,0,0,
  	873,875,5,65,0,0,874,873,1,0,0,0,874,875,1,0,0,0,875,876,1,0,0,0,876,
  	877,3,128,64,0,877,878,3,166,83,0,878,87,1,0,0,0,879,881,3,198,99,0,880,
  	879,1,0,0,0,881,884,1,0,0,0,882,880,1,0,0,0,882,883,1,0,0,0,883,885,1,
  	0,0,0,884,882,1,0,0,0,885,886,5,66,0,0,886,887,5,10,0,0,887,888,3,338,
  	169,0,888,89,1,0,0,0,889,892,3,260,130,0,890,891,5,18,0,0,891,893,3,110,
  	55,0,892,890,1,0,0,0,892,893,1,0,0,0,893,91,1,0,0,0,894,896,3,224,112,
  	0,895,897,5,102,0,0,896,895,1,0,0,0,896,897,1,0,0,0,897,898,1,0,0,0,898,
  	901,3,262,131,0,899,900,7,4,0,0,900,902,3,110,55,0,901,899,1,0,0,0,901,
  	902,1,0,0,0,902,93,1,0,0,0,903,904,5,68,0,0,904,905,3,336,168,0,905,906,
  	5,118,0,0,906,907,5,31,0,0,907,908,3,110,55,0,908,909,5,11,0,0,909,910,
  	5,46,0,0,910,95,1,0,0,0,911,916,3,166,83,0,912,913,5,12,0,0,913,915,3,
  	166,83,0,914,912,1,0,0,0,915,918,1,0,0,0,916,914,1,0,0,0,916,917,1,0,
  	0,0,917,97,1,0,0,0,918,916,1,0,0,0,919,925,3,112,56,0,920,925,3,222,111,
  	0,921,925,3,334,167,0,922,925,3,170,85,0,923,925,3,132,66,0,924,919,1,
  	0,0,0,924,920,1,0,0,0,924,921,1,0,0,0,924,922,1,0,0,0,924,923,1,0,0,0,
  	925,99,1,0,0,0,926,931,3,98,49,0,927,928,5,5,0,0,928,930,3,98,49,0,929,
  	927,1,0,0,0,930,933,1,0,0,0,931,929,1,0,0,0,931,932,1,0,0,0,932,935,1,
  	0,0,0,933,931,1,0,0,0,934,936,5,5,0,0,935,934,1,0,0,0,935,936,1,0,0,0,
  	936,101,1,0,0,0,937,938,3,224,112,0,938,939,3,166,83,0,939,103,1,0,0,
  	0,940,941,5,71,0,0,941,942,3,166,83,0,942,943,5,30,0,0,943,948,3,102,
  	51,0,944,945,5,5,0,0,945,947,3,102,51,0,946,944,1,0,0,0,947,950,1,0,0,
  	0,948,946,1,0,0,0,948,949,1,0,0,0,949,952,1,0,0,0,950,948,1,0,0,0,951,
  	953,5,5,0,0,952,951,1,0,0,0,952,953,1,0,0,0,953,954,1,0,0,0,954,955,5,
  	7,0,0,955,105,1,0,0,0,956,960,3,310,155,0,957,958,3,108,54,0,958,959,
  	3,310,155,0,959,961,1,0,0,0,960,957,1,0,0,0,960,961,1,0,0,0,961,967,1,
  	0,0,0,962,963,5,108,0,0,963,964,3,108,54,0,964,965,3,310,155,0,965,967,
  	1,0,0,0,966,956,1,0,0,0,966,962,1,0,0,0,967,107,1,0,0,0,968,969,7,5,0,
  	0,969,109,1,0,0,0,970,971,3,16,8,0,971,972,3,22,11,0,972,973,3,110,55,
  	0,973,978,1,0,0,0,974,978,3,64,32,0,975,978,3,42,21,0,976,978,3,356,178,
  	0,977,970,1,0,0,0,977,974,1,0,0,0,977,975,1,0,0,0,977,976,1,0,0,0,978,
  	111,1,0,0,0,979,980,3,110,55,0,980,113,1,0,0,0,981,986,3,110,55,0,982,
  	983,5,5,0,0,983,985,3,110,55,0,984,982,1,0,0,0,985,988,1,0,0,0,986,984,
  	1,0,0,0,986,987,1,0,0,0,987,115,1,0,0,0,988,986,1,0,0,0,989,991,3,110,
  	55,0,990,989,1,0,0,0,990,991,1,0,0,0,991,992,1,0,0,0,992,993,5,46,0,0,
  	993,117,1,0,0,0,994,995,3,16,8,0,995,996,3,22,11,0,996,997,3,118,59,0,
  	997,1001,1,0,0,0,998,1001,3,64,32,0,999,1001,3,358,179,0,1000,994,1,0,
  	0,0,1000,998,1,0,0,0,1000,999,1,0,0,0,1001,119,1,0,0,0,1002,1004,5,74,
  	0,0,1003,1005,3,166,83,0,1004,1003,1,0,0,0,1004,1005,1,0,0,0,1005,1007,
  	1,0,0,0,1006,1008,3,394,197,0,1007,1006,1,0,0,0,1007,1008,1,0,0,0,1008,
  	1009,1,0,0,0,1009,1010,5,99,0,0,1010,1011,3,366,183,0,1011,1017,5,30,
  	0,0,1012,1013,3,224,112,0,1013,1014,3,56,28,0,1014,1016,1,0,0,0,1015,
  	1012,1,0,0,0,1016,1019,1,0,0,0,1017,1015,1,0,0,0,1017,1018,1,0,0,0,1018,
  	1020,1,0,0,0,1019,1017,1,0,0,0,1020,1021,5,7,0,0,1021,121,1,0,0,0,1022,
  	1024,5,63,0,0,1023,1022,1,0,0,0,1023,1024,1,0,0,0,1024,1025,1,0,0,0,1025,
  	1026,5,76,0,0,1026,1027,3,78,39,0,1027,1028,3,138,69,0,1028,123,1,0,0,
  	0,1029,1031,3,128,64,0,1030,1029,1,0,0,0,1030,1031,1,0,0,0,1031,1032,
  	1,0,0,0,1032,1033,5,111,0,0,1033,1034,5,12,0,0,1034,1039,3,166,83,0,1035,
  	1037,3,140,70,0,1036,1038,5,41,0,0,1037,1036,1,0,0,0,1037,1038,1,0,0,
  	0,1038,1040,1,0,0,0,1039,1035,1,0,0,0,1039,1040,1,0,0,0,1040,125,1,0,
  	0,0,1041,1042,5,111,0,0,1042,1044,5,12,0,0,1043,1041,1,0,0,0,1043,1044,
  	1,0,0,0,1044,1045,1,0,0,0,1045,1046,3,166,83,0,1046,1047,5,18,0,0,1047,
  	1048,3,188,94,0,1048,127,1,0,0,0,1049,1051,5,91,0,0,1050,1049,1,0,0,0,
  	1050,1051,1,0,0,0,1051,1052,1,0,0,0,1052,1054,5,78,0,0,1053,1055,3,366,
  	183,0,1054,1053,1,0,0,0,1054,1055,1,0,0,0,1055,1065,1,0,0,0,1056,1058,
  	5,63,0,0,1057,1059,3,366,183,0,1058,1057,1,0,0,0,1058,1059,1,0,0,0,1059,
  	1065,1,0,0,0,1060,1062,5,91,0,0,1061,1060,1,0,0,0,1061,1062,1,0,0,0,1062,
  	1063,1,0,0,0,1063,1065,3,406,203,0,1064,1050,1,0,0,0,1064,1056,1,0,0,
  	0,1064,1061,1,0,0,0,1065,129,1,0,0,0,1066,1067,5,79,0,0,1067,1068,3,36,
  	18,0,1068,131,1,0,0,0,1069,1071,5,58,0,0,1070,1069,1,0,0,0,1070,1071,
  	1,0,0,0,1071,1072,1,0,0,0,1072,1073,5,80,0,0,1073,1074,5,31,0,0,1074,
  	1075,3,136,68,0,1075,1076,5,11,0,0,1076,1077,3,98,49,0,1077,133,1,0,0,
  	0,1078,1084,3,216,108,0,1079,1081,3,110,55,0,1080,1079,1,0,0,0,1080,1081,
  	1,0,0,0,1081,1082,1,0,0,0,1082,1084,5,46,0,0,1083,1078,1,0,0,0,1083,1080,
  	1,0,0,0,1084,135,1,0,0,0,1085,1087,3,134,67,0,1086,1088,3,110,55,0,1087,
  	1086,1,0,0,0,1087,1088,1,0,0,0,1088,1089,1,0,0,0,1089,1091,5,46,0,0,1090,
  	1092,3,114,57,0,1091,1090,1,0,0,0,1091,1092,1,0,0,0,1092,1103,1,0,0,0,
  	1093,1094,3,224,112,0,1094,1095,3,86,43,0,1095,1096,5,88,0,0,1096,1097,
  	3,110,55,0,1097,1103,1,0,0,0,1098,1099,3,166,83,0,1099,1100,5,88,0,0,
  	1100,1101,3,110,55,0,1101,1103,1,0,0,0,1102,1085,1,0,0,0,1102,1093,1,
  	0,0,0,1102,1098,1,0,0,0,1103,137,1,0,0,0,1104,1105,5,31,0,0,1105,1124,
  	5,11,0,0,1106,1107,5,31,0,0,1107,1109,3,264,132,0,1108,1110,5,5,0,0,1109,
  	1108,1,0,0,0,1109,1110,1,0,0,0,1110,1111,1,0,0,0,1111,1112,5,11,0,0,1112,
  	1124,1,0,0,0,1113,1114,5,31,0,0,1114,1115,3,264,132,0,1115,1116,5,5,0,
  	0,1116,1117,3,280,140,0,1117,1118,5,11,0,0,1118,1124,1,0,0,0,1119,1120,
  	5,31,0,0,1120,1121,3,280,140,0,1121,1122,5,11,0,0,1122,1124,1,0,0,0,1123,
  	1104,1,0,0,0,1123,1106,1,0,0,0,1123,1113,1,0,0,0,1123,1119,1,0,0,0,1124,
  	139,1,0,0,0,1125,1127,3,394,197,0,1126,1125,1,0,0,0,1126,1127,1,0,0,0,
  	1127,1128,1,0,0,0,1128,1129,3,138,69,0,1129,141,1,0,0,0,1130,1132,5,58,
  	0,0,1131,1130,1,0,0,0,1131,1132,1,0,0,0,1132,1133,1,0,0,0,1133,1134,5,
  	80,0,0,1134,1135,5,31,0,0,1135,1136,3,136,68,0,1136,1137,5,11,0,0,1137,
  	1138,3,336,168,0,1138,143,1,0,0,0,1139,1141,5,95,0,0,1140,1142,3,344,
  	172,0,1141,1140,1,0,0,0,1141,1142,1,0,0,0,1142,1143,1,0,0,0,1143,1161,
  	5,46,0,0,1144,1146,5,57,0,0,1145,1144,1,0,0,0,1145,1146,1,0,0,0,1146,
  	1147,1,0,0,0,1147,1148,5,17,0,0,1148,1149,3,110,55,0,1149,1150,5,46,0,
  	0,1150,1161,1,0,0,0,1151,1153,5,57,0,0,1152,1154,5,52,0,0,1153,1152,1,
  	0,0,0,1153,1154,1,0,0,0,1154,1158,1,0,0,0,1155,1156,5,110,0,0,1156,1158,
  	5,52,0,0,1157,1151,1,0,0,0,1157,1155,1,0,0,0,1157,1158,1,0,0,0,1158,1159,
  	1,0,0,0,1159,1161,3,36,18,0,1160,1139,1,0,0,0,1160,1145,1,0,0,0,1160,
  	1157,1,0,0,0,1161,145,1,0,0,0,1162,1163,3,140,70,0,1163,1164,3,148,74,
  	0,1164,147,1,0,0,0,1165,1167,5,57,0,0,1166,1165,1,0,0,0,1166,1167,1,0,
  	0,0,1167,1168,1,0,0,0,1168,1169,5,17,0,0,1169,1180,3,110,55,0,1170,1172,
  	5,57,0,0,1171,1173,5,52,0,0,1172,1171,1,0,0,0,1172,1173,1,0,0,0,1173,
  	1177,1,0,0,0,1174,1175,5,110,0,0,1175,1177,5,52,0,0,1176,1170,1,0,0,0,
  	1176,1174,1,0,0,0,1176,1177,1,0,0,0,1177,1178,1,0,0,0,1178,1180,3,36,
  	18,0,1179,1166,1,0,0,0,1179,1176,1,0,0,0,1180,149,1,0,0,0,1181,1183,5,
  	65,0,0,1182,1181,1,0,0,0,1182,1183,1,0,0,0,1183,1185,1,0,0,0,1184,1186,
  	3,366,183,0,1185,1184,1,0,0,0,1185,1186,1,0,0,0,1186,1187,1,0,0,0,1187,
  	1188,3,166,83,0,1188,1190,3,140,70,0,1189,1191,5,41,0,0,1190,1189,1,0,
  	0,0,1190,1191,1,0,0,0,1191,151,1,0,0,0,1192,1194,3,366,183,0,1193,1192,
  	1,0,0,0,1193,1194,1,0,0,0,1194,1195,1,0,0,0,1195,1196,3,166,83,0,1196,
  	153,1,0,0,0,1197,1199,3,366,183,0,1198,1197,1,0,0,0,1198,1199,1,0,0,0,
  	1199,1200,1,0,0,0,1200,1201,3,166,83,0,1201,1202,3,140,70,0,1202,155,
  	1,0,0,0,1203,1208,3,162,81,0,1204,1205,3,382,191,0,1205,1206,3,162,81,
  	0,1206,1208,1,0,0,0,1207,1203,1,0,0,0,1207,1204,1,0,0,0,1208,157,1,0,
  	0,0,1209,1210,3,152,76,0,1210,1211,3,140,70,0,1211,1212,5,46,0,0,1212,
  	159,1,0,0,0,1213,1215,5,81,0,0,1214,1216,3,394,197,0,1215,1214,1,0,0,
  	0,1215,1216,1,0,0,0,1216,1217,1,0,0,0,1217,1218,3,288,144,0,1218,161,
  	1,0,0,0,1219,1221,3,160,80,0,1220,1222,5,41,0,0,1221,1220,1,0,0,0,1221,
  	1222,1,0,0,0,1222,1223,1,0,0,0,1223,1224,3,162,81,0,1224,1227,1,0,0,0,
  	1225,1227,3,160,80,0,1226,1219,1,0,0,0,1226,1225,1,0,0,0,1227,163,1,0,
  	0,0,1228,1230,3,366,183,0,1229,1228,1,0,0,0,1229,1230,1,0,0,0,1230,1231,
  	1,0,0,0,1231,1232,5,82,0,0,1232,1233,3,166,83,0,1233,165,1,0,0,0,1234,
  	1235,7,6,0,0,1235,167,1,0,0,0,1236,1241,3,166,83,0,1237,1238,5,5,0,0,
  	1238,1240,3,166,83,0,1239,1237,1,0,0,0,1240,1243,1,0,0,0,1241,1239,1,
  	0,0,0,1241,1242,1,0,0,0,1242,169,1,0,0,0,1243,1241,1,0,0,0,1244,1245,
  	5,85,0,0,1245,1246,5,31,0,0,1246,1247,3,110,55,0,1247,1248,5,11,0,0,1248,
  	1251,3,98,49,0,1249,1250,5,70,0,0,1250,1252,3,98,49,0,1251,1249,1,0,0,
  	0,1251,1252,1,0,0,0,1252,171,1,0,0,0,1253,1258,3,220,110,0,1254,1255,
  	5,44,0,0,1255,1257,3,220,110,0,1256,1254,1,0,0,0,1257,1260,1,0,0,0,1258,
  	1256,1,0,0,0,1258,1259,1,0,0,0,1259,173,1,0,0,0,1260,1258,1,0,0,0,1261,
  	1262,5,85,0,0,1262,1263,5,31,0,0,1263,1264,3,110,55,0,1264,1265,5,11,
  	0,0,1265,1268,3,336,168,0,1266,1267,5,70,0,0,1267,1269,3,336,168,0,1268,
  	1266,1,0,0,0,1268,1269,1,0,0,0,1269,175,1,0,0,0,1270,1273,3,206,103,0,
  	1271,1273,3,204,102,0,1272,1270,1,0,0,0,1272,1271,1,0,0,0,1273,177,1,
  	0,0,0,1274,1275,5,87,0,0,1275,1281,3,66,33,0,1276,1278,5,67,0,0,1277,
  	1276,1,0,0,0,1277,1278,1,0,0,0,1278,1279,1,0,0,0,1279,1280,5,55,0,0,1280,
  	1282,3,166,83,0,1281,1277,1,0,0,0,1281,1282,1,0,0,0,1282,1286,1,0,0,0,
  	1283,1285,3,58,29,0,1284,1283,1,0,0,0,1285,1288,1,0,0,0,1286,1284,1,0,
  	0,0,1286,1287,1,0,0,0,1287,1289,1,0,0,0,1288,1286,1,0,0,0,1289,1290,5,
  	46,0,0,1290,179,1,0,0,0,1291,1292,7,7,0,0,1292,181,1,0,0,0,1293,1296,
  	3,166,83,0,1294,1295,5,18,0,0,1295,1297,3,110,55,0,1296,1294,1,0,0,0,
  	1296,1297,1,0,0,0,1297,183,1,0,0,0,1298,1303,3,182,91,0,1299,1300,5,5,
  	0,0,1300,1302,3,182,91,0,1301,1299,1,0,0,0,1302,1305,1,0,0,0,1303,1301,
  	1,0,0,0,1303,1304,1,0,0,0,1304,185,1,0,0,0,1305,1303,1,0,0,0,1306,1309,
  	3,86,43,0,1307,1308,5,18,0,0,1308,1310,3,110,55,0,1309,1307,1,0,0,0,1309,
  	1310,1,0,0,0,1310,1315,1,0,0,0,1311,1312,5,5,0,0,1312,1314,3,182,91,0,
  	1313,1311,1,0,0,0,1314,1317,1,0,0,0,1315,1313,1,0,0,0,1315,1316,1,0,0,
  	0,1316,187,1,0,0,0,1317,1315,1,0,0,0,1318,1321,3,64,32,0,1319,1321,3,
  	42,21,0,1320,1318,1,0,0,0,1320,1319,1,0,0,0,1321,189,1,0,0,0,1322,1323,
  	5,108,0,0,1323,1332,3,8,4,0,1324,1325,5,108,0,0,1325,1326,5,12,0,0,1326,
  	1327,3,166,83,0,1327,1328,3,8,4,0,1328,1332,1,0,0,0,1329,1332,3,126,63,
  	0,1330,1332,3,12,6,0,1331,1322,1,0,0,0,1331,1324,1,0,0,0,1331,1329,1,
  	0,0,0,1331,1330,1,0,0,0,1332,191,1,0,0,0,1333,1334,5,10,0,0,1334,1339,
  	3,190,95,0,1335,1336,5,5,0,0,1336,1338,3,190,95,0,1337,1335,1,0,0,0,1338,
  	1341,1,0,0,0,1339,1337,1,0,0,0,1339,1340,1,0,0,0,1340,193,1,0,0,0,1341,
  	1339,1,0,0,0,1342,1343,5,86,0,0,1343,1344,3,386,193,0,1344,195,1,0,0,
  	0,1345,1347,5,90,0,0,1346,1348,5,28,0,0,1347,1346,1,0,0,0,1347,1348,1,
  	0,0,0,1348,197,1,0,0,0,1349,1350,3,166,83,0,1350,1351,5,10,0,0,1351,199,
  	1,0,0,0,1352,1353,5,92,0,0,1353,1354,3,342,171,0,1354,1355,5,88,0,0,1355,
  	1356,3,110,55,0,1356,201,1,0,0,0,1357,1359,3,208,104,0,1358,1357,1,0,
  	0,0,1358,1359,1,0,0,0,1359,1363,1,0,0,0,1360,1362,3,176,88,0,1361,1360,
  	1,0,0,0,1362,1365,1,0,0,0,1363,1361,1,0,0,0,1363,1364,1,0,0,0,1364,1369,
  	1,0,0,0,1365,1363,1,0,0,0,1366,1368,3,292,146,0,1367,1366,1,0,0,0,1368,
  	1371,1,0,0,0,1369,1367,1,0,0,0,1369,1370,1,0,0,0,1370,1377,1,0,0,0,1371,
  	1369,1,0,0,0,1372,1373,3,224,112,0,1373,1374,3,362,181,0,1374,1376,1,
  	0,0,0,1375,1372,1,0,0,0,1376,1379,1,0,0,0,1377,1375,1,0,0,0,1377,1378,
  	1,0,0,0,1378,203,1,0,0,0,1379,1377,1,0,0,0,1380,1381,3,224,112,0,1381,
  	1382,5,72,0,0,1382,1386,3,66,33,0,1383,1385,3,58,29,0,1384,1383,1,0,0,
  	0,1385,1388,1,0,0,0,1386,1384,1,0,0,0,1386,1387,1,0,0,0,1387,1389,1,0,
  	0,0,1388,1386,1,0,0,0,1389,1390,5,46,0,0,1390,205,1,0,0,0,1391,1392,3,
  	224,112,0,1392,1393,3,178,89,0,1393,207,1,0,0,0,1394,1395,3,224,112,0,
  	1395,1396,5,93,0,0,1396,1397,3,96,48,0,1397,1398,5,46,0,0,1398,209,1,
  	0,0,0,1399,1401,5,63,0,0,1400,1399,1,0,0,0,1400,1401,1,0,0,0,1401,1403,
  	1,0,0,0,1402,1404,3,370,185,0,1403,1402,1,0,0,0,1403,1404,1,0,0,0,1404,
  	1405,1,0,0,0,1405,1407,5,29,0,0,1406,1408,3,100,50,0,1407,1406,1,0,0,
  	0,1407,1408,1,0,0,0,1408,1409,1,0,0,0,1409,1410,5,6,0,0,1410,211,1,0,
  	0,0,1411,1419,3,270,135,0,1412,1419,3,38,19,0,1413,1419,3,272,136,0,1414,
  	1419,3,344,172,0,1415,1419,3,352,176,0,1416,1419,3,210,105,0,1417,1419,
  	3,322,161,0,1418,1411,1,0,0,0,1418,1412,1,0,0,0,1418,1413,1,0,0,0,1418,
  	1414,1,0,0,0,1418,1415,1,0,0,0,1418,1416,1,0,0,0,1418,1417,1,0,0,0,1419,
  	213,1,0,0,0,1420,1421,3,224,112,0,1421,1422,3,154,77,0,1422,1423,3,144,
  	72,0,1423,215,1,0,0,0,1424,1425,3,224,112,0,1425,1426,3,186,93,0,1426,
  	1427,5,46,0,0,1427,217,1,0,0,0,1428,1433,3,106,53,0,1429,1430,5,2,0,0,
  	1430,1432,3,106,53,0,1431,1429,1,0,0,0,1432,1435,1,0,0,0,1433,1431,1,
  	0,0,0,1433,1434,1,0,0,0,1434,219,1,0,0,0,1435,1433,1,0,0,0,1436,1441,
  	3,218,109,0,1437,1438,5,40,0,0,1438,1440,3,218,109,0,1439,1437,1,0,0,
  	0,1440,1443,1,0,0,0,1441,1439,1,0,0,0,1441,1442,1,0,0,0,1442,221,1,0,
  	0,0,1443,1441,1,0,0,0,1444,1445,3,110,55,0,1445,1446,5,10,0,0,1446,1447,
  	3,110,55,0,1447,223,1,0,0,0,1448,1449,5,4,0,0,1449,1451,3,226,113,0,1450,
  	1448,1,0,0,0,1451,1454,1,0,0,0,1452,1450,1,0,0,0,1452,1453,1,0,0,0,1453,
  	225,1,0,0,0,1454,1452,1,0,0,0,1455,1461,3,166,83,0,1456,1461,3,304,152,
  	0,1457,1458,3,74,37,0,1458,1459,3,8,4,0,1459,1461,1,0,0,0,1460,1455,1,
  	0,0,0,1460,1456,1,0,0,0,1460,1457,1,0,0,0,1461,227,1,0,0,0,1462,1464,
  	3,80,40,0,1463,1465,3,192,96,0,1464,1463,1,0,0,0,1464,1465,1,0,0,0,1465,
  	1481,1,0,0,0,1466,1481,3,122,61,0,1467,1469,5,107,0,0,1468,1467,1,0,0,
  	0,1468,1469,1,0,0,0,1469,1470,1,0,0,0,1470,1481,3,154,77,0,1471,1473,
  	5,107,0,0,1472,1471,1,0,0,0,1472,1473,1,0,0,0,1473,1474,1,0,0,0,1474,
  	1481,3,164,82,0,1475,1477,5,107,0,0,1476,1475,1,0,0,0,1476,1477,1,0,0,
  	0,1477,1478,1,0,0,0,1478,1481,3,324,162,0,1479,1481,3,278,139,0,1480,
  	1462,1,0,0,0,1480,1466,1,0,0,0,1480,1468,1,0,0,0,1480,1472,1,0,0,0,1480,
  	1476,1,0,0,0,1480,1479,1,0,0,0,1481,229,1,0,0,0,1482,1483,5,25,0,0,1483,
  	231,1,0,0,0,1484,1485,3,384,192,0,1485,1487,3,238,119,0,1486,1488,3,194,
  	97,0,1487,1486,1,0,0,0,1487,1488,1,0,0,0,1488,233,1,0,0,0,1489,1491,3,
  	166,83,0,1490,1492,3,394,197,0,1491,1490,1,0,0,0,1491,1492,1,0,0,0,1492,
  	1493,1,0,0,0,1493,1494,5,18,0,0,1494,1495,3,232,116,0,1495,1496,5,46,
  	0,0,1496,235,1,0,0,0,1497,1498,5,94,0,0,1498,1500,3,376,188,0,1499,1501,
  	3,394,197,0,1500,1499,1,0,0,0,1500,1501,1,0,0,0,1501,1504,1,0,0,0,1502,
  	1503,5,99,0,0,1503,1505,3,386,193,0,1504,1502,1,0,0,0,1504,1505,1,0,0,
  	0,1505,1507,1,0,0,0,1506,1508,3,194,97,0,1507,1506,1,0,0,0,1507,1508,
  	1,0,0,0,1508,1509,1,0,0,0,1509,1515,5,30,0,0,1510,1511,3,224,112,0,1511,
  	1512,3,56,28,0,1512,1514,1,0,0,0,1513,1510,1,0,0,0,1514,1517,1,0,0,0,
  	1515,1513,1,0,0,0,1515,1516,1,0,0,0,1516,1518,1,0,0,0,1517,1515,1,0,0,
  	0,1518,1519,5,7,0,0,1519,237,1,0,0,0,1520,1521,5,119,0,0,1521,1522,3,
  	386,193,0,1522,239,1,0,0,0,1523,1524,5,124,0,0,1524,241,1,0,0,0,1525,
  	1531,3,398,199,0,1526,1527,3,244,122,0,1527,1528,3,398,199,0,1528,1530,
  	1,0,0,0,1529,1526,1,0,0,0,1530,1533,1,0,0,0,1531,1529,1,0,0,0,1531,1532,
  	1,0,0,0,1532,1543,1,0,0,0,1533,1531,1,0,0,0,1534,1538,5,108,0,0,1535,
  	1536,3,244,122,0,1536,1537,3,398,199,0,1537,1539,1,0,0,0,1538,1535,1,
  	0,0,0,1539,1540,1,0,0,0,1540,1538,1,0,0,0,1540,1541,1,0,0,0,1541,1543,
  	1,0,0,0,1542,1525,1,0,0,0,1542,1534,1,0,0,0,1543,243,1,0,0,0,1544,1545,
  	7,8,0,0,1545,245,1,0,0,0,1546,1547,3,198,99,0,1547,1548,3,110,55,0,1548,
  	247,1,0,0,0,1549,1550,5,30,0,0,1550,1555,3,92,46,0,1551,1552,5,5,0,0,
  	1552,1554,3,92,46,0,1553,1551,1,0,0,0,1554,1557,1,0,0,0,1555,1553,1,0,
  	0,0,1555,1556,1,0,0,0,1556,1559,1,0,0,0,1557,1555,1,0,0,0,1558,1560,5,
  	5,0,0,1559,1558,1,0,0,0,1559,1560,1,0,0,0,1560,1561,1,0,0,0,1561,1562,
  	5,7,0,0,1562,249,1,0,0,0,1563,1565,3,224,112,0,1564,1566,5,102,0,0,1565,
  	1564,1,0,0,0,1565,1566,1,0,0,0,1566,1567,1,0,0,0,1567,1568,3,374,187,
  	0,1568,251,1,0,0,0,1569,1570,5,30,0,0,1570,1575,3,250,125,0,1571,1572,
  	5,5,0,0,1572,1574,3,250,125,0,1573,1571,1,0,0,0,1574,1577,1,0,0,0,1575,
  	1573,1,0,0,0,1575,1576,1,0,0,0,1576,1579,1,0,0,0,1577,1575,1,0,0,0,1578,
  	1580,5,5,0,0,1579,1578,1,0,0,0,1579,1580,1,0,0,0,1580,1581,1,0,0,0,1581,
  	1582,5,7,0,0,1582,253,1,0,0,0,1583,1584,5,28,0,0,1584,255,1,0,0,0,1585,
  	1586,5,96,0,0,1586,1587,3,74,37,0,1587,1588,3,8,4,0,1588,257,1,0,0,0,
  	1589,1607,3,36,18,0,1590,1607,3,216,108,0,1591,1607,3,142,71,0,1592,1607,
  	3,408,204,0,1593,1607,3,94,47,0,1594,1607,3,350,175,0,1595,1607,3,174,
  	87,0,1596,1607,3,316,158,0,1597,1607,3,364,182,0,1598,1607,3,40,20,0,
  	1599,1607,3,82,41,0,1600,1607,3,318,159,0,1601,1607,3,412,206,0,1602,
  	1607,3,410,205,0,1603,1607,3,116,58,0,1604,1607,3,14,7,0,1605,1607,3,
  	214,107,0,1606,1589,1,0,0,0,1606,1590,1,0,0,0,1606,1591,1,0,0,0,1606,
  	1592,1,0,0,0,1606,1593,1,0,0,0,1606,1594,1,0,0,0,1606,1595,1,0,0,0,1606,
  	1596,1,0,0,0,1606,1597,1,0,0,0,1606,1598,1,0,0,0,1606,1599,1,0,0,0,1606,
  	1600,1,0,0,0,1606,1601,1,0,0,0,1606,1602,1,0,0,0,1606,1603,1,0,0,0,1606,
  	1604,1,0,0,0,1606,1605,1,0,0,0,1607,259,1,0,0,0,1608,1609,3,224,112,0,
  	1609,1610,3,262,131,0,1610,261,1,0,0,0,1611,1615,3,150,75,0,1612,1615,
  	3,124,62,0,1613,1615,3,330,165,0,1614,1611,1,0,0,0,1614,1612,1,0,0,0,
  	1614,1613,1,0,0,0,1615,263,1,0,0,0,1616,1621,3,260,130,0,1617,1618,5,
  	5,0,0,1618,1620,3,260,130,0,1619,1617,1,0,0,0,1620,1623,1,0,0,0,1621,
  	1619,1,0,0,0,1621,1622,1,0,0,0,1622,265,1,0,0,0,1623,1621,1,0,0,0,1624,
  	1625,3,224,112,0,1625,1626,3,374,187,0,1626,1631,1,0,0,0,1627,1628,3,
  	224,112,0,1628,1629,3,366,183,0,1629,1631,1,0,0,0,1630,1624,1,0,0,0,1630,
  	1627,1,0,0,0,1631,267,1,0,0,0,1632,1637,3,266,133,0,1633,1634,5,5,0,0,
  	1634,1636,3,266,133,0,1635,1633,1,0,0,0,1636,1639,1,0,0,0,1637,1635,1,
  	0,0,0,1637,1638,1,0,0,0,1638,269,1,0,0,0,1639,1637,1,0,0,0,1640,1641,
  	5,97,0,0,1641,271,1,0,0,0,1642,1643,7,9,0,0,1643,273,1,0,0,0,1644,1645,
  	3,52,26,0,1645,1646,3,36,18,0,1646,1655,1,0,0,0,1647,1648,5,99,0,0,1648,
  	1650,3,384,192,0,1649,1651,3,52,26,0,1650,1649,1,0,0,0,1650,1651,1,0,
  	0,0,1651,1652,1,0,0,0,1652,1653,3,36,18,0,1653,1655,1,0,0,0,1654,1644,
  	1,0,0,0,1654,1647,1,0,0,0,1655,275,1,0,0,0,1656,1664,5,51,0,0,1657,1664,
  	3,26,13,0,1658,1659,5,29,0,0,1659,1664,5,6,0,0,1660,1661,5,29,0,0,1661,
  	1662,5,6,0,0,1662,1664,5,18,0,0,1663,1656,1,0,0,0,1663,1657,1,0,0,0,1663,
  	1658,1,0,0,0,1663,1660,1,0,0,0,1664,277,1,0,0,0,1665,1667,3,366,183,0,
  	1666,1665,1,0,0,0,1666,1667,1,0,0,0,1667,1668,1,0,0,0,1668,1669,5,100,
  	0,0,1669,1670,3,276,138,0,1670,1671,3,138,69,0,1671,279,1,0,0,0,1672,
  	1675,3,284,142,0,1673,1675,3,248,124,0,1674,1672,1,0,0,0,1674,1673,1,
  	0,0,0,1675,281,1,0,0,0,1676,1679,3,286,143,0,1677,1679,3,252,126,0,1678,
  	1676,1,0,0,0,1678,1677,1,0,0,0,1679,283,1,0,0,0,1680,1681,5,29,0,0,1681,
  	1686,3,90,45,0,1682,1683,5,5,0,0,1683,1685,3,90,45,0,1684,1682,1,0,0,
  	0,1685,1688,1,0,0,0,1686,1684,1,0,0,0,1686,1687,1,0,0,0,1687,1690,1,0,
  	0,0,1688,1686,1,0,0,0,1689,1691,5,5,0,0,1690,1689,1,0,0,0,1690,1691,1,
  	0,0,0,1691,1692,1,0,0,0,1692,1693,5,6,0,0,1693,285,1,0,0,0,1694,1695,
  	5,29,0,0,1695,1697,3,268,134,0,1696,1698,5,5,0,0,1697,1696,1,0,0,0,1697,
  	1698,1,0,0,0,1698,1699,1,0,0,0,1699,1700,5,6,0,0,1700,287,1,0,0,0,1701,
  	1702,5,31,0,0,1702,1721,5,11,0,0,1703,1704,5,31,0,0,1704,1705,3,268,134,
  	0,1705,1706,5,5,0,0,1706,1707,3,282,141,0,1707,1708,5,11,0,0,1708,1721,
  	1,0,0,0,1709,1710,5,31,0,0,1710,1712,3,268,134,0,1711,1713,5,5,0,0,1712,
  	1711,1,0,0,0,1712,1713,1,0,0,0,1713,1714,1,0,0,0,1714,1715,5,11,0,0,1715,
  	1721,1,0,0,0,1716,1717,5,31,0,0,1717,1718,3,282,141,0,1718,1719,5,11,
  	0,0,1719,1721,1,0,0,0,1720,1701,1,0,0,0,1720,1703,1,0,0,0,1720,1709,1,
  	0,0,0,1720,1716,1,0,0,0,1721,289,1,0,0,0,1722,1728,3,294,147,0,1723,1724,
  	3,224,112,0,1724,1725,3,362,181,0,1725,1727,1,0,0,0,1726,1723,1,0,0,0,
  	1727,1730,1,0,0,0,1728,1726,1,0,0,0,1728,1729,1,0,0,0,1729,291,1,0,0,
  	0,1730,1728,1,0,0,0,1731,1732,3,224,112,0,1732,1733,5,101,0,0,1733,1734,
  	3,402,201,0,1734,1735,5,46,0,0,1735,293,1,0,0,0,1736,1737,3,224,112,0,
  	1737,1738,5,101,0,0,1738,1741,5,98,0,0,1739,1742,3,96,48,0,1740,1742,
  	3,402,201,0,1741,1739,1,0,0,0,1741,1740,1,0,0,0,1742,1743,1,0,0,0,1743,
  	1744,5,46,0,0,1744,295,1,0,0,0,1745,1746,3,16,8,0,1746,1747,3,298,149,
  	0,1747,1756,1,0,0,0,1748,1752,3,302,151,0,1749,1751,3,320,160,0,1750,
  	1749,1,0,0,0,1751,1754,1,0,0,0,1752,1750,1,0,0,0,1752,1753,1,0,0,0,1753,
  	1756,1,0,0,0,1754,1752,1,0,0,0,1755,1745,1,0,0,0,1755,1748,1,0,0,0,1756,
  	297,1,0,0,0,1757,1758,3,180,90,0,1758,299,1,0,0,0,1759,1763,3,230,115,
  	0,1760,1763,3,254,127,0,1761,1763,3,360,180,0,1762,1759,1,0,0,0,1762,
  	1760,1,0,0,0,1762,1761,1,0,0,0,1763,301,1,0,0,0,1764,1780,3,354,177,0,
  	1765,1766,5,108,0,0,1766,1780,3,400,200,0,1767,1768,5,108,0,0,1768,1780,
  	3,6,3,0,1769,1780,3,146,73,0,1770,1780,3,212,106,0,1771,1780,3,166,83,
  	0,1772,1780,3,256,128,0,1773,1780,3,72,36,0,1774,1780,3,76,38,0,1775,
  	1776,5,31,0,0,1776,1777,3,110,55,0,1777,1778,5,11,0,0,1778,1780,1,0,0,
  	0,1779,1764,1,0,0,0,1779,1765,1,0,0,0,1779,1767,1,0,0,0,1779,1769,1,0,
  	0,0,1779,1770,1,0,0,0,1779,1771,1,0,0,0,1779,1772,1,0,0,0,1779,1773,1,
  	0,0,0,1779,1774,1,0,0,0,1779,1775,1,0,0,0,1780,303,1,0,0,0,1781,1782,
  	3,376,188,0,1782,1783,5,12,0,0,1783,1784,3,166,83,0,1784,1792,1,0,0,0,
  	1785,1786,3,376,188,0,1786,1787,5,12,0,0,1787,1788,3,376,188,0,1788,1789,
  	5,12,0,0,1789,1790,3,166,83,0,1790,1792,1,0,0,0,1791,1781,1,0,0,0,1791,
  	1785,1,0,0,0,1792,305,1,0,0,0,1793,1795,5,63,0,0,1794,1793,1,0,0,0,1794,
  	1795,1,0,0,0,1795,1796,1,0,0,0,1796,1797,5,76,0,0,1797,1798,3,78,39,0,
  	1798,1799,3,138,69,0,1799,1800,5,18,0,0,1800,1801,3,74,37,0,1801,307,
  	1,0,0,0,1802,1803,5,10,0,0,1803,1806,5,111,0,0,1804,1805,5,12,0,0,1805,
  	1807,3,166,83,0,1806,1804,1,0,0,0,1806,1807,1,0,0,0,1807,1808,1,0,0,0,
  	1808,1809,3,8,4,0,1809,309,1,0,0,0,1810,1816,3,32,16,0,1811,1817,3,396,
  	198,0,1812,1817,3,372,186,0,1813,1814,3,312,156,0,1814,1815,3,32,16,0,
  	1815,1817,1,0,0,0,1816,1811,1,0,0,0,1816,1812,1,0,0,0,1816,1813,1,0,0,
  	0,1816,1817,1,0,0,0,1817,1823,1,0,0,0,1818,1819,5,108,0,0,1819,1820,3,
  	312,156,0,1820,1821,3,32,16,0,1821,1823,1,0,0,0,1822,1810,1,0,0,0,1822,
  	1818,1,0,0,0,1823,311,1,0,0,0,1824,1825,5,19,0,0,1825,1830,5,18,0,0,1826,
  	1830,5,19,0,0,1827,1830,5,21,0,0,1828,1830,5,20,0,0,1829,1824,1,0,0,0,
  	1829,1826,1,0,0,0,1829,1827,1,0,0,0,1829,1828,1,0,0,0,1830,313,1,0,0,
  	0,1831,1832,7,10,0,0,1832,315,1,0,0,0,1833,1834,5,103,0,0,1834,1835,5,
  	46,0,0,1835,317,1,0,0,0,1836,1838,5,104,0,0,1837,1839,3,110,55,0,1838,
  	1837,1,0,0,0,1838,1839,1,0,0,0,1839,1840,1,0,0,0,1840,1841,5,46,0,0,1841,
  	319,1,0,0,0,1842,1846,5,28,0,0,1843,1846,3,18,9,0,1844,1846,3,6,3,0,1845,
  	1842,1,0,0,0,1845,1843,1,0,0,0,1845,1844,1,0,0,0,1846,321,1,0,0,0,1847,
  	1849,5,63,0,0,1848,1847,1,0,0,0,1848,1849,1,0,0,0,1849,1851,1,0,0,0,1850,
  	1852,3,370,185,0,1851,1850,1,0,0,0,1851,1852,1,0,0,0,1852,1853,1,0,0,
  	0,1853,1855,5,30,0,0,1854,1856,3,100,50,0,1855,1854,1,0,0,0,1855,1856,
  	1,0,0,0,1856,1857,1,0,0,0,1857,1858,5,7,0,0,1858,323,1,0,0,0,1859,1861,
  	3,366,183,0,1860,1859,1,0,0,0,1860,1861,1,0,0,0,1861,1862,1,0,0,0,1862,
  	1863,5,105,0,0,1863,1864,3,166,83,0,1864,1865,3,138,69,0,1865,325,1,0,
  	0,0,1866,1872,3,0,0,0,1867,1868,3,328,164,0,1868,1869,3,0,0,0,1869,1871,
  	1,0,0,0,1870,1867,1,0,0,0,1871,1874,1,0,0,0,1872,1870,1,0,0,0,1872,1873,
  	1,0,0,0,1873,1884,1,0,0,0,1874,1872,1,0,0,0,1875,1879,5,108,0,0,1876,
  	1877,3,328,164,0,1877,1878,3,0,0,0,1878,1880,1,0,0,0,1879,1876,1,0,0,
  	0,1880,1881,1,0,0,0,1881,1879,1,0,0,0,1881,1882,1,0,0,0,1882,1884,1,0,
  	0,0,1883,1866,1,0,0,0,1883,1875,1,0,0,0,1884,327,1,0,0,0,1885,1892,5,
  	22,0,0,1886,1887,5,19,0,0,1887,1888,5,19,0,0,1888,1892,5,19,0,0,1889,
  	1890,5,19,0,0,1890,1892,5,19,0,0,1891,1885,1,0,0,0,1891,1886,1,0,0,0,
  	1891,1889,1,0,0,0,1892,329,1,0,0,0,1893,1899,3,86,43,0,1894,1896,5,65,
  	0,0,1895,1894,1,0,0,0,1895,1896,1,0,0,0,1896,1897,1,0,0,0,1897,1899,3,
  	166,83,0,1898,1893,1,0,0,0,1898,1895,1,0,0,0,1899,331,1,0,0,0,1900,1901,
  	5,123,0,0,1901,333,1,0,0,0,1902,1903,7,11,0,0,1903,1904,3,110,55,0,1904,
  	335,1,0,0,0,1905,1907,3,198,99,0,1906,1905,1,0,0,0,1907,1910,1,0,0,0,
  	1908,1906,1,0,0,0,1908,1909,1,0,0,0,1909,1911,1,0,0,0,1910,1908,1,0,0,
  	0,1911,1912,3,258,129,0,1912,337,1,0,0,0,1913,1915,3,336,168,0,1914,1913,
  	1,0,0,0,1915,1918,1,0,0,0,1916,1914,1,0,0,0,1916,1917,1,0,0,0,1917,339,
  	1,0,0,0,1918,1916,1,0,0,0,1919,1920,3,166,83,0,1920,1921,5,18,0,0,1921,
  	1922,3,110,55,0,1922,341,1,0,0,0,1923,1928,3,340,170,0,1924,1925,5,5,
  	0,0,1925,1927,3,340,170,0,1926,1924,1,0,0,0,1927,1930,1,0,0,0,1928,1926,
  	1,0,0,0,1928,1929,1,0,0,0,1929,343,1,0,0,0,1930,1928,1,0,0,0,1931,1934,
  	3,240,120,0,1932,1934,3,332,166,0,1933,1931,1,0,0,0,1933,1932,1,0,0,0,
  	1934,1935,1,0,0,0,1935,1933,1,0,0,0,1935,1936,1,0,0,0,1936,345,1,0,0,
  	0,1937,1938,5,73,0,0,1938,1940,3,384,192,0,1939,1941,3,238,119,0,1940,
  	1939,1,0,0,0,1940,1941,1,0,0,0,1941,1944,1,0,0,0,1942,1944,3,238,119,
  	0,1943,1937,1,0,0,0,1943,1942,1,0,0,0,1944,347,1,0,0,0,1945,1947,3,198,
  	99,0,1946,1945,1,0,0,0,1947,1950,1,0,0,0,1948,1946,1,0,0,0,1948,1949,
  	1,0,0,0,1949,1951,1,0,0,0,1950,1948,1,0,0,0,1951,1952,5,60,0,0,1952,1953,
  	3,110,55,0,1953,1954,5,10,0,0,1954,1955,3,338,169,0,1955,349,1,0,0,0,
  	1956,1957,5,109,0,0,1957,1958,5,31,0,0,1958,1959,3,110,55,0,1959,1960,
  	5,11,0,0,1960,1964,5,30,0,0,1961,1963,3,348,174,0,1962,1961,1,0,0,0,1963,
  	1966,1,0,0,0,1964,1962,1,0,0,0,1964,1965,1,0,0,0,1965,1968,1,0,0,0,1966,
  	1964,1,0,0,0,1967,1969,3,88,44,0,1968,1967,1,0,0,0,1968,1969,1,0,0,0,
  	1969,1970,1,0,0,0,1970,1971,5,7,0,0,1971,351,1,0,0,0,1972,1983,5,38,0,
  	0,1973,1978,3,166,83,0,1974,1975,5,12,0,0,1975,1977,3,166,83,0,1976,1974,
  	1,0,0,0,1977,1980,1,0,0,0,1978,1976,1,0,0,0,1978,1979,1,0,0,0,1979,1984,
  	1,0,0,0,1980,1978,1,0,0,0,1981,1984,3,276,138,0,1982,1984,5,117,0,0,1983,
  	1973,1,0,0,0,1983,1981,1,0,0,0,1983,1982,1,0,0,0,1984,353,1,0,0,0,1985,
  	1986,5,111,0,0,1986,355,1,0,0,0,1987,1988,5,112,0,0,1988,1989,3,110,55,
  	0,1989,357,1,0,0,0,1990,1991,5,112,0,0,1991,1992,3,118,59,0,1992,359,
  	1,0,0,0,1993,1994,5,51,0,0,1994,361,1,0,0,0,1995,2044,3,54,27,0,1996,
  	2044,3,236,118,0,1997,2044,3,120,60,0,1998,2044,3,104,52,0,1999,2044,
  	3,368,184,0,2000,2001,5,75,0,0,2001,2002,3,154,77,0,2002,2003,5,46,0,
  	0,2003,2044,1,0,0,0,2004,2005,5,75,0,0,2005,2006,3,164,82,0,2006,2007,
  	5,46,0,0,2007,2044,1,0,0,0,2008,2009,5,75,0,0,2009,2010,3,324,162,0,2010,
  	2011,5,46,0,0,2011,2044,1,0,0,0,2012,2013,3,154,77,0,2013,2014,3,144,
  	72,0,2014,2044,1,0,0,0,2015,2016,3,164,82,0,2016,2017,3,144,72,0,2017,
  	2044,1,0,0,0,2018,2019,3,324,162,0,2019,2020,3,144,72,0,2020,2044,1,0,
  	0,0,2021,2023,7,12,0,0,2022,2024,3,366,183,0,2023,2022,1,0,0,0,2023,2024,
  	1,0,0,0,2024,2025,1,0,0,0,2025,2026,3,342,171,0,2026,2027,5,46,0,0,2027,
  	2044,1,0,0,0,2028,2029,5,91,0,0,2029,2031,5,78,0,0,2030,2032,3,366,183,
  	0,2031,2030,1,0,0,0,2031,2032,1,0,0,0,2032,2033,1,0,0,0,2033,2034,3,184,
  	92,0,2034,2035,5,46,0,0,2035,2044,1,0,0,0,2036,2038,5,91,0,0,2037,2036,
  	1,0,0,0,2037,2038,1,0,0,0,2038,2039,1,0,0,0,2039,2040,3,406,203,0,2040,
  	2041,3,184,92,0,2041,2042,5,46,0,0,2042,2044,1,0,0,0,2043,1995,1,0,0,
  	0,2043,1996,1,0,0,0,2043,1997,1,0,0,0,2043,1998,1,0,0,0,2043,1999,1,0,
  	0,0,2043,2000,1,0,0,0,2043,2004,1,0,0,0,2043,2008,1,0,0,0,2043,2012,1,
  	0,0,0,2043,2015,1,0,0,0,2043,2018,1,0,0,0,2043,2021,1,0,0,0,2043,2028,
  	1,0,0,0,2043,2037,1,0,0,0,2044,363,1,0,0,0,2045,2046,5,114,0,0,2046,2056,
  	3,36,18,0,2047,2049,3,274,137,0,2048,2047,1,0,0,0,2049,2050,1,0,0,0,2050,
  	2048,1,0,0,0,2050,2051,1,0,0,0,2051,2053,1,0,0,0,2052,2054,3,130,65,0,
  	2053,2052,1,0,0,0,2053,2054,1,0,0,0,2054,2057,1,0,0,0,2055,2057,3,130,
  	65,0,2056,2048,1,0,0,0,2056,2055,1,0,0,0,2057,365,1,0,0,0,2058,2060,3,
  	156,78,0,2059,2061,5,41,0,0,2060,2059,1,0,0,0,2060,2061,1,0,0,0,2061,
  	2064,1,0,0,0,2062,2064,3,382,191,0,2063,2058,1,0,0,0,2063,2062,1,0,0,
  	0,2064,367,1,0,0,0,2065,2066,5,115,0,0,2066,2068,3,376,188,0,2067,2069,
  	3,394,197,0,2068,2067,1,0,0,0,2068,2069,1,0,0,0,2069,2070,1,0,0,0,2070,
  	2071,5,18,0,0,2071,2072,3,366,183,0,2072,2073,5,46,0,0,2073,2077,1,0,
  	0,0,2074,2075,5,115,0,0,2075,2077,3,158,79,0,2076,2065,1,0,0,0,2076,2074,
  	1,0,0,0,2077,369,1,0,0,0,2078,2079,5,20,0,0,2079,2080,3,378,189,0,2080,
  	2081,5,19,0,0,2081,371,1,0,0,0,2082,2083,3,10,5,0,2083,2084,3,384,192,
  	0,2084,373,1,0,0,0,2085,2086,3,366,183,0,2086,2087,3,166,83,0,2087,375,
  	1,0,0,0,2088,2089,7,13,0,0,2089,377,1,0,0,0,2090,2095,3,366,183,0,2091,
  	2092,5,5,0,0,2092,2094,3,366,183,0,2093,2091,1,0,0,0,2094,2097,1,0,0,
  	0,2095,2093,1,0,0,0,2095,2096,1,0,0,0,2096,379,1,0,0,0,2097,2095,1,0,
  	0,0,2098,2101,3,376,188,0,2099,2100,5,12,0,0,2100,2102,3,376,188,0,2101,
  	2099,1,0,0,0,2101,2102,1,0,0,0,2102,381,1,0,0,0,2103,2106,5,117,0,0,2104,
  	2106,3,388,194,0,2105,2103,1,0,0,0,2105,2104,1,0,0,0,2106,383,1,0,0,0,
  	2107,2109,3,156,78,0,2108,2110,5,41,0,0,2109,2108,1,0,0,0,2109,2110,1,
  	0,0,0,2110,2113,1,0,0,0,2111,2113,3,388,194,0,2112,2107,1,0,0,0,2112,
  	2111,1,0,0,0,2113,385,1,0,0,0,2114,2119,3,384,192,0,2115,2116,5,5,0,0,
  	2116,2118,3,384,192,0,2117,2115,1,0,0,0,2118,2121,1,0,0,0,2119,2117,1,
  	0,0,0,2119,2120,1,0,0,0,2120,387,1,0,0,0,2121,2119,1,0,0,0,2122,2124,
  	3,380,190,0,2123,2125,3,370,185,0,2124,2123,1,0,0,0,2124,2125,1,0,0,0,
  	2125,2127,1,0,0,0,2126,2128,5,41,0,0,2127,2126,1,0,0,0,2127,2128,1,0,
  	0,0,2128,2134,1,0,0,0,2129,2131,5,81,0,0,2130,2132,5,41,0,0,2131,2130,
  	1,0,0,0,2131,2132,1,0,0,0,2132,2134,1,0,0,0,2133,2122,1,0,0,0,2133,2129,
  	1,0,0,0,2134,389,1,0,0,0,2135,2140,3,388,194,0,2136,2137,5,5,0,0,2137,
  	2139,3,388,194,0,2138,2136,1,0,0,0,2139,2142,1,0,0,0,2140,2138,1,0,0,
  	0,2140,2141,1,0,0,0,2141,391,1,0,0,0,2142,2140,1,0,0,0,2143,2144,3,224,
  	112,0,2144,2147,3,166,83,0,2145,2146,5,73,0,0,2146,2148,3,384,192,0,2147,
  	2145,1,0,0,0,2147,2148,1,0,0,0,2148,393,1,0,0,0,2149,2150,5,20,0,0,2150,
  	2155,3,392,196,0,2151,2152,5,5,0,0,2152,2154,3,392,196,0,2153,2151,1,
  	0,0,0,2154,2157,1,0,0,0,2155,2153,1,0,0,0,2155,2156,1,0,0,0,2156,2158,
  	1,0,0,0,2157,2155,1,0,0,0,2158,2159,5,19,0,0,2159,395,1,0,0,0,2160,2161,
  	3,196,98,0,2161,2162,3,384,192,0,2162,397,1,0,0,0,2163,2164,3,300,150,
  	0,2164,2165,3,398,199,0,2165,2178,1,0,0,0,2166,2178,3,24,12,0,2167,2178,
  	3,296,148,0,2168,2171,3,230,115,0,2169,2171,3,360,180,0,2170,2168,1,0,
  	0,0,2170,2169,1,0,0,0,2171,2172,1,0,0,0,2172,2173,5,108,0,0,2173,2178,
  	1,0,0,0,2174,2175,3,180,90,0,2175,2176,3,16,8,0,2176,2178,1,0,0,0,2177,
  	2163,1,0,0,0,2177,2166,1,0,0,0,2177,2167,1,0,0,0,2177,2170,1,0,0,0,2177,
  	2174,1,0,0,0,2178,399,1,0,0,0,2179,2180,5,29,0,0,2180,2181,3,110,55,0,
  	2181,2182,5,6,0,0,2182,2186,1,0,0,0,2183,2184,5,12,0,0,2184,2186,3,166,
  	83,0,2185,2179,1,0,0,0,2185,2183,1,0,0,0,2186,401,1,0,0,0,2187,2188,3,
  	344,172,0,2188,403,1,0,0,0,2189,2192,3,96,48,0,2190,2191,5,16,0,0,2191,
  	2193,3,344,172,0,2192,2190,1,0,0,0,2192,2193,1,0,0,0,2193,405,1,0,0,0,
  	2194,2197,5,116,0,0,2195,2197,3,366,183,0,2196,2194,1,0,0,0,2196,2195,
  	1,0,0,0,2197,407,1,0,0,0,2198,2199,5,118,0,0,2199,2200,5,31,0,0,2200,
  	2201,3,110,55,0,2201,2202,5,11,0,0,2202,2203,3,336,168,0,2203,409,1,0,
  	0,0,2204,2205,5,120,0,0,2205,2206,5,52,0,0,2206,2207,3,110,55,0,2207,
  	2208,5,46,0,0,2208,411,1,0,0,0,2209,2210,5,120,0,0,2210,2211,3,110,55,
  	0,2211,2212,5,46,0,0,2212,413,1,0,0,0,257,420,429,431,440,448,451,454,
  	461,463,474,477,490,500,505,512,523,530,538,540,549,557,559,566,574,576,
  	586,600,613,619,621,628,635,640,645,648,651,659,665,669,677,683,689,711,
  	719,725,748,750,761,768,773,783,785,790,792,797,799,803,809,815,822,827,
  	836,841,847,851,855,864,869,871,874,882,892,896,901,916,924,931,935,948,
  	952,960,966,977,986,990,1000,1004,1007,1017,1023,1030,1037,1039,1043,
  	1050,1054,1058,1061,1064,1070,1080,1083,1087,1091,1102,1109,1123,1126,
  	1131,1141,1145,1153,1157,1160,1166,1172,1176,1179,1182,1185,1190,1193,
  	1198,1207,1215,1221,1226,1229,1241,1251,1258,1268,1272,1277,1281,1286,
  	1296,1303,1309,1315,1320,1331,1339,1347,1358,1363,1369,1377,1386,1400,
  	1403,1407,1418,1433,1441,1452,1460,1464,1468,1472,1476,1480,1487,1491,
  	1500,1504,1507,1515,1531,1540,1542,1555,1559,1565,1575,1579,1606,1614,
  	1621,1630,1637,1650,1654,1663,1666,1674,1678,1686,1690,1697,1712,1720,
  	1728,1741,1752,1755,1762,1779,1791,1794,1806,1816,1822,1829,1838,1845,
  	1848,1851,1855,1860,1872,1881,1883,1891,1895,1898,1908,1916,1928,1933,
  	1935,1940,1943,1948,1964,1968,1978,1983,2023,2031,2037,2043,2050,2053,
  	2056,2060,2063,2068,2076,2095,2101,2105,2109,2112,2119,2124,2127,2131,
  	2133,2140,2147,2155,2170,2177,2185,2192,2196
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  dart2parserParserStaticData = staticData.release();
}

}

Dart2Parser::Dart2Parser(TokenStream *input) : Dart2Parser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

Dart2Parser::Dart2Parser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  Dart2Parser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *dart2parserParserStaticData->atn, dart2parserParserStaticData->decisionToDFA, dart2parserParserStaticData->sharedContextCache, options);
}

Dart2Parser::~Dart2Parser() {
  delete _interpreter;
}

const atn::ATN& Dart2Parser::getATN() const {
  return *dart2parserParserStaticData->atn;
}

std::string Dart2Parser::getGrammarFileName() const {
  return "Dart2Parser.g4";
}

const std::vector<std::string>& Dart2Parser::getRuleNames() const {
  return dart2parserParserStaticData->ruleNames;
}

const dfa::Vocabulary& Dart2Parser::getVocabulary() const {
  return dart2parserParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView Dart2Parser::getSerializedATN() const {
  return dart2parserParserStaticData->serializedATN;
}


//----------------- AdditiveExpressionContext ------------------------------------------------------------------

Dart2Parser::AdditiveExpressionContext::AdditiveExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Dart2Parser::MultiplicativeExpressionContext *> Dart2Parser::AdditiveExpressionContext::multiplicativeExpression() {
  return getRuleContexts<Dart2Parser::MultiplicativeExpressionContext>();
}

Dart2Parser::MultiplicativeExpressionContext* Dart2Parser::AdditiveExpressionContext::multiplicativeExpression(size_t i) {
  return getRuleContext<Dart2Parser::MultiplicativeExpressionContext>(i);
}

std::vector<Dart2Parser::AdditiveOperatorContext *> Dart2Parser::AdditiveExpressionContext::additiveOperator() {
  return getRuleContexts<Dart2Parser::AdditiveOperatorContext>();
}

Dart2Parser::AdditiveOperatorContext* Dart2Parser::AdditiveExpressionContext::additiveOperator(size_t i) {
  return getRuleContext<Dart2Parser::AdditiveOperatorContext>(i);
}

tree::TerminalNode* Dart2Parser::AdditiveExpressionContext::SUPER_() {
  return getToken(Dart2Parser::SUPER_, 0);
}


size_t Dart2Parser::AdditiveExpressionContext::getRuleIndex() const {
  return Dart2Parser::RuleAdditiveExpression;
}

void Dart2Parser::AdditiveExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAdditiveExpression(this);
}

void Dart2Parser::AdditiveExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAdditiveExpression(this);
}

Dart2Parser::AdditiveExpressionContext* Dart2Parser::additiveExpression() {
  AdditiveExpressionContext *_localctx = _tracker.createInstance<AdditiveExpressionContext>(_ctx, getState());
  enterRule(_localctx, 0, Dart2Parser::RuleAdditiveExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(431);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(414);
      multiplicativeExpression();
      setState(420);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 0, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(415);
          additiveOperator();
          setState(416);
          multiplicativeExpression(); 
        }
        setState(422);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 0, _ctx);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(423);
      match(Dart2Parser::SUPER_);
      setState(427); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(424);
                additiveOperator();
                setState(425);
                multiplicativeExpression();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(429); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 1, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AdditiveOperatorContext ------------------------------------------------------------------

Dart2Parser::AdditiveOperatorContext::AdditiveOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::AdditiveOperatorContext::PL() {
  return getToken(Dart2Parser::PL, 0);
}

tree::TerminalNode* Dart2Parser::AdditiveOperatorContext::MINUS() {
  return getToken(Dart2Parser::MINUS, 0);
}


size_t Dart2Parser::AdditiveOperatorContext::getRuleIndex() const {
  return Dart2Parser::RuleAdditiveOperator;
}

void Dart2Parser::AdditiveOperatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAdditiveOperator(this);
}

void Dart2Parser::AdditiveOperatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAdditiveOperator(this);
}

Dart2Parser::AdditiveOperatorContext* Dart2Parser::additiveOperator() {
  AdditiveOperatorContext *_localctx = _tracker.createInstance<AdditiveOperatorContext>(_ctx, getState());
  enterRule(_localctx, 2, Dart2Parser::RuleAdditiveOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(433);
    _la = _input->LA(1);
    if (!(_la == Dart2Parser::MINUS

    || _la == Dart2Parser::PL)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArgumentListContext ------------------------------------------------------------------

Dart2Parser::ArgumentListContext::ArgumentListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Dart2Parser::NamedArgumentContext *> Dart2Parser::ArgumentListContext::namedArgument() {
  return getRuleContexts<Dart2Parser::NamedArgumentContext>();
}

Dart2Parser::NamedArgumentContext* Dart2Parser::ArgumentListContext::namedArgument(size_t i) {
  return getRuleContext<Dart2Parser::NamedArgumentContext>(i);
}

std::vector<tree::TerminalNode *> Dart2Parser::ArgumentListContext::C() {
  return getTokens(Dart2Parser::C);
}

tree::TerminalNode* Dart2Parser::ArgumentListContext::C(size_t i) {
  return getToken(Dart2Parser::C, i);
}

Dart2Parser::ExpressionListContext* Dart2Parser::ArgumentListContext::expressionList() {
  return getRuleContext<Dart2Parser::ExpressionListContext>(0);
}


size_t Dart2Parser::ArgumentListContext::getRuleIndex() const {
  return Dart2Parser::RuleArgumentList;
}

void Dart2Parser::ArgumentListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArgumentList(this);
}

void Dart2Parser::ArgumentListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArgumentList(this);
}

Dart2Parser::ArgumentListContext* Dart2Parser::argumentList() {
  ArgumentListContext *_localctx = _tracker.createInstance<ArgumentListContext>(_ctx, getState());
  enterRule(_localctx, 4, Dart2Parser::RuleArgumentList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(451);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 5, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(435);
      namedArgument();
      setState(440);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 3, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(436);
          match(Dart2Parser::C);
          setState(437);
          namedArgument(); 
        }
        setState(442);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 3, _ctx);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(443);
      expressionList();
      setState(448);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 4, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(444);
          match(Dart2Parser::C);
          setState(445);
          namedArgument(); 
        }
        setState(450);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 4, _ctx);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArgumentPartContext ------------------------------------------------------------------

Dart2Parser::ArgumentPartContext::ArgumentPartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::ArgumentsContext* Dart2Parser::ArgumentPartContext::arguments() {
  return getRuleContext<Dart2Parser::ArgumentsContext>(0);
}

Dart2Parser::TypeArgumentsContext* Dart2Parser::ArgumentPartContext::typeArguments() {
  return getRuleContext<Dart2Parser::TypeArgumentsContext>(0);
}


size_t Dart2Parser::ArgumentPartContext::getRuleIndex() const {
  return Dart2Parser::RuleArgumentPart;
}

void Dart2Parser::ArgumentPartContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArgumentPart(this);
}

void Dart2Parser::ArgumentPartContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArgumentPart(this);
}

Dart2Parser::ArgumentPartContext* Dart2Parser::argumentPart() {
  ArgumentPartContext *_localctx = _tracker.createInstance<ArgumentPartContext>(_ctx, getState());
  enterRule(_localctx, 6, Dart2Parser::RuleArgumentPart);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(454);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Dart2Parser::LT) {
      setState(453);
      typeArguments();
    }
    setState(456);
    arguments();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArgumentsContext ------------------------------------------------------------------

Dart2Parser::ArgumentsContext::ArgumentsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::ArgumentsContext::OP() {
  return getToken(Dart2Parser::OP, 0);
}

tree::TerminalNode* Dart2Parser::ArgumentsContext::CP() {
  return getToken(Dart2Parser::CP, 0);
}

Dart2Parser::ArgumentListContext* Dart2Parser::ArgumentsContext::argumentList() {
  return getRuleContext<Dart2Parser::ArgumentListContext>(0);
}

tree::TerminalNode* Dart2Parser::ArgumentsContext::C() {
  return getToken(Dart2Parser::C, 0);
}


size_t Dart2Parser::ArgumentsContext::getRuleIndex() const {
  return Dart2Parser::RuleArguments;
}

void Dart2Parser::ArgumentsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArguments(this);
}

void Dart2Parser::ArgumentsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArguments(this);
}

Dart2Parser::ArgumentsContext* Dart2Parser::arguments() {
  ArgumentsContext *_localctx = _tracker.createInstance<ArgumentsContext>(_ctx, getState());
  enterRule(_localctx, 8, Dart2Parser::RuleArguments);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(458);
    match(Dart2Parser::OP);
    setState(463);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -8734731060839972864) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 2271484645057699477) != 0)) {
      setState(459);
      argumentList();
      setState(461);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Dart2Parser::C) {
        setState(460);
        match(Dart2Parser::C);
      }
    }
    setState(465);
    match(Dart2Parser::CP);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AsOperatorContext ------------------------------------------------------------------

Dart2Parser::AsOperatorContext::AsOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::AsOperatorContext::AS_() {
  return getToken(Dart2Parser::AS_, 0);
}


size_t Dart2Parser::AsOperatorContext::getRuleIndex() const {
  return Dart2Parser::RuleAsOperator;
}

void Dart2Parser::AsOperatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAsOperator(this);
}

void Dart2Parser::AsOperatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAsOperator(this);
}

Dart2Parser::AsOperatorContext* Dart2Parser::asOperator() {
  AsOperatorContext *_localctx = _tracker.createInstance<AsOperatorContext>(_ctx, getState());
  enterRule(_localctx, 10, Dart2Parser::RuleAsOperator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(467);
    match(Dart2Parser::AS_);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssertionContext ------------------------------------------------------------------

Dart2Parser::AssertionContext::AssertionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::AssertionContext::ASSERT_() {
  return getToken(Dart2Parser::ASSERT_, 0);
}

tree::TerminalNode* Dart2Parser::AssertionContext::OP() {
  return getToken(Dart2Parser::OP, 0);
}

std::vector<Dart2Parser::ExpressionContext *> Dart2Parser::AssertionContext::expression() {
  return getRuleContexts<Dart2Parser::ExpressionContext>();
}

Dart2Parser::ExpressionContext* Dart2Parser::AssertionContext::expression(size_t i) {
  return getRuleContext<Dart2Parser::ExpressionContext>(i);
}

tree::TerminalNode* Dart2Parser::AssertionContext::CP() {
  return getToken(Dart2Parser::CP, 0);
}

std::vector<tree::TerminalNode *> Dart2Parser::AssertionContext::C() {
  return getTokens(Dart2Parser::C);
}

tree::TerminalNode* Dart2Parser::AssertionContext::C(size_t i) {
  return getToken(Dart2Parser::C, i);
}


size_t Dart2Parser::AssertionContext::getRuleIndex() const {
  return Dart2Parser::RuleAssertion;
}

void Dart2Parser::AssertionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssertion(this);
}

void Dart2Parser::AssertionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssertion(this);
}

Dart2Parser::AssertionContext* Dart2Parser::assertion() {
  AssertionContext *_localctx = _tracker.createInstance<AssertionContext>(_ctx, getState());
  enterRule(_localctx, 12, Dart2Parser::RuleAssertion);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(469);
    match(Dart2Parser::ASSERT_);
    setState(470);
    match(Dart2Parser::OP);
    setState(471);
    expression();
    setState(474);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 9, _ctx)) {
    case 1: {
      setState(472);
      match(Dart2Parser::C);
      setState(473);
      expression();
      break;
    }

    default:
      break;
    }
    setState(477);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Dart2Parser::C) {
      setState(476);
      match(Dart2Parser::C);
    }
    setState(479);
    match(Dart2Parser::CP);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssertStatementContext ------------------------------------------------------------------

Dart2Parser::AssertStatementContext::AssertStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::AssertionContext* Dart2Parser::AssertStatementContext::assertion() {
  return getRuleContext<Dart2Parser::AssertionContext>(0);
}

tree::TerminalNode* Dart2Parser::AssertStatementContext::SC() {
  return getToken(Dart2Parser::SC, 0);
}


size_t Dart2Parser::AssertStatementContext::getRuleIndex() const {
  return Dart2Parser::RuleAssertStatement;
}

void Dart2Parser::AssertStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssertStatement(this);
}

void Dart2Parser::AssertStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssertStatement(this);
}

Dart2Parser::AssertStatementContext* Dart2Parser::assertStatement() {
  AssertStatementContext *_localctx = _tracker.createInstance<AssertStatementContext>(_ctx, getState());
  enterRule(_localctx, 14, Dart2Parser::RuleAssertStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(481);
    assertion();
    setState(482);
    match(Dart2Parser::SC);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssignableExpressionContext ------------------------------------------------------------------

Dart2Parser::AssignableExpressionContext::AssignableExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::PrimaryContext* Dart2Parser::AssignableExpressionContext::primary() {
  return getRuleContext<Dart2Parser::PrimaryContext>(0);
}

Dart2Parser::AssignableSelectorPartContext* Dart2Parser::AssignableExpressionContext::assignableSelectorPart() {
  return getRuleContext<Dart2Parser::AssignableSelectorPartContext>(0);
}

tree::TerminalNode* Dart2Parser::AssignableExpressionContext::SUPER_() {
  return getToken(Dart2Parser::SUPER_, 0);
}

Dart2Parser::UnconditionalAssignableSelectorContext* Dart2Parser::AssignableExpressionContext::unconditionalAssignableSelector() {
  return getRuleContext<Dart2Parser::UnconditionalAssignableSelectorContext>(0);
}

Dart2Parser::IdentifierContext* Dart2Parser::AssignableExpressionContext::identifier() {
  return getRuleContext<Dart2Parser::IdentifierContext>(0);
}


size_t Dart2Parser::AssignableExpressionContext::getRuleIndex() const {
  return Dart2Parser::RuleAssignableExpression;
}

void Dart2Parser::AssignableExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssignableExpression(this);
}

void Dart2Parser::AssignableExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssignableExpression(this);
}

Dart2Parser::AssignableExpressionContext* Dart2Parser::assignableExpression() {
  AssignableExpressionContext *_localctx = _tracker.createInstance<AssignableExpressionContext>(_ctx, getState());
  enterRule(_localctx, 16, Dart2Parser::RuleAssignableExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(490);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 11, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(484);
      primary();
      setState(485);
      assignableSelectorPart();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(487);
      match(Dart2Parser::SUPER_);
      setState(488);
      unconditionalAssignableSelector();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(489);
      identifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssignableSelectorContext ------------------------------------------------------------------

Dart2Parser::AssignableSelectorContext::AssignableSelectorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::UnconditionalAssignableSelectorContext* Dart2Parser::AssignableSelectorContext::unconditionalAssignableSelector() {
  return getRuleContext<Dart2Parser::UnconditionalAssignableSelectorContext>(0);
}

tree::TerminalNode* Dart2Parser::AssignableSelectorContext::QUD() {
  return getToken(Dart2Parser::QUD, 0);
}

Dart2Parser::IdentifierContext* Dart2Parser::AssignableSelectorContext::identifier() {
  return getRuleContext<Dart2Parser::IdentifierContext>(0);
}

tree::TerminalNode* Dart2Parser::AssignableSelectorContext::QU() {
  return getToken(Dart2Parser::QU, 0);
}

tree::TerminalNode* Dart2Parser::AssignableSelectorContext::OB() {
  return getToken(Dart2Parser::OB, 0);
}

Dart2Parser::ExpressionContext* Dart2Parser::AssignableSelectorContext::expression() {
  return getRuleContext<Dart2Parser::ExpressionContext>(0);
}

tree::TerminalNode* Dart2Parser::AssignableSelectorContext::CB() {
  return getToken(Dart2Parser::CB, 0);
}


size_t Dart2Parser::AssignableSelectorContext::getRuleIndex() const {
  return Dart2Parser::RuleAssignableSelector;
}

void Dart2Parser::AssignableSelectorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssignableSelector(this);
}

void Dart2Parser::AssignableSelectorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssignableSelector(this);
}

Dart2Parser::AssignableSelectorContext* Dart2Parser::assignableSelector() {
  AssignableSelectorContext *_localctx = _tracker.createInstance<AssignableSelectorContext>(_ctx, getState());
  enterRule(_localctx, 18, Dart2Parser::RuleAssignableSelector);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(500);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Dart2Parser::D:
      case Dart2Parser::OB: {
        enterOuterAlt(_localctx, 1);
        setState(492);
        unconditionalAssignableSelector();
        break;
      }

      case Dart2Parser::QUD: {
        enterOuterAlt(_localctx, 2);
        setState(493);
        match(Dart2Parser::QUD);
        setState(494);
        identifier();
        break;
      }

      case Dart2Parser::QU: {
        enterOuterAlt(_localctx, 3);
        setState(495);
        match(Dart2Parser::QU);
        setState(496);
        match(Dart2Parser::OB);
        setState(497);
        expression();
        setState(498);
        match(Dart2Parser::CB);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssignableSelectorPartContext ------------------------------------------------------------------

Dart2Parser::AssignableSelectorPartContext::AssignableSelectorPartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::AssignableSelectorContext* Dart2Parser::AssignableSelectorPartContext::assignableSelector() {
  return getRuleContext<Dart2Parser::AssignableSelectorContext>(0);
}

std::vector<Dart2Parser::SelectorContext *> Dart2Parser::AssignableSelectorPartContext::selector() {
  return getRuleContexts<Dart2Parser::SelectorContext>();
}

Dart2Parser::SelectorContext* Dart2Parser::AssignableSelectorPartContext::selector(size_t i) {
  return getRuleContext<Dart2Parser::SelectorContext>(i);
}


size_t Dart2Parser::AssignableSelectorPartContext::getRuleIndex() const {
  return Dart2Parser::RuleAssignableSelectorPart;
}

void Dart2Parser::AssignableSelectorPartContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssignableSelectorPart(this);
}

void Dart2Parser::AssignableSelectorPartContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssignableSelectorPart(this);
}

Dart2Parser::AssignableSelectorPartContext* Dart2Parser::assignableSelectorPart() {
  AssignableSelectorPartContext *_localctx = _tracker.createInstance<AssignableSelectorPartContext>(_ctx, getState());
  enterRule(_localctx, 20, Dart2Parser::RuleAssignableSelectorPart);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(505);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 13, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(502);
        selector(); 
      }
      setState(507);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 13, _ctx);
    }
    setState(508);
    assignableSelector();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssignmentOperatorContext ------------------------------------------------------------------

Dart2Parser::AssignmentOperatorContext::AssignmentOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::AssignmentOperatorContext::EQ() {
  return getToken(Dart2Parser::EQ, 0);
}

Dart2Parser::CompoundAssignmentOperatorContext* Dart2Parser::AssignmentOperatorContext::compoundAssignmentOperator() {
  return getRuleContext<Dart2Parser::CompoundAssignmentOperatorContext>(0);
}


size_t Dart2Parser::AssignmentOperatorContext::getRuleIndex() const {
  return Dart2Parser::RuleAssignmentOperator;
}

void Dart2Parser::AssignmentOperatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssignmentOperator(this);
}

void Dart2Parser::AssignmentOperatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssignmentOperator(this);
}

Dart2Parser::AssignmentOperatorContext* Dart2Parser::assignmentOperator() {
  AssignmentOperatorContext *_localctx = _tracker.createInstance<AssignmentOperatorContext>(_ctx, getState());
  enterRule(_localctx, 22, Dart2Parser::RuleAssignmentOperator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(512);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Dart2Parser::EQ: {
        enterOuterAlt(_localctx, 1);
        setState(510);
        match(Dart2Parser::EQ);
        break;
      }

      case Dart2Parser::AE:
      case Dart2Parser::CIRE:
      case Dart2Parser::GT:
      case Dart2Parser::LTLTE:
      case Dart2Parser::ME:
      case Dart2Parser::PE:
      case Dart2Parser::PLE:
      case Dart2Parser::POE:
      case Dart2Parser::QUQUEQ:
      case Dart2Parser::SE:
      case Dart2Parser::SQSE:
      case Dart2Parser::STE: {
        enterOuterAlt(_localctx, 2);
        setState(511);
        compoundAssignmentOperator();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AwaitExpressionContext ------------------------------------------------------------------

Dart2Parser::AwaitExpressionContext::AwaitExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::AwaitExpressionContext::AWAIT_() {
  return getToken(Dart2Parser::AWAIT_, 0);
}

Dart2Parser::UnaryExpressionContext* Dart2Parser::AwaitExpressionContext::unaryExpression() {
  return getRuleContext<Dart2Parser::UnaryExpressionContext>(0);
}


size_t Dart2Parser::AwaitExpressionContext::getRuleIndex() const {
  return Dart2Parser::RuleAwaitExpression;
}

void Dart2Parser::AwaitExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAwaitExpression(this);
}

void Dart2Parser::AwaitExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAwaitExpression(this);
}

Dart2Parser::AwaitExpressionContext* Dart2Parser::awaitExpression() {
  AwaitExpressionContext *_localctx = _tracker.createInstance<AwaitExpressionContext>(_ctx, getState());
  enterRule(_localctx, 24, Dart2Parser::RuleAwaitExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(514);
    match(Dart2Parser::AWAIT_);
    setState(515);
    unaryExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BinaryOperatorContext ------------------------------------------------------------------

Dart2Parser::BinaryOperatorContext::BinaryOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::MultiplicativeOperatorContext* Dart2Parser::BinaryOperatorContext::multiplicativeOperator() {
  return getRuleContext<Dart2Parser::MultiplicativeOperatorContext>(0);
}

Dart2Parser::AdditiveOperatorContext* Dart2Parser::BinaryOperatorContext::additiveOperator() {
  return getRuleContext<Dart2Parser::AdditiveOperatorContext>(0);
}

Dart2Parser::ShiftOperatorContext* Dart2Parser::BinaryOperatorContext::shiftOperator() {
  return getRuleContext<Dart2Parser::ShiftOperatorContext>(0);
}

Dart2Parser::RelationalOperatorContext* Dart2Parser::BinaryOperatorContext::relationalOperator() {
  return getRuleContext<Dart2Parser::RelationalOperatorContext>(0);
}

tree::TerminalNode* Dart2Parser::BinaryOperatorContext::EE() {
  return getToken(Dart2Parser::EE, 0);
}

Dart2Parser::BitwiseOperatorContext* Dart2Parser::BinaryOperatorContext::bitwiseOperator() {
  return getRuleContext<Dart2Parser::BitwiseOperatorContext>(0);
}


size_t Dart2Parser::BinaryOperatorContext::getRuleIndex() const {
  return Dart2Parser::RuleBinaryOperator;
}

void Dart2Parser::BinaryOperatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBinaryOperator(this);
}

void Dart2Parser::BinaryOperatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBinaryOperator(this);
}

Dart2Parser::BinaryOperatorContext* Dart2Parser::binaryOperator() {
  BinaryOperatorContext *_localctx = _tracker.createInstance<BinaryOperatorContext>(_ctx, getState());
  enterRule(_localctx, 26, Dart2Parser::RuleBinaryOperator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(523);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 15, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(517);
      multiplicativeOperator();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(518);
      additiveOperator();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(519);
      shiftOperator();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(520);
      relationalOperator();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(521);
      match(Dart2Parser::EE);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(522);
      bitwiseOperator();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BitwiseAndExpressionContext ------------------------------------------------------------------

Dart2Parser::BitwiseAndExpressionContext::BitwiseAndExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Dart2Parser::ShiftExpressionContext *> Dart2Parser::BitwiseAndExpressionContext::shiftExpression() {
  return getRuleContexts<Dart2Parser::ShiftExpressionContext>();
}

Dart2Parser::ShiftExpressionContext* Dart2Parser::BitwiseAndExpressionContext::shiftExpression(size_t i) {
  return getRuleContext<Dart2Parser::ShiftExpressionContext>(i);
}

std::vector<tree::TerminalNode *> Dart2Parser::BitwiseAndExpressionContext::A() {
  return getTokens(Dart2Parser::A);
}

tree::TerminalNode* Dart2Parser::BitwiseAndExpressionContext::A(size_t i) {
  return getToken(Dart2Parser::A, i);
}

tree::TerminalNode* Dart2Parser::BitwiseAndExpressionContext::SUPER_() {
  return getToken(Dart2Parser::SUPER_, 0);
}


size_t Dart2Parser::BitwiseAndExpressionContext::getRuleIndex() const {
  return Dart2Parser::RuleBitwiseAndExpression;
}

void Dart2Parser::BitwiseAndExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBitwiseAndExpression(this);
}

void Dart2Parser::BitwiseAndExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBitwiseAndExpression(this);
}

Dart2Parser::BitwiseAndExpressionContext* Dart2Parser::bitwiseAndExpression() {
  BitwiseAndExpressionContext *_localctx = _tracker.createInstance<BitwiseAndExpressionContext>(_ctx, getState());
  enterRule(_localctx, 28, Dart2Parser::RuleBitwiseAndExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(540);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 18, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(525);
      shiftExpression();
      setState(530);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 16, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(526);
          match(Dart2Parser::A);
          setState(527);
          shiftExpression(); 
        }
        setState(532);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 16, _ctx);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(533);
      match(Dart2Parser::SUPER_);
      setState(536); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(534);
                match(Dart2Parser::A);
                setState(535);
                shiftExpression();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(538); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 17, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BitwiseOperatorContext ------------------------------------------------------------------

Dart2Parser::BitwiseOperatorContext::BitwiseOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::BitwiseOperatorContext::A() {
  return getToken(Dart2Parser::A, 0);
}

tree::TerminalNode* Dart2Parser::BitwiseOperatorContext::CIR() {
  return getToken(Dart2Parser::CIR, 0);
}

tree::TerminalNode* Dart2Parser::BitwiseOperatorContext::P() {
  return getToken(Dart2Parser::P, 0);
}


size_t Dart2Parser::BitwiseOperatorContext::getRuleIndex() const {
  return Dart2Parser::RuleBitwiseOperator;
}

void Dart2Parser::BitwiseOperatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBitwiseOperator(this);
}

void Dart2Parser::BitwiseOperatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBitwiseOperator(this);
}

Dart2Parser::BitwiseOperatorContext* Dart2Parser::bitwiseOperator() {
  BitwiseOperatorContext *_localctx = _tracker.createInstance<BitwiseOperatorContext>(_ctx, getState());
  enterRule(_localctx, 30, Dart2Parser::RuleBitwiseOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(542);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 4294967554) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BitwiseOrExpressionContext ------------------------------------------------------------------

Dart2Parser::BitwiseOrExpressionContext::BitwiseOrExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Dart2Parser::BitwiseXorExpressionContext *> Dart2Parser::BitwiseOrExpressionContext::bitwiseXorExpression() {
  return getRuleContexts<Dart2Parser::BitwiseXorExpressionContext>();
}

Dart2Parser::BitwiseXorExpressionContext* Dart2Parser::BitwiseOrExpressionContext::bitwiseXorExpression(size_t i) {
  return getRuleContext<Dart2Parser::BitwiseXorExpressionContext>(i);
}

std::vector<tree::TerminalNode *> Dart2Parser::BitwiseOrExpressionContext::P() {
  return getTokens(Dart2Parser::P);
}

tree::TerminalNode* Dart2Parser::BitwiseOrExpressionContext::P(size_t i) {
  return getToken(Dart2Parser::P, i);
}

tree::TerminalNode* Dart2Parser::BitwiseOrExpressionContext::SUPER_() {
  return getToken(Dart2Parser::SUPER_, 0);
}


size_t Dart2Parser::BitwiseOrExpressionContext::getRuleIndex() const {
  return Dart2Parser::RuleBitwiseOrExpression;
}

void Dart2Parser::BitwiseOrExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBitwiseOrExpression(this);
}

void Dart2Parser::BitwiseOrExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBitwiseOrExpression(this);
}

Dart2Parser::BitwiseOrExpressionContext* Dart2Parser::bitwiseOrExpression() {
  BitwiseOrExpressionContext *_localctx = _tracker.createInstance<BitwiseOrExpressionContext>(_ctx, getState());
  enterRule(_localctx, 32, Dart2Parser::RuleBitwiseOrExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(559);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 21, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(544);
      bitwiseXorExpression();
      setState(549);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 19, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(545);
          match(Dart2Parser::P);
          setState(546);
          bitwiseXorExpression(); 
        }
        setState(551);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 19, _ctx);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(552);
      match(Dart2Parser::SUPER_);
      setState(555); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(553);
                match(Dart2Parser::P);
                setState(554);
                bitwiseXorExpression();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(557); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 20, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BitwiseXorExpressionContext ------------------------------------------------------------------

Dart2Parser::BitwiseXorExpressionContext::BitwiseXorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Dart2Parser::BitwiseAndExpressionContext *> Dart2Parser::BitwiseXorExpressionContext::bitwiseAndExpression() {
  return getRuleContexts<Dart2Parser::BitwiseAndExpressionContext>();
}

Dart2Parser::BitwiseAndExpressionContext* Dart2Parser::BitwiseXorExpressionContext::bitwiseAndExpression(size_t i) {
  return getRuleContext<Dart2Parser::BitwiseAndExpressionContext>(i);
}

std::vector<tree::TerminalNode *> Dart2Parser::BitwiseXorExpressionContext::CIR() {
  return getTokens(Dart2Parser::CIR);
}

tree::TerminalNode* Dart2Parser::BitwiseXorExpressionContext::CIR(size_t i) {
  return getToken(Dart2Parser::CIR, i);
}

tree::TerminalNode* Dart2Parser::BitwiseXorExpressionContext::SUPER_() {
  return getToken(Dart2Parser::SUPER_, 0);
}


size_t Dart2Parser::BitwiseXorExpressionContext::getRuleIndex() const {
  return Dart2Parser::RuleBitwiseXorExpression;
}

void Dart2Parser::BitwiseXorExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBitwiseXorExpression(this);
}

void Dart2Parser::BitwiseXorExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBitwiseXorExpression(this);
}

Dart2Parser::BitwiseXorExpressionContext* Dart2Parser::bitwiseXorExpression() {
  BitwiseXorExpressionContext *_localctx = _tracker.createInstance<BitwiseXorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 34, Dart2Parser::RuleBitwiseXorExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(576);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 24, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(561);
      bitwiseAndExpression();
      setState(566);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 22, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(562);
          match(Dart2Parser::CIR);
          setState(563);
          bitwiseAndExpression(); 
        }
        setState(568);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 22, _ctx);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(569);
      match(Dart2Parser::SUPER_);
      setState(572); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(570);
                match(Dart2Parser::CIR);
                setState(571);
                bitwiseAndExpression();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(574); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 23, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlockContext ------------------------------------------------------------------

Dart2Parser::BlockContext::BlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::BlockContext::OBC() {
  return getToken(Dart2Parser::OBC, 0);
}

Dart2Parser::StatementsContext* Dart2Parser::BlockContext::statements() {
  return getRuleContext<Dart2Parser::StatementsContext>(0);
}

tree::TerminalNode* Dart2Parser::BlockContext::CBC() {
  return getToken(Dart2Parser::CBC, 0);
}


size_t Dart2Parser::BlockContext::getRuleIndex() const {
  return Dart2Parser::RuleBlock;
}

void Dart2Parser::BlockContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBlock(this);
}

void Dart2Parser::BlockContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBlock(this);
}

Dart2Parser::BlockContext* Dart2Parser::block() {
  BlockContext *_localctx = _tracker.createInstance<BlockContext>(_ctx, getState());
  enterRule(_localctx, 36, Dart2Parser::RuleBlock);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(578);
    match(Dart2Parser::OBC);
    setState(579);
    statements();
    setState(580);
    match(Dart2Parser::CBC);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BooleanLiteralContext ------------------------------------------------------------------

Dart2Parser::BooleanLiteralContext::BooleanLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::BooleanLiteralContext::TRUE_() {
  return getToken(Dart2Parser::TRUE_, 0);
}

tree::TerminalNode* Dart2Parser::BooleanLiteralContext::FALSE_() {
  return getToken(Dart2Parser::FALSE_, 0);
}


size_t Dart2Parser::BooleanLiteralContext::getRuleIndex() const {
  return Dart2Parser::RuleBooleanLiteral;
}

void Dart2Parser::BooleanLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBooleanLiteral(this);
}

void Dart2Parser::BooleanLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBooleanLiteral(this);
}

Dart2Parser::BooleanLiteralContext* Dart2Parser::booleanLiteral() {
  BooleanLiteralContext *_localctx = _tracker.createInstance<BooleanLiteralContext>(_ctx, getState());
  enterRule(_localctx, 38, Dart2Parser::RuleBooleanLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(582);
    _la = _input->LA(1);
    if (!(_la == Dart2Parser::FALSE_

    || _la == Dart2Parser::TRUE_)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BreakStatementContext ------------------------------------------------------------------

Dart2Parser::BreakStatementContext::BreakStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::BreakStatementContext::BREAK_() {
  return getToken(Dart2Parser::BREAK_, 0);
}

tree::TerminalNode* Dart2Parser::BreakStatementContext::SC() {
  return getToken(Dart2Parser::SC, 0);
}

Dart2Parser::IdentifierContext* Dart2Parser::BreakStatementContext::identifier() {
  return getRuleContext<Dart2Parser::IdentifierContext>(0);
}


size_t Dart2Parser::BreakStatementContext::getRuleIndex() const {
  return Dart2Parser::RuleBreakStatement;
}

void Dart2Parser::BreakStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBreakStatement(this);
}

void Dart2Parser::BreakStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBreakStatement(this);
}

Dart2Parser::BreakStatementContext* Dart2Parser::breakStatement() {
  BreakStatementContext *_localctx = _tracker.createInstance<BreakStatementContext>(_ctx, getState());
  enterRule(_localctx, 40, Dart2Parser::RuleBreakStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(584);
    match(Dart2Parser::BREAK_);
    setState(586);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 486388759756013568) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 1190119350744059541) != 0)) {
      setState(585);
      identifier();
    }
    setState(588);
    match(Dart2Parser::SC);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CascadeContext ------------------------------------------------------------------

Dart2Parser::CascadeContext::CascadeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::ConditionalExpressionContext* Dart2Parser::CascadeContext::conditionalExpression() {
  return getRuleContext<Dart2Parser::ConditionalExpressionContext>(0);
}

Dart2Parser::CascadeSectionContext* Dart2Parser::CascadeContext::cascadeSection() {
  return getRuleContext<Dart2Parser::CascadeSectionContext>(0);
}

tree::TerminalNode* Dart2Parser::CascadeContext::QUDD() {
  return getToken(Dart2Parser::QUDD, 0);
}

tree::TerminalNode* Dart2Parser::CascadeContext::DD() {
  return getToken(Dart2Parser::DD, 0);
}

Dart2Parser::CascadeContext* Dart2Parser::CascadeContext::cascade() {
  return getRuleContext<Dart2Parser::CascadeContext>(0);
}


size_t Dart2Parser::CascadeContext::getRuleIndex() const {
  return Dart2Parser::RuleCascade;
}

void Dart2Parser::CascadeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCascade(this);
}

void Dart2Parser::CascadeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCascade(this);
}


Dart2Parser::CascadeContext* Dart2Parser::cascade() {
   return cascade(0);
}

Dart2Parser::CascadeContext* Dart2Parser::cascade(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  Dart2Parser::CascadeContext *_localctx = _tracker.createInstance<CascadeContext>(_ctx, parentState);
  Dart2Parser::CascadeContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 42;
  enterRecursionRule(_localctx, 42, Dart2Parser::RuleCascade, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(591);
    conditionalExpression();
    setState(592);
    _la = _input->LA(1);
    if (!(_la == Dart2Parser::DD

    || _la == Dart2Parser::QUDD)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(593);
    cascadeSection();
    _ctx->stop = _input->LT(-1);
    setState(600);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 26, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<CascadeContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleCascade);
        setState(595);

        if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
        setState(596);
        match(Dart2Parser::DD);
        setState(597);
        cascadeSection(); 
      }
      setState(602);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 26, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- CascadeAssignmentContext ------------------------------------------------------------------

Dart2Parser::CascadeAssignmentContext::CascadeAssignmentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::AssignmentOperatorContext* Dart2Parser::CascadeAssignmentContext::assignmentOperator() {
  return getRuleContext<Dart2Parser::AssignmentOperatorContext>(0);
}

Dart2Parser::ExpressionWithoutCascadeContext* Dart2Parser::CascadeAssignmentContext::expressionWithoutCascade() {
  return getRuleContext<Dart2Parser::ExpressionWithoutCascadeContext>(0);
}


size_t Dart2Parser::CascadeAssignmentContext::getRuleIndex() const {
  return Dart2Parser::RuleCascadeAssignment;
}

void Dart2Parser::CascadeAssignmentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCascadeAssignment(this);
}

void Dart2Parser::CascadeAssignmentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCascadeAssignment(this);
}

Dart2Parser::CascadeAssignmentContext* Dart2Parser::cascadeAssignment() {
  CascadeAssignmentContext *_localctx = _tracker.createInstance<CascadeAssignmentContext>(_ctx, getState());
  enterRule(_localctx, 44, Dart2Parser::RuleCascadeAssignment);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(603);
    assignmentOperator();
    setState(604);
    expressionWithoutCascade();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CascadeSectionContext ------------------------------------------------------------------

Dart2Parser::CascadeSectionContext::CascadeSectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::CascadeSelectorContext* Dart2Parser::CascadeSectionContext::cascadeSelector() {
  return getRuleContext<Dart2Parser::CascadeSelectorContext>(0);
}

Dart2Parser::CascadeSectionTailContext* Dart2Parser::CascadeSectionContext::cascadeSectionTail() {
  return getRuleContext<Dart2Parser::CascadeSectionTailContext>(0);
}


size_t Dart2Parser::CascadeSectionContext::getRuleIndex() const {
  return Dart2Parser::RuleCascadeSection;
}

void Dart2Parser::CascadeSectionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCascadeSection(this);
}

void Dart2Parser::CascadeSectionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCascadeSection(this);
}

Dart2Parser::CascadeSectionContext* Dart2Parser::cascadeSection() {
  CascadeSectionContext *_localctx = _tracker.createInstance<CascadeSectionContext>(_ctx, getState());
  enterRule(_localctx, 46, Dart2Parser::RuleCascadeSection);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(606);
    cascadeSelector();
    setState(607);
    cascadeSectionTail();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CascadeSectionTailContext ------------------------------------------------------------------

Dart2Parser::CascadeSectionTailContext::CascadeSectionTailContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::CascadeAssignmentContext* Dart2Parser::CascadeSectionTailContext::cascadeAssignment() {
  return getRuleContext<Dart2Parser::CascadeAssignmentContext>(0);
}

std::vector<Dart2Parser::SelectorContext *> Dart2Parser::CascadeSectionTailContext::selector() {
  return getRuleContexts<Dart2Parser::SelectorContext>();
}

Dart2Parser::SelectorContext* Dart2Parser::CascadeSectionTailContext::selector(size_t i) {
  return getRuleContext<Dart2Parser::SelectorContext>(i);
}

Dart2Parser::AssignableSelectorContext* Dart2Parser::CascadeSectionTailContext::assignableSelector() {
  return getRuleContext<Dart2Parser::AssignableSelectorContext>(0);
}


size_t Dart2Parser::CascadeSectionTailContext::getRuleIndex() const {
  return Dart2Parser::RuleCascadeSectionTail;
}

void Dart2Parser::CascadeSectionTailContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCascadeSectionTail(this);
}

void Dart2Parser::CascadeSectionTailContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCascadeSectionTail(this);
}

Dart2Parser::CascadeSectionTailContext* Dart2Parser::cascadeSectionTail() {
  CascadeSectionTailContext *_localctx = _tracker.createInstance<CascadeSectionTailContext>(_ctx, getState());
  enterRule(_localctx, 48, Dart2Parser::RuleCascadeSectionTail);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(621);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 29, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(609);
      cascadeAssignment();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(613);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 27, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(610);
          selector(); 
        }
        setState(615);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 27, _ctx);
      }
      setState(619);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 28, _ctx)) {
      case 1: {
        setState(616);
        assignableSelector();
        setState(617);
        cascadeAssignment();
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CascadeSelectorContext ------------------------------------------------------------------

Dart2Parser::CascadeSelectorContext::CascadeSelectorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::CascadeSelectorContext::OB() {
  return getToken(Dart2Parser::OB, 0);
}

Dart2Parser::ExpressionContext* Dart2Parser::CascadeSelectorContext::expression() {
  return getRuleContext<Dart2Parser::ExpressionContext>(0);
}

tree::TerminalNode* Dart2Parser::CascadeSelectorContext::CB() {
  return getToken(Dart2Parser::CB, 0);
}

Dart2Parser::IdentifierContext* Dart2Parser::CascadeSelectorContext::identifier() {
  return getRuleContext<Dart2Parser::IdentifierContext>(0);
}


size_t Dart2Parser::CascadeSelectorContext::getRuleIndex() const {
  return Dart2Parser::RuleCascadeSelector;
}

void Dart2Parser::CascadeSelectorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCascadeSelector(this);
}

void Dart2Parser::CascadeSelectorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCascadeSelector(this);
}

Dart2Parser::CascadeSelectorContext* Dart2Parser::cascadeSelector() {
  CascadeSelectorContext *_localctx = _tracker.createInstance<CascadeSelectorContext>(_ctx, getState());
  enterRule(_localctx, 50, Dart2Parser::RuleCascadeSelector);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(628);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Dart2Parser::OB: {
        enterOuterAlt(_localctx, 1);
        setState(623);
        match(Dart2Parser::OB);
        setState(624);
        expression();
        setState(625);
        match(Dart2Parser::CB);
        break;
      }

      case Dart2Parser::ABSTRACT_:
      case Dart2Parser::AS_:
      case Dart2Parser::ASYNC_:
      case Dart2Parser::AWAIT_:
      case Dart2Parser::COVARIANT_:
      case Dart2Parser::DEFERRED_:
      case Dart2Parser::DYNAMIC_:
      case Dart2Parser::EXPORT_:
      case Dart2Parser::EXTENSION_:
      case Dart2Parser::EXTERNAL_:
      case Dart2Parser::FACTORY_:
      case Dart2Parser::FUNCTION_:
      case Dart2Parser::GET_:
      case Dart2Parser::HIDE_:
      case Dart2Parser::IMPLEMENTS_:
      case Dart2Parser::IMPORT_:
      case Dart2Parser::INTERFACE_:
      case Dart2Parser::LATE_:
      case Dart2Parser::LIBRARY_:
      case Dart2Parser::MIXIN_:
      case Dart2Parser::NATIVE_:
      case Dart2Parser::OF_:
      case Dart2Parser::ON_:
      case Dart2Parser::OPERATOR_:
      case Dart2Parser::PART_:
      case Dart2Parser::REQUIRED_:
      case Dart2Parser::SET_:
      case Dart2Parser::SHOW_:
      case Dart2Parser::STATIC_:
      case Dart2Parser::SYNC_:
      case Dart2Parser::TYPEDEF_:
      case Dart2Parser::YIELD_:
      case Dart2Parser::IDENTIFIER: {
        enterOuterAlt(_localctx, 2);
        setState(627);
        identifier();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CatchPartContext ------------------------------------------------------------------

Dart2Parser::CatchPartContext::CatchPartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::CatchPartContext::CATCH_() {
  return getToken(Dart2Parser::CATCH_, 0);
}

tree::TerminalNode* Dart2Parser::CatchPartContext::OP() {
  return getToken(Dart2Parser::OP, 0);
}

std::vector<Dart2Parser::IdentifierContext *> Dart2Parser::CatchPartContext::identifier() {
  return getRuleContexts<Dart2Parser::IdentifierContext>();
}

Dart2Parser::IdentifierContext* Dart2Parser::CatchPartContext::identifier(size_t i) {
  return getRuleContext<Dart2Parser::IdentifierContext>(i);
}

tree::TerminalNode* Dart2Parser::CatchPartContext::CP() {
  return getToken(Dart2Parser::CP, 0);
}

tree::TerminalNode* Dart2Parser::CatchPartContext::C() {
  return getToken(Dart2Parser::C, 0);
}


size_t Dart2Parser::CatchPartContext::getRuleIndex() const {
  return Dart2Parser::RuleCatchPart;
}

void Dart2Parser::CatchPartContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCatchPart(this);
}

void Dart2Parser::CatchPartContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCatchPart(this);
}

Dart2Parser::CatchPartContext* Dart2Parser::catchPart() {
  CatchPartContext *_localctx = _tracker.createInstance<CatchPartContext>(_ctx, getState());
  enterRule(_localctx, 52, Dart2Parser::RuleCatchPart);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(630);
    match(Dart2Parser::CATCH_);
    setState(631);
    match(Dart2Parser::OP);
    setState(632);
    identifier();
    setState(635);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Dart2Parser::C) {
      setState(633);
      match(Dart2Parser::C);
      setState(634);
      identifier();
    }
    setState(637);
    match(Dart2Parser::CP);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassDeclarationContext ------------------------------------------------------------------

Dart2Parser::ClassDeclarationContext::ClassDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::ClassDeclarationContext::CLASS_() {
  return getToken(Dart2Parser::CLASS_, 0);
}

Dart2Parser::TypeIdentifierContext* Dart2Parser::ClassDeclarationContext::typeIdentifier() {
  return getRuleContext<Dart2Parser::TypeIdentifierContext>(0);
}

tree::TerminalNode* Dart2Parser::ClassDeclarationContext::OBC() {
  return getToken(Dart2Parser::OBC, 0);
}

tree::TerminalNode* Dart2Parser::ClassDeclarationContext::CBC() {
  return getToken(Dart2Parser::CBC, 0);
}

tree::TerminalNode* Dart2Parser::ClassDeclarationContext::ABSTRACT_() {
  return getToken(Dart2Parser::ABSTRACT_, 0);
}

Dart2Parser::TypeParametersContext* Dart2Parser::ClassDeclarationContext::typeParameters() {
  return getRuleContext<Dart2Parser::TypeParametersContext>(0);
}

Dart2Parser::SuperclassContext* Dart2Parser::ClassDeclarationContext::superclass() {
  return getRuleContext<Dart2Parser::SuperclassContext>(0);
}

Dart2Parser::InterfacesContext* Dart2Parser::ClassDeclarationContext::interfaces() {
  return getRuleContext<Dart2Parser::InterfacesContext>(0);
}

std::vector<Dart2Parser::MetadataContext *> Dart2Parser::ClassDeclarationContext::metadata() {
  return getRuleContexts<Dart2Parser::MetadataContext>();
}

Dart2Parser::MetadataContext* Dart2Parser::ClassDeclarationContext::metadata(size_t i) {
  return getRuleContext<Dart2Parser::MetadataContext>(i);
}

std::vector<Dart2Parser::ClassMemberDeclarationContext *> Dart2Parser::ClassDeclarationContext::classMemberDeclaration() {
  return getRuleContexts<Dart2Parser::ClassMemberDeclarationContext>();
}

Dart2Parser::ClassMemberDeclarationContext* Dart2Parser::ClassDeclarationContext::classMemberDeclaration(size_t i) {
  return getRuleContext<Dart2Parser::ClassMemberDeclarationContext>(i);
}

Dart2Parser::MixinApplicationClassContext* Dart2Parser::ClassDeclarationContext::mixinApplicationClass() {
  return getRuleContext<Dart2Parser::MixinApplicationClassContext>(0);
}


size_t Dart2Parser::ClassDeclarationContext::getRuleIndex() const {
  return Dart2Parser::RuleClassDeclaration;
}

void Dart2Parser::ClassDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassDeclaration(this);
}

void Dart2Parser::ClassDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassDeclaration(this);
}

Dart2Parser::ClassDeclarationContext* Dart2Parser::classDeclaration() {
  ClassDeclarationContext *_localctx = _tracker.createInstance<ClassDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 54, Dart2Parser::RuleClassDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(669);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 38, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(640);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Dart2Parser::ABSTRACT_) {
        setState(639);
        match(Dart2Parser::ABSTRACT_);
      }
      setState(642);
      match(Dart2Parser::CLASS_);
      setState(643);
      typeIdentifier();
      setState(645);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Dart2Parser::LT) {
        setState(644);
        typeParameters();
      }
      setState(648);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Dart2Parser::EXTENDS_

      || _la == Dart2Parser::WITH_) {
        setState(647);
        superclass();
      }
      setState(651);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Dart2Parser::IMPLEMENTS_) {
        setState(650);
        interfaces();
      }
      setState(653);
      match(Dart2Parser::OBC);
      setState(659);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -8736983277098762224) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 65)) & 1196874750185123477) != 0)) {
        setState(654);
        metadata();
        setState(655);
        classMemberDeclaration();
        setState(661);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(662);
      match(Dart2Parser::CBC);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(665);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Dart2Parser::ABSTRACT_) {
        setState(664);
        match(Dart2Parser::ABSTRACT_);
      }
      setState(667);
      match(Dart2Parser::CLASS_);
      setState(668);
      mixinApplicationClass();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassMemberDeclarationContext ------------------------------------------------------------------

Dart2Parser::ClassMemberDeclarationContext::ClassMemberDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::DeclarationContext* Dart2Parser::ClassMemberDeclarationContext::declaration() {
  return getRuleContext<Dart2Parser::DeclarationContext>(0);
}

tree::TerminalNode* Dart2Parser::ClassMemberDeclarationContext::SC() {
  return getToken(Dart2Parser::SC, 0);
}

Dart2Parser::MethodSignatureContext* Dart2Parser::ClassMemberDeclarationContext::methodSignature() {
  return getRuleContext<Dart2Parser::MethodSignatureContext>(0);
}

Dart2Parser::FunctionBodyContext* Dart2Parser::ClassMemberDeclarationContext::functionBody() {
  return getRuleContext<Dart2Parser::FunctionBodyContext>(0);
}


size_t Dart2Parser::ClassMemberDeclarationContext::getRuleIndex() const {
  return Dart2Parser::RuleClassMemberDeclaration;
}

void Dart2Parser::ClassMemberDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassMemberDeclaration(this);
}

void Dart2Parser::ClassMemberDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassMemberDeclaration(this);
}

Dart2Parser::ClassMemberDeclarationContext* Dart2Parser::classMemberDeclaration() {
  ClassMemberDeclarationContext *_localctx = _tracker.createInstance<ClassMemberDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 56, Dart2Parser::RuleClassMemberDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(677);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 39, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(671);
      declaration();
      setState(672);
      match(Dart2Parser::SC);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(674);
      methodSignature();
      setState(675);
      functionBody();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CombinatorContext ------------------------------------------------------------------

Dart2Parser::CombinatorContext::CombinatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::CombinatorContext::SHOW_() {
  return getToken(Dart2Parser::SHOW_, 0);
}

Dart2Parser::IdentifierListContext* Dart2Parser::CombinatorContext::identifierList() {
  return getRuleContext<Dart2Parser::IdentifierListContext>(0);
}

tree::TerminalNode* Dart2Parser::CombinatorContext::HIDE_() {
  return getToken(Dart2Parser::HIDE_, 0);
}


size_t Dart2Parser::CombinatorContext::getRuleIndex() const {
  return Dart2Parser::RuleCombinator;
}

void Dart2Parser::CombinatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCombinator(this);
}

void Dart2Parser::CombinatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCombinator(this);
}

Dart2Parser::CombinatorContext* Dart2Parser::combinator() {
  CombinatorContext *_localctx = _tracker.createInstance<CombinatorContext>(_ctx, getState());
  enterRule(_localctx, 58, Dart2Parser::RuleCombinator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(683);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Dart2Parser::SHOW_: {
        enterOuterAlt(_localctx, 1);
        setState(679);
        match(Dart2Parser::SHOW_);
        setState(680);
        identifierList();
        break;
      }

      case Dart2Parser::HIDE_: {
        enterOuterAlt(_localctx, 2);
        setState(681);
        match(Dart2Parser::HIDE_);
        setState(682);
        identifierList();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CompilationUnitContext ------------------------------------------------------------------

Dart2Parser::CompilationUnitContext::CompilationUnitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::CompilationUnitContext::EOF() {
  return getToken(Dart2Parser::EOF, 0);
}

Dart2Parser::LibraryDeclarationContext* Dart2Parser::CompilationUnitContext::libraryDeclaration() {
  return getRuleContext<Dart2Parser::LibraryDeclarationContext>(0);
}

Dart2Parser::PartDeclarationContext* Dart2Parser::CompilationUnitContext::partDeclaration() {
  return getRuleContext<Dart2Parser::PartDeclarationContext>(0);
}

Dart2Parser::ExpressionContext* Dart2Parser::CompilationUnitContext::expression() {
  return getRuleContext<Dart2Parser::ExpressionContext>(0);
}

Dart2Parser::StatementContext* Dart2Parser::CompilationUnitContext::statement() {
  return getRuleContext<Dart2Parser::StatementContext>(0);
}


size_t Dart2Parser::CompilationUnitContext::getRuleIndex() const {
  return Dart2Parser::RuleCompilationUnit;
}

void Dart2Parser::CompilationUnitContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCompilationUnit(this);
}

void Dart2Parser::CompilationUnitContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCompilationUnit(this);
}

Dart2Parser::CompilationUnitContext* Dart2Parser::compilationUnit() {
  CompilationUnitContext *_localctx = _tracker.createInstance<CompilationUnitContext>(_ctx, getState());
  enterRule(_localctx, 60, Dart2Parser::RuleCompilationUnit);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(689);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 41, _ctx)) {
    case 1: {
      setState(685);
      libraryDeclaration();
      break;
    }

    case 2: {
      setState(686);
      partDeclaration();
      break;
    }

    case 3: {
      setState(687);
      expression();
      break;
    }

    case 4: {
      setState(688);
      statement();
      break;
    }

    default:
      break;
    }
    setState(691);
    match(Dart2Parser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CompoundAssignmentOperatorContext ------------------------------------------------------------------

Dart2Parser::CompoundAssignmentOperatorContext::CompoundAssignmentOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::CompoundAssignmentOperatorContext::STE() {
  return getToken(Dart2Parser::STE, 0);
}

tree::TerminalNode* Dart2Parser::CompoundAssignmentOperatorContext::SE() {
  return getToken(Dart2Parser::SE, 0);
}

tree::TerminalNode* Dart2Parser::CompoundAssignmentOperatorContext::SQSE() {
  return getToken(Dart2Parser::SQSE, 0);
}

tree::TerminalNode* Dart2Parser::CompoundAssignmentOperatorContext::PE() {
  return getToken(Dart2Parser::PE, 0);
}

tree::TerminalNode* Dart2Parser::CompoundAssignmentOperatorContext::PLE() {
  return getToken(Dart2Parser::PLE, 0);
}

tree::TerminalNode* Dart2Parser::CompoundAssignmentOperatorContext::ME() {
  return getToken(Dart2Parser::ME, 0);
}

tree::TerminalNode* Dart2Parser::CompoundAssignmentOperatorContext::LTLTE() {
  return getToken(Dart2Parser::LTLTE, 0);
}

std::vector<tree::TerminalNode *> Dart2Parser::CompoundAssignmentOperatorContext::GT() {
  return getTokens(Dart2Parser::GT);
}

tree::TerminalNode* Dart2Parser::CompoundAssignmentOperatorContext::GT(size_t i) {
  return getToken(Dart2Parser::GT, i);
}

tree::TerminalNode* Dart2Parser::CompoundAssignmentOperatorContext::EQ() {
  return getToken(Dart2Parser::EQ, 0);
}

tree::TerminalNode* Dart2Parser::CompoundAssignmentOperatorContext::AE() {
  return getToken(Dart2Parser::AE, 0);
}

tree::TerminalNode* Dart2Parser::CompoundAssignmentOperatorContext::CIRE() {
  return getToken(Dart2Parser::CIRE, 0);
}

tree::TerminalNode* Dart2Parser::CompoundAssignmentOperatorContext::POE() {
  return getToken(Dart2Parser::POE, 0);
}

tree::TerminalNode* Dart2Parser::CompoundAssignmentOperatorContext::QUQUEQ() {
  return getToken(Dart2Parser::QUQUEQ, 0);
}


size_t Dart2Parser::CompoundAssignmentOperatorContext::getRuleIndex() const {
  return Dart2Parser::RuleCompoundAssignmentOperator;
}

void Dart2Parser::CompoundAssignmentOperatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCompoundAssignmentOperator(this);
}

void Dart2Parser::CompoundAssignmentOperatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCompoundAssignmentOperator(this);
}

Dart2Parser::CompoundAssignmentOperatorContext* Dart2Parser::compoundAssignmentOperator() {
  CompoundAssignmentOperatorContext *_localctx = _tracker.createInstance<CompoundAssignmentOperatorContext>(_ctx, getState());
  enterRule(_localctx, 62, Dart2Parser::RuleCompoundAssignmentOperator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(711);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 42, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(693);
      match(Dart2Parser::STE);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(694);
      match(Dart2Parser::SE);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(695);
      match(Dart2Parser::SQSE);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(696);
      match(Dart2Parser::PE);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(697);
      match(Dart2Parser::PLE);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(698);
      match(Dart2Parser::ME);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(699);
      match(Dart2Parser::LTLTE);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(700);
      match(Dart2Parser::GT);
      setState(701);
      match(Dart2Parser::GT);
      setState(702);
      match(Dart2Parser::GT);
      setState(703);
      match(Dart2Parser::EQ);
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(704);
      match(Dart2Parser::GT);
      setState(705);
      match(Dart2Parser::GT);
      setState(706);
      match(Dart2Parser::EQ);
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(707);
      match(Dart2Parser::AE);
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(708);
      match(Dart2Parser::CIRE);
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(709);
      match(Dart2Parser::POE);
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(710);
      match(Dart2Parser::QUQUEQ);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConditionalExpressionContext ------------------------------------------------------------------

Dart2Parser::ConditionalExpressionContext::ConditionalExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::IfNullExpressionContext* Dart2Parser::ConditionalExpressionContext::ifNullExpression() {
  return getRuleContext<Dart2Parser::IfNullExpressionContext>(0);
}

tree::TerminalNode* Dart2Parser::ConditionalExpressionContext::QU() {
  return getToken(Dart2Parser::QU, 0);
}

std::vector<Dart2Parser::ExpressionWithoutCascadeContext *> Dart2Parser::ConditionalExpressionContext::expressionWithoutCascade() {
  return getRuleContexts<Dart2Parser::ExpressionWithoutCascadeContext>();
}

Dart2Parser::ExpressionWithoutCascadeContext* Dart2Parser::ConditionalExpressionContext::expressionWithoutCascade(size_t i) {
  return getRuleContext<Dart2Parser::ExpressionWithoutCascadeContext>(i);
}

tree::TerminalNode* Dart2Parser::ConditionalExpressionContext::CO() {
  return getToken(Dart2Parser::CO, 0);
}


size_t Dart2Parser::ConditionalExpressionContext::getRuleIndex() const {
  return Dart2Parser::RuleConditionalExpression;
}

void Dart2Parser::ConditionalExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConditionalExpression(this);
}

void Dart2Parser::ConditionalExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConditionalExpression(this);
}

Dart2Parser::ConditionalExpressionContext* Dart2Parser::conditionalExpression() {
  ConditionalExpressionContext *_localctx = _tracker.createInstance<ConditionalExpressionContext>(_ctx, getState());
  enterRule(_localctx, 64, Dart2Parser::RuleConditionalExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(713);
    ifNullExpression();
    setState(719);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 43, _ctx)) {
    case 1: {
      setState(714);
      match(Dart2Parser::QU);
      setState(715);
      expressionWithoutCascade();
      setState(716);
      match(Dart2Parser::CO);
      setState(717);
      expressionWithoutCascade();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConfigurableUriContext ------------------------------------------------------------------

Dart2Parser::ConfigurableUriContext::ConfigurableUriContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::UriContext* Dart2Parser::ConfigurableUriContext::uri() {
  return getRuleContext<Dart2Parser::UriContext>(0);
}

std::vector<Dart2Parser::ConfigurationUriContext *> Dart2Parser::ConfigurableUriContext::configurationUri() {
  return getRuleContexts<Dart2Parser::ConfigurationUriContext>();
}

Dart2Parser::ConfigurationUriContext* Dart2Parser::ConfigurableUriContext::configurationUri(size_t i) {
  return getRuleContext<Dart2Parser::ConfigurationUriContext>(i);
}


size_t Dart2Parser::ConfigurableUriContext::getRuleIndex() const {
  return Dart2Parser::RuleConfigurableUri;
}

void Dart2Parser::ConfigurableUriContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConfigurableUri(this);
}

void Dart2Parser::ConfigurableUriContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConfigurableUri(this);
}

Dart2Parser::ConfigurableUriContext* Dart2Parser::configurableUri() {
  ConfigurableUriContext *_localctx = _tracker.createInstance<ConfigurableUriContext>(_ctx, getState());
  enterRule(_localctx, 66, Dart2Parser::RuleConfigurableUri);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(721);
    uri();
    setState(725);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Dart2Parser::IF_) {
      setState(722);
      configurationUri();
      setState(727);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConfigurationUriContext ------------------------------------------------------------------

Dart2Parser::ConfigurationUriContext::ConfigurationUriContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::ConfigurationUriContext::IF_() {
  return getToken(Dart2Parser::IF_, 0);
}

tree::TerminalNode* Dart2Parser::ConfigurationUriContext::OP() {
  return getToken(Dart2Parser::OP, 0);
}

Dart2Parser::UriTestContext* Dart2Parser::ConfigurationUriContext::uriTest() {
  return getRuleContext<Dart2Parser::UriTestContext>(0);
}

tree::TerminalNode* Dart2Parser::ConfigurationUriContext::CP() {
  return getToken(Dart2Parser::CP, 0);
}

Dart2Parser::UriContext* Dart2Parser::ConfigurationUriContext::uri() {
  return getRuleContext<Dart2Parser::UriContext>(0);
}


size_t Dart2Parser::ConfigurationUriContext::getRuleIndex() const {
  return Dart2Parser::RuleConfigurationUri;
}

void Dart2Parser::ConfigurationUriContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConfigurationUri(this);
}

void Dart2Parser::ConfigurationUriContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConfigurationUri(this);
}

Dart2Parser::ConfigurationUriContext* Dart2Parser::configurationUri() {
  ConfigurationUriContext *_localctx = _tracker.createInstance<ConfigurationUriContext>(_ctx, getState());
  enterRule(_localctx, 68, Dart2Parser::RuleConfigurationUri);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(728);
    match(Dart2Parser::IF_);
    setState(729);
    match(Dart2Parser::OP);
    setState(730);
    uriTest();
    setState(731);
    match(Dart2Parser::CP);
    setState(732);
    uri();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstantConstructorSignatureContext ------------------------------------------------------------------

Dart2Parser::ConstantConstructorSignatureContext::ConstantConstructorSignatureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::ConstantConstructorSignatureContext::CONST_() {
  return getToken(Dart2Parser::CONST_, 0);
}

Dart2Parser::ConstructorNameContext* Dart2Parser::ConstantConstructorSignatureContext::constructorName() {
  return getRuleContext<Dart2Parser::ConstructorNameContext>(0);
}

Dart2Parser::FormalParameterListContext* Dart2Parser::ConstantConstructorSignatureContext::formalParameterList() {
  return getRuleContext<Dart2Parser::FormalParameterListContext>(0);
}


size_t Dart2Parser::ConstantConstructorSignatureContext::getRuleIndex() const {
  return Dart2Parser::RuleConstantConstructorSignature;
}

void Dart2Parser::ConstantConstructorSignatureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstantConstructorSignature(this);
}

void Dart2Parser::ConstantConstructorSignatureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstantConstructorSignature(this);
}

Dart2Parser::ConstantConstructorSignatureContext* Dart2Parser::constantConstructorSignature() {
  ConstantConstructorSignatureContext *_localctx = _tracker.createInstance<ConstantConstructorSignatureContext>(_ctx, getState());
  enterRule(_localctx, 70, Dart2Parser::RuleConstantConstructorSignature);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(734);
    match(Dart2Parser::CONST_);
    setState(735);
    constructorName();
    setState(736);
    formalParameterList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstObjectExpressionContext ------------------------------------------------------------------

Dart2Parser::ConstObjectExpressionContext::ConstObjectExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::ConstObjectExpressionContext::CONST_() {
  return getToken(Dart2Parser::CONST_, 0);
}

Dart2Parser::ConstructorDesignationContext* Dart2Parser::ConstObjectExpressionContext::constructorDesignation() {
  return getRuleContext<Dart2Parser::ConstructorDesignationContext>(0);
}

Dart2Parser::ArgumentsContext* Dart2Parser::ConstObjectExpressionContext::arguments() {
  return getRuleContext<Dart2Parser::ArgumentsContext>(0);
}


size_t Dart2Parser::ConstObjectExpressionContext::getRuleIndex() const {
  return Dart2Parser::RuleConstObjectExpression;
}

void Dart2Parser::ConstObjectExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstObjectExpression(this);
}

void Dart2Parser::ConstObjectExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstObjectExpression(this);
}

Dart2Parser::ConstObjectExpressionContext* Dart2Parser::constObjectExpression() {
  ConstObjectExpressionContext *_localctx = _tracker.createInstance<ConstObjectExpressionContext>(_ctx, getState());
  enterRule(_localctx, 72, Dart2Parser::RuleConstObjectExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(738);
    match(Dart2Parser::CONST_);
    setState(739);
    constructorDesignation();
    setState(740);
    arguments();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstructorDesignationContext ------------------------------------------------------------------

Dart2Parser::ConstructorDesignationContext::ConstructorDesignationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::TypeIdentifierContext* Dart2Parser::ConstructorDesignationContext::typeIdentifier() {
  return getRuleContext<Dart2Parser::TypeIdentifierContext>(0);
}

Dart2Parser::QualifiedNameContext* Dart2Parser::ConstructorDesignationContext::qualifiedName() {
  return getRuleContext<Dart2Parser::QualifiedNameContext>(0);
}

Dart2Parser::TypeNameContext* Dart2Parser::ConstructorDesignationContext::typeName() {
  return getRuleContext<Dart2Parser::TypeNameContext>(0);
}

Dart2Parser::TypeArgumentsContext* Dart2Parser::ConstructorDesignationContext::typeArguments() {
  return getRuleContext<Dart2Parser::TypeArgumentsContext>(0);
}

tree::TerminalNode* Dart2Parser::ConstructorDesignationContext::D() {
  return getToken(Dart2Parser::D, 0);
}

Dart2Parser::IdentifierContext* Dart2Parser::ConstructorDesignationContext::identifier() {
  return getRuleContext<Dart2Parser::IdentifierContext>(0);
}


size_t Dart2Parser::ConstructorDesignationContext::getRuleIndex() const {
  return Dart2Parser::RuleConstructorDesignation;
}

void Dart2Parser::ConstructorDesignationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstructorDesignation(this);
}

void Dart2Parser::ConstructorDesignationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstructorDesignation(this);
}

Dart2Parser::ConstructorDesignationContext* Dart2Parser::constructorDesignation() {
  ConstructorDesignationContext *_localctx = _tracker.createInstance<ConstructorDesignationContext>(_ctx, getState());
  enterRule(_localctx, 74, Dart2Parser::RuleConstructorDesignation);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(750);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 46, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(742);
      typeIdentifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(743);
      qualifiedName();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(744);
      typeName();
      setState(745);
      typeArguments();
      setState(748);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Dart2Parser::D) {
        setState(746);
        match(Dart2Parser::D);
        setState(747);
        identifier();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstructorInvocationContext ------------------------------------------------------------------

Dart2Parser::ConstructorInvocationContext::ConstructorInvocationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::TypeNameContext* Dart2Parser::ConstructorInvocationContext::typeName() {
  return getRuleContext<Dart2Parser::TypeNameContext>(0);
}

Dart2Parser::TypeArgumentsContext* Dart2Parser::ConstructorInvocationContext::typeArguments() {
  return getRuleContext<Dart2Parser::TypeArgumentsContext>(0);
}

tree::TerminalNode* Dart2Parser::ConstructorInvocationContext::D() {
  return getToken(Dart2Parser::D, 0);
}

Dart2Parser::IdentifierContext* Dart2Parser::ConstructorInvocationContext::identifier() {
  return getRuleContext<Dart2Parser::IdentifierContext>(0);
}

Dart2Parser::ArgumentsContext* Dart2Parser::ConstructorInvocationContext::arguments() {
  return getRuleContext<Dart2Parser::ArgumentsContext>(0);
}


size_t Dart2Parser::ConstructorInvocationContext::getRuleIndex() const {
  return Dart2Parser::RuleConstructorInvocation;
}

void Dart2Parser::ConstructorInvocationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstructorInvocation(this);
}

void Dart2Parser::ConstructorInvocationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstructorInvocation(this);
}

Dart2Parser::ConstructorInvocationContext* Dart2Parser::constructorInvocation() {
  ConstructorInvocationContext *_localctx = _tracker.createInstance<ConstructorInvocationContext>(_ctx, getState());
  enterRule(_localctx, 76, Dart2Parser::RuleConstructorInvocation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(752);
    typeName();
    setState(753);
    typeArguments();
    setState(754);
    match(Dart2Parser::D);
    setState(755);
    identifier();
    setState(756);
    arguments();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstructorNameContext ------------------------------------------------------------------

Dart2Parser::ConstructorNameContext::ConstructorNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::TypeIdentifierContext* Dart2Parser::ConstructorNameContext::typeIdentifier() {
  return getRuleContext<Dart2Parser::TypeIdentifierContext>(0);
}

tree::TerminalNode* Dart2Parser::ConstructorNameContext::D() {
  return getToken(Dart2Parser::D, 0);
}

Dart2Parser::IdentifierContext* Dart2Parser::ConstructorNameContext::identifier() {
  return getRuleContext<Dart2Parser::IdentifierContext>(0);
}


size_t Dart2Parser::ConstructorNameContext::getRuleIndex() const {
  return Dart2Parser::RuleConstructorName;
}

void Dart2Parser::ConstructorNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstructorName(this);
}

void Dart2Parser::ConstructorNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstructorName(this);
}

Dart2Parser::ConstructorNameContext* Dart2Parser::constructorName() {
  ConstructorNameContext *_localctx = _tracker.createInstance<ConstructorNameContext>(_ctx, getState());
  enterRule(_localctx, 78, Dart2Parser::RuleConstructorName);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(758);
    typeIdentifier();
    setState(761);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Dart2Parser::D) {
      setState(759);
      match(Dart2Parser::D);
      setState(760);
      identifier();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstructorSignatureContext ------------------------------------------------------------------

Dart2Parser::ConstructorSignatureContext::ConstructorSignatureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::ConstructorNameContext* Dart2Parser::ConstructorSignatureContext::constructorName() {
  return getRuleContext<Dart2Parser::ConstructorNameContext>(0);
}

Dart2Parser::FormalParameterListContext* Dart2Parser::ConstructorSignatureContext::formalParameterList() {
  return getRuleContext<Dart2Parser::FormalParameterListContext>(0);
}


size_t Dart2Parser::ConstructorSignatureContext::getRuleIndex() const {
  return Dart2Parser::RuleConstructorSignature;
}

void Dart2Parser::ConstructorSignatureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstructorSignature(this);
}

void Dart2Parser::ConstructorSignatureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstructorSignature(this);
}

Dart2Parser::ConstructorSignatureContext* Dart2Parser::constructorSignature() {
  ConstructorSignatureContext *_localctx = _tracker.createInstance<ConstructorSignatureContext>(_ctx, getState());
  enterRule(_localctx, 80, Dart2Parser::RuleConstructorSignature);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(763);
    constructorName();
    setState(764);
    formalParameterList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ContinueStatementContext ------------------------------------------------------------------

Dart2Parser::ContinueStatementContext::ContinueStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::ContinueStatementContext::CONTINUE_() {
  return getToken(Dart2Parser::CONTINUE_, 0);
}

tree::TerminalNode* Dart2Parser::ContinueStatementContext::SC() {
  return getToken(Dart2Parser::SC, 0);
}

Dart2Parser::IdentifierContext* Dart2Parser::ContinueStatementContext::identifier() {
  return getRuleContext<Dart2Parser::IdentifierContext>(0);
}


size_t Dart2Parser::ContinueStatementContext::getRuleIndex() const {
  return Dart2Parser::RuleContinueStatement;
}

void Dart2Parser::ContinueStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterContinueStatement(this);
}

void Dart2Parser::ContinueStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitContinueStatement(this);
}

Dart2Parser::ContinueStatementContext* Dart2Parser::continueStatement() {
  ContinueStatementContext *_localctx = _tracker.createInstance<ContinueStatementContext>(_ctx, getState());
  enterRule(_localctx, 82, Dart2Parser::RuleContinueStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(766);
    match(Dart2Parser::CONTINUE_);
    setState(768);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 486388759756013568) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 1190119350744059541) != 0)) {
      setState(767);
      identifier();
    }
    setState(770);
    match(Dart2Parser::SC);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeclarationContext ------------------------------------------------------------------

Dart2Parser::DeclarationContext::DeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::DeclarationContext::EXTERNAL_() {
  return getToken(Dart2Parser::EXTERNAL_, 0);
}

Dart2Parser::FactoryConstructorSignatureContext* Dart2Parser::DeclarationContext::factoryConstructorSignature() {
  return getRuleContext<Dart2Parser::FactoryConstructorSignatureContext>(0);
}

Dart2Parser::ConstantConstructorSignatureContext* Dart2Parser::DeclarationContext::constantConstructorSignature() {
  return getRuleContext<Dart2Parser::ConstantConstructorSignatureContext>(0);
}

Dart2Parser::ConstructorSignatureContext* Dart2Parser::DeclarationContext::constructorSignature() {
  return getRuleContext<Dart2Parser::ConstructorSignatureContext>(0);
}

Dart2Parser::GetterSignatureContext* Dart2Parser::DeclarationContext::getterSignature() {
  return getRuleContext<Dart2Parser::GetterSignatureContext>(0);
}

Dart2Parser::SetterSignatureContext* Dart2Parser::DeclarationContext::setterSignature() {
  return getRuleContext<Dart2Parser::SetterSignatureContext>(0);
}

Dart2Parser::FunctionSignatureContext* Dart2Parser::DeclarationContext::functionSignature() {
  return getRuleContext<Dart2Parser::FunctionSignatureContext>(0);
}

Dart2Parser::OperatorSignatureContext* Dart2Parser::DeclarationContext::operatorSignature() {
  return getRuleContext<Dart2Parser::OperatorSignatureContext>(0);
}

tree::TerminalNode* Dart2Parser::DeclarationContext::STATIC_() {
  return getToken(Dart2Parser::STATIC_, 0);
}

tree::TerminalNode* Dart2Parser::DeclarationContext::CONST_() {
  return getToken(Dart2Parser::CONST_, 0);
}

Dart2Parser::StaticFinalDeclarationListContext* Dart2Parser::DeclarationContext::staticFinalDeclarationList() {
  return getRuleContext<Dart2Parser::StaticFinalDeclarationListContext>(0);
}

tree::TerminalNode* Dart2Parser::DeclarationContext::FINAL_() {
  return getToken(Dart2Parser::FINAL_, 0);
}

tree::TerminalNode* Dart2Parser::DeclarationContext::LATE_() {
  return getToken(Dart2Parser::LATE_, 0);
}

Dart2Parser::InitializedIdentifierListContext* Dart2Parser::DeclarationContext::initializedIdentifierList() {
  return getRuleContext<Dart2Parser::InitializedIdentifierListContext>(0);
}

Dart2Parser::VarOrTypeContext* Dart2Parser::DeclarationContext::varOrType() {
  return getRuleContext<Dart2Parser::VarOrTypeContext>(0);
}

tree::TerminalNode* Dart2Parser::DeclarationContext::COVARIANT_() {
  return getToken(Dart2Parser::COVARIANT_, 0);
}

Dart2Parser::IdentifierListContext* Dart2Parser::DeclarationContext::identifierList() {
  return getRuleContext<Dart2Parser::IdentifierListContext>(0);
}

Dart2Parser::RedirectingFactoryConstructorSignatureContext* Dart2Parser::DeclarationContext::redirectingFactoryConstructorSignature() {
  return getRuleContext<Dart2Parser::RedirectingFactoryConstructorSignatureContext>(0);
}

tree::TerminalNode* Dart2Parser::DeclarationContext::ABSTRACT_() {
  return getToken(Dart2Parser::ABSTRACT_, 0);
}

Dart2Parser::TypeContext* Dart2Parser::DeclarationContext::type() {
  return getRuleContext<Dart2Parser::TypeContext>(0);
}

Dart2Parser::RedirectionContext* Dart2Parser::DeclarationContext::redirection() {
  return getRuleContext<Dart2Parser::RedirectionContext>(0);
}

Dart2Parser::InitializersContext* Dart2Parser::DeclarationContext::initializers() {
  return getRuleContext<Dart2Parser::InitializersContext>(0);
}


size_t Dart2Parser::DeclarationContext::getRuleIndex() const {
  return Dart2Parser::RuleDeclaration;
}

void Dart2Parser::DeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeclaration(this);
}

void Dart2Parser::DeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeclaration(this);
}

Dart2Parser::DeclarationContext* Dart2Parser::declaration() {
  DeclarationContext *_localctx = _tracker.createInstance<DeclarationContext>(_ctx, getState());
  enterRule(_localctx, 84, Dart2Parser::RuleDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(773);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 49, _ctx)) {
    case 1: {
      setState(772);
      match(Dart2Parser::ABSTRACT_);
      break;
    }

    default:
      break;
    }
    setState(871);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 68, _ctx)) {
    case 1: {
      setState(775);
      match(Dart2Parser::EXTERNAL_);
      setState(776);
      factoryConstructorSignature();
      break;
    }

    case 2: {
      setState(777);
      match(Dart2Parser::EXTERNAL_);
      setState(778);
      constantConstructorSignature();
      break;
    }

    case 3: {
      setState(779);
      match(Dart2Parser::EXTERNAL_);
      setState(780);
      constructorSignature();
      break;
    }

    case 4: {
      setState(785);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Dart2Parser::EXTERNAL_) {
        setState(781);
        match(Dart2Parser::EXTERNAL_);
        setState(783);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Dart2Parser::STATIC_) {
          setState(782);
          match(Dart2Parser::STATIC_);
        }
      }
      setState(787);
      getterSignature();
      break;
    }

    case 5: {
      setState(792);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Dart2Parser::EXTERNAL_) {
        setState(788);
        match(Dart2Parser::EXTERNAL_);
        setState(790);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Dart2Parser::STATIC_) {
          setState(789);
          match(Dart2Parser::STATIC_);
        }
      }
      setState(794);
      setterSignature();
      break;
    }

    case 6: {
      setState(799);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 55, _ctx)) {
      case 1: {
        setState(795);
        match(Dart2Parser::EXTERNAL_);
        setState(797);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 54, _ctx)) {
        case 1: {
          setState(796);
          match(Dart2Parser::STATIC_);
          break;
        }

        default:
          break;
        }
        break;
      }

      default:
        break;
      }
      setState(801);
      functionSignature();
      break;
    }

    case 7: {
      setState(803);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Dart2Parser::EXTERNAL_) {
        setState(802);
        match(Dart2Parser::EXTERNAL_);
      }
      setState(805);
      operatorSignature();
      break;
    }

    case 8: {
      setState(806);
      match(Dart2Parser::STATIC_);
      setState(807);
      match(Dart2Parser::CONST_);
      setState(809);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 57, _ctx)) {
      case 1: {
        setState(808);
        type();
        break;
      }

      default:
        break;
      }
      setState(811);
      staticFinalDeclarationList();
      break;
    }

    case 9: {
      setState(812);
      match(Dart2Parser::STATIC_);
      setState(813);
      match(Dart2Parser::FINAL_);
      setState(815);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 58, _ctx)) {
      case 1: {
        setState(814);
        type();
        break;
      }

      default:
        break;
      }
      setState(817);
      staticFinalDeclarationList();
      break;
    }

    case 10: {
      setState(818);
      match(Dart2Parser::STATIC_);
      setState(819);
      match(Dart2Parser::LATE_);
      setState(820);
      match(Dart2Parser::FINAL_);
      setState(822);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 59, _ctx)) {
      case 1: {
        setState(821);
        type();
        break;
      }

      default:
        break;
      }
      setState(824);
      initializedIdentifierList();
      break;
    }

    case 11: {
      setState(825);
      match(Dart2Parser::STATIC_);
      setState(827);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Dart2Parser::LATE_) {
        setState(826);
        match(Dart2Parser::LATE_);
      }
      setState(829);
      varOrType();
      setState(830);
      initializedIdentifierList();
      break;
    }

    case 12: {
      setState(832);
      match(Dart2Parser::COVARIANT_);
      setState(833);
      match(Dart2Parser::LATE_);
      setState(834);
      match(Dart2Parser::FINAL_);
      setState(836);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 61, _ctx)) {
      case 1: {
        setState(835);
        type();
        break;
      }

      default:
        break;
      }
      setState(838);
      identifierList();
      break;
    }

    case 13: {
      setState(839);
      match(Dart2Parser::COVARIANT_);
      setState(841);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Dart2Parser::LATE_) {
        setState(840);
        match(Dart2Parser::LATE_);
      }
      setState(843);
      varOrType();
      setState(844);
      initializedIdentifierList();
      break;
    }

    case 14: {
      setState(847);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Dart2Parser::LATE_) {
        setState(846);
        match(Dart2Parser::LATE_);
      }
      setState(849);
      match(Dart2Parser::FINAL_);
      setState(851);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 64, _ctx)) {
      case 1: {
        setState(850);
        type();
        break;
      }

      default:
        break;
      }
      setState(853);
      initializedIdentifierList();
      break;
    }

    case 15: {
      setState(855);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Dart2Parser::LATE_) {
        setState(854);
        match(Dart2Parser::LATE_);
      }
      setState(857);
      varOrType();
      setState(858);
      initializedIdentifierList();
      break;
    }

    case 16: {
      setState(860);
      redirectingFactoryConstructorSignature();
      break;
    }

    case 17: {
      setState(861);
      constantConstructorSignature();
      setState(864);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 66, _ctx)) {
      case 1: {
        setState(862);
        redirection();
        break;
      }

      case 2: {
        setState(863);
        initializers();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 18: {
      setState(866);
      constructorSignature();
      setState(869);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 67, _ctx)) {
      case 1: {
        setState(867);
        redirection();
        break;
      }

      case 2: {
        setState(868);
        initializers();
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeclaredIdentifierContext ------------------------------------------------------------------

Dart2Parser::DeclaredIdentifierContext::DeclaredIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::FinalConstVarOrTypeContext* Dart2Parser::DeclaredIdentifierContext::finalConstVarOrType() {
  return getRuleContext<Dart2Parser::FinalConstVarOrTypeContext>(0);
}

Dart2Parser::IdentifierContext* Dart2Parser::DeclaredIdentifierContext::identifier() {
  return getRuleContext<Dart2Parser::IdentifierContext>(0);
}

tree::TerminalNode* Dart2Parser::DeclaredIdentifierContext::COVARIANT_() {
  return getToken(Dart2Parser::COVARIANT_, 0);
}


size_t Dart2Parser::DeclaredIdentifierContext::getRuleIndex() const {
  return Dart2Parser::RuleDeclaredIdentifier;
}

void Dart2Parser::DeclaredIdentifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeclaredIdentifier(this);
}

void Dart2Parser::DeclaredIdentifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeclaredIdentifier(this);
}

Dart2Parser::DeclaredIdentifierContext* Dart2Parser::declaredIdentifier() {
  DeclaredIdentifierContext *_localctx = _tracker.createInstance<DeclaredIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 86, Dart2Parser::RuleDeclaredIdentifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(874);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Dart2Parser::COVARIANT_) {
      setState(873);
      match(Dart2Parser::COVARIANT_);
    }
    setState(876);
    finalConstVarOrType();
    setState(877);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DefaultCaseContext ------------------------------------------------------------------

Dart2Parser::DefaultCaseContext::DefaultCaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::DefaultCaseContext::DEFAULT_() {
  return getToken(Dart2Parser::DEFAULT_, 0);
}

tree::TerminalNode* Dart2Parser::DefaultCaseContext::CO() {
  return getToken(Dart2Parser::CO, 0);
}

Dart2Parser::StatementsContext* Dart2Parser::DefaultCaseContext::statements() {
  return getRuleContext<Dart2Parser::StatementsContext>(0);
}

std::vector<Dart2Parser::LabelContext *> Dart2Parser::DefaultCaseContext::label() {
  return getRuleContexts<Dart2Parser::LabelContext>();
}

Dart2Parser::LabelContext* Dart2Parser::DefaultCaseContext::label(size_t i) {
  return getRuleContext<Dart2Parser::LabelContext>(i);
}


size_t Dart2Parser::DefaultCaseContext::getRuleIndex() const {
  return Dart2Parser::RuleDefaultCase;
}

void Dart2Parser::DefaultCaseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDefaultCase(this);
}

void Dart2Parser::DefaultCaseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDefaultCase(this);
}

Dart2Parser::DefaultCaseContext* Dart2Parser::defaultCase() {
  DefaultCaseContext *_localctx = _tracker.createInstance<DefaultCaseContext>(_ctx, getState());
  enterRule(_localctx, 88, Dart2Parser::RuleDefaultCase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(882);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 486388759756013568) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 1190119350744059541) != 0)) {
      setState(879);
      label();
      setState(884);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(885);
    match(Dart2Parser::DEFAULT_);
    setState(886);
    match(Dart2Parser::CO);
    setState(887);
    statements();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DefaultFormalParameterContext ------------------------------------------------------------------

Dart2Parser::DefaultFormalParameterContext::DefaultFormalParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::NormalFormalParameterContext* Dart2Parser::DefaultFormalParameterContext::normalFormalParameter() {
  return getRuleContext<Dart2Parser::NormalFormalParameterContext>(0);
}

tree::TerminalNode* Dart2Parser::DefaultFormalParameterContext::EQ() {
  return getToken(Dart2Parser::EQ, 0);
}

Dart2Parser::ExpressionContext* Dart2Parser::DefaultFormalParameterContext::expression() {
  return getRuleContext<Dart2Parser::ExpressionContext>(0);
}


size_t Dart2Parser::DefaultFormalParameterContext::getRuleIndex() const {
  return Dart2Parser::RuleDefaultFormalParameter;
}

void Dart2Parser::DefaultFormalParameterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDefaultFormalParameter(this);
}

void Dart2Parser::DefaultFormalParameterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDefaultFormalParameter(this);
}

Dart2Parser::DefaultFormalParameterContext* Dart2Parser::defaultFormalParameter() {
  DefaultFormalParameterContext *_localctx = _tracker.createInstance<DefaultFormalParameterContext>(_ctx, getState());
  enterRule(_localctx, 90, Dart2Parser::RuleDefaultFormalParameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(889);
    normalFormalParameter();
    setState(892);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Dart2Parser::EQ) {
      setState(890);
      match(Dart2Parser::EQ);
      setState(891);
      expression();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DefaultNamedParameterContext ------------------------------------------------------------------

Dart2Parser::DefaultNamedParameterContext::DefaultNamedParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::MetadataContext* Dart2Parser::DefaultNamedParameterContext::metadata() {
  return getRuleContext<Dart2Parser::MetadataContext>(0);
}

Dart2Parser::NormalFormalParameterNoMetadataContext* Dart2Parser::DefaultNamedParameterContext::normalFormalParameterNoMetadata() {
  return getRuleContext<Dart2Parser::NormalFormalParameterNoMetadataContext>(0);
}

tree::TerminalNode* Dart2Parser::DefaultNamedParameterContext::REQUIRED_() {
  return getToken(Dart2Parser::REQUIRED_, 0);
}

Dart2Parser::ExpressionContext* Dart2Parser::DefaultNamedParameterContext::expression() {
  return getRuleContext<Dart2Parser::ExpressionContext>(0);
}

tree::TerminalNode* Dart2Parser::DefaultNamedParameterContext::EQ() {
  return getToken(Dart2Parser::EQ, 0);
}

tree::TerminalNode* Dart2Parser::DefaultNamedParameterContext::CO() {
  return getToken(Dart2Parser::CO, 0);
}


size_t Dart2Parser::DefaultNamedParameterContext::getRuleIndex() const {
  return Dart2Parser::RuleDefaultNamedParameter;
}

void Dart2Parser::DefaultNamedParameterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDefaultNamedParameter(this);
}

void Dart2Parser::DefaultNamedParameterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDefaultNamedParameter(this);
}

Dart2Parser::DefaultNamedParameterContext* Dart2Parser::defaultNamedParameter() {
  DefaultNamedParameterContext *_localctx = _tracker.createInstance<DefaultNamedParameterContext>(_ctx, getState());
  enterRule(_localctx, 92, Dart2Parser::RuleDefaultNamedParameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(894);
    metadata();
    setState(896);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 72, _ctx)) {
    case 1: {
      setState(895);
      match(Dart2Parser::REQUIRED_);
      break;
    }

    default:
      break;
    }
    setState(898);
    normalFormalParameterNoMetadata();
    setState(901);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Dart2Parser::CO

    || _la == Dart2Parser::EQ) {
      setState(899);
      _la = _input->LA(1);
      if (!(_la == Dart2Parser::CO

      || _la == Dart2Parser::EQ)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(900);
      expression();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DoStatementContext ------------------------------------------------------------------

Dart2Parser::DoStatementContext::DoStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::DoStatementContext::DO_() {
  return getToken(Dart2Parser::DO_, 0);
}

Dart2Parser::StatementContext* Dart2Parser::DoStatementContext::statement() {
  return getRuleContext<Dart2Parser::StatementContext>(0);
}

tree::TerminalNode* Dart2Parser::DoStatementContext::WHILE_() {
  return getToken(Dart2Parser::WHILE_, 0);
}

tree::TerminalNode* Dart2Parser::DoStatementContext::OP() {
  return getToken(Dart2Parser::OP, 0);
}

Dart2Parser::ExpressionContext* Dart2Parser::DoStatementContext::expression() {
  return getRuleContext<Dart2Parser::ExpressionContext>(0);
}

tree::TerminalNode* Dart2Parser::DoStatementContext::CP() {
  return getToken(Dart2Parser::CP, 0);
}

tree::TerminalNode* Dart2Parser::DoStatementContext::SC() {
  return getToken(Dart2Parser::SC, 0);
}


size_t Dart2Parser::DoStatementContext::getRuleIndex() const {
  return Dart2Parser::RuleDoStatement;
}

void Dart2Parser::DoStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDoStatement(this);
}

void Dart2Parser::DoStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDoStatement(this);
}

Dart2Parser::DoStatementContext* Dart2Parser::doStatement() {
  DoStatementContext *_localctx = _tracker.createInstance<DoStatementContext>(_ctx, getState());
  enterRule(_localctx, 94, Dart2Parser::RuleDoStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(903);
    match(Dart2Parser::DO_);
    setState(904);
    statement();
    setState(905);
    match(Dart2Parser::WHILE_);
    setState(906);
    match(Dart2Parser::OP);
    setState(907);
    expression();
    setState(908);
    match(Dart2Parser::CP);
    setState(909);
    match(Dart2Parser::SC);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DottedIdentifierListContext ------------------------------------------------------------------

Dart2Parser::DottedIdentifierListContext::DottedIdentifierListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Dart2Parser::IdentifierContext *> Dart2Parser::DottedIdentifierListContext::identifier() {
  return getRuleContexts<Dart2Parser::IdentifierContext>();
}

Dart2Parser::IdentifierContext* Dart2Parser::DottedIdentifierListContext::identifier(size_t i) {
  return getRuleContext<Dart2Parser::IdentifierContext>(i);
}

std::vector<tree::TerminalNode *> Dart2Parser::DottedIdentifierListContext::D() {
  return getTokens(Dart2Parser::D);
}

tree::TerminalNode* Dart2Parser::DottedIdentifierListContext::D(size_t i) {
  return getToken(Dart2Parser::D, i);
}


size_t Dart2Parser::DottedIdentifierListContext::getRuleIndex() const {
  return Dart2Parser::RuleDottedIdentifierList;
}

void Dart2Parser::DottedIdentifierListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDottedIdentifierList(this);
}

void Dart2Parser::DottedIdentifierListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDottedIdentifierList(this);
}

Dart2Parser::DottedIdentifierListContext* Dart2Parser::dottedIdentifierList() {
  DottedIdentifierListContext *_localctx = _tracker.createInstance<DottedIdentifierListContext>(_ctx, getState());
  enterRule(_localctx, 96, Dart2Parser::RuleDottedIdentifierList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(911);
    identifier();
    setState(916);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Dart2Parser::D) {
      setState(912);
      match(Dart2Parser::D);
      setState(913);
      identifier();
      setState(918);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementContext ------------------------------------------------------------------

Dart2Parser::ElementContext::ElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::ExpressionElementContext* Dart2Parser::ElementContext::expressionElement() {
  return getRuleContext<Dart2Parser::ExpressionElementContext>(0);
}

Dart2Parser::MapElementContext* Dart2Parser::ElementContext::mapElement() {
  return getRuleContext<Dart2Parser::MapElementContext>(0);
}

Dart2Parser::SpreadElementContext* Dart2Parser::ElementContext::spreadElement() {
  return getRuleContext<Dart2Parser::SpreadElementContext>(0);
}

Dart2Parser::IfElementContext* Dart2Parser::ElementContext::ifElement() {
  return getRuleContext<Dart2Parser::IfElementContext>(0);
}

Dart2Parser::ForElementContext* Dart2Parser::ElementContext::forElement() {
  return getRuleContext<Dart2Parser::ForElementContext>(0);
}


size_t Dart2Parser::ElementContext::getRuleIndex() const {
  return Dart2Parser::RuleElement;
}

void Dart2Parser::ElementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElement(this);
}

void Dart2Parser::ElementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElement(this);
}

Dart2Parser::ElementContext* Dart2Parser::element() {
  ElementContext *_localctx = _tracker.createInstance<ElementContext>(_ctx, getState());
  enterRule(_localctx, 98, Dart2Parser::RuleElement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(924);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 75, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(919);
      expressionElement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(920);
      mapElement();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(921);
      spreadElement();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(922);
      ifElement();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(923);
      forElement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementsContext ------------------------------------------------------------------

Dart2Parser::ElementsContext::ElementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Dart2Parser::ElementContext *> Dart2Parser::ElementsContext::element() {
  return getRuleContexts<Dart2Parser::ElementContext>();
}

Dart2Parser::ElementContext* Dart2Parser::ElementsContext::element(size_t i) {
  return getRuleContext<Dart2Parser::ElementContext>(i);
}

std::vector<tree::TerminalNode *> Dart2Parser::ElementsContext::C() {
  return getTokens(Dart2Parser::C);
}

tree::TerminalNode* Dart2Parser::ElementsContext::C(size_t i) {
  return getToken(Dart2Parser::C, i);
}


size_t Dart2Parser::ElementsContext::getRuleIndex() const {
  return Dart2Parser::RuleElements;
}

void Dart2Parser::ElementsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElements(this);
}

void Dart2Parser::ElementsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElements(this);
}

Dart2Parser::ElementsContext* Dart2Parser::elements() {
  ElementsContext *_localctx = _tracker.createInstance<ElementsContext>(_ctx, getState());
  enterRule(_localctx, 100, Dart2Parser::RuleElements);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(926);
    element();
    setState(931);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 76, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(927);
        match(Dart2Parser::C);
        setState(928);
        element(); 
      }
      setState(933);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 76, _ctx);
    }
    setState(935);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Dart2Parser::C) {
      setState(934);
      match(Dart2Parser::C);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumEntryContext ------------------------------------------------------------------

Dart2Parser::EnumEntryContext::EnumEntryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::MetadataContext* Dart2Parser::EnumEntryContext::metadata() {
  return getRuleContext<Dart2Parser::MetadataContext>(0);
}

Dart2Parser::IdentifierContext* Dart2Parser::EnumEntryContext::identifier() {
  return getRuleContext<Dart2Parser::IdentifierContext>(0);
}


size_t Dart2Parser::EnumEntryContext::getRuleIndex() const {
  return Dart2Parser::RuleEnumEntry;
}

void Dart2Parser::EnumEntryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumEntry(this);
}

void Dart2Parser::EnumEntryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumEntry(this);
}

Dart2Parser::EnumEntryContext* Dart2Parser::enumEntry() {
  EnumEntryContext *_localctx = _tracker.createInstance<EnumEntryContext>(_ctx, getState());
  enterRule(_localctx, 102, Dart2Parser::RuleEnumEntry);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(937);
    metadata();
    setState(938);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumTypeContext ------------------------------------------------------------------

Dart2Parser::EnumTypeContext::EnumTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::EnumTypeContext::ENUM_() {
  return getToken(Dart2Parser::ENUM_, 0);
}

Dart2Parser::IdentifierContext* Dart2Parser::EnumTypeContext::identifier() {
  return getRuleContext<Dart2Parser::IdentifierContext>(0);
}

tree::TerminalNode* Dart2Parser::EnumTypeContext::OBC() {
  return getToken(Dart2Parser::OBC, 0);
}

std::vector<Dart2Parser::EnumEntryContext *> Dart2Parser::EnumTypeContext::enumEntry() {
  return getRuleContexts<Dart2Parser::EnumEntryContext>();
}

Dart2Parser::EnumEntryContext* Dart2Parser::EnumTypeContext::enumEntry(size_t i) {
  return getRuleContext<Dart2Parser::EnumEntryContext>(i);
}

tree::TerminalNode* Dart2Parser::EnumTypeContext::CBC() {
  return getToken(Dart2Parser::CBC, 0);
}

std::vector<tree::TerminalNode *> Dart2Parser::EnumTypeContext::C() {
  return getTokens(Dart2Parser::C);
}

tree::TerminalNode* Dart2Parser::EnumTypeContext::C(size_t i) {
  return getToken(Dart2Parser::C, i);
}


size_t Dart2Parser::EnumTypeContext::getRuleIndex() const {
  return Dart2Parser::RuleEnumType;
}

void Dart2Parser::EnumTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumType(this);
}

void Dart2Parser::EnumTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumType(this);
}

Dart2Parser::EnumTypeContext* Dart2Parser::enumType() {
  EnumTypeContext *_localctx = _tracker.createInstance<EnumTypeContext>(_ctx, getState());
  enterRule(_localctx, 104, Dart2Parser::RuleEnumType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(940);
    match(Dart2Parser::ENUM_);
    setState(941);
    identifier();
    setState(942);
    match(Dart2Parser::OBC);
    setState(943);
    enumEntry();
    setState(948);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 78, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(944);
        match(Dart2Parser::C);
        setState(945);
        enumEntry(); 
      }
      setState(950);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 78, _ctx);
    }
    setState(952);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Dart2Parser::C) {
      setState(951);
      match(Dart2Parser::C);
    }
    setState(954);
    match(Dart2Parser::CBC);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EqualityExpressionContext ------------------------------------------------------------------

Dart2Parser::EqualityExpressionContext::EqualityExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Dart2Parser::RelationalExpressionContext *> Dart2Parser::EqualityExpressionContext::relationalExpression() {
  return getRuleContexts<Dart2Parser::RelationalExpressionContext>();
}

Dart2Parser::RelationalExpressionContext* Dart2Parser::EqualityExpressionContext::relationalExpression(size_t i) {
  return getRuleContext<Dart2Parser::RelationalExpressionContext>(i);
}

Dart2Parser::EqualityOperatorContext* Dart2Parser::EqualityExpressionContext::equalityOperator() {
  return getRuleContext<Dart2Parser::EqualityOperatorContext>(0);
}

tree::TerminalNode* Dart2Parser::EqualityExpressionContext::SUPER_() {
  return getToken(Dart2Parser::SUPER_, 0);
}


size_t Dart2Parser::EqualityExpressionContext::getRuleIndex() const {
  return Dart2Parser::RuleEqualityExpression;
}

void Dart2Parser::EqualityExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEqualityExpression(this);
}

void Dart2Parser::EqualityExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEqualityExpression(this);
}

Dart2Parser::EqualityExpressionContext* Dart2Parser::equalityExpression() {
  EqualityExpressionContext *_localctx = _tracker.createInstance<EqualityExpressionContext>(_ctx, getState());
  enterRule(_localctx, 106, Dart2Parser::RuleEqualityExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(966);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 81, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(956);
      relationalExpression();
      setState(960);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 80, _ctx)) {
      case 1: {
        setState(957);
        equalityOperator();
        setState(958);
        relationalExpression();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(962);
      match(Dart2Parser::SUPER_);
      setState(963);
      equalityOperator();
      setState(964);
      relationalExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EqualityOperatorContext ------------------------------------------------------------------

Dart2Parser::EqualityOperatorContext::EqualityOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::EqualityOperatorContext::EE() {
  return getToken(Dart2Parser::EE, 0);
}

tree::TerminalNode* Dart2Parser::EqualityOperatorContext::NE() {
  return getToken(Dart2Parser::NE, 0);
}


size_t Dart2Parser::EqualityOperatorContext::getRuleIndex() const {
  return Dart2Parser::RuleEqualityOperator;
}

void Dart2Parser::EqualityOperatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEqualityOperator(this);
}

void Dart2Parser::EqualityOperatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEqualityOperator(this);
}

Dart2Parser::EqualityOperatorContext* Dart2Parser::equalityOperator() {
  EqualityOperatorContext *_localctx = _tracker.createInstance<EqualityOperatorContext>(_ctx, getState());
  enterRule(_localctx, 108, Dart2Parser::RuleEqualityOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(968);
    _la = _input->LA(1);
    if (!(_la == Dart2Parser::EE

    || _la == Dart2Parser::NE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionContext ------------------------------------------------------------------

Dart2Parser::ExpressionContext::ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::AssignableExpressionContext* Dart2Parser::ExpressionContext::assignableExpression() {
  return getRuleContext<Dart2Parser::AssignableExpressionContext>(0);
}

Dart2Parser::AssignmentOperatorContext* Dart2Parser::ExpressionContext::assignmentOperator() {
  return getRuleContext<Dart2Parser::AssignmentOperatorContext>(0);
}

Dart2Parser::ExpressionContext* Dart2Parser::ExpressionContext::expression() {
  return getRuleContext<Dart2Parser::ExpressionContext>(0);
}

Dart2Parser::ConditionalExpressionContext* Dart2Parser::ExpressionContext::conditionalExpression() {
  return getRuleContext<Dart2Parser::ConditionalExpressionContext>(0);
}

Dart2Parser::CascadeContext* Dart2Parser::ExpressionContext::cascade() {
  return getRuleContext<Dart2Parser::CascadeContext>(0);
}

Dart2Parser::ThrowExpressionContext* Dart2Parser::ExpressionContext::throwExpression() {
  return getRuleContext<Dart2Parser::ThrowExpressionContext>(0);
}


size_t Dart2Parser::ExpressionContext::getRuleIndex() const {
  return Dart2Parser::RuleExpression;
}

void Dart2Parser::ExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpression(this);
}

void Dart2Parser::ExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpression(this);
}

Dart2Parser::ExpressionContext* Dart2Parser::expression() {
  ExpressionContext *_localctx = _tracker.createInstance<ExpressionContext>(_ctx, getState());
  enterRule(_localctx, 110, Dart2Parser::RuleExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(977);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 82, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(970);
      assignableExpression();
      setState(971);
      assignmentOperator();
      setState(972);
      expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(974);
      conditionalExpression();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(975);
      cascade(0);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(976);
      throwExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionElementContext ------------------------------------------------------------------

Dart2Parser::ExpressionElementContext::ExpressionElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::ExpressionContext* Dart2Parser::ExpressionElementContext::expression() {
  return getRuleContext<Dart2Parser::ExpressionContext>(0);
}


size_t Dart2Parser::ExpressionElementContext::getRuleIndex() const {
  return Dart2Parser::RuleExpressionElement;
}

void Dart2Parser::ExpressionElementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpressionElement(this);
}

void Dart2Parser::ExpressionElementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpressionElement(this);
}

Dart2Parser::ExpressionElementContext* Dart2Parser::expressionElement() {
  ExpressionElementContext *_localctx = _tracker.createInstance<ExpressionElementContext>(_ctx, getState());
  enterRule(_localctx, 112, Dart2Parser::RuleExpressionElement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(979);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionListContext ------------------------------------------------------------------

Dart2Parser::ExpressionListContext::ExpressionListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Dart2Parser::ExpressionContext *> Dart2Parser::ExpressionListContext::expression() {
  return getRuleContexts<Dart2Parser::ExpressionContext>();
}

Dart2Parser::ExpressionContext* Dart2Parser::ExpressionListContext::expression(size_t i) {
  return getRuleContext<Dart2Parser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> Dart2Parser::ExpressionListContext::C() {
  return getTokens(Dart2Parser::C);
}

tree::TerminalNode* Dart2Parser::ExpressionListContext::C(size_t i) {
  return getToken(Dart2Parser::C, i);
}


size_t Dart2Parser::ExpressionListContext::getRuleIndex() const {
  return Dart2Parser::RuleExpressionList;
}

void Dart2Parser::ExpressionListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpressionList(this);
}

void Dart2Parser::ExpressionListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpressionList(this);
}

Dart2Parser::ExpressionListContext* Dart2Parser::expressionList() {
  ExpressionListContext *_localctx = _tracker.createInstance<ExpressionListContext>(_ctx, getState());
  enterRule(_localctx, 114, Dart2Parser::RuleExpressionList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(981);
    expression();
    setState(986);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 83, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(982);
        match(Dart2Parser::C);
        setState(983);
        expression(); 
      }
      setState(988);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 83, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionStatementContext ------------------------------------------------------------------

Dart2Parser::ExpressionStatementContext::ExpressionStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::ExpressionStatementContext::SC() {
  return getToken(Dart2Parser::SC, 0);
}

Dart2Parser::ExpressionContext* Dart2Parser::ExpressionStatementContext::expression() {
  return getRuleContext<Dart2Parser::ExpressionContext>(0);
}


size_t Dart2Parser::ExpressionStatementContext::getRuleIndex() const {
  return Dart2Parser::RuleExpressionStatement;
}

void Dart2Parser::ExpressionStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpressionStatement(this);
}

void Dart2Parser::ExpressionStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpressionStatement(this);
}

Dart2Parser::ExpressionStatementContext* Dart2Parser::expressionStatement() {
  ExpressionStatementContext *_localctx = _tracker.createInstance<ExpressionStatementContext>(_ctx, getState());
  enterRule(_localctx, 116, Dart2Parser::RuleExpressionStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(990);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -8734731060839972864) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 2271484645057699477) != 0)) {
      setState(989);
      expression();
    }
    setState(992);
    match(Dart2Parser::SC);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionWithoutCascadeContext ------------------------------------------------------------------

Dart2Parser::ExpressionWithoutCascadeContext::ExpressionWithoutCascadeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::AssignableExpressionContext* Dart2Parser::ExpressionWithoutCascadeContext::assignableExpression() {
  return getRuleContext<Dart2Parser::AssignableExpressionContext>(0);
}

Dart2Parser::AssignmentOperatorContext* Dart2Parser::ExpressionWithoutCascadeContext::assignmentOperator() {
  return getRuleContext<Dart2Parser::AssignmentOperatorContext>(0);
}

Dart2Parser::ExpressionWithoutCascadeContext* Dart2Parser::ExpressionWithoutCascadeContext::expressionWithoutCascade() {
  return getRuleContext<Dart2Parser::ExpressionWithoutCascadeContext>(0);
}

Dart2Parser::ConditionalExpressionContext* Dart2Parser::ExpressionWithoutCascadeContext::conditionalExpression() {
  return getRuleContext<Dart2Parser::ConditionalExpressionContext>(0);
}

Dart2Parser::ThrowExpressionWithoutCascadeContext* Dart2Parser::ExpressionWithoutCascadeContext::throwExpressionWithoutCascade() {
  return getRuleContext<Dart2Parser::ThrowExpressionWithoutCascadeContext>(0);
}


size_t Dart2Parser::ExpressionWithoutCascadeContext::getRuleIndex() const {
  return Dart2Parser::RuleExpressionWithoutCascade;
}

void Dart2Parser::ExpressionWithoutCascadeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpressionWithoutCascade(this);
}

void Dart2Parser::ExpressionWithoutCascadeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpressionWithoutCascade(this);
}

Dart2Parser::ExpressionWithoutCascadeContext* Dart2Parser::expressionWithoutCascade() {
  ExpressionWithoutCascadeContext *_localctx = _tracker.createInstance<ExpressionWithoutCascadeContext>(_ctx, getState());
  enterRule(_localctx, 118, Dart2Parser::RuleExpressionWithoutCascade);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1000);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 85, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(994);
      assignableExpression();
      setState(995);
      assignmentOperator();
      setState(996);
      expressionWithoutCascade();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(998);
      conditionalExpression();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(999);
      throwExpressionWithoutCascade();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExtensionDeclarationContext ------------------------------------------------------------------

Dart2Parser::ExtensionDeclarationContext::ExtensionDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::ExtensionDeclarationContext::EXTENSION_() {
  return getToken(Dart2Parser::EXTENSION_, 0);
}

tree::TerminalNode* Dart2Parser::ExtensionDeclarationContext::ON_() {
  return getToken(Dart2Parser::ON_, 0);
}

Dart2Parser::TypeContext* Dart2Parser::ExtensionDeclarationContext::type() {
  return getRuleContext<Dart2Parser::TypeContext>(0);
}

tree::TerminalNode* Dart2Parser::ExtensionDeclarationContext::OBC() {
  return getToken(Dart2Parser::OBC, 0);
}

tree::TerminalNode* Dart2Parser::ExtensionDeclarationContext::CBC() {
  return getToken(Dart2Parser::CBC, 0);
}

Dart2Parser::IdentifierContext* Dart2Parser::ExtensionDeclarationContext::identifier() {
  return getRuleContext<Dart2Parser::IdentifierContext>(0);
}

Dart2Parser::TypeParametersContext* Dart2Parser::ExtensionDeclarationContext::typeParameters() {
  return getRuleContext<Dart2Parser::TypeParametersContext>(0);
}

std::vector<Dart2Parser::MetadataContext *> Dart2Parser::ExtensionDeclarationContext::metadata() {
  return getRuleContexts<Dart2Parser::MetadataContext>();
}

Dart2Parser::MetadataContext* Dart2Parser::ExtensionDeclarationContext::metadata(size_t i) {
  return getRuleContext<Dart2Parser::MetadataContext>(i);
}

std::vector<Dart2Parser::ClassMemberDeclarationContext *> Dart2Parser::ExtensionDeclarationContext::classMemberDeclaration() {
  return getRuleContexts<Dart2Parser::ClassMemberDeclarationContext>();
}

Dart2Parser::ClassMemberDeclarationContext* Dart2Parser::ExtensionDeclarationContext::classMemberDeclaration(size_t i) {
  return getRuleContext<Dart2Parser::ClassMemberDeclarationContext>(i);
}


size_t Dart2Parser::ExtensionDeclarationContext::getRuleIndex() const {
  return Dart2Parser::RuleExtensionDeclaration;
}

void Dart2Parser::ExtensionDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExtensionDeclaration(this);
}

void Dart2Parser::ExtensionDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExtensionDeclaration(this);
}

Dart2Parser::ExtensionDeclarationContext* Dart2Parser::extensionDeclaration() {
  ExtensionDeclarationContext *_localctx = _tracker.createInstance<ExtensionDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 120, Dart2Parser::RuleExtensionDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1002);
    match(Dart2Parser::EXTENSION_);
    setState(1004);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 86, _ctx)) {
    case 1: {
      setState(1003);
      identifier();
      break;
    }

    default:
      break;
    }
    setState(1007);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Dart2Parser::LT) {
      setState(1006);
      typeParameters();
    }
    setState(1009);
    match(Dart2Parser::ON_);
    setState(1010);
    type();
    setState(1011);
    match(Dart2Parser::OBC);
    setState(1017);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -8736983277098762224) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 1196874750185123477) != 0)) {
      setState(1012);
      metadata();
      setState(1013);
      classMemberDeclaration();
      setState(1019);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1020);
    match(Dart2Parser::CBC);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FactoryConstructorSignatureContext ------------------------------------------------------------------

Dart2Parser::FactoryConstructorSignatureContext::FactoryConstructorSignatureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::FactoryConstructorSignatureContext::FACTORY_() {
  return getToken(Dart2Parser::FACTORY_, 0);
}

Dart2Parser::ConstructorNameContext* Dart2Parser::FactoryConstructorSignatureContext::constructorName() {
  return getRuleContext<Dart2Parser::ConstructorNameContext>(0);
}

Dart2Parser::FormalParameterListContext* Dart2Parser::FactoryConstructorSignatureContext::formalParameterList() {
  return getRuleContext<Dart2Parser::FormalParameterListContext>(0);
}

tree::TerminalNode* Dart2Parser::FactoryConstructorSignatureContext::CONST_() {
  return getToken(Dart2Parser::CONST_, 0);
}


size_t Dart2Parser::FactoryConstructorSignatureContext::getRuleIndex() const {
  return Dart2Parser::RuleFactoryConstructorSignature;
}

void Dart2Parser::FactoryConstructorSignatureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFactoryConstructorSignature(this);
}

void Dart2Parser::FactoryConstructorSignatureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFactoryConstructorSignature(this);
}

Dart2Parser::FactoryConstructorSignatureContext* Dart2Parser::factoryConstructorSignature() {
  FactoryConstructorSignatureContext *_localctx = _tracker.createInstance<FactoryConstructorSignatureContext>(_ctx, getState());
  enterRule(_localctx, 122, Dart2Parser::RuleFactoryConstructorSignature);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1023);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Dart2Parser::CONST_) {
      setState(1022);
      match(Dart2Parser::CONST_);
    }
    setState(1025);
    match(Dart2Parser::FACTORY_);
    setState(1026);
    constructorName();
    setState(1027);
    formalParameterList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FieldFormalParameterContext ------------------------------------------------------------------

Dart2Parser::FieldFormalParameterContext::FieldFormalParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::FieldFormalParameterContext::THIS_() {
  return getToken(Dart2Parser::THIS_, 0);
}

tree::TerminalNode* Dart2Parser::FieldFormalParameterContext::D() {
  return getToken(Dart2Parser::D, 0);
}

Dart2Parser::IdentifierContext* Dart2Parser::FieldFormalParameterContext::identifier() {
  return getRuleContext<Dart2Parser::IdentifierContext>(0);
}

Dart2Parser::FinalConstVarOrTypeContext* Dart2Parser::FieldFormalParameterContext::finalConstVarOrType() {
  return getRuleContext<Dart2Parser::FinalConstVarOrTypeContext>(0);
}

Dart2Parser::FormalParameterPartContext* Dart2Parser::FieldFormalParameterContext::formalParameterPart() {
  return getRuleContext<Dart2Parser::FormalParameterPartContext>(0);
}

tree::TerminalNode* Dart2Parser::FieldFormalParameterContext::QU() {
  return getToken(Dart2Parser::QU, 0);
}


size_t Dart2Parser::FieldFormalParameterContext::getRuleIndex() const {
  return Dart2Parser::RuleFieldFormalParameter;
}

void Dart2Parser::FieldFormalParameterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFieldFormalParameter(this);
}

void Dart2Parser::FieldFormalParameterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFieldFormalParameter(this);
}

Dart2Parser::FieldFormalParameterContext* Dart2Parser::fieldFormalParameter() {
  FieldFormalParameterContext *_localctx = _tracker.createInstance<FieldFormalParameterContext>(_ctx, getState());
  enterRule(_localctx, 124, Dart2Parser::RuleFieldFormalParameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1030);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -8791026472627208192) != 0) || ((((_la - 69) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 69)) & 74733944460841473) != 0)) {
      setState(1029);
      finalConstVarOrType();
    }
    setState(1032);
    match(Dart2Parser::THIS_);
    setState(1033);
    match(Dart2Parser::D);
    setState(1034);
    identifier();
    setState(1039);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Dart2Parser::LT

    || _la == Dart2Parser::OP) {
      setState(1035);
      formalParameterPart();
      setState(1037);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Dart2Parser::QU) {
        setState(1036);
        match(Dart2Parser::QU);
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FieldInitializerContext ------------------------------------------------------------------

Dart2Parser::FieldInitializerContext::FieldInitializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::IdentifierContext* Dart2Parser::FieldInitializerContext::identifier() {
  return getRuleContext<Dart2Parser::IdentifierContext>(0);
}

tree::TerminalNode* Dart2Parser::FieldInitializerContext::EQ() {
  return getToken(Dart2Parser::EQ, 0);
}

Dart2Parser::InitializerExpressionContext* Dart2Parser::FieldInitializerContext::initializerExpression() {
  return getRuleContext<Dart2Parser::InitializerExpressionContext>(0);
}

tree::TerminalNode* Dart2Parser::FieldInitializerContext::THIS_() {
  return getToken(Dart2Parser::THIS_, 0);
}

tree::TerminalNode* Dart2Parser::FieldInitializerContext::D() {
  return getToken(Dart2Parser::D, 0);
}


size_t Dart2Parser::FieldInitializerContext::getRuleIndex() const {
  return Dart2Parser::RuleFieldInitializer;
}

void Dart2Parser::FieldInitializerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFieldInitializer(this);
}

void Dart2Parser::FieldInitializerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFieldInitializer(this);
}

Dart2Parser::FieldInitializerContext* Dart2Parser::fieldInitializer() {
  FieldInitializerContext *_localctx = _tracker.createInstance<FieldInitializerContext>(_ctx, getState());
  enterRule(_localctx, 126, Dart2Parser::RuleFieldInitializer);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1043);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Dart2Parser::THIS_) {
      setState(1041);
      match(Dart2Parser::THIS_);
      setState(1042);
      match(Dart2Parser::D);
    }
    setState(1045);
    identifier();
    setState(1046);
    match(Dart2Parser::EQ);
    setState(1047);
    initializerExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FinalConstVarOrTypeContext ------------------------------------------------------------------

Dart2Parser::FinalConstVarOrTypeContext::FinalConstVarOrTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::FinalConstVarOrTypeContext::FINAL_() {
  return getToken(Dart2Parser::FINAL_, 0);
}

tree::TerminalNode* Dart2Parser::FinalConstVarOrTypeContext::LATE_() {
  return getToken(Dart2Parser::LATE_, 0);
}

Dart2Parser::TypeContext* Dart2Parser::FinalConstVarOrTypeContext::type() {
  return getRuleContext<Dart2Parser::TypeContext>(0);
}

tree::TerminalNode* Dart2Parser::FinalConstVarOrTypeContext::CONST_() {
  return getToken(Dart2Parser::CONST_, 0);
}

Dart2Parser::VarOrTypeContext* Dart2Parser::FinalConstVarOrTypeContext::varOrType() {
  return getRuleContext<Dart2Parser::VarOrTypeContext>(0);
}


size_t Dart2Parser::FinalConstVarOrTypeContext::getRuleIndex() const {
  return Dart2Parser::RuleFinalConstVarOrType;
}

void Dart2Parser::FinalConstVarOrTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFinalConstVarOrType(this);
}

void Dart2Parser::FinalConstVarOrTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFinalConstVarOrType(this);
}

Dart2Parser::FinalConstVarOrTypeContext* Dart2Parser::finalConstVarOrType() {
  FinalConstVarOrTypeContext *_localctx = _tracker.createInstance<FinalConstVarOrTypeContext>(_ctx, getState());
  enterRule(_localctx, 128, Dart2Parser::RuleFinalConstVarOrType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1064);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 98, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1050);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Dart2Parser::LATE_) {
        setState(1049);
        match(Dart2Parser::LATE_);
      }
      setState(1052);
      match(Dart2Parser::FINAL_);
      setState(1054);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 95, _ctx)) {
      case 1: {
        setState(1053);
        type();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1056);
      match(Dart2Parser::CONST_);
      setState(1058);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 96, _ctx)) {
      case 1: {
        setState(1057);
        type();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1061);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Dart2Parser::LATE_) {
        setState(1060);
        match(Dart2Parser::LATE_);
      }
      setState(1063);
      varOrType();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FinallyPartContext ------------------------------------------------------------------

Dart2Parser::FinallyPartContext::FinallyPartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::FinallyPartContext::FINALLY_() {
  return getToken(Dart2Parser::FINALLY_, 0);
}

Dart2Parser::BlockContext* Dart2Parser::FinallyPartContext::block() {
  return getRuleContext<Dart2Parser::BlockContext>(0);
}


size_t Dart2Parser::FinallyPartContext::getRuleIndex() const {
  return Dart2Parser::RuleFinallyPart;
}

void Dart2Parser::FinallyPartContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFinallyPart(this);
}

void Dart2Parser::FinallyPartContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFinallyPart(this);
}

Dart2Parser::FinallyPartContext* Dart2Parser::finallyPart() {
  FinallyPartContext *_localctx = _tracker.createInstance<FinallyPartContext>(_ctx, getState());
  enterRule(_localctx, 130, Dart2Parser::RuleFinallyPart);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1066);
    match(Dart2Parser::FINALLY_);
    setState(1067);
    block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForElementContext ------------------------------------------------------------------

Dart2Parser::ForElementContext::ForElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::ForElementContext::FOR_() {
  return getToken(Dart2Parser::FOR_, 0);
}

tree::TerminalNode* Dart2Parser::ForElementContext::OP() {
  return getToken(Dart2Parser::OP, 0);
}

Dart2Parser::ForLoopPartsContext* Dart2Parser::ForElementContext::forLoopParts() {
  return getRuleContext<Dart2Parser::ForLoopPartsContext>(0);
}

tree::TerminalNode* Dart2Parser::ForElementContext::CP() {
  return getToken(Dart2Parser::CP, 0);
}

Dart2Parser::ElementContext* Dart2Parser::ForElementContext::element() {
  return getRuleContext<Dart2Parser::ElementContext>(0);
}

tree::TerminalNode* Dart2Parser::ForElementContext::AWAIT_() {
  return getToken(Dart2Parser::AWAIT_, 0);
}


size_t Dart2Parser::ForElementContext::getRuleIndex() const {
  return Dart2Parser::RuleForElement;
}

void Dart2Parser::ForElementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterForElement(this);
}

void Dart2Parser::ForElementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitForElement(this);
}

Dart2Parser::ForElementContext* Dart2Parser::forElement() {
  ForElementContext *_localctx = _tracker.createInstance<ForElementContext>(_ctx, getState());
  enterRule(_localctx, 132, Dart2Parser::RuleForElement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1070);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Dart2Parser::AWAIT_) {
      setState(1069);
      match(Dart2Parser::AWAIT_);
    }
    setState(1072);
    match(Dart2Parser::FOR_);
    setState(1073);
    match(Dart2Parser::OP);
    setState(1074);
    forLoopParts();
    setState(1075);
    match(Dart2Parser::CP);
    setState(1076);
    element();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForInitializerStatementContext ------------------------------------------------------------------

Dart2Parser::ForInitializerStatementContext::ForInitializerStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::LocalVariableDeclarationContext* Dart2Parser::ForInitializerStatementContext::localVariableDeclaration() {
  return getRuleContext<Dart2Parser::LocalVariableDeclarationContext>(0);
}

tree::TerminalNode* Dart2Parser::ForInitializerStatementContext::SC() {
  return getToken(Dart2Parser::SC, 0);
}

Dart2Parser::ExpressionContext* Dart2Parser::ForInitializerStatementContext::expression() {
  return getRuleContext<Dart2Parser::ExpressionContext>(0);
}


size_t Dart2Parser::ForInitializerStatementContext::getRuleIndex() const {
  return Dart2Parser::RuleForInitializerStatement;
}

void Dart2Parser::ForInitializerStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterForInitializerStatement(this);
}

void Dart2Parser::ForInitializerStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitForInitializerStatement(this);
}

Dart2Parser::ForInitializerStatementContext* Dart2Parser::forInitializerStatement() {
  ForInitializerStatementContext *_localctx = _tracker.createInstance<ForInitializerStatementContext>(_ctx, getState());
  enterRule(_localctx, 134, Dart2Parser::RuleForInitializerStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1083);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 101, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1078);
      localVariableDeclaration();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1080);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -8734731060839972864) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 65)) & 2271484645057699477) != 0)) {
        setState(1079);
        expression();
      }
      setState(1082);
      match(Dart2Parser::SC);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForLoopPartsContext ------------------------------------------------------------------

Dart2Parser::ForLoopPartsContext::ForLoopPartsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::ForInitializerStatementContext* Dart2Parser::ForLoopPartsContext::forInitializerStatement() {
  return getRuleContext<Dart2Parser::ForInitializerStatementContext>(0);
}

tree::TerminalNode* Dart2Parser::ForLoopPartsContext::SC() {
  return getToken(Dart2Parser::SC, 0);
}

Dart2Parser::ExpressionContext* Dart2Parser::ForLoopPartsContext::expression() {
  return getRuleContext<Dart2Parser::ExpressionContext>(0);
}

Dart2Parser::ExpressionListContext* Dart2Parser::ForLoopPartsContext::expressionList() {
  return getRuleContext<Dart2Parser::ExpressionListContext>(0);
}

Dart2Parser::MetadataContext* Dart2Parser::ForLoopPartsContext::metadata() {
  return getRuleContext<Dart2Parser::MetadataContext>(0);
}

Dart2Parser::DeclaredIdentifierContext* Dart2Parser::ForLoopPartsContext::declaredIdentifier() {
  return getRuleContext<Dart2Parser::DeclaredIdentifierContext>(0);
}

tree::TerminalNode* Dart2Parser::ForLoopPartsContext::IN_() {
  return getToken(Dart2Parser::IN_, 0);
}

Dart2Parser::IdentifierContext* Dart2Parser::ForLoopPartsContext::identifier() {
  return getRuleContext<Dart2Parser::IdentifierContext>(0);
}


size_t Dart2Parser::ForLoopPartsContext::getRuleIndex() const {
  return Dart2Parser::RuleForLoopParts;
}

void Dart2Parser::ForLoopPartsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterForLoopParts(this);
}

void Dart2Parser::ForLoopPartsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitForLoopParts(this);
}

Dart2Parser::ForLoopPartsContext* Dart2Parser::forLoopParts() {
  ForLoopPartsContext *_localctx = _tracker.createInstance<ForLoopPartsContext>(_ctx, getState());
  enterRule(_localctx, 136, Dart2Parser::RuleForLoopParts);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1102);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 104, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1085);
      forInitializerStatement();
      setState(1087);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -8734731060839972864) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 65)) & 2271484645057699477) != 0)) {
        setState(1086);
        expression();
      }
      setState(1089);
      match(Dart2Parser::SC);
      setState(1091);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -8734731060839972864) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 65)) & 2271484645057699477) != 0)) {
        setState(1090);
        expressionList();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1093);
      metadata();
      setState(1094);
      declaredIdentifier();
      setState(1095);
      match(Dart2Parser::IN_);
      setState(1096);
      expression();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1098);
      identifier();
      setState(1099);
      match(Dart2Parser::IN_);
      setState(1100);
      expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FormalParameterListContext ------------------------------------------------------------------

Dart2Parser::FormalParameterListContext::FormalParameterListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::FormalParameterListContext::OP() {
  return getToken(Dart2Parser::OP, 0);
}

tree::TerminalNode* Dart2Parser::FormalParameterListContext::CP() {
  return getToken(Dart2Parser::CP, 0);
}

Dart2Parser::NormalFormalParametersContext* Dart2Parser::FormalParameterListContext::normalFormalParameters() {
  return getRuleContext<Dart2Parser::NormalFormalParametersContext>(0);
}

tree::TerminalNode* Dart2Parser::FormalParameterListContext::C() {
  return getToken(Dart2Parser::C, 0);
}

Dart2Parser::OptionalOrNamedFormalParametersContext* Dart2Parser::FormalParameterListContext::optionalOrNamedFormalParameters() {
  return getRuleContext<Dart2Parser::OptionalOrNamedFormalParametersContext>(0);
}


size_t Dart2Parser::FormalParameterListContext::getRuleIndex() const {
  return Dart2Parser::RuleFormalParameterList;
}

void Dart2Parser::FormalParameterListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFormalParameterList(this);
}

void Dart2Parser::FormalParameterListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFormalParameterList(this);
}

Dart2Parser::FormalParameterListContext* Dart2Parser::formalParameterList() {
  FormalParameterListContext *_localctx = _tracker.createInstance<FormalParameterListContext>(_ctx, getState());
  enterRule(_localctx, 138, Dart2Parser::RuleFormalParameterList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1123);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 106, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1104);
      match(Dart2Parser::OP);
      setState(1105);
      match(Dart2Parser::CP);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1106);
      match(Dart2Parser::OP);
      setState(1107);
      normalFormalParameters();
      setState(1109);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Dart2Parser::C) {
        setState(1108);
        match(Dart2Parser::C);
      }
      setState(1111);
      match(Dart2Parser::CP);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1113);
      match(Dart2Parser::OP);
      setState(1114);
      normalFormalParameters();
      setState(1115);
      match(Dart2Parser::C);
      setState(1116);
      optionalOrNamedFormalParameters();
      setState(1117);
      match(Dart2Parser::CP);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1119);
      match(Dart2Parser::OP);
      setState(1120);
      optionalOrNamedFormalParameters();
      setState(1121);
      match(Dart2Parser::CP);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FormalParameterPartContext ------------------------------------------------------------------

Dart2Parser::FormalParameterPartContext::FormalParameterPartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::FormalParameterListContext* Dart2Parser::FormalParameterPartContext::formalParameterList() {
  return getRuleContext<Dart2Parser::FormalParameterListContext>(0);
}

Dart2Parser::TypeParametersContext* Dart2Parser::FormalParameterPartContext::typeParameters() {
  return getRuleContext<Dart2Parser::TypeParametersContext>(0);
}


size_t Dart2Parser::FormalParameterPartContext::getRuleIndex() const {
  return Dart2Parser::RuleFormalParameterPart;
}

void Dart2Parser::FormalParameterPartContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFormalParameterPart(this);
}

void Dart2Parser::FormalParameterPartContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFormalParameterPart(this);
}

Dart2Parser::FormalParameterPartContext* Dart2Parser::formalParameterPart() {
  FormalParameterPartContext *_localctx = _tracker.createInstance<FormalParameterPartContext>(_ctx, getState());
  enterRule(_localctx, 140, Dart2Parser::RuleFormalParameterPart);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1126);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Dart2Parser::LT) {
      setState(1125);
      typeParameters();
    }
    setState(1128);
    formalParameterList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForStatementContext ------------------------------------------------------------------

Dart2Parser::ForStatementContext::ForStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::ForStatementContext::FOR_() {
  return getToken(Dart2Parser::FOR_, 0);
}

tree::TerminalNode* Dart2Parser::ForStatementContext::OP() {
  return getToken(Dart2Parser::OP, 0);
}

Dart2Parser::ForLoopPartsContext* Dart2Parser::ForStatementContext::forLoopParts() {
  return getRuleContext<Dart2Parser::ForLoopPartsContext>(0);
}

tree::TerminalNode* Dart2Parser::ForStatementContext::CP() {
  return getToken(Dart2Parser::CP, 0);
}

Dart2Parser::StatementContext* Dart2Parser::ForStatementContext::statement() {
  return getRuleContext<Dart2Parser::StatementContext>(0);
}

tree::TerminalNode* Dart2Parser::ForStatementContext::AWAIT_() {
  return getToken(Dart2Parser::AWAIT_, 0);
}


size_t Dart2Parser::ForStatementContext::getRuleIndex() const {
  return Dart2Parser::RuleForStatement;
}

void Dart2Parser::ForStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterForStatement(this);
}

void Dart2Parser::ForStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitForStatement(this);
}

Dart2Parser::ForStatementContext* Dart2Parser::forStatement() {
  ForStatementContext *_localctx = _tracker.createInstance<ForStatementContext>(_ctx, getState());
  enterRule(_localctx, 142, Dart2Parser::RuleForStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1131);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Dart2Parser::AWAIT_) {
      setState(1130);
      match(Dart2Parser::AWAIT_);
    }
    setState(1133);
    match(Dart2Parser::FOR_);
    setState(1134);
    match(Dart2Parser::OP);
    setState(1135);
    forLoopParts();
    setState(1136);
    match(Dart2Parser::CP);
    setState(1137);
    statement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionBodyContext ------------------------------------------------------------------

Dart2Parser::FunctionBodyContext::FunctionBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::FunctionBodyContext::NATIVE_() {
  return getToken(Dart2Parser::NATIVE_, 0);
}

tree::TerminalNode* Dart2Parser::FunctionBodyContext::SC() {
  return getToken(Dart2Parser::SC, 0);
}

Dart2Parser::StringLiteralContext* Dart2Parser::FunctionBodyContext::stringLiteral() {
  return getRuleContext<Dart2Parser::StringLiteralContext>(0);
}

tree::TerminalNode* Dart2Parser::FunctionBodyContext::EG() {
  return getToken(Dart2Parser::EG, 0);
}

Dart2Parser::ExpressionContext* Dart2Parser::FunctionBodyContext::expression() {
  return getRuleContext<Dart2Parser::ExpressionContext>(0);
}

tree::TerminalNode* Dart2Parser::FunctionBodyContext::ASYNC_() {
  return getToken(Dart2Parser::ASYNC_, 0);
}

Dart2Parser::BlockContext* Dart2Parser::FunctionBodyContext::block() {
  return getRuleContext<Dart2Parser::BlockContext>(0);
}

tree::TerminalNode* Dart2Parser::FunctionBodyContext::SYNC_() {
  return getToken(Dart2Parser::SYNC_, 0);
}

tree::TerminalNode* Dart2Parser::FunctionBodyContext::ST() {
  return getToken(Dart2Parser::ST, 0);
}


size_t Dart2Parser::FunctionBodyContext::getRuleIndex() const {
  return Dart2Parser::RuleFunctionBody;
}

void Dart2Parser::FunctionBodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunctionBody(this);
}

void Dart2Parser::FunctionBodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunctionBody(this);
}

Dart2Parser::FunctionBodyContext* Dart2Parser::functionBody() {
  FunctionBodyContext *_localctx = _tracker.createInstance<FunctionBodyContext>(_ctx, getState());
  enterRule(_localctx, 144, Dart2Parser::RuleFunctionBody);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1160);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 113, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1139);
      match(Dart2Parser::NATIVE_);
      setState(1141);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Dart2Parser::SingleLineString

      || _la == Dart2Parser::MultiLineString) {
        setState(1140);
        stringLiteral();
      }
      setState(1143);
      match(Dart2Parser::SC);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1145);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Dart2Parser::ASYNC_) {
        setState(1144);
        match(Dart2Parser::ASYNC_);
      }
      setState(1147);
      match(Dart2Parser::EG);
      setState(1148);
      expression();
      setState(1149);
      match(Dart2Parser::SC);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1157);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case Dart2Parser::ASYNC_: {
          setState(1151);
          match(Dart2Parser::ASYNC_);
          setState(1153);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == Dart2Parser::ST) {
            setState(1152);
            match(Dart2Parser::ST);
          }
          break;
        }

        case Dart2Parser::SYNC_: {
          setState(1155);
          match(Dart2Parser::SYNC_);
          setState(1156);
          match(Dart2Parser::ST);
          break;
        }

        case Dart2Parser::OBC: {
          break;
        }

      default:
        break;
      }
      setState(1159);
      block();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionExpressionContext ------------------------------------------------------------------

Dart2Parser::FunctionExpressionContext::FunctionExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::FormalParameterPartContext* Dart2Parser::FunctionExpressionContext::formalParameterPart() {
  return getRuleContext<Dart2Parser::FormalParameterPartContext>(0);
}

Dart2Parser::FunctionExpressionBodyContext* Dart2Parser::FunctionExpressionContext::functionExpressionBody() {
  return getRuleContext<Dart2Parser::FunctionExpressionBodyContext>(0);
}


size_t Dart2Parser::FunctionExpressionContext::getRuleIndex() const {
  return Dart2Parser::RuleFunctionExpression;
}

void Dart2Parser::FunctionExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunctionExpression(this);
}

void Dart2Parser::FunctionExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunctionExpression(this);
}

Dart2Parser::FunctionExpressionContext* Dart2Parser::functionExpression() {
  FunctionExpressionContext *_localctx = _tracker.createInstance<FunctionExpressionContext>(_ctx, getState());
  enterRule(_localctx, 146, Dart2Parser::RuleFunctionExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1162);
    formalParameterPart();
    setState(1163);
    functionExpressionBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionExpressionBodyContext ------------------------------------------------------------------

Dart2Parser::FunctionExpressionBodyContext::FunctionExpressionBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::FunctionExpressionBodyContext::EG() {
  return getToken(Dart2Parser::EG, 0);
}

Dart2Parser::ExpressionContext* Dart2Parser::FunctionExpressionBodyContext::expression() {
  return getRuleContext<Dart2Parser::ExpressionContext>(0);
}

tree::TerminalNode* Dart2Parser::FunctionExpressionBodyContext::ASYNC_() {
  return getToken(Dart2Parser::ASYNC_, 0);
}

Dart2Parser::BlockContext* Dart2Parser::FunctionExpressionBodyContext::block() {
  return getRuleContext<Dart2Parser::BlockContext>(0);
}

tree::TerminalNode* Dart2Parser::FunctionExpressionBodyContext::SYNC_() {
  return getToken(Dart2Parser::SYNC_, 0);
}

tree::TerminalNode* Dart2Parser::FunctionExpressionBodyContext::ST() {
  return getToken(Dart2Parser::ST, 0);
}


size_t Dart2Parser::FunctionExpressionBodyContext::getRuleIndex() const {
  return Dart2Parser::RuleFunctionExpressionBody;
}

void Dart2Parser::FunctionExpressionBodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunctionExpressionBody(this);
}

void Dart2Parser::FunctionExpressionBodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunctionExpressionBody(this);
}

Dart2Parser::FunctionExpressionBodyContext* Dart2Parser::functionExpressionBody() {
  FunctionExpressionBodyContext *_localctx = _tracker.createInstance<FunctionExpressionBodyContext>(_ctx, getState());
  enterRule(_localctx, 148, Dart2Parser::RuleFunctionExpressionBody);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1179);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 117, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1166);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Dart2Parser::ASYNC_) {
        setState(1165);
        match(Dart2Parser::ASYNC_);
      }
      setState(1168);
      match(Dart2Parser::EG);
      setState(1169);
      expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1176);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case Dart2Parser::ASYNC_: {
          setState(1170);
          match(Dart2Parser::ASYNC_);
          setState(1172);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == Dart2Parser::ST) {
            setState(1171);
            match(Dart2Parser::ST);
          }
          break;
        }

        case Dart2Parser::SYNC_: {
          setState(1174);
          match(Dart2Parser::SYNC_);
          setState(1175);
          match(Dart2Parser::ST);
          break;
        }

        case Dart2Parser::OBC: {
          break;
        }

      default:
        break;
      }
      setState(1178);
      block();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionFormalParameterContext ------------------------------------------------------------------

Dart2Parser::FunctionFormalParameterContext::FunctionFormalParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::IdentifierContext* Dart2Parser::FunctionFormalParameterContext::identifier() {
  return getRuleContext<Dart2Parser::IdentifierContext>(0);
}

Dart2Parser::FormalParameterPartContext* Dart2Parser::FunctionFormalParameterContext::formalParameterPart() {
  return getRuleContext<Dart2Parser::FormalParameterPartContext>(0);
}

tree::TerminalNode* Dart2Parser::FunctionFormalParameterContext::COVARIANT_() {
  return getToken(Dart2Parser::COVARIANT_, 0);
}

Dart2Parser::TypeContext* Dart2Parser::FunctionFormalParameterContext::type() {
  return getRuleContext<Dart2Parser::TypeContext>(0);
}

tree::TerminalNode* Dart2Parser::FunctionFormalParameterContext::QU() {
  return getToken(Dart2Parser::QU, 0);
}


size_t Dart2Parser::FunctionFormalParameterContext::getRuleIndex() const {
  return Dart2Parser::RuleFunctionFormalParameter;
}

void Dart2Parser::FunctionFormalParameterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunctionFormalParameter(this);
}

void Dart2Parser::FunctionFormalParameterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunctionFormalParameter(this);
}

Dart2Parser::FunctionFormalParameterContext* Dart2Parser::functionFormalParameter() {
  FunctionFormalParameterContext *_localctx = _tracker.createInstance<FunctionFormalParameterContext>(_ctx, getState());
  enterRule(_localctx, 150, Dart2Parser::RuleFunctionFormalParameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1182);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 118, _ctx)) {
    case 1: {
      setState(1181);
      match(Dart2Parser::COVARIANT_);
      break;
    }

    default:
      break;
    }
    setState(1185);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 119, _ctx)) {
    case 1: {
      setState(1184);
      type();
      break;
    }

    default:
      break;
    }
    setState(1187);
    identifier();
    setState(1188);
    formalParameterPart();
    setState(1190);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Dart2Parser::QU) {
      setState(1189);
      match(Dart2Parser::QU);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionPrefixContext ------------------------------------------------------------------

Dart2Parser::FunctionPrefixContext::FunctionPrefixContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::IdentifierContext* Dart2Parser::FunctionPrefixContext::identifier() {
  return getRuleContext<Dart2Parser::IdentifierContext>(0);
}

Dart2Parser::TypeContext* Dart2Parser::FunctionPrefixContext::type() {
  return getRuleContext<Dart2Parser::TypeContext>(0);
}


size_t Dart2Parser::FunctionPrefixContext::getRuleIndex() const {
  return Dart2Parser::RuleFunctionPrefix;
}

void Dart2Parser::FunctionPrefixContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunctionPrefix(this);
}

void Dart2Parser::FunctionPrefixContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunctionPrefix(this);
}

Dart2Parser::FunctionPrefixContext* Dart2Parser::functionPrefix() {
  FunctionPrefixContext *_localctx = _tracker.createInstance<FunctionPrefixContext>(_ctx, getState());
  enterRule(_localctx, 152, Dart2Parser::RuleFunctionPrefix);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1193);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 121, _ctx)) {
    case 1: {
      setState(1192);
      type();
      break;
    }

    default:
      break;
    }
    setState(1195);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionSignatureContext ------------------------------------------------------------------

Dart2Parser::FunctionSignatureContext::FunctionSignatureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::IdentifierContext* Dart2Parser::FunctionSignatureContext::identifier() {
  return getRuleContext<Dart2Parser::IdentifierContext>(0);
}

Dart2Parser::FormalParameterPartContext* Dart2Parser::FunctionSignatureContext::formalParameterPart() {
  return getRuleContext<Dart2Parser::FormalParameterPartContext>(0);
}

Dart2Parser::TypeContext* Dart2Parser::FunctionSignatureContext::type() {
  return getRuleContext<Dart2Parser::TypeContext>(0);
}


size_t Dart2Parser::FunctionSignatureContext::getRuleIndex() const {
  return Dart2Parser::RuleFunctionSignature;
}

void Dart2Parser::FunctionSignatureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunctionSignature(this);
}

void Dart2Parser::FunctionSignatureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunctionSignature(this);
}

Dart2Parser::FunctionSignatureContext* Dart2Parser::functionSignature() {
  FunctionSignatureContext *_localctx = _tracker.createInstance<FunctionSignatureContext>(_ctx, getState());
  enterRule(_localctx, 154, Dart2Parser::RuleFunctionSignature);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1198);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 122, _ctx)) {
    case 1: {
      setState(1197);
      type();
      break;
    }

    default:
      break;
    }
    setState(1200);
    identifier();
    setState(1201);
    formalParameterPart();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionTypeContext ------------------------------------------------------------------

Dart2Parser::FunctionTypeContext::FunctionTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::FunctionTypeTailsContext* Dart2Parser::FunctionTypeContext::functionTypeTails() {
  return getRuleContext<Dart2Parser::FunctionTypeTailsContext>(0);
}

Dart2Parser::TypeNotFunctionContext* Dart2Parser::FunctionTypeContext::typeNotFunction() {
  return getRuleContext<Dart2Parser::TypeNotFunctionContext>(0);
}


size_t Dart2Parser::FunctionTypeContext::getRuleIndex() const {
  return Dart2Parser::RuleFunctionType;
}

void Dart2Parser::FunctionTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunctionType(this);
}

void Dart2Parser::FunctionTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunctionType(this);
}

Dart2Parser::FunctionTypeContext* Dart2Parser::functionType() {
  FunctionTypeContext *_localctx = _tracker.createInstance<FunctionTypeContext>(_ctx, getState());
  enterRule(_localctx, 156, Dart2Parser::RuleFunctionType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1207);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 123, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1203);
      functionTypeTails();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1204);
      typeNotFunction();
      setState(1205);
      functionTypeTails();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionTypeAliasContext ------------------------------------------------------------------

Dart2Parser::FunctionTypeAliasContext::FunctionTypeAliasContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::FunctionPrefixContext* Dart2Parser::FunctionTypeAliasContext::functionPrefix() {
  return getRuleContext<Dart2Parser::FunctionPrefixContext>(0);
}

Dart2Parser::FormalParameterPartContext* Dart2Parser::FunctionTypeAliasContext::formalParameterPart() {
  return getRuleContext<Dart2Parser::FormalParameterPartContext>(0);
}

tree::TerminalNode* Dart2Parser::FunctionTypeAliasContext::SC() {
  return getToken(Dart2Parser::SC, 0);
}


size_t Dart2Parser::FunctionTypeAliasContext::getRuleIndex() const {
  return Dart2Parser::RuleFunctionTypeAlias;
}

void Dart2Parser::FunctionTypeAliasContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunctionTypeAlias(this);
}

void Dart2Parser::FunctionTypeAliasContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunctionTypeAlias(this);
}

Dart2Parser::FunctionTypeAliasContext* Dart2Parser::functionTypeAlias() {
  FunctionTypeAliasContext *_localctx = _tracker.createInstance<FunctionTypeAliasContext>(_ctx, getState());
  enterRule(_localctx, 158, Dart2Parser::RuleFunctionTypeAlias);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1209);
    functionPrefix();
    setState(1210);
    formalParameterPart();
    setState(1211);
    match(Dart2Parser::SC);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionTypeTailContext ------------------------------------------------------------------

Dart2Parser::FunctionTypeTailContext::FunctionTypeTailContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::FunctionTypeTailContext::FUNCTION_() {
  return getToken(Dart2Parser::FUNCTION_, 0);
}

Dart2Parser::ParameterTypeListContext* Dart2Parser::FunctionTypeTailContext::parameterTypeList() {
  return getRuleContext<Dart2Parser::ParameterTypeListContext>(0);
}

Dart2Parser::TypeParametersContext* Dart2Parser::FunctionTypeTailContext::typeParameters() {
  return getRuleContext<Dart2Parser::TypeParametersContext>(0);
}


size_t Dart2Parser::FunctionTypeTailContext::getRuleIndex() const {
  return Dart2Parser::RuleFunctionTypeTail;
}

void Dart2Parser::FunctionTypeTailContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunctionTypeTail(this);
}

void Dart2Parser::FunctionTypeTailContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunctionTypeTail(this);
}

Dart2Parser::FunctionTypeTailContext* Dart2Parser::functionTypeTail() {
  FunctionTypeTailContext *_localctx = _tracker.createInstance<FunctionTypeTailContext>(_ctx, getState());
  enterRule(_localctx, 160, Dart2Parser::RuleFunctionTypeTail);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1213);
    match(Dart2Parser::FUNCTION_);
    setState(1215);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Dart2Parser::LT) {
      setState(1214);
      typeParameters();
    }
    setState(1217);
    parameterTypeList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionTypeTailsContext ------------------------------------------------------------------

Dart2Parser::FunctionTypeTailsContext::FunctionTypeTailsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::FunctionTypeTailContext* Dart2Parser::FunctionTypeTailsContext::functionTypeTail() {
  return getRuleContext<Dart2Parser::FunctionTypeTailContext>(0);
}

Dart2Parser::FunctionTypeTailsContext* Dart2Parser::FunctionTypeTailsContext::functionTypeTails() {
  return getRuleContext<Dart2Parser::FunctionTypeTailsContext>(0);
}

tree::TerminalNode* Dart2Parser::FunctionTypeTailsContext::QU() {
  return getToken(Dart2Parser::QU, 0);
}


size_t Dart2Parser::FunctionTypeTailsContext::getRuleIndex() const {
  return Dart2Parser::RuleFunctionTypeTails;
}

void Dart2Parser::FunctionTypeTailsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunctionTypeTails(this);
}

void Dart2Parser::FunctionTypeTailsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunctionTypeTails(this);
}

Dart2Parser::FunctionTypeTailsContext* Dart2Parser::functionTypeTails() {
  FunctionTypeTailsContext *_localctx = _tracker.createInstance<FunctionTypeTailsContext>(_ctx, getState());
  enterRule(_localctx, 162, Dart2Parser::RuleFunctionTypeTails);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1226);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 126, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1219);
      functionTypeTail();
      setState(1221);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Dart2Parser::QU) {
        setState(1220);
        match(Dart2Parser::QU);
      }
      setState(1223);
      functionTypeTails();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1225);
      functionTypeTail();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GetterSignatureContext ------------------------------------------------------------------

Dart2Parser::GetterSignatureContext::GetterSignatureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::GetterSignatureContext::GET_() {
  return getToken(Dart2Parser::GET_, 0);
}

Dart2Parser::IdentifierContext* Dart2Parser::GetterSignatureContext::identifier() {
  return getRuleContext<Dart2Parser::IdentifierContext>(0);
}

Dart2Parser::TypeContext* Dart2Parser::GetterSignatureContext::type() {
  return getRuleContext<Dart2Parser::TypeContext>(0);
}


size_t Dart2Parser::GetterSignatureContext::getRuleIndex() const {
  return Dart2Parser::RuleGetterSignature;
}

void Dart2Parser::GetterSignatureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGetterSignature(this);
}

void Dart2Parser::GetterSignatureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGetterSignature(this);
}

Dart2Parser::GetterSignatureContext* Dart2Parser::getterSignature() {
  GetterSignatureContext *_localctx = _tracker.createInstance<GetterSignatureContext>(_ctx, getState());
  enterRule(_localctx, 164, Dart2Parser::RuleGetterSignature);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1229);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Dart2Parser::ASYNC_

    || _la == Dart2Parser::AWAIT_ || ((((_la - 69) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 69)) & 74593206968291329) != 0)) {
      setState(1228);
      type();
    }
    setState(1231);
    match(Dart2Parser::GET_);
    setState(1232);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdentifierContext ------------------------------------------------------------------

Dart2Parser::IdentifierContext::IdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::IdentifierContext::IDENTIFIER() {
  return getToken(Dart2Parser::IDENTIFIER, 0);
}

tree::TerminalNode* Dart2Parser::IdentifierContext::ABSTRACT_() {
  return getToken(Dart2Parser::ABSTRACT_, 0);
}

tree::TerminalNode* Dart2Parser::IdentifierContext::AS_() {
  return getToken(Dart2Parser::AS_, 0);
}

tree::TerminalNode* Dart2Parser::IdentifierContext::COVARIANT_() {
  return getToken(Dart2Parser::COVARIANT_, 0);
}

tree::TerminalNode* Dart2Parser::IdentifierContext::DEFERRED_() {
  return getToken(Dart2Parser::DEFERRED_, 0);
}

tree::TerminalNode* Dart2Parser::IdentifierContext::DYNAMIC_() {
  return getToken(Dart2Parser::DYNAMIC_, 0);
}

tree::TerminalNode* Dart2Parser::IdentifierContext::EXPORT_() {
  return getToken(Dart2Parser::EXPORT_, 0);
}

tree::TerminalNode* Dart2Parser::IdentifierContext::EXTERNAL_() {
  return getToken(Dart2Parser::EXTERNAL_, 0);
}

tree::TerminalNode* Dart2Parser::IdentifierContext::EXTENSION_() {
  return getToken(Dart2Parser::EXTENSION_, 0);
}

tree::TerminalNode* Dart2Parser::IdentifierContext::FACTORY_() {
  return getToken(Dart2Parser::FACTORY_, 0);
}

tree::TerminalNode* Dart2Parser::IdentifierContext::FUNCTION_() {
  return getToken(Dart2Parser::FUNCTION_, 0);
}

tree::TerminalNode* Dart2Parser::IdentifierContext::GET_() {
  return getToken(Dart2Parser::GET_, 0);
}

tree::TerminalNode* Dart2Parser::IdentifierContext::IMPLEMENTS_() {
  return getToken(Dart2Parser::IMPLEMENTS_, 0);
}

tree::TerminalNode* Dart2Parser::IdentifierContext::IMPORT_() {
  return getToken(Dart2Parser::IMPORT_, 0);
}

tree::TerminalNode* Dart2Parser::IdentifierContext::INTERFACE_() {
  return getToken(Dart2Parser::INTERFACE_, 0);
}

tree::TerminalNode* Dart2Parser::IdentifierContext::LATE_() {
  return getToken(Dart2Parser::LATE_, 0);
}

tree::TerminalNode* Dart2Parser::IdentifierContext::LIBRARY_() {
  return getToken(Dart2Parser::LIBRARY_, 0);
}

tree::TerminalNode* Dart2Parser::IdentifierContext::MIXIN_() {
  return getToken(Dart2Parser::MIXIN_, 0);
}

tree::TerminalNode* Dart2Parser::IdentifierContext::OPERATOR_() {
  return getToken(Dart2Parser::OPERATOR_, 0);
}

tree::TerminalNode* Dart2Parser::IdentifierContext::PART_() {
  return getToken(Dart2Parser::PART_, 0);
}

tree::TerminalNode* Dart2Parser::IdentifierContext::REQUIRED_() {
  return getToken(Dart2Parser::REQUIRED_, 0);
}

tree::TerminalNode* Dart2Parser::IdentifierContext::SET_() {
  return getToken(Dart2Parser::SET_, 0);
}

tree::TerminalNode* Dart2Parser::IdentifierContext::STATIC_() {
  return getToken(Dart2Parser::STATIC_, 0);
}

tree::TerminalNode* Dart2Parser::IdentifierContext::TYPEDEF_() {
  return getToken(Dart2Parser::TYPEDEF_, 0);
}

tree::TerminalNode* Dart2Parser::IdentifierContext::ASYNC_() {
  return getToken(Dart2Parser::ASYNC_, 0);
}

tree::TerminalNode* Dart2Parser::IdentifierContext::HIDE_() {
  return getToken(Dart2Parser::HIDE_, 0);
}

tree::TerminalNode* Dart2Parser::IdentifierContext::OF_() {
  return getToken(Dart2Parser::OF_, 0);
}

tree::TerminalNode* Dart2Parser::IdentifierContext::ON_() {
  return getToken(Dart2Parser::ON_, 0);
}

tree::TerminalNode* Dart2Parser::IdentifierContext::SHOW_() {
  return getToken(Dart2Parser::SHOW_, 0);
}

tree::TerminalNode* Dart2Parser::IdentifierContext::SYNC_() {
  return getToken(Dart2Parser::SYNC_, 0);
}

tree::TerminalNode* Dart2Parser::IdentifierContext::AWAIT_() {
  return getToken(Dart2Parser::AWAIT_, 0);
}

tree::TerminalNode* Dart2Parser::IdentifierContext::YIELD_() {
  return getToken(Dart2Parser::YIELD_, 0);
}

tree::TerminalNode* Dart2Parser::IdentifierContext::NATIVE_() {
  return getToken(Dart2Parser::NATIVE_, 0);
}


size_t Dart2Parser::IdentifierContext::getRuleIndex() const {
  return Dart2Parser::RuleIdentifier;
}

void Dart2Parser::IdentifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIdentifier(this);
}

void Dart2Parser::IdentifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIdentifier(this);
}

Dart2Parser::IdentifierContext* Dart2Parser::identifier() {
  IdentifierContext *_localctx = _tracker.createInstance<IdentifierContext>(_ctx, getState());
  enterRule(_localctx, 166, Dart2Parser::RuleIdentifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1234);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 486388759756013568) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 1190119350744059541) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdentifierListContext ------------------------------------------------------------------

Dart2Parser::IdentifierListContext::IdentifierListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Dart2Parser::IdentifierContext *> Dart2Parser::IdentifierListContext::identifier() {
  return getRuleContexts<Dart2Parser::IdentifierContext>();
}

Dart2Parser::IdentifierContext* Dart2Parser::IdentifierListContext::identifier(size_t i) {
  return getRuleContext<Dart2Parser::IdentifierContext>(i);
}

std::vector<tree::TerminalNode *> Dart2Parser::IdentifierListContext::C() {
  return getTokens(Dart2Parser::C);
}

tree::TerminalNode* Dart2Parser::IdentifierListContext::C(size_t i) {
  return getToken(Dart2Parser::C, i);
}


size_t Dart2Parser::IdentifierListContext::getRuleIndex() const {
  return Dart2Parser::RuleIdentifierList;
}

void Dart2Parser::IdentifierListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIdentifierList(this);
}

void Dart2Parser::IdentifierListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIdentifierList(this);
}

Dart2Parser::IdentifierListContext* Dart2Parser::identifierList() {
  IdentifierListContext *_localctx = _tracker.createInstance<IdentifierListContext>(_ctx, getState());
  enterRule(_localctx, 168, Dart2Parser::RuleIdentifierList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1236);
    identifier();
    setState(1241);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Dart2Parser::C) {
      setState(1237);
      match(Dart2Parser::C);
      setState(1238);
      identifier();
      setState(1243);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IfElementContext ------------------------------------------------------------------

Dart2Parser::IfElementContext::IfElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::IfElementContext::IF_() {
  return getToken(Dart2Parser::IF_, 0);
}

tree::TerminalNode* Dart2Parser::IfElementContext::OP() {
  return getToken(Dart2Parser::OP, 0);
}

Dart2Parser::ExpressionContext* Dart2Parser::IfElementContext::expression() {
  return getRuleContext<Dart2Parser::ExpressionContext>(0);
}

tree::TerminalNode* Dart2Parser::IfElementContext::CP() {
  return getToken(Dart2Parser::CP, 0);
}

std::vector<Dart2Parser::ElementContext *> Dart2Parser::IfElementContext::element() {
  return getRuleContexts<Dart2Parser::ElementContext>();
}

Dart2Parser::ElementContext* Dart2Parser::IfElementContext::element(size_t i) {
  return getRuleContext<Dart2Parser::ElementContext>(i);
}

tree::TerminalNode* Dart2Parser::IfElementContext::ELSE_() {
  return getToken(Dart2Parser::ELSE_, 0);
}


size_t Dart2Parser::IfElementContext::getRuleIndex() const {
  return Dart2Parser::RuleIfElement;
}

void Dart2Parser::IfElementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIfElement(this);
}

void Dart2Parser::IfElementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIfElement(this);
}

Dart2Parser::IfElementContext* Dart2Parser::ifElement() {
  IfElementContext *_localctx = _tracker.createInstance<IfElementContext>(_ctx, getState());
  enterRule(_localctx, 170, Dart2Parser::RuleIfElement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1244);
    match(Dart2Parser::IF_);
    setState(1245);
    match(Dart2Parser::OP);
    setState(1246);
    expression();
    setState(1247);
    match(Dart2Parser::CP);
    setState(1248);
    element();
    setState(1251);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 129, _ctx)) {
    case 1: {
      setState(1249);
      match(Dart2Parser::ELSE_);
      setState(1250);
      element();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IfNullExpressionContext ------------------------------------------------------------------

Dart2Parser::IfNullExpressionContext::IfNullExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Dart2Parser::LogicalOrExpressionContext *> Dart2Parser::IfNullExpressionContext::logicalOrExpression() {
  return getRuleContexts<Dart2Parser::LogicalOrExpressionContext>();
}

Dart2Parser::LogicalOrExpressionContext* Dart2Parser::IfNullExpressionContext::logicalOrExpression(size_t i) {
  return getRuleContext<Dart2Parser::LogicalOrExpressionContext>(i);
}

std::vector<tree::TerminalNode *> Dart2Parser::IfNullExpressionContext::QUQU() {
  return getTokens(Dart2Parser::QUQU);
}

tree::TerminalNode* Dart2Parser::IfNullExpressionContext::QUQU(size_t i) {
  return getToken(Dart2Parser::QUQU, i);
}


size_t Dart2Parser::IfNullExpressionContext::getRuleIndex() const {
  return Dart2Parser::RuleIfNullExpression;
}

void Dart2Parser::IfNullExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIfNullExpression(this);
}

void Dart2Parser::IfNullExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIfNullExpression(this);
}

Dart2Parser::IfNullExpressionContext* Dart2Parser::ifNullExpression() {
  IfNullExpressionContext *_localctx = _tracker.createInstance<IfNullExpressionContext>(_ctx, getState());
  enterRule(_localctx, 172, Dart2Parser::RuleIfNullExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1253);
    logicalOrExpression();
    setState(1258);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 130, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1254);
        match(Dart2Parser::QUQU);
        setState(1255);
        logicalOrExpression(); 
      }
      setState(1260);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 130, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IfStatementContext ------------------------------------------------------------------

Dart2Parser::IfStatementContext::IfStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::IfStatementContext::IF_() {
  return getToken(Dart2Parser::IF_, 0);
}

tree::TerminalNode* Dart2Parser::IfStatementContext::OP() {
  return getToken(Dart2Parser::OP, 0);
}

Dart2Parser::ExpressionContext* Dart2Parser::IfStatementContext::expression() {
  return getRuleContext<Dart2Parser::ExpressionContext>(0);
}

tree::TerminalNode* Dart2Parser::IfStatementContext::CP() {
  return getToken(Dart2Parser::CP, 0);
}

std::vector<Dart2Parser::StatementContext *> Dart2Parser::IfStatementContext::statement() {
  return getRuleContexts<Dart2Parser::StatementContext>();
}

Dart2Parser::StatementContext* Dart2Parser::IfStatementContext::statement(size_t i) {
  return getRuleContext<Dart2Parser::StatementContext>(i);
}

tree::TerminalNode* Dart2Parser::IfStatementContext::ELSE_() {
  return getToken(Dart2Parser::ELSE_, 0);
}


size_t Dart2Parser::IfStatementContext::getRuleIndex() const {
  return Dart2Parser::RuleIfStatement;
}

void Dart2Parser::IfStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIfStatement(this);
}

void Dart2Parser::IfStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIfStatement(this);
}

Dart2Parser::IfStatementContext* Dart2Parser::ifStatement() {
  IfStatementContext *_localctx = _tracker.createInstance<IfStatementContext>(_ctx, getState());
  enterRule(_localctx, 174, Dart2Parser::RuleIfStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1261);
    match(Dart2Parser::IF_);
    setState(1262);
    match(Dart2Parser::OP);
    setState(1263);
    expression();
    setState(1264);
    match(Dart2Parser::CP);
    setState(1265);
    statement();
    setState(1268);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 131, _ctx)) {
    case 1: {
      setState(1266);
      match(Dart2Parser::ELSE_);
      setState(1267);
      statement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ImportOrExportContext ------------------------------------------------------------------

Dart2Parser::ImportOrExportContext::ImportOrExportContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::LibraryImportContext* Dart2Parser::ImportOrExportContext::libraryImport() {
  return getRuleContext<Dart2Parser::LibraryImportContext>(0);
}

Dart2Parser::LibraryExportContext* Dart2Parser::ImportOrExportContext::libraryExport() {
  return getRuleContext<Dart2Parser::LibraryExportContext>(0);
}


size_t Dart2Parser::ImportOrExportContext::getRuleIndex() const {
  return Dart2Parser::RuleImportOrExport;
}

void Dart2Parser::ImportOrExportContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImportOrExport(this);
}

void Dart2Parser::ImportOrExportContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImportOrExport(this);
}

Dart2Parser::ImportOrExportContext* Dart2Parser::importOrExport() {
  ImportOrExportContext *_localctx = _tracker.createInstance<ImportOrExportContext>(_ctx, getState());
  enterRule(_localctx, 176, Dart2Parser::RuleImportOrExport);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1272);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 132, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1270);
      libraryImport();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1271);
      libraryExport();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ImportSpecificationContext ------------------------------------------------------------------

Dart2Parser::ImportSpecificationContext::ImportSpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::ImportSpecificationContext::IMPORT_() {
  return getToken(Dart2Parser::IMPORT_, 0);
}

Dart2Parser::ConfigurableUriContext* Dart2Parser::ImportSpecificationContext::configurableUri() {
  return getRuleContext<Dart2Parser::ConfigurableUriContext>(0);
}

tree::TerminalNode* Dart2Parser::ImportSpecificationContext::SC() {
  return getToken(Dart2Parser::SC, 0);
}

tree::TerminalNode* Dart2Parser::ImportSpecificationContext::AS_() {
  return getToken(Dart2Parser::AS_, 0);
}

Dart2Parser::IdentifierContext* Dart2Parser::ImportSpecificationContext::identifier() {
  return getRuleContext<Dart2Parser::IdentifierContext>(0);
}

std::vector<Dart2Parser::CombinatorContext *> Dart2Parser::ImportSpecificationContext::combinator() {
  return getRuleContexts<Dart2Parser::CombinatorContext>();
}

Dart2Parser::CombinatorContext* Dart2Parser::ImportSpecificationContext::combinator(size_t i) {
  return getRuleContext<Dart2Parser::CombinatorContext>(i);
}

tree::TerminalNode* Dart2Parser::ImportSpecificationContext::DEFERRED_() {
  return getToken(Dart2Parser::DEFERRED_, 0);
}


size_t Dart2Parser::ImportSpecificationContext::getRuleIndex() const {
  return Dart2Parser::RuleImportSpecification;
}

void Dart2Parser::ImportSpecificationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImportSpecification(this);
}

void Dart2Parser::ImportSpecificationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImportSpecification(this);
}

Dart2Parser::ImportSpecificationContext* Dart2Parser::importSpecification() {
  ImportSpecificationContext *_localctx = _tracker.createInstance<ImportSpecificationContext>(_ctx, getState());
  enterRule(_localctx, 178, Dart2Parser::RuleImportSpecification);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1274);
    match(Dart2Parser::IMPORT_);
    setState(1275);
    configurableUri();
    setState(1281);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Dart2Parser::AS_

    || _la == Dart2Parser::DEFERRED_) {
      setState(1277);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Dart2Parser::DEFERRED_) {
        setState(1276);
        match(Dart2Parser::DEFERRED_);
      }
      setState(1279);
      match(Dart2Parser::AS_);
      setState(1280);
      identifier();
    }
    setState(1286);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Dart2Parser::HIDE_

    || _la == Dart2Parser::SHOW_) {
      setState(1283);
      combinator();
      setState(1288);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1289);
    match(Dart2Parser::SC);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IncrementOperatorContext ------------------------------------------------------------------

Dart2Parser::IncrementOperatorContext::IncrementOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::IncrementOperatorContext::PLPL() {
  return getToken(Dart2Parser::PLPL, 0);
}

tree::TerminalNode* Dart2Parser::IncrementOperatorContext::MM() {
  return getToken(Dart2Parser::MM, 0);
}


size_t Dart2Parser::IncrementOperatorContext::getRuleIndex() const {
  return Dart2Parser::RuleIncrementOperator;
}

void Dart2Parser::IncrementOperatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIncrementOperator(this);
}

void Dart2Parser::IncrementOperatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIncrementOperator(this);
}

Dart2Parser::IncrementOperatorContext* Dart2Parser::incrementOperator() {
  IncrementOperatorContext *_localctx = _tracker.createInstance<IncrementOperatorContext>(_ctx, getState());
  enterRule(_localctx, 180, Dart2Parser::RuleIncrementOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1291);
    _la = _input->LA(1);
    if (!(_la == Dart2Parser::MM

    || _la == Dart2Parser::PLPL)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InitializedIdentifierContext ------------------------------------------------------------------

Dart2Parser::InitializedIdentifierContext::InitializedIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::IdentifierContext* Dart2Parser::InitializedIdentifierContext::identifier() {
  return getRuleContext<Dart2Parser::IdentifierContext>(0);
}

tree::TerminalNode* Dart2Parser::InitializedIdentifierContext::EQ() {
  return getToken(Dart2Parser::EQ, 0);
}

Dart2Parser::ExpressionContext* Dart2Parser::InitializedIdentifierContext::expression() {
  return getRuleContext<Dart2Parser::ExpressionContext>(0);
}


size_t Dart2Parser::InitializedIdentifierContext::getRuleIndex() const {
  return Dart2Parser::RuleInitializedIdentifier;
}

void Dart2Parser::InitializedIdentifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInitializedIdentifier(this);
}

void Dart2Parser::InitializedIdentifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInitializedIdentifier(this);
}

Dart2Parser::InitializedIdentifierContext* Dart2Parser::initializedIdentifier() {
  InitializedIdentifierContext *_localctx = _tracker.createInstance<InitializedIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 182, Dart2Parser::RuleInitializedIdentifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1293);
    identifier();
    setState(1296);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Dart2Parser::EQ) {
      setState(1294);
      match(Dart2Parser::EQ);
      setState(1295);
      expression();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InitializedIdentifierListContext ------------------------------------------------------------------

Dart2Parser::InitializedIdentifierListContext::InitializedIdentifierListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Dart2Parser::InitializedIdentifierContext *> Dart2Parser::InitializedIdentifierListContext::initializedIdentifier() {
  return getRuleContexts<Dart2Parser::InitializedIdentifierContext>();
}

Dart2Parser::InitializedIdentifierContext* Dart2Parser::InitializedIdentifierListContext::initializedIdentifier(size_t i) {
  return getRuleContext<Dart2Parser::InitializedIdentifierContext>(i);
}

std::vector<tree::TerminalNode *> Dart2Parser::InitializedIdentifierListContext::C() {
  return getTokens(Dart2Parser::C);
}

tree::TerminalNode* Dart2Parser::InitializedIdentifierListContext::C(size_t i) {
  return getToken(Dart2Parser::C, i);
}


size_t Dart2Parser::InitializedIdentifierListContext::getRuleIndex() const {
  return Dart2Parser::RuleInitializedIdentifierList;
}

void Dart2Parser::InitializedIdentifierListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInitializedIdentifierList(this);
}

void Dart2Parser::InitializedIdentifierListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInitializedIdentifierList(this);
}

Dart2Parser::InitializedIdentifierListContext* Dart2Parser::initializedIdentifierList() {
  InitializedIdentifierListContext *_localctx = _tracker.createInstance<InitializedIdentifierListContext>(_ctx, getState());
  enterRule(_localctx, 184, Dart2Parser::RuleInitializedIdentifierList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1298);
    initializedIdentifier();
    setState(1303);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Dart2Parser::C) {
      setState(1299);
      match(Dart2Parser::C);
      setState(1300);
      initializedIdentifier();
      setState(1305);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InitializedVariableDeclarationContext ------------------------------------------------------------------

Dart2Parser::InitializedVariableDeclarationContext::InitializedVariableDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::DeclaredIdentifierContext* Dart2Parser::InitializedVariableDeclarationContext::declaredIdentifier() {
  return getRuleContext<Dart2Parser::DeclaredIdentifierContext>(0);
}

tree::TerminalNode* Dart2Parser::InitializedVariableDeclarationContext::EQ() {
  return getToken(Dart2Parser::EQ, 0);
}

Dart2Parser::ExpressionContext* Dart2Parser::InitializedVariableDeclarationContext::expression() {
  return getRuleContext<Dart2Parser::ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> Dart2Parser::InitializedVariableDeclarationContext::C() {
  return getTokens(Dart2Parser::C);
}

tree::TerminalNode* Dart2Parser::InitializedVariableDeclarationContext::C(size_t i) {
  return getToken(Dart2Parser::C, i);
}

std::vector<Dart2Parser::InitializedIdentifierContext *> Dart2Parser::InitializedVariableDeclarationContext::initializedIdentifier() {
  return getRuleContexts<Dart2Parser::InitializedIdentifierContext>();
}

Dart2Parser::InitializedIdentifierContext* Dart2Parser::InitializedVariableDeclarationContext::initializedIdentifier(size_t i) {
  return getRuleContext<Dart2Parser::InitializedIdentifierContext>(i);
}


size_t Dart2Parser::InitializedVariableDeclarationContext::getRuleIndex() const {
  return Dart2Parser::RuleInitializedVariableDeclaration;
}

void Dart2Parser::InitializedVariableDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInitializedVariableDeclaration(this);
}

void Dart2Parser::InitializedVariableDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInitializedVariableDeclaration(this);
}

Dart2Parser::InitializedVariableDeclarationContext* Dart2Parser::initializedVariableDeclaration() {
  InitializedVariableDeclarationContext *_localctx = _tracker.createInstance<InitializedVariableDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 186, Dart2Parser::RuleInitializedVariableDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1306);
    declaredIdentifier();
    setState(1309);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Dart2Parser::EQ) {
      setState(1307);
      match(Dart2Parser::EQ);
      setState(1308);
      expression();
    }
    setState(1315);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Dart2Parser::C) {
      setState(1311);
      match(Dart2Parser::C);
      setState(1312);
      initializedIdentifier();
      setState(1317);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InitializerExpressionContext ------------------------------------------------------------------

Dart2Parser::InitializerExpressionContext::InitializerExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::ConditionalExpressionContext* Dart2Parser::InitializerExpressionContext::conditionalExpression() {
  return getRuleContext<Dart2Parser::ConditionalExpressionContext>(0);
}

Dart2Parser::CascadeContext* Dart2Parser::InitializerExpressionContext::cascade() {
  return getRuleContext<Dart2Parser::CascadeContext>(0);
}


size_t Dart2Parser::InitializerExpressionContext::getRuleIndex() const {
  return Dart2Parser::RuleInitializerExpression;
}

void Dart2Parser::InitializerExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInitializerExpression(this);
}

void Dart2Parser::InitializerExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInitializerExpression(this);
}

Dart2Parser::InitializerExpressionContext* Dart2Parser::initializerExpression() {
  InitializerExpressionContext *_localctx = _tracker.createInstance<InitializerExpressionContext>(_ctx, getState());
  enterRule(_localctx, 188, Dart2Parser::RuleInitializerExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1320);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 140, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1318);
      conditionalExpression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1319);
      cascade(0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InitializerListEntryContext ------------------------------------------------------------------

Dart2Parser::InitializerListEntryContext::InitializerListEntryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::InitializerListEntryContext::SUPER_() {
  return getToken(Dart2Parser::SUPER_, 0);
}

Dart2Parser::ArgumentsContext* Dart2Parser::InitializerListEntryContext::arguments() {
  return getRuleContext<Dart2Parser::ArgumentsContext>(0);
}

tree::TerminalNode* Dart2Parser::InitializerListEntryContext::D() {
  return getToken(Dart2Parser::D, 0);
}

Dart2Parser::IdentifierContext* Dart2Parser::InitializerListEntryContext::identifier() {
  return getRuleContext<Dart2Parser::IdentifierContext>(0);
}

Dart2Parser::FieldInitializerContext* Dart2Parser::InitializerListEntryContext::fieldInitializer() {
  return getRuleContext<Dart2Parser::FieldInitializerContext>(0);
}

Dart2Parser::AssertionContext* Dart2Parser::InitializerListEntryContext::assertion() {
  return getRuleContext<Dart2Parser::AssertionContext>(0);
}


size_t Dart2Parser::InitializerListEntryContext::getRuleIndex() const {
  return Dart2Parser::RuleInitializerListEntry;
}

void Dart2Parser::InitializerListEntryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInitializerListEntry(this);
}

void Dart2Parser::InitializerListEntryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInitializerListEntry(this);
}

Dart2Parser::InitializerListEntryContext* Dart2Parser::initializerListEntry() {
  InitializerListEntryContext *_localctx = _tracker.createInstance<InitializerListEntryContext>(_ctx, getState());
  enterRule(_localctx, 190, Dart2Parser::RuleInitializerListEntry);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1331);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 141, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1322);
      match(Dart2Parser::SUPER_);
      setState(1323);
      arguments();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1324);
      match(Dart2Parser::SUPER_);
      setState(1325);
      match(Dart2Parser::D);
      setState(1326);
      identifier();
      setState(1327);
      arguments();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1329);
      fieldInitializer();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1330);
      assertion();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InitializersContext ------------------------------------------------------------------

Dart2Parser::InitializersContext::InitializersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::InitializersContext::CO() {
  return getToken(Dart2Parser::CO, 0);
}

std::vector<Dart2Parser::InitializerListEntryContext *> Dart2Parser::InitializersContext::initializerListEntry() {
  return getRuleContexts<Dart2Parser::InitializerListEntryContext>();
}

Dart2Parser::InitializerListEntryContext* Dart2Parser::InitializersContext::initializerListEntry(size_t i) {
  return getRuleContext<Dart2Parser::InitializerListEntryContext>(i);
}

std::vector<tree::TerminalNode *> Dart2Parser::InitializersContext::C() {
  return getTokens(Dart2Parser::C);
}

tree::TerminalNode* Dart2Parser::InitializersContext::C(size_t i) {
  return getToken(Dart2Parser::C, i);
}


size_t Dart2Parser::InitializersContext::getRuleIndex() const {
  return Dart2Parser::RuleInitializers;
}

void Dart2Parser::InitializersContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInitializers(this);
}

void Dart2Parser::InitializersContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInitializers(this);
}

Dart2Parser::InitializersContext* Dart2Parser::initializers() {
  InitializersContext *_localctx = _tracker.createInstance<InitializersContext>(_ctx, getState());
  enterRule(_localctx, 192, Dart2Parser::RuleInitializers);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1333);
    match(Dart2Parser::CO);
    setState(1334);
    initializerListEntry();
    setState(1339);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Dart2Parser::C) {
      setState(1335);
      match(Dart2Parser::C);
      setState(1336);
      initializerListEntry();
      setState(1341);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfacesContext ------------------------------------------------------------------

Dart2Parser::InterfacesContext::InterfacesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::InterfacesContext::IMPLEMENTS_() {
  return getToken(Dart2Parser::IMPLEMENTS_, 0);
}

Dart2Parser::TypeNotVoidListContext* Dart2Parser::InterfacesContext::typeNotVoidList() {
  return getRuleContext<Dart2Parser::TypeNotVoidListContext>(0);
}


size_t Dart2Parser::InterfacesContext::getRuleIndex() const {
  return Dart2Parser::RuleInterfaces;
}

void Dart2Parser::InterfacesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterfaces(this);
}

void Dart2Parser::InterfacesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterfaces(this);
}

Dart2Parser::InterfacesContext* Dart2Parser::interfaces() {
  InterfacesContext *_localctx = _tracker.createInstance<InterfacesContext>(_ctx, getState());
  enterRule(_localctx, 194, Dart2Parser::RuleInterfaces);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1342);
    match(Dart2Parser::IMPLEMENTS_);
    setState(1343);
    typeNotVoidList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IsOperatorContext ------------------------------------------------------------------

Dart2Parser::IsOperatorContext::IsOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::IsOperatorContext::IS_() {
  return getToken(Dart2Parser::IS_, 0);
}

tree::TerminalNode* Dart2Parser::IsOperatorContext::NOT() {
  return getToken(Dart2Parser::NOT, 0);
}


size_t Dart2Parser::IsOperatorContext::getRuleIndex() const {
  return Dart2Parser::RuleIsOperator;
}

void Dart2Parser::IsOperatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIsOperator(this);
}

void Dart2Parser::IsOperatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIsOperator(this);
}

Dart2Parser::IsOperatorContext* Dart2Parser::isOperator() {
  IsOperatorContext *_localctx = _tracker.createInstance<IsOperatorContext>(_ctx, getState());
  enterRule(_localctx, 196, Dart2Parser::RuleIsOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1345);
    match(Dart2Parser::IS_);
    setState(1347);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Dart2Parser::NOT) {
      setState(1346);
      match(Dart2Parser::NOT);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LabelContext ------------------------------------------------------------------

Dart2Parser::LabelContext::LabelContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::IdentifierContext* Dart2Parser::LabelContext::identifier() {
  return getRuleContext<Dart2Parser::IdentifierContext>(0);
}

tree::TerminalNode* Dart2Parser::LabelContext::CO() {
  return getToken(Dart2Parser::CO, 0);
}


size_t Dart2Parser::LabelContext::getRuleIndex() const {
  return Dart2Parser::RuleLabel;
}

void Dart2Parser::LabelContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLabel(this);
}

void Dart2Parser::LabelContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLabel(this);
}

Dart2Parser::LabelContext* Dart2Parser::label() {
  LabelContext *_localctx = _tracker.createInstance<LabelContext>(_ctx, getState());
  enterRule(_localctx, 198, Dart2Parser::RuleLabel);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1349);
    identifier();
    setState(1350);
    match(Dart2Parser::CO);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LetExpressionContext ------------------------------------------------------------------

Dart2Parser::LetExpressionContext::LetExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::LetExpressionContext::LET_() {
  return getToken(Dart2Parser::LET_, 0);
}

Dart2Parser::StaticFinalDeclarationListContext* Dart2Parser::LetExpressionContext::staticFinalDeclarationList() {
  return getRuleContext<Dart2Parser::StaticFinalDeclarationListContext>(0);
}

tree::TerminalNode* Dart2Parser::LetExpressionContext::IN_() {
  return getToken(Dart2Parser::IN_, 0);
}

Dart2Parser::ExpressionContext* Dart2Parser::LetExpressionContext::expression() {
  return getRuleContext<Dart2Parser::ExpressionContext>(0);
}


size_t Dart2Parser::LetExpressionContext::getRuleIndex() const {
  return Dart2Parser::RuleLetExpression;
}

void Dart2Parser::LetExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLetExpression(this);
}

void Dart2Parser::LetExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLetExpression(this);
}

Dart2Parser::LetExpressionContext* Dart2Parser::letExpression() {
  LetExpressionContext *_localctx = _tracker.createInstance<LetExpressionContext>(_ctx, getState());
  enterRule(_localctx, 200, Dart2Parser::RuleLetExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1352);
    match(Dart2Parser::LET_);
    setState(1353);
    staticFinalDeclarationList();
    setState(1354);
    match(Dart2Parser::IN_);
    setState(1355);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LibraryDeclarationContext ------------------------------------------------------------------

Dart2Parser::LibraryDeclarationContext::LibraryDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::LibraryNameContext* Dart2Parser::LibraryDeclarationContext::libraryName() {
  return getRuleContext<Dart2Parser::LibraryNameContext>(0);
}

std::vector<Dart2Parser::ImportOrExportContext *> Dart2Parser::LibraryDeclarationContext::importOrExport() {
  return getRuleContexts<Dart2Parser::ImportOrExportContext>();
}

Dart2Parser::ImportOrExportContext* Dart2Parser::LibraryDeclarationContext::importOrExport(size_t i) {
  return getRuleContext<Dart2Parser::ImportOrExportContext>(i);
}

std::vector<Dart2Parser::PartDirectiveContext *> Dart2Parser::LibraryDeclarationContext::partDirective() {
  return getRuleContexts<Dart2Parser::PartDirectiveContext>();
}

Dart2Parser::PartDirectiveContext* Dart2Parser::LibraryDeclarationContext::partDirective(size_t i) {
  return getRuleContext<Dart2Parser::PartDirectiveContext>(i);
}

std::vector<Dart2Parser::MetadataContext *> Dart2Parser::LibraryDeclarationContext::metadata() {
  return getRuleContexts<Dart2Parser::MetadataContext>();
}

Dart2Parser::MetadataContext* Dart2Parser::LibraryDeclarationContext::metadata(size_t i) {
  return getRuleContext<Dart2Parser::MetadataContext>(i);
}

std::vector<Dart2Parser::TopLevelDeclarationContext *> Dart2Parser::LibraryDeclarationContext::topLevelDeclaration() {
  return getRuleContexts<Dart2Parser::TopLevelDeclarationContext>();
}

Dart2Parser::TopLevelDeclarationContext* Dart2Parser::LibraryDeclarationContext::topLevelDeclaration(size_t i) {
  return getRuleContext<Dart2Parser::TopLevelDeclarationContext>(i);
}


size_t Dart2Parser::LibraryDeclarationContext::getRuleIndex() const {
  return Dart2Parser::RuleLibraryDeclaration;
}

void Dart2Parser::LibraryDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLibraryDeclaration(this);
}

void Dart2Parser::LibraryDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLibraryDeclaration(this);
}

Dart2Parser::LibraryDeclarationContext* Dart2Parser::libraryDeclaration() {
  LibraryDeclarationContext *_localctx = _tracker.createInstance<LibraryDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 202, Dart2Parser::RuleLibraryDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1358);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 144, _ctx)) {
    case 1: {
      setState(1357);
      libraryName();
      break;
    }

    default:
      break;
    }
    setState(1363);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 145, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1360);
        importOrExport(); 
      }
      setState(1365);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 145, _ctx);
    }
    setState(1369);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 146, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1366);
        partDirective(); 
      }
      setState(1371);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 146, _ctx);
    }
    setState(1377);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -4125297258671374320) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 1196874750185123541) != 0)) {
      setState(1372);
      metadata();
      setState(1373);
      topLevelDeclaration();
      setState(1379);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LibraryExportContext ------------------------------------------------------------------

Dart2Parser::LibraryExportContext::LibraryExportContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::MetadataContext* Dart2Parser::LibraryExportContext::metadata() {
  return getRuleContext<Dart2Parser::MetadataContext>(0);
}

tree::TerminalNode* Dart2Parser::LibraryExportContext::EXPORT_() {
  return getToken(Dart2Parser::EXPORT_, 0);
}

Dart2Parser::ConfigurableUriContext* Dart2Parser::LibraryExportContext::configurableUri() {
  return getRuleContext<Dart2Parser::ConfigurableUriContext>(0);
}

tree::TerminalNode* Dart2Parser::LibraryExportContext::SC() {
  return getToken(Dart2Parser::SC, 0);
}

std::vector<Dart2Parser::CombinatorContext *> Dart2Parser::LibraryExportContext::combinator() {
  return getRuleContexts<Dart2Parser::CombinatorContext>();
}

Dart2Parser::CombinatorContext* Dart2Parser::LibraryExportContext::combinator(size_t i) {
  return getRuleContext<Dart2Parser::CombinatorContext>(i);
}


size_t Dart2Parser::LibraryExportContext::getRuleIndex() const {
  return Dart2Parser::RuleLibraryExport;
}

void Dart2Parser::LibraryExportContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLibraryExport(this);
}

void Dart2Parser::LibraryExportContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLibraryExport(this);
}

Dart2Parser::LibraryExportContext* Dart2Parser::libraryExport() {
  LibraryExportContext *_localctx = _tracker.createInstance<LibraryExportContext>(_ctx, getState());
  enterRule(_localctx, 204, Dart2Parser::RuleLibraryExport);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1380);
    metadata();
    setState(1381);
    match(Dart2Parser::EXPORT_);
    setState(1382);
    configurableUri();
    setState(1386);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Dart2Parser::HIDE_

    || _la == Dart2Parser::SHOW_) {
      setState(1383);
      combinator();
      setState(1388);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1389);
    match(Dart2Parser::SC);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LibraryImportContext ------------------------------------------------------------------

Dart2Parser::LibraryImportContext::LibraryImportContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::MetadataContext* Dart2Parser::LibraryImportContext::metadata() {
  return getRuleContext<Dart2Parser::MetadataContext>(0);
}

Dart2Parser::ImportSpecificationContext* Dart2Parser::LibraryImportContext::importSpecification() {
  return getRuleContext<Dart2Parser::ImportSpecificationContext>(0);
}


size_t Dart2Parser::LibraryImportContext::getRuleIndex() const {
  return Dart2Parser::RuleLibraryImport;
}

void Dart2Parser::LibraryImportContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLibraryImport(this);
}

void Dart2Parser::LibraryImportContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLibraryImport(this);
}

Dart2Parser::LibraryImportContext* Dart2Parser::libraryImport() {
  LibraryImportContext *_localctx = _tracker.createInstance<LibraryImportContext>(_ctx, getState());
  enterRule(_localctx, 206, Dart2Parser::RuleLibraryImport);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1391);
    metadata();
    setState(1392);
    importSpecification();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LibraryNameContext ------------------------------------------------------------------

Dart2Parser::LibraryNameContext::LibraryNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::MetadataContext* Dart2Parser::LibraryNameContext::metadata() {
  return getRuleContext<Dart2Parser::MetadataContext>(0);
}

tree::TerminalNode* Dart2Parser::LibraryNameContext::LIBRARY_() {
  return getToken(Dart2Parser::LIBRARY_, 0);
}

Dart2Parser::DottedIdentifierListContext* Dart2Parser::LibraryNameContext::dottedIdentifierList() {
  return getRuleContext<Dart2Parser::DottedIdentifierListContext>(0);
}

tree::TerminalNode* Dart2Parser::LibraryNameContext::SC() {
  return getToken(Dart2Parser::SC, 0);
}


size_t Dart2Parser::LibraryNameContext::getRuleIndex() const {
  return Dart2Parser::RuleLibraryName;
}

void Dart2Parser::LibraryNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLibraryName(this);
}

void Dart2Parser::LibraryNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLibraryName(this);
}

Dart2Parser::LibraryNameContext* Dart2Parser::libraryName() {
  LibraryNameContext *_localctx = _tracker.createInstance<LibraryNameContext>(_ctx, getState());
  enterRule(_localctx, 208, Dart2Parser::RuleLibraryName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1394);
    metadata();
    setState(1395);
    match(Dart2Parser::LIBRARY_);
    setState(1396);
    dottedIdentifierList();
    setState(1397);
    match(Dart2Parser::SC);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ListLiteralContext ------------------------------------------------------------------

Dart2Parser::ListLiteralContext::ListLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::ListLiteralContext::OB() {
  return getToken(Dart2Parser::OB, 0);
}

tree::TerminalNode* Dart2Parser::ListLiteralContext::CB() {
  return getToken(Dart2Parser::CB, 0);
}

tree::TerminalNode* Dart2Parser::ListLiteralContext::CONST_() {
  return getToken(Dart2Parser::CONST_, 0);
}

Dart2Parser::TypeArgumentsContext* Dart2Parser::ListLiteralContext::typeArguments() {
  return getRuleContext<Dart2Parser::TypeArgumentsContext>(0);
}

Dart2Parser::ElementsContext* Dart2Parser::ListLiteralContext::elements() {
  return getRuleContext<Dart2Parser::ElementsContext>(0);
}


size_t Dart2Parser::ListLiteralContext::getRuleIndex() const {
  return Dart2Parser::RuleListLiteral;
}

void Dart2Parser::ListLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterListLiteral(this);
}

void Dart2Parser::ListLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitListLiteral(this);
}

Dart2Parser::ListLiteralContext* Dart2Parser::listLiteral() {
  ListLiteralContext *_localctx = _tracker.createInstance<ListLiteralContext>(_ctx, getState());
  enterRule(_localctx, 210, Dart2Parser::RuleListLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1400);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Dart2Parser::CONST_) {
      setState(1399);
      match(Dart2Parser::CONST_);
    }
    setState(1403);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Dart2Parser::LT) {
      setState(1402);
      typeArguments();
    }
    setState(1405);
    match(Dart2Parser::OB);
    setState(1407);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -8734731060839923712) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 2271484645058780821) != 0)) {
      setState(1406);
      elements();
    }
    setState(1409);
    match(Dart2Parser::CB);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LiteralContext ------------------------------------------------------------------

Dart2Parser::LiteralContext::LiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::NullLiteralContext* Dart2Parser::LiteralContext::nullLiteral() {
  return getRuleContext<Dart2Parser::NullLiteralContext>(0);
}

Dart2Parser::BooleanLiteralContext* Dart2Parser::LiteralContext::booleanLiteral() {
  return getRuleContext<Dart2Parser::BooleanLiteralContext>(0);
}

Dart2Parser::NumericLiteralContext* Dart2Parser::LiteralContext::numericLiteral() {
  return getRuleContext<Dart2Parser::NumericLiteralContext>(0);
}

Dart2Parser::StringLiteralContext* Dart2Parser::LiteralContext::stringLiteral() {
  return getRuleContext<Dart2Parser::StringLiteralContext>(0);
}

Dart2Parser::SymbolLiteralContext* Dart2Parser::LiteralContext::symbolLiteral() {
  return getRuleContext<Dart2Parser::SymbolLiteralContext>(0);
}

Dart2Parser::ListLiteralContext* Dart2Parser::LiteralContext::listLiteral() {
  return getRuleContext<Dart2Parser::ListLiteralContext>(0);
}

Dart2Parser::SetOrMapLiteralContext* Dart2Parser::LiteralContext::setOrMapLiteral() {
  return getRuleContext<Dart2Parser::SetOrMapLiteralContext>(0);
}


size_t Dart2Parser::LiteralContext::getRuleIndex() const {
  return Dart2Parser::RuleLiteral;
}

void Dart2Parser::LiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteral(this);
}

void Dart2Parser::LiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteral(this);
}

Dart2Parser::LiteralContext* Dart2Parser::literal() {
  LiteralContext *_localctx = _tracker.createInstance<LiteralContext>(_ctx, getState());
  enterRule(_localctx, 212, Dart2Parser::RuleLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1418);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 152, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1411);
      nullLiteral();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1412);
      booleanLiteral();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1413);
      numericLiteral();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1414);
      stringLiteral();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1415);
      symbolLiteral();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1416);
      listLiteral();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1417);
      setOrMapLiteral();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LocalFunctionDeclarationContext ------------------------------------------------------------------

Dart2Parser::LocalFunctionDeclarationContext::LocalFunctionDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::MetadataContext* Dart2Parser::LocalFunctionDeclarationContext::metadata() {
  return getRuleContext<Dart2Parser::MetadataContext>(0);
}

Dart2Parser::FunctionSignatureContext* Dart2Parser::LocalFunctionDeclarationContext::functionSignature() {
  return getRuleContext<Dart2Parser::FunctionSignatureContext>(0);
}

Dart2Parser::FunctionBodyContext* Dart2Parser::LocalFunctionDeclarationContext::functionBody() {
  return getRuleContext<Dart2Parser::FunctionBodyContext>(0);
}


size_t Dart2Parser::LocalFunctionDeclarationContext::getRuleIndex() const {
  return Dart2Parser::RuleLocalFunctionDeclaration;
}

void Dart2Parser::LocalFunctionDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLocalFunctionDeclaration(this);
}

void Dart2Parser::LocalFunctionDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLocalFunctionDeclaration(this);
}

Dart2Parser::LocalFunctionDeclarationContext* Dart2Parser::localFunctionDeclaration() {
  LocalFunctionDeclarationContext *_localctx = _tracker.createInstance<LocalFunctionDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 214, Dart2Parser::RuleLocalFunctionDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1420);
    metadata();
    setState(1421);
    functionSignature();
    setState(1422);
    functionBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LocalVariableDeclarationContext ------------------------------------------------------------------

Dart2Parser::LocalVariableDeclarationContext::LocalVariableDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::MetadataContext* Dart2Parser::LocalVariableDeclarationContext::metadata() {
  return getRuleContext<Dart2Parser::MetadataContext>(0);
}

Dart2Parser::InitializedVariableDeclarationContext* Dart2Parser::LocalVariableDeclarationContext::initializedVariableDeclaration() {
  return getRuleContext<Dart2Parser::InitializedVariableDeclarationContext>(0);
}

tree::TerminalNode* Dart2Parser::LocalVariableDeclarationContext::SC() {
  return getToken(Dart2Parser::SC, 0);
}


size_t Dart2Parser::LocalVariableDeclarationContext::getRuleIndex() const {
  return Dart2Parser::RuleLocalVariableDeclaration;
}

void Dart2Parser::LocalVariableDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLocalVariableDeclaration(this);
}

void Dart2Parser::LocalVariableDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLocalVariableDeclaration(this);
}

Dart2Parser::LocalVariableDeclarationContext* Dart2Parser::localVariableDeclaration() {
  LocalVariableDeclarationContext *_localctx = _tracker.createInstance<LocalVariableDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 216, Dart2Parser::RuleLocalVariableDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1424);
    metadata();
    setState(1425);
    initializedVariableDeclaration();
    setState(1426);
    match(Dart2Parser::SC);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LogicalAndExpressionContext ------------------------------------------------------------------

Dart2Parser::LogicalAndExpressionContext::LogicalAndExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Dart2Parser::EqualityExpressionContext *> Dart2Parser::LogicalAndExpressionContext::equalityExpression() {
  return getRuleContexts<Dart2Parser::EqualityExpressionContext>();
}

Dart2Parser::EqualityExpressionContext* Dart2Parser::LogicalAndExpressionContext::equalityExpression(size_t i) {
  return getRuleContext<Dart2Parser::EqualityExpressionContext>(i);
}

std::vector<tree::TerminalNode *> Dart2Parser::LogicalAndExpressionContext::AA() {
  return getTokens(Dart2Parser::AA);
}

tree::TerminalNode* Dart2Parser::LogicalAndExpressionContext::AA(size_t i) {
  return getToken(Dart2Parser::AA, i);
}


size_t Dart2Parser::LogicalAndExpressionContext::getRuleIndex() const {
  return Dart2Parser::RuleLogicalAndExpression;
}

void Dart2Parser::LogicalAndExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLogicalAndExpression(this);
}

void Dart2Parser::LogicalAndExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLogicalAndExpression(this);
}

Dart2Parser::LogicalAndExpressionContext* Dart2Parser::logicalAndExpression() {
  LogicalAndExpressionContext *_localctx = _tracker.createInstance<LogicalAndExpressionContext>(_ctx, getState());
  enterRule(_localctx, 218, Dart2Parser::RuleLogicalAndExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1428);
    equalityExpression();
    setState(1433);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 153, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1429);
        match(Dart2Parser::AA);
        setState(1430);
        equalityExpression(); 
      }
      setState(1435);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 153, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LogicalOrExpressionContext ------------------------------------------------------------------

Dart2Parser::LogicalOrExpressionContext::LogicalOrExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Dart2Parser::LogicalAndExpressionContext *> Dart2Parser::LogicalOrExpressionContext::logicalAndExpression() {
  return getRuleContexts<Dart2Parser::LogicalAndExpressionContext>();
}

Dart2Parser::LogicalAndExpressionContext* Dart2Parser::LogicalOrExpressionContext::logicalAndExpression(size_t i) {
  return getRuleContext<Dart2Parser::LogicalAndExpressionContext>(i);
}

std::vector<tree::TerminalNode *> Dart2Parser::LogicalOrExpressionContext::PP() {
  return getTokens(Dart2Parser::PP);
}

tree::TerminalNode* Dart2Parser::LogicalOrExpressionContext::PP(size_t i) {
  return getToken(Dart2Parser::PP, i);
}


size_t Dart2Parser::LogicalOrExpressionContext::getRuleIndex() const {
  return Dart2Parser::RuleLogicalOrExpression;
}

void Dart2Parser::LogicalOrExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLogicalOrExpression(this);
}

void Dart2Parser::LogicalOrExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLogicalOrExpression(this);
}

Dart2Parser::LogicalOrExpressionContext* Dart2Parser::logicalOrExpression() {
  LogicalOrExpressionContext *_localctx = _tracker.createInstance<LogicalOrExpressionContext>(_ctx, getState());
  enterRule(_localctx, 220, Dart2Parser::RuleLogicalOrExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1436);
    logicalAndExpression();
    setState(1441);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 154, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1437);
        match(Dart2Parser::PP);
        setState(1438);
        logicalAndExpression(); 
      }
      setState(1443);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 154, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MapElementContext ------------------------------------------------------------------

Dart2Parser::MapElementContext::MapElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Dart2Parser::ExpressionContext *> Dart2Parser::MapElementContext::expression() {
  return getRuleContexts<Dart2Parser::ExpressionContext>();
}

Dart2Parser::ExpressionContext* Dart2Parser::MapElementContext::expression(size_t i) {
  return getRuleContext<Dart2Parser::ExpressionContext>(i);
}

tree::TerminalNode* Dart2Parser::MapElementContext::CO() {
  return getToken(Dart2Parser::CO, 0);
}


size_t Dart2Parser::MapElementContext::getRuleIndex() const {
  return Dart2Parser::RuleMapElement;
}

void Dart2Parser::MapElementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMapElement(this);
}

void Dart2Parser::MapElementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMapElement(this);
}

Dart2Parser::MapElementContext* Dart2Parser::mapElement() {
  MapElementContext *_localctx = _tracker.createInstance<MapElementContext>(_ctx, getState());
  enterRule(_localctx, 222, Dart2Parser::RuleMapElement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1444);
    expression();
    setState(1445);
    match(Dart2Parser::CO);
    setState(1446);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MetadataContext ------------------------------------------------------------------

Dart2Parser::MetadataContext::MetadataContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> Dart2Parser::MetadataContext::AT() {
  return getTokens(Dart2Parser::AT);
}

tree::TerminalNode* Dart2Parser::MetadataContext::AT(size_t i) {
  return getToken(Dart2Parser::AT, i);
}

std::vector<Dart2Parser::MetadatumContext *> Dart2Parser::MetadataContext::metadatum() {
  return getRuleContexts<Dart2Parser::MetadatumContext>();
}

Dart2Parser::MetadatumContext* Dart2Parser::MetadataContext::metadatum(size_t i) {
  return getRuleContext<Dart2Parser::MetadatumContext>(i);
}


size_t Dart2Parser::MetadataContext::getRuleIndex() const {
  return Dart2Parser::RuleMetadata;
}

void Dart2Parser::MetadataContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMetadata(this);
}

void Dart2Parser::MetadataContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMetadata(this);
}

Dart2Parser::MetadataContext* Dart2Parser::metadata() {
  MetadataContext *_localctx = _tracker.createInstance<MetadataContext>(_ctx, getState());
  enterRule(_localctx, 224, Dart2Parser::RuleMetadata);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1452);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Dart2Parser::AT) {
      setState(1448);
      match(Dart2Parser::AT);
      setState(1449);
      metadatum();
      setState(1454);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MetadatumContext ------------------------------------------------------------------

Dart2Parser::MetadatumContext::MetadatumContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::IdentifierContext* Dart2Parser::MetadatumContext::identifier() {
  return getRuleContext<Dart2Parser::IdentifierContext>(0);
}

Dart2Parser::QualifiedNameContext* Dart2Parser::MetadatumContext::qualifiedName() {
  return getRuleContext<Dart2Parser::QualifiedNameContext>(0);
}

Dart2Parser::ConstructorDesignationContext* Dart2Parser::MetadatumContext::constructorDesignation() {
  return getRuleContext<Dart2Parser::ConstructorDesignationContext>(0);
}

Dart2Parser::ArgumentsContext* Dart2Parser::MetadatumContext::arguments() {
  return getRuleContext<Dart2Parser::ArgumentsContext>(0);
}


size_t Dart2Parser::MetadatumContext::getRuleIndex() const {
  return Dart2Parser::RuleMetadatum;
}

void Dart2Parser::MetadatumContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMetadatum(this);
}

void Dart2Parser::MetadatumContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMetadatum(this);
}

Dart2Parser::MetadatumContext* Dart2Parser::metadatum() {
  MetadatumContext *_localctx = _tracker.createInstance<MetadatumContext>(_ctx, getState());
  enterRule(_localctx, 226, Dart2Parser::RuleMetadatum);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1460);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 156, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1455);
      identifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1456);
      qualifiedName();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1457);
      constructorDesignation();
      setState(1458);
      arguments();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MethodSignatureContext ------------------------------------------------------------------

Dart2Parser::MethodSignatureContext::MethodSignatureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::ConstructorSignatureContext* Dart2Parser::MethodSignatureContext::constructorSignature() {
  return getRuleContext<Dart2Parser::ConstructorSignatureContext>(0);
}

Dart2Parser::InitializersContext* Dart2Parser::MethodSignatureContext::initializers() {
  return getRuleContext<Dart2Parser::InitializersContext>(0);
}

Dart2Parser::FactoryConstructorSignatureContext* Dart2Parser::MethodSignatureContext::factoryConstructorSignature() {
  return getRuleContext<Dart2Parser::FactoryConstructorSignatureContext>(0);
}

Dart2Parser::FunctionSignatureContext* Dart2Parser::MethodSignatureContext::functionSignature() {
  return getRuleContext<Dart2Parser::FunctionSignatureContext>(0);
}

tree::TerminalNode* Dart2Parser::MethodSignatureContext::STATIC_() {
  return getToken(Dart2Parser::STATIC_, 0);
}

Dart2Parser::GetterSignatureContext* Dart2Parser::MethodSignatureContext::getterSignature() {
  return getRuleContext<Dart2Parser::GetterSignatureContext>(0);
}

Dart2Parser::SetterSignatureContext* Dart2Parser::MethodSignatureContext::setterSignature() {
  return getRuleContext<Dart2Parser::SetterSignatureContext>(0);
}

Dart2Parser::OperatorSignatureContext* Dart2Parser::MethodSignatureContext::operatorSignature() {
  return getRuleContext<Dart2Parser::OperatorSignatureContext>(0);
}


size_t Dart2Parser::MethodSignatureContext::getRuleIndex() const {
  return Dart2Parser::RuleMethodSignature;
}

void Dart2Parser::MethodSignatureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethodSignature(this);
}

void Dart2Parser::MethodSignatureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethodSignature(this);
}

Dart2Parser::MethodSignatureContext* Dart2Parser::methodSignature() {
  MethodSignatureContext *_localctx = _tracker.createInstance<MethodSignatureContext>(_ctx, getState());
  enterRule(_localctx, 228, Dart2Parser::RuleMethodSignature);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1480);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 161, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1462);
      constructorSignature();
      setState(1464);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Dart2Parser::CO) {
        setState(1463);
        initializers();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1466);
      factoryConstructorSignature();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1468);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 158, _ctx)) {
      case 1: {
        setState(1467);
        match(Dart2Parser::STATIC_);
        break;
      }

      default:
        break;
      }
      setState(1470);
      functionSignature();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1472);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Dart2Parser::STATIC_) {
        setState(1471);
        match(Dart2Parser::STATIC_);
      }
      setState(1474);
      getterSignature();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1476);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Dart2Parser::STATIC_) {
        setState(1475);
        match(Dart2Parser::STATIC_);
      }
      setState(1478);
      setterSignature();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1479);
      operatorSignature();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MinusOperatorContext ------------------------------------------------------------------

Dart2Parser::MinusOperatorContext::MinusOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::MinusOperatorContext::MINUS() {
  return getToken(Dart2Parser::MINUS, 0);
}


size_t Dart2Parser::MinusOperatorContext::getRuleIndex() const {
  return Dart2Parser::RuleMinusOperator;
}

void Dart2Parser::MinusOperatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMinusOperator(this);
}

void Dart2Parser::MinusOperatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMinusOperator(this);
}

Dart2Parser::MinusOperatorContext* Dart2Parser::minusOperator() {
  MinusOperatorContext *_localctx = _tracker.createInstance<MinusOperatorContext>(_ctx, getState());
  enterRule(_localctx, 230, Dart2Parser::RuleMinusOperator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1482);
    match(Dart2Parser::MINUS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MixinApplicationContext ------------------------------------------------------------------

Dart2Parser::MixinApplicationContext::MixinApplicationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::TypeNotVoidContext* Dart2Parser::MixinApplicationContext::typeNotVoid() {
  return getRuleContext<Dart2Parser::TypeNotVoidContext>(0);
}

Dart2Parser::MixinsContext* Dart2Parser::MixinApplicationContext::mixins() {
  return getRuleContext<Dart2Parser::MixinsContext>(0);
}

Dart2Parser::InterfacesContext* Dart2Parser::MixinApplicationContext::interfaces() {
  return getRuleContext<Dart2Parser::InterfacesContext>(0);
}


size_t Dart2Parser::MixinApplicationContext::getRuleIndex() const {
  return Dart2Parser::RuleMixinApplication;
}

void Dart2Parser::MixinApplicationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMixinApplication(this);
}

void Dart2Parser::MixinApplicationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMixinApplication(this);
}

Dart2Parser::MixinApplicationContext* Dart2Parser::mixinApplication() {
  MixinApplicationContext *_localctx = _tracker.createInstance<MixinApplicationContext>(_ctx, getState());
  enterRule(_localctx, 232, Dart2Parser::RuleMixinApplication);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1484);
    typeNotVoid();
    setState(1485);
    mixins();
    setState(1487);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Dart2Parser::IMPLEMENTS_) {
      setState(1486);
      interfaces();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MixinApplicationClassContext ------------------------------------------------------------------

Dart2Parser::MixinApplicationClassContext::MixinApplicationClassContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::IdentifierContext* Dart2Parser::MixinApplicationClassContext::identifier() {
  return getRuleContext<Dart2Parser::IdentifierContext>(0);
}

tree::TerminalNode* Dart2Parser::MixinApplicationClassContext::EQ() {
  return getToken(Dart2Parser::EQ, 0);
}

Dart2Parser::MixinApplicationContext* Dart2Parser::MixinApplicationClassContext::mixinApplication() {
  return getRuleContext<Dart2Parser::MixinApplicationContext>(0);
}

tree::TerminalNode* Dart2Parser::MixinApplicationClassContext::SC() {
  return getToken(Dart2Parser::SC, 0);
}

Dart2Parser::TypeParametersContext* Dart2Parser::MixinApplicationClassContext::typeParameters() {
  return getRuleContext<Dart2Parser::TypeParametersContext>(0);
}


size_t Dart2Parser::MixinApplicationClassContext::getRuleIndex() const {
  return Dart2Parser::RuleMixinApplicationClass;
}

void Dart2Parser::MixinApplicationClassContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMixinApplicationClass(this);
}

void Dart2Parser::MixinApplicationClassContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMixinApplicationClass(this);
}

Dart2Parser::MixinApplicationClassContext* Dart2Parser::mixinApplicationClass() {
  MixinApplicationClassContext *_localctx = _tracker.createInstance<MixinApplicationClassContext>(_ctx, getState());
  enterRule(_localctx, 234, Dart2Parser::RuleMixinApplicationClass);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1489);
    identifier();
    setState(1491);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Dart2Parser::LT) {
      setState(1490);
      typeParameters();
    }
    setState(1493);
    match(Dart2Parser::EQ);
    setState(1494);
    mixinApplication();
    setState(1495);
    match(Dart2Parser::SC);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MixinDeclarationContext ------------------------------------------------------------------

Dart2Parser::MixinDeclarationContext::MixinDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::MixinDeclarationContext::MIXIN_() {
  return getToken(Dart2Parser::MIXIN_, 0);
}

Dart2Parser::TypeIdentifierContext* Dart2Parser::MixinDeclarationContext::typeIdentifier() {
  return getRuleContext<Dart2Parser::TypeIdentifierContext>(0);
}

tree::TerminalNode* Dart2Parser::MixinDeclarationContext::OBC() {
  return getToken(Dart2Parser::OBC, 0);
}

tree::TerminalNode* Dart2Parser::MixinDeclarationContext::CBC() {
  return getToken(Dart2Parser::CBC, 0);
}

Dart2Parser::TypeParametersContext* Dart2Parser::MixinDeclarationContext::typeParameters() {
  return getRuleContext<Dart2Parser::TypeParametersContext>(0);
}

tree::TerminalNode* Dart2Parser::MixinDeclarationContext::ON_() {
  return getToken(Dart2Parser::ON_, 0);
}

Dart2Parser::TypeNotVoidListContext* Dart2Parser::MixinDeclarationContext::typeNotVoidList() {
  return getRuleContext<Dart2Parser::TypeNotVoidListContext>(0);
}

Dart2Parser::InterfacesContext* Dart2Parser::MixinDeclarationContext::interfaces() {
  return getRuleContext<Dart2Parser::InterfacesContext>(0);
}

std::vector<Dart2Parser::MetadataContext *> Dart2Parser::MixinDeclarationContext::metadata() {
  return getRuleContexts<Dart2Parser::MetadataContext>();
}

Dart2Parser::MetadataContext* Dart2Parser::MixinDeclarationContext::metadata(size_t i) {
  return getRuleContext<Dart2Parser::MetadataContext>(i);
}

std::vector<Dart2Parser::ClassMemberDeclarationContext *> Dart2Parser::MixinDeclarationContext::classMemberDeclaration() {
  return getRuleContexts<Dart2Parser::ClassMemberDeclarationContext>();
}

Dart2Parser::ClassMemberDeclarationContext* Dart2Parser::MixinDeclarationContext::classMemberDeclaration(size_t i) {
  return getRuleContext<Dart2Parser::ClassMemberDeclarationContext>(i);
}


size_t Dart2Parser::MixinDeclarationContext::getRuleIndex() const {
  return Dart2Parser::RuleMixinDeclaration;
}

void Dart2Parser::MixinDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMixinDeclaration(this);
}

void Dart2Parser::MixinDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMixinDeclaration(this);
}

Dart2Parser::MixinDeclarationContext* Dart2Parser::mixinDeclaration() {
  MixinDeclarationContext *_localctx = _tracker.createInstance<MixinDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 236, Dart2Parser::RuleMixinDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1497);
    match(Dart2Parser::MIXIN_);
    setState(1498);
    typeIdentifier();
    setState(1500);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Dart2Parser::LT) {
      setState(1499);
      typeParameters();
    }
    setState(1504);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Dart2Parser::ON_) {
      setState(1502);
      match(Dart2Parser::ON_);
      setState(1503);
      typeNotVoidList();
    }
    setState(1507);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Dart2Parser::IMPLEMENTS_) {
      setState(1506);
      interfaces();
    }
    setState(1509);
    match(Dart2Parser::OBC);
    setState(1515);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -8736983277098762224) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 1196874750185123477) != 0)) {
      setState(1510);
      metadata();
      setState(1511);
      classMemberDeclaration();
      setState(1517);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1518);
    match(Dart2Parser::CBC);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MixinsContext ------------------------------------------------------------------

Dart2Parser::MixinsContext::MixinsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::MixinsContext::WITH_() {
  return getToken(Dart2Parser::WITH_, 0);
}

Dart2Parser::TypeNotVoidListContext* Dart2Parser::MixinsContext::typeNotVoidList() {
  return getRuleContext<Dart2Parser::TypeNotVoidListContext>(0);
}


size_t Dart2Parser::MixinsContext::getRuleIndex() const {
  return Dart2Parser::RuleMixins;
}

void Dart2Parser::MixinsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMixins(this);
}

void Dart2Parser::MixinsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMixins(this);
}

Dart2Parser::MixinsContext* Dart2Parser::mixins() {
  MixinsContext *_localctx = _tracker.createInstance<MixinsContext>(_ctx, getState());
  enterRule(_localctx, 238, Dart2Parser::RuleMixins);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1520);
    match(Dart2Parser::WITH_);
    setState(1521);
    typeNotVoidList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MultilineStringContext ------------------------------------------------------------------

Dart2Parser::MultilineStringContext::MultilineStringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::MultilineStringContext::MultiLineString() {
  return getToken(Dart2Parser::MultiLineString, 0);
}


size_t Dart2Parser::MultilineStringContext::getRuleIndex() const {
  return Dart2Parser::RuleMultilineString;
}

void Dart2Parser::MultilineStringContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMultilineString(this);
}

void Dart2Parser::MultilineStringContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMultilineString(this);
}

Dart2Parser::MultilineStringContext* Dart2Parser::multilineString() {
  MultilineStringContext *_localctx = _tracker.createInstance<MultilineStringContext>(_ctx, getState());
  enterRule(_localctx, 240, Dart2Parser::RuleMultilineString);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1523);
    match(Dart2Parser::MultiLineString);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MultiplicativeExpressionContext ------------------------------------------------------------------

Dart2Parser::MultiplicativeExpressionContext::MultiplicativeExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Dart2Parser::UnaryExpressionContext *> Dart2Parser::MultiplicativeExpressionContext::unaryExpression() {
  return getRuleContexts<Dart2Parser::UnaryExpressionContext>();
}

Dart2Parser::UnaryExpressionContext* Dart2Parser::MultiplicativeExpressionContext::unaryExpression(size_t i) {
  return getRuleContext<Dart2Parser::UnaryExpressionContext>(i);
}

std::vector<Dart2Parser::MultiplicativeOperatorContext *> Dart2Parser::MultiplicativeExpressionContext::multiplicativeOperator() {
  return getRuleContexts<Dart2Parser::MultiplicativeOperatorContext>();
}

Dart2Parser::MultiplicativeOperatorContext* Dart2Parser::MultiplicativeExpressionContext::multiplicativeOperator(size_t i) {
  return getRuleContext<Dart2Parser::MultiplicativeOperatorContext>(i);
}

tree::TerminalNode* Dart2Parser::MultiplicativeExpressionContext::SUPER_() {
  return getToken(Dart2Parser::SUPER_, 0);
}


size_t Dart2Parser::MultiplicativeExpressionContext::getRuleIndex() const {
  return Dart2Parser::RuleMultiplicativeExpression;
}

void Dart2Parser::MultiplicativeExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMultiplicativeExpression(this);
}

void Dart2Parser::MultiplicativeExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMultiplicativeExpression(this);
}

Dart2Parser::MultiplicativeExpressionContext* Dart2Parser::multiplicativeExpression() {
  MultiplicativeExpressionContext *_localctx = _tracker.createInstance<MultiplicativeExpressionContext>(_ctx, getState());
  enterRule(_localctx, 242, Dart2Parser::RuleMultiplicativeExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1542);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 170, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1525);
      unaryExpression();
      setState(1531);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 168, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1526);
          multiplicativeOperator();
          setState(1527);
          unaryExpression(); 
        }
        setState(1533);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 168, _ctx);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1534);
      match(Dart2Parser::SUPER_);
      setState(1538); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(1535);
                multiplicativeOperator();
                setState(1536);
                unaryExpression();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(1540); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 169, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MultiplicativeOperatorContext ------------------------------------------------------------------

Dart2Parser::MultiplicativeOperatorContext::MultiplicativeOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::MultiplicativeOperatorContext::ST() {
  return getToken(Dart2Parser::ST, 0);
}

tree::TerminalNode* Dart2Parser::MultiplicativeOperatorContext::SL() {
  return getToken(Dart2Parser::SL, 0);
}

tree::TerminalNode* Dart2Parser::MultiplicativeOperatorContext::PC() {
  return getToken(Dart2Parser::PC, 0);
}

tree::TerminalNode* Dart2Parser::MultiplicativeOperatorContext::SQS() {
  return getToken(Dart2Parser::SQS, 0);
}


size_t Dart2Parser::MultiplicativeOperatorContext::getRuleIndex() const {
  return Dart2Parser::RuleMultiplicativeOperator;
}

void Dart2Parser::MultiplicativeOperatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMultiplicativeOperator(this);
}

void Dart2Parser::MultiplicativeOperatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMultiplicativeOperator(this);
}

Dart2Parser::MultiplicativeOperatorContext* Dart2Parser::multiplicativeOperator() {
  MultiplicativeOperatorContext *_localctx = _tracker.createInstance<MultiplicativeOperatorContext>(_ctx, getState());
  enterRule(_localctx, 244, Dart2Parser::RuleMultiplicativeOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1544);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 5348033147437056) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NamedArgumentContext ------------------------------------------------------------------

Dart2Parser::NamedArgumentContext::NamedArgumentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::LabelContext* Dart2Parser::NamedArgumentContext::label() {
  return getRuleContext<Dart2Parser::LabelContext>(0);
}

Dart2Parser::ExpressionContext* Dart2Parser::NamedArgumentContext::expression() {
  return getRuleContext<Dart2Parser::ExpressionContext>(0);
}


size_t Dart2Parser::NamedArgumentContext::getRuleIndex() const {
  return Dart2Parser::RuleNamedArgument;
}

void Dart2Parser::NamedArgumentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamedArgument(this);
}

void Dart2Parser::NamedArgumentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamedArgument(this);
}

Dart2Parser::NamedArgumentContext* Dart2Parser::namedArgument() {
  NamedArgumentContext *_localctx = _tracker.createInstance<NamedArgumentContext>(_ctx, getState());
  enterRule(_localctx, 246, Dart2Parser::RuleNamedArgument);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1546);
    label();
    setState(1547);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NamedFormalParametersContext ------------------------------------------------------------------

Dart2Parser::NamedFormalParametersContext::NamedFormalParametersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::NamedFormalParametersContext::OBC() {
  return getToken(Dart2Parser::OBC, 0);
}

std::vector<Dart2Parser::DefaultNamedParameterContext *> Dart2Parser::NamedFormalParametersContext::defaultNamedParameter() {
  return getRuleContexts<Dart2Parser::DefaultNamedParameterContext>();
}

Dart2Parser::DefaultNamedParameterContext* Dart2Parser::NamedFormalParametersContext::defaultNamedParameter(size_t i) {
  return getRuleContext<Dart2Parser::DefaultNamedParameterContext>(i);
}

tree::TerminalNode* Dart2Parser::NamedFormalParametersContext::CBC() {
  return getToken(Dart2Parser::CBC, 0);
}

std::vector<tree::TerminalNode *> Dart2Parser::NamedFormalParametersContext::C() {
  return getTokens(Dart2Parser::C);
}

tree::TerminalNode* Dart2Parser::NamedFormalParametersContext::C(size_t i) {
  return getToken(Dart2Parser::C, i);
}


size_t Dart2Parser::NamedFormalParametersContext::getRuleIndex() const {
  return Dart2Parser::RuleNamedFormalParameters;
}

void Dart2Parser::NamedFormalParametersContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamedFormalParameters(this);
}

void Dart2Parser::NamedFormalParametersContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamedFormalParameters(this);
}

Dart2Parser::NamedFormalParametersContext* Dart2Parser::namedFormalParameters() {
  NamedFormalParametersContext *_localctx = _tracker.createInstance<NamedFormalParametersContext>(_ctx, getState());
  enterRule(_localctx, 248, Dart2Parser::RuleNamedFormalParameters);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1549);
    match(Dart2Parser::OBC);
    setState(1550);
    defaultNamedParameter();
    setState(1555);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 171, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1551);
        match(Dart2Parser::C);
        setState(1552);
        defaultNamedParameter(); 
      }
      setState(1557);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 171, _ctx);
    }
    setState(1559);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Dart2Parser::C) {
      setState(1558);
      match(Dart2Parser::C);
    }
    setState(1561);
    match(Dart2Parser::CBC);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NamedParameterTypeContext ------------------------------------------------------------------

Dart2Parser::NamedParameterTypeContext::NamedParameterTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::MetadataContext* Dart2Parser::NamedParameterTypeContext::metadata() {
  return getRuleContext<Dart2Parser::MetadataContext>(0);
}

Dart2Parser::TypedIdentifierContext* Dart2Parser::NamedParameterTypeContext::typedIdentifier() {
  return getRuleContext<Dart2Parser::TypedIdentifierContext>(0);
}

tree::TerminalNode* Dart2Parser::NamedParameterTypeContext::REQUIRED_() {
  return getToken(Dart2Parser::REQUIRED_, 0);
}


size_t Dart2Parser::NamedParameterTypeContext::getRuleIndex() const {
  return Dart2Parser::RuleNamedParameterType;
}

void Dart2Parser::NamedParameterTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamedParameterType(this);
}

void Dart2Parser::NamedParameterTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamedParameterType(this);
}

Dart2Parser::NamedParameterTypeContext* Dart2Parser::namedParameterType() {
  NamedParameterTypeContext *_localctx = _tracker.createInstance<NamedParameterTypeContext>(_ctx, getState());
  enterRule(_localctx, 250, Dart2Parser::RuleNamedParameterType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1563);
    metadata();
    setState(1565);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Dart2Parser::REQUIRED_) {
      setState(1564);
      match(Dart2Parser::REQUIRED_);
    }
    setState(1567);
    typedIdentifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NamedParameterTypesContext ------------------------------------------------------------------

Dart2Parser::NamedParameterTypesContext::NamedParameterTypesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::NamedParameterTypesContext::OBC() {
  return getToken(Dart2Parser::OBC, 0);
}

std::vector<Dart2Parser::NamedParameterTypeContext *> Dart2Parser::NamedParameterTypesContext::namedParameterType() {
  return getRuleContexts<Dart2Parser::NamedParameterTypeContext>();
}

Dart2Parser::NamedParameterTypeContext* Dart2Parser::NamedParameterTypesContext::namedParameterType(size_t i) {
  return getRuleContext<Dart2Parser::NamedParameterTypeContext>(i);
}

tree::TerminalNode* Dart2Parser::NamedParameterTypesContext::CBC() {
  return getToken(Dart2Parser::CBC, 0);
}

std::vector<tree::TerminalNode *> Dart2Parser::NamedParameterTypesContext::C() {
  return getTokens(Dart2Parser::C);
}

tree::TerminalNode* Dart2Parser::NamedParameterTypesContext::C(size_t i) {
  return getToken(Dart2Parser::C, i);
}


size_t Dart2Parser::NamedParameterTypesContext::getRuleIndex() const {
  return Dart2Parser::RuleNamedParameterTypes;
}

void Dart2Parser::NamedParameterTypesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamedParameterTypes(this);
}

void Dart2Parser::NamedParameterTypesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamedParameterTypes(this);
}

Dart2Parser::NamedParameterTypesContext* Dart2Parser::namedParameterTypes() {
  NamedParameterTypesContext *_localctx = _tracker.createInstance<NamedParameterTypesContext>(_ctx, getState());
  enterRule(_localctx, 252, Dart2Parser::RuleNamedParameterTypes);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1569);
    match(Dart2Parser::OBC);
    setState(1570);
    namedParameterType();
    setState(1575);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 174, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1571);
        match(Dart2Parser::C);
        setState(1572);
        namedParameterType(); 
      }
      setState(1577);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 174, _ctx);
    }
    setState(1579);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Dart2Parser::C) {
      setState(1578);
      match(Dart2Parser::C);
    }
    setState(1581);
    match(Dart2Parser::CBC);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NegationOperatorContext ------------------------------------------------------------------

Dart2Parser::NegationOperatorContext::NegationOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::NegationOperatorContext::NOT() {
  return getToken(Dart2Parser::NOT, 0);
}


size_t Dart2Parser::NegationOperatorContext::getRuleIndex() const {
  return Dart2Parser::RuleNegationOperator;
}

void Dart2Parser::NegationOperatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNegationOperator(this);
}

void Dart2Parser::NegationOperatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNegationOperator(this);
}

Dart2Parser::NegationOperatorContext* Dart2Parser::negationOperator() {
  NegationOperatorContext *_localctx = _tracker.createInstance<NegationOperatorContext>(_ctx, getState());
  enterRule(_localctx, 254, Dart2Parser::RuleNegationOperator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1583);
    match(Dart2Parser::NOT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NewExpressionContext ------------------------------------------------------------------

Dart2Parser::NewExpressionContext::NewExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::NewExpressionContext::NEW_() {
  return getToken(Dart2Parser::NEW_, 0);
}

Dart2Parser::ConstructorDesignationContext* Dart2Parser::NewExpressionContext::constructorDesignation() {
  return getRuleContext<Dart2Parser::ConstructorDesignationContext>(0);
}

Dart2Parser::ArgumentsContext* Dart2Parser::NewExpressionContext::arguments() {
  return getRuleContext<Dart2Parser::ArgumentsContext>(0);
}


size_t Dart2Parser::NewExpressionContext::getRuleIndex() const {
  return Dart2Parser::RuleNewExpression;
}

void Dart2Parser::NewExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNewExpression(this);
}

void Dart2Parser::NewExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNewExpression(this);
}

Dart2Parser::NewExpressionContext* Dart2Parser::newExpression() {
  NewExpressionContext *_localctx = _tracker.createInstance<NewExpressionContext>(_ctx, getState());
  enterRule(_localctx, 256, Dart2Parser::RuleNewExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1585);
    match(Dart2Parser::NEW_);
    setState(1586);
    constructorDesignation();
    setState(1587);
    arguments();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NonLabelledStatementContext ------------------------------------------------------------------

Dart2Parser::NonLabelledStatementContext::NonLabelledStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::BlockContext* Dart2Parser::NonLabelledStatementContext::block() {
  return getRuleContext<Dart2Parser::BlockContext>(0);
}

Dart2Parser::LocalVariableDeclarationContext* Dart2Parser::NonLabelledStatementContext::localVariableDeclaration() {
  return getRuleContext<Dart2Parser::LocalVariableDeclarationContext>(0);
}

Dart2Parser::ForStatementContext* Dart2Parser::NonLabelledStatementContext::forStatement() {
  return getRuleContext<Dart2Parser::ForStatementContext>(0);
}

Dart2Parser::WhileStatementContext* Dart2Parser::NonLabelledStatementContext::whileStatement() {
  return getRuleContext<Dart2Parser::WhileStatementContext>(0);
}

Dart2Parser::DoStatementContext* Dart2Parser::NonLabelledStatementContext::doStatement() {
  return getRuleContext<Dart2Parser::DoStatementContext>(0);
}

Dart2Parser::SwitchStatementContext* Dart2Parser::NonLabelledStatementContext::switchStatement() {
  return getRuleContext<Dart2Parser::SwitchStatementContext>(0);
}

Dart2Parser::IfStatementContext* Dart2Parser::NonLabelledStatementContext::ifStatement() {
  return getRuleContext<Dart2Parser::IfStatementContext>(0);
}

Dart2Parser::RethrowStatementContext* Dart2Parser::NonLabelledStatementContext::rethrowStatement() {
  return getRuleContext<Dart2Parser::RethrowStatementContext>(0);
}

Dart2Parser::TryStatementContext* Dart2Parser::NonLabelledStatementContext::tryStatement() {
  return getRuleContext<Dart2Parser::TryStatementContext>(0);
}

Dart2Parser::BreakStatementContext* Dart2Parser::NonLabelledStatementContext::breakStatement() {
  return getRuleContext<Dart2Parser::BreakStatementContext>(0);
}

Dart2Parser::ContinueStatementContext* Dart2Parser::NonLabelledStatementContext::continueStatement() {
  return getRuleContext<Dart2Parser::ContinueStatementContext>(0);
}

Dart2Parser::ReturnStatementContext* Dart2Parser::NonLabelledStatementContext::returnStatement() {
  return getRuleContext<Dart2Parser::ReturnStatementContext>(0);
}

Dart2Parser::YieldStatementContext* Dart2Parser::NonLabelledStatementContext::yieldStatement() {
  return getRuleContext<Dart2Parser::YieldStatementContext>(0);
}

Dart2Parser::YieldEachStatementContext* Dart2Parser::NonLabelledStatementContext::yieldEachStatement() {
  return getRuleContext<Dart2Parser::YieldEachStatementContext>(0);
}

Dart2Parser::ExpressionStatementContext* Dart2Parser::NonLabelledStatementContext::expressionStatement() {
  return getRuleContext<Dart2Parser::ExpressionStatementContext>(0);
}

Dart2Parser::AssertStatementContext* Dart2Parser::NonLabelledStatementContext::assertStatement() {
  return getRuleContext<Dart2Parser::AssertStatementContext>(0);
}

Dart2Parser::LocalFunctionDeclarationContext* Dart2Parser::NonLabelledStatementContext::localFunctionDeclaration() {
  return getRuleContext<Dart2Parser::LocalFunctionDeclarationContext>(0);
}


size_t Dart2Parser::NonLabelledStatementContext::getRuleIndex() const {
  return Dart2Parser::RuleNonLabelledStatement;
}

void Dart2Parser::NonLabelledStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNonLabelledStatement(this);
}

void Dart2Parser::NonLabelledStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNonLabelledStatement(this);
}

Dart2Parser::NonLabelledStatementContext* Dart2Parser::nonLabelledStatement() {
  NonLabelledStatementContext *_localctx = _tracker.createInstance<NonLabelledStatementContext>(_ctx, getState());
  enterRule(_localctx, 258, Dart2Parser::RuleNonLabelledStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1606);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 176, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1589);
      block();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1590);
      localVariableDeclaration();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1591);
      forStatement();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1592);
      whileStatement();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1593);
      doStatement();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1594);
      switchStatement();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1595);
      ifStatement();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1596);
      rethrowStatement();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1597);
      tryStatement();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(1598);
      breakStatement();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(1599);
      continueStatement();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(1600);
      returnStatement();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(1601);
      yieldStatement();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(1602);
      yieldEachStatement();
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(1603);
      expressionStatement();
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(1604);
      assertStatement();
      break;
    }

    case 17: {
      enterOuterAlt(_localctx, 17);
      setState(1605);
      localFunctionDeclaration();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NormalFormalParameterContext ------------------------------------------------------------------

Dart2Parser::NormalFormalParameterContext::NormalFormalParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::MetadataContext* Dart2Parser::NormalFormalParameterContext::metadata() {
  return getRuleContext<Dart2Parser::MetadataContext>(0);
}

Dart2Parser::NormalFormalParameterNoMetadataContext* Dart2Parser::NormalFormalParameterContext::normalFormalParameterNoMetadata() {
  return getRuleContext<Dart2Parser::NormalFormalParameterNoMetadataContext>(0);
}


size_t Dart2Parser::NormalFormalParameterContext::getRuleIndex() const {
  return Dart2Parser::RuleNormalFormalParameter;
}

void Dart2Parser::NormalFormalParameterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNormalFormalParameter(this);
}

void Dart2Parser::NormalFormalParameterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNormalFormalParameter(this);
}

Dart2Parser::NormalFormalParameterContext* Dart2Parser::normalFormalParameter() {
  NormalFormalParameterContext *_localctx = _tracker.createInstance<NormalFormalParameterContext>(_ctx, getState());
  enterRule(_localctx, 260, Dart2Parser::RuleNormalFormalParameter);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1608);
    metadata();
    setState(1609);
    normalFormalParameterNoMetadata();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NormalFormalParameterNoMetadataContext ------------------------------------------------------------------

Dart2Parser::NormalFormalParameterNoMetadataContext::NormalFormalParameterNoMetadataContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::FunctionFormalParameterContext* Dart2Parser::NormalFormalParameterNoMetadataContext::functionFormalParameter() {
  return getRuleContext<Dart2Parser::FunctionFormalParameterContext>(0);
}

Dart2Parser::FieldFormalParameterContext* Dart2Parser::NormalFormalParameterNoMetadataContext::fieldFormalParameter() {
  return getRuleContext<Dart2Parser::FieldFormalParameterContext>(0);
}

Dart2Parser::SimpleFormalParameterContext* Dart2Parser::NormalFormalParameterNoMetadataContext::simpleFormalParameter() {
  return getRuleContext<Dart2Parser::SimpleFormalParameterContext>(0);
}


size_t Dart2Parser::NormalFormalParameterNoMetadataContext::getRuleIndex() const {
  return Dart2Parser::RuleNormalFormalParameterNoMetadata;
}

void Dart2Parser::NormalFormalParameterNoMetadataContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNormalFormalParameterNoMetadata(this);
}

void Dart2Parser::NormalFormalParameterNoMetadataContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNormalFormalParameterNoMetadata(this);
}

Dart2Parser::NormalFormalParameterNoMetadataContext* Dart2Parser::normalFormalParameterNoMetadata() {
  NormalFormalParameterNoMetadataContext *_localctx = _tracker.createInstance<NormalFormalParameterNoMetadataContext>(_ctx, getState());
  enterRule(_localctx, 262, Dart2Parser::RuleNormalFormalParameterNoMetadata);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1614);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 177, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1611);
      functionFormalParameter();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1612);
      fieldFormalParameter();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1613);
      simpleFormalParameter();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NormalFormalParametersContext ------------------------------------------------------------------

Dart2Parser::NormalFormalParametersContext::NormalFormalParametersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Dart2Parser::NormalFormalParameterContext *> Dart2Parser::NormalFormalParametersContext::normalFormalParameter() {
  return getRuleContexts<Dart2Parser::NormalFormalParameterContext>();
}

Dart2Parser::NormalFormalParameterContext* Dart2Parser::NormalFormalParametersContext::normalFormalParameter(size_t i) {
  return getRuleContext<Dart2Parser::NormalFormalParameterContext>(i);
}

std::vector<tree::TerminalNode *> Dart2Parser::NormalFormalParametersContext::C() {
  return getTokens(Dart2Parser::C);
}

tree::TerminalNode* Dart2Parser::NormalFormalParametersContext::C(size_t i) {
  return getToken(Dart2Parser::C, i);
}


size_t Dart2Parser::NormalFormalParametersContext::getRuleIndex() const {
  return Dart2Parser::RuleNormalFormalParameters;
}

void Dart2Parser::NormalFormalParametersContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNormalFormalParameters(this);
}

void Dart2Parser::NormalFormalParametersContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNormalFormalParameters(this);
}

Dart2Parser::NormalFormalParametersContext* Dart2Parser::normalFormalParameters() {
  NormalFormalParametersContext *_localctx = _tracker.createInstance<NormalFormalParametersContext>(_ctx, getState());
  enterRule(_localctx, 264, Dart2Parser::RuleNormalFormalParameters);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1616);
    normalFormalParameter();
    setState(1621);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 178, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1617);
        match(Dart2Parser::C);
        setState(1618);
        normalFormalParameter(); 
      }
      setState(1623);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 178, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NormalParameterTypeContext ------------------------------------------------------------------

Dart2Parser::NormalParameterTypeContext::NormalParameterTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::MetadataContext* Dart2Parser::NormalParameterTypeContext::metadata() {
  return getRuleContext<Dart2Parser::MetadataContext>(0);
}

Dart2Parser::TypedIdentifierContext* Dart2Parser::NormalParameterTypeContext::typedIdentifier() {
  return getRuleContext<Dart2Parser::TypedIdentifierContext>(0);
}

Dart2Parser::TypeContext* Dart2Parser::NormalParameterTypeContext::type() {
  return getRuleContext<Dart2Parser::TypeContext>(0);
}


size_t Dart2Parser::NormalParameterTypeContext::getRuleIndex() const {
  return Dart2Parser::RuleNormalParameterType;
}

void Dart2Parser::NormalParameterTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNormalParameterType(this);
}

void Dart2Parser::NormalParameterTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNormalParameterType(this);
}

Dart2Parser::NormalParameterTypeContext* Dart2Parser::normalParameterType() {
  NormalParameterTypeContext *_localctx = _tracker.createInstance<NormalParameterTypeContext>(_ctx, getState());
  enterRule(_localctx, 266, Dart2Parser::RuleNormalParameterType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1630);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 179, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1624);
      metadata();
      setState(1625);
      typedIdentifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1627);
      metadata();
      setState(1628);
      type();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NormalParameterTypesContext ------------------------------------------------------------------

Dart2Parser::NormalParameterTypesContext::NormalParameterTypesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Dart2Parser::NormalParameterTypeContext *> Dart2Parser::NormalParameterTypesContext::normalParameterType() {
  return getRuleContexts<Dart2Parser::NormalParameterTypeContext>();
}

Dart2Parser::NormalParameterTypeContext* Dart2Parser::NormalParameterTypesContext::normalParameterType(size_t i) {
  return getRuleContext<Dart2Parser::NormalParameterTypeContext>(i);
}

std::vector<tree::TerminalNode *> Dart2Parser::NormalParameterTypesContext::C() {
  return getTokens(Dart2Parser::C);
}

tree::TerminalNode* Dart2Parser::NormalParameterTypesContext::C(size_t i) {
  return getToken(Dart2Parser::C, i);
}


size_t Dart2Parser::NormalParameterTypesContext::getRuleIndex() const {
  return Dart2Parser::RuleNormalParameterTypes;
}

void Dart2Parser::NormalParameterTypesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNormalParameterTypes(this);
}

void Dart2Parser::NormalParameterTypesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNormalParameterTypes(this);
}

Dart2Parser::NormalParameterTypesContext* Dart2Parser::normalParameterTypes() {
  NormalParameterTypesContext *_localctx = _tracker.createInstance<NormalParameterTypesContext>(_ctx, getState());
  enterRule(_localctx, 268, Dart2Parser::RuleNormalParameterTypes);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1632);
    normalParameterType();
    setState(1637);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 180, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1633);
        match(Dart2Parser::C);
        setState(1634);
        normalParameterType(); 
      }
      setState(1639);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 180, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NullLiteralContext ------------------------------------------------------------------

Dart2Parser::NullLiteralContext::NullLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::NullLiteralContext::NULL_() {
  return getToken(Dart2Parser::NULL_, 0);
}


size_t Dart2Parser::NullLiteralContext::getRuleIndex() const {
  return Dart2Parser::RuleNullLiteral;
}

void Dart2Parser::NullLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNullLiteral(this);
}

void Dart2Parser::NullLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNullLiteral(this);
}

Dart2Parser::NullLiteralContext* Dart2Parser::nullLiteral() {
  NullLiteralContext *_localctx = _tracker.createInstance<NullLiteralContext>(_ctx, getState());
  enterRule(_localctx, 270, Dart2Parser::RuleNullLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1640);
    match(Dart2Parser::NULL_);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NumericLiteralContext ------------------------------------------------------------------

Dart2Parser::NumericLiteralContext::NumericLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::NumericLiteralContext::NUMBER() {
  return getToken(Dart2Parser::NUMBER, 0);
}

tree::TerminalNode* Dart2Parser::NumericLiteralContext::HEX_NUMBER() {
  return getToken(Dart2Parser::HEX_NUMBER, 0);
}


size_t Dart2Parser::NumericLiteralContext::getRuleIndex() const {
  return Dart2Parser::RuleNumericLiteral;
}

void Dart2Parser::NumericLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNumericLiteral(this);
}

void Dart2Parser::NumericLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNumericLiteral(this);
}

Dart2Parser::NumericLiteralContext* Dart2Parser::numericLiteral() {
  NumericLiteralContext *_localctx = _tracker.createInstance<NumericLiteralContext>(_ctx, getState());
  enterRule(_localctx, 272, Dart2Parser::RuleNumericLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1642);
    _la = _input->LA(1);
    if (!(_la == Dart2Parser::NUMBER

    || _la == Dart2Parser::HEX_NUMBER)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OnPartContext ------------------------------------------------------------------

Dart2Parser::OnPartContext::OnPartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::CatchPartContext* Dart2Parser::OnPartContext::catchPart() {
  return getRuleContext<Dart2Parser::CatchPartContext>(0);
}

Dart2Parser::BlockContext* Dart2Parser::OnPartContext::block() {
  return getRuleContext<Dart2Parser::BlockContext>(0);
}

tree::TerminalNode* Dart2Parser::OnPartContext::ON_() {
  return getToken(Dart2Parser::ON_, 0);
}

Dart2Parser::TypeNotVoidContext* Dart2Parser::OnPartContext::typeNotVoid() {
  return getRuleContext<Dart2Parser::TypeNotVoidContext>(0);
}


size_t Dart2Parser::OnPartContext::getRuleIndex() const {
  return Dart2Parser::RuleOnPart;
}

void Dart2Parser::OnPartContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOnPart(this);
}

void Dart2Parser::OnPartContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOnPart(this);
}

Dart2Parser::OnPartContext* Dart2Parser::onPart() {
  OnPartContext *_localctx = _tracker.createInstance<OnPartContext>(_ctx, getState());
  enterRule(_localctx, 274, Dart2Parser::RuleOnPart);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1654);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Dart2Parser::CATCH_: {
        enterOuterAlt(_localctx, 1);
        setState(1644);
        catchPart();
        setState(1645);
        block();
        break;
      }

      case Dart2Parser::ON_: {
        enterOuterAlt(_localctx, 2);
        setState(1647);
        match(Dart2Parser::ON_);
        setState(1648);
        typeNotVoid();
        setState(1650);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Dart2Parser::CATCH_) {
          setState(1649);
          catchPart();
        }
        setState(1652);
        block();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OperatorContext ------------------------------------------------------------------

Dart2Parser::OperatorContext::OperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::OperatorContext::SQUIG() {
  return getToken(Dart2Parser::SQUIG, 0);
}

Dart2Parser::BinaryOperatorContext* Dart2Parser::OperatorContext::binaryOperator() {
  return getRuleContext<Dart2Parser::BinaryOperatorContext>(0);
}

tree::TerminalNode* Dart2Parser::OperatorContext::OB() {
  return getToken(Dart2Parser::OB, 0);
}

tree::TerminalNode* Dart2Parser::OperatorContext::CB() {
  return getToken(Dart2Parser::CB, 0);
}

tree::TerminalNode* Dart2Parser::OperatorContext::EQ() {
  return getToken(Dart2Parser::EQ, 0);
}


size_t Dart2Parser::OperatorContext::getRuleIndex() const {
  return Dart2Parser::RuleOperator;
}

void Dart2Parser::OperatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOperator(this);
}

void Dart2Parser::OperatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOperator(this);
}

Dart2Parser::OperatorContext* Dart2Parser::operator_() {
  OperatorContext *_localctx = _tracker.createInstance<OperatorContext>(_ctx, getState());
  enterRule(_localctx, 276, Dart2Parser::RuleOperator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1663);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 183, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1656);
      match(Dart2Parser::SQUIG);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1657);
      binaryOperator();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1658);
      match(Dart2Parser::OB);
      setState(1659);
      match(Dart2Parser::CB);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1660);
      match(Dart2Parser::OB);
      setState(1661);
      match(Dart2Parser::CB);
      setState(1662);
      match(Dart2Parser::EQ);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OperatorSignatureContext ------------------------------------------------------------------

Dart2Parser::OperatorSignatureContext::OperatorSignatureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::OperatorSignatureContext::OPERATOR_() {
  return getToken(Dart2Parser::OPERATOR_, 0);
}

Dart2Parser::OperatorContext* Dart2Parser::OperatorSignatureContext::operator_() {
  return getRuleContext<Dart2Parser::OperatorContext>(0);
}

Dart2Parser::FormalParameterListContext* Dart2Parser::OperatorSignatureContext::formalParameterList() {
  return getRuleContext<Dart2Parser::FormalParameterListContext>(0);
}

Dart2Parser::TypeContext* Dart2Parser::OperatorSignatureContext::type() {
  return getRuleContext<Dart2Parser::TypeContext>(0);
}


size_t Dart2Parser::OperatorSignatureContext::getRuleIndex() const {
  return Dart2Parser::RuleOperatorSignature;
}

void Dart2Parser::OperatorSignatureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOperatorSignature(this);
}

void Dart2Parser::OperatorSignatureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOperatorSignature(this);
}

Dart2Parser::OperatorSignatureContext* Dart2Parser::operatorSignature() {
  OperatorSignatureContext *_localctx = _tracker.createInstance<OperatorSignatureContext>(_ctx, getState());
  enterRule(_localctx, 278, Dart2Parser::RuleOperatorSignature);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1666);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Dart2Parser::ASYNC_

    || _la == Dart2Parser::AWAIT_ || ((((_la - 69) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 69)) & 74593206968291329) != 0)) {
      setState(1665);
      type();
    }
    setState(1668);
    match(Dart2Parser::OPERATOR_);
    setState(1669);
    operator_();
    setState(1670);
    formalParameterList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OptionalOrNamedFormalParametersContext ------------------------------------------------------------------

Dart2Parser::OptionalOrNamedFormalParametersContext::OptionalOrNamedFormalParametersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::OptionalPositionalFormalParametersContext* Dart2Parser::OptionalOrNamedFormalParametersContext::optionalPositionalFormalParameters() {
  return getRuleContext<Dart2Parser::OptionalPositionalFormalParametersContext>(0);
}

Dart2Parser::NamedFormalParametersContext* Dart2Parser::OptionalOrNamedFormalParametersContext::namedFormalParameters() {
  return getRuleContext<Dart2Parser::NamedFormalParametersContext>(0);
}


size_t Dart2Parser::OptionalOrNamedFormalParametersContext::getRuleIndex() const {
  return Dart2Parser::RuleOptionalOrNamedFormalParameters;
}

void Dart2Parser::OptionalOrNamedFormalParametersContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOptionalOrNamedFormalParameters(this);
}

void Dart2Parser::OptionalOrNamedFormalParametersContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOptionalOrNamedFormalParameters(this);
}

Dart2Parser::OptionalOrNamedFormalParametersContext* Dart2Parser::optionalOrNamedFormalParameters() {
  OptionalOrNamedFormalParametersContext *_localctx = _tracker.createInstance<OptionalOrNamedFormalParametersContext>(_ctx, getState());
  enterRule(_localctx, 280, Dart2Parser::RuleOptionalOrNamedFormalParameters);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1674);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Dart2Parser::OB: {
        enterOuterAlt(_localctx, 1);
        setState(1672);
        optionalPositionalFormalParameters();
        break;
      }

      case Dart2Parser::OBC: {
        enterOuterAlt(_localctx, 2);
        setState(1673);
        namedFormalParameters();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OptionalParameterTypesContext ------------------------------------------------------------------

Dart2Parser::OptionalParameterTypesContext::OptionalParameterTypesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::OptionalPositionalParameterTypesContext* Dart2Parser::OptionalParameterTypesContext::optionalPositionalParameterTypes() {
  return getRuleContext<Dart2Parser::OptionalPositionalParameterTypesContext>(0);
}

Dart2Parser::NamedParameterTypesContext* Dart2Parser::OptionalParameterTypesContext::namedParameterTypes() {
  return getRuleContext<Dart2Parser::NamedParameterTypesContext>(0);
}


size_t Dart2Parser::OptionalParameterTypesContext::getRuleIndex() const {
  return Dart2Parser::RuleOptionalParameterTypes;
}

void Dart2Parser::OptionalParameterTypesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOptionalParameterTypes(this);
}

void Dart2Parser::OptionalParameterTypesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOptionalParameterTypes(this);
}

Dart2Parser::OptionalParameterTypesContext* Dart2Parser::optionalParameterTypes() {
  OptionalParameterTypesContext *_localctx = _tracker.createInstance<OptionalParameterTypesContext>(_ctx, getState());
  enterRule(_localctx, 282, Dart2Parser::RuleOptionalParameterTypes);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1678);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Dart2Parser::OB: {
        enterOuterAlt(_localctx, 1);
        setState(1676);
        optionalPositionalParameterTypes();
        break;
      }

      case Dart2Parser::OBC: {
        enterOuterAlt(_localctx, 2);
        setState(1677);
        namedParameterTypes();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OptionalPositionalFormalParametersContext ------------------------------------------------------------------

Dart2Parser::OptionalPositionalFormalParametersContext::OptionalPositionalFormalParametersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::OptionalPositionalFormalParametersContext::OB() {
  return getToken(Dart2Parser::OB, 0);
}

std::vector<Dart2Parser::DefaultFormalParameterContext *> Dart2Parser::OptionalPositionalFormalParametersContext::defaultFormalParameter() {
  return getRuleContexts<Dart2Parser::DefaultFormalParameterContext>();
}

Dart2Parser::DefaultFormalParameterContext* Dart2Parser::OptionalPositionalFormalParametersContext::defaultFormalParameter(size_t i) {
  return getRuleContext<Dart2Parser::DefaultFormalParameterContext>(i);
}

tree::TerminalNode* Dart2Parser::OptionalPositionalFormalParametersContext::CB() {
  return getToken(Dart2Parser::CB, 0);
}

std::vector<tree::TerminalNode *> Dart2Parser::OptionalPositionalFormalParametersContext::C() {
  return getTokens(Dart2Parser::C);
}

tree::TerminalNode* Dart2Parser::OptionalPositionalFormalParametersContext::C(size_t i) {
  return getToken(Dart2Parser::C, i);
}


size_t Dart2Parser::OptionalPositionalFormalParametersContext::getRuleIndex() const {
  return Dart2Parser::RuleOptionalPositionalFormalParameters;
}

void Dart2Parser::OptionalPositionalFormalParametersContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOptionalPositionalFormalParameters(this);
}

void Dart2Parser::OptionalPositionalFormalParametersContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOptionalPositionalFormalParameters(this);
}

Dart2Parser::OptionalPositionalFormalParametersContext* Dart2Parser::optionalPositionalFormalParameters() {
  OptionalPositionalFormalParametersContext *_localctx = _tracker.createInstance<OptionalPositionalFormalParametersContext>(_ctx, getState());
  enterRule(_localctx, 284, Dart2Parser::RuleOptionalPositionalFormalParameters);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1680);
    match(Dart2Parser::OB);
    setState(1681);
    defaultFormalParameter();
    setState(1686);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 187, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1682);
        match(Dart2Parser::C);
        setState(1683);
        defaultFormalParameter(); 
      }
      setState(1688);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 187, _ctx);
    }
    setState(1690);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Dart2Parser::C) {
      setState(1689);
      match(Dart2Parser::C);
    }
    setState(1692);
    match(Dart2Parser::CB);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OptionalPositionalParameterTypesContext ------------------------------------------------------------------

Dart2Parser::OptionalPositionalParameterTypesContext::OptionalPositionalParameterTypesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::OptionalPositionalParameterTypesContext::OB() {
  return getToken(Dart2Parser::OB, 0);
}

Dart2Parser::NormalParameterTypesContext* Dart2Parser::OptionalPositionalParameterTypesContext::normalParameterTypes() {
  return getRuleContext<Dart2Parser::NormalParameterTypesContext>(0);
}

tree::TerminalNode* Dart2Parser::OptionalPositionalParameterTypesContext::CB() {
  return getToken(Dart2Parser::CB, 0);
}

tree::TerminalNode* Dart2Parser::OptionalPositionalParameterTypesContext::C() {
  return getToken(Dart2Parser::C, 0);
}


size_t Dart2Parser::OptionalPositionalParameterTypesContext::getRuleIndex() const {
  return Dart2Parser::RuleOptionalPositionalParameterTypes;
}

void Dart2Parser::OptionalPositionalParameterTypesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOptionalPositionalParameterTypes(this);
}

void Dart2Parser::OptionalPositionalParameterTypesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOptionalPositionalParameterTypes(this);
}

Dart2Parser::OptionalPositionalParameterTypesContext* Dart2Parser::optionalPositionalParameterTypes() {
  OptionalPositionalParameterTypesContext *_localctx = _tracker.createInstance<OptionalPositionalParameterTypesContext>(_ctx, getState());
  enterRule(_localctx, 286, Dart2Parser::RuleOptionalPositionalParameterTypes);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1694);
    match(Dart2Parser::OB);
    setState(1695);
    normalParameterTypes();
    setState(1697);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Dart2Parser::C) {
      setState(1696);
      match(Dart2Parser::C);
    }
    setState(1699);
    match(Dart2Parser::CB);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParameterTypeListContext ------------------------------------------------------------------

Dart2Parser::ParameterTypeListContext::ParameterTypeListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::ParameterTypeListContext::OP() {
  return getToken(Dart2Parser::OP, 0);
}

tree::TerminalNode* Dart2Parser::ParameterTypeListContext::CP() {
  return getToken(Dart2Parser::CP, 0);
}

Dart2Parser::NormalParameterTypesContext* Dart2Parser::ParameterTypeListContext::normalParameterTypes() {
  return getRuleContext<Dart2Parser::NormalParameterTypesContext>(0);
}

tree::TerminalNode* Dart2Parser::ParameterTypeListContext::C() {
  return getToken(Dart2Parser::C, 0);
}

Dart2Parser::OptionalParameterTypesContext* Dart2Parser::ParameterTypeListContext::optionalParameterTypes() {
  return getRuleContext<Dart2Parser::OptionalParameterTypesContext>(0);
}


size_t Dart2Parser::ParameterTypeListContext::getRuleIndex() const {
  return Dart2Parser::RuleParameterTypeList;
}

void Dart2Parser::ParameterTypeListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParameterTypeList(this);
}

void Dart2Parser::ParameterTypeListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParameterTypeList(this);
}

Dart2Parser::ParameterTypeListContext* Dart2Parser::parameterTypeList() {
  ParameterTypeListContext *_localctx = _tracker.createInstance<ParameterTypeListContext>(_ctx, getState());
  enterRule(_localctx, 288, Dart2Parser::RuleParameterTypeList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1720);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 191, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1701);
      match(Dart2Parser::OP);
      setState(1702);
      match(Dart2Parser::CP);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1703);
      match(Dart2Parser::OP);
      setState(1704);
      normalParameterTypes();
      setState(1705);
      match(Dart2Parser::C);
      setState(1706);
      optionalParameterTypes();
      setState(1707);
      match(Dart2Parser::CP);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1709);
      match(Dart2Parser::OP);
      setState(1710);
      normalParameterTypes();
      setState(1712);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Dart2Parser::C) {
        setState(1711);
        match(Dart2Parser::C);
      }
      setState(1714);
      match(Dart2Parser::CP);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1716);
      match(Dart2Parser::OP);
      setState(1717);
      optionalParameterTypes();
      setState(1718);
      match(Dart2Parser::CP);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PartDeclarationContext ------------------------------------------------------------------

Dart2Parser::PartDeclarationContext::PartDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::PartHeaderContext* Dart2Parser::PartDeclarationContext::partHeader() {
  return getRuleContext<Dart2Parser::PartHeaderContext>(0);
}

std::vector<Dart2Parser::MetadataContext *> Dart2Parser::PartDeclarationContext::metadata() {
  return getRuleContexts<Dart2Parser::MetadataContext>();
}

Dart2Parser::MetadataContext* Dart2Parser::PartDeclarationContext::metadata(size_t i) {
  return getRuleContext<Dart2Parser::MetadataContext>(i);
}

std::vector<Dart2Parser::TopLevelDeclarationContext *> Dart2Parser::PartDeclarationContext::topLevelDeclaration() {
  return getRuleContexts<Dart2Parser::TopLevelDeclarationContext>();
}

Dart2Parser::TopLevelDeclarationContext* Dart2Parser::PartDeclarationContext::topLevelDeclaration(size_t i) {
  return getRuleContext<Dart2Parser::TopLevelDeclarationContext>(i);
}


size_t Dart2Parser::PartDeclarationContext::getRuleIndex() const {
  return Dart2Parser::RulePartDeclaration;
}

void Dart2Parser::PartDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPartDeclaration(this);
}

void Dart2Parser::PartDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPartDeclaration(this);
}

Dart2Parser::PartDeclarationContext* Dart2Parser::partDeclaration() {
  PartDeclarationContext *_localctx = _tracker.createInstance<PartDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 290, Dart2Parser::RulePartDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1722);
    partHeader();
    setState(1728);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -4125297258671374320) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 1196874750185123541) != 0)) {
      setState(1723);
      metadata();
      setState(1724);
      topLevelDeclaration();
      setState(1730);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PartDirectiveContext ------------------------------------------------------------------

Dart2Parser::PartDirectiveContext::PartDirectiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::MetadataContext* Dart2Parser::PartDirectiveContext::metadata() {
  return getRuleContext<Dart2Parser::MetadataContext>(0);
}

tree::TerminalNode* Dart2Parser::PartDirectiveContext::PART_() {
  return getToken(Dart2Parser::PART_, 0);
}

Dart2Parser::UriContext* Dart2Parser::PartDirectiveContext::uri() {
  return getRuleContext<Dart2Parser::UriContext>(0);
}

tree::TerminalNode* Dart2Parser::PartDirectiveContext::SC() {
  return getToken(Dart2Parser::SC, 0);
}


size_t Dart2Parser::PartDirectiveContext::getRuleIndex() const {
  return Dart2Parser::RulePartDirective;
}

void Dart2Parser::PartDirectiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPartDirective(this);
}

void Dart2Parser::PartDirectiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPartDirective(this);
}

Dart2Parser::PartDirectiveContext* Dart2Parser::partDirective() {
  PartDirectiveContext *_localctx = _tracker.createInstance<PartDirectiveContext>(_ctx, getState());
  enterRule(_localctx, 292, Dart2Parser::RulePartDirective);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1731);
    metadata();
    setState(1732);
    match(Dart2Parser::PART_);
    setState(1733);
    uri();
    setState(1734);
    match(Dart2Parser::SC);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PartHeaderContext ------------------------------------------------------------------

Dart2Parser::PartHeaderContext::PartHeaderContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::MetadataContext* Dart2Parser::PartHeaderContext::metadata() {
  return getRuleContext<Dart2Parser::MetadataContext>(0);
}

tree::TerminalNode* Dart2Parser::PartHeaderContext::PART_() {
  return getToken(Dart2Parser::PART_, 0);
}

tree::TerminalNode* Dart2Parser::PartHeaderContext::OF_() {
  return getToken(Dart2Parser::OF_, 0);
}

tree::TerminalNode* Dart2Parser::PartHeaderContext::SC() {
  return getToken(Dart2Parser::SC, 0);
}

Dart2Parser::DottedIdentifierListContext* Dart2Parser::PartHeaderContext::dottedIdentifierList() {
  return getRuleContext<Dart2Parser::DottedIdentifierListContext>(0);
}

Dart2Parser::UriContext* Dart2Parser::PartHeaderContext::uri() {
  return getRuleContext<Dart2Parser::UriContext>(0);
}


size_t Dart2Parser::PartHeaderContext::getRuleIndex() const {
  return Dart2Parser::RulePartHeader;
}

void Dart2Parser::PartHeaderContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPartHeader(this);
}

void Dart2Parser::PartHeaderContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPartHeader(this);
}

Dart2Parser::PartHeaderContext* Dart2Parser::partHeader() {
  PartHeaderContext *_localctx = _tracker.createInstance<PartHeaderContext>(_ctx, getState());
  enterRule(_localctx, 294, Dart2Parser::RulePartHeader);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1736);
    metadata();
    setState(1737);
    match(Dart2Parser::PART_);
    setState(1738);
    match(Dart2Parser::OF_);
    setState(1741);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Dart2Parser::ABSTRACT_:
      case Dart2Parser::AS_:
      case Dart2Parser::ASYNC_:
      case Dart2Parser::AWAIT_:
      case Dart2Parser::COVARIANT_:
      case Dart2Parser::DEFERRED_:
      case Dart2Parser::DYNAMIC_:
      case Dart2Parser::EXPORT_:
      case Dart2Parser::EXTENSION_:
      case Dart2Parser::EXTERNAL_:
      case Dart2Parser::FACTORY_:
      case Dart2Parser::FUNCTION_:
      case Dart2Parser::GET_:
      case Dart2Parser::HIDE_:
      case Dart2Parser::IMPLEMENTS_:
      case Dart2Parser::IMPORT_:
      case Dart2Parser::INTERFACE_:
      case Dart2Parser::LATE_:
      case Dart2Parser::LIBRARY_:
      case Dart2Parser::MIXIN_:
      case Dart2Parser::NATIVE_:
      case Dart2Parser::OF_:
      case Dart2Parser::ON_:
      case Dart2Parser::OPERATOR_:
      case Dart2Parser::PART_:
      case Dart2Parser::REQUIRED_:
      case Dart2Parser::SET_:
      case Dart2Parser::SHOW_:
      case Dart2Parser::STATIC_:
      case Dart2Parser::SYNC_:
      case Dart2Parser::TYPEDEF_:
      case Dart2Parser::YIELD_:
      case Dart2Parser::IDENTIFIER: {
        setState(1739);
        dottedIdentifierList();
        break;
      }

      case Dart2Parser::SingleLineString:
      case Dart2Parser::MultiLineString: {
        setState(1740);
        uri();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(1743);
    match(Dart2Parser::SC);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PostfixExpressionContext ------------------------------------------------------------------

Dart2Parser::PostfixExpressionContext::PostfixExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::AssignableExpressionContext* Dart2Parser::PostfixExpressionContext::assignableExpression() {
  return getRuleContext<Dart2Parser::AssignableExpressionContext>(0);
}

Dart2Parser::PostfixOperatorContext* Dart2Parser::PostfixExpressionContext::postfixOperator() {
  return getRuleContext<Dart2Parser::PostfixOperatorContext>(0);
}

Dart2Parser::PrimaryContext* Dart2Parser::PostfixExpressionContext::primary() {
  return getRuleContext<Dart2Parser::PrimaryContext>(0);
}

std::vector<Dart2Parser::SelectorContext *> Dart2Parser::PostfixExpressionContext::selector() {
  return getRuleContexts<Dart2Parser::SelectorContext>();
}

Dart2Parser::SelectorContext* Dart2Parser::PostfixExpressionContext::selector(size_t i) {
  return getRuleContext<Dart2Parser::SelectorContext>(i);
}


size_t Dart2Parser::PostfixExpressionContext::getRuleIndex() const {
  return Dart2Parser::RulePostfixExpression;
}

void Dart2Parser::PostfixExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPostfixExpression(this);
}

void Dart2Parser::PostfixExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPostfixExpression(this);
}

Dart2Parser::PostfixExpressionContext* Dart2Parser::postfixExpression() {
  PostfixExpressionContext *_localctx = _tracker.createInstance<PostfixExpressionContext>(_ctx, getState());
  enterRule(_localctx, 296, Dart2Parser::RulePostfixExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1755);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 195, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1745);
      assignableExpression();
      setState(1746);
      postfixOperator();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1748);
      primary();
      setState(1752);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 194, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1749);
          selector(); 
        }
        setState(1754);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 194, _ctx);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PostfixOperatorContext ------------------------------------------------------------------

Dart2Parser::PostfixOperatorContext::PostfixOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::IncrementOperatorContext* Dart2Parser::PostfixOperatorContext::incrementOperator() {
  return getRuleContext<Dart2Parser::IncrementOperatorContext>(0);
}


size_t Dart2Parser::PostfixOperatorContext::getRuleIndex() const {
  return Dart2Parser::RulePostfixOperator;
}

void Dart2Parser::PostfixOperatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPostfixOperator(this);
}

void Dart2Parser::PostfixOperatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPostfixOperator(this);
}

Dart2Parser::PostfixOperatorContext* Dart2Parser::postfixOperator() {
  PostfixOperatorContext *_localctx = _tracker.createInstance<PostfixOperatorContext>(_ctx, getState());
  enterRule(_localctx, 298, Dart2Parser::RulePostfixOperator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1757);
    incrementOperator();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrefixOperatorContext ------------------------------------------------------------------

Dart2Parser::PrefixOperatorContext::PrefixOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::MinusOperatorContext* Dart2Parser::PrefixOperatorContext::minusOperator() {
  return getRuleContext<Dart2Parser::MinusOperatorContext>(0);
}

Dart2Parser::NegationOperatorContext* Dart2Parser::PrefixOperatorContext::negationOperator() {
  return getRuleContext<Dart2Parser::NegationOperatorContext>(0);
}

Dart2Parser::TildeOperatorContext* Dart2Parser::PrefixOperatorContext::tildeOperator() {
  return getRuleContext<Dart2Parser::TildeOperatorContext>(0);
}


size_t Dart2Parser::PrefixOperatorContext::getRuleIndex() const {
  return Dart2Parser::RulePrefixOperator;
}

void Dart2Parser::PrefixOperatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrefixOperator(this);
}

void Dart2Parser::PrefixOperatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrefixOperator(this);
}

Dart2Parser::PrefixOperatorContext* Dart2Parser::prefixOperator() {
  PrefixOperatorContext *_localctx = _tracker.createInstance<PrefixOperatorContext>(_ctx, getState());
  enterRule(_localctx, 300, Dart2Parser::RulePrefixOperator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1762);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Dart2Parser::MINUS: {
        enterOuterAlt(_localctx, 1);
        setState(1759);
        minusOperator();
        break;
      }

      case Dart2Parser::NOT: {
        enterOuterAlt(_localctx, 2);
        setState(1760);
        negationOperator();
        break;
      }

      case Dart2Parser::SQUIG: {
        enterOuterAlt(_localctx, 3);
        setState(1761);
        tildeOperator();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrimaryContext ------------------------------------------------------------------

Dart2Parser::PrimaryContext::PrimaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::ThisExpressionContext* Dart2Parser::PrimaryContext::thisExpression() {
  return getRuleContext<Dart2Parser::ThisExpressionContext>(0);
}

tree::TerminalNode* Dart2Parser::PrimaryContext::SUPER_() {
  return getToken(Dart2Parser::SUPER_, 0);
}

Dart2Parser::UnconditionalAssignableSelectorContext* Dart2Parser::PrimaryContext::unconditionalAssignableSelector() {
  return getRuleContext<Dart2Parser::UnconditionalAssignableSelectorContext>(0);
}

Dart2Parser::ArgumentPartContext* Dart2Parser::PrimaryContext::argumentPart() {
  return getRuleContext<Dart2Parser::ArgumentPartContext>(0);
}

Dart2Parser::FunctionExpressionContext* Dart2Parser::PrimaryContext::functionExpression() {
  return getRuleContext<Dart2Parser::FunctionExpressionContext>(0);
}

Dart2Parser::LiteralContext* Dart2Parser::PrimaryContext::literal() {
  return getRuleContext<Dart2Parser::LiteralContext>(0);
}

Dart2Parser::IdentifierContext* Dart2Parser::PrimaryContext::identifier() {
  return getRuleContext<Dart2Parser::IdentifierContext>(0);
}

Dart2Parser::NewExpressionContext* Dart2Parser::PrimaryContext::newExpression() {
  return getRuleContext<Dart2Parser::NewExpressionContext>(0);
}

Dart2Parser::ConstObjectExpressionContext* Dart2Parser::PrimaryContext::constObjectExpression() {
  return getRuleContext<Dart2Parser::ConstObjectExpressionContext>(0);
}

Dart2Parser::ConstructorInvocationContext* Dart2Parser::PrimaryContext::constructorInvocation() {
  return getRuleContext<Dart2Parser::ConstructorInvocationContext>(0);
}

tree::TerminalNode* Dart2Parser::PrimaryContext::OP() {
  return getToken(Dart2Parser::OP, 0);
}

Dart2Parser::ExpressionContext* Dart2Parser::PrimaryContext::expression() {
  return getRuleContext<Dart2Parser::ExpressionContext>(0);
}

tree::TerminalNode* Dart2Parser::PrimaryContext::CP() {
  return getToken(Dart2Parser::CP, 0);
}


size_t Dart2Parser::PrimaryContext::getRuleIndex() const {
  return Dart2Parser::RulePrimary;
}

void Dart2Parser::PrimaryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimary(this);
}

void Dart2Parser::PrimaryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimary(this);
}

Dart2Parser::PrimaryContext* Dart2Parser::primary() {
  PrimaryContext *_localctx = _tracker.createInstance<PrimaryContext>(_ctx, getState());
  enterRule(_localctx, 302, Dart2Parser::RulePrimary);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1779);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 197, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1764);
      thisExpression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1765);
      match(Dart2Parser::SUPER_);
      setState(1766);
      unconditionalAssignableSelector();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1767);
      match(Dart2Parser::SUPER_);
      setState(1768);
      argumentPart();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1769);
      functionExpression();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1770);
      literal();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1771);
      identifier();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1772);
      newExpression();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1773);
      constObjectExpression();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1774);
      constructorInvocation();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(1775);
      match(Dart2Parser::OP);
      setState(1776);
      expression();
      setState(1777);
      match(Dart2Parser::CP);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QualifiedNameContext ------------------------------------------------------------------

Dart2Parser::QualifiedNameContext::QualifiedNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Dart2Parser::TypeIdentifierContext *> Dart2Parser::QualifiedNameContext::typeIdentifier() {
  return getRuleContexts<Dart2Parser::TypeIdentifierContext>();
}

Dart2Parser::TypeIdentifierContext* Dart2Parser::QualifiedNameContext::typeIdentifier(size_t i) {
  return getRuleContext<Dart2Parser::TypeIdentifierContext>(i);
}

std::vector<tree::TerminalNode *> Dart2Parser::QualifiedNameContext::D() {
  return getTokens(Dart2Parser::D);
}

tree::TerminalNode* Dart2Parser::QualifiedNameContext::D(size_t i) {
  return getToken(Dart2Parser::D, i);
}

Dart2Parser::IdentifierContext* Dart2Parser::QualifiedNameContext::identifier() {
  return getRuleContext<Dart2Parser::IdentifierContext>(0);
}


size_t Dart2Parser::QualifiedNameContext::getRuleIndex() const {
  return Dart2Parser::RuleQualifiedName;
}

void Dart2Parser::QualifiedNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQualifiedName(this);
}

void Dart2Parser::QualifiedNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQualifiedName(this);
}

Dart2Parser::QualifiedNameContext* Dart2Parser::qualifiedName() {
  QualifiedNameContext *_localctx = _tracker.createInstance<QualifiedNameContext>(_ctx, getState());
  enterRule(_localctx, 304, Dart2Parser::RuleQualifiedName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1791);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 198, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1781);
      typeIdentifier();
      setState(1782);
      match(Dart2Parser::D);
      setState(1783);
      identifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1785);
      typeIdentifier();
      setState(1786);
      match(Dart2Parser::D);
      setState(1787);
      typeIdentifier();
      setState(1788);
      match(Dart2Parser::D);
      setState(1789);
      identifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RedirectingFactoryConstructorSignatureContext ------------------------------------------------------------------

Dart2Parser::RedirectingFactoryConstructorSignatureContext::RedirectingFactoryConstructorSignatureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::RedirectingFactoryConstructorSignatureContext::FACTORY_() {
  return getToken(Dart2Parser::FACTORY_, 0);
}

Dart2Parser::ConstructorNameContext* Dart2Parser::RedirectingFactoryConstructorSignatureContext::constructorName() {
  return getRuleContext<Dart2Parser::ConstructorNameContext>(0);
}

Dart2Parser::FormalParameterListContext* Dart2Parser::RedirectingFactoryConstructorSignatureContext::formalParameterList() {
  return getRuleContext<Dart2Parser::FormalParameterListContext>(0);
}

tree::TerminalNode* Dart2Parser::RedirectingFactoryConstructorSignatureContext::EQ() {
  return getToken(Dart2Parser::EQ, 0);
}

Dart2Parser::ConstructorDesignationContext* Dart2Parser::RedirectingFactoryConstructorSignatureContext::constructorDesignation() {
  return getRuleContext<Dart2Parser::ConstructorDesignationContext>(0);
}

tree::TerminalNode* Dart2Parser::RedirectingFactoryConstructorSignatureContext::CONST_() {
  return getToken(Dart2Parser::CONST_, 0);
}


size_t Dart2Parser::RedirectingFactoryConstructorSignatureContext::getRuleIndex() const {
  return Dart2Parser::RuleRedirectingFactoryConstructorSignature;
}

void Dart2Parser::RedirectingFactoryConstructorSignatureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRedirectingFactoryConstructorSignature(this);
}

void Dart2Parser::RedirectingFactoryConstructorSignatureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRedirectingFactoryConstructorSignature(this);
}

Dart2Parser::RedirectingFactoryConstructorSignatureContext* Dart2Parser::redirectingFactoryConstructorSignature() {
  RedirectingFactoryConstructorSignatureContext *_localctx = _tracker.createInstance<RedirectingFactoryConstructorSignatureContext>(_ctx, getState());
  enterRule(_localctx, 306, Dart2Parser::RuleRedirectingFactoryConstructorSignature);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1794);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Dart2Parser::CONST_) {
      setState(1793);
      match(Dart2Parser::CONST_);
    }
    setState(1796);
    match(Dart2Parser::FACTORY_);
    setState(1797);
    constructorName();
    setState(1798);
    formalParameterList();
    setState(1799);
    match(Dart2Parser::EQ);
    setState(1800);
    constructorDesignation();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RedirectionContext ------------------------------------------------------------------

Dart2Parser::RedirectionContext::RedirectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::RedirectionContext::CO() {
  return getToken(Dart2Parser::CO, 0);
}

tree::TerminalNode* Dart2Parser::RedirectionContext::THIS_() {
  return getToken(Dart2Parser::THIS_, 0);
}

Dart2Parser::ArgumentsContext* Dart2Parser::RedirectionContext::arguments() {
  return getRuleContext<Dart2Parser::ArgumentsContext>(0);
}

tree::TerminalNode* Dart2Parser::RedirectionContext::D() {
  return getToken(Dart2Parser::D, 0);
}

Dart2Parser::IdentifierContext* Dart2Parser::RedirectionContext::identifier() {
  return getRuleContext<Dart2Parser::IdentifierContext>(0);
}


size_t Dart2Parser::RedirectionContext::getRuleIndex() const {
  return Dart2Parser::RuleRedirection;
}

void Dart2Parser::RedirectionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRedirection(this);
}

void Dart2Parser::RedirectionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRedirection(this);
}

Dart2Parser::RedirectionContext* Dart2Parser::redirection() {
  RedirectionContext *_localctx = _tracker.createInstance<RedirectionContext>(_ctx, getState());
  enterRule(_localctx, 308, Dart2Parser::RuleRedirection);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1802);
    match(Dart2Parser::CO);
    setState(1803);
    match(Dart2Parser::THIS_);
    setState(1806);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Dart2Parser::D) {
      setState(1804);
      match(Dart2Parser::D);
      setState(1805);
      identifier();
    }
    setState(1808);
    arguments();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RelationalExpressionContext ------------------------------------------------------------------

Dart2Parser::RelationalExpressionContext::RelationalExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Dart2Parser::BitwiseOrExpressionContext *> Dart2Parser::RelationalExpressionContext::bitwiseOrExpression() {
  return getRuleContexts<Dart2Parser::BitwiseOrExpressionContext>();
}

Dart2Parser::BitwiseOrExpressionContext* Dart2Parser::RelationalExpressionContext::bitwiseOrExpression(size_t i) {
  return getRuleContext<Dart2Parser::BitwiseOrExpressionContext>(i);
}

Dart2Parser::TypeTestContext* Dart2Parser::RelationalExpressionContext::typeTest() {
  return getRuleContext<Dart2Parser::TypeTestContext>(0);
}

Dart2Parser::TypeCastContext* Dart2Parser::RelationalExpressionContext::typeCast() {
  return getRuleContext<Dart2Parser::TypeCastContext>(0);
}

Dart2Parser::RelationalOperatorContext* Dart2Parser::RelationalExpressionContext::relationalOperator() {
  return getRuleContext<Dart2Parser::RelationalOperatorContext>(0);
}

tree::TerminalNode* Dart2Parser::RelationalExpressionContext::SUPER_() {
  return getToken(Dart2Parser::SUPER_, 0);
}


size_t Dart2Parser::RelationalExpressionContext::getRuleIndex() const {
  return Dart2Parser::RuleRelationalExpression;
}

void Dart2Parser::RelationalExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRelationalExpression(this);
}

void Dart2Parser::RelationalExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRelationalExpression(this);
}

Dart2Parser::RelationalExpressionContext* Dart2Parser::relationalExpression() {
  RelationalExpressionContext *_localctx = _tracker.createInstance<RelationalExpressionContext>(_ctx, getState());
  enterRule(_localctx, 310, Dart2Parser::RuleRelationalExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1822);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 202, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1810);
      bitwiseOrExpression();
      setState(1816);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 201, _ctx)) {
      case 1: {
        setState(1811);
        typeTest();
        break;
      }

      case 2: {
        setState(1812);
        typeCast();
        break;
      }

      case 3: {
        setState(1813);
        relationalOperator();
        setState(1814);
        bitwiseOrExpression();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1818);
      match(Dart2Parser::SUPER_);
      setState(1819);
      relationalOperator();
      setState(1820);
      bitwiseOrExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RelationalOperatorContext ------------------------------------------------------------------

Dart2Parser::RelationalOperatorContext::RelationalOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::RelationalOperatorContext::GT() {
  return getToken(Dart2Parser::GT, 0);
}

tree::TerminalNode* Dart2Parser::RelationalOperatorContext::EQ() {
  return getToken(Dart2Parser::EQ, 0);
}

tree::TerminalNode* Dart2Parser::RelationalOperatorContext::LTE() {
  return getToken(Dart2Parser::LTE, 0);
}

tree::TerminalNode* Dart2Parser::RelationalOperatorContext::LT() {
  return getToken(Dart2Parser::LT, 0);
}


size_t Dart2Parser::RelationalOperatorContext::getRuleIndex() const {
  return Dart2Parser::RuleRelationalOperator;
}

void Dart2Parser::RelationalOperatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRelationalOperator(this);
}

void Dart2Parser::RelationalOperatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRelationalOperator(this);
}

Dart2Parser::RelationalOperatorContext* Dart2Parser::relationalOperator() {
  RelationalOperatorContext *_localctx = _tracker.createInstance<RelationalOperatorContext>(_ctx, getState());
  enterRule(_localctx, 312, Dart2Parser::RuleRelationalOperator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1829);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 203, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1824);
      match(Dart2Parser::GT);
      setState(1825);
      match(Dart2Parser::EQ);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1826);
      match(Dart2Parser::GT);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1827);
      match(Dart2Parser::LTE);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1828);
      match(Dart2Parser::LT);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Reserved_wordContext ------------------------------------------------------------------

Dart2Parser::Reserved_wordContext::Reserved_wordContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::Reserved_wordContext::ASSERT_() {
  return getToken(Dart2Parser::ASSERT_, 0);
}

tree::TerminalNode* Dart2Parser::Reserved_wordContext::BREAK_() {
  return getToken(Dart2Parser::BREAK_, 0);
}

tree::TerminalNode* Dart2Parser::Reserved_wordContext::CASE_() {
  return getToken(Dart2Parser::CASE_, 0);
}

tree::TerminalNode* Dart2Parser::Reserved_wordContext::CATCH_() {
  return getToken(Dart2Parser::CATCH_, 0);
}

tree::TerminalNode* Dart2Parser::Reserved_wordContext::CLASS_() {
  return getToken(Dart2Parser::CLASS_, 0);
}

tree::TerminalNode* Dart2Parser::Reserved_wordContext::CONST_() {
  return getToken(Dart2Parser::CONST_, 0);
}

tree::TerminalNode* Dart2Parser::Reserved_wordContext::CONTINUE_() {
  return getToken(Dart2Parser::CONTINUE_, 0);
}

tree::TerminalNode* Dart2Parser::Reserved_wordContext::DEFAULT_() {
  return getToken(Dart2Parser::DEFAULT_, 0);
}

tree::TerminalNode* Dart2Parser::Reserved_wordContext::DO_() {
  return getToken(Dart2Parser::DO_, 0);
}

tree::TerminalNode* Dart2Parser::Reserved_wordContext::ELSE_() {
  return getToken(Dart2Parser::ELSE_, 0);
}

tree::TerminalNode* Dart2Parser::Reserved_wordContext::ENUM_() {
  return getToken(Dart2Parser::ENUM_, 0);
}

tree::TerminalNode* Dart2Parser::Reserved_wordContext::EXTENDS_() {
  return getToken(Dart2Parser::EXTENDS_, 0);
}

tree::TerminalNode* Dart2Parser::Reserved_wordContext::FALSE_() {
  return getToken(Dart2Parser::FALSE_, 0);
}

tree::TerminalNode* Dart2Parser::Reserved_wordContext::FINAL_() {
  return getToken(Dart2Parser::FINAL_, 0);
}

tree::TerminalNode* Dart2Parser::Reserved_wordContext::FINALLY_() {
  return getToken(Dart2Parser::FINALLY_, 0);
}

tree::TerminalNode* Dart2Parser::Reserved_wordContext::FOR_() {
  return getToken(Dart2Parser::FOR_, 0);
}

tree::TerminalNode* Dart2Parser::Reserved_wordContext::IF_() {
  return getToken(Dart2Parser::IF_, 0);
}

tree::TerminalNode* Dart2Parser::Reserved_wordContext::IN_() {
  return getToken(Dart2Parser::IN_, 0);
}

tree::TerminalNode* Dart2Parser::Reserved_wordContext::IS_() {
  return getToken(Dart2Parser::IS_, 0);
}

tree::TerminalNode* Dart2Parser::Reserved_wordContext::NEW_() {
  return getToken(Dart2Parser::NEW_, 0);
}

tree::TerminalNode* Dart2Parser::Reserved_wordContext::NULL_() {
  return getToken(Dart2Parser::NULL_, 0);
}

tree::TerminalNode* Dart2Parser::Reserved_wordContext::RETHROW_() {
  return getToken(Dart2Parser::RETHROW_, 0);
}

tree::TerminalNode* Dart2Parser::Reserved_wordContext::RETURN_() {
  return getToken(Dart2Parser::RETURN_, 0);
}

tree::TerminalNode* Dart2Parser::Reserved_wordContext::SUPER_() {
  return getToken(Dart2Parser::SUPER_, 0);
}

tree::TerminalNode* Dart2Parser::Reserved_wordContext::SWITCH_() {
  return getToken(Dart2Parser::SWITCH_, 0);
}

tree::TerminalNode* Dart2Parser::Reserved_wordContext::THIS_() {
  return getToken(Dart2Parser::THIS_, 0);
}

tree::TerminalNode* Dart2Parser::Reserved_wordContext::THROW_() {
  return getToken(Dart2Parser::THROW_, 0);
}

tree::TerminalNode* Dart2Parser::Reserved_wordContext::TRUE_() {
  return getToken(Dart2Parser::TRUE_, 0);
}

tree::TerminalNode* Dart2Parser::Reserved_wordContext::TRY_() {
  return getToken(Dart2Parser::TRY_, 0);
}

tree::TerminalNode* Dart2Parser::Reserved_wordContext::VAR_() {
  return getToken(Dart2Parser::VAR_, 0);
}

tree::TerminalNode* Dart2Parser::Reserved_wordContext::VOID_() {
  return getToken(Dart2Parser::VOID_, 0);
}

tree::TerminalNode* Dart2Parser::Reserved_wordContext::WHILE_() {
  return getToken(Dart2Parser::WHILE_, 0);
}

tree::TerminalNode* Dart2Parser::Reserved_wordContext::WITH_() {
  return getToken(Dart2Parser::WITH_, 0);
}


size_t Dart2Parser::Reserved_wordContext::getRuleIndex() const {
  return Dart2Parser::RuleReserved_word;
}

void Dart2Parser::Reserved_wordContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReserved_word(this);
}

void Dart2Parser::Reserved_wordContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReserved_word(this);
}

Dart2Parser::Reserved_wordContext* Dart2Parser::reserved_word() {
  Reserved_wordContext *_localctx = _tracker.createInstance<Reserved_wordContext>(_ctx, getState());
  enterRule(_localctx, 314, Dart2Parser::RuleReserved_word);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1831);
    _la = _input->LA(1);
    if (!(((((_la - 56) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 56)) & -598553217396976135) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RethrowStatementContext ------------------------------------------------------------------

Dart2Parser::RethrowStatementContext::RethrowStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::RethrowStatementContext::RETHROW_() {
  return getToken(Dart2Parser::RETHROW_, 0);
}

tree::TerminalNode* Dart2Parser::RethrowStatementContext::SC() {
  return getToken(Dart2Parser::SC, 0);
}


size_t Dart2Parser::RethrowStatementContext::getRuleIndex() const {
  return Dart2Parser::RuleRethrowStatement;
}

void Dart2Parser::RethrowStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRethrowStatement(this);
}

void Dart2Parser::RethrowStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRethrowStatement(this);
}

Dart2Parser::RethrowStatementContext* Dart2Parser::rethrowStatement() {
  RethrowStatementContext *_localctx = _tracker.createInstance<RethrowStatementContext>(_ctx, getState());
  enterRule(_localctx, 316, Dart2Parser::RuleRethrowStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1833);
    match(Dart2Parser::RETHROW_);
    setState(1834);
    match(Dart2Parser::SC);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReturnStatementContext ------------------------------------------------------------------

Dart2Parser::ReturnStatementContext::ReturnStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::ReturnStatementContext::RETURN_() {
  return getToken(Dart2Parser::RETURN_, 0);
}

tree::TerminalNode* Dart2Parser::ReturnStatementContext::SC() {
  return getToken(Dart2Parser::SC, 0);
}

Dart2Parser::ExpressionContext* Dart2Parser::ReturnStatementContext::expression() {
  return getRuleContext<Dart2Parser::ExpressionContext>(0);
}


size_t Dart2Parser::ReturnStatementContext::getRuleIndex() const {
  return Dart2Parser::RuleReturnStatement;
}

void Dart2Parser::ReturnStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReturnStatement(this);
}

void Dart2Parser::ReturnStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReturnStatement(this);
}

Dart2Parser::ReturnStatementContext* Dart2Parser::returnStatement() {
  ReturnStatementContext *_localctx = _tracker.createInstance<ReturnStatementContext>(_ctx, getState());
  enterRule(_localctx, 318, Dart2Parser::RuleReturnStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1836);
    match(Dart2Parser::RETURN_);
    setState(1838);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -8734731060839972864) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 2271484645057699477) != 0)) {
      setState(1837);
      expression();
    }
    setState(1840);
    match(Dart2Parser::SC);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectorContext ------------------------------------------------------------------

Dart2Parser::SelectorContext::SelectorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::SelectorContext::NOT() {
  return getToken(Dart2Parser::NOT, 0);
}

Dart2Parser::AssignableSelectorContext* Dart2Parser::SelectorContext::assignableSelector() {
  return getRuleContext<Dart2Parser::AssignableSelectorContext>(0);
}

Dart2Parser::ArgumentPartContext* Dart2Parser::SelectorContext::argumentPart() {
  return getRuleContext<Dart2Parser::ArgumentPartContext>(0);
}


size_t Dart2Parser::SelectorContext::getRuleIndex() const {
  return Dart2Parser::RuleSelector;
}

void Dart2Parser::SelectorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelector(this);
}

void Dart2Parser::SelectorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelector(this);
}

Dart2Parser::SelectorContext* Dart2Parser::selector() {
  SelectorContext *_localctx = _tracker.createInstance<SelectorContext>(_ctx, getState());
  enterRule(_localctx, 320, Dart2Parser::RuleSelector);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1845);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Dart2Parser::NOT: {
        enterOuterAlt(_localctx, 1);
        setState(1842);
        match(Dart2Parser::NOT);
        break;
      }

      case Dart2Parser::D:
      case Dart2Parser::OB:
      case Dart2Parser::QU:
      case Dart2Parser::QUD: {
        enterOuterAlt(_localctx, 2);
        setState(1843);
        assignableSelector();
        break;
      }

      case Dart2Parser::LT:
      case Dart2Parser::OP: {
        enterOuterAlt(_localctx, 3);
        setState(1844);
        argumentPart();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SetOrMapLiteralContext ------------------------------------------------------------------

Dart2Parser::SetOrMapLiteralContext::SetOrMapLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::SetOrMapLiteralContext::OBC() {
  return getToken(Dart2Parser::OBC, 0);
}

tree::TerminalNode* Dart2Parser::SetOrMapLiteralContext::CBC() {
  return getToken(Dart2Parser::CBC, 0);
}

tree::TerminalNode* Dart2Parser::SetOrMapLiteralContext::CONST_() {
  return getToken(Dart2Parser::CONST_, 0);
}

Dart2Parser::TypeArgumentsContext* Dart2Parser::SetOrMapLiteralContext::typeArguments() {
  return getRuleContext<Dart2Parser::TypeArgumentsContext>(0);
}

Dart2Parser::ElementsContext* Dart2Parser::SetOrMapLiteralContext::elements() {
  return getRuleContext<Dart2Parser::ElementsContext>(0);
}


size_t Dart2Parser::SetOrMapLiteralContext::getRuleIndex() const {
  return Dart2Parser::RuleSetOrMapLiteral;
}

void Dart2Parser::SetOrMapLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSetOrMapLiteral(this);
}

void Dart2Parser::SetOrMapLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSetOrMapLiteral(this);
}

Dart2Parser::SetOrMapLiteralContext* Dart2Parser::setOrMapLiteral() {
  SetOrMapLiteralContext *_localctx = _tracker.createInstance<SetOrMapLiteralContext>(_ctx, getState());
  enterRule(_localctx, 322, Dart2Parser::RuleSetOrMapLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1848);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Dart2Parser::CONST_) {
      setState(1847);
      match(Dart2Parser::CONST_);
    }
    setState(1851);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Dart2Parser::LT) {
      setState(1850);
      typeArguments();
    }
    setState(1853);
    match(Dart2Parser::OBC);
    setState(1855);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -8734731060839923712) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 2271484645058780821) != 0)) {
      setState(1854);
      elements();
    }
    setState(1857);
    match(Dart2Parser::CBC);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SetterSignatureContext ------------------------------------------------------------------

Dart2Parser::SetterSignatureContext::SetterSignatureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::SetterSignatureContext::SET_() {
  return getToken(Dart2Parser::SET_, 0);
}

Dart2Parser::IdentifierContext* Dart2Parser::SetterSignatureContext::identifier() {
  return getRuleContext<Dart2Parser::IdentifierContext>(0);
}

Dart2Parser::FormalParameterListContext* Dart2Parser::SetterSignatureContext::formalParameterList() {
  return getRuleContext<Dart2Parser::FormalParameterListContext>(0);
}

Dart2Parser::TypeContext* Dart2Parser::SetterSignatureContext::type() {
  return getRuleContext<Dart2Parser::TypeContext>(0);
}


size_t Dart2Parser::SetterSignatureContext::getRuleIndex() const {
  return Dart2Parser::RuleSetterSignature;
}

void Dart2Parser::SetterSignatureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSetterSignature(this);
}

void Dart2Parser::SetterSignatureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSetterSignature(this);
}

Dart2Parser::SetterSignatureContext* Dart2Parser::setterSignature() {
  SetterSignatureContext *_localctx = _tracker.createInstance<SetterSignatureContext>(_ctx, getState());
  enterRule(_localctx, 324, Dart2Parser::RuleSetterSignature);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1860);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Dart2Parser::ASYNC_

    || _la == Dart2Parser::AWAIT_ || ((((_la - 69) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 69)) & 74593206968291329) != 0)) {
      setState(1859);
      type();
    }
    setState(1862);
    match(Dart2Parser::SET_);
    setState(1863);
    identifier();
    setState(1864);
    formalParameterList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ShiftExpressionContext ------------------------------------------------------------------

Dart2Parser::ShiftExpressionContext::ShiftExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Dart2Parser::AdditiveExpressionContext *> Dart2Parser::ShiftExpressionContext::additiveExpression() {
  return getRuleContexts<Dart2Parser::AdditiveExpressionContext>();
}

Dart2Parser::AdditiveExpressionContext* Dart2Parser::ShiftExpressionContext::additiveExpression(size_t i) {
  return getRuleContext<Dart2Parser::AdditiveExpressionContext>(i);
}

std::vector<Dart2Parser::ShiftOperatorContext *> Dart2Parser::ShiftExpressionContext::shiftOperator() {
  return getRuleContexts<Dart2Parser::ShiftOperatorContext>();
}

Dart2Parser::ShiftOperatorContext* Dart2Parser::ShiftExpressionContext::shiftOperator(size_t i) {
  return getRuleContext<Dart2Parser::ShiftOperatorContext>(i);
}

tree::TerminalNode* Dart2Parser::ShiftExpressionContext::SUPER_() {
  return getToken(Dart2Parser::SUPER_, 0);
}


size_t Dart2Parser::ShiftExpressionContext::getRuleIndex() const {
  return Dart2Parser::RuleShiftExpression;
}

void Dart2Parser::ShiftExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShiftExpression(this);
}

void Dart2Parser::ShiftExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShiftExpression(this);
}

Dart2Parser::ShiftExpressionContext* Dart2Parser::shiftExpression() {
  ShiftExpressionContext *_localctx = _tracker.createInstance<ShiftExpressionContext>(_ctx, getState());
  enterRule(_localctx, 326, Dart2Parser::RuleShiftExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1883);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 212, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1866);
      additiveExpression();
      setState(1872);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 210, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1867);
          shiftOperator();
          setState(1868);
          additiveExpression(); 
        }
        setState(1874);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 210, _ctx);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1875);
      match(Dart2Parser::SUPER_);
      setState(1879); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(1876);
                shiftOperator();
                setState(1877);
                additiveExpression();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(1881); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 211, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ShiftOperatorContext ------------------------------------------------------------------

Dart2Parser::ShiftOperatorContext::ShiftOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::ShiftOperatorContext::LTLT() {
  return getToken(Dart2Parser::LTLT, 0);
}

std::vector<tree::TerminalNode *> Dart2Parser::ShiftOperatorContext::GT() {
  return getTokens(Dart2Parser::GT);
}

tree::TerminalNode* Dart2Parser::ShiftOperatorContext::GT(size_t i) {
  return getToken(Dart2Parser::GT, i);
}


size_t Dart2Parser::ShiftOperatorContext::getRuleIndex() const {
  return Dart2Parser::RuleShiftOperator;
}

void Dart2Parser::ShiftOperatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShiftOperator(this);
}

void Dart2Parser::ShiftOperatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShiftOperator(this);
}

Dart2Parser::ShiftOperatorContext* Dart2Parser::shiftOperator() {
  ShiftOperatorContext *_localctx = _tracker.createInstance<ShiftOperatorContext>(_ctx, getState());
  enterRule(_localctx, 328, Dart2Parser::RuleShiftOperator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1891);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 213, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1885);
      match(Dart2Parser::LTLT);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1886);
      match(Dart2Parser::GT);
      setState(1887);
      match(Dart2Parser::GT);
      setState(1888);
      match(Dart2Parser::GT);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1889);
      match(Dart2Parser::GT);
      setState(1890);
      match(Dart2Parser::GT);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimpleFormalParameterContext ------------------------------------------------------------------

Dart2Parser::SimpleFormalParameterContext::SimpleFormalParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::DeclaredIdentifierContext* Dart2Parser::SimpleFormalParameterContext::declaredIdentifier() {
  return getRuleContext<Dart2Parser::DeclaredIdentifierContext>(0);
}

Dart2Parser::IdentifierContext* Dart2Parser::SimpleFormalParameterContext::identifier() {
  return getRuleContext<Dart2Parser::IdentifierContext>(0);
}

tree::TerminalNode* Dart2Parser::SimpleFormalParameterContext::COVARIANT_() {
  return getToken(Dart2Parser::COVARIANT_, 0);
}


size_t Dart2Parser::SimpleFormalParameterContext::getRuleIndex() const {
  return Dart2Parser::RuleSimpleFormalParameter;
}

void Dart2Parser::SimpleFormalParameterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimpleFormalParameter(this);
}

void Dart2Parser::SimpleFormalParameterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimpleFormalParameter(this);
}

Dart2Parser::SimpleFormalParameterContext* Dart2Parser::simpleFormalParameter() {
  SimpleFormalParameterContext *_localctx = _tracker.createInstance<SimpleFormalParameterContext>(_ctx, getState());
  enterRule(_localctx, 330, Dart2Parser::RuleSimpleFormalParameter);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1898);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 215, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1893);
      declaredIdentifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1895);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 214, _ctx)) {
      case 1: {
        setState(1894);
        match(Dart2Parser::COVARIANT_);
        break;
      }

      default:
        break;
      }
      setState(1897);
      identifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SingleLineStringContext ------------------------------------------------------------------

Dart2Parser::SingleLineStringContext::SingleLineStringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::SingleLineStringContext::SingleLineString() {
  return getToken(Dart2Parser::SingleLineString, 0);
}


size_t Dart2Parser::SingleLineStringContext::getRuleIndex() const {
  return Dart2Parser::RuleSingleLineString;
}

void Dart2Parser::SingleLineStringContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSingleLineString(this);
}

void Dart2Parser::SingleLineStringContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSingleLineString(this);
}

Dart2Parser::SingleLineStringContext* Dart2Parser::singleLineString() {
  SingleLineStringContext *_localctx = _tracker.createInstance<SingleLineStringContext>(_ctx, getState());
  enterRule(_localctx, 332, Dart2Parser::RuleSingleLineString);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1900);
    match(Dart2Parser::SingleLineString);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SpreadElementContext ------------------------------------------------------------------

Dart2Parser::SpreadElementContext::SpreadElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::ExpressionContext* Dart2Parser::SpreadElementContext::expression() {
  return getRuleContext<Dart2Parser::ExpressionContext>(0);
}

tree::TerminalNode* Dart2Parser::SpreadElementContext::DDD() {
  return getToken(Dart2Parser::DDD, 0);
}

tree::TerminalNode* Dart2Parser::SpreadElementContext::DDDQ() {
  return getToken(Dart2Parser::DDDQ, 0);
}


size_t Dart2Parser::SpreadElementContext::getRuleIndex() const {
  return Dart2Parser::RuleSpreadElement;
}

void Dart2Parser::SpreadElementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSpreadElement(this);
}

void Dart2Parser::SpreadElementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSpreadElement(this);
}

Dart2Parser::SpreadElementContext* Dart2Parser::spreadElement() {
  SpreadElementContext *_localctx = _tracker.createInstance<SpreadElementContext>(_ctx, getState());
  enterRule(_localctx, 334, Dart2Parser::RuleSpreadElement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1902);
    _la = _input->LA(1);
    if (!(_la == Dart2Parser::DDD

    || _la == Dart2Parser::DDDQ)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(1903);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementContext ------------------------------------------------------------------

Dart2Parser::StatementContext::StatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::NonLabelledStatementContext* Dart2Parser::StatementContext::nonLabelledStatement() {
  return getRuleContext<Dart2Parser::NonLabelledStatementContext>(0);
}

std::vector<Dart2Parser::LabelContext *> Dart2Parser::StatementContext::label() {
  return getRuleContexts<Dart2Parser::LabelContext>();
}

Dart2Parser::LabelContext* Dart2Parser::StatementContext::label(size_t i) {
  return getRuleContext<Dart2Parser::LabelContext>(i);
}


size_t Dart2Parser::StatementContext::getRuleIndex() const {
  return Dart2Parser::RuleStatement;
}

void Dart2Parser::StatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatement(this);
}

void Dart2Parser::StatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatement(this);
}

Dart2Parser::StatementContext* Dart2Parser::statement() {
  StatementContext *_localctx = _tracker.createInstance<StatementContext>(_ctx, getState());
  enterRule(_localctx, 336, Dart2Parser::RuleStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1908);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 216, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1905);
        label(); 
      }
      setState(1910);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 216, _ctx);
    }
    setState(1911);
    nonLabelledStatement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementsContext ------------------------------------------------------------------

Dart2Parser::StatementsContext::StatementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Dart2Parser::StatementContext *> Dart2Parser::StatementsContext::statement() {
  return getRuleContexts<Dart2Parser::StatementContext>();
}

Dart2Parser::StatementContext* Dart2Parser::StatementsContext::statement(size_t i) {
  return getRuleContext<Dart2Parser::StatementContext>(i);
}


size_t Dart2Parser::StatementsContext::getRuleIndex() const {
  return Dart2Parser::RuleStatements;
}

void Dart2Parser::StatementsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatements(this);
}

void Dart2Parser::StatementsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatements(this);
}

Dart2Parser::StatementsContext* Dart2Parser::statements() {
  StatementsContext *_localctx = _tracker.createInstance<StatementsContext>(_ctx, getState());
  enterRule(_localctx, 338, Dart2Parser::RuleStatements);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1916);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 217, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1913);
        statement(); 
      }
      setState(1918);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 217, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StaticFinalDeclarationContext ------------------------------------------------------------------

Dart2Parser::StaticFinalDeclarationContext::StaticFinalDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::IdentifierContext* Dart2Parser::StaticFinalDeclarationContext::identifier() {
  return getRuleContext<Dart2Parser::IdentifierContext>(0);
}

tree::TerminalNode* Dart2Parser::StaticFinalDeclarationContext::EQ() {
  return getToken(Dart2Parser::EQ, 0);
}

Dart2Parser::ExpressionContext* Dart2Parser::StaticFinalDeclarationContext::expression() {
  return getRuleContext<Dart2Parser::ExpressionContext>(0);
}


size_t Dart2Parser::StaticFinalDeclarationContext::getRuleIndex() const {
  return Dart2Parser::RuleStaticFinalDeclaration;
}

void Dart2Parser::StaticFinalDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStaticFinalDeclaration(this);
}

void Dart2Parser::StaticFinalDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStaticFinalDeclaration(this);
}

Dart2Parser::StaticFinalDeclarationContext* Dart2Parser::staticFinalDeclaration() {
  StaticFinalDeclarationContext *_localctx = _tracker.createInstance<StaticFinalDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 340, Dart2Parser::RuleStaticFinalDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1919);
    identifier();
    setState(1920);
    match(Dart2Parser::EQ);
    setState(1921);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StaticFinalDeclarationListContext ------------------------------------------------------------------

Dart2Parser::StaticFinalDeclarationListContext::StaticFinalDeclarationListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Dart2Parser::StaticFinalDeclarationContext *> Dart2Parser::StaticFinalDeclarationListContext::staticFinalDeclaration() {
  return getRuleContexts<Dart2Parser::StaticFinalDeclarationContext>();
}

Dart2Parser::StaticFinalDeclarationContext* Dart2Parser::StaticFinalDeclarationListContext::staticFinalDeclaration(size_t i) {
  return getRuleContext<Dart2Parser::StaticFinalDeclarationContext>(i);
}

std::vector<tree::TerminalNode *> Dart2Parser::StaticFinalDeclarationListContext::C() {
  return getTokens(Dart2Parser::C);
}

tree::TerminalNode* Dart2Parser::StaticFinalDeclarationListContext::C(size_t i) {
  return getToken(Dart2Parser::C, i);
}


size_t Dart2Parser::StaticFinalDeclarationListContext::getRuleIndex() const {
  return Dart2Parser::RuleStaticFinalDeclarationList;
}

void Dart2Parser::StaticFinalDeclarationListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStaticFinalDeclarationList(this);
}

void Dart2Parser::StaticFinalDeclarationListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStaticFinalDeclarationList(this);
}

Dart2Parser::StaticFinalDeclarationListContext* Dart2Parser::staticFinalDeclarationList() {
  StaticFinalDeclarationListContext *_localctx = _tracker.createInstance<StaticFinalDeclarationListContext>(_ctx, getState());
  enterRule(_localctx, 342, Dart2Parser::RuleStaticFinalDeclarationList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1923);
    staticFinalDeclaration();
    setState(1928);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Dart2Parser::C) {
      setState(1924);
      match(Dart2Parser::C);
      setState(1925);
      staticFinalDeclaration();
      setState(1930);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StringLiteralContext ------------------------------------------------------------------

Dart2Parser::StringLiteralContext::StringLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Dart2Parser::MultilineStringContext *> Dart2Parser::StringLiteralContext::multilineString() {
  return getRuleContexts<Dart2Parser::MultilineStringContext>();
}

Dart2Parser::MultilineStringContext* Dart2Parser::StringLiteralContext::multilineString(size_t i) {
  return getRuleContext<Dart2Parser::MultilineStringContext>(i);
}

std::vector<Dart2Parser::SingleLineStringContext *> Dart2Parser::StringLiteralContext::singleLineString() {
  return getRuleContexts<Dart2Parser::SingleLineStringContext>();
}

Dart2Parser::SingleLineStringContext* Dart2Parser::StringLiteralContext::singleLineString(size_t i) {
  return getRuleContext<Dart2Parser::SingleLineStringContext>(i);
}


size_t Dart2Parser::StringLiteralContext::getRuleIndex() const {
  return Dart2Parser::RuleStringLiteral;
}

void Dart2Parser::StringLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStringLiteral(this);
}

void Dart2Parser::StringLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStringLiteral(this);
}

Dart2Parser::StringLiteralContext* Dart2Parser::stringLiteral() {
  StringLiteralContext *_localctx = _tracker.createInstance<StringLiteralContext>(_ctx, getState());
  enterRule(_localctx, 344, Dart2Parser::RuleStringLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1933); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1933);
              _errHandler->sync(this);
              switch (_input->LA(1)) {
                case Dart2Parser::MultiLineString: {
                  setState(1931);
                  multilineString();
                  break;
                }

                case Dart2Parser::SingleLineString: {
                  setState(1932);
                  singleLineString();
                  break;
                }

              default:
                throw NoViableAltException(this);
              }
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1935); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 220, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SuperclassContext ------------------------------------------------------------------

Dart2Parser::SuperclassContext::SuperclassContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::SuperclassContext::EXTENDS_() {
  return getToken(Dart2Parser::EXTENDS_, 0);
}

Dart2Parser::TypeNotVoidContext* Dart2Parser::SuperclassContext::typeNotVoid() {
  return getRuleContext<Dart2Parser::TypeNotVoidContext>(0);
}

Dart2Parser::MixinsContext* Dart2Parser::SuperclassContext::mixins() {
  return getRuleContext<Dart2Parser::MixinsContext>(0);
}


size_t Dart2Parser::SuperclassContext::getRuleIndex() const {
  return Dart2Parser::RuleSuperclass;
}

void Dart2Parser::SuperclassContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSuperclass(this);
}

void Dart2Parser::SuperclassContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSuperclass(this);
}

Dart2Parser::SuperclassContext* Dart2Parser::superclass() {
  SuperclassContext *_localctx = _tracker.createInstance<SuperclassContext>(_ctx, getState());
  enterRule(_localctx, 346, Dart2Parser::RuleSuperclass);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1943);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Dart2Parser::EXTENDS_: {
        enterOuterAlt(_localctx, 1);
        setState(1937);
        match(Dart2Parser::EXTENDS_);
        setState(1938);
        typeNotVoid();
        setState(1940);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Dart2Parser::WITH_) {
          setState(1939);
          mixins();
        }
        break;
      }

      case Dart2Parser::WITH_: {
        enterOuterAlt(_localctx, 2);
        setState(1942);
        mixins();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SwitchCaseContext ------------------------------------------------------------------

Dart2Parser::SwitchCaseContext::SwitchCaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::SwitchCaseContext::CASE_() {
  return getToken(Dart2Parser::CASE_, 0);
}

Dart2Parser::ExpressionContext* Dart2Parser::SwitchCaseContext::expression() {
  return getRuleContext<Dart2Parser::ExpressionContext>(0);
}

tree::TerminalNode* Dart2Parser::SwitchCaseContext::CO() {
  return getToken(Dart2Parser::CO, 0);
}

Dart2Parser::StatementsContext* Dart2Parser::SwitchCaseContext::statements() {
  return getRuleContext<Dart2Parser::StatementsContext>(0);
}

std::vector<Dart2Parser::LabelContext *> Dart2Parser::SwitchCaseContext::label() {
  return getRuleContexts<Dart2Parser::LabelContext>();
}

Dart2Parser::LabelContext* Dart2Parser::SwitchCaseContext::label(size_t i) {
  return getRuleContext<Dart2Parser::LabelContext>(i);
}


size_t Dart2Parser::SwitchCaseContext::getRuleIndex() const {
  return Dart2Parser::RuleSwitchCase;
}

void Dart2Parser::SwitchCaseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSwitchCase(this);
}

void Dart2Parser::SwitchCaseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSwitchCase(this);
}

Dart2Parser::SwitchCaseContext* Dart2Parser::switchCase() {
  SwitchCaseContext *_localctx = _tracker.createInstance<SwitchCaseContext>(_ctx, getState());
  enterRule(_localctx, 348, Dart2Parser::RuleSwitchCase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1948);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 486388759756013568) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 1190119350744059541) != 0)) {
      setState(1945);
      label();
      setState(1950);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1951);
    match(Dart2Parser::CASE_);
    setState(1952);
    expression();
    setState(1953);
    match(Dart2Parser::CO);
    setState(1954);
    statements();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SwitchStatementContext ------------------------------------------------------------------

Dart2Parser::SwitchStatementContext::SwitchStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::SwitchStatementContext::SWITCH_() {
  return getToken(Dart2Parser::SWITCH_, 0);
}

tree::TerminalNode* Dart2Parser::SwitchStatementContext::OP() {
  return getToken(Dart2Parser::OP, 0);
}

Dart2Parser::ExpressionContext* Dart2Parser::SwitchStatementContext::expression() {
  return getRuleContext<Dart2Parser::ExpressionContext>(0);
}

tree::TerminalNode* Dart2Parser::SwitchStatementContext::CP() {
  return getToken(Dart2Parser::CP, 0);
}

tree::TerminalNode* Dart2Parser::SwitchStatementContext::OBC() {
  return getToken(Dart2Parser::OBC, 0);
}

tree::TerminalNode* Dart2Parser::SwitchStatementContext::CBC() {
  return getToken(Dart2Parser::CBC, 0);
}

std::vector<Dart2Parser::SwitchCaseContext *> Dart2Parser::SwitchStatementContext::switchCase() {
  return getRuleContexts<Dart2Parser::SwitchCaseContext>();
}

Dart2Parser::SwitchCaseContext* Dart2Parser::SwitchStatementContext::switchCase(size_t i) {
  return getRuleContext<Dart2Parser::SwitchCaseContext>(i);
}

Dart2Parser::DefaultCaseContext* Dart2Parser::SwitchStatementContext::defaultCase() {
  return getRuleContext<Dart2Parser::DefaultCaseContext>(0);
}


size_t Dart2Parser::SwitchStatementContext::getRuleIndex() const {
  return Dart2Parser::RuleSwitchStatement;
}

void Dart2Parser::SwitchStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSwitchStatement(this);
}

void Dart2Parser::SwitchStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSwitchStatement(this);
}

Dart2Parser::SwitchStatementContext* Dart2Parser::switchStatement() {
  SwitchStatementContext *_localctx = _tracker.createInstance<SwitchStatementContext>(_ctx, getState());
  enterRule(_localctx, 350, Dart2Parser::RuleSwitchStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1956);
    match(Dart2Parser::SWITCH_);
    setState(1957);
    match(Dart2Parser::OP);
    setState(1958);
    expression();
    setState(1959);
    match(Dart2Parser::CP);
    setState(1960);
    match(Dart2Parser::OBC);
    setState(1964);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 224, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1961);
        switchCase(); 
      }
      setState(1966);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 224, _ctx);
    }
    setState(1968);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 486388759756013568) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 1190119350744059543) != 0)) {
      setState(1967);
      defaultCase();
    }
    setState(1970);
    match(Dart2Parser::CBC);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SymbolLiteralContext ------------------------------------------------------------------

Dart2Parser::SymbolLiteralContext::SymbolLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::SymbolLiteralContext::PO() {
  return getToken(Dart2Parser::PO, 0);
}

std::vector<Dart2Parser::IdentifierContext *> Dart2Parser::SymbolLiteralContext::identifier() {
  return getRuleContexts<Dart2Parser::IdentifierContext>();
}

Dart2Parser::IdentifierContext* Dart2Parser::SymbolLiteralContext::identifier(size_t i) {
  return getRuleContext<Dart2Parser::IdentifierContext>(i);
}

Dart2Parser::OperatorContext* Dart2Parser::SymbolLiteralContext::operator_() {
  return getRuleContext<Dart2Parser::OperatorContext>(0);
}

tree::TerminalNode* Dart2Parser::SymbolLiteralContext::VOID_() {
  return getToken(Dart2Parser::VOID_, 0);
}

std::vector<tree::TerminalNode *> Dart2Parser::SymbolLiteralContext::D() {
  return getTokens(Dart2Parser::D);
}

tree::TerminalNode* Dart2Parser::SymbolLiteralContext::D(size_t i) {
  return getToken(Dart2Parser::D, i);
}


size_t Dart2Parser::SymbolLiteralContext::getRuleIndex() const {
  return Dart2Parser::RuleSymbolLiteral;
}

void Dart2Parser::SymbolLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSymbolLiteral(this);
}

void Dart2Parser::SymbolLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSymbolLiteral(this);
}

Dart2Parser::SymbolLiteralContext* Dart2Parser::symbolLiteral() {
  SymbolLiteralContext *_localctx = _tracker.createInstance<SymbolLiteralContext>(_ctx, getState());
  enterRule(_localctx, 352, Dart2Parser::RuleSymbolLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1972);
    match(Dart2Parser::PO);
    setState(1983);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Dart2Parser::ABSTRACT_:
      case Dart2Parser::AS_:
      case Dart2Parser::ASYNC_:
      case Dart2Parser::AWAIT_:
      case Dart2Parser::COVARIANT_:
      case Dart2Parser::DEFERRED_:
      case Dart2Parser::DYNAMIC_:
      case Dart2Parser::EXPORT_:
      case Dart2Parser::EXTENSION_:
      case Dart2Parser::EXTERNAL_:
      case Dart2Parser::FACTORY_:
      case Dart2Parser::FUNCTION_:
      case Dart2Parser::GET_:
      case Dart2Parser::HIDE_:
      case Dart2Parser::IMPLEMENTS_:
      case Dart2Parser::IMPORT_:
      case Dart2Parser::INTERFACE_:
      case Dart2Parser::LATE_:
      case Dart2Parser::LIBRARY_:
      case Dart2Parser::MIXIN_:
      case Dart2Parser::NATIVE_:
      case Dart2Parser::OF_:
      case Dart2Parser::ON_:
      case Dart2Parser::OPERATOR_:
      case Dart2Parser::PART_:
      case Dart2Parser::REQUIRED_:
      case Dart2Parser::SET_:
      case Dart2Parser::SHOW_:
      case Dart2Parser::STATIC_:
      case Dart2Parser::SYNC_:
      case Dart2Parser::TYPEDEF_:
      case Dart2Parser::YIELD_:
      case Dart2Parser::IDENTIFIER: {
        setState(1973);
        identifier();
        setState(1978);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 226, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(1974);
            match(Dart2Parser::D);
            setState(1975);
            identifier(); 
          }
          setState(1980);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 226, _ctx);
        }
        break;
      }

      case Dart2Parser::A:
      case Dart2Parser::CIR:
      case Dart2Parser::EE:
      case Dart2Parser::GT:
      case Dart2Parser::LT:
      case Dart2Parser::LTE:
      case Dart2Parser::LTLT:
      case Dart2Parser::MINUS:
      case Dart2Parser::OB:
      case Dart2Parser::P:
      case Dart2Parser::PC:
      case Dart2Parser::PL:
      case Dart2Parser::SL:
      case Dart2Parser::SQS:
      case Dart2Parser::SQUIG:
      case Dart2Parser::ST: {
        setState(1981);
        operator_();
        break;
      }

      case Dart2Parser::VOID_: {
        setState(1982);
        match(Dart2Parser::VOID_);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ThisExpressionContext ------------------------------------------------------------------

Dart2Parser::ThisExpressionContext::ThisExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::ThisExpressionContext::THIS_() {
  return getToken(Dart2Parser::THIS_, 0);
}


size_t Dart2Parser::ThisExpressionContext::getRuleIndex() const {
  return Dart2Parser::RuleThisExpression;
}

void Dart2Parser::ThisExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterThisExpression(this);
}

void Dart2Parser::ThisExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitThisExpression(this);
}

Dart2Parser::ThisExpressionContext* Dart2Parser::thisExpression() {
  ThisExpressionContext *_localctx = _tracker.createInstance<ThisExpressionContext>(_ctx, getState());
  enterRule(_localctx, 354, Dart2Parser::RuleThisExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1985);
    match(Dart2Parser::THIS_);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ThrowExpressionContext ------------------------------------------------------------------

Dart2Parser::ThrowExpressionContext::ThrowExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::ThrowExpressionContext::THROW_() {
  return getToken(Dart2Parser::THROW_, 0);
}

Dart2Parser::ExpressionContext* Dart2Parser::ThrowExpressionContext::expression() {
  return getRuleContext<Dart2Parser::ExpressionContext>(0);
}


size_t Dart2Parser::ThrowExpressionContext::getRuleIndex() const {
  return Dart2Parser::RuleThrowExpression;
}

void Dart2Parser::ThrowExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterThrowExpression(this);
}

void Dart2Parser::ThrowExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitThrowExpression(this);
}

Dart2Parser::ThrowExpressionContext* Dart2Parser::throwExpression() {
  ThrowExpressionContext *_localctx = _tracker.createInstance<ThrowExpressionContext>(_ctx, getState());
  enterRule(_localctx, 356, Dart2Parser::RuleThrowExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1987);
    match(Dart2Parser::THROW_);
    setState(1988);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ThrowExpressionWithoutCascadeContext ------------------------------------------------------------------

Dart2Parser::ThrowExpressionWithoutCascadeContext::ThrowExpressionWithoutCascadeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::ThrowExpressionWithoutCascadeContext::THROW_() {
  return getToken(Dart2Parser::THROW_, 0);
}

Dart2Parser::ExpressionWithoutCascadeContext* Dart2Parser::ThrowExpressionWithoutCascadeContext::expressionWithoutCascade() {
  return getRuleContext<Dart2Parser::ExpressionWithoutCascadeContext>(0);
}


size_t Dart2Parser::ThrowExpressionWithoutCascadeContext::getRuleIndex() const {
  return Dart2Parser::RuleThrowExpressionWithoutCascade;
}

void Dart2Parser::ThrowExpressionWithoutCascadeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterThrowExpressionWithoutCascade(this);
}

void Dart2Parser::ThrowExpressionWithoutCascadeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitThrowExpressionWithoutCascade(this);
}

Dart2Parser::ThrowExpressionWithoutCascadeContext* Dart2Parser::throwExpressionWithoutCascade() {
  ThrowExpressionWithoutCascadeContext *_localctx = _tracker.createInstance<ThrowExpressionWithoutCascadeContext>(_ctx, getState());
  enterRule(_localctx, 358, Dart2Parser::RuleThrowExpressionWithoutCascade);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1990);
    match(Dart2Parser::THROW_);
    setState(1991);
    expressionWithoutCascade();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TildeOperatorContext ------------------------------------------------------------------

Dart2Parser::TildeOperatorContext::TildeOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::TildeOperatorContext::SQUIG() {
  return getToken(Dart2Parser::SQUIG, 0);
}


size_t Dart2Parser::TildeOperatorContext::getRuleIndex() const {
  return Dart2Parser::RuleTildeOperator;
}

void Dart2Parser::TildeOperatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTildeOperator(this);
}

void Dart2Parser::TildeOperatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTildeOperator(this);
}

Dart2Parser::TildeOperatorContext* Dart2Parser::tildeOperator() {
  TildeOperatorContext *_localctx = _tracker.createInstance<TildeOperatorContext>(_ctx, getState());
  enterRule(_localctx, 360, Dart2Parser::RuleTildeOperator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1993);
    match(Dart2Parser::SQUIG);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TopLevelDeclarationContext ------------------------------------------------------------------

Dart2Parser::TopLevelDeclarationContext::TopLevelDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::ClassDeclarationContext* Dart2Parser::TopLevelDeclarationContext::classDeclaration() {
  return getRuleContext<Dart2Parser::ClassDeclarationContext>(0);
}

Dart2Parser::MixinDeclarationContext* Dart2Parser::TopLevelDeclarationContext::mixinDeclaration() {
  return getRuleContext<Dart2Parser::MixinDeclarationContext>(0);
}

Dart2Parser::ExtensionDeclarationContext* Dart2Parser::TopLevelDeclarationContext::extensionDeclaration() {
  return getRuleContext<Dart2Parser::ExtensionDeclarationContext>(0);
}

Dart2Parser::EnumTypeContext* Dart2Parser::TopLevelDeclarationContext::enumType() {
  return getRuleContext<Dart2Parser::EnumTypeContext>(0);
}

Dart2Parser::TypeAliasContext* Dart2Parser::TopLevelDeclarationContext::typeAlias() {
  return getRuleContext<Dart2Parser::TypeAliasContext>(0);
}

tree::TerminalNode* Dart2Parser::TopLevelDeclarationContext::EXTERNAL_() {
  return getToken(Dart2Parser::EXTERNAL_, 0);
}

Dart2Parser::FunctionSignatureContext* Dart2Parser::TopLevelDeclarationContext::functionSignature() {
  return getRuleContext<Dart2Parser::FunctionSignatureContext>(0);
}

tree::TerminalNode* Dart2Parser::TopLevelDeclarationContext::SC() {
  return getToken(Dart2Parser::SC, 0);
}

Dart2Parser::GetterSignatureContext* Dart2Parser::TopLevelDeclarationContext::getterSignature() {
  return getRuleContext<Dart2Parser::GetterSignatureContext>(0);
}

Dart2Parser::SetterSignatureContext* Dart2Parser::TopLevelDeclarationContext::setterSignature() {
  return getRuleContext<Dart2Parser::SetterSignatureContext>(0);
}

Dart2Parser::FunctionBodyContext* Dart2Parser::TopLevelDeclarationContext::functionBody() {
  return getRuleContext<Dart2Parser::FunctionBodyContext>(0);
}

Dart2Parser::StaticFinalDeclarationListContext* Dart2Parser::TopLevelDeclarationContext::staticFinalDeclarationList() {
  return getRuleContext<Dart2Parser::StaticFinalDeclarationListContext>(0);
}

tree::TerminalNode* Dart2Parser::TopLevelDeclarationContext::FINAL_() {
  return getToken(Dart2Parser::FINAL_, 0);
}

tree::TerminalNode* Dart2Parser::TopLevelDeclarationContext::CONST_() {
  return getToken(Dart2Parser::CONST_, 0);
}

Dart2Parser::TypeContext* Dart2Parser::TopLevelDeclarationContext::type() {
  return getRuleContext<Dart2Parser::TypeContext>(0);
}

tree::TerminalNode* Dart2Parser::TopLevelDeclarationContext::LATE_() {
  return getToken(Dart2Parser::LATE_, 0);
}

Dart2Parser::InitializedIdentifierListContext* Dart2Parser::TopLevelDeclarationContext::initializedIdentifierList() {
  return getRuleContext<Dart2Parser::InitializedIdentifierListContext>(0);
}

Dart2Parser::VarOrTypeContext* Dart2Parser::TopLevelDeclarationContext::varOrType() {
  return getRuleContext<Dart2Parser::VarOrTypeContext>(0);
}


size_t Dart2Parser::TopLevelDeclarationContext::getRuleIndex() const {
  return Dart2Parser::RuleTopLevelDeclaration;
}

void Dart2Parser::TopLevelDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTopLevelDeclaration(this);
}

void Dart2Parser::TopLevelDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTopLevelDeclaration(this);
}

Dart2Parser::TopLevelDeclarationContext* Dart2Parser::topLevelDeclaration() {
  TopLevelDeclarationContext *_localctx = _tracker.createInstance<TopLevelDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 362, Dart2Parser::RuleTopLevelDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2043);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 231, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1995);
      classDeclaration();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1996);
      mixinDeclaration();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1997);
      extensionDeclaration();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1998);
      enumType();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1999);
      typeAlias();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(2000);
      match(Dart2Parser::EXTERNAL_);
      setState(2001);
      functionSignature();
      setState(2002);
      match(Dart2Parser::SC);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(2004);
      match(Dart2Parser::EXTERNAL_);
      setState(2005);
      getterSignature();
      setState(2006);
      match(Dart2Parser::SC);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(2008);
      match(Dart2Parser::EXTERNAL_);
      setState(2009);
      setterSignature();
      setState(2010);
      match(Dart2Parser::SC);
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(2012);
      functionSignature();
      setState(2013);
      functionBody();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(2015);
      getterSignature();
      setState(2016);
      functionBody();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(2018);
      setterSignature();
      setState(2019);
      functionBody();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(2021);
      _la = _input->LA(1);
      if (!(_la == Dart2Parser::CONST_

      || _la == Dart2Parser::FINAL_)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(2023);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 228, _ctx)) {
      case 1: {
        setState(2022);
        type();
        break;
      }

      default:
        break;
      }
      setState(2025);
      staticFinalDeclarationList();
      setState(2026);
      match(Dart2Parser::SC);
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(2028);
      match(Dart2Parser::LATE_);
      setState(2029);
      match(Dart2Parser::FINAL_);
      setState(2031);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 229, _ctx)) {
      case 1: {
        setState(2030);
        type();
        break;
      }

      default:
        break;
      }
      setState(2033);
      initializedIdentifierList();
      setState(2034);
      match(Dart2Parser::SC);
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(2037);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Dart2Parser::LATE_) {
        setState(2036);
        match(Dart2Parser::LATE_);
      }
      setState(2039);
      varOrType();
      setState(2040);
      initializedIdentifierList();
      setState(2041);
      match(Dart2Parser::SC);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TryStatementContext ------------------------------------------------------------------

Dart2Parser::TryStatementContext::TryStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::TryStatementContext::TRY_() {
  return getToken(Dart2Parser::TRY_, 0);
}

Dart2Parser::BlockContext* Dart2Parser::TryStatementContext::block() {
  return getRuleContext<Dart2Parser::BlockContext>(0);
}

Dart2Parser::FinallyPartContext* Dart2Parser::TryStatementContext::finallyPart() {
  return getRuleContext<Dart2Parser::FinallyPartContext>(0);
}

std::vector<Dart2Parser::OnPartContext *> Dart2Parser::TryStatementContext::onPart() {
  return getRuleContexts<Dart2Parser::OnPartContext>();
}

Dart2Parser::OnPartContext* Dart2Parser::TryStatementContext::onPart(size_t i) {
  return getRuleContext<Dart2Parser::OnPartContext>(i);
}


size_t Dart2Parser::TryStatementContext::getRuleIndex() const {
  return Dart2Parser::RuleTryStatement;
}

void Dart2Parser::TryStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTryStatement(this);
}

void Dart2Parser::TryStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTryStatement(this);
}

Dart2Parser::TryStatementContext* Dart2Parser::tryStatement() {
  TryStatementContext *_localctx = _tracker.createInstance<TryStatementContext>(_ctx, getState());
  enterRule(_localctx, 364, Dart2Parser::RuleTryStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2045);
    match(Dart2Parser::TRY_);
    setState(2046);
    block();
    setState(2056);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Dart2Parser::CATCH_:
      case Dart2Parser::ON_: {
        setState(2048); 
        _errHandler->sync(this);
        alt = 1;
        do {
          switch (alt) {
            case 1: {
                  setState(2047);
                  onPart();
                  break;
                }

          default:
            throw NoViableAltException(this);
          }
          setState(2050); 
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 232, _ctx);
        } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
        setState(2053);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Dart2Parser::FINALLY_) {
          setState(2052);
          finallyPart();
        }
        break;
      }

      case Dart2Parser::FINALLY_: {
        setState(2055);
        finallyPart();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeContext ------------------------------------------------------------------

Dart2Parser::TypeContext::TypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::FunctionTypeContext* Dart2Parser::TypeContext::functionType() {
  return getRuleContext<Dart2Parser::FunctionTypeContext>(0);
}

tree::TerminalNode* Dart2Parser::TypeContext::QU() {
  return getToken(Dart2Parser::QU, 0);
}

Dart2Parser::TypeNotFunctionContext* Dart2Parser::TypeContext::typeNotFunction() {
  return getRuleContext<Dart2Parser::TypeNotFunctionContext>(0);
}


size_t Dart2Parser::TypeContext::getRuleIndex() const {
  return Dart2Parser::RuleType;
}

void Dart2Parser::TypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType(this);
}

void Dart2Parser::TypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType(this);
}

Dart2Parser::TypeContext* Dart2Parser::type() {
  TypeContext *_localctx = _tracker.createInstance<TypeContext>(_ctx, getState());
  enterRule(_localctx, 366, Dart2Parser::RuleType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2063);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 236, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2058);
      functionType();
      setState(2060);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Dart2Parser::QU) {
        setState(2059);
        match(Dart2Parser::QU);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2062);
      typeNotFunction();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeAliasContext ------------------------------------------------------------------

Dart2Parser::TypeAliasContext::TypeAliasContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::TypeAliasContext::TYPEDEF_() {
  return getToken(Dart2Parser::TYPEDEF_, 0);
}

Dart2Parser::TypeIdentifierContext* Dart2Parser::TypeAliasContext::typeIdentifier() {
  return getRuleContext<Dart2Parser::TypeIdentifierContext>(0);
}

tree::TerminalNode* Dart2Parser::TypeAliasContext::EQ() {
  return getToken(Dart2Parser::EQ, 0);
}

Dart2Parser::TypeContext* Dart2Parser::TypeAliasContext::type() {
  return getRuleContext<Dart2Parser::TypeContext>(0);
}

tree::TerminalNode* Dart2Parser::TypeAliasContext::SC() {
  return getToken(Dart2Parser::SC, 0);
}

Dart2Parser::TypeParametersContext* Dart2Parser::TypeAliasContext::typeParameters() {
  return getRuleContext<Dart2Parser::TypeParametersContext>(0);
}

Dart2Parser::FunctionTypeAliasContext* Dart2Parser::TypeAliasContext::functionTypeAlias() {
  return getRuleContext<Dart2Parser::FunctionTypeAliasContext>(0);
}


size_t Dart2Parser::TypeAliasContext::getRuleIndex() const {
  return Dart2Parser::RuleTypeAlias;
}

void Dart2Parser::TypeAliasContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeAlias(this);
}

void Dart2Parser::TypeAliasContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeAlias(this);
}

Dart2Parser::TypeAliasContext* Dart2Parser::typeAlias() {
  TypeAliasContext *_localctx = _tracker.createInstance<TypeAliasContext>(_ctx, getState());
  enterRule(_localctx, 368, Dart2Parser::RuleTypeAlias);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2076);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 238, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2065);
      match(Dart2Parser::TYPEDEF_);
      setState(2066);
      typeIdentifier();
      setState(2068);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Dart2Parser::LT) {
        setState(2067);
        typeParameters();
      }
      setState(2070);
      match(Dart2Parser::EQ);
      setState(2071);
      type();
      setState(2072);
      match(Dart2Parser::SC);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2074);
      match(Dart2Parser::TYPEDEF_);
      setState(2075);
      functionTypeAlias();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeArgumentsContext ------------------------------------------------------------------

Dart2Parser::TypeArgumentsContext::TypeArgumentsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::TypeArgumentsContext::LT() {
  return getToken(Dart2Parser::LT, 0);
}

Dart2Parser::TypeListContext* Dart2Parser::TypeArgumentsContext::typeList() {
  return getRuleContext<Dart2Parser::TypeListContext>(0);
}

tree::TerminalNode* Dart2Parser::TypeArgumentsContext::GT() {
  return getToken(Dart2Parser::GT, 0);
}


size_t Dart2Parser::TypeArgumentsContext::getRuleIndex() const {
  return Dart2Parser::RuleTypeArguments;
}

void Dart2Parser::TypeArgumentsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeArguments(this);
}

void Dart2Parser::TypeArgumentsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeArguments(this);
}

Dart2Parser::TypeArgumentsContext* Dart2Parser::typeArguments() {
  TypeArgumentsContext *_localctx = _tracker.createInstance<TypeArgumentsContext>(_ctx, getState());
  enterRule(_localctx, 370, Dart2Parser::RuleTypeArguments);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2078);
    match(Dart2Parser::LT);
    setState(2079);
    typeList();
    setState(2080);
    match(Dart2Parser::GT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeCastContext ------------------------------------------------------------------

Dart2Parser::TypeCastContext::TypeCastContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::AsOperatorContext* Dart2Parser::TypeCastContext::asOperator() {
  return getRuleContext<Dart2Parser::AsOperatorContext>(0);
}

Dart2Parser::TypeNotVoidContext* Dart2Parser::TypeCastContext::typeNotVoid() {
  return getRuleContext<Dart2Parser::TypeNotVoidContext>(0);
}


size_t Dart2Parser::TypeCastContext::getRuleIndex() const {
  return Dart2Parser::RuleTypeCast;
}

void Dart2Parser::TypeCastContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeCast(this);
}

void Dart2Parser::TypeCastContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeCast(this);
}

Dart2Parser::TypeCastContext* Dart2Parser::typeCast() {
  TypeCastContext *_localctx = _tracker.createInstance<TypeCastContext>(_ctx, getState());
  enterRule(_localctx, 372, Dart2Parser::RuleTypeCast);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2082);
    asOperator();
    setState(2083);
    typeNotVoid();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypedIdentifierContext ------------------------------------------------------------------

Dart2Parser::TypedIdentifierContext::TypedIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::TypeContext* Dart2Parser::TypedIdentifierContext::type() {
  return getRuleContext<Dart2Parser::TypeContext>(0);
}

Dart2Parser::IdentifierContext* Dart2Parser::TypedIdentifierContext::identifier() {
  return getRuleContext<Dart2Parser::IdentifierContext>(0);
}


size_t Dart2Parser::TypedIdentifierContext::getRuleIndex() const {
  return Dart2Parser::RuleTypedIdentifier;
}

void Dart2Parser::TypedIdentifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypedIdentifier(this);
}

void Dart2Parser::TypedIdentifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypedIdentifier(this);
}

Dart2Parser::TypedIdentifierContext* Dart2Parser::typedIdentifier() {
  TypedIdentifierContext *_localctx = _tracker.createInstance<TypedIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 374, Dart2Parser::RuleTypedIdentifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2085);
    type();
    setState(2086);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeIdentifierContext ------------------------------------------------------------------

Dart2Parser::TypeIdentifierContext::TypeIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::TypeIdentifierContext::IDENTIFIER() {
  return getToken(Dart2Parser::IDENTIFIER, 0);
}

tree::TerminalNode* Dart2Parser::TypeIdentifierContext::ASYNC_() {
  return getToken(Dart2Parser::ASYNC_, 0);
}

tree::TerminalNode* Dart2Parser::TypeIdentifierContext::HIDE_() {
  return getToken(Dart2Parser::HIDE_, 0);
}

tree::TerminalNode* Dart2Parser::TypeIdentifierContext::OF_() {
  return getToken(Dart2Parser::OF_, 0);
}

tree::TerminalNode* Dart2Parser::TypeIdentifierContext::ON_() {
  return getToken(Dart2Parser::ON_, 0);
}

tree::TerminalNode* Dart2Parser::TypeIdentifierContext::SHOW_() {
  return getToken(Dart2Parser::SHOW_, 0);
}

tree::TerminalNode* Dart2Parser::TypeIdentifierContext::SYNC_() {
  return getToken(Dart2Parser::SYNC_, 0);
}

tree::TerminalNode* Dart2Parser::TypeIdentifierContext::AWAIT_() {
  return getToken(Dart2Parser::AWAIT_, 0);
}

tree::TerminalNode* Dart2Parser::TypeIdentifierContext::YIELD_() {
  return getToken(Dart2Parser::YIELD_, 0);
}

tree::TerminalNode* Dart2Parser::TypeIdentifierContext::DYNAMIC_() {
  return getToken(Dart2Parser::DYNAMIC_, 0);
}

tree::TerminalNode* Dart2Parser::TypeIdentifierContext::NATIVE_() {
  return getToken(Dart2Parser::NATIVE_, 0);
}

tree::TerminalNode* Dart2Parser::TypeIdentifierContext::FUNCTION_() {
  return getToken(Dart2Parser::FUNCTION_, 0);
}


size_t Dart2Parser::TypeIdentifierContext::getRuleIndex() const {
  return Dart2Parser::RuleTypeIdentifier;
}

void Dart2Parser::TypeIdentifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeIdentifier(this);
}

void Dart2Parser::TypeIdentifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeIdentifier(this);
}

Dart2Parser::TypeIdentifierContext* Dart2Parser::typeIdentifier() {
  TypeIdentifierContext *_localctx = _tracker.createInstance<TypeIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 376, Dart2Parser::RuleTypeIdentifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2088);
    _la = _input->LA(1);
    if (!(_la == Dart2Parser::ASYNC_

    || _la == Dart2Parser::AWAIT_ || ((((_la - 69) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 69)) & 74311731991580673) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeListContext ------------------------------------------------------------------

Dart2Parser::TypeListContext::TypeListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Dart2Parser::TypeContext *> Dart2Parser::TypeListContext::type() {
  return getRuleContexts<Dart2Parser::TypeContext>();
}

Dart2Parser::TypeContext* Dart2Parser::TypeListContext::type(size_t i) {
  return getRuleContext<Dart2Parser::TypeContext>(i);
}

std::vector<tree::TerminalNode *> Dart2Parser::TypeListContext::C() {
  return getTokens(Dart2Parser::C);
}

tree::TerminalNode* Dart2Parser::TypeListContext::C(size_t i) {
  return getToken(Dart2Parser::C, i);
}


size_t Dart2Parser::TypeListContext::getRuleIndex() const {
  return Dart2Parser::RuleTypeList;
}

void Dart2Parser::TypeListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeList(this);
}

void Dart2Parser::TypeListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeList(this);
}

Dart2Parser::TypeListContext* Dart2Parser::typeList() {
  TypeListContext *_localctx = _tracker.createInstance<TypeListContext>(_ctx, getState());
  enterRule(_localctx, 378, Dart2Parser::RuleTypeList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2090);
    type();
    setState(2095);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Dart2Parser::C) {
      setState(2091);
      match(Dart2Parser::C);
      setState(2092);
      type();
      setState(2097);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeNameContext ------------------------------------------------------------------

Dart2Parser::TypeNameContext::TypeNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Dart2Parser::TypeIdentifierContext *> Dart2Parser::TypeNameContext::typeIdentifier() {
  return getRuleContexts<Dart2Parser::TypeIdentifierContext>();
}

Dart2Parser::TypeIdentifierContext* Dart2Parser::TypeNameContext::typeIdentifier(size_t i) {
  return getRuleContext<Dart2Parser::TypeIdentifierContext>(i);
}

tree::TerminalNode* Dart2Parser::TypeNameContext::D() {
  return getToken(Dart2Parser::D, 0);
}


size_t Dart2Parser::TypeNameContext::getRuleIndex() const {
  return Dart2Parser::RuleTypeName;
}

void Dart2Parser::TypeNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeName(this);
}

void Dart2Parser::TypeNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeName(this);
}

Dart2Parser::TypeNameContext* Dart2Parser::typeName() {
  TypeNameContext *_localctx = _tracker.createInstance<TypeNameContext>(_ctx, getState());
  enterRule(_localctx, 380, Dart2Parser::RuleTypeName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2098);
    typeIdentifier();
    setState(2101);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 240, _ctx)) {
    case 1: {
      setState(2099);
      match(Dart2Parser::D);
      setState(2100);
      typeIdentifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeNotFunctionContext ------------------------------------------------------------------

Dart2Parser::TypeNotFunctionContext::TypeNotFunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::TypeNotFunctionContext::VOID_() {
  return getToken(Dart2Parser::VOID_, 0);
}

Dart2Parser::TypeNotVoidNotFunctionContext* Dart2Parser::TypeNotFunctionContext::typeNotVoidNotFunction() {
  return getRuleContext<Dart2Parser::TypeNotVoidNotFunctionContext>(0);
}


size_t Dart2Parser::TypeNotFunctionContext::getRuleIndex() const {
  return Dart2Parser::RuleTypeNotFunction;
}

void Dart2Parser::TypeNotFunctionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeNotFunction(this);
}

void Dart2Parser::TypeNotFunctionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeNotFunction(this);
}

Dart2Parser::TypeNotFunctionContext* Dart2Parser::typeNotFunction() {
  TypeNotFunctionContext *_localctx = _tracker.createInstance<TypeNotFunctionContext>(_ctx, getState());
  enterRule(_localctx, 382, Dart2Parser::RuleTypeNotFunction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2105);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Dart2Parser::VOID_: {
        enterOuterAlt(_localctx, 1);
        setState(2103);
        match(Dart2Parser::VOID_);
        break;
      }

      case Dart2Parser::ASYNC_:
      case Dart2Parser::AWAIT_:
      case Dart2Parser::DYNAMIC_:
      case Dart2Parser::FUNCTION_:
      case Dart2Parser::HIDE_:
      case Dart2Parser::NATIVE_:
      case Dart2Parser::OF_:
      case Dart2Parser::ON_:
      case Dart2Parser::SHOW_:
      case Dart2Parser::SYNC_:
      case Dart2Parser::YIELD_:
      case Dart2Parser::IDENTIFIER: {
        enterOuterAlt(_localctx, 2);
        setState(2104);
        typeNotVoidNotFunction();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeNotVoidContext ------------------------------------------------------------------

Dart2Parser::TypeNotVoidContext::TypeNotVoidContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::FunctionTypeContext* Dart2Parser::TypeNotVoidContext::functionType() {
  return getRuleContext<Dart2Parser::FunctionTypeContext>(0);
}

tree::TerminalNode* Dart2Parser::TypeNotVoidContext::QU() {
  return getToken(Dart2Parser::QU, 0);
}

Dart2Parser::TypeNotVoidNotFunctionContext* Dart2Parser::TypeNotVoidContext::typeNotVoidNotFunction() {
  return getRuleContext<Dart2Parser::TypeNotVoidNotFunctionContext>(0);
}


size_t Dart2Parser::TypeNotVoidContext::getRuleIndex() const {
  return Dart2Parser::RuleTypeNotVoid;
}

void Dart2Parser::TypeNotVoidContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeNotVoid(this);
}

void Dart2Parser::TypeNotVoidContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeNotVoid(this);
}

Dart2Parser::TypeNotVoidContext* Dart2Parser::typeNotVoid() {
  TypeNotVoidContext *_localctx = _tracker.createInstance<TypeNotVoidContext>(_ctx, getState());
  enterRule(_localctx, 384, Dart2Parser::RuleTypeNotVoid);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2112);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 243, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2107);
      functionType();
      setState(2109);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 242, _ctx)) {
      case 1: {
        setState(2108);
        match(Dart2Parser::QU);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2111);
      typeNotVoidNotFunction();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeNotVoidListContext ------------------------------------------------------------------

Dart2Parser::TypeNotVoidListContext::TypeNotVoidListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Dart2Parser::TypeNotVoidContext *> Dart2Parser::TypeNotVoidListContext::typeNotVoid() {
  return getRuleContexts<Dart2Parser::TypeNotVoidContext>();
}

Dart2Parser::TypeNotVoidContext* Dart2Parser::TypeNotVoidListContext::typeNotVoid(size_t i) {
  return getRuleContext<Dart2Parser::TypeNotVoidContext>(i);
}

std::vector<tree::TerminalNode *> Dart2Parser::TypeNotVoidListContext::C() {
  return getTokens(Dart2Parser::C);
}

tree::TerminalNode* Dart2Parser::TypeNotVoidListContext::C(size_t i) {
  return getToken(Dart2Parser::C, i);
}


size_t Dart2Parser::TypeNotVoidListContext::getRuleIndex() const {
  return Dart2Parser::RuleTypeNotVoidList;
}

void Dart2Parser::TypeNotVoidListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeNotVoidList(this);
}

void Dart2Parser::TypeNotVoidListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeNotVoidList(this);
}

Dart2Parser::TypeNotVoidListContext* Dart2Parser::typeNotVoidList() {
  TypeNotVoidListContext *_localctx = _tracker.createInstance<TypeNotVoidListContext>(_ctx, getState());
  enterRule(_localctx, 386, Dart2Parser::RuleTypeNotVoidList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2114);
    typeNotVoid();
    setState(2119);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Dart2Parser::C) {
      setState(2115);
      match(Dart2Parser::C);
      setState(2116);
      typeNotVoid();
      setState(2121);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeNotVoidNotFunctionContext ------------------------------------------------------------------

Dart2Parser::TypeNotVoidNotFunctionContext::TypeNotVoidNotFunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::TypeNameContext* Dart2Parser::TypeNotVoidNotFunctionContext::typeName() {
  return getRuleContext<Dart2Parser::TypeNameContext>(0);
}

Dart2Parser::TypeArgumentsContext* Dart2Parser::TypeNotVoidNotFunctionContext::typeArguments() {
  return getRuleContext<Dart2Parser::TypeArgumentsContext>(0);
}

tree::TerminalNode* Dart2Parser::TypeNotVoidNotFunctionContext::QU() {
  return getToken(Dart2Parser::QU, 0);
}

tree::TerminalNode* Dart2Parser::TypeNotVoidNotFunctionContext::FUNCTION_() {
  return getToken(Dart2Parser::FUNCTION_, 0);
}


size_t Dart2Parser::TypeNotVoidNotFunctionContext::getRuleIndex() const {
  return Dart2Parser::RuleTypeNotVoidNotFunction;
}

void Dart2Parser::TypeNotVoidNotFunctionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeNotVoidNotFunction(this);
}

void Dart2Parser::TypeNotVoidNotFunctionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeNotVoidNotFunction(this);
}

Dart2Parser::TypeNotVoidNotFunctionContext* Dart2Parser::typeNotVoidNotFunction() {
  TypeNotVoidNotFunctionContext *_localctx = _tracker.createInstance<TypeNotVoidNotFunctionContext>(_ctx, getState());
  enterRule(_localctx, 388, Dart2Parser::RuleTypeNotVoidNotFunction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2133);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 248, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2122);
      typeName();
      setState(2124);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 245, _ctx)) {
      case 1: {
        setState(2123);
        typeArguments();
        break;
      }

      default:
        break;
      }
      setState(2127);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 246, _ctx)) {
      case 1: {
        setState(2126);
        match(Dart2Parser::QU);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2129);
      match(Dart2Parser::FUNCTION_);
      setState(2131);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 247, _ctx)) {
      case 1: {
        setState(2130);
        match(Dart2Parser::QU);
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeNotVoidNotFunctionListContext ------------------------------------------------------------------

Dart2Parser::TypeNotVoidNotFunctionListContext::TypeNotVoidNotFunctionListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Dart2Parser::TypeNotVoidNotFunctionContext *> Dart2Parser::TypeNotVoidNotFunctionListContext::typeNotVoidNotFunction() {
  return getRuleContexts<Dart2Parser::TypeNotVoidNotFunctionContext>();
}

Dart2Parser::TypeNotVoidNotFunctionContext* Dart2Parser::TypeNotVoidNotFunctionListContext::typeNotVoidNotFunction(size_t i) {
  return getRuleContext<Dart2Parser::TypeNotVoidNotFunctionContext>(i);
}

std::vector<tree::TerminalNode *> Dart2Parser::TypeNotVoidNotFunctionListContext::C() {
  return getTokens(Dart2Parser::C);
}

tree::TerminalNode* Dart2Parser::TypeNotVoidNotFunctionListContext::C(size_t i) {
  return getToken(Dart2Parser::C, i);
}


size_t Dart2Parser::TypeNotVoidNotFunctionListContext::getRuleIndex() const {
  return Dart2Parser::RuleTypeNotVoidNotFunctionList;
}

void Dart2Parser::TypeNotVoidNotFunctionListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeNotVoidNotFunctionList(this);
}

void Dart2Parser::TypeNotVoidNotFunctionListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeNotVoidNotFunctionList(this);
}

Dart2Parser::TypeNotVoidNotFunctionListContext* Dart2Parser::typeNotVoidNotFunctionList() {
  TypeNotVoidNotFunctionListContext *_localctx = _tracker.createInstance<TypeNotVoidNotFunctionListContext>(_ctx, getState());
  enterRule(_localctx, 390, Dart2Parser::RuleTypeNotVoidNotFunctionList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2135);
    typeNotVoidNotFunction();
    setState(2140);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Dart2Parser::C) {
      setState(2136);
      match(Dart2Parser::C);
      setState(2137);
      typeNotVoidNotFunction();
      setState(2142);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeParameterContext ------------------------------------------------------------------

Dart2Parser::TypeParameterContext::TypeParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::MetadataContext* Dart2Parser::TypeParameterContext::metadata() {
  return getRuleContext<Dart2Parser::MetadataContext>(0);
}

Dart2Parser::IdentifierContext* Dart2Parser::TypeParameterContext::identifier() {
  return getRuleContext<Dart2Parser::IdentifierContext>(0);
}

tree::TerminalNode* Dart2Parser::TypeParameterContext::EXTENDS_() {
  return getToken(Dart2Parser::EXTENDS_, 0);
}

Dart2Parser::TypeNotVoidContext* Dart2Parser::TypeParameterContext::typeNotVoid() {
  return getRuleContext<Dart2Parser::TypeNotVoidContext>(0);
}


size_t Dart2Parser::TypeParameterContext::getRuleIndex() const {
  return Dart2Parser::RuleTypeParameter;
}

void Dart2Parser::TypeParameterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeParameter(this);
}

void Dart2Parser::TypeParameterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeParameter(this);
}

Dart2Parser::TypeParameterContext* Dart2Parser::typeParameter() {
  TypeParameterContext *_localctx = _tracker.createInstance<TypeParameterContext>(_ctx, getState());
  enterRule(_localctx, 392, Dart2Parser::RuleTypeParameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2143);
    metadata();
    setState(2144);
    identifier();
    setState(2147);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Dart2Parser::EXTENDS_) {
      setState(2145);
      match(Dart2Parser::EXTENDS_);
      setState(2146);
      typeNotVoid();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeParametersContext ------------------------------------------------------------------

Dart2Parser::TypeParametersContext::TypeParametersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::TypeParametersContext::LT() {
  return getToken(Dart2Parser::LT, 0);
}

std::vector<Dart2Parser::TypeParameterContext *> Dart2Parser::TypeParametersContext::typeParameter() {
  return getRuleContexts<Dart2Parser::TypeParameterContext>();
}

Dart2Parser::TypeParameterContext* Dart2Parser::TypeParametersContext::typeParameter(size_t i) {
  return getRuleContext<Dart2Parser::TypeParameterContext>(i);
}

tree::TerminalNode* Dart2Parser::TypeParametersContext::GT() {
  return getToken(Dart2Parser::GT, 0);
}

std::vector<tree::TerminalNode *> Dart2Parser::TypeParametersContext::C() {
  return getTokens(Dart2Parser::C);
}

tree::TerminalNode* Dart2Parser::TypeParametersContext::C(size_t i) {
  return getToken(Dart2Parser::C, i);
}


size_t Dart2Parser::TypeParametersContext::getRuleIndex() const {
  return Dart2Parser::RuleTypeParameters;
}

void Dart2Parser::TypeParametersContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeParameters(this);
}

void Dart2Parser::TypeParametersContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeParameters(this);
}

Dart2Parser::TypeParametersContext* Dart2Parser::typeParameters() {
  TypeParametersContext *_localctx = _tracker.createInstance<TypeParametersContext>(_ctx, getState());
  enterRule(_localctx, 394, Dart2Parser::RuleTypeParameters);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2149);
    match(Dart2Parser::LT);
    setState(2150);
    typeParameter();
    setState(2155);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Dart2Parser::C) {
      setState(2151);
      match(Dart2Parser::C);
      setState(2152);
      typeParameter();
      setState(2157);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2158);
    match(Dart2Parser::GT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeTestContext ------------------------------------------------------------------

Dart2Parser::TypeTestContext::TypeTestContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::IsOperatorContext* Dart2Parser::TypeTestContext::isOperator() {
  return getRuleContext<Dart2Parser::IsOperatorContext>(0);
}

Dart2Parser::TypeNotVoidContext* Dart2Parser::TypeTestContext::typeNotVoid() {
  return getRuleContext<Dart2Parser::TypeNotVoidContext>(0);
}


size_t Dart2Parser::TypeTestContext::getRuleIndex() const {
  return Dart2Parser::RuleTypeTest;
}

void Dart2Parser::TypeTestContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeTest(this);
}

void Dart2Parser::TypeTestContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeTest(this);
}

Dart2Parser::TypeTestContext* Dart2Parser::typeTest() {
  TypeTestContext *_localctx = _tracker.createInstance<TypeTestContext>(_ctx, getState());
  enterRule(_localctx, 396, Dart2Parser::RuleTypeTest);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2160);
    isOperator();
    setState(2161);
    typeNotVoid();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnaryExpressionContext ------------------------------------------------------------------

Dart2Parser::UnaryExpressionContext::UnaryExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::PrefixOperatorContext* Dart2Parser::UnaryExpressionContext::prefixOperator() {
  return getRuleContext<Dart2Parser::PrefixOperatorContext>(0);
}

Dart2Parser::UnaryExpressionContext* Dart2Parser::UnaryExpressionContext::unaryExpression() {
  return getRuleContext<Dart2Parser::UnaryExpressionContext>(0);
}

Dart2Parser::AwaitExpressionContext* Dart2Parser::UnaryExpressionContext::awaitExpression() {
  return getRuleContext<Dart2Parser::AwaitExpressionContext>(0);
}

Dart2Parser::PostfixExpressionContext* Dart2Parser::UnaryExpressionContext::postfixExpression() {
  return getRuleContext<Dart2Parser::PostfixExpressionContext>(0);
}

tree::TerminalNode* Dart2Parser::UnaryExpressionContext::SUPER_() {
  return getToken(Dart2Parser::SUPER_, 0);
}

Dart2Parser::MinusOperatorContext* Dart2Parser::UnaryExpressionContext::minusOperator() {
  return getRuleContext<Dart2Parser::MinusOperatorContext>(0);
}

Dart2Parser::TildeOperatorContext* Dart2Parser::UnaryExpressionContext::tildeOperator() {
  return getRuleContext<Dart2Parser::TildeOperatorContext>(0);
}

Dart2Parser::IncrementOperatorContext* Dart2Parser::UnaryExpressionContext::incrementOperator() {
  return getRuleContext<Dart2Parser::IncrementOperatorContext>(0);
}

Dart2Parser::AssignableExpressionContext* Dart2Parser::UnaryExpressionContext::assignableExpression() {
  return getRuleContext<Dart2Parser::AssignableExpressionContext>(0);
}


size_t Dart2Parser::UnaryExpressionContext::getRuleIndex() const {
  return Dart2Parser::RuleUnaryExpression;
}

void Dart2Parser::UnaryExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnaryExpression(this);
}

void Dart2Parser::UnaryExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnaryExpression(this);
}

Dart2Parser::UnaryExpressionContext* Dart2Parser::unaryExpression() {
  UnaryExpressionContext *_localctx = _tracker.createInstance<UnaryExpressionContext>(_ctx, getState());
  enterRule(_localctx, 398, Dart2Parser::RuleUnaryExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2177);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 253, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2163);
      prefixOperator();
      setState(2164);
      unaryExpression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2166);
      awaitExpression();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2167);
      postfixExpression();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2170);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case Dart2Parser::MINUS: {
          setState(2168);
          minusOperator();
          break;
        }

        case Dart2Parser::SQUIG: {
          setState(2169);
          tildeOperator();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(2172);
      match(Dart2Parser::SUPER_);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2174);
      incrementOperator();
      setState(2175);
      assignableExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnconditionalAssignableSelectorContext ------------------------------------------------------------------

Dart2Parser::UnconditionalAssignableSelectorContext::UnconditionalAssignableSelectorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::UnconditionalAssignableSelectorContext::OB() {
  return getToken(Dart2Parser::OB, 0);
}

Dart2Parser::ExpressionContext* Dart2Parser::UnconditionalAssignableSelectorContext::expression() {
  return getRuleContext<Dart2Parser::ExpressionContext>(0);
}

tree::TerminalNode* Dart2Parser::UnconditionalAssignableSelectorContext::CB() {
  return getToken(Dart2Parser::CB, 0);
}

tree::TerminalNode* Dart2Parser::UnconditionalAssignableSelectorContext::D() {
  return getToken(Dart2Parser::D, 0);
}

Dart2Parser::IdentifierContext* Dart2Parser::UnconditionalAssignableSelectorContext::identifier() {
  return getRuleContext<Dart2Parser::IdentifierContext>(0);
}


size_t Dart2Parser::UnconditionalAssignableSelectorContext::getRuleIndex() const {
  return Dart2Parser::RuleUnconditionalAssignableSelector;
}

void Dart2Parser::UnconditionalAssignableSelectorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnconditionalAssignableSelector(this);
}

void Dart2Parser::UnconditionalAssignableSelectorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnconditionalAssignableSelector(this);
}

Dart2Parser::UnconditionalAssignableSelectorContext* Dart2Parser::unconditionalAssignableSelector() {
  UnconditionalAssignableSelectorContext *_localctx = _tracker.createInstance<UnconditionalAssignableSelectorContext>(_ctx, getState());
  enterRule(_localctx, 400, Dart2Parser::RuleUnconditionalAssignableSelector);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2185);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Dart2Parser::OB: {
        enterOuterAlt(_localctx, 1);
        setState(2179);
        match(Dart2Parser::OB);
        setState(2180);
        expression();
        setState(2181);
        match(Dart2Parser::CB);
        break;
      }

      case Dart2Parser::D: {
        enterOuterAlt(_localctx, 2);
        setState(2183);
        match(Dart2Parser::D);
        setState(2184);
        identifier();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UriContext ------------------------------------------------------------------

Dart2Parser::UriContext::UriContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::StringLiteralContext* Dart2Parser::UriContext::stringLiteral() {
  return getRuleContext<Dart2Parser::StringLiteralContext>(0);
}


size_t Dart2Parser::UriContext::getRuleIndex() const {
  return Dart2Parser::RuleUri;
}

void Dart2Parser::UriContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUri(this);
}

void Dart2Parser::UriContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUri(this);
}

Dart2Parser::UriContext* Dart2Parser::uri() {
  UriContext *_localctx = _tracker.createInstance<UriContext>(_ctx, getState());
  enterRule(_localctx, 402, Dart2Parser::RuleUri);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2187);
    stringLiteral();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UriTestContext ------------------------------------------------------------------

Dart2Parser::UriTestContext::UriTestContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Dart2Parser::DottedIdentifierListContext* Dart2Parser::UriTestContext::dottedIdentifierList() {
  return getRuleContext<Dart2Parser::DottedIdentifierListContext>(0);
}

tree::TerminalNode* Dart2Parser::UriTestContext::EE() {
  return getToken(Dart2Parser::EE, 0);
}

Dart2Parser::StringLiteralContext* Dart2Parser::UriTestContext::stringLiteral() {
  return getRuleContext<Dart2Parser::StringLiteralContext>(0);
}


size_t Dart2Parser::UriTestContext::getRuleIndex() const {
  return Dart2Parser::RuleUriTest;
}

void Dart2Parser::UriTestContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUriTest(this);
}

void Dart2Parser::UriTestContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUriTest(this);
}

Dart2Parser::UriTestContext* Dart2Parser::uriTest() {
  UriTestContext *_localctx = _tracker.createInstance<UriTestContext>(_ctx, getState());
  enterRule(_localctx, 404, Dart2Parser::RuleUriTest);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2189);
    dottedIdentifierList();
    setState(2192);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Dart2Parser::EE) {
      setState(2190);
      match(Dart2Parser::EE);
      setState(2191);
      stringLiteral();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VarOrTypeContext ------------------------------------------------------------------

Dart2Parser::VarOrTypeContext::VarOrTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::VarOrTypeContext::VAR_() {
  return getToken(Dart2Parser::VAR_, 0);
}

Dart2Parser::TypeContext* Dart2Parser::VarOrTypeContext::type() {
  return getRuleContext<Dart2Parser::TypeContext>(0);
}


size_t Dart2Parser::VarOrTypeContext::getRuleIndex() const {
  return Dart2Parser::RuleVarOrType;
}

void Dart2Parser::VarOrTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVarOrType(this);
}

void Dart2Parser::VarOrTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVarOrType(this);
}

Dart2Parser::VarOrTypeContext* Dart2Parser::varOrType() {
  VarOrTypeContext *_localctx = _tracker.createInstance<VarOrTypeContext>(_ctx, getState());
  enterRule(_localctx, 406, Dart2Parser::RuleVarOrType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2196);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Dart2Parser::VAR_: {
        enterOuterAlt(_localctx, 1);
        setState(2194);
        match(Dart2Parser::VAR_);
        break;
      }

      case Dart2Parser::ASYNC_:
      case Dart2Parser::AWAIT_:
      case Dart2Parser::DYNAMIC_:
      case Dart2Parser::FUNCTION_:
      case Dart2Parser::HIDE_:
      case Dart2Parser::NATIVE_:
      case Dart2Parser::OF_:
      case Dart2Parser::ON_:
      case Dart2Parser::SHOW_:
      case Dart2Parser::SYNC_:
      case Dart2Parser::VOID_:
      case Dart2Parser::YIELD_:
      case Dart2Parser::IDENTIFIER: {
        enterOuterAlt(_localctx, 2);
        setState(2195);
        type();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WhileStatementContext ------------------------------------------------------------------

Dart2Parser::WhileStatementContext::WhileStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::WhileStatementContext::WHILE_() {
  return getToken(Dart2Parser::WHILE_, 0);
}

tree::TerminalNode* Dart2Parser::WhileStatementContext::OP() {
  return getToken(Dart2Parser::OP, 0);
}

Dart2Parser::ExpressionContext* Dart2Parser::WhileStatementContext::expression() {
  return getRuleContext<Dart2Parser::ExpressionContext>(0);
}

tree::TerminalNode* Dart2Parser::WhileStatementContext::CP() {
  return getToken(Dart2Parser::CP, 0);
}

Dart2Parser::StatementContext* Dart2Parser::WhileStatementContext::statement() {
  return getRuleContext<Dart2Parser::StatementContext>(0);
}


size_t Dart2Parser::WhileStatementContext::getRuleIndex() const {
  return Dart2Parser::RuleWhileStatement;
}

void Dart2Parser::WhileStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWhileStatement(this);
}

void Dart2Parser::WhileStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWhileStatement(this);
}

Dart2Parser::WhileStatementContext* Dart2Parser::whileStatement() {
  WhileStatementContext *_localctx = _tracker.createInstance<WhileStatementContext>(_ctx, getState());
  enterRule(_localctx, 408, Dart2Parser::RuleWhileStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2198);
    match(Dart2Parser::WHILE_);
    setState(2199);
    match(Dart2Parser::OP);
    setState(2200);
    expression();
    setState(2201);
    match(Dart2Parser::CP);
    setState(2202);
    statement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- YieldEachStatementContext ------------------------------------------------------------------

Dart2Parser::YieldEachStatementContext::YieldEachStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::YieldEachStatementContext::YIELD_() {
  return getToken(Dart2Parser::YIELD_, 0);
}

tree::TerminalNode* Dart2Parser::YieldEachStatementContext::ST() {
  return getToken(Dart2Parser::ST, 0);
}

Dart2Parser::ExpressionContext* Dart2Parser::YieldEachStatementContext::expression() {
  return getRuleContext<Dart2Parser::ExpressionContext>(0);
}

tree::TerminalNode* Dart2Parser::YieldEachStatementContext::SC() {
  return getToken(Dart2Parser::SC, 0);
}


size_t Dart2Parser::YieldEachStatementContext::getRuleIndex() const {
  return Dart2Parser::RuleYieldEachStatement;
}

void Dart2Parser::YieldEachStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterYieldEachStatement(this);
}

void Dart2Parser::YieldEachStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitYieldEachStatement(this);
}

Dart2Parser::YieldEachStatementContext* Dart2Parser::yieldEachStatement() {
  YieldEachStatementContext *_localctx = _tracker.createInstance<YieldEachStatementContext>(_ctx, getState());
  enterRule(_localctx, 410, Dart2Parser::RuleYieldEachStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2204);
    match(Dart2Parser::YIELD_);
    setState(2205);
    match(Dart2Parser::ST);
    setState(2206);
    expression();
    setState(2207);
    match(Dart2Parser::SC);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- YieldStatementContext ------------------------------------------------------------------

Dart2Parser::YieldStatementContext::YieldStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Dart2Parser::YieldStatementContext::YIELD_() {
  return getToken(Dart2Parser::YIELD_, 0);
}

Dart2Parser::ExpressionContext* Dart2Parser::YieldStatementContext::expression() {
  return getRuleContext<Dart2Parser::ExpressionContext>(0);
}

tree::TerminalNode* Dart2Parser::YieldStatementContext::SC() {
  return getToken(Dart2Parser::SC, 0);
}


size_t Dart2Parser::YieldStatementContext::getRuleIndex() const {
  return Dart2Parser::RuleYieldStatement;
}

void Dart2Parser::YieldStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterYieldStatement(this);
}

void Dart2Parser::YieldStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Dart2ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitYieldStatement(this);
}

Dart2Parser::YieldStatementContext* Dart2Parser::yieldStatement() {
  YieldStatementContext *_localctx = _tracker.createInstance<YieldStatementContext>(_ctx, getState());
  enterRule(_localctx, 412, Dart2Parser::RuleYieldStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2209);
    match(Dart2Parser::YIELD_);
    setState(2210);
    expression();
    setState(2211);
    match(Dart2Parser::SC);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool Dart2Parser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 21: return cascadeSempred(antlrcpp::downCast<CascadeContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool Dart2Parser::cascadeSempred(CascadeContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

void Dart2Parser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  dart2parserParserInitialize();
#else
  ::antlr4::internal::call_once(dart2parserParserOnceFlag, dart2parserParserInitialize);
#endif
}
