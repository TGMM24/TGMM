
// Generated from Cobol85.g4 by ANTLR 4.13.0


#include "Cobol85Listener.h"

#include "Cobol85Parser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct Cobol85ParserStaticData final {
  Cobol85ParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  Cobol85ParserStaticData(const Cobol85ParserStaticData&) = delete;
  Cobol85ParserStaticData(Cobol85ParserStaticData&&) = delete;
  Cobol85ParserStaticData& operator=(const Cobol85ParserStaticData&) = delete;
  Cobol85ParserStaticData& operator=(Cobol85ParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag cobol85ParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
Cobol85ParserStaticData *cobol85ParserStaticData = nullptr;

void cobol85ParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (cobol85ParserStaticData != nullptr) {
    return;
  }
#else
  assert(cobol85ParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<Cobol85ParserStaticData>(
    std::vector<std::string>{
      "startRule", "compilationUnit", "programUnit", "endProgramStatement", 
      "identificationDivision", "identificationDivisionBody", "programIdParagraph", 
      "authorParagraph", "installationParagraph", "dateWrittenParagraph", 
      "dateCompiledParagraph", "securityParagraph", "remarksParagraph", 
      "environmentDivision", "environmentDivisionBody", "configurationSection", 
      "configurationSectionParagraph", "sourceComputerParagraph", "objectComputerParagraph", 
      "objectComputerClause", "memorySizeClause", "diskSizeClause", "collatingSequenceClause", 
      "collatingSequenceClauseAlphanumeric", "collatingSequenceClauseNational", 
      "segmentLimitClause", "characterSetClause", "specialNamesParagraph", 
      "specialNameClause", "alphabetClause", "alphabetClauseFormat1", "alphabetLiterals", 
      "alphabetThrough", "alphabetAlso", "alphabetClauseFormat2", "channelClause", 
      "classClause", "classClauseThrough", "classClauseFrom", "classClauseTo", 
      "currencySignClause", "decimalPointClause", "defaultComputationalSignClause", 
      "defaultDisplaySignClause", "environmentSwitchNameClause", "environmentSwitchNameSpecialNamesStatusPhrase", 
      "odtClause", "reserveNetworkClause", "symbolicCharactersClause", "symbolicCharacters", 
      "inputOutputSection", "inputOutputSectionParagraph", "fileControlParagraph", 
      "fileControlEntry", "selectClause", "fileControlClause", "assignClause", 
      "reserveClause", "organizationClause", "paddingCharacterClause", "recordDelimiterClause", 
      "accessModeClause", "recordKeyClause", "alternateRecordKeyClause", 
      "passwordClause", "fileStatusClause", "relativeKeyClause", "ioControlParagraph", 
      "ioControlClause", "rerunClause", "rerunEveryRecords", "rerunEveryOf", 
      "rerunEveryClock", "sameClause", "multipleFileClause", "multipleFilePosition", 
      "commitmentControlClause", "dataDivision", "dataDivisionSection", 
      "fileSection", "fileDescriptionEntry", "fileDescriptionEntryClause", 
      "externalClause", "globalClause", "blockContainsClause", "blockContainsTo", 
      "recordContainsClause", "recordContainsClauseFormat1", "recordContainsClauseFormat2", 
      "recordContainsClauseFormat3", "recordContainsTo", "labelRecordsClause", 
      "valueOfClause", "valuePair", "dataRecordsClause", "linageClause", 
      "linageAt", "linageFootingAt", "linageLinesAtTop", "linageLinesAtBottom", 
      "recordingModeClause", "modeStatement", "codeSetClause", "reportClause", 
      "dataBaseSection", "dataBaseSectionEntry", "workingStorageSection", 
      "linkageSection", "communicationSection", "communicationDescriptionEntry", 
      "communicationDescriptionEntryFormat1", "communicationDescriptionEntryFormat2", 
      "communicationDescriptionEntryFormat3", "destinationCountClause", 
      "destinationTableClause", "endKeyClause", "errorKeyClause", "messageCountClause", 
      "messageDateClause", "messageTimeClause", "statusKeyClause", "symbolicDestinationClause", 
      "symbolicQueueClause", "symbolicSourceClause", "symbolicTerminalClause", 
      "symbolicSubQueueClause", "textLengthClause", "localStorageSection", 
      "screenSection", "screenDescriptionEntry", "screenDescriptionBlankClause", 
      "screenDescriptionBellClause", "screenDescriptionBlinkClause", "screenDescriptionEraseClause", 
      "screenDescriptionLightClause", "screenDescriptionGridClause", "screenDescriptionReverseVideoClause", 
      "screenDescriptionUnderlineClause", "screenDescriptionSizeClause", 
      "screenDescriptionLineClause", "screenDescriptionColumnClause", "screenDescriptionForegroundColorClause", 
      "screenDescriptionBackgroundColorClause", "screenDescriptionControlClause", 
      "screenDescriptionValueClause", "screenDescriptionPictureClause", 
      "screenDescriptionFromClause", "screenDescriptionToClause", "screenDescriptionUsingClause", 
      "screenDescriptionUsageClause", "screenDescriptionBlankWhenZeroClause", 
      "screenDescriptionJustifiedClause", "screenDescriptionSignClause", 
      "screenDescriptionAutoClause", "screenDescriptionSecureClause", "screenDescriptionRequiredClause", 
      "screenDescriptionPromptClause", "screenDescriptionPromptOccursClause", 
      "screenDescriptionFullClause", "screenDescriptionZeroFillClause", 
      "reportSection", "reportDescription", "reportDescriptionEntry", "reportDescriptionGlobalClause", 
      "reportDescriptionPageLimitClause", "reportDescriptionHeadingClause", 
      "reportDescriptionFirstDetailClause", "reportDescriptionLastDetailClause", 
      "reportDescriptionFootingClause", "reportGroupDescriptionEntry", "reportGroupDescriptionEntryFormat1", 
      "reportGroupDescriptionEntryFormat2", "reportGroupDescriptionEntryFormat3", 
      "reportGroupBlankWhenZeroClause", "reportGroupColumnNumberClause", 
      "reportGroupIndicateClause", "reportGroupJustifiedClause", "reportGroupLineNumberClause", 
      "reportGroupLineNumberNextPage", "reportGroupLineNumberPlus", "reportGroupNextGroupClause", 
      "reportGroupNextGroupPlus", "reportGroupNextGroupNextPage", "reportGroupPictureClause", 
      "reportGroupResetClause", "reportGroupSignClause", "reportGroupSourceClause", 
      "reportGroupSumClause", "reportGroupTypeClause", "reportGroupTypeReportHeading", 
      "reportGroupTypePageHeading", "reportGroupTypeControlHeading", "reportGroupTypeDetail", 
      "reportGroupTypeControlFooting", "reportGroupUsageClause", "reportGroupTypePageFooting", 
      "reportGroupTypeReportFooting", "reportGroupValueClause", "programLibrarySection", 
      "libraryDescriptionEntry", "libraryDescriptionEntryFormat1", "libraryDescriptionEntryFormat2", 
      "libraryAttributeClauseFormat1", "libraryAttributeClauseFormat2", 
      "libraryAttributeFunction", "libraryAttributeParameter", "libraryAttributeTitle", 
      "libraryEntryProcedureClauseFormat1", "libraryEntryProcedureClauseFormat2", 
      "libraryEntryProcedureForClause", "libraryEntryProcedureGivingClause", 
      "libraryEntryProcedureUsingClause", "libraryEntryProcedureUsingName", 
      "libraryEntryProcedureWithClause", "libraryEntryProcedureWithName", 
      "libraryIsCommonClause", "libraryIsGlobalClause", "dataDescriptionEntry", 
      "dataDescriptionEntryFormat1", "dataDescriptionEntryFormat2", "dataDescriptionEntryFormat3", 
      "dataDescriptionEntryExecSql", "dataAlignedClause", "dataBlankWhenZeroClause", 
      "dataCommonOwnLocalClause", "dataExternalClause", "dataGlobalClause", 
      "dataIntegerStringClause", "dataJustifiedClause", "dataOccursClause", 
      "dataOccursTo", "dataOccursSort", "dataPictureClause", "pictureString", 
      "pictureChars", "pictureCardinality", "dataReceivedByClause", "dataRecordAreaClause", 
      "dataRedefinesClause", "dataRenamesClause", "dataSignClause", "dataSynchronizedClause", 
      "dataThreadLocalClause", "dataTypeClause", "dataTypeDefClause", "dataUsageClause", 
      "dataUsingClause", "dataValueClause", "dataValueInterval", "dataValueIntervalFrom", 
      "dataValueIntervalTo", "dataWithLowerBoundsClause", "procedureDivision", 
      "procedureDivisionUsingClause", "procedureDivisionGivingClause", "procedureDivisionUsingParameter", 
      "procedureDivisionByReferencePhrase", "procedureDivisionByReference", 
      "procedureDivisionByValuePhrase", "procedureDivisionByValue", "procedureDeclaratives", 
      "procedureDeclarative", "procedureSectionHeader", "procedureDivisionBody", 
      "procedureSection", "paragraphs", "paragraph", "sentence", "statement", 
      "acceptStatement", "acceptFromDateStatement", "acceptFromMnemonicStatement", 
      "acceptFromEscapeKeyStatement", "acceptMessageCountStatement", "addStatement", 
      "addToStatement", "addToGivingStatement", "addCorrespondingStatement", 
      "addFrom", "addTo", "addToGiving", "addGiving", "alteredGoTo", "alterStatement", 
      "alterProceedTo", "callStatement", "callUsingPhrase", "callUsingParameter", 
      "callByReferencePhrase", "callByReference", "callByValuePhrase", "callByValue", 
      "callByContentPhrase", "callByContent", "callGivingPhrase", "cancelStatement", 
      "cancelCall", "closeStatement", "closeFile", "closeReelUnitStatement", 
      "closeRelativeStatement", "closePortFileIOStatement", "closePortFileIOUsing", 
      "closePortFileIOUsingCloseDisposition", "closePortFileIOUsingAssociatedData", 
      "closePortFileIOUsingAssociatedDataLength", "computeStatement", "computeStore", 
      "continueStatement", "deleteStatement", "disableStatement", "displayStatement", 
      "displayOperand", "displayAt", "displayUpon", "displayWith", "divideStatement", 
      "divideIntoStatement", "divideIntoGivingStatement", "divideByGivingStatement", 
      "divideGivingPhrase", "divideInto", "divideGiving", "divideRemainder", 
      "enableStatement", "entryStatement", "evaluateStatement", "evaluateSelect", 
      "evaluateAlsoSelect", "evaluateWhenPhrase", "evaluateWhen", "evaluateCondition", 
      "evaluateThrough", "evaluateAlsoCondition", "evaluateWhenOther", "evaluateValue", 
      "execCicsStatement", "execSqlStatement", "execSqlImsStatement", "exhibitStatement", 
      "exhibitOperand", "exitStatement", "generateStatement", "gobackStatement", 
      "goToStatement", "goToStatementSimple", "goToDependingOnStatement", 
      "ifStatement", "ifThen", "ifElse", "initializeStatement", "initializeReplacingPhrase", 
      "initializeReplacingBy", "initiateStatement", "inspectStatement", 
      "inspectTallyingPhrase", "inspectReplacingPhrase", "inspectTallyingReplacingPhrase", 
      "inspectConvertingPhrase", "inspectFor", "inspectCharacters", "inspectReplacingCharacters", 
      "inspectAllLeadings", "inspectReplacingAllLeadings", "inspectAllLeading", 
      "inspectReplacingAllLeading", "inspectBy", "inspectTo", "inspectBeforeAfter", 
      "mergeStatement", "mergeOnKeyClause", "mergeCollatingSequencePhrase", 
      "mergeCollatingAlphanumeric", "mergeCollatingNational", "mergeUsing", 
      "mergeOutputProcedurePhrase", "mergeOutputThrough", "mergeGivingPhrase", 
      "mergeGiving", "moveStatement", "moveToStatement", "moveToSendingArea", 
      "moveCorrespondingToStatement", "moveCorrespondingToSendingArea", 
      "multiplyStatement", "multiplyRegular", "multiplyRegularOperand", 
      "multiplyGiving", "multiplyGivingOperand", "multiplyGivingResult", 
      "openStatement", "openInputStatement", "openInput", "openOutputStatement", 
      "openOutput", "openIOStatement", "openExtendStatement", "performStatement", 
      "performInlineStatement", "performProcedureStatement", "performType", 
      "performTimes", "performUntil", "performVarying", "performVaryingClause", 
      "performVaryingPhrase", "performAfter", "performFrom", "performBy", 
      "performTestClause", "purgeStatement", "readStatement", "readInto", 
      "readWith", "readKey", "receiveStatement", "receiveFromStatement", 
      "receiveFrom", "receiveIntoStatement", "receiveNoData", "receiveWithData", 
      "receiveBefore", "receiveWith", "receiveThread", "receiveSize", "receiveStatus", 
      "releaseStatement", "returnStatement", "returnInto", "rewriteStatement", 
      "rewriteFrom", "searchStatement", "searchVarying", "searchWhen", "sendStatement", 
      "sendStatementSync", "sendStatementAsync", "sendFromPhrase", "sendWithPhrase", 
      "sendReplacingPhrase", "sendAdvancingPhrase", "sendAdvancingPage", 
      "sendAdvancingLines", "sendAdvancingMnemonic", "setStatement", "setToStatement", 
      "setUpDownByStatement", "setTo", "setToValue", "setByValue", "sortStatement", 
      "sortOnKeyClause", "sortDuplicatesPhrase", "sortCollatingSequencePhrase", 
      "sortCollatingAlphanumeric", "sortCollatingNational", "sortInputProcedurePhrase", 
      "sortInputThrough", "sortUsing", "sortOutputProcedurePhrase", "sortOutputThrough", 
      "sortGivingPhrase", "sortGiving", "startStatement", "startKey", "stopStatement", 
      "stringStatement", "stringSendingPhrase", "stringSending", "stringDelimitedByPhrase", 
      "stringForPhrase", "stringIntoPhrase", "stringWithPointerPhrase", 
      "subtractStatement", "subtractFromStatement", "subtractFromGivingStatement", 
      "subtractCorrespondingStatement", "subtractSubtrahend", "subtractMinuend", 
      "subtractMinuendGiving", "subtractGiving", "subtractMinuendCorresponding", 
      "terminateStatement", "unstringStatement", "unstringSendingPhrase", 
      "unstringDelimitedByPhrase", "unstringOrAllPhrase", "unstringIntoPhrase", 
      "unstringInto", "unstringDelimiterIn", "unstringCountIn", "unstringWithPointerPhrase", 
      "unstringTallyingPhrase", "useStatement", "useAfterClause", "useAfterOn", 
      "useDebugClause", "useDebugOn", "writeStatement", "writeFromPhrase", 
      "writeAdvancingPhrase", "writeAdvancingPage", "writeAdvancingLines", 
      "writeAdvancingMnemonic", "writeAtEndOfPagePhrase", "writeNotAtEndOfPagePhrase", 
      "atEndPhrase", "notAtEndPhrase", "invalidKeyPhrase", "notInvalidKeyPhrase", 
      "onOverflowPhrase", "notOnOverflowPhrase", "onSizeErrorPhrase", "notOnSizeErrorPhrase", 
      "onExceptionClause", "notOnExceptionClause", "arithmeticExpression", 
      "plusMinus", "multDivs", "multDiv", "powers", "power", "basis", "condition", 
      "andOrCondition", "combinableCondition", "simpleCondition", "classCondition", 
      "conditionNameReference", "conditionNameSubscriptReference", "relationCondition", 
      "relationSignCondition", "relationArithmeticComparison", "relationCombinedComparison", 
      "relationCombinedCondition", "relationalOperator", "abbreviation", 
      "identifier", "tableCall", "functionCall", "referenceModifier", "characterPosition", 
      "length", "subscript_", "argument", "qualifiedDataName", "qualifiedDataNameFormat1", 
      "qualifiedDataNameFormat2", "qualifiedDataNameFormat3", "qualifiedDataNameFormat4", 
      "qualifiedInData", "inData", "inFile", "inMnemonic", "inSection", 
      "inLibrary", "inTable", "alphabetName", "assignmentName", "basisName", 
      "cdName", "className", "computerName", "conditionName", "dataName", 
      "dataDescName", "environmentName", "fileName", "functionName", "indexName", 
      "languageName", "libraryName", "localName", "mnemonicName", "paragraphName", 
      "procedureName", "programName", "recordName", "reportName", "routineName", 
      "screenName", "sectionName", "systemName", "symbolicCharacter", "textName", 
      "cobolWord", "literal", "booleanLiteral", "numericLiteral", "integerLiteral", 
      "cicsDfhRespLiteral", "cicsDfhValueLiteral", "figurativeConstant", 
      "specialRegister", "commentEntry"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "'&'", 
      "'*'", "'**'", "':'", "','", "'*>CE'", "'*>'", "'$'", "'\"'", "", 
      "'.'", "'='", "'*>EXECCICS'", "'*>EXECSQL'", "'*>EXECSQLIMS'", "'<'", 
      "'<='", "'('", "'-'", "'>'", "'>='", "'<>'", "'+'", "'''", "')'", 
      "'/'", "", "'66'", "'77'", "'88'", "", "", "", "", "", "", "", "", 
      "", "", "', '"
    },
    std::vector<std::string>{
      "", "ABORT", "ACCEPT", "ACCESS", "ADD", "ADDRESS", "ADVANCING", "AFTER", 
      "ALIGNED", "ALL", "ALPHABET", "ALPHABETIC", "ALPHABETIC_LOWER", "ALPHABETIC_UPPER", 
      "ALPHANUMERIC", "ALPHANUMERIC_EDITED", "ALSO", "ALTER", "ALTERNATE", 
      "AND", "ANY", "ARE", "AREA", "AREAS", "AS", "ASCENDING", "ASCII", 
      "ASSIGN", "ASSOCIATED_DATA", "ASSOCIATED_DATA_LENGTH", "AT", "ATTRIBUTE", 
      "AUTHOR", "AUTO", "AUTO_SKIP", "BACKGROUND_COLOR", "BACKGROUND_COLOUR", 
      "BASIS", "BEEP", "BEFORE", "BEGINNING", "BELL", "BINARY", "BIT", "BLANK", 
      "BLINK", "BLOCK", "BOUNDS", "BOTTOM", "BY", "BYFUNCTION", "BYTITLE", 
      "CALL", "CANCEL", "CAPABLE", "CCSVERSION", "CD", "CF", "CH", "CHAINING", 
      "CHANGED", "CHANNEL", "CHARACTER", "CHARACTERS", "CLASS", "CLASS_ID", 
      "CLOCK_UNITS", "CLOSE", "CLOSE_DISPOSITION", "COBOL", "CODE", "CODE_SET", 
      "COLLATING", "COL", "COLUMN", "COM_REG", "COMMA", "COMMITMENT", "COMMON", 
      "COMMUNICATION", "COMP", "COMP_1", "COMP_2", "COMP_3", "COMP_4", "COMP_5", 
      "COMPUTATIONAL", "COMPUTATIONAL_1", "COMPUTATIONAL_2", "COMPUTATIONAL_3", 
      "COMPUTATIONAL_4", "COMPUTATIONAL_5", "COMPUTE", "CONFIGURATION", 
      "CONTAINS", "CONTENT", "CONTINUE", "CONTROL", "CONTROL_POINT", "CONTROLS", 
      "CONVENTION", "CONVERTING", "COPY", "CORR", "CORRESPONDING", "COUNT", 
      "CRUNCH", "CURRENCY", "CURSOR", "DATA", "DATA_BASE", "DATE", "DATE_COMPILED", 
      "DATE_WRITTEN", "DAY", "DAY_OF_WEEK", "DBCS", "DE", "DEBUG_CONTENTS", 
      "DEBUG_ITEM", "DEBUG_LINE", "DEBUG_NAME", "DEBUG_SUB_1", "DEBUG_SUB_2", 
      "DEBUG_SUB_3", "DEBUGGING", "DECIMAL_POINT", "DECLARATIVES", "DEFAULT", 
      "DEFAULT_DISPLAY", "DEFINITION", "DELETE", "DELIMITED", "DELIMITER", 
      "DEPENDING", "DESCENDING", "DESTINATION", "DETAIL", "DFHRESP", "DFHVALUE", 
      "DISABLE", "DISK", "DISPLAY", "DISPLAY_1", "DIVIDE", "DIVISION", "DONTCARE", 
      "DOUBLE", "DOWN", "DUPLICATES", "DYNAMIC", "EBCDIC", "EGCS", "EGI", 
      "ELSE", "EMI", "EMPTY_CHECK", "ENABLE", "END", "END_ACCEPT", "END_ADD", 
      "END_CALL", "END_COMPUTE", "END_DELETE", "END_DIVIDE", "END_EVALUATE", 
      "END_IF", "END_MULTIPLY", "END_OF_PAGE", "END_PERFORM", "END_READ", 
      "END_RECEIVE", "END_RETURN", "END_REWRITE", "END_SEARCH", "END_START", 
      "END_STRING", "END_SUBTRACT", "END_UNSTRING", "END_WRITE", "ENDING", 
      "ENTER", "ENTRY", "ENTRY_PROCEDURE", "ENVIRONMENT", "EOP", "EQUAL", 
      "ERASE", "ERROR", "EOL", "EOS", "ESCAPE", "ESI", "EVALUATE", "EVENT", 
      "EVERY", "EXCEPTION", "EXCLUSIVE", "EXHIBIT", "EXIT", "EXPORT", "EXTEND", 
      "EXTENDED", "EXTERNAL", "FALSE", "FD", "FILE", "FILE_CONTROL", "FILLER", 
      "FINAL", "FIRST", "FOOTING", "FOR", "FOREGROUND_COLOR", "FOREGROUND_COLOUR", 
      "FROM", "FULL", "FUNCTION", "FUNCTIONNAME", "FUNCTION_POINTER", "GENERATE", 
      "GOBACK", "GIVING", "GLOBAL", "GO", "GREATER", "GRID", "GROUP", "HEADING", 
      "HIGHLIGHT", "HIGH_VALUE", "HIGH_VALUES", "I_O", "I_O_CONTROL", "ID", 
      "IDENTIFICATION", "IF", "IMPLICIT", "IMPORT", "IN", "INDEX", "INDEXED", 
      "INDICATE", "INITIAL", "INITIALIZE", "INITIATE", "INPUT", "INPUT_OUTPUT", 
      "INSPECT", "INSTALLATION", "INTEGER", "INTO", "INVALID", "INVOKE", 
      "IS", "JUST", "JUSTIFIED", "KANJI", "KEPT", "KEY", "KEYBOARD", "LABEL", 
      "LANGUAGE", "LAST", "LB", "LD", "LEADING", "LEFT", "LEFTLINE", "LENGTH", 
      "LENGTH_CHECK", "LESS", "LIBACCESS", "LIBPARAMETER", "LIBRARY", "LIMIT", 
      "LIMITS", "LINAGE", "LINAGE_COUNTER", "LINE", "LINES", "LINE_COUNTER", 
      "LINKAGE", "LIST", "LOCAL", "LOCAL_STORAGE", "LOCK", "LONG_DATE", 
      "LONG_TIME", "LOWER", "LOWLIGHT", "LOW_VALUE", "LOW_VALUES", "MEMORY", 
      "MERGE", "MESSAGE", "MMDDYYYY", "MODE", "MODULES", "MORE_LABELS", 
      "MOVE", "MULTIPLE", "MULTIPLY", "NAMED", "NATIONAL", "NATIONAL_EDITED", 
      "NATIVE", "NEGATIVE", "NETWORK", "NEXT", "NO", "NO_ECHO", "NOT", "NULL_", 
      "NULLS", "NUMBER", "NUMERIC", "NUMERIC_DATE", "NUMERIC_EDITED", "NUMERIC_TIME", 
      "OBJECT_COMPUTER", "OCCURS", "ODT", "OF", "OFF", "OMITTED", "ON", 
      "OPEN", "OPTIONAL", "OR", "ORDER", "ORDERLY", "ORGANIZATION", "OTHER", 
      "OUTPUT", "OVERFLOW", "OVERLINE", "OWN", "PACKED_DECIMAL", "PADDING", 
      "PAGE", "PAGE_COUNTER", "PASSWORD", "PERFORM", "PF", "PH", "PIC", 
      "PICTURE", "PLUS", "POINTER", "POSITION", "POSITIVE", "PORT", "PRINTER", 
      "PRINTING", "PRIVATE", "PROCEDURE", "PROCEDURE_POINTER", "PROCEDURES", 
      "PROCEED", "PROCESS", "PROGRAM", "PROGRAM_ID", "PROGRAM_LIBRARY", 
      "PROMPT", "PURGE", "QUEUE", "QUOTE", "QUOTES", "RANDOM", "READER", 
      "REMOTE", "RD", "REAL", "READ", "RECEIVE", "RECEIVED", "RECORD", "RECORDING", 
      "RECORDS", "RECURSIVE", "REDEFINES", "REEL", "REF", "REFERENCE", "REFERENCES", 
      "RELATIVE", "RELEASE", "REMAINDER", "REMARKS", "REMOVAL", "REMOVE", 
      "RENAMES", "REPLACE", "REPLACING", "REPORT", "REPORTING", "REPORTS", 
      "REQUIRED", "RERUN", "RESERVE", "REVERSE_VIDEO", "RESET", "RETURN", 
      "RETURN_CODE", "RETURNING", "REVERSED", "REWIND", "REWRITE", "RF", 
      "RH", "RIGHT", "ROUNDED", "RUN", "SAME", "SAVE", "SCREEN", "SD", "SEARCH", 
      "SECTION", "SECURE", "SECURITY", "SEGMENT", "SEGMENT_LIMIT", "SELECT", 
      "SEND", "SENTENCE", "SEPARATE", "SEQUENCE", "SEQUENTIAL", "SET", "SHARED", 
      "SHAREDBYALL", "SHAREDBYRUNUNIT", "SHARING", "SHIFT_IN", "SHIFT_OUT", 
      "SHORT_DATE", "SIGN", "SIZE", "SORT", "SORT_CONTROL", "SORT_CORE_SIZE", 
      "SORT_FILE_SIZE", "SORT_MERGE", "SORT_MESSAGE", "SORT_MODE_SIZE", 
      "SORT_RETURN", "SOURCE", "SOURCE_COMPUTER", "SPACE", "SPACES", "SPECIAL_NAMES", 
      "STANDARD", "STANDARD_1", "STANDARD_2", "START", "STATUS", "STOP", 
      "STRING", "SUB_QUEUE_1", "SUB_QUEUE_2", "SUB_QUEUE_3", "SUBTRACT", 
      "SUM", "SUPPRESS", "SYMBOL", "SYMBOLIC", "SYNC", "SYNCHRONIZED", "TABLE", 
      "TALLY", "TALLYING", "TASK", "TAPE", "TERMINAL", "TERMINATE", "TEST", 
      "TEXT", "THAN", "THEN", "THREAD", "THREAD_LOCAL", "THROUGH", "THRU", 
      "TIME", "TIMER", "TIMES", "TITLE", "TO", "TODAYS_DATE", "TODAYS_NAME", 
      "TOP", "TRAILING", "TRUE", "TRUNCATED", "TYPE", "TYPEDEF", "UNDERLINE", 
      "UNIT", "UNSTRING", "UNTIL", "UP", "UPON", "USAGE", "USE", "USING", 
      "VALUE", "VALUES", "VARYING", "VIRTUAL", "WAIT", "WHEN", "WHEN_COMPILED", 
      "WITH", "WORDS", "WORKING_STORAGE", "WRITE", "YEAR", "YYYYMMDD", "YYYYDDD", 
      "ZERO", "ZERO_FILL", "ZEROS", "ZEROES", "AMPCHAR", "ASTERISKCHAR", 
      "DOUBLEASTERISKCHAR", "COLONCHAR", "COMMACHAR", "COMMENTENTRYTAG", 
      "COMMENTTAG", "DOLLARCHAR", "DOUBLEQUOTE", "DOT_FS", "DOT", "EQUALCHAR", 
      "EXECCICSTAG", "EXECSQLTAG", "EXECSQLIMSTAG", "LESSTHANCHAR", "LESSTHANOREQUAL", 
      "LPARENCHAR", "MINUSCHAR", "MORETHANCHAR", "MORETHANOREQUAL", "NOTEQUALCHAR", 
      "PLUSCHAR", "SINGLEQUOTE", "RPARENCHAR", "SLASHCHAR", "NONNUMERICLITERAL", 
      "LEVEL_NUMBER_66", "LEVEL_NUMBER_77", "LEVEL_NUMBER_88", "INTEGERLITERAL", 
      "NUMERICLITERAL", "IDENTIFIER", "NEWLINE", "EXECCICSLINE", "EXECSQLIMSLINE", 
      "EXECSQLLINE", "COMMENTENTRYLINE", "COMMENTLINE", "WS", "SEPARATOR"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,565,6288,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,
  	7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,
  	7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,
  	7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,
  	7,122,2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,
  	7,128,2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,
  	7,134,2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,
  	7,140,2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,
  	7,146,2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,
  	7,152,2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,
  	7,158,2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
  	7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,
  	7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,
  	7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,
  	7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,
  	7,188,2,189,7,189,2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,
  	7,194,2,195,7,195,2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,
  	7,200,2,201,7,201,2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,
  	7,206,2,207,7,207,2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,
  	7,212,2,213,7,213,2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,
  	7,218,2,219,7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,
  	7,224,2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,
  	7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,2,236,
  	7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,7,241,2,242,
  	7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,2,247,7,247,2,248,
  	7,248,2,249,7,249,2,250,7,250,2,251,7,251,2,252,7,252,2,253,7,253,2,254,
  	7,254,2,255,7,255,2,256,7,256,2,257,7,257,2,258,7,258,2,259,7,259,2,260,
  	7,260,2,261,7,261,2,262,7,262,2,263,7,263,2,264,7,264,2,265,7,265,2,266,
  	7,266,2,267,7,267,2,268,7,268,2,269,7,269,2,270,7,270,2,271,7,271,2,272,
  	7,272,2,273,7,273,2,274,7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,
  	7,278,2,279,7,279,2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,
  	7,284,2,285,7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,
  	7,290,2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,2,296,
  	7,296,2,297,7,297,2,298,7,298,2,299,7,299,2,300,7,300,2,301,7,301,2,302,
  	7,302,2,303,7,303,2,304,7,304,2,305,7,305,2,306,7,306,2,307,7,307,2,308,
  	7,308,2,309,7,309,2,310,7,310,2,311,7,311,2,312,7,312,2,313,7,313,2,314,
  	7,314,2,315,7,315,2,316,7,316,2,317,7,317,2,318,7,318,2,319,7,319,2,320,
  	7,320,2,321,7,321,2,322,7,322,2,323,7,323,2,324,7,324,2,325,7,325,2,326,
  	7,326,2,327,7,327,2,328,7,328,2,329,7,329,2,330,7,330,2,331,7,331,2,332,
  	7,332,2,333,7,333,2,334,7,334,2,335,7,335,2,336,7,336,2,337,7,337,2,338,
  	7,338,2,339,7,339,2,340,7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,
  	7,344,2,345,7,345,2,346,7,346,2,347,7,347,2,348,7,348,2,349,7,349,2,350,
  	7,350,2,351,7,351,2,352,7,352,2,353,7,353,2,354,7,354,2,355,7,355,2,356,
  	7,356,2,357,7,357,2,358,7,358,2,359,7,359,2,360,7,360,2,361,7,361,2,362,
  	7,362,2,363,7,363,2,364,7,364,2,365,7,365,2,366,7,366,2,367,7,367,2,368,
  	7,368,2,369,7,369,2,370,7,370,2,371,7,371,2,372,7,372,2,373,7,373,2,374,
  	7,374,2,375,7,375,2,376,7,376,2,377,7,377,2,378,7,378,2,379,7,379,2,380,
  	7,380,2,381,7,381,2,382,7,382,2,383,7,383,2,384,7,384,2,385,7,385,2,386,
  	7,386,2,387,7,387,2,388,7,388,2,389,7,389,2,390,7,390,2,391,7,391,2,392,
  	7,392,2,393,7,393,2,394,7,394,2,395,7,395,2,396,7,396,2,397,7,397,2,398,
  	7,398,2,399,7,399,2,400,7,400,2,401,7,401,2,402,7,402,2,403,7,403,2,404,
  	7,404,2,405,7,405,2,406,7,406,2,407,7,407,2,408,7,408,2,409,7,409,2,410,
  	7,410,2,411,7,411,2,412,7,412,2,413,7,413,2,414,7,414,2,415,7,415,2,416,
  	7,416,2,417,7,417,2,418,7,418,2,419,7,419,2,420,7,420,2,421,7,421,2,422,
  	7,422,2,423,7,423,2,424,7,424,2,425,7,425,2,426,7,426,2,427,7,427,2,428,
  	7,428,2,429,7,429,2,430,7,430,2,431,7,431,2,432,7,432,2,433,7,433,2,434,
  	7,434,2,435,7,435,2,436,7,436,2,437,7,437,2,438,7,438,2,439,7,439,2,440,
  	7,440,2,441,7,441,2,442,7,442,2,443,7,443,2,444,7,444,2,445,7,445,2,446,
  	7,446,2,447,7,447,2,448,7,448,2,449,7,449,2,450,7,450,2,451,7,451,2,452,
  	7,452,2,453,7,453,2,454,7,454,2,455,7,455,2,456,7,456,2,457,7,457,2,458,
  	7,458,2,459,7,459,2,460,7,460,2,461,7,461,2,462,7,462,2,463,7,463,2,464,
  	7,464,2,465,7,465,2,466,7,466,2,467,7,467,2,468,7,468,2,469,7,469,2,470,
  	7,470,2,471,7,471,2,472,7,472,2,473,7,473,2,474,7,474,2,475,7,475,2,476,
  	7,476,2,477,7,477,2,478,7,478,2,479,7,479,2,480,7,480,2,481,7,481,2,482,
  	7,482,2,483,7,483,2,484,7,484,2,485,7,485,2,486,7,486,2,487,7,487,2,488,
  	7,488,2,489,7,489,2,490,7,490,2,491,7,491,2,492,7,492,2,493,7,493,2,494,
  	7,494,2,495,7,495,2,496,7,496,2,497,7,497,2,498,7,498,2,499,7,499,2,500,
  	7,500,2,501,7,501,2,502,7,502,2,503,7,503,2,504,7,504,2,505,7,505,2,506,
  	7,506,2,507,7,507,2,508,7,508,2,509,7,509,2,510,7,510,2,511,7,511,2,512,
  	7,512,2,513,7,513,2,514,7,514,2,515,7,515,2,516,7,516,2,517,7,517,2,518,
  	7,518,2,519,7,519,2,520,7,520,2,521,7,521,2,522,7,522,2,523,7,523,2,524,
  	7,524,2,525,7,525,2,526,7,526,2,527,7,527,2,528,7,528,2,529,7,529,2,530,
  	7,530,2,531,7,531,2,532,7,532,2,533,7,533,2,534,7,534,2,535,7,535,2,536,
  	7,536,2,537,7,537,2,538,7,538,2,539,7,539,2,540,7,540,2,541,7,541,2,542,
  	7,542,2,543,7,543,2,544,7,544,2,545,7,545,2,546,7,546,2,547,7,547,2,548,
  	7,548,2,549,7,549,2,550,7,550,2,551,7,551,2,552,7,552,2,553,7,553,2,554,
  	7,554,2,555,7,555,2,556,7,556,2,557,7,557,2,558,7,558,2,559,7,559,2,560,
  	7,560,2,561,7,561,2,562,7,562,2,563,7,563,2,564,7,564,2,565,7,565,2,566,
  	7,566,2,567,7,567,2,568,7,568,2,569,7,569,2,570,7,570,2,571,7,571,2,572,
  	7,572,2,573,7,573,2,574,7,574,2,575,7,575,2,576,7,576,2,577,7,577,2,578,
  	7,578,2,579,7,579,2,580,7,580,2,581,7,581,2,582,7,582,2,583,7,583,2,584,
  	7,584,2,585,7,585,2,586,7,586,2,587,7,587,2,588,7,588,2,589,7,589,2,590,
  	7,590,2,591,7,591,2,592,7,592,2,593,7,593,2,594,7,594,1,0,1,0,1,0,1,1,
  	4,1,1195,8,1,11,1,12,1,1196,1,2,1,2,3,2,1201,8,2,1,2,3,2,1204,8,2,1,2,
  	3,2,1207,8,2,1,2,5,2,1210,8,2,10,2,12,2,1213,9,2,1,2,3,2,1216,8,2,1,3,
  	1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,5,4,1228,8,4,10,4,12,4,1231,9,4,1,
  	5,1,5,1,5,1,5,1,5,1,5,3,5,1239,8,5,1,6,1,6,1,6,1,6,3,6,1245,8,6,1,6,1,
  	6,3,6,1249,8,6,3,6,1251,8,6,1,6,3,6,1254,8,6,1,6,3,6,1257,8,6,1,7,1,7,
  	1,7,3,7,1262,8,7,1,8,1,8,1,8,3,8,1267,8,8,1,9,1,9,1,9,3,9,1272,8,9,1,
  	10,1,10,1,10,3,10,1277,8,10,1,11,1,11,1,11,3,11,1282,8,11,1,12,1,12,1,
  	12,3,12,1287,8,12,1,13,1,13,1,13,1,13,5,13,1293,8,13,10,13,12,13,1296,
  	9,13,1,14,1,14,1,14,3,14,1301,8,14,1,15,1,15,1,15,1,15,5,15,1307,8,15,
  	10,15,12,15,1310,9,15,1,16,1,16,1,16,3,16,1315,8,16,1,17,1,17,1,17,1,
  	17,3,17,1321,8,17,1,17,1,17,3,17,1325,8,17,1,17,1,17,1,18,1,18,1,18,1,
  	18,5,18,1333,8,18,10,18,12,18,1336,9,18,1,18,1,18,1,19,1,19,1,19,1,19,
  	1,19,3,19,1345,8,19,1,20,1,20,3,20,1349,8,20,1,20,1,20,3,20,1353,8,20,
  	1,20,3,20,1356,8,20,1,21,1,21,3,21,1360,8,21,1,21,3,21,1363,8,21,1,21,
  	1,21,3,21,1367,8,21,1,21,3,21,1370,8,21,1,22,3,22,1373,8,22,1,22,3,22,
  	1376,8,22,1,22,1,22,3,22,1380,8,22,1,22,4,22,1383,8,22,11,22,12,22,1384,
  	1,22,3,22,1388,8,22,1,22,3,22,1391,8,22,1,23,3,23,1394,8,23,1,23,1,23,
  	3,23,1398,8,23,1,23,1,23,1,24,3,24,1403,8,24,1,24,1,24,3,24,1407,8,24,
  	1,24,1,24,1,25,1,25,3,25,1413,8,25,1,25,1,25,1,26,1,26,1,26,1,26,1,27,
  	1,27,1,27,4,27,1424,8,27,11,27,12,27,1425,1,27,1,27,3,27,1430,8,27,1,
  	28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,1443,8,28,1,
  	29,1,29,3,29,1447,8,29,1,30,1,30,1,30,1,30,3,30,1453,8,30,1,30,3,30,1456,
  	8,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,4,30,1465,8,30,11,30,12,30,1466,
  	3,30,1469,8,30,1,31,1,31,1,31,4,31,1474,8,31,11,31,12,31,1475,3,31,1478,
  	8,31,1,32,1,32,1,32,1,33,1,33,4,33,1485,8,33,11,33,12,33,1486,1,34,1,
  	34,1,34,3,34,1492,8,34,1,34,1,34,3,34,1496,8,34,1,34,1,34,1,34,3,34,1501,
  	8,34,1,35,1,35,1,35,3,35,1506,8,35,1,35,1,35,1,36,1,36,1,36,3,36,1513,
  	8,36,1,36,3,36,1516,8,36,1,36,3,36,1519,8,36,1,36,4,36,1522,8,36,11,36,
  	12,36,1523,1,37,1,37,1,37,3,37,1529,8,37,1,38,1,38,3,38,1533,8,38,1,39,
  	1,39,3,39,1537,8,39,1,40,1,40,3,40,1541,8,40,1,40,3,40,1544,8,40,1,40,
  	1,40,3,40,1548,8,40,1,40,1,40,1,40,3,40,1553,8,40,1,41,1,41,3,41,1557,
  	8,41,1,41,1,41,1,42,1,42,3,42,1563,8,42,1,42,1,42,3,42,1567,8,42,3,42,
  	1569,8,42,1,42,3,42,1572,8,42,1,42,1,42,3,42,1576,8,42,1,43,1,43,1,43,
  	3,43,1581,8,43,3,43,1583,8,43,1,43,1,43,1,43,3,43,1588,8,43,3,43,1590,
  	8,43,1,44,1,44,3,44,1594,8,44,1,44,1,44,3,44,1598,8,44,1,44,3,44,1601,
  	8,44,1,45,1,45,3,45,1605,8,45,1,45,3,45,1608,8,45,1,45,1,45,1,45,3,45,
  	1613,8,45,1,45,3,45,1616,8,45,1,45,3,45,1619,8,45,1,45,1,45,3,45,1623,
  	8,45,1,45,3,45,1626,8,45,1,45,1,45,1,45,3,45,1631,8,45,1,45,3,45,1634,
  	8,45,1,45,3,45,1637,8,45,3,45,1639,8,45,1,46,1,46,3,46,1643,8,46,1,46,
  	1,46,1,47,1,47,3,47,1649,8,47,1,47,3,47,1652,8,47,1,47,3,47,1655,8,47,
  	1,47,1,47,3,47,1659,8,47,1,48,1,48,3,48,1663,8,48,1,48,3,48,1666,8,48,
  	1,48,3,48,1669,8,48,1,48,4,48,1672,8,48,11,48,12,48,1673,1,48,1,48,3,
  	48,1678,8,48,1,49,4,49,1681,8,49,11,49,12,49,1682,1,49,3,49,1686,8,49,
  	1,49,4,49,1689,8,49,11,49,12,49,1690,1,50,1,50,1,50,1,50,5,50,1697,8,
  	50,10,50,12,50,1700,9,50,1,51,1,51,3,51,1704,8,51,1,52,1,52,3,52,1708,
  	8,52,1,52,5,52,1711,8,52,10,52,12,52,1714,9,52,1,52,1,52,1,53,1,53,5,
  	53,1720,8,53,10,53,12,53,1723,9,53,1,54,1,54,3,54,1727,8,54,1,54,1,54,
  	1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,3,55,1742,8,55,
  	1,56,1,56,3,56,1746,8,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,
  	1,56,1,56,3,56,1759,8,56,1,57,1,57,1,57,3,57,1764,8,57,1,57,3,57,1767,
  	8,57,1,57,3,57,1770,8,57,1,58,1,58,3,58,1774,8,58,3,58,1776,8,58,1,58,
  	1,58,1,58,1,58,1,58,3,58,1783,8,58,1,58,1,58,1,59,1,59,3,59,1789,8,59,
  	1,59,3,59,1792,8,59,1,59,1,59,3,59,1796,8,59,1,60,1,60,1,60,3,60,1801,
  	8,60,1,60,1,60,1,60,3,60,1806,8,60,1,61,1,61,3,61,1810,8,61,1,61,3,61,
  	1813,8,61,1,61,1,61,1,62,1,62,3,62,1819,8,62,1,62,3,62,1822,8,62,1,62,
  	1,62,3,62,1826,8,62,1,62,3,62,1829,8,62,1,62,3,62,1832,8,62,1,63,1,63,
  	1,63,3,63,1837,8,63,1,63,3,63,1840,8,63,1,63,1,63,3,63,1844,8,63,1,63,
  	3,63,1847,8,63,1,63,3,63,1850,8,63,1,64,1,64,3,64,1854,8,64,1,64,1,64,
  	1,65,3,65,1859,8,65,1,65,1,65,3,65,1863,8,65,1,65,1,65,3,65,1867,8,65,
  	1,66,1,66,3,66,1871,8,66,1,66,3,66,1874,8,66,1,66,1,66,1,67,1,67,1,67,
  	1,67,1,67,3,67,1883,8,67,1,67,5,67,1886,8,67,10,67,12,67,1889,9,67,1,
  	67,3,67,1892,8,67,1,68,1,68,1,68,1,68,3,68,1898,8,68,1,69,1,69,1,69,1,
  	69,3,69,1904,8,69,3,69,1906,8,69,1,69,1,69,1,69,1,69,3,69,1912,8,69,1,
  	70,1,70,1,70,1,71,3,71,1918,8,71,1,71,3,71,1921,8,71,1,71,1,71,1,71,1,
  	71,1,72,1,72,3,72,1929,8,72,1,73,1,73,3,73,1933,8,73,1,73,3,73,1936,8,
  	73,1,73,3,73,1939,8,73,1,73,4,73,1942,8,73,11,73,12,73,1943,1,74,1,74,
  	1,74,3,74,1949,8,74,1,74,3,74,1952,8,74,1,74,4,74,1955,8,74,11,74,12,
  	74,1956,1,75,1,75,1,75,3,75,1962,8,75,1,76,1,76,1,76,3,76,1967,8,76,1,
  	76,1,76,1,77,1,77,1,77,1,77,5,77,1975,8,77,10,77,12,77,1978,9,77,1,78,
  	1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,3,78,1989,8,78,1,79,1,79,1,79,
  	1,79,5,79,1995,8,79,10,79,12,79,1998,9,79,1,80,1,80,1,80,3,80,2003,8,
  	80,1,80,5,80,2006,8,80,10,80,12,80,2009,9,80,1,80,1,80,5,80,2013,8,80,
  	10,80,12,80,2016,9,80,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,
  	81,1,81,3,81,2029,8,81,1,82,3,82,2032,8,82,1,82,1,82,1,83,3,83,2037,8,
  	83,1,83,1,83,1,84,1,84,3,84,2043,8,84,1,84,1,84,3,84,2047,8,84,1,84,3,
  	84,2050,8,84,1,85,1,85,1,85,1,86,1,86,1,86,1,86,3,86,2059,8,86,1,87,3,
  	87,2062,8,87,1,87,1,87,3,87,2066,8,87,1,88,3,88,2069,8,88,1,88,1,88,3,
  	88,2073,8,88,1,88,3,88,2076,8,88,1,88,3,88,2079,8,88,1,88,1,88,3,88,2083,
  	8,88,1,88,3,88,2086,8,88,3,88,2088,8,88,1,88,1,88,3,88,2092,8,88,1,88,
  	3,88,2095,8,88,1,89,3,89,2098,8,89,1,89,1,89,1,89,3,89,2103,8,89,1,90,
  	1,90,1,90,1,91,1,91,1,91,3,91,2111,8,91,1,91,1,91,3,91,2115,8,91,3,91,
  	2117,8,91,1,91,1,91,1,91,4,91,2122,8,91,11,91,12,91,2123,3,91,2126,8,
  	91,1,92,1,92,1,92,4,92,2131,8,92,11,92,12,92,2132,1,93,1,93,3,93,2137,
  	8,93,1,93,1,93,3,93,2141,8,93,1,94,1,94,1,94,3,94,2146,8,94,1,94,1,94,
  	3,94,2150,8,94,3,94,2152,8,94,1,94,4,94,2155,8,94,11,94,12,94,2156,1,
  	95,1,95,3,95,2161,8,95,1,95,1,95,3,95,2165,8,95,1,95,3,95,2168,8,95,1,
  	95,5,95,2171,8,95,10,95,12,95,2174,9,95,1,96,1,96,1,96,3,96,2179,8,96,
  	1,97,3,97,2182,8,97,1,97,1,97,3,97,2186,8,97,1,97,1,97,3,97,2190,8,97,
  	1,98,3,98,2193,8,98,1,98,3,98,2196,8,98,1,98,1,98,1,98,3,98,2201,8,98,
  	1,99,3,99,2204,8,99,1,99,3,99,2207,8,99,1,99,1,99,1,99,3,99,2212,8,99,
  	1,100,1,100,3,100,2216,8,100,1,100,3,100,2219,8,100,1,100,1,100,1,101,
  	1,101,1,102,1,102,3,102,2227,8,102,1,102,1,102,1,103,1,103,3,103,2233,
  	8,103,1,103,1,103,3,103,2237,8,103,3,103,2239,8,103,1,103,4,103,2242,
  	8,103,11,103,12,103,2243,1,104,1,104,1,104,1,104,5,104,2250,8,104,10,
  	104,12,104,2253,9,104,1,105,1,105,1,105,1,105,1,105,1,106,1,106,1,106,
  	1,106,5,106,2264,8,106,10,106,12,106,2267,9,106,1,107,1,107,1,107,1,107,
  	5,107,2273,8,107,10,107,12,107,2276,9,107,1,108,1,108,1,108,1,108,1,108,
  	5,108,2283,8,108,10,108,12,108,2286,9,108,1,109,1,109,1,109,3,109,2291,
  	8,109,1,110,1,110,1,110,3,110,2296,8,110,1,110,3,110,2299,8,110,1,110,
  	1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,3,110,2311,8,110,
  	1,110,5,110,2314,8,110,10,110,12,110,2317,9,110,1,110,1,110,1,111,1,111,
  	1,111,3,111,2324,8,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,5,111,
  	2333,8,111,10,111,12,111,2336,9,111,1,111,1,111,1,112,1,112,1,112,3,112,
  	2343,8,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,3,112,2353,
  	8,112,1,112,5,112,2356,8,112,10,112,12,112,2359,9,112,1,112,1,112,1,113,
  	1,113,1,113,3,113,2366,8,113,1,113,1,113,1,114,1,114,1,114,1,114,1,114,
  	1,114,1,114,1,114,4,114,2378,8,114,11,114,12,114,2379,3,114,2382,8,114,
  	1,115,1,115,1,115,3,115,2387,8,115,1,115,1,115,1,116,1,116,1,116,3,116,
  	2394,8,116,1,116,1,116,1,117,3,117,2399,8,117,1,117,1,117,3,117,2403,
  	8,117,1,117,1,117,1,118,1,118,1,118,3,118,2410,8,118,1,118,1,118,1,119,
  	1,119,1,119,3,119,2417,8,119,1,119,1,119,1,120,1,120,1,120,3,120,2424,
  	8,120,1,120,1,120,1,121,3,121,2429,8,121,1,121,1,121,3,121,2433,8,121,
  	1,121,1,121,1,122,3,122,2438,8,122,1,122,1,122,3,122,2442,8,122,1,122,
  	1,122,1,123,3,123,2447,8,123,1,123,1,123,3,123,2451,8,123,1,123,1,123,
  	1,124,3,124,2456,8,124,1,124,1,124,3,124,2460,8,124,1,124,1,124,1,125,
  	3,125,2465,8,125,1,125,1,125,3,125,2469,8,125,1,125,1,125,1,126,1,126,
  	1,126,3,126,2476,8,126,1,126,1,126,1,127,1,127,1,127,1,127,1,127,1,127,
  	1,127,3,127,2487,8,127,1,127,5,127,2490,8,127,10,127,12,127,2493,9,127,
  	1,128,1,128,1,128,1,128,5,128,2499,8,128,10,128,12,128,2502,9,128,1,129,
  	1,129,1,129,3,129,2507,8,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,
  	1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,3,129,
  	2527,8,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,
  	5,129,2539,8,129,10,129,12,129,2542,9,129,1,129,1,129,1,130,1,130,1,130,
  	1,131,1,131,1,132,1,132,1,133,1,133,1,133,1,134,1,134,1,135,1,135,1,136,
  	1,136,1,137,1,137,1,138,1,138,3,138,2566,8,138,1,138,1,138,3,138,2570,
  	8,138,1,139,1,139,3,139,2574,8,139,1,139,3,139,2577,8,139,1,139,3,139,
  	2580,8,139,1,139,1,139,3,139,2584,8,139,1,140,1,140,3,140,2588,8,140,
  	1,140,3,140,2591,8,140,1,140,3,140,2594,8,140,1,140,1,140,3,140,2598,
  	8,140,1,141,1,141,3,141,2602,8,141,1,141,1,141,3,141,2606,8,141,1,142,
  	1,142,3,142,2610,8,142,1,142,1,142,3,142,2614,8,142,1,143,1,143,3,143,
  	2618,8,143,1,143,1,143,1,144,1,144,3,144,2624,8,144,1,144,1,144,1,145,
  	1,145,3,145,2630,8,145,1,145,1,145,1,146,1,146,1,146,3,146,2637,8,146,
  	1,146,3,146,2640,8,146,1,147,1,147,1,147,1,148,1,148,1,148,1,149,1,149,
  	3,149,2650,8,149,1,149,1,149,1,150,1,150,3,150,2656,8,150,1,150,1,150,
  	1,151,1,151,3,151,2662,8,151,1,152,1,152,3,152,2666,8,152,3,152,2668,
  	8,152,1,152,1,152,1,152,3,152,2673,8,152,3,152,2675,8,152,1,153,1,153,
  	1,154,1,154,1,155,1,155,1,156,1,156,3,156,2685,8,156,1,156,3,156,2688,
  	8,156,1,156,1,156,3,156,2692,8,156,1,156,3,156,2695,8,156,1,157,1,157,
  	1,157,3,157,2700,8,157,1,158,1,158,1,159,1,159,1,160,1,160,1,160,1,160,
  	5,160,2710,8,160,10,160,12,160,2713,9,160,1,161,1,161,4,161,2717,8,161,
  	11,161,12,161,2718,1,162,1,162,1,162,3,162,2724,8,162,1,162,1,162,3,162,
  	2728,8,162,1,162,3,162,2731,8,162,1,162,3,162,2734,8,162,1,162,3,162,
  	2737,8,162,3,162,2739,8,162,1,162,1,162,1,163,3,163,2744,8,163,1,163,
  	1,163,1,164,1,164,1,164,3,164,2751,8,164,1,164,1,164,3,164,2755,8,164,
  	3,164,2757,8,164,1,164,1,164,3,164,2761,8,164,1,165,1,165,1,165,1,166,
  	1,166,1,166,1,166,1,167,1,167,1,167,1,167,1,168,1,168,1,168,1,169,1,169,
  	1,169,3,169,2780,8,169,1,170,1,170,1,170,3,170,2785,8,170,1,170,3,170,
  	2788,8,170,1,170,1,170,3,170,2792,8,170,1,170,1,170,1,171,1,171,3,171,
  	2798,8,171,1,171,3,171,2801,8,171,1,171,1,171,1,171,1,172,1,172,3,172,
  	2808,8,172,1,172,1,172,1,172,1,172,1,172,1,172,1,172,1,172,1,172,1,172,
  	1,172,3,172,2821,8,172,1,172,5,172,2824,8,172,10,172,12,172,2827,9,172,
  	1,172,1,172,1,173,1,173,3,173,2833,8,173,1,173,1,173,1,174,1,174,3,174,
  	2839,8,174,1,174,3,174,2842,8,174,1,174,1,174,1,175,1,175,3,175,2848,
  	8,175,1,176,1,176,3,176,2852,8,176,1,177,3,177,2855,8,177,1,177,3,177,
  	2858,8,177,1,177,3,177,2861,8,177,1,177,1,177,3,177,2865,8,177,1,178,
  	1,178,3,178,2869,8,178,1,178,1,178,3,178,2873,8,178,1,179,1,179,1,179,
  	1,180,1,180,1,180,3,180,2881,8,180,1,180,1,180,1,180,3,180,2886,8,180,
  	1,181,1,181,1,181,1,182,1,182,1,182,1,183,1,183,3,183,2896,8,183,1,183,
  	1,183,1,184,1,184,3,184,2902,8,184,1,184,1,184,3,184,2906,8,184,1,185,
  	1,185,3,185,2910,8,185,1,185,1,185,1,185,3,185,2915,8,185,1,186,1,186,
  	3,186,2919,8,186,1,186,1,186,1,187,1,187,1,187,3,187,2926,8,187,1,187,
  	5,187,2929,8,187,10,187,12,187,2932,9,187,1,187,1,187,1,187,3,187,2937,
  	8,187,1,187,5,187,2940,8,187,10,187,12,187,2943,9,187,3,187,2945,8,187,
  	1,188,1,188,3,188,2949,8,188,1,188,1,188,1,188,1,188,1,188,1,188,1,188,
  	3,188,2958,8,188,1,189,1,189,1,189,3,189,2963,8,189,1,190,1,190,1,190,
  	3,190,2968,8,190,1,191,1,191,1,191,3,191,2973,8,191,1,191,1,191,3,191,
  	2977,8,191,1,192,1,192,1,193,1,193,1,193,3,193,2984,8,193,1,193,1,193,
  	3,193,2988,8,193,1,194,1,194,3,194,2992,8,194,3,194,2994,8,194,1,194,
  	1,194,1,195,1,195,1,195,3,195,3001,8,195,1,196,1,196,1,196,3,196,3006,
  	8,196,1,197,1,197,3,197,3010,8,197,1,197,1,197,1,198,1,198,1,198,1,198,
  	5,198,3018,8,198,10,198,12,198,3021,9,198,1,199,1,199,3,199,3025,8,199,
  	1,200,1,200,1,200,1,200,3,200,3031,8,200,1,200,3,200,3034,8,200,1,201,
  	1,201,1,201,1,201,3,201,3040,8,201,1,201,3,201,3043,8,201,1,201,1,201,
  	5,201,3047,8,201,10,201,12,201,3050,9,201,1,202,1,202,1,202,3,202,3055,
  	8,202,1,202,3,202,3058,8,202,1,203,1,203,3,203,3062,8,203,1,203,1,203,
  	3,203,3066,8,203,1,203,3,203,3069,8,203,1,203,3,203,3072,8,203,1,203,
  	3,203,3075,8,203,1,204,1,204,1,204,1,204,1,205,1,205,3,205,3083,8,205,
  	1,205,1,205,1,206,1,206,3,206,3089,8,206,1,206,1,206,1,207,1,207,1,207,
  	3,207,3096,8,207,1,208,1,208,1,208,3,208,3101,8,208,1,208,3,208,3104,
  	8,208,1,208,3,208,3107,8,208,1,208,3,208,3110,8,208,1,209,1,209,1,209,
  	1,210,1,210,1,210,1,211,1,211,4,211,3120,8,211,11,211,12,211,3121,1,212,
  	1,212,3,212,3126,8,212,1,213,1,213,4,213,3130,8,213,11,213,12,213,3131,
  	1,214,1,214,3,214,3136,8,214,1,215,3,215,3139,8,215,1,215,1,215,1,216,
  	3,216,3144,8,216,1,216,1,216,1,217,1,217,1,217,1,217,3,217,3152,8,217,
  	1,218,1,218,1,218,3,218,3157,8,218,1,218,1,218,1,218,1,218,1,218,1,218,
  	1,218,1,218,1,218,1,218,1,218,1,218,1,218,1,218,1,218,1,218,1,218,1,218,
  	1,218,1,218,1,218,5,218,3180,8,218,10,218,12,218,3183,9,218,1,218,1,218,
  	1,219,1,219,1,219,1,219,1,219,1,220,1,220,1,220,1,220,1,220,1,221,4,221,
  	3198,8,221,11,221,12,221,3199,1,221,3,221,3203,8,221,1,222,1,222,1,223,
  	1,223,3,223,3209,8,223,1,223,1,223,1,224,1,224,1,225,3,225,3216,8,225,
  	1,225,1,225,1,225,3,225,3221,8,225,1,226,3,226,3224,8,226,1,226,1,226,
  	1,227,1,227,1,228,1,228,3,228,3232,8,228,1,229,1,229,1,229,3,229,3237,
  	8,229,1,229,3,229,3240,8,229,1,229,1,229,3,229,3244,8,229,1,229,3,229,
  	3247,8,229,1,229,5,229,3250,8,229,10,229,12,229,3253,9,229,1,229,1,229,
  	3,229,3257,8,229,1,229,3,229,3260,8,229,1,229,4,229,3263,8,229,11,229,
  	12,229,3264,3,229,3267,8,229,1,230,1,230,1,230,1,231,1,231,3,231,3274,
  	8,231,1,231,3,231,3277,8,231,1,231,4,231,3280,8,231,11,231,12,231,3281,
  	1,232,1,232,3,232,3286,8,232,1,232,1,232,1,233,4,233,3291,8,233,11,233,
  	12,233,3292,1,233,3,233,3296,8,233,4,233,3298,8,233,11,233,12,233,3299,
  	1,234,1,234,1,234,1,234,1,234,1,234,1,234,1,234,1,234,1,234,1,234,1,234,
  	1,234,1,234,1,234,1,234,3,234,3318,8,234,1,235,1,235,1,235,1,235,1,236,
  	3,236,3325,8,236,1,236,3,236,3328,8,236,1,236,1,236,1,237,1,237,1,237,
  	1,238,1,238,1,238,1,239,1,239,1,239,1,239,3,239,3342,8,239,1,240,1,240,
  	3,240,3346,8,240,3,240,3348,8,240,1,240,1,240,1,240,3,240,3353,8,240,
  	3,240,3355,8,240,1,241,1,241,3,241,3359,8,241,1,242,3,242,3362,8,242,
  	1,242,1,242,1,243,1,243,3,243,3368,8,243,1,243,1,243,1,244,3,244,3373,
  	8,244,1,244,1,244,1,245,1,245,3,245,3379,8,245,3,245,3381,8,245,1,245,
  	1,245,3,245,3385,8,245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,
  	1,245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,
  	1,245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,3,245,3416,8,245,
  	1,246,1,246,1,246,3,246,3421,8,246,1,246,1,246,3,246,3425,8,246,1,247,
  	1,247,3,247,3429,8,247,1,247,1,247,3,247,3433,8,247,3,247,3435,8,247,
  	1,247,1,247,3,247,3439,8,247,1,247,5,247,3442,8,247,10,247,12,247,3445,
  	9,247,1,248,1,248,3,248,3449,8,248,1,249,1,249,3,249,3453,8,249,1,250,
  	1,250,1,250,1,251,3,251,3459,8,251,1,251,1,251,1,251,1,252,1,252,1,252,
  	3,252,3467,8,252,1,252,3,252,3470,8,252,1,252,1,252,3,252,3474,8,252,
  	1,252,1,252,1,253,1,253,4,253,3480,8,253,11,253,12,253,3481,1,254,1,254,
  	1,254,1,255,1,255,3,255,3489,8,255,1,256,3,256,3492,8,256,1,256,3,256,
  	3495,8,256,1,256,4,256,3498,8,256,11,256,12,256,3499,1,257,3,257,3503,
  	8,257,1,257,1,257,3,257,3507,8,257,1,257,3,257,3510,8,257,1,258,3,258,
  	3513,8,258,1,258,1,258,4,258,3517,8,258,11,258,12,258,3518,1,259,1,259,
  	1,259,3,259,3524,8,259,1,260,1,260,1,260,4,260,3529,8,260,11,260,12,260,
  	3530,1,260,1,260,1,260,1,260,1,261,1,261,1,261,1,261,1,261,1,261,1,262,
  	1,262,1,262,3,262,3546,8,262,1,263,1,263,5,263,3550,8,263,10,263,12,263,
  	3553,9,263,1,264,1,264,1,264,1,264,1,265,5,265,3560,8,265,10,265,12,265,
  	3563,9,265,1,265,5,265,3566,8,265,10,265,12,265,3569,9,265,1,266,1,266,
  	1,266,1,266,5,266,3575,8,266,10,266,12,266,3578,9,266,3,266,3580,8,266,
  	1,267,5,267,3583,8,267,10,267,12,267,3586,9,267,1,267,1,267,1,268,1,268,
  	1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,
  	1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,
  	1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,
  	1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,3,268,
  	3639,8,268,1,269,1,269,1,269,1,269,1,269,1,269,3,269,3647,8,269,1,269,
  	3,269,3650,8,269,1,269,3,269,3653,8,269,1,269,3,269,3656,8,269,1,270,
  	1,270,1,270,3,270,3661,8,270,1,270,1,270,3,270,3665,8,270,1,270,1,270,
  	1,270,1,270,1,270,3,270,3672,8,270,1,270,1,270,1,270,1,270,3,270,3678,
  	8,270,1,271,1,271,1,271,1,272,1,272,1,272,1,272,1,273,3,273,3688,8,273,
  	1,273,1,273,1,274,1,274,1,274,1,274,3,274,3696,8,274,1,274,3,274,3699,
  	8,274,1,274,3,274,3702,8,274,1,274,3,274,3705,8,274,1,275,4,275,3708,
  	8,275,11,275,12,275,3709,1,275,1,275,4,275,3714,8,275,11,275,12,275,3715,
  	1,276,4,276,3719,8,276,11,276,12,276,3720,1,276,1,276,4,276,3725,8,276,
  	11,276,12,276,3726,3,276,3729,8,276,1,276,1,276,4,276,3733,8,276,11,276,
  	12,276,3734,1,277,1,277,1,277,1,277,1,277,1,278,1,278,3,278,3744,8,278,
  	1,279,1,279,3,279,3748,8,279,1,280,1,280,3,280,3752,8,280,1,281,1,281,
  	3,281,3756,8,281,1,282,1,282,3,282,3760,8,282,1,282,1,282,1,283,1,283,
  	4,283,3766,8,283,11,283,12,283,3767,1,284,1,284,1,284,1,284,3,284,3774,
  	8,284,1,284,1,284,1,285,1,285,1,285,3,285,3781,8,285,1,285,3,285,3784,
  	8,285,1,285,3,285,3787,8,285,1,285,3,285,3790,8,285,1,285,3,285,3793,
  	8,285,1,285,3,285,3796,8,285,1,285,3,285,3799,8,285,1,286,1,286,4,286,
  	3803,8,286,11,286,12,286,3804,1,287,1,287,1,287,3,287,3810,8,287,1,288,
  	3,288,3813,8,288,1,288,3,288,3816,8,288,1,288,4,288,3819,8,288,11,288,
  	12,288,3820,1,289,1,289,1,289,1,289,3,289,3827,8,289,1,289,1,289,1,289,
  	3,289,3832,8,289,1,289,3,289,3835,8,289,1,290,3,290,3838,8,290,1,290,
  	1,290,4,290,3842,8,290,11,290,12,290,3843,1,291,1,291,1,291,1,291,3,291,
  	3850,8,291,3,291,3852,8,291,1,291,1,291,3,291,3856,8,291,1,292,3,292,
  	3859,8,292,1,292,1,292,4,292,3863,8,292,11,292,12,292,3864,1,293,1,293,
  	1,293,1,293,3,293,3871,8,293,3,293,3873,8,293,1,293,1,293,1,293,3,293,
  	3878,8,293,1,294,1,294,1,294,1,295,1,295,4,295,3885,8,295,11,295,12,295,
  	3886,1,296,1,296,1,296,1,296,1,296,3,296,3894,8,296,1,297,1,297,4,297,
  	3898,8,297,11,297,12,297,3899,1,298,1,298,1,298,1,298,3,298,3906,8,298,
  	1,299,1,299,3,299,3910,8,299,1,299,3,299,3913,8,299,1,299,3,299,3916,
  	8,299,1,299,1,299,1,299,3,299,3921,8,299,3,299,3923,8,299,1,300,3,300,
  	3926,8,300,1,300,1,300,1,300,3,300,3931,8,300,1,301,3,301,3934,8,301,
  	1,301,1,301,1,301,1,301,3,301,3940,8,301,1,301,1,301,4,301,3944,8,301,
  	11,301,12,301,3945,3,301,3948,8,301,1,302,1,302,1,302,3,302,3953,8,302,
  	1,303,1,303,3,303,3957,8,303,1,303,1,303,1,304,1,304,1,304,3,304,3964,
  	8,304,1,305,1,305,3,305,3968,8,305,1,305,1,305,3,305,3972,8,305,1,306,
  	1,306,4,306,3976,8,306,11,306,12,306,3977,1,306,1,306,1,306,3,306,3983,
  	8,306,1,306,3,306,3986,8,306,1,306,3,306,3989,8,306,1,307,1,307,3,307,
  	3993,8,307,1,308,1,308,1,309,1,309,1,309,3,309,4000,8,309,1,309,3,309,
  	4003,8,309,1,309,3,309,4006,8,309,1,309,3,309,4009,8,309,1,310,1,310,
  	1,310,3,310,4014,8,310,1,310,1,310,1,310,3,310,4019,8,310,1,310,1,310,
  	3,310,4023,8,310,1,310,1,310,1,310,3,310,4028,8,310,1,311,1,311,4,311,
  	4032,8,311,11,311,12,311,4033,1,311,3,311,4037,8,311,1,311,3,311,4040,
  	8,311,1,311,3,311,4043,8,311,1,312,1,312,3,312,4047,8,312,1,313,1,313,
  	1,313,3,313,4052,8,313,1,314,1,314,1,314,3,314,4057,8,314,1,315,3,315,
  	4060,8,315,1,315,1,315,1,315,1,316,1,316,1,316,3,316,4068,8,316,1,316,
  	1,316,1,316,3,316,4073,8,316,1,316,3,316,4076,8,316,1,316,3,316,4079,
  	8,316,1,316,3,316,4082,8,316,1,316,3,316,4085,8,316,1,317,1,317,4,317,
  	4089,8,317,11,317,12,317,4090,1,318,1,318,1,318,3,318,4096,8,318,1,318,
  	3,318,4099,8,318,1,319,1,319,1,319,3,319,4104,8,319,1,319,3,319,4107,
  	8,319,1,320,1,320,4,320,4111,8,320,11,320,12,320,4112,1,321,1,321,3,321,
  	4117,8,321,1,322,1,322,3,322,4121,8,322,1,323,1,323,1,323,1,324,1,324,
  	1,324,3,324,4129,8,324,1,324,1,324,1,324,3,324,4134,8,324,1,324,1,324,
  	3,324,4138,8,324,1,324,1,324,1,324,3,324,4143,8,324,1,325,1,325,1,325,
  	1,325,4,325,4149,8,325,11,325,12,325,4150,3,325,4153,8,325,1,326,1,326,
  	1,326,5,326,4158,8,326,10,326,12,326,4161,9,326,1,326,4,326,4164,8,326,
  	11,326,12,326,4165,1,326,3,326,4169,8,326,1,326,3,326,4172,8,326,1,327,
  	1,327,1,327,1,327,3,327,4178,8,327,1,328,1,328,1,328,1,329,4,329,4184,
  	8,329,11,329,12,329,4185,1,329,5,329,4189,8,329,10,329,12,329,4192,9,
  	329,1,330,1,330,1,330,5,330,4197,8,330,10,330,12,330,4200,9,330,1,331,
  	1,331,3,331,4204,8,331,1,331,1,331,3,331,4208,8,331,1,331,1,331,3,331,
  	4212,8,331,1,332,1,332,1,332,1,333,1,333,1,333,1,334,1,334,1,334,5,334,
  	4223,8,334,10,334,12,334,4226,9,334,1,335,1,335,1,335,3,335,4231,8,335,
  	1,336,4,336,4234,8,336,11,336,12,336,4235,1,337,4,337,4239,8,337,11,337,
  	12,337,4240,1,338,4,338,4244,8,338,11,338,12,338,4245,1,339,1,339,3,339,
  	4250,8,339,1,339,3,339,4253,8,339,1,339,4,339,4256,8,339,11,339,12,339,
  	4257,1,340,1,340,3,340,4262,8,340,1,341,1,341,3,341,4266,8,341,1,342,
  	1,342,1,342,1,343,1,343,1,344,1,344,3,344,4275,8,344,1,344,1,344,3,344,
  	4279,8,344,1,345,1,345,1,346,1,346,4,346,4285,8,346,11,346,12,346,4286,
  	1,346,1,346,3,346,4291,8,346,1,346,3,346,4294,8,346,3,346,4296,8,346,
  	1,347,1,347,1,347,1,347,3,347,4302,8,347,1,347,3,347,4305,8,347,1,348,
  	3,348,4308,8,348,1,348,1,348,1,348,5,348,4313,8,348,10,348,12,348,4316,
  	9,348,3,348,4318,8,348,1,349,1,349,1,349,1,349,5,349,4324,8,349,10,349,
  	12,349,4327,9,349,3,349,4329,8,349,1,350,1,350,4,350,4333,8,350,11,350,
  	12,350,4334,1,350,3,350,4338,8,350,1,351,1,351,4,351,4342,8,351,11,351,
  	12,351,4343,1,352,1,352,3,352,4348,8,352,1,352,1,352,1,352,3,352,4353,
  	8,352,1,353,1,353,4,353,4357,8,353,11,353,12,353,4358,1,354,1,354,1,354,
  	1,354,1,354,1,354,3,354,4367,8,354,1,355,1,355,4,355,4371,8,355,11,355,
  	12,355,4372,1,356,1,356,1,356,4,356,4378,8,356,11,356,12,356,4379,1,357,
  	1,357,4,357,4384,8,357,11,357,12,357,4385,1,357,4,357,4389,8,357,11,357,
  	12,357,4390,1,358,1,358,1,358,3,358,4396,8,358,1,358,1,358,5,358,4400,
  	8,358,10,358,12,358,4403,9,358,1,359,1,359,1,359,1,359,4,359,4409,8,359,
  	11,359,12,359,4410,1,360,1,360,5,360,4415,8,360,10,360,12,360,4418,9,
  	360,1,361,1,361,1,361,5,361,4423,8,361,10,361,12,361,4426,9,361,1,362,
  	1,362,4,362,4430,8,362,11,362,12,362,4431,1,363,1,363,4,363,4436,8,363,
  	11,363,12,363,4437,1,364,1,364,3,364,4442,8,364,1,364,5,364,4445,8,364,
  	10,364,12,364,4448,9,364,1,365,1,365,3,365,4452,8,365,1,365,1,365,5,365,
  	4456,8,365,10,365,12,365,4459,9,365,1,366,1,366,1,366,3,366,4464,8,366,
  	1,367,1,367,1,367,3,367,4469,8,367,1,368,1,368,3,368,4473,8,368,1,368,
  	1,368,3,368,4477,8,368,1,369,1,369,1,369,4,369,4482,8,369,11,369,12,369,
  	4483,1,369,3,369,4487,8,369,1,369,5,369,4490,8,369,10,369,12,369,4493,
  	9,369,1,369,3,369,4496,8,369,1,369,5,369,4499,8,369,10,369,12,369,4502,
  	9,369,1,370,3,370,4505,8,370,1,370,1,370,3,370,4509,8,370,1,370,4,370,
  	4512,8,370,11,370,12,370,4513,1,371,3,371,4517,8,371,1,371,1,371,3,371,
  	4521,8,371,1,371,4,371,4524,8,371,11,371,12,371,4525,1,371,3,371,4529,
  	8,371,1,371,3,371,4532,8,371,1,372,3,372,4535,8,372,1,372,1,372,1,372,
  	1,372,1,373,3,373,4542,8,373,1,373,1,373,3,373,4546,8,373,1,373,1,373,
  	1,374,1,374,4,374,4552,8,374,11,374,12,374,4553,1,375,1,375,1,375,3,375,
  	4559,8,375,1,375,1,375,3,375,4563,8,375,1,376,1,376,1,376,1,377,1,377,
  	4,377,4570,8,377,11,377,12,377,4571,1,378,1,378,1,378,1,378,1,378,1,378,
  	1,378,1,378,1,378,1,378,3,378,4584,8,378,1,379,1,379,3,379,4588,8,379,
  	1,379,1,379,3,379,4592,8,379,1,380,1,380,1,380,4,380,4597,8,380,11,380,
  	12,380,4598,1,381,1,381,3,381,4603,8,381,1,382,1,382,1,382,1,382,4,382,
  	4609,8,382,11,382,12,382,4610,1,383,1,383,1,384,1,384,1,384,3,384,4618,
  	8,384,1,384,1,384,1,384,3,384,4623,8,384,1,384,3,384,4626,8,384,1,384,
  	3,384,4629,8,384,1,384,3,384,4632,8,384,1,385,4,385,4635,8,385,11,385,
  	12,385,4636,1,386,1,386,3,386,4641,8,386,1,387,1,387,1,387,4,387,4646,
  	8,387,11,387,12,387,4647,1,388,1,388,3,388,4652,8,388,1,389,1,389,3,389,
  	4656,8,389,1,390,1,390,1,390,1,390,1,390,4,390,4663,8,390,11,390,12,390,
  	4664,1,391,1,391,4,391,4669,8,391,11,391,12,391,4670,1,392,1,392,1,392,
  	3,392,4676,8,392,1,392,1,392,3,392,4680,8,392,1,393,1,393,4,393,4684,
  	8,393,11,393,12,393,4685,1,394,1,394,3,394,4690,8,394,1,394,1,394,3,394,
  	4694,8,394,1,395,1,395,4,395,4698,8,395,11,395,12,395,4699,1,396,1,396,
  	4,396,4704,8,396,11,396,12,396,4705,1,397,1,397,1,397,3,397,4711,8,397,
  	1,398,3,398,4714,8,398,1,398,5,398,4717,8,398,10,398,12,398,4720,9,398,
  	1,398,1,398,1,399,1,399,1,399,3,399,4727,8,399,1,399,3,399,4730,8,399,
  	1,400,1,400,1,400,3,400,4735,8,400,1,401,1,401,3,401,4739,8,401,1,401,
  	1,401,1,402,3,402,4744,8,402,1,402,1,402,1,402,1,403,1,403,1,403,1,403,
  	1,403,3,403,4754,8,403,3,403,4756,8,403,1,404,1,404,1,404,5,404,4761,
  	8,404,10,404,12,404,4764,9,404,1,405,1,405,3,405,4768,8,405,1,405,1,405,
  	1,405,1,405,1,406,1,406,1,406,1,407,1,407,1,407,1,407,3,407,4781,8,407,
  	1,408,1,408,1,408,1,408,3,408,4787,8,408,1,409,3,409,4790,8,409,1,409,
  	1,409,1,409,1,410,1,410,4,410,4797,8,410,11,410,12,410,4798,1,411,1,411,
  	1,411,3,411,4804,8,411,1,411,3,411,4807,8,411,1,411,3,411,4810,8,411,
  	1,411,3,411,4813,8,411,1,411,3,411,4816,8,411,1,411,3,411,4819,8,411,
  	1,411,3,411,4822,8,411,1,411,3,411,4825,8,411,1,411,3,411,4828,8,411,
  	1,411,3,411,4831,8,411,1,412,1,412,1,412,1,413,3,413,4837,8,413,1,413,
  	1,413,1,413,3,413,4842,8,413,1,414,1,414,3,414,4846,8,414,1,414,1,414,
  	1,415,1,415,1,415,3,415,4853,8,415,1,415,3,415,4856,8,415,1,415,3,415,
  	4859,8,415,1,415,3,415,4862,8,415,1,416,1,416,1,416,1,416,1,416,1,416,
  	1,416,1,416,5,416,4872,8,416,10,416,12,416,4875,9,416,1,417,1,417,1,417,
  	1,417,1,417,1,417,3,417,4883,8,417,1,418,1,418,1,418,3,418,4888,8,418,
  	1,418,1,418,3,418,4892,8,418,1,418,3,418,4895,8,418,1,419,1,419,1,419,
  	5,419,4900,8,419,10,419,12,419,4903,9,419,1,420,1,420,1,420,5,420,4908,
  	8,420,10,420,12,420,4911,9,420,1,421,1,421,3,421,4915,8,421,1,421,1,421,
  	3,421,4919,8,421,1,422,3,422,4922,8,422,1,422,1,422,1,422,1,423,1,423,
  	3,423,4929,8,423,1,423,1,423,1,424,1,424,3,424,4935,8,424,1,424,1,424,
  	3,424,4939,8,424,1,425,1,425,3,425,4943,8,425,1,425,1,425,1,426,1,426,
  	1,426,1,426,3,426,4951,8,426,1,427,1,427,1,427,3,427,4956,8,427,1,427,
  	3,427,4959,8,427,1,427,1,427,3,427,4963,8,427,1,427,3,427,4966,8,427,
  	1,428,1,428,1,428,1,429,1,429,1,429,3,429,4974,8,429,1,429,3,429,4977,
  	8,429,1,429,3,429,4980,8,429,1,429,3,429,4983,8,429,1,430,1,430,1,430,
  	1,431,1,431,3,431,4990,8,431,1,431,1,431,3,431,4994,8,431,1,431,3,431,
  	4997,8,431,1,431,4,431,5000,8,431,11,431,12,431,5001,1,431,3,431,5005,
  	8,431,1,432,1,432,1,432,1,433,1,433,1,433,1,433,1,433,5,433,5015,8,433,
  	10,433,12,433,5018,9,433,3,433,5020,8,433,1,434,1,434,1,434,3,434,5025,
  	8,434,1,434,3,434,5028,8,434,1,434,3,434,5031,8,434,1,435,1,435,3,435,
  	5035,8,435,1,435,3,435,5038,8,435,1,435,3,435,5041,8,435,1,435,3,435,
  	5044,8,435,1,435,3,435,5047,8,435,1,436,1,436,1,436,1,436,1,437,1,437,
  	1,437,1,438,1,438,1,438,1,438,1,438,3,438,5061,8,438,1,439,1,439,3,439,
  	5065,8,439,1,440,1,440,3,440,5069,8,440,1,440,1,440,1,440,3,440,5074,
  	8,440,1,441,1,441,1,442,1,442,3,442,5080,8,442,1,442,3,442,5083,8,442,
  	1,443,1,443,1,444,1,444,4,444,5089,8,444,11,444,12,444,5090,1,444,3,444,
  	5094,8,444,1,445,4,445,5097,8,445,11,445,12,445,5098,1,445,1,445,4,445,
  	5103,8,445,11,445,12,445,5104,1,446,4,446,5108,8,446,11,446,12,446,5109,
  	1,446,1,446,1,446,1,446,3,446,5116,8,446,1,446,1,446,1,447,1,447,1,448,
  	1,448,1,448,1,448,1,448,3,448,5127,8,448,1,448,1,448,3,448,5131,8,448,
  	1,449,1,449,3,449,5135,8,449,1,450,1,450,1,450,4,450,5140,8,450,11,450,
  	12,450,5141,1,450,3,450,5145,8,450,1,450,3,450,5148,8,450,1,450,3,450,
  	5151,8,450,1,450,5,450,5154,8,450,10,450,12,450,5157,9,450,1,450,3,450,
  	5160,8,450,1,450,5,450,5163,8,450,10,450,12,450,5166,9,450,1,451,3,451,
  	5169,8,451,1,451,1,451,3,451,5173,8,451,1,451,4,451,5176,8,451,11,451,
  	12,451,5177,1,452,3,452,5181,8,452,1,452,1,452,3,452,5185,8,452,1,452,
  	3,452,5188,8,452,1,453,3,453,5191,8,453,1,453,1,453,3,453,5195,8,453,
  	1,453,4,453,5198,8,453,11,453,12,453,5199,1,453,3,453,5203,8,453,1,453,
  	3,453,5206,8,453,1,454,3,454,5209,8,454,1,454,1,454,1,454,1,454,1,455,
  	3,455,5216,8,455,1,455,1,455,3,455,5220,8,455,1,455,1,455,1,456,1,456,
  	1,456,3,456,5227,8,456,1,456,1,456,3,456,5231,8,456,1,457,1,457,1,457,
  	1,458,1,458,4,458,5238,8,458,11,458,12,458,5239,1,459,1,459,1,459,3,459,
  	5245,8,459,1,459,1,459,3,459,5249,8,459,1,460,1,460,1,460,1,461,1,461,
  	4,461,5256,8,461,11,461,12,461,5257,1,462,1,462,1,462,1,462,1,462,1,462,
  	1,462,1,462,1,462,1,462,3,462,5270,8,462,1,463,1,463,1,463,3,463,5275,
  	8,463,1,463,3,463,5278,8,463,1,463,3,463,5281,8,463,1,463,3,463,5284,
  	8,463,1,464,1,464,3,464,5288,8,464,1,464,1,464,3,464,5292,8,464,1,464,
  	1,464,1,464,3,464,5297,8,464,1,464,1,464,1,464,1,464,3,464,5303,8,464,
  	1,464,1,464,1,464,1,464,3,464,5309,8,464,1,464,1,464,1,464,3,464,5314,
  	8,464,1,464,3,464,5317,8,464,1,464,1,464,1,465,1,465,1,465,3,465,5324,
  	8,465,1,466,1,466,4,466,5328,8,466,11,466,12,466,5329,1,466,1,466,3,466,
  	5334,8,466,1,466,3,466,5337,8,466,1,466,3,466,5340,8,466,1,466,3,466,
  	5343,8,466,1,467,4,467,5346,8,467,11,467,12,467,5347,1,467,1,467,3,467,
  	5352,8,467,1,468,1,468,3,468,5356,8,468,1,469,1,469,3,469,5360,8,469,
  	1,469,1,469,1,469,3,469,5365,8,469,1,470,1,470,1,470,3,470,5370,8,470,
  	1,471,1,471,1,471,1,472,3,472,5376,8,472,1,472,1,472,1,472,1,473,1,473,
  	1,473,1,473,3,473,5385,8,473,1,473,3,473,5388,8,473,1,473,3,473,5391,
  	8,473,1,473,3,473,5394,8,473,1,474,4,474,5397,8,474,11,474,12,474,5398,
  	1,474,1,474,4,474,5403,8,474,11,474,12,474,5404,1,475,4,475,5408,8,475,
  	11,475,12,475,5409,1,475,1,475,1,475,1,475,4,475,5416,8,475,11,475,12,
  	475,5417,1,476,1,476,1,476,1,476,1,476,1,477,1,477,3,477,5427,8,477,1,
  	478,1,478,3,478,5431,8,478,1,479,1,479,3,479,5435,8,479,1,480,1,480,3,
  	480,5439,8,480,1,481,1,481,3,481,5443,8,481,1,482,1,482,1,482,1,483,1,
  	483,1,483,1,483,3,483,5452,8,483,1,483,3,483,5455,8,483,1,483,3,483,5458,
  	8,483,1,483,3,483,5461,8,483,1,483,3,483,5464,8,483,1,484,1,484,1,484,
  	5,484,5469,8,484,10,484,12,484,5472,9,484,3,484,5474,8,484,1,485,1,485,
  	3,485,5478,8,485,1,485,3,485,5481,8,485,1,485,1,485,3,485,5485,8,485,
  	1,486,1,486,3,486,5489,8,486,1,486,1,486,3,486,5493,8,486,1,487,1,487,
  	4,487,5497,8,487,11,487,12,487,5498,1,488,1,488,3,488,5503,8,488,1,488,
  	3,488,5506,8,488,1,489,1,489,3,489,5510,8,489,1,489,1,489,1,490,1,490,
  	3,490,5516,8,490,1,490,1,490,1,491,3,491,5521,8,491,1,491,1,491,1,491,
  	1,492,1,492,3,492,5528,8,492,1,492,1,492,1,493,1,493,1,493,3,493,5535,
  	8,493,1,494,3,494,5538,8,494,1,494,1,494,3,494,5542,8,494,1,494,1,494,
  	1,494,3,494,5547,8,494,1,494,1,494,1,495,1,495,1,495,1,495,1,495,4,495,
  	5556,8,495,11,495,12,495,5557,3,495,5560,8,495,1,496,3,496,5563,8,496,
  	1,496,1,496,3,496,5567,8,496,1,496,4,496,5570,8,496,11,496,12,496,5571,
  	1,497,1,497,1,497,1,497,3,497,5578,8,497,1,497,3,497,5581,8,497,1,497,
  	1,497,1,497,3,497,5586,8,497,1,498,1,498,1,498,3,498,5591,8,498,1,498,
  	3,498,5594,8,498,1,498,3,498,5597,8,498,1,498,3,498,5600,8,498,1,498,
  	3,498,5603,8,498,1,498,3,498,5606,8,498,1,498,3,498,5609,8,498,1,499,
  	1,499,1,499,3,499,5614,8,499,1,500,1,500,3,500,5618,8,500,1,500,1,500,
  	1,500,3,500,5623,8,500,1,501,1,501,1,502,1,502,3,502,5629,8,502,1,502,
  	3,502,5632,8,502,1,503,1,503,1,504,3,504,5637,8,504,1,504,1,504,5,504,
  	5641,8,504,10,504,12,504,5644,9,504,1,505,1,505,3,505,5648,8,505,1,505,
  	1,505,5,505,5652,8,505,10,505,12,505,5655,9,505,1,506,3,506,5658,8,506,
  	1,506,1,506,5,506,5662,8,506,10,506,12,506,5665,9,506,1,507,1,507,3,507,
  	5669,8,507,1,507,1,507,5,507,5673,8,507,10,507,12,507,5676,9,507,1,508,
  	1,508,3,508,5680,8,508,1,508,5,508,5683,8,508,10,508,12,508,5686,9,508,
  	1,509,1,509,1,509,3,509,5691,8,509,1,509,5,509,5694,8,509,10,509,12,509,
  	5697,9,509,1,510,3,510,5700,8,510,1,510,1,510,5,510,5704,8,510,10,510,
  	12,510,5707,9,510,1,511,1,511,3,511,5711,8,511,1,511,1,511,5,511,5715,
  	8,511,10,511,12,511,5718,9,511,1,512,3,512,5721,8,512,1,512,1,512,1,512,
  	5,512,5726,8,512,10,512,12,512,5729,9,512,1,513,1,513,3,513,5733,8,513,
  	1,513,1,513,1,513,5,513,5738,8,513,10,513,12,513,5741,9,513,1,514,3,514,
  	5744,8,514,1,514,1,514,5,514,5748,8,514,10,514,12,514,5751,9,514,1,515,
  	1,515,3,515,5755,8,515,1,515,1,515,5,515,5759,8,515,10,515,12,515,5762,
  	9,515,1,516,1,516,5,516,5766,8,516,10,516,12,516,5769,9,516,1,517,1,517,
  	1,517,1,518,1,518,5,518,5776,8,518,10,518,12,518,5779,9,518,1,519,1,519,
  	1,519,1,520,3,520,5785,8,520,1,520,1,520,5,520,5789,8,520,10,520,12,520,
  	5792,9,520,1,521,1,521,1,521,1,522,1,522,1,522,1,522,1,522,1,522,3,522,
  	5803,8,522,1,523,1,523,5,523,5807,8,523,10,523,12,523,5810,9,523,1,524,
  	1,524,1,524,4,524,5815,8,524,11,524,12,524,5816,3,524,5819,8,524,1,525,
  	3,525,5822,8,525,1,525,1,525,1,526,1,526,1,526,1,526,1,526,1,526,1,526,
  	3,526,5833,8,526,1,527,1,527,3,527,5837,8,527,1,527,3,527,5840,8,527,
  	1,527,1,527,1,527,1,527,1,527,1,527,1,527,3,527,5849,8,527,1,528,1,528,
  	5,528,5853,8,528,10,528,12,528,5856,9,528,1,528,3,528,5859,8,528,1,528,
  	5,528,5862,8,528,10,528,12,528,5865,9,528,1,528,5,528,5868,8,528,10,528,
  	12,528,5871,9,528,3,528,5873,8,528,1,529,1,529,1,529,3,529,5878,8,529,
  	1,529,5,529,5881,8,529,10,529,12,529,5884,9,529,1,529,1,529,1,530,1,530,
  	1,530,3,530,5891,8,530,1,531,1,531,3,531,5895,8,531,1,531,3,531,5898,
  	8,531,1,531,1,531,1,532,1,532,1,532,1,532,1,533,1,533,1,533,1,533,1,533,
  	1,533,1,534,1,534,1,534,4,534,5915,8,534,11,534,12,534,5916,1,535,3,535,
  	5920,8,535,1,535,3,535,5923,8,535,1,535,1,535,3,535,5927,8,535,1,535,
  	1,535,1,535,3,535,5932,8,535,1,535,1,535,1,535,3,535,5937,8,535,1,535,
  	3,535,5940,8,535,1,535,1,535,1,535,3,535,5945,8,535,1,535,1,535,1,535,
  	3,535,5950,8,535,1,535,1,535,1,535,3,535,5955,8,535,1,535,1,535,1,535,
  	3,535,5960,8,535,1,535,3,535,5963,8,535,1,536,3,536,5966,8,536,1,536,
  	3,536,5969,8,536,1,536,1,536,1,536,1,536,1,536,1,536,3,536,5977,8,536,
  	1,537,1,537,1,537,1,537,3,537,5983,8,537,1,538,1,538,1,538,1,538,3,538,
  	5989,8,538,1,538,5,538,5992,8,538,10,538,12,538,5995,9,538,1,538,1,538,
  	5,538,5999,8,538,10,538,12,538,6002,9,538,1,538,3,538,6005,8,538,1,539,
  	1,539,1,539,1,539,1,539,3,539,6012,8,539,1,539,5,539,6015,8,539,10,539,
  	12,539,6018,9,539,1,539,1,539,5,539,6022,8,539,10,539,12,539,6025,9,539,
  	1,539,3,539,6028,8,539,1,540,1,540,1,540,1,540,3,540,6034,8,540,1,540,
  	1,540,1,541,1,541,1,542,1,542,1,543,1,543,1,543,1,543,3,543,6046,8,543,
  	1,543,1,543,3,543,6050,8,543,1,543,3,543,6053,8,543,1,544,1,544,1,544,
  	1,544,3,544,6059,8,544,1,544,1,544,3,544,6063,8,544,1,544,3,544,6066,
  	8,544,1,545,1,545,1,545,1,545,3,545,6072,8,545,1,546,1,546,3,546,6076,
  	8,546,1,546,4,546,6079,8,546,11,546,12,546,6080,1,546,3,546,6084,8,546,
  	1,546,3,546,6087,8,546,1,547,1,547,1,547,1,548,1,548,1,548,1,549,1,549,
  	1,549,1,550,1,550,3,550,6100,8,550,1,551,1,551,1,551,1,552,1,552,1,552,
  	1,553,1,553,1,553,1,554,1,554,1,554,1,555,1,555,1,555,1,556,1,556,1,556,
  	1,557,1,557,1,558,1,558,1,559,1,559,1,560,1,560,1,561,1,561,1,562,1,562,
  	1,563,1,563,1,564,1,564,1,565,1,565,1,565,3,565,6139,8,565,1,566,1,566,
  	1,567,1,567,1,568,1,568,1,568,1,568,1,568,1,568,3,568,6151,8,568,1,569,
  	1,569,1,570,1,570,1,571,1,571,1,572,1,572,1,573,1,573,1,574,1,574,3,574,
  	6165,8,574,1,575,1,575,3,575,6169,8,575,1,575,3,575,6172,8,575,1,576,
  	1,576,3,576,6176,8,576,1,577,1,577,1,578,1,578,1,579,1,579,1,580,1,580,
  	1,581,1,581,3,581,6188,8,581,1,582,1,582,1,583,1,583,1,584,1,584,1,585,
  	1,585,1,586,1,586,1,586,1,586,1,586,1,586,3,586,6204,8,586,1,587,1,587,
  	1,588,1,588,1,588,3,588,6211,8,588,1,589,1,589,1,590,1,590,1,590,1,590,
  	3,590,6219,8,590,1,590,1,590,1,591,1,591,1,591,1,591,3,591,6227,8,591,
  	1,591,1,591,1,592,1,592,1,592,1,592,1,592,1,592,1,592,1,592,1,592,1,592,
  	1,592,1,592,1,592,1,592,1,592,3,592,6246,8,592,1,593,1,593,1,593,1,593,
  	1,593,1,593,1,593,1,593,1,593,1,593,1,593,1,593,1,593,1,593,1,593,3,593,
  	6263,8,593,1,593,1,593,1,593,1,593,1,593,1,593,1,593,1,593,1,593,1,593,
  	1,593,1,593,1,593,1,593,1,593,1,593,3,593,6281,8,593,1,594,4,594,6284,
  	8,594,11,594,12,594,6285,1,594,0,0,595,0,2,4,6,8,10,12,14,16,18,20,22,
  	24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,
  	70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,
  	112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,
  	148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,
  	184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,
  	220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,
  	256,258,260,262,264,266,268,270,272,274,276,278,280,282,284,286,288,290,
  	292,294,296,298,300,302,304,306,308,310,312,314,316,318,320,322,324,326,
  	328,330,332,334,336,338,340,342,344,346,348,350,352,354,356,358,360,362,
  	364,366,368,370,372,374,376,378,380,382,384,386,388,390,392,394,396,398,
  	400,402,404,406,408,410,412,414,416,418,420,422,424,426,428,430,432,434,
  	436,438,440,442,444,446,448,450,452,454,456,458,460,462,464,466,468,470,
  	472,474,476,478,480,482,484,486,488,490,492,494,496,498,500,502,504,506,
  	508,510,512,514,516,518,520,522,524,526,528,530,532,534,536,538,540,542,
  	544,546,548,550,552,554,556,558,560,562,564,566,568,570,572,574,576,578,
  	580,582,584,586,588,590,592,594,596,598,600,602,604,606,608,610,612,614,
  	616,618,620,622,624,626,628,630,632,634,636,638,640,642,644,646,648,650,
  	652,654,656,658,660,662,664,666,668,670,672,674,676,678,680,682,684,686,
  	688,690,692,694,696,698,700,702,704,706,708,710,712,714,716,718,720,722,
  	724,726,728,730,732,734,736,738,740,742,744,746,748,750,752,754,756,758,
  	760,762,764,766,768,770,772,774,776,778,780,782,784,786,788,790,792,794,
  	796,798,800,802,804,806,808,810,812,814,816,818,820,822,824,826,828,830,
  	832,834,836,838,840,842,844,846,848,850,852,854,856,858,860,862,864,866,
  	868,870,872,874,876,878,880,882,884,886,888,890,892,894,896,898,900,902,
  	904,906,908,910,912,914,916,918,920,922,924,926,928,930,932,934,936,938,
  	940,942,944,946,948,950,952,954,956,958,960,962,964,966,968,970,972,974,
  	976,978,980,982,984,986,988,990,992,994,996,998,1000,1002,1004,1006,1008,
  	1010,1012,1014,1016,1018,1020,1022,1024,1026,1028,1030,1032,1034,1036,
  	1038,1040,1042,1044,1046,1048,1050,1052,1054,1056,1058,1060,1062,1064,
  	1066,1068,1070,1072,1074,1076,1078,1080,1082,1084,1086,1088,1090,1092,
  	1094,1096,1098,1100,1102,1104,1106,1108,1110,1112,1114,1116,1118,1120,
  	1122,1124,1126,1128,1130,1132,1134,1136,1138,1140,1142,1144,1146,1148,
  	1150,1152,1154,1156,1158,1160,1162,1164,1166,1168,1170,1172,1174,1176,
  	1178,1180,1182,1184,1186,1188,0,70,1,0,234,235,5,0,78,78,130,130,243,
  	243,274,274,380,380,3,0,63,63,298,298,515,515,2,0,298,298,515,515,1,0,
  	483,484,2,0,14,14,304,304,2,0,80,80,86,86,2,0,266,266,493,493,2,0,21,
  	21,254,254,1,0,22,23,3,0,241,241,386,386,429,429,4,0,150,150,197,197,
  	369,369,429,429,2,0,382,382,499,499,3,0,377,377,440,440,444,444,2,0,205,
  	205,417,417,2,0,63,63,379,379,1,0,460,462,2,0,279,279,416,416,2,0,38,
  	38,41,41,1,0,189,190,2,0,229,229,290,290,3,0,226,226,268,268,336,336,
  	3,0,348,348,543,543,547,547,1,0,73,74,1,0,213,214,1,0,35,36,1,0,346,347,
  	1,0,142,143,1,0,255,256,1,0,33,34,2,0,311,311,420,420,2,0,156,156,398,
  	398,2,0,216,216,270,270,1,0,279,280,2,0,117,117,137,137,3,0,146,146,355,
  	355,432,433,1,0,50,51,2,0,553,553,555,555,2,0,521,521,523,524,3,0,78,
  	78,284,284,337,337,2,0,250,250,459,459,2,0,25,25,135,135,2,0,95,95,383,
  	384,1,0,468,469,2,0,267,267,411,411,4,0,287,288,317,317,319,319,437,437,
  	2,0,202,202,495,495,2,0,100,100,262,262,2,0,59,59,506,506,2,0,222,222,
  	405,405,1,0,103,104,2,0,1,1,331,331,2,0,186,186,536,536,7,0,11,11,14,
  	15,116,116,152,152,304,305,316,316,318,318,2,0,9,9,266,266,3,0,9,9,210,
  	210,266,266,2,0,7,7,39,39,2,0,258,258,310,310,2,0,295,295,422,422,2,0,
  	48,48,492,492,2,0,188,188,196,196,2,0,168,168,185,185,2,0,543,543,547,
  	547,2,0,526,526,550,550,2,0,19,19,329,329,3,0,307,307,351,351,521,521,
  	2,0,239,239,323,323,85,0,1,1,24,24,26,26,28,29,31,31,33,36,38,38,41,43,
  	45,45,47,47,54,55,60,61,68,69,77,77,98,98,100,100,106,106,108,108,128,
  	130,138,139,141,141,146,147,151,151,156,156,181,181,183,183,187,187,189,
  	191,194,194,197,197,200,200,202,202,213,214,216,216,218,219,226,226,229,
  	229,237,238,250,250,258,258,260,260,262,262,264,265,268,268,270,270,272,
  	274,283,284,287,290,296,296,303,305,308,308,311,311,317,317,319,319,322,
  	322,331,331,336,337,342,342,352,353,355,355,360,361,364,364,370,371,373,
  	373,376,376,380,380,383,383,391,391,398,398,401,401,415,415,420,420,431,
  	434,437,437,466,466,473,473,481,482,486,486,490,491,495,495,497,498,510,
  	511,518,520,522,522,557,557,2,0,204,204,494,494,1,0,552,555,7059,0,1190,
  	1,0,0,0,2,1194,1,0,0,0,4,1198,1,0,0,0,6,1217,1,0,0,0,8,1222,1,0,0,0,10,
  	1238,1,0,0,0,12,1240,1,0,0,0,14,1258,1,0,0,0,16,1263,1,0,0,0,18,1268,
  	1,0,0,0,20,1273,1,0,0,0,22,1278,1,0,0,0,24,1283,1,0,0,0,26,1288,1,0,0,
  	0,28,1300,1,0,0,0,30,1302,1,0,0,0,32,1314,1,0,0,0,34,1316,1,0,0,0,36,
  	1328,1,0,0,0,38,1344,1,0,0,0,40,1346,1,0,0,0,42,1357,1,0,0,0,44,1372,
  	1,0,0,0,46,1393,1,0,0,0,48,1402,1,0,0,0,50,1410,1,0,0,0,52,1416,1,0,0,
  	0,54,1420,1,0,0,0,56,1442,1,0,0,0,58,1446,1,0,0,0,60,1448,1,0,0,0,62,
  	1470,1,0,0,0,64,1479,1,0,0,0,66,1482,1,0,0,0,68,1488,1,0,0,0,70,1502,
  	1,0,0,0,72,1509,1,0,0,0,74,1525,1,0,0,0,76,1532,1,0,0,0,78,1536,1,0,0,
  	0,80,1538,1,0,0,0,82,1554,1,0,0,0,84,1560,1,0,0,0,86,1577,1,0,0,0,88,
  	1600,1,0,0,0,90,1638,1,0,0,0,92,1640,1,0,0,0,94,1646,1,0,0,0,96,1660,
  	1,0,0,0,98,1680,1,0,0,0,100,1692,1,0,0,0,102,1703,1,0,0,0,104,1705,1,
  	0,0,0,106,1717,1,0,0,0,108,1724,1,0,0,0,110,1741,1,0,0,0,112,1743,1,0,
  	0,0,114,1760,1,0,0,0,116,1775,1,0,0,0,118,1786,1,0,0,0,120,1797,1,0,0,
  	0,122,1807,1,0,0,0,124,1816,1,0,0,0,126,1833,1,0,0,0,128,1851,1,0,0,0,
  	130,1858,1,0,0,0,132,1868,1,0,0,0,134,1877,1,0,0,0,136,1897,1,0,0,0,138,
  	1899,1,0,0,0,140,1913,1,0,0,0,142,1917,1,0,0,0,144,1926,1,0,0,0,146,1930,
  	1,0,0,0,148,1945,1,0,0,0,150,1958,1,0,0,0,152,1963,1,0,0,0,154,1970,1,
  	0,0,0,156,1988,1,0,0,0,158,1990,1,0,0,0,160,1999,1,0,0,0,162,2028,1,0,
  	0,0,164,2031,1,0,0,0,166,2036,1,0,0,0,168,2040,1,0,0,0,170,2051,1,0,0,
  	0,172,2054,1,0,0,0,174,2061,1,0,0,0,176,2068,1,0,0,0,178,2097,1,0,0,0,
  	180,2104,1,0,0,0,182,2107,1,0,0,0,184,2127,1,0,0,0,186,2134,1,0,0,0,188,
  	2142,1,0,0,0,190,2158,1,0,0,0,192,2178,1,0,0,0,194,2181,1,0,0,0,196,2192,
  	1,0,0,0,198,2203,1,0,0,0,200,2213,1,0,0,0,202,2222,1,0,0,0,204,2224,1,
  	0,0,0,206,2238,1,0,0,0,208,2245,1,0,0,0,210,2254,1,0,0,0,212,2259,1,0,
  	0,0,214,2268,1,0,0,0,216,2277,1,0,0,0,218,2290,1,0,0,0,220,2292,1,0,0,
  	0,222,2320,1,0,0,0,224,2339,1,0,0,0,226,2362,1,0,0,0,228,2369,1,0,0,0,
  	230,2383,1,0,0,0,232,2390,1,0,0,0,234,2398,1,0,0,0,236,2406,1,0,0,0,238,
  	2413,1,0,0,0,240,2420,1,0,0,0,242,2428,1,0,0,0,244,2437,1,0,0,0,246,2446,
  	1,0,0,0,248,2455,1,0,0,0,250,2464,1,0,0,0,252,2472,1,0,0,0,254,2479,1,
  	0,0,0,256,2494,1,0,0,0,258,2503,1,0,0,0,260,2545,1,0,0,0,262,2548,1,0,
  	0,0,264,2550,1,0,0,0,266,2552,1,0,0,0,268,2555,1,0,0,0,270,2557,1,0,0,
  	0,272,2559,1,0,0,0,274,2561,1,0,0,0,276,2563,1,0,0,0,278,2571,1,0,0,0,
  	280,2585,1,0,0,0,282,2599,1,0,0,0,284,2607,1,0,0,0,286,2615,1,0,0,0,288,
  	2621,1,0,0,0,290,2627,1,0,0,0,292,2633,1,0,0,0,294,2641,1,0,0,0,296,2644,
  	1,0,0,0,298,2647,1,0,0,0,300,2653,1,0,0,0,302,2659,1,0,0,0,304,2667,1,
  	0,0,0,306,2676,1,0,0,0,308,2678,1,0,0,0,310,2680,1,0,0,0,312,2682,1,0,
  	0,0,314,2696,1,0,0,0,316,2701,1,0,0,0,318,2703,1,0,0,0,320,2705,1,0,0,
  	0,322,2714,1,0,0,0,324,2720,1,0,0,0,326,2743,1,0,0,0,328,2747,1,0,0,0,
  	330,2762,1,0,0,0,332,2765,1,0,0,0,334,2769,1,0,0,0,336,2773,1,0,0,0,338,
  	2779,1,0,0,0,340,2781,1,0,0,0,342,2795,1,0,0,0,344,2805,1,0,0,0,346,2830,
  	1,0,0,0,348,2836,1,0,0,0,350,2845,1,0,0,0,352,2849,1,0,0,0,354,2854,1,
  	0,0,0,356,2866,1,0,0,0,358,2874,1,0,0,0,360,2877,1,0,0,0,362,2887,1,0,
  	0,0,364,2890,1,0,0,0,366,2893,1,0,0,0,368,2899,1,0,0,0,370,2907,1,0,0,
  	0,372,2916,1,0,0,0,374,2922,1,0,0,0,376,2946,1,0,0,0,378,2962,1,0,0,0,
  	380,2967,1,0,0,0,382,2972,1,0,0,0,384,2978,1,0,0,0,386,2983,1,0,0,0,388,
  	2993,1,0,0,0,390,3000,1,0,0,0,392,3005,1,0,0,0,394,3007,1,0,0,0,396,3013,
  	1,0,0,0,398,3024,1,0,0,0,400,3026,1,0,0,0,402,3035,1,0,0,0,404,3051,1,
  	0,0,0,406,3059,1,0,0,0,408,3076,1,0,0,0,410,3080,1,0,0,0,412,3086,1,0,
  	0,0,414,3092,1,0,0,0,416,3097,1,0,0,0,418,3111,1,0,0,0,420,3114,1,0,0,
  	0,422,3117,1,0,0,0,424,3125,1,0,0,0,426,3127,1,0,0,0,428,3135,1,0,0,0,
  	430,3138,1,0,0,0,432,3143,1,0,0,0,434,3151,1,0,0,0,436,3153,1,0,0,0,438,
  	3186,1,0,0,0,440,3191,1,0,0,0,442,3197,1,0,0,0,444,3204,1,0,0,0,446,3206,
  	1,0,0,0,448,3212,1,0,0,0,450,3215,1,0,0,0,452,3223,1,0,0,0,454,3227,1,
  	0,0,0,456,3229,1,0,0,0,458,3233,1,0,0,0,460,3268,1,0,0,0,462,3271,1,0,
  	0,0,464,3283,1,0,0,0,466,3297,1,0,0,0,468,3317,1,0,0,0,470,3319,1,0,0,
  	0,472,3324,1,0,0,0,474,3331,1,0,0,0,476,3334,1,0,0,0,478,3337,1,0,0,0,
  	480,3347,1,0,0,0,482,3356,1,0,0,0,484,3361,1,0,0,0,486,3365,1,0,0,0,488,
  	3372,1,0,0,0,490,3380,1,0,0,0,492,3417,1,0,0,0,494,3434,1,0,0,0,496,3446,
  	1,0,0,0,498,3452,1,0,0,0,500,3454,1,0,0,0,502,3458,1,0,0,0,504,3463,1,
  	0,0,0,506,3477,1,0,0,0,508,3483,1,0,0,0,510,3488,1,0,0,0,512,3494,1,0,
  	0,0,514,3509,1,0,0,0,516,3512,1,0,0,0,518,3523,1,0,0,0,520,3525,1,0,0,
  	0,522,3536,1,0,0,0,524,3542,1,0,0,0,526,3547,1,0,0,0,528,3554,1,0,0,0,
  	530,3561,1,0,0,0,532,3570,1,0,0,0,534,3584,1,0,0,0,536,3638,1,0,0,0,538,
  	3640,1,0,0,0,540,3657,1,0,0,0,542,3679,1,0,0,0,544,3682,1,0,0,0,546,3687,
  	1,0,0,0,548,3691,1,0,0,0,550,3707,1,0,0,0,552,3718,1,0,0,0,554,3736,1,
  	0,0,0,556,3743,1,0,0,0,558,3745,1,0,0,0,560,3751,1,0,0,0,562,3753,1,0,
  	0,0,564,3757,1,0,0,0,566,3763,1,0,0,0,568,3769,1,0,0,0,570,3777,1,0,0,
  	0,572,3800,1,0,0,0,574,3809,1,0,0,0,576,3815,1,0,0,0,578,3834,1,0,0,0,
  	580,3837,1,0,0,0,582,3851,1,0,0,0,584,3858,1,0,0,0,586,3877,1,0,0,0,588,
  	3879,1,0,0,0,590,3882,1,0,0,0,592,3893,1,0,0,0,594,3895,1,0,0,0,596,3901,
  	1,0,0,0,598,3907,1,0,0,0,600,3925,1,0,0,0,602,3939,1,0,0,0,604,3952,1,
  	0,0,0,606,3954,1,0,0,0,608,3960,1,0,0,0,610,3965,1,0,0,0,612,3973,1,0,
  	0,0,614,3990,1,0,0,0,616,3994,1,0,0,0,618,3996,1,0,0,0,620,4010,1,0,0,
  	0,622,4029,1,0,0,0,624,4046,1,0,0,0,626,4048,1,0,0,0,628,4053,1,0,0,0,
  	630,4059,1,0,0,0,632,4064,1,0,0,0,634,4086,1,0,0,0,636,4092,1,0,0,0,638,
  	4100,1,0,0,0,640,4108,1,0,0,0,642,4114,1,0,0,0,644,4118,1,0,0,0,646,4122,
  	1,0,0,0,648,4125,1,0,0,0,650,4144,1,0,0,0,652,4154,1,0,0,0,654,4177,1,
  	0,0,0,656,4179,1,0,0,0,658,4183,1,0,0,0,660,4193,1,0,0,0,662,4211,1,0,
  	0,0,664,4213,1,0,0,0,666,4216,1,0,0,0,668,4219,1,0,0,0,670,4230,1,0,0,
  	0,672,4233,1,0,0,0,674,4238,1,0,0,0,676,4243,1,0,0,0,678,4247,1,0,0,0,
  	680,4261,1,0,0,0,682,4263,1,0,0,0,684,4267,1,0,0,0,686,4270,1,0,0,0,688,
  	4272,1,0,0,0,690,4280,1,0,0,0,692,4295,1,0,0,0,694,4297,1,0,0,0,696,4307,
  	1,0,0,0,698,4319,1,0,0,0,700,4330,1,0,0,0,702,4339,1,0,0,0,704,4345,1,
  	0,0,0,706,4354,1,0,0,0,708,4360,1,0,0,0,710,4368,1,0,0,0,712,4374,1,0,
  	0,0,714,4381,1,0,0,0,716,4392,1,0,0,0,718,4404,1,0,0,0,720,4412,1,0,0,
  	0,722,4419,1,0,0,0,724,4427,1,0,0,0,726,4433,1,0,0,0,728,4441,1,0,0,0,
  	730,4451,1,0,0,0,732,4460,1,0,0,0,734,4465,1,0,0,0,736,4470,1,0,0,0,738,
  	4478,1,0,0,0,740,4504,1,0,0,0,742,4516,1,0,0,0,744,4534,1,0,0,0,746,4541,
  	1,0,0,0,748,4549,1,0,0,0,750,4555,1,0,0,0,752,4564,1,0,0,0,754,4567,1,
  	0,0,0,756,4573,1,0,0,0,758,4585,1,0,0,0,760,4593,1,0,0,0,762,4602,1,0,
  	0,0,764,4604,1,0,0,0,766,4612,1,0,0,0,768,4614,1,0,0,0,770,4634,1,0,0,
  	0,772,4638,1,0,0,0,774,4642,1,0,0,0,776,4651,1,0,0,0,778,4653,1,0,0,0,
  	780,4657,1,0,0,0,782,4666,1,0,0,0,784,4672,1,0,0,0,786,4681,1,0,0,0,788,
  	4687,1,0,0,0,790,4695,1,0,0,0,792,4701,1,0,0,0,794,4707,1,0,0,0,796,4713,
  	1,0,0,0,798,4723,1,0,0,0,800,4734,1,0,0,0,802,4738,1,0,0,0,804,4743,1,
  	0,0,0,806,4755,1,0,0,0,808,4757,1,0,0,0,810,4767,1,0,0,0,812,4773,1,0,
  	0,0,814,4776,1,0,0,0,816,4782,1,0,0,0,818,4789,1,0,0,0,820,4794,1,0,0,
  	0,822,4800,1,0,0,0,824,4832,1,0,0,0,826,4836,1,0,0,0,828,4843,1,0,0,0,
  	830,4849,1,0,0,0,832,4863,1,0,0,0,834,4882,1,0,0,0,836,4884,1,0,0,0,838,
  	4896,1,0,0,0,840,4904,1,0,0,0,842,4912,1,0,0,0,844,4921,1,0,0,0,846,4926,
  	1,0,0,0,848,4932,1,0,0,0,850,4940,1,0,0,0,852,4946,1,0,0,0,854,4952,1,
  	0,0,0,856,4967,1,0,0,0,858,4970,1,0,0,0,860,4984,1,0,0,0,862,4987,1,0,
  	0,0,864,5006,1,0,0,0,866,5009,1,0,0,0,868,5021,1,0,0,0,870,5034,1,0,0,
  	0,872,5048,1,0,0,0,874,5052,1,0,0,0,876,5055,1,0,0,0,878,5062,1,0,0,0,
  	880,5066,1,0,0,0,882,5075,1,0,0,0,884,5079,1,0,0,0,886,5084,1,0,0,0,888,
  	5086,1,0,0,0,890,5096,1,0,0,0,892,5107,1,0,0,0,894,5119,1,0,0,0,896,5130,
  	1,0,0,0,898,5134,1,0,0,0,900,5136,1,0,0,0,902,5168,1,0,0,0,904,5180,1,
  	0,0,0,906,5190,1,0,0,0,908,5208,1,0,0,0,910,5215,1,0,0,0,912,5223,1,0,
  	0,0,914,5232,1,0,0,0,916,5235,1,0,0,0,918,5241,1,0,0,0,920,5250,1,0,0,
  	0,922,5253,1,0,0,0,924,5259,1,0,0,0,926,5271,1,0,0,0,928,5285,1,0,0,0,
  	930,5320,1,0,0,0,932,5325,1,0,0,0,934,5345,1,0,0,0,936,5355,1,0,0,0,938,
  	5357,1,0,0,0,940,5366,1,0,0,0,942,5371,1,0,0,0,944,5375,1,0,0,0,946,5380,
  	1,0,0,0,948,5396,1,0,0,0,950,5407,1,0,0,0,952,5419,1,0,0,0,954,5426,1,
  	0,0,0,956,5428,1,0,0,0,958,5434,1,0,0,0,960,5436,1,0,0,0,962,5440,1,0,
  	0,0,964,5444,1,0,0,0,966,5447,1,0,0,0,968,5465,1,0,0,0,970,5475,1,0,0,
  	0,972,5486,1,0,0,0,974,5494,1,0,0,0,976,5500,1,0,0,0,978,5507,1,0,0,0,
  	980,5513,1,0,0,0,982,5520,1,0,0,0,984,5525,1,0,0,0,986,5531,1,0,0,0,988,
  	5537,1,0,0,0,990,5559,1,0,0,0,992,5562,1,0,0,0,994,5585,1,0,0,0,996,5587,
  	1,0,0,0,998,5610,1,0,0,0,1000,5615,1,0,0,0,1002,5624,1,0,0,0,1004,5628,
  	1,0,0,0,1006,5633,1,0,0,0,1008,5636,1,0,0,0,1010,5645,1,0,0,0,1012,5657,
  	1,0,0,0,1014,5666,1,0,0,0,1016,5677,1,0,0,0,1018,5687,1,0,0,0,1020,5699,
  	1,0,0,0,1022,5708,1,0,0,0,1024,5720,1,0,0,0,1026,5730,1,0,0,0,1028,5743,
  	1,0,0,0,1030,5752,1,0,0,0,1032,5763,1,0,0,0,1034,5770,1,0,0,0,1036,5773,
  	1,0,0,0,1038,5780,1,0,0,0,1040,5784,1,0,0,0,1042,5793,1,0,0,0,1044,5802,
  	1,0,0,0,1046,5804,1,0,0,0,1048,5811,1,0,0,0,1050,5821,1,0,0,0,1052,5832,
  	1,0,0,0,1054,5834,1,0,0,0,1056,5850,1,0,0,0,1058,5874,1,0,0,0,1060,5890,
  	1,0,0,0,1062,5892,1,0,0,0,1064,5901,1,0,0,0,1066,5905,1,0,0,0,1068,5911,
  	1,0,0,0,1070,5919,1,0,0,0,1072,5965,1,0,0,0,1074,5982,1,0,0,0,1076,5984,
  	1,0,0,0,1078,6006,1,0,0,0,1080,6029,1,0,0,0,1082,6037,1,0,0,0,1084,6039,
  	1,0,0,0,1086,6052,1,0,0,0,1088,6065,1,0,0,0,1090,6071,1,0,0,0,1092,6075,
  	1,0,0,0,1094,6088,1,0,0,0,1096,6091,1,0,0,0,1098,6094,1,0,0,0,1100,6099,
  	1,0,0,0,1102,6101,1,0,0,0,1104,6104,1,0,0,0,1106,6107,1,0,0,0,1108,6110,
  	1,0,0,0,1110,6113,1,0,0,0,1112,6116,1,0,0,0,1114,6119,1,0,0,0,1116,6121,
  	1,0,0,0,1118,6123,1,0,0,0,1120,6125,1,0,0,0,1122,6127,1,0,0,0,1124,6129,
  	1,0,0,0,1126,6131,1,0,0,0,1128,6133,1,0,0,0,1130,6138,1,0,0,0,1132,6140,
  	1,0,0,0,1134,6142,1,0,0,0,1136,6150,1,0,0,0,1138,6152,1,0,0,0,1140,6154,
  	1,0,0,0,1142,6156,1,0,0,0,1144,6158,1,0,0,0,1146,6160,1,0,0,0,1148,6164,
  	1,0,0,0,1150,6171,1,0,0,0,1152,6175,1,0,0,0,1154,6177,1,0,0,0,1156,6179,
  	1,0,0,0,1158,6181,1,0,0,0,1160,6183,1,0,0,0,1162,6187,1,0,0,0,1164,6189,
  	1,0,0,0,1166,6191,1,0,0,0,1168,6193,1,0,0,0,1170,6195,1,0,0,0,1172,6203,
  	1,0,0,0,1174,6205,1,0,0,0,1176,6210,1,0,0,0,1178,6212,1,0,0,0,1180,6214,
  	1,0,0,0,1182,6222,1,0,0,0,1184,6245,1,0,0,0,1186,6280,1,0,0,0,1188,6283,
  	1,0,0,0,1190,1191,3,2,1,0,1191,1192,5,0,0,1,1192,1,1,0,0,0,1193,1195,
  	3,4,2,0,1194,1193,1,0,0,0,1195,1196,1,0,0,0,1196,1194,1,0,0,0,1196,1197,
  	1,0,0,0,1197,3,1,0,0,0,1198,1200,3,8,4,0,1199,1201,3,26,13,0,1200,1199,
  	1,0,0,0,1200,1201,1,0,0,0,1201,1203,1,0,0,0,1202,1204,3,154,77,0,1203,
  	1202,1,0,0,0,1203,1204,1,0,0,0,1204,1206,1,0,0,0,1205,1207,3,504,252,
  	0,1206,1205,1,0,0,0,1206,1207,1,0,0,0,1207,1211,1,0,0,0,1208,1210,3,4,
  	2,0,1209,1208,1,0,0,0,1210,1213,1,0,0,0,1211,1209,1,0,0,0,1211,1212,1,
  	0,0,0,1212,1215,1,0,0,0,1213,1211,1,0,0,0,1214,1216,3,6,3,0,1215,1214,
  	1,0,0,0,1215,1216,1,0,0,0,1216,5,1,0,0,0,1217,1218,5,158,0,0,1218,1219,
  	5,361,0,0,1219,1220,3,1152,576,0,1220,1221,5,534,0,0,1221,7,1,0,0,0,1222,
  	1223,7,0,0,0,1223,1224,5,145,0,0,1224,1225,5,534,0,0,1225,1229,3,12,6,
  	0,1226,1228,3,10,5,0,1227,1226,1,0,0,0,1228,1231,1,0,0,0,1229,1227,1,
  	0,0,0,1229,1230,1,0,0,0,1230,9,1,0,0,0,1231,1229,1,0,0,0,1232,1239,3,
  	14,7,0,1233,1239,3,16,8,0,1234,1239,3,18,9,0,1235,1239,3,20,10,0,1236,
  	1239,3,22,11,0,1237,1239,3,24,12,0,1238,1232,1,0,0,0,1238,1233,1,0,0,
  	0,1238,1234,1,0,0,0,1238,1235,1,0,0,0,1238,1236,1,0,0,0,1238,1237,1,0,
  	0,0,1239,11,1,0,0,0,1240,1241,5,362,0,0,1241,1242,5,534,0,0,1242,1250,
  	3,1152,576,0,1243,1245,5,254,0,0,1244,1243,1,0,0,0,1244,1245,1,0,0,0,
  	1245,1246,1,0,0,0,1246,1248,7,1,0,0,1247,1249,5,361,0,0,1248,1247,1,0,
  	0,0,1248,1249,1,0,0,0,1249,1251,1,0,0,0,1250,1244,1,0,0,0,1250,1251,1,
  	0,0,0,1251,1253,1,0,0,0,1252,1254,5,534,0,0,1253,1252,1,0,0,0,1253,1254,
  	1,0,0,0,1254,1256,1,0,0,0,1255,1257,3,1188,594,0,1256,1255,1,0,0,0,1256,
  	1257,1,0,0,0,1257,13,1,0,0,0,1258,1259,5,32,0,0,1259,1261,5,534,0,0,1260,
  	1262,3,1188,594,0,1261,1260,1,0,0,0,1261,1262,1,0,0,0,1262,15,1,0,0,0,
  	1263,1264,5,249,0,0,1264,1266,5,534,0,0,1265,1267,3,1188,594,0,1266,1265,
  	1,0,0,0,1266,1267,1,0,0,0,1267,17,1,0,0,0,1268,1269,5,113,0,0,1269,1271,
  	5,534,0,0,1270,1272,3,1188,594,0,1271,1270,1,0,0,0,1271,1272,1,0,0,0,
  	1272,19,1,0,0,0,1273,1274,5,112,0,0,1274,1276,5,534,0,0,1275,1277,3,1188,
  	594,0,1276,1275,1,0,0,0,1276,1277,1,0,0,0,1277,21,1,0,0,0,1278,1279,5,
  	421,0,0,1279,1281,5,534,0,0,1280,1282,3,1188,594,0,1281,1280,1,0,0,0,
  	1281,1282,1,0,0,0,1282,23,1,0,0,0,1283,1284,5,389,0,0,1284,1286,5,534,
  	0,0,1285,1287,3,1188,594,0,1286,1285,1,0,0,0,1286,1287,1,0,0,0,1287,25,
  	1,0,0,0,1288,1289,5,184,0,0,1289,1290,5,145,0,0,1290,1294,5,534,0,0,1291,
  	1293,3,28,14,0,1292,1291,1,0,0,0,1293,1296,1,0,0,0,1294,1292,1,0,0,0,
  	1294,1295,1,0,0,0,1295,27,1,0,0,0,1296,1294,1,0,0,0,1297,1301,3,30,15,
  	0,1298,1301,3,54,27,0,1299,1301,3,100,50,0,1300,1297,1,0,0,0,1300,1298,
  	1,0,0,0,1300,1299,1,0,0,0,1301,29,1,0,0,0,1302,1303,5,93,0,0,1303,1304,
  	5,419,0,0,1304,1308,5,534,0,0,1305,1307,3,32,16,0,1306,1305,1,0,0,0,1307,
  	1310,1,0,0,0,1308,1306,1,0,0,0,1308,1309,1,0,0,0,1309,31,1,0,0,0,1310,
  	1308,1,0,0,0,1311,1315,3,34,17,0,1312,1315,3,36,18,0,1313,1315,3,54,27,
  	0,1314,1311,1,0,0,0,1314,1312,1,0,0,0,1314,1313,1,0,0,0,1315,33,1,0,0,
  	0,1316,1317,5,449,0,0,1317,1318,5,534,0,0,1318,1324,3,1124,562,0,1319,
  	1321,5,514,0,0,1320,1319,1,0,0,0,1320,1321,1,0,0,0,1321,1322,1,0,0,0,
  	1322,1323,5,125,0,0,1323,1325,5,297,0,0,1324,1320,1,0,0,0,1324,1325,1,
  	0,0,0,1325,1326,1,0,0,0,1326,1327,5,534,0,0,1327,35,1,0,0,0,1328,1329,
  	5,320,0,0,1329,1330,5,534,0,0,1330,1334,3,1124,562,0,1331,1333,3,38,19,
  	0,1332,1331,1,0,0,0,1333,1336,1,0,0,0,1334,1332,1,0,0,0,1334,1335,1,0,
  	0,0,1335,1337,1,0,0,0,1336,1334,1,0,0,0,1337,1338,5,534,0,0,1338,37,1,
  	0,0,0,1339,1345,3,40,20,0,1340,1345,3,42,21,0,1341,1345,3,44,22,0,1342,
  	1345,3,50,25,0,1343,1345,3,52,26,0,1344,1339,1,0,0,0,1344,1340,1,0,0,
  	0,1344,1341,1,0,0,0,1344,1342,1,0,0,0,1344,1343,1,0,0,0,1345,39,1,0,0,
  	0,1346,1348,5,293,0,0,1347,1349,5,439,0,0,1348,1347,1,0,0,0,1348,1349,
  	1,0,0,0,1349,1352,1,0,0,0,1350,1353,3,1178,589,0,1351,1353,3,1170,585,
  	0,1352,1350,1,0,0,0,1352,1351,1,0,0,0,1353,1355,1,0,0,0,1354,1356,7,2,
  	0,0,1355,1354,1,0,0,0,1355,1356,1,0,0,0,1356,41,1,0,0,0,1357,1359,5,141,
  	0,0,1358,1360,5,439,0,0,1359,1358,1,0,0,0,1359,1360,1,0,0,0,1360,1362,
  	1,0,0,0,1361,1363,5,254,0,0,1362,1361,1,0,0,0,1362,1363,1,0,0,0,1363,
  	1366,1,0,0,0,1364,1367,3,1178,589,0,1365,1367,3,1170,585,0,1366,1364,
  	1,0,0,0,1366,1365,1,0,0,0,1367,1369,1,0,0,0,1368,1370,7,3,0,0,1369,1368,
  	1,0,0,0,1369,1370,1,0,0,0,1370,43,1,0,0,0,1371,1373,5,361,0,0,1372,1371,
  	1,0,0,0,1372,1373,1,0,0,0,1373,1375,1,0,0,0,1374,1376,5,72,0,0,1375,1374,
  	1,0,0,0,1375,1376,1,0,0,0,1376,1377,1,0,0,0,1377,1379,5,428,0,0,1378,
  	1380,5,254,0,0,1379,1378,1,0,0,0,1379,1380,1,0,0,0,1380,1382,1,0,0,0,
  	1381,1383,3,1114,557,0,1382,1381,1,0,0,0,1383,1384,1,0,0,0,1384,1382,
  	1,0,0,0,1384,1385,1,0,0,0,1385,1387,1,0,0,0,1386,1388,3,46,23,0,1387,
  	1386,1,0,0,0,1387,1388,1,0,0,0,1388,1390,1,0,0,0,1389,1391,3,48,24,0,
  	1390,1389,1,0,0,0,1390,1391,1,0,0,0,1391,45,1,0,0,0,1392,1394,5,212,0,
  	0,1393,1392,1,0,0,0,1393,1394,1,0,0,0,1394,1395,1,0,0,0,1395,1397,5,14,
  	0,0,1396,1398,5,254,0,0,1397,1396,1,0,0,0,1397,1398,1,0,0,0,1398,1399,
  	1,0,0,0,1399,1400,3,1114,557,0,1400,47,1,0,0,0,1401,1403,5,212,0,0,1402,
  	1401,1,0,0,0,1402,1403,1,0,0,0,1403,1404,1,0,0,0,1404,1406,5,304,0,0,
  	1405,1407,5,254,0,0,1406,1405,1,0,0,0,1406,1407,1,0,0,0,1407,1408,1,0,
  	0,0,1408,1409,3,1114,557,0,1409,49,1,0,0,0,1410,1412,5,423,0,0,1411,1413,
  	5,254,0,0,1412,1411,1,0,0,0,1412,1413,1,0,0,0,1413,1414,1,0,0,0,1414,
  	1415,3,1178,589,0,1415,51,1,0,0,0,1416,1417,5,62,0,0,1417,1418,5,430,
  	0,0,1418,1419,5,534,0,0,1419,53,1,0,0,0,1420,1421,5,452,0,0,1421,1429,
  	5,534,0,0,1422,1424,3,56,28,0,1423,1422,1,0,0,0,1424,1425,1,0,0,0,1425,
  	1423,1,0,0,0,1425,1426,1,0,0,0,1426,1427,1,0,0,0,1427,1428,5,534,0,0,
  	1428,1430,1,0,0,0,1429,1423,1,0,0,0,1429,1430,1,0,0,0,1430,55,1,0,0,0,
  	1431,1443,3,70,35,0,1432,1443,3,92,46,0,1433,1443,3,58,29,0,1434,1443,
  	3,72,36,0,1435,1443,3,80,40,0,1436,1443,3,82,41,0,1437,1443,3,96,48,0,
  	1438,1443,3,88,44,0,1439,1443,3,86,43,0,1440,1443,3,84,42,0,1441,1443,
  	3,94,47,0,1442,1431,1,0,0,0,1442,1432,1,0,0,0,1442,1433,1,0,0,0,1442,
  	1434,1,0,0,0,1442,1435,1,0,0,0,1442,1436,1,0,0,0,1442,1437,1,0,0,0,1442,
  	1438,1,0,0,0,1442,1439,1,0,0,0,1442,1440,1,0,0,0,1442,1441,1,0,0,0,1443,
  	57,1,0,0,0,1444,1447,3,60,30,0,1445,1447,3,68,34,0,1446,1444,1,0,0,0,
  	1446,1445,1,0,0,0,1447,59,1,0,0,0,1448,1449,5,10,0,0,1449,1452,3,1114,
  	557,0,1450,1451,5,212,0,0,1451,1453,5,14,0,0,1452,1450,1,0,0,0,1452,1453,
  	1,0,0,0,1453,1455,1,0,0,0,1454,1456,5,254,0,0,1455,1454,1,0,0,0,1455,
  	1456,1,0,0,0,1456,1468,1,0,0,0,1457,1469,5,151,0,0,1458,1469,5,26,0,0,
  	1459,1469,5,454,0,0,1460,1469,5,455,0,0,1461,1469,5,306,0,0,1462,1469,
  	3,1170,585,0,1463,1465,3,62,31,0,1464,1463,1,0,0,0,1465,1466,1,0,0,0,
  	1466,1464,1,0,0,0,1466,1467,1,0,0,0,1467,1469,1,0,0,0,1468,1457,1,0,0,
  	0,1468,1458,1,0,0,0,1468,1459,1,0,0,0,1468,1460,1,0,0,0,1468,1461,1,0,
  	0,0,1468,1462,1,0,0,0,1468,1464,1,0,0,0,1469,61,1,0,0,0,1470,1477,3,1172,
  	586,0,1471,1478,3,64,32,0,1472,1474,3,66,33,0,1473,1472,1,0,0,0,1474,
  	1475,1,0,0,0,1475,1473,1,0,0,0,1475,1476,1,0,0,0,1476,1478,1,0,0,0,1477,
  	1471,1,0,0,0,1477,1473,1,0,0,0,1477,1478,1,0,0,0,1478,63,1,0,0,0,1479,
  	1480,7,4,0,0,1480,1481,3,1172,586,0,1481,65,1,0,0,0,1482,1484,5,16,0,
  	0,1483,1485,3,1172,586,0,1484,1483,1,0,0,0,1485,1486,1,0,0,0,1486,1484,
  	1,0,0,0,1486,1487,1,0,0,0,1487,67,1,0,0,0,1488,1489,5,10,0,0,1489,1491,
  	3,1114,557,0,1490,1492,5,212,0,0,1491,1490,1,0,0,0,1491,1492,1,0,0,0,
  	1492,1493,1,0,0,0,1493,1495,5,304,0,0,1494,1496,5,254,0,0,1495,1494,1,
  	0,0,0,1495,1496,1,0,0,0,1496,1500,1,0,0,0,1497,1501,5,306,0,0,1498,1499,
  	5,55,0,0,1499,1501,3,1172,586,0,1500,1497,1,0,0,0,1500,1498,1,0,0,0,1501,
  	69,1,0,0,0,1502,1503,5,61,0,0,1503,1505,3,1178,589,0,1504,1506,5,254,
  	0,0,1505,1504,1,0,0,0,1505,1506,1,0,0,0,1506,1507,1,0,0,0,1507,1508,3,
  	1146,573,0,1508,71,1,0,0,0,1509,1510,5,64,0,0,1510,1515,3,1122,561,0,
  	1511,1513,5,212,0,0,1512,1511,1,0,0,0,1512,1513,1,0,0,0,1513,1514,1,0,
  	0,0,1514,1516,7,5,0,0,1515,1512,1,0,0,0,1515,1516,1,0,0,0,1516,1518,1,
  	0,0,0,1517,1519,5,254,0,0,1518,1517,1,0,0,0,1518,1519,1,0,0,0,1519,1521,
  	1,0,0,0,1520,1522,3,74,37,0,1521,1520,1,0,0,0,1522,1523,1,0,0,0,1523,
  	1521,1,0,0,0,1523,1524,1,0,0,0,1524,73,1,0,0,0,1525,1528,3,76,38,0,1526,
  	1527,7,4,0,0,1527,1529,3,78,39,0,1528,1526,1,0,0,0,1528,1529,1,0,0,0,
  	1529,75,1,0,0,0,1530,1533,3,1074,537,0,1531,1533,3,1172,586,0,1532,1530,
  	1,0,0,0,1532,1531,1,0,0,0,1533,77,1,0,0,0,1534,1537,3,1074,537,0,1535,
  	1537,3,1172,586,0,1536,1534,1,0,0,0,1536,1535,1,0,0,0,1537,79,1,0,0,0,
  	1538,1540,5,107,0,0,1539,1541,5,438,0,0,1540,1539,1,0,0,0,1540,1541,1,
  	0,0,0,1541,1543,1,0,0,0,1542,1544,5,254,0,0,1543,1542,1,0,0,0,1543,1544,
  	1,0,0,0,1544,1545,1,0,0,0,1545,1552,3,1172,586,0,1546,1548,5,514,0,0,
  	1547,1546,1,0,0,0,1547,1548,1,0,0,0,1548,1549,1,0,0,0,1549,1550,5,347,
  	0,0,1550,1551,5,466,0,0,1551,1553,3,1172,586,0,1552,1547,1,0,0,0,1552,
  	1553,1,0,0,0,1553,81,1,0,0,0,1554,1556,5,126,0,0,1555,1557,5,254,0,0,
  	1556,1555,1,0,0,0,1556,1557,1,0,0,0,1557,1558,1,0,0,0,1558,1559,5,76,
  	0,0,1559,83,1,0,0,0,1560,1562,5,128,0,0,1561,1563,7,6,0,0,1562,1561,1,
  	0,0,0,1562,1563,1,0,0,0,1563,1568,1,0,0,0,1564,1566,5,438,0,0,1565,1567,
  	5,254,0,0,1566,1565,1,0,0,0,1566,1567,1,0,0,0,1567,1569,1,0,0,0,1568,
  	1564,1,0,0,0,1568,1569,1,0,0,0,1569,1571,1,0,0,0,1570,1572,7,7,0,0,1571,
  	1570,1,0,0,0,1571,1572,1,0,0,0,1572,1573,1,0,0,0,1573,1575,5,427,0,0,
  	1574,1576,5,62,0,0,1575,1574,1,0,0,0,1575,1576,1,0,0,0,1576,85,1,0,0,
  	0,1577,1582,5,129,0,0,1578,1580,5,438,0,0,1579,1581,5,254,0,0,1580,1579,
  	1,0,0,0,1580,1581,1,0,0,0,1581,1583,1,0,0,0,1582,1578,1,0,0,0,1582,1583,
  	1,0,0,0,1583,1584,1,0,0,0,1584,1589,7,7,0,0,1585,1587,5,427,0,0,1586,
  	1588,5,62,0,0,1587,1586,1,0,0,0,1587,1588,1,0,0,0,1588,1590,1,0,0,0,1589,
  	1585,1,0,0,0,1589,1590,1,0,0,0,1590,87,1,0,0,0,1591,1593,3,1132,566,0,
  	1592,1594,5,254,0,0,1593,1592,1,0,0,0,1593,1594,1,0,0,0,1594,1595,1,0,
  	0,0,1595,1597,3,1146,573,0,1596,1598,3,90,45,0,1597,1596,1,0,0,0,1597,
  	1598,1,0,0,0,1598,1601,1,0,0,0,1599,1601,3,90,45,0,1600,1591,1,0,0,0,
  	1600,1599,1,0,0,0,1601,89,1,0,0,0,1602,1604,5,326,0,0,1603,1605,5,457,
  	0,0,1604,1603,1,0,0,0,1604,1605,1,0,0,0,1605,1607,1,0,0,0,1606,1608,5,
  	254,0,0,1607,1606,1,0,0,0,1607,1608,1,0,0,0,1608,1609,1,0,0,0,1609,1618,
  	3,1046,523,0,1610,1612,5,324,0,0,1611,1613,5,457,0,0,1612,1611,1,0,0,
  	0,1612,1613,1,0,0,0,1613,1615,1,0,0,0,1614,1616,5,254,0,0,1615,1614,1,
  	0,0,0,1615,1616,1,0,0,0,1616,1617,1,0,0,0,1617,1619,3,1046,523,0,1618,
  	1610,1,0,0,0,1618,1619,1,0,0,0,1619,1639,1,0,0,0,1620,1622,5,324,0,0,
  	1621,1623,5,457,0,0,1622,1621,1,0,0,0,1622,1623,1,0,0,0,1623,1625,1,0,
  	0,0,1624,1626,5,254,0,0,1625,1624,1,0,0,0,1625,1626,1,0,0,0,1626,1627,
  	1,0,0,0,1627,1636,3,1046,523,0,1628,1630,5,326,0,0,1629,1631,5,457,0,
  	0,1630,1629,1,0,0,0,1630,1631,1,0,0,0,1631,1633,1,0,0,0,1632,1634,5,254,
  	0,0,1633,1632,1,0,0,0,1633,1634,1,0,0,0,1634,1635,1,0,0,0,1635,1637,3,
  	1046,523,0,1636,1628,1,0,0,0,1636,1637,1,0,0,0,1637,1639,1,0,0,0,1638,
  	1602,1,0,0,0,1638,1620,1,0,0,0,1639,91,1,0,0,0,1640,1642,5,322,0,0,1641,
  	1643,5,254,0,0,1642,1641,1,0,0,0,1642,1643,1,0,0,0,1643,1644,1,0,0,0,
  	1644,1645,3,1146,573,0,1645,93,1,0,0,0,1646,1648,5,400,0,0,1647,1649,
  	5,515,0,0,1648,1647,1,0,0,0,1648,1649,1,0,0,0,1649,1651,1,0,0,0,1650,
  	1652,5,283,0,0,1651,1650,1,0,0,0,1651,1652,1,0,0,0,1652,1654,1,0,0,0,
  	1653,1655,5,254,0,0,1654,1653,1,0,0,0,1654,1655,1,0,0,0,1655,1656,1,0,
  	0,0,1656,1658,5,308,0,0,1657,1659,5,54,0,0,1658,1657,1,0,0,0,1658,1659,
  	1,0,0,0,1659,95,1,0,0,0,1660,1662,5,467,0,0,1661,1663,5,63,0,0,1662,1661,
  	1,0,0,0,1662,1663,1,0,0,0,1663,1668,1,0,0,0,1664,1666,5,212,0,0,1665,
  	1664,1,0,0,0,1665,1666,1,0,0,0,1666,1667,1,0,0,0,1667,1669,7,5,0,0,1668,
  	1665,1,0,0,0,1668,1669,1,0,0,0,1669,1671,1,0,0,0,1670,1672,3,98,49,0,
  	1671,1670,1,0,0,0,1672,1673,1,0,0,0,1673,1671,1,0,0,0,1673,1674,1,0,0,
  	0,1674,1677,1,0,0,0,1675,1676,5,239,0,0,1676,1678,3,1114,557,0,1677,1675,
  	1,0,0,0,1677,1678,1,0,0,0,1678,97,1,0,0,0,1679,1681,3,1166,583,0,1680,
  	1679,1,0,0,0,1681,1682,1,0,0,0,1682,1680,1,0,0,0,1682,1683,1,0,0,0,1683,
  	1685,1,0,0,0,1684,1686,7,8,0,0,1685,1684,1,0,0,0,1685,1686,1,0,0,0,1686,
  	1688,1,0,0,0,1687,1689,3,1178,589,0,1688,1687,1,0,0,0,1689,1690,1,0,0,
  	0,1690,1688,1,0,0,0,1690,1691,1,0,0,0,1691,99,1,0,0,0,1692,1693,5,247,
  	0,0,1693,1694,5,419,0,0,1694,1698,5,534,0,0,1695,1697,3,102,51,0,1696,
  	1695,1,0,0,0,1697,1700,1,0,0,0,1698,1696,1,0,0,0,1698,1699,1,0,0,0,1699,
  	101,1,0,0,0,1700,1698,1,0,0,0,1701,1704,3,104,52,0,1702,1704,3,134,67,
  	0,1703,1701,1,0,0,0,1703,1702,1,0,0,0,1704,103,1,0,0,0,1705,1712,5,207,
  	0,0,1706,1708,5,534,0,0,1707,1706,1,0,0,0,1707,1708,1,0,0,0,1708,1709,
  	1,0,0,0,1709,1711,3,106,53,0,1710,1707,1,0,0,0,1711,1714,1,0,0,0,1712,
  	1710,1,0,0,0,1712,1713,1,0,0,0,1713,1715,1,0,0,0,1714,1712,1,0,0,0,1715,
  	1716,5,534,0,0,1716,105,1,0,0,0,1717,1721,3,108,54,0,1718,1720,3,110,
  	55,0,1719,1718,1,0,0,0,1720,1723,1,0,0,0,1721,1719,1,0,0,0,1721,1722,
  	1,0,0,0,1722,107,1,0,0,0,1723,1721,1,0,0,0,1724,1726,5,424,0,0,1725,1727,
  	5,328,0,0,1726,1725,1,0,0,0,1726,1727,1,0,0,0,1727,1728,1,0,0,0,1728,
  	1729,3,1134,567,0,1729,109,1,0,0,0,1730,1742,3,112,56,0,1731,1742,3,114,
  	57,0,1732,1742,3,116,58,0,1733,1742,3,118,59,0,1734,1742,3,120,60,0,1735,
  	1742,3,122,61,0,1736,1742,3,124,62,0,1737,1742,3,126,63,0,1738,1742,3,
  	130,65,0,1739,1742,3,128,64,0,1740,1742,3,132,66,0,1741,1730,1,0,0,0,
  	1741,1731,1,0,0,0,1741,1732,1,0,0,0,1741,1733,1,0,0,0,1741,1734,1,0,0,
  	0,1741,1735,1,0,0,0,1741,1736,1,0,0,0,1741,1737,1,0,0,0,1741,1738,1,0,
  	0,0,1741,1739,1,0,0,0,1741,1740,1,0,0,0,1742,111,1,0,0,0,1743,1745,5,
  	27,0,0,1744,1746,5,489,0,0,1745,1744,1,0,0,0,1745,1746,1,0,0,0,1746,1758,
  	1,0,0,0,1747,1759,5,141,0,0,1748,1759,5,142,0,0,1749,1759,5,260,0,0,1750,
  	1759,5,352,0,0,1751,1759,5,353,0,0,1752,1759,5,370,0,0,1753,1759,5,371,
  	0,0,1754,1759,5,474,0,0,1755,1759,5,510,0,0,1756,1759,3,1116,558,0,1757,
  	1759,3,1172,586,0,1758,1747,1,0,0,0,1758,1748,1,0,0,0,1758,1749,1,0,0,
  	0,1758,1750,1,0,0,0,1758,1751,1,0,0,0,1758,1752,1,0,0,0,1758,1753,1,0,
  	0,0,1758,1754,1,0,0,0,1758,1755,1,0,0,0,1758,1756,1,0,0,0,1758,1757,1,
  	0,0,0,1759,113,1,0,0,0,1760,1763,5,400,0,0,1761,1764,5,310,0,0,1762,1764,
  	3,1178,589,0,1763,1761,1,0,0,0,1763,1762,1,0,0,0,1764,1766,1,0,0,0,1765,
  	1767,5,18,0,0,1766,1765,1,0,0,0,1766,1767,1,0,0,0,1767,1769,1,0,0,0,1768,
  	1770,7,9,0,0,1769,1768,1,0,0,0,1769,1770,1,0,0,0,1770,115,1,0,0,0,1771,
  	1773,5,332,0,0,1772,1774,5,254,0,0,1773,1772,1,0,0,0,1773,1774,1,0,0,
  	0,1774,1776,1,0,0,0,1775,1771,1,0,0,0,1775,1776,1,0,0,0,1776,1782,1,0,
  	0,0,1777,1783,5,279,0,0,1778,1779,5,377,0,0,1779,1783,5,42,0,0,1780,1783,
  	5,377,0,0,1781,1783,5,42,0,0,1782,1777,1,0,0,0,1782,1778,1,0,0,0,1782,
  	1780,1,0,0,0,1782,1781,1,0,0,0,1782,1783,1,0,0,0,1783,1784,1,0,0,0,1784,
  	1785,7,10,0,0,1785,117,1,0,0,0,1786,1788,5,339,0,0,1787,1789,5,62,0,0,
  	1788,1787,1,0,0,0,1788,1789,1,0,0,0,1789,1791,1,0,0,0,1790,1792,5,254,
  	0,0,1791,1790,1,0,0,0,1791,1792,1,0,0,0,1792,1795,1,0,0,0,1793,1796,3,
  	1090,545,0,1794,1796,3,1172,586,0,1795,1793,1,0,0,0,1795,1794,1,0,0,0,
  	1796,119,1,0,0,0,1797,1798,5,377,0,0,1798,1800,5,133,0,0,1799,1801,5,
  	254,0,0,1800,1799,1,0,0,0,1800,1801,1,0,0,0,1801,1805,1,0,0,0,1802,1806,
  	5,454,0,0,1803,1806,5,237,0,0,1804,1806,3,1116,558,0,1805,1802,1,0,0,
  	0,1805,1803,1,0,0,0,1805,1804,1,0,0,0,1806,121,1,0,0,0,1807,1809,5,3,
  	0,0,1808,1810,5,297,0,0,1809,1808,1,0,0,0,1809,1810,1,0,0,0,1810,1812,
  	1,0,0,0,1811,1813,5,254,0,0,1812,1811,1,0,0,0,1812,1813,1,0,0,0,1813,
  	1814,1,0,0,0,1814,1815,7,11,0,0,1815,123,1,0,0,0,1816,1818,5,377,0,0,
  	1817,1819,5,259,0,0,1818,1817,1,0,0,0,1818,1819,1,0,0,0,1819,1821,1,0,
  	0,0,1820,1822,5,254,0,0,1821,1820,1,0,0,0,1821,1822,1,0,0,0,1822,1823,
  	1,0,0,0,1823,1825,3,1090,545,0,1824,1826,3,128,64,0,1825,1824,1,0,0,0,
  	1825,1826,1,0,0,0,1826,1831,1,0,0,0,1827,1829,5,514,0,0,1828,1827,1,0,
  	0,0,1828,1829,1,0,0,0,1829,1830,1,0,0,0,1830,1832,5,149,0,0,1831,1828,
  	1,0,0,0,1831,1832,1,0,0,0,1832,125,1,0,0,0,1833,1834,5,18,0,0,1834,1836,
  	5,377,0,0,1835,1837,5,259,0,0,1836,1835,1,0,0,0,1836,1837,1,0,0,0,1837,
  	1839,1,0,0,0,1838,1840,5,254,0,0,1839,1838,1,0,0,0,1839,1840,1,0,0,0,
  	1840,1841,1,0,0,0,1841,1843,3,1090,545,0,1842,1844,3,128,64,0,1843,1842,
  	1,0,0,0,1843,1844,1,0,0,0,1844,1849,1,0,0,0,1845,1847,5,514,0,0,1846,
  	1845,1,0,0,0,1846,1847,1,0,0,0,1847,1848,1,0,0,0,1848,1850,5,149,0,0,
  	1849,1846,1,0,0,0,1849,1850,1,0,0,0,1850,127,1,0,0,0,1851,1853,5,342,
  	0,0,1852,1854,5,254,0,0,1853,1852,1,0,0,0,1853,1854,1,0,0,0,1854,1855,
  	1,0,0,0,1855,1856,3,1128,564,0,1856,129,1,0,0,0,1857,1859,5,206,0,0,1858,
  	1857,1,0,0,0,1858,1859,1,0,0,0,1859,1860,1,0,0,0,1860,1862,5,457,0,0,
  	1861,1863,5,254,0,0,1862,1861,1,0,0,0,1862,1863,1,0,0,0,1863,1864,1,0,
  	0,0,1864,1866,3,1090,545,0,1865,1867,3,1090,545,0,1866,1865,1,0,0,0,1866,
  	1867,1,0,0,0,1867,131,1,0,0,0,1868,1870,5,386,0,0,1869,1871,5,259,0,0,
  	1870,1869,1,0,0,0,1870,1871,1,0,0,0,1871,1873,1,0,0,0,1872,1874,5,254,
  	0,0,1873,1872,1,0,0,0,1873,1874,1,0,0,0,1874,1875,1,0,0,0,1875,1876,3,
  	1090,545,0,1876,133,1,0,0,0,1877,1878,5,233,0,0,1878,1882,5,534,0,0,1879,
  	1880,3,1134,567,0,1880,1881,5,534,0,0,1881,1883,1,0,0,0,1882,1879,1,0,
  	0,0,1882,1883,1,0,0,0,1883,1891,1,0,0,0,1884,1886,3,136,68,0,1885,1884,
  	1,0,0,0,1886,1889,1,0,0,0,1887,1885,1,0,0,0,1887,1888,1,0,0,0,1888,1890,
  	1,0,0,0,1889,1887,1,0,0,0,1890,1892,5,534,0,0,1891,1887,1,0,0,0,1891,
  	1892,1,0,0,0,1892,135,1,0,0,0,1893,1898,3,138,69,0,1894,1898,3,146,73,
  	0,1895,1898,3,148,74,0,1896,1898,3,152,76,0,1897,1893,1,0,0,0,1897,1894,
  	1,0,0,0,1897,1895,1,0,0,0,1897,1896,1,0,0,0,1898,137,1,0,0,0,1899,1905,
  	5,399,0,0,1900,1903,5,326,0,0,1901,1904,3,1116,558,0,1902,1904,3,1134,
  	567,0,1903,1901,1,0,0,0,1903,1902,1,0,0,0,1904,1906,1,0,0,0,1905,1900,
  	1,0,0,0,1905,1906,1,0,0,0,1906,1907,1,0,0,0,1907,1911,5,195,0,0,1908,
  	1912,3,140,70,0,1909,1912,3,142,71,0,1910,1912,3,144,72,0,1911,1908,1,
  	0,0,0,1911,1909,1,0,0,0,1911,1910,1,0,0,0,1912,139,1,0,0,0,1913,1914,
  	3,1178,589,0,1914,1915,5,379,0,0,1915,141,1,0,0,0,1916,1918,5,158,0,0,
  	1917,1916,1,0,0,0,1917,1918,1,0,0,0,1918,1920,1,0,0,0,1919,1921,5,323,
  	0,0,1920,1919,1,0,0,0,1920,1921,1,0,0,0,1921,1922,1,0,0,0,1922,1923,7,
  	12,0,0,1923,1924,5,323,0,0,1924,1925,3,1134,567,0,1925,143,1,0,0,0,1926,
  	1928,3,1178,589,0,1927,1929,5,66,0,0,1928,1927,1,0,0,0,1928,1929,1,0,
  	0,0,1929,145,1,0,0,0,1930,1932,5,414,0,0,1931,1933,7,13,0,0,1932,1931,
  	1,0,0,0,1932,1933,1,0,0,0,1933,1935,1,0,0,0,1934,1936,5,22,0,0,1935,1934,
  	1,0,0,0,1935,1936,1,0,0,0,1936,1938,1,0,0,0,1937,1939,5,212,0,0,1938,
  	1937,1,0,0,0,1938,1939,1,0,0,0,1939,1941,1,0,0,0,1940,1942,3,1134,567,
  	0,1941,1940,1,0,0,0,1942,1943,1,0,0,0,1943,1941,1,0,0,0,1943,1944,1,0,
  	0,0,1944,147,1,0,0,0,1945,1946,5,301,0,0,1946,1948,5,206,0,0,1947,1949,
  	5,474,0,0,1948,1947,1,0,0,0,1948,1949,1,0,0,0,1949,1951,1,0,0,0,1950,
  	1952,5,94,0,0,1951,1950,1,0,0,0,1951,1952,1,0,0,0,1952,1954,1,0,0,0,1953,
  	1955,3,150,75,0,1954,1953,1,0,0,0,1955,1956,1,0,0,0,1956,1954,1,0,0,0,
  	1956,1957,1,0,0,0,1957,149,1,0,0,0,1958,1961,3,1134,567,0,1959,1960,5,
  	350,0,0,1960,1962,3,1178,589,0,1961,1959,1,0,0,0,1961,1962,1,0,0,0,1962,
  	151,1,0,0,0,1963,1964,5,77,0,0,1964,1966,5,97,0,0,1965,1967,5,212,0,0,
  	1966,1965,1,0,0,0,1966,1967,1,0,0,0,1967,1968,1,0,0,0,1968,1969,3,1134,
  	567,0,1969,153,1,0,0,0,1970,1971,5,109,0,0,1971,1972,5,145,0,0,1972,1976,
  	5,534,0,0,1973,1975,3,156,78,0,1974,1973,1,0,0,0,1975,1978,1,0,0,0,1976,
  	1974,1,0,0,0,1976,1977,1,0,0,0,1977,155,1,0,0,0,1978,1976,1,0,0,0,1979,
  	1989,3,158,79,0,1980,1989,3,208,104,0,1981,1989,3,212,106,0,1982,1989,
  	3,214,107,0,1983,1989,3,216,108,0,1984,1989,3,254,127,0,1985,1989,3,256,
  	128,0,1986,1989,3,320,160,0,1987,1989,3,396,198,0,1988,1979,1,0,0,0,1988,
  	1980,1,0,0,0,1988,1981,1,0,0,0,1988,1982,1,0,0,0,1988,1983,1,0,0,0,1988,
  	1984,1,0,0,0,1988,1985,1,0,0,0,1988,1986,1,0,0,0,1988,1987,1,0,0,0,1989,
  	157,1,0,0,0,1990,1991,5,206,0,0,1991,1992,5,419,0,0,1992,1996,5,534,0,
  	0,1993,1995,3,160,80,0,1994,1993,1,0,0,0,1995,1998,1,0,0,0,1996,1994,
  	1,0,0,0,1996,1997,1,0,0,0,1997,159,1,0,0,0,1998,1996,1,0,0,0,1999,2000,
  	7,14,0,0,2000,2007,3,1134,567,0,2001,2003,5,534,0,0,2002,2001,1,0,0,0,
  	2002,2003,1,0,0,0,2003,2004,1,0,0,0,2004,2006,3,162,81,0,2005,2002,1,
  	0,0,0,2006,2009,1,0,0,0,2007,2005,1,0,0,0,2007,2008,1,0,0,0,2008,2010,
  	1,0,0,0,2009,2007,1,0,0,0,2010,2014,5,534,0,0,2011,2013,3,434,217,0,2012,
  	2011,1,0,0,0,2013,2016,1,0,0,0,2014,2012,1,0,0,0,2014,2015,1,0,0,0,2015,
  	161,1,0,0,0,2016,2014,1,0,0,0,2017,2029,3,164,82,0,2018,2029,3,166,83,
  	0,2019,2029,3,168,84,0,2020,2029,3,172,86,0,2021,2029,3,182,91,0,2022,
  	2029,3,184,92,0,2023,2029,3,188,94,0,2024,2029,3,190,95,0,2025,2029,3,
  	204,102,0,2026,2029,3,206,103,0,2027,2029,3,200,100,0,2028,2017,1,0,0,
  	0,2028,2018,1,0,0,0,2028,2019,1,0,0,0,2028,2020,1,0,0,0,2028,2021,1,0,
  	0,0,2028,2022,1,0,0,0,2028,2023,1,0,0,0,2028,2024,1,0,0,0,2028,2025,1,
  	0,0,0,2028,2026,1,0,0,0,2028,2027,1,0,0,0,2029,163,1,0,0,0,2030,2032,
  	5,254,0,0,2031,2030,1,0,0,0,2031,2032,1,0,0,0,2032,2033,1,0,0,0,2033,
  	2034,5,203,0,0,2034,165,1,0,0,0,2035,2037,5,254,0,0,2036,2035,1,0,0,0,
  	2036,2037,1,0,0,0,2037,2038,1,0,0,0,2038,2039,5,223,0,0,2039,167,1,0,
  	0,0,2040,2042,5,46,0,0,2041,2043,5,94,0,0,2042,2041,1,0,0,0,2042,2043,
  	1,0,0,0,2043,2044,1,0,0,0,2044,2046,3,1178,589,0,2045,2047,3,170,85,0,
  	2046,2045,1,0,0,0,2046,2047,1,0,0,0,2047,2049,1,0,0,0,2048,2050,7,15,
  	0,0,2049,2048,1,0,0,0,2049,2050,1,0,0,0,2050,169,1,0,0,0,2051,2052,5,
  	489,0,0,2052,2053,3,1178,589,0,2053,171,1,0,0,0,2054,2058,5,377,0,0,2055,
  	2059,3,174,87,0,2056,2059,3,176,88,0,2057,2059,3,178,89,0,2058,2055,1,
  	0,0,0,2058,2056,1,0,0,0,2058,2057,1,0,0,0,2059,173,1,0,0,0,2060,2062,
  	5,94,0,0,2061,2060,1,0,0,0,2061,2062,1,0,0,0,2062,2063,1,0,0,0,2063,2065,
  	3,1178,589,0,2064,2066,5,63,0,0,2065,2064,1,0,0,0,2065,2066,1,0,0,0,2066,
  	175,1,0,0,0,2067,2069,5,254,0,0,2068,2067,1,0,0,0,2068,2069,1,0,0,0,2069,
  	2070,1,0,0,0,2070,2072,5,509,0,0,2071,2073,5,239,0,0,2072,2071,1,0,0,
  	0,2072,2073,1,0,0,0,2073,2075,1,0,0,0,2074,2076,5,439,0,0,2075,2074,1,
  	0,0,0,2075,2076,1,0,0,0,2076,2087,1,0,0,0,2077,2079,5,215,0,0,2078,2077,
  	1,0,0,0,2078,2079,1,0,0,0,2079,2080,1,0,0,0,2080,2082,3,1178,589,0,2081,
  	2083,3,180,90,0,2082,2081,1,0,0,0,2082,2083,1,0,0,0,2083,2085,1,0,0,0,
  	2084,2086,5,63,0,0,2085,2084,1,0,0,0,2085,2086,1,0,0,0,2086,2088,1,0,
  	0,0,2087,2078,1,0,0,0,2087,2088,1,0,0,0,2088,2094,1,0,0,0,2089,2091,5,
  	134,0,0,2090,2092,5,326,0,0,2091,2090,1,0,0,0,2091,2092,1,0,0,0,2092,
  	2093,1,0,0,0,2093,2095,3,1090,545,0,2094,2089,1,0,0,0,2094,2095,1,0,0,
  	0,2095,177,1,0,0,0,2096,2098,5,94,0,0,2097,2096,1,0,0,0,2097,2098,1,0,
  	0,0,2098,2099,1,0,0,0,2099,2100,3,1178,589,0,2100,2102,3,180,90,0,2101,
  	2103,5,63,0,0,2102,2101,1,0,0,0,2102,2103,1,0,0,0,2103,179,1,0,0,0,2104,
  	2105,5,489,0,0,2105,2106,3,1178,589,0,2106,181,1,0,0,0,2107,2116,5,261,
  	0,0,2108,2110,5,377,0,0,2109,2111,5,254,0,0,2110,2109,1,0,0,0,2110,2111,
  	1,0,0,0,2111,2117,1,0,0,0,2112,2114,5,379,0,0,2113,2115,5,21,0,0,2114,
  	2113,1,0,0,0,2114,2115,1,0,0,0,2115,2117,1,0,0,0,2116,2108,1,0,0,0,2116,
  	2112,1,0,0,0,2117,2125,1,0,0,0,2118,2126,5,325,0,0,2119,2126,5,453,0,
  	0,2120,2122,3,1128,564,0,2121,2120,1,0,0,0,2122,2123,1,0,0,0,2123,2121,
  	1,0,0,0,2123,2124,1,0,0,0,2124,2126,1,0,0,0,2125,2118,1,0,0,0,2125,2119,
  	1,0,0,0,2125,2121,1,0,0,0,2126,183,1,0,0,0,2127,2128,5,507,0,0,2128,2130,
  	5,323,0,0,2129,2131,3,186,93,0,2130,2129,1,0,0,0,2131,2132,1,0,0,0,2132,
  	2130,1,0,0,0,2132,2133,1,0,0,0,2133,185,1,0,0,0,2134,2136,3,1164,582,
  	0,2135,2137,5,254,0,0,2136,2135,1,0,0,0,2136,2137,1,0,0,0,2137,2140,1,
  	0,0,0,2138,2141,3,1090,545,0,2139,2141,3,1172,586,0,2140,2138,1,0,0,0,
  	2140,2139,1,0,0,0,2141,187,1,0,0,0,2142,2151,5,109,0,0,2143,2145,5,377,
  	0,0,2144,2146,5,254,0,0,2145,2144,1,0,0,0,2145,2146,1,0,0,0,2146,2152,
  	1,0,0,0,2147,2149,5,379,0,0,2148,2150,5,21,0,0,2149,2148,1,0,0,0,2149,
  	2150,1,0,0,0,2150,2152,1,0,0,0,2151,2143,1,0,0,0,2151,2147,1,0,0,0,2152,
  	2154,1,0,0,0,2153,2155,3,1128,564,0,2154,2153,1,0,0,0,2155,2156,1,0,0,
  	0,2156,2154,1,0,0,0,2156,2157,1,0,0,0,2157,189,1,0,0,0,2158,2160,5,277,
  	0,0,2159,2161,5,254,0,0,2160,2159,1,0,0,0,2160,2161,1,0,0,0,2161,2164,
  	1,0,0,0,2162,2165,3,1128,564,0,2163,2165,3,1178,589,0,2164,2162,1,0,0,
  	0,2164,2163,1,0,0,0,2165,2167,1,0,0,0,2166,2168,5,280,0,0,2167,2166,1,
  	0,0,0,2167,2168,1,0,0,0,2168,2172,1,0,0,0,2169,2171,3,192,96,0,2170,2169,
  	1,0,0,0,2171,2174,1,0,0,0,2172,2170,1,0,0,0,2172,2173,1,0,0,0,2173,191,
  	1,0,0,0,2174,2172,1,0,0,0,2175,2179,3,194,97,0,2176,2179,3,196,98,0,2177,
  	2179,3,198,99,0,2178,2175,1,0,0,0,2178,2176,1,0,0,0,2178,2177,1,0,0,0,
  	2179,193,1,0,0,0,2180,2182,5,514,0,0,2181,2180,1,0,0,0,2181,2182,1,0,
  	0,0,2182,2183,1,0,0,0,2183,2185,5,211,0,0,2184,2186,5,30,0,0,2185,2184,
  	1,0,0,0,2185,2186,1,0,0,0,2186,2189,1,0,0,0,2187,2190,3,1128,564,0,2188,
  	2190,3,1178,589,0,2189,2187,1,0,0,0,2189,2188,1,0,0,0,2190,195,1,0,0,
  	0,2191,2193,5,280,0,0,2192,2191,1,0,0,0,2192,2193,1,0,0,0,2193,2195,1,
  	0,0,0,2194,2196,5,30,0,0,2195,2194,1,0,0,0,2195,2196,1,0,0,0,2196,2197,
  	1,0,0,0,2197,2200,5,492,0,0,2198,2201,3,1128,564,0,2199,2201,3,1178,589,
  	0,2200,2198,1,0,0,0,2200,2199,1,0,0,0,2201,197,1,0,0,0,2202,2204,5,280,
  	0,0,2203,2202,1,0,0,0,2203,2204,1,0,0,0,2204,2206,1,0,0,0,2205,2207,5,
  	30,0,0,2206,2205,1,0,0,0,2206,2207,1,0,0,0,2207,2208,1,0,0,0,2208,2211,
  	5,48,0,0,2209,2212,3,1128,564,0,2210,2212,3,1178,589,0,2211,2209,1,0,
  	0,0,2211,2210,1,0,0,0,2212,199,1,0,0,0,2213,2215,5,378,0,0,2214,2216,
  	5,297,0,0,2215,2214,1,0,0,0,2215,2216,1,0,0,0,2216,2218,1,0,0,0,2217,
  	2219,5,254,0,0,2218,2217,1,0,0,0,2218,2219,1,0,0,0,2219,2220,1,0,0,0,
  	2220,2221,3,202,101,0,2221,201,1,0,0,0,2222,2223,3,1170,585,0,2223,203,
  	1,0,0,0,2224,2226,5,71,0,0,2225,2227,5,254,0,0,2226,2225,1,0,0,0,2226,
  	2227,1,0,0,0,2227,2228,1,0,0,0,2228,2229,3,1114,557,0,2229,205,1,0,0,
  	0,2230,2232,5,395,0,0,2231,2233,5,254,0,0,2232,2231,1,0,0,0,2232,2233,
  	1,0,0,0,2233,2239,1,0,0,0,2234,2236,5,397,0,0,2235,2237,5,21,0,0,2236,
  	2235,1,0,0,0,2236,2237,1,0,0,0,2237,2239,1,0,0,0,2238,2230,1,0,0,0,2238,
  	2234,1,0,0,0,2239,2241,1,0,0,0,2240,2242,3,1156,578,0,2241,2240,1,0,0,
  	0,2242,2243,1,0,0,0,2243,2241,1,0,0,0,2243,2244,1,0,0,0,2244,207,1,0,
  	0,0,2245,2246,5,110,0,0,2246,2247,5,419,0,0,2247,2251,5,534,0,0,2248,
  	2250,3,210,105,0,2249,2248,1,0,0,0,2250,2253,1,0,0,0,2251,2249,1,0,0,
  	0,2251,2252,1,0,0,0,2252,209,1,0,0,0,2253,2251,1,0,0,0,2254,2255,3,1178,
  	589,0,2255,2256,3,1172,586,0,2256,2257,5,253,0,0,2257,2258,3,1172,586,
  	0,2258,211,1,0,0,0,2259,2260,5,516,0,0,2260,2261,5,419,0,0,2261,2265,
  	5,534,0,0,2262,2264,3,434,217,0,2263,2262,1,0,0,0,2264,2267,1,0,0,0,2265,
  	2263,1,0,0,0,2265,2266,1,0,0,0,2266,213,1,0,0,0,2267,2265,1,0,0,0,2268,
  	2269,5,282,0,0,2269,2270,5,419,0,0,2270,2274,5,534,0,0,2271,2273,3,434,
  	217,0,2272,2271,1,0,0,0,2273,2276,1,0,0,0,2274,2272,1,0,0,0,2274,2275,
  	1,0,0,0,2275,215,1,0,0,0,2276,2274,1,0,0,0,2277,2278,5,79,0,0,2278,2279,
  	5,419,0,0,2279,2284,5,534,0,0,2280,2283,3,218,109,0,2281,2283,3,434,217,
  	0,2282,2280,1,0,0,0,2282,2281,1,0,0,0,2283,2286,1,0,0,0,2284,2282,1,0,
  	0,0,2284,2285,1,0,0,0,2285,217,1,0,0,0,2286,2284,1,0,0,0,2287,2291,3,
  	220,110,0,2288,2291,3,222,111,0,2289,2291,3,224,112,0,2290,2287,1,0,0,
  	0,2290,2288,1,0,0,0,2290,2289,1,0,0,0,2291,219,1,0,0,0,2292,2293,5,56,
  	0,0,2293,2295,3,1120,560,0,2294,2296,5,212,0,0,2295,2294,1,0,0,0,2295,
  	2296,1,0,0,0,2296,2298,1,0,0,0,2297,2299,5,243,0,0,2298,2297,1,0,0,0,
  	2298,2299,1,0,0,0,2299,2300,1,0,0,0,2300,2315,5,246,0,0,2301,2311,3,244,
  	122,0,2302,2311,3,250,125,0,2303,2311,3,236,118,0,2304,2311,3,238,119,
  	0,2305,2311,3,246,123,0,2306,2311,3,252,126,0,2307,2311,3,230,115,0,2308,
  	2311,3,240,120,0,2309,2311,3,234,117,0,2310,2301,1,0,0,0,2310,2302,1,
  	0,0,0,2310,2303,1,0,0,0,2310,2304,1,0,0,0,2310,2305,1,0,0,0,2310,2306,
  	1,0,0,0,2310,2307,1,0,0,0,2310,2308,1,0,0,0,2310,2309,1,0,0,0,2311,2314,
  	1,0,0,0,2312,2314,3,1130,565,0,2313,2310,1,0,0,0,2313,2312,1,0,0,0,2314,
  	2317,1,0,0,0,2315,2313,1,0,0,0,2315,2316,1,0,0,0,2316,2318,1,0,0,0,2317,
  	2315,1,0,0,0,2318,2319,5,534,0,0,2319,221,1,0,0,0,2320,2321,5,56,0,0,
  	2321,2323,3,1120,560,0,2322,2324,5,212,0,0,2323,2322,1,0,0,0,2323,2324,
  	1,0,0,0,2324,2325,1,0,0,0,2325,2334,5,334,0,0,2326,2333,3,226,113,0,2327,
  	2333,3,252,126,0,2328,2333,3,240,120,0,2329,2333,3,228,114,0,2330,2333,
  	3,232,116,0,2331,2333,3,242,121,0,2332,2326,1,0,0,0,2332,2327,1,0,0,0,
  	2332,2328,1,0,0,0,2332,2329,1,0,0,0,2332,2330,1,0,0,0,2332,2331,1,0,0,
  	0,2333,2336,1,0,0,0,2334,2332,1,0,0,0,2334,2335,1,0,0,0,2335,2337,1,0,
  	0,0,2336,2334,1,0,0,0,2337,2338,5,534,0,0,2338,223,1,0,0,0,2339,2340,
  	5,56,0,0,2340,2342,3,1120,560,0,2341,2343,5,212,0,0,2342,2341,1,0,0,0,
  	2342,2343,1,0,0,0,2343,2344,1,0,0,0,2344,2345,5,243,0,0,2345,2357,5,232,
  	0,0,2346,2353,3,236,118,0,2347,2353,3,238,119,0,2348,2353,3,248,124,0,
  	2349,2353,3,252,126,0,2350,2353,3,230,115,0,2351,2353,3,240,120,0,2352,
  	2346,1,0,0,0,2352,2347,1,0,0,0,2352,2348,1,0,0,0,2352,2349,1,0,0,0,2352,
  	2350,1,0,0,0,2352,2351,1,0,0,0,2353,2356,1,0,0,0,2354,2356,3,1130,565,
  	0,2355,2352,1,0,0,0,2355,2354,1,0,0,0,2356,2359,1,0,0,0,2357,2355,1,0,
  	0,0,2357,2358,1,0,0,0,2358,2360,1,0,0,0,2359,2357,1,0,0,0,2360,2361,5,
  	534,0,0,2361,225,1,0,0,0,2362,2363,5,136,0,0,2363,2365,5,105,0,0,2364,
  	2366,5,254,0,0,2365,2364,1,0,0,0,2365,2366,1,0,0,0,2366,2367,1,0,0,0,
  	2367,2368,3,1130,565,0,2368,227,1,0,0,0,2369,2370,5,136,0,0,2370,2371,
  	5,470,0,0,2371,2372,5,321,0,0,2372,2373,3,1178,589,0,2373,2381,5,487,
  	0,0,2374,2375,5,241,0,0,2375,2377,5,49,0,0,2376,2378,3,1138,569,0,2377,
  	2376,1,0,0,0,2378,2379,1,0,0,0,2379,2377,1,0,0,0,2379,2380,1,0,0,0,2380,
  	2382,1,0,0,0,2381,2374,1,0,0,0,2381,2382,1,0,0,0,2382,229,1,0,0,0,2383,
  	2384,5,158,0,0,2384,2386,5,259,0,0,2385,2387,5,254,0,0,2386,2385,1,0,
  	0,0,2386,2387,1,0,0,0,2387,2388,1,0,0,0,2388,2389,3,1130,565,0,2389,231,
  	1,0,0,0,2390,2391,5,188,0,0,2391,2393,5,259,0,0,2392,2394,5,254,0,0,2393,
  	2392,1,0,0,0,2393,2394,1,0,0,0,2394,2395,1,0,0,0,2395,2396,3,1130,565,
  	0,2396,233,1,0,0,0,2397,2399,5,295,0,0,2398,2397,1,0,0,0,2398,2399,1,
  	0,0,0,2399,2400,1,0,0,0,2400,2402,5,105,0,0,2401,2403,5,254,0,0,2402,
  	2401,1,0,0,0,2402,2403,1,0,0,0,2403,2404,1,0,0,0,2404,2405,3,1130,565,
  	0,2405,235,1,0,0,0,2406,2407,5,295,0,0,2407,2409,5,111,0,0,2408,2410,
  	5,254,0,0,2409,2408,1,0,0,0,2409,2410,1,0,0,0,2410,2411,1,0,0,0,2411,
  	2412,3,1130,565,0,2412,237,1,0,0,0,2413,2414,5,295,0,0,2414,2416,5,485,
  	0,0,2415,2417,5,254,0,0,2416,2415,1,0,0,0,2416,2417,1,0,0,0,2417,2418,
  	1,0,0,0,2418,2419,3,1130,565,0,2419,239,1,0,0,0,2420,2421,5,457,0,0,2421,
  	2423,5,259,0,0,2422,2424,5,254,0,0,2423,2422,1,0,0,0,2423,2424,1,0,0,
  	0,2424,2425,1,0,0,0,2425,2426,3,1130,565,0,2426,241,1,0,0,0,2427,2429,
  	5,467,0,0,2428,2427,1,0,0,0,2428,2429,1,0,0,0,2429,2430,1,0,0,0,2430,
  	2432,5,136,0,0,2431,2433,5,254,0,0,2432,2431,1,0,0,0,2432,2433,1,0,0,
  	0,2433,2434,1,0,0,0,2434,2435,3,1130,565,0,2435,243,1,0,0,0,2436,2438,
  	5,467,0,0,2437,2436,1,0,0,0,2437,2438,1,0,0,0,2438,2439,1,0,0,0,2439,
  	2441,5,366,0,0,2440,2442,5,254,0,0,2441,2440,1,0,0,0,2441,2442,1,0,0,
  	0,2442,2443,1,0,0,0,2443,2444,3,1130,565,0,2444,245,1,0,0,0,2445,2447,
  	5,467,0,0,2446,2445,1,0,0,0,2446,2447,1,0,0,0,2447,2448,1,0,0,0,2448,
  	2450,5,448,0,0,2449,2451,5,254,0,0,2450,2449,1,0,0,0,2450,2451,1,0,0,
  	0,2451,2452,1,0,0,0,2452,2453,3,1130,565,0,2453,247,1,0,0,0,2454,2456,
  	5,467,0,0,2455,2454,1,0,0,0,2455,2456,1,0,0,0,2456,2457,1,0,0,0,2457,
  	2459,5,475,0,0,2458,2460,5,254,0,0,2459,2458,1,0,0,0,2459,2460,1,0,0,
  	0,2460,2461,1,0,0,0,2461,2462,3,1130,565,0,2462,249,1,0,0,0,2463,2465,
  	5,467,0,0,2464,2463,1,0,0,0,2464,2465,1,0,0,0,2465,2466,1,0,0,0,2466,
  	2468,7,16,0,0,2467,2469,5,254,0,0,2468,2467,1,0,0,0,2468,2469,1,0,0,0,
  	2469,2470,1,0,0,0,2470,2471,3,1130,565,0,2471,251,1,0,0,0,2472,2473,5,
  	478,0,0,2473,2475,5,269,0,0,2474,2476,5,254,0,0,2475,2474,1,0,0,0,2475,
  	2476,1,0,0,0,2476,2477,1,0,0,0,2477,2478,3,1130,565,0,2478,253,1,0,0,
  	0,2479,2480,5,285,0,0,2480,2481,5,419,0,0,2481,2486,5,534,0,0,2482,2483,
  	5,265,0,0,2483,2484,3,1144,572,0,2484,2485,5,534,0,0,2485,2487,1,0,0,
  	0,2486,2482,1,0,0,0,2486,2487,1,0,0,0,2487,2491,1,0,0,0,2488,2490,3,434,
  	217,0,2489,2488,1,0,0,0,2490,2493,1,0,0,0,2491,2489,1,0,0,0,2491,2492,
  	1,0,0,0,2492,255,1,0,0,0,2493,2491,1,0,0,0,2494,2495,5,416,0,0,2495,2496,
  	5,419,0,0,2496,2500,5,534,0,0,2497,2499,3,258,129,0,2498,2497,1,0,0,0,
  	2499,2502,1,0,0,0,2500,2498,1,0,0,0,2500,2501,1,0,0,0,2501,257,1,0,0,
  	0,2502,2500,1,0,0,0,2503,2506,5,555,0,0,2504,2507,5,208,0,0,2505,2507,
  	3,1160,580,0,2506,2504,1,0,0,0,2506,2505,1,0,0,0,2506,2507,1,0,0,0,2507,
  	2540,1,0,0,0,2508,2539,3,260,130,0,2509,2539,3,262,131,0,2510,2539,3,
  	264,132,0,2511,2539,3,266,133,0,2512,2539,3,268,134,0,2513,2539,3,270,
  	135,0,2514,2539,3,272,136,0,2515,2539,3,274,137,0,2516,2539,3,276,138,
  	0,2517,2539,3,278,139,0,2518,2539,3,280,140,0,2519,2539,3,282,141,0,2520,
  	2539,3,284,142,0,2521,2539,3,286,143,0,2522,2539,3,288,144,0,2523,2539,
  	3,290,145,0,2524,2527,3,292,146,0,2525,2527,3,296,148,0,2526,2524,1,0,
  	0,0,2526,2525,1,0,0,0,2527,2539,1,0,0,0,2528,2539,3,298,149,0,2529,2539,
  	3,300,150,0,2530,2539,3,302,151,0,2531,2539,3,304,152,0,2532,2539,3,306,
  	153,0,2533,2539,3,308,154,0,2534,2539,3,310,155,0,2535,2539,3,312,156,
  	0,2536,2539,3,316,158,0,2537,2539,3,318,159,0,2538,2508,1,0,0,0,2538,
  	2509,1,0,0,0,2538,2510,1,0,0,0,2538,2511,1,0,0,0,2538,2512,1,0,0,0,2538,
  	2513,1,0,0,0,2538,2514,1,0,0,0,2538,2515,1,0,0,0,2538,2516,1,0,0,0,2538,
  	2517,1,0,0,0,2538,2518,1,0,0,0,2538,2519,1,0,0,0,2538,2520,1,0,0,0,2538,
  	2521,1,0,0,0,2538,2522,1,0,0,0,2538,2523,1,0,0,0,2538,2526,1,0,0,0,2538,
  	2528,1,0,0,0,2538,2529,1,0,0,0,2538,2530,1,0,0,0,2538,2531,1,0,0,0,2538,
  	2532,1,0,0,0,2538,2533,1,0,0,0,2538,2534,1,0,0,0,2538,2535,1,0,0,0,2538,
  	2536,1,0,0,0,2538,2537,1,0,0,0,2539,2542,1,0,0,0,2540,2538,1,0,0,0,2540,
  	2541,1,0,0,0,2541,2543,1,0,0,0,2542,2540,1,0,0,0,2543,2544,5,534,0,0,
  	2544,259,1,0,0,0,2545,2546,5,44,0,0,2546,2547,7,17,0,0,2547,261,1,0,0,
  	0,2548,2549,7,18,0,0,2549,263,1,0,0,0,2550,2551,5,45,0,0,2551,265,1,0,
  	0,0,2552,2553,5,187,0,0,2553,2554,7,19,0,0,2554,267,1,0,0,0,2555,2556,
  	7,20,0,0,2556,269,1,0,0,0,2557,2558,7,21,0,0,2558,271,1,0,0,0,2559,2560,
  	5,401,0,0,2560,273,1,0,0,0,2561,2562,5,498,0,0,2562,275,1,0,0,0,2563,
  	2565,5,439,0,0,2564,2566,5,254,0,0,2565,2564,1,0,0,0,2565,2566,1,0,0,
  	0,2566,2569,1,0,0,0,2567,2570,3,1074,537,0,2568,2570,3,1178,589,0,2569,
  	2567,1,0,0,0,2569,2568,1,0,0,0,2570,277,1,0,0,0,2571,2579,5,279,0,0,2572,
  	2574,5,315,0,0,2573,2572,1,0,0,0,2573,2574,1,0,0,0,2574,2576,1,0,0,0,
  	2575,2577,5,254,0,0,2576,2575,1,0,0,0,2576,2577,1,0,0,0,2577,2578,1,0,
  	0,0,2578,2580,7,22,0,0,2579,2573,1,0,0,0,2579,2580,1,0,0,0,2580,2583,
  	1,0,0,0,2581,2584,3,1074,537,0,2582,2584,3,1178,589,0,2583,2581,1,0,0,
  	0,2583,2582,1,0,0,0,2584,279,1,0,0,0,2585,2593,7,23,0,0,2586,2588,5,315,
  	0,0,2587,2586,1,0,0,0,2587,2588,1,0,0,0,2588,2590,1,0,0,0,2589,2591,5,
  	254,0,0,2590,2589,1,0,0,0,2590,2591,1,0,0,0,2591,2592,1,0,0,0,2592,2594,
  	7,22,0,0,2593,2587,1,0,0,0,2593,2594,1,0,0,0,2594,2597,1,0,0,0,2595,2598,
  	3,1074,537,0,2596,2598,3,1178,589,0,2597,2595,1,0,0,0,2597,2596,1,0,0,
  	0,2598,281,1,0,0,0,2599,2601,7,24,0,0,2600,2602,5,254,0,0,2601,2600,1,
  	0,0,0,2601,2602,1,0,0,0,2602,2605,1,0,0,0,2603,2606,3,1074,537,0,2604,
  	2606,3,1178,589,0,2605,2603,1,0,0,0,2605,2604,1,0,0,0,2606,283,1,0,0,
  	0,2607,2609,7,25,0,0,2608,2610,5,254,0,0,2609,2608,1,0,0,0,2609,2610,
  	1,0,0,0,2610,2613,1,0,0,0,2611,2614,3,1074,537,0,2612,2614,3,1178,589,
  	0,2613,2611,1,0,0,0,2613,2612,1,0,0,0,2614,285,1,0,0,0,2615,2617,5,97,
  	0,0,2616,2618,5,254,0,0,2617,2616,1,0,0,0,2617,2618,1,0,0,0,2618,2619,
  	1,0,0,0,2619,2620,3,1074,537,0,2620,287,1,0,0,0,2621,2623,5,507,0,0,2622,
  	2624,5,254,0,0,2623,2622,1,0,0,0,2623,2624,1,0,0,0,2624,2625,1,0,0,0,
  	2625,2626,3,1172,586,0,2626,289,1,0,0,0,2627,2629,7,26,0,0,2628,2630,
  	5,254,0,0,2629,2628,1,0,0,0,2629,2630,1,0,0,0,2630,2631,1,0,0,0,2631,
  	2632,3,466,233,0,2632,291,1,0,0,0,2633,2636,5,215,0,0,2634,2637,3,1074,
  	537,0,2635,2637,3,1172,586,0,2636,2634,1,0,0,0,2636,2635,1,0,0,0,2637,
  	2639,1,0,0,0,2638,2640,3,294,147,0,2639,2638,1,0,0,0,2639,2640,1,0,0,
  	0,2640,293,1,0,0,0,2641,2642,5,489,0,0,2642,2643,3,1074,537,0,2643,295,
  	1,0,0,0,2644,2645,5,506,0,0,2645,2646,3,1074,537,0,2646,297,1,0,0,0,2647,
  	2649,5,504,0,0,2648,2650,5,254,0,0,2649,2648,1,0,0,0,2649,2650,1,0,0,
  	0,2650,2651,1,0,0,0,2651,2652,7,27,0,0,2652,299,1,0,0,0,2653,2655,5,44,
  	0,0,2654,2656,5,512,0,0,2655,2654,1,0,0,0,2655,2656,1,0,0,0,2656,2657,
  	1,0,0,0,2657,2658,5,521,0,0,2658,301,1,0,0,0,2659,2661,7,28,0,0,2660,
  	2662,5,411,0,0,2661,2660,1,0,0,0,2661,2662,1,0,0,0,2662,303,1,0,0,0,2663,
  	2665,5,438,0,0,2664,2666,5,254,0,0,2665,2664,1,0,0,0,2665,2666,1,0,0,
  	0,2666,2668,1,0,0,0,2667,2663,1,0,0,0,2667,2668,1,0,0,0,2668,2669,1,0,
  	0,0,2669,2674,7,7,0,0,2670,2672,5,427,0,0,2671,2673,5,62,0,0,2672,2671,
  	1,0,0,0,2672,2673,1,0,0,0,2673,2675,1,0,0,0,2674,2670,1,0,0,0,2674,2675,
  	1,0,0,0,2675,305,1,0,0,0,2676,2677,7,29,0,0,2677,307,1,0,0,0,2678,2679,
  	7,30,0,0,2679,309,1,0,0,0,2680,2681,7,31,0,0,2681,311,1,0,0,0,2682,2684,
  	5,364,0,0,2683,2685,5,62,0,0,2684,2683,1,0,0,0,2684,2685,1,0,0,0,2685,
  	2687,1,0,0,0,2686,2688,5,254,0,0,2687,2686,1,0,0,0,2687,2688,1,0,0,0,
  	2688,2691,1,0,0,0,2689,2692,3,1074,537,0,2690,2692,3,1172,586,0,2691,
  	2689,1,0,0,0,2691,2690,1,0,0,0,2692,2694,1,0,0,0,2693,2695,3,314,157,
  	0,2694,2693,1,0,0,0,2694,2695,1,0,0,0,2695,313,1,0,0,0,2696,2697,5,321,
  	0,0,2697,2699,3,1178,589,0,2698,2700,5,487,0,0,2699,2698,1,0,0,0,2699,
  	2700,1,0,0,0,2700,315,1,0,0,0,2701,2702,7,32,0,0,2702,317,1,0,0,0,2703,
  	2704,5,522,0,0,2704,319,1,0,0,0,2705,2706,5,395,0,0,2706,2707,5,419,0,
  	0,2707,2711,5,534,0,0,2708,2710,3,322,161,0,2709,2708,1,0,0,0,2710,2713,
  	1,0,0,0,2711,2709,1,0,0,0,2711,2712,1,0,0,0,2712,321,1,0,0,0,2713,2711,
  	1,0,0,0,2714,2716,3,324,162,0,2715,2717,3,338,169,0,2716,2715,1,0,0,0,
  	2717,2718,1,0,0,0,2718,2716,1,0,0,0,2718,2719,1,0,0,0,2719,323,1,0,0,
  	0,2720,2721,5,372,0,0,2721,2723,3,1156,578,0,2722,2724,3,326,163,0,2723,
  	2722,1,0,0,0,2723,2724,1,0,0,0,2724,2738,1,0,0,0,2725,2727,3,328,164,
  	0,2726,2728,3,330,165,0,2727,2726,1,0,0,0,2727,2728,1,0,0,0,2728,2730,
  	1,0,0,0,2729,2731,3,332,166,0,2730,2729,1,0,0,0,2730,2731,1,0,0,0,2731,
  	2733,1,0,0,0,2732,2734,3,334,167,0,2733,2732,1,0,0,0,2733,2734,1,0,0,
  	0,2734,2736,1,0,0,0,2735,2737,3,336,168,0,2736,2735,1,0,0,0,2736,2737,
  	1,0,0,0,2737,2739,1,0,0,0,2738,2725,1,0,0,0,2738,2739,1,0,0,0,2739,2740,
  	1,0,0,0,2740,2741,5,534,0,0,2741,325,1,0,0,0,2742,2744,5,254,0,0,2743,
  	2742,1,0,0,0,2743,2744,1,0,0,0,2744,2745,1,0,0,0,2745,2746,5,223,0,0,
  	2746,327,1,0,0,0,2747,2756,5,340,0,0,2748,2750,5,275,0,0,2749,2751,5,
  	254,0,0,2750,2749,1,0,0,0,2750,2751,1,0,0,0,2751,2757,1,0,0,0,2752,2754,
  	5,276,0,0,2753,2755,5,21,0,0,2754,2753,1,0,0,0,2754,2755,1,0,0,0,2755,
  	2757,1,0,0,0,2756,2748,1,0,0,0,2756,2752,1,0,0,0,2756,2757,1,0,0,0,2757,
  	2758,1,0,0,0,2758,2760,3,1178,589,0,2759,2761,7,33,0,0,2760,2759,1,0,
  	0,0,2760,2761,1,0,0,0,2761,329,1,0,0,0,2762,2763,5,228,0,0,2763,2764,
  	3,1178,589,0,2764,331,1,0,0,0,2765,2766,5,210,0,0,2766,2767,5,137,0,0,
  	2767,2768,3,1178,589,0,2768,333,1,0,0,0,2769,2770,5,263,0,0,2770,2771,
  	5,137,0,0,2771,2772,3,1178,589,0,2772,335,1,0,0,0,2773,2774,5,211,0,0,
  	2774,2775,3,1178,589,0,2775,337,1,0,0,0,2776,2780,3,340,170,0,2777,2780,
  	3,342,171,0,2778,2780,3,344,172,0,2779,2776,1,0,0,0,2779,2777,1,0,0,0,
  	2779,2778,1,0,0,0,2780,339,1,0,0,0,2781,2782,3,1178,589,0,2782,2784,3,
  	1128,564,0,2783,2785,3,354,177,0,2784,2783,1,0,0,0,2784,2785,1,0,0,0,
  	2785,2787,1,0,0,0,2786,2788,3,360,180,0,2787,2786,1,0,0,0,2787,2788,1,
  	0,0,0,2788,2789,1,0,0,0,2789,2791,3,376,188,0,2790,2792,3,388,194,0,2791,
  	2790,1,0,0,0,2791,2792,1,0,0,0,2792,2793,1,0,0,0,2793,2794,5,534,0,0,
  	2794,341,1,0,0,0,2795,2797,3,1178,589,0,2796,2798,3,1128,564,0,2797,2796,
  	1,0,0,0,2797,2798,1,0,0,0,2798,2800,1,0,0,0,2799,2801,3,354,177,0,2800,
  	2799,1,0,0,0,2800,2801,1,0,0,0,2801,2802,1,0,0,0,2802,2803,3,388,194,
  	0,2803,2804,5,534,0,0,2804,343,1,0,0,0,2805,2807,3,1178,589,0,2806,2808,
  	3,1128,564,0,2807,2806,1,0,0,0,2807,2808,1,0,0,0,2808,2825,1,0,0,0,2809,
  	2824,3,366,183,0,2810,2824,3,388,194,0,2811,2824,3,370,185,0,2812,2824,
  	3,352,176,0,2813,2824,3,346,173,0,2814,2824,3,354,177,0,2815,2824,3,348,
  	174,0,2816,2821,3,372,186,0,2817,2821,3,394,197,0,2818,2821,3,374,187,
  	0,2819,2821,3,368,184,0,2820,2816,1,0,0,0,2820,2817,1,0,0,0,2820,2818,
  	1,0,0,0,2820,2819,1,0,0,0,2821,2824,1,0,0,0,2822,2824,3,350,175,0,2823,
  	2809,1,0,0,0,2823,2810,1,0,0,0,2823,2811,1,0,0,0,2823,2812,1,0,0,0,2823,
  	2813,1,0,0,0,2823,2814,1,0,0,0,2823,2815,1,0,0,0,2823,2820,1,0,0,0,2823,
  	2822,1,0,0,0,2824,2827,1,0,0,0,2825,2823,1,0,0,0,2825,2826,1,0,0,0,2826,
  	2828,1,0,0,0,2827,2825,1,0,0,0,2828,2829,5,534,0,0,2829,345,1,0,0,0,2830,
  	2832,5,44,0,0,2831,2833,5,512,0,0,2832,2831,1,0,0,0,2832,2833,1,0,0,0,
  	2833,2834,1,0,0,0,2834,2835,5,521,0,0,2835,347,1,0,0,0,2836,2838,5,74,
  	0,0,2837,2839,5,315,0,0,2838,2837,1,0,0,0,2838,2839,1,0,0,0,2839,2841,
  	1,0,0,0,2840,2842,5,254,0,0,2841,2840,1,0,0,0,2841,2842,1,0,0,0,2842,
  	2843,1,0,0,0,2843,2844,3,1178,589,0,2844,349,1,0,0,0,2845,2847,5,227,
  	0,0,2846,2848,5,242,0,0,2847,2846,1,0,0,0,2847,2848,1,0,0,0,2848,351,
  	1,0,0,0,2849,2851,7,28,0,0,2850,2852,5,411,0,0,2851,2850,1,0,0,0,2851,
  	2852,1,0,0,0,2852,353,1,0,0,0,2853,2855,5,279,0,0,2854,2853,1,0,0,0,2854,
  	2855,1,0,0,0,2855,2857,1,0,0,0,2856,2858,5,315,0,0,2857,2856,1,0,0,0,
  	2857,2858,1,0,0,0,2858,2860,1,0,0,0,2859,2861,5,254,0,0,2860,2859,1,0,
  	0,0,2860,2861,1,0,0,0,2861,2864,1,0,0,0,2862,2865,3,356,178,0,2863,2865,
  	3,358,179,0,2864,2862,1,0,0,0,2864,2863,1,0,0,0,2865,355,1,0,0,0,2866,
  	2872,3,1178,589,0,2867,2869,5,326,0,0,2868,2867,1,0,0,0,2868,2869,1,0,
  	0,0,2869,2870,1,0,0,0,2870,2871,5,309,0,0,2871,2873,5,340,0,0,2872,2868,
  	1,0,0,0,2872,2873,1,0,0,0,2873,357,1,0,0,0,2874,2875,5,348,0,0,2875,2876,
  	3,1178,589,0,2876,359,1,0,0,0,2877,2878,5,309,0,0,2878,2880,5,227,0,0,
  	2879,2881,5,254,0,0,2880,2879,1,0,0,0,2880,2881,1,0,0,0,2881,2885,1,0,
  	0,0,2882,2886,3,1178,589,0,2883,2886,3,364,182,0,2884,2886,3,362,181,
  	0,2885,2882,1,0,0,0,2885,2883,1,0,0,0,2885,2884,1,0,0,0,2886,361,1,0,
  	0,0,2887,2888,5,348,0,0,2888,2889,3,1178,589,0,2889,363,1,0,0,0,2890,
  	2891,5,309,0,0,2891,2892,5,340,0,0,2892,365,1,0,0,0,2893,2895,7,26,0,
  	0,2894,2896,5,254,0,0,2895,2894,1,0,0,0,2895,2896,1,0,0,0,2896,2897,1,
  	0,0,0,2897,2898,3,466,233,0,2898,367,1,0,0,0,2899,2901,5,402,0,0,2900,
  	2902,5,326,0,0,2901,2900,1,0,0,0,2901,2902,1,0,0,0,2902,2905,1,0,0,0,
  	2903,2906,5,209,0,0,2904,2906,3,1128,564,0,2905,2903,1,0,0,0,2905,2904,
  	1,0,0,0,2906,369,1,0,0,0,2907,2909,5,438,0,0,2908,2910,5,254,0,0,2909,
  	2908,1,0,0,0,2909,2910,1,0,0,0,2910,2911,1,0,0,0,2911,2912,7,7,0,0,2912,
  	2914,5,427,0,0,2913,2915,5,62,0,0,2914,2913,1,0,0,0,2914,2915,1,0,0,0,
  	2915,371,1,0,0,0,2916,2918,5,448,0,0,2917,2919,5,254,0,0,2918,2917,1,
  	0,0,0,2918,2919,1,0,0,0,2919,2920,1,0,0,0,2920,2921,3,1074,537,0,2921,
  	373,1,0,0,0,2922,2923,5,464,0,0,2923,2930,3,1074,537,0,2924,2926,5,529,
  	0,0,2925,2924,1,0,0,0,2925,2926,1,0,0,0,2926,2927,1,0,0,0,2927,2929,3,
  	1074,537,0,2928,2925,1,0,0,0,2929,2932,1,0,0,0,2930,2928,1,0,0,0,2930,
  	2931,1,0,0,0,2931,2944,1,0,0,0,2932,2930,1,0,0,0,2933,2934,5,503,0,0,
  	2934,2941,3,1128,564,0,2935,2937,5,529,0,0,2936,2935,1,0,0,0,2936,2937,
  	1,0,0,0,2937,2938,1,0,0,0,2938,2940,3,1128,564,0,2939,2936,1,0,0,0,2940,
  	2943,1,0,0,0,2941,2939,1,0,0,0,2941,2942,1,0,0,0,2942,2945,1,0,0,0,2943,
  	2941,1,0,0,0,2944,2933,1,0,0,0,2944,2945,1,0,0,0,2945,375,1,0,0,0,2946,
  	2948,5,496,0,0,2947,2949,5,254,0,0,2948,2947,1,0,0,0,2948,2949,1,0,0,
  	0,2949,2957,1,0,0,0,2950,2958,3,378,189,0,2951,2958,3,380,190,0,2952,
  	2958,3,382,191,0,2953,2958,3,384,192,0,2954,2958,3,386,193,0,2955,2958,
  	3,390,195,0,2956,2958,3,392,196,0,2957,2950,1,0,0,0,2957,2951,1,0,0,0,
  	2957,2952,1,0,0,0,2957,2953,1,0,0,0,2957,2954,1,0,0,0,2957,2955,1,0,0,
  	0,2957,2956,1,0,0,0,2958,377,1,0,0,0,2959,2960,5,395,0,0,2960,2963,5,
  	228,0,0,2961,2963,5,410,0,0,2962,2959,1,0,0,0,2962,2961,1,0,0,0,2963,
  	379,1,0,0,0,2964,2965,5,340,0,0,2965,2968,5,228,0,0,2966,2968,5,345,0,
  	0,2967,2964,1,0,0,0,2967,2966,1,0,0,0,2968,381,1,0,0,0,2969,2970,5,97,
  	0,0,2970,2973,5,228,0,0,2971,2973,5,58,0,0,2972,2969,1,0,0,0,2972,2971,
  	1,0,0,0,2973,2976,1,0,0,0,2974,2977,5,209,0,0,2975,2977,3,1128,564,0,
  	2976,2974,1,0,0,0,2976,2975,1,0,0,0,2977,383,1,0,0,0,2978,2979,7,34,0,
  	0,2979,385,1,0,0,0,2980,2981,5,97,0,0,2981,2984,5,211,0,0,2982,2984,5,
  	57,0,0,2983,2980,1,0,0,0,2983,2982,1,0,0,0,2984,2987,1,0,0,0,2985,2988,
  	5,209,0,0,2986,2988,3,1128,564,0,2987,2985,1,0,0,0,2987,2986,1,0,0,0,
  	2988,387,1,0,0,0,2989,2991,5,504,0,0,2990,2992,5,254,0,0,2991,2990,1,
  	0,0,0,2991,2992,1,0,0,0,2992,2994,1,0,0,0,2993,2989,1,0,0,0,2993,2994,
  	1,0,0,0,2994,2995,1,0,0,0,2995,2996,7,27,0,0,2996,389,1,0,0,0,2997,2998,
  	5,340,0,0,2998,3001,5,211,0,0,2999,3001,5,344,0,0,3000,2997,1,0,0,0,3000,
  	2999,1,0,0,0,3001,391,1,0,0,0,3002,3003,5,395,0,0,3003,3006,5,211,0,0,
  	3004,3006,5,409,0,0,3005,3002,1,0,0,0,3005,3004,1,0,0,0,3006,393,1,0,
  	0,0,3007,3009,5,507,0,0,3008,3010,5,254,0,0,3009,3008,1,0,0,0,3009,3010,
  	1,0,0,0,3010,3011,1,0,0,0,3011,3012,3,1172,586,0,3012,395,1,0,0,0,3013,
  	3014,5,363,0,0,3014,3015,5,419,0,0,3015,3019,5,534,0,0,3016,3018,3,398,
  	199,0,3017,3016,1,0,0,0,3018,3021,1,0,0,0,3019,3017,1,0,0,0,3019,3020,
  	1,0,0,0,3020,397,1,0,0,0,3021,3019,1,0,0,0,3022,3025,3,400,200,0,3023,
  	3025,3,402,201,0,3024,3022,1,0,0,0,3024,3023,1,0,0,0,3025,399,1,0,0,0,
  	3026,3027,5,265,0,0,3027,3028,3,1142,571,0,3028,3030,5,200,0,0,3029,3031,
  	3,404,202,0,3030,3029,1,0,0,0,3030,3031,1,0,0,0,3031,3033,1,0,0,0,3032,
  	3034,3,414,207,0,3033,3032,1,0,0,0,3033,3034,1,0,0,0,3034,401,1,0,0,0,
  	3035,3036,5,264,0,0,3036,3037,3,1142,571,0,3037,3039,5,238,0,0,3038,3040,
  	3,432,216,0,3039,3038,1,0,0,0,3039,3040,1,0,0,0,3040,3042,1,0,0,0,3041,
  	3043,3,430,215,0,3042,3041,1,0,0,0,3042,3043,1,0,0,0,3043,3048,1,0,0,
  	0,3044,3047,3,406,203,0,3045,3047,3,416,208,0,3046,3044,1,0,0,0,3046,
  	3045,1,0,0,0,3047,3050,1,0,0,0,3048,3046,1,0,0,0,3048,3049,1,0,0,0,3049,
  	403,1,0,0,0,3050,3048,1,0,0,0,3051,3057,5,31,0,0,3052,3054,5,434,0,0,
  	3053,3055,5,254,0,0,3054,3053,1,0,0,0,3054,3055,1,0,0,0,3055,3056,1,0,
  	0,0,3056,3058,7,35,0,0,3057,3052,1,0,0,0,3057,3058,1,0,0,0,3058,405,1,
  	0,0,0,3059,3061,5,31,0,0,3060,3062,3,408,204,0,3061,3060,1,0,0,0,3061,
  	3062,1,0,0,0,3062,3068,1,0,0,0,3063,3065,5,272,0,0,3064,3066,5,254,0,
  	0,3065,3064,1,0,0,0,3065,3066,1,0,0,0,3066,3067,1,0,0,0,3067,3069,7,36,
  	0,0,3068,3063,1,0,0,0,3068,3069,1,0,0,0,3069,3071,1,0,0,0,3070,3072,3,
  	410,205,0,3071,3070,1,0,0,0,3071,3072,1,0,0,0,3072,3074,1,0,0,0,3073,
  	3075,3,412,206,0,3074,3073,1,0,0,0,3074,3075,1,0,0,0,3075,407,1,0,0,0,
  	3076,3077,5,218,0,0,3077,3078,5,254,0,0,3078,3079,3,1172,586,0,3079,409,
  	1,0,0,0,3080,3082,5,273,0,0,3081,3083,5,254,0,0,3082,3081,1,0,0,0,3082,
  	3083,1,0,0,0,3083,3084,1,0,0,0,3084,3085,3,1172,586,0,3085,411,1,0,0,
  	0,3086,3088,5,488,0,0,3087,3089,5,254,0,0,3088,3087,1,0,0,0,3088,3089,
  	1,0,0,0,3089,3090,1,0,0,0,3090,3091,3,1172,586,0,3091,413,1,0,0,0,3092,
  	3093,5,183,0,0,3093,3095,3,1152,576,0,3094,3096,3,418,209,0,3095,3094,
  	1,0,0,0,3095,3096,1,0,0,0,3096,415,1,0,0,0,3097,3098,5,183,0,0,3098,3100,
  	3,1152,576,0,3099,3101,3,418,209,0,3100,3099,1,0,0,0,3100,3101,1,0,0,
  	0,3101,3103,1,0,0,0,3102,3104,3,426,213,0,3103,3102,1,0,0,0,3103,3104,
  	1,0,0,0,3104,3106,1,0,0,0,3105,3107,3,422,211,0,3106,3105,1,0,0,0,3106,
  	3107,1,0,0,0,3107,3109,1,0,0,0,3108,3110,3,420,210,0,3109,3108,1,0,0,
  	0,3109,3110,1,0,0,0,3110,417,1,0,0,0,3111,3112,5,212,0,0,3112,3113,3,
  	1172,586,0,3113,419,1,0,0,0,3114,3115,5,222,0,0,3115,3116,3,1128,564,
  	0,3116,421,1,0,0,0,3117,3119,5,506,0,0,3118,3120,3,424,212,0,3119,3118,
  	1,0,0,0,3120,3121,1,0,0,0,3121,3119,1,0,0,0,3121,3122,1,0,0,0,3122,423,
  	1,0,0,0,3123,3126,3,1128,564,0,3124,3126,3,1134,567,0,3125,3123,1,0,0,
  	0,3125,3124,1,0,0,0,3126,425,1,0,0,0,3127,3129,5,514,0,0,3128,3130,3,
  	428,214,0,3129,3128,1,0,0,0,3130,3131,1,0,0,0,3131,3129,1,0,0,0,3131,
  	3132,1,0,0,0,3132,427,1,0,0,0,3133,3136,3,1144,572,0,3134,3136,3,1134,
  	567,0,3135,3133,1,0,0,0,3135,3134,1,0,0,0,3136,429,1,0,0,0,3137,3139,
  	5,254,0,0,3138,3137,1,0,0,0,3138,3139,1,0,0,0,3139,3140,1,0,0,0,3140,
  	3141,5,78,0,0,3141,431,1,0,0,0,3142,3144,5,254,0,0,3143,3142,1,0,0,0,
  	3143,3144,1,0,0,0,3144,3145,1,0,0,0,3145,3146,5,223,0,0,3146,433,1,0,
  	0,0,3147,3152,3,436,218,0,3148,3152,3,438,219,0,3149,3152,3,440,220,0,
  	3150,3152,3,442,221,0,3151,3147,1,0,0,0,3151,3148,1,0,0,0,3151,3149,1,
  	0,0,0,3151,3150,1,0,0,0,3152,435,1,0,0,0,3153,3156,7,37,0,0,3154,3157,
  	5,208,0,0,3155,3157,3,1128,564,0,3156,3154,1,0,0,0,3156,3155,1,0,0,0,
  	3156,3157,1,0,0,0,3157,3181,1,0,0,0,3158,3180,3,476,238,0,3159,3180,3,
  	454,227,0,3160,3180,3,450,225,0,3161,3180,3,452,226,0,3162,3180,3,488,
  	244,0,3163,3180,3,484,242,0,3164,3180,3,464,232,0,3165,3180,3,448,224,
  	0,3166,3180,3,486,243,0,3167,3180,3,492,246,0,3168,3180,3,490,245,0,3169,
  	3180,3,494,247,0,3170,3180,3,472,236,0,3171,3180,3,458,229,0,3172,3180,
  	3,480,240,0,3173,3180,3,482,241,0,3174,3180,3,456,228,0,3175,3180,3,446,
  	223,0,3176,3180,3,502,251,0,3177,3180,3,444,222,0,3178,3180,3,474,237,
  	0,3179,3158,1,0,0,0,3179,3159,1,0,0,0,3179,3160,1,0,0,0,3179,3161,1,0,
  	0,0,3179,3162,1,0,0,0,3179,3163,1,0,0,0,3179,3164,1,0,0,0,3179,3165,1,
  	0,0,0,3179,3166,1,0,0,0,3179,3167,1,0,0,0,3179,3168,1,0,0,0,3179,3169,
  	1,0,0,0,3179,3170,1,0,0,0,3179,3171,1,0,0,0,3179,3172,1,0,0,0,3179,3173,
  	1,0,0,0,3179,3174,1,0,0,0,3179,3175,1,0,0,0,3179,3176,1,0,0,0,3179,3177,
  	1,0,0,0,3179,3178,1,0,0,0,3180,3183,1,0,0,0,3181,3179,1,0,0,0,3181,3182,
  	1,0,0,0,3182,3184,1,0,0,0,3183,3181,1,0,0,0,3184,3185,5,534,0,0,3185,
  	437,1,0,0,0,3186,3187,5,552,0,0,3187,3188,3,1128,564,0,3188,3189,3,478,
  	239,0,3189,3190,5,534,0,0,3190,439,1,0,0,0,3191,3192,5,554,0,0,3192,3193,
  	3,1126,563,0,3193,3194,3,494,247,0,3194,3195,5,534,0,0,3195,441,1,0,0,
  	0,3196,3198,5,561,0,0,3197,3196,1,0,0,0,3198,3199,1,0,0,0,3199,3197,1,
  	0,0,0,3199,3200,1,0,0,0,3200,3202,1,0,0,0,3201,3203,5,534,0,0,3202,3201,
  	1,0,0,0,3202,3203,1,0,0,0,3203,443,1,0,0,0,3204,3205,5,8,0,0,3205,445,
  	1,0,0,0,3206,3208,5,44,0,0,3207,3209,5,512,0,0,3208,3207,1,0,0,0,3208,
  	3209,1,0,0,0,3209,3210,1,0,0,0,3210,3211,7,38,0,0,3211,447,1,0,0,0,3212,
  	3213,7,39,0,0,3213,449,1,0,0,0,3214,3216,5,254,0,0,3215,3214,1,0,0,0,
  	3215,3216,1,0,0,0,3216,3217,1,0,0,0,3217,3220,5,203,0,0,3218,3219,5,49,
  	0,0,3219,3221,3,1172,586,0,3220,3218,1,0,0,0,3220,3221,1,0,0,0,3221,451,
  	1,0,0,0,3222,3224,5,254,0,0,3223,3222,1,0,0,0,3223,3224,1,0,0,0,3224,
  	3225,1,0,0,0,3225,3226,5,223,0,0,3226,453,1,0,0,0,3227,3228,7,40,0,0,
  	3228,455,1,0,0,0,3229,3231,7,28,0,0,3230,3232,5,411,0,0,3231,3230,1,0,
  	0,0,3231,3232,1,0,0,0,3232,457,1,0,0,0,3233,3234,5,321,0,0,3234,3236,
  	3,1178,589,0,3235,3237,3,460,230,0,3236,3235,1,0,0,0,3236,3237,1,0,0,
  	0,3237,3239,1,0,0,0,3238,3240,5,487,0,0,3239,3238,1,0,0,0,3239,3240,1,
  	0,0,0,3240,3246,1,0,0,0,3241,3243,5,134,0,0,3242,3244,5,326,0,0,3243,
  	3242,1,0,0,0,3243,3244,1,0,0,0,3244,3245,1,0,0,0,3245,3247,3,1090,545,
  	0,3246,3241,1,0,0,0,3246,3247,1,0,0,0,3247,3251,1,0,0,0,3248,3250,3,462,
  	231,0,3249,3248,1,0,0,0,3250,3253,1,0,0,0,3251,3249,1,0,0,0,3251,3252,
  	1,0,0,0,3252,3266,1,0,0,0,3253,3251,1,0,0,0,3254,3256,5,241,0,0,3255,
  	3257,5,49,0,0,3256,3255,1,0,0,0,3256,3257,1,0,0,0,3257,3259,1,0,0,0,3258,
  	3260,5,284,0,0,3259,3258,1,0,0,0,3259,3260,1,0,0,0,3260,3262,1,0,0,0,
  	3261,3263,3,1138,569,0,3262,3261,1,0,0,0,3263,3264,1,0,0,0,3264,3262,
  	1,0,0,0,3264,3265,1,0,0,0,3265,3267,1,0,0,0,3266,3254,1,0,0,0,3266,3267,
  	1,0,0,0,3267,459,1,0,0,0,3268,3269,5,489,0,0,3269,3270,3,1178,589,0,3270,
  	461,1,0,0,0,3271,3273,7,41,0,0,3272,3274,5,259,0,0,3273,3272,1,0,0,0,
  	3273,3274,1,0,0,0,3274,3276,1,0,0,0,3275,3277,5,254,0,0,3276,3275,1,0,
  	0,0,3276,3277,1,0,0,0,3277,3279,1,0,0,0,3278,3280,3,1090,545,0,3279,3278,
  	1,0,0,0,3280,3281,1,0,0,0,3281,3279,1,0,0,0,3281,3282,1,0,0,0,3282,463,
  	1,0,0,0,3283,3285,7,26,0,0,3284,3286,5,254,0,0,3285,3284,1,0,0,0,3285,
  	3286,1,0,0,0,3286,3287,1,0,0,0,3287,3288,3,466,233,0,3288,465,1,0,0,0,
  	3289,3291,3,468,234,0,3290,3289,1,0,0,0,3291,3292,1,0,0,0,3292,3290,1,
  	0,0,0,3292,3293,1,0,0,0,3293,3295,1,0,0,0,3294,3296,3,470,235,0,3295,
  	3294,1,0,0,0,3295,3296,1,0,0,0,3296,3298,1,0,0,0,3297,3290,1,0,0,0,3298,
  	3299,1,0,0,0,3299,3297,1,0,0,0,3299,3300,1,0,0,0,3300,467,1,0,0,0,3301,
  	3318,5,532,0,0,3302,3318,5,557,0,0,3303,3318,5,556,0,0,3304,3318,5,550,
  	0,0,3305,3318,5,529,0,0,3306,3318,5,535,0,0,3307,3318,5,528,0,0,3308,
  	3318,5,526,0,0,3309,3318,5,527,0,0,3310,3318,5,542,0,0,3311,3318,5,549,
  	0,0,3312,3318,5,547,0,0,3313,3318,5,543,0,0,3314,3318,5,540,0,0,3315,
  	3318,5,544,0,0,3316,3318,3,1178,589,0,3317,3301,1,0,0,0,3317,3302,1,0,
  	0,0,3317,3303,1,0,0,0,3317,3304,1,0,0,0,3317,3305,1,0,0,0,3317,3306,1,
  	0,0,0,3317,3307,1,0,0,0,3317,3308,1,0,0,0,3317,3309,1,0,0,0,3317,3310,
  	1,0,0,0,3317,3311,1,0,0,0,3317,3312,1,0,0,0,3317,3313,1,0,0,0,3317,3314,
  	1,0,0,0,3317,3315,1,0,0,0,3317,3316,1,0,0,0,3318,469,1,0,0,0,3319,3320,
  	5,542,0,0,3320,3321,3,1178,589,0,3321,3322,5,549,0,0,3322,471,1,0,0,0,
  	3323,3325,5,376,0,0,3324,3323,1,0,0,0,3324,3325,1,0,0,0,3325,3327,1,0,
  	0,0,3326,3328,5,49,0,0,3327,3326,1,0,0,0,3327,3328,1,0,0,0,3328,3329,
  	1,0,0,0,3329,3330,7,42,0,0,3330,473,1,0,0,0,3331,3332,5,377,0,0,3332,
  	3333,5,22,0,0,3333,475,1,0,0,0,3334,3335,5,381,0,0,3335,3336,3,1128,564,
  	0,3336,477,1,0,0,0,3337,3338,5,392,0,0,3338,3341,3,1090,545,0,3339,3340,
  	7,4,0,0,3340,3342,3,1090,545,0,3341,3339,1,0,0,0,3341,3342,1,0,0,0,3342,
  	479,1,0,0,0,3343,3345,5,438,0,0,3344,3346,5,254,0,0,3345,3344,1,0,0,0,
  	3345,3346,1,0,0,0,3346,3348,1,0,0,0,3347,3343,1,0,0,0,3347,3348,1,0,0,
  	0,3348,3349,1,0,0,0,3349,3354,7,7,0,0,3350,3352,5,427,0,0,3351,3353,5,
  	62,0,0,3352,3351,1,0,0,0,3352,3353,1,0,0,0,3353,3355,1,0,0,0,3354,3350,
  	1,0,0,0,3354,3355,1,0,0,0,3355,481,1,0,0,0,3356,3358,7,43,0,0,3357,3359,
  	7,44,0,0,3358,3357,1,0,0,0,3358,3359,1,0,0,0,3359,483,1,0,0,0,3360,3362,
  	5,254,0,0,3361,3360,1,0,0,0,3361,3362,1,0,0,0,3362,3363,1,0,0,0,3363,
  	3364,5,482,0,0,3364,485,1,0,0,0,3365,3367,5,496,0,0,3366,3368,5,254,0,
  	0,3367,3366,1,0,0,0,3367,3368,1,0,0,0,3368,3369,1,0,0,0,3369,3370,7,45,
  	0,0,3370,487,1,0,0,0,3371,3373,5,254,0,0,3372,3371,1,0,0,0,3372,3373,
  	1,0,0,0,3373,3374,1,0,0,0,3374,3375,5,497,0,0,3375,489,1,0,0,0,3376,3378,
  	5,504,0,0,3377,3379,5,254,0,0,3378,3377,1,0,0,0,3378,3379,1,0,0,0,3379,
  	3381,1,0,0,0,3380,3376,1,0,0,0,3380,3381,1,0,0,0,3381,3415,1,0,0,0,3382,
  	3384,5,42,0,0,3383,3385,7,46,0,0,3384,3383,1,0,0,0,3384,3385,1,0,0,0,
  	3385,3416,1,0,0,0,3386,3416,5,43,0,0,3387,3416,5,80,0,0,3388,3416,5,81,
  	0,0,3389,3416,5,82,0,0,3390,3416,5,83,0,0,3391,3416,5,84,0,0,3392,3416,
  	5,85,0,0,3393,3416,5,86,0,0,3394,3416,5,87,0,0,3395,3416,5,88,0,0,3396,
  	3416,5,89,0,0,3397,3416,5,90,0,0,3398,3416,5,91,0,0,3399,3416,5,98,0,
  	0,3400,3416,5,111,0,0,3401,3416,5,142,0,0,3402,3416,5,143,0,0,3403,3416,
  	5,147,0,0,3404,3416,5,194,0,0,3405,3416,5,219,0,0,3406,3416,5,240,0,0,
  	3407,3416,5,257,0,0,3408,3416,5,286,0,0,3409,3416,5,304,0,0,3410,3416,
  	5,338,0,0,3411,3416,5,349,0,0,3412,3416,5,357,0,0,3413,3416,5,373,0,0,
  	3414,3416,5,473,0,0,3415,3382,1,0,0,0,3415,3386,1,0,0,0,3415,3387,1,0,
  	0,0,3415,3388,1,0,0,0,3415,3389,1,0,0,0,3415,3390,1,0,0,0,3415,3391,1,
  	0,0,0,3415,3392,1,0,0,0,3415,3393,1,0,0,0,3415,3394,1,0,0,0,3415,3395,
  	1,0,0,0,3415,3396,1,0,0,0,3415,3397,1,0,0,0,3415,3398,1,0,0,0,3415,3399,
  	1,0,0,0,3415,3400,1,0,0,0,3415,3401,1,0,0,0,3415,3402,1,0,0,0,3415,3403,
  	1,0,0,0,3415,3404,1,0,0,0,3415,3405,1,0,0,0,3415,3406,1,0,0,0,3415,3407,
  	1,0,0,0,3415,3408,1,0,0,0,3415,3409,1,0,0,0,3415,3410,1,0,0,0,3415,3411,
  	1,0,0,0,3415,3412,1,0,0,0,3415,3413,1,0,0,0,3415,3414,1,0,0,0,3416,491,
  	1,0,0,0,3417,3418,5,506,0,0,3418,3420,7,47,0,0,3419,3421,5,323,0,0,3420,
  	3419,1,0,0,0,3420,3421,1,0,0,0,3421,3424,1,0,0,0,3422,3425,3,1170,585,
  	0,3423,3425,3,1128,564,0,3424,3422,1,0,0,0,3424,3423,1,0,0,0,3425,493,
  	1,0,0,0,3426,3428,5,507,0,0,3427,3429,5,254,0,0,3428,3427,1,0,0,0,3428,
  	3429,1,0,0,0,3429,3435,1,0,0,0,3430,3432,5,508,0,0,3431,3433,5,21,0,0,
  	3432,3431,1,0,0,0,3432,3433,1,0,0,0,3433,3435,1,0,0,0,3434,3426,1,0,0,
  	0,3434,3430,1,0,0,0,3434,3435,1,0,0,0,3435,3436,1,0,0,0,3436,3443,3,496,
  	248,0,3437,3439,5,529,0,0,3438,3437,1,0,0,0,3438,3439,1,0,0,0,3439,3440,
  	1,0,0,0,3440,3442,3,496,248,0,3441,3438,1,0,0,0,3442,3445,1,0,0,0,3443,
  	3441,1,0,0,0,3443,3444,1,0,0,0,3444,495,1,0,0,0,3445,3443,1,0,0,0,3446,
  	3448,3,498,249,0,3447,3449,3,500,250,0,3448,3447,1,0,0,0,3448,3449,1,
  	0,0,0,3449,497,1,0,0,0,3450,3453,3,1172,586,0,3451,3453,3,1170,585,0,
  	3452,3450,1,0,0,0,3452,3451,1,0,0,0,3453,499,1,0,0,0,3454,3455,7,4,0,
  	0,3455,3456,3,1172,586,0,3456,501,1,0,0,0,3457,3459,5,514,0,0,3458,3457,
  	1,0,0,0,3458,3459,1,0,0,0,3459,3460,1,0,0,0,3460,3461,5,289,0,0,3461,
  	3462,5,47,0,0,3462,503,1,0,0,0,3463,3464,5,356,0,0,3464,3466,5,145,0,
  	0,3465,3467,3,506,253,0,3466,3465,1,0,0,0,3466,3467,1,0,0,0,3467,3469,
  	1,0,0,0,3468,3470,3,508,254,0,3469,3468,1,0,0,0,3469,3470,1,0,0,0,3470,
  	3471,1,0,0,0,3471,3473,5,534,0,0,3472,3474,3,520,260,0,3473,3472,1,0,
  	0,0,3473,3474,1,0,0,0,3474,3475,1,0,0,0,3475,3476,3,526,263,0,3476,505,
  	1,0,0,0,3477,3479,7,48,0,0,3478,3480,3,510,255,0,3479,3478,1,0,0,0,3480,
  	3481,1,0,0,0,3481,3479,1,0,0,0,3481,3482,1,0,0,0,3482,507,1,0,0,0,3483,
  	3484,7,49,0,0,3484,3485,3,1128,564,0,3485,509,1,0,0,0,3486,3489,3,512,
  	256,0,3487,3489,3,516,258,0,3488,3486,1,0,0,0,3488,3487,1,0,0,0,3489,
  	511,1,0,0,0,3490,3492,5,49,0,0,3491,3490,1,0,0,0,3491,3492,1,0,0,0,3492,
  	3493,1,0,0,0,3493,3495,5,384,0,0,3494,3491,1,0,0,0,3494,3495,1,0,0,0,
  	3495,3497,1,0,0,0,3496,3498,3,514,257,0,3497,3496,1,0,0,0,3498,3499,1,
  	0,0,0,3499,3497,1,0,0,0,3499,3500,1,0,0,0,3500,513,1,0,0,0,3501,3503,
  	5,328,0,0,3502,3501,1,0,0,0,3502,3503,1,0,0,0,3503,3506,1,0,0,0,3504,
  	3507,3,1074,537,0,3505,3507,3,1134,567,0,3506,3504,1,0,0,0,3506,3505,
  	1,0,0,0,3507,3510,1,0,0,0,3508,3510,5,20,0,0,3509,3502,1,0,0,0,3509,3508,
  	1,0,0,0,3510,515,1,0,0,0,3511,3513,5,49,0,0,3512,3511,1,0,0,0,3512,3513,
  	1,0,0,0,3513,3514,1,0,0,0,3514,3516,5,507,0,0,3515,3517,3,518,259,0,3516,
  	3515,1,0,0,0,3517,3518,1,0,0,0,3518,3516,1,0,0,0,3518,3519,1,0,0,0,3519,
  	517,1,0,0,0,3520,3524,3,1074,537,0,3521,3524,3,1172,586,0,3522,3524,5,
  	20,0,0,3523,3520,1,0,0,0,3523,3521,1,0,0,0,3523,3522,1,0,0,0,3524,519,
  	1,0,0,0,3525,3526,5,127,0,0,3526,3528,5,534,0,0,3527,3529,3,522,261,0,
  	3528,3527,1,0,0,0,3529,3530,1,0,0,0,3530,3528,1,0,0,0,3530,3531,1,0,0,
  	0,3531,3532,1,0,0,0,3532,3533,5,158,0,0,3533,3534,5,127,0,0,3534,3535,
  	5,534,0,0,3535,521,1,0,0,0,3536,3537,3,524,262,0,3537,3538,5,534,0,0,
  	3538,3539,3,986,493,0,3539,3540,5,534,0,0,3540,3541,3,530,265,0,3541,
  	523,1,0,0,0,3542,3543,3,1162,581,0,3543,3545,5,419,0,0,3544,3546,3,1178,
  	589,0,3545,3544,1,0,0,0,3545,3546,1,0,0,0,3546,525,1,0,0,0,3547,3551,
  	3,530,265,0,3548,3550,3,528,264,0,3549,3548,1,0,0,0,3550,3553,1,0,0,0,
  	3551,3549,1,0,0,0,3551,3552,1,0,0,0,3552,527,1,0,0,0,3553,3551,1,0,0,
  	0,3554,3555,3,524,262,0,3555,3556,5,534,0,0,3556,3557,3,530,265,0,3557,
  	529,1,0,0,0,3558,3560,3,534,267,0,3559,3558,1,0,0,0,3560,3563,1,0,0,0,
  	3561,3559,1,0,0,0,3561,3562,1,0,0,0,3562,3567,1,0,0,0,3563,3561,1,0,0,
  	0,3564,3566,3,532,266,0,3565,3564,1,0,0,0,3566,3569,1,0,0,0,3567,3565,
  	1,0,0,0,3567,3568,1,0,0,0,3568,531,1,0,0,0,3569,3567,1,0,0,0,3570,3571,
  	3,1148,574,0,3571,3579,5,534,0,0,3572,3580,3,564,282,0,3573,3575,3,534,
  	267,0,3574,3573,1,0,0,0,3575,3578,1,0,0,0,3576,3574,1,0,0,0,3576,3577,
  	1,0,0,0,3577,3580,1,0,0,0,3578,3576,1,0,0,0,3579,3572,1,0,0,0,3579,3576,
  	1,0,0,0,3580,533,1,0,0,0,3581,3583,3,536,268,0,3582,3581,1,0,0,0,3583,
  	3586,1,0,0,0,3584,3582,1,0,0,0,3584,3585,1,0,0,0,3585,3587,1,0,0,0,3586,
  	3584,1,0,0,0,3587,3588,5,534,0,0,3588,535,1,0,0,0,3589,3639,3,538,269,
  	0,3590,3639,3,548,274,0,3591,3639,3,566,283,0,3592,3639,3,570,285,0,3593,
  	3639,3,590,295,0,3594,3639,3,594,297,0,3595,3639,3,612,306,0,3596,3639,
  	3,616,308,0,3597,3639,3,618,309,0,3598,3639,3,620,310,0,3599,3639,3,622,
  	311,0,3600,3639,3,632,316,0,3601,3639,3,648,324,0,3602,3639,3,650,325,
  	0,3603,3639,3,652,326,0,3604,3639,3,678,339,0,3605,3639,3,672,336,0,3606,
  	3639,3,674,337,0,3607,3639,3,676,338,0,3608,3639,3,682,341,0,3609,3639,
  	3,684,342,0,3610,3639,3,686,343,0,3611,3639,3,688,344,0,3612,3639,3,694,
  	347,0,3613,3639,3,700,350,0,3614,3639,3,706,353,0,3615,3639,3,708,354,
  	0,3616,3639,3,738,369,0,3617,3639,3,758,379,0,3618,3639,3,768,384,0,3619,
  	3639,3,780,390,0,3620,3639,3,794,397,0,3621,3639,3,820,410,0,3622,3639,
  	3,822,411,0,3623,3639,3,830,415,0,3624,3639,3,852,426,0,3625,3639,3,854,
  	427,0,3626,3639,3,858,429,0,3627,3639,3,862,431,0,3628,3639,3,868,434,
  	0,3629,3639,3,888,444,0,3630,3639,3,900,450,0,3631,3639,3,926,463,0,3632,
  	3639,3,930,465,0,3633,3639,3,932,466,0,3634,3639,3,946,473,0,3635,3639,
  	3,964,482,0,3636,3639,3,966,483,0,3637,3639,3,996,498,0,3638,3589,1,0,
  	0,0,3638,3590,1,0,0,0,3638,3591,1,0,0,0,3638,3592,1,0,0,0,3638,3593,1,
  	0,0,0,3638,3594,1,0,0,0,3638,3595,1,0,0,0,3638,3596,1,0,0,0,3638,3597,
  	1,0,0,0,3638,3598,1,0,0,0,3638,3599,1,0,0,0,3638,3600,1,0,0,0,3638,3601,
  	1,0,0,0,3638,3602,1,0,0,0,3638,3603,1,0,0,0,3638,3604,1,0,0,0,3638,3605,
  	1,0,0,0,3638,3606,1,0,0,0,3638,3607,1,0,0,0,3638,3608,1,0,0,0,3638,3609,
  	1,0,0,0,3638,3610,1,0,0,0,3638,3611,1,0,0,0,3638,3612,1,0,0,0,3638,3613,
  	1,0,0,0,3638,3614,1,0,0,0,3638,3615,1,0,0,0,3638,3616,1,0,0,0,3638,3617,
  	1,0,0,0,3638,3618,1,0,0,0,3638,3619,1,0,0,0,3638,3620,1,0,0,0,3638,3621,
  	1,0,0,0,3638,3622,1,0,0,0,3638,3623,1,0,0,0,3638,3624,1,0,0,0,3638,3625,
  	1,0,0,0,3638,3626,1,0,0,0,3638,3627,1,0,0,0,3638,3628,1,0,0,0,3638,3629,
  	1,0,0,0,3638,3630,1,0,0,0,3638,3631,1,0,0,0,3638,3632,1,0,0,0,3638,3633,
  	1,0,0,0,3638,3634,1,0,0,0,3638,3635,1,0,0,0,3638,3636,1,0,0,0,3638,3637,
  	1,0,0,0,3639,537,1,0,0,0,3640,3641,5,2,0,0,3641,3646,3,1074,537,0,3642,
  	3647,3,540,270,0,3643,3647,3,544,272,0,3644,3647,3,542,271,0,3645,3647,
  	3,546,273,0,3646,3642,1,0,0,0,3646,3643,1,0,0,0,3646,3644,1,0,0,0,3646,
  	3645,1,0,0,0,3646,3647,1,0,0,0,3647,3649,1,0,0,0,3648,3650,3,1028,514,
  	0,3649,3648,1,0,0,0,3649,3650,1,0,0,0,3650,3652,1,0,0,0,3651,3653,3,1030,
  	515,0,3652,3651,1,0,0,0,3652,3653,1,0,0,0,3653,3655,1,0,0,0,3654,3656,
  	5,159,0,0,3655,3654,1,0,0,0,3655,3656,1,0,0,0,3656,539,1,0,0,0,3657,3677,
  	5,215,0,0,3658,3660,5,111,0,0,3659,3661,5,519,0,0,3660,3659,1,0,0,0,3660,
  	3661,1,0,0,0,3661,3678,1,0,0,0,3662,3664,5,114,0,0,3663,3665,5,520,0,
  	0,3664,3663,1,0,0,0,3664,3665,1,0,0,0,3665,3678,1,0,0,0,3666,3678,5,115,
  	0,0,3667,3678,5,485,0,0,3668,3678,5,486,0,0,3669,3671,5,490,0,0,3670,
  	3672,5,296,0,0,3671,3670,1,0,0,0,3671,3672,1,0,0,0,3672,3678,1,0,0,0,
  	3673,3678,5,491,0,0,3674,3678,5,518,0,0,3675,3678,5,519,0,0,3676,3678,
  	5,520,0,0,3677,3658,1,0,0,0,3677,3662,1,0,0,0,3677,3666,1,0,0,0,3677,
  	3667,1,0,0,0,3677,3668,1,0,0,0,3677,3669,1,0,0,0,3677,3673,1,0,0,0,3677,
  	3674,1,0,0,0,3677,3675,1,0,0,0,3677,3676,1,0,0,0,3678,541,1,0,0,0,3679,
  	3680,5,215,0,0,3680,3681,3,1146,573,0,3681,543,1,0,0,0,3682,3683,5,215,
  	0,0,3683,3684,5,191,0,0,3684,3685,5,259,0,0,3685,545,1,0,0,0,3686,3688,
  	5,295,0,0,3687,3686,1,0,0,0,3687,3688,1,0,0,0,3688,3689,1,0,0,0,3689,
  	3690,5,105,0,0,3690,547,1,0,0,0,3691,3695,5,4,0,0,3692,3696,3,550,275,
  	0,3693,3696,3,552,276,0,3694,3696,3,554,277,0,3695,3692,1,0,0,0,3695,
  	3693,1,0,0,0,3695,3694,1,0,0,0,3696,3698,1,0,0,0,3697,3699,3,1024,512,
  	0,3698,3697,1,0,0,0,3698,3699,1,0,0,0,3699,3701,1,0,0,0,3700,3702,3,1026,
  	513,0,3701,3700,1,0,0,0,3701,3702,1,0,0,0,3702,3704,1,0,0,0,3703,3705,
  	5,160,0,0,3704,3703,1,0,0,0,3704,3705,1,0,0,0,3705,549,1,0,0,0,3706,3708,
  	3,556,278,0,3707,3706,1,0,0,0,3708,3709,1,0,0,0,3709,3707,1,0,0,0,3709,
  	3710,1,0,0,0,3710,3711,1,0,0,0,3711,3713,5,489,0,0,3712,3714,3,558,279,
  	0,3713,3712,1,0,0,0,3714,3715,1,0,0,0,3715,3713,1,0,0,0,3715,3716,1,0,
  	0,0,3716,551,1,0,0,0,3717,3719,3,556,278,0,3718,3717,1,0,0,0,3719,3720,
  	1,0,0,0,3720,3718,1,0,0,0,3720,3721,1,0,0,0,3721,3728,1,0,0,0,3722,3724,
  	5,489,0,0,3723,3725,3,560,280,0,3724,3723,1,0,0,0,3725,3726,1,0,0,0,3726,
  	3724,1,0,0,0,3726,3727,1,0,0,0,3727,3729,1,0,0,0,3728,3722,1,0,0,0,3728,
  	3729,1,0,0,0,3729,3730,1,0,0,0,3730,3732,5,222,0,0,3731,3733,3,562,281,
  	0,3732,3731,1,0,0,0,3733,3734,1,0,0,0,3734,3732,1,0,0,0,3734,3735,1,0,
  	0,0,3735,553,1,0,0,0,3736,3737,7,50,0,0,3737,3738,3,1074,537,0,3738,3739,
  	5,489,0,0,3739,3740,3,558,279,0,3740,555,1,0,0,0,3741,3744,3,1074,537,
  	0,3742,3744,3,1172,586,0,3743,3741,1,0,0,0,3743,3742,1,0,0,0,3744,557,
  	1,0,0,0,3745,3747,3,1074,537,0,3746,3748,5,412,0,0,3747,3746,1,0,0,0,
  	3747,3748,1,0,0,0,3748,559,1,0,0,0,3749,3752,3,1074,537,0,3750,3752,3,
  	1172,586,0,3751,3749,1,0,0,0,3751,3750,1,0,0,0,3752,561,1,0,0,0,3753,
  	3755,3,1074,537,0,3754,3756,5,412,0,0,3755,3754,1,0,0,0,3755,3756,1,0,
  	0,0,3756,563,1,0,0,0,3757,3759,5,224,0,0,3758,3760,5,489,0,0,3759,3758,
  	1,0,0,0,3759,3760,1,0,0,0,3760,3761,1,0,0,0,3761,3762,5,534,0,0,3762,
  	565,1,0,0,0,3763,3765,5,17,0,0,3764,3766,3,568,284,0,3765,3764,1,0,0,
  	0,3766,3767,1,0,0,0,3767,3765,1,0,0,0,3767,3768,1,0,0,0,3768,567,1,0,
  	0,0,3769,3770,3,1150,575,0,3770,3773,5,489,0,0,3771,3772,5,359,0,0,3772,
  	3774,5,489,0,0,3773,3771,1,0,0,0,3773,3774,1,0,0,0,3774,3775,1,0,0,0,
  	3775,3776,3,1150,575,0,3776,569,1,0,0,0,3777,3780,5,52,0,0,3778,3781,
  	3,1074,537,0,3779,3781,3,1172,586,0,3780,3778,1,0,0,0,3780,3779,1,0,0,
  	0,3781,3783,1,0,0,0,3782,3784,3,572,286,0,3783,3782,1,0,0,0,3783,3784,
  	1,0,0,0,3784,3786,1,0,0,0,3785,3787,3,588,294,0,3786,3785,1,0,0,0,3786,
  	3787,1,0,0,0,3787,3789,1,0,0,0,3788,3790,3,1020,510,0,3789,3788,1,0,0,
  	0,3789,3790,1,0,0,0,3790,3792,1,0,0,0,3791,3793,3,1028,514,0,3792,3791,
  	1,0,0,0,3792,3793,1,0,0,0,3793,3795,1,0,0,0,3794,3796,3,1030,515,0,3795,
  	3794,1,0,0,0,3795,3796,1,0,0,0,3796,3798,1,0,0,0,3797,3799,5,161,0,0,
  	3798,3797,1,0,0,0,3798,3799,1,0,0,0,3799,571,1,0,0,0,3800,3802,5,506,
  	0,0,3801,3803,3,574,287,0,3802,3801,1,0,0,0,3803,3804,1,0,0,0,3804,3802,
  	1,0,0,0,3804,3805,1,0,0,0,3805,573,1,0,0,0,3806,3810,3,576,288,0,3807,
  	3810,3,580,290,0,3808,3810,3,584,292,0,3809,3806,1,0,0,0,3809,3807,1,
  	0,0,0,3809,3808,1,0,0,0,3810,575,1,0,0,0,3811,3813,5,49,0,0,3812,3811,
  	1,0,0,0,3812,3813,1,0,0,0,3813,3814,1,0,0,0,3814,3816,5,384,0,0,3815,
  	3812,1,0,0,0,3815,3816,1,0,0,0,3816,3818,1,0,0,0,3817,3819,3,578,289,
  	0,3818,3817,1,0,0,0,3819,3820,1,0,0,0,3820,3818,1,0,0,0,3820,3821,1,0,
  	0,0,3821,577,1,0,0,0,3822,3823,5,5,0,0,3823,3827,5,323,0,0,3824,3827,
  	5,250,0,0,3825,3827,5,459,0,0,3826,3822,1,0,0,0,3826,3824,1,0,0,0,3826,
  	3825,1,0,0,0,3826,3827,1,0,0,0,3827,3828,1,0,0,0,3828,3832,3,1074,537,
  	0,3829,3832,3,1172,586,0,3830,3832,3,1134,567,0,3831,3826,1,0,0,0,3831,
  	3829,1,0,0,0,3831,3830,1,0,0,0,3832,3835,1,0,0,0,3833,3835,5,325,0,0,
  	3834,3831,1,0,0,0,3834,3833,1,0,0,0,3835,579,1,0,0,0,3836,3838,5,49,0,
  	0,3837,3836,1,0,0,0,3837,3838,1,0,0,0,3838,3839,1,0,0,0,3839,3841,5,507,
  	0,0,3840,3842,3,582,291,0,3841,3840,1,0,0,0,3842,3843,1,0,0,0,3843,3841,
  	1,0,0,0,3843,3844,1,0,0,0,3844,581,1,0,0,0,3845,3846,5,5,0,0,3846,3852,
  	5,323,0,0,3847,3849,5,269,0,0,3848,3850,5,323,0,0,3849,3848,1,0,0,0,3849,
  	3850,1,0,0,0,3850,3852,1,0,0,0,3851,3845,1,0,0,0,3851,3847,1,0,0,0,3851,
  	3852,1,0,0,0,3852,3855,1,0,0,0,3853,3856,3,1074,537,0,3854,3856,3,1172,
  	586,0,3855,3853,1,0,0,0,3855,3854,1,0,0,0,3856,583,1,0,0,0,3857,3859,
  	5,49,0,0,3858,3857,1,0,0,0,3858,3859,1,0,0,0,3859,3860,1,0,0,0,3860,3862,
  	5,95,0,0,3861,3863,3,586,293,0,3862,3861,1,0,0,0,3863,3864,1,0,0,0,3864,
  	3862,1,0,0,0,3864,3865,1,0,0,0,3865,585,1,0,0,0,3866,3867,5,5,0,0,3867,
  	3873,5,323,0,0,3868,3870,5,269,0,0,3869,3871,5,323,0,0,3870,3869,1,0,
  	0,0,3870,3871,1,0,0,0,3871,3873,1,0,0,0,3872,3866,1,0,0,0,3872,3868,1,
  	0,0,0,3872,3873,1,0,0,0,3873,3874,1,0,0,0,3874,3878,3,1074,537,0,3875,
  	3878,3,1172,586,0,3876,3878,5,325,0,0,3877,3872,1,0,0,0,3877,3875,1,0,
  	0,0,3877,3876,1,0,0,0,3878,587,1,0,0,0,3879,3880,7,49,0,0,3880,3881,3,
  	1074,537,0,3881,589,1,0,0,0,3882,3884,5,53,0,0,3883,3885,3,592,296,0,
  	3884,3883,1,0,0,0,3885,3886,1,0,0,0,3886,3884,1,0,0,0,3886,3887,1,0,0,
  	0,3887,591,1,0,0,0,3888,3889,3,1142,571,0,3889,3890,7,36,0,0,3890,3894,
  	1,0,0,0,3891,3894,3,1074,537,0,3892,3894,3,1172,586,0,3893,3888,1,0,0,
  	0,3893,3891,1,0,0,0,3893,3892,1,0,0,0,3894,593,1,0,0,0,3895,3897,5,67,
  	0,0,3896,3898,3,596,298,0,3897,3896,1,0,0,0,3898,3899,1,0,0,0,3899,3897,
  	1,0,0,0,3899,3900,1,0,0,0,3900,595,1,0,0,0,3901,3905,3,1134,567,0,3902,
  	3906,3,598,299,0,3903,3906,3,600,300,0,3904,3906,3,602,301,0,3905,3902,
  	1,0,0,0,3905,3903,1,0,0,0,3905,3904,1,0,0,0,3905,3906,1,0,0,0,3906,597,
  	1,0,0,0,3907,3912,7,12,0,0,3908,3910,5,212,0,0,3909,3908,1,0,0,0,3909,
  	3910,1,0,0,0,3910,3911,1,0,0,0,3911,3913,5,390,0,0,3912,3909,1,0,0,0,
  	3912,3913,1,0,0,0,3913,3922,1,0,0,0,3914,3916,5,514,0,0,3915,3914,1,0,
  	0,0,3915,3916,1,0,0,0,3916,3920,1,0,0,0,3917,3918,5,310,0,0,3918,3921,
  	5,407,0,0,3919,3921,5,286,0,0,3920,3917,1,0,0,0,3920,3919,1,0,0,0,3921,
  	3923,1,0,0,0,3922,3915,1,0,0,0,3922,3923,1,0,0,0,3923,599,1,0,0,0,3924,
  	3926,5,514,0,0,3925,3924,1,0,0,0,3925,3926,1,0,0,0,3926,3930,1,0,0,0,
  	3927,3928,5,310,0,0,3928,3931,5,407,0,0,3929,3931,5,286,0,0,3930,3927,
  	1,0,0,0,3930,3929,1,0,0,0,3931,601,1,0,0,0,3932,3934,5,514,0,0,3933,3932,
  	1,0,0,0,3933,3934,1,0,0,0,3934,3935,1,0,0,0,3935,3936,5,310,0,0,3936,
  	3940,5,511,0,0,3937,3938,5,514,0,0,3938,3940,5,511,0,0,3939,3933,1,0,
  	0,0,3939,3937,1,0,0,0,3940,3947,1,0,0,0,3941,3943,5,506,0,0,3942,3944,
  	3,604,302,0,3943,3942,1,0,0,0,3944,3945,1,0,0,0,3945,3943,1,0,0,0,3945,
  	3946,1,0,0,0,3946,3948,1,0,0,0,3947,3941,1,0,0,0,3947,3948,1,0,0,0,3948,
  	603,1,0,0,0,3949,3953,3,606,303,0,3950,3953,3,608,304,0,3951,3953,3,610,
  	305,0,3952,3949,1,0,0,0,3952,3950,1,0,0,0,3952,3951,1,0,0,0,3953,605,
  	1,0,0,0,3954,3956,5,68,0,0,3955,3957,5,323,0,0,3956,3955,1,0,0,0,3956,
  	3957,1,0,0,0,3957,3958,1,0,0,0,3958,3959,7,51,0,0,3959,607,1,0,0,0,3960,
  	3963,5,28,0,0,3961,3964,3,1074,537,0,3962,3964,3,1178,589,0,3963,3961,
  	1,0,0,0,3963,3962,1,0,0,0,3964,609,1,0,0,0,3965,3967,5,29,0,0,3966,3968,
  	5,323,0,0,3967,3966,1,0,0,0,3967,3968,1,0,0,0,3968,3971,1,0,0,0,3969,
  	3972,3,1074,537,0,3970,3972,3,1178,589,0,3971,3969,1,0,0,0,3971,3970,
  	1,0,0,0,3972,611,1,0,0,0,3973,3975,5,92,0,0,3974,3976,3,614,307,0,3975,
  	3974,1,0,0,0,3976,3977,1,0,0,0,3977,3975,1,0,0,0,3977,3978,1,0,0,0,3978,
  	3979,1,0,0,0,3979,3980,7,52,0,0,3980,3982,3,1032,516,0,3981,3983,3,1024,
  	512,0,3982,3981,1,0,0,0,3982,3983,1,0,0,0,3983,3985,1,0,0,0,3984,3986,
  	3,1026,513,0,3985,3984,1,0,0,0,3985,3986,1,0,0,0,3986,3988,1,0,0,0,3987,
  	3989,5,162,0,0,3988,3987,1,0,0,0,3988,3989,1,0,0,0,3989,613,1,0,0,0,3990,
  	3992,3,1074,537,0,3991,3993,5,412,0,0,3992,3991,1,0,0,0,3992,3993,1,0,
  	0,0,3993,615,1,0,0,0,3994,3995,5,96,0,0,3995,617,1,0,0,0,3996,3997,5,
  	131,0,0,3997,3999,3,1134,567,0,3998,4000,5,377,0,0,3999,3998,1,0,0,0,
  	3999,4000,1,0,0,0,4000,4002,1,0,0,0,4001,4003,3,1016,508,0,4002,4001,
  	1,0,0,0,4002,4003,1,0,0,0,4003,4005,1,0,0,0,4004,4006,3,1018,509,0,4005,
  	4004,1,0,0,0,4005,4006,1,0,0,0,4006,4008,1,0,0,0,4007,4009,5,163,0,0,
  	4008,4007,1,0,0,0,4008,4009,1,0,0,0,4009,619,1,0,0,0,4010,4018,5,140,
  	0,0,4011,4013,5,246,0,0,4012,4014,5,475,0,0,4013,4012,1,0,0,0,4013,4014,
  	1,0,0,0,4014,4019,1,0,0,0,4015,4016,5,232,0,0,4016,4019,5,475,0,0,4017,
  	4019,5,334,0,0,4018,4011,1,0,0,0,4018,4015,1,0,0,0,4018,4017,1,0,0,0,
  	4019,4020,1,0,0,0,4020,4022,3,1120,560,0,4021,4023,5,514,0,0,4022,4021,
  	1,0,0,0,4022,4023,1,0,0,0,4023,4024,1,0,0,0,4024,4027,5,259,0,0,4025,
  	4028,3,1074,537,0,4026,4028,3,1172,586,0,4027,4025,1,0,0,0,4027,4026,
  	1,0,0,0,4028,621,1,0,0,0,4029,4031,5,142,0,0,4030,4032,3,624,312,0,4031,
  	4030,1,0,0,0,4032,4033,1,0,0,0,4033,4031,1,0,0,0,4033,4034,1,0,0,0,4034,
  	4036,1,0,0,0,4035,4037,3,626,313,0,4036,4035,1,0,0,0,4036,4037,1,0,0,
  	0,4037,4039,1,0,0,0,4038,4040,3,628,314,0,4039,4038,1,0,0,0,4039,4040,
  	1,0,0,0,4040,4042,1,0,0,0,4041,4043,3,630,315,0,4042,4041,1,0,0,0,4042,
  	4043,1,0,0,0,4043,623,1,0,0,0,4044,4047,3,1074,537,0,4045,4047,3,1172,
  	586,0,4046,4044,1,0,0,0,4046,4045,1,0,0,0,4047,625,1,0,0,0,4048,4051,
  	5,30,0,0,4049,4052,3,1074,537,0,4050,4052,3,1172,586,0,4051,4049,1,0,
  	0,0,4051,4050,1,0,0,0,4052,627,1,0,0,0,4053,4056,5,503,0,0,4054,4057,
  	3,1146,573,0,4055,4057,3,1132,566,0,4056,4054,1,0,0,0,4056,4055,1,0,0,
  	0,4057,629,1,0,0,0,4058,4060,5,514,0,0,4059,4058,1,0,0,0,4059,4060,1,
  	0,0,0,4060,4061,1,0,0,0,4061,4062,5,310,0,0,4062,4063,5,6,0,0,4063,631,
  	1,0,0,0,4064,4067,5,144,0,0,4065,4068,3,1074,537,0,4066,4068,3,1172,586,
  	0,4067,4065,1,0,0,0,4067,4066,1,0,0,0,4068,4072,1,0,0,0,4069,4073,3,634,
  	317,0,4070,4073,3,636,318,0,4071,4073,3,638,319,0,4072,4069,1,0,0,0,4072,
  	4070,1,0,0,0,4072,4071,1,0,0,0,4073,4075,1,0,0,0,4074,4076,3,646,323,
  	0,4075,4074,1,0,0,0,4075,4076,1,0,0,0,4076,4078,1,0,0,0,4077,4079,3,1024,
  	512,0,4078,4077,1,0,0,0,4078,4079,1,0,0,0,4079,4081,1,0,0,0,4080,4082,
  	3,1026,513,0,4081,4080,1,0,0,0,4081,4082,1,0,0,0,4082,4084,1,0,0,0,4083,
  	4085,5,164,0,0,4084,4083,1,0,0,0,4084,4085,1,0,0,0,4085,633,1,0,0,0,4086,
  	4088,5,251,0,0,4087,4089,3,642,321,0,4088,4087,1,0,0,0,4089,4090,1,0,
  	0,0,4090,4088,1,0,0,0,4090,4091,1,0,0,0,4091,635,1,0,0,0,4092,4095,5,
  	251,0,0,4093,4096,3,1074,537,0,4094,4096,3,1172,586,0,4095,4093,1,0,0,
  	0,4095,4094,1,0,0,0,4096,4098,1,0,0,0,4097,4099,3,640,320,0,4098,4097,
  	1,0,0,0,4098,4099,1,0,0,0,4099,637,1,0,0,0,4100,4103,5,49,0,0,4101,4104,
  	3,1074,537,0,4102,4104,3,1172,586,0,4103,4101,1,0,0,0,4103,4102,1,0,0,
  	0,4104,4106,1,0,0,0,4105,4107,3,640,320,0,4106,4105,1,0,0,0,4106,4107,
  	1,0,0,0,4107,639,1,0,0,0,4108,4110,5,222,0,0,4109,4111,3,644,322,0,4110,
  	4109,1,0,0,0,4111,4112,1,0,0,0,4112,4110,1,0,0,0,4112,4113,1,0,0,0,4113,
  	641,1,0,0,0,4114,4116,3,1074,537,0,4115,4117,5,412,0,0,4116,4115,1,0,
  	0,0,4116,4117,1,0,0,0,4117,643,1,0,0,0,4118,4120,3,1074,537,0,4119,4121,
  	5,412,0,0,4120,4119,1,0,0,0,4120,4121,1,0,0,0,4121,645,1,0,0,0,4122,4123,
  	5,388,0,0,4123,4124,3,1074,537,0,4124,647,1,0,0,0,4125,4133,5,157,0,0,
  	4126,4128,5,246,0,0,4127,4129,5,475,0,0,4128,4127,1,0,0,0,4128,4129,1,
  	0,0,0,4129,4134,1,0,0,0,4130,4131,5,232,0,0,4131,4134,5,475,0,0,4132,
  	4134,5,334,0,0,4133,4126,1,0,0,0,4133,4130,1,0,0,0,4133,4132,1,0,0,0,
  	4134,4135,1,0,0,0,4135,4137,3,1120,560,0,4136,4138,5,514,0,0,4137,4136,
  	1,0,0,0,4137,4138,1,0,0,0,4138,4139,1,0,0,0,4139,4142,5,259,0,0,4140,
  	4143,3,1172,586,0,4141,4143,3,1074,537,0,4142,4140,1,0,0,0,4142,4141,
  	1,0,0,0,4143,649,1,0,0,0,4144,4145,5,182,0,0,4145,4152,3,1172,586,0,4146,
  	4148,5,506,0,0,4147,4149,3,1074,537,0,4148,4147,1,0,0,0,4149,4150,1,0,
  	0,0,4150,4148,1,0,0,0,4150,4151,1,0,0,0,4151,4153,1,0,0,0,4152,4146,1,
  	0,0,0,4152,4153,1,0,0,0,4153,651,1,0,0,0,4154,4155,5,193,0,0,4155,4159,
  	3,654,327,0,4156,4158,3,656,328,0,4157,4156,1,0,0,0,4158,4161,1,0,0,0,
  	4159,4157,1,0,0,0,4159,4160,1,0,0,0,4160,4163,1,0,0,0,4161,4159,1,0,0,
  	0,4162,4164,3,658,329,0,4163,4162,1,0,0,0,4164,4165,1,0,0,0,4165,4163,
  	1,0,0,0,4165,4166,1,0,0,0,4166,4168,1,0,0,0,4167,4169,3,668,334,0,4168,
  	4167,1,0,0,0,4168,4169,1,0,0,0,4169,4171,1,0,0,0,4170,4172,5,165,0,0,
  	4171,4170,1,0,0,0,4171,4172,1,0,0,0,4172,653,1,0,0,0,4173,4178,3,1074,
  	537,0,4174,4178,3,1172,586,0,4175,4178,3,1032,516,0,4176,4178,3,1046,
  	523,0,4177,4173,1,0,0,0,4177,4174,1,0,0,0,4177,4175,1,0,0,0,4177,4176,
  	1,0,0,0,4178,655,1,0,0,0,4179,4180,5,16,0,0,4180,4181,3,654,327,0,4181,
  	657,1,0,0,0,4182,4184,3,660,330,0,4183,4182,1,0,0,0,4184,4185,1,0,0,0,
  	4185,4183,1,0,0,0,4185,4186,1,0,0,0,4186,4190,1,0,0,0,4187,4189,3,536,
  	268,0,4188,4187,1,0,0,0,4189,4192,1,0,0,0,4190,4188,1,0,0,0,4190,4191,
  	1,0,0,0,4191,659,1,0,0,0,4192,4190,1,0,0,0,4193,4194,5,512,0,0,4194,4198,
  	3,662,331,0,4195,4197,3,666,333,0,4196,4195,1,0,0,0,4197,4200,1,0,0,0,
  	4198,4196,1,0,0,0,4198,4199,1,0,0,0,4199,661,1,0,0,0,4200,4198,1,0,0,
  	0,4201,4212,5,20,0,0,4202,4204,5,312,0,0,4203,4202,1,0,0,0,4203,4204,
  	1,0,0,0,4204,4205,1,0,0,0,4205,4207,3,670,335,0,4206,4208,3,664,332,0,
  	4207,4206,1,0,0,0,4207,4208,1,0,0,0,4208,4212,1,0,0,0,4209,4212,3,1046,
  	523,0,4210,4212,3,1174,587,0,4211,4201,1,0,0,0,4211,4203,1,0,0,0,4211,
  	4209,1,0,0,0,4211,4210,1,0,0,0,4212,663,1,0,0,0,4213,4214,7,4,0,0,4214,
  	4215,3,670,335,0,4215,665,1,0,0,0,4216,4217,5,16,0,0,4217,4218,3,662,
  	331,0,4218,667,1,0,0,0,4219,4220,5,512,0,0,4220,4224,5,333,0,0,4221,4223,
  	3,536,268,0,4222,4221,1,0,0,0,4223,4226,1,0,0,0,4224,4222,1,0,0,0,4224,
  	4225,1,0,0,0,4225,669,1,0,0,0,4226,4224,1,0,0,0,4227,4231,3,1074,537,
  	0,4228,4231,3,1172,586,0,4229,4231,3,1032,516,0,4230,4227,1,0,0,0,4230,
  	4228,1,0,0,0,4230,4229,1,0,0,0,4231,671,1,0,0,0,4232,4234,5,559,0,0,4233,
  	4232,1,0,0,0,4234,4235,1,0,0,0,4235,4233,1,0,0,0,4235,4236,1,0,0,0,4236,
  	673,1,0,0,0,4237,4239,5,561,0,0,4238,4237,1,0,0,0,4239,4240,1,0,0,0,4240,
  	4238,1,0,0,0,4240,4241,1,0,0,0,4241,675,1,0,0,0,4242,4244,5,560,0,0,4243,
  	4242,1,0,0,0,4244,4245,1,0,0,0,4245,4243,1,0,0,0,4245,4246,1,0,0,0,4246,
  	677,1,0,0,0,4247,4249,5,198,0,0,4248,4250,5,303,0,0,4249,4248,1,0,0,0,
  	4249,4250,1,0,0,0,4250,4252,1,0,0,0,4251,4253,5,60,0,0,4252,4251,1,0,
  	0,0,4252,4253,1,0,0,0,4253,4255,1,0,0,0,4254,4256,3,680,340,0,4255,4254,
  	1,0,0,0,4256,4257,1,0,0,0,4257,4255,1,0,0,0,4257,4258,1,0,0,0,4258,679,
  	1,0,0,0,4259,4262,3,1074,537,0,4260,4262,3,1172,586,0,4261,4259,1,0,0,
  	0,4261,4260,1,0,0,0,4262,681,1,0,0,0,4263,4265,5,199,0,0,4264,4266,5,
  	361,0,0,4265,4264,1,0,0,0,4265,4266,1,0,0,0,4266,683,1,0,0,0,4267,4268,
  	5,220,0,0,4268,4269,3,1156,578,0,4269,685,1,0,0,0,4270,4271,5,221,0,0,
  	4271,687,1,0,0,0,4272,4274,5,224,0,0,4273,4275,5,489,0,0,4274,4273,1,
  	0,0,0,4274,4275,1,0,0,0,4275,4278,1,0,0,0,4276,4279,3,690,345,0,4277,
  	4279,3,692,346,0,4278,4276,1,0,0,0,4278,4277,1,0,0,0,4279,689,1,0,0,0,
  	4280,4281,3,1150,575,0,4281,691,1,0,0,0,4282,4296,5,299,0,0,4283,4285,
  	3,1150,575,0,4284,4283,1,0,0,0,4285,4286,1,0,0,0,4286,4284,1,0,0,0,4286,
  	4287,1,0,0,0,4287,4293,1,0,0,0,4288,4290,5,134,0,0,4289,4291,5,326,0,
  	0,4290,4289,1,0,0,0,4290,4291,1,0,0,0,4291,4292,1,0,0,0,4292,4294,3,1074,
  	537,0,4293,4288,1,0,0,0,4293,4294,1,0,0,0,4294,4296,1,0,0,0,4295,4282,
  	1,0,0,0,4295,4284,1,0,0,0,4296,693,1,0,0,0,4297,4298,5,236,0,0,4298,4299,
  	3,1046,523,0,4299,4301,3,696,348,0,4300,4302,3,698,349,0,4301,4300,1,
  	0,0,0,4301,4302,1,0,0,0,4302,4304,1,0,0,0,4303,4305,5,166,0,0,4304,4303,
  	1,0,0,0,4304,4305,1,0,0,0,4305,695,1,0,0,0,4306,4308,5,480,0,0,4307,4306,
  	1,0,0,0,4307,4308,1,0,0,0,4308,4317,1,0,0,0,4309,4310,5,309,0,0,4310,
  	4318,5,426,0,0,4311,4313,3,536,268,0,4312,4311,1,0,0,0,4313,4316,1,0,
  	0,0,4314,4312,1,0,0,0,4314,4315,1,0,0,0,4315,4318,1,0,0,0,4316,4314,1,
  	0,0,0,4317,4309,1,0,0,0,4317,4314,1,0,0,0,4318,697,1,0,0,0,4319,4328,
  	5,154,0,0,4320,4321,5,309,0,0,4321,4329,5,426,0,0,4322,4324,3,536,268,
  	0,4323,4322,1,0,0,0,4324,4327,1,0,0,0,4325,4323,1,0,0,0,4325,4326,1,0,
  	0,0,4326,4329,1,0,0,0,4327,4325,1,0,0,0,4328,4320,1,0,0,0,4328,4325,1,
  	0,0,0,4329,699,1,0,0,0,4330,4332,5,244,0,0,4331,4333,3,1074,537,0,4332,
  	4331,1,0,0,0,4333,4334,1,0,0,0,4334,4332,1,0,0,0,4334,4335,1,0,0,0,4335,
  	4337,1,0,0,0,4336,4338,3,702,351,0,4337,4336,1,0,0,0,4337,4338,1,0,0,
  	0,4338,701,1,0,0,0,4339,4341,5,394,0,0,4340,4342,3,704,352,0,4341,4340,
  	1,0,0,0,4342,4343,1,0,0,0,4343,4341,1,0,0,0,4343,4344,1,0,0,0,4344,703,
  	1,0,0,0,4345,4347,7,53,0,0,4346,4348,5,109,0,0,4347,4346,1,0,0,0,4347,
  	4348,1,0,0,0,4348,4349,1,0,0,0,4349,4352,5,49,0,0,4350,4353,3,1074,537,
  	0,4351,4353,3,1172,586,0,4352,4350,1,0,0,0,4352,4351,1,0,0,0,4353,705,
  	1,0,0,0,4354,4356,5,245,0,0,4355,4357,3,1156,578,0,4356,4355,1,0,0,0,
  	4357,4358,1,0,0,0,4358,4356,1,0,0,0,4358,4359,1,0,0,0,4359,707,1,0,0,
  	0,4360,4361,5,248,0,0,4361,4366,3,1074,537,0,4362,4367,3,710,355,0,4363,
  	4367,3,712,356,0,4364,4367,3,714,357,0,4365,4367,3,716,358,0,4366,4362,
  	1,0,0,0,4366,4363,1,0,0,0,4366,4364,1,0,0,0,4366,4365,1,0,0,0,4367,709,
  	1,0,0,0,4368,4370,5,472,0,0,4369,4371,3,718,359,0,4370,4369,1,0,0,0,4371,
  	4372,1,0,0,0,4372,4370,1,0,0,0,4372,4373,1,0,0,0,4373,711,1,0,0,0,4374,
  	4377,5,394,0,0,4375,4378,3,722,361,0,4376,4378,3,726,363,0,4377,4375,
  	1,0,0,0,4377,4376,1,0,0,0,4378,4379,1,0,0,0,4379,4377,1,0,0,0,4379,4380,
  	1,0,0,0,4380,713,1,0,0,0,4381,4383,5,472,0,0,4382,4384,3,718,359,0,4383,
  	4382,1,0,0,0,4384,4385,1,0,0,0,4385,4383,1,0,0,0,4385,4386,1,0,0,0,4386,
  	4388,1,0,0,0,4387,4389,3,712,356,0,4388,4387,1,0,0,0,4389,4390,1,0,0,
  	0,4390,4388,1,0,0,0,4390,4391,1,0,0,0,4391,715,1,0,0,0,4392,4395,5,101,
  	0,0,4393,4396,3,1074,537,0,4394,4396,3,1172,586,0,4395,4393,1,0,0,0,4395,
  	4394,1,0,0,0,4396,4397,1,0,0,0,4397,4401,3,734,367,0,4398,4400,3,736,
  	368,0,4399,4398,1,0,0,0,4400,4403,1,0,0,0,4401,4399,1,0,0,0,4401,4402,
  	1,0,0,0,4402,717,1,0,0,0,4403,4401,1,0,0,0,4404,4405,3,1074,537,0,4405,
  	4408,5,212,0,0,4406,4409,3,720,360,0,4407,4409,3,724,362,0,4408,4406,
  	1,0,0,0,4408,4407,1,0,0,0,4409,4410,1,0,0,0,4410,4408,1,0,0,0,4410,4411,
  	1,0,0,0,4411,719,1,0,0,0,4412,4416,5,63,0,0,4413,4415,3,736,368,0,4414,
  	4413,1,0,0,0,4415,4418,1,0,0,0,4416,4414,1,0,0,0,4416,4417,1,0,0,0,4417,
  	721,1,0,0,0,4418,4416,1,0,0,0,4419,4420,5,63,0,0,4420,4424,3,732,366,
  	0,4421,4423,3,736,368,0,4422,4421,1,0,0,0,4423,4426,1,0,0,0,4424,4422,
  	1,0,0,0,4424,4425,1,0,0,0,4425,723,1,0,0,0,4426,4424,1,0,0,0,4427,4429,
  	7,54,0,0,4428,4430,3,728,364,0,4429,4428,1,0,0,0,4430,4431,1,0,0,0,4431,
  	4429,1,0,0,0,4431,4432,1,0,0,0,4432,725,1,0,0,0,4433,4435,7,55,0,0,4434,
  	4436,3,730,365,0,4435,4434,1,0,0,0,4436,4437,1,0,0,0,4437,4435,1,0,0,
  	0,4437,4438,1,0,0,0,4438,727,1,0,0,0,4439,4442,3,1074,537,0,4440,4442,
  	3,1172,586,0,4441,4439,1,0,0,0,4441,4440,1,0,0,0,4442,4446,1,0,0,0,4443,
  	4445,3,736,368,0,4444,4443,1,0,0,0,4445,4448,1,0,0,0,4446,4444,1,0,0,
  	0,4446,4447,1,0,0,0,4447,729,1,0,0,0,4448,4446,1,0,0,0,4449,4452,3,1074,
  	537,0,4450,4452,3,1172,586,0,4451,4449,1,0,0,0,4451,4450,1,0,0,0,4452,
  	4453,1,0,0,0,4453,4457,3,732,366,0,4454,4456,3,736,368,0,4455,4454,1,
  	0,0,0,4456,4459,1,0,0,0,4457,4455,1,0,0,0,4457,4458,1,0,0,0,4458,731,
  	1,0,0,0,4459,4457,1,0,0,0,4460,4463,5,49,0,0,4461,4464,3,1074,537,0,4462,
  	4464,3,1172,586,0,4463,4461,1,0,0,0,4463,4462,1,0,0,0,4464,733,1,0,0,
  	0,4465,4468,5,489,0,0,4466,4469,3,1074,537,0,4467,4469,3,1172,586,0,4468,
  	4466,1,0,0,0,4468,4467,1,0,0,0,4469,735,1,0,0,0,4470,4472,7,56,0,0,4471,
  	4473,5,243,0,0,4472,4471,1,0,0,0,4472,4473,1,0,0,0,4473,4476,1,0,0,0,
  	4474,4477,3,1074,537,0,4475,4477,3,1172,586,0,4476,4474,1,0,0,0,4476,
  	4475,1,0,0,0,4477,737,1,0,0,0,4478,4479,5,294,0,0,4479,4481,3,1134,567,
  	0,4480,4482,3,740,370,0,4481,4480,1,0,0,0,4482,4483,1,0,0,0,4483,4481,
  	1,0,0,0,4483,4484,1,0,0,0,4484,4486,1,0,0,0,4485,4487,3,742,371,0,4486,
  	4485,1,0,0,0,4486,4487,1,0,0,0,4487,4491,1,0,0,0,4488,4490,3,748,374,
  	0,4489,4488,1,0,0,0,4490,4493,1,0,0,0,4491,4489,1,0,0,0,4491,4492,1,0,
  	0,0,4492,4495,1,0,0,0,4493,4491,1,0,0,0,4494,4496,3,750,375,0,4495,4494,
  	1,0,0,0,4495,4496,1,0,0,0,4496,4500,1,0,0,0,4497,4499,3,754,377,0,4498,
  	4497,1,0,0,0,4499,4502,1,0,0,0,4500,4498,1,0,0,0,4500,4501,1,0,0,0,4501,
  	739,1,0,0,0,4502,4500,1,0,0,0,4503,4505,5,326,0,0,4504,4503,1,0,0,0,4504,
  	4505,1,0,0,0,4505,4506,1,0,0,0,4506,4508,7,41,0,0,4507,4509,5,259,0,0,
  	4508,4507,1,0,0,0,4508,4509,1,0,0,0,4509,4511,1,0,0,0,4510,4512,3,1090,
  	545,0,4511,4510,1,0,0,0,4512,4513,1,0,0,0,4513,4511,1,0,0,0,4513,4514,
  	1,0,0,0,4514,741,1,0,0,0,4515,4517,5,72,0,0,4516,4515,1,0,0,0,4516,4517,
  	1,0,0,0,4517,4518,1,0,0,0,4518,4520,5,428,0,0,4519,4521,5,254,0,0,4520,
  	4519,1,0,0,0,4520,4521,1,0,0,0,4521,4523,1,0,0,0,4522,4524,3,1114,557,
  	0,4523,4522,1,0,0,0,4524,4525,1,0,0,0,4525,4523,1,0,0,0,4525,4526,1,0,
  	0,0,4526,4528,1,0,0,0,4527,4529,3,744,372,0,4528,4527,1,0,0,0,4528,4529,
  	1,0,0,0,4529,4531,1,0,0,0,4530,4532,3,746,373,0,4531,4530,1,0,0,0,4531,
  	4532,1,0,0,0,4532,743,1,0,0,0,4533,4535,5,212,0,0,4534,4533,1,0,0,0,4534,
  	4535,1,0,0,0,4535,4536,1,0,0,0,4536,4537,5,14,0,0,4537,4538,5,254,0,0,
  	4538,4539,3,1114,557,0,4539,745,1,0,0,0,4540,4542,5,212,0,0,4541,4540,
  	1,0,0,0,4541,4542,1,0,0,0,4542,4543,1,0,0,0,4543,4545,5,304,0,0,4544,
  	4546,5,254,0,0,4545,4544,1,0,0,0,4545,4546,1,0,0,0,4546,4547,1,0,0,0,
  	4547,4548,3,1114,557,0,4548,747,1,0,0,0,4549,4551,5,506,0,0,4550,4552,
  	3,1134,567,0,4551,4550,1,0,0,0,4552,4553,1,0,0,0,4553,4551,1,0,0,0,4553,
  	4554,1,0,0,0,4554,749,1,0,0,0,4555,4556,5,334,0,0,4556,4558,5,356,0,0,
  	4557,4559,5,254,0,0,4558,4557,1,0,0,0,4558,4559,1,0,0,0,4559,4560,1,0,
  	0,0,4560,4562,3,1150,575,0,4561,4563,3,752,376,0,4562,4561,1,0,0,0,4562,
  	4563,1,0,0,0,4563,751,1,0,0,0,4564,4565,7,4,0,0,4565,4566,3,1150,575,
  	0,4566,753,1,0,0,0,4567,4569,5,222,0,0,4568,4570,3,756,378,0,4569,4568,
  	1,0,0,0,4570,4571,1,0,0,0,4571,4569,1,0,0,0,4571,4572,1,0,0,0,4572,755,
  	1,0,0,0,4573,4583,3,1134,567,0,4574,4584,5,286,0,0,4575,4584,5,415,0,
  	0,4576,4577,5,310,0,0,4577,4584,5,407,0,0,4578,4584,5,106,0,0,4579,4584,
  	5,387,0,0,4580,4581,5,514,0,0,4581,4582,5,391,0,0,4582,4584,5,106,0,0,
  	4583,4574,1,0,0,0,4583,4575,1,0,0,0,4583,4576,1,0,0,0,4583,4578,1,0,0,
  	0,4583,4579,1,0,0,0,4583,4580,1,0,0,0,4583,4584,1,0,0,0,4584,757,1,0,
  	0,0,4585,4587,5,300,0,0,4586,4588,5,9,0,0,4587,4586,1,0,0,0,4587,4588,
  	1,0,0,0,4588,4591,1,0,0,0,4589,4592,3,760,380,0,4590,4592,3,764,382,0,
  	4591,4589,1,0,0,0,4591,4590,1,0,0,0,4592,759,1,0,0,0,4593,4594,3,762,
  	381,0,4594,4596,5,489,0,0,4595,4597,3,1074,537,0,4596,4595,1,0,0,0,4597,
  	4598,1,0,0,0,4598,4596,1,0,0,0,4598,4599,1,0,0,0,4599,761,1,0,0,0,4600,
  	4603,3,1074,537,0,4601,4603,3,1172,586,0,4602,4600,1,0,0,0,4602,4601,
  	1,0,0,0,4603,763,1,0,0,0,4604,4605,7,50,0,0,4605,4606,3,766,383,0,4606,
  	4608,5,489,0,0,4607,4609,3,1074,537,0,4608,4607,1,0,0,0,4609,4610,1,0,
  	0,0,4610,4608,1,0,0,0,4610,4611,1,0,0,0,4611,765,1,0,0,0,4612,4613,3,
  	1074,537,0,4613,767,1,0,0,0,4614,4617,5,302,0,0,4615,4618,3,1074,537,
  	0,4616,4618,3,1172,586,0,4617,4615,1,0,0,0,4617,4616,1,0,0,0,4618,4619,
  	1,0,0,0,4619,4622,5,49,0,0,4620,4623,3,770,385,0,4621,4623,3,774,387,
  	0,4622,4620,1,0,0,0,4622,4621,1,0,0,0,4623,4625,1,0,0,0,4624,4626,3,1024,
  	512,0,4625,4624,1,0,0,0,4625,4626,1,0,0,0,4626,4628,1,0,0,0,4627,4629,
  	3,1026,513,0,4628,4627,1,0,0,0,4628,4629,1,0,0,0,4629,4631,1,0,0,0,4630,
  	4632,5,167,0,0,4631,4630,1,0,0,0,4631,4632,1,0,0,0,4632,769,1,0,0,0,4633,
  	4635,3,772,386,0,4634,4633,1,0,0,0,4635,4636,1,0,0,0,4636,4634,1,0,0,
  	0,4636,4637,1,0,0,0,4637,771,1,0,0,0,4638,4640,3,1074,537,0,4639,4641,
  	5,412,0,0,4640,4639,1,0,0,0,4640,4641,1,0,0,0,4641,773,1,0,0,0,4642,4643,
  	3,776,388,0,4643,4645,5,222,0,0,4644,4646,3,778,389,0,4645,4644,1,0,0,
  	0,4646,4647,1,0,0,0,4647,4645,1,0,0,0,4647,4648,1,0,0,0,4648,775,1,0,
  	0,0,4649,4652,3,1074,537,0,4650,4652,3,1172,586,0,4651,4649,1,0,0,0,4651,
  	4650,1,0,0,0,4652,777,1,0,0,0,4653,4655,3,1074,537,0,4654,4656,5,412,
  	0,0,4655,4654,1,0,0,0,4655,4656,1,0,0,0,4656,779,1,0,0,0,4657,4662,5,
  	327,0,0,4658,4663,3,782,391,0,4659,4663,3,786,393,0,4660,4663,3,790,395,
  	0,4661,4663,3,792,396,0,4662,4658,1,0,0,0,4662,4659,1,0,0,0,4662,4660,
  	1,0,0,0,4662,4661,1,0,0,0,4663,4664,1,0,0,0,4664,4662,1,0,0,0,4664,4665,
  	1,0,0,0,4665,781,1,0,0,0,4666,4668,5,246,0,0,4667,4669,3,784,392,0,4668,
  	4667,1,0,0,0,4669,4670,1,0,0,0,4670,4668,1,0,0,0,4670,4671,1,0,0,0,4671,
  	783,1,0,0,0,4672,4679,3,1134,567,0,4673,4680,5,406,0,0,4674,4676,5,514,
  	0,0,4675,4674,1,0,0,0,4675,4676,1,0,0,0,4676,4677,1,0,0,0,4677,4678,5,
  	310,0,0,4678,4680,5,407,0,0,4679,4673,1,0,0,0,4679,4675,1,0,0,0,4679,
  	4680,1,0,0,0,4680,785,1,0,0,0,4681,4683,5,334,0,0,4682,4684,3,788,394,
  	0,4683,4682,1,0,0,0,4684,4685,1,0,0,0,4685,4683,1,0,0,0,4685,4686,1,0,
  	0,0,4686,787,1,0,0,0,4687,4693,3,1134,567,0,4688,4690,5,514,0,0,4689,
  	4688,1,0,0,0,4689,4690,1,0,0,0,4690,4691,1,0,0,0,4691,4692,5,310,0,0,
  	4692,4694,5,407,0,0,4693,4689,1,0,0,0,4693,4694,1,0,0,0,4694,789,1,0,
  	0,0,4695,4697,5,232,0,0,4696,4698,3,1134,567,0,4697,4696,1,0,0,0,4698,
  	4699,1,0,0,0,4699,4697,1,0,0,0,4699,4700,1,0,0,0,4700,791,1,0,0,0,4701,
  	4703,5,201,0,0,4702,4704,3,1134,567,0,4703,4702,1,0,0,0,4704,4705,1,0,
  	0,0,4705,4703,1,0,0,0,4705,4706,1,0,0,0,4706,793,1,0,0,0,4707,4710,5,
  	343,0,0,4708,4711,3,796,398,0,4709,4711,3,798,399,0,4710,4708,1,0,0,0,
  	4710,4709,1,0,0,0,4711,795,1,0,0,0,4712,4714,3,800,400,0,4713,4712,1,
  	0,0,0,4713,4714,1,0,0,0,4714,4718,1,0,0,0,4715,4717,3,536,268,0,4716,
  	4715,1,0,0,0,4717,4720,1,0,0,0,4718,4716,1,0,0,0,4718,4719,1,0,0,0,4719,
  	4721,1,0,0,0,4720,4718,1,0,0,0,4721,4722,5,169,0,0,4722,797,1,0,0,0,4723,
  	4726,3,1150,575,0,4724,4725,7,4,0,0,4725,4727,3,1150,575,0,4726,4724,
  	1,0,0,0,4726,4727,1,0,0,0,4727,4729,1,0,0,0,4728,4730,3,800,400,0,4729,
  	4728,1,0,0,0,4729,4730,1,0,0,0,4730,799,1,0,0,0,4731,4735,3,802,401,0,
  	4732,4735,3,804,402,0,4733,4735,3,806,403,0,4734,4731,1,0,0,0,4734,4732,
  	1,0,0,0,4734,4733,1,0,0,0,4735,801,1,0,0,0,4736,4739,3,1074,537,0,4737,
  	4739,3,1178,589,0,4738,4736,1,0,0,0,4738,4737,1,0,0,0,4739,4740,1,0,0,
  	0,4740,4741,5,487,0,0,4741,803,1,0,0,0,4742,4744,3,818,409,0,4743,4742,
  	1,0,0,0,4743,4744,1,0,0,0,4744,4745,1,0,0,0,4745,4746,5,501,0,0,4746,
  	4747,3,1046,523,0,4747,805,1,0,0,0,4748,4749,3,818,409,0,4749,4750,3,
  	808,404,0,4750,4756,1,0,0,0,4751,4753,3,808,404,0,4752,4754,3,818,409,
  	0,4753,4752,1,0,0,0,4753,4754,1,0,0,0,4754,4756,1,0,0,0,4755,4748,1,0,
  	0,0,4755,4751,1,0,0,0,4756,807,1,0,0,0,4757,4758,5,509,0,0,4758,4762,
  	3,810,405,0,4759,4761,3,812,406,0,4760,4759,1,0,0,0,4761,4764,1,0,0,0,
  	4762,4760,1,0,0,0,4762,4763,1,0,0,0,4763,809,1,0,0,0,4764,4762,1,0,0,
  	0,4765,4768,3,1074,537,0,4766,4768,3,1172,586,0,4767,4765,1,0,0,0,4767,
  	4766,1,0,0,0,4768,4769,1,0,0,0,4769,4770,3,814,407,0,4770,4771,3,816,
  	408,0,4771,4772,3,804,402,0,4772,811,1,0,0,0,4773,4774,5,7,0,0,4774,4775,
  	3,810,405,0,4775,813,1,0,0,0,4776,4780,5,215,0,0,4777,4781,3,1074,537,
  	0,4778,4781,3,1172,586,0,4779,4781,3,1032,516,0,4780,4777,1,0,0,0,4780,
  	4778,1,0,0,0,4780,4779,1,0,0,0,4781,815,1,0,0,0,4782,4786,5,49,0,0,4783,
  	4787,3,1074,537,0,4784,4787,3,1172,586,0,4785,4787,3,1032,516,0,4786,
  	4783,1,0,0,0,4786,4784,1,0,0,0,4786,4785,1,0,0,0,4787,817,1,0,0,0,4788,
  	4790,5,514,0,0,4789,4788,1,0,0,0,4789,4790,1,0,0,0,4790,4791,1,0,0,0,
  	4791,4792,5,477,0,0,4792,4793,7,56,0,0,4793,819,1,0,0,0,4794,4796,5,365,
  	0,0,4795,4797,3,1120,560,0,4796,4795,1,0,0,0,4797,4798,1,0,0,0,4798,4796,
  	1,0,0,0,4798,4799,1,0,0,0,4799,821,1,0,0,0,4800,4801,5,374,0,0,4801,4803,
  	3,1134,567,0,4802,4804,5,309,0,0,4803,4802,1,0,0,0,4803,4804,1,0,0,0,
  	4804,4806,1,0,0,0,4805,4807,5,377,0,0,4806,4805,1,0,0,0,4806,4807,1,0,
  	0,0,4807,4809,1,0,0,0,4808,4810,3,824,412,0,4809,4808,1,0,0,0,4809,4810,
  	1,0,0,0,4810,4812,1,0,0,0,4811,4813,3,826,413,0,4812,4811,1,0,0,0,4812,
  	4813,1,0,0,0,4813,4815,1,0,0,0,4814,4816,3,828,414,0,4815,4814,1,0,0,
  	0,4815,4816,1,0,0,0,4816,4818,1,0,0,0,4817,4819,3,1016,508,0,4818,4817,
  	1,0,0,0,4818,4819,1,0,0,0,4819,4821,1,0,0,0,4820,4822,3,1018,509,0,4821,
  	4820,1,0,0,0,4821,4822,1,0,0,0,4822,4824,1,0,0,0,4823,4825,3,1012,506,
  	0,4824,4823,1,0,0,0,4824,4825,1,0,0,0,4825,4827,1,0,0,0,4826,4828,3,1014,
  	507,0,4827,4826,1,0,0,0,4827,4828,1,0,0,0,4828,4830,1,0,0,0,4829,4831,
  	5,170,0,0,4830,4829,1,0,0,0,4830,4831,1,0,0,0,4831,823,1,0,0,0,4832,4833,
  	5,251,0,0,4833,4834,3,1074,537,0,4834,825,1,0,0,0,4835,4837,5,514,0,0,
  	4836,4835,1,0,0,0,4836,4837,1,0,0,0,4837,4841,1,0,0,0,4838,4839,7,57,
  	0,0,4839,4842,5,286,0,0,4840,4842,5,511,0,0,4841,4838,1,0,0,0,4841,4840,
  	1,0,0,0,4842,827,1,0,0,0,4843,4845,5,259,0,0,4844,4846,5,254,0,0,4845,
  	4844,1,0,0,0,4845,4846,1,0,0,0,4846,4847,1,0,0,0,4847,4848,3,1090,545,
  	0,4848,829,1,0,0,0,4849,4852,5,375,0,0,4850,4853,3,832,416,0,4851,4853,
  	3,836,418,0,4852,4850,1,0,0,0,4852,4851,1,0,0,0,4853,4855,1,0,0,0,4854,
  	4856,3,1028,514,0,4855,4854,1,0,0,0,4855,4856,1,0,0,0,4856,4858,1,0,0,
  	0,4857,4859,3,1030,515,0,4858,4857,1,0,0,0,4858,4859,1,0,0,0,4859,4861,
  	1,0,0,0,4860,4862,5,171,0,0,4861,4860,1,0,0,0,4861,4862,1,0,0,0,4862,
  	831,1,0,0,0,4863,4864,3,1128,564,0,4864,4865,5,215,0,0,4865,4873,3,834,
  	417,0,4866,4872,3,842,421,0,4867,4872,3,844,422,0,4868,4872,3,846,423,
  	0,4869,4872,3,848,424,0,4870,4872,3,850,425,0,4871,4866,1,0,0,0,4871,
  	4867,1,0,0,0,4871,4868,1,0,0,0,4871,4869,1,0,0,0,4871,4870,1,0,0,0,4872,
  	4875,1,0,0,0,4873,4871,1,0,0,0,4873,4874,1,0,0,0,4874,833,1,0,0,0,4875,
  	4873,1,0,0,0,4876,4877,5,481,0,0,4877,4883,3,1128,564,0,4878,4879,5,263,
  	0,0,4879,4883,5,481,0,0,4880,4881,5,20,0,0,4881,4883,5,481,0,0,4882,4876,
  	1,0,0,0,4882,4878,1,0,0,0,4882,4880,1,0,0,0,4883,835,1,0,0,0,4884,4885,
  	3,1120,560,0,4885,4887,7,58,0,0,4886,4888,5,251,0,0,4887,4886,1,0,0,0,
  	4887,4888,1,0,0,0,4888,4889,1,0,0,0,4889,4891,3,1074,537,0,4890,4892,
  	3,838,419,0,4891,4890,1,0,0,0,4891,4892,1,0,0,0,4892,4894,1,0,0,0,4893,
  	4895,3,840,420,0,4894,4893,1,0,0,0,4894,4895,1,0,0,0,4895,837,1,0,0,0,
  	4896,4897,5,310,0,0,4897,4901,5,109,0,0,4898,4900,3,536,268,0,4899,4898,
  	1,0,0,0,4900,4903,1,0,0,0,4901,4899,1,0,0,0,4901,4902,1,0,0,0,4902,839,
  	1,0,0,0,4903,4901,1,0,0,0,4904,4905,5,514,0,0,4905,4909,5,109,0,0,4906,
  	4908,3,536,268,0,4907,4906,1,0,0,0,4908,4911,1,0,0,0,4909,4907,1,0,0,
  	0,4909,4910,1,0,0,0,4910,841,1,0,0,0,4911,4909,1,0,0,0,4912,4914,5,39,
  	0,0,4913,4915,5,485,0,0,4914,4913,1,0,0,0,4914,4915,1,0,0,0,4915,4918,
  	1,0,0,0,4916,4919,3,1176,588,0,4917,4919,3,1074,537,0,4918,4916,1,0,0,
  	0,4918,4917,1,0,0,0,4919,843,1,0,0,0,4920,4922,5,514,0,0,4921,4920,1,
  	0,0,0,4921,4922,1,0,0,0,4922,4923,1,0,0,0,4923,4924,5,310,0,0,4924,4925,
  	5,511,0,0,4925,845,1,0,0,0,4926,4928,5,481,0,0,4927,4929,5,239,0,0,4928,
  	4927,1,0,0,0,4928,4929,1,0,0,0,4929,4930,1,0,0,0,4930,4931,3,1128,564,
  	0,4931,847,1,0,0,0,4932,4934,5,439,0,0,4933,4935,5,239,0,0,4934,4933,
  	1,0,0,0,4934,4935,1,0,0,0,4935,4938,1,0,0,0,4936,4939,3,1176,588,0,4937,
  	4939,3,1074,537,0,4938,4936,1,0,0,0,4938,4937,1,0,0,0,4939,849,1,0,0,
  	0,4940,4942,5,457,0,0,4941,4943,5,239,0,0,4942,4941,1,0,0,0,4942,4943,
  	1,0,0,0,4943,4944,1,0,0,0,4944,4945,3,1074,537,0,4945,851,1,0,0,0,4946,
  	4947,5,387,0,0,4947,4950,3,1154,577,0,4948,4949,5,215,0,0,4949,4951,3,
  	1090,545,0,4950,4948,1,0,0,0,4950,4951,1,0,0,0,4951,853,1,0,0,0,4952,
  	4953,5,403,0,0,4953,4955,3,1134,567,0,4954,4956,5,377,0,0,4955,4954,1,
  	0,0,0,4955,4956,1,0,0,0,4956,4958,1,0,0,0,4957,4959,3,856,428,0,4958,
  	4957,1,0,0,0,4958,4959,1,0,0,0,4959,4960,1,0,0,0,4960,4962,3,1012,506,
  	0,4961,4963,3,1014,507,0,4962,4961,1,0,0,0,4962,4963,1,0,0,0,4963,4965,
  	1,0,0,0,4964,4966,5,172,0,0,4965,4964,1,0,0,0,4965,4966,1,0,0,0,4966,
  	855,1,0,0,0,4967,4968,5,251,0,0,4968,4969,3,1090,545,0,4969,857,1,0,0,
  	0,4970,4971,5,408,0,0,4971,4973,3,1154,577,0,4972,4974,3,860,430,0,4973,
  	4972,1,0,0,0,4973,4974,1,0,0,0,4974,4976,1,0,0,0,4975,4977,3,1016,508,
  	0,4976,4975,1,0,0,0,4976,4977,1,0,0,0,4977,4979,1,0,0,0,4978,4980,3,1018,
  	509,0,4979,4978,1,0,0,0,4979,4980,1,0,0,0,4980,4982,1,0,0,0,4981,4983,
  	5,173,0,0,4982,4981,1,0,0,0,4982,4983,1,0,0,0,4983,859,1,0,0,0,4984,4985,
  	5,215,0,0,4985,4986,3,1074,537,0,4986,861,1,0,0,0,4987,4989,5,418,0,0,
  	4988,4990,5,9,0,0,4989,4988,1,0,0,0,4989,4990,1,0,0,0,4990,4991,1,0,0,
  	0,4991,4993,3,1090,545,0,4992,4994,3,864,432,0,4993,4992,1,0,0,0,4993,
  	4994,1,0,0,0,4994,4996,1,0,0,0,4995,4997,3,1012,506,0,4996,4995,1,0,0,
  	0,4996,4997,1,0,0,0,4997,4999,1,0,0,0,4998,5000,3,866,433,0,4999,4998,
  	1,0,0,0,5000,5001,1,0,0,0,5001,4999,1,0,0,0,5001,5002,1,0,0,0,5002,5004,
  	1,0,0,0,5003,5005,5,174,0,0,5004,5003,1,0,0,0,5004,5005,1,0,0,0,5005,
  	863,1,0,0,0,5006,5007,5,509,0,0,5007,5008,3,1090,545,0,5008,865,1,0,0,
  	0,5009,5010,5,512,0,0,5010,5019,3,1046,523,0,5011,5012,5,309,0,0,5012,
  	5020,5,426,0,0,5013,5015,3,536,268,0,5014,5013,1,0,0,0,5015,5018,1,0,
  	0,0,5016,5014,1,0,0,0,5016,5017,1,0,0,0,5017,5020,1,0,0,0,5018,5016,1,
  	0,0,0,5019,5011,1,0,0,0,5019,5016,1,0,0,0,5020,867,1,0,0,0,5021,5024,
  	5,425,0,0,5022,5025,3,870,435,0,5023,5025,3,872,436,0,5024,5022,1,0,0,
  	0,5024,5023,1,0,0,0,5025,5027,1,0,0,0,5026,5028,3,1028,514,0,5027,5026,
  	1,0,0,0,5027,5028,1,0,0,0,5028,5030,1,0,0,0,5029,5031,3,1030,515,0,5030,
  	5029,1,0,0,0,5030,5031,1,0,0,0,5031,869,1,0,0,0,5032,5035,3,1074,537,
  	0,5033,5035,3,1172,586,0,5034,5032,1,0,0,0,5034,5033,1,0,0,0,5035,5037,
  	1,0,0,0,5036,5038,3,874,437,0,5037,5036,1,0,0,0,5037,5038,1,0,0,0,5038,
  	5040,1,0,0,0,5039,5041,3,876,438,0,5040,5039,1,0,0,0,5040,5041,1,0,0,
  	0,5041,5043,1,0,0,0,5042,5044,3,878,439,0,5043,5042,1,0,0,0,5043,5044,
  	1,0,0,0,5044,5046,1,0,0,0,5045,5047,3,880,440,0,5046,5045,1,0,0,0,5046,
  	5047,1,0,0,0,5047,871,1,0,0,0,5048,5049,5,489,0,0,5049,5050,7,59,0,0,
  	5050,5051,3,1074,537,0,5051,873,1,0,0,0,5052,5053,5,215,0,0,5053,5054,
  	3,1074,537,0,5054,875,1,0,0,0,5055,5060,5,514,0,0,5056,5061,5,153,0,0,
  	5057,5061,5,155,0,0,5058,5061,5,192,0,0,5059,5061,3,1074,537,0,5060,5056,
  	1,0,0,0,5060,5057,1,0,0,0,5060,5058,1,0,0,0,5060,5059,1,0,0,0,5061,877,
  	1,0,0,0,5062,5064,5,394,0,0,5063,5065,5,279,0,0,5064,5063,1,0,0,0,5064,
  	5065,1,0,0,0,5065,879,1,0,0,0,5066,5068,7,56,0,0,5067,5069,5,6,0,0,5068,
  	5067,1,0,0,0,5068,5069,1,0,0,0,5069,5073,1,0,0,0,5070,5074,3,882,441,
  	0,5071,5074,3,884,442,0,5072,5074,3,886,443,0,5073,5070,1,0,0,0,5073,
  	5071,1,0,0,0,5073,5072,1,0,0,0,5074,881,1,0,0,0,5075,5076,5,340,0,0,5076,
  	883,1,0,0,0,5077,5080,3,1074,537,0,5078,5080,3,1172,586,0,5079,5077,1,
  	0,0,0,5079,5078,1,0,0,0,5080,5082,1,0,0,0,5081,5083,7,33,0,0,5082,5081,
  	1,0,0,0,5082,5083,1,0,0,0,5083,885,1,0,0,0,5084,5085,3,1146,573,0,5085,
  	887,1,0,0,0,5086,5093,5,430,0,0,5087,5089,3,890,445,0,5088,5087,1,0,0,
  	0,5089,5090,1,0,0,0,5090,5088,1,0,0,0,5090,5091,1,0,0,0,5091,5094,1,0,
  	0,0,5092,5094,3,892,446,0,5093,5088,1,0,0,0,5093,5092,1,0,0,0,5094,889,
  	1,0,0,0,5095,5097,3,894,447,0,5096,5095,1,0,0,0,5097,5098,1,0,0,0,5098,
  	5096,1,0,0,0,5098,5099,1,0,0,0,5099,5100,1,0,0,0,5100,5102,5,489,0,0,
  	5101,5103,3,896,448,0,5102,5101,1,0,0,0,5103,5104,1,0,0,0,5104,5102,1,
  	0,0,0,5104,5105,1,0,0,0,5105,891,1,0,0,0,5106,5108,3,894,447,0,5107,5106,
  	1,0,0,0,5108,5109,1,0,0,0,5109,5107,1,0,0,0,5109,5110,1,0,0,0,5110,5115,
  	1,0,0,0,5111,5112,5,502,0,0,5112,5116,5,49,0,0,5113,5114,5,148,0,0,5114,
  	5116,5,49,0,0,5115,5111,1,0,0,0,5115,5113,1,0,0,0,5116,5117,1,0,0,0,5117,
  	5118,3,898,449,0,5118,893,1,0,0,0,5119,5120,3,1074,537,0,5120,895,1,0,
  	0,0,5121,5131,5,326,0,0,5122,5131,5,324,0,0,5123,5126,5,182,0,0,5124,
  	5127,3,1074,537,0,5125,5127,3,1172,586,0,5126,5124,1,0,0,0,5126,5125,
  	1,0,0,0,5127,5131,1,0,0,0,5128,5131,3,1074,537,0,5129,5131,3,1172,586,
  	0,5130,5121,1,0,0,0,5130,5122,1,0,0,0,5130,5123,1,0,0,0,5130,5128,1,0,
  	0,0,5130,5129,1,0,0,0,5131,897,1,0,0,0,5132,5135,3,1074,537,0,5133,5135,
  	3,1172,586,0,5134,5132,1,0,0,0,5134,5133,1,0,0,0,5135,899,1,0,0,0,5136,
  	5137,5,440,0,0,5137,5139,3,1134,567,0,5138,5140,3,902,451,0,5139,5138,
  	1,0,0,0,5140,5141,1,0,0,0,5141,5139,1,0,0,0,5141,5142,1,0,0,0,5142,5144,
  	1,0,0,0,5143,5145,3,904,452,0,5144,5143,1,0,0,0,5144,5145,1,0,0,0,5145,
  	5147,1,0,0,0,5146,5148,3,906,453,0,5147,5146,1,0,0,0,5147,5148,1,0,0,
  	0,5148,5150,1,0,0,0,5149,5151,3,912,456,0,5150,5149,1,0,0,0,5150,5151,
  	1,0,0,0,5151,5155,1,0,0,0,5152,5154,3,916,458,0,5153,5152,1,0,0,0,5154,
  	5157,1,0,0,0,5155,5153,1,0,0,0,5155,5156,1,0,0,0,5156,5159,1,0,0,0,5157,
  	5155,1,0,0,0,5158,5160,3,918,459,0,5159,5158,1,0,0,0,5159,5160,1,0,0,
  	0,5160,5164,1,0,0,0,5161,5163,3,922,461,0,5162,5161,1,0,0,0,5163,5166,
  	1,0,0,0,5164,5162,1,0,0,0,5164,5165,1,0,0,0,5165,901,1,0,0,0,5166,5164,
  	1,0,0,0,5167,5169,5,326,0,0,5168,5167,1,0,0,0,5168,5169,1,0,0,0,5169,
  	5170,1,0,0,0,5170,5172,7,41,0,0,5171,5173,5,259,0,0,5172,5171,1,0,0,0,
  	5172,5173,1,0,0,0,5173,5175,1,0,0,0,5174,5176,3,1090,545,0,5175,5174,
  	1,0,0,0,5176,5177,1,0,0,0,5177,5175,1,0,0,0,5177,5178,1,0,0,0,5178,903,
  	1,0,0,0,5179,5181,5,514,0,0,5180,5179,1,0,0,0,5180,5181,1,0,0,0,5181,
  	5182,1,0,0,0,5182,5184,5,149,0,0,5183,5185,5,239,0,0,5184,5183,1,0,0,
  	0,5184,5185,1,0,0,0,5185,5187,1,0,0,0,5186,5188,5,330,0,0,5187,5186,1,
  	0,0,0,5187,5188,1,0,0,0,5188,905,1,0,0,0,5189,5191,5,72,0,0,5190,5189,
  	1,0,0,0,5190,5191,1,0,0,0,5191,5192,1,0,0,0,5192,5194,5,428,0,0,5193,
  	5195,5,254,0,0,5194,5193,1,0,0,0,5194,5195,1,0,0,0,5195,5197,1,0,0,0,
  	5196,5198,3,1114,557,0,5197,5196,1,0,0,0,5198,5199,1,0,0,0,5199,5197,
  	1,0,0,0,5199,5200,1,0,0,0,5200,5202,1,0,0,0,5201,5203,3,908,454,0,5202,
  	5201,1,0,0,0,5202,5203,1,0,0,0,5203,5205,1,0,0,0,5204,5206,3,910,455,
  	0,5205,5204,1,0,0,0,5205,5206,1,0,0,0,5206,907,1,0,0,0,5207,5209,5,212,
  	0,0,5208,5207,1,0,0,0,5208,5209,1,0,0,0,5209,5210,1,0,0,0,5210,5211,5,
  	14,0,0,5211,5212,5,254,0,0,5212,5213,3,1114,557,0,5213,909,1,0,0,0,5214,
  	5216,5,212,0,0,5215,5214,1,0,0,0,5215,5216,1,0,0,0,5216,5217,1,0,0,0,
  	5217,5219,5,304,0,0,5218,5220,5,254,0,0,5219,5218,1,0,0,0,5219,5220,1,
  	0,0,0,5220,5221,1,0,0,0,5221,5222,3,1114,557,0,5222,911,1,0,0,0,5223,
  	5224,5,246,0,0,5224,5226,5,356,0,0,5225,5227,5,254,0,0,5226,5225,1,0,
  	0,0,5226,5227,1,0,0,0,5227,5228,1,0,0,0,5228,5230,3,1150,575,0,5229,5231,
  	3,914,457,0,5230,5229,1,0,0,0,5230,5231,1,0,0,0,5231,913,1,0,0,0,5232,
  	5233,7,4,0,0,5233,5234,3,1150,575,0,5234,915,1,0,0,0,5235,5237,5,506,
  	0,0,5236,5238,3,1134,567,0,5237,5236,1,0,0,0,5238,5239,1,0,0,0,5239,5237,
  	1,0,0,0,5239,5240,1,0,0,0,5240,917,1,0,0,0,5241,5242,5,334,0,0,5242,5244,
  	5,356,0,0,5243,5245,5,254,0,0,5244,5243,1,0,0,0,5244,5245,1,0,0,0,5245,
  	5246,1,0,0,0,5246,5248,3,1150,575,0,5247,5249,3,920,460,0,5248,5247,1,
  	0,0,0,5248,5249,1,0,0,0,5249,919,1,0,0,0,5250,5251,7,4,0,0,5251,5252,
  	3,1150,575,0,5252,921,1,0,0,0,5253,5255,5,222,0,0,5254,5256,3,924,462,
  	0,5255,5254,1,0,0,0,5256,5257,1,0,0,0,5257,5255,1,0,0,0,5257,5258,1,0,
  	0,0,5258,923,1,0,0,0,5259,5269,3,1134,567,0,5260,5270,5,286,0,0,5261,
  	5270,5,415,0,0,5262,5263,5,310,0,0,5263,5270,5,407,0,0,5264,5270,5,106,
  	0,0,5265,5270,5,387,0,0,5266,5267,5,514,0,0,5267,5268,5,391,0,0,5268,
  	5270,5,106,0,0,5269,5260,1,0,0,0,5269,5261,1,0,0,0,5269,5262,1,0,0,0,
  	5269,5264,1,0,0,0,5269,5265,1,0,0,0,5269,5266,1,0,0,0,5269,5270,1,0,0,
  	0,5270,925,1,0,0,0,5271,5272,5,456,0,0,5272,5274,3,1134,567,0,5273,5275,
  	3,928,464,0,5274,5273,1,0,0,0,5274,5275,1,0,0,0,5275,5277,1,0,0,0,5276,
  	5278,3,1016,508,0,5277,5276,1,0,0,0,5277,5278,1,0,0,0,5278,5280,1,0,0,
  	0,5279,5281,3,1018,509,0,5280,5279,1,0,0,0,5280,5281,1,0,0,0,5281,5283,
  	1,0,0,0,5282,5284,5,175,0,0,5283,5282,1,0,0,0,5283,5284,1,0,0,0,5284,
  	927,1,0,0,0,5285,5287,5,259,0,0,5286,5288,5,254,0,0,5287,5286,1,0,0,0,
  	5287,5288,1,0,0,0,5288,5316,1,0,0,0,5289,5291,5,186,0,0,5290,5292,5,489,
  	0,0,5291,5290,1,0,0,0,5291,5292,1,0,0,0,5292,5317,1,0,0,0,5293,5317,5,
  	536,0,0,5294,5296,5,225,0,0,5295,5297,5,479,0,0,5296,5295,1,0,0,0,5296,
  	5297,1,0,0,0,5297,5317,1,0,0,0,5298,5317,5,544,0,0,5299,5300,5,312,0,
  	0,5300,5302,5,271,0,0,5301,5303,5,479,0,0,5302,5301,1,0,0,0,5302,5303,
  	1,0,0,0,5303,5317,1,0,0,0,5304,5305,5,312,0,0,5305,5317,5,540,0,0,5306,
  	5308,5,225,0,0,5307,5309,5,479,0,0,5308,5307,1,0,0,0,5308,5309,1,0,0,
  	0,5309,5310,1,0,0,0,5310,5311,5,329,0,0,5311,5313,5,186,0,0,5312,5314,
  	5,489,0,0,5313,5312,1,0,0,0,5313,5314,1,0,0,0,5314,5317,1,0,0,0,5315,
  	5317,5,545,0,0,5316,5289,1,0,0,0,5316,5293,1,0,0,0,5316,5294,1,0,0,0,
  	5316,5298,1,0,0,0,5316,5299,1,0,0,0,5316,5304,1,0,0,0,5316,5306,1,0,0,
  	0,5316,5315,1,0,0,0,5317,5318,1,0,0,0,5318,5319,3,1090,545,0,5319,929,
  	1,0,0,0,5320,5323,5,458,0,0,5321,5324,5,413,0,0,5322,5324,3,1172,586,
  	0,5323,5321,1,0,0,0,5323,5322,1,0,0,0,5324,931,1,0,0,0,5325,5327,5,459,
  	0,0,5326,5328,3,934,467,0,5327,5326,1,0,0,0,5328,5329,1,0,0,0,5329,5327,
  	1,0,0,0,5329,5330,1,0,0,0,5330,5331,1,0,0,0,5331,5333,3,942,471,0,5332,
  	5334,3,944,472,0,5333,5332,1,0,0,0,5333,5334,1,0,0,0,5334,5336,1,0,0,
  	0,5335,5337,3,1020,510,0,5336,5335,1,0,0,0,5336,5337,1,0,0,0,5337,5339,
  	1,0,0,0,5338,5340,3,1022,511,0,5339,5338,1,0,0,0,5339,5340,1,0,0,0,5340,
  	5342,1,0,0,0,5341,5343,5,176,0,0,5342,5341,1,0,0,0,5342,5343,1,0,0,0,
  	5343,933,1,0,0,0,5344,5346,3,936,468,0,5345,5344,1,0,0,0,5346,5347,1,
  	0,0,0,5347,5345,1,0,0,0,5347,5348,1,0,0,0,5348,5351,1,0,0,0,5349,5352,
  	3,938,469,0,5350,5352,3,940,470,0,5351,5349,1,0,0,0,5351,5350,1,0,0,0,
  	5352,935,1,0,0,0,5353,5356,3,1074,537,0,5354,5356,3,1172,586,0,5355,5353,
  	1,0,0,0,5355,5354,1,0,0,0,5356,937,1,0,0,0,5357,5359,5,132,0,0,5358,5360,
  	5,49,0,0,5359,5358,1,0,0,0,5359,5360,1,0,0,0,5360,5364,1,0,0,0,5361,5365,
  	5,439,0,0,5362,5365,3,1074,537,0,5363,5365,3,1172,586,0,5364,5361,1,0,
  	0,0,5364,5362,1,0,0,0,5364,5363,1,0,0,0,5365,939,1,0,0,0,5366,5369,5,
  	212,0,0,5367,5370,3,1074,537,0,5368,5370,3,1172,586,0,5369,5367,1,0,0,
  	0,5369,5368,1,0,0,0,5370,941,1,0,0,0,5371,5372,5,251,0,0,5372,5373,3,
  	1074,537,0,5373,943,1,0,0,0,5374,5376,5,514,0,0,5375,5374,1,0,0,0,5375,
  	5376,1,0,0,0,5376,5377,1,0,0,0,5377,5378,5,349,0,0,5378,5379,3,1090,545,
  	0,5379,945,1,0,0,0,5380,5384,5,463,0,0,5381,5385,3,948,474,0,5382,5385,
  	3,950,475,0,5383,5385,3,952,476,0,5384,5381,1,0,0,0,5384,5382,1,0,0,0,
  	5384,5383,1,0,0,0,5385,5387,1,0,0,0,5386,5388,3,1024,512,0,5387,5386,
  	1,0,0,0,5387,5388,1,0,0,0,5388,5390,1,0,0,0,5389,5391,3,1026,513,0,5390,
  	5389,1,0,0,0,5390,5391,1,0,0,0,5391,5393,1,0,0,0,5392,5394,5,177,0,0,
  	5393,5392,1,0,0,0,5393,5394,1,0,0,0,5394,947,1,0,0,0,5395,5397,3,954,
  	477,0,5396,5395,1,0,0,0,5397,5398,1,0,0,0,5398,5396,1,0,0,0,5398,5399,
  	1,0,0,0,5399,5400,1,0,0,0,5400,5402,5,215,0,0,5401,5403,3,956,478,0,5402,
  	5401,1,0,0,0,5403,5404,1,0,0,0,5404,5402,1,0,0,0,5404,5405,1,0,0,0,5405,
  	949,1,0,0,0,5406,5408,3,954,477,0,5407,5406,1,0,0,0,5408,5409,1,0,0,0,
  	5409,5407,1,0,0,0,5409,5410,1,0,0,0,5410,5411,1,0,0,0,5411,5412,5,215,
  	0,0,5412,5413,3,958,479,0,5413,5415,5,222,0,0,5414,5416,3,960,480,0,5415,
  	5414,1,0,0,0,5416,5417,1,0,0,0,5417,5415,1,0,0,0,5417,5418,1,0,0,0,5418,
  	951,1,0,0,0,5419,5420,7,50,0,0,5420,5421,3,1090,545,0,5421,5422,5,215,
  	0,0,5422,5423,3,962,481,0,5423,953,1,0,0,0,5424,5427,3,1074,537,0,5425,
  	5427,3,1172,586,0,5426,5424,1,0,0,0,5426,5425,1,0,0,0,5427,955,1,0,0,
  	0,5428,5430,3,1074,537,0,5429,5431,5,412,0,0,5430,5429,1,0,0,0,5430,5431,
  	1,0,0,0,5431,957,1,0,0,0,5432,5435,3,1074,537,0,5433,5435,3,1172,586,
  	0,5434,5432,1,0,0,0,5434,5433,1,0,0,0,5435,959,1,0,0,0,5436,5438,3,1074,
  	537,0,5437,5439,5,412,0,0,5438,5437,1,0,0,0,5438,5439,1,0,0,0,5439,961,
  	1,0,0,0,5440,5442,3,1090,545,0,5441,5443,5,412,0,0,5442,5441,1,0,0,0,
  	5442,5443,1,0,0,0,5443,963,1,0,0,0,5444,5445,5,476,0,0,5445,5446,3,1156,
  	578,0,5446,965,1,0,0,0,5447,5448,5,500,0,0,5448,5449,3,968,484,0,5449,
  	5451,3,974,487,0,5450,5452,3,982,491,0,5451,5450,1,0,0,0,5451,5452,1,
  	0,0,0,5452,5454,1,0,0,0,5453,5455,3,984,492,0,5454,5453,1,0,0,0,5454,
  	5455,1,0,0,0,5455,5457,1,0,0,0,5456,5458,3,1020,510,0,5457,5456,1,0,0,
  	0,5457,5458,1,0,0,0,5458,5460,1,0,0,0,5459,5461,3,1022,511,0,5460,5459,
  	1,0,0,0,5460,5461,1,0,0,0,5461,5463,1,0,0,0,5462,5464,5,178,0,0,5463,
  	5462,1,0,0,0,5463,5464,1,0,0,0,5464,967,1,0,0,0,5465,5473,3,1074,537,
  	0,5466,5470,3,970,485,0,5467,5469,3,972,486,0,5468,5467,1,0,0,0,5469,
  	5472,1,0,0,0,5470,5468,1,0,0,0,5470,5471,1,0,0,0,5471,5474,1,0,0,0,5472,
  	5470,1,0,0,0,5473,5466,1,0,0,0,5473,5474,1,0,0,0,5474,969,1,0,0,0,5475,
  	5477,5,132,0,0,5476,5478,5,49,0,0,5477,5476,1,0,0,0,5477,5478,1,0,0,0,
  	5478,5480,1,0,0,0,5479,5481,5,9,0,0,5480,5479,1,0,0,0,5480,5481,1,0,0,
  	0,5481,5484,1,0,0,0,5482,5485,3,1074,537,0,5483,5485,3,1172,586,0,5484,
  	5482,1,0,0,0,5484,5483,1,0,0,0,5485,971,1,0,0,0,5486,5488,5,329,0,0,5487,
  	5489,5,9,0,0,5488,5487,1,0,0,0,5488,5489,1,0,0,0,5489,5492,1,0,0,0,5490,
  	5493,3,1074,537,0,5491,5493,3,1172,586,0,5492,5490,1,0,0,0,5492,5491,
  	1,0,0,0,5493,973,1,0,0,0,5494,5496,5,251,0,0,5495,5497,3,976,488,0,5496,
  	5495,1,0,0,0,5497,5498,1,0,0,0,5498,5496,1,0,0,0,5498,5499,1,0,0,0,5499,
  	975,1,0,0,0,5500,5502,3,1074,537,0,5501,5503,3,978,489,0,5502,5501,1,
  	0,0,0,5502,5503,1,0,0,0,5503,5505,1,0,0,0,5504,5506,3,980,490,0,5505,
  	5504,1,0,0,0,5505,5506,1,0,0,0,5506,977,1,0,0,0,5507,5509,5,133,0,0,5508,
  	5510,5,239,0,0,5509,5508,1,0,0,0,5509,5510,1,0,0,0,5510,5511,1,0,0,0,
  	5511,5512,3,1074,537,0,5512,979,1,0,0,0,5513,5515,5,105,0,0,5514,5516,
  	5,239,0,0,5515,5514,1,0,0,0,5515,5516,1,0,0,0,5516,5517,1,0,0,0,5517,
  	5518,3,1074,537,0,5518,981,1,0,0,0,5519,5521,5,514,0,0,5520,5519,1,0,
  	0,0,5520,5521,1,0,0,0,5521,5522,1,0,0,0,5522,5523,5,349,0,0,5523,5524,
  	3,1090,545,0,5524,983,1,0,0,0,5525,5527,5,472,0,0,5526,5528,5,239,0,0,
  	5527,5526,1,0,0,0,5527,5528,1,0,0,0,5528,5529,1,0,0,0,5529,5530,3,1090,
  	545,0,5530,985,1,0,0,0,5531,5534,5,505,0,0,5532,5535,3,988,494,0,5533,
  	5535,3,992,496,0,5534,5532,1,0,0,0,5534,5533,1,0,0,0,5535,987,1,0,0,0,
  	5536,5538,5,223,0,0,5537,5536,1,0,0,0,5537,5538,1,0,0,0,5538,5539,1,0,
  	0,0,5539,5541,5,7,0,0,5540,5542,5,453,0,0,5541,5540,1,0,0,0,5541,5542,
  	1,0,0,0,5542,5543,1,0,0,0,5543,5544,7,60,0,0,5544,5546,5,356,0,0,5545,
  	5547,5,326,0,0,5546,5545,1,0,0,0,5546,5547,1,0,0,0,5547,5548,1,0,0,0,
  	5548,5549,3,990,495,0,5549,989,1,0,0,0,5550,5560,5,246,0,0,5551,5560,
  	5,334,0,0,5552,5560,5,232,0,0,5553,5560,5,201,0,0,5554,5556,3,1134,567,
  	0,5555,5554,1,0,0,0,5556,5557,1,0,0,0,5557,5555,1,0,0,0,5557,5558,1,0,
  	0,0,5558,5560,1,0,0,0,5559,5550,1,0,0,0,5559,5551,1,0,0,0,5559,5552,1,
  	0,0,0,5559,5553,1,0,0,0,5559,5555,1,0,0,0,5560,991,1,0,0,0,5561,5563,
  	5,212,0,0,5562,5561,1,0,0,0,5562,5563,1,0,0,0,5563,5564,1,0,0,0,5564,
  	5566,5,125,0,0,5565,5567,5,326,0,0,5566,5565,1,0,0,0,5566,5567,1,0,0,
  	0,5567,5569,1,0,0,0,5568,5570,3,994,497,0,5569,5568,1,0,0,0,5570,5571,
  	1,0,0,0,5571,5569,1,0,0,0,5571,5572,1,0,0,0,5572,993,1,0,0,0,5573,5574,
  	5,9,0,0,5574,5586,5,358,0,0,5575,5577,5,9,0,0,5576,5578,5,385,0,0,5577,
  	5576,1,0,0,0,5577,5578,1,0,0,0,5578,5580,1,0,0,0,5579,5581,5,323,0,0,
  	5580,5579,1,0,0,0,5580,5581,1,0,0,0,5581,5582,1,0,0,0,5582,5586,3,1074,
  	537,0,5583,5586,3,1150,575,0,5584,5586,3,1134,567,0,5585,5573,1,0,0,0,
  	5585,5575,1,0,0,0,5585,5583,1,0,0,0,5585,5584,1,0,0,0,5586,995,1,0,0,
  	0,5587,5588,5,517,0,0,5588,5590,3,1154,577,0,5589,5591,3,998,499,0,5590,
  	5589,1,0,0,0,5590,5591,1,0,0,0,5591,5593,1,0,0,0,5592,5594,3,1000,500,
  	0,5593,5592,1,0,0,0,5593,5594,1,0,0,0,5594,5596,1,0,0,0,5595,5597,3,1008,
  	504,0,5596,5595,1,0,0,0,5596,5597,1,0,0,0,5597,5599,1,0,0,0,5598,5600,
  	3,1010,505,0,5599,5598,1,0,0,0,5599,5600,1,0,0,0,5600,5602,1,0,0,0,5601,
  	5603,3,1016,508,0,5602,5601,1,0,0,0,5602,5603,1,0,0,0,5603,5605,1,0,0,
  	0,5604,5606,3,1018,509,0,5605,5604,1,0,0,0,5605,5606,1,0,0,0,5606,5608,
  	1,0,0,0,5607,5609,5,179,0,0,5608,5607,1,0,0,0,5608,5609,1,0,0,0,5609,
  	997,1,0,0,0,5610,5613,5,215,0,0,5611,5614,3,1074,537,0,5612,5614,3,1172,
  	586,0,5613,5611,1,0,0,0,5613,5612,1,0,0,0,5614,999,1,0,0,0,5615,5617,
  	7,56,0,0,5616,5618,5,6,0,0,5617,5616,1,0,0,0,5617,5618,1,0,0,0,5618,5622,
  	1,0,0,0,5619,5623,3,1002,501,0,5620,5623,3,1004,502,0,5621,5623,3,1006,
  	503,0,5622,5619,1,0,0,0,5622,5620,1,0,0,0,5622,5621,1,0,0,0,5623,1001,
  	1,0,0,0,5624,5625,5,340,0,0,5625,1003,1,0,0,0,5626,5629,3,1074,537,0,
  	5627,5629,3,1172,586,0,5628,5626,1,0,0,0,5628,5627,1,0,0,0,5629,5631,
  	1,0,0,0,5630,5632,7,33,0,0,5631,5630,1,0,0,0,5631,5632,1,0,0,0,5632,1005,
  	1,0,0,0,5633,5634,3,1146,573,0,5634,1007,1,0,0,0,5635,5637,5,30,0,0,5636,
  	5635,1,0,0,0,5636,5637,1,0,0,0,5637,5638,1,0,0,0,5638,5642,7,61,0,0,5639,
  	5641,3,536,268,0,5640,5639,1,0,0,0,5641,5644,1,0,0,0,5642,5640,1,0,0,
  	0,5642,5643,1,0,0,0,5643,1009,1,0,0,0,5644,5642,1,0,0,0,5645,5647,5,312,
  	0,0,5646,5648,5,30,0,0,5647,5646,1,0,0,0,5647,5648,1,0,0,0,5648,5649,
  	1,0,0,0,5649,5653,7,61,0,0,5650,5652,3,536,268,0,5651,5650,1,0,0,0,5652,
  	5655,1,0,0,0,5653,5651,1,0,0,0,5653,5654,1,0,0,0,5654,1011,1,0,0,0,5655,
  	5653,1,0,0,0,5656,5658,5,30,0,0,5657,5656,1,0,0,0,5657,5658,1,0,0,0,5658,
  	5659,1,0,0,0,5659,5663,5,158,0,0,5660,5662,3,536,268,0,5661,5660,1,0,
  	0,0,5662,5665,1,0,0,0,5663,5661,1,0,0,0,5663,5664,1,0,0,0,5664,1013,1,
  	0,0,0,5665,5663,1,0,0,0,5666,5668,5,312,0,0,5667,5669,5,30,0,0,5668,5667,
  	1,0,0,0,5668,5669,1,0,0,0,5669,5670,1,0,0,0,5670,5674,5,158,0,0,5671,
  	5673,3,536,268,0,5672,5671,1,0,0,0,5673,5676,1,0,0,0,5674,5672,1,0,0,
  	0,5674,5675,1,0,0,0,5675,1015,1,0,0,0,5676,5674,1,0,0,0,5677,5679,5,252,
  	0,0,5678,5680,5,259,0,0,5679,5678,1,0,0,0,5679,5680,1,0,0,0,5680,5684,
  	1,0,0,0,5681,5683,3,536,268,0,5682,5681,1,0,0,0,5683,5686,1,0,0,0,5684,
  	5682,1,0,0,0,5684,5685,1,0,0,0,5685,1017,1,0,0,0,5686,5684,1,0,0,0,5687,
  	5688,5,312,0,0,5688,5690,5,252,0,0,5689,5691,5,259,0,0,5690,5689,1,0,
  	0,0,5690,5691,1,0,0,0,5691,5695,1,0,0,0,5692,5694,3,536,268,0,5693,5692,
  	1,0,0,0,5694,5697,1,0,0,0,5695,5693,1,0,0,0,5695,5696,1,0,0,0,5696,1019,
  	1,0,0,0,5697,5695,1,0,0,0,5698,5700,5,326,0,0,5699,5698,1,0,0,0,5699,
  	5700,1,0,0,0,5700,5701,1,0,0,0,5701,5705,5,335,0,0,5702,5704,3,536,268,
  	0,5703,5702,1,0,0,0,5704,5707,1,0,0,0,5705,5703,1,0,0,0,5705,5706,1,0,
  	0,0,5706,1021,1,0,0,0,5707,5705,1,0,0,0,5708,5710,5,312,0,0,5709,5711,
  	5,326,0,0,5710,5709,1,0,0,0,5710,5711,1,0,0,0,5711,5712,1,0,0,0,5712,
  	5716,5,335,0,0,5713,5715,3,536,268,0,5714,5713,1,0,0,0,5715,5718,1,0,
  	0,0,5716,5714,1,0,0,0,5716,5717,1,0,0,0,5717,1023,1,0,0,0,5718,5716,1,
  	0,0,0,5719,5721,5,326,0,0,5720,5719,1,0,0,0,5720,5721,1,0,0,0,5721,5722,
  	1,0,0,0,5722,5723,5,439,0,0,5723,5727,5,188,0,0,5724,5726,3,536,268,0,
  	5725,5724,1,0,0,0,5726,5729,1,0,0,0,5727,5725,1,0,0,0,5727,5728,1,0,0,
  	0,5728,1025,1,0,0,0,5729,5727,1,0,0,0,5730,5732,5,312,0,0,5731,5733,5,
  	326,0,0,5732,5731,1,0,0,0,5732,5733,1,0,0,0,5733,5734,1,0,0,0,5734,5735,
  	5,439,0,0,5735,5739,5,188,0,0,5736,5738,3,536,268,0,5737,5736,1,0,0,0,
  	5738,5741,1,0,0,0,5739,5737,1,0,0,0,5739,5740,1,0,0,0,5740,1027,1,0,0,
  	0,5741,5739,1,0,0,0,5742,5744,5,326,0,0,5743,5742,1,0,0,0,5743,5744,1,
  	0,0,0,5744,5745,1,0,0,0,5745,5749,5,196,0,0,5746,5748,3,536,268,0,5747,
  	5746,1,0,0,0,5748,5751,1,0,0,0,5749,5747,1,0,0,0,5749,5750,1,0,0,0,5750,
  	1029,1,0,0,0,5751,5749,1,0,0,0,5752,5754,5,312,0,0,5753,5755,5,326,0,
  	0,5754,5753,1,0,0,0,5754,5755,1,0,0,0,5755,5756,1,0,0,0,5756,5760,5,196,
  	0,0,5757,5759,3,536,268,0,5758,5757,1,0,0,0,5759,5762,1,0,0,0,5760,5758,
  	1,0,0,0,5760,5761,1,0,0,0,5761,1031,1,0,0,0,5762,5760,1,0,0,0,5763,5767,
  	3,1036,518,0,5764,5766,3,1034,517,0,5765,5764,1,0,0,0,5766,5769,1,0,0,
  	0,5767,5765,1,0,0,0,5767,5768,1,0,0,0,5768,1033,1,0,0,0,5769,5767,1,0,
  	0,0,5770,5771,7,62,0,0,5771,5772,3,1036,518,0,5772,1035,1,0,0,0,5773,
  	5777,3,1040,520,0,5774,5776,3,1038,519,0,5775,5774,1,0,0,0,5776,5779,
  	1,0,0,0,5777,5775,1,0,0,0,5777,5778,1,0,0,0,5778,1037,1,0,0,0,5779,5777,
  	1,0,0,0,5780,5781,7,63,0,0,5781,5782,3,1040,520,0,5782,1039,1,0,0,0,5783,
  	5785,7,62,0,0,5784,5783,1,0,0,0,5784,5785,1,0,0,0,5785,5786,1,0,0,0,5786,
  	5790,3,1044,522,0,5787,5789,3,1042,521,0,5788,5787,1,0,0,0,5789,5792,
  	1,0,0,0,5790,5788,1,0,0,0,5790,5791,1,0,0,0,5791,1041,1,0,0,0,5792,5790,
  	1,0,0,0,5793,5794,5,527,0,0,5794,5795,3,1044,522,0,5795,1043,1,0,0,0,
  	5796,5797,5,542,0,0,5797,5798,3,1032,516,0,5798,5799,5,549,0,0,5799,5803,
  	1,0,0,0,5800,5803,3,1074,537,0,5801,5803,3,1172,586,0,5802,5796,1,0,0,
  	0,5802,5800,1,0,0,0,5802,5801,1,0,0,0,5803,1045,1,0,0,0,5804,5808,3,1050,
  	525,0,5805,5807,3,1048,524,0,5806,5805,1,0,0,0,5807,5810,1,0,0,0,5808,
  	5806,1,0,0,0,5808,5809,1,0,0,0,5809,1047,1,0,0,0,5810,5808,1,0,0,0,5811,
  	5818,7,64,0,0,5812,5819,3,1050,525,0,5813,5815,3,1072,536,0,5814,5813,
  	1,0,0,0,5815,5816,1,0,0,0,5816,5814,1,0,0,0,5816,5817,1,0,0,0,5817,5819,
  	1,0,0,0,5818,5812,1,0,0,0,5818,5814,1,0,0,0,5819,1049,1,0,0,0,5820,5822,
  	5,312,0,0,5821,5820,1,0,0,0,5821,5822,1,0,0,0,5822,5823,1,0,0,0,5823,
  	5824,3,1052,526,0,5824,1051,1,0,0,0,5825,5826,5,542,0,0,5826,5827,3,1046,
  	523,0,5827,5828,5,549,0,0,5828,5833,1,0,0,0,5829,5833,3,1060,530,0,5830,
  	5833,3,1054,527,0,5831,5833,3,1056,528,0,5832,5825,1,0,0,0,5832,5829,
  	1,0,0,0,5832,5830,1,0,0,0,5832,5831,1,0,0,0,5833,1053,1,0,0,0,5834,5836,
  	3,1074,537,0,5835,5837,5,254,0,0,5836,5835,1,0,0,0,5836,5837,1,0,0,0,
  	5837,5839,1,0,0,0,5838,5840,5,312,0,0,5839,5838,1,0,0,0,5839,5840,1,0,
  	0,0,5840,5848,1,0,0,0,5841,5849,5,316,0,0,5842,5849,5,11,0,0,5843,5849,
  	5,12,0,0,5844,5849,5,13,0,0,5845,5849,5,116,0,0,5846,5849,5,257,0,0,5847,
  	5849,3,1122,561,0,5848,5841,1,0,0,0,5848,5842,1,0,0,0,5848,5843,1,0,0,
  	0,5848,5844,1,0,0,0,5848,5845,1,0,0,0,5848,5846,1,0,0,0,5848,5847,1,0,
  	0,0,5849,1055,1,0,0,0,5850,5872,3,1126,563,0,5851,5853,3,1102,551,0,5852,
  	5851,1,0,0,0,5853,5856,1,0,0,0,5854,5852,1,0,0,0,5854,5855,1,0,0,0,5855,
  	5858,1,0,0,0,5856,5854,1,0,0,0,5857,5859,3,1104,552,0,5858,5857,1,0,0,
  	0,5858,5859,1,0,0,0,5859,5863,1,0,0,0,5860,5862,3,1058,529,0,5861,5860,
  	1,0,0,0,5862,5865,1,0,0,0,5863,5861,1,0,0,0,5863,5864,1,0,0,0,5864,5873,
  	1,0,0,0,5865,5863,1,0,0,0,5866,5868,3,1106,553,0,5867,5866,1,0,0,0,5868,
  	5871,1,0,0,0,5869,5867,1,0,0,0,5869,5870,1,0,0,0,5870,5873,1,0,0,0,5871,
  	5869,1,0,0,0,5872,5854,1,0,0,0,5872,5869,1,0,0,0,5873,1057,1,0,0,0,5874,
  	5875,5,542,0,0,5875,5882,3,1086,543,0,5876,5878,5,529,0,0,5877,5876,1,
  	0,0,0,5877,5878,1,0,0,0,5878,5879,1,0,0,0,5879,5881,3,1086,543,0,5880,
  	5877,1,0,0,0,5881,5884,1,0,0,0,5882,5880,1,0,0,0,5882,5883,1,0,0,0,5883,
  	5885,1,0,0,0,5884,5882,1,0,0,0,5885,5886,5,549,0,0,5886,1059,1,0,0,0,
  	5887,5891,3,1062,531,0,5888,5891,3,1064,532,0,5889,5891,3,1066,533,0,
  	5890,5887,1,0,0,0,5890,5888,1,0,0,0,5890,5889,1,0,0,0,5891,1061,1,0,0,
  	0,5892,5894,3,1032,516,0,5893,5895,5,254,0,0,5894,5893,1,0,0,0,5894,5895,
  	1,0,0,0,5895,5897,1,0,0,0,5896,5898,5,312,0,0,5897,5896,1,0,0,0,5897,
  	5898,1,0,0,0,5898,5899,1,0,0,0,5899,5900,7,65,0,0,5900,1063,1,0,0,0,5901,
  	5902,3,1032,516,0,5902,5903,3,1070,535,0,5903,5904,3,1032,516,0,5904,
  	1065,1,0,0,0,5905,5906,3,1032,516,0,5906,5907,3,1070,535,0,5907,5908,
  	5,542,0,0,5908,5909,3,1068,534,0,5909,5910,5,549,0,0,5910,1067,1,0,0,
  	0,5911,5914,3,1032,516,0,5912,5913,7,64,0,0,5913,5915,3,1032,516,0,5914,
  	5912,1,0,0,0,5915,5916,1,0,0,0,5916,5914,1,0,0,0,5916,5917,1,0,0,0,5917,
  	1069,1,0,0,0,5918,5920,7,8,0,0,5919,5918,1,0,0,0,5919,5920,1,0,0,0,5920,
  	5962,1,0,0,0,5921,5923,5,312,0,0,5922,5921,1,0,0,0,5922,5923,1,0,0,0,
  	5923,5939,1,0,0,0,5924,5926,5,225,0,0,5925,5927,5,479,0,0,5926,5925,1,
  	0,0,0,5926,5927,1,0,0,0,5927,5940,1,0,0,0,5928,5940,5,544,0,0,5929,5931,
  	5,271,0,0,5930,5932,5,479,0,0,5931,5930,1,0,0,0,5931,5932,1,0,0,0,5932,
  	5940,1,0,0,0,5933,5940,5,540,0,0,5934,5936,5,186,0,0,5935,5937,5,489,
  	0,0,5936,5935,1,0,0,0,5936,5937,1,0,0,0,5937,5940,1,0,0,0,5938,5940,5,
  	536,0,0,5939,5924,1,0,0,0,5939,5928,1,0,0,0,5939,5929,1,0,0,0,5939,5933,
  	1,0,0,0,5939,5934,1,0,0,0,5939,5938,1,0,0,0,5940,5963,1,0,0,0,5941,5963,
  	5,546,0,0,5942,5944,5,225,0,0,5943,5945,5,479,0,0,5944,5943,1,0,0,0,5944,
  	5945,1,0,0,0,5945,5946,1,0,0,0,5946,5947,5,329,0,0,5947,5949,5,186,0,
  	0,5948,5950,5,489,0,0,5949,5948,1,0,0,0,5949,5950,1,0,0,0,5950,5963,1,
  	0,0,0,5951,5963,5,545,0,0,5952,5954,5,271,0,0,5953,5955,5,479,0,0,5954,
  	5953,1,0,0,0,5954,5955,1,0,0,0,5955,5956,1,0,0,0,5956,5957,5,329,0,0,
  	5957,5959,5,186,0,0,5958,5960,5,489,0,0,5959,5958,1,0,0,0,5959,5960,1,
  	0,0,0,5960,5963,1,0,0,0,5961,5963,5,541,0,0,5962,5922,1,0,0,0,5962,5941,
  	1,0,0,0,5962,5942,1,0,0,0,5962,5951,1,0,0,0,5962,5952,1,0,0,0,5962,5961,
  	1,0,0,0,5963,1071,1,0,0,0,5964,5966,5,312,0,0,5965,5964,1,0,0,0,5965,
  	5966,1,0,0,0,5966,5968,1,0,0,0,5967,5969,3,1070,535,0,5968,5967,1,0,0,
  	0,5968,5969,1,0,0,0,5969,5976,1,0,0,0,5970,5977,3,1032,516,0,5971,5972,
  	5,542,0,0,5972,5973,3,1032,516,0,5973,5974,3,1072,536,0,5974,5975,5,549,
  	0,0,5975,5977,1,0,0,0,5976,5970,1,0,0,0,5976,5971,1,0,0,0,5977,1073,1,
  	0,0,0,5978,5983,3,1090,545,0,5979,5983,3,1076,538,0,5980,5983,3,1078,
  	539,0,5981,5983,3,1186,593,0,5982,5978,1,0,0,0,5982,5979,1,0,0,0,5982,
  	5980,1,0,0,0,5982,5981,1,0,0,0,5983,1075,1,0,0,0,5984,6000,3,1090,545,
  	0,5985,5986,5,542,0,0,5986,5993,3,1086,543,0,5987,5989,5,529,0,0,5988,
  	5987,1,0,0,0,5988,5989,1,0,0,0,5989,5990,1,0,0,0,5990,5992,3,1086,543,
  	0,5991,5988,1,0,0,0,5992,5995,1,0,0,0,5993,5991,1,0,0,0,5993,5994,1,0,
  	0,0,5994,5996,1,0,0,0,5995,5993,1,0,0,0,5996,5997,5,549,0,0,5997,5999,
  	1,0,0,0,5998,5985,1,0,0,0,5999,6002,1,0,0,0,6000,5998,1,0,0,0,6000,6001,
  	1,0,0,0,6001,6004,1,0,0,0,6002,6000,1,0,0,0,6003,6005,3,1080,540,0,6004,
  	6003,1,0,0,0,6004,6005,1,0,0,0,6005,1077,1,0,0,0,6006,6007,5,217,0,0,
  	6007,6023,3,1136,568,0,6008,6009,5,542,0,0,6009,6016,3,1088,544,0,6010,
  	6012,5,529,0,0,6011,6010,1,0,0,0,6011,6012,1,0,0,0,6012,6013,1,0,0,0,
  	6013,6015,3,1088,544,0,6014,6011,1,0,0,0,6015,6018,1,0,0,0,6016,6014,
  	1,0,0,0,6016,6017,1,0,0,0,6017,6019,1,0,0,0,6018,6016,1,0,0,0,6019,6020,
  	5,549,0,0,6020,6022,1,0,0,0,6021,6008,1,0,0,0,6022,6025,1,0,0,0,6023,
  	6021,1,0,0,0,6023,6024,1,0,0,0,6024,6027,1,0,0,0,6025,6023,1,0,0,0,6026,
  	6028,3,1080,540,0,6027,6026,1,0,0,0,6027,6028,1,0,0,0,6028,1079,1,0,0,
  	0,6029,6030,5,542,0,0,6030,6031,3,1082,541,0,6031,6033,5,528,0,0,6032,
  	6034,3,1084,542,0,6033,6032,1,0,0,0,6033,6034,1,0,0,0,6034,6035,1,0,0,
  	0,6035,6036,5,549,0,0,6036,1081,1,0,0,0,6037,6038,3,1032,516,0,6038,1083,
  	1,0,0,0,6039,6040,3,1032,516,0,6040,1085,1,0,0,0,6041,6053,5,9,0,0,6042,
  	6053,3,1178,589,0,6043,6045,3,1090,545,0,6044,6046,3,1178,589,0,6045,
  	6044,1,0,0,0,6045,6046,1,0,0,0,6046,6053,1,0,0,0,6047,6049,3,1138,569,
  	0,6048,6050,3,1178,589,0,6049,6048,1,0,0,0,6049,6050,1,0,0,0,6050,6053,
  	1,0,0,0,6051,6053,3,1032,516,0,6052,6041,1,0,0,0,6052,6042,1,0,0,0,6052,
  	6043,1,0,0,0,6052,6047,1,0,0,0,6052,6051,1,0,0,0,6053,1087,1,0,0,0,6054,
  	6066,3,1172,586,0,6055,6066,3,1074,537,0,6056,6058,3,1090,545,0,6057,
  	6059,3,1178,589,0,6058,6057,1,0,0,0,6058,6059,1,0,0,0,6059,6066,1,0,0,
  	0,6060,6062,3,1138,569,0,6061,6063,3,1178,589,0,6062,6061,1,0,0,0,6062,
  	6063,1,0,0,0,6063,6066,1,0,0,0,6064,6066,3,1032,516,0,6065,6054,1,0,0,
  	0,6065,6055,1,0,0,0,6065,6056,1,0,0,0,6065,6060,1,0,0,0,6065,6064,1,0,
  	0,0,6066,1089,1,0,0,0,6067,6072,3,1092,546,0,6068,6072,3,1094,547,0,6069,
  	6072,3,1096,548,0,6070,6072,3,1098,549,0,6071,6067,1,0,0,0,6071,6068,
  	1,0,0,0,6071,6069,1,0,0,0,6071,6070,1,0,0,0,6072,1091,1,0,0,0,6073,6076,
  	3,1128,564,0,6074,6076,3,1126,563,0,6075,6073,1,0,0,0,6075,6074,1,0,0,
  	0,6076,6086,1,0,0,0,6077,6079,3,1100,550,0,6078,6077,1,0,0,0,6079,6080,
  	1,0,0,0,6080,6078,1,0,0,0,6080,6081,1,0,0,0,6081,6083,1,0,0,0,6082,6084,
  	3,1104,552,0,6083,6082,1,0,0,0,6083,6084,1,0,0,0,6084,6087,1,0,0,0,6085,
  	6087,3,1104,552,0,6086,6078,1,0,0,0,6086,6085,1,0,0,0,6086,6087,1,0,0,
  	0,6087,1093,1,0,0,0,6088,6089,3,1148,574,0,6089,6090,3,1108,554,0,6090,
  	1095,1,0,0,0,6091,6092,3,1168,584,0,6092,6093,3,1110,555,0,6093,1097,
  	1,0,0,0,6094,6095,5,278,0,0,6095,6096,3,1104,552,0,6096,1099,1,0,0,0,
  	6097,6100,3,1102,551,0,6098,6100,3,1112,556,0,6099,6097,1,0,0,0,6099,
  	6098,1,0,0,0,6100,1101,1,0,0,0,6101,6102,7,66,0,0,6102,6103,3,1128,564,
  	0,6103,1103,1,0,0,0,6104,6105,7,66,0,0,6105,6106,3,1134,567,0,6106,1105,
  	1,0,0,0,6107,6108,7,66,0,0,6108,6109,3,1146,573,0,6109,1107,1,0,0,0,6110,
  	6111,7,66,0,0,6111,6112,3,1162,581,0,6112,1109,1,0,0,0,6113,6114,7,66,
  	0,0,6114,6115,3,1142,571,0,6115,1111,1,0,0,0,6116,6117,7,66,0,0,6117,
  	6118,3,1076,538,0,6118,1113,1,0,0,0,6119,6120,3,1170,585,0,6120,1115,
  	1,0,0,0,6121,6122,3,1164,582,0,6122,1117,1,0,0,0,6123,6124,3,1152,576,
  	0,6124,1119,1,0,0,0,6125,6126,3,1170,585,0,6126,1121,1,0,0,0,6127,6128,
  	3,1170,585,0,6128,1123,1,0,0,0,6129,6130,3,1164,582,0,6130,1125,1,0,0,
  	0,6131,6132,3,1170,585,0,6132,1127,1,0,0,0,6133,6134,3,1170,585,0,6134,
  	1129,1,0,0,0,6135,6139,5,208,0,0,6136,6139,5,108,0,0,6137,6139,3,1128,
  	564,0,6138,6135,1,0,0,0,6138,6136,1,0,0,0,6138,6137,1,0,0,0,6139,1131,
  	1,0,0,0,6140,6141,3,1164,582,0,6141,1133,1,0,0,0,6142,6143,3,1170,585,
  	0,6143,1135,1,0,0,0,6144,6151,5,250,0,0,6145,6151,5,269,0,0,6146,6151,
  	5,369,0,0,6147,6151,5,464,0,0,6148,6151,5,513,0,0,6149,6151,3,1170,585,
  	0,6150,6144,1,0,0,0,6150,6145,1,0,0,0,6150,6146,1,0,0,0,6150,6147,1,0,
  	0,0,6150,6148,1,0,0,0,6150,6149,1,0,0,0,6151,1137,1,0,0,0,6152,6153,3,
  	1170,585,0,6153,1139,1,0,0,0,6154,6155,3,1164,582,0,6155,1141,1,0,0,0,
  	6156,6157,3,1170,585,0,6157,1143,1,0,0,0,6158,6159,3,1170,585,0,6159,
  	1145,1,0,0,0,6160,6161,3,1170,585,0,6161,1147,1,0,0,0,6162,6165,3,1170,
  	585,0,6163,6165,3,1178,589,0,6164,6162,1,0,0,0,6164,6163,1,0,0,0,6165,
  	1149,1,0,0,0,6166,6168,3,1148,574,0,6167,6169,3,1108,554,0,6168,6167,
  	1,0,0,0,6168,6169,1,0,0,0,6169,6172,1,0,0,0,6170,6172,3,1162,581,0,6171,
  	6166,1,0,0,0,6171,6170,1,0,0,0,6172,1151,1,0,0,0,6173,6176,5,551,0,0,
  	6174,6176,3,1170,585,0,6175,6173,1,0,0,0,6175,6174,1,0,0,0,6176,1153,
  	1,0,0,0,6177,6178,3,1090,545,0,6178,1155,1,0,0,0,6179,6180,3,1090,545,
  	0,6180,1157,1,0,0,0,6181,6182,3,1170,585,0,6182,1159,1,0,0,0,6183,6184,
  	3,1170,585,0,6184,1161,1,0,0,0,6185,6188,3,1170,585,0,6186,6188,3,1178,
  	589,0,6187,6185,1,0,0,0,6187,6186,1,0,0,0,6188,1163,1,0,0,0,6189,6190,
  	3,1170,585,0,6190,1165,1,0,0,0,6191,6192,3,1170,585,0,6192,1167,1,0,0,
  	0,6193,6194,3,1170,585,0,6194,1169,1,0,0,0,6195,6196,7,67,0,0,6196,1171,
  	1,0,0,0,6197,6204,5,551,0,0,6198,6204,3,1184,592,0,6199,6204,3,1176,588,
  	0,6200,6204,3,1174,587,0,6201,6204,3,1180,590,0,6202,6204,3,1182,591,
  	0,6203,6197,1,0,0,0,6203,6198,1,0,0,0,6203,6199,1,0,0,0,6203,6200,1,0,
  	0,0,6203,6201,1,0,0,0,6203,6202,1,0,0,0,6204,1173,1,0,0,0,6205,6206,7,
  	68,0,0,6206,1175,1,0,0,0,6207,6211,5,556,0,0,6208,6211,5,521,0,0,6209,
  	6211,3,1178,589,0,6210,6207,1,0,0,0,6210,6208,1,0,0,0,6210,6209,1,0,0,
  	0,6211,1177,1,0,0,0,6212,6213,7,69,0,0,6213,1179,1,0,0,0,6214,6215,5,
  	138,0,0,6215,6218,5,542,0,0,6216,6219,3,1170,585,0,6217,6219,3,1172,586,
  	0,6218,6216,1,0,0,0,6218,6217,1,0,0,0,6219,6220,1,0,0,0,6220,6221,5,549,
  	0,0,6221,1181,1,0,0,0,6222,6223,5,139,0,0,6223,6226,5,542,0,0,6224,6227,
  	3,1170,585,0,6225,6227,3,1172,586,0,6226,6224,1,0,0,0,6226,6225,1,0,0,
  	0,6227,6228,1,0,0,0,6228,6229,5,549,0,0,6229,1183,1,0,0,0,6230,6231,5,
  	9,0,0,6231,6246,3,1172,586,0,6232,6246,5,230,0,0,6233,6246,5,231,0,0,
  	6234,6246,5,291,0,0,6235,6246,5,292,0,0,6236,6246,5,313,0,0,6237,6246,
  	5,314,0,0,6238,6246,5,367,0,0,6239,6246,5,368,0,0,6240,6246,5,450,0,0,
  	6241,6246,5,451,0,0,6242,6246,5,521,0,0,6243,6246,5,523,0,0,6244,6246,
  	5,524,0,0,6245,6230,1,0,0,0,6245,6232,1,0,0,0,6245,6233,1,0,0,0,6245,
  	6234,1,0,0,0,6245,6235,1,0,0,0,6245,6236,1,0,0,0,6245,6237,1,0,0,0,6245,
  	6238,1,0,0,0,6245,6239,1,0,0,0,6245,6240,1,0,0,0,6245,6241,1,0,0,0,6245,
  	6242,1,0,0,0,6245,6243,1,0,0,0,6245,6244,1,0,0,0,6246,1185,1,0,0,0,6247,
  	6248,5,5,0,0,6248,6249,5,323,0,0,6249,6281,3,1074,537,0,6250,6281,5,111,
  	0,0,6251,6281,5,114,0,0,6252,6281,5,115,0,0,6253,6281,5,118,0,0,6254,
  	6281,5,119,0,0,6255,6281,5,120,0,0,6256,6281,5,121,0,0,6257,6281,5,122,
  	0,0,6258,6281,5,123,0,0,6259,6281,5,124,0,0,6260,6262,5,269,0,0,6261,
  	6263,5,323,0,0,6262,6261,1,0,0,0,6262,6263,1,0,0,0,6263,6264,1,0,0,0,
  	6264,6281,3,1074,537,0,6265,6281,5,278,0,0,6266,6281,5,281,0,0,6267,6281,
  	5,341,0,0,6268,6281,5,404,0,0,6269,6281,5,435,0,0,6270,6281,5,436,0,0,
  	6271,6281,5,441,0,0,6272,6281,5,442,0,0,6273,6281,5,443,0,0,6274,6281,
  	5,445,0,0,6275,6281,5,446,0,0,6276,6281,5,447,0,0,6277,6281,5,471,0,0,
  	6278,6281,5,485,0,0,6279,6281,5,513,0,0,6280,6247,1,0,0,0,6280,6250,1,
  	0,0,0,6280,6251,1,0,0,0,6280,6252,1,0,0,0,6280,6253,1,0,0,0,6280,6254,
  	1,0,0,0,6280,6255,1,0,0,0,6280,6256,1,0,0,0,6280,6257,1,0,0,0,6280,6258,
  	1,0,0,0,6280,6259,1,0,0,0,6280,6260,1,0,0,0,6280,6265,1,0,0,0,6280,6266,
  	1,0,0,0,6280,6267,1,0,0,0,6280,6268,1,0,0,0,6280,6269,1,0,0,0,6280,6270,
  	1,0,0,0,6280,6271,1,0,0,0,6280,6272,1,0,0,0,6280,6273,1,0,0,0,6280,6274,
  	1,0,0,0,6280,6275,1,0,0,0,6280,6276,1,0,0,0,6280,6277,1,0,0,0,6280,6278,
  	1,0,0,0,6280,6279,1,0,0,0,6281,1187,1,0,0,0,6282,6284,5,562,0,0,6283,
  	6282,1,0,0,0,6284,6285,1,0,0,0,6285,6283,1,0,0,0,6285,6286,1,0,0,0,6286,
  	1189,1,0,0,0,979,1196,1200,1203,1206,1211,1215,1229,1238,1244,1248,1250,
  	1253,1256,1261,1266,1271,1276,1281,1286,1294,1300,1308,1314,1320,1324,
  	1334,1344,1348,1352,1355,1359,1362,1366,1369,1372,1375,1379,1384,1387,
  	1390,1393,1397,1402,1406,1412,1425,1429,1442,1446,1452,1455,1466,1468,
  	1475,1477,1486,1491,1495,1500,1505,1512,1515,1518,1523,1528,1532,1536,
  	1540,1543,1547,1552,1556,1562,1566,1568,1571,1575,1580,1582,1587,1589,
  	1593,1597,1600,1604,1607,1612,1615,1618,1622,1625,1630,1633,1636,1638,
  	1642,1648,1651,1654,1658,1662,1665,1668,1673,1677,1682,1685,1690,1698,
  	1703,1707,1712,1721,1726,1741,1745,1758,1763,1766,1769,1773,1775,1782,
  	1788,1791,1795,1800,1805,1809,1812,1818,1821,1825,1828,1831,1836,1839,
  	1843,1846,1849,1853,1858,1862,1866,1870,1873,1882,1887,1891,1897,1903,
  	1905,1911,1917,1920,1928,1932,1935,1938,1943,1948,1951,1956,1961,1966,
  	1976,1988,1996,2002,2007,2014,2028,2031,2036,2042,2046,2049,2058,2061,
  	2065,2068,2072,2075,2078,2082,2085,2087,2091,2094,2097,2102,2110,2114,
  	2116,2123,2125,2132,2136,2140,2145,2149,2151,2156,2160,2164,2167,2172,
  	2178,2181,2185,2189,2192,2195,2200,2203,2206,2211,2215,2218,2226,2232,
  	2236,2238,2243,2251,2265,2274,2282,2284,2290,2295,2298,2310,2313,2315,
  	2323,2332,2334,2342,2352,2355,2357,2365,2379,2381,2386,2393,2398,2402,
  	2409,2416,2423,2428,2432,2437,2441,2446,2450,2455,2459,2464,2468,2475,
  	2486,2491,2500,2506,2526,2538,2540,2565,2569,2573,2576,2579,2583,2587,
  	2590,2593,2597,2601,2605,2609,2613,2617,2623,2629,2636,2639,2649,2655,
  	2661,2665,2667,2672,2674,2684,2687,2691,2694,2699,2711,2718,2723,2727,
  	2730,2733,2736,2738,2743,2750,2754,2756,2760,2779,2784,2787,2791,2797,
  	2800,2807,2820,2823,2825,2832,2838,2841,2847,2851,2854,2857,2860,2864,
  	2868,2872,2880,2885,2895,2901,2905,2909,2914,2918,2925,2930,2936,2941,
  	2944,2948,2957,2962,2967,2972,2976,2983,2987,2991,2993,3000,3005,3009,
  	3019,3024,3030,3033,3039,3042,3046,3048,3054,3057,3061,3065,3068,3071,
  	3074,3082,3088,3095,3100,3103,3106,3109,3121,3125,3131,3135,3138,3143,
  	3151,3156,3179,3181,3199,3202,3208,3215,3220,3223,3231,3236,3239,3243,
  	3246,3251,3256,3259,3264,3266,3273,3276,3281,3285,3292,3295,3299,3317,
  	3324,3327,3341,3345,3347,3352,3354,3358,3361,3367,3372,3378,3380,3384,
  	3415,3420,3424,3428,3432,3434,3438,3443,3448,3452,3458,3466,3469,3473,
  	3481,3488,3491,3494,3499,3502,3506,3509,3512,3518,3523,3530,3545,3551,
  	3561,3567,3576,3579,3584,3638,3646,3649,3652,3655,3660,3664,3671,3677,
  	3687,3695,3698,3701,3704,3709,3715,3720,3726,3728,3734,3743,3747,3751,
  	3755,3759,3767,3773,3780,3783,3786,3789,3792,3795,3798,3804,3809,3812,
  	3815,3820,3826,3831,3834,3837,3843,3849,3851,3855,3858,3864,3870,3872,
  	3877,3886,3893,3899,3905,3909,3912,3915,3920,3922,3925,3930,3933,3939,
  	3945,3947,3952,3956,3963,3967,3971,3977,3982,3985,3988,3992,3999,4002,
  	4005,4008,4013,4018,4022,4027,4033,4036,4039,4042,4046,4051,4056,4059,
  	4067,4072,4075,4078,4081,4084,4090,4095,4098,4103,4106,4112,4116,4120,
  	4128,4133,4137,4142,4150,4152,4159,4165,4168,4171,4177,4185,4190,4198,
  	4203,4207,4211,4224,4230,4235,4240,4245,4249,4252,4257,4261,4265,4274,
  	4278,4286,4290,4293,4295,4301,4304,4307,4314,4317,4325,4328,4334,4337,
  	4343,4347,4352,4358,4366,4372,4377,4379,4385,4390,4395,4401,4408,4410,
  	4416,4424,4431,4437,4441,4446,4451,4457,4463,4468,4472,4476,4483,4486,
  	4491,4495,4500,4504,4508,4513,4516,4520,4525,4528,4531,4534,4541,4545,
  	4553,4558,4562,4571,4583,4587,4591,4598,4602,4610,4617,4622,4625,4628,
  	4631,4636,4640,4647,4651,4655,4662,4664,4670,4675,4679,4685,4689,4693,
  	4699,4705,4710,4713,4718,4726,4729,4734,4738,4743,4753,4755,4762,4767,
  	4780,4786,4789,4798,4803,4806,4809,4812,4815,4818,4821,4824,4827,4830,
  	4836,4841,4845,4852,4855,4858,4861,4871,4873,4882,4887,4891,4894,4901,
  	4909,4914,4918,4921,4928,4934,4938,4942,4950,4955,4958,4962,4965,4973,
  	4976,4979,4982,4989,4993,4996,5001,5004,5016,5019,5024,5027,5030,5034,
  	5037,5040,5043,5046,5060,5064,5068,5073,5079,5082,5090,5093,5098,5104,
  	5109,5115,5126,5130,5134,5141,5144,5147,5150,5155,5159,5164,5168,5172,
  	5177,5180,5184,5187,5190,5194,5199,5202,5205,5208,5215,5219,5226,5230,
  	5239,5244,5248,5257,5269,5274,5277,5280,5283,5287,5291,5296,5302,5308,
  	5313,5316,5323,5329,5333,5336,5339,5342,5347,5351,5355,5359,5364,5369,
  	5375,5384,5387,5390,5393,5398,5404,5409,5417,5426,5430,5434,5438,5442,
  	5451,5454,5457,5460,5463,5470,5473,5477,5480,5484,5488,5492,5498,5502,
  	5505,5509,5515,5520,5527,5534,5537,5541,5546,5557,5559,5562,5566,5571,
  	5577,5580,5585,5590,5593,5596,5599,5602,5605,5608,5613,5617,5622,5628,
  	5631,5636,5642,5647,5653,5657,5663,5668,5674,5679,5684,5690,5695,5699,
  	5705,5710,5716,5720,5727,5732,5739,5743,5749,5754,5760,5767,5777,5784,
  	5790,5802,5808,5816,5818,5821,5832,5836,5839,5848,5854,5858,5863,5869,
  	5872,5877,5882,5890,5894,5897,5916,5919,5922,5926,5931,5936,5939,5944,
  	5949,5954,5959,5962,5965,5968,5976,5982,5988,5993,6000,6004,6011,6016,
  	6023,6027,6033,6045,6049,6052,6058,6062,6065,6071,6075,6080,6083,6086,
  	6099,6138,6150,6164,6168,6171,6175,6187,6203,6210,6218,6226,6245,6262,
  	6280,6285
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  cobol85ParserStaticData = staticData.release();
}

}

Cobol85Parser::Cobol85Parser(TokenStream *input) : Cobol85Parser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

Cobol85Parser::Cobol85Parser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  Cobol85Parser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *cobol85ParserStaticData->atn, cobol85ParserStaticData->decisionToDFA, cobol85ParserStaticData->sharedContextCache, options);
}

Cobol85Parser::~Cobol85Parser() {
  delete _interpreter;
}

const atn::ATN& Cobol85Parser::getATN() const {
  return *cobol85ParserStaticData->atn;
}

std::string Cobol85Parser::getGrammarFileName() const {
  return "Cobol85.g4";
}

const std::vector<std::string>& Cobol85Parser::getRuleNames() const {
  return cobol85ParserStaticData->ruleNames;
}

const dfa::Vocabulary& Cobol85Parser::getVocabulary() const {
  return cobol85ParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView Cobol85Parser::getSerializedATN() const {
  return cobol85ParserStaticData->serializedATN;
}


//----------------- StartRuleContext ------------------------------------------------------------------

Cobol85Parser::StartRuleContext::StartRuleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::CompilationUnitContext* Cobol85Parser::StartRuleContext::compilationUnit() {
  return getRuleContext<Cobol85Parser::CompilationUnitContext>(0);
}

tree::TerminalNode* Cobol85Parser::StartRuleContext::EOF() {
  return getToken(Cobol85Parser::EOF, 0);
}


size_t Cobol85Parser::StartRuleContext::getRuleIndex() const {
  return Cobol85Parser::RuleStartRule;
}

void Cobol85Parser::StartRuleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStartRule(this);
}

void Cobol85Parser::StartRuleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStartRule(this);
}

Cobol85Parser::StartRuleContext* Cobol85Parser::startRule() {
  StartRuleContext *_localctx = _tracker.createInstance<StartRuleContext>(_ctx, getState());
  enterRule(_localctx, 0, Cobol85Parser::RuleStartRule);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1190);
    compilationUnit();
    setState(1191);
    match(Cobol85Parser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CompilationUnitContext ------------------------------------------------------------------

Cobol85Parser::CompilationUnitContext::CompilationUnitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Cobol85Parser::ProgramUnitContext *> Cobol85Parser::CompilationUnitContext::programUnit() {
  return getRuleContexts<Cobol85Parser::ProgramUnitContext>();
}

Cobol85Parser::ProgramUnitContext* Cobol85Parser::CompilationUnitContext::programUnit(size_t i) {
  return getRuleContext<Cobol85Parser::ProgramUnitContext>(i);
}


size_t Cobol85Parser::CompilationUnitContext::getRuleIndex() const {
  return Cobol85Parser::RuleCompilationUnit;
}

void Cobol85Parser::CompilationUnitContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCompilationUnit(this);
}

void Cobol85Parser::CompilationUnitContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCompilationUnit(this);
}

Cobol85Parser::CompilationUnitContext* Cobol85Parser::compilationUnit() {
  CompilationUnitContext *_localctx = _tracker.createInstance<CompilationUnitContext>(_ctx, getState());
  enterRule(_localctx, 2, Cobol85Parser::RuleCompilationUnit);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1194); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1193);
      programUnit();
      setState(1196); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == Cobol85Parser::ID

    || _la == Cobol85Parser::IDENTIFICATION);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProgramUnitContext ------------------------------------------------------------------

Cobol85Parser::ProgramUnitContext::ProgramUnitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::IdentificationDivisionContext* Cobol85Parser::ProgramUnitContext::identificationDivision() {
  return getRuleContext<Cobol85Parser::IdentificationDivisionContext>(0);
}

Cobol85Parser::EnvironmentDivisionContext* Cobol85Parser::ProgramUnitContext::environmentDivision() {
  return getRuleContext<Cobol85Parser::EnvironmentDivisionContext>(0);
}

Cobol85Parser::DataDivisionContext* Cobol85Parser::ProgramUnitContext::dataDivision() {
  return getRuleContext<Cobol85Parser::DataDivisionContext>(0);
}

Cobol85Parser::ProcedureDivisionContext* Cobol85Parser::ProgramUnitContext::procedureDivision() {
  return getRuleContext<Cobol85Parser::ProcedureDivisionContext>(0);
}

std::vector<Cobol85Parser::ProgramUnitContext *> Cobol85Parser::ProgramUnitContext::programUnit() {
  return getRuleContexts<Cobol85Parser::ProgramUnitContext>();
}

Cobol85Parser::ProgramUnitContext* Cobol85Parser::ProgramUnitContext::programUnit(size_t i) {
  return getRuleContext<Cobol85Parser::ProgramUnitContext>(i);
}

Cobol85Parser::EndProgramStatementContext* Cobol85Parser::ProgramUnitContext::endProgramStatement() {
  return getRuleContext<Cobol85Parser::EndProgramStatementContext>(0);
}


size_t Cobol85Parser::ProgramUnitContext::getRuleIndex() const {
  return Cobol85Parser::RuleProgramUnit;
}

void Cobol85Parser::ProgramUnitContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProgramUnit(this);
}

void Cobol85Parser::ProgramUnitContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProgramUnit(this);
}

Cobol85Parser::ProgramUnitContext* Cobol85Parser::programUnit() {
  ProgramUnitContext *_localctx = _tracker.createInstance<ProgramUnitContext>(_ctx, getState());
  enterRule(_localctx, 4, Cobol85Parser::RuleProgramUnit);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1198);
    identificationDivision();
    setState(1200);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::ENVIRONMENT) {
      setState(1199);
      environmentDivision();
    }
    setState(1203);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::DATA) {
      setState(1202);
      dataDivision();
    }
    setState(1206);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::PROCEDURE) {
      setState(1205);
      procedureDivision();
    }
    setState(1211);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 4, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1208);
        programUnit(); 
      }
      setState(1213);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 4, _ctx);
    }
    setState(1215);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 5, _ctx)) {
    case 1: {
      setState(1214);
      endProgramStatement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EndProgramStatementContext ------------------------------------------------------------------

Cobol85Parser::EndProgramStatementContext::EndProgramStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::EndProgramStatementContext::END() {
  return getToken(Cobol85Parser::END, 0);
}

tree::TerminalNode* Cobol85Parser::EndProgramStatementContext::PROGRAM() {
  return getToken(Cobol85Parser::PROGRAM, 0);
}

Cobol85Parser::ProgramNameContext* Cobol85Parser::EndProgramStatementContext::programName() {
  return getRuleContext<Cobol85Parser::ProgramNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::EndProgramStatementContext::DOT_FS() {
  return getToken(Cobol85Parser::DOT_FS, 0);
}


size_t Cobol85Parser::EndProgramStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleEndProgramStatement;
}

void Cobol85Parser::EndProgramStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEndProgramStatement(this);
}

void Cobol85Parser::EndProgramStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEndProgramStatement(this);
}

Cobol85Parser::EndProgramStatementContext* Cobol85Parser::endProgramStatement() {
  EndProgramStatementContext *_localctx = _tracker.createInstance<EndProgramStatementContext>(_ctx, getState());
  enterRule(_localctx, 6, Cobol85Parser::RuleEndProgramStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1217);
    match(Cobol85Parser::END);
    setState(1218);
    match(Cobol85Parser::PROGRAM);
    setState(1219);
    programName();
    setState(1220);
    match(Cobol85Parser::DOT_FS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdentificationDivisionContext ------------------------------------------------------------------

Cobol85Parser::IdentificationDivisionContext::IdentificationDivisionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::IdentificationDivisionContext::DIVISION() {
  return getToken(Cobol85Parser::DIVISION, 0);
}

tree::TerminalNode* Cobol85Parser::IdentificationDivisionContext::DOT_FS() {
  return getToken(Cobol85Parser::DOT_FS, 0);
}

Cobol85Parser::ProgramIdParagraphContext* Cobol85Parser::IdentificationDivisionContext::programIdParagraph() {
  return getRuleContext<Cobol85Parser::ProgramIdParagraphContext>(0);
}

tree::TerminalNode* Cobol85Parser::IdentificationDivisionContext::IDENTIFICATION() {
  return getToken(Cobol85Parser::IDENTIFICATION, 0);
}

tree::TerminalNode* Cobol85Parser::IdentificationDivisionContext::ID() {
  return getToken(Cobol85Parser::ID, 0);
}

std::vector<Cobol85Parser::IdentificationDivisionBodyContext *> Cobol85Parser::IdentificationDivisionContext::identificationDivisionBody() {
  return getRuleContexts<Cobol85Parser::IdentificationDivisionBodyContext>();
}

Cobol85Parser::IdentificationDivisionBodyContext* Cobol85Parser::IdentificationDivisionContext::identificationDivisionBody(size_t i) {
  return getRuleContext<Cobol85Parser::IdentificationDivisionBodyContext>(i);
}


size_t Cobol85Parser::IdentificationDivisionContext::getRuleIndex() const {
  return Cobol85Parser::RuleIdentificationDivision;
}

void Cobol85Parser::IdentificationDivisionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIdentificationDivision(this);
}

void Cobol85Parser::IdentificationDivisionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIdentificationDivision(this);
}

Cobol85Parser::IdentificationDivisionContext* Cobol85Parser::identificationDivision() {
  IdentificationDivisionContext *_localctx = _tracker.createInstance<IdentificationDivisionContext>(_ctx, getState());
  enterRule(_localctx, 8, Cobol85Parser::RuleIdentificationDivision);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1222);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::ID

    || _la == Cobol85Parser::IDENTIFICATION)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(1223);
    match(Cobol85Parser::DIVISION);
    setState(1224);
    match(Cobol85Parser::DOT_FS);
    setState(1225);
    programIdParagraph();
    setState(1229);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Cobol85Parser::AUTHOR || _la == Cobol85Parser::DATE_COMPILED

    || _la == Cobol85Parser::DATE_WRITTEN || _la == Cobol85Parser::INSTALLATION || _la == Cobol85Parser::REMARKS

    || _la == Cobol85Parser::SECURITY) {
      setState(1226);
      identificationDivisionBody();
      setState(1231);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdentificationDivisionBodyContext ------------------------------------------------------------------

Cobol85Parser::IdentificationDivisionBodyContext::IdentificationDivisionBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::AuthorParagraphContext* Cobol85Parser::IdentificationDivisionBodyContext::authorParagraph() {
  return getRuleContext<Cobol85Parser::AuthorParagraphContext>(0);
}

Cobol85Parser::InstallationParagraphContext* Cobol85Parser::IdentificationDivisionBodyContext::installationParagraph() {
  return getRuleContext<Cobol85Parser::InstallationParagraphContext>(0);
}

Cobol85Parser::DateWrittenParagraphContext* Cobol85Parser::IdentificationDivisionBodyContext::dateWrittenParagraph() {
  return getRuleContext<Cobol85Parser::DateWrittenParagraphContext>(0);
}

Cobol85Parser::DateCompiledParagraphContext* Cobol85Parser::IdentificationDivisionBodyContext::dateCompiledParagraph() {
  return getRuleContext<Cobol85Parser::DateCompiledParagraphContext>(0);
}

Cobol85Parser::SecurityParagraphContext* Cobol85Parser::IdentificationDivisionBodyContext::securityParagraph() {
  return getRuleContext<Cobol85Parser::SecurityParagraphContext>(0);
}

Cobol85Parser::RemarksParagraphContext* Cobol85Parser::IdentificationDivisionBodyContext::remarksParagraph() {
  return getRuleContext<Cobol85Parser::RemarksParagraphContext>(0);
}


size_t Cobol85Parser::IdentificationDivisionBodyContext::getRuleIndex() const {
  return Cobol85Parser::RuleIdentificationDivisionBody;
}

void Cobol85Parser::IdentificationDivisionBodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIdentificationDivisionBody(this);
}

void Cobol85Parser::IdentificationDivisionBodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIdentificationDivisionBody(this);
}

Cobol85Parser::IdentificationDivisionBodyContext* Cobol85Parser::identificationDivisionBody() {
  IdentificationDivisionBodyContext *_localctx = _tracker.createInstance<IdentificationDivisionBodyContext>(_ctx, getState());
  enterRule(_localctx, 10, Cobol85Parser::RuleIdentificationDivisionBody);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1238);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Cobol85Parser::AUTHOR: {
        enterOuterAlt(_localctx, 1);
        setState(1232);
        authorParagraph();
        break;
      }

      case Cobol85Parser::INSTALLATION: {
        enterOuterAlt(_localctx, 2);
        setState(1233);
        installationParagraph();
        break;
      }

      case Cobol85Parser::DATE_WRITTEN: {
        enterOuterAlt(_localctx, 3);
        setState(1234);
        dateWrittenParagraph();
        break;
      }

      case Cobol85Parser::DATE_COMPILED: {
        enterOuterAlt(_localctx, 4);
        setState(1235);
        dateCompiledParagraph();
        break;
      }

      case Cobol85Parser::SECURITY: {
        enterOuterAlt(_localctx, 5);
        setState(1236);
        securityParagraph();
        break;
      }

      case Cobol85Parser::REMARKS: {
        enterOuterAlt(_localctx, 6);
        setState(1237);
        remarksParagraph();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProgramIdParagraphContext ------------------------------------------------------------------

Cobol85Parser::ProgramIdParagraphContext::ProgramIdParagraphContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ProgramIdParagraphContext::PROGRAM_ID() {
  return getToken(Cobol85Parser::PROGRAM_ID, 0);
}

std::vector<tree::TerminalNode *> Cobol85Parser::ProgramIdParagraphContext::DOT_FS() {
  return getTokens(Cobol85Parser::DOT_FS);
}

tree::TerminalNode* Cobol85Parser::ProgramIdParagraphContext::DOT_FS(size_t i) {
  return getToken(Cobol85Parser::DOT_FS, i);
}

Cobol85Parser::ProgramNameContext* Cobol85Parser::ProgramIdParagraphContext::programName() {
  return getRuleContext<Cobol85Parser::ProgramNameContext>(0);
}

Cobol85Parser::CommentEntryContext* Cobol85Parser::ProgramIdParagraphContext::commentEntry() {
  return getRuleContext<Cobol85Parser::CommentEntryContext>(0);
}

tree::TerminalNode* Cobol85Parser::ProgramIdParagraphContext::COMMON() {
  return getToken(Cobol85Parser::COMMON, 0);
}

tree::TerminalNode* Cobol85Parser::ProgramIdParagraphContext::INITIAL() {
  return getToken(Cobol85Parser::INITIAL, 0);
}

tree::TerminalNode* Cobol85Parser::ProgramIdParagraphContext::LIBRARY() {
  return getToken(Cobol85Parser::LIBRARY, 0);
}

tree::TerminalNode* Cobol85Parser::ProgramIdParagraphContext::DEFINITION() {
  return getToken(Cobol85Parser::DEFINITION, 0);
}

tree::TerminalNode* Cobol85Parser::ProgramIdParagraphContext::RECURSIVE() {
  return getToken(Cobol85Parser::RECURSIVE, 0);
}

tree::TerminalNode* Cobol85Parser::ProgramIdParagraphContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}

tree::TerminalNode* Cobol85Parser::ProgramIdParagraphContext::PROGRAM() {
  return getToken(Cobol85Parser::PROGRAM, 0);
}


size_t Cobol85Parser::ProgramIdParagraphContext::getRuleIndex() const {
  return Cobol85Parser::RuleProgramIdParagraph;
}

void Cobol85Parser::ProgramIdParagraphContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProgramIdParagraph(this);
}

void Cobol85Parser::ProgramIdParagraphContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProgramIdParagraph(this);
}

Cobol85Parser::ProgramIdParagraphContext* Cobol85Parser::programIdParagraph() {
  ProgramIdParagraphContext *_localctx = _tracker.createInstance<ProgramIdParagraphContext>(_ctx, getState());
  enterRule(_localctx, 12, Cobol85Parser::RuleProgramIdParagraph);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1240);
    match(Cobol85Parser::PROGRAM_ID);
    setState(1241);
    match(Cobol85Parser::DOT_FS);
    setState(1242);
    programName();
    setState(1250);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::COMMON

    || _la == Cobol85Parser::DEFINITION || ((((_la - 243) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 243)) & 2147485697) != 0) || _la == Cobol85Parser::RECURSIVE) {
      setState(1244);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Cobol85Parser::IS) {
        setState(1243);
        match(Cobol85Parser::IS);
      }
      setState(1246);
      _la = _input->LA(1);
      if (!(_la == Cobol85Parser::COMMON

      || _la == Cobol85Parser::DEFINITION || _la == Cobol85Parser::INITIAL

      || _la == Cobol85Parser::LIBRARY || _la == Cobol85Parser::RECURSIVE)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1248);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Cobol85Parser::PROGRAM) {
        setState(1247);
        match(Cobol85Parser::PROGRAM);
      }
    }
    setState(1253);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::DOT_FS) {
      setState(1252);
      match(Cobol85Parser::DOT_FS);
    }
    setState(1256);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::COMMENTENTRYLINE) {
      setState(1255);
      commentEntry();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AuthorParagraphContext ------------------------------------------------------------------

Cobol85Parser::AuthorParagraphContext::AuthorParagraphContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::AuthorParagraphContext::AUTHOR() {
  return getToken(Cobol85Parser::AUTHOR, 0);
}

tree::TerminalNode* Cobol85Parser::AuthorParagraphContext::DOT_FS() {
  return getToken(Cobol85Parser::DOT_FS, 0);
}

Cobol85Parser::CommentEntryContext* Cobol85Parser::AuthorParagraphContext::commentEntry() {
  return getRuleContext<Cobol85Parser::CommentEntryContext>(0);
}


size_t Cobol85Parser::AuthorParagraphContext::getRuleIndex() const {
  return Cobol85Parser::RuleAuthorParagraph;
}

void Cobol85Parser::AuthorParagraphContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAuthorParagraph(this);
}

void Cobol85Parser::AuthorParagraphContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAuthorParagraph(this);
}

Cobol85Parser::AuthorParagraphContext* Cobol85Parser::authorParagraph() {
  AuthorParagraphContext *_localctx = _tracker.createInstance<AuthorParagraphContext>(_ctx, getState());
  enterRule(_localctx, 14, Cobol85Parser::RuleAuthorParagraph);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1258);
    match(Cobol85Parser::AUTHOR);
    setState(1259);
    match(Cobol85Parser::DOT_FS);
    setState(1261);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::COMMENTENTRYLINE) {
      setState(1260);
      commentEntry();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InstallationParagraphContext ------------------------------------------------------------------

Cobol85Parser::InstallationParagraphContext::InstallationParagraphContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::InstallationParagraphContext::INSTALLATION() {
  return getToken(Cobol85Parser::INSTALLATION, 0);
}

tree::TerminalNode* Cobol85Parser::InstallationParagraphContext::DOT_FS() {
  return getToken(Cobol85Parser::DOT_FS, 0);
}

Cobol85Parser::CommentEntryContext* Cobol85Parser::InstallationParagraphContext::commentEntry() {
  return getRuleContext<Cobol85Parser::CommentEntryContext>(0);
}


size_t Cobol85Parser::InstallationParagraphContext::getRuleIndex() const {
  return Cobol85Parser::RuleInstallationParagraph;
}

void Cobol85Parser::InstallationParagraphContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInstallationParagraph(this);
}

void Cobol85Parser::InstallationParagraphContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInstallationParagraph(this);
}

Cobol85Parser::InstallationParagraphContext* Cobol85Parser::installationParagraph() {
  InstallationParagraphContext *_localctx = _tracker.createInstance<InstallationParagraphContext>(_ctx, getState());
  enterRule(_localctx, 16, Cobol85Parser::RuleInstallationParagraph);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1263);
    match(Cobol85Parser::INSTALLATION);
    setState(1264);
    match(Cobol85Parser::DOT_FS);
    setState(1266);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::COMMENTENTRYLINE) {
      setState(1265);
      commentEntry();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DateWrittenParagraphContext ------------------------------------------------------------------

Cobol85Parser::DateWrittenParagraphContext::DateWrittenParagraphContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::DateWrittenParagraphContext::DATE_WRITTEN() {
  return getToken(Cobol85Parser::DATE_WRITTEN, 0);
}

tree::TerminalNode* Cobol85Parser::DateWrittenParagraphContext::DOT_FS() {
  return getToken(Cobol85Parser::DOT_FS, 0);
}

Cobol85Parser::CommentEntryContext* Cobol85Parser::DateWrittenParagraphContext::commentEntry() {
  return getRuleContext<Cobol85Parser::CommentEntryContext>(0);
}


size_t Cobol85Parser::DateWrittenParagraphContext::getRuleIndex() const {
  return Cobol85Parser::RuleDateWrittenParagraph;
}

void Cobol85Parser::DateWrittenParagraphContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDateWrittenParagraph(this);
}

void Cobol85Parser::DateWrittenParagraphContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDateWrittenParagraph(this);
}

Cobol85Parser::DateWrittenParagraphContext* Cobol85Parser::dateWrittenParagraph() {
  DateWrittenParagraphContext *_localctx = _tracker.createInstance<DateWrittenParagraphContext>(_ctx, getState());
  enterRule(_localctx, 18, Cobol85Parser::RuleDateWrittenParagraph);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1268);
    match(Cobol85Parser::DATE_WRITTEN);
    setState(1269);
    match(Cobol85Parser::DOT_FS);
    setState(1271);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::COMMENTENTRYLINE) {
      setState(1270);
      commentEntry();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DateCompiledParagraphContext ------------------------------------------------------------------

Cobol85Parser::DateCompiledParagraphContext::DateCompiledParagraphContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::DateCompiledParagraphContext::DATE_COMPILED() {
  return getToken(Cobol85Parser::DATE_COMPILED, 0);
}

tree::TerminalNode* Cobol85Parser::DateCompiledParagraphContext::DOT_FS() {
  return getToken(Cobol85Parser::DOT_FS, 0);
}

Cobol85Parser::CommentEntryContext* Cobol85Parser::DateCompiledParagraphContext::commentEntry() {
  return getRuleContext<Cobol85Parser::CommentEntryContext>(0);
}


size_t Cobol85Parser::DateCompiledParagraphContext::getRuleIndex() const {
  return Cobol85Parser::RuleDateCompiledParagraph;
}

void Cobol85Parser::DateCompiledParagraphContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDateCompiledParagraph(this);
}

void Cobol85Parser::DateCompiledParagraphContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDateCompiledParagraph(this);
}

Cobol85Parser::DateCompiledParagraphContext* Cobol85Parser::dateCompiledParagraph() {
  DateCompiledParagraphContext *_localctx = _tracker.createInstance<DateCompiledParagraphContext>(_ctx, getState());
  enterRule(_localctx, 20, Cobol85Parser::RuleDateCompiledParagraph);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1273);
    match(Cobol85Parser::DATE_COMPILED);
    setState(1274);
    match(Cobol85Parser::DOT_FS);
    setState(1276);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::COMMENTENTRYLINE) {
      setState(1275);
      commentEntry();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SecurityParagraphContext ------------------------------------------------------------------

Cobol85Parser::SecurityParagraphContext::SecurityParagraphContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::SecurityParagraphContext::SECURITY() {
  return getToken(Cobol85Parser::SECURITY, 0);
}

tree::TerminalNode* Cobol85Parser::SecurityParagraphContext::DOT_FS() {
  return getToken(Cobol85Parser::DOT_FS, 0);
}

Cobol85Parser::CommentEntryContext* Cobol85Parser::SecurityParagraphContext::commentEntry() {
  return getRuleContext<Cobol85Parser::CommentEntryContext>(0);
}


size_t Cobol85Parser::SecurityParagraphContext::getRuleIndex() const {
  return Cobol85Parser::RuleSecurityParagraph;
}

void Cobol85Parser::SecurityParagraphContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSecurityParagraph(this);
}

void Cobol85Parser::SecurityParagraphContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSecurityParagraph(this);
}

Cobol85Parser::SecurityParagraphContext* Cobol85Parser::securityParagraph() {
  SecurityParagraphContext *_localctx = _tracker.createInstance<SecurityParagraphContext>(_ctx, getState());
  enterRule(_localctx, 22, Cobol85Parser::RuleSecurityParagraph);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1278);
    match(Cobol85Parser::SECURITY);
    setState(1279);
    match(Cobol85Parser::DOT_FS);
    setState(1281);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::COMMENTENTRYLINE) {
      setState(1280);
      commentEntry();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RemarksParagraphContext ------------------------------------------------------------------

Cobol85Parser::RemarksParagraphContext::RemarksParagraphContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::RemarksParagraphContext::REMARKS() {
  return getToken(Cobol85Parser::REMARKS, 0);
}

tree::TerminalNode* Cobol85Parser::RemarksParagraphContext::DOT_FS() {
  return getToken(Cobol85Parser::DOT_FS, 0);
}

Cobol85Parser::CommentEntryContext* Cobol85Parser::RemarksParagraphContext::commentEntry() {
  return getRuleContext<Cobol85Parser::CommentEntryContext>(0);
}


size_t Cobol85Parser::RemarksParagraphContext::getRuleIndex() const {
  return Cobol85Parser::RuleRemarksParagraph;
}

void Cobol85Parser::RemarksParagraphContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRemarksParagraph(this);
}

void Cobol85Parser::RemarksParagraphContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRemarksParagraph(this);
}

Cobol85Parser::RemarksParagraphContext* Cobol85Parser::remarksParagraph() {
  RemarksParagraphContext *_localctx = _tracker.createInstance<RemarksParagraphContext>(_ctx, getState());
  enterRule(_localctx, 24, Cobol85Parser::RuleRemarksParagraph);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1283);
    match(Cobol85Parser::REMARKS);
    setState(1284);
    match(Cobol85Parser::DOT_FS);
    setState(1286);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::COMMENTENTRYLINE) {
      setState(1285);
      commentEntry();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnvironmentDivisionContext ------------------------------------------------------------------

Cobol85Parser::EnvironmentDivisionContext::EnvironmentDivisionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::EnvironmentDivisionContext::ENVIRONMENT() {
  return getToken(Cobol85Parser::ENVIRONMENT, 0);
}

tree::TerminalNode* Cobol85Parser::EnvironmentDivisionContext::DIVISION() {
  return getToken(Cobol85Parser::DIVISION, 0);
}

tree::TerminalNode* Cobol85Parser::EnvironmentDivisionContext::DOT_FS() {
  return getToken(Cobol85Parser::DOT_FS, 0);
}

std::vector<Cobol85Parser::EnvironmentDivisionBodyContext *> Cobol85Parser::EnvironmentDivisionContext::environmentDivisionBody() {
  return getRuleContexts<Cobol85Parser::EnvironmentDivisionBodyContext>();
}

Cobol85Parser::EnvironmentDivisionBodyContext* Cobol85Parser::EnvironmentDivisionContext::environmentDivisionBody(size_t i) {
  return getRuleContext<Cobol85Parser::EnvironmentDivisionBodyContext>(i);
}


size_t Cobol85Parser::EnvironmentDivisionContext::getRuleIndex() const {
  return Cobol85Parser::RuleEnvironmentDivision;
}

void Cobol85Parser::EnvironmentDivisionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnvironmentDivision(this);
}

void Cobol85Parser::EnvironmentDivisionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnvironmentDivision(this);
}

Cobol85Parser::EnvironmentDivisionContext* Cobol85Parser::environmentDivision() {
  EnvironmentDivisionContext *_localctx = _tracker.createInstance<EnvironmentDivisionContext>(_ctx, getState());
  enterRule(_localctx, 26, Cobol85Parser::RuleEnvironmentDivision);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1288);
    match(Cobol85Parser::ENVIRONMENT);
    setState(1289);
    match(Cobol85Parser::DIVISION);
    setState(1290);
    match(Cobol85Parser::DOT_FS);
    setState(1294);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Cobol85Parser::CONFIGURATION || _la == Cobol85Parser::INPUT_OUTPUT || _la == Cobol85Parser::SPECIAL_NAMES) {
      setState(1291);
      environmentDivisionBody();
      setState(1296);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnvironmentDivisionBodyContext ------------------------------------------------------------------

Cobol85Parser::EnvironmentDivisionBodyContext::EnvironmentDivisionBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::ConfigurationSectionContext* Cobol85Parser::EnvironmentDivisionBodyContext::configurationSection() {
  return getRuleContext<Cobol85Parser::ConfigurationSectionContext>(0);
}

Cobol85Parser::SpecialNamesParagraphContext* Cobol85Parser::EnvironmentDivisionBodyContext::specialNamesParagraph() {
  return getRuleContext<Cobol85Parser::SpecialNamesParagraphContext>(0);
}

Cobol85Parser::InputOutputSectionContext* Cobol85Parser::EnvironmentDivisionBodyContext::inputOutputSection() {
  return getRuleContext<Cobol85Parser::InputOutputSectionContext>(0);
}


size_t Cobol85Parser::EnvironmentDivisionBodyContext::getRuleIndex() const {
  return Cobol85Parser::RuleEnvironmentDivisionBody;
}

void Cobol85Parser::EnvironmentDivisionBodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnvironmentDivisionBody(this);
}

void Cobol85Parser::EnvironmentDivisionBodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnvironmentDivisionBody(this);
}

Cobol85Parser::EnvironmentDivisionBodyContext* Cobol85Parser::environmentDivisionBody() {
  EnvironmentDivisionBodyContext *_localctx = _tracker.createInstance<EnvironmentDivisionBodyContext>(_ctx, getState());
  enterRule(_localctx, 28, Cobol85Parser::RuleEnvironmentDivisionBody);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1300);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Cobol85Parser::CONFIGURATION: {
        enterOuterAlt(_localctx, 1);
        setState(1297);
        configurationSection();
        break;
      }

      case Cobol85Parser::SPECIAL_NAMES: {
        enterOuterAlt(_localctx, 2);
        setState(1298);
        specialNamesParagraph();
        break;
      }

      case Cobol85Parser::INPUT_OUTPUT: {
        enterOuterAlt(_localctx, 3);
        setState(1299);
        inputOutputSection();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConfigurationSectionContext ------------------------------------------------------------------

Cobol85Parser::ConfigurationSectionContext::ConfigurationSectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ConfigurationSectionContext::CONFIGURATION() {
  return getToken(Cobol85Parser::CONFIGURATION, 0);
}

tree::TerminalNode* Cobol85Parser::ConfigurationSectionContext::SECTION() {
  return getToken(Cobol85Parser::SECTION, 0);
}

tree::TerminalNode* Cobol85Parser::ConfigurationSectionContext::DOT_FS() {
  return getToken(Cobol85Parser::DOT_FS, 0);
}

std::vector<Cobol85Parser::ConfigurationSectionParagraphContext *> Cobol85Parser::ConfigurationSectionContext::configurationSectionParagraph() {
  return getRuleContexts<Cobol85Parser::ConfigurationSectionParagraphContext>();
}

Cobol85Parser::ConfigurationSectionParagraphContext* Cobol85Parser::ConfigurationSectionContext::configurationSectionParagraph(size_t i) {
  return getRuleContext<Cobol85Parser::ConfigurationSectionParagraphContext>(i);
}


size_t Cobol85Parser::ConfigurationSectionContext::getRuleIndex() const {
  return Cobol85Parser::RuleConfigurationSection;
}

void Cobol85Parser::ConfigurationSectionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConfigurationSection(this);
}

void Cobol85Parser::ConfigurationSectionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConfigurationSection(this);
}

Cobol85Parser::ConfigurationSectionContext* Cobol85Parser::configurationSection() {
  ConfigurationSectionContext *_localctx = _tracker.createInstance<ConfigurationSectionContext>(_ctx, getState());
  enterRule(_localctx, 30, Cobol85Parser::RuleConfigurationSection);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1302);
    match(Cobol85Parser::CONFIGURATION);
    setState(1303);
    match(Cobol85Parser::SECTION);
    setState(1304);
    match(Cobol85Parser::DOT_FS);
    setState(1308);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 21, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1305);
        configurationSectionParagraph(); 
      }
      setState(1310);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 21, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConfigurationSectionParagraphContext ------------------------------------------------------------------

Cobol85Parser::ConfigurationSectionParagraphContext::ConfigurationSectionParagraphContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::SourceComputerParagraphContext* Cobol85Parser::ConfigurationSectionParagraphContext::sourceComputerParagraph() {
  return getRuleContext<Cobol85Parser::SourceComputerParagraphContext>(0);
}

Cobol85Parser::ObjectComputerParagraphContext* Cobol85Parser::ConfigurationSectionParagraphContext::objectComputerParagraph() {
  return getRuleContext<Cobol85Parser::ObjectComputerParagraphContext>(0);
}

Cobol85Parser::SpecialNamesParagraphContext* Cobol85Parser::ConfigurationSectionParagraphContext::specialNamesParagraph() {
  return getRuleContext<Cobol85Parser::SpecialNamesParagraphContext>(0);
}


size_t Cobol85Parser::ConfigurationSectionParagraphContext::getRuleIndex() const {
  return Cobol85Parser::RuleConfigurationSectionParagraph;
}

void Cobol85Parser::ConfigurationSectionParagraphContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConfigurationSectionParagraph(this);
}

void Cobol85Parser::ConfigurationSectionParagraphContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConfigurationSectionParagraph(this);
}

Cobol85Parser::ConfigurationSectionParagraphContext* Cobol85Parser::configurationSectionParagraph() {
  ConfigurationSectionParagraphContext *_localctx = _tracker.createInstance<ConfigurationSectionParagraphContext>(_ctx, getState());
  enterRule(_localctx, 32, Cobol85Parser::RuleConfigurationSectionParagraph);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1314);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Cobol85Parser::SOURCE_COMPUTER: {
        enterOuterAlt(_localctx, 1);
        setState(1311);
        sourceComputerParagraph();
        break;
      }

      case Cobol85Parser::OBJECT_COMPUTER: {
        enterOuterAlt(_localctx, 2);
        setState(1312);
        objectComputerParagraph();
        break;
      }

      case Cobol85Parser::SPECIAL_NAMES: {
        enterOuterAlt(_localctx, 3);
        setState(1313);
        specialNamesParagraph();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SourceComputerParagraphContext ------------------------------------------------------------------

Cobol85Parser::SourceComputerParagraphContext::SourceComputerParagraphContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::SourceComputerParagraphContext::SOURCE_COMPUTER() {
  return getToken(Cobol85Parser::SOURCE_COMPUTER, 0);
}

std::vector<tree::TerminalNode *> Cobol85Parser::SourceComputerParagraphContext::DOT_FS() {
  return getTokens(Cobol85Parser::DOT_FS);
}

tree::TerminalNode* Cobol85Parser::SourceComputerParagraphContext::DOT_FS(size_t i) {
  return getToken(Cobol85Parser::DOT_FS, i);
}

Cobol85Parser::ComputerNameContext* Cobol85Parser::SourceComputerParagraphContext::computerName() {
  return getRuleContext<Cobol85Parser::ComputerNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::SourceComputerParagraphContext::DEBUGGING() {
  return getToken(Cobol85Parser::DEBUGGING, 0);
}

tree::TerminalNode* Cobol85Parser::SourceComputerParagraphContext::MODE() {
  return getToken(Cobol85Parser::MODE, 0);
}

tree::TerminalNode* Cobol85Parser::SourceComputerParagraphContext::WITH() {
  return getToken(Cobol85Parser::WITH, 0);
}


size_t Cobol85Parser::SourceComputerParagraphContext::getRuleIndex() const {
  return Cobol85Parser::RuleSourceComputerParagraph;
}

void Cobol85Parser::SourceComputerParagraphContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSourceComputerParagraph(this);
}

void Cobol85Parser::SourceComputerParagraphContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSourceComputerParagraph(this);
}

Cobol85Parser::SourceComputerParagraphContext* Cobol85Parser::sourceComputerParagraph() {
  SourceComputerParagraphContext *_localctx = _tracker.createInstance<SourceComputerParagraphContext>(_ctx, getState());
  enterRule(_localctx, 34, Cobol85Parser::RuleSourceComputerParagraph);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1316);
    match(Cobol85Parser::SOURCE_COMPUTER);
    setState(1317);
    match(Cobol85Parser::DOT_FS);
    setState(1318);
    computerName();
    setState(1324);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::DEBUGGING || _la == Cobol85Parser::WITH) {
      setState(1320);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Cobol85Parser::WITH) {
        setState(1319);
        match(Cobol85Parser::WITH);
      }
      setState(1322);
      match(Cobol85Parser::DEBUGGING);
      setState(1323);
      match(Cobol85Parser::MODE);
    }
    setState(1326);
    match(Cobol85Parser::DOT_FS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ObjectComputerParagraphContext ------------------------------------------------------------------

Cobol85Parser::ObjectComputerParagraphContext::ObjectComputerParagraphContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ObjectComputerParagraphContext::OBJECT_COMPUTER() {
  return getToken(Cobol85Parser::OBJECT_COMPUTER, 0);
}

std::vector<tree::TerminalNode *> Cobol85Parser::ObjectComputerParagraphContext::DOT_FS() {
  return getTokens(Cobol85Parser::DOT_FS);
}

tree::TerminalNode* Cobol85Parser::ObjectComputerParagraphContext::DOT_FS(size_t i) {
  return getToken(Cobol85Parser::DOT_FS, i);
}

Cobol85Parser::ComputerNameContext* Cobol85Parser::ObjectComputerParagraphContext::computerName() {
  return getRuleContext<Cobol85Parser::ComputerNameContext>(0);
}

std::vector<Cobol85Parser::ObjectComputerClauseContext *> Cobol85Parser::ObjectComputerParagraphContext::objectComputerClause() {
  return getRuleContexts<Cobol85Parser::ObjectComputerClauseContext>();
}

Cobol85Parser::ObjectComputerClauseContext* Cobol85Parser::ObjectComputerParagraphContext::objectComputerClause(size_t i) {
  return getRuleContext<Cobol85Parser::ObjectComputerClauseContext>(i);
}


size_t Cobol85Parser::ObjectComputerParagraphContext::getRuleIndex() const {
  return Cobol85Parser::RuleObjectComputerParagraph;
}

void Cobol85Parser::ObjectComputerParagraphContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterObjectComputerParagraph(this);
}

void Cobol85Parser::ObjectComputerParagraphContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitObjectComputerParagraph(this);
}

Cobol85Parser::ObjectComputerParagraphContext* Cobol85Parser::objectComputerParagraph() {
  ObjectComputerParagraphContext *_localctx = _tracker.createInstance<ObjectComputerParagraphContext>(_ctx, getState());
  enterRule(_localctx, 36, Cobol85Parser::RuleObjectComputerParagraph);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1328);
    match(Cobol85Parser::OBJECT_COMPUTER);
    setState(1329);
    match(Cobol85Parser::DOT_FS);
    setState(1330);
    computerName();
    setState(1334);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Cobol85Parser::CHARACTER

    || _la == Cobol85Parser::COLLATING || _la == Cobol85Parser::DISK || _la == Cobol85Parser::MEMORY || _la == Cobol85Parser::PROGRAM

    || _la == Cobol85Parser::SEGMENT_LIMIT || _la == Cobol85Parser::SEQUENCE) {
      setState(1331);
      objectComputerClause();
      setState(1336);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1337);
    match(Cobol85Parser::DOT_FS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ObjectComputerClauseContext ------------------------------------------------------------------

Cobol85Parser::ObjectComputerClauseContext::ObjectComputerClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::MemorySizeClauseContext* Cobol85Parser::ObjectComputerClauseContext::memorySizeClause() {
  return getRuleContext<Cobol85Parser::MemorySizeClauseContext>(0);
}

Cobol85Parser::DiskSizeClauseContext* Cobol85Parser::ObjectComputerClauseContext::diskSizeClause() {
  return getRuleContext<Cobol85Parser::DiskSizeClauseContext>(0);
}

Cobol85Parser::CollatingSequenceClauseContext* Cobol85Parser::ObjectComputerClauseContext::collatingSequenceClause() {
  return getRuleContext<Cobol85Parser::CollatingSequenceClauseContext>(0);
}

Cobol85Parser::SegmentLimitClauseContext* Cobol85Parser::ObjectComputerClauseContext::segmentLimitClause() {
  return getRuleContext<Cobol85Parser::SegmentLimitClauseContext>(0);
}

Cobol85Parser::CharacterSetClauseContext* Cobol85Parser::ObjectComputerClauseContext::characterSetClause() {
  return getRuleContext<Cobol85Parser::CharacterSetClauseContext>(0);
}


size_t Cobol85Parser::ObjectComputerClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleObjectComputerClause;
}

void Cobol85Parser::ObjectComputerClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterObjectComputerClause(this);
}

void Cobol85Parser::ObjectComputerClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitObjectComputerClause(this);
}

Cobol85Parser::ObjectComputerClauseContext* Cobol85Parser::objectComputerClause() {
  ObjectComputerClauseContext *_localctx = _tracker.createInstance<ObjectComputerClauseContext>(_ctx, getState());
  enterRule(_localctx, 38, Cobol85Parser::RuleObjectComputerClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1344);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Cobol85Parser::MEMORY: {
        enterOuterAlt(_localctx, 1);
        setState(1339);
        memorySizeClause();
        break;
      }

      case Cobol85Parser::DISK: {
        enterOuterAlt(_localctx, 2);
        setState(1340);
        diskSizeClause();
        break;
      }

      case Cobol85Parser::COLLATING:
      case Cobol85Parser::PROGRAM:
      case Cobol85Parser::SEQUENCE: {
        enterOuterAlt(_localctx, 3);
        setState(1341);
        collatingSequenceClause();
        break;
      }

      case Cobol85Parser::SEGMENT_LIMIT: {
        enterOuterAlt(_localctx, 4);
        setState(1342);
        segmentLimitClause();
        break;
      }

      case Cobol85Parser::CHARACTER: {
        enterOuterAlt(_localctx, 5);
        setState(1343);
        characterSetClause();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MemorySizeClauseContext ------------------------------------------------------------------

Cobol85Parser::MemorySizeClauseContext::MemorySizeClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::MemorySizeClauseContext::MEMORY() {
  return getToken(Cobol85Parser::MEMORY, 0);
}

Cobol85Parser::IntegerLiteralContext* Cobol85Parser::MemorySizeClauseContext::integerLiteral() {
  return getRuleContext<Cobol85Parser::IntegerLiteralContext>(0);
}

Cobol85Parser::CobolWordContext* Cobol85Parser::MemorySizeClauseContext::cobolWord() {
  return getRuleContext<Cobol85Parser::CobolWordContext>(0);
}

tree::TerminalNode* Cobol85Parser::MemorySizeClauseContext::SIZE() {
  return getToken(Cobol85Parser::SIZE, 0);
}

tree::TerminalNode* Cobol85Parser::MemorySizeClauseContext::WORDS() {
  return getToken(Cobol85Parser::WORDS, 0);
}

tree::TerminalNode* Cobol85Parser::MemorySizeClauseContext::CHARACTERS() {
  return getToken(Cobol85Parser::CHARACTERS, 0);
}

tree::TerminalNode* Cobol85Parser::MemorySizeClauseContext::MODULES() {
  return getToken(Cobol85Parser::MODULES, 0);
}


size_t Cobol85Parser::MemorySizeClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleMemorySizeClause;
}

void Cobol85Parser::MemorySizeClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMemorySizeClause(this);
}

void Cobol85Parser::MemorySizeClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMemorySizeClause(this);
}

Cobol85Parser::MemorySizeClauseContext* Cobol85Parser::memorySizeClause() {
  MemorySizeClauseContext *_localctx = _tracker.createInstance<MemorySizeClauseContext>(_ctx, getState());
  enterRule(_localctx, 40, Cobol85Parser::RuleMemorySizeClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1346);
    match(Cobol85Parser::MEMORY);
    setState(1348);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::SIZE) {
      setState(1347);
      match(Cobol85Parser::SIZE);
    }
    setState(1352);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Cobol85Parser::LEVEL_NUMBER_66:
      case Cobol85Parser::LEVEL_NUMBER_77:
      case Cobol85Parser::LEVEL_NUMBER_88:
      case Cobol85Parser::INTEGERLITERAL: {
        setState(1350);
        integerLiteral();
        break;
      }

      case Cobol85Parser::ABORT:
      case Cobol85Parser::AS:
      case Cobol85Parser::ASCII:
      case Cobol85Parser::ASSOCIATED_DATA:
      case Cobol85Parser::ASSOCIATED_DATA_LENGTH:
      case Cobol85Parser::ATTRIBUTE:
      case Cobol85Parser::AUTO:
      case Cobol85Parser::AUTO_SKIP:
      case Cobol85Parser::BACKGROUND_COLOR:
      case Cobol85Parser::BACKGROUND_COLOUR:
      case Cobol85Parser::BEEP:
      case Cobol85Parser::BELL:
      case Cobol85Parser::BINARY:
      case Cobol85Parser::BIT:
      case Cobol85Parser::BLINK:
      case Cobol85Parser::BOUNDS:
      case Cobol85Parser::CAPABLE:
      case Cobol85Parser::CCSVERSION:
      case Cobol85Parser::CHANGED:
      case Cobol85Parser::CHANNEL:
      case Cobol85Parser::CLOSE_DISPOSITION:
      case Cobol85Parser::COBOL:
      case Cobol85Parser::COMMITMENT:
      case Cobol85Parser::CONTROL_POINT:
      case Cobol85Parser::CONVENTION:
      case Cobol85Parser::CRUNCH:
      case Cobol85Parser::CURSOR:
      case Cobol85Parser::DEFAULT:
      case Cobol85Parser::DEFAULT_DISPLAY:
      case Cobol85Parser::DEFINITION:
      case Cobol85Parser::DFHRESP:
      case Cobol85Parser::DFHVALUE:
      case Cobol85Parser::DISK:
      case Cobol85Parser::DONTCARE:
      case Cobol85Parser::DOUBLE:
      case Cobol85Parser::EBCDIC:
      case Cobol85Parser::EMPTY_CHECK:
      case Cobol85Parser::ENTER:
      case Cobol85Parser::ENTRY_PROCEDURE:
      case Cobol85Parser::ERASE:
      case Cobol85Parser::EOL:
      case Cobol85Parser::EOS:
      case Cobol85Parser::ESCAPE:
      case Cobol85Parser::EVENT:
      case Cobol85Parser::EXCLUSIVE:
      case Cobol85Parser::EXPORT:
      case Cobol85Parser::EXTENDED:
      case Cobol85Parser::FOREGROUND_COLOR:
      case Cobol85Parser::FOREGROUND_COLOUR:
      case Cobol85Parser::FULL:
      case Cobol85Parser::FUNCTIONNAME:
      case Cobol85Parser::FUNCTION_POINTER:
      case Cobol85Parser::GRID:
      case Cobol85Parser::HIGHLIGHT:
      case Cobol85Parser::IMPLICIT:
      case Cobol85Parser::IMPORT:
      case Cobol85Parser::INTEGER:
      case Cobol85Parser::KEPT:
      case Cobol85Parser::KEYBOARD:
      case Cobol85Parser::LANGUAGE:
      case Cobol85Parser::LB:
      case Cobol85Parser::LD:
      case Cobol85Parser::LEFTLINE:
      case Cobol85Parser::LENGTH_CHECK:
      case Cobol85Parser::LIBACCESS:
      case Cobol85Parser::LIBPARAMETER:
      case Cobol85Parser::LIBRARY:
      case Cobol85Parser::LIST:
      case Cobol85Parser::LOCAL:
      case Cobol85Parser::LONG_DATE:
      case Cobol85Parser::LONG_TIME:
      case Cobol85Parser::LOWER:
      case Cobol85Parser::LOWLIGHT:
      case Cobol85Parser::MMDDYYYY:
      case Cobol85Parser::NAMED:
      case Cobol85Parser::NATIONAL:
      case Cobol85Parser::NATIONAL_EDITED:
      case Cobol85Parser::NETWORK:
      case Cobol85Parser::NO_ECHO:
      case Cobol85Parser::NUMERIC_DATE:
      case Cobol85Parser::NUMERIC_TIME:
      case Cobol85Parser::ODT:
      case Cobol85Parser::ORDERLY:
      case Cobol85Parser::OVERLINE:
      case Cobol85Parser::OWN:
      case Cobol85Parser::PASSWORD:
      case Cobol85Parser::PORT:
      case Cobol85Parser::PRINTER:
      case Cobol85Parser::PRIVATE:
      case Cobol85Parser::PROCESS:
      case Cobol85Parser::PROGRAM:
      case Cobol85Parser::PROMPT:
      case Cobol85Parser::READER:
      case Cobol85Parser::REMOTE:
      case Cobol85Parser::REAL:
      case Cobol85Parser::RECEIVED:
      case Cobol85Parser::RECURSIVE:
      case Cobol85Parser::REF:
      case Cobol85Parser::REMOVE:
      case Cobol85Parser::REQUIRED:
      case Cobol85Parser::REVERSE_VIDEO:
      case Cobol85Parser::SAVE:
      case Cobol85Parser::SECURE:
      case Cobol85Parser::SHARED:
      case Cobol85Parser::SHAREDBYALL:
      case Cobol85Parser::SHAREDBYRUNUNIT:
      case Cobol85Parser::SHARING:
      case Cobol85Parser::SHORT_DATE:
      case Cobol85Parser::SYMBOL:
      case Cobol85Parser::TASK:
      case Cobol85Parser::THREAD:
      case Cobol85Parser::THREAD_LOCAL:
      case Cobol85Parser::TIMER:
      case Cobol85Parser::TODAYS_DATE:
      case Cobol85Parser::TODAYS_NAME:
      case Cobol85Parser::TRUNCATED:
      case Cobol85Parser::TYPEDEF:
      case Cobol85Parser::UNDERLINE:
      case Cobol85Parser::VIRTUAL:
      case Cobol85Parser::WAIT:
      case Cobol85Parser::YEAR:
      case Cobol85Parser::YYYYMMDD:
      case Cobol85Parser::YYYYDDD:
      case Cobol85Parser::ZERO_FILL:
      case Cobol85Parser::IDENTIFIER: {
        setState(1351);
        cobolWord();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(1355);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::CHARACTERS || _la == Cobol85Parser::MODULES || _la == Cobol85Parser::WORDS) {
      setState(1354);
      _la = _input->LA(1);
      if (!(_la == Cobol85Parser::CHARACTERS || _la == Cobol85Parser::MODULES || _la == Cobol85Parser::WORDS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiskSizeClauseContext ------------------------------------------------------------------

Cobol85Parser::DiskSizeClauseContext::DiskSizeClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::DiskSizeClauseContext::DISK() {
  return getToken(Cobol85Parser::DISK, 0);
}

Cobol85Parser::IntegerLiteralContext* Cobol85Parser::DiskSizeClauseContext::integerLiteral() {
  return getRuleContext<Cobol85Parser::IntegerLiteralContext>(0);
}

Cobol85Parser::CobolWordContext* Cobol85Parser::DiskSizeClauseContext::cobolWord() {
  return getRuleContext<Cobol85Parser::CobolWordContext>(0);
}

tree::TerminalNode* Cobol85Parser::DiskSizeClauseContext::SIZE() {
  return getToken(Cobol85Parser::SIZE, 0);
}

tree::TerminalNode* Cobol85Parser::DiskSizeClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}

tree::TerminalNode* Cobol85Parser::DiskSizeClauseContext::WORDS() {
  return getToken(Cobol85Parser::WORDS, 0);
}

tree::TerminalNode* Cobol85Parser::DiskSizeClauseContext::MODULES() {
  return getToken(Cobol85Parser::MODULES, 0);
}


size_t Cobol85Parser::DiskSizeClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleDiskSizeClause;
}

void Cobol85Parser::DiskSizeClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDiskSizeClause(this);
}

void Cobol85Parser::DiskSizeClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDiskSizeClause(this);
}

Cobol85Parser::DiskSizeClauseContext* Cobol85Parser::diskSizeClause() {
  DiskSizeClauseContext *_localctx = _tracker.createInstance<DiskSizeClauseContext>(_ctx, getState());
  enterRule(_localctx, 42, Cobol85Parser::RuleDiskSizeClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1357);
    match(Cobol85Parser::DISK);
    setState(1359);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::SIZE) {
      setState(1358);
      match(Cobol85Parser::SIZE);
    }
    setState(1362);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(1361);
      match(Cobol85Parser::IS);
    }
    setState(1366);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Cobol85Parser::LEVEL_NUMBER_66:
      case Cobol85Parser::LEVEL_NUMBER_77:
      case Cobol85Parser::LEVEL_NUMBER_88:
      case Cobol85Parser::INTEGERLITERAL: {
        setState(1364);
        integerLiteral();
        break;
      }

      case Cobol85Parser::ABORT:
      case Cobol85Parser::AS:
      case Cobol85Parser::ASCII:
      case Cobol85Parser::ASSOCIATED_DATA:
      case Cobol85Parser::ASSOCIATED_DATA_LENGTH:
      case Cobol85Parser::ATTRIBUTE:
      case Cobol85Parser::AUTO:
      case Cobol85Parser::AUTO_SKIP:
      case Cobol85Parser::BACKGROUND_COLOR:
      case Cobol85Parser::BACKGROUND_COLOUR:
      case Cobol85Parser::BEEP:
      case Cobol85Parser::BELL:
      case Cobol85Parser::BINARY:
      case Cobol85Parser::BIT:
      case Cobol85Parser::BLINK:
      case Cobol85Parser::BOUNDS:
      case Cobol85Parser::CAPABLE:
      case Cobol85Parser::CCSVERSION:
      case Cobol85Parser::CHANGED:
      case Cobol85Parser::CHANNEL:
      case Cobol85Parser::CLOSE_DISPOSITION:
      case Cobol85Parser::COBOL:
      case Cobol85Parser::COMMITMENT:
      case Cobol85Parser::CONTROL_POINT:
      case Cobol85Parser::CONVENTION:
      case Cobol85Parser::CRUNCH:
      case Cobol85Parser::CURSOR:
      case Cobol85Parser::DEFAULT:
      case Cobol85Parser::DEFAULT_DISPLAY:
      case Cobol85Parser::DEFINITION:
      case Cobol85Parser::DFHRESP:
      case Cobol85Parser::DFHVALUE:
      case Cobol85Parser::DISK:
      case Cobol85Parser::DONTCARE:
      case Cobol85Parser::DOUBLE:
      case Cobol85Parser::EBCDIC:
      case Cobol85Parser::EMPTY_CHECK:
      case Cobol85Parser::ENTER:
      case Cobol85Parser::ENTRY_PROCEDURE:
      case Cobol85Parser::ERASE:
      case Cobol85Parser::EOL:
      case Cobol85Parser::EOS:
      case Cobol85Parser::ESCAPE:
      case Cobol85Parser::EVENT:
      case Cobol85Parser::EXCLUSIVE:
      case Cobol85Parser::EXPORT:
      case Cobol85Parser::EXTENDED:
      case Cobol85Parser::FOREGROUND_COLOR:
      case Cobol85Parser::FOREGROUND_COLOUR:
      case Cobol85Parser::FULL:
      case Cobol85Parser::FUNCTIONNAME:
      case Cobol85Parser::FUNCTION_POINTER:
      case Cobol85Parser::GRID:
      case Cobol85Parser::HIGHLIGHT:
      case Cobol85Parser::IMPLICIT:
      case Cobol85Parser::IMPORT:
      case Cobol85Parser::INTEGER:
      case Cobol85Parser::KEPT:
      case Cobol85Parser::KEYBOARD:
      case Cobol85Parser::LANGUAGE:
      case Cobol85Parser::LB:
      case Cobol85Parser::LD:
      case Cobol85Parser::LEFTLINE:
      case Cobol85Parser::LENGTH_CHECK:
      case Cobol85Parser::LIBACCESS:
      case Cobol85Parser::LIBPARAMETER:
      case Cobol85Parser::LIBRARY:
      case Cobol85Parser::LIST:
      case Cobol85Parser::LOCAL:
      case Cobol85Parser::LONG_DATE:
      case Cobol85Parser::LONG_TIME:
      case Cobol85Parser::LOWER:
      case Cobol85Parser::LOWLIGHT:
      case Cobol85Parser::MMDDYYYY:
      case Cobol85Parser::NAMED:
      case Cobol85Parser::NATIONAL:
      case Cobol85Parser::NATIONAL_EDITED:
      case Cobol85Parser::NETWORK:
      case Cobol85Parser::NO_ECHO:
      case Cobol85Parser::NUMERIC_DATE:
      case Cobol85Parser::NUMERIC_TIME:
      case Cobol85Parser::ODT:
      case Cobol85Parser::ORDERLY:
      case Cobol85Parser::OVERLINE:
      case Cobol85Parser::OWN:
      case Cobol85Parser::PASSWORD:
      case Cobol85Parser::PORT:
      case Cobol85Parser::PRINTER:
      case Cobol85Parser::PRIVATE:
      case Cobol85Parser::PROCESS:
      case Cobol85Parser::PROGRAM:
      case Cobol85Parser::PROMPT:
      case Cobol85Parser::READER:
      case Cobol85Parser::REMOTE:
      case Cobol85Parser::REAL:
      case Cobol85Parser::RECEIVED:
      case Cobol85Parser::RECURSIVE:
      case Cobol85Parser::REF:
      case Cobol85Parser::REMOVE:
      case Cobol85Parser::REQUIRED:
      case Cobol85Parser::REVERSE_VIDEO:
      case Cobol85Parser::SAVE:
      case Cobol85Parser::SECURE:
      case Cobol85Parser::SHARED:
      case Cobol85Parser::SHAREDBYALL:
      case Cobol85Parser::SHAREDBYRUNUNIT:
      case Cobol85Parser::SHARING:
      case Cobol85Parser::SHORT_DATE:
      case Cobol85Parser::SYMBOL:
      case Cobol85Parser::TASK:
      case Cobol85Parser::THREAD:
      case Cobol85Parser::THREAD_LOCAL:
      case Cobol85Parser::TIMER:
      case Cobol85Parser::TODAYS_DATE:
      case Cobol85Parser::TODAYS_NAME:
      case Cobol85Parser::TRUNCATED:
      case Cobol85Parser::TYPEDEF:
      case Cobol85Parser::UNDERLINE:
      case Cobol85Parser::VIRTUAL:
      case Cobol85Parser::WAIT:
      case Cobol85Parser::YEAR:
      case Cobol85Parser::YYYYMMDD:
      case Cobol85Parser::YYYYDDD:
      case Cobol85Parser::ZERO_FILL:
      case Cobol85Parser::IDENTIFIER: {
        setState(1365);
        cobolWord();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(1369);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::MODULES || _la == Cobol85Parser::WORDS) {
      setState(1368);
      _la = _input->LA(1);
      if (!(_la == Cobol85Parser::MODULES || _la == Cobol85Parser::WORDS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CollatingSequenceClauseContext ------------------------------------------------------------------

Cobol85Parser::CollatingSequenceClauseContext::CollatingSequenceClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::CollatingSequenceClauseContext::SEQUENCE() {
  return getToken(Cobol85Parser::SEQUENCE, 0);
}

tree::TerminalNode* Cobol85Parser::CollatingSequenceClauseContext::PROGRAM() {
  return getToken(Cobol85Parser::PROGRAM, 0);
}

tree::TerminalNode* Cobol85Parser::CollatingSequenceClauseContext::COLLATING() {
  return getToken(Cobol85Parser::COLLATING, 0);
}

Cobol85Parser::CollatingSequenceClauseAlphanumericContext* Cobol85Parser::CollatingSequenceClauseContext::collatingSequenceClauseAlphanumeric() {
  return getRuleContext<Cobol85Parser::CollatingSequenceClauseAlphanumericContext>(0);
}

Cobol85Parser::CollatingSequenceClauseNationalContext* Cobol85Parser::CollatingSequenceClauseContext::collatingSequenceClauseNational() {
  return getRuleContext<Cobol85Parser::CollatingSequenceClauseNationalContext>(0);
}

tree::TerminalNode* Cobol85Parser::CollatingSequenceClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}

std::vector<Cobol85Parser::AlphabetNameContext *> Cobol85Parser::CollatingSequenceClauseContext::alphabetName() {
  return getRuleContexts<Cobol85Parser::AlphabetNameContext>();
}

Cobol85Parser::AlphabetNameContext* Cobol85Parser::CollatingSequenceClauseContext::alphabetName(size_t i) {
  return getRuleContext<Cobol85Parser::AlphabetNameContext>(i);
}


size_t Cobol85Parser::CollatingSequenceClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleCollatingSequenceClause;
}

void Cobol85Parser::CollatingSequenceClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCollatingSequenceClause(this);
}

void Cobol85Parser::CollatingSequenceClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCollatingSequenceClause(this);
}

Cobol85Parser::CollatingSequenceClauseContext* Cobol85Parser::collatingSequenceClause() {
  CollatingSequenceClauseContext *_localctx = _tracker.createInstance<CollatingSequenceClauseContext>(_ctx, getState());
  enterRule(_localctx, 44, Cobol85Parser::RuleCollatingSequenceClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1372);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::PROGRAM) {
      setState(1371);
      match(Cobol85Parser::PROGRAM);
    }
    setState(1375);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::COLLATING) {
      setState(1374);
      match(Cobol85Parser::COLLATING);
    }
    setState(1377);
    match(Cobol85Parser::SEQUENCE);

    setState(1379);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(1378);
      match(Cobol85Parser::IS);
    }
    setState(1382); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1381);
              alphabetName();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1384); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 37, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(1387);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 38, _ctx)) {
    case 1: {
      setState(1386);
      collatingSequenceClauseAlphanumeric();
      break;
    }

    default:
      break;
    }
    setState(1390);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::FOR || _la == Cobol85Parser::NATIONAL) {
      setState(1389);
      collatingSequenceClauseNational();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CollatingSequenceClauseAlphanumericContext ------------------------------------------------------------------

Cobol85Parser::CollatingSequenceClauseAlphanumericContext::CollatingSequenceClauseAlphanumericContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::CollatingSequenceClauseAlphanumericContext::ALPHANUMERIC() {
  return getToken(Cobol85Parser::ALPHANUMERIC, 0);
}

Cobol85Parser::AlphabetNameContext* Cobol85Parser::CollatingSequenceClauseAlphanumericContext::alphabetName() {
  return getRuleContext<Cobol85Parser::AlphabetNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::CollatingSequenceClauseAlphanumericContext::FOR() {
  return getToken(Cobol85Parser::FOR, 0);
}

tree::TerminalNode* Cobol85Parser::CollatingSequenceClauseAlphanumericContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}


size_t Cobol85Parser::CollatingSequenceClauseAlphanumericContext::getRuleIndex() const {
  return Cobol85Parser::RuleCollatingSequenceClauseAlphanumeric;
}

void Cobol85Parser::CollatingSequenceClauseAlphanumericContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCollatingSequenceClauseAlphanumeric(this);
}

void Cobol85Parser::CollatingSequenceClauseAlphanumericContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCollatingSequenceClauseAlphanumeric(this);
}

Cobol85Parser::CollatingSequenceClauseAlphanumericContext* Cobol85Parser::collatingSequenceClauseAlphanumeric() {
  CollatingSequenceClauseAlphanumericContext *_localctx = _tracker.createInstance<CollatingSequenceClauseAlphanumericContext>(_ctx, getState());
  enterRule(_localctx, 46, Cobol85Parser::RuleCollatingSequenceClauseAlphanumeric);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1393);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::FOR) {
      setState(1392);
      match(Cobol85Parser::FOR);
    }
    setState(1395);
    match(Cobol85Parser::ALPHANUMERIC);
    setState(1397);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(1396);
      match(Cobol85Parser::IS);
    }
    setState(1399);
    alphabetName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CollatingSequenceClauseNationalContext ------------------------------------------------------------------

Cobol85Parser::CollatingSequenceClauseNationalContext::CollatingSequenceClauseNationalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::CollatingSequenceClauseNationalContext::NATIONAL() {
  return getToken(Cobol85Parser::NATIONAL, 0);
}

Cobol85Parser::AlphabetNameContext* Cobol85Parser::CollatingSequenceClauseNationalContext::alphabetName() {
  return getRuleContext<Cobol85Parser::AlphabetNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::CollatingSequenceClauseNationalContext::FOR() {
  return getToken(Cobol85Parser::FOR, 0);
}

tree::TerminalNode* Cobol85Parser::CollatingSequenceClauseNationalContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}


size_t Cobol85Parser::CollatingSequenceClauseNationalContext::getRuleIndex() const {
  return Cobol85Parser::RuleCollatingSequenceClauseNational;
}

void Cobol85Parser::CollatingSequenceClauseNationalContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCollatingSequenceClauseNational(this);
}

void Cobol85Parser::CollatingSequenceClauseNationalContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCollatingSequenceClauseNational(this);
}

Cobol85Parser::CollatingSequenceClauseNationalContext* Cobol85Parser::collatingSequenceClauseNational() {
  CollatingSequenceClauseNationalContext *_localctx = _tracker.createInstance<CollatingSequenceClauseNationalContext>(_ctx, getState());
  enterRule(_localctx, 48, Cobol85Parser::RuleCollatingSequenceClauseNational);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1402);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::FOR) {
      setState(1401);
      match(Cobol85Parser::FOR);
    }
    setState(1404);
    match(Cobol85Parser::NATIONAL);
    setState(1406);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(1405);
      match(Cobol85Parser::IS);
    }
    setState(1408);
    alphabetName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SegmentLimitClauseContext ------------------------------------------------------------------

Cobol85Parser::SegmentLimitClauseContext::SegmentLimitClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::SegmentLimitClauseContext::SEGMENT_LIMIT() {
  return getToken(Cobol85Parser::SEGMENT_LIMIT, 0);
}

Cobol85Parser::IntegerLiteralContext* Cobol85Parser::SegmentLimitClauseContext::integerLiteral() {
  return getRuleContext<Cobol85Parser::IntegerLiteralContext>(0);
}

tree::TerminalNode* Cobol85Parser::SegmentLimitClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}


size_t Cobol85Parser::SegmentLimitClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleSegmentLimitClause;
}

void Cobol85Parser::SegmentLimitClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSegmentLimitClause(this);
}

void Cobol85Parser::SegmentLimitClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSegmentLimitClause(this);
}

Cobol85Parser::SegmentLimitClauseContext* Cobol85Parser::segmentLimitClause() {
  SegmentLimitClauseContext *_localctx = _tracker.createInstance<SegmentLimitClauseContext>(_ctx, getState());
  enterRule(_localctx, 50, Cobol85Parser::RuleSegmentLimitClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1410);
    match(Cobol85Parser::SEGMENT_LIMIT);
    setState(1412);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(1411);
      match(Cobol85Parser::IS);
    }
    setState(1414);
    integerLiteral();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CharacterSetClauseContext ------------------------------------------------------------------

Cobol85Parser::CharacterSetClauseContext::CharacterSetClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::CharacterSetClauseContext::CHARACTER() {
  return getToken(Cobol85Parser::CHARACTER, 0);
}

tree::TerminalNode* Cobol85Parser::CharacterSetClauseContext::SET() {
  return getToken(Cobol85Parser::SET, 0);
}

tree::TerminalNode* Cobol85Parser::CharacterSetClauseContext::DOT_FS() {
  return getToken(Cobol85Parser::DOT_FS, 0);
}


size_t Cobol85Parser::CharacterSetClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleCharacterSetClause;
}

void Cobol85Parser::CharacterSetClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCharacterSetClause(this);
}

void Cobol85Parser::CharacterSetClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCharacterSetClause(this);
}

Cobol85Parser::CharacterSetClauseContext* Cobol85Parser::characterSetClause() {
  CharacterSetClauseContext *_localctx = _tracker.createInstance<CharacterSetClauseContext>(_ctx, getState());
  enterRule(_localctx, 52, Cobol85Parser::RuleCharacterSetClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1416);
    match(Cobol85Parser::CHARACTER);
    setState(1417);
    match(Cobol85Parser::SET);
    setState(1418);
    match(Cobol85Parser::DOT_FS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SpecialNamesParagraphContext ------------------------------------------------------------------

Cobol85Parser::SpecialNamesParagraphContext::SpecialNamesParagraphContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::SpecialNamesParagraphContext::SPECIAL_NAMES() {
  return getToken(Cobol85Parser::SPECIAL_NAMES, 0);
}

std::vector<tree::TerminalNode *> Cobol85Parser::SpecialNamesParagraphContext::DOT_FS() {
  return getTokens(Cobol85Parser::DOT_FS);
}

tree::TerminalNode* Cobol85Parser::SpecialNamesParagraphContext::DOT_FS(size_t i) {
  return getToken(Cobol85Parser::DOT_FS, i);
}

std::vector<Cobol85Parser::SpecialNameClauseContext *> Cobol85Parser::SpecialNamesParagraphContext::specialNameClause() {
  return getRuleContexts<Cobol85Parser::SpecialNameClauseContext>();
}

Cobol85Parser::SpecialNameClauseContext* Cobol85Parser::SpecialNamesParagraphContext::specialNameClause(size_t i) {
  return getRuleContext<Cobol85Parser::SpecialNameClauseContext>(i);
}


size_t Cobol85Parser::SpecialNamesParagraphContext::getRuleIndex() const {
  return Cobol85Parser::RuleSpecialNamesParagraph;
}

void Cobol85Parser::SpecialNamesParagraphContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSpecialNamesParagraph(this);
}

void Cobol85Parser::SpecialNamesParagraphContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSpecialNamesParagraph(this);
}

Cobol85Parser::SpecialNamesParagraphContext* Cobol85Parser::specialNamesParagraph() {
  SpecialNamesParagraphContext *_localctx = _tracker.createInstance<SpecialNamesParagraphContext>(_ctx, getState());
  enterRule(_localctx, 54, Cobol85Parser::RuleSpecialNamesParagraph);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1420);
    match(Cobol85Parser::SPECIAL_NAMES);
    setState(1421);
    match(Cobol85Parser::DOT_FS);
    setState(1429);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3512999431135822850) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 4611716890652319793) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & -1684346260358943737) != 0) || ((((_la - 194) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 194)) & 72084021027799369) != 0) || ((((_la - 258) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 258)) & 2892683434315076821) != 0) || ((((_la - 322) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 322)) & 2615189243111195157) != 0) || ((((_la - 391) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 391)) & 86861972244097) != 0) || ((((_la - 466) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 466)) & 103635575018455171) != 0) || _la == Cobol85Parser::IDENTIFIER) {
      setState(1423); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(1422);
        specialNameClause();
        setState(1425); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 3512999431135822850) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 4611716890652319793) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 128)) & -1684346260358943737) != 0) || ((((_la - 194) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 194)) & 72084021027799369) != 0) || ((((_la - 258) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 258)) & 2892683434315076821) != 0) || ((((_la - 322) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 322)) & 2615189243111195157) != 0) || ((((_la - 391) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 391)) & 86861972244097) != 0) || ((((_la - 466) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 466)) & 103635575018455171) != 0) || _la == Cobol85Parser::IDENTIFIER);
      setState(1427);
      match(Cobol85Parser::DOT_FS);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SpecialNameClauseContext ------------------------------------------------------------------

Cobol85Parser::SpecialNameClauseContext::SpecialNameClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::ChannelClauseContext* Cobol85Parser::SpecialNameClauseContext::channelClause() {
  return getRuleContext<Cobol85Parser::ChannelClauseContext>(0);
}

Cobol85Parser::OdtClauseContext* Cobol85Parser::SpecialNameClauseContext::odtClause() {
  return getRuleContext<Cobol85Parser::OdtClauseContext>(0);
}

Cobol85Parser::AlphabetClauseContext* Cobol85Parser::SpecialNameClauseContext::alphabetClause() {
  return getRuleContext<Cobol85Parser::AlphabetClauseContext>(0);
}

Cobol85Parser::ClassClauseContext* Cobol85Parser::SpecialNameClauseContext::classClause() {
  return getRuleContext<Cobol85Parser::ClassClauseContext>(0);
}

Cobol85Parser::CurrencySignClauseContext* Cobol85Parser::SpecialNameClauseContext::currencySignClause() {
  return getRuleContext<Cobol85Parser::CurrencySignClauseContext>(0);
}

Cobol85Parser::DecimalPointClauseContext* Cobol85Parser::SpecialNameClauseContext::decimalPointClause() {
  return getRuleContext<Cobol85Parser::DecimalPointClauseContext>(0);
}

Cobol85Parser::SymbolicCharactersClauseContext* Cobol85Parser::SpecialNameClauseContext::symbolicCharactersClause() {
  return getRuleContext<Cobol85Parser::SymbolicCharactersClauseContext>(0);
}

Cobol85Parser::EnvironmentSwitchNameClauseContext* Cobol85Parser::SpecialNameClauseContext::environmentSwitchNameClause() {
  return getRuleContext<Cobol85Parser::EnvironmentSwitchNameClauseContext>(0);
}

Cobol85Parser::DefaultDisplaySignClauseContext* Cobol85Parser::SpecialNameClauseContext::defaultDisplaySignClause() {
  return getRuleContext<Cobol85Parser::DefaultDisplaySignClauseContext>(0);
}

Cobol85Parser::DefaultComputationalSignClauseContext* Cobol85Parser::SpecialNameClauseContext::defaultComputationalSignClause() {
  return getRuleContext<Cobol85Parser::DefaultComputationalSignClauseContext>(0);
}

Cobol85Parser::ReserveNetworkClauseContext* Cobol85Parser::SpecialNameClauseContext::reserveNetworkClause() {
  return getRuleContext<Cobol85Parser::ReserveNetworkClauseContext>(0);
}


size_t Cobol85Parser::SpecialNameClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleSpecialNameClause;
}

void Cobol85Parser::SpecialNameClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSpecialNameClause(this);
}

void Cobol85Parser::SpecialNameClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSpecialNameClause(this);
}

Cobol85Parser::SpecialNameClauseContext* Cobol85Parser::specialNameClause() {
  SpecialNameClauseContext *_localctx = _tracker.createInstance<SpecialNameClauseContext>(_ctx, getState());
  enterRule(_localctx, 56, Cobol85Parser::RuleSpecialNameClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1442);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 47, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1431);
      channelClause();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1432);
      odtClause();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1433);
      alphabetClause();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1434);
      classClause();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1435);
      currencySignClause();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1436);
      decimalPointClause();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1437);
      symbolicCharactersClause();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1438);
      environmentSwitchNameClause();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1439);
      defaultDisplaySignClause();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(1440);
      defaultComputationalSignClause();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(1441);
      reserveNetworkClause();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AlphabetClauseContext ------------------------------------------------------------------

Cobol85Parser::AlphabetClauseContext::AlphabetClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::AlphabetClauseFormat1Context* Cobol85Parser::AlphabetClauseContext::alphabetClauseFormat1() {
  return getRuleContext<Cobol85Parser::AlphabetClauseFormat1Context>(0);
}

Cobol85Parser::AlphabetClauseFormat2Context* Cobol85Parser::AlphabetClauseContext::alphabetClauseFormat2() {
  return getRuleContext<Cobol85Parser::AlphabetClauseFormat2Context>(0);
}


size_t Cobol85Parser::AlphabetClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleAlphabetClause;
}

void Cobol85Parser::AlphabetClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlphabetClause(this);
}

void Cobol85Parser::AlphabetClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlphabetClause(this);
}

Cobol85Parser::AlphabetClauseContext* Cobol85Parser::alphabetClause() {
  AlphabetClauseContext *_localctx = _tracker.createInstance<AlphabetClauseContext>(_ctx, getState());
  enterRule(_localctx, 58, Cobol85Parser::RuleAlphabetClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1446);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 48, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1444);
      alphabetClauseFormat1();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1445);
      alphabetClauseFormat2();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AlphabetClauseFormat1Context ------------------------------------------------------------------

Cobol85Parser::AlphabetClauseFormat1Context::AlphabetClauseFormat1Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::AlphabetClauseFormat1Context::ALPHABET() {
  return getToken(Cobol85Parser::ALPHABET, 0);
}

Cobol85Parser::AlphabetNameContext* Cobol85Parser::AlphabetClauseFormat1Context::alphabetName() {
  return getRuleContext<Cobol85Parser::AlphabetNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::AlphabetClauseFormat1Context::EBCDIC() {
  return getToken(Cobol85Parser::EBCDIC, 0);
}

tree::TerminalNode* Cobol85Parser::AlphabetClauseFormat1Context::ASCII() {
  return getToken(Cobol85Parser::ASCII, 0);
}

tree::TerminalNode* Cobol85Parser::AlphabetClauseFormat1Context::STANDARD_1() {
  return getToken(Cobol85Parser::STANDARD_1, 0);
}

tree::TerminalNode* Cobol85Parser::AlphabetClauseFormat1Context::STANDARD_2() {
  return getToken(Cobol85Parser::STANDARD_2, 0);
}

tree::TerminalNode* Cobol85Parser::AlphabetClauseFormat1Context::NATIVE() {
  return getToken(Cobol85Parser::NATIVE, 0);
}

Cobol85Parser::CobolWordContext* Cobol85Parser::AlphabetClauseFormat1Context::cobolWord() {
  return getRuleContext<Cobol85Parser::CobolWordContext>(0);
}

tree::TerminalNode* Cobol85Parser::AlphabetClauseFormat1Context::FOR() {
  return getToken(Cobol85Parser::FOR, 0);
}

tree::TerminalNode* Cobol85Parser::AlphabetClauseFormat1Context::ALPHANUMERIC() {
  return getToken(Cobol85Parser::ALPHANUMERIC, 0);
}

tree::TerminalNode* Cobol85Parser::AlphabetClauseFormat1Context::IS() {
  return getToken(Cobol85Parser::IS, 0);
}

std::vector<Cobol85Parser::AlphabetLiteralsContext *> Cobol85Parser::AlphabetClauseFormat1Context::alphabetLiterals() {
  return getRuleContexts<Cobol85Parser::AlphabetLiteralsContext>();
}

Cobol85Parser::AlphabetLiteralsContext* Cobol85Parser::AlphabetClauseFormat1Context::alphabetLiterals(size_t i) {
  return getRuleContext<Cobol85Parser::AlphabetLiteralsContext>(i);
}


size_t Cobol85Parser::AlphabetClauseFormat1Context::getRuleIndex() const {
  return Cobol85Parser::RuleAlphabetClauseFormat1;
}

void Cobol85Parser::AlphabetClauseFormat1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlphabetClauseFormat1(this);
}

void Cobol85Parser::AlphabetClauseFormat1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlphabetClauseFormat1(this);
}

Cobol85Parser::AlphabetClauseFormat1Context* Cobol85Parser::alphabetClauseFormat1() {
  AlphabetClauseFormat1Context *_localctx = _tracker.createInstance<AlphabetClauseFormat1Context>(_ctx, getState());
  enterRule(_localctx, 60, Cobol85Parser::RuleAlphabetClauseFormat1);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1448);
    match(Cobol85Parser::ALPHABET);
    setState(1449);
    alphabetName();
    setState(1452);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::FOR) {
      setState(1450);
      match(Cobol85Parser::FOR);
      setState(1451);
      match(Cobol85Parser::ALPHANUMERIC);
    }
    setState(1455);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(1454);
      match(Cobol85Parser::IS);
    }
    setState(1468);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 52, _ctx)) {
    case 1: {
      setState(1457);
      match(Cobol85Parser::EBCDIC);
      break;
    }

    case 2: {
      setState(1458);
      match(Cobol85Parser::ASCII);
      break;
    }

    case 3: {
      setState(1459);
      match(Cobol85Parser::STANDARD_1);
      break;
    }

    case 4: {
      setState(1460);
      match(Cobol85Parser::STANDARD_2);
      break;
    }

    case 5: {
      setState(1461);
      match(Cobol85Parser::NATIVE);
      break;
    }

    case 6: {
      setState(1462);
      cobolWord();
      break;
    }

    case 7: {
      setState(1464); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(1463);
                alphabetLiterals();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(1466); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 51, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AlphabetLiteralsContext ------------------------------------------------------------------

Cobol85Parser::AlphabetLiteralsContext::AlphabetLiteralsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::LiteralContext* Cobol85Parser::AlphabetLiteralsContext::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}

Cobol85Parser::AlphabetThroughContext* Cobol85Parser::AlphabetLiteralsContext::alphabetThrough() {
  return getRuleContext<Cobol85Parser::AlphabetThroughContext>(0);
}

std::vector<Cobol85Parser::AlphabetAlsoContext *> Cobol85Parser::AlphabetLiteralsContext::alphabetAlso() {
  return getRuleContexts<Cobol85Parser::AlphabetAlsoContext>();
}

Cobol85Parser::AlphabetAlsoContext* Cobol85Parser::AlphabetLiteralsContext::alphabetAlso(size_t i) {
  return getRuleContext<Cobol85Parser::AlphabetAlsoContext>(i);
}


size_t Cobol85Parser::AlphabetLiteralsContext::getRuleIndex() const {
  return Cobol85Parser::RuleAlphabetLiterals;
}

void Cobol85Parser::AlphabetLiteralsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlphabetLiterals(this);
}

void Cobol85Parser::AlphabetLiteralsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlphabetLiterals(this);
}

Cobol85Parser::AlphabetLiteralsContext* Cobol85Parser::alphabetLiterals() {
  AlphabetLiteralsContext *_localctx = _tracker.createInstance<AlphabetLiteralsContext>(_ctx, getState());
  enterRule(_localctx, 62, Cobol85Parser::RuleAlphabetLiterals);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1470);
    literal();
    setState(1477);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Cobol85Parser::THROUGH:
      case Cobol85Parser::THRU: {
        setState(1471);
        alphabetThrough();
        break;
      }

      case Cobol85Parser::ALSO: {
        setState(1473); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(1472);
          alphabetAlso();
          setState(1475); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (_la == Cobol85Parser::ALSO);
        break;
      }

      case Cobol85Parser::ABORT:
      case Cobol85Parser::ALL:
      case Cobol85Parser::ALPHABET:
      case Cobol85Parser::AS:
      case Cobol85Parser::ASCII:
      case Cobol85Parser::ASSOCIATED_DATA:
      case Cobol85Parser::ASSOCIATED_DATA_LENGTH:
      case Cobol85Parser::ATTRIBUTE:
      case Cobol85Parser::AUTO:
      case Cobol85Parser::AUTO_SKIP:
      case Cobol85Parser::BACKGROUND_COLOR:
      case Cobol85Parser::BACKGROUND_COLOUR:
      case Cobol85Parser::BEEP:
      case Cobol85Parser::BELL:
      case Cobol85Parser::BINARY:
      case Cobol85Parser::BIT:
      case Cobol85Parser::BLINK:
      case Cobol85Parser::BOUNDS:
      case Cobol85Parser::CAPABLE:
      case Cobol85Parser::CCSVERSION:
      case Cobol85Parser::CHANGED:
      case Cobol85Parser::CHANNEL:
      case Cobol85Parser::CLASS:
      case Cobol85Parser::CLOSE_DISPOSITION:
      case Cobol85Parser::COBOL:
      case Cobol85Parser::COMMITMENT:
      case Cobol85Parser::CONTROL_POINT:
      case Cobol85Parser::CONVENTION:
      case Cobol85Parser::CRUNCH:
      case Cobol85Parser::CURRENCY:
      case Cobol85Parser::CURSOR:
      case Cobol85Parser::DECIMAL_POINT:
      case Cobol85Parser::DEFAULT:
      case Cobol85Parser::DEFAULT_DISPLAY:
      case Cobol85Parser::DEFINITION:
      case Cobol85Parser::DFHRESP:
      case Cobol85Parser::DFHVALUE:
      case Cobol85Parser::DISK:
      case Cobol85Parser::DONTCARE:
      case Cobol85Parser::DOUBLE:
      case Cobol85Parser::EBCDIC:
      case Cobol85Parser::EMPTY_CHECK:
      case Cobol85Parser::ENTER:
      case Cobol85Parser::ENTRY_PROCEDURE:
      case Cobol85Parser::ERASE:
      case Cobol85Parser::EOL:
      case Cobol85Parser::EOS:
      case Cobol85Parser::ESCAPE:
      case Cobol85Parser::EVENT:
      case Cobol85Parser::EXCLUSIVE:
      case Cobol85Parser::EXPORT:
      case Cobol85Parser::EXTENDED:
      case Cobol85Parser::FALSE:
      case Cobol85Parser::FOREGROUND_COLOR:
      case Cobol85Parser::FOREGROUND_COLOUR:
      case Cobol85Parser::FULL:
      case Cobol85Parser::FUNCTIONNAME:
      case Cobol85Parser::FUNCTION_POINTER:
      case Cobol85Parser::GRID:
      case Cobol85Parser::HIGHLIGHT:
      case Cobol85Parser::HIGH_VALUE:
      case Cobol85Parser::HIGH_VALUES:
      case Cobol85Parser::IMPLICIT:
      case Cobol85Parser::IMPORT:
      case Cobol85Parser::INTEGER:
      case Cobol85Parser::KEPT:
      case Cobol85Parser::KEYBOARD:
      case Cobol85Parser::LANGUAGE:
      case Cobol85Parser::LB:
      case Cobol85Parser::LD:
      case Cobol85Parser::LEFTLINE:
      case Cobol85Parser::LENGTH_CHECK:
      case Cobol85Parser::LIBACCESS:
      case Cobol85Parser::LIBPARAMETER:
      case Cobol85Parser::LIBRARY:
      case Cobol85Parser::LIST:
      case Cobol85Parser::LOCAL:
      case Cobol85Parser::LONG_DATE:
      case Cobol85Parser::LONG_TIME:
      case Cobol85Parser::LOWER:
      case Cobol85Parser::LOWLIGHT:
      case Cobol85Parser::LOW_VALUE:
      case Cobol85Parser::LOW_VALUES:
      case Cobol85Parser::MMDDYYYY:
      case Cobol85Parser::NAMED:
      case Cobol85Parser::NATIONAL:
      case Cobol85Parser::NATIONAL_EDITED:
      case Cobol85Parser::NETWORK:
      case Cobol85Parser::NO_ECHO:
      case Cobol85Parser::NULL_:
      case Cobol85Parser::NULLS:
      case Cobol85Parser::NUMERIC_DATE:
      case Cobol85Parser::NUMERIC_TIME:
      case Cobol85Parser::ODT:
      case Cobol85Parser::OFF:
      case Cobol85Parser::ON:
      case Cobol85Parser::ORDERLY:
      case Cobol85Parser::OVERLINE:
      case Cobol85Parser::OWN:
      case Cobol85Parser::PASSWORD:
      case Cobol85Parser::PORT:
      case Cobol85Parser::PRINTER:
      case Cobol85Parser::PRIVATE:
      case Cobol85Parser::PROCESS:
      case Cobol85Parser::PROGRAM:
      case Cobol85Parser::PROMPT:
      case Cobol85Parser::QUOTE:
      case Cobol85Parser::QUOTES:
      case Cobol85Parser::READER:
      case Cobol85Parser::REMOTE:
      case Cobol85Parser::REAL:
      case Cobol85Parser::RECEIVED:
      case Cobol85Parser::RECURSIVE:
      case Cobol85Parser::REF:
      case Cobol85Parser::REMOVE:
      case Cobol85Parser::REQUIRED:
      case Cobol85Parser::RESERVE:
      case Cobol85Parser::REVERSE_VIDEO:
      case Cobol85Parser::SAVE:
      case Cobol85Parser::SECURE:
      case Cobol85Parser::SHARED:
      case Cobol85Parser::SHAREDBYALL:
      case Cobol85Parser::SHAREDBYRUNUNIT:
      case Cobol85Parser::SHARING:
      case Cobol85Parser::SHORT_DATE:
      case Cobol85Parser::SPACE:
      case Cobol85Parser::SPACES:
      case Cobol85Parser::SYMBOL:
      case Cobol85Parser::SYMBOLIC:
      case Cobol85Parser::TASK:
      case Cobol85Parser::THREAD:
      case Cobol85Parser::THREAD_LOCAL:
      case Cobol85Parser::TIMER:
      case Cobol85Parser::TODAYS_DATE:
      case Cobol85Parser::TODAYS_NAME:
      case Cobol85Parser::TRUE:
      case Cobol85Parser::TRUNCATED:
      case Cobol85Parser::TYPEDEF:
      case Cobol85Parser::UNDERLINE:
      case Cobol85Parser::VIRTUAL:
      case Cobol85Parser::WAIT:
      case Cobol85Parser::YEAR:
      case Cobol85Parser::YYYYMMDD:
      case Cobol85Parser::YYYYDDD:
      case Cobol85Parser::ZERO:
      case Cobol85Parser::ZERO_FILL:
      case Cobol85Parser::ZEROS:
      case Cobol85Parser::ZEROES:
      case Cobol85Parser::DOT_FS:
      case Cobol85Parser::NONNUMERICLITERAL:
      case Cobol85Parser::LEVEL_NUMBER_66:
      case Cobol85Parser::LEVEL_NUMBER_77:
      case Cobol85Parser::LEVEL_NUMBER_88:
      case Cobol85Parser::INTEGERLITERAL:
      case Cobol85Parser::NUMERICLITERAL:
      case Cobol85Parser::IDENTIFIER: {
        break;
      }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AlphabetThroughContext ------------------------------------------------------------------

Cobol85Parser::AlphabetThroughContext::AlphabetThroughContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::LiteralContext* Cobol85Parser::AlphabetThroughContext::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}

tree::TerminalNode* Cobol85Parser::AlphabetThroughContext::THROUGH() {
  return getToken(Cobol85Parser::THROUGH, 0);
}

tree::TerminalNode* Cobol85Parser::AlphabetThroughContext::THRU() {
  return getToken(Cobol85Parser::THRU, 0);
}


size_t Cobol85Parser::AlphabetThroughContext::getRuleIndex() const {
  return Cobol85Parser::RuleAlphabetThrough;
}

void Cobol85Parser::AlphabetThroughContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlphabetThrough(this);
}

void Cobol85Parser::AlphabetThroughContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlphabetThrough(this);
}

Cobol85Parser::AlphabetThroughContext* Cobol85Parser::alphabetThrough() {
  AlphabetThroughContext *_localctx = _tracker.createInstance<AlphabetThroughContext>(_ctx, getState());
  enterRule(_localctx, 64, Cobol85Parser::RuleAlphabetThrough);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1479);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::THROUGH

    || _la == Cobol85Parser::THRU)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(1480);
    literal();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AlphabetAlsoContext ------------------------------------------------------------------

Cobol85Parser::AlphabetAlsoContext::AlphabetAlsoContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::AlphabetAlsoContext::ALSO() {
  return getToken(Cobol85Parser::ALSO, 0);
}

std::vector<Cobol85Parser::LiteralContext *> Cobol85Parser::AlphabetAlsoContext::literal() {
  return getRuleContexts<Cobol85Parser::LiteralContext>();
}

Cobol85Parser::LiteralContext* Cobol85Parser::AlphabetAlsoContext::literal(size_t i) {
  return getRuleContext<Cobol85Parser::LiteralContext>(i);
}


size_t Cobol85Parser::AlphabetAlsoContext::getRuleIndex() const {
  return Cobol85Parser::RuleAlphabetAlso;
}

void Cobol85Parser::AlphabetAlsoContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlphabetAlso(this);
}

void Cobol85Parser::AlphabetAlsoContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlphabetAlso(this);
}

Cobol85Parser::AlphabetAlsoContext* Cobol85Parser::alphabetAlso() {
  AlphabetAlsoContext *_localctx = _tracker.createInstance<AlphabetAlsoContext>(_ctx, getState());
  enterRule(_localctx, 66, Cobol85Parser::RuleAlphabetAlso);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1482);
    match(Cobol85Parser::ALSO);
    setState(1484); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1483);
              literal();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1486); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 55, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AlphabetClauseFormat2Context ------------------------------------------------------------------

Cobol85Parser::AlphabetClauseFormat2Context::AlphabetClauseFormat2Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::AlphabetClauseFormat2Context::ALPHABET() {
  return getToken(Cobol85Parser::ALPHABET, 0);
}

Cobol85Parser::AlphabetNameContext* Cobol85Parser::AlphabetClauseFormat2Context::alphabetName() {
  return getRuleContext<Cobol85Parser::AlphabetNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::AlphabetClauseFormat2Context::NATIONAL() {
  return getToken(Cobol85Parser::NATIONAL, 0);
}

tree::TerminalNode* Cobol85Parser::AlphabetClauseFormat2Context::NATIVE() {
  return getToken(Cobol85Parser::NATIVE, 0);
}

tree::TerminalNode* Cobol85Parser::AlphabetClauseFormat2Context::CCSVERSION() {
  return getToken(Cobol85Parser::CCSVERSION, 0);
}

Cobol85Parser::LiteralContext* Cobol85Parser::AlphabetClauseFormat2Context::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}

tree::TerminalNode* Cobol85Parser::AlphabetClauseFormat2Context::FOR() {
  return getToken(Cobol85Parser::FOR, 0);
}

tree::TerminalNode* Cobol85Parser::AlphabetClauseFormat2Context::IS() {
  return getToken(Cobol85Parser::IS, 0);
}


size_t Cobol85Parser::AlphabetClauseFormat2Context::getRuleIndex() const {
  return Cobol85Parser::RuleAlphabetClauseFormat2;
}

void Cobol85Parser::AlphabetClauseFormat2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlphabetClauseFormat2(this);
}

void Cobol85Parser::AlphabetClauseFormat2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlphabetClauseFormat2(this);
}

Cobol85Parser::AlphabetClauseFormat2Context* Cobol85Parser::alphabetClauseFormat2() {
  AlphabetClauseFormat2Context *_localctx = _tracker.createInstance<AlphabetClauseFormat2Context>(_ctx, getState());
  enterRule(_localctx, 68, Cobol85Parser::RuleAlphabetClauseFormat2);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1488);
    match(Cobol85Parser::ALPHABET);
    setState(1489);
    alphabetName();
    setState(1491);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::FOR) {
      setState(1490);
      match(Cobol85Parser::FOR);
    }
    setState(1493);
    match(Cobol85Parser::NATIONAL);
    setState(1495);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(1494);
      match(Cobol85Parser::IS);
    }
    setState(1500);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Cobol85Parser::NATIVE: {
        setState(1497);
        match(Cobol85Parser::NATIVE);
        break;
      }

      case Cobol85Parser::CCSVERSION: {
        setState(1498);
        match(Cobol85Parser::CCSVERSION);
        setState(1499);
        literal();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ChannelClauseContext ------------------------------------------------------------------

Cobol85Parser::ChannelClauseContext::ChannelClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ChannelClauseContext::CHANNEL() {
  return getToken(Cobol85Parser::CHANNEL, 0);
}

Cobol85Parser::IntegerLiteralContext* Cobol85Parser::ChannelClauseContext::integerLiteral() {
  return getRuleContext<Cobol85Parser::IntegerLiteralContext>(0);
}

Cobol85Parser::MnemonicNameContext* Cobol85Parser::ChannelClauseContext::mnemonicName() {
  return getRuleContext<Cobol85Parser::MnemonicNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::ChannelClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}


size_t Cobol85Parser::ChannelClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleChannelClause;
}

void Cobol85Parser::ChannelClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterChannelClause(this);
}

void Cobol85Parser::ChannelClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitChannelClause(this);
}

Cobol85Parser::ChannelClauseContext* Cobol85Parser::channelClause() {
  ChannelClauseContext *_localctx = _tracker.createInstance<ChannelClauseContext>(_ctx, getState());
  enterRule(_localctx, 70, Cobol85Parser::RuleChannelClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1502);
    match(Cobol85Parser::CHANNEL);
    setState(1503);
    integerLiteral();
    setState(1505);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(1504);
      match(Cobol85Parser::IS);
    }
    setState(1507);
    mnemonicName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassClauseContext ------------------------------------------------------------------

Cobol85Parser::ClassClauseContext::ClassClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ClassClauseContext::CLASS() {
  return getToken(Cobol85Parser::CLASS, 0);
}

Cobol85Parser::ClassNameContext* Cobol85Parser::ClassClauseContext::className() {
  return getRuleContext<Cobol85Parser::ClassNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::ClassClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}

std::vector<Cobol85Parser::ClassClauseThroughContext *> Cobol85Parser::ClassClauseContext::classClauseThrough() {
  return getRuleContexts<Cobol85Parser::ClassClauseThroughContext>();
}

Cobol85Parser::ClassClauseThroughContext* Cobol85Parser::ClassClauseContext::classClauseThrough(size_t i) {
  return getRuleContext<Cobol85Parser::ClassClauseThroughContext>(i);
}

tree::TerminalNode* Cobol85Parser::ClassClauseContext::ALPHANUMERIC() {
  return getToken(Cobol85Parser::ALPHANUMERIC, 0);
}

tree::TerminalNode* Cobol85Parser::ClassClauseContext::NATIONAL() {
  return getToken(Cobol85Parser::NATIONAL, 0);
}

tree::TerminalNode* Cobol85Parser::ClassClauseContext::FOR() {
  return getToken(Cobol85Parser::FOR, 0);
}


size_t Cobol85Parser::ClassClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleClassClause;
}

void Cobol85Parser::ClassClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassClause(this);
}

void Cobol85Parser::ClassClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassClause(this);
}

Cobol85Parser::ClassClauseContext* Cobol85Parser::classClause() {
  ClassClauseContext *_localctx = _tracker.createInstance<ClassClauseContext>(_ctx, getState());
  enterRule(_localctx, 72, Cobol85Parser::RuleClassClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1509);
    match(Cobol85Parser::CLASS);
    setState(1510);
    className();
    setState(1515);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 61, _ctx)) {
    case 1: {
      setState(1512);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Cobol85Parser::FOR) {
        setState(1511);
        match(Cobol85Parser::FOR);
      }
      setState(1514);
      _la = _input->LA(1);
      if (!(_la == Cobol85Parser::ALPHANUMERIC || _la == Cobol85Parser::NATIONAL)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    default:
      break;
    }
    setState(1518);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(1517);
      match(Cobol85Parser::IS);
    }
    setState(1521); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1520);
              classClauseThrough();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1523); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 63, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassClauseThroughContext ------------------------------------------------------------------

Cobol85Parser::ClassClauseThroughContext::ClassClauseThroughContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::ClassClauseFromContext* Cobol85Parser::ClassClauseThroughContext::classClauseFrom() {
  return getRuleContext<Cobol85Parser::ClassClauseFromContext>(0);
}

Cobol85Parser::ClassClauseToContext* Cobol85Parser::ClassClauseThroughContext::classClauseTo() {
  return getRuleContext<Cobol85Parser::ClassClauseToContext>(0);
}

tree::TerminalNode* Cobol85Parser::ClassClauseThroughContext::THROUGH() {
  return getToken(Cobol85Parser::THROUGH, 0);
}

tree::TerminalNode* Cobol85Parser::ClassClauseThroughContext::THRU() {
  return getToken(Cobol85Parser::THRU, 0);
}


size_t Cobol85Parser::ClassClauseThroughContext::getRuleIndex() const {
  return Cobol85Parser::RuleClassClauseThrough;
}

void Cobol85Parser::ClassClauseThroughContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassClauseThrough(this);
}

void Cobol85Parser::ClassClauseThroughContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassClauseThrough(this);
}

Cobol85Parser::ClassClauseThroughContext* Cobol85Parser::classClauseThrough() {
  ClassClauseThroughContext *_localctx = _tracker.createInstance<ClassClauseThroughContext>(_ctx, getState());
  enterRule(_localctx, 74, Cobol85Parser::RuleClassClauseThrough);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1525);
    classClauseFrom();
    setState(1528);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::THROUGH

    || _la == Cobol85Parser::THRU) {
      setState(1526);
      _la = _input->LA(1);
      if (!(_la == Cobol85Parser::THROUGH

      || _la == Cobol85Parser::THRU)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1527);
      classClauseTo();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassClauseFromContext ------------------------------------------------------------------

Cobol85Parser::ClassClauseFromContext::ClassClauseFromContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::IdentifierContext* Cobol85Parser::ClassClauseFromContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

Cobol85Parser::LiteralContext* Cobol85Parser::ClassClauseFromContext::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}


size_t Cobol85Parser::ClassClauseFromContext::getRuleIndex() const {
  return Cobol85Parser::RuleClassClauseFrom;
}

void Cobol85Parser::ClassClauseFromContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassClauseFrom(this);
}

void Cobol85Parser::ClassClauseFromContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassClauseFrom(this);
}

Cobol85Parser::ClassClauseFromContext* Cobol85Parser::classClauseFrom() {
  ClassClauseFromContext *_localctx = _tracker.createInstance<ClassClauseFromContext>(_ctx, getState());
  enterRule(_localctx, 76, Cobol85Parser::RuleClassClauseFrom);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1532);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 65, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1530);
      identifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1531);
      literal();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassClauseToContext ------------------------------------------------------------------

Cobol85Parser::ClassClauseToContext::ClassClauseToContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::IdentifierContext* Cobol85Parser::ClassClauseToContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

Cobol85Parser::LiteralContext* Cobol85Parser::ClassClauseToContext::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}


size_t Cobol85Parser::ClassClauseToContext::getRuleIndex() const {
  return Cobol85Parser::RuleClassClauseTo;
}

void Cobol85Parser::ClassClauseToContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassClauseTo(this);
}

void Cobol85Parser::ClassClauseToContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassClauseTo(this);
}

Cobol85Parser::ClassClauseToContext* Cobol85Parser::classClauseTo() {
  ClassClauseToContext *_localctx = _tracker.createInstance<ClassClauseToContext>(_ctx, getState());
  enterRule(_localctx, 78, Cobol85Parser::RuleClassClauseTo);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1536);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 66, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1534);
      identifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1535);
      literal();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CurrencySignClauseContext ------------------------------------------------------------------

Cobol85Parser::CurrencySignClauseContext::CurrencySignClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::CurrencySignClauseContext::CURRENCY() {
  return getToken(Cobol85Parser::CURRENCY, 0);
}

std::vector<Cobol85Parser::LiteralContext *> Cobol85Parser::CurrencySignClauseContext::literal() {
  return getRuleContexts<Cobol85Parser::LiteralContext>();
}

Cobol85Parser::LiteralContext* Cobol85Parser::CurrencySignClauseContext::literal(size_t i) {
  return getRuleContext<Cobol85Parser::LiteralContext>(i);
}

tree::TerminalNode* Cobol85Parser::CurrencySignClauseContext::SIGN() {
  return getToken(Cobol85Parser::SIGN, 0);
}

tree::TerminalNode* Cobol85Parser::CurrencySignClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}

tree::TerminalNode* Cobol85Parser::CurrencySignClauseContext::PICTURE() {
  return getToken(Cobol85Parser::PICTURE, 0);
}

tree::TerminalNode* Cobol85Parser::CurrencySignClauseContext::SYMBOL() {
  return getToken(Cobol85Parser::SYMBOL, 0);
}

tree::TerminalNode* Cobol85Parser::CurrencySignClauseContext::WITH() {
  return getToken(Cobol85Parser::WITH, 0);
}


size_t Cobol85Parser::CurrencySignClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleCurrencySignClause;
}

void Cobol85Parser::CurrencySignClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCurrencySignClause(this);
}

void Cobol85Parser::CurrencySignClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCurrencySignClause(this);
}

Cobol85Parser::CurrencySignClauseContext* Cobol85Parser::currencySignClause() {
  CurrencySignClauseContext *_localctx = _tracker.createInstance<CurrencySignClauseContext>(_ctx, getState());
  enterRule(_localctx, 80, Cobol85Parser::RuleCurrencySignClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1538);
    match(Cobol85Parser::CURRENCY);
    setState(1540);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::SIGN) {
      setState(1539);
      match(Cobol85Parser::SIGN);
    }
    setState(1543);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(1542);
      match(Cobol85Parser::IS);
    }
    setState(1545);
    literal();
    setState(1552);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::PICTURE || _la == Cobol85Parser::WITH) {
      setState(1547);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Cobol85Parser::WITH) {
        setState(1546);
        match(Cobol85Parser::WITH);
      }
      setState(1549);
      match(Cobol85Parser::PICTURE);
      setState(1550);
      match(Cobol85Parser::SYMBOL);
      setState(1551);
      literal();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DecimalPointClauseContext ------------------------------------------------------------------

Cobol85Parser::DecimalPointClauseContext::DecimalPointClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::DecimalPointClauseContext::DECIMAL_POINT() {
  return getToken(Cobol85Parser::DECIMAL_POINT, 0);
}

tree::TerminalNode* Cobol85Parser::DecimalPointClauseContext::COMMA() {
  return getToken(Cobol85Parser::COMMA, 0);
}

tree::TerminalNode* Cobol85Parser::DecimalPointClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}


size_t Cobol85Parser::DecimalPointClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleDecimalPointClause;
}

void Cobol85Parser::DecimalPointClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDecimalPointClause(this);
}

void Cobol85Parser::DecimalPointClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDecimalPointClause(this);
}

Cobol85Parser::DecimalPointClauseContext* Cobol85Parser::decimalPointClause() {
  DecimalPointClauseContext *_localctx = _tracker.createInstance<DecimalPointClauseContext>(_ctx, getState());
  enterRule(_localctx, 82, Cobol85Parser::RuleDecimalPointClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1554);
    match(Cobol85Parser::DECIMAL_POINT);
    setState(1556);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(1555);
      match(Cobol85Parser::IS);
    }
    setState(1558);
    match(Cobol85Parser::COMMA);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DefaultComputationalSignClauseContext ------------------------------------------------------------------

Cobol85Parser::DefaultComputationalSignClauseContext::DefaultComputationalSignClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::DefaultComputationalSignClauseContext::DEFAULT() {
  return getToken(Cobol85Parser::DEFAULT, 0);
}

tree::TerminalNode* Cobol85Parser::DefaultComputationalSignClauseContext::SEPARATE() {
  return getToken(Cobol85Parser::SEPARATE, 0);
}

tree::TerminalNode* Cobol85Parser::DefaultComputationalSignClauseContext::SIGN() {
  return getToken(Cobol85Parser::SIGN, 0);
}

tree::TerminalNode* Cobol85Parser::DefaultComputationalSignClauseContext::COMPUTATIONAL() {
  return getToken(Cobol85Parser::COMPUTATIONAL, 0);
}

tree::TerminalNode* Cobol85Parser::DefaultComputationalSignClauseContext::COMP() {
  return getToken(Cobol85Parser::COMP, 0);
}

tree::TerminalNode* Cobol85Parser::DefaultComputationalSignClauseContext::LEADING() {
  return getToken(Cobol85Parser::LEADING, 0);
}

tree::TerminalNode* Cobol85Parser::DefaultComputationalSignClauseContext::TRAILING() {
  return getToken(Cobol85Parser::TRAILING, 0);
}

tree::TerminalNode* Cobol85Parser::DefaultComputationalSignClauseContext::CHARACTER() {
  return getToken(Cobol85Parser::CHARACTER, 0);
}

tree::TerminalNode* Cobol85Parser::DefaultComputationalSignClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}


size_t Cobol85Parser::DefaultComputationalSignClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleDefaultComputationalSignClause;
}

void Cobol85Parser::DefaultComputationalSignClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDefaultComputationalSignClause(this);
}

void Cobol85Parser::DefaultComputationalSignClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDefaultComputationalSignClause(this);
}

Cobol85Parser::DefaultComputationalSignClauseContext* Cobol85Parser::defaultComputationalSignClause() {
  DefaultComputationalSignClauseContext *_localctx = _tracker.createInstance<DefaultComputationalSignClauseContext>(_ctx, getState());
  enterRule(_localctx, 84, Cobol85Parser::RuleDefaultComputationalSignClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1560);
    match(Cobol85Parser::DEFAULT);
    setState(1562);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::COMP

    || _la == Cobol85Parser::COMPUTATIONAL) {
      setState(1561);
      _la = _input->LA(1);
      if (!(_la == Cobol85Parser::COMP

      || _la == Cobol85Parser::COMPUTATIONAL)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(1568);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::SIGN) {
      setState(1564);
      match(Cobol85Parser::SIGN);
      setState(1566);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Cobol85Parser::IS) {
        setState(1565);
        match(Cobol85Parser::IS);
      }
    }
    setState(1571);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::LEADING || _la == Cobol85Parser::TRAILING) {
      setState(1570);
      _la = _input->LA(1);
      if (!(_la == Cobol85Parser::LEADING || _la == Cobol85Parser::TRAILING)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }

    setState(1573);
    match(Cobol85Parser::SEPARATE);
    setState(1575);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::CHARACTER) {
      setState(1574);
      match(Cobol85Parser::CHARACTER);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DefaultDisplaySignClauseContext ------------------------------------------------------------------

Cobol85Parser::DefaultDisplaySignClauseContext::DefaultDisplaySignClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::DefaultDisplaySignClauseContext::DEFAULT_DISPLAY() {
  return getToken(Cobol85Parser::DEFAULT_DISPLAY, 0);
}

tree::TerminalNode* Cobol85Parser::DefaultDisplaySignClauseContext::LEADING() {
  return getToken(Cobol85Parser::LEADING, 0);
}

tree::TerminalNode* Cobol85Parser::DefaultDisplaySignClauseContext::TRAILING() {
  return getToken(Cobol85Parser::TRAILING, 0);
}

tree::TerminalNode* Cobol85Parser::DefaultDisplaySignClauseContext::SIGN() {
  return getToken(Cobol85Parser::SIGN, 0);
}

tree::TerminalNode* Cobol85Parser::DefaultDisplaySignClauseContext::SEPARATE() {
  return getToken(Cobol85Parser::SEPARATE, 0);
}

tree::TerminalNode* Cobol85Parser::DefaultDisplaySignClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}

tree::TerminalNode* Cobol85Parser::DefaultDisplaySignClauseContext::CHARACTER() {
  return getToken(Cobol85Parser::CHARACTER, 0);
}


size_t Cobol85Parser::DefaultDisplaySignClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleDefaultDisplaySignClause;
}

void Cobol85Parser::DefaultDisplaySignClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDefaultDisplaySignClause(this);
}

void Cobol85Parser::DefaultDisplaySignClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDefaultDisplaySignClause(this);
}

Cobol85Parser::DefaultDisplaySignClauseContext* Cobol85Parser::defaultDisplaySignClause() {
  DefaultDisplaySignClauseContext *_localctx = _tracker.createInstance<DefaultDisplaySignClauseContext>(_ctx, getState());
  enterRule(_localctx, 86, Cobol85Parser::RuleDefaultDisplaySignClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1577);
    match(Cobol85Parser::DEFAULT_DISPLAY);
    setState(1582);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::SIGN) {
      setState(1578);
      match(Cobol85Parser::SIGN);
      setState(1580);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Cobol85Parser::IS) {
        setState(1579);
        match(Cobol85Parser::IS);
      }
    }
    setState(1584);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::LEADING || _la == Cobol85Parser::TRAILING)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(1589);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::SEPARATE) {
      setState(1585);
      match(Cobol85Parser::SEPARATE);
      setState(1587);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Cobol85Parser::CHARACTER) {
        setState(1586);
        match(Cobol85Parser::CHARACTER);
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnvironmentSwitchNameClauseContext ------------------------------------------------------------------

Cobol85Parser::EnvironmentSwitchNameClauseContext::EnvironmentSwitchNameClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::EnvironmentNameContext* Cobol85Parser::EnvironmentSwitchNameClauseContext::environmentName() {
  return getRuleContext<Cobol85Parser::EnvironmentNameContext>(0);
}

Cobol85Parser::MnemonicNameContext* Cobol85Parser::EnvironmentSwitchNameClauseContext::mnemonicName() {
  return getRuleContext<Cobol85Parser::MnemonicNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::EnvironmentSwitchNameClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}

Cobol85Parser::EnvironmentSwitchNameSpecialNamesStatusPhraseContext* Cobol85Parser::EnvironmentSwitchNameClauseContext::environmentSwitchNameSpecialNamesStatusPhrase() {
  return getRuleContext<Cobol85Parser::EnvironmentSwitchNameSpecialNamesStatusPhraseContext>(0);
}


size_t Cobol85Parser::EnvironmentSwitchNameClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleEnvironmentSwitchNameClause;
}

void Cobol85Parser::EnvironmentSwitchNameClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnvironmentSwitchNameClause(this);
}

void Cobol85Parser::EnvironmentSwitchNameClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnvironmentSwitchNameClause(this);
}

Cobol85Parser::EnvironmentSwitchNameClauseContext* Cobol85Parser::environmentSwitchNameClause() {
  EnvironmentSwitchNameClauseContext *_localctx = _tracker.createInstance<EnvironmentSwitchNameClauseContext>(_ctx, getState());
  enterRule(_localctx, 88, Cobol85Parser::RuleEnvironmentSwitchNameClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1600);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Cobol85Parser::ABORT:
      case Cobol85Parser::AS:
      case Cobol85Parser::ASCII:
      case Cobol85Parser::ASSOCIATED_DATA:
      case Cobol85Parser::ASSOCIATED_DATA_LENGTH:
      case Cobol85Parser::ATTRIBUTE:
      case Cobol85Parser::AUTO:
      case Cobol85Parser::AUTO_SKIP:
      case Cobol85Parser::BACKGROUND_COLOR:
      case Cobol85Parser::BACKGROUND_COLOUR:
      case Cobol85Parser::BEEP:
      case Cobol85Parser::BELL:
      case Cobol85Parser::BINARY:
      case Cobol85Parser::BIT:
      case Cobol85Parser::BLINK:
      case Cobol85Parser::BOUNDS:
      case Cobol85Parser::CAPABLE:
      case Cobol85Parser::CCSVERSION:
      case Cobol85Parser::CHANGED:
      case Cobol85Parser::CHANNEL:
      case Cobol85Parser::CLOSE_DISPOSITION:
      case Cobol85Parser::COBOL:
      case Cobol85Parser::COMMITMENT:
      case Cobol85Parser::CONTROL_POINT:
      case Cobol85Parser::CONVENTION:
      case Cobol85Parser::CRUNCH:
      case Cobol85Parser::CURSOR:
      case Cobol85Parser::DEFAULT:
      case Cobol85Parser::DEFAULT_DISPLAY:
      case Cobol85Parser::DEFINITION:
      case Cobol85Parser::DFHRESP:
      case Cobol85Parser::DFHVALUE:
      case Cobol85Parser::DISK:
      case Cobol85Parser::DONTCARE:
      case Cobol85Parser::DOUBLE:
      case Cobol85Parser::EBCDIC:
      case Cobol85Parser::EMPTY_CHECK:
      case Cobol85Parser::ENTER:
      case Cobol85Parser::ENTRY_PROCEDURE:
      case Cobol85Parser::ERASE:
      case Cobol85Parser::EOL:
      case Cobol85Parser::EOS:
      case Cobol85Parser::ESCAPE:
      case Cobol85Parser::EVENT:
      case Cobol85Parser::EXCLUSIVE:
      case Cobol85Parser::EXPORT:
      case Cobol85Parser::EXTENDED:
      case Cobol85Parser::FOREGROUND_COLOR:
      case Cobol85Parser::FOREGROUND_COLOUR:
      case Cobol85Parser::FULL:
      case Cobol85Parser::FUNCTIONNAME:
      case Cobol85Parser::FUNCTION_POINTER:
      case Cobol85Parser::GRID:
      case Cobol85Parser::HIGHLIGHT:
      case Cobol85Parser::IMPLICIT:
      case Cobol85Parser::IMPORT:
      case Cobol85Parser::INTEGER:
      case Cobol85Parser::KEPT:
      case Cobol85Parser::KEYBOARD:
      case Cobol85Parser::LANGUAGE:
      case Cobol85Parser::LB:
      case Cobol85Parser::LD:
      case Cobol85Parser::LEFTLINE:
      case Cobol85Parser::LENGTH_CHECK:
      case Cobol85Parser::LIBACCESS:
      case Cobol85Parser::LIBPARAMETER:
      case Cobol85Parser::LIBRARY:
      case Cobol85Parser::LIST:
      case Cobol85Parser::LOCAL:
      case Cobol85Parser::LONG_DATE:
      case Cobol85Parser::LONG_TIME:
      case Cobol85Parser::LOWER:
      case Cobol85Parser::LOWLIGHT:
      case Cobol85Parser::MMDDYYYY:
      case Cobol85Parser::NAMED:
      case Cobol85Parser::NATIONAL:
      case Cobol85Parser::NATIONAL_EDITED:
      case Cobol85Parser::NETWORK:
      case Cobol85Parser::NO_ECHO:
      case Cobol85Parser::NUMERIC_DATE:
      case Cobol85Parser::NUMERIC_TIME:
      case Cobol85Parser::ODT:
      case Cobol85Parser::ORDERLY:
      case Cobol85Parser::OVERLINE:
      case Cobol85Parser::OWN:
      case Cobol85Parser::PASSWORD:
      case Cobol85Parser::PORT:
      case Cobol85Parser::PRINTER:
      case Cobol85Parser::PRIVATE:
      case Cobol85Parser::PROCESS:
      case Cobol85Parser::PROGRAM:
      case Cobol85Parser::PROMPT:
      case Cobol85Parser::READER:
      case Cobol85Parser::REMOTE:
      case Cobol85Parser::REAL:
      case Cobol85Parser::RECEIVED:
      case Cobol85Parser::RECURSIVE:
      case Cobol85Parser::REF:
      case Cobol85Parser::REMOVE:
      case Cobol85Parser::REQUIRED:
      case Cobol85Parser::REVERSE_VIDEO:
      case Cobol85Parser::SAVE:
      case Cobol85Parser::SECURE:
      case Cobol85Parser::SHARED:
      case Cobol85Parser::SHAREDBYALL:
      case Cobol85Parser::SHAREDBYRUNUNIT:
      case Cobol85Parser::SHARING:
      case Cobol85Parser::SHORT_DATE:
      case Cobol85Parser::SYMBOL:
      case Cobol85Parser::TASK:
      case Cobol85Parser::THREAD:
      case Cobol85Parser::THREAD_LOCAL:
      case Cobol85Parser::TIMER:
      case Cobol85Parser::TODAYS_DATE:
      case Cobol85Parser::TODAYS_NAME:
      case Cobol85Parser::TRUNCATED:
      case Cobol85Parser::TYPEDEF:
      case Cobol85Parser::UNDERLINE:
      case Cobol85Parser::VIRTUAL:
      case Cobol85Parser::WAIT:
      case Cobol85Parser::YEAR:
      case Cobol85Parser::YYYYMMDD:
      case Cobol85Parser::YYYYDDD:
      case Cobol85Parser::ZERO_FILL:
      case Cobol85Parser::IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(1591);
        environmentName();
        setState(1593);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Cobol85Parser::IS) {
          setState(1592);
          match(Cobol85Parser::IS);
        }
        setState(1595);
        mnemonicName();
        setState(1597);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 82, _ctx)) {
        case 1: {
          setState(1596);
          environmentSwitchNameSpecialNamesStatusPhrase();
          break;
        }

        default:
          break;
        }
        break;
      }

      case Cobol85Parser::OFF:
      case Cobol85Parser::ON: {
        enterOuterAlt(_localctx, 2);
        setState(1599);
        environmentSwitchNameSpecialNamesStatusPhrase();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnvironmentSwitchNameSpecialNamesStatusPhraseContext ------------------------------------------------------------------

Cobol85Parser::EnvironmentSwitchNameSpecialNamesStatusPhraseContext::EnvironmentSwitchNameSpecialNamesStatusPhraseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::EnvironmentSwitchNameSpecialNamesStatusPhraseContext::ON() {
  return getToken(Cobol85Parser::ON, 0);
}

std::vector<Cobol85Parser::ConditionContext *> Cobol85Parser::EnvironmentSwitchNameSpecialNamesStatusPhraseContext::condition() {
  return getRuleContexts<Cobol85Parser::ConditionContext>();
}

Cobol85Parser::ConditionContext* Cobol85Parser::EnvironmentSwitchNameSpecialNamesStatusPhraseContext::condition(size_t i) {
  return getRuleContext<Cobol85Parser::ConditionContext>(i);
}

std::vector<tree::TerminalNode *> Cobol85Parser::EnvironmentSwitchNameSpecialNamesStatusPhraseContext::STATUS() {
  return getTokens(Cobol85Parser::STATUS);
}

tree::TerminalNode* Cobol85Parser::EnvironmentSwitchNameSpecialNamesStatusPhraseContext::STATUS(size_t i) {
  return getToken(Cobol85Parser::STATUS, i);
}

std::vector<tree::TerminalNode *> Cobol85Parser::EnvironmentSwitchNameSpecialNamesStatusPhraseContext::IS() {
  return getTokens(Cobol85Parser::IS);
}

tree::TerminalNode* Cobol85Parser::EnvironmentSwitchNameSpecialNamesStatusPhraseContext::IS(size_t i) {
  return getToken(Cobol85Parser::IS, i);
}

tree::TerminalNode* Cobol85Parser::EnvironmentSwitchNameSpecialNamesStatusPhraseContext::OFF() {
  return getToken(Cobol85Parser::OFF, 0);
}


size_t Cobol85Parser::EnvironmentSwitchNameSpecialNamesStatusPhraseContext::getRuleIndex() const {
  return Cobol85Parser::RuleEnvironmentSwitchNameSpecialNamesStatusPhrase;
}

void Cobol85Parser::EnvironmentSwitchNameSpecialNamesStatusPhraseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnvironmentSwitchNameSpecialNamesStatusPhrase(this);
}

void Cobol85Parser::EnvironmentSwitchNameSpecialNamesStatusPhraseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnvironmentSwitchNameSpecialNamesStatusPhrase(this);
}

Cobol85Parser::EnvironmentSwitchNameSpecialNamesStatusPhraseContext* Cobol85Parser::environmentSwitchNameSpecialNamesStatusPhrase() {
  EnvironmentSwitchNameSpecialNamesStatusPhraseContext *_localctx = _tracker.createInstance<EnvironmentSwitchNameSpecialNamesStatusPhraseContext>(_ctx, getState());
  enterRule(_localctx, 90, Cobol85Parser::RuleEnvironmentSwitchNameSpecialNamesStatusPhrase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1638);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Cobol85Parser::ON: {
        enterOuterAlt(_localctx, 1);
        setState(1602);
        match(Cobol85Parser::ON);
        setState(1604);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Cobol85Parser::STATUS) {
          setState(1603);
          match(Cobol85Parser::STATUS);
        }
        setState(1607);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Cobol85Parser::IS) {
          setState(1606);
          match(Cobol85Parser::IS);
        }
        setState(1609);
        condition();
        setState(1618);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 88, _ctx)) {
        case 1: {
          setState(1610);
          match(Cobol85Parser::OFF);
          setState(1612);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == Cobol85Parser::STATUS) {
            setState(1611);
            match(Cobol85Parser::STATUS);
          }
          setState(1615);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == Cobol85Parser::IS) {
            setState(1614);
            match(Cobol85Parser::IS);
          }
          setState(1617);
          condition();
          break;
        }

        default:
          break;
        }
        break;
      }

      case Cobol85Parser::OFF: {
        enterOuterAlt(_localctx, 2);
        setState(1620);
        match(Cobol85Parser::OFF);
        setState(1622);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Cobol85Parser::STATUS) {
          setState(1621);
          match(Cobol85Parser::STATUS);
        }
        setState(1625);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Cobol85Parser::IS) {
          setState(1624);
          match(Cobol85Parser::IS);
        }
        setState(1627);
        condition();
        setState(1636);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 93, _ctx)) {
        case 1: {
          setState(1628);
          match(Cobol85Parser::ON);
          setState(1630);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == Cobol85Parser::STATUS) {
            setState(1629);
            match(Cobol85Parser::STATUS);
          }
          setState(1633);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == Cobol85Parser::IS) {
            setState(1632);
            match(Cobol85Parser::IS);
          }
          setState(1635);
          condition();
          break;
        }

        default:
          break;
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OdtClauseContext ------------------------------------------------------------------

Cobol85Parser::OdtClauseContext::OdtClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::OdtClauseContext::ODT() {
  return getToken(Cobol85Parser::ODT, 0);
}

Cobol85Parser::MnemonicNameContext* Cobol85Parser::OdtClauseContext::mnemonicName() {
  return getRuleContext<Cobol85Parser::MnemonicNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::OdtClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}


size_t Cobol85Parser::OdtClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleOdtClause;
}

void Cobol85Parser::OdtClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOdtClause(this);
}

void Cobol85Parser::OdtClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOdtClause(this);
}

Cobol85Parser::OdtClauseContext* Cobol85Parser::odtClause() {
  OdtClauseContext *_localctx = _tracker.createInstance<OdtClauseContext>(_ctx, getState());
  enterRule(_localctx, 92, Cobol85Parser::RuleOdtClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1640);
    match(Cobol85Parser::ODT);
    setState(1642);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(1641);
      match(Cobol85Parser::IS);
    }
    setState(1644);
    mnemonicName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReserveNetworkClauseContext ------------------------------------------------------------------

Cobol85Parser::ReserveNetworkClauseContext::ReserveNetworkClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ReserveNetworkClauseContext::RESERVE() {
  return getToken(Cobol85Parser::RESERVE, 0);
}

tree::TerminalNode* Cobol85Parser::ReserveNetworkClauseContext::NETWORK() {
  return getToken(Cobol85Parser::NETWORK, 0);
}

tree::TerminalNode* Cobol85Parser::ReserveNetworkClauseContext::WORDS() {
  return getToken(Cobol85Parser::WORDS, 0);
}

tree::TerminalNode* Cobol85Parser::ReserveNetworkClauseContext::LIST() {
  return getToken(Cobol85Parser::LIST, 0);
}

tree::TerminalNode* Cobol85Parser::ReserveNetworkClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}

tree::TerminalNode* Cobol85Parser::ReserveNetworkClauseContext::CAPABLE() {
  return getToken(Cobol85Parser::CAPABLE, 0);
}


size_t Cobol85Parser::ReserveNetworkClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleReserveNetworkClause;
}

void Cobol85Parser::ReserveNetworkClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReserveNetworkClause(this);
}

void Cobol85Parser::ReserveNetworkClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReserveNetworkClause(this);
}

Cobol85Parser::ReserveNetworkClauseContext* Cobol85Parser::reserveNetworkClause() {
  ReserveNetworkClauseContext *_localctx = _tracker.createInstance<ReserveNetworkClauseContext>(_ctx, getState());
  enterRule(_localctx, 94, Cobol85Parser::RuleReserveNetworkClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1646);
    match(Cobol85Parser::RESERVE);
    setState(1648);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::WORDS) {
      setState(1647);
      match(Cobol85Parser::WORDS);
    }
    setState(1651);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::LIST) {
      setState(1650);
      match(Cobol85Parser::LIST);
    }
    setState(1654);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(1653);
      match(Cobol85Parser::IS);
    }
    setState(1656);
    match(Cobol85Parser::NETWORK);
    setState(1658);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 99, _ctx)) {
    case 1: {
      setState(1657);
      match(Cobol85Parser::CAPABLE);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SymbolicCharactersClauseContext ------------------------------------------------------------------

Cobol85Parser::SymbolicCharactersClauseContext::SymbolicCharactersClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::SymbolicCharactersClauseContext::SYMBOLIC() {
  return getToken(Cobol85Parser::SYMBOLIC, 0);
}

tree::TerminalNode* Cobol85Parser::SymbolicCharactersClauseContext::CHARACTERS() {
  return getToken(Cobol85Parser::CHARACTERS, 0);
}

std::vector<Cobol85Parser::SymbolicCharactersContext *> Cobol85Parser::SymbolicCharactersClauseContext::symbolicCharacters() {
  return getRuleContexts<Cobol85Parser::SymbolicCharactersContext>();
}

Cobol85Parser::SymbolicCharactersContext* Cobol85Parser::SymbolicCharactersClauseContext::symbolicCharacters(size_t i) {
  return getRuleContext<Cobol85Parser::SymbolicCharactersContext>(i);
}

tree::TerminalNode* Cobol85Parser::SymbolicCharactersClauseContext::IN() {
  return getToken(Cobol85Parser::IN, 0);
}

Cobol85Parser::AlphabetNameContext* Cobol85Parser::SymbolicCharactersClauseContext::alphabetName() {
  return getRuleContext<Cobol85Parser::AlphabetNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::SymbolicCharactersClauseContext::ALPHANUMERIC() {
  return getToken(Cobol85Parser::ALPHANUMERIC, 0);
}

tree::TerminalNode* Cobol85Parser::SymbolicCharactersClauseContext::NATIONAL() {
  return getToken(Cobol85Parser::NATIONAL, 0);
}

tree::TerminalNode* Cobol85Parser::SymbolicCharactersClauseContext::FOR() {
  return getToken(Cobol85Parser::FOR, 0);
}


size_t Cobol85Parser::SymbolicCharactersClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleSymbolicCharactersClause;
}

void Cobol85Parser::SymbolicCharactersClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSymbolicCharactersClause(this);
}

void Cobol85Parser::SymbolicCharactersClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSymbolicCharactersClause(this);
}

Cobol85Parser::SymbolicCharactersClauseContext* Cobol85Parser::symbolicCharactersClause() {
  SymbolicCharactersClauseContext *_localctx = _tracker.createInstance<SymbolicCharactersClauseContext>(_ctx, getState());
  enterRule(_localctx, 96, Cobol85Parser::RuleSymbolicCharactersClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1660);
    match(Cobol85Parser::SYMBOLIC);
    setState(1662);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::CHARACTERS) {
      setState(1661);
      match(Cobol85Parser::CHARACTERS);
    }
    setState(1668);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 102, _ctx)) {
    case 1: {
      setState(1665);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Cobol85Parser::FOR) {
        setState(1664);
        match(Cobol85Parser::FOR);
      }
      setState(1667);
      _la = _input->LA(1);
      if (!(_la == Cobol85Parser::ALPHANUMERIC || _la == Cobol85Parser::NATIONAL)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    default:
      break;
    }
    setState(1671); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1670);
              symbolicCharacters();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1673); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 103, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(1677);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IN) {
      setState(1675);
      match(Cobol85Parser::IN);
      setState(1676);
      alphabetName();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SymbolicCharactersContext ------------------------------------------------------------------

Cobol85Parser::SymbolicCharactersContext::SymbolicCharactersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Cobol85Parser::SymbolicCharacterContext *> Cobol85Parser::SymbolicCharactersContext::symbolicCharacter() {
  return getRuleContexts<Cobol85Parser::SymbolicCharacterContext>();
}

Cobol85Parser::SymbolicCharacterContext* Cobol85Parser::SymbolicCharactersContext::symbolicCharacter(size_t i) {
  return getRuleContext<Cobol85Parser::SymbolicCharacterContext>(i);
}

std::vector<Cobol85Parser::IntegerLiteralContext *> Cobol85Parser::SymbolicCharactersContext::integerLiteral() {
  return getRuleContexts<Cobol85Parser::IntegerLiteralContext>();
}

Cobol85Parser::IntegerLiteralContext* Cobol85Parser::SymbolicCharactersContext::integerLiteral(size_t i) {
  return getRuleContext<Cobol85Parser::IntegerLiteralContext>(i);
}

tree::TerminalNode* Cobol85Parser::SymbolicCharactersContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}

tree::TerminalNode* Cobol85Parser::SymbolicCharactersContext::ARE() {
  return getToken(Cobol85Parser::ARE, 0);
}


size_t Cobol85Parser::SymbolicCharactersContext::getRuleIndex() const {
  return Cobol85Parser::RuleSymbolicCharacters;
}

void Cobol85Parser::SymbolicCharactersContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSymbolicCharacters(this);
}

void Cobol85Parser::SymbolicCharactersContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSymbolicCharacters(this);
}

Cobol85Parser::SymbolicCharactersContext* Cobol85Parser::symbolicCharacters() {
  SymbolicCharactersContext *_localctx = _tracker.createInstance<SymbolicCharactersContext>(_ctx, getState());
  enterRule(_localctx, 98, Cobol85Parser::RuleSymbolicCharacters);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1680); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1679);
      symbolicCharacter();
      setState(1682); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3512999431135821826) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 8070451912006173187) != 0) || ((((_la - 138) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 138)) & 5276573893883339531) != 0) || ((((_la - 202) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 202)) & -3098194965423761407) != 0) || ((((_la - 268) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 268)) & -9202532752178970507) != 0) || ((((_la - 336) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 336)) & 4647874433930428483) != 0) || ((((_la - 401) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 401)) & 84826144769) != 0) || ((((_la - 466) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 466)) & 103635575018455169) != 0) || _la == Cobol85Parser::IDENTIFIER);
    setState(1685);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::ARE || _la == Cobol85Parser::IS) {
      setState(1684);
      _la = _input->LA(1);
      if (!(_la == Cobol85Parser::ARE || _la == Cobol85Parser::IS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(1688); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1687);
      integerLiteral();
      setState(1690); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (((((_la - 552) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 552)) & 15) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InputOutputSectionContext ------------------------------------------------------------------

Cobol85Parser::InputOutputSectionContext::InputOutputSectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::InputOutputSectionContext::INPUT_OUTPUT() {
  return getToken(Cobol85Parser::INPUT_OUTPUT, 0);
}

tree::TerminalNode* Cobol85Parser::InputOutputSectionContext::SECTION() {
  return getToken(Cobol85Parser::SECTION, 0);
}

tree::TerminalNode* Cobol85Parser::InputOutputSectionContext::DOT_FS() {
  return getToken(Cobol85Parser::DOT_FS, 0);
}

std::vector<Cobol85Parser::InputOutputSectionParagraphContext *> Cobol85Parser::InputOutputSectionContext::inputOutputSectionParagraph() {
  return getRuleContexts<Cobol85Parser::InputOutputSectionParagraphContext>();
}

Cobol85Parser::InputOutputSectionParagraphContext* Cobol85Parser::InputOutputSectionContext::inputOutputSectionParagraph(size_t i) {
  return getRuleContext<Cobol85Parser::InputOutputSectionParagraphContext>(i);
}


size_t Cobol85Parser::InputOutputSectionContext::getRuleIndex() const {
  return Cobol85Parser::RuleInputOutputSection;
}

void Cobol85Parser::InputOutputSectionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInputOutputSection(this);
}

void Cobol85Parser::InputOutputSectionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInputOutputSection(this);
}

Cobol85Parser::InputOutputSectionContext* Cobol85Parser::inputOutputSection() {
  InputOutputSectionContext *_localctx = _tracker.createInstance<InputOutputSectionContext>(_ctx, getState());
  enterRule(_localctx, 100, Cobol85Parser::RuleInputOutputSection);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1692);
    match(Cobol85Parser::INPUT_OUTPUT);
    setState(1693);
    match(Cobol85Parser::SECTION);
    setState(1694);
    match(Cobol85Parser::DOT_FS);
    setState(1698);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Cobol85Parser::FILE_CONTROL

    || _la == Cobol85Parser::I_O_CONTROL) {
      setState(1695);
      inputOutputSectionParagraph();
      setState(1700);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InputOutputSectionParagraphContext ------------------------------------------------------------------

Cobol85Parser::InputOutputSectionParagraphContext::InputOutputSectionParagraphContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::FileControlParagraphContext* Cobol85Parser::InputOutputSectionParagraphContext::fileControlParagraph() {
  return getRuleContext<Cobol85Parser::FileControlParagraphContext>(0);
}

Cobol85Parser::IoControlParagraphContext* Cobol85Parser::InputOutputSectionParagraphContext::ioControlParagraph() {
  return getRuleContext<Cobol85Parser::IoControlParagraphContext>(0);
}


size_t Cobol85Parser::InputOutputSectionParagraphContext::getRuleIndex() const {
  return Cobol85Parser::RuleInputOutputSectionParagraph;
}

void Cobol85Parser::InputOutputSectionParagraphContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInputOutputSectionParagraph(this);
}

void Cobol85Parser::InputOutputSectionParagraphContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInputOutputSectionParagraph(this);
}

Cobol85Parser::InputOutputSectionParagraphContext* Cobol85Parser::inputOutputSectionParagraph() {
  InputOutputSectionParagraphContext *_localctx = _tracker.createInstance<InputOutputSectionParagraphContext>(_ctx, getState());
  enterRule(_localctx, 102, Cobol85Parser::RuleInputOutputSectionParagraph);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1703);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Cobol85Parser::FILE_CONTROL: {
        enterOuterAlt(_localctx, 1);
        setState(1701);
        fileControlParagraph();
        break;
      }

      case Cobol85Parser::I_O_CONTROL: {
        enterOuterAlt(_localctx, 2);
        setState(1702);
        ioControlParagraph();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FileControlParagraphContext ------------------------------------------------------------------

Cobol85Parser::FileControlParagraphContext::FileControlParagraphContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::FileControlParagraphContext::FILE_CONTROL() {
  return getToken(Cobol85Parser::FILE_CONTROL, 0);
}

std::vector<tree::TerminalNode *> Cobol85Parser::FileControlParagraphContext::DOT_FS() {
  return getTokens(Cobol85Parser::DOT_FS);
}

tree::TerminalNode* Cobol85Parser::FileControlParagraphContext::DOT_FS(size_t i) {
  return getToken(Cobol85Parser::DOT_FS, i);
}

std::vector<Cobol85Parser::FileControlEntryContext *> Cobol85Parser::FileControlParagraphContext::fileControlEntry() {
  return getRuleContexts<Cobol85Parser::FileControlEntryContext>();
}

Cobol85Parser::FileControlEntryContext* Cobol85Parser::FileControlParagraphContext::fileControlEntry(size_t i) {
  return getRuleContext<Cobol85Parser::FileControlEntryContext>(i);
}


size_t Cobol85Parser::FileControlParagraphContext::getRuleIndex() const {
  return Cobol85Parser::RuleFileControlParagraph;
}

void Cobol85Parser::FileControlParagraphContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFileControlParagraph(this);
}

void Cobol85Parser::FileControlParagraphContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFileControlParagraph(this);
}

Cobol85Parser::FileControlParagraphContext* Cobol85Parser::fileControlParagraph() {
  FileControlParagraphContext *_localctx = _tracker.createInstance<FileControlParagraphContext>(_ctx, getState());
  enterRule(_localctx, 104, Cobol85Parser::RuleFileControlParagraph);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1705);
    match(Cobol85Parser::FILE_CONTROL);
    setState(1712);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 111, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1707);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Cobol85Parser::DOT_FS) {
          setState(1706);
          match(Cobol85Parser::DOT_FS);
        }
        setState(1709);
        fileControlEntry(); 
      }
      setState(1714);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 111, _ctx);
    }
    setState(1715);
    match(Cobol85Parser::DOT_FS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FileControlEntryContext ------------------------------------------------------------------

Cobol85Parser::FileControlEntryContext::FileControlEntryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::SelectClauseContext* Cobol85Parser::FileControlEntryContext::selectClause() {
  return getRuleContext<Cobol85Parser::SelectClauseContext>(0);
}

std::vector<Cobol85Parser::FileControlClauseContext *> Cobol85Parser::FileControlEntryContext::fileControlClause() {
  return getRuleContexts<Cobol85Parser::FileControlClauseContext>();
}

Cobol85Parser::FileControlClauseContext* Cobol85Parser::FileControlEntryContext::fileControlClause(size_t i) {
  return getRuleContext<Cobol85Parser::FileControlClauseContext>(i);
}


size_t Cobol85Parser::FileControlEntryContext::getRuleIndex() const {
  return Cobol85Parser::RuleFileControlEntry;
}

void Cobol85Parser::FileControlEntryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFileControlEntry(this);
}

void Cobol85Parser::FileControlEntryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFileControlEntry(this);
}

Cobol85Parser::FileControlEntryContext* Cobol85Parser::fileControlEntry() {
  FileControlEntryContext *_localctx = _tracker.createInstance<FileControlEntryContext>(_ctx, getState());
  enterRule(_localctx, 106, Cobol85Parser::RuleFileControlEntry);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1717);
    selectClause();
    setState(1721);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 4398180990984) != 0) || _la == Cobol85Parser::FILE

    || _la == Cobol85Parser::INDEXED || ((((_la - 279) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 279)) & -8061443332993187839) != 0) || ((((_la - 377) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 377)) & 4503599635759617) != 0) || _la == Cobol85Parser::STATUS) {
      setState(1718);
      fileControlClause();
      setState(1723);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectClauseContext ------------------------------------------------------------------

Cobol85Parser::SelectClauseContext::SelectClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::SelectClauseContext::SELECT() {
  return getToken(Cobol85Parser::SELECT, 0);
}

Cobol85Parser::FileNameContext* Cobol85Parser::SelectClauseContext::fileName() {
  return getRuleContext<Cobol85Parser::FileNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::SelectClauseContext::OPTIONAL() {
  return getToken(Cobol85Parser::OPTIONAL, 0);
}


size_t Cobol85Parser::SelectClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleSelectClause;
}

void Cobol85Parser::SelectClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelectClause(this);
}

void Cobol85Parser::SelectClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelectClause(this);
}

Cobol85Parser::SelectClauseContext* Cobol85Parser::selectClause() {
  SelectClauseContext *_localctx = _tracker.createInstance<SelectClauseContext>(_ctx, getState());
  enterRule(_localctx, 108, Cobol85Parser::RuleSelectClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1724);
    match(Cobol85Parser::SELECT);
    setState(1726);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::OPTIONAL) {
      setState(1725);
      match(Cobol85Parser::OPTIONAL);
    }
    setState(1728);
    fileName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FileControlClauseContext ------------------------------------------------------------------

Cobol85Parser::FileControlClauseContext::FileControlClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::AssignClauseContext* Cobol85Parser::FileControlClauseContext::assignClause() {
  return getRuleContext<Cobol85Parser::AssignClauseContext>(0);
}

Cobol85Parser::ReserveClauseContext* Cobol85Parser::FileControlClauseContext::reserveClause() {
  return getRuleContext<Cobol85Parser::ReserveClauseContext>(0);
}

Cobol85Parser::OrganizationClauseContext* Cobol85Parser::FileControlClauseContext::organizationClause() {
  return getRuleContext<Cobol85Parser::OrganizationClauseContext>(0);
}

Cobol85Parser::PaddingCharacterClauseContext* Cobol85Parser::FileControlClauseContext::paddingCharacterClause() {
  return getRuleContext<Cobol85Parser::PaddingCharacterClauseContext>(0);
}

Cobol85Parser::RecordDelimiterClauseContext* Cobol85Parser::FileControlClauseContext::recordDelimiterClause() {
  return getRuleContext<Cobol85Parser::RecordDelimiterClauseContext>(0);
}

Cobol85Parser::AccessModeClauseContext* Cobol85Parser::FileControlClauseContext::accessModeClause() {
  return getRuleContext<Cobol85Parser::AccessModeClauseContext>(0);
}

Cobol85Parser::RecordKeyClauseContext* Cobol85Parser::FileControlClauseContext::recordKeyClause() {
  return getRuleContext<Cobol85Parser::RecordKeyClauseContext>(0);
}

Cobol85Parser::AlternateRecordKeyClauseContext* Cobol85Parser::FileControlClauseContext::alternateRecordKeyClause() {
  return getRuleContext<Cobol85Parser::AlternateRecordKeyClauseContext>(0);
}

Cobol85Parser::FileStatusClauseContext* Cobol85Parser::FileControlClauseContext::fileStatusClause() {
  return getRuleContext<Cobol85Parser::FileStatusClauseContext>(0);
}

Cobol85Parser::PasswordClauseContext* Cobol85Parser::FileControlClauseContext::passwordClause() {
  return getRuleContext<Cobol85Parser::PasswordClauseContext>(0);
}

Cobol85Parser::RelativeKeyClauseContext* Cobol85Parser::FileControlClauseContext::relativeKeyClause() {
  return getRuleContext<Cobol85Parser::RelativeKeyClauseContext>(0);
}


size_t Cobol85Parser::FileControlClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleFileControlClause;
}

void Cobol85Parser::FileControlClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFileControlClause(this);
}

void Cobol85Parser::FileControlClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFileControlClause(this);
}

Cobol85Parser::FileControlClauseContext* Cobol85Parser::fileControlClause() {
  FileControlClauseContext *_localctx = _tracker.createInstance<FileControlClauseContext>(_ctx, getState());
  enterRule(_localctx, 110, Cobol85Parser::RuleFileControlClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1741);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 114, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1730);
      assignClause();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1731);
      reserveClause();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1732);
      organizationClause();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1733);
      paddingCharacterClause();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1734);
      recordDelimiterClause();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1735);
      accessModeClause();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1736);
      recordKeyClause();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1737);
      alternateRecordKeyClause();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1738);
      fileStatusClause();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(1739);
      passwordClause();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(1740);
      relativeKeyClause();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssignClauseContext ------------------------------------------------------------------

Cobol85Parser::AssignClauseContext::AssignClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::AssignClauseContext::ASSIGN() {
  return getToken(Cobol85Parser::ASSIGN, 0);
}

tree::TerminalNode* Cobol85Parser::AssignClauseContext::DISK() {
  return getToken(Cobol85Parser::DISK, 0);
}

tree::TerminalNode* Cobol85Parser::AssignClauseContext::DISPLAY() {
  return getToken(Cobol85Parser::DISPLAY, 0);
}

tree::TerminalNode* Cobol85Parser::AssignClauseContext::KEYBOARD() {
  return getToken(Cobol85Parser::KEYBOARD, 0);
}

tree::TerminalNode* Cobol85Parser::AssignClauseContext::PORT() {
  return getToken(Cobol85Parser::PORT, 0);
}

tree::TerminalNode* Cobol85Parser::AssignClauseContext::PRINTER() {
  return getToken(Cobol85Parser::PRINTER, 0);
}

tree::TerminalNode* Cobol85Parser::AssignClauseContext::READER() {
  return getToken(Cobol85Parser::READER, 0);
}

tree::TerminalNode* Cobol85Parser::AssignClauseContext::REMOTE() {
  return getToken(Cobol85Parser::REMOTE, 0);
}

tree::TerminalNode* Cobol85Parser::AssignClauseContext::TAPE() {
  return getToken(Cobol85Parser::TAPE, 0);
}

tree::TerminalNode* Cobol85Parser::AssignClauseContext::VIRTUAL() {
  return getToken(Cobol85Parser::VIRTUAL, 0);
}

Cobol85Parser::AssignmentNameContext* Cobol85Parser::AssignClauseContext::assignmentName() {
  return getRuleContext<Cobol85Parser::AssignmentNameContext>(0);
}

Cobol85Parser::LiteralContext* Cobol85Parser::AssignClauseContext::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}

tree::TerminalNode* Cobol85Parser::AssignClauseContext::TO() {
  return getToken(Cobol85Parser::TO, 0);
}


size_t Cobol85Parser::AssignClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleAssignClause;
}

void Cobol85Parser::AssignClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssignClause(this);
}

void Cobol85Parser::AssignClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssignClause(this);
}

Cobol85Parser::AssignClauseContext* Cobol85Parser::assignClause() {
  AssignClauseContext *_localctx = _tracker.createInstance<AssignClauseContext>(_ctx, getState());
  enterRule(_localctx, 112, Cobol85Parser::RuleAssignClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1743);
    match(Cobol85Parser::ASSIGN);
    setState(1745);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::TO) {
      setState(1744);
      match(Cobol85Parser::TO);
    }
    setState(1758);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 116, _ctx)) {
    case 1: {
      setState(1747);
      match(Cobol85Parser::DISK);
      break;
    }

    case 2: {
      setState(1748);
      match(Cobol85Parser::DISPLAY);
      break;
    }

    case 3: {
      setState(1749);
      match(Cobol85Parser::KEYBOARD);
      break;
    }

    case 4: {
      setState(1750);
      match(Cobol85Parser::PORT);
      break;
    }

    case 5: {
      setState(1751);
      match(Cobol85Parser::PRINTER);
      break;
    }

    case 6: {
      setState(1752);
      match(Cobol85Parser::READER);
      break;
    }

    case 7: {
      setState(1753);
      match(Cobol85Parser::REMOTE);
      break;
    }

    case 8: {
      setState(1754);
      match(Cobol85Parser::TAPE);
      break;
    }

    case 9: {
      setState(1755);
      match(Cobol85Parser::VIRTUAL);
      break;
    }

    case 10: {
      setState(1756);
      assignmentName();
      break;
    }

    case 11: {
      setState(1757);
      literal();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReserveClauseContext ------------------------------------------------------------------

Cobol85Parser::ReserveClauseContext::ReserveClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ReserveClauseContext::RESERVE() {
  return getToken(Cobol85Parser::RESERVE, 0);
}

tree::TerminalNode* Cobol85Parser::ReserveClauseContext::NO() {
  return getToken(Cobol85Parser::NO, 0);
}

Cobol85Parser::IntegerLiteralContext* Cobol85Parser::ReserveClauseContext::integerLiteral() {
  return getRuleContext<Cobol85Parser::IntegerLiteralContext>(0);
}

tree::TerminalNode* Cobol85Parser::ReserveClauseContext::ALTERNATE() {
  return getToken(Cobol85Parser::ALTERNATE, 0);
}

tree::TerminalNode* Cobol85Parser::ReserveClauseContext::AREA() {
  return getToken(Cobol85Parser::AREA, 0);
}

tree::TerminalNode* Cobol85Parser::ReserveClauseContext::AREAS() {
  return getToken(Cobol85Parser::AREAS, 0);
}


size_t Cobol85Parser::ReserveClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleReserveClause;
}

void Cobol85Parser::ReserveClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReserveClause(this);
}

void Cobol85Parser::ReserveClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReserveClause(this);
}

Cobol85Parser::ReserveClauseContext* Cobol85Parser::reserveClause() {
  ReserveClauseContext *_localctx = _tracker.createInstance<ReserveClauseContext>(_ctx, getState());
  enterRule(_localctx, 114, Cobol85Parser::RuleReserveClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1760);
    match(Cobol85Parser::RESERVE);
    setState(1763);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Cobol85Parser::NO: {
        setState(1761);
        match(Cobol85Parser::NO);
        break;
      }

      case Cobol85Parser::LEVEL_NUMBER_66:
      case Cobol85Parser::LEVEL_NUMBER_77:
      case Cobol85Parser::LEVEL_NUMBER_88:
      case Cobol85Parser::INTEGERLITERAL: {
        setState(1762);
        integerLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(1766);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 118, _ctx)) {
    case 1: {
      setState(1765);
      match(Cobol85Parser::ALTERNATE);
      break;
    }

    default:
      break;
    }
    setState(1769);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::AREA

    || _la == Cobol85Parser::AREAS) {
      setState(1768);
      _la = _input->LA(1);
      if (!(_la == Cobol85Parser::AREA

      || _la == Cobol85Parser::AREAS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OrganizationClauseContext ------------------------------------------------------------------

Cobol85Parser::OrganizationClauseContext::OrganizationClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::OrganizationClauseContext::SEQUENTIAL() {
  return getToken(Cobol85Parser::SEQUENTIAL, 0);
}

tree::TerminalNode* Cobol85Parser::OrganizationClauseContext::RELATIVE() {
  return getToken(Cobol85Parser::RELATIVE, 0);
}

tree::TerminalNode* Cobol85Parser::OrganizationClauseContext::INDEXED() {
  return getToken(Cobol85Parser::INDEXED, 0);
}

tree::TerminalNode* Cobol85Parser::OrganizationClauseContext::ORGANIZATION() {
  return getToken(Cobol85Parser::ORGANIZATION, 0);
}

tree::TerminalNode* Cobol85Parser::OrganizationClauseContext::LINE() {
  return getToken(Cobol85Parser::LINE, 0);
}

tree::TerminalNode* Cobol85Parser::OrganizationClauseContext::RECORD() {
  return getToken(Cobol85Parser::RECORD, 0);
}

tree::TerminalNode* Cobol85Parser::OrganizationClauseContext::BINARY() {
  return getToken(Cobol85Parser::BINARY, 0);
}

tree::TerminalNode* Cobol85Parser::OrganizationClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}


size_t Cobol85Parser::OrganizationClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleOrganizationClause;
}

void Cobol85Parser::OrganizationClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOrganizationClause(this);
}

void Cobol85Parser::OrganizationClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOrganizationClause(this);
}

Cobol85Parser::OrganizationClauseContext* Cobol85Parser::organizationClause() {
  OrganizationClauseContext *_localctx = _tracker.createInstance<OrganizationClauseContext>(_ctx, getState());
  enterRule(_localctx, 116, Cobol85Parser::RuleOrganizationClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1775);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::ORGANIZATION) {
      setState(1771);
      match(Cobol85Parser::ORGANIZATION);
      setState(1773);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Cobol85Parser::IS) {
        setState(1772);
        match(Cobol85Parser::IS);
      }
    }
    setState(1782);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 122, _ctx)) {
    case 1: {
      setState(1777);
      match(Cobol85Parser::LINE);
      break;
    }

    case 2: {
      setState(1778);
      match(Cobol85Parser::RECORD);
      setState(1779);
      match(Cobol85Parser::BINARY);
      break;
    }

    case 3: {
      setState(1780);
      match(Cobol85Parser::RECORD);
      break;
    }

    case 4: {
      setState(1781);
      match(Cobol85Parser::BINARY);
      break;
    }

    default:
      break;
    }
    setState(1784);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::INDEXED || _la == Cobol85Parser::RELATIVE

    || _la == Cobol85Parser::SEQUENTIAL)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PaddingCharacterClauseContext ------------------------------------------------------------------

Cobol85Parser::PaddingCharacterClauseContext::PaddingCharacterClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::PaddingCharacterClauseContext::PADDING() {
  return getToken(Cobol85Parser::PADDING, 0);
}

Cobol85Parser::QualifiedDataNameContext* Cobol85Parser::PaddingCharacterClauseContext::qualifiedDataName() {
  return getRuleContext<Cobol85Parser::QualifiedDataNameContext>(0);
}

Cobol85Parser::LiteralContext* Cobol85Parser::PaddingCharacterClauseContext::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}

tree::TerminalNode* Cobol85Parser::PaddingCharacterClauseContext::CHARACTER() {
  return getToken(Cobol85Parser::CHARACTER, 0);
}

tree::TerminalNode* Cobol85Parser::PaddingCharacterClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}


size_t Cobol85Parser::PaddingCharacterClauseContext::getRuleIndex() const {
  return Cobol85Parser::RulePaddingCharacterClause;
}

void Cobol85Parser::PaddingCharacterClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPaddingCharacterClause(this);
}

void Cobol85Parser::PaddingCharacterClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPaddingCharacterClause(this);
}

Cobol85Parser::PaddingCharacterClauseContext* Cobol85Parser::paddingCharacterClause() {
  PaddingCharacterClauseContext *_localctx = _tracker.createInstance<PaddingCharacterClauseContext>(_ctx, getState());
  enterRule(_localctx, 118, Cobol85Parser::RulePaddingCharacterClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1786);
    match(Cobol85Parser::PADDING);
    setState(1788);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::CHARACTER) {
      setState(1787);
      match(Cobol85Parser::CHARACTER);
    }
    setState(1791);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(1790);
      match(Cobol85Parser::IS);
    }
    setState(1795);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 125, _ctx)) {
    case 1: {
      setState(1793);
      qualifiedDataName();
      break;
    }

    case 2: {
      setState(1794);
      literal();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RecordDelimiterClauseContext ------------------------------------------------------------------

Cobol85Parser::RecordDelimiterClauseContext::RecordDelimiterClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::RecordDelimiterClauseContext::RECORD() {
  return getToken(Cobol85Parser::RECORD, 0);
}

tree::TerminalNode* Cobol85Parser::RecordDelimiterClauseContext::DELIMITER() {
  return getToken(Cobol85Parser::DELIMITER, 0);
}

tree::TerminalNode* Cobol85Parser::RecordDelimiterClauseContext::STANDARD_1() {
  return getToken(Cobol85Parser::STANDARD_1, 0);
}

tree::TerminalNode* Cobol85Parser::RecordDelimiterClauseContext::IMPLICIT() {
  return getToken(Cobol85Parser::IMPLICIT, 0);
}

Cobol85Parser::AssignmentNameContext* Cobol85Parser::RecordDelimiterClauseContext::assignmentName() {
  return getRuleContext<Cobol85Parser::AssignmentNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::RecordDelimiterClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}


size_t Cobol85Parser::RecordDelimiterClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleRecordDelimiterClause;
}

void Cobol85Parser::RecordDelimiterClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRecordDelimiterClause(this);
}

void Cobol85Parser::RecordDelimiterClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRecordDelimiterClause(this);
}

Cobol85Parser::RecordDelimiterClauseContext* Cobol85Parser::recordDelimiterClause() {
  RecordDelimiterClauseContext *_localctx = _tracker.createInstance<RecordDelimiterClauseContext>(_ctx, getState());
  enterRule(_localctx, 120, Cobol85Parser::RuleRecordDelimiterClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1797);
    match(Cobol85Parser::RECORD);
    setState(1798);
    match(Cobol85Parser::DELIMITER);
    setState(1800);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(1799);
      match(Cobol85Parser::IS);
    }
    setState(1805);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 127, _ctx)) {
    case 1: {
      setState(1802);
      match(Cobol85Parser::STANDARD_1);
      break;
    }

    case 2: {
      setState(1803);
      match(Cobol85Parser::IMPLICIT);
      break;
    }

    case 3: {
      setState(1804);
      assignmentName();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AccessModeClauseContext ------------------------------------------------------------------

Cobol85Parser::AccessModeClauseContext::AccessModeClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::AccessModeClauseContext::ACCESS() {
  return getToken(Cobol85Parser::ACCESS, 0);
}

tree::TerminalNode* Cobol85Parser::AccessModeClauseContext::SEQUENTIAL() {
  return getToken(Cobol85Parser::SEQUENTIAL, 0);
}

tree::TerminalNode* Cobol85Parser::AccessModeClauseContext::RANDOM() {
  return getToken(Cobol85Parser::RANDOM, 0);
}

tree::TerminalNode* Cobol85Parser::AccessModeClauseContext::DYNAMIC() {
  return getToken(Cobol85Parser::DYNAMIC, 0);
}

tree::TerminalNode* Cobol85Parser::AccessModeClauseContext::EXCLUSIVE() {
  return getToken(Cobol85Parser::EXCLUSIVE, 0);
}

tree::TerminalNode* Cobol85Parser::AccessModeClauseContext::MODE() {
  return getToken(Cobol85Parser::MODE, 0);
}

tree::TerminalNode* Cobol85Parser::AccessModeClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}


size_t Cobol85Parser::AccessModeClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleAccessModeClause;
}

void Cobol85Parser::AccessModeClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAccessModeClause(this);
}

void Cobol85Parser::AccessModeClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAccessModeClause(this);
}

Cobol85Parser::AccessModeClauseContext* Cobol85Parser::accessModeClause() {
  AccessModeClauseContext *_localctx = _tracker.createInstance<AccessModeClauseContext>(_ctx, getState());
  enterRule(_localctx, 122, Cobol85Parser::RuleAccessModeClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1807);
    match(Cobol85Parser::ACCESS);
    setState(1809);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::MODE) {
      setState(1808);
      match(Cobol85Parser::MODE);
    }
    setState(1812);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(1811);
      match(Cobol85Parser::IS);
    }
    setState(1814);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::DYNAMIC

    || _la == Cobol85Parser::EXCLUSIVE || _la == Cobol85Parser::RANDOM

    || _la == Cobol85Parser::SEQUENTIAL)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RecordKeyClauseContext ------------------------------------------------------------------

Cobol85Parser::RecordKeyClauseContext::RecordKeyClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::RecordKeyClauseContext::RECORD() {
  return getToken(Cobol85Parser::RECORD, 0);
}

Cobol85Parser::QualifiedDataNameContext* Cobol85Parser::RecordKeyClauseContext::qualifiedDataName() {
  return getRuleContext<Cobol85Parser::QualifiedDataNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::RecordKeyClauseContext::KEY() {
  return getToken(Cobol85Parser::KEY, 0);
}

tree::TerminalNode* Cobol85Parser::RecordKeyClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}

Cobol85Parser::PasswordClauseContext* Cobol85Parser::RecordKeyClauseContext::passwordClause() {
  return getRuleContext<Cobol85Parser::PasswordClauseContext>(0);
}

tree::TerminalNode* Cobol85Parser::RecordKeyClauseContext::DUPLICATES() {
  return getToken(Cobol85Parser::DUPLICATES, 0);
}

tree::TerminalNode* Cobol85Parser::RecordKeyClauseContext::WITH() {
  return getToken(Cobol85Parser::WITH, 0);
}


size_t Cobol85Parser::RecordKeyClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleRecordKeyClause;
}

void Cobol85Parser::RecordKeyClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRecordKeyClause(this);
}

void Cobol85Parser::RecordKeyClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRecordKeyClause(this);
}

Cobol85Parser::RecordKeyClauseContext* Cobol85Parser::recordKeyClause() {
  RecordKeyClauseContext *_localctx = _tracker.createInstance<RecordKeyClauseContext>(_ctx, getState());
  enterRule(_localctx, 124, Cobol85Parser::RuleRecordKeyClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1816);
    match(Cobol85Parser::RECORD);
    setState(1818);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::KEY) {
      setState(1817);
      match(Cobol85Parser::KEY);
    }
    setState(1821);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(1820);
      match(Cobol85Parser::IS);
    }
    setState(1823);
    qualifiedDataName();
    setState(1825);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 132, _ctx)) {
    case 1: {
      setState(1824);
      passwordClause();
      break;
    }

    default:
      break;
    }
    setState(1831);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::DUPLICATES || _la == Cobol85Parser::WITH) {
      setState(1828);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Cobol85Parser::WITH) {
        setState(1827);
        match(Cobol85Parser::WITH);
      }
      setState(1830);
      match(Cobol85Parser::DUPLICATES);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AlternateRecordKeyClauseContext ------------------------------------------------------------------

Cobol85Parser::AlternateRecordKeyClauseContext::AlternateRecordKeyClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::AlternateRecordKeyClauseContext::ALTERNATE() {
  return getToken(Cobol85Parser::ALTERNATE, 0);
}

tree::TerminalNode* Cobol85Parser::AlternateRecordKeyClauseContext::RECORD() {
  return getToken(Cobol85Parser::RECORD, 0);
}

Cobol85Parser::QualifiedDataNameContext* Cobol85Parser::AlternateRecordKeyClauseContext::qualifiedDataName() {
  return getRuleContext<Cobol85Parser::QualifiedDataNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::AlternateRecordKeyClauseContext::KEY() {
  return getToken(Cobol85Parser::KEY, 0);
}

tree::TerminalNode* Cobol85Parser::AlternateRecordKeyClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}

Cobol85Parser::PasswordClauseContext* Cobol85Parser::AlternateRecordKeyClauseContext::passwordClause() {
  return getRuleContext<Cobol85Parser::PasswordClauseContext>(0);
}

tree::TerminalNode* Cobol85Parser::AlternateRecordKeyClauseContext::DUPLICATES() {
  return getToken(Cobol85Parser::DUPLICATES, 0);
}

tree::TerminalNode* Cobol85Parser::AlternateRecordKeyClauseContext::WITH() {
  return getToken(Cobol85Parser::WITH, 0);
}


size_t Cobol85Parser::AlternateRecordKeyClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleAlternateRecordKeyClause;
}

void Cobol85Parser::AlternateRecordKeyClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlternateRecordKeyClause(this);
}

void Cobol85Parser::AlternateRecordKeyClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlternateRecordKeyClause(this);
}

Cobol85Parser::AlternateRecordKeyClauseContext* Cobol85Parser::alternateRecordKeyClause() {
  AlternateRecordKeyClauseContext *_localctx = _tracker.createInstance<AlternateRecordKeyClauseContext>(_ctx, getState());
  enterRule(_localctx, 126, Cobol85Parser::RuleAlternateRecordKeyClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1833);
    match(Cobol85Parser::ALTERNATE);
    setState(1834);
    match(Cobol85Parser::RECORD);
    setState(1836);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::KEY) {
      setState(1835);
      match(Cobol85Parser::KEY);
    }
    setState(1839);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(1838);
      match(Cobol85Parser::IS);
    }
    setState(1841);
    qualifiedDataName();
    setState(1843);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 137, _ctx)) {
    case 1: {
      setState(1842);
      passwordClause();
      break;
    }

    default:
      break;
    }
    setState(1849);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::DUPLICATES || _la == Cobol85Parser::WITH) {
      setState(1846);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Cobol85Parser::WITH) {
        setState(1845);
        match(Cobol85Parser::WITH);
      }
      setState(1848);
      match(Cobol85Parser::DUPLICATES);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PasswordClauseContext ------------------------------------------------------------------

Cobol85Parser::PasswordClauseContext::PasswordClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::PasswordClauseContext::PASSWORD() {
  return getToken(Cobol85Parser::PASSWORD, 0);
}

Cobol85Parser::DataNameContext* Cobol85Parser::PasswordClauseContext::dataName() {
  return getRuleContext<Cobol85Parser::DataNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::PasswordClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}


size_t Cobol85Parser::PasswordClauseContext::getRuleIndex() const {
  return Cobol85Parser::RulePasswordClause;
}

void Cobol85Parser::PasswordClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPasswordClause(this);
}

void Cobol85Parser::PasswordClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPasswordClause(this);
}

Cobol85Parser::PasswordClauseContext* Cobol85Parser::passwordClause() {
  PasswordClauseContext *_localctx = _tracker.createInstance<PasswordClauseContext>(_ctx, getState());
  enterRule(_localctx, 128, Cobol85Parser::RulePasswordClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1851);
    match(Cobol85Parser::PASSWORD);
    setState(1853);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(1852);
      match(Cobol85Parser::IS);
    }
    setState(1855);
    dataName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FileStatusClauseContext ------------------------------------------------------------------

Cobol85Parser::FileStatusClauseContext::FileStatusClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::FileStatusClauseContext::STATUS() {
  return getToken(Cobol85Parser::STATUS, 0);
}

std::vector<Cobol85Parser::QualifiedDataNameContext *> Cobol85Parser::FileStatusClauseContext::qualifiedDataName() {
  return getRuleContexts<Cobol85Parser::QualifiedDataNameContext>();
}

Cobol85Parser::QualifiedDataNameContext* Cobol85Parser::FileStatusClauseContext::qualifiedDataName(size_t i) {
  return getRuleContext<Cobol85Parser::QualifiedDataNameContext>(i);
}

tree::TerminalNode* Cobol85Parser::FileStatusClauseContext::FILE() {
  return getToken(Cobol85Parser::FILE, 0);
}

tree::TerminalNode* Cobol85Parser::FileStatusClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}


size_t Cobol85Parser::FileStatusClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleFileStatusClause;
}

void Cobol85Parser::FileStatusClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFileStatusClause(this);
}

void Cobol85Parser::FileStatusClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFileStatusClause(this);
}

Cobol85Parser::FileStatusClauseContext* Cobol85Parser::fileStatusClause() {
  FileStatusClauseContext *_localctx = _tracker.createInstance<FileStatusClauseContext>(_ctx, getState());
  enterRule(_localctx, 130, Cobol85Parser::RuleFileStatusClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1858);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::FILE) {
      setState(1857);
      match(Cobol85Parser::FILE);
    }
    setState(1860);
    match(Cobol85Parser::STATUS);
    setState(1862);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(1861);
      match(Cobol85Parser::IS);
    }
    setState(1864);
    qualifiedDataName();
    setState(1866);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 143, _ctx)) {
    case 1: {
      setState(1865);
      qualifiedDataName();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RelativeKeyClauseContext ------------------------------------------------------------------

Cobol85Parser::RelativeKeyClauseContext::RelativeKeyClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::RelativeKeyClauseContext::RELATIVE() {
  return getToken(Cobol85Parser::RELATIVE, 0);
}

Cobol85Parser::QualifiedDataNameContext* Cobol85Parser::RelativeKeyClauseContext::qualifiedDataName() {
  return getRuleContext<Cobol85Parser::QualifiedDataNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::RelativeKeyClauseContext::KEY() {
  return getToken(Cobol85Parser::KEY, 0);
}

tree::TerminalNode* Cobol85Parser::RelativeKeyClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}


size_t Cobol85Parser::RelativeKeyClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleRelativeKeyClause;
}

void Cobol85Parser::RelativeKeyClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRelativeKeyClause(this);
}

void Cobol85Parser::RelativeKeyClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRelativeKeyClause(this);
}

Cobol85Parser::RelativeKeyClauseContext* Cobol85Parser::relativeKeyClause() {
  RelativeKeyClauseContext *_localctx = _tracker.createInstance<RelativeKeyClauseContext>(_ctx, getState());
  enterRule(_localctx, 132, Cobol85Parser::RuleRelativeKeyClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1868);
    match(Cobol85Parser::RELATIVE);
    setState(1870);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::KEY) {
      setState(1869);
      match(Cobol85Parser::KEY);
    }
    setState(1873);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(1872);
      match(Cobol85Parser::IS);
    }
    setState(1875);
    qualifiedDataName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IoControlParagraphContext ------------------------------------------------------------------

Cobol85Parser::IoControlParagraphContext::IoControlParagraphContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::IoControlParagraphContext::I_O_CONTROL() {
  return getToken(Cobol85Parser::I_O_CONTROL, 0);
}

std::vector<tree::TerminalNode *> Cobol85Parser::IoControlParagraphContext::DOT_FS() {
  return getTokens(Cobol85Parser::DOT_FS);
}

tree::TerminalNode* Cobol85Parser::IoControlParagraphContext::DOT_FS(size_t i) {
  return getToken(Cobol85Parser::DOT_FS, i);
}

Cobol85Parser::FileNameContext* Cobol85Parser::IoControlParagraphContext::fileName() {
  return getRuleContext<Cobol85Parser::FileNameContext>(0);
}

std::vector<Cobol85Parser::IoControlClauseContext *> Cobol85Parser::IoControlParagraphContext::ioControlClause() {
  return getRuleContexts<Cobol85Parser::IoControlClauseContext>();
}

Cobol85Parser::IoControlClauseContext* Cobol85Parser::IoControlParagraphContext::ioControlClause(size_t i) {
  return getRuleContext<Cobol85Parser::IoControlClauseContext>(i);
}


size_t Cobol85Parser::IoControlParagraphContext::getRuleIndex() const {
  return Cobol85Parser::RuleIoControlParagraph;
}

void Cobol85Parser::IoControlParagraphContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIoControlParagraph(this);
}

void Cobol85Parser::IoControlParagraphContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIoControlParagraph(this);
}

Cobol85Parser::IoControlParagraphContext* Cobol85Parser::ioControlParagraph() {
  IoControlParagraphContext *_localctx = _tracker.createInstance<IoControlParagraphContext>(_ctx, getState());
  enterRule(_localctx, 134, Cobol85Parser::RuleIoControlParagraph);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1877);
    match(Cobol85Parser::I_O_CONTROL);
    setState(1878);
    match(Cobol85Parser::DOT_FS);
    setState(1882);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 146, _ctx)) {
    case 1: {
      setState(1879);
      fileName();
      setState(1880);
      match(Cobol85Parser::DOT_FS);
      break;
    }

    default:
      break;
    }
    setState(1891);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::COMMITMENT || _la == Cobol85Parser::MULTIPLE || _la == Cobol85Parser::RERUN

    || _la == Cobol85Parser::SAME || _la == Cobol85Parser::DOT_FS) {
      setState(1887);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == Cobol85Parser::COMMITMENT || _la == Cobol85Parser::MULTIPLE || _la == Cobol85Parser::RERUN

      || _la == Cobol85Parser::SAME) {
        setState(1884);
        ioControlClause();
        setState(1889);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1890);
      match(Cobol85Parser::DOT_FS);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IoControlClauseContext ------------------------------------------------------------------

Cobol85Parser::IoControlClauseContext::IoControlClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::RerunClauseContext* Cobol85Parser::IoControlClauseContext::rerunClause() {
  return getRuleContext<Cobol85Parser::RerunClauseContext>(0);
}

Cobol85Parser::SameClauseContext* Cobol85Parser::IoControlClauseContext::sameClause() {
  return getRuleContext<Cobol85Parser::SameClauseContext>(0);
}

Cobol85Parser::MultipleFileClauseContext* Cobol85Parser::IoControlClauseContext::multipleFileClause() {
  return getRuleContext<Cobol85Parser::MultipleFileClauseContext>(0);
}

Cobol85Parser::CommitmentControlClauseContext* Cobol85Parser::IoControlClauseContext::commitmentControlClause() {
  return getRuleContext<Cobol85Parser::CommitmentControlClauseContext>(0);
}


size_t Cobol85Parser::IoControlClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleIoControlClause;
}

void Cobol85Parser::IoControlClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIoControlClause(this);
}

void Cobol85Parser::IoControlClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIoControlClause(this);
}

Cobol85Parser::IoControlClauseContext* Cobol85Parser::ioControlClause() {
  IoControlClauseContext *_localctx = _tracker.createInstance<IoControlClauseContext>(_ctx, getState());
  enterRule(_localctx, 136, Cobol85Parser::RuleIoControlClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1897);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Cobol85Parser::RERUN: {
        enterOuterAlt(_localctx, 1);
        setState(1893);
        rerunClause();
        break;
      }

      case Cobol85Parser::SAME: {
        enterOuterAlt(_localctx, 2);
        setState(1894);
        sameClause();
        break;
      }

      case Cobol85Parser::MULTIPLE: {
        enterOuterAlt(_localctx, 3);
        setState(1895);
        multipleFileClause();
        break;
      }

      case Cobol85Parser::COMMITMENT: {
        enterOuterAlt(_localctx, 4);
        setState(1896);
        commitmentControlClause();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RerunClauseContext ------------------------------------------------------------------

Cobol85Parser::RerunClauseContext::RerunClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::RerunClauseContext::RERUN() {
  return getToken(Cobol85Parser::RERUN, 0);
}

tree::TerminalNode* Cobol85Parser::RerunClauseContext::EVERY() {
  return getToken(Cobol85Parser::EVERY, 0);
}

Cobol85Parser::RerunEveryRecordsContext* Cobol85Parser::RerunClauseContext::rerunEveryRecords() {
  return getRuleContext<Cobol85Parser::RerunEveryRecordsContext>(0);
}

Cobol85Parser::RerunEveryOfContext* Cobol85Parser::RerunClauseContext::rerunEveryOf() {
  return getRuleContext<Cobol85Parser::RerunEveryOfContext>(0);
}

Cobol85Parser::RerunEveryClockContext* Cobol85Parser::RerunClauseContext::rerunEveryClock() {
  return getRuleContext<Cobol85Parser::RerunEveryClockContext>(0);
}

tree::TerminalNode* Cobol85Parser::RerunClauseContext::ON() {
  return getToken(Cobol85Parser::ON, 0);
}

Cobol85Parser::AssignmentNameContext* Cobol85Parser::RerunClauseContext::assignmentName() {
  return getRuleContext<Cobol85Parser::AssignmentNameContext>(0);
}

Cobol85Parser::FileNameContext* Cobol85Parser::RerunClauseContext::fileName() {
  return getRuleContext<Cobol85Parser::FileNameContext>(0);
}


size_t Cobol85Parser::RerunClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleRerunClause;
}

void Cobol85Parser::RerunClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRerunClause(this);
}

void Cobol85Parser::RerunClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRerunClause(this);
}

Cobol85Parser::RerunClauseContext* Cobol85Parser::rerunClause() {
  RerunClauseContext *_localctx = _tracker.createInstance<RerunClauseContext>(_ctx, getState());
  enterRule(_localctx, 138, Cobol85Parser::RuleRerunClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1899);
    match(Cobol85Parser::RERUN);
    setState(1905);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::ON) {
      setState(1900);
      match(Cobol85Parser::ON);
      setState(1903);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 150, _ctx)) {
      case 1: {
        setState(1901);
        assignmentName();
        break;
      }

      case 2: {
        setState(1902);
        fileName();
        break;
      }

      default:
        break;
      }
    }
    setState(1907);
    match(Cobol85Parser::EVERY);
    setState(1911);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 152, _ctx)) {
    case 1: {
      setState(1908);
      rerunEveryRecords();
      break;
    }

    case 2: {
      setState(1909);
      rerunEveryOf();
      break;
    }

    case 3: {
      setState(1910);
      rerunEveryClock();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RerunEveryRecordsContext ------------------------------------------------------------------

Cobol85Parser::RerunEveryRecordsContext::RerunEveryRecordsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::IntegerLiteralContext* Cobol85Parser::RerunEveryRecordsContext::integerLiteral() {
  return getRuleContext<Cobol85Parser::IntegerLiteralContext>(0);
}

tree::TerminalNode* Cobol85Parser::RerunEveryRecordsContext::RECORDS() {
  return getToken(Cobol85Parser::RECORDS, 0);
}


size_t Cobol85Parser::RerunEveryRecordsContext::getRuleIndex() const {
  return Cobol85Parser::RuleRerunEveryRecords;
}

void Cobol85Parser::RerunEveryRecordsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRerunEveryRecords(this);
}

void Cobol85Parser::RerunEveryRecordsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRerunEveryRecords(this);
}

Cobol85Parser::RerunEveryRecordsContext* Cobol85Parser::rerunEveryRecords() {
  RerunEveryRecordsContext *_localctx = _tracker.createInstance<RerunEveryRecordsContext>(_ctx, getState());
  enterRule(_localctx, 140, Cobol85Parser::RuleRerunEveryRecords);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1913);
    integerLiteral();
    setState(1914);
    match(Cobol85Parser::RECORDS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RerunEveryOfContext ------------------------------------------------------------------

Cobol85Parser::RerunEveryOfContext::RerunEveryOfContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> Cobol85Parser::RerunEveryOfContext::OF() {
  return getTokens(Cobol85Parser::OF);
}

tree::TerminalNode* Cobol85Parser::RerunEveryOfContext::OF(size_t i) {
  return getToken(Cobol85Parser::OF, i);
}

Cobol85Parser::FileNameContext* Cobol85Parser::RerunEveryOfContext::fileName() {
  return getRuleContext<Cobol85Parser::FileNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::RerunEveryOfContext::REEL() {
  return getToken(Cobol85Parser::REEL, 0);
}

tree::TerminalNode* Cobol85Parser::RerunEveryOfContext::UNIT() {
  return getToken(Cobol85Parser::UNIT, 0);
}

tree::TerminalNode* Cobol85Parser::RerunEveryOfContext::END() {
  return getToken(Cobol85Parser::END, 0);
}


size_t Cobol85Parser::RerunEveryOfContext::getRuleIndex() const {
  return Cobol85Parser::RuleRerunEveryOf;
}

void Cobol85Parser::RerunEveryOfContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRerunEveryOf(this);
}

void Cobol85Parser::RerunEveryOfContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRerunEveryOf(this);
}

Cobol85Parser::RerunEveryOfContext* Cobol85Parser::rerunEveryOf() {
  RerunEveryOfContext *_localctx = _tracker.createInstance<RerunEveryOfContext>(_ctx, getState());
  enterRule(_localctx, 142, Cobol85Parser::RuleRerunEveryOf);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1917);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::END) {
      setState(1916);
      match(Cobol85Parser::END);
    }
    setState(1920);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::OF) {
      setState(1919);
      match(Cobol85Parser::OF);
    }
    setState(1922);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::REEL || _la == Cobol85Parser::UNIT)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(1923);
    match(Cobol85Parser::OF);
    setState(1924);
    fileName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RerunEveryClockContext ------------------------------------------------------------------

Cobol85Parser::RerunEveryClockContext::RerunEveryClockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::IntegerLiteralContext* Cobol85Parser::RerunEveryClockContext::integerLiteral() {
  return getRuleContext<Cobol85Parser::IntegerLiteralContext>(0);
}

tree::TerminalNode* Cobol85Parser::RerunEveryClockContext::CLOCK_UNITS() {
  return getToken(Cobol85Parser::CLOCK_UNITS, 0);
}


size_t Cobol85Parser::RerunEveryClockContext::getRuleIndex() const {
  return Cobol85Parser::RuleRerunEveryClock;
}

void Cobol85Parser::RerunEveryClockContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRerunEveryClock(this);
}

void Cobol85Parser::RerunEveryClockContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRerunEveryClock(this);
}

Cobol85Parser::RerunEveryClockContext* Cobol85Parser::rerunEveryClock() {
  RerunEveryClockContext *_localctx = _tracker.createInstance<RerunEveryClockContext>(_ctx, getState());
  enterRule(_localctx, 144, Cobol85Parser::RuleRerunEveryClock);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1926);
    integerLiteral();
    setState(1928);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::CLOCK_UNITS) {
      setState(1927);
      match(Cobol85Parser::CLOCK_UNITS);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SameClauseContext ------------------------------------------------------------------

Cobol85Parser::SameClauseContext::SameClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::SameClauseContext::SAME() {
  return getToken(Cobol85Parser::SAME, 0);
}

tree::TerminalNode* Cobol85Parser::SameClauseContext::AREA() {
  return getToken(Cobol85Parser::AREA, 0);
}

tree::TerminalNode* Cobol85Parser::SameClauseContext::FOR() {
  return getToken(Cobol85Parser::FOR, 0);
}

std::vector<Cobol85Parser::FileNameContext *> Cobol85Parser::SameClauseContext::fileName() {
  return getRuleContexts<Cobol85Parser::FileNameContext>();
}

Cobol85Parser::FileNameContext* Cobol85Parser::SameClauseContext::fileName(size_t i) {
  return getRuleContext<Cobol85Parser::FileNameContext>(i);
}

tree::TerminalNode* Cobol85Parser::SameClauseContext::RECORD() {
  return getToken(Cobol85Parser::RECORD, 0);
}

tree::TerminalNode* Cobol85Parser::SameClauseContext::SORT() {
  return getToken(Cobol85Parser::SORT, 0);
}

tree::TerminalNode* Cobol85Parser::SameClauseContext::SORT_MERGE() {
  return getToken(Cobol85Parser::SORT_MERGE, 0);
}


size_t Cobol85Parser::SameClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleSameClause;
}

void Cobol85Parser::SameClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSameClause(this);
}

void Cobol85Parser::SameClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSameClause(this);
}

Cobol85Parser::SameClauseContext* Cobol85Parser::sameClause() {
  SameClauseContext *_localctx = _tracker.createInstance<SameClauseContext>(_ctx, getState());
  enterRule(_localctx, 146, Cobol85Parser::RuleSameClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1930);
    match(Cobol85Parser::SAME);
    setState(1932);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::RECORD

    || _la == Cobol85Parser::SORT || _la == Cobol85Parser::SORT_MERGE) {
      setState(1931);
      _la = _input->LA(1);
      if (!(_la == Cobol85Parser::RECORD

      || _la == Cobol85Parser::SORT || _la == Cobol85Parser::SORT_MERGE)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(1935);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::AREA) {
      setState(1934);
      match(Cobol85Parser::AREA);
    }
    setState(1938);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::FOR) {
      setState(1937);
      match(Cobol85Parser::FOR);
    }
    setState(1941); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1940);
              fileName();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1943); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 159, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MultipleFileClauseContext ------------------------------------------------------------------

Cobol85Parser::MultipleFileClauseContext::MultipleFileClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::MultipleFileClauseContext::MULTIPLE() {
  return getToken(Cobol85Parser::MULTIPLE, 0);
}

tree::TerminalNode* Cobol85Parser::MultipleFileClauseContext::FILE() {
  return getToken(Cobol85Parser::FILE, 0);
}

tree::TerminalNode* Cobol85Parser::MultipleFileClauseContext::TAPE() {
  return getToken(Cobol85Parser::TAPE, 0);
}

tree::TerminalNode* Cobol85Parser::MultipleFileClauseContext::CONTAINS() {
  return getToken(Cobol85Parser::CONTAINS, 0);
}

std::vector<Cobol85Parser::MultipleFilePositionContext *> Cobol85Parser::MultipleFileClauseContext::multipleFilePosition() {
  return getRuleContexts<Cobol85Parser::MultipleFilePositionContext>();
}

Cobol85Parser::MultipleFilePositionContext* Cobol85Parser::MultipleFileClauseContext::multipleFilePosition(size_t i) {
  return getRuleContext<Cobol85Parser::MultipleFilePositionContext>(i);
}


size_t Cobol85Parser::MultipleFileClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleMultipleFileClause;
}

void Cobol85Parser::MultipleFileClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMultipleFileClause(this);
}

void Cobol85Parser::MultipleFileClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMultipleFileClause(this);
}

Cobol85Parser::MultipleFileClauseContext* Cobol85Parser::multipleFileClause() {
  MultipleFileClauseContext *_localctx = _tracker.createInstance<MultipleFileClauseContext>(_ctx, getState());
  enterRule(_localctx, 148, Cobol85Parser::RuleMultipleFileClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1945);
    match(Cobol85Parser::MULTIPLE);
    setState(1946);
    match(Cobol85Parser::FILE);
    setState(1948);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::TAPE) {
      setState(1947);
      match(Cobol85Parser::TAPE);
    }
    setState(1951);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::CONTAINS) {
      setState(1950);
      match(Cobol85Parser::CONTAINS);
    }
    setState(1954); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1953);
              multipleFilePosition();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1956); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 162, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MultipleFilePositionContext ------------------------------------------------------------------

Cobol85Parser::MultipleFilePositionContext::MultipleFilePositionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::FileNameContext* Cobol85Parser::MultipleFilePositionContext::fileName() {
  return getRuleContext<Cobol85Parser::FileNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::MultipleFilePositionContext::POSITION() {
  return getToken(Cobol85Parser::POSITION, 0);
}

Cobol85Parser::IntegerLiteralContext* Cobol85Parser::MultipleFilePositionContext::integerLiteral() {
  return getRuleContext<Cobol85Parser::IntegerLiteralContext>(0);
}


size_t Cobol85Parser::MultipleFilePositionContext::getRuleIndex() const {
  return Cobol85Parser::RuleMultipleFilePosition;
}

void Cobol85Parser::MultipleFilePositionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMultipleFilePosition(this);
}

void Cobol85Parser::MultipleFilePositionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMultipleFilePosition(this);
}

Cobol85Parser::MultipleFilePositionContext* Cobol85Parser::multipleFilePosition() {
  MultipleFilePositionContext *_localctx = _tracker.createInstance<MultipleFilePositionContext>(_ctx, getState());
  enterRule(_localctx, 150, Cobol85Parser::RuleMultipleFilePosition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1958);
    fileName();
    setState(1961);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::POSITION) {
      setState(1959);
      match(Cobol85Parser::POSITION);
      setState(1960);
      integerLiteral();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CommitmentControlClauseContext ------------------------------------------------------------------

Cobol85Parser::CommitmentControlClauseContext::CommitmentControlClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::CommitmentControlClauseContext::COMMITMENT() {
  return getToken(Cobol85Parser::COMMITMENT, 0);
}

tree::TerminalNode* Cobol85Parser::CommitmentControlClauseContext::CONTROL() {
  return getToken(Cobol85Parser::CONTROL, 0);
}

Cobol85Parser::FileNameContext* Cobol85Parser::CommitmentControlClauseContext::fileName() {
  return getRuleContext<Cobol85Parser::FileNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::CommitmentControlClauseContext::FOR() {
  return getToken(Cobol85Parser::FOR, 0);
}


size_t Cobol85Parser::CommitmentControlClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleCommitmentControlClause;
}

void Cobol85Parser::CommitmentControlClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCommitmentControlClause(this);
}

void Cobol85Parser::CommitmentControlClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCommitmentControlClause(this);
}

Cobol85Parser::CommitmentControlClauseContext* Cobol85Parser::commitmentControlClause() {
  CommitmentControlClauseContext *_localctx = _tracker.createInstance<CommitmentControlClauseContext>(_ctx, getState());
  enterRule(_localctx, 152, Cobol85Parser::RuleCommitmentControlClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1963);
    match(Cobol85Parser::COMMITMENT);
    setState(1964);
    match(Cobol85Parser::CONTROL);
    setState(1966);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::FOR) {
      setState(1965);
      match(Cobol85Parser::FOR);
    }
    setState(1968);
    fileName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DataDivisionContext ------------------------------------------------------------------

Cobol85Parser::DataDivisionContext::DataDivisionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::DataDivisionContext::DATA() {
  return getToken(Cobol85Parser::DATA, 0);
}

tree::TerminalNode* Cobol85Parser::DataDivisionContext::DIVISION() {
  return getToken(Cobol85Parser::DIVISION, 0);
}

tree::TerminalNode* Cobol85Parser::DataDivisionContext::DOT_FS() {
  return getToken(Cobol85Parser::DOT_FS, 0);
}

std::vector<Cobol85Parser::DataDivisionSectionContext *> Cobol85Parser::DataDivisionContext::dataDivisionSection() {
  return getRuleContexts<Cobol85Parser::DataDivisionSectionContext>();
}

Cobol85Parser::DataDivisionSectionContext* Cobol85Parser::DataDivisionContext::dataDivisionSection(size_t i) {
  return getRuleContext<Cobol85Parser::DataDivisionSectionContext>(i);
}


size_t Cobol85Parser::DataDivisionContext::getRuleIndex() const {
  return Cobol85Parser::RuleDataDivision;
}

void Cobol85Parser::DataDivisionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDataDivision(this);
}

void Cobol85Parser::DataDivisionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDataDivision(this);
}

Cobol85Parser::DataDivisionContext* Cobol85Parser::dataDivision() {
  DataDivisionContext *_localctx = _tracker.createInstance<DataDivisionContext>(_ctx, getState());
  enterRule(_localctx, 154, Cobol85Parser::RuleDataDivision);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1970);
    match(Cobol85Parser::DATA);
    setState(1971);
    match(Cobol85Parser::DIVISION);
    setState(1972);
    match(Cobol85Parser::DOT_FS);
    setState(1976);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Cobol85Parser::COMMUNICATION

    || _la == Cobol85Parser::DATA_BASE || _la == Cobol85Parser::FILE || _la == Cobol85Parser::LINKAGE

    || _la == Cobol85Parser::LOCAL_STORAGE || ((((_la - 363) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 363)) & 9007203549708289) != 0) || _la == Cobol85Parser::WORKING_STORAGE) {
      setState(1973);
      dataDivisionSection();
      setState(1978);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DataDivisionSectionContext ------------------------------------------------------------------

Cobol85Parser::DataDivisionSectionContext::DataDivisionSectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::FileSectionContext* Cobol85Parser::DataDivisionSectionContext::fileSection() {
  return getRuleContext<Cobol85Parser::FileSectionContext>(0);
}

Cobol85Parser::DataBaseSectionContext* Cobol85Parser::DataDivisionSectionContext::dataBaseSection() {
  return getRuleContext<Cobol85Parser::DataBaseSectionContext>(0);
}

Cobol85Parser::WorkingStorageSectionContext* Cobol85Parser::DataDivisionSectionContext::workingStorageSection() {
  return getRuleContext<Cobol85Parser::WorkingStorageSectionContext>(0);
}

Cobol85Parser::LinkageSectionContext* Cobol85Parser::DataDivisionSectionContext::linkageSection() {
  return getRuleContext<Cobol85Parser::LinkageSectionContext>(0);
}

Cobol85Parser::CommunicationSectionContext* Cobol85Parser::DataDivisionSectionContext::communicationSection() {
  return getRuleContext<Cobol85Parser::CommunicationSectionContext>(0);
}

Cobol85Parser::LocalStorageSectionContext* Cobol85Parser::DataDivisionSectionContext::localStorageSection() {
  return getRuleContext<Cobol85Parser::LocalStorageSectionContext>(0);
}

Cobol85Parser::ScreenSectionContext* Cobol85Parser::DataDivisionSectionContext::screenSection() {
  return getRuleContext<Cobol85Parser::ScreenSectionContext>(0);
}

Cobol85Parser::ReportSectionContext* Cobol85Parser::DataDivisionSectionContext::reportSection() {
  return getRuleContext<Cobol85Parser::ReportSectionContext>(0);
}

Cobol85Parser::ProgramLibrarySectionContext* Cobol85Parser::DataDivisionSectionContext::programLibrarySection() {
  return getRuleContext<Cobol85Parser::ProgramLibrarySectionContext>(0);
}


size_t Cobol85Parser::DataDivisionSectionContext::getRuleIndex() const {
  return Cobol85Parser::RuleDataDivisionSection;
}

void Cobol85Parser::DataDivisionSectionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDataDivisionSection(this);
}

void Cobol85Parser::DataDivisionSectionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDataDivisionSection(this);
}

Cobol85Parser::DataDivisionSectionContext* Cobol85Parser::dataDivisionSection() {
  DataDivisionSectionContext *_localctx = _tracker.createInstance<DataDivisionSectionContext>(_ctx, getState());
  enterRule(_localctx, 156, Cobol85Parser::RuleDataDivisionSection);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1988);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Cobol85Parser::FILE: {
        enterOuterAlt(_localctx, 1);
        setState(1979);
        fileSection();
        break;
      }

      case Cobol85Parser::DATA_BASE: {
        enterOuterAlt(_localctx, 2);
        setState(1980);
        dataBaseSection();
        break;
      }

      case Cobol85Parser::WORKING_STORAGE: {
        enterOuterAlt(_localctx, 3);
        setState(1981);
        workingStorageSection();
        break;
      }

      case Cobol85Parser::LINKAGE: {
        enterOuterAlt(_localctx, 4);
        setState(1982);
        linkageSection();
        break;
      }

      case Cobol85Parser::COMMUNICATION: {
        enterOuterAlt(_localctx, 5);
        setState(1983);
        communicationSection();
        break;
      }

      case Cobol85Parser::LOCAL_STORAGE: {
        enterOuterAlt(_localctx, 6);
        setState(1984);
        localStorageSection();
        break;
      }

      case Cobol85Parser::SCREEN: {
        enterOuterAlt(_localctx, 7);
        setState(1985);
        screenSection();
        break;
      }

      case Cobol85Parser::REPORT: {
        enterOuterAlt(_localctx, 8);
        setState(1986);
        reportSection();
        break;
      }

      case Cobol85Parser::PROGRAM_LIBRARY: {
        enterOuterAlt(_localctx, 9);
        setState(1987);
        programLibrarySection();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FileSectionContext ------------------------------------------------------------------

Cobol85Parser::FileSectionContext::FileSectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::FileSectionContext::FILE() {
  return getToken(Cobol85Parser::FILE, 0);
}

tree::TerminalNode* Cobol85Parser::FileSectionContext::SECTION() {
  return getToken(Cobol85Parser::SECTION, 0);
}

tree::TerminalNode* Cobol85Parser::FileSectionContext::DOT_FS() {
  return getToken(Cobol85Parser::DOT_FS, 0);
}

std::vector<Cobol85Parser::FileDescriptionEntryContext *> Cobol85Parser::FileSectionContext::fileDescriptionEntry() {
  return getRuleContexts<Cobol85Parser::FileDescriptionEntryContext>();
}

Cobol85Parser::FileDescriptionEntryContext* Cobol85Parser::FileSectionContext::fileDescriptionEntry(size_t i) {
  return getRuleContext<Cobol85Parser::FileDescriptionEntryContext>(i);
}


size_t Cobol85Parser::FileSectionContext::getRuleIndex() const {
  return Cobol85Parser::RuleFileSection;
}

void Cobol85Parser::FileSectionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFileSection(this);
}

void Cobol85Parser::FileSectionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFileSection(this);
}

Cobol85Parser::FileSectionContext* Cobol85Parser::fileSection() {
  FileSectionContext *_localctx = _tracker.createInstance<FileSectionContext>(_ctx, getState());
  enterRule(_localctx, 158, Cobol85Parser::RuleFileSection);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1990);
    match(Cobol85Parser::FILE);
    setState(1991);
    match(Cobol85Parser::SECTION);
    setState(1992);
    match(Cobol85Parser::DOT_FS);
    setState(1996);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Cobol85Parser::FD || _la == Cobol85Parser::SD) {
      setState(1993);
      fileDescriptionEntry();
      setState(1998);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FileDescriptionEntryContext ------------------------------------------------------------------

Cobol85Parser::FileDescriptionEntryContext::FileDescriptionEntryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::FileNameContext* Cobol85Parser::FileDescriptionEntryContext::fileName() {
  return getRuleContext<Cobol85Parser::FileNameContext>(0);
}

std::vector<tree::TerminalNode *> Cobol85Parser::FileDescriptionEntryContext::DOT_FS() {
  return getTokens(Cobol85Parser::DOT_FS);
}

tree::TerminalNode* Cobol85Parser::FileDescriptionEntryContext::DOT_FS(size_t i) {
  return getToken(Cobol85Parser::DOT_FS, i);
}

tree::TerminalNode* Cobol85Parser::FileDescriptionEntryContext::FD() {
  return getToken(Cobol85Parser::FD, 0);
}

tree::TerminalNode* Cobol85Parser::FileDescriptionEntryContext::SD() {
  return getToken(Cobol85Parser::SD, 0);
}

std::vector<Cobol85Parser::FileDescriptionEntryClauseContext *> Cobol85Parser::FileDescriptionEntryContext::fileDescriptionEntryClause() {
  return getRuleContexts<Cobol85Parser::FileDescriptionEntryClauseContext>();
}

Cobol85Parser::FileDescriptionEntryClauseContext* Cobol85Parser::FileDescriptionEntryContext::fileDescriptionEntryClause(size_t i) {
  return getRuleContext<Cobol85Parser::FileDescriptionEntryClauseContext>(i);
}

std::vector<Cobol85Parser::DataDescriptionEntryContext *> Cobol85Parser::FileDescriptionEntryContext::dataDescriptionEntry() {
  return getRuleContexts<Cobol85Parser::DataDescriptionEntryContext>();
}

Cobol85Parser::DataDescriptionEntryContext* Cobol85Parser::FileDescriptionEntryContext::dataDescriptionEntry(size_t i) {
  return getRuleContext<Cobol85Parser::DataDescriptionEntryContext>(i);
}


size_t Cobol85Parser::FileDescriptionEntryContext::getRuleIndex() const {
  return Cobol85Parser::RuleFileDescriptionEntry;
}

void Cobol85Parser::FileDescriptionEntryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFileDescriptionEntry(this);
}

void Cobol85Parser::FileDescriptionEntryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFileDescriptionEntry(this);
}

Cobol85Parser::FileDescriptionEntryContext* Cobol85Parser::fileDescriptionEntry() {
  FileDescriptionEntryContext *_localctx = _tracker.createInstance<FileDescriptionEntryContext>(_ctx, getState());
  enterRule(_localctx, 160, Cobol85Parser::RuleFileDescriptionEntry);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1999);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::FD || _la == Cobol85Parser::SD)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(2000);
    fileName();
    setState(2007);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 169, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2002);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Cobol85Parser::DOT_FS) {
          setState(2001);
          match(Cobol85Parser::DOT_FS);
        }
        setState(2004);
        fileDescriptionEntryClause(); 
      }
      setState(2009);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 169, _ctx);
    }
    setState(2010);
    match(Cobol85Parser::DOT_FS);
    setState(2014);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 552) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 552)) & 527) != 0)) {
      setState(2011);
      dataDescriptionEntry();
      setState(2016);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FileDescriptionEntryClauseContext ------------------------------------------------------------------

Cobol85Parser::FileDescriptionEntryClauseContext::FileDescriptionEntryClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::ExternalClauseContext* Cobol85Parser::FileDescriptionEntryClauseContext::externalClause() {
  return getRuleContext<Cobol85Parser::ExternalClauseContext>(0);
}

Cobol85Parser::GlobalClauseContext* Cobol85Parser::FileDescriptionEntryClauseContext::globalClause() {
  return getRuleContext<Cobol85Parser::GlobalClauseContext>(0);
}

Cobol85Parser::BlockContainsClauseContext* Cobol85Parser::FileDescriptionEntryClauseContext::blockContainsClause() {
  return getRuleContext<Cobol85Parser::BlockContainsClauseContext>(0);
}

Cobol85Parser::RecordContainsClauseContext* Cobol85Parser::FileDescriptionEntryClauseContext::recordContainsClause() {
  return getRuleContext<Cobol85Parser::RecordContainsClauseContext>(0);
}

Cobol85Parser::LabelRecordsClauseContext* Cobol85Parser::FileDescriptionEntryClauseContext::labelRecordsClause() {
  return getRuleContext<Cobol85Parser::LabelRecordsClauseContext>(0);
}

Cobol85Parser::ValueOfClauseContext* Cobol85Parser::FileDescriptionEntryClauseContext::valueOfClause() {
  return getRuleContext<Cobol85Parser::ValueOfClauseContext>(0);
}

Cobol85Parser::DataRecordsClauseContext* Cobol85Parser::FileDescriptionEntryClauseContext::dataRecordsClause() {
  return getRuleContext<Cobol85Parser::DataRecordsClauseContext>(0);
}

Cobol85Parser::LinageClauseContext* Cobol85Parser::FileDescriptionEntryClauseContext::linageClause() {
  return getRuleContext<Cobol85Parser::LinageClauseContext>(0);
}

Cobol85Parser::CodeSetClauseContext* Cobol85Parser::FileDescriptionEntryClauseContext::codeSetClause() {
  return getRuleContext<Cobol85Parser::CodeSetClauseContext>(0);
}

Cobol85Parser::ReportClauseContext* Cobol85Parser::FileDescriptionEntryClauseContext::reportClause() {
  return getRuleContext<Cobol85Parser::ReportClauseContext>(0);
}

Cobol85Parser::RecordingModeClauseContext* Cobol85Parser::FileDescriptionEntryClauseContext::recordingModeClause() {
  return getRuleContext<Cobol85Parser::RecordingModeClauseContext>(0);
}


size_t Cobol85Parser::FileDescriptionEntryClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleFileDescriptionEntryClause;
}

void Cobol85Parser::FileDescriptionEntryClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFileDescriptionEntryClause(this);
}

void Cobol85Parser::FileDescriptionEntryClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFileDescriptionEntryClause(this);
}

Cobol85Parser::FileDescriptionEntryClauseContext* Cobol85Parser::fileDescriptionEntryClause() {
  FileDescriptionEntryClauseContext *_localctx = _tracker.createInstance<FileDescriptionEntryClauseContext>(_ctx, getState());
  enterRule(_localctx, 162, Cobol85Parser::RuleFileDescriptionEntryClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2028);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 171, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2017);
      externalClause();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2018);
      globalClause();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2019);
      blockContainsClause();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2020);
      recordContainsClause();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2021);
      labelRecordsClause();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(2022);
      valueOfClause();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(2023);
      dataRecordsClause();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(2024);
      linageClause();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(2025);
      codeSetClause();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(2026);
      reportClause();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(2027);
      recordingModeClause();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExternalClauseContext ------------------------------------------------------------------

Cobol85Parser::ExternalClauseContext::ExternalClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ExternalClauseContext::EXTERNAL() {
  return getToken(Cobol85Parser::EXTERNAL, 0);
}

tree::TerminalNode* Cobol85Parser::ExternalClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}


size_t Cobol85Parser::ExternalClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleExternalClause;
}

void Cobol85Parser::ExternalClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExternalClause(this);
}

void Cobol85Parser::ExternalClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExternalClause(this);
}

Cobol85Parser::ExternalClauseContext* Cobol85Parser::externalClause() {
  ExternalClauseContext *_localctx = _tracker.createInstance<ExternalClauseContext>(_ctx, getState());
  enterRule(_localctx, 164, Cobol85Parser::RuleExternalClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2031);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(2030);
      match(Cobol85Parser::IS);
    }
    setState(2033);
    match(Cobol85Parser::EXTERNAL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GlobalClauseContext ------------------------------------------------------------------

Cobol85Parser::GlobalClauseContext::GlobalClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::GlobalClauseContext::GLOBAL() {
  return getToken(Cobol85Parser::GLOBAL, 0);
}

tree::TerminalNode* Cobol85Parser::GlobalClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}


size_t Cobol85Parser::GlobalClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleGlobalClause;
}

void Cobol85Parser::GlobalClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGlobalClause(this);
}

void Cobol85Parser::GlobalClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGlobalClause(this);
}

Cobol85Parser::GlobalClauseContext* Cobol85Parser::globalClause() {
  GlobalClauseContext *_localctx = _tracker.createInstance<GlobalClauseContext>(_ctx, getState());
  enterRule(_localctx, 166, Cobol85Parser::RuleGlobalClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2036);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(2035);
      match(Cobol85Parser::IS);
    }
    setState(2038);
    match(Cobol85Parser::GLOBAL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlockContainsClauseContext ------------------------------------------------------------------

Cobol85Parser::BlockContainsClauseContext::BlockContainsClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::BlockContainsClauseContext::BLOCK() {
  return getToken(Cobol85Parser::BLOCK, 0);
}

Cobol85Parser::IntegerLiteralContext* Cobol85Parser::BlockContainsClauseContext::integerLiteral() {
  return getRuleContext<Cobol85Parser::IntegerLiteralContext>(0);
}

tree::TerminalNode* Cobol85Parser::BlockContainsClauseContext::CONTAINS() {
  return getToken(Cobol85Parser::CONTAINS, 0);
}

Cobol85Parser::BlockContainsToContext* Cobol85Parser::BlockContainsClauseContext::blockContainsTo() {
  return getRuleContext<Cobol85Parser::BlockContainsToContext>(0);
}

tree::TerminalNode* Cobol85Parser::BlockContainsClauseContext::RECORDS() {
  return getToken(Cobol85Parser::RECORDS, 0);
}

tree::TerminalNode* Cobol85Parser::BlockContainsClauseContext::CHARACTERS() {
  return getToken(Cobol85Parser::CHARACTERS, 0);
}


size_t Cobol85Parser::BlockContainsClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleBlockContainsClause;
}

void Cobol85Parser::BlockContainsClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBlockContainsClause(this);
}

void Cobol85Parser::BlockContainsClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBlockContainsClause(this);
}

Cobol85Parser::BlockContainsClauseContext* Cobol85Parser::blockContainsClause() {
  BlockContainsClauseContext *_localctx = _tracker.createInstance<BlockContainsClauseContext>(_ctx, getState());
  enterRule(_localctx, 168, Cobol85Parser::RuleBlockContainsClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2040);
    match(Cobol85Parser::BLOCK);
    setState(2042);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::CONTAINS) {
      setState(2041);
      match(Cobol85Parser::CONTAINS);
    }
    setState(2044);
    integerLiteral();
    setState(2046);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::TO) {
      setState(2045);
      blockContainsTo();
    }
    setState(2049);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::CHARACTERS || _la == Cobol85Parser::RECORDS) {
      setState(2048);
      _la = _input->LA(1);
      if (!(_la == Cobol85Parser::CHARACTERS || _la == Cobol85Parser::RECORDS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlockContainsToContext ------------------------------------------------------------------

Cobol85Parser::BlockContainsToContext::BlockContainsToContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::BlockContainsToContext::TO() {
  return getToken(Cobol85Parser::TO, 0);
}

Cobol85Parser::IntegerLiteralContext* Cobol85Parser::BlockContainsToContext::integerLiteral() {
  return getRuleContext<Cobol85Parser::IntegerLiteralContext>(0);
}


size_t Cobol85Parser::BlockContainsToContext::getRuleIndex() const {
  return Cobol85Parser::RuleBlockContainsTo;
}

void Cobol85Parser::BlockContainsToContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBlockContainsTo(this);
}

void Cobol85Parser::BlockContainsToContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBlockContainsTo(this);
}

Cobol85Parser::BlockContainsToContext* Cobol85Parser::blockContainsTo() {
  BlockContainsToContext *_localctx = _tracker.createInstance<BlockContainsToContext>(_ctx, getState());
  enterRule(_localctx, 170, Cobol85Parser::RuleBlockContainsTo);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2051);
    match(Cobol85Parser::TO);
    setState(2052);
    integerLiteral();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RecordContainsClauseContext ------------------------------------------------------------------

Cobol85Parser::RecordContainsClauseContext::RecordContainsClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::RecordContainsClauseContext::RECORD() {
  return getToken(Cobol85Parser::RECORD, 0);
}

Cobol85Parser::RecordContainsClauseFormat1Context* Cobol85Parser::RecordContainsClauseContext::recordContainsClauseFormat1() {
  return getRuleContext<Cobol85Parser::RecordContainsClauseFormat1Context>(0);
}

Cobol85Parser::RecordContainsClauseFormat2Context* Cobol85Parser::RecordContainsClauseContext::recordContainsClauseFormat2() {
  return getRuleContext<Cobol85Parser::RecordContainsClauseFormat2Context>(0);
}

Cobol85Parser::RecordContainsClauseFormat3Context* Cobol85Parser::RecordContainsClauseContext::recordContainsClauseFormat3() {
  return getRuleContext<Cobol85Parser::RecordContainsClauseFormat3Context>(0);
}


size_t Cobol85Parser::RecordContainsClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleRecordContainsClause;
}

void Cobol85Parser::RecordContainsClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRecordContainsClause(this);
}

void Cobol85Parser::RecordContainsClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRecordContainsClause(this);
}

Cobol85Parser::RecordContainsClauseContext* Cobol85Parser::recordContainsClause() {
  RecordContainsClauseContext *_localctx = _tracker.createInstance<RecordContainsClauseContext>(_ctx, getState());
  enterRule(_localctx, 172, Cobol85Parser::RuleRecordContainsClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2054);
    match(Cobol85Parser::RECORD);
    setState(2058);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 177, _ctx)) {
    case 1: {
      setState(2055);
      recordContainsClauseFormat1();
      break;
    }

    case 2: {
      setState(2056);
      recordContainsClauseFormat2();
      break;
    }

    case 3: {
      setState(2057);
      recordContainsClauseFormat3();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RecordContainsClauseFormat1Context ------------------------------------------------------------------

Cobol85Parser::RecordContainsClauseFormat1Context::RecordContainsClauseFormat1Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::IntegerLiteralContext* Cobol85Parser::RecordContainsClauseFormat1Context::integerLiteral() {
  return getRuleContext<Cobol85Parser::IntegerLiteralContext>(0);
}

tree::TerminalNode* Cobol85Parser::RecordContainsClauseFormat1Context::CONTAINS() {
  return getToken(Cobol85Parser::CONTAINS, 0);
}

tree::TerminalNode* Cobol85Parser::RecordContainsClauseFormat1Context::CHARACTERS() {
  return getToken(Cobol85Parser::CHARACTERS, 0);
}


size_t Cobol85Parser::RecordContainsClauseFormat1Context::getRuleIndex() const {
  return Cobol85Parser::RuleRecordContainsClauseFormat1;
}

void Cobol85Parser::RecordContainsClauseFormat1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRecordContainsClauseFormat1(this);
}

void Cobol85Parser::RecordContainsClauseFormat1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRecordContainsClauseFormat1(this);
}

Cobol85Parser::RecordContainsClauseFormat1Context* Cobol85Parser::recordContainsClauseFormat1() {
  RecordContainsClauseFormat1Context *_localctx = _tracker.createInstance<RecordContainsClauseFormat1Context>(_ctx, getState());
  enterRule(_localctx, 174, Cobol85Parser::RuleRecordContainsClauseFormat1);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2061);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::CONTAINS) {
      setState(2060);
      match(Cobol85Parser::CONTAINS);
    }
    setState(2063);
    integerLiteral();
    setState(2065);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::CHARACTERS) {
      setState(2064);
      match(Cobol85Parser::CHARACTERS);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RecordContainsClauseFormat2Context ------------------------------------------------------------------

Cobol85Parser::RecordContainsClauseFormat2Context::RecordContainsClauseFormat2Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::RecordContainsClauseFormat2Context::VARYING() {
  return getToken(Cobol85Parser::VARYING, 0);
}

tree::TerminalNode* Cobol85Parser::RecordContainsClauseFormat2Context::IS() {
  return getToken(Cobol85Parser::IS, 0);
}

tree::TerminalNode* Cobol85Parser::RecordContainsClauseFormat2Context::IN() {
  return getToken(Cobol85Parser::IN, 0);
}

tree::TerminalNode* Cobol85Parser::RecordContainsClauseFormat2Context::SIZE() {
  return getToken(Cobol85Parser::SIZE, 0);
}

Cobol85Parser::IntegerLiteralContext* Cobol85Parser::RecordContainsClauseFormat2Context::integerLiteral() {
  return getRuleContext<Cobol85Parser::IntegerLiteralContext>(0);
}

tree::TerminalNode* Cobol85Parser::RecordContainsClauseFormat2Context::DEPENDING() {
  return getToken(Cobol85Parser::DEPENDING, 0);
}

Cobol85Parser::QualifiedDataNameContext* Cobol85Parser::RecordContainsClauseFormat2Context::qualifiedDataName() {
  return getRuleContext<Cobol85Parser::QualifiedDataNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::RecordContainsClauseFormat2Context::FROM() {
  return getToken(Cobol85Parser::FROM, 0);
}

Cobol85Parser::RecordContainsToContext* Cobol85Parser::RecordContainsClauseFormat2Context::recordContainsTo() {
  return getRuleContext<Cobol85Parser::RecordContainsToContext>(0);
}

tree::TerminalNode* Cobol85Parser::RecordContainsClauseFormat2Context::CHARACTERS() {
  return getToken(Cobol85Parser::CHARACTERS, 0);
}

tree::TerminalNode* Cobol85Parser::RecordContainsClauseFormat2Context::ON() {
  return getToken(Cobol85Parser::ON, 0);
}


size_t Cobol85Parser::RecordContainsClauseFormat2Context::getRuleIndex() const {
  return Cobol85Parser::RuleRecordContainsClauseFormat2;
}

void Cobol85Parser::RecordContainsClauseFormat2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRecordContainsClauseFormat2(this);
}

void Cobol85Parser::RecordContainsClauseFormat2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRecordContainsClauseFormat2(this);
}

Cobol85Parser::RecordContainsClauseFormat2Context* Cobol85Parser::recordContainsClauseFormat2() {
  RecordContainsClauseFormat2Context *_localctx = _tracker.createInstance<RecordContainsClauseFormat2Context>(_ctx, getState());
  enterRule(_localctx, 176, Cobol85Parser::RuleRecordContainsClauseFormat2);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2068);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(2067);
      match(Cobol85Parser::IS);
    }
    setState(2070);
    match(Cobol85Parser::VARYING);
    setState(2072);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IN) {
      setState(2071);
      match(Cobol85Parser::IN);
    }
    setState(2075);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::SIZE) {
      setState(2074);
      match(Cobol85Parser::SIZE);
    }
    setState(2087);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::FROM || ((((_la - 552) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 552)) & 15) != 0)) {
      setState(2078);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Cobol85Parser::FROM) {
        setState(2077);
        match(Cobol85Parser::FROM);
      }
      setState(2080);
      integerLiteral();
      setState(2082);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Cobol85Parser::TO) {
        setState(2081);
        recordContainsTo();
      }
      setState(2085);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Cobol85Parser::CHARACTERS) {
        setState(2084);
        match(Cobol85Parser::CHARACTERS);
      }
    }
    setState(2094);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::DEPENDING) {
      setState(2089);
      match(Cobol85Parser::DEPENDING);
      setState(2091);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Cobol85Parser::ON) {
        setState(2090);
        match(Cobol85Parser::ON);
      }
      setState(2093);
      qualifiedDataName();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RecordContainsClauseFormat3Context ------------------------------------------------------------------

Cobol85Parser::RecordContainsClauseFormat3Context::RecordContainsClauseFormat3Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::IntegerLiteralContext* Cobol85Parser::RecordContainsClauseFormat3Context::integerLiteral() {
  return getRuleContext<Cobol85Parser::IntegerLiteralContext>(0);
}

Cobol85Parser::RecordContainsToContext* Cobol85Parser::RecordContainsClauseFormat3Context::recordContainsTo() {
  return getRuleContext<Cobol85Parser::RecordContainsToContext>(0);
}

tree::TerminalNode* Cobol85Parser::RecordContainsClauseFormat3Context::CONTAINS() {
  return getToken(Cobol85Parser::CONTAINS, 0);
}

tree::TerminalNode* Cobol85Parser::RecordContainsClauseFormat3Context::CHARACTERS() {
  return getToken(Cobol85Parser::CHARACTERS, 0);
}


size_t Cobol85Parser::RecordContainsClauseFormat3Context::getRuleIndex() const {
  return Cobol85Parser::RuleRecordContainsClauseFormat3;
}

void Cobol85Parser::RecordContainsClauseFormat3Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRecordContainsClauseFormat3(this);
}

void Cobol85Parser::RecordContainsClauseFormat3Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRecordContainsClauseFormat3(this);
}

Cobol85Parser::RecordContainsClauseFormat3Context* Cobol85Parser::recordContainsClauseFormat3() {
  RecordContainsClauseFormat3Context *_localctx = _tracker.createInstance<RecordContainsClauseFormat3Context>(_ctx, getState());
  enterRule(_localctx, 178, Cobol85Parser::RuleRecordContainsClauseFormat3);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2097);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::CONTAINS) {
      setState(2096);
      match(Cobol85Parser::CONTAINS);
    }
    setState(2099);
    integerLiteral();
    setState(2100);
    recordContainsTo();
    setState(2102);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::CHARACTERS) {
      setState(2101);
      match(Cobol85Parser::CHARACTERS);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RecordContainsToContext ------------------------------------------------------------------

Cobol85Parser::RecordContainsToContext::RecordContainsToContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::RecordContainsToContext::TO() {
  return getToken(Cobol85Parser::TO, 0);
}

Cobol85Parser::IntegerLiteralContext* Cobol85Parser::RecordContainsToContext::integerLiteral() {
  return getRuleContext<Cobol85Parser::IntegerLiteralContext>(0);
}


size_t Cobol85Parser::RecordContainsToContext::getRuleIndex() const {
  return Cobol85Parser::RuleRecordContainsTo;
}

void Cobol85Parser::RecordContainsToContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRecordContainsTo(this);
}

void Cobol85Parser::RecordContainsToContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRecordContainsTo(this);
}

Cobol85Parser::RecordContainsToContext* Cobol85Parser::recordContainsTo() {
  RecordContainsToContext *_localctx = _tracker.createInstance<RecordContainsToContext>(_ctx, getState());
  enterRule(_localctx, 180, Cobol85Parser::RuleRecordContainsTo);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2104);
    match(Cobol85Parser::TO);
    setState(2105);
    integerLiteral();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LabelRecordsClauseContext ------------------------------------------------------------------

Cobol85Parser::LabelRecordsClauseContext::LabelRecordsClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::LabelRecordsClauseContext::LABEL() {
  return getToken(Cobol85Parser::LABEL, 0);
}

tree::TerminalNode* Cobol85Parser::LabelRecordsClauseContext::RECORD() {
  return getToken(Cobol85Parser::RECORD, 0);
}

tree::TerminalNode* Cobol85Parser::LabelRecordsClauseContext::RECORDS() {
  return getToken(Cobol85Parser::RECORDS, 0);
}

tree::TerminalNode* Cobol85Parser::LabelRecordsClauseContext::OMITTED() {
  return getToken(Cobol85Parser::OMITTED, 0);
}

tree::TerminalNode* Cobol85Parser::LabelRecordsClauseContext::STANDARD() {
  return getToken(Cobol85Parser::STANDARD, 0);
}

tree::TerminalNode* Cobol85Parser::LabelRecordsClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}

tree::TerminalNode* Cobol85Parser::LabelRecordsClauseContext::ARE() {
  return getToken(Cobol85Parser::ARE, 0);
}

std::vector<Cobol85Parser::DataNameContext *> Cobol85Parser::LabelRecordsClauseContext::dataName() {
  return getRuleContexts<Cobol85Parser::DataNameContext>();
}

Cobol85Parser::DataNameContext* Cobol85Parser::LabelRecordsClauseContext::dataName(size_t i) {
  return getRuleContext<Cobol85Parser::DataNameContext>(i);
}


size_t Cobol85Parser::LabelRecordsClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleLabelRecordsClause;
}

void Cobol85Parser::LabelRecordsClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLabelRecordsClause(this);
}

void Cobol85Parser::LabelRecordsClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLabelRecordsClause(this);
}

Cobol85Parser::LabelRecordsClauseContext* Cobol85Parser::labelRecordsClause() {
  LabelRecordsClauseContext *_localctx = _tracker.createInstance<LabelRecordsClauseContext>(_ctx, getState());
  enterRule(_localctx, 182, Cobol85Parser::RuleLabelRecordsClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2107);
    match(Cobol85Parser::LABEL);
    setState(2116);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Cobol85Parser::RECORD: {
        setState(2108);
        match(Cobol85Parser::RECORD);
        setState(2110);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Cobol85Parser::IS) {
          setState(2109);
          match(Cobol85Parser::IS);
        }
        break;
      }

      case Cobol85Parser::RECORDS: {
        setState(2112);
        match(Cobol85Parser::RECORDS);
        setState(2114);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Cobol85Parser::ARE) {
          setState(2113);
          match(Cobol85Parser::ARE);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(2125);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Cobol85Parser::OMITTED: {
        setState(2118);
        match(Cobol85Parser::OMITTED);
        break;
      }

      case Cobol85Parser::STANDARD: {
        setState(2119);
        match(Cobol85Parser::STANDARD);
        break;
      }

      case Cobol85Parser::ABORT:
      case Cobol85Parser::AS:
      case Cobol85Parser::ASCII:
      case Cobol85Parser::ASSOCIATED_DATA:
      case Cobol85Parser::ASSOCIATED_DATA_LENGTH:
      case Cobol85Parser::ATTRIBUTE:
      case Cobol85Parser::AUTO:
      case Cobol85Parser::AUTO_SKIP:
      case Cobol85Parser::BACKGROUND_COLOR:
      case Cobol85Parser::BACKGROUND_COLOUR:
      case Cobol85Parser::BEEP:
      case Cobol85Parser::BELL:
      case Cobol85Parser::BINARY:
      case Cobol85Parser::BIT:
      case Cobol85Parser::BLINK:
      case Cobol85Parser::BOUNDS:
      case Cobol85Parser::CAPABLE:
      case Cobol85Parser::CCSVERSION:
      case Cobol85Parser::CHANGED:
      case Cobol85Parser::CHANNEL:
      case Cobol85Parser::CLOSE_DISPOSITION:
      case Cobol85Parser::COBOL:
      case Cobol85Parser::COMMITMENT:
      case Cobol85Parser::CONTROL_POINT:
      case Cobol85Parser::CONVENTION:
      case Cobol85Parser::CRUNCH:
      case Cobol85Parser::CURSOR:
      case Cobol85Parser::DEFAULT:
      case Cobol85Parser::DEFAULT_DISPLAY:
      case Cobol85Parser::DEFINITION:
      case Cobol85Parser::DFHRESP:
      case Cobol85Parser::DFHVALUE:
      case Cobol85Parser::DISK:
      case Cobol85Parser::DONTCARE:
      case Cobol85Parser::DOUBLE:
      case Cobol85Parser::EBCDIC:
      case Cobol85Parser::EMPTY_CHECK:
      case Cobol85Parser::ENTER:
      case Cobol85Parser::ENTRY_PROCEDURE:
      case Cobol85Parser::ERASE:
      case Cobol85Parser::EOL:
      case Cobol85Parser::EOS:
      case Cobol85Parser::ESCAPE:
      case Cobol85Parser::EVENT:
      case Cobol85Parser::EXCLUSIVE:
      case Cobol85Parser::EXPORT:
      case Cobol85Parser::EXTENDED:
      case Cobol85Parser::FOREGROUND_COLOR:
      case Cobol85Parser::FOREGROUND_COLOUR:
      case Cobol85Parser::FULL:
      case Cobol85Parser::FUNCTIONNAME:
      case Cobol85Parser::FUNCTION_POINTER:
      case Cobol85Parser::GRID:
      case Cobol85Parser::HIGHLIGHT:
      case Cobol85Parser::IMPLICIT:
      case Cobol85Parser::IMPORT:
      case Cobol85Parser::INTEGER:
      case Cobol85Parser::KEPT:
      case Cobol85Parser::KEYBOARD:
      case Cobol85Parser::LANGUAGE:
      case Cobol85Parser::LB:
      case Cobol85Parser::LD:
      case Cobol85Parser::LEFTLINE:
      case Cobol85Parser::LENGTH_CHECK:
      case Cobol85Parser::LIBACCESS:
      case Cobol85Parser::LIBPARAMETER:
      case Cobol85Parser::LIBRARY:
      case Cobol85Parser::LIST:
      case Cobol85Parser::LOCAL:
      case Cobol85Parser::LONG_DATE:
      case Cobol85Parser::LONG_TIME:
      case Cobol85Parser::LOWER:
      case Cobol85Parser::LOWLIGHT:
      case Cobol85Parser::MMDDYYYY:
      case Cobol85Parser::NAMED:
      case Cobol85Parser::NATIONAL:
      case Cobol85Parser::NATIONAL_EDITED:
      case Cobol85Parser::NETWORK:
      case Cobol85Parser::NO_ECHO:
      case Cobol85Parser::NUMERIC_DATE:
      case Cobol85Parser::NUMERIC_TIME:
      case Cobol85Parser::ODT:
      case Cobol85Parser::ORDERLY:
      case Cobol85Parser::OVERLINE:
      case Cobol85Parser::OWN:
      case Cobol85Parser::PASSWORD:
      case Cobol85Parser::PORT:
      case Cobol85Parser::PRINTER:
      case Cobol85Parser::PRIVATE:
      case Cobol85Parser::PROCESS:
      case Cobol85Parser::PROGRAM:
      case Cobol85Parser::PROMPT:
      case Cobol85Parser::READER:
      case Cobol85Parser::REMOTE:
      case Cobol85Parser::REAL:
      case Cobol85Parser::RECEIVED:
      case Cobol85Parser::RECURSIVE:
      case Cobol85Parser::REF:
      case Cobol85Parser::REMOVE:
      case Cobol85Parser::REQUIRED:
      case Cobol85Parser::REVERSE_VIDEO:
      case Cobol85Parser::SAVE:
      case Cobol85Parser::SECURE:
      case Cobol85Parser::SHARED:
      case Cobol85Parser::SHAREDBYALL:
      case Cobol85Parser::SHAREDBYRUNUNIT:
      case Cobol85Parser::SHARING:
      case Cobol85Parser::SHORT_DATE:
      case Cobol85Parser::SYMBOL:
      case Cobol85Parser::TASK:
      case Cobol85Parser::THREAD:
      case Cobol85Parser::THREAD_LOCAL:
      case Cobol85Parser::TIMER:
      case Cobol85Parser::TODAYS_DATE:
      case Cobol85Parser::TODAYS_NAME:
      case Cobol85Parser::TRUNCATED:
      case Cobol85Parser::TYPEDEF:
      case Cobol85Parser::UNDERLINE:
      case Cobol85Parser::VIRTUAL:
      case Cobol85Parser::WAIT:
      case Cobol85Parser::YEAR:
      case Cobol85Parser::YYYYMMDD:
      case Cobol85Parser::YYYYDDD:
      case Cobol85Parser::ZERO_FILL:
      case Cobol85Parser::IDENTIFIER: {
        setState(2121); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(2120);
          dataName();
          setState(2123); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 3512999431135821826) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 68)) & 8070451912006173187) != 0) || ((((_la - 138) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 138)) & 5276573893883339531) != 0) || ((((_la - 202) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 202)) & -3098194965423761407) != 0) || ((((_la - 268) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 268)) & -9202532752178970507) != 0) || ((((_la - 336) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 336)) & 4647874433930428483) != 0) || ((((_la - 401) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 401)) & 84826144769) != 0) || ((((_la - 466) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 466)) & 103635575018455169) != 0) || _la == Cobol85Parser::IDENTIFIER);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ValueOfClauseContext ------------------------------------------------------------------

Cobol85Parser::ValueOfClauseContext::ValueOfClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ValueOfClauseContext::VALUE() {
  return getToken(Cobol85Parser::VALUE, 0);
}

tree::TerminalNode* Cobol85Parser::ValueOfClauseContext::OF() {
  return getToken(Cobol85Parser::OF, 0);
}

std::vector<Cobol85Parser::ValuePairContext *> Cobol85Parser::ValueOfClauseContext::valuePair() {
  return getRuleContexts<Cobol85Parser::ValuePairContext>();
}

Cobol85Parser::ValuePairContext* Cobol85Parser::ValueOfClauseContext::valuePair(size_t i) {
  return getRuleContext<Cobol85Parser::ValuePairContext>(i);
}


size_t Cobol85Parser::ValueOfClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleValueOfClause;
}

void Cobol85Parser::ValueOfClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterValueOfClause(this);
}

void Cobol85Parser::ValueOfClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitValueOfClause(this);
}

Cobol85Parser::ValueOfClauseContext* Cobol85Parser::valueOfClause() {
  ValueOfClauseContext *_localctx = _tracker.createInstance<ValueOfClauseContext>(_ctx, getState());
  enterRule(_localctx, 184, Cobol85Parser::RuleValueOfClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2127);
    match(Cobol85Parser::VALUE);
    setState(2128);
    match(Cobol85Parser::OF);
    setState(2130); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(2129);
      valuePair();
      setState(2132); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3512999431135821826) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 8070451912006173187) != 0) || ((((_la - 138) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 138)) & 5276573893883339531) != 0) || ((((_la - 202) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 202)) & -3098194965423761407) != 0) || ((((_la - 268) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 268)) & -9202532752178970507) != 0) || ((((_la - 336) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 336)) & 4647874433930428483) != 0) || ((((_la - 401) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 401)) & 84826144769) != 0) || ((((_la - 466) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 466)) & 103635575018455169) != 0) || _la == Cobol85Parser::IDENTIFIER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ValuePairContext ------------------------------------------------------------------

Cobol85Parser::ValuePairContext::ValuePairContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::SystemNameContext* Cobol85Parser::ValuePairContext::systemName() {
  return getRuleContext<Cobol85Parser::SystemNameContext>(0);
}

Cobol85Parser::QualifiedDataNameContext* Cobol85Parser::ValuePairContext::qualifiedDataName() {
  return getRuleContext<Cobol85Parser::QualifiedDataNameContext>(0);
}

Cobol85Parser::LiteralContext* Cobol85Parser::ValuePairContext::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}

tree::TerminalNode* Cobol85Parser::ValuePairContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}


size_t Cobol85Parser::ValuePairContext::getRuleIndex() const {
  return Cobol85Parser::RuleValuePair;
}

void Cobol85Parser::ValuePairContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterValuePair(this);
}

void Cobol85Parser::ValuePairContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitValuePair(this);
}

Cobol85Parser::ValuePairContext* Cobol85Parser::valuePair() {
  ValuePairContext *_localctx = _tracker.createInstance<ValuePairContext>(_ctx, getState());
  enterRule(_localctx, 186, Cobol85Parser::RuleValuePair);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2134);
    systemName();
    setState(2136);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(2135);
      match(Cobol85Parser::IS);
    }
    setState(2140);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 198, _ctx)) {
    case 1: {
      setState(2138);
      qualifiedDataName();
      break;
    }

    case 2: {
      setState(2139);
      literal();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DataRecordsClauseContext ------------------------------------------------------------------

Cobol85Parser::DataRecordsClauseContext::DataRecordsClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::DataRecordsClauseContext::DATA() {
  return getToken(Cobol85Parser::DATA, 0);
}

tree::TerminalNode* Cobol85Parser::DataRecordsClauseContext::RECORD() {
  return getToken(Cobol85Parser::RECORD, 0);
}

tree::TerminalNode* Cobol85Parser::DataRecordsClauseContext::RECORDS() {
  return getToken(Cobol85Parser::RECORDS, 0);
}

std::vector<Cobol85Parser::DataNameContext *> Cobol85Parser::DataRecordsClauseContext::dataName() {
  return getRuleContexts<Cobol85Parser::DataNameContext>();
}

Cobol85Parser::DataNameContext* Cobol85Parser::DataRecordsClauseContext::dataName(size_t i) {
  return getRuleContext<Cobol85Parser::DataNameContext>(i);
}

tree::TerminalNode* Cobol85Parser::DataRecordsClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}

tree::TerminalNode* Cobol85Parser::DataRecordsClauseContext::ARE() {
  return getToken(Cobol85Parser::ARE, 0);
}


size_t Cobol85Parser::DataRecordsClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleDataRecordsClause;
}

void Cobol85Parser::DataRecordsClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDataRecordsClause(this);
}

void Cobol85Parser::DataRecordsClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDataRecordsClause(this);
}

Cobol85Parser::DataRecordsClauseContext* Cobol85Parser::dataRecordsClause() {
  DataRecordsClauseContext *_localctx = _tracker.createInstance<DataRecordsClauseContext>(_ctx, getState());
  enterRule(_localctx, 188, Cobol85Parser::RuleDataRecordsClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2142);
    match(Cobol85Parser::DATA);
    setState(2151);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Cobol85Parser::RECORD: {
        setState(2143);
        match(Cobol85Parser::RECORD);
        setState(2145);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Cobol85Parser::IS) {
          setState(2144);
          match(Cobol85Parser::IS);
        }
        break;
      }

      case Cobol85Parser::RECORDS: {
        setState(2147);
        match(Cobol85Parser::RECORDS);
        setState(2149);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Cobol85Parser::ARE) {
          setState(2148);
          match(Cobol85Parser::ARE);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(2154); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(2153);
      dataName();
      setState(2156); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3512999431135821826) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 8070451912006173187) != 0) || ((((_la - 138) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 138)) & 5276573893883339531) != 0) || ((((_la - 202) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 202)) & -3098194965423761407) != 0) || ((((_la - 268) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 268)) & -9202532752178970507) != 0) || ((((_la - 336) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 336)) & 4647874433930428483) != 0) || ((((_la - 401) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 401)) & 84826144769) != 0) || ((((_la - 466) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 466)) & 103635575018455169) != 0) || _la == Cobol85Parser::IDENTIFIER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LinageClauseContext ------------------------------------------------------------------

Cobol85Parser::LinageClauseContext::LinageClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::LinageClauseContext::LINAGE() {
  return getToken(Cobol85Parser::LINAGE, 0);
}

Cobol85Parser::DataNameContext* Cobol85Parser::LinageClauseContext::dataName() {
  return getRuleContext<Cobol85Parser::DataNameContext>(0);
}

Cobol85Parser::IntegerLiteralContext* Cobol85Parser::LinageClauseContext::integerLiteral() {
  return getRuleContext<Cobol85Parser::IntegerLiteralContext>(0);
}

tree::TerminalNode* Cobol85Parser::LinageClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}

tree::TerminalNode* Cobol85Parser::LinageClauseContext::LINES() {
  return getToken(Cobol85Parser::LINES, 0);
}

std::vector<Cobol85Parser::LinageAtContext *> Cobol85Parser::LinageClauseContext::linageAt() {
  return getRuleContexts<Cobol85Parser::LinageAtContext>();
}

Cobol85Parser::LinageAtContext* Cobol85Parser::LinageClauseContext::linageAt(size_t i) {
  return getRuleContext<Cobol85Parser::LinageAtContext>(i);
}


size_t Cobol85Parser::LinageClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleLinageClause;
}

void Cobol85Parser::LinageClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLinageClause(this);
}

void Cobol85Parser::LinageClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLinageClause(this);
}

Cobol85Parser::LinageClauseContext* Cobol85Parser::linageClause() {
  LinageClauseContext *_localctx = _tracker.createInstance<LinageClauseContext>(_ctx, getState());
  enterRule(_localctx, 190, Cobol85Parser::RuleLinageClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2158);
    match(Cobol85Parser::LINAGE);
    setState(2160);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(2159);
      match(Cobol85Parser::IS);
    }
    setState(2164);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Cobol85Parser::ABORT:
      case Cobol85Parser::AS:
      case Cobol85Parser::ASCII:
      case Cobol85Parser::ASSOCIATED_DATA:
      case Cobol85Parser::ASSOCIATED_DATA_LENGTH:
      case Cobol85Parser::ATTRIBUTE:
      case Cobol85Parser::AUTO:
      case Cobol85Parser::AUTO_SKIP:
      case Cobol85Parser::BACKGROUND_COLOR:
      case Cobol85Parser::BACKGROUND_COLOUR:
      case Cobol85Parser::BEEP:
      case Cobol85Parser::BELL:
      case Cobol85Parser::BINARY:
      case Cobol85Parser::BIT:
      case Cobol85Parser::BLINK:
      case Cobol85Parser::BOUNDS:
      case Cobol85Parser::CAPABLE:
      case Cobol85Parser::CCSVERSION:
      case Cobol85Parser::CHANGED:
      case Cobol85Parser::CHANNEL:
      case Cobol85Parser::CLOSE_DISPOSITION:
      case Cobol85Parser::COBOL:
      case Cobol85Parser::COMMITMENT:
      case Cobol85Parser::CONTROL_POINT:
      case Cobol85Parser::CONVENTION:
      case Cobol85Parser::CRUNCH:
      case Cobol85Parser::CURSOR:
      case Cobol85Parser::DEFAULT:
      case Cobol85Parser::DEFAULT_DISPLAY:
      case Cobol85Parser::DEFINITION:
      case Cobol85Parser::DFHRESP:
      case Cobol85Parser::DFHVALUE:
      case Cobol85Parser::DISK:
      case Cobol85Parser::DONTCARE:
      case Cobol85Parser::DOUBLE:
      case Cobol85Parser::EBCDIC:
      case Cobol85Parser::EMPTY_CHECK:
      case Cobol85Parser::ENTER:
      case Cobol85Parser::ENTRY_PROCEDURE:
      case Cobol85Parser::ERASE:
      case Cobol85Parser::EOL:
      case Cobol85Parser::EOS:
      case Cobol85Parser::ESCAPE:
      case Cobol85Parser::EVENT:
      case Cobol85Parser::EXCLUSIVE:
      case Cobol85Parser::EXPORT:
      case Cobol85Parser::EXTENDED:
      case Cobol85Parser::FOREGROUND_COLOR:
      case Cobol85Parser::FOREGROUND_COLOUR:
      case Cobol85Parser::FULL:
      case Cobol85Parser::FUNCTIONNAME:
      case Cobol85Parser::FUNCTION_POINTER:
      case Cobol85Parser::GRID:
      case Cobol85Parser::HIGHLIGHT:
      case Cobol85Parser::IMPLICIT:
      case Cobol85Parser::IMPORT:
      case Cobol85Parser::INTEGER:
      case Cobol85Parser::KEPT:
      case Cobol85Parser::KEYBOARD:
      case Cobol85Parser::LANGUAGE:
      case Cobol85Parser::LB:
      case Cobol85Parser::LD:
      case Cobol85Parser::LEFTLINE:
      case Cobol85Parser::LENGTH_CHECK:
      case Cobol85Parser::LIBACCESS:
      case Cobol85Parser::LIBPARAMETER:
      case Cobol85Parser::LIBRARY:
      case Cobol85Parser::LIST:
      case Cobol85Parser::LOCAL:
      case Cobol85Parser::LONG_DATE:
      case Cobol85Parser::LONG_TIME:
      case Cobol85Parser::LOWER:
      case Cobol85Parser::LOWLIGHT:
      case Cobol85Parser::MMDDYYYY:
      case Cobol85Parser::NAMED:
      case Cobol85Parser::NATIONAL:
      case Cobol85Parser::NATIONAL_EDITED:
      case Cobol85Parser::NETWORK:
      case Cobol85Parser::NO_ECHO:
      case Cobol85Parser::NUMERIC_DATE:
      case Cobol85Parser::NUMERIC_TIME:
      case Cobol85Parser::ODT:
      case Cobol85Parser::ORDERLY:
      case Cobol85Parser::OVERLINE:
      case Cobol85Parser::OWN:
      case Cobol85Parser::PASSWORD:
      case Cobol85Parser::PORT:
      case Cobol85Parser::PRINTER:
      case Cobol85Parser::PRIVATE:
      case Cobol85Parser::PROCESS:
      case Cobol85Parser::PROGRAM:
      case Cobol85Parser::PROMPT:
      case Cobol85Parser::READER:
      case Cobol85Parser::REMOTE:
      case Cobol85Parser::REAL:
      case Cobol85Parser::RECEIVED:
      case Cobol85Parser::RECURSIVE:
      case Cobol85Parser::REF:
      case Cobol85Parser::REMOVE:
      case Cobol85Parser::REQUIRED:
      case Cobol85Parser::REVERSE_VIDEO:
      case Cobol85Parser::SAVE:
      case Cobol85Parser::SECURE:
      case Cobol85Parser::SHARED:
      case Cobol85Parser::SHAREDBYALL:
      case Cobol85Parser::SHAREDBYRUNUNIT:
      case Cobol85Parser::SHARING:
      case Cobol85Parser::SHORT_DATE:
      case Cobol85Parser::SYMBOL:
      case Cobol85Parser::TASK:
      case Cobol85Parser::THREAD:
      case Cobol85Parser::THREAD_LOCAL:
      case Cobol85Parser::TIMER:
      case Cobol85Parser::TODAYS_DATE:
      case Cobol85Parser::TODAYS_NAME:
      case Cobol85Parser::TRUNCATED:
      case Cobol85Parser::TYPEDEF:
      case Cobol85Parser::UNDERLINE:
      case Cobol85Parser::VIRTUAL:
      case Cobol85Parser::WAIT:
      case Cobol85Parser::YEAR:
      case Cobol85Parser::YYYYMMDD:
      case Cobol85Parser::YYYYDDD:
      case Cobol85Parser::ZERO_FILL:
      case Cobol85Parser::IDENTIFIER: {
        setState(2162);
        dataName();
        break;
      }

      case Cobol85Parser::LEVEL_NUMBER_66:
      case Cobol85Parser::LEVEL_NUMBER_77:
      case Cobol85Parser::LEVEL_NUMBER_88:
      case Cobol85Parser::INTEGERLITERAL: {
        setState(2163);
        integerLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(2167);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 205, _ctx)) {
    case 1: {
      setState(2166);
      match(Cobol85Parser::LINES);
      break;
    }

    default:
      break;
    }
    setState(2172);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Cobol85Parser::AT

    || _la == Cobol85Parser::BOTTOM || _la == Cobol85Parser::FOOTING || _la == Cobol85Parser::LINES || _la == Cobol85Parser::TOP

    || _la == Cobol85Parser::WITH) {
      setState(2169);
      linageAt();
      setState(2174);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LinageAtContext ------------------------------------------------------------------

Cobol85Parser::LinageAtContext::LinageAtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::LinageFootingAtContext* Cobol85Parser::LinageAtContext::linageFootingAt() {
  return getRuleContext<Cobol85Parser::LinageFootingAtContext>(0);
}

Cobol85Parser::LinageLinesAtTopContext* Cobol85Parser::LinageAtContext::linageLinesAtTop() {
  return getRuleContext<Cobol85Parser::LinageLinesAtTopContext>(0);
}

Cobol85Parser::LinageLinesAtBottomContext* Cobol85Parser::LinageAtContext::linageLinesAtBottom() {
  return getRuleContext<Cobol85Parser::LinageLinesAtBottomContext>(0);
}


size_t Cobol85Parser::LinageAtContext::getRuleIndex() const {
  return Cobol85Parser::RuleLinageAt;
}

void Cobol85Parser::LinageAtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLinageAt(this);
}

void Cobol85Parser::LinageAtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLinageAt(this);
}

Cobol85Parser::LinageAtContext* Cobol85Parser::linageAt() {
  LinageAtContext *_localctx = _tracker.createInstance<LinageAtContext>(_ctx, getState());
  enterRule(_localctx, 192, Cobol85Parser::RuleLinageAt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2178);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 207, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2175);
      linageFootingAt();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2176);
      linageLinesAtTop();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2177);
      linageLinesAtBottom();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LinageFootingAtContext ------------------------------------------------------------------

Cobol85Parser::LinageFootingAtContext::LinageFootingAtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::LinageFootingAtContext::FOOTING() {
  return getToken(Cobol85Parser::FOOTING, 0);
}

Cobol85Parser::DataNameContext* Cobol85Parser::LinageFootingAtContext::dataName() {
  return getRuleContext<Cobol85Parser::DataNameContext>(0);
}

Cobol85Parser::IntegerLiteralContext* Cobol85Parser::LinageFootingAtContext::integerLiteral() {
  return getRuleContext<Cobol85Parser::IntegerLiteralContext>(0);
}

tree::TerminalNode* Cobol85Parser::LinageFootingAtContext::WITH() {
  return getToken(Cobol85Parser::WITH, 0);
}

tree::TerminalNode* Cobol85Parser::LinageFootingAtContext::AT() {
  return getToken(Cobol85Parser::AT, 0);
}


size_t Cobol85Parser::LinageFootingAtContext::getRuleIndex() const {
  return Cobol85Parser::RuleLinageFootingAt;
}

void Cobol85Parser::LinageFootingAtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLinageFootingAt(this);
}

void Cobol85Parser::LinageFootingAtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLinageFootingAt(this);
}

Cobol85Parser::LinageFootingAtContext* Cobol85Parser::linageFootingAt() {
  LinageFootingAtContext *_localctx = _tracker.createInstance<LinageFootingAtContext>(_ctx, getState());
  enterRule(_localctx, 194, Cobol85Parser::RuleLinageFootingAt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2181);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::WITH) {
      setState(2180);
      match(Cobol85Parser::WITH);
    }
    setState(2183);
    match(Cobol85Parser::FOOTING);
    setState(2185);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::AT) {
      setState(2184);
      match(Cobol85Parser::AT);
    }
    setState(2189);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Cobol85Parser::ABORT:
      case Cobol85Parser::AS:
      case Cobol85Parser::ASCII:
      case Cobol85Parser::ASSOCIATED_DATA:
      case Cobol85Parser::ASSOCIATED_DATA_LENGTH:
      case Cobol85Parser::ATTRIBUTE:
      case Cobol85Parser::AUTO:
      case Cobol85Parser::AUTO_SKIP:
      case Cobol85Parser::BACKGROUND_COLOR:
      case Cobol85Parser::BACKGROUND_COLOUR:
      case Cobol85Parser::BEEP:
      case Cobol85Parser::BELL:
      case Cobol85Parser::BINARY:
      case Cobol85Parser::BIT:
      case Cobol85Parser::BLINK:
      case Cobol85Parser::BOUNDS:
      case Cobol85Parser::CAPABLE:
      case Cobol85Parser::CCSVERSION:
      case Cobol85Parser::CHANGED:
      case Cobol85Parser::CHANNEL:
      case Cobol85Parser::CLOSE_DISPOSITION:
      case Cobol85Parser::COBOL:
      case Cobol85Parser::COMMITMENT:
      case Cobol85Parser::CONTROL_POINT:
      case Cobol85Parser::CONVENTION:
      case Cobol85Parser::CRUNCH:
      case Cobol85Parser::CURSOR:
      case Cobol85Parser::DEFAULT:
      case Cobol85Parser::DEFAULT_DISPLAY:
      case Cobol85Parser::DEFINITION:
      case Cobol85Parser::DFHRESP:
      case Cobol85Parser::DFHVALUE:
      case Cobol85Parser::DISK:
      case Cobol85Parser::DONTCARE:
      case Cobol85Parser::DOUBLE:
      case Cobol85Parser::EBCDIC:
      case Cobol85Parser::EMPTY_CHECK:
      case Cobol85Parser::ENTER:
      case Cobol85Parser::ENTRY_PROCEDURE:
      case Cobol85Parser::ERASE:
      case Cobol85Parser::EOL:
      case Cobol85Parser::EOS:
      case Cobol85Parser::ESCAPE:
      case Cobol85Parser::EVENT:
      case Cobol85Parser::EXCLUSIVE:
      case Cobol85Parser::EXPORT:
      case Cobol85Parser::EXTENDED:
      case Cobol85Parser::FOREGROUND_COLOR:
      case Cobol85Parser::FOREGROUND_COLOUR:
      case Cobol85Parser::FULL:
      case Cobol85Parser::FUNCTIONNAME:
      case Cobol85Parser::FUNCTION_POINTER:
      case Cobol85Parser::GRID:
      case Cobol85Parser::HIGHLIGHT:
      case Cobol85Parser::IMPLICIT:
      case Cobol85Parser::IMPORT:
      case Cobol85Parser::INTEGER:
      case Cobol85Parser::KEPT:
      case Cobol85Parser::KEYBOARD:
      case Cobol85Parser::LANGUAGE:
      case Cobol85Parser::LB:
      case Cobol85Parser::LD:
      case Cobol85Parser::LEFTLINE:
      case Cobol85Parser::LENGTH_CHECK:
      case Cobol85Parser::LIBACCESS:
      case Cobol85Parser::LIBPARAMETER:
      case Cobol85Parser::LIBRARY:
      case Cobol85Parser::LIST:
      case Cobol85Parser::LOCAL:
      case Cobol85Parser::LONG_DATE:
      case Cobol85Parser::LONG_TIME:
      case Cobol85Parser::LOWER:
      case Cobol85Parser::LOWLIGHT:
      case Cobol85Parser::MMDDYYYY:
      case Cobol85Parser::NAMED:
      case Cobol85Parser::NATIONAL:
      case Cobol85Parser::NATIONAL_EDITED:
      case Cobol85Parser::NETWORK:
      case Cobol85Parser::NO_ECHO:
      case Cobol85Parser::NUMERIC_DATE:
      case Cobol85Parser::NUMERIC_TIME:
      case Cobol85Parser::ODT:
      case Cobol85Parser::ORDERLY:
      case Cobol85Parser::OVERLINE:
      case Cobol85Parser::OWN:
      case Cobol85Parser::PASSWORD:
      case Cobol85Parser::PORT:
      case Cobol85Parser::PRINTER:
      case Cobol85Parser::PRIVATE:
      case Cobol85Parser::PROCESS:
      case Cobol85Parser::PROGRAM:
      case Cobol85Parser::PROMPT:
      case Cobol85Parser::READER:
      case Cobol85Parser::REMOTE:
      case Cobol85Parser::REAL:
      case Cobol85Parser::RECEIVED:
      case Cobol85Parser::RECURSIVE:
      case Cobol85Parser::REF:
      case Cobol85Parser::REMOVE:
      case Cobol85Parser::REQUIRED:
      case Cobol85Parser::REVERSE_VIDEO:
      case Cobol85Parser::SAVE:
      case Cobol85Parser::SECURE:
      case Cobol85Parser::SHARED:
      case Cobol85Parser::SHAREDBYALL:
      case Cobol85Parser::SHAREDBYRUNUNIT:
      case Cobol85Parser::SHARING:
      case Cobol85Parser::SHORT_DATE:
      case Cobol85Parser::SYMBOL:
      case Cobol85Parser::TASK:
      case Cobol85Parser::THREAD:
      case Cobol85Parser::THREAD_LOCAL:
      case Cobol85Parser::TIMER:
      case Cobol85Parser::TODAYS_DATE:
      case Cobol85Parser::TODAYS_NAME:
      case Cobol85Parser::TRUNCATED:
      case Cobol85Parser::TYPEDEF:
      case Cobol85Parser::UNDERLINE:
      case Cobol85Parser::VIRTUAL:
      case Cobol85Parser::WAIT:
      case Cobol85Parser::YEAR:
      case Cobol85Parser::YYYYMMDD:
      case Cobol85Parser::YYYYDDD:
      case Cobol85Parser::ZERO_FILL:
      case Cobol85Parser::IDENTIFIER: {
        setState(2187);
        dataName();
        break;
      }

      case Cobol85Parser::LEVEL_NUMBER_66:
      case Cobol85Parser::LEVEL_NUMBER_77:
      case Cobol85Parser::LEVEL_NUMBER_88:
      case Cobol85Parser::INTEGERLITERAL: {
        setState(2188);
        integerLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LinageLinesAtTopContext ------------------------------------------------------------------

Cobol85Parser::LinageLinesAtTopContext::LinageLinesAtTopContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::LinageLinesAtTopContext::TOP() {
  return getToken(Cobol85Parser::TOP, 0);
}

Cobol85Parser::DataNameContext* Cobol85Parser::LinageLinesAtTopContext::dataName() {
  return getRuleContext<Cobol85Parser::DataNameContext>(0);
}

Cobol85Parser::IntegerLiteralContext* Cobol85Parser::LinageLinesAtTopContext::integerLiteral() {
  return getRuleContext<Cobol85Parser::IntegerLiteralContext>(0);
}

tree::TerminalNode* Cobol85Parser::LinageLinesAtTopContext::LINES() {
  return getToken(Cobol85Parser::LINES, 0);
}

tree::TerminalNode* Cobol85Parser::LinageLinesAtTopContext::AT() {
  return getToken(Cobol85Parser::AT, 0);
}


size_t Cobol85Parser::LinageLinesAtTopContext::getRuleIndex() const {
  return Cobol85Parser::RuleLinageLinesAtTop;
}

void Cobol85Parser::LinageLinesAtTopContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLinageLinesAtTop(this);
}

void Cobol85Parser::LinageLinesAtTopContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLinageLinesAtTop(this);
}

Cobol85Parser::LinageLinesAtTopContext* Cobol85Parser::linageLinesAtTop() {
  LinageLinesAtTopContext *_localctx = _tracker.createInstance<LinageLinesAtTopContext>(_ctx, getState());
  enterRule(_localctx, 196, Cobol85Parser::RuleLinageLinesAtTop);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2192);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::LINES) {
      setState(2191);
      match(Cobol85Parser::LINES);
    }
    setState(2195);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::AT) {
      setState(2194);
      match(Cobol85Parser::AT);
    }
    setState(2197);
    match(Cobol85Parser::TOP);
    setState(2200);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Cobol85Parser::ABORT:
      case Cobol85Parser::AS:
      case Cobol85Parser::ASCII:
      case Cobol85Parser::ASSOCIATED_DATA:
      case Cobol85Parser::ASSOCIATED_DATA_LENGTH:
      case Cobol85Parser::ATTRIBUTE:
      case Cobol85Parser::AUTO:
      case Cobol85Parser::AUTO_SKIP:
      case Cobol85Parser::BACKGROUND_COLOR:
      case Cobol85Parser::BACKGROUND_COLOUR:
      case Cobol85Parser::BEEP:
      case Cobol85Parser::BELL:
      case Cobol85Parser::BINARY:
      case Cobol85Parser::BIT:
      case Cobol85Parser::BLINK:
      case Cobol85Parser::BOUNDS:
      case Cobol85Parser::CAPABLE:
      case Cobol85Parser::CCSVERSION:
      case Cobol85Parser::CHANGED:
      case Cobol85Parser::CHANNEL:
      case Cobol85Parser::CLOSE_DISPOSITION:
      case Cobol85Parser::COBOL:
      case Cobol85Parser::COMMITMENT:
      case Cobol85Parser::CONTROL_POINT:
      case Cobol85Parser::CONVENTION:
      case Cobol85Parser::CRUNCH:
      case Cobol85Parser::CURSOR:
      case Cobol85Parser::DEFAULT:
      case Cobol85Parser::DEFAULT_DISPLAY:
      case Cobol85Parser::DEFINITION:
      case Cobol85Parser::DFHRESP:
      case Cobol85Parser::DFHVALUE:
      case Cobol85Parser::DISK:
      case Cobol85Parser::DONTCARE:
      case Cobol85Parser::DOUBLE:
      case Cobol85Parser::EBCDIC:
      case Cobol85Parser::EMPTY_CHECK:
      case Cobol85Parser::ENTER:
      case Cobol85Parser::ENTRY_PROCEDURE:
      case Cobol85Parser::ERASE:
      case Cobol85Parser::EOL:
      case Cobol85Parser::EOS:
      case Cobol85Parser::ESCAPE:
      case Cobol85Parser::EVENT:
      case Cobol85Parser::EXCLUSIVE:
      case Cobol85Parser::EXPORT:
      case Cobol85Parser::EXTENDED:
      case Cobol85Parser::FOREGROUND_COLOR:
      case Cobol85Parser::FOREGROUND_COLOUR:
      case Cobol85Parser::FULL:
      case Cobol85Parser::FUNCTIONNAME:
      case Cobol85Parser::FUNCTION_POINTER:
      case Cobol85Parser::GRID:
      case Cobol85Parser::HIGHLIGHT:
      case Cobol85Parser::IMPLICIT:
      case Cobol85Parser::IMPORT:
      case Cobol85Parser::INTEGER:
      case Cobol85Parser::KEPT:
      case Cobol85Parser::KEYBOARD:
      case Cobol85Parser::LANGUAGE:
      case Cobol85Parser::LB:
      case Cobol85Parser::LD:
      case Cobol85Parser::LEFTLINE:
      case Cobol85Parser::LENGTH_CHECK:
      case Cobol85Parser::LIBACCESS:
      case Cobol85Parser::LIBPARAMETER:
      case Cobol85Parser::LIBRARY:
      case Cobol85Parser::LIST:
      case Cobol85Parser::LOCAL:
      case Cobol85Parser::LONG_DATE:
      case Cobol85Parser::LONG_TIME:
      case Cobol85Parser::LOWER:
      case Cobol85Parser::LOWLIGHT:
      case Cobol85Parser::MMDDYYYY:
      case Cobol85Parser::NAMED:
      case Cobol85Parser::NATIONAL:
      case Cobol85Parser::NATIONAL_EDITED:
      case Cobol85Parser::NETWORK:
      case Cobol85Parser::NO_ECHO:
      case Cobol85Parser::NUMERIC_DATE:
      case Cobol85Parser::NUMERIC_TIME:
      case Cobol85Parser::ODT:
      case Cobol85Parser::ORDERLY:
      case Cobol85Parser::OVERLINE:
      case Cobol85Parser::OWN:
      case Cobol85Parser::PASSWORD:
      case Cobol85Parser::PORT:
      case Cobol85Parser::PRINTER:
      case Cobol85Parser::PRIVATE:
      case Cobol85Parser::PROCESS:
      case Cobol85Parser::PROGRAM:
      case Cobol85Parser::PROMPT:
      case Cobol85Parser::READER:
      case Cobol85Parser::REMOTE:
      case Cobol85Parser::REAL:
      case Cobol85Parser::RECEIVED:
      case Cobol85Parser::RECURSIVE:
      case Cobol85Parser::REF:
      case Cobol85Parser::REMOVE:
      case Cobol85Parser::REQUIRED:
      case Cobol85Parser::REVERSE_VIDEO:
      case Cobol85Parser::SAVE:
      case Cobol85Parser::SECURE:
      case Cobol85Parser::SHARED:
      case Cobol85Parser::SHAREDBYALL:
      case Cobol85Parser::SHAREDBYRUNUNIT:
      case Cobol85Parser::SHARING:
      case Cobol85Parser::SHORT_DATE:
      case Cobol85Parser::SYMBOL:
      case Cobol85Parser::TASK:
      case Cobol85Parser::THREAD:
      case Cobol85Parser::THREAD_LOCAL:
      case Cobol85Parser::TIMER:
      case Cobol85Parser::TODAYS_DATE:
      case Cobol85Parser::TODAYS_NAME:
      case Cobol85Parser::TRUNCATED:
      case Cobol85Parser::TYPEDEF:
      case Cobol85Parser::UNDERLINE:
      case Cobol85Parser::VIRTUAL:
      case Cobol85Parser::WAIT:
      case Cobol85Parser::YEAR:
      case Cobol85Parser::YYYYMMDD:
      case Cobol85Parser::YYYYDDD:
      case Cobol85Parser::ZERO_FILL:
      case Cobol85Parser::IDENTIFIER: {
        setState(2198);
        dataName();
        break;
      }

      case Cobol85Parser::LEVEL_NUMBER_66:
      case Cobol85Parser::LEVEL_NUMBER_77:
      case Cobol85Parser::LEVEL_NUMBER_88:
      case Cobol85Parser::INTEGERLITERAL: {
        setState(2199);
        integerLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LinageLinesAtBottomContext ------------------------------------------------------------------

Cobol85Parser::LinageLinesAtBottomContext::LinageLinesAtBottomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::LinageLinesAtBottomContext::BOTTOM() {
  return getToken(Cobol85Parser::BOTTOM, 0);
}

Cobol85Parser::DataNameContext* Cobol85Parser::LinageLinesAtBottomContext::dataName() {
  return getRuleContext<Cobol85Parser::DataNameContext>(0);
}

Cobol85Parser::IntegerLiteralContext* Cobol85Parser::LinageLinesAtBottomContext::integerLiteral() {
  return getRuleContext<Cobol85Parser::IntegerLiteralContext>(0);
}

tree::TerminalNode* Cobol85Parser::LinageLinesAtBottomContext::LINES() {
  return getToken(Cobol85Parser::LINES, 0);
}

tree::TerminalNode* Cobol85Parser::LinageLinesAtBottomContext::AT() {
  return getToken(Cobol85Parser::AT, 0);
}


size_t Cobol85Parser::LinageLinesAtBottomContext::getRuleIndex() const {
  return Cobol85Parser::RuleLinageLinesAtBottom;
}

void Cobol85Parser::LinageLinesAtBottomContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLinageLinesAtBottom(this);
}

void Cobol85Parser::LinageLinesAtBottomContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLinageLinesAtBottom(this);
}

Cobol85Parser::LinageLinesAtBottomContext* Cobol85Parser::linageLinesAtBottom() {
  LinageLinesAtBottomContext *_localctx = _tracker.createInstance<LinageLinesAtBottomContext>(_ctx, getState());
  enterRule(_localctx, 198, Cobol85Parser::RuleLinageLinesAtBottom);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2203);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::LINES) {
      setState(2202);
      match(Cobol85Parser::LINES);
    }
    setState(2206);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::AT) {
      setState(2205);
      match(Cobol85Parser::AT);
    }
    setState(2208);
    match(Cobol85Parser::BOTTOM);
    setState(2211);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Cobol85Parser::ABORT:
      case Cobol85Parser::AS:
      case Cobol85Parser::ASCII:
      case Cobol85Parser::ASSOCIATED_DATA:
      case Cobol85Parser::ASSOCIATED_DATA_LENGTH:
      case Cobol85Parser::ATTRIBUTE:
      case Cobol85Parser::AUTO:
      case Cobol85Parser::AUTO_SKIP:
      case Cobol85Parser::BACKGROUND_COLOR:
      case Cobol85Parser::BACKGROUND_COLOUR:
      case Cobol85Parser::BEEP:
      case Cobol85Parser::BELL:
      case Cobol85Parser::BINARY:
      case Cobol85Parser::BIT:
      case Cobol85Parser::BLINK:
      case Cobol85Parser::BOUNDS:
      case Cobol85Parser::CAPABLE:
      case Cobol85Parser::CCSVERSION:
      case Cobol85Parser::CHANGED:
      case Cobol85Parser::CHANNEL:
      case Cobol85Parser::CLOSE_DISPOSITION:
      case Cobol85Parser::COBOL:
      case Cobol85Parser::COMMITMENT:
      case Cobol85Parser::CONTROL_POINT:
      case Cobol85Parser::CONVENTION:
      case Cobol85Parser::CRUNCH:
      case Cobol85Parser::CURSOR:
      case Cobol85Parser::DEFAULT:
      case Cobol85Parser::DEFAULT_DISPLAY:
      case Cobol85Parser::DEFINITION:
      case Cobol85Parser::DFHRESP:
      case Cobol85Parser::DFHVALUE:
      case Cobol85Parser::DISK:
      case Cobol85Parser::DONTCARE:
      case Cobol85Parser::DOUBLE:
      case Cobol85Parser::EBCDIC:
      case Cobol85Parser::EMPTY_CHECK:
      case Cobol85Parser::ENTER:
      case Cobol85Parser::ENTRY_PROCEDURE:
      case Cobol85Parser::ERASE:
      case Cobol85Parser::EOL:
      case Cobol85Parser::EOS:
      case Cobol85Parser::ESCAPE:
      case Cobol85Parser::EVENT:
      case Cobol85Parser::EXCLUSIVE:
      case Cobol85Parser::EXPORT:
      case Cobol85Parser::EXTENDED:
      case Cobol85Parser::FOREGROUND_COLOR:
      case Cobol85Parser::FOREGROUND_COLOUR:
      case Cobol85Parser::FULL:
      case Cobol85Parser::FUNCTIONNAME:
      case Cobol85Parser::FUNCTION_POINTER:
      case Cobol85Parser::GRID:
      case Cobol85Parser::HIGHLIGHT:
      case Cobol85Parser::IMPLICIT:
      case Cobol85Parser::IMPORT:
      case Cobol85Parser::INTEGER:
      case Cobol85Parser::KEPT:
      case Cobol85Parser::KEYBOARD:
      case Cobol85Parser::LANGUAGE:
      case Cobol85Parser::LB:
      case Cobol85Parser::LD:
      case Cobol85Parser::LEFTLINE:
      case Cobol85Parser::LENGTH_CHECK:
      case Cobol85Parser::LIBACCESS:
      case Cobol85Parser::LIBPARAMETER:
      case Cobol85Parser::LIBRARY:
      case Cobol85Parser::LIST:
      case Cobol85Parser::LOCAL:
      case Cobol85Parser::LONG_DATE:
      case Cobol85Parser::LONG_TIME:
      case Cobol85Parser::LOWER:
      case Cobol85Parser::LOWLIGHT:
      case Cobol85Parser::MMDDYYYY:
      case Cobol85Parser::NAMED:
      case Cobol85Parser::NATIONAL:
      case Cobol85Parser::NATIONAL_EDITED:
      case Cobol85Parser::NETWORK:
      case Cobol85Parser::NO_ECHO:
      case Cobol85Parser::NUMERIC_DATE:
      case Cobol85Parser::NUMERIC_TIME:
      case Cobol85Parser::ODT:
      case Cobol85Parser::ORDERLY:
      case Cobol85Parser::OVERLINE:
      case Cobol85Parser::OWN:
      case Cobol85Parser::PASSWORD:
      case Cobol85Parser::PORT:
      case Cobol85Parser::PRINTER:
      case Cobol85Parser::PRIVATE:
      case Cobol85Parser::PROCESS:
      case Cobol85Parser::PROGRAM:
      case Cobol85Parser::PROMPT:
      case Cobol85Parser::READER:
      case Cobol85Parser::REMOTE:
      case Cobol85Parser::REAL:
      case Cobol85Parser::RECEIVED:
      case Cobol85Parser::RECURSIVE:
      case Cobol85Parser::REF:
      case Cobol85Parser::REMOVE:
      case Cobol85Parser::REQUIRED:
      case Cobol85Parser::REVERSE_VIDEO:
      case Cobol85Parser::SAVE:
      case Cobol85Parser::SECURE:
      case Cobol85Parser::SHARED:
      case Cobol85Parser::SHAREDBYALL:
      case Cobol85Parser::SHAREDBYRUNUNIT:
      case Cobol85Parser::SHARING:
      case Cobol85Parser::SHORT_DATE:
      case Cobol85Parser::SYMBOL:
      case Cobol85Parser::TASK:
      case Cobol85Parser::THREAD:
      case Cobol85Parser::THREAD_LOCAL:
      case Cobol85Parser::TIMER:
      case Cobol85Parser::TODAYS_DATE:
      case Cobol85Parser::TODAYS_NAME:
      case Cobol85Parser::TRUNCATED:
      case Cobol85Parser::TYPEDEF:
      case Cobol85Parser::UNDERLINE:
      case Cobol85Parser::VIRTUAL:
      case Cobol85Parser::WAIT:
      case Cobol85Parser::YEAR:
      case Cobol85Parser::YYYYMMDD:
      case Cobol85Parser::YYYYDDD:
      case Cobol85Parser::ZERO_FILL:
      case Cobol85Parser::IDENTIFIER: {
        setState(2209);
        dataName();
        break;
      }

      case Cobol85Parser::LEVEL_NUMBER_66:
      case Cobol85Parser::LEVEL_NUMBER_77:
      case Cobol85Parser::LEVEL_NUMBER_88:
      case Cobol85Parser::INTEGERLITERAL: {
        setState(2210);
        integerLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RecordingModeClauseContext ------------------------------------------------------------------

Cobol85Parser::RecordingModeClauseContext::RecordingModeClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::RecordingModeClauseContext::RECORDING() {
  return getToken(Cobol85Parser::RECORDING, 0);
}

Cobol85Parser::ModeStatementContext* Cobol85Parser::RecordingModeClauseContext::modeStatement() {
  return getRuleContext<Cobol85Parser::ModeStatementContext>(0);
}

tree::TerminalNode* Cobol85Parser::RecordingModeClauseContext::MODE() {
  return getToken(Cobol85Parser::MODE, 0);
}

tree::TerminalNode* Cobol85Parser::RecordingModeClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}


size_t Cobol85Parser::RecordingModeClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleRecordingModeClause;
}

void Cobol85Parser::RecordingModeClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRecordingModeClause(this);
}

void Cobol85Parser::RecordingModeClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRecordingModeClause(this);
}

Cobol85Parser::RecordingModeClauseContext* Cobol85Parser::recordingModeClause() {
  RecordingModeClauseContext *_localctx = _tracker.createInstance<RecordingModeClauseContext>(_ctx, getState());
  enterRule(_localctx, 200, Cobol85Parser::RuleRecordingModeClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2213);
    match(Cobol85Parser::RECORDING);
    setState(2215);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::MODE) {
      setState(2214);
      match(Cobol85Parser::MODE);
    }
    setState(2218);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(2217);
      match(Cobol85Parser::IS);
    }
    setState(2220);
    modeStatement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModeStatementContext ------------------------------------------------------------------

Cobol85Parser::ModeStatementContext::ModeStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::CobolWordContext* Cobol85Parser::ModeStatementContext::cobolWord() {
  return getRuleContext<Cobol85Parser::CobolWordContext>(0);
}


size_t Cobol85Parser::ModeStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleModeStatement;
}

void Cobol85Parser::ModeStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModeStatement(this);
}

void Cobol85Parser::ModeStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModeStatement(this);
}

Cobol85Parser::ModeStatementContext* Cobol85Parser::modeStatement() {
  ModeStatementContext *_localctx = _tracker.createInstance<ModeStatementContext>(_ctx, getState());
  enterRule(_localctx, 202, Cobol85Parser::RuleModeStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2222);
    cobolWord();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CodeSetClauseContext ------------------------------------------------------------------

Cobol85Parser::CodeSetClauseContext::CodeSetClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::CodeSetClauseContext::CODE_SET() {
  return getToken(Cobol85Parser::CODE_SET, 0);
}

Cobol85Parser::AlphabetNameContext* Cobol85Parser::CodeSetClauseContext::alphabetName() {
  return getRuleContext<Cobol85Parser::AlphabetNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::CodeSetClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}


size_t Cobol85Parser::CodeSetClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleCodeSetClause;
}

void Cobol85Parser::CodeSetClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCodeSetClause(this);
}

void Cobol85Parser::CodeSetClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCodeSetClause(this);
}

Cobol85Parser::CodeSetClauseContext* Cobol85Parser::codeSetClause() {
  CodeSetClauseContext *_localctx = _tracker.createInstance<CodeSetClauseContext>(_ctx, getState());
  enterRule(_localctx, 204, Cobol85Parser::RuleCodeSetClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2224);
    match(Cobol85Parser::CODE_SET);
    setState(2226);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(2225);
      match(Cobol85Parser::IS);
    }
    setState(2228);
    alphabetName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReportClauseContext ------------------------------------------------------------------

Cobol85Parser::ReportClauseContext::ReportClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ReportClauseContext::REPORT() {
  return getToken(Cobol85Parser::REPORT, 0);
}

tree::TerminalNode* Cobol85Parser::ReportClauseContext::REPORTS() {
  return getToken(Cobol85Parser::REPORTS, 0);
}

std::vector<Cobol85Parser::ReportNameContext *> Cobol85Parser::ReportClauseContext::reportName() {
  return getRuleContexts<Cobol85Parser::ReportNameContext>();
}

Cobol85Parser::ReportNameContext* Cobol85Parser::ReportClauseContext::reportName(size_t i) {
  return getRuleContext<Cobol85Parser::ReportNameContext>(i);
}

tree::TerminalNode* Cobol85Parser::ReportClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}

tree::TerminalNode* Cobol85Parser::ReportClauseContext::ARE() {
  return getToken(Cobol85Parser::ARE, 0);
}


size_t Cobol85Parser::ReportClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleReportClause;
}

void Cobol85Parser::ReportClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReportClause(this);
}

void Cobol85Parser::ReportClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReportClause(this);
}

Cobol85Parser::ReportClauseContext* Cobol85Parser::reportClause() {
  ReportClauseContext *_localctx = _tracker.createInstance<ReportClauseContext>(_ctx, getState());
  enterRule(_localctx, 206, Cobol85Parser::RuleReportClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2238);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Cobol85Parser::REPORT: {
        setState(2230);
        match(Cobol85Parser::REPORT);
        setState(2232);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Cobol85Parser::IS) {
          setState(2231);
          match(Cobol85Parser::IS);
        }
        break;
      }

      case Cobol85Parser::REPORTS: {
        setState(2234);
        match(Cobol85Parser::REPORTS);
        setState(2236);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Cobol85Parser::ARE) {
          setState(2235);
          match(Cobol85Parser::ARE);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(2241); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(2240);
      reportName();
      setState(2243); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3512999431135821826) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 8070451912006173187) != 0) || ((((_la - 138) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 138)) & 5276573893883339531) != 0) || ((((_la - 202) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 202)) & -3098194965423761407) != 0) || ((((_la - 268) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 268)) & -9202532752178969483) != 0) || ((((_la - 336) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 336)) & 4647874433930428483) != 0) || ((((_la - 401) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 401)) & 84826144769) != 0) || ((((_la - 466) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 466)) & 103635575018455169) != 0) || ((((_la - 552) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 552)) & 47) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DataBaseSectionContext ------------------------------------------------------------------

Cobol85Parser::DataBaseSectionContext::DataBaseSectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::DataBaseSectionContext::DATA_BASE() {
  return getToken(Cobol85Parser::DATA_BASE, 0);
}

tree::TerminalNode* Cobol85Parser::DataBaseSectionContext::SECTION() {
  return getToken(Cobol85Parser::SECTION, 0);
}

tree::TerminalNode* Cobol85Parser::DataBaseSectionContext::DOT_FS() {
  return getToken(Cobol85Parser::DOT_FS, 0);
}

std::vector<Cobol85Parser::DataBaseSectionEntryContext *> Cobol85Parser::DataBaseSectionContext::dataBaseSectionEntry() {
  return getRuleContexts<Cobol85Parser::DataBaseSectionEntryContext>();
}

Cobol85Parser::DataBaseSectionEntryContext* Cobol85Parser::DataBaseSectionContext::dataBaseSectionEntry(size_t i) {
  return getRuleContext<Cobol85Parser::DataBaseSectionEntryContext>(i);
}


size_t Cobol85Parser::DataBaseSectionContext::getRuleIndex() const {
  return Cobol85Parser::RuleDataBaseSection;
}

void Cobol85Parser::DataBaseSectionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDataBaseSection(this);
}

void Cobol85Parser::DataBaseSectionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDataBaseSection(this);
}

Cobol85Parser::DataBaseSectionContext* Cobol85Parser::dataBaseSection() {
  DataBaseSectionContext *_localctx = _tracker.createInstance<DataBaseSectionContext>(_ctx, getState());
  enterRule(_localctx, 208, Cobol85Parser::RuleDataBaseSection);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2245);
    match(Cobol85Parser::DATA_BASE);
    setState(2246);
    match(Cobol85Parser::SECTION);
    setState(2247);
    match(Cobol85Parser::DOT_FS);
    setState(2251);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 552) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 552)) & 15) != 0)) {
      setState(2248);
      dataBaseSectionEntry();
      setState(2253);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DataBaseSectionEntryContext ------------------------------------------------------------------

Cobol85Parser::DataBaseSectionEntryContext::DataBaseSectionEntryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::IntegerLiteralContext* Cobol85Parser::DataBaseSectionEntryContext::integerLiteral() {
  return getRuleContext<Cobol85Parser::IntegerLiteralContext>(0);
}

std::vector<Cobol85Parser::LiteralContext *> Cobol85Parser::DataBaseSectionEntryContext::literal() {
  return getRuleContexts<Cobol85Parser::LiteralContext>();
}

Cobol85Parser::LiteralContext* Cobol85Parser::DataBaseSectionEntryContext::literal(size_t i) {
  return getRuleContext<Cobol85Parser::LiteralContext>(i);
}

tree::TerminalNode* Cobol85Parser::DataBaseSectionEntryContext::INVOKE() {
  return getToken(Cobol85Parser::INVOKE, 0);
}


size_t Cobol85Parser::DataBaseSectionEntryContext::getRuleIndex() const {
  return Cobol85Parser::RuleDataBaseSectionEntry;
}

void Cobol85Parser::DataBaseSectionEntryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDataBaseSectionEntry(this);
}

void Cobol85Parser::DataBaseSectionEntryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDataBaseSectionEntry(this);
}

Cobol85Parser::DataBaseSectionEntryContext* Cobol85Parser::dataBaseSectionEntry() {
  DataBaseSectionEntryContext *_localctx = _tracker.createInstance<DataBaseSectionEntryContext>(_ctx, getState());
  enterRule(_localctx, 210, Cobol85Parser::RuleDataBaseSectionEntry);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2254);
    integerLiteral();
    setState(2255);
    literal();
    setState(2256);
    match(Cobol85Parser::INVOKE);
    setState(2257);
    literal();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WorkingStorageSectionContext ------------------------------------------------------------------

Cobol85Parser::WorkingStorageSectionContext::WorkingStorageSectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::WorkingStorageSectionContext::WORKING_STORAGE() {
  return getToken(Cobol85Parser::WORKING_STORAGE, 0);
}

tree::TerminalNode* Cobol85Parser::WorkingStorageSectionContext::SECTION() {
  return getToken(Cobol85Parser::SECTION, 0);
}

tree::TerminalNode* Cobol85Parser::WorkingStorageSectionContext::DOT_FS() {
  return getToken(Cobol85Parser::DOT_FS, 0);
}

std::vector<Cobol85Parser::DataDescriptionEntryContext *> Cobol85Parser::WorkingStorageSectionContext::dataDescriptionEntry() {
  return getRuleContexts<Cobol85Parser::DataDescriptionEntryContext>();
}

Cobol85Parser::DataDescriptionEntryContext* Cobol85Parser::WorkingStorageSectionContext::dataDescriptionEntry(size_t i) {
  return getRuleContext<Cobol85Parser::DataDescriptionEntryContext>(i);
}


size_t Cobol85Parser::WorkingStorageSectionContext::getRuleIndex() const {
  return Cobol85Parser::RuleWorkingStorageSection;
}

void Cobol85Parser::WorkingStorageSectionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWorkingStorageSection(this);
}

void Cobol85Parser::WorkingStorageSectionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWorkingStorageSection(this);
}

Cobol85Parser::WorkingStorageSectionContext* Cobol85Parser::workingStorageSection() {
  WorkingStorageSectionContext *_localctx = _tracker.createInstance<WorkingStorageSectionContext>(_ctx, getState());
  enterRule(_localctx, 212, Cobol85Parser::RuleWorkingStorageSection);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2259);
    match(Cobol85Parser::WORKING_STORAGE);
    setState(2260);
    match(Cobol85Parser::SECTION);
    setState(2261);
    match(Cobol85Parser::DOT_FS);
    setState(2265);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 552) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 552)) & 527) != 0)) {
      setState(2262);
      dataDescriptionEntry();
      setState(2267);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LinkageSectionContext ------------------------------------------------------------------

Cobol85Parser::LinkageSectionContext::LinkageSectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::LinkageSectionContext::LINKAGE() {
  return getToken(Cobol85Parser::LINKAGE, 0);
}

tree::TerminalNode* Cobol85Parser::LinkageSectionContext::SECTION() {
  return getToken(Cobol85Parser::SECTION, 0);
}

tree::TerminalNode* Cobol85Parser::LinkageSectionContext::DOT_FS() {
  return getToken(Cobol85Parser::DOT_FS, 0);
}

std::vector<Cobol85Parser::DataDescriptionEntryContext *> Cobol85Parser::LinkageSectionContext::dataDescriptionEntry() {
  return getRuleContexts<Cobol85Parser::DataDescriptionEntryContext>();
}

Cobol85Parser::DataDescriptionEntryContext* Cobol85Parser::LinkageSectionContext::dataDescriptionEntry(size_t i) {
  return getRuleContext<Cobol85Parser::DataDescriptionEntryContext>(i);
}


size_t Cobol85Parser::LinkageSectionContext::getRuleIndex() const {
  return Cobol85Parser::RuleLinkageSection;
}

void Cobol85Parser::LinkageSectionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLinkageSection(this);
}

void Cobol85Parser::LinkageSectionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLinkageSection(this);
}

Cobol85Parser::LinkageSectionContext* Cobol85Parser::linkageSection() {
  LinkageSectionContext *_localctx = _tracker.createInstance<LinkageSectionContext>(_ctx, getState());
  enterRule(_localctx, 214, Cobol85Parser::RuleLinkageSection);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2268);
    match(Cobol85Parser::LINKAGE);
    setState(2269);
    match(Cobol85Parser::SECTION);
    setState(2270);
    match(Cobol85Parser::DOT_FS);
    setState(2274);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 552) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 552)) & 527) != 0)) {
      setState(2271);
      dataDescriptionEntry();
      setState(2276);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CommunicationSectionContext ------------------------------------------------------------------

Cobol85Parser::CommunicationSectionContext::CommunicationSectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::CommunicationSectionContext::COMMUNICATION() {
  return getToken(Cobol85Parser::COMMUNICATION, 0);
}

tree::TerminalNode* Cobol85Parser::CommunicationSectionContext::SECTION() {
  return getToken(Cobol85Parser::SECTION, 0);
}

tree::TerminalNode* Cobol85Parser::CommunicationSectionContext::DOT_FS() {
  return getToken(Cobol85Parser::DOT_FS, 0);
}

std::vector<Cobol85Parser::CommunicationDescriptionEntryContext *> Cobol85Parser::CommunicationSectionContext::communicationDescriptionEntry() {
  return getRuleContexts<Cobol85Parser::CommunicationDescriptionEntryContext>();
}

Cobol85Parser::CommunicationDescriptionEntryContext* Cobol85Parser::CommunicationSectionContext::communicationDescriptionEntry(size_t i) {
  return getRuleContext<Cobol85Parser::CommunicationDescriptionEntryContext>(i);
}

std::vector<Cobol85Parser::DataDescriptionEntryContext *> Cobol85Parser::CommunicationSectionContext::dataDescriptionEntry() {
  return getRuleContexts<Cobol85Parser::DataDescriptionEntryContext>();
}

Cobol85Parser::DataDescriptionEntryContext* Cobol85Parser::CommunicationSectionContext::dataDescriptionEntry(size_t i) {
  return getRuleContext<Cobol85Parser::DataDescriptionEntryContext>(i);
}


size_t Cobol85Parser::CommunicationSectionContext::getRuleIndex() const {
  return Cobol85Parser::RuleCommunicationSection;
}

void Cobol85Parser::CommunicationSectionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCommunicationSection(this);
}

void Cobol85Parser::CommunicationSectionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCommunicationSection(this);
}

Cobol85Parser::CommunicationSectionContext* Cobol85Parser::communicationSection() {
  CommunicationSectionContext *_localctx = _tracker.createInstance<CommunicationSectionContext>(_ctx, getState());
  enterRule(_localctx, 216, Cobol85Parser::RuleCommunicationSection);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2277);
    match(Cobol85Parser::COMMUNICATION);
    setState(2278);
    match(Cobol85Parser::SECTION);
    setState(2279);
    match(Cobol85Parser::DOT_FS);
    setState(2284);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Cobol85Parser::CD || ((((_la - 552) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 552)) & 527) != 0)) {
      setState(2282);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case Cobol85Parser::CD: {
          setState(2280);
          communicationDescriptionEntry();
          break;
        }

        case Cobol85Parser::LEVEL_NUMBER_66:
        case Cobol85Parser::LEVEL_NUMBER_77:
        case Cobol85Parser::LEVEL_NUMBER_88:
        case Cobol85Parser::INTEGERLITERAL:
        case Cobol85Parser::EXECSQLLINE: {
          setState(2281);
          dataDescriptionEntry();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(2286);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CommunicationDescriptionEntryContext ------------------------------------------------------------------

Cobol85Parser::CommunicationDescriptionEntryContext::CommunicationDescriptionEntryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::CommunicationDescriptionEntryFormat1Context* Cobol85Parser::CommunicationDescriptionEntryContext::communicationDescriptionEntryFormat1() {
  return getRuleContext<Cobol85Parser::CommunicationDescriptionEntryFormat1Context>(0);
}

Cobol85Parser::CommunicationDescriptionEntryFormat2Context* Cobol85Parser::CommunicationDescriptionEntryContext::communicationDescriptionEntryFormat2() {
  return getRuleContext<Cobol85Parser::CommunicationDescriptionEntryFormat2Context>(0);
}

Cobol85Parser::CommunicationDescriptionEntryFormat3Context* Cobol85Parser::CommunicationDescriptionEntryContext::communicationDescriptionEntryFormat3() {
  return getRuleContext<Cobol85Parser::CommunicationDescriptionEntryFormat3Context>(0);
}


size_t Cobol85Parser::CommunicationDescriptionEntryContext::getRuleIndex() const {
  return Cobol85Parser::RuleCommunicationDescriptionEntry;
}

void Cobol85Parser::CommunicationDescriptionEntryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCommunicationDescriptionEntry(this);
}

void Cobol85Parser::CommunicationDescriptionEntryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCommunicationDescriptionEntry(this);
}

Cobol85Parser::CommunicationDescriptionEntryContext* Cobol85Parser::communicationDescriptionEntry() {
  CommunicationDescriptionEntryContext *_localctx = _tracker.createInstance<CommunicationDescriptionEntryContext>(_ctx, getState());
  enterRule(_localctx, 218, Cobol85Parser::RuleCommunicationDescriptionEntry);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2290);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 229, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2287);
      communicationDescriptionEntryFormat1();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2288);
      communicationDescriptionEntryFormat2();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2289);
      communicationDescriptionEntryFormat3();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CommunicationDescriptionEntryFormat1Context ------------------------------------------------------------------

Cobol85Parser::CommunicationDescriptionEntryFormat1Context::CommunicationDescriptionEntryFormat1Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::CommunicationDescriptionEntryFormat1Context::CD() {
  return getToken(Cobol85Parser::CD, 0);
}

Cobol85Parser::CdNameContext* Cobol85Parser::CommunicationDescriptionEntryFormat1Context::cdName() {
  return getRuleContext<Cobol85Parser::CdNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::CommunicationDescriptionEntryFormat1Context::INPUT() {
  return getToken(Cobol85Parser::INPUT, 0);
}

tree::TerminalNode* Cobol85Parser::CommunicationDescriptionEntryFormat1Context::DOT_FS() {
  return getToken(Cobol85Parser::DOT_FS, 0);
}

tree::TerminalNode* Cobol85Parser::CommunicationDescriptionEntryFormat1Context::FOR() {
  return getToken(Cobol85Parser::FOR, 0);
}

tree::TerminalNode* Cobol85Parser::CommunicationDescriptionEntryFormat1Context::INITIAL() {
  return getToken(Cobol85Parser::INITIAL, 0);
}

std::vector<Cobol85Parser::DataDescNameContext *> Cobol85Parser::CommunicationDescriptionEntryFormat1Context::dataDescName() {
  return getRuleContexts<Cobol85Parser::DataDescNameContext>();
}

Cobol85Parser::DataDescNameContext* Cobol85Parser::CommunicationDescriptionEntryFormat1Context::dataDescName(size_t i) {
  return getRuleContext<Cobol85Parser::DataDescNameContext>(i);
}

std::vector<Cobol85Parser::SymbolicQueueClauseContext *> Cobol85Parser::CommunicationDescriptionEntryFormat1Context::symbolicQueueClause() {
  return getRuleContexts<Cobol85Parser::SymbolicQueueClauseContext>();
}

Cobol85Parser::SymbolicQueueClauseContext* Cobol85Parser::CommunicationDescriptionEntryFormat1Context::symbolicQueueClause(size_t i) {
  return getRuleContext<Cobol85Parser::SymbolicQueueClauseContext>(i);
}

std::vector<Cobol85Parser::SymbolicSubQueueClauseContext *> Cobol85Parser::CommunicationDescriptionEntryFormat1Context::symbolicSubQueueClause() {
  return getRuleContexts<Cobol85Parser::SymbolicSubQueueClauseContext>();
}

Cobol85Parser::SymbolicSubQueueClauseContext* Cobol85Parser::CommunicationDescriptionEntryFormat1Context::symbolicSubQueueClause(size_t i) {
  return getRuleContext<Cobol85Parser::SymbolicSubQueueClauseContext>(i);
}

std::vector<Cobol85Parser::MessageDateClauseContext *> Cobol85Parser::CommunicationDescriptionEntryFormat1Context::messageDateClause() {
  return getRuleContexts<Cobol85Parser::MessageDateClauseContext>();
}

Cobol85Parser::MessageDateClauseContext* Cobol85Parser::CommunicationDescriptionEntryFormat1Context::messageDateClause(size_t i) {
  return getRuleContext<Cobol85Parser::MessageDateClauseContext>(i);
}

std::vector<Cobol85Parser::MessageTimeClauseContext *> Cobol85Parser::CommunicationDescriptionEntryFormat1Context::messageTimeClause() {
  return getRuleContexts<Cobol85Parser::MessageTimeClauseContext>();
}

Cobol85Parser::MessageTimeClauseContext* Cobol85Parser::CommunicationDescriptionEntryFormat1Context::messageTimeClause(size_t i) {
  return getRuleContext<Cobol85Parser::MessageTimeClauseContext>(i);
}

std::vector<Cobol85Parser::SymbolicSourceClauseContext *> Cobol85Parser::CommunicationDescriptionEntryFormat1Context::symbolicSourceClause() {
  return getRuleContexts<Cobol85Parser::SymbolicSourceClauseContext>();
}

Cobol85Parser::SymbolicSourceClauseContext* Cobol85Parser::CommunicationDescriptionEntryFormat1Context::symbolicSourceClause(size_t i) {
  return getRuleContext<Cobol85Parser::SymbolicSourceClauseContext>(i);
}

std::vector<Cobol85Parser::TextLengthClauseContext *> Cobol85Parser::CommunicationDescriptionEntryFormat1Context::textLengthClause() {
  return getRuleContexts<Cobol85Parser::TextLengthClauseContext>();
}

Cobol85Parser::TextLengthClauseContext* Cobol85Parser::CommunicationDescriptionEntryFormat1Context::textLengthClause(size_t i) {
  return getRuleContext<Cobol85Parser::TextLengthClauseContext>(i);
}

std::vector<Cobol85Parser::EndKeyClauseContext *> Cobol85Parser::CommunicationDescriptionEntryFormat1Context::endKeyClause() {
  return getRuleContexts<Cobol85Parser::EndKeyClauseContext>();
}

Cobol85Parser::EndKeyClauseContext* Cobol85Parser::CommunicationDescriptionEntryFormat1Context::endKeyClause(size_t i) {
  return getRuleContext<Cobol85Parser::EndKeyClauseContext>(i);
}

std::vector<Cobol85Parser::StatusKeyClauseContext *> Cobol85Parser::CommunicationDescriptionEntryFormat1Context::statusKeyClause() {
  return getRuleContexts<Cobol85Parser::StatusKeyClauseContext>();
}

Cobol85Parser::StatusKeyClauseContext* Cobol85Parser::CommunicationDescriptionEntryFormat1Context::statusKeyClause(size_t i) {
  return getRuleContext<Cobol85Parser::StatusKeyClauseContext>(i);
}

std::vector<Cobol85Parser::MessageCountClauseContext *> Cobol85Parser::CommunicationDescriptionEntryFormat1Context::messageCountClause() {
  return getRuleContexts<Cobol85Parser::MessageCountClauseContext>();
}

Cobol85Parser::MessageCountClauseContext* Cobol85Parser::CommunicationDescriptionEntryFormat1Context::messageCountClause(size_t i) {
  return getRuleContext<Cobol85Parser::MessageCountClauseContext>(i);
}


size_t Cobol85Parser::CommunicationDescriptionEntryFormat1Context::getRuleIndex() const {
  return Cobol85Parser::RuleCommunicationDescriptionEntryFormat1;
}

void Cobol85Parser::CommunicationDescriptionEntryFormat1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCommunicationDescriptionEntryFormat1(this);
}

void Cobol85Parser::CommunicationDescriptionEntryFormat1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCommunicationDescriptionEntryFormat1(this);
}

Cobol85Parser::CommunicationDescriptionEntryFormat1Context* Cobol85Parser::communicationDescriptionEntryFormat1() {
  CommunicationDescriptionEntryFormat1Context *_localctx = _tracker.createInstance<CommunicationDescriptionEntryFormat1Context>(_ctx, getState());
  enterRule(_localctx, 220, Cobol85Parser::RuleCommunicationDescriptionEntryFormat1);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2292);
    match(Cobol85Parser::CD);
    setState(2293);
    cdName();
    setState(2295);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::FOR) {
      setState(2294);
      match(Cobol85Parser::FOR);
    }
    setState(2298);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::INITIAL) {
      setState(2297);
      match(Cobol85Parser::INITIAL);
    }
    setState(2300);
    match(Cobol85Parser::INPUT);
    setState(2315);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3512999431135821826) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 8070452049445126659) != 0) || ((((_la - 138) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 138)) & 5276573893884388107) != 0) || ((((_la - 202) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 202)) & -3098194965423761343) != 0) || ((((_la - 268) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 268)) & -9202532752044752779) != 0) || ((((_la - 336) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 336)) & 4647874435004170307) != 0) || ((((_la - 401) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 401)) & 4107423682476392449) != 0) || ((((_la - 466) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 466)) & 103635575018459267) != 0) || _la == Cobol85Parser::IDENTIFIER) {
      setState(2313);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case Cobol85Parser::COUNT:
        case Cobol85Parser::END:
        case Cobol85Parser::MESSAGE:
        case Cobol85Parser::QUEUE:
        case Cobol85Parser::SOURCE:
        case Cobol85Parser::STATUS:
        case Cobol85Parser::SUB_QUEUE_1:
        case Cobol85Parser::SUB_QUEUE_2:
        case Cobol85Parser::SUB_QUEUE_3:
        case Cobol85Parser::SYMBOLIC:
        case Cobol85Parser::TEXT: {
          setState(2310);
          _errHandler->sync(this);
          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 232, _ctx)) {
          case 1: {
            setState(2301);
            symbolicQueueClause();
            break;
          }

          case 2: {
            setState(2302);
            symbolicSubQueueClause();
            break;
          }

          case 3: {
            setState(2303);
            messageDateClause();
            break;
          }

          case 4: {
            setState(2304);
            messageTimeClause();
            break;
          }

          case 5: {
            setState(2305);
            symbolicSourceClause();
            break;
          }

          case 6: {
            setState(2306);
            textLengthClause();
            break;
          }

          case 7: {
            setState(2307);
            endKeyClause();
            break;
          }

          case 8: {
            setState(2308);
            statusKeyClause();
            break;
          }

          case 9: {
            setState(2309);
            messageCountClause();
            break;
          }

          default:
            break;
          }
          break;
        }

        case Cobol85Parser::ABORT:
        case Cobol85Parser::AS:
        case Cobol85Parser::ASCII:
        case Cobol85Parser::ASSOCIATED_DATA:
        case Cobol85Parser::ASSOCIATED_DATA_LENGTH:
        case Cobol85Parser::ATTRIBUTE:
        case Cobol85Parser::AUTO:
        case Cobol85Parser::AUTO_SKIP:
        case Cobol85Parser::BACKGROUND_COLOR:
        case Cobol85Parser::BACKGROUND_COLOUR:
        case Cobol85Parser::BEEP:
        case Cobol85Parser::BELL:
        case Cobol85Parser::BINARY:
        case Cobol85Parser::BIT:
        case Cobol85Parser::BLINK:
        case Cobol85Parser::BOUNDS:
        case Cobol85Parser::CAPABLE:
        case Cobol85Parser::CCSVERSION:
        case Cobol85Parser::CHANGED:
        case Cobol85Parser::CHANNEL:
        case Cobol85Parser::CLOSE_DISPOSITION:
        case Cobol85Parser::COBOL:
        case Cobol85Parser::COMMITMENT:
        case Cobol85Parser::CONTROL_POINT:
        case Cobol85Parser::CONVENTION:
        case Cobol85Parser::CRUNCH:
        case Cobol85Parser::CURSOR:
        case Cobol85Parser::DEFAULT:
        case Cobol85Parser::DEFAULT_DISPLAY:
        case Cobol85Parser::DEFINITION:
        case Cobol85Parser::DFHRESP:
        case Cobol85Parser::DFHVALUE:
        case Cobol85Parser::DISK:
        case Cobol85Parser::DONTCARE:
        case Cobol85Parser::DOUBLE:
        case Cobol85Parser::EBCDIC:
        case Cobol85Parser::EMPTY_CHECK:
        case Cobol85Parser::ENTER:
        case Cobol85Parser::ENTRY_PROCEDURE:
        case Cobol85Parser::ERASE:
        case Cobol85Parser::EOL:
        case Cobol85Parser::EOS:
        case Cobol85Parser::ESCAPE:
        case Cobol85Parser::EVENT:
        case Cobol85Parser::EXCLUSIVE:
        case Cobol85Parser::EXPORT:
        case Cobol85Parser::EXTENDED:
        case Cobol85Parser::FILLER:
        case Cobol85Parser::FOREGROUND_COLOR:
        case Cobol85Parser::FOREGROUND_COLOUR:
        case Cobol85Parser::FULL:
        case Cobol85Parser::FUNCTIONNAME:
        case Cobol85Parser::FUNCTION_POINTER:
        case Cobol85Parser::GRID:
        case Cobol85Parser::HIGHLIGHT:
        case Cobol85Parser::IMPLICIT:
        case Cobol85Parser::IMPORT:
        case Cobol85Parser::INTEGER:
        case Cobol85Parser::KEPT:
        case Cobol85Parser::KEYBOARD:
        case Cobol85Parser::LANGUAGE:
        case Cobol85Parser::LB:
        case Cobol85Parser::LD:
        case Cobol85Parser::LEFTLINE:
        case Cobol85Parser::LENGTH_CHECK:
        case Cobol85Parser::LIBACCESS:
        case Cobol85Parser::LIBPARAMETER:
        case Cobol85Parser::LIBRARY:
        case Cobol85Parser::LIST:
        case Cobol85Parser::LOCAL:
        case Cobol85Parser::LONG_DATE:
        case Cobol85Parser::LONG_TIME:
        case Cobol85Parser::LOWER:
        case Cobol85Parser::LOWLIGHT:
        case Cobol85Parser::MMDDYYYY:
        case Cobol85Parser::NAMED:
        case Cobol85Parser::NATIONAL:
        case Cobol85Parser::NATIONAL_EDITED:
        case Cobol85Parser::NETWORK:
        case Cobol85Parser::NO_ECHO:
        case Cobol85Parser::NUMERIC_DATE:
        case Cobol85Parser::NUMERIC_TIME:
        case Cobol85Parser::ODT:
        case Cobol85Parser::ORDERLY:
        case Cobol85Parser::OVERLINE:
        case Cobol85Parser::OWN:
        case Cobol85Parser::PASSWORD:
        case Cobol85Parser::PORT:
        case Cobol85Parser::PRINTER:
        case Cobol85Parser::PRIVATE:
        case Cobol85Parser::PROCESS:
        case Cobol85Parser::PROGRAM:
        case Cobol85Parser::PROMPT:
        case Cobol85Parser::READER:
        case Cobol85Parser::REMOTE:
        case Cobol85Parser::REAL:
        case Cobol85Parser::RECEIVED:
        case Cobol85Parser::RECURSIVE:
        case Cobol85Parser::REF:
        case Cobol85Parser::REMOVE:
        case Cobol85Parser::REQUIRED:
        case Cobol85Parser::REVERSE_VIDEO:
        case Cobol85Parser::SAVE:
        case Cobol85Parser::SECURE:
        case Cobol85Parser::SHARED:
        case Cobol85Parser::SHAREDBYALL:
        case Cobol85Parser::SHAREDBYRUNUNIT:
        case Cobol85Parser::SHARING:
        case Cobol85Parser::SHORT_DATE:
        case Cobol85Parser::SYMBOL:
        case Cobol85Parser::TASK:
        case Cobol85Parser::THREAD:
        case Cobol85Parser::THREAD_LOCAL:
        case Cobol85Parser::TIMER:
        case Cobol85Parser::TODAYS_DATE:
        case Cobol85Parser::TODAYS_NAME:
        case Cobol85Parser::TRUNCATED:
        case Cobol85Parser::TYPEDEF:
        case Cobol85Parser::UNDERLINE:
        case Cobol85Parser::VIRTUAL:
        case Cobol85Parser::WAIT:
        case Cobol85Parser::YEAR:
        case Cobol85Parser::YYYYMMDD:
        case Cobol85Parser::YYYYDDD:
        case Cobol85Parser::ZERO_FILL:
        case Cobol85Parser::IDENTIFIER: {
          setState(2312);
          dataDescName();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(2317);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2318);
    match(Cobol85Parser::DOT_FS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CommunicationDescriptionEntryFormat2Context ------------------------------------------------------------------

Cobol85Parser::CommunicationDescriptionEntryFormat2Context::CommunicationDescriptionEntryFormat2Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::CommunicationDescriptionEntryFormat2Context::CD() {
  return getToken(Cobol85Parser::CD, 0);
}

Cobol85Parser::CdNameContext* Cobol85Parser::CommunicationDescriptionEntryFormat2Context::cdName() {
  return getRuleContext<Cobol85Parser::CdNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::CommunicationDescriptionEntryFormat2Context::OUTPUT() {
  return getToken(Cobol85Parser::OUTPUT, 0);
}

tree::TerminalNode* Cobol85Parser::CommunicationDescriptionEntryFormat2Context::DOT_FS() {
  return getToken(Cobol85Parser::DOT_FS, 0);
}

tree::TerminalNode* Cobol85Parser::CommunicationDescriptionEntryFormat2Context::FOR() {
  return getToken(Cobol85Parser::FOR, 0);
}

std::vector<Cobol85Parser::DestinationCountClauseContext *> Cobol85Parser::CommunicationDescriptionEntryFormat2Context::destinationCountClause() {
  return getRuleContexts<Cobol85Parser::DestinationCountClauseContext>();
}

Cobol85Parser::DestinationCountClauseContext* Cobol85Parser::CommunicationDescriptionEntryFormat2Context::destinationCountClause(size_t i) {
  return getRuleContext<Cobol85Parser::DestinationCountClauseContext>(i);
}

std::vector<Cobol85Parser::TextLengthClauseContext *> Cobol85Parser::CommunicationDescriptionEntryFormat2Context::textLengthClause() {
  return getRuleContexts<Cobol85Parser::TextLengthClauseContext>();
}

Cobol85Parser::TextLengthClauseContext* Cobol85Parser::CommunicationDescriptionEntryFormat2Context::textLengthClause(size_t i) {
  return getRuleContext<Cobol85Parser::TextLengthClauseContext>(i);
}

std::vector<Cobol85Parser::StatusKeyClauseContext *> Cobol85Parser::CommunicationDescriptionEntryFormat2Context::statusKeyClause() {
  return getRuleContexts<Cobol85Parser::StatusKeyClauseContext>();
}

Cobol85Parser::StatusKeyClauseContext* Cobol85Parser::CommunicationDescriptionEntryFormat2Context::statusKeyClause(size_t i) {
  return getRuleContext<Cobol85Parser::StatusKeyClauseContext>(i);
}

std::vector<Cobol85Parser::DestinationTableClauseContext *> Cobol85Parser::CommunicationDescriptionEntryFormat2Context::destinationTableClause() {
  return getRuleContexts<Cobol85Parser::DestinationTableClauseContext>();
}

Cobol85Parser::DestinationTableClauseContext* Cobol85Parser::CommunicationDescriptionEntryFormat2Context::destinationTableClause(size_t i) {
  return getRuleContext<Cobol85Parser::DestinationTableClauseContext>(i);
}

std::vector<Cobol85Parser::ErrorKeyClauseContext *> Cobol85Parser::CommunicationDescriptionEntryFormat2Context::errorKeyClause() {
  return getRuleContexts<Cobol85Parser::ErrorKeyClauseContext>();
}

Cobol85Parser::ErrorKeyClauseContext* Cobol85Parser::CommunicationDescriptionEntryFormat2Context::errorKeyClause(size_t i) {
  return getRuleContext<Cobol85Parser::ErrorKeyClauseContext>(i);
}

std::vector<Cobol85Parser::SymbolicDestinationClauseContext *> Cobol85Parser::CommunicationDescriptionEntryFormat2Context::symbolicDestinationClause() {
  return getRuleContexts<Cobol85Parser::SymbolicDestinationClauseContext>();
}

Cobol85Parser::SymbolicDestinationClauseContext* Cobol85Parser::CommunicationDescriptionEntryFormat2Context::symbolicDestinationClause(size_t i) {
  return getRuleContext<Cobol85Parser::SymbolicDestinationClauseContext>(i);
}


size_t Cobol85Parser::CommunicationDescriptionEntryFormat2Context::getRuleIndex() const {
  return Cobol85Parser::RuleCommunicationDescriptionEntryFormat2;
}

void Cobol85Parser::CommunicationDescriptionEntryFormat2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCommunicationDescriptionEntryFormat2(this);
}

void Cobol85Parser::CommunicationDescriptionEntryFormat2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCommunicationDescriptionEntryFormat2(this);
}

Cobol85Parser::CommunicationDescriptionEntryFormat2Context* Cobol85Parser::communicationDescriptionEntryFormat2() {
  CommunicationDescriptionEntryFormat2Context *_localctx = _tracker.createInstance<CommunicationDescriptionEntryFormat2Context>(_ctx, getState());
  enterRule(_localctx, 222, Cobol85Parser::RuleCommunicationDescriptionEntryFormat2);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2320);
    match(Cobol85Parser::CD);
    setState(2321);
    cdName();
    setState(2323);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::FOR) {
      setState(2322);
      match(Cobol85Parser::FOR);
    }
    setState(2325);
    match(Cobol85Parser::OUTPUT);
    setState(2334);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Cobol85Parser::DESTINATION

    || _la == Cobol85Parser::ERROR || ((((_la - 457) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 457)) & 2098177) != 0)) {
      setState(2332);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 236, _ctx)) {
      case 1: {
        setState(2326);
        destinationCountClause();
        break;
      }

      case 2: {
        setState(2327);
        textLengthClause();
        break;
      }

      case 3: {
        setState(2328);
        statusKeyClause();
        break;
      }

      case 4: {
        setState(2329);
        destinationTableClause();
        break;
      }

      case 5: {
        setState(2330);
        errorKeyClause();
        break;
      }

      case 6: {
        setState(2331);
        symbolicDestinationClause();
        break;
      }

      default:
        break;
      }
      setState(2336);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2337);
    match(Cobol85Parser::DOT_FS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CommunicationDescriptionEntryFormat3Context ------------------------------------------------------------------

Cobol85Parser::CommunicationDescriptionEntryFormat3Context::CommunicationDescriptionEntryFormat3Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::CommunicationDescriptionEntryFormat3Context::CD() {
  return getToken(Cobol85Parser::CD, 0);
}

Cobol85Parser::CdNameContext* Cobol85Parser::CommunicationDescriptionEntryFormat3Context::cdName() {
  return getRuleContext<Cobol85Parser::CdNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::CommunicationDescriptionEntryFormat3Context::INITIAL() {
  return getToken(Cobol85Parser::INITIAL, 0);
}

tree::TerminalNode* Cobol85Parser::CommunicationDescriptionEntryFormat3Context::I_O() {
  return getToken(Cobol85Parser::I_O, 0);
}

tree::TerminalNode* Cobol85Parser::CommunicationDescriptionEntryFormat3Context::DOT_FS() {
  return getToken(Cobol85Parser::DOT_FS, 0);
}

tree::TerminalNode* Cobol85Parser::CommunicationDescriptionEntryFormat3Context::FOR() {
  return getToken(Cobol85Parser::FOR, 0);
}

std::vector<Cobol85Parser::DataDescNameContext *> Cobol85Parser::CommunicationDescriptionEntryFormat3Context::dataDescName() {
  return getRuleContexts<Cobol85Parser::DataDescNameContext>();
}

Cobol85Parser::DataDescNameContext* Cobol85Parser::CommunicationDescriptionEntryFormat3Context::dataDescName(size_t i) {
  return getRuleContext<Cobol85Parser::DataDescNameContext>(i);
}

std::vector<Cobol85Parser::MessageDateClauseContext *> Cobol85Parser::CommunicationDescriptionEntryFormat3Context::messageDateClause() {
  return getRuleContexts<Cobol85Parser::MessageDateClauseContext>();
}

Cobol85Parser::MessageDateClauseContext* Cobol85Parser::CommunicationDescriptionEntryFormat3Context::messageDateClause(size_t i) {
  return getRuleContext<Cobol85Parser::MessageDateClauseContext>(i);
}

std::vector<Cobol85Parser::MessageTimeClauseContext *> Cobol85Parser::CommunicationDescriptionEntryFormat3Context::messageTimeClause() {
  return getRuleContexts<Cobol85Parser::MessageTimeClauseContext>();
}

Cobol85Parser::MessageTimeClauseContext* Cobol85Parser::CommunicationDescriptionEntryFormat3Context::messageTimeClause(size_t i) {
  return getRuleContext<Cobol85Parser::MessageTimeClauseContext>(i);
}

std::vector<Cobol85Parser::SymbolicTerminalClauseContext *> Cobol85Parser::CommunicationDescriptionEntryFormat3Context::symbolicTerminalClause() {
  return getRuleContexts<Cobol85Parser::SymbolicTerminalClauseContext>();
}

Cobol85Parser::SymbolicTerminalClauseContext* Cobol85Parser::CommunicationDescriptionEntryFormat3Context::symbolicTerminalClause(size_t i) {
  return getRuleContext<Cobol85Parser::SymbolicTerminalClauseContext>(i);
}

std::vector<Cobol85Parser::TextLengthClauseContext *> Cobol85Parser::CommunicationDescriptionEntryFormat3Context::textLengthClause() {
  return getRuleContexts<Cobol85Parser::TextLengthClauseContext>();
}

Cobol85Parser::TextLengthClauseContext* Cobol85Parser::CommunicationDescriptionEntryFormat3Context::textLengthClause(size_t i) {
  return getRuleContext<Cobol85Parser::TextLengthClauseContext>(i);
}

std::vector<Cobol85Parser::EndKeyClauseContext *> Cobol85Parser::CommunicationDescriptionEntryFormat3Context::endKeyClause() {
  return getRuleContexts<Cobol85Parser::EndKeyClauseContext>();
}

Cobol85Parser::EndKeyClauseContext* Cobol85Parser::CommunicationDescriptionEntryFormat3Context::endKeyClause(size_t i) {
  return getRuleContext<Cobol85Parser::EndKeyClauseContext>(i);
}

std::vector<Cobol85Parser::StatusKeyClauseContext *> Cobol85Parser::CommunicationDescriptionEntryFormat3Context::statusKeyClause() {
  return getRuleContexts<Cobol85Parser::StatusKeyClauseContext>();
}

Cobol85Parser::StatusKeyClauseContext* Cobol85Parser::CommunicationDescriptionEntryFormat3Context::statusKeyClause(size_t i) {
  return getRuleContext<Cobol85Parser::StatusKeyClauseContext>(i);
}


size_t Cobol85Parser::CommunicationDescriptionEntryFormat3Context::getRuleIndex() const {
  return Cobol85Parser::RuleCommunicationDescriptionEntryFormat3;
}

void Cobol85Parser::CommunicationDescriptionEntryFormat3Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCommunicationDescriptionEntryFormat3(this);
}

void Cobol85Parser::CommunicationDescriptionEntryFormat3Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCommunicationDescriptionEntryFormat3(this);
}

Cobol85Parser::CommunicationDescriptionEntryFormat3Context* Cobol85Parser::communicationDescriptionEntryFormat3() {
  CommunicationDescriptionEntryFormat3Context *_localctx = _tracker.createInstance<CommunicationDescriptionEntryFormat3Context>(_ctx, getState());
  enterRule(_localctx, 224, Cobol85Parser::RuleCommunicationDescriptionEntryFormat3);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2339);
    match(Cobol85Parser::CD);
    setState(2340);
    cdName();
    setState(2342);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::FOR) {
      setState(2341);
      match(Cobol85Parser::FOR);
    }
    setState(2344);
    match(Cobol85Parser::INITIAL);
    setState(2345);
    match(Cobol85Parser::I_O);
    setState(2357);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3512999431135821826) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 8070451912006173187) != 0) || ((((_la - 138) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 138)) & 5276573893884388107) != 0) || ((((_la - 202) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 202)) & -3098194965423761343) != 0) || ((((_la - 268) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 268)) & -9202532752044752779) != 0) || ((((_la - 336) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 336)) & 4647874433930428483) != 0) || ((((_la - 401) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 401)) & 72057678864072705) != 0) || ((((_la - 466) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 466)) & 103635575018459779) != 0) || _la == Cobol85Parser::IDENTIFIER) {
      setState(2355);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case Cobol85Parser::END:
        case Cobol85Parser::MESSAGE:
        case Cobol85Parser::STATUS:
        case Cobol85Parser::SYMBOLIC:
        case Cobol85Parser::TERMINAL:
        case Cobol85Parser::TEXT: {
          setState(2352);
          _errHandler->sync(this);
          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 239, _ctx)) {
          case 1: {
            setState(2346);
            messageDateClause();
            break;
          }

          case 2: {
            setState(2347);
            messageTimeClause();
            break;
          }

          case 3: {
            setState(2348);
            symbolicTerminalClause();
            break;
          }

          case 4: {
            setState(2349);
            textLengthClause();
            break;
          }

          case 5: {
            setState(2350);
            endKeyClause();
            break;
          }

          case 6: {
            setState(2351);
            statusKeyClause();
            break;
          }

          default:
            break;
          }
          break;
        }

        case Cobol85Parser::ABORT:
        case Cobol85Parser::AS:
        case Cobol85Parser::ASCII:
        case Cobol85Parser::ASSOCIATED_DATA:
        case Cobol85Parser::ASSOCIATED_DATA_LENGTH:
        case Cobol85Parser::ATTRIBUTE:
        case Cobol85Parser::AUTO:
        case Cobol85Parser::AUTO_SKIP:
        case Cobol85Parser::BACKGROUND_COLOR:
        case Cobol85Parser::BACKGROUND_COLOUR:
        case Cobol85Parser::BEEP:
        case Cobol85Parser::BELL:
        case Cobol85Parser::BINARY:
        case Cobol85Parser::BIT:
        case Cobol85Parser::BLINK:
        case Cobol85Parser::BOUNDS:
        case Cobol85Parser::CAPABLE:
        case Cobol85Parser::CCSVERSION:
        case Cobol85Parser::CHANGED:
        case Cobol85Parser::CHANNEL:
        case Cobol85Parser::CLOSE_DISPOSITION:
        case Cobol85Parser::COBOL:
        case Cobol85Parser::COMMITMENT:
        case Cobol85Parser::CONTROL_POINT:
        case Cobol85Parser::CONVENTION:
        case Cobol85Parser::CRUNCH:
        case Cobol85Parser::CURSOR:
        case Cobol85Parser::DEFAULT:
        case Cobol85Parser::DEFAULT_DISPLAY:
        case Cobol85Parser::DEFINITION:
        case Cobol85Parser::DFHRESP:
        case Cobol85Parser::DFHVALUE:
        case Cobol85Parser::DISK:
        case Cobol85Parser::DONTCARE:
        case Cobol85Parser::DOUBLE:
        case Cobol85Parser::EBCDIC:
        case Cobol85Parser::EMPTY_CHECK:
        case Cobol85Parser::ENTER:
        case Cobol85Parser::ENTRY_PROCEDURE:
        case Cobol85Parser::ERASE:
        case Cobol85Parser::EOL:
        case Cobol85Parser::EOS:
        case Cobol85Parser::ESCAPE:
        case Cobol85Parser::EVENT:
        case Cobol85Parser::EXCLUSIVE:
        case Cobol85Parser::EXPORT:
        case Cobol85Parser::EXTENDED:
        case Cobol85Parser::FILLER:
        case Cobol85Parser::FOREGROUND_COLOR:
        case Cobol85Parser::FOREGROUND_COLOUR:
        case Cobol85Parser::FULL:
        case Cobol85Parser::FUNCTIONNAME:
        case Cobol85Parser::FUNCTION_POINTER:
        case Cobol85Parser::GRID:
        case Cobol85Parser::HIGHLIGHT:
        case Cobol85Parser::IMPLICIT:
        case Cobol85Parser::IMPORT:
        case Cobol85Parser::INTEGER:
        case Cobol85Parser::KEPT:
        case Cobol85Parser::KEYBOARD:
        case Cobol85Parser::LANGUAGE:
        case Cobol85Parser::LB:
        case Cobol85Parser::LD:
        case Cobol85Parser::LEFTLINE:
        case Cobol85Parser::LENGTH_CHECK:
        case Cobol85Parser::LIBACCESS:
        case Cobol85Parser::LIBPARAMETER:
        case Cobol85Parser::LIBRARY:
        case Cobol85Parser::LIST:
        case Cobol85Parser::LOCAL:
        case Cobol85Parser::LONG_DATE:
        case Cobol85Parser::LONG_TIME:
        case Cobol85Parser::LOWER:
        case Cobol85Parser::LOWLIGHT:
        case Cobol85Parser::MMDDYYYY:
        case Cobol85Parser::NAMED:
        case Cobol85Parser::NATIONAL:
        case Cobol85Parser::NATIONAL_EDITED:
        case Cobol85Parser::NETWORK:
        case Cobol85Parser::NO_ECHO:
        case Cobol85Parser::NUMERIC_DATE:
        case Cobol85Parser::NUMERIC_TIME:
        case Cobol85Parser::ODT:
        case Cobol85Parser::ORDERLY:
        case Cobol85Parser::OVERLINE:
        case Cobol85Parser::OWN:
        case Cobol85Parser::PASSWORD:
        case Cobol85Parser::PORT:
        case Cobol85Parser::PRINTER:
        case Cobol85Parser::PRIVATE:
        case Cobol85Parser::PROCESS:
        case Cobol85Parser::PROGRAM:
        case Cobol85Parser::PROMPT:
        case Cobol85Parser::READER:
        case Cobol85Parser::REMOTE:
        case Cobol85Parser::REAL:
        case Cobol85Parser::RECEIVED:
        case Cobol85Parser::RECURSIVE:
        case Cobol85Parser::REF:
        case Cobol85Parser::REMOVE:
        case Cobol85Parser::REQUIRED:
        case Cobol85Parser::REVERSE_VIDEO:
        case Cobol85Parser::SAVE:
        case Cobol85Parser::SECURE:
        case Cobol85Parser::SHARED:
        case Cobol85Parser::SHAREDBYALL:
        case Cobol85Parser::SHAREDBYRUNUNIT:
        case Cobol85Parser::SHARING:
        case Cobol85Parser::SHORT_DATE:
        case Cobol85Parser::SYMBOL:
        case Cobol85Parser::TASK:
        case Cobol85Parser::THREAD:
        case Cobol85Parser::THREAD_LOCAL:
        case Cobol85Parser::TIMER:
        case Cobol85Parser::TODAYS_DATE:
        case Cobol85Parser::TODAYS_NAME:
        case Cobol85Parser::TRUNCATED:
        case Cobol85Parser::TYPEDEF:
        case Cobol85Parser::UNDERLINE:
        case Cobol85Parser::VIRTUAL:
        case Cobol85Parser::WAIT:
        case Cobol85Parser::YEAR:
        case Cobol85Parser::YYYYMMDD:
        case Cobol85Parser::YYYYDDD:
        case Cobol85Parser::ZERO_FILL:
        case Cobol85Parser::IDENTIFIER: {
          setState(2354);
          dataDescName();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(2359);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2360);
    match(Cobol85Parser::DOT_FS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DestinationCountClauseContext ------------------------------------------------------------------

Cobol85Parser::DestinationCountClauseContext::DestinationCountClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::DestinationCountClauseContext::DESTINATION() {
  return getToken(Cobol85Parser::DESTINATION, 0);
}

tree::TerminalNode* Cobol85Parser::DestinationCountClauseContext::COUNT() {
  return getToken(Cobol85Parser::COUNT, 0);
}

Cobol85Parser::DataDescNameContext* Cobol85Parser::DestinationCountClauseContext::dataDescName() {
  return getRuleContext<Cobol85Parser::DataDescNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::DestinationCountClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}


size_t Cobol85Parser::DestinationCountClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleDestinationCountClause;
}

void Cobol85Parser::DestinationCountClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDestinationCountClause(this);
}

void Cobol85Parser::DestinationCountClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDestinationCountClause(this);
}

Cobol85Parser::DestinationCountClauseContext* Cobol85Parser::destinationCountClause() {
  DestinationCountClauseContext *_localctx = _tracker.createInstance<DestinationCountClauseContext>(_ctx, getState());
  enterRule(_localctx, 226, Cobol85Parser::RuleDestinationCountClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2362);
    match(Cobol85Parser::DESTINATION);
    setState(2363);
    match(Cobol85Parser::COUNT);
    setState(2365);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(2364);
      match(Cobol85Parser::IS);
    }
    setState(2367);
    dataDescName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DestinationTableClauseContext ------------------------------------------------------------------

Cobol85Parser::DestinationTableClauseContext::DestinationTableClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::DestinationTableClauseContext::DESTINATION() {
  return getToken(Cobol85Parser::DESTINATION, 0);
}

tree::TerminalNode* Cobol85Parser::DestinationTableClauseContext::TABLE() {
  return getToken(Cobol85Parser::TABLE, 0);
}

tree::TerminalNode* Cobol85Parser::DestinationTableClauseContext::OCCURS() {
  return getToken(Cobol85Parser::OCCURS, 0);
}

Cobol85Parser::IntegerLiteralContext* Cobol85Parser::DestinationTableClauseContext::integerLiteral() {
  return getRuleContext<Cobol85Parser::IntegerLiteralContext>(0);
}

tree::TerminalNode* Cobol85Parser::DestinationTableClauseContext::TIMES() {
  return getToken(Cobol85Parser::TIMES, 0);
}

tree::TerminalNode* Cobol85Parser::DestinationTableClauseContext::INDEXED() {
  return getToken(Cobol85Parser::INDEXED, 0);
}

tree::TerminalNode* Cobol85Parser::DestinationTableClauseContext::BY() {
  return getToken(Cobol85Parser::BY, 0);
}

std::vector<Cobol85Parser::IndexNameContext *> Cobol85Parser::DestinationTableClauseContext::indexName() {
  return getRuleContexts<Cobol85Parser::IndexNameContext>();
}

Cobol85Parser::IndexNameContext* Cobol85Parser::DestinationTableClauseContext::indexName(size_t i) {
  return getRuleContext<Cobol85Parser::IndexNameContext>(i);
}


size_t Cobol85Parser::DestinationTableClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleDestinationTableClause;
}

void Cobol85Parser::DestinationTableClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDestinationTableClause(this);
}

void Cobol85Parser::DestinationTableClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDestinationTableClause(this);
}

Cobol85Parser::DestinationTableClauseContext* Cobol85Parser::destinationTableClause() {
  DestinationTableClauseContext *_localctx = _tracker.createInstance<DestinationTableClauseContext>(_ctx, getState());
  enterRule(_localctx, 228, Cobol85Parser::RuleDestinationTableClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2369);
    match(Cobol85Parser::DESTINATION);
    setState(2370);
    match(Cobol85Parser::TABLE);
    setState(2371);
    match(Cobol85Parser::OCCURS);
    setState(2372);
    integerLiteral();
    setState(2373);
    match(Cobol85Parser::TIMES);
    setState(2381);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::INDEXED) {
      setState(2374);
      match(Cobol85Parser::INDEXED);
      setState(2375);
      match(Cobol85Parser::BY);
      setState(2377); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(2376);
        indexName();
        setState(2379); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 3512999431135821826) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 68)) & 8070451912006173187) != 0) || ((((_la - 138) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 138)) & 5276573893883339531) != 0) || ((((_la - 202) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 202)) & -3098194965423761407) != 0) || ((((_la - 268) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 268)) & -9202532752178970507) != 0) || ((((_la - 336) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 336)) & 4647874433930428483) != 0) || ((((_la - 401) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 401)) & 84826144769) != 0) || ((((_la - 466) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 466)) & 103635575018455169) != 0) || _la == Cobol85Parser::IDENTIFIER);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EndKeyClauseContext ------------------------------------------------------------------

Cobol85Parser::EndKeyClauseContext::EndKeyClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::EndKeyClauseContext::END() {
  return getToken(Cobol85Parser::END, 0);
}

tree::TerminalNode* Cobol85Parser::EndKeyClauseContext::KEY() {
  return getToken(Cobol85Parser::KEY, 0);
}

Cobol85Parser::DataDescNameContext* Cobol85Parser::EndKeyClauseContext::dataDescName() {
  return getRuleContext<Cobol85Parser::DataDescNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::EndKeyClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}


size_t Cobol85Parser::EndKeyClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleEndKeyClause;
}

void Cobol85Parser::EndKeyClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEndKeyClause(this);
}

void Cobol85Parser::EndKeyClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEndKeyClause(this);
}

Cobol85Parser::EndKeyClauseContext* Cobol85Parser::endKeyClause() {
  EndKeyClauseContext *_localctx = _tracker.createInstance<EndKeyClauseContext>(_ctx, getState());
  enterRule(_localctx, 230, Cobol85Parser::RuleEndKeyClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2383);
    match(Cobol85Parser::END);
    setState(2384);
    match(Cobol85Parser::KEY);
    setState(2386);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(2385);
      match(Cobol85Parser::IS);
    }
    setState(2388);
    dataDescName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ErrorKeyClauseContext ------------------------------------------------------------------

Cobol85Parser::ErrorKeyClauseContext::ErrorKeyClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ErrorKeyClauseContext::ERROR() {
  return getToken(Cobol85Parser::ERROR, 0);
}

tree::TerminalNode* Cobol85Parser::ErrorKeyClauseContext::KEY() {
  return getToken(Cobol85Parser::KEY, 0);
}

Cobol85Parser::DataDescNameContext* Cobol85Parser::ErrorKeyClauseContext::dataDescName() {
  return getRuleContext<Cobol85Parser::DataDescNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::ErrorKeyClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}


size_t Cobol85Parser::ErrorKeyClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleErrorKeyClause;
}

void Cobol85Parser::ErrorKeyClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterErrorKeyClause(this);
}

void Cobol85Parser::ErrorKeyClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitErrorKeyClause(this);
}

Cobol85Parser::ErrorKeyClauseContext* Cobol85Parser::errorKeyClause() {
  ErrorKeyClauseContext *_localctx = _tracker.createInstance<ErrorKeyClauseContext>(_ctx, getState());
  enterRule(_localctx, 232, Cobol85Parser::RuleErrorKeyClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2390);
    match(Cobol85Parser::ERROR);
    setState(2391);
    match(Cobol85Parser::KEY);
    setState(2393);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(2392);
      match(Cobol85Parser::IS);
    }
    setState(2395);
    dataDescName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MessageCountClauseContext ------------------------------------------------------------------

Cobol85Parser::MessageCountClauseContext::MessageCountClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::MessageCountClauseContext::COUNT() {
  return getToken(Cobol85Parser::COUNT, 0);
}

Cobol85Parser::DataDescNameContext* Cobol85Parser::MessageCountClauseContext::dataDescName() {
  return getRuleContext<Cobol85Parser::DataDescNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::MessageCountClauseContext::MESSAGE() {
  return getToken(Cobol85Parser::MESSAGE, 0);
}

tree::TerminalNode* Cobol85Parser::MessageCountClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}


size_t Cobol85Parser::MessageCountClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleMessageCountClause;
}

void Cobol85Parser::MessageCountClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMessageCountClause(this);
}

void Cobol85Parser::MessageCountClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMessageCountClause(this);
}

Cobol85Parser::MessageCountClauseContext* Cobol85Parser::messageCountClause() {
  MessageCountClauseContext *_localctx = _tracker.createInstance<MessageCountClauseContext>(_ctx, getState());
  enterRule(_localctx, 234, Cobol85Parser::RuleMessageCountClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2398);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::MESSAGE) {
      setState(2397);
      match(Cobol85Parser::MESSAGE);
    }
    setState(2400);
    match(Cobol85Parser::COUNT);
    setState(2402);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(2401);
      match(Cobol85Parser::IS);
    }
    setState(2404);
    dataDescName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MessageDateClauseContext ------------------------------------------------------------------

Cobol85Parser::MessageDateClauseContext::MessageDateClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::MessageDateClauseContext::MESSAGE() {
  return getToken(Cobol85Parser::MESSAGE, 0);
}

tree::TerminalNode* Cobol85Parser::MessageDateClauseContext::DATE() {
  return getToken(Cobol85Parser::DATE, 0);
}

Cobol85Parser::DataDescNameContext* Cobol85Parser::MessageDateClauseContext::dataDescName() {
  return getRuleContext<Cobol85Parser::DataDescNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::MessageDateClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}


size_t Cobol85Parser::MessageDateClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleMessageDateClause;
}

void Cobol85Parser::MessageDateClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMessageDateClause(this);
}

void Cobol85Parser::MessageDateClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMessageDateClause(this);
}

Cobol85Parser::MessageDateClauseContext* Cobol85Parser::messageDateClause() {
  MessageDateClauseContext *_localctx = _tracker.createInstance<MessageDateClauseContext>(_ctx, getState());
  enterRule(_localctx, 236, Cobol85Parser::RuleMessageDateClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2406);
    match(Cobol85Parser::MESSAGE);
    setState(2407);
    match(Cobol85Parser::DATE);
    setState(2409);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(2408);
      match(Cobol85Parser::IS);
    }
    setState(2411);
    dataDescName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MessageTimeClauseContext ------------------------------------------------------------------

Cobol85Parser::MessageTimeClauseContext::MessageTimeClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::MessageTimeClauseContext::MESSAGE() {
  return getToken(Cobol85Parser::MESSAGE, 0);
}

tree::TerminalNode* Cobol85Parser::MessageTimeClauseContext::TIME() {
  return getToken(Cobol85Parser::TIME, 0);
}

Cobol85Parser::DataDescNameContext* Cobol85Parser::MessageTimeClauseContext::dataDescName() {
  return getRuleContext<Cobol85Parser::DataDescNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::MessageTimeClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}


size_t Cobol85Parser::MessageTimeClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleMessageTimeClause;
}

void Cobol85Parser::MessageTimeClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMessageTimeClause(this);
}

void Cobol85Parser::MessageTimeClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMessageTimeClause(this);
}

Cobol85Parser::MessageTimeClauseContext* Cobol85Parser::messageTimeClause() {
  MessageTimeClauseContext *_localctx = _tracker.createInstance<MessageTimeClauseContext>(_ctx, getState());
  enterRule(_localctx, 238, Cobol85Parser::RuleMessageTimeClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2413);
    match(Cobol85Parser::MESSAGE);
    setState(2414);
    match(Cobol85Parser::TIME);
    setState(2416);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(2415);
      match(Cobol85Parser::IS);
    }
    setState(2418);
    dataDescName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatusKeyClauseContext ------------------------------------------------------------------

Cobol85Parser::StatusKeyClauseContext::StatusKeyClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::StatusKeyClauseContext::STATUS() {
  return getToken(Cobol85Parser::STATUS, 0);
}

tree::TerminalNode* Cobol85Parser::StatusKeyClauseContext::KEY() {
  return getToken(Cobol85Parser::KEY, 0);
}

Cobol85Parser::DataDescNameContext* Cobol85Parser::StatusKeyClauseContext::dataDescName() {
  return getRuleContext<Cobol85Parser::DataDescNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::StatusKeyClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}


size_t Cobol85Parser::StatusKeyClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleStatusKeyClause;
}

void Cobol85Parser::StatusKeyClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatusKeyClause(this);
}

void Cobol85Parser::StatusKeyClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatusKeyClause(this);
}

Cobol85Parser::StatusKeyClauseContext* Cobol85Parser::statusKeyClause() {
  StatusKeyClauseContext *_localctx = _tracker.createInstance<StatusKeyClauseContext>(_ctx, getState());
  enterRule(_localctx, 240, Cobol85Parser::RuleStatusKeyClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2420);
    match(Cobol85Parser::STATUS);
    setState(2421);
    match(Cobol85Parser::KEY);
    setState(2423);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(2422);
      match(Cobol85Parser::IS);
    }
    setState(2425);
    dataDescName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SymbolicDestinationClauseContext ------------------------------------------------------------------

Cobol85Parser::SymbolicDestinationClauseContext::SymbolicDestinationClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::SymbolicDestinationClauseContext::DESTINATION() {
  return getToken(Cobol85Parser::DESTINATION, 0);
}

Cobol85Parser::DataDescNameContext* Cobol85Parser::SymbolicDestinationClauseContext::dataDescName() {
  return getRuleContext<Cobol85Parser::DataDescNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::SymbolicDestinationClauseContext::SYMBOLIC() {
  return getToken(Cobol85Parser::SYMBOLIC, 0);
}

tree::TerminalNode* Cobol85Parser::SymbolicDestinationClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}


size_t Cobol85Parser::SymbolicDestinationClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleSymbolicDestinationClause;
}

void Cobol85Parser::SymbolicDestinationClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSymbolicDestinationClause(this);
}

void Cobol85Parser::SymbolicDestinationClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSymbolicDestinationClause(this);
}

Cobol85Parser::SymbolicDestinationClauseContext* Cobol85Parser::symbolicDestinationClause() {
  SymbolicDestinationClauseContext *_localctx = _tracker.createInstance<SymbolicDestinationClauseContext>(_ctx, getState());
  enterRule(_localctx, 242, Cobol85Parser::RuleSymbolicDestinationClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2428);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::SYMBOLIC) {
      setState(2427);
      match(Cobol85Parser::SYMBOLIC);
    }
    setState(2430);
    match(Cobol85Parser::DESTINATION);
    setState(2432);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(2431);
      match(Cobol85Parser::IS);
    }
    setState(2434);
    dataDescName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SymbolicQueueClauseContext ------------------------------------------------------------------

Cobol85Parser::SymbolicQueueClauseContext::SymbolicQueueClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::SymbolicQueueClauseContext::QUEUE() {
  return getToken(Cobol85Parser::QUEUE, 0);
}

Cobol85Parser::DataDescNameContext* Cobol85Parser::SymbolicQueueClauseContext::dataDescName() {
  return getRuleContext<Cobol85Parser::DataDescNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::SymbolicQueueClauseContext::SYMBOLIC() {
  return getToken(Cobol85Parser::SYMBOLIC, 0);
}

tree::TerminalNode* Cobol85Parser::SymbolicQueueClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}


size_t Cobol85Parser::SymbolicQueueClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleSymbolicQueueClause;
}

void Cobol85Parser::SymbolicQueueClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSymbolicQueueClause(this);
}

void Cobol85Parser::SymbolicQueueClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSymbolicQueueClause(this);
}

Cobol85Parser::SymbolicQueueClauseContext* Cobol85Parser::symbolicQueueClause() {
  SymbolicQueueClauseContext *_localctx = _tracker.createInstance<SymbolicQueueClauseContext>(_ctx, getState());
  enterRule(_localctx, 244, Cobol85Parser::RuleSymbolicQueueClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2437);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::SYMBOLIC) {
      setState(2436);
      match(Cobol85Parser::SYMBOLIC);
    }
    setState(2439);
    match(Cobol85Parser::QUEUE);
    setState(2441);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(2440);
      match(Cobol85Parser::IS);
    }
    setState(2443);
    dataDescName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SymbolicSourceClauseContext ------------------------------------------------------------------

Cobol85Parser::SymbolicSourceClauseContext::SymbolicSourceClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::SymbolicSourceClauseContext::SOURCE() {
  return getToken(Cobol85Parser::SOURCE, 0);
}

Cobol85Parser::DataDescNameContext* Cobol85Parser::SymbolicSourceClauseContext::dataDescName() {
  return getRuleContext<Cobol85Parser::DataDescNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::SymbolicSourceClauseContext::SYMBOLIC() {
  return getToken(Cobol85Parser::SYMBOLIC, 0);
}

tree::TerminalNode* Cobol85Parser::SymbolicSourceClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}


size_t Cobol85Parser::SymbolicSourceClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleSymbolicSourceClause;
}

void Cobol85Parser::SymbolicSourceClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSymbolicSourceClause(this);
}

void Cobol85Parser::SymbolicSourceClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSymbolicSourceClause(this);
}

Cobol85Parser::SymbolicSourceClauseContext* Cobol85Parser::symbolicSourceClause() {
  SymbolicSourceClauseContext *_localctx = _tracker.createInstance<SymbolicSourceClauseContext>(_ctx, getState());
  enterRule(_localctx, 246, Cobol85Parser::RuleSymbolicSourceClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2446);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::SYMBOLIC) {
      setState(2445);
      match(Cobol85Parser::SYMBOLIC);
    }
    setState(2448);
    match(Cobol85Parser::SOURCE);
    setState(2450);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(2449);
      match(Cobol85Parser::IS);
    }
    setState(2452);
    dataDescName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SymbolicTerminalClauseContext ------------------------------------------------------------------

Cobol85Parser::SymbolicTerminalClauseContext::SymbolicTerminalClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::SymbolicTerminalClauseContext::TERMINAL() {
  return getToken(Cobol85Parser::TERMINAL, 0);
}

Cobol85Parser::DataDescNameContext* Cobol85Parser::SymbolicTerminalClauseContext::dataDescName() {
  return getRuleContext<Cobol85Parser::DataDescNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::SymbolicTerminalClauseContext::SYMBOLIC() {
  return getToken(Cobol85Parser::SYMBOLIC, 0);
}

tree::TerminalNode* Cobol85Parser::SymbolicTerminalClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}


size_t Cobol85Parser::SymbolicTerminalClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleSymbolicTerminalClause;
}

void Cobol85Parser::SymbolicTerminalClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSymbolicTerminalClause(this);
}

void Cobol85Parser::SymbolicTerminalClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSymbolicTerminalClause(this);
}

Cobol85Parser::SymbolicTerminalClauseContext* Cobol85Parser::symbolicTerminalClause() {
  SymbolicTerminalClauseContext *_localctx = _tracker.createInstance<SymbolicTerminalClauseContext>(_ctx, getState());
  enterRule(_localctx, 248, Cobol85Parser::RuleSymbolicTerminalClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2455);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::SYMBOLIC) {
      setState(2454);
      match(Cobol85Parser::SYMBOLIC);
    }
    setState(2457);
    match(Cobol85Parser::TERMINAL);
    setState(2459);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(2458);
      match(Cobol85Parser::IS);
    }
    setState(2461);
    dataDescName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SymbolicSubQueueClauseContext ------------------------------------------------------------------

Cobol85Parser::SymbolicSubQueueClauseContext::SymbolicSubQueueClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::DataDescNameContext* Cobol85Parser::SymbolicSubQueueClauseContext::dataDescName() {
  return getRuleContext<Cobol85Parser::DataDescNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::SymbolicSubQueueClauseContext::SUB_QUEUE_1() {
  return getToken(Cobol85Parser::SUB_QUEUE_1, 0);
}

tree::TerminalNode* Cobol85Parser::SymbolicSubQueueClauseContext::SUB_QUEUE_2() {
  return getToken(Cobol85Parser::SUB_QUEUE_2, 0);
}

tree::TerminalNode* Cobol85Parser::SymbolicSubQueueClauseContext::SUB_QUEUE_3() {
  return getToken(Cobol85Parser::SUB_QUEUE_3, 0);
}

tree::TerminalNode* Cobol85Parser::SymbolicSubQueueClauseContext::SYMBOLIC() {
  return getToken(Cobol85Parser::SYMBOLIC, 0);
}

tree::TerminalNode* Cobol85Parser::SymbolicSubQueueClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}


size_t Cobol85Parser::SymbolicSubQueueClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleSymbolicSubQueueClause;
}

void Cobol85Parser::SymbolicSubQueueClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSymbolicSubQueueClause(this);
}

void Cobol85Parser::SymbolicSubQueueClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSymbolicSubQueueClause(this);
}

Cobol85Parser::SymbolicSubQueueClauseContext* Cobol85Parser::symbolicSubQueueClause() {
  SymbolicSubQueueClauseContext *_localctx = _tracker.createInstance<SymbolicSubQueueClauseContext>(_ctx, getState());
  enterRule(_localctx, 250, Cobol85Parser::RuleSymbolicSubQueueClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2464);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::SYMBOLIC) {
      setState(2463);
      match(Cobol85Parser::SYMBOLIC);
    }
    setState(2466);
    _la = _input->LA(1);
    if (!(((((_la - 460) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 460)) & 7) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(2468);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(2467);
      match(Cobol85Parser::IS);
    }
    setState(2470);
    dataDescName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TextLengthClauseContext ------------------------------------------------------------------

Cobol85Parser::TextLengthClauseContext::TextLengthClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::TextLengthClauseContext::TEXT() {
  return getToken(Cobol85Parser::TEXT, 0);
}

tree::TerminalNode* Cobol85Parser::TextLengthClauseContext::LENGTH() {
  return getToken(Cobol85Parser::LENGTH, 0);
}

Cobol85Parser::DataDescNameContext* Cobol85Parser::TextLengthClauseContext::dataDescName() {
  return getRuleContext<Cobol85Parser::DataDescNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::TextLengthClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}


size_t Cobol85Parser::TextLengthClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleTextLengthClause;
}

void Cobol85Parser::TextLengthClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTextLengthClause(this);
}

void Cobol85Parser::TextLengthClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTextLengthClause(this);
}

Cobol85Parser::TextLengthClauseContext* Cobol85Parser::textLengthClause() {
  TextLengthClauseContext *_localctx = _tracker.createInstance<TextLengthClauseContext>(_ctx, getState());
  enterRule(_localctx, 252, Cobol85Parser::RuleTextLengthClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2472);
    match(Cobol85Parser::TEXT);
    setState(2473);
    match(Cobol85Parser::LENGTH);
    setState(2475);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(2474);
      match(Cobol85Parser::IS);
    }
    setState(2477);
    dataDescName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LocalStorageSectionContext ------------------------------------------------------------------

Cobol85Parser::LocalStorageSectionContext::LocalStorageSectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::LocalStorageSectionContext::LOCAL_STORAGE() {
  return getToken(Cobol85Parser::LOCAL_STORAGE, 0);
}

tree::TerminalNode* Cobol85Parser::LocalStorageSectionContext::SECTION() {
  return getToken(Cobol85Parser::SECTION, 0);
}

std::vector<tree::TerminalNode *> Cobol85Parser::LocalStorageSectionContext::DOT_FS() {
  return getTokens(Cobol85Parser::DOT_FS);
}

tree::TerminalNode* Cobol85Parser::LocalStorageSectionContext::DOT_FS(size_t i) {
  return getToken(Cobol85Parser::DOT_FS, i);
}

tree::TerminalNode* Cobol85Parser::LocalStorageSectionContext::LD() {
  return getToken(Cobol85Parser::LD, 0);
}

Cobol85Parser::LocalNameContext* Cobol85Parser::LocalStorageSectionContext::localName() {
  return getRuleContext<Cobol85Parser::LocalNameContext>(0);
}

std::vector<Cobol85Parser::DataDescriptionEntryContext *> Cobol85Parser::LocalStorageSectionContext::dataDescriptionEntry() {
  return getRuleContexts<Cobol85Parser::DataDescriptionEntryContext>();
}

Cobol85Parser::DataDescriptionEntryContext* Cobol85Parser::LocalStorageSectionContext::dataDescriptionEntry(size_t i) {
  return getRuleContext<Cobol85Parser::DataDescriptionEntryContext>(i);
}


size_t Cobol85Parser::LocalStorageSectionContext::getRuleIndex() const {
  return Cobol85Parser::RuleLocalStorageSection;
}

void Cobol85Parser::LocalStorageSectionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLocalStorageSection(this);
}

void Cobol85Parser::LocalStorageSectionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLocalStorageSection(this);
}

Cobol85Parser::LocalStorageSectionContext* Cobol85Parser::localStorageSection() {
  LocalStorageSectionContext *_localctx = _tracker.createInstance<LocalStorageSectionContext>(_ctx, getState());
  enterRule(_localctx, 254, Cobol85Parser::RuleLocalStorageSection);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2479);
    match(Cobol85Parser::LOCAL_STORAGE);
    setState(2480);
    match(Cobol85Parser::SECTION);
    setState(2481);
    match(Cobol85Parser::DOT_FS);
    setState(2486);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::LD) {
      setState(2482);
      match(Cobol85Parser::LD);
      setState(2483);
      localName();
      setState(2484);
      match(Cobol85Parser::DOT_FS);
    }
    setState(2491);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 552) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 552)) & 527) != 0)) {
      setState(2488);
      dataDescriptionEntry();
      setState(2493);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ScreenSectionContext ------------------------------------------------------------------

Cobol85Parser::ScreenSectionContext::ScreenSectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ScreenSectionContext::SCREEN() {
  return getToken(Cobol85Parser::SCREEN, 0);
}

tree::TerminalNode* Cobol85Parser::ScreenSectionContext::SECTION() {
  return getToken(Cobol85Parser::SECTION, 0);
}

tree::TerminalNode* Cobol85Parser::ScreenSectionContext::DOT_FS() {
  return getToken(Cobol85Parser::DOT_FS, 0);
}

std::vector<Cobol85Parser::ScreenDescriptionEntryContext *> Cobol85Parser::ScreenSectionContext::screenDescriptionEntry() {
  return getRuleContexts<Cobol85Parser::ScreenDescriptionEntryContext>();
}

Cobol85Parser::ScreenDescriptionEntryContext* Cobol85Parser::ScreenSectionContext::screenDescriptionEntry(size_t i) {
  return getRuleContext<Cobol85Parser::ScreenDescriptionEntryContext>(i);
}


size_t Cobol85Parser::ScreenSectionContext::getRuleIndex() const {
  return Cobol85Parser::RuleScreenSection;
}

void Cobol85Parser::ScreenSectionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterScreenSection(this);
}

void Cobol85Parser::ScreenSectionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitScreenSection(this);
}

Cobol85Parser::ScreenSectionContext* Cobol85Parser::screenSection() {
  ScreenSectionContext *_localctx = _tracker.createInstance<ScreenSectionContext>(_ctx, getState());
  enterRule(_localctx, 256, Cobol85Parser::RuleScreenSection);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2494);
    match(Cobol85Parser::SCREEN);
    setState(2495);
    match(Cobol85Parser::SECTION);
    setState(2496);
    match(Cobol85Parser::DOT_FS);
    setState(2500);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Cobol85Parser::INTEGERLITERAL) {
      setState(2497);
      screenDescriptionEntry();
      setState(2502);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ScreenDescriptionEntryContext ------------------------------------------------------------------

Cobol85Parser::ScreenDescriptionEntryContext::ScreenDescriptionEntryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionEntryContext::INTEGERLITERAL() {
  return getToken(Cobol85Parser::INTEGERLITERAL, 0);
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionEntryContext::DOT_FS() {
  return getToken(Cobol85Parser::DOT_FS, 0);
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionEntryContext::FILLER() {
  return getToken(Cobol85Parser::FILLER, 0);
}

Cobol85Parser::ScreenNameContext* Cobol85Parser::ScreenDescriptionEntryContext::screenName() {
  return getRuleContext<Cobol85Parser::ScreenNameContext>(0);
}

std::vector<Cobol85Parser::ScreenDescriptionBlankClauseContext *> Cobol85Parser::ScreenDescriptionEntryContext::screenDescriptionBlankClause() {
  return getRuleContexts<Cobol85Parser::ScreenDescriptionBlankClauseContext>();
}

Cobol85Parser::ScreenDescriptionBlankClauseContext* Cobol85Parser::ScreenDescriptionEntryContext::screenDescriptionBlankClause(size_t i) {
  return getRuleContext<Cobol85Parser::ScreenDescriptionBlankClauseContext>(i);
}

std::vector<Cobol85Parser::ScreenDescriptionBellClauseContext *> Cobol85Parser::ScreenDescriptionEntryContext::screenDescriptionBellClause() {
  return getRuleContexts<Cobol85Parser::ScreenDescriptionBellClauseContext>();
}

Cobol85Parser::ScreenDescriptionBellClauseContext* Cobol85Parser::ScreenDescriptionEntryContext::screenDescriptionBellClause(size_t i) {
  return getRuleContext<Cobol85Parser::ScreenDescriptionBellClauseContext>(i);
}

std::vector<Cobol85Parser::ScreenDescriptionBlinkClauseContext *> Cobol85Parser::ScreenDescriptionEntryContext::screenDescriptionBlinkClause() {
  return getRuleContexts<Cobol85Parser::ScreenDescriptionBlinkClauseContext>();
}

Cobol85Parser::ScreenDescriptionBlinkClauseContext* Cobol85Parser::ScreenDescriptionEntryContext::screenDescriptionBlinkClause(size_t i) {
  return getRuleContext<Cobol85Parser::ScreenDescriptionBlinkClauseContext>(i);
}

std::vector<Cobol85Parser::ScreenDescriptionEraseClauseContext *> Cobol85Parser::ScreenDescriptionEntryContext::screenDescriptionEraseClause() {
  return getRuleContexts<Cobol85Parser::ScreenDescriptionEraseClauseContext>();
}

Cobol85Parser::ScreenDescriptionEraseClauseContext* Cobol85Parser::ScreenDescriptionEntryContext::screenDescriptionEraseClause(size_t i) {
  return getRuleContext<Cobol85Parser::ScreenDescriptionEraseClauseContext>(i);
}

std::vector<Cobol85Parser::ScreenDescriptionLightClauseContext *> Cobol85Parser::ScreenDescriptionEntryContext::screenDescriptionLightClause() {
  return getRuleContexts<Cobol85Parser::ScreenDescriptionLightClauseContext>();
}

Cobol85Parser::ScreenDescriptionLightClauseContext* Cobol85Parser::ScreenDescriptionEntryContext::screenDescriptionLightClause(size_t i) {
  return getRuleContext<Cobol85Parser::ScreenDescriptionLightClauseContext>(i);
}

std::vector<Cobol85Parser::ScreenDescriptionGridClauseContext *> Cobol85Parser::ScreenDescriptionEntryContext::screenDescriptionGridClause() {
  return getRuleContexts<Cobol85Parser::ScreenDescriptionGridClauseContext>();
}

Cobol85Parser::ScreenDescriptionGridClauseContext* Cobol85Parser::ScreenDescriptionEntryContext::screenDescriptionGridClause(size_t i) {
  return getRuleContext<Cobol85Parser::ScreenDescriptionGridClauseContext>(i);
}

std::vector<Cobol85Parser::ScreenDescriptionReverseVideoClauseContext *> Cobol85Parser::ScreenDescriptionEntryContext::screenDescriptionReverseVideoClause() {
  return getRuleContexts<Cobol85Parser::ScreenDescriptionReverseVideoClauseContext>();
}

Cobol85Parser::ScreenDescriptionReverseVideoClauseContext* Cobol85Parser::ScreenDescriptionEntryContext::screenDescriptionReverseVideoClause(size_t i) {
  return getRuleContext<Cobol85Parser::ScreenDescriptionReverseVideoClauseContext>(i);
}

std::vector<Cobol85Parser::ScreenDescriptionUnderlineClauseContext *> Cobol85Parser::ScreenDescriptionEntryContext::screenDescriptionUnderlineClause() {
  return getRuleContexts<Cobol85Parser::ScreenDescriptionUnderlineClauseContext>();
}

Cobol85Parser::ScreenDescriptionUnderlineClauseContext* Cobol85Parser::ScreenDescriptionEntryContext::screenDescriptionUnderlineClause(size_t i) {
  return getRuleContext<Cobol85Parser::ScreenDescriptionUnderlineClauseContext>(i);
}

std::vector<Cobol85Parser::ScreenDescriptionSizeClauseContext *> Cobol85Parser::ScreenDescriptionEntryContext::screenDescriptionSizeClause() {
  return getRuleContexts<Cobol85Parser::ScreenDescriptionSizeClauseContext>();
}

Cobol85Parser::ScreenDescriptionSizeClauseContext* Cobol85Parser::ScreenDescriptionEntryContext::screenDescriptionSizeClause(size_t i) {
  return getRuleContext<Cobol85Parser::ScreenDescriptionSizeClauseContext>(i);
}

std::vector<Cobol85Parser::ScreenDescriptionLineClauseContext *> Cobol85Parser::ScreenDescriptionEntryContext::screenDescriptionLineClause() {
  return getRuleContexts<Cobol85Parser::ScreenDescriptionLineClauseContext>();
}

Cobol85Parser::ScreenDescriptionLineClauseContext* Cobol85Parser::ScreenDescriptionEntryContext::screenDescriptionLineClause(size_t i) {
  return getRuleContext<Cobol85Parser::ScreenDescriptionLineClauseContext>(i);
}

std::vector<Cobol85Parser::ScreenDescriptionColumnClauseContext *> Cobol85Parser::ScreenDescriptionEntryContext::screenDescriptionColumnClause() {
  return getRuleContexts<Cobol85Parser::ScreenDescriptionColumnClauseContext>();
}

Cobol85Parser::ScreenDescriptionColumnClauseContext* Cobol85Parser::ScreenDescriptionEntryContext::screenDescriptionColumnClause(size_t i) {
  return getRuleContext<Cobol85Parser::ScreenDescriptionColumnClauseContext>(i);
}

std::vector<Cobol85Parser::ScreenDescriptionForegroundColorClauseContext *> Cobol85Parser::ScreenDescriptionEntryContext::screenDescriptionForegroundColorClause() {
  return getRuleContexts<Cobol85Parser::ScreenDescriptionForegroundColorClauseContext>();
}

Cobol85Parser::ScreenDescriptionForegroundColorClauseContext* Cobol85Parser::ScreenDescriptionEntryContext::screenDescriptionForegroundColorClause(size_t i) {
  return getRuleContext<Cobol85Parser::ScreenDescriptionForegroundColorClauseContext>(i);
}

std::vector<Cobol85Parser::ScreenDescriptionBackgroundColorClauseContext *> Cobol85Parser::ScreenDescriptionEntryContext::screenDescriptionBackgroundColorClause() {
  return getRuleContexts<Cobol85Parser::ScreenDescriptionBackgroundColorClauseContext>();
}

Cobol85Parser::ScreenDescriptionBackgroundColorClauseContext* Cobol85Parser::ScreenDescriptionEntryContext::screenDescriptionBackgroundColorClause(size_t i) {
  return getRuleContext<Cobol85Parser::ScreenDescriptionBackgroundColorClauseContext>(i);
}

std::vector<Cobol85Parser::ScreenDescriptionControlClauseContext *> Cobol85Parser::ScreenDescriptionEntryContext::screenDescriptionControlClause() {
  return getRuleContexts<Cobol85Parser::ScreenDescriptionControlClauseContext>();
}

Cobol85Parser::ScreenDescriptionControlClauseContext* Cobol85Parser::ScreenDescriptionEntryContext::screenDescriptionControlClause(size_t i) {
  return getRuleContext<Cobol85Parser::ScreenDescriptionControlClauseContext>(i);
}

std::vector<Cobol85Parser::ScreenDescriptionValueClauseContext *> Cobol85Parser::ScreenDescriptionEntryContext::screenDescriptionValueClause() {
  return getRuleContexts<Cobol85Parser::ScreenDescriptionValueClauseContext>();
}

Cobol85Parser::ScreenDescriptionValueClauseContext* Cobol85Parser::ScreenDescriptionEntryContext::screenDescriptionValueClause(size_t i) {
  return getRuleContext<Cobol85Parser::ScreenDescriptionValueClauseContext>(i);
}

std::vector<Cobol85Parser::ScreenDescriptionPictureClauseContext *> Cobol85Parser::ScreenDescriptionEntryContext::screenDescriptionPictureClause() {
  return getRuleContexts<Cobol85Parser::ScreenDescriptionPictureClauseContext>();
}

Cobol85Parser::ScreenDescriptionPictureClauseContext* Cobol85Parser::ScreenDescriptionEntryContext::screenDescriptionPictureClause(size_t i) {
  return getRuleContext<Cobol85Parser::ScreenDescriptionPictureClauseContext>(i);
}

std::vector<Cobol85Parser::ScreenDescriptionUsageClauseContext *> Cobol85Parser::ScreenDescriptionEntryContext::screenDescriptionUsageClause() {
  return getRuleContexts<Cobol85Parser::ScreenDescriptionUsageClauseContext>();
}

Cobol85Parser::ScreenDescriptionUsageClauseContext* Cobol85Parser::ScreenDescriptionEntryContext::screenDescriptionUsageClause(size_t i) {
  return getRuleContext<Cobol85Parser::ScreenDescriptionUsageClauseContext>(i);
}

std::vector<Cobol85Parser::ScreenDescriptionBlankWhenZeroClauseContext *> Cobol85Parser::ScreenDescriptionEntryContext::screenDescriptionBlankWhenZeroClause() {
  return getRuleContexts<Cobol85Parser::ScreenDescriptionBlankWhenZeroClauseContext>();
}

Cobol85Parser::ScreenDescriptionBlankWhenZeroClauseContext* Cobol85Parser::ScreenDescriptionEntryContext::screenDescriptionBlankWhenZeroClause(size_t i) {
  return getRuleContext<Cobol85Parser::ScreenDescriptionBlankWhenZeroClauseContext>(i);
}

std::vector<Cobol85Parser::ScreenDescriptionJustifiedClauseContext *> Cobol85Parser::ScreenDescriptionEntryContext::screenDescriptionJustifiedClause() {
  return getRuleContexts<Cobol85Parser::ScreenDescriptionJustifiedClauseContext>();
}

Cobol85Parser::ScreenDescriptionJustifiedClauseContext* Cobol85Parser::ScreenDescriptionEntryContext::screenDescriptionJustifiedClause(size_t i) {
  return getRuleContext<Cobol85Parser::ScreenDescriptionJustifiedClauseContext>(i);
}

std::vector<Cobol85Parser::ScreenDescriptionSignClauseContext *> Cobol85Parser::ScreenDescriptionEntryContext::screenDescriptionSignClause() {
  return getRuleContexts<Cobol85Parser::ScreenDescriptionSignClauseContext>();
}

Cobol85Parser::ScreenDescriptionSignClauseContext* Cobol85Parser::ScreenDescriptionEntryContext::screenDescriptionSignClause(size_t i) {
  return getRuleContext<Cobol85Parser::ScreenDescriptionSignClauseContext>(i);
}

std::vector<Cobol85Parser::ScreenDescriptionAutoClauseContext *> Cobol85Parser::ScreenDescriptionEntryContext::screenDescriptionAutoClause() {
  return getRuleContexts<Cobol85Parser::ScreenDescriptionAutoClauseContext>();
}

Cobol85Parser::ScreenDescriptionAutoClauseContext* Cobol85Parser::ScreenDescriptionEntryContext::screenDescriptionAutoClause(size_t i) {
  return getRuleContext<Cobol85Parser::ScreenDescriptionAutoClauseContext>(i);
}

std::vector<Cobol85Parser::ScreenDescriptionSecureClauseContext *> Cobol85Parser::ScreenDescriptionEntryContext::screenDescriptionSecureClause() {
  return getRuleContexts<Cobol85Parser::ScreenDescriptionSecureClauseContext>();
}

Cobol85Parser::ScreenDescriptionSecureClauseContext* Cobol85Parser::ScreenDescriptionEntryContext::screenDescriptionSecureClause(size_t i) {
  return getRuleContext<Cobol85Parser::ScreenDescriptionSecureClauseContext>(i);
}

std::vector<Cobol85Parser::ScreenDescriptionRequiredClauseContext *> Cobol85Parser::ScreenDescriptionEntryContext::screenDescriptionRequiredClause() {
  return getRuleContexts<Cobol85Parser::ScreenDescriptionRequiredClauseContext>();
}

Cobol85Parser::ScreenDescriptionRequiredClauseContext* Cobol85Parser::ScreenDescriptionEntryContext::screenDescriptionRequiredClause(size_t i) {
  return getRuleContext<Cobol85Parser::ScreenDescriptionRequiredClauseContext>(i);
}

std::vector<Cobol85Parser::ScreenDescriptionPromptClauseContext *> Cobol85Parser::ScreenDescriptionEntryContext::screenDescriptionPromptClause() {
  return getRuleContexts<Cobol85Parser::ScreenDescriptionPromptClauseContext>();
}

Cobol85Parser::ScreenDescriptionPromptClauseContext* Cobol85Parser::ScreenDescriptionEntryContext::screenDescriptionPromptClause(size_t i) {
  return getRuleContext<Cobol85Parser::ScreenDescriptionPromptClauseContext>(i);
}

std::vector<Cobol85Parser::ScreenDescriptionFullClauseContext *> Cobol85Parser::ScreenDescriptionEntryContext::screenDescriptionFullClause() {
  return getRuleContexts<Cobol85Parser::ScreenDescriptionFullClauseContext>();
}

Cobol85Parser::ScreenDescriptionFullClauseContext* Cobol85Parser::ScreenDescriptionEntryContext::screenDescriptionFullClause(size_t i) {
  return getRuleContext<Cobol85Parser::ScreenDescriptionFullClauseContext>(i);
}

std::vector<Cobol85Parser::ScreenDescriptionZeroFillClauseContext *> Cobol85Parser::ScreenDescriptionEntryContext::screenDescriptionZeroFillClause() {
  return getRuleContexts<Cobol85Parser::ScreenDescriptionZeroFillClauseContext>();
}

Cobol85Parser::ScreenDescriptionZeroFillClauseContext* Cobol85Parser::ScreenDescriptionEntryContext::screenDescriptionZeroFillClause(size_t i) {
  return getRuleContext<Cobol85Parser::ScreenDescriptionZeroFillClauseContext>(i);
}

std::vector<Cobol85Parser::ScreenDescriptionFromClauseContext *> Cobol85Parser::ScreenDescriptionEntryContext::screenDescriptionFromClause() {
  return getRuleContexts<Cobol85Parser::ScreenDescriptionFromClauseContext>();
}

Cobol85Parser::ScreenDescriptionFromClauseContext* Cobol85Parser::ScreenDescriptionEntryContext::screenDescriptionFromClause(size_t i) {
  return getRuleContext<Cobol85Parser::ScreenDescriptionFromClauseContext>(i);
}

std::vector<Cobol85Parser::ScreenDescriptionUsingClauseContext *> Cobol85Parser::ScreenDescriptionEntryContext::screenDescriptionUsingClause() {
  return getRuleContexts<Cobol85Parser::ScreenDescriptionUsingClauseContext>();
}

Cobol85Parser::ScreenDescriptionUsingClauseContext* Cobol85Parser::ScreenDescriptionEntryContext::screenDescriptionUsingClause(size_t i) {
  return getRuleContext<Cobol85Parser::ScreenDescriptionUsingClauseContext>(i);
}


size_t Cobol85Parser::ScreenDescriptionEntryContext::getRuleIndex() const {
  return Cobol85Parser::RuleScreenDescriptionEntry;
}

void Cobol85Parser::ScreenDescriptionEntryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterScreenDescriptionEntry(this);
}

void Cobol85Parser::ScreenDescriptionEntryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitScreenDescriptionEntry(this);
}

Cobol85Parser::ScreenDescriptionEntryContext* Cobol85Parser::screenDescriptionEntry() {
  ScreenDescriptionEntryContext *_localctx = _tracker.createInstance<ScreenDescriptionEntryContext>(_ctx, getState());
  enterRule(_localctx, 258, Cobol85Parser::RuleScreenDescriptionEntry);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2503);
    match(Cobol85Parser::INTEGERLITERAL);
    setState(2506);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 266, _ctx)) {
    case 1: {
      setState(2504);
      match(Cobol85Parser::FILLER);
      break;
    }

    case 2: {
      setState(2505);
      screenName();
      break;
    }

    default:
      break;
    }
    setState(2540);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 33) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 33)) & 3298534889775) != 0) || _la == Cobol85Parser::CONTROL

    || _la == Cobol85Parser::EMPTY_CHECK || ((((_la - 187) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 187)) & 4948808957953) != 0) || ((((_la - 255) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 255)) & 72057628414486531) != 0) || ((((_la - 336) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 336)) & 4611686018695826433) != 0) || ((((_la - 401) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 401)) & 412317384705) != 0) || ((((_la - 493) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 493)) & 536897569) != 0)) {
      setState(2538);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 268, _ctx)) {
      case 1: {
        setState(2508);
        screenDescriptionBlankClause();
        break;
      }

      case 2: {
        setState(2509);
        screenDescriptionBellClause();
        break;
      }

      case 3: {
        setState(2510);
        screenDescriptionBlinkClause();
        break;
      }

      case 4: {
        setState(2511);
        screenDescriptionEraseClause();
        break;
      }

      case 5: {
        setState(2512);
        screenDescriptionLightClause();
        break;
      }

      case 6: {
        setState(2513);
        screenDescriptionGridClause();
        break;
      }

      case 7: {
        setState(2514);
        screenDescriptionReverseVideoClause();
        break;
      }

      case 8: {
        setState(2515);
        screenDescriptionUnderlineClause();
        break;
      }

      case 9: {
        setState(2516);
        screenDescriptionSizeClause();
        break;
      }

      case 10: {
        setState(2517);
        screenDescriptionLineClause();
        break;
      }

      case 11: {
        setState(2518);
        screenDescriptionColumnClause();
        break;
      }

      case 12: {
        setState(2519);
        screenDescriptionForegroundColorClause();
        break;
      }

      case 13: {
        setState(2520);
        screenDescriptionBackgroundColorClause();
        break;
      }

      case 14: {
        setState(2521);
        screenDescriptionControlClause();
        break;
      }

      case 15: {
        setState(2522);
        screenDescriptionValueClause();
        break;
      }

      case 16: {
        setState(2523);
        screenDescriptionPictureClause();
        break;
      }

      case 17: {
        setState(2526);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case Cobol85Parser::FROM: {
            setState(2524);
            screenDescriptionFromClause();
            break;
          }

          case Cobol85Parser::USING: {
            setState(2525);
            screenDescriptionUsingClause();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        break;
      }

      case 18: {
        setState(2528);
        screenDescriptionUsageClause();
        break;
      }

      case 19: {
        setState(2529);
        screenDescriptionBlankWhenZeroClause();
        break;
      }

      case 20: {
        setState(2530);
        screenDescriptionJustifiedClause();
        break;
      }

      case 21: {
        setState(2531);
        screenDescriptionSignClause();
        break;
      }

      case 22: {
        setState(2532);
        screenDescriptionAutoClause();
        break;
      }

      case 23: {
        setState(2533);
        screenDescriptionSecureClause();
        break;
      }

      case 24: {
        setState(2534);
        screenDescriptionRequiredClause();
        break;
      }

      case 25: {
        setState(2535);
        screenDescriptionPromptClause();
        break;
      }

      case 26: {
        setState(2536);
        screenDescriptionFullClause();
        break;
      }

      case 27: {
        setState(2537);
        screenDescriptionZeroFillClause();
        break;
      }

      default:
        break;
      }
      setState(2542);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2543);
    match(Cobol85Parser::DOT_FS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ScreenDescriptionBlankClauseContext ------------------------------------------------------------------

Cobol85Parser::ScreenDescriptionBlankClauseContext::ScreenDescriptionBlankClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionBlankClauseContext::BLANK() {
  return getToken(Cobol85Parser::BLANK, 0);
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionBlankClauseContext::SCREEN() {
  return getToken(Cobol85Parser::SCREEN, 0);
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionBlankClauseContext::LINE() {
  return getToken(Cobol85Parser::LINE, 0);
}


size_t Cobol85Parser::ScreenDescriptionBlankClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleScreenDescriptionBlankClause;
}

void Cobol85Parser::ScreenDescriptionBlankClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterScreenDescriptionBlankClause(this);
}

void Cobol85Parser::ScreenDescriptionBlankClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitScreenDescriptionBlankClause(this);
}

Cobol85Parser::ScreenDescriptionBlankClauseContext* Cobol85Parser::screenDescriptionBlankClause() {
  ScreenDescriptionBlankClauseContext *_localctx = _tracker.createInstance<ScreenDescriptionBlankClauseContext>(_ctx, getState());
  enterRule(_localctx, 260, Cobol85Parser::RuleScreenDescriptionBlankClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2545);
    match(Cobol85Parser::BLANK);
    setState(2546);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::LINE || _la == Cobol85Parser::SCREEN)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ScreenDescriptionBellClauseContext ------------------------------------------------------------------

Cobol85Parser::ScreenDescriptionBellClauseContext::ScreenDescriptionBellClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionBellClauseContext::BELL() {
  return getToken(Cobol85Parser::BELL, 0);
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionBellClauseContext::BEEP() {
  return getToken(Cobol85Parser::BEEP, 0);
}


size_t Cobol85Parser::ScreenDescriptionBellClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleScreenDescriptionBellClause;
}

void Cobol85Parser::ScreenDescriptionBellClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterScreenDescriptionBellClause(this);
}

void Cobol85Parser::ScreenDescriptionBellClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitScreenDescriptionBellClause(this);
}

Cobol85Parser::ScreenDescriptionBellClauseContext* Cobol85Parser::screenDescriptionBellClause() {
  ScreenDescriptionBellClauseContext *_localctx = _tracker.createInstance<ScreenDescriptionBellClauseContext>(_ctx, getState());
  enterRule(_localctx, 262, Cobol85Parser::RuleScreenDescriptionBellClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2548);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::BEEP

    || _la == Cobol85Parser::BELL)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ScreenDescriptionBlinkClauseContext ------------------------------------------------------------------

Cobol85Parser::ScreenDescriptionBlinkClauseContext::ScreenDescriptionBlinkClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionBlinkClauseContext::BLINK() {
  return getToken(Cobol85Parser::BLINK, 0);
}


size_t Cobol85Parser::ScreenDescriptionBlinkClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleScreenDescriptionBlinkClause;
}

void Cobol85Parser::ScreenDescriptionBlinkClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterScreenDescriptionBlinkClause(this);
}

void Cobol85Parser::ScreenDescriptionBlinkClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitScreenDescriptionBlinkClause(this);
}

Cobol85Parser::ScreenDescriptionBlinkClauseContext* Cobol85Parser::screenDescriptionBlinkClause() {
  ScreenDescriptionBlinkClauseContext *_localctx = _tracker.createInstance<ScreenDescriptionBlinkClauseContext>(_ctx, getState());
  enterRule(_localctx, 264, Cobol85Parser::RuleScreenDescriptionBlinkClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2550);
    match(Cobol85Parser::BLINK);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ScreenDescriptionEraseClauseContext ------------------------------------------------------------------

Cobol85Parser::ScreenDescriptionEraseClauseContext::ScreenDescriptionEraseClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionEraseClauseContext::ERASE() {
  return getToken(Cobol85Parser::ERASE, 0);
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionEraseClauseContext::EOL() {
  return getToken(Cobol85Parser::EOL, 0);
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionEraseClauseContext::EOS() {
  return getToken(Cobol85Parser::EOS, 0);
}


size_t Cobol85Parser::ScreenDescriptionEraseClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleScreenDescriptionEraseClause;
}

void Cobol85Parser::ScreenDescriptionEraseClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterScreenDescriptionEraseClause(this);
}

void Cobol85Parser::ScreenDescriptionEraseClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitScreenDescriptionEraseClause(this);
}

Cobol85Parser::ScreenDescriptionEraseClauseContext* Cobol85Parser::screenDescriptionEraseClause() {
  ScreenDescriptionEraseClauseContext *_localctx = _tracker.createInstance<ScreenDescriptionEraseClauseContext>(_ctx, getState());
  enterRule(_localctx, 266, Cobol85Parser::RuleScreenDescriptionEraseClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2552);
    match(Cobol85Parser::ERASE);
    setState(2553);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::EOL

    || _la == Cobol85Parser::EOS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ScreenDescriptionLightClauseContext ------------------------------------------------------------------

Cobol85Parser::ScreenDescriptionLightClauseContext::ScreenDescriptionLightClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionLightClauseContext::HIGHLIGHT() {
  return getToken(Cobol85Parser::HIGHLIGHT, 0);
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionLightClauseContext::LOWLIGHT() {
  return getToken(Cobol85Parser::LOWLIGHT, 0);
}


size_t Cobol85Parser::ScreenDescriptionLightClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleScreenDescriptionLightClause;
}

void Cobol85Parser::ScreenDescriptionLightClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterScreenDescriptionLightClause(this);
}

void Cobol85Parser::ScreenDescriptionLightClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitScreenDescriptionLightClause(this);
}

Cobol85Parser::ScreenDescriptionLightClauseContext* Cobol85Parser::screenDescriptionLightClause() {
  ScreenDescriptionLightClauseContext *_localctx = _tracker.createInstance<ScreenDescriptionLightClauseContext>(_ctx, getState());
  enterRule(_localctx, 268, Cobol85Parser::RuleScreenDescriptionLightClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2555);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::HIGHLIGHT

    || _la == Cobol85Parser::LOWLIGHT)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ScreenDescriptionGridClauseContext ------------------------------------------------------------------

Cobol85Parser::ScreenDescriptionGridClauseContext::ScreenDescriptionGridClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionGridClauseContext::GRID() {
  return getToken(Cobol85Parser::GRID, 0);
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionGridClauseContext::LEFTLINE() {
  return getToken(Cobol85Parser::LEFTLINE, 0);
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionGridClauseContext::OVERLINE() {
  return getToken(Cobol85Parser::OVERLINE, 0);
}


size_t Cobol85Parser::ScreenDescriptionGridClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleScreenDescriptionGridClause;
}

void Cobol85Parser::ScreenDescriptionGridClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterScreenDescriptionGridClause(this);
}

void Cobol85Parser::ScreenDescriptionGridClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitScreenDescriptionGridClause(this);
}

Cobol85Parser::ScreenDescriptionGridClauseContext* Cobol85Parser::screenDescriptionGridClause() {
  ScreenDescriptionGridClauseContext *_localctx = _tracker.createInstance<ScreenDescriptionGridClauseContext>(_ctx, getState());
  enterRule(_localctx, 270, Cobol85Parser::RuleScreenDescriptionGridClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2557);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::GRID

    || _la == Cobol85Parser::LEFTLINE || _la == Cobol85Parser::OVERLINE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ScreenDescriptionReverseVideoClauseContext ------------------------------------------------------------------

Cobol85Parser::ScreenDescriptionReverseVideoClauseContext::ScreenDescriptionReverseVideoClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionReverseVideoClauseContext::REVERSE_VIDEO() {
  return getToken(Cobol85Parser::REVERSE_VIDEO, 0);
}


size_t Cobol85Parser::ScreenDescriptionReverseVideoClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleScreenDescriptionReverseVideoClause;
}

void Cobol85Parser::ScreenDescriptionReverseVideoClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterScreenDescriptionReverseVideoClause(this);
}

void Cobol85Parser::ScreenDescriptionReverseVideoClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitScreenDescriptionReverseVideoClause(this);
}

Cobol85Parser::ScreenDescriptionReverseVideoClauseContext* Cobol85Parser::screenDescriptionReverseVideoClause() {
  ScreenDescriptionReverseVideoClauseContext *_localctx = _tracker.createInstance<ScreenDescriptionReverseVideoClauseContext>(_ctx, getState());
  enterRule(_localctx, 272, Cobol85Parser::RuleScreenDescriptionReverseVideoClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2559);
    match(Cobol85Parser::REVERSE_VIDEO);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ScreenDescriptionUnderlineClauseContext ------------------------------------------------------------------

Cobol85Parser::ScreenDescriptionUnderlineClauseContext::ScreenDescriptionUnderlineClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionUnderlineClauseContext::UNDERLINE() {
  return getToken(Cobol85Parser::UNDERLINE, 0);
}


size_t Cobol85Parser::ScreenDescriptionUnderlineClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleScreenDescriptionUnderlineClause;
}

void Cobol85Parser::ScreenDescriptionUnderlineClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterScreenDescriptionUnderlineClause(this);
}

void Cobol85Parser::ScreenDescriptionUnderlineClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitScreenDescriptionUnderlineClause(this);
}

Cobol85Parser::ScreenDescriptionUnderlineClauseContext* Cobol85Parser::screenDescriptionUnderlineClause() {
  ScreenDescriptionUnderlineClauseContext *_localctx = _tracker.createInstance<ScreenDescriptionUnderlineClauseContext>(_ctx, getState());
  enterRule(_localctx, 274, Cobol85Parser::RuleScreenDescriptionUnderlineClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2561);
    match(Cobol85Parser::UNDERLINE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ScreenDescriptionSizeClauseContext ------------------------------------------------------------------

Cobol85Parser::ScreenDescriptionSizeClauseContext::ScreenDescriptionSizeClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionSizeClauseContext::SIZE() {
  return getToken(Cobol85Parser::SIZE, 0);
}

Cobol85Parser::IdentifierContext* Cobol85Parser::ScreenDescriptionSizeClauseContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

Cobol85Parser::IntegerLiteralContext* Cobol85Parser::ScreenDescriptionSizeClauseContext::integerLiteral() {
  return getRuleContext<Cobol85Parser::IntegerLiteralContext>(0);
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionSizeClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}


size_t Cobol85Parser::ScreenDescriptionSizeClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleScreenDescriptionSizeClause;
}

void Cobol85Parser::ScreenDescriptionSizeClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterScreenDescriptionSizeClause(this);
}

void Cobol85Parser::ScreenDescriptionSizeClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitScreenDescriptionSizeClause(this);
}

Cobol85Parser::ScreenDescriptionSizeClauseContext* Cobol85Parser::screenDescriptionSizeClause() {
  ScreenDescriptionSizeClauseContext *_localctx = _tracker.createInstance<ScreenDescriptionSizeClauseContext>(_ctx, getState());
  enterRule(_localctx, 276, Cobol85Parser::RuleScreenDescriptionSizeClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2563);
    match(Cobol85Parser::SIZE);
    setState(2565);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(2564);
      match(Cobol85Parser::IS);
    }
    setState(2569);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 271, _ctx)) {
    case 1: {
      setState(2567);
      identifier();
      break;
    }

    case 2: {
      setState(2568);
      integerLiteral();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ScreenDescriptionLineClauseContext ------------------------------------------------------------------

Cobol85Parser::ScreenDescriptionLineClauseContext::ScreenDescriptionLineClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionLineClauseContext::LINE() {
  return getToken(Cobol85Parser::LINE, 0);
}

Cobol85Parser::IdentifierContext* Cobol85Parser::ScreenDescriptionLineClauseContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

Cobol85Parser::IntegerLiteralContext* Cobol85Parser::ScreenDescriptionLineClauseContext::integerLiteral() {
  return getRuleContext<Cobol85Parser::IntegerLiteralContext>(0);
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionLineClauseContext::PLUS() {
  return getToken(Cobol85Parser::PLUS, 0);
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionLineClauseContext::PLUSCHAR() {
  return getToken(Cobol85Parser::PLUSCHAR, 0);
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionLineClauseContext::MINUSCHAR() {
  return getToken(Cobol85Parser::MINUSCHAR, 0);
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionLineClauseContext::NUMBER() {
  return getToken(Cobol85Parser::NUMBER, 0);
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionLineClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}


size_t Cobol85Parser::ScreenDescriptionLineClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleScreenDescriptionLineClause;
}

void Cobol85Parser::ScreenDescriptionLineClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterScreenDescriptionLineClause(this);
}

void Cobol85Parser::ScreenDescriptionLineClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitScreenDescriptionLineClause(this);
}

Cobol85Parser::ScreenDescriptionLineClauseContext* Cobol85Parser::screenDescriptionLineClause() {
  ScreenDescriptionLineClauseContext *_localctx = _tracker.createInstance<ScreenDescriptionLineClauseContext>(_ctx, getState());
  enterRule(_localctx, 278, Cobol85Parser::RuleScreenDescriptionLineClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2571);
    match(Cobol85Parser::LINE);
    setState(2579);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS

    || _la == Cobol85Parser::NUMBER || _la == Cobol85Parser::PLUS || _la == Cobol85Parser::MINUSCHAR

    || _la == Cobol85Parser::PLUSCHAR) {
      setState(2573);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Cobol85Parser::NUMBER) {
        setState(2572);
        match(Cobol85Parser::NUMBER);
      }
      setState(2576);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Cobol85Parser::IS) {
        setState(2575);
        match(Cobol85Parser::IS);
      }
      setState(2578);
      _la = _input->LA(1);
      if (!(_la == Cobol85Parser::PLUS || _la == Cobol85Parser::MINUSCHAR

      || _la == Cobol85Parser::PLUSCHAR)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(2583);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 275, _ctx)) {
    case 1: {
      setState(2581);
      identifier();
      break;
    }

    case 2: {
      setState(2582);
      integerLiteral();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ScreenDescriptionColumnClauseContext ------------------------------------------------------------------

Cobol85Parser::ScreenDescriptionColumnClauseContext::ScreenDescriptionColumnClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionColumnClauseContext::COLUMN() {
  return getToken(Cobol85Parser::COLUMN, 0);
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionColumnClauseContext::COL() {
  return getToken(Cobol85Parser::COL, 0);
}

Cobol85Parser::IdentifierContext* Cobol85Parser::ScreenDescriptionColumnClauseContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

Cobol85Parser::IntegerLiteralContext* Cobol85Parser::ScreenDescriptionColumnClauseContext::integerLiteral() {
  return getRuleContext<Cobol85Parser::IntegerLiteralContext>(0);
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionColumnClauseContext::PLUS() {
  return getToken(Cobol85Parser::PLUS, 0);
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionColumnClauseContext::PLUSCHAR() {
  return getToken(Cobol85Parser::PLUSCHAR, 0);
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionColumnClauseContext::MINUSCHAR() {
  return getToken(Cobol85Parser::MINUSCHAR, 0);
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionColumnClauseContext::NUMBER() {
  return getToken(Cobol85Parser::NUMBER, 0);
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionColumnClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}


size_t Cobol85Parser::ScreenDescriptionColumnClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleScreenDescriptionColumnClause;
}

void Cobol85Parser::ScreenDescriptionColumnClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterScreenDescriptionColumnClause(this);
}

void Cobol85Parser::ScreenDescriptionColumnClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitScreenDescriptionColumnClause(this);
}

Cobol85Parser::ScreenDescriptionColumnClauseContext* Cobol85Parser::screenDescriptionColumnClause() {
  ScreenDescriptionColumnClauseContext *_localctx = _tracker.createInstance<ScreenDescriptionColumnClauseContext>(_ctx, getState());
  enterRule(_localctx, 280, Cobol85Parser::RuleScreenDescriptionColumnClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2585);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::COL

    || _la == Cobol85Parser::COLUMN)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(2593);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS

    || _la == Cobol85Parser::NUMBER || _la == Cobol85Parser::PLUS || _la == Cobol85Parser::MINUSCHAR

    || _la == Cobol85Parser::PLUSCHAR) {
      setState(2587);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Cobol85Parser::NUMBER) {
        setState(2586);
        match(Cobol85Parser::NUMBER);
      }
      setState(2590);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Cobol85Parser::IS) {
        setState(2589);
        match(Cobol85Parser::IS);
      }
      setState(2592);
      _la = _input->LA(1);
      if (!(_la == Cobol85Parser::PLUS || _la == Cobol85Parser::MINUSCHAR

      || _la == Cobol85Parser::PLUSCHAR)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(2597);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 279, _ctx)) {
    case 1: {
      setState(2595);
      identifier();
      break;
    }

    case 2: {
      setState(2596);
      integerLiteral();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ScreenDescriptionForegroundColorClauseContext ------------------------------------------------------------------

Cobol85Parser::ScreenDescriptionForegroundColorClauseContext::ScreenDescriptionForegroundColorClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionForegroundColorClauseContext::FOREGROUND_COLOR() {
  return getToken(Cobol85Parser::FOREGROUND_COLOR, 0);
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionForegroundColorClauseContext::FOREGROUND_COLOUR() {
  return getToken(Cobol85Parser::FOREGROUND_COLOUR, 0);
}

Cobol85Parser::IdentifierContext* Cobol85Parser::ScreenDescriptionForegroundColorClauseContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

Cobol85Parser::IntegerLiteralContext* Cobol85Parser::ScreenDescriptionForegroundColorClauseContext::integerLiteral() {
  return getRuleContext<Cobol85Parser::IntegerLiteralContext>(0);
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionForegroundColorClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}


size_t Cobol85Parser::ScreenDescriptionForegroundColorClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleScreenDescriptionForegroundColorClause;
}

void Cobol85Parser::ScreenDescriptionForegroundColorClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterScreenDescriptionForegroundColorClause(this);
}

void Cobol85Parser::ScreenDescriptionForegroundColorClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitScreenDescriptionForegroundColorClause(this);
}

Cobol85Parser::ScreenDescriptionForegroundColorClauseContext* Cobol85Parser::screenDescriptionForegroundColorClause() {
  ScreenDescriptionForegroundColorClauseContext *_localctx = _tracker.createInstance<ScreenDescriptionForegroundColorClauseContext>(_ctx, getState());
  enterRule(_localctx, 282, Cobol85Parser::RuleScreenDescriptionForegroundColorClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2599);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::FOREGROUND_COLOR

    || _la == Cobol85Parser::FOREGROUND_COLOUR)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(2601);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(2600);
      match(Cobol85Parser::IS);
    }
    setState(2605);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 281, _ctx)) {
    case 1: {
      setState(2603);
      identifier();
      break;
    }

    case 2: {
      setState(2604);
      integerLiteral();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ScreenDescriptionBackgroundColorClauseContext ------------------------------------------------------------------

Cobol85Parser::ScreenDescriptionBackgroundColorClauseContext::ScreenDescriptionBackgroundColorClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionBackgroundColorClauseContext::BACKGROUND_COLOR() {
  return getToken(Cobol85Parser::BACKGROUND_COLOR, 0);
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionBackgroundColorClauseContext::BACKGROUND_COLOUR() {
  return getToken(Cobol85Parser::BACKGROUND_COLOUR, 0);
}

Cobol85Parser::IdentifierContext* Cobol85Parser::ScreenDescriptionBackgroundColorClauseContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

Cobol85Parser::IntegerLiteralContext* Cobol85Parser::ScreenDescriptionBackgroundColorClauseContext::integerLiteral() {
  return getRuleContext<Cobol85Parser::IntegerLiteralContext>(0);
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionBackgroundColorClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}


size_t Cobol85Parser::ScreenDescriptionBackgroundColorClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleScreenDescriptionBackgroundColorClause;
}

void Cobol85Parser::ScreenDescriptionBackgroundColorClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterScreenDescriptionBackgroundColorClause(this);
}

void Cobol85Parser::ScreenDescriptionBackgroundColorClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitScreenDescriptionBackgroundColorClause(this);
}

Cobol85Parser::ScreenDescriptionBackgroundColorClauseContext* Cobol85Parser::screenDescriptionBackgroundColorClause() {
  ScreenDescriptionBackgroundColorClauseContext *_localctx = _tracker.createInstance<ScreenDescriptionBackgroundColorClauseContext>(_ctx, getState());
  enterRule(_localctx, 284, Cobol85Parser::RuleScreenDescriptionBackgroundColorClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2607);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::BACKGROUND_COLOR

    || _la == Cobol85Parser::BACKGROUND_COLOUR)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(2609);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(2608);
      match(Cobol85Parser::IS);
    }
    setState(2613);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 283, _ctx)) {
    case 1: {
      setState(2611);
      identifier();
      break;
    }

    case 2: {
      setState(2612);
      integerLiteral();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ScreenDescriptionControlClauseContext ------------------------------------------------------------------

Cobol85Parser::ScreenDescriptionControlClauseContext::ScreenDescriptionControlClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionControlClauseContext::CONTROL() {
  return getToken(Cobol85Parser::CONTROL, 0);
}

Cobol85Parser::IdentifierContext* Cobol85Parser::ScreenDescriptionControlClauseContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionControlClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}


size_t Cobol85Parser::ScreenDescriptionControlClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleScreenDescriptionControlClause;
}

void Cobol85Parser::ScreenDescriptionControlClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterScreenDescriptionControlClause(this);
}

void Cobol85Parser::ScreenDescriptionControlClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitScreenDescriptionControlClause(this);
}

Cobol85Parser::ScreenDescriptionControlClauseContext* Cobol85Parser::screenDescriptionControlClause() {
  ScreenDescriptionControlClauseContext *_localctx = _tracker.createInstance<ScreenDescriptionControlClauseContext>(_ctx, getState());
  enterRule(_localctx, 286, Cobol85Parser::RuleScreenDescriptionControlClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2615);
    match(Cobol85Parser::CONTROL);
    setState(2617);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(2616);
      match(Cobol85Parser::IS);
    }
    setState(2619);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ScreenDescriptionValueClauseContext ------------------------------------------------------------------

Cobol85Parser::ScreenDescriptionValueClauseContext::ScreenDescriptionValueClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::LiteralContext* Cobol85Parser::ScreenDescriptionValueClauseContext::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionValueClauseContext::VALUE() {
  return getToken(Cobol85Parser::VALUE, 0);
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionValueClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}


size_t Cobol85Parser::ScreenDescriptionValueClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleScreenDescriptionValueClause;
}

void Cobol85Parser::ScreenDescriptionValueClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterScreenDescriptionValueClause(this);
}

void Cobol85Parser::ScreenDescriptionValueClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitScreenDescriptionValueClause(this);
}

Cobol85Parser::ScreenDescriptionValueClauseContext* Cobol85Parser::screenDescriptionValueClause() {
  ScreenDescriptionValueClauseContext *_localctx = _tracker.createInstance<ScreenDescriptionValueClauseContext>(_ctx, getState());
  enterRule(_localctx, 288, Cobol85Parser::RuleScreenDescriptionValueClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2621);
    match(Cobol85Parser::VALUE);
    setState(2623);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(2622);
      match(Cobol85Parser::IS);
    }
    setState(2625);
    literal();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ScreenDescriptionPictureClauseContext ------------------------------------------------------------------

Cobol85Parser::ScreenDescriptionPictureClauseContext::ScreenDescriptionPictureClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::PictureStringContext* Cobol85Parser::ScreenDescriptionPictureClauseContext::pictureString() {
  return getRuleContext<Cobol85Parser::PictureStringContext>(0);
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionPictureClauseContext::PICTURE() {
  return getToken(Cobol85Parser::PICTURE, 0);
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionPictureClauseContext::PIC() {
  return getToken(Cobol85Parser::PIC, 0);
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionPictureClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}


size_t Cobol85Parser::ScreenDescriptionPictureClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleScreenDescriptionPictureClause;
}

void Cobol85Parser::ScreenDescriptionPictureClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterScreenDescriptionPictureClause(this);
}

void Cobol85Parser::ScreenDescriptionPictureClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitScreenDescriptionPictureClause(this);
}

Cobol85Parser::ScreenDescriptionPictureClauseContext* Cobol85Parser::screenDescriptionPictureClause() {
  ScreenDescriptionPictureClauseContext *_localctx = _tracker.createInstance<ScreenDescriptionPictureClauseContext>(_ctx, getState());
  enterRule(_localctx, 290, Cobol85Parser::RuleScreenDescriptionPictureClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2627);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::PIC

    || _la == Cobol85Parser::PICTURE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(2629);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(2628);
      match(Cobol85Parser::IS);
    }
    setState(2631);
    pictureString();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ScreenDescriptionFromClauseContext ------------------------------------------------------------------

Cobol85Parser::ScreenDescriptionFromClauseContext::ScreenDescriptionFromClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionFromClauseContext::FROM() {
  return getToken(Cobol85Parser::FROM, 0);
}

Cobol85Parser::IdentifierContext* Cobol85Parser::ScreenDescriptionFromClauseContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

Cobol85Parser::LiteralContext* Cobol85Parser::ScreenDescriptionFromClauseContext::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}

Cobol85Parser::ScreenDescriptionToClauseContext* Cobol85Parser::ScreenDescriptionFromClauseContext::screenDescriptionToClause() {
  return getRuleContext<Cobol85Parser::ScreenDescriptionToClauseContext>(0);
}


size_t Cobol85Parser::ScreenDescriptionFromClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleScreenDescriptionFromClause;
}

void Cobol85Parser::ScreenDescriptionFromClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterScreenDescriptionFromClause(this);
}

void Cobol85Parser::ScreenDescriptionFromClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitScreenDescriptionFromClause(this);
}

Cobol85Parser::ScreenDescriptionFromClauseContext* Cobol85Parser::screenDescriptionFromClause() {
  ScreenDescriptionFromClauseContext *_localctx = _tracker.createInstance<ScreenDescriptionFromClauseContext>(_ctx, getState());
  enterRule(_localctx, 292, Cobol85Parser::RuleScreenDescriptionFromClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2633);
    match(Cobol85Parser::FROM);
    setState(2636);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 287, _ctx)) {
    case 1: {
      setState(2634);
      identifier();
      break;
    }

    case 2: {
      setState(2635);
      literal();
      break;
    }

    default:
      break;
    }
    setState(2639);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::TO) {
      setState(2638);
      screenDescriptionToClause();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ScreenDescriptionToClauseContext ------------------------------------------------------------------

Cobol85Parser::ScreenDescriptionToClauseContext::ScreenDescriptionToClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionToClauseContext::TO() {
  return getToken(Cobol85Parser::TO, 0);
}

Cobol85Parser::IdentifierContext* Cobol85Parser::ScreenDescriptionToClauseContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}


size_t Cobol85Parser::ScreenDescriptionToClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleScreenDescriptionToClause;
}

void Cobol85Parser::ScreenDescriptionToClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterScreenDescriptionToClause(this);
}

void Cobol85Parser::ScreenDescriptionToClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitScreenDescriptionToClause(this);
}

Cobol85Parser::ScreenDescriptionToClauseContext* Cobol85Parser::screenDescriptionToClause() {
  ScreenDescriptionToClauseContext *_localctx = _tracker.createInstance<ScreenDescriptionToClauseContext>(_ctx, getState());
  enterRule(_localctx, 294, Cobol85Parser::RuleScreenDescriptionToClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2641);
    match(Cobol85Parser::TO);
    setState(2642);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ScreenDescriptionUsingClauseContext ------------------------------------------------------------------

Cobol85Parser::ScreenDescriptionUsingClauseContext::ScreenDescriptionUsingClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionUsingClauseContext::USING() {
  return getToken(Cobol85Parser::USING, 0);
}

Cobol85Parser::IdentifierContext* Cobol85Parser::ScreenDescriptionUsingClauseContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}


size_t Cobol85Parser::ScreenDescriptionUsingClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleScreenDescriptionUsingClause;
}

void Cobol85Parser::ScreenDescriptionUsingClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterScreenDescriptionUsingClause(this);
}

void Cobol85Parser::ScreenDescriptionUsingClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitScreenDescriptionUsingClause(this);
}

Cobol85Parser::ScreenDescriptionUsingClauseContext* Cobol85Parser::screenDescriptionUsingClause() {
  ScreenDescriptionUsingClauseContext *_localctx = _tracker.createInstance<ScreenDescriptionUsingClauseContext>(_ctx, getState());
  enterRule(_localctx, 296, Cobol85Parser::RuleScreenDescriptionUsingClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2644);
    match(Cobol85Parser::USING);
    setState(2645);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ScreenDescriptionUsageClauseContext ------------------------------------------------------------------

Cobol85Parser::ScreenDescriptionUsageClauseContext::ScreenDescriptionUsageClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionUsageClauseContext::DISPLAY() {
  return getToken(Cobol85Parser::DISPLAY, 0);
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionUsageClauseContext::DISPLAY_1() {
  return getToken(Cobol85Parser::DISPLAY_1, 0);
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionUsageClauseContext::USAGE() {
  return getToken(Cobol85Parser::USAGE, 0);
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionUsageClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}


size_t Cobol85Parser::ScreenDescriptionUsageClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleScreenDescriptionUsageClause;
}

void Cobol85Parser::ScreenDescriptionUsageClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterScreenDescriptionUsageClause(this);
}

void Cobol85Parser::ScreenDescriptionUsageClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitScreenDescriptionUsageClause(this);
}

Cobol85Parser::ScreenDescriptionUsageClauseContext* Cobol85Parser::screenDescriptionUsageClause() {
  ScreenDescriptionUsageClauseContext *_localctx = _tracker.createInstance<ScreenDescriptionUsageClauseContext>(_ctx, getState());
  enterRule(_localctx, 298, Cobol85Parser::RuleScreenDescriptionUsageClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2647);
    match(Cobol85Parser::USAGE);
    setState(2649);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(2648);
      match(Cobol85Parser::IS);
    }
    setState(2651);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::DISPLAY

    || _la == Cobol85Parser::DISPLAY_1)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ScreenDescriptionBlankWhenZeroClauseContext ------------------------------------------------------------------

Cobol85Parser::ScreenDescriptionBlankWhenZeroClauseContext::ScreenDescriptionBlankWhenZeroClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionBlankWhenZeroClauseContext::BLANK() {
  return getToken(Cobol85Parser::BLANK, 0);
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionBlankWhenZeroClauseContext::ZERO() {
  return getToken(Cobol85Parser::ZERO, 0);
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionBlankWhenZeroClauseContext::WHEN() {
  return getToken(Cobol85Parser::WHEN, 0);
}


size_t Cobol85Parser::ScreenDescriptionBlankWhenZeroClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleScreenDescriptionBlankWhenZeroClause;
}

void Cobol85Parser::ScreenDescriptionBlankWhenZeroClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterScreenDescriptionBlankWhenZeroClause(this);
}

void Cobol85Parser::ScreenDescriptionBlankWhenZeroClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitScreenDescriptionBlankWhenZeroClause(this);
}

Cobol85Parser::ScreenDescriptionBlankWhenZeroClauseContext* Cobol85Parser::screenDescriptionBlankWhenZeroClause() {
  ScreenDescriptionBlankWhenZeroClauseContext *_localctx = _tracker.createInstance<ScreenDescriptionBlankWhenZeroClauseContext>(_ctx, getState());
  enterRule(_localctx, 300, Cobol85Parser::RuleScreenDescriptionBlankWhenZeroClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2653);
    match(Cobol85Parser::BLANK);
    setState(2655);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::WHEN) {
      setState(2654);
      match(Cobol85Parser::WHEN);
    }
    setState(2657);
    match(Cobol85Parser::ZERO);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ScreenDescriptionJustifiedClauseContext ------------------------------------------------------------------

Cobol85Parser::ScreenDescriptionJustifiedClauseContext::ScreenDescriptionJustifiedClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionJustifiedClauseContext::JUSTIFIED() {
  return getToken(Cobol85Parser::JUSTIFIED, 0);
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionJustifiedClauseContext::JUST() {
  return getToken(Cobol85Parser::JUST, 0);
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionJustifiedClauseContext::RIGHT() {
  return getToken(Cobol85Parser::RIGHT, 0);
}


size_t Cobol85Parser::ScreenDescriptionJustifiedClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleScreenDescriptionJustifiedClause;
}

void Cobol85Parser::ScreenDescriptionJustifiedClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterScreenDescriptionJustifiedClause(this);
}

void Cobol85Parser::ScreenDescriptionJustifiedClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitScreenDescriptionJustifiedClause(this);
}

Cobol85Parser::ScreenDescriptionJustifiedClauseContext* Cobol85Parser::screenDescriptionJustifiedClause() {
  ScreenDescriptionJustifiedClauseContext *_localctx = _tracker.createInstance<ScreenDescriptionJustifiedClauseContext>(_ctx, getState());
  enterRule(_localctx, 302, Cobol85Parser::RuleScreenDescriptionJustifiedClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2659);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::JUST

    || _la == Cobol85Parser::JUSTIFIED)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(2661);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::RIGHT) {
      setState(2660);
      match(Cobol85Parser::RIGHT);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ScreenDescriptionSignClauseContext ------------------------------------------------------------------

Cobol85Parser::ScreenDescriptionSignClauseContext::ScreenDescriptionSignClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionSignClauseContext::LEADING() {
  return getToken(Cobol85Parser::LEADING, 0);
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionSignClauseContext::TRAILING() {
  return getToken(Cobol85Parser::TRAILING, 0);
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionSignClauseContext::SIGN() {
  return getToken(Cobol85Parser::SIGN, 0);
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionSignClauseContext::SEPARATE() {
  return getToken(Cobol85Parser::SEPARATE, 0);
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionSignClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionSignClauseContext::CHARACTER() {
  return getToken(Cobol85Parser::CHARACTER, 0);
}


size_t Cobol85Parser::ScreenDescriptionSignClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleScreenDescriptionSignClause;
}

void Cobol85Parser::ScreenDescriptionSignClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterScreenDescriptionSignClause(this);
}

void Cobol85Parser::ScreenDescriptionSignClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitScreenDescriptionSignClause(this);
}

Cobol85Parser::ScreenDescriptionSignClauseContext* Cobol85Parser::screenDescriptionSignClause() {
  ScreenDescriptionSignClauseContext *_localctx = _tracker.createInstance<ScreenDescriptionSignClauseContext>(_ctx, getState());
  enterRule(_localctx, 304, Cobol85Parser::RuleScreenDescriptionSignClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2667);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::SIGN) {
      setState(2663);
      match(Cobol85Parser::SIGN);
      setState(2665);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Cobol85Parser::IS) {
        setState(2664);
        match(Cobol85Parser::IS);
      }
    }
    setState(2669);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::LEADING || _la == Cobol85Parser::TRAILING)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(2674);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::SEPARATE) {
      setState(2670);
      match(Cobol85Parser::SEPARATE);
      setState(2672);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Cobol85Parser::CHARACTER) {
        setState(2671);
        match(Cobol85Parser::CHARACTER);
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ScreenDescriptionAutoClauseContext ------------------------------------------------------------------

Cobol85Parser::ScreenDescriptionAutoClauseContext::ScreenDescriptionAutoClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionAutoClauseContext::AUTO() {
  return getToken(Cobol85Parser::AUTO, 0);
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionAutoClauseContext::AUTO_SKIP() {
  return getToken(Cobol85Parser::AUTO_SKIP, 0);
}


size_t Cobol85Parser::ScreenDescriptionAutoClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleScreenDescriptionAutoClause;
}

void Cobol85Parser::ScreenDescriptionAutoClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterScreenDescriptionAutoClause(this);
}

void Cobol85Parser::ScreenDescriptionAutoClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitScreenDescriptionAutoClause(this);
}

Cobol85Parser::ScreenDescriptionAutoClauseContext* Cobol85Parser::screenDescriptionAutoClause() {
  ScreenDescriptionAutoClauseContext *_localctx = _tracker.createInstance<ScreenDescriptionAutoClauseContext>(_ctx, getState());
  enterRule(_localctx, 306, Cobol85Parser::RuleScreenDescriptionAutoClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2676);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::AUTO

    || _la == Cobol85Parser::AUTO_SKIP)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ScreenDescriptionSecureClauseContext ------------------------------------------------------------------

Cobol85Parser::ScreenDescriptionSecureClauseContext::ScreenDescriptionSecureClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionSecureClauseContext::SECURE() {
  return getToken(Cobol85Parser::SECURE, 0);
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionSecureClauseContext::NO_ECHO() {
  return getToken(Cobol85Parser::NO_ECHO, 0);
}


size_t Cobol85Parser::ScreenDescriptionSecureClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleScreenDescriptionSecureClause;
}

void Cobol85Parser::ScreenDescriptionSecureClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterScreenDescriptionSecureClause(this);
}

void Cobol85Parser::ScreenDescriptionSecureClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitScreenDescriptionSecureClause(this);
}

Cobol85Parser::ScreenDescriptionSecureClauseContext* Cobol85Parser::screenDescriptionSecureClause() {
  ScreenDescriptionSecureClauseContext *_localctx = _tracker.createInstance<ScreenDescriptionSecureClauseContext>(_ctx, getState());
  enterRule(_localctx, 308, Cobol85Parser::RuleScreenDescriptionSecureClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2678);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::NO_ECHO || _la == Cobol85Parser::SECURE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ScreenDescriptionRequiredClauseContext ------------------------------------------------------------------

Cobol85Parser::ScreenDescriptionRequiredClauseContext::ScreenDescriptionRequiredClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionRequiredClauseContext::REQUIRED() {
  return getToken(Cobol85Parser::REQUIRED, 0);
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionRequiredClauseContext::EMPTY_CHECK() {
  return getToken(Cobol85Parser::EMPTY_CHECK, 0);
}


size_t Cobol85Parser::ScreenDescriptionRequiredClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleScreenDescriptionRequiredClause;
}

void Cobol85Parser::ScreenDescriptionRequiredClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterScreenDescriptionRequiredClause(this);
}

void Cobol85Parser::ScreenDescriptionRequiredClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitScreenDescriptionRequiredClause(this);
}

Cobol85Parser::ScreenDescriptionRequiredClauseContext* Cobol85Parser::screenDescriptionRequiredClause() {
  ScreenDescriptionRequiredClauseContext *_localctx = _tracker.createInstance<ScreenDescriptionRequiredClauseContext>(_ctx, getState());
  enterRule(_localctx, 310, Cobol85Parser::RuleScreenDescriptionRequiredClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2680);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::EMPTY_CHECK || _la == Cobol85Parser::REQUIRED)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ScreenDescriptionPromptClauseContext ------------------------------------------------------------------

Cobol85Parser::ScreenDescriptionPromptClauseContext::ScreenDescriptionPromptClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionPromptClauseContext::PROMPT() {
  return getToken(Cobol85Parser::PROMPT, 0);
}

Cobol85Parser::IdentifierContext* Cobol85Parser::ScreenDescriptionPromptClauseContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

Cobol85Parser::LiteralContext* Cobol85Parser::ScreenDescriptionPromptClauseContext::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionPromptClauseContext::CHARACTER() {
  return getToken(Cobol85Parser::CHARACTER, 0);
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionPromptClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}

Cobol85Parser::ScreenDescriptionPromptOccursClauseContext* Cobol85Parser::ScreenDescriptionPromptClauseContext::screenDescriptionPromptOccursClause() {
  return getRuleContext<Cobol85Parser::ScreenDescriptionPromptOccursClauseContext>(0);
}


size_t Cobol85Parser::ScreenDescriptionPromptClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleScreenDescriptionPromptClause;
}

void Cobol85Parser::ScreenDescriptionPromptClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterScreenDescriptionPromptClause(this);
}

void Cobol85Parser::ScreenDescriptionPromptClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitScreenDescriptionPromptClause(this);
}

Cobol85Parser::ScreenDescriptionPromptClauseContext* Cobol85Parser::screenDescriptionPromptClause() {
  ScreenDescriptionPromptClauseContext *_localctx = _tracker.createInstance<ScreenDescriptionPromptClauseContext>(_ctx, getState());
  enterRule(_localctx, 312, Cobol85Parser::RuleScreenDescriptionPromptClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2682);
    match(Cobol85Parser::PROMPT);
    setState(2684);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::CHARACTER) {
      setState(2683);
      match(Cobol85Parser::CHARACTER);
    }
    setState(2687);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(2686);
      match(Cobol85Parser::IS);
    }
    setState(2691);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 298, _ctx)) {
    case 1: {
      setState(2689);
      identifier();
      break;
    }

    case 2: {
      setState(2690);
      literal();
      break;
    }

    default:
      break;
    }
    setState(2694);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::OCCURS) {
      setState(2693);
      screenDescriptionPromptOccursClause();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ScreenDescriptionPromptOccursClauseContext ------------------------------------------------------------------

Cobol85Parser::ScreenDescriptionPromptOccursClauseContext::ScreenDescriptionPromptOccursClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionPromptOccursClauseContext::OCCURS() {
  return getToken(Cobol85Parser::OCCURS, 0);
}

Cobol85Parser::IntegerLiteralContext* Cobol85Parser::ScreenDescriptionPromptOccursClauseContext::integerLiteral() {
  return getRuleContext<Cobol85Parser::IntegerLiteralContext>(0);
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionPromptOccursClauseContext::TIMES() {
  return getToken(Cobol85Parser::TIMES, 0);
}


size_t Cobol85Parser::ScreenDescriptionPromptOccursClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleScreenDescriptionPromptOccursClause;
}

void Cobol85Parser::ScreenDescriptionPromptOccursClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterScreenDescriptionPromptOccursClause(this);
}

void Cobol85Parser::ScreenDescriptionPromptOccursClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitScreenDescriptionPromptOccursClause(this);
}

Cobol85Parser::ScreenDescriptionPromptOccursClauseContext* Cobol85Parser::screenDescriptionPromptOccursClause() {
  ScreenDescriptionPromptOccursClauseContext *_localctx = _tracker.createInstance<ScreenDescriptionPromptOccursClauseContext>(_ctx, getState());
  enterRule(_localctx, 314, Cobol85Parser::RuleScreenDescriptionPromptOccursClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2696);
    match(Cobol85Parser::OCCURS);
    setState(2697);
    integerLiteral();
    setState(2699);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::TIMES) {
      setState(2698);
      match(Cobol85Parser::TIMES);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ScreenDescriptionFullClauseContext ------------------------------------------------------------------

Cobol85Parser::ScreenDescriptionFullClauseContext::ScreenDescriptionFullClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionFullClauseContext::FULL() {
  return getToken(Cobol85Parser::FULL, 0);
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionFullClauseContext::LENGTH_CHECK() {
  return getToken(Cobol85Parser::LENGTH_CHECK, 0);
}


size_t Cobol85Parser::ScreenDescriptionFullClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleScreenDescriptionFullClause;
}

void Cobol85Parser::ScreenDescriptionFullClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterScreenDescriptionFullClause(this);
}

void Cobol85Parser::ScreenDescriptionFullClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitScreenDescriptionFullClause(this);
}

Cobol85Parser::ScreenDescriptionFullClauseContext* Cobol85Parser::screenDescriptionFullClause() {
  ScreenDescriptionFullClauseContext *_localctx = _tracker.createInstance<ScreenDescriptionFullClauseContext>(_ctx, getState());
  enterRule(_localctx, 316, Cobol85Parser::RuleScreenDescriptionFullClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2701);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::FULL

    || _la == Cobol85Parser::LENGTH_CHECK)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ScreenDescriptionZeroFillClauseContext ------------------------------------------------------------------

Cobol85Parser::ScreenDescriptionZeroFillClauseContext::ScreenDescriptionZeroFillClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ScreenDescriptionZeroFillClauseContext::ZERO_FILL() {
  return getToken(Cobol85Parser::ZERO_FILL, 0);
}


size_t Cobol85Parser::ScreenDescriptionZeroFillClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleScreenDescriptionZeroFillClause;
}

void Cobol85Parser::ScreenDescriptionZeroFillClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterScreenDescriptionZeroFillClause(this);
}

void Cobol85Parser::ScreenDescriptionZeroFillClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitScreenDescriptionZeroFillClause(this);
}

Cobol85Parser::ScreenDescriptionZeroFillClauseContext* Cobol85Parser::screenDescriptionZeroFillClause() {
  ScreenDescriptionZeroFillClauseContext *_localctx = _tracker.createInstance<ScreenDescriptionZeroFillClauseContext>(_ctx, getState());
  enterRule(_localctx, 318, Cobol85Parser::RuleScreenDescriptionZeroFillClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2703);
    match(Cobol85Parser::ZERO_FILL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReportSectionContext ------------------------------------------------------------------

Cobol85Parser::ReportSectionContext::ReportSectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ReportSectionContext::REPORT() {
  return getToken(Cobol85Parser::REPORT, 0);
}

tree::TerminalNode* Cobol85Parser::ReportSectionContext::SECTION() {
  return getToken(Cobol85Parser::SECTION, 0);
}

tree::TerminalNode* Cobol85Parser::ReportSectionContext::DOT_FS() {
  return getToken(Cobol85Parser::DOT_FS, 0);
}

std::vector<Cobol85Parser::ReportDescriptionContext *> Cobol85Parser::ReportSectionContext::reportDescription() {
  return getRuleContexts<Cobol85Parser::ReportDescriptionContext>();
}

Cobol85Parser::ReportDescriptionContext* Cobol85Parser::ReportSectionContext::reportDescription(size_t i) {
  return getRuleContext<Cobol85Parser::ReportDescriptionContext>(i);
}


size_t Cobol85Parser::ReportSectionContext::getRuleIndex() const {
  return Cobol85Parser::RuleReportSection;
}

void Cobol85Parser::ReportSectionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReportSection(this);
}

void Cobol85Parser::ReportSectionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReportSection(this);
}

Cobol85Parser::ReportSectionContext* Cobol85Parser::reportSection() {
  ReportSectionContext *_localctx = _tracker.createInstance<ReportSectionContext>(_ctx, getState());
  enterRule(_localctx, 320, Cobol85Parser::RuleReportSection);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2705);
    match(Cobol85Parser::REPORT);
    setState(2706);
    match(Cobol85Parser::SECTION);
    setState(2707);
    match(Cobol85Parser::DOT_FS);
    setState(2711);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Cobol85Parser::RD) {
      setState(2708);
      reportDescription();
      setState(2713);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReportDescriptionContext ------------------------------------------------------------------

Cobol85Parser::ReportDescriptionContext::ReportDescriptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::ReportDescriptionEntryContext* Cobol85Parser::ReportDescriptionContext::reportDescriptionEntry() {
  return getRuleContext<Cobol85Parser::ReportDescriptionEntryContext>(0);
}

std::vector<Cobol85Parser::ReportGroupDescriptionEntryContext *> Cobol85Parser::ReportDescriptionContext::reportGroupDescriptionEntry() {
  return getRuleContexts<Cobol85Parser::ReportGroupDescriptionEntryContext>();
}

Cobol85Parser::ReportGroupDescriptionEntryContext* Cobol85Parser::ReportDescriptionContext::reportGroupDescriptionEntry(size_t i) {
  return getRuleContext<Cobol85Parser::ReportGroupDescriptionEntryContext>(i);
}


size_t Cobol85Parser::ReportDescriptionContext::getRuleIndex() const {
  return Cobol85Parser::RuleReportDescription;
}

void Cobol85Parser::ReportDescriptionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReportDescription(this);
}

void Cobol85Parser::ReportDescriptionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReportDescription(this);
}

Cobol85Parser::ReportDescriptionContext* Cobol85Parser::reportDescription() {
  ReportDescriptionContext *_localctx = _tracker.createInstance<ReportDescriptionContext>(_ctx, getState());
  enterRule(_localctx, 322, Cobol85Parser::RuleReportDescription);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2714);
    reportDescriptionEntry();
    setState(2716); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(2715);
      reportGroupDescriptionEntry();
      setState(2718); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (((((_la - 552) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 552)) & 15) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReportDescriptionEntryContext ------------------------------------------------------------------

Cobol85Parser::ReportDescriptionEntryContext::ReportDescriptionEntryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ReportDescriptionEntryContext::RD() {
  return getToken(Cobol85Parser::RD, 0);
}

Cobol85Parser::ReportNameContext* Cobol85Parser::ReportDescriptionEntryContext::reportName() {
  return getRuleContext<Cobol85Parser::ReportNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::ReportDescriptionEntryContext::DOT_FS() {
  return getToken(Cobol85Parser::DOT_FS, 0);
}

Cobol85Parser::ReportDescriptionGlobalClauseContext* Cobol85Parser::ReportDescriptionEntryContext::reportDescriptionGlobalClause() {
  return getRuleContext<Cobol85Parser::ReportDescriptionGlobalClauseContext>(0);
}

Cobol85Parser::ReportDescriptionPageLimitClauseContext* Cobol85Parser::ReportDescriptionEntryContext::reportDescriptionPageLimitClause() {
  return getRuleContext<Cobol85Parser::ReportDescriptionPageLimitClauseContext>(0);
}

Cobol85Parser::ReportDescriptionHeadingClauseContext* Cobol85Parser::ReportDescriptionEntryContext::reportDescriptionHeadingClause() {
  return getRuleContext<Cobol85Parser::ReportDescriptionHeadingClauseContext>(0);
}

Cobol85Parser::ReportDescriptionFirstDetailClauseContext* Cobol85Parser::ReportDescriptionEntryContext::reportDescriptionFirstDetailClause() {
  return getRuleContext<Cobol85Parser::ReportDescriptionFirstDetailClauseContext>(0);
}

Cobol85Parser::ReportDescriptionLastDetailClauseContext* Cobol85Parser::ReportDescriptionEntryContext::reportDescriptionLastDetailClause() {
  return getRuleContext<Cobol85Parser::ReportDescriptionLastDetailClauseContext>(0);
}

Cobol85Parser::ReportDescriptionFootingClauseContext* Cobol85Parser::ReportDescriptionEntryContext::reportDescriptionFootingClause() {
  return getRuleContext<Cobol85Parser::ReportDescriptionFootingClauseContext>(0);
}


size_t Cobol85Parser::ReportDescriptionEntryContext::getRuleIndex() const {
  return Cobol85Parser::RuleReportDescriptionEntry;
}

void Cobol85Parser::ReportDescriptionEntryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReportDescriptionEntry(this);
}

void Cobol85Parser::ReportDescriptionEntryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReportDescriptionEntry(this);
}

Cobol85Parser::ReportDescriptionEntryContext* Cobol85Parser::reportDescriptionEntry() {
  ReportDescriptionEntryContext *_localctx = _tracker.createInstance<ReportDescriptionEntryContext>(_ctx, getState());
  enterRule(_localctx, 324, Cobol85Parser::RuleReportDescriptionEntry);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2720);
    match(Cobol85Parser::RD);
    setState(2721);
    reportName();
    setState(2723);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::GLOBAL

    || _la == Cobol85Parser::IS) {
      setState(2722);
      reportDescriptionGlobalClause();
    }
    setState(2738);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::PAGE) {
      setState(2725);
      reportDescriptionPageLimitClause();
      setState(2727);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Cobol85Parser::HEADING) {
        setState(2726);
        reportDescriptionHeadingClause();
      }
      setState(2730);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Cobol85Parser::FIRST) {
        setState(2729);
        reportDescriptionFirstDetailClause();
      }
      setState(2733);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Cobol85Parser::LAST) {
        setState(2732);
        reportDescriptionLastDetailClause();
      }
      setState(2736);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Cobol85Parser::FOOTING) {
        setState(2735);
        reportDescriptionFootingClause();
      }
    }
    setState(2740);
    match(Cobol85Parser::DOT_FS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReportDescriptionGlobalClauseContext ------------------------------------------------------------------

Cobol85Parser::ReportDescriptionGlobalClauseContext::ReportDescriptionGlobalClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ReportDescriptionGlobalClauseContext::GLOBAL() {
  return getToken(Cobol85Parser::GLOBAL, 0);
}

tree::TerminalNode* Cobol85Parser::ReportDescriptionGlobalClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}


size_t Cobol85Parser::ReportDescriptionGlobalClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleReportDescriptionGlobalClause;
}

void Cobol85Parser::ReportDescriptionGlobalClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReportDescriptionGlobalClause(this);
}

void Cobol85Parser::ReportDescriptionGlobalClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReportDescriptionGlobalClause(this);
}

Cobol85Parser::ReportDescriptionGlobalClauseContext* Cobol85Parser::reportDescriptionGlobalClause() {
  ReportDescriptionGlobalClauseContext *_localctx = _tracker.createInstance<ReportDescriptionGlobalClauseContext>(_ctx, getState());
  enterRule(_localctx, 326, Cobol85Parser::RuleReportDescriptionGlobalClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2743);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(2742);
      match(Cobol85Parser::IS);
    }
    setState(2745);
    match(Cobol85Parser::GLOBAL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReportDescriptionPageLimitClauseContext ------------------------------------------------------------------

Cobol85Parser::ReportDescriptionPageLimitClauseContext::ReportDescriptionPageLimitClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ReportDescriptionPageLimitClauseContext::PAGE() {
  return getToken(Cobol85Parser::PAGE, 0);
}

Cobol85Parser::IntegerLiteralContext* Cobol85Parser::ReportDescriptionPageLimitClauseContext::integerLiteral() {
  return getRuleContext<Cobol85Parser::IntegerLiteralContext>(0);
}

tree::TerminalNode* Cobol85Parser::ReportDescriptionPageLimitClauseContext::LIMIT() {
  return getToken(Cobol85Parser::LIMIT, 0);
}

tree::TerminalNode* Cobol85Parser::ReportDescriptionPageLimitClauseContext::LIMITS() {
  return getToken(Cobol85Parser::LIMITS, 0);
}

tree::TerminalNode* Cobol85Parser::ReportDescriptionPageLimitClauseContext::LINE() {
  return getToken(Cobol85Parser::LINE, 0);
}

tree::TerminalNode* Cobol85Parser::ReportDescriptionPageLimitClauseContext::LINES() {
  return getToken(Cobol85Parser::LINES, 0);
}

tree::TerminalNode* Cobol85Parser::ReportDescriptionPageLimitClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}

tree::TerminalNode* Cobol85Parser::ReportDescriptionPageLimitClauseContext::ARE() {
  return getToken(Cobol85Parser::ARE, 0);
}


size_t Cobol85Parser::ReportDescriptionPageLimitClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleReportDescriptionPageLimitClause;
}

void Cobol85Parser::ReportDescriptionPageLimitClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReportDescriptionPageLimitClause(this);
}

void Cobol85Parser::ReportDescriptionPageLimitClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReportDescriptionPageLimitClause(this);
}

Cobol85Parser::ReportDescriptionPageLimitClauseContext* Cobol85Parser::reportDescriptionPageLimitClause() {
  ReportDescriptionPageLimitClauseContext *_localctx = _tracker.createInstance<ReportDescriptionPageLimitClauseContext>(_ctx, getState());
  enterRule(_localctx, 328, Cobol85Parser::RuleReportDescriptionPageLimitClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2747);
    match(Cobol85Parser::PAGE);
    setState(2756);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Cobol85Parser::LIMIT: {
        setState(2748);
        match(Cobol85Parser::LIMIT);
        setState(2750);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Cobol85Parser::IS) {
          setState(2749);
          match(Cobol85Parser::IS);
        }
        break;
      }

      case Cobol85Parser::LIMITS: {
        setState(2752);
        match(Cobol85Parser::LIMITS);
        setState(2754);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Cobol85Parser::ARE) {
          setState(2753);
          match(Cobol85Parser::ARE);
        }
        break;
      }

      case Cobol85Parser::LEVEL_NUMBER_66:
      case Cobol85Parser::LEVEL_NUMBER_77:
      case Cobol85Parser::LEVEL_NUMBER_88:
      case Cobol85Parser::INTEGERLITERAL: {
        break;
      }

    default:
      break;
    }
    setState(2758);
    integerLiteral();
    setState(2760);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::LINE

    || _la == Cobol85Parser::LINES) {
      setState(2759);
      _la = _input->LA(1);
      if (!(_la == Cobol85Parser::LINE

      || _la == Cobol85Parser::LINES)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReportDescriptionHeadingClauseContext ------------------------------------------------------------------

Cobol85Parser::ReportDescriptionHeadingClauseContext::ReportDescriptionHeadingClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ReportDescriptionHeadingClauseContext::HEADING() {
  return getToken(Cobol85Parser::HEADING, 0);
}

Cobol85Parser::IntegerLiteralContext* Cobol85Parser::ReportDescriptionHeadingClauseContext::integerLiteral() {
  return getRuleContext<Cobol85Parser::IntegerLiteralContext>(0);
}


size_t Cobol85Parser::ReportDescriptionHeadingClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleReportDescriptionHeadingClause;
}

void Cobol85Parser::ReportDescriptionHeadingClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReportDescriptionHeadingClause(this);
}

void Cobol85Parser::ReportDescriptionHeadingClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReportDescriptionHeadingClause(this);
}

Cobol85Parser::ReportDescriptionHeadingClauseContext* Cobol85Parser::reportDescriptionHeadingClause() {
  ReportDescriptionHeadingClauseContext *_localctx = _tracker.createInstance<ReportDescriptionHeadingClauseContext>(_ctx, getState());
  enterRule(_localctx, 330, Cobol85Parser::RuleReportDescriptionHeadingClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2762);
    match(Cobol85Parser::HEADING);
    setState(2763);
    integerLiteral();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReportDescriptionFirstDetailClauseContext ------------------------------------------------------------------

Cobol85Parser::ReportDescriptionFirstDetailClauseContext::ReportDescriptionFirstDetailClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ReportDescriptionFirstDetailClauseContext::FIRST() {
  return getToken(Cobol85Parser::FIRST, 0);
}

tree::TerminalNode* Cobol85Parser::ReportDescriptionFirstDetailClauseContext::DETAIL() {
  return getToken(Cobol85Parser::DETAIL, 0);
}

Cobol85Parser::IntegerLiteralContext* Cobol85Parser::ReportDescriptionFirstDetailClauseContext::integerLiteral() {
  return getRuleContext<Cobol85Parser::IntegerLiteralContext>(0);
}


size_t Cobol85Parser::ReportDescriptionFirstDetailClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleReportDescriptionFirstDetailClause;
}

void Cobol85Parser::ReportDescriptionFirstDetailClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReportDescriptionFirstDetailClause(this);
}

void Cobol85Parser::ReportDescriptionFirstDetailClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReportDescriptionFirstDetailClause(this);
}

Cobol85Parser::ReportDescriptionFirstDetailClauseContext* Cobol85Parser::reportDescriptionFirstDetailClause() {
  ReportDescriptionFirstDetailClauseContext *_localctx = _tracker.createInstance<ReportDescriptionFirstDetailClauseContext>(_ctx, getState());
  enterRule(_localctx, 332, Cobol85Parser::RuleReportDescriptionFirstDetailClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2765);
    match(Cobol85Parser::FIRST);
    setState(2766);
    match(Cobol85Parser::DETAIL);
    setState(2767);
    integerLiteral();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReportDescriptionLastDetailClauseContext ------------------------------------------------------------------

Cobol85Parser::ReportDescriptionLastDetailClauseContext::ReportDescriptionLastDetailClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ReportDescriptionLastDetailClauseContext::LAST() {
  return getToken(Cobol85Parser::LAST, 0);
}

tree::TerminalNode* Cobol85Parser::ReportDescriptionLastDetailClauseContext::DETAIL() {
  return getToken(Cobol85Parser::DETAIL, 0);
}

Cobol85Parser::IntegerLiteralContext* Cobol85Parser::ReportDescriptionLastDetailClauseContext::integerLiteral() {
  return getRuleContext<Cobol85Parser::IntegerLiteralContext>(0);
}


size_t Cobol85Parser::ReportDescriptionLastDetailClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleReportDescriptionLastDetailClause;
}

void Cobol85Parser::ReportDescriptionLastDetailClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReportDescriptionLastDetailClause(this);
}

void Cobol85Parser::ReportDescriptionLastDetailClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReportDescriptionLastDetailClause(this);
}

Cobol85Parser::ReportDescriptionLastDetailClauseContext* Cobol85Parser::reportDescriptionLastDetailClause() {
  ReportDescriptionLastDetailClauseContext *_localctx = _tracker.createInstance<ReportDescriptionLastDetailClauseContext>(_ctx, getState());
  enterRule(_localctx, 334, Cobol85Parser::RuleReportDescriptionLastDetailClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2769);
    match(Cobol85Parser::LAST);
    setState(2770);
    match(Cobol85Parser::DETAIL);
    setState(2771);
    integerLiteral();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReportDescriptionFootingClauseContext ------------------------------------------------------------------

Cobol85Parser::ReportDescriptionFootingClauseContext::ReportDescriptionFootingClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ReportDescriptionFootingClauseContext::FOOTING() {
  return getToken(Cobol85Parser::FOOTING, 0);
}

Cobol85Parser::IntegerLiteralContext* Cobol85Parser::ReportDescriptionFootingClauseContext::integerLiteral() {
  return getRuleContext<Cobol85Parser::IntegerLiteralContext>(0);
}


size_t Cobol85Parser::ReportDescriptionFootingClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleReportDescriptionFootingClause;
}

void Cobol85Parser::ReportDescriptionFootingClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReportDescriptionFootingClause(this);
}

void Cobol85Parser::ReportDescriptionFootingClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReportDescriptionFootingClause(this);
}

Cobol85Parser::ReportDescriptionFootingClauseContext* Cobol85Parser::reportDescriptionFootingClause() {
  ReportDescriptionFootingClauseContext *_localctx = _tracker.createInstance<ReportDescriptionFootingClauseContext>(_ctx, getState());
  enterRule(_localctx, 336, Cobol85Parser::RuleReportDescriptionFootingClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2773);
    match(Cobol85Parser::FOOTING);
    setState(2774);
    integerLiteral();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReportGroupDescriptionEntryContext ------------------------------------------------------------------

Cobol85Parser::ReportGroupDescriptionEntryContext::ReportGroupDescriptionEntryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::ReportGroupDescriptionEntryFormat1Context* Cobol85Parser::ReportGroupDescriptionEntryContext::reportGroupDescriptionEntryFormat1() {
  return getRuleContext<Cobol85Parser::ReportGroupDescriptionEntryFormat1Context>(0);
}

Cobol85Parser::ReportGroupDescriptionEntryFormat2Context* Cobol85Parser::ReportGroupDescriptionEntryContext::reportGroupDescriptionEntryFormat2() {
  return getRuleContext<Cobol85Parser::ReportGroupDescriptionEntryFormat2Context>(0);
}

Cobol85Parser::ReportGroupDescriptionEntryFormat3Context* Cobol85Parser::ReportGroupDescriptionEntryContext::reportGroupDescriptionEntryFormat3() {
  return getRuleContext<Cobol85Parser::ReportGroupDescriptionEntryFormat3Context>(0);
}


size_t Cobol85Parser::ReportGroupDescriptionEntryContext::getRuleIndex() const {
  return Cobol85Parser::RuleReportGroupDescriptionEntry;
}

void Cobol85Parser::ReportGroupDescriptionEntryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReportGroupDescriptionEntry(this);
}

void Cobol85Parser::ReportGroupDescriptionEntryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReportGroupDescriptionEntry(this);
}

Cobol85Parser::ReportGroupDescriptionEntryContext* Cobol85Parser::reportGroupDescriptionEntry() {
  ReportGroupDescriptionEntryContext *_localctx = _tracker.createInstance<ReportGroupDescriptionEntryContext>(_ctx, getState());
  enterRule(_localctx, 338, Cobol85Parser::RuleReportGroupDescriptionEntry);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2779);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 314, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2776);
      reportGroupDescriptionEntryFormat1();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2777);
      reportGroupDescriptionEntryFormat2();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2778);
      reportGroupDescriptionEntryFormat3();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReportGroupDescriptionEntryFormat1Context ------------------------------------------------------------------

Cobol85Parser::ReportGroupDescriptionEntryFormat1Context::ReportGroupDescriptionEntryFormat1Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::IntegerLiteralContext* Cobol85Parser::ReportGroupDescriptionEntryFormat1Context::integerLiteral() {
  return getRuleContext<Cobol85Parser::IntegerLiteralContext>(0);
}

Cobol85Parser::DataNameContext* Cobol85Parser::ReportGroupDescriptionEntryFormat1Context::dataName() {
  return getRuleContext<Cobol85Parser::DataNameContext>(0);
}

Cobol85Parser::ReportGroupTypeClauseContext* Cobol85Parser::ReportGroupDescriptionEntryFormat1Context::reportGroupTypeClause() {
  return getRuleContext<Cobol85Parser::ReportGroupTypeClauseContext>(0);
}

tree::TerminalNode* Cobol85Parser::ReportGroupDescriptionEntryFormat1Context::DOT_FS() {
  return getToken(Cobol85Parser::DOT_FS, 0);
}

Cobol85Parser::ReportGroupLineNumberClauseContext* Cobol85Parser::ReportGroupDescriptionEntryFormat1Context::reportGroupLineNumberClause() {
  return getRuleContext<Cobol85Parser::ReportGroupLineNumberClauseContext>(0);
}

Cobol85Parser::ReportGroupNextGroupClauseContext* Cobol85Parser::ReportGroupDescriptionEntryFormat1Context::reportGroupNextGroupClause() {
  return getRuleContext<Cobol85Parser::ReportGroupNextGroupClauseContext>(0);
}

Cobol85Parser::ReportGroupUsageClauseContext* Cobol85Parser::ReportGroupDescriptionEntryFormat1Context::reportGroupUsageClause() {
  return getRuleContext<Cobol85Parser::ReportGroupUsageClauseContext>(0);
}


size_t Cobol85Parser::ReportGroupDescriptionEntryFormat1Context::getRuleIndex() const {
  return Cobol85Parser::RuleReportGroupDescriptionEntryFormat1;
}

void Cobol85Parser::ReportGroupDescriptionEntryFormat1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReportGroupDescriptionEntryFormat1(this);
}

void Cobol85Parser::ReportGroupDescriptionEntryFormat1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReportGroupDescriptionEntryFormat1(this);
}

Cobol85Parser::ReportGroupDescriptionEntryFormat1Context* Cobol85Parser::reportGroupDescriptionEntryFormat1() {
  ReportGroupDescriptionEntryFormat1Context *_localctx = _tracker.createInstance<ReportGroupDescriptionEntryFormat1Context>(_ctx, getState());
  enterRule(_localctx, 340, Cobol85Parser::RuleReportGroupDescriptionEntryFormat1);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2781);
    integerLiteral();
    setState(2782);
    dataName();
    setState(2784);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 254) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 254)) & 2305843009247248385) != 0) || _la == Cobol85Parser::PLUS || ((((_la - 552) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 552)) & 15) != 0)) {
      setState(2783);
      reportGroupLineNumberClause();
    }
    setState(2787);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::NEXT) {
      setState(2786);
      reportGroupNextGroupClause();
    }
    setState(2789);
    reportGroupTypeClause();
    setState(2791);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::DISPLAY

    || _la == Cobol85Parser::DISPLAY_1 || _la == Cobol85Parser::USAGE) {
      setState(2790);
      reportGroupUsageClause();
    }
    setState(2793);
    match(Cobol85Parser::DOT_FS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReportGroupDescriptionEntryFormat2Context ------------------------------------------------------------------

Cobol85Parser::ReportGroupDescriptionEntryFormat2Context::ReportGroupDescriptionEntryFormat2Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::IntegerLiteralContext* Cobol85Parser::ReportGroupDescriptionEntryFormat2Context::integerLiteral() {
  return getRuleContext<Cobol85Parser::IntegerLiteralContext>(0);
}

Cobol85Parser::ReportGroupUsageClauseContext* Cobol85Parser::ReportGroupDescriptionEntryFormat2Context::reportGroupUsageClause() {
  return getRuleContext<Cobol85Parser::ReportGroupUsageClauseContext>(0);
}

tree::TerminalNode* Cobol85Parser::ReportGroupDescriptionEntryFormat2Context::DOT_FS() {
  return getToken(Cobol85Parser::DOT_FS, 0);
}

Cobol85Parser::DataNameContext* Cobol85Parser::ReportGroupDescriptionEntryFormat2Context::dataName() {
  return getRuleContext<Cobol85Parser::DataNameContext>(0);
}

Cobol85Parser::ReportGroupLineNumberClauseContext* Cobol85Parser::ReportGroupDescriptionEntryFormat2Context::reportGroupLineNumberClause() {
  return getRuleContext<Cobol85Parser::ReportGroupLineNumberClauseContext>(0);
}


size_t Cobol85Parser::ReportGroupDescriptionEntryFormat2Context::getRuleIndex() const {
  return Cobol85Parser::RuleReportGroupDescriptionEntryFormat2;
}

void Cobol85Parser::ReportGroupDescriptionEntryFormat2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReportGroupDescriptionEntryFormat2(this);
}

void Cobol85Parser::ReportGroupDescriptionEntryFormat2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReportGroupDescriptionEntryFormat2(this);
}

Cobol85Parser::ReportGroupDescriptionEntryFormat2Context* Cobol85Parser::reportGroupDescriptionEntryFormat2() {
  ReportGroupDescriptionEntryFormat2Context *_localctx = _tracker.createInstance<ReportGroupDescriptionEntryFormat2Context>(_ctx, getState());
  enterRule(_localctx, 342, Cobol85Parser::RuleReportGroupDescriptionEntryFormat2);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2795);
    integerLiteral();
    setState(2797);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3512999431135821826) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 8070451912006173187) != 0) || ((((_la - 138) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 138)) & 5276573893883339531) != 0) || ((((_la - 202) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 202)) & -3098194965423761407) != 0) || ((((_la - 268) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 268)) & -9202532752178970507) != 0) || ((((_la - 336) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 336)) & 4647874433930428483) != 0) || ((((_la - 401) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 401)) & 84826144769) != 0) || ((((_la - 466) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 466)) & 103635575018455169) != 0) || _la == Cobol85Parser::IDENTIFIER) {
      setState(2796);
      dataName();
    }
    setState(2800);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 254) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 254)) & 2305843009247248385) != 0) || _la == Cobol85Parser::PLUS || ((((_la - 552) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 552)) & 15) != 0)) {
      setState(2799);
      reportGroupLineNumberClause();
    }
    setState(2802);
    reportGroupUsageClause();
    setState(2803);
    match(Cobol85Parser::DOT_FS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReportGroupDescriptionEntryFormat3Context ------------------------------------------------------------------

Cobol85Parser::ReportGroupDescriptionEntryFormat3Context::ReportGroupDescriptionEntryFormat3Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::IntegerLiteralContext* Cobol85Parser::ReportGroupDescriptionEntryFormat3Context::integerLiteral() {
  return getRuleContext<Cobol85Parser::IntegerLiteralContext>(0);
}

tree::TerminalNode* Cobol85Parser::ReportGroupDescriptionEntryFormat3Context::DOT_FS() {
  return getToken(Cobol85Parser::DOT_FS, 0);
}

Cobol85Parser::DataNameContext* Cobol85Parser::ReportGroupDescriptionEntryFormat3Context::dataName() {
  return getRuleContext<Cobol85Parser::DataNameContext>(0);
}

std::vector<Cobol85Parser::ReportGroupPictureClauseContext *> Cobol85Parser::ReportGroupDescriptionEntryFormat3Context::reportGroupPictureClause() {
  return getRuleContexts<Cobol85Parser::ReportGroupPictureClauseContext>();
}

Cobol85Parser::ReportGroupPictureClauseContext* Cobol85Parser::ReportGroupDescriptionEntryFormat3Context::reportGroupPictureClause(size_t i) {
  return getRuleContext<Cobol85Parser::ReportGroupPictureClauseContext>(i);
}

std::vector<Cobol85Parser::ReportGroupUsageClauseContext *> Cobol85Parser::ReportGroupDescriptionEntryFormat3Context::reportGroupUsageClause() {
  return getRuleContexts<Cobol85Parser::ReportGroupUsageClauseContext>();
}

Cobol85Parser::ReportGroupUsageClauseContext* Cobol85Parser::ReportGroupDescriptionEntryFormat3Context::reportGroupUsageClause(size_t i) {
  return getRuleContext<Cobol85Parser::ReportGroupUsageClauseContext>(i);
}

std::vector<Cobol85Parser::ReportGroupSignClauseContext *> Cobol85Parser::ReportGroupDescriptionEntryFormat3Context::reportGroupSignClause() {
  return getRuleContexts<Cobol85Parser::ReportGroupSignClauseContext>();
}

Cobol85Parser::ReportGroupSignClauseContext* Cobol85Parser::ReportGroupDescriptionEntryFormat3Context::reportGroupSignClause(size_t i) {
  return getRuleContext<Cobol85Parser::ReportGroupSignClauseContext>(i);
}

std::vector<Cobol85Parser::ReportGroupJustifiedClauseContext *> Cobol85Parser::ReportGroupDescriptionEntryFormat3Context::reportGroupJustifiedClause() {
  return getRuleContexts<Cobol85Parser::ReportGroupJustifiedClauseContext>();
}

Cobol85Parser::ReportGroupJustifiedClauseContext* Cobol85Parser::ReportGroupDescriptionEntryFormat3Context::reportGroupJustifiedClause(size_t i) {
  return getRuleContext<Cobol85Parser::ReportGroupJustifiedClauseContext>(i);
}

std::vector<Cobol85Parser::ReportGroupBlankWhenZeroClauseContext *> Cobol85Parser::ReportGroupDescriptionEntryFormat3Context::reportGroupBlankWhenZeroClause() {
  return getRuleContexts<Cobol85Parser::ReportGroupBlankWhenZeroClauseContext>();
}

Cobol85Parser::ReportGroupBlankWhenZeroClauseContext* Cobol85Parser::ReportGroupDescriptionEntryFormat3Context::reportGroupBlankWhenZeroClause(size_t i) {
  return getRuleContext<Cobol85Parser::ReportGroupBlankWhenZeroClauseContext>(i);
}

std::vector<Cobol85Parser::ReportGroupLineNumberClauseContext *> Cobol85Parser::ReportGroupDescriptionEntryFormat3Context::reportGroupLineNumberClause() {
  return getRuleContexts<Cobol85Parser::ReportGroupLineNumberClauseContext>();
}

Cobol85Parser::ReportGroupLineNumberClauseContext* Cobol85Parser::ReportGroupDescriptionEntryFormat3Context::reportGroupLineNumberClause(size_t i) {
  return getRuleContext<Cobol85Parser::ReportGroupLineNumberClauseContext>(i);
}

std::vector<Cobol85Parser::ReportGroupColumnNumberClauseContext *> Cobol85Parser::ReportGroupDescriptionEntryFormat3Context::reportGroupColumnNumberClause() {
  return getRuleContexts<Cobol85Parser::ReportGroupColumnNumberClauseContext>();
}

Cobol85Parser::ReportGroupColumnNumberClauseContext* Cobol85Parser::ReportGroupDescriptionEntryFormat3Context::reportGroupColumnNumberClause(size_t i) {
  return getRuleContext<Cobol85Parser::ReportGroupColumnNumberClauseContext>(i);
}

std::vector<Cobol85Parser::ReportGroupIndicateClauseContext *> Cobol85Parser::ReportGroupDescriptionEntryFormat3Context::reportGroupIndicateClause() {
  return getRuleContexts<Cobol85Parser::ReportGroupIndicateClauseContext>();
}

Cobol85Parser::ReportGroupIndicateClauseContext* Cobol85Parser::ReportGroupDescriptionEntryFormat3Context::reportGroupIndicateClause(size_t i) {
  return getRuleContext<Cobol85Parser::ReportGroupIndicateClauseContext>(i);
}

std::vector<Cobol85Parser::ReportGroupSourceClauseContext *> Cobol85Parser::ReportGroupDescriptionEntryFormat3Context::reportGroupSourceClause() {
  return getRuleContexts<Cobol85Parser::ReportGroupSourceClauseContext>();
}

Cobol85Parser::ReportGroupSourceClauseContext* Cobol85Parser::ReportGroupDescriptionEntryFormat3Context::reportGroupSourceClause(size_t i) {
  return getRuleContext<Cobol85Parser::ReportGroupSourceClauseContext>(i);
}

std::vector<Cobol85Parser::ReportGroupValueClauseContext *> Cobol85Parser::ReportGroupDescriptionEntryFormat3Context::reportGroupValueClause() {
  return getRuleContexts<Cobol85Parser::ReportGroupValueClauseContext>();
}

Cobol85Parser::ReportGroupValueClauseContext* Cobol85Parser::ReportGroupDescriptionEntryFormat3Context::reportGroupValueClause(size_t i) {
  return getRuleContext<Cobol85Parser::ReportGroupValueClauseContext>(i);
}

std::vector<Cobol85Parser::ReportGroupSumClauseContext *> Cobol85Parser::ReportGroupDescriptionEntryFormat3Context::reportGroupSumClause() {
  return getRuleContexts<Cobol85Parser::ReportGroupSumClauseContext>();
}

Cobol85Parser::ReportGroupSumClauseContext* Cobol85Parser::ReportGroupDescriptionEntryFormat3Context::reportGroupSumClause(size_t i) {
  return getRuleContext<Cobol85Parser::ReportGroupSumClauseContext>(i);
}

std::vector<Cobol85Parser::ReportGroupResetClauseContext *> Cobol85Parser::ReportGroupDescriptionEntryFormat3Context::reportGroupResetClause() {
  return getRuleContexts<Cobol85Parser::ReportGroupResetClauseContext>();
}

Cobol85Parser::ReportGroupResetClauseContext* Cobol85Parser::ReportGroupDescriptionEntryFormat3Context::reportGroupResetClause(size_t i) {
  return getRuleContext<Cobol85Parser::ReportGroupResetClauseContext>(i);
}


size_t Cobol85Parser::ReportGroupDescriptionEntryFormat3Context::getRuleIndex() const {
  return Cobol85Parser::RuleReportGroupDescriptionEntryFormat3;
}

void Cobol85Parser::ReportGroupDescriptionEntryFormat3Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReportGroupDescriptionEntryFormat3(this);
}

void Cobol85Parser::ReportGroupDescriptionEntryFormat3Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReportGroupDescriptionEntryFormat3(this);
}

Cobol85Parser::ReportGroupDescriptionEntryFormat3Context* Cobol85Parser::reportGroupDescriptionEntryFormat3() {
  ReportGroupDescriptionEntryFormat3Context *_localctx = _tracker.createInstance<ReportGroupDescriptionEntryFormat3Context>(_ctx, getState());
  enterRule(_localctx, 344, Cobol85Parser::RuleReportGroupDescriptionEntryFormat3);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2805);
    integerLiteral();
    setState(2807);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3512999431135821826) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 8070451912006173187) != 0) || ((((_la - 138) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 138)) & 5276573893883339531) != 0) || ((((_la - 202) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 202)) & -3098194965423761407) != 0) || ((((_la - 268) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 268)) & -9202532752178970507) != 0) || ((((_la - 336) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 336)) & 4647874433930428483) != 0) || ((((_la - 401) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 401)) & 84826144769) != 0) || ((((_la - 466) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 466)) & 103635575018455169) != 0) || _la == Cobol85Parser::IDENTIFIER) {
      setState(2806);
      dataName();
    }
    setState(2825);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Cobol85Parser::BLANK

    || _la == Cobol85Parser::COLUMN || _la == Cobol85Parser::DISPLAY

    || _la == Cobol85Parser::DISPLAY_1 || ((((_la - 227) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 227)) & 4503600566894593) != 0) || ((((_la - 315) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 315)) & 15032385537) != 0) || ((((_la - 402) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 402)) & 4611756455891042305) != 0) || ((((_la - 504) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 504)) & 4222124650659849) != 0)) {
      setState(2823);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case Cobol85Parser::PIC:
        case Cobol85Parser::PICTURE: {
          setState(2809);
          reportGroupPictureClause();
          break;
        }

        case Cobol85Parser::DISPLAY:
        case Cobol85Parser::DISPLAY_1:
        case Cobol85Parser::USAGE: {
          setState(2810);
          reportGroupUsageClause();
          break;
        }

        case Cobol85Parser::SIGN: {
          setState(2811);
          reportGroupSignClause();
          break;
        }

        case Cobol85Parser::JUST:
        case Cobol85Parser::JUSTIFIED: {
          setState(2812);
          reportGroupJustifiedClause();
          break;
        }

        case Cobol85Parser::BLANK: {
          setState(2813);
          reportGroupBlankWhenZeroClause();
          break;
        }

        case Cobol85Parser::IS:
        case Cobol85Parser::LINE:
        case Cobol85Parser::NUMBER:
        case Cobol85Parser::PLUS:
        case Cobol85Parser::LEVEL_NUMBER_66:
        case Cobol85Parser::LEVEL_NUMBER_77:
        case Cobol85Parser::LEVEL_NUMBER_88:
        case Cobol85Parser::INTEGERLITERAL: {
          setState(2814);
          reportGroupLineNumberClause();
          break;
        }

        case Cobol85Parser::COLUMN: {
          setState(2815);
          reportGroupColumnNumberClause();
          break;
        }

        case Cobol85Parser::RESET:
        case Cobol85Parser::SOURCE:
        case Cobol85Parser::SUM:
        case Cobol85Parser::VALUE: {
          setState(2820);
          _errHandler->sync(this);
          switch (_input->LA(1)) {
            case Cobol85Parser::SOURCE: {
              setState(2816);
              reportGroupSourceClause();
              break;
            }

            case Cobol85Parser::VALUE: {
              setState(2817);
              reportGroupValueClause();
              break;
            }

            case Cobol85Parser::SUM: {
              setState(2818);
              reportGroupSumClause();
              break;
            }

            case Cobol85Parser::RESET: {
              setState(2819);
              reportGroupResetClause();
              break;
            }

          default:
            throw NoViableAltException(this);
          }
          break;
        }

        case Cobol85Parser::GROUP: {
          setState(2822);
          reportGroupIndicateClause();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(2827);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2828);
    match(Cobol85Parser::DOT_FS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReportGroupBlankWhenZeroClauseContext ------------------------------------------------------------------

Cobol85Parser::ReportGroupBlankWhenZeroClauseContext::ReportGroupBlankWhenZeroClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ReportGroupBlankWhenZeroClauseContext::BLANK() {
  return getToken(Cobol85Parser::BLANK, 0);
}

tree::TerminalNode* Cobol85Parser::ReportGroupBlankWhenZeroClauseContext::ZERO() {
  return getToken(Cobol85Parser::ZERO, 0);
}

tree::TerminalNode* Cobol85Parser::ReportGroupBlankWhenZeroClauseContext::WHEN() {
  return getToken(Cobol85Parser::WHEN, 0);
}


size_t Cobol85Parser::ReportGroupBlankWhenZeroClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleReportGroupBlankWhenZeroClause;
}

void Cobol85Parser::ReportGroupBlankWhenZeroClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReportGroupBlankWhenZeroClause(this);
}

void Cobol85Parser::ReportGroupBlankWhenZeroClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReportGroupBlankWhenZeroClause(this);
}

Cobol85Parser::ReportGroupBlankWhenZeroClauseContext* Cobol85Parser::reportGroupBlankWhenZeroClause() {
  ReportGroupBlankWhenZeroClauseContext *_localctx = _tracker.createInstance<ReportGroupBlankWhenZeroClauseContext>(_ctx, getState());
  enterRule(_localctx, 346, Cobol85Parser::RuleReportGroupBlankWhenZeroClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2830);
    match(Cobol85Parser::BLANK);
    setState(2832);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::WHEN) {
      setState(2831);
      match(Cobol85Parser::WHEN);
    }
    setState(2834);
    match(Cobol85Parser::ZERO);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReportGroupColumnNumberClauseContext ------------------------------------------------------------------

Cobol85Parser::ReportGroupColumnNumberClauseContext::ReportGroupColumnNumberClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ReportGroupColumnNumberClauseContext::COLUMN() {
  return getToken(Cobol85Parser::COLUMN, 0);
}

Cobol85Parser::IntegerLiteralContext* Cobol85Parser::ReportGroupColumnNumberClauseContext::integerLiteral() {
  return getRuleContext<Cobol85Parser::IntegerLiteralContext>(0);
}

tree::TerminalNode* Cobol85Parser::ReportGroupColumnNumberClauseContext::NUMBER() {
  return getToken(Cobol85Parser::NUMBER, 0);
}

tree::TerminalNode* Cobol85Parser::ReportGroupColumnNumberClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}


size_t Cobol85Parser::ReportGroupColumnNumberClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleReportGroupColumnNumberClause;
}

void Cobol85Parser::ReportGroupColumnNumberClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReportGroupColumnNumberClause(this);
}

void Cobol85Parser::ReportGroupColumnNumberClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReportGroupColumnNumberClause(this);
}

Cobol85Parser::ReportGroupColumnNumberClauseContext* Cobol85Parser::reportGroupColumnNumberClause() {
  ReportGroupColumnNumberClauseContext *_localctx = _tracker.createInstance<ReportGroupColumnNumberClauseContext>(_ctx, getState());
  enterRule(_localctx, 348, Cobol85Parser::RuleReportGroupColumnNumberClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2836);
    match(Cobol85Parser::COLUMN);
    setState(2838);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::NUMBER) {
      setState(2837);
      match(Cobol85Parser::NUMBER);
    }
    setState(2841);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(2840);
      match(Cobol85Parser::IS);
    }
    setState(2843);
    integerLiteral();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReportGroupIndicateClauseContext ------------------------------------------------------------------

Cobol85Parser::ReportGroupIndicateClauseContext::ReportGroupIndicateClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ReportGroupIndicateClauseContext::GROUP() {
  return getToken(Cobol85Parser::GROUP, 0);
}

tree::TerminalNode* Cobol85Parser::ReportGroupIndicateClauseContext::INDICATE() {
  return getToken(Cobol85Parser::INDICATE, 0);
}


size_t Cobol85Parser::ReportGroupIndicateClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleReportGroupIndicateClause;
}

void Cobol85Parser::ReportGroupIndicateClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReportGroupIndicateClause(this);
}

void Cobol85Parser::ReportGroupIndicateClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReportGroupIndicateClause(this);
}

Cobol85Parser::ReportGroupIndicateClauseContext* Cobol85Parser::reportGroupIndicateClause() {
  ReportGroupIndicateClauseContext *_localctx = _tracker.createInstance<ReportGroupIndicateClauseContext>(_ctx, getState());
  enterRule(_localctx, 350, Cobol85Parser::RuleReportGroupIndicateClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2845);
    match(Cobol85Parser::GROUP);
    setState(2847);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::INDICATE) {
      setState(2846);
      match(Cobol85Parser::INDICATE);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReportGroupJustifiedClauseContext ------------------------------------------------------------------

Cobol85Parser::ReportGroupJustifiedClauseContext::ReportGroupJustifiedClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ReportGroupJustifiedClauseContext::JUSTIFIED() {
  return getToken(Cobol85Parser::JUSTIFIED, 0);
}

tree::TerminalNode* Cobol85Parser::ReportGroupJustifiedClauseContext::JUST() {
  return getToken(Cobol85Parser::JUST, 0);
}

tree::TerminalNode* Cobol85Parser::ReportGroupJustifiedClauseContext::RIGHT() {
  return getToken(Cobol85Parser::RIGHT, 0);
}


size_t Cobol85Parser::ReportGroupJustifiedClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleReportGroupJustifiedClause;
}

void Cobol85Parser::ReportGroupJustifiedClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReportGroupJustifiedClause(this);
}

void Cobol85Parser::ReportGroupJustifiedClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReportGroupJustifiedClause(this);
}

Cobol85Parser::ReportGroupJustifiedClauseContext* Cobol85Parser::reportGroupJustifiedClause() {
  ReportGroupJustifiedClauseContext *_localctx = _tracker.createInstance<ReportGroupJustifiedClauseContext>(_ctx, getState());
  enterRule(_localctx, 352, Cobol85Parser::RuleReportGroupJustifiedClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2849);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::JUST

    || _la == Cobol85Parser::JUSTIFIED)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(2851);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::RIGHT) {
      setState(2850);
      match(Cobol85Parser::RIGHT);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReportGroupLineNumberClauseContext ------------------------------------------------------------------

Cobol85Parser::ReportGroupLineNumberClauseContext::ReportGroupLineNumberClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::ReportGroupLineNumberNextPageContext* Cobol85Parser::ReportGroupLineNumberClauseContext::reportGroupLineNumberNextPage() {
  return getRuleContext<Cobol85Parser::ReportGroupLineNumberNextPageContext>(0);
}

Cobol85Parser::ReportGroupLineNumberPlusContext* Cobol85Parser::ReportGroupLineNumberClauseContext::reportGroupLineNumberPlus() {
  return getRuleContext<Cobol85Parser::ReportGroupLineNumberPlusContext>(0);
}

tree::TerminalNode* Cobol85Parser::ReportGroupLineNumberClauseContext::LINE() {
  return getToken(Cobol85Parser::LINE, 0);
}

tree::TerminalNode* Cobol85Parser::ReportGroupLineNumberClauseContext::NUMBER() {
  return getToken(Cobol85Parser::NUMBER, 0);
}

tree::TerminalNode* Cobol85Parser::ReportGroupLineNumberClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}


size_t Cobol85Parser::ReportGroupLineNumberClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleReportGroupLineNumberClause;
}

void Cobol85Parser::ReportGroupLineNumberClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReportGroupLineNumberClause(this);
}

void Cobol85Parser::ReportGroupLineNumberClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReportGroupLineNumberClause(this);
}

Cobol85Parser::ReportGroupLineNumberClauseContext* Cobol85Parser::reportGroupLineNumberClause() {
  ReportGroupLineNumberClauseContext *_localctx = _tracker.createInstance<ReportGroupLineNumberClauseContext>(_ctx, getState());
  enterRule(_localctx, 354, Cobol85Parser::RuleReportGroupLineNumberClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2854);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::LINE) {
      setState(2853);
      match(Cobol85Parser::LINE);
    }
    setState(2857);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::NUMBER) {
      setState(2856);
      match(Cobol85Parser::NUMBER);
    }
    setState(2860);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(2859);
      match(Cobol85Parser::IS);
    }
    setState(2864);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Cobol85Parser::LEVEL_NUMBER_66:
      case Cobol85Parser::LEVEL_NUMBER_77:
      case Cobol85Parser::LEVEL_NUMBER_88:
      case Cobol85Parser::INTEGERLITERAL: {
        setState(2862);
        reportGroupLineNumberNextPage();
        break;
      }

      case Cobol85Parser::PLUS: {
        setState(2863);
        reportGroupLineNumberPlus();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReportGroupLineNumberNextPageContext ------------------------------------------------------------------

Cobol85Parser::ReportGroupLineNumberNextPageContext::ReportGroupLineNumberNextPageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::IntegerLiteralContext* Cobol85Parser::ReportGroupLineNumberNextPageContext::integerLiteral() {
  return getRuleContext<Cobol85Parser::IntegerLiteralContext>(0);
}

tree::TerminalNode* Cobol85Parser::ReportGroupLineNumberNextPageContext::NEXT() {
  return getToken(Cobol85Parser::NEXT, 0);
}

tree::TerminalNode* Cobol85Parser::ReportGroupLineNumberNextPageContext::PAGE() {
  return getToken(Cobol85Parser::PAGE, 0);
}

tree::TerminalNode* Cobol85Parser::ReportGroupLineNumberNextPageContext::ON() {
  return getToken(Cobol85Parser::ON, 0);
}


size_t Cobol85Parser::ReportGroupLineNumberNextPageContext::getRuleIndex() const {
  return Cobol85Parser::RuleReportGroupLineNumberNextPage;
}

void Cobol85Parser::ReportGroupLineNumberNextPageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReportGroupLineNumberNextPage(this);
}

void Cobol85Parser::ReportGroupLineNumberNextPageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReportGroupLineNumberNextPage(this);
}

Cobol85Parser::ReportGroupLineNumberNextPageContext* Cobol85Parser::reportGroupLineNumberNextPage() {
  ReportGroupLineNumberNextPageContext *_localctx = _tracker.createInstance<ReportGroupLineNumberNextPageContext>(_ctx, getState());
  enterRule(_localctx, 356, Cobol85Parser::RuleReportGroupLineNumberNextPage);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2866);
    integerLiteral();
    setState(2872);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 334, _ctx)) {
    case 1: {
      setState(2868);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Cobol85Parser::ON) {
        setState(2867);
        match(Cobol85Parser::ON);
      }
      setState(2870);
      match(Cobol85Parser::NEXT);
      setState(2871);
      match(Cobol85Parser::PAGE);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReportGroupLineNumberPlusContext ------------------------------------------------------------------

Cobol85Parser::ReportGroupLineNumberPlusContext::ReportGroupLineNumberPlusContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ReportGroupLineNumberPlusContext::PLUS() {
  return getToken(Cobol85Parser::PLUS, 0);
}

Cobol85Parser::IntegerLiteralContext* Cobol85Parser::ReportGroupLineNumberPlusContext::integerLiteral() {
  return getRuleContext<Cobol85Parser::IntegerLiteralContext>(0);
}


size_t Cobol85Parser::ReportGroupLineNumberPlusContext::getRuleIndex() const {
  return Cobol85Parser::RuleReportGroupLineNumberPlus;
}

void Cobol85Parser::ReportGroupLineNumberPlusContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReportGroupLineNumberPlus(this);
}

void Cobol85Parser::ReportGroupLineNumberPlusContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReportGroupLineNumberPlus(this);
}

Cobol85Parser::ReportGroupLineNumberPlusContext* Cobol85Parser::reportGroupLineNumberPlus() {
  ReportGroupLineNumberPlusContext *_localctx = _tracker.createInstance<ReportGroupLineNumberPlusContext>(_ctx, getState());
  enterRule(_localctx, 358, Cobol85Parser::RuleReportGroupLineNumberPlus);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2874);
    match(Cobol85Parser::PLUS);
    setState(2875);
    integerLiteral();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReportGroupNextGroupClauseContext ------------------------------------------------------------------

Cobol85Parser::ReportGroupNextGroupClauseContext::ReportGroupNextGroupClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ReportGroupNextGroupClauseContext::NEXT() {
  return getToken(Cobol85Parser::NEXT, 0);
}

tree::TerminalNode* Cobol85Parser::ReportGroupNextGroupClauseContext::GROUP() {
  return getToken(Cobol85Parser::GROUP, 0);
}

Cobol85Parser::IntegerLiteralContext* Cobol85Parser::ReportGroupNextGroupClauseContext::integerLiteral() {
  return getRuleContext<Cobol85Parser::IntegerLiteralContext>(0);
}

Cobol85Parser::ReportGroupNextGroupNextPageContext* Cobol85Parser::ReportGroupNextGroupClauseContext::reportGroupNextGroupNextPage() {
  return getRuleContext<Cobol85Parser::ReportGroupNextGroupNextPageContext>(0);
}

Cobol85Parser::ReportGroupNextGroupPlusContext* Cobol85Parser::ReportGroupNextGroupClauseContext::reportGroupNextGroupPlus() {
  return getRuleContext<Cobol85Parser::ReportGroupNextGroupPlusContext>(0);
}

tree::TerminalNode* Cobol85Parser::ReportGroupNextGroupClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}


size_t Cobol85Parser::ReportGroupNextGroupClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleReportGroupNextGroupClause;
}

void Cobol85Parser::ReportGroupNextGroupClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReportGroupNextGroupClause(this);
}

void Cobol85Parser::ReportGroupNextGroupClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReportGroupNextGroupClause(this);
}

Cobol85Parser::ReportGroupNextGroupClauseContext* Cobol85Parser::reportGroupNextGroupClause() {
  ReportGroupNextGroupClauseContext *_localctx = _tracker.createInstance<ReportGroupNextGroupClauseContext>(_ctx, getState());
  enterRule(_localctx, 360, Cobol85Parser::RuleReportGroupNextGroupClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2877);
    match(Cobol85Parser::NEXT);
    setState(2878);
    match(Cobol85Parser::GROUP);
    setState(2880);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(2879);
      match(Cobol85Parser::IS);
    }
    setState(2885);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Cobol85Parser::LEVEL_NUMBER_66:
      case Cobol85Parser::LEVEL_NUMBER_77:
      case Cobol85Parser::LEVEL_NUMBER_88:
      case Cobol85Parser::INTEGERLITERAL: {
        setState(2882);
        integerLiteral();
        break;
      }

      case Cobol85Parser::NEXT: {
        setState(2883);
        reportGroupNextGroupNextPage();
        break;
      }

      case Cobol85Parser::PLUS: {
        setState(2884);
        reportGroupNextGroupPlus();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReportGroupNextGroupPlusContext ------------------------------------------------------------------

Cobol85Parser::ReportGroupNextGroupPlusContext::ReportGroupNextGroupPlusContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ReportGroupNextGroupPlusContext::PLUS() {
  return getToken(Cobol85Parser::PLUS, 0);
}

Cobol85Parser::IntegerLiteralContext* Cobol85Parser::ReportGroupNextGroupPlusContext::integerLiteral() {
  return getRuleContext<Cobol85Parser::IntegerLiteralContext>(0);
}


size_t Cobol85Parser::ReportGroupNextGroupPlusContext::getRuleIndex() const {
  return Cobol85Parser::RuleReportGroupNextGroupPlus;
}

void Cobol85Parser::ReportGroupNextGroupPlusContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReportGroupNextGroupPlus(this);
}

void Cobol85Parser::ReportGroupNextGroupPlusContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReportGroupNextGroupPlus(this);
}

Cobol85Parser::ReportGroupNextGroupPlusContext* Cobol85Parser::reportGroupNextGroupPlus() {
  ReportGroupNextGroupPlusContext *_localctx = _tracker.createInstance<ReportGroupNextGroupPlusContext>(_ctx, getState());
  enterRule(_localctx, 362, Cobol85Parser::RuleReportGroupNextGroupPlus);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2887);
    match(Cobol85Parser::PLUS);
    setState(2888);
    integerLiteral();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReportGroupNextGroupNextPageContext ------------------------------------------------------------------

Cobol85Parser::ReportGroupNextGroupNextPageContext::ReportGroupNextGroupNextPageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ReportGroupNextGroupNextPageContext::NEXT() {
  return getToken(Cobol85Parser::NEXT, 0);
}

tree::TerminalNode* Cobol85Parser::ReportGroupNextGroupNextPageContext::PAGE() {
  return getToken(Cobol85Parser::PAGE, 0);
}


size_t Cobol85Parser::ReportGroupNextGroupNextPageContext::getRuleIndex() const {
  return Cobol85Parser::RuleReportGroupNextGroupNextPage;
}

void Cobol85Parser::ReportGroupNextGroupNextPageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReportGroupNextGroupNextPage(this);
}

void Cobol85Parser::ReportGroupNextGroupNextPageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReportGroupNextGroupNextPage(this);
}

Cobol85Parser::ReportGroupNextGroupNextPageContext* Cobol85Parser::reportGroupNextGroupNextPage() {
  ReportGroupNextGroupNextPageContext *_localctx = _tracker.createInstance<ReportGroupNextGroupNextPageContext>(_ctx, getState());
  enterRule(_localctx, 364, Cobol85Parser::RuleReportGroupNextGroupNextPage);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2890);
    match(Cobol85Parser::NEXT);
    setState(2891);
    match(Cobol85Parser::PAGE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReportGroupPictureClauseContext ------------------------------------------------------------------

Cobol85Parser::ReportGroupPictureClauseContext::ReportGroupPictureClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::PictureStringContext* Cobol85Parser::ReportGroupPictureClauseContext::pictureString() {
  return getRuleContext<Cobol85Parser::PictureStringContext>(0);
}

tree::TerminalNode* Cobol85Parser::ReportGroupPictureClauseContext::PICTURE() {
  return getToken(Cobol85Parser::PICTURE, 0);
}

tree::TerminalNode* Cobol85Parser::ReportGroupPictureClauseContext::PIC() {
  return getToken(Cobol85Parser::PIC, 0);
}

tree::TerminalNode* Cobol85Parser::ReportGroupPictureClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}


size_t Cobol85Parser::ReportGroupPictureClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleReportGroupPictureClause;
}

void Cobol85Parser::ReportGroupPictureClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReportGroupPictureClause(this);
}

void Cobol85Parser::ReportGroupPictureClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReportGroupPictureClause(this);
}

Cobol85Parser::ReportGroupPictureClauseContext* Cobol85Parser::reportGroupPictureClause() {
  ReportGroupPictureClauseContext *_localctx = _tracker.createInstance<ReportGroupPictureClauseContext>(_ctx, getState());
  enterRule(_localctx, 366, Cobol85Parser::RuleReportGroupPictureClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2893);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::PIC

    || _la == Cobol85Parser::PICTURE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(2895);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(2894);
      match(Cobol85Parser::IS);
    }
    setState(2897);
    pictureString();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReportGroupResetClauseContext ------------------------------------------------------------------

Cobol85Parser::ReportGroupResetClauseContext::ReportGroupResetClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ReportGroupResetClauseContext::RESET() {
  return getToken(Cobol85Parser::RESET, 0);
}

tree::TerminalNode* Cobol85Parser::ReportGroupResetClauseContext::FINAL() {
  return getToken(Cobol85Parser::FINAL, 0);
}

Cobol85Parser::DataNameContext* Cobol85Parser::ReportGroupResetClauseContext::dataName() {
  return getRuleContext<Cobol85Parser::DataNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::ReportGroupResetClauseContext::ON() {
  return getToken(Cobol85Parser::ON, 0);
}


size_t Cobol85Parser::ReportGroupResetClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleReportGroupResetClause;
}

void Cobol85Parser::ReportGroupResetClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReportGroupResetClause(this);
}

void Cobol85Parser::ReportGroupResetClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReportGroupResetClause(this);
}

Cobol85Parser::ReportGroupResetClauseContext* Cobol85Parser::reportGroupResetClause() {
  ReportGroupResetClauseContext *_localctx = _tracker.createInstance<ReportGroupResetClauseContext>(_ctx, getState());
  enterRule(_localctx, 368, Cobol85Parser::RuleReportGroupResetClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2899);
    match(Cobol85Parser::RESET);
    setState(2901);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::ON) {
      setState(2900);
      match(Cobol85Parser::ON);
    }
    setState(2905);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Cobol85Parser::FINAL: {
        setState(2903);
        match(Cobol85Parser::FINAL);
        break;
      }

      case Cobol85Parser::ABORT:
      case Cobol85Parser::AS:
      case Cobol85Parser::ASCII:
      case Cobol85Parser::ASSOCIATED_DATA:
      case Cobol85Parser::ASSOCIATED_DATA_LENGTH:
      case Cobol85Parser::ATTRIBUTE:
      case Cobol85Parser::AUTO:
      case Cobol85Parser::AUTO_SKIP:
      case Cobol85Parser::BACKGROUND_COLOR:
      case Cobol85Parser::BACKGROUND_COLOUR:
      case Cobol85Parser::BEEP:
      case Cobol85Parser::BELL:
      case Cobol85Parser::BINARY:
      case Cobol85Parser::BIT:
      case Cobol85Parser::BLINK:
      case Cobol85Parser::BOUNDS:
      case Cobol85Parser::CAPABLE:
      case Cobol85Parser::CCSVERSION:
      case Cobol85Parser::CHANGED:
      case Cobol85Parser::CHANNEL:
      case Cobol85Parser::CLOSE_DISPOSITION:
      case Cobol85Parser::COBOL:
      case Cobol85Parser::COMMITMENT:
      case Cobol85Parser::CONTROL_POINT:
      case Cobol85Parser::CONVENTION:
      case Cobol85Parser::CRUNCH:
      case Cobol85Parser::CURSOR:
      case Cobol85Parser::DEFAULT:
      case Cobol85Parser::DEFAULT_DISPLAY:
      case Cobol85Parser::DEFINITION:
      case Cobol85Parser::DFHRESP:
      case Cobol85Parser::DFHVALUE:
      case Cobol85Parser::DISK:
      case Cobol85Parser::DONTCARE:
      case Cobol85Parser::DOUBLE:
      case Cobol85Parser::EBCDIC:
      case Cobol85Parser::EMPTY_CHECK:
      case Cobol85Parser::ENTER:
      case Cobol85Parser::ENTRY_PROCEDURE:
      case Cobol85Parser::ERASE:
      case Cobol85Parser::EOL:
      case Cobol85Parser::EOS:
      case Cobol85Parser::ESCAPE:
      case Cobol85Parser::EVENT:
      case Cobol85Parser::EXCLUSIVE:
      case Cobol85Parser::EXPORT:
      case Cobol85Parser::EXTENDED:
      case Cobol85Parser::FOREGROUND_COLOR:
      case Cobol85Parser::FOREGROUND_COLOUR:
      case Cobol85Parser::FULL:
      case Cobol85Parser::FUNCTIONNAME:
      case Cobol85Parser::FUNCTION_POINTER:
      case Cobol85Parser::GRID:
      case Cobol85Parser::HIGHLIGHT:
      case Cobol85Parser::IMPLICIT:
      case Cobol85Parser::IMPORT:
      case Cobol85Parser::INTEGER:
      case Cobol85Parser::KEPT:
      case Cobol85Parser::KEYBOARD:
      case Cobol85Parser::LANGUAGE:
      case Cobol85Parser::LB:
      case Cobol85Parser::LD:
      case Cobol85Parser::LEFTLINE:
      case Cobol85Parser::LENGTH_CHECK:
      case Cobol85Parser::LIBACCESS:
      case Cobol85Parser::LIBPARAMETER:
      case Cobol85Parser::LIBRARY:
      case Cobol85Parser::LIST:
      case Cobol85Parser::LOCAL:
      case Cobol85Parser::LONG_DATE:
      case Cobol85Parser::LONG_TIME:
      case Cobol85Parser::LOWER:
      case Cobol85Parser::LOWLIGHT:
      case Cobol85Parser::MMDDYYYY:
      case Cobol85Parser::NAMED:
      case Cobol85Parser::NATIONAL:
      case Cobol85Parser::NATIONAL_EDITED:
      case Cobol85Parser::NETWORK:
      case Cobol85Parser::NO_ECHO:
      case Cobol85Parser::NUMERIC_DATE:
      case Cobol85Parser::NUMERIC_TIME:
      case Cobol85Parser::ODT:
      case Cobol85Parser::ORDERLY:
      case Cobol85Parser::OVERLINE:
      case Cobol85Parser::OWN:
      case Cobol85Parser::PASSWORD:
      case Cobol85Parser::PORT:
      case Cobol85Parser::PRINTER:
      case Cobol85Parser::PRIVATE:
      case Cobol85Parser::PROCESS:
      case Cobol85Parser::PROGRAM:
      case Cobol85Parser::PROMPT:
      case Cobol85Parser::READER:
      case Cobol85Parser::REMOTE:
      case Cobol85Parser::REAL:
      case Cobol85Parser::RECEIVED:
      case Cobol85Parser::RECURSIVE:
      case Cobol85Parser::REF:
      case Cobol85Parser::REMOVE:
      case Cobol85Parser::REQUIRED:
      case Cobol85Parser::REVERSE_VIDEO:
      case Cobol85Parser::SAVE:
      case Cobol85Parser::SECURE:
      case Cobol85Parser::SHARED:
      case Cobol85Parser::SHAREDBYALL:
      case Cobol85Parser::SHAREDBYRUNUNIT:
      case Cobol85Parser::SHARING:
      case Cobol85Parser::SHORT_DATE:
      case Cobol85Parser::SYMBOL:
      case Cobol85Parser::TASK:
      case Cobol85Parser::THREAD:
      case Cobol85Parser::THREAD_LOCAL:
      case Cobol85Parser::TIMER:
      case Cobol85Parser::TODAYS_DATE:
      case Cobol85Parser::TODAYS_NAME:
      case Cobol85Parser::TRUNCATED:
      case Cobol85Parser::TYPEDEF:
      case Cobol85Parser::UNDERLINE:
      case Cobol85Parser::VIRTUAL:
      case Cobol85Parser::WAIT:
      case Cobol85Parser::YEAR:
      case Cobol85Parser::YYYYMMDD:
      case Cobol85Parser::YYYYDDD:
      case Cobol85Parser::ZERO_FILL:
      case Cobol85Parser::IDENTIFIER: {
        setState(2904);
        dataName();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReportGroupSignClauseContext ------------------------------------------------------------------

Cobol85Parser::ReportGroupSignClauseContext::ReportGroupSignClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ReportGroupSignClauseContext::SIGN() {
  return getToken(Cobol85Parser::SIGN, 0);
}

tree::TerminalNode* Cobol85Parser::ReportGroupSignClauseContext::SEPARATE() {
  return getToken(Cobol85Parser::SEPARATE, 0);
}

tree::TerminalNode* Cobol85Parser::ReportGroupSignClauseContext::LEADING() {
  return getToken(Cobol85Parser::LEADING, 0);
}

tree::TerminalNode* Cobol85Parser::ReportGroupSignClauseContext::TRAILING() {
  return getToken(Cobol85Parser::TRAILING, 0);
}

tree::TerminalNode* Cobol85Parser::ReportGroupSignClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}

tree::TerminalNode* Cobol85Parser::ReportGroupSignClauseContext::CHARACTER() {
  return getToken(Cobol85Parser::CHARACTER, 0);
}


size_t Cobol85Parser::ReportGroupSignClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleReportGroupSignClause;
}

void Cobol85Parser::ReportGroupSignClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReportGroupSignClause(this);
}

void Cobol85Parser::ReportGroupSignClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReportGroupSignClause(this);
}

Cobol85Parser::ReportGroupSignClauseContext* Cobol85Parser::reportGroupSignClause() {
  ReportGroupSignClauseContext *_localctx = _tracker.createInstance<ReportGroupSignClauseContext>(_ctx, getState());
  enterRule(_localctx, 370, Cobol85Parser::RuleReportGroupSignClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2907);
    match(Cobol85Parser::SIGN);
    setState(2909);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(2908);
      match(Cobol85Parser::IS);
    }
    setState(2911);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::LEADING || _la == Cobol85Parser::TRAILING)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(2912);
    match(Cobol85Parser::SEPARATE);
    setState(2914);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::CHARACTER) {
      setState(2913);
      match(Cobol85Parser::CHARACTER);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReportGroupSourceClauseContext ------------------------------------------------------------------

Cobol85Parser::ReportGroupSourceClauseContext::ReportGroupSourceClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ReportGroupSourceClauseContext::SOURCE() {
  return getToken(Cobol85Parser::SOURCE, 0);
}

Cobol85Parser::IdentifierContext* Cobol85Parser::ReportGroupSourceClauseContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

tree::TerminalNode* Cobol85Parser::ReportGroupSourceClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}


size_t Cobol85Parser::ReportGroupSourceClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleReportGroupSourceClause;
}

void Cobol85Parser::ReportGroupSourceClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReportGroupSourceClause(this);
}

void Cobol85Parser::ReportGroupSourceClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReportGroupSourceClause(this);
}

Cobol85Parser::ReportGroupSourceClauseContext* Cobol85Parser::reportGroupSourceClause() {
  ReportGroupSourceClauseContext *_localctx = _tracker.createInstance<ReportGroupSourceClauseContext>(_ctx, getState());
  enterRule(_localctx, 372, Cobol85Parser::RuleReportGroupSourceClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2916);
    match(Cobol85Parser::SOURCE);
    setState(2918);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(2917);
      match(Cobol85Parser::IS);
    }
    setState(2920);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReportGroupSumClauseContext ------------------------------------------------------------------

Cobol85Parser::ReportGroupSumClauseContext::ReportGroupSumClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ReportGroupSumClauseContext::SUM() {
  return getToken(Cobol85Parser::SUM, 0);
}

std::vector<Cobol85Parser::IdentifierContext *> Cobol85Parser::ReportGroupSumClauseContext::identifier() {
  return getRuleContexts<Cobol85Parser::IdentifierContext>();
}

Cobol85Parser::IdentifierContext* Cobol85Parser::ReportGroupSumClauseContext::identifier(size_t i) {
  return getRuleContext<Cobol85Parser::IdentifierContext>(i);
}

tree::TerminalNode* Cobol85Parser::ReportGroupSumClauseContext::UPON() {
  return getToken(Cobol85Parser::UPON, 0);
}

std::vector<Cobol85Parser::DataNameContext *> Cobol85Parser::ReportGroupSumClauseContext::dataName() {
  return getRuleContexts<Cobol85Parser::DataNameContext>();
}

Cobol85Parser::DataNameContext* Cobol85Parser::ReportGroupSumClauseContext::dataName(size_t i) {
  return getRuleContext<Cobol85Parser::DataNameContext>(i);
}

std::vector<tree::TerminalNode *> Cobol85Parser::ReportGroupSumClauseContext::COMMACHAR() {
  return getTokens(Cobol85Parser::COMMACHAR);
}

tree::TerminalNode* Cobol85Parser::ReportGroupSumClauseContext::COMMACHAR(size_t i) {
  return getToken(Cobol85Parser::COMMACHAR, i);
}


size_t Cobol85Parser::ReportGroupSumClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleReportGroupSumClause;
}

void Cobol85Parser::ReportGroupSumClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReportGroupSumClause(this);
}

void Cobol85Parser::ReportGroupSumClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReportGroupSumClause(this);
}

Cobol85Parser::ReportGroupSumClauseContext* Cobol85Parser::reportGroupSumClause() {
  ReportGroupSumClauseContext *_localctx = _tracker.createInstance<ReportGroupSumClauseContext>(_ctx, getState());
  enterRule(_localctx, 374, Cobol85Parser::RuleReportGroupSumClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2922);
    match(Cobol85Parser::SUM);
    setState(2923);
    identifier();
    setState(2930);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 344, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2925);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Cobol85Parser::COMMACHAR) {
          setState(2924);
          match(Cobol85Parser::COMMACHAR);
        }
        setState(2927);
        identifier(); 
      }
      setState(2932);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 344, _ctx);
    }
    setState(2944);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::UPON) {
      setState(2933);
      match(Cobol85Parser::UPON);
      setState(2934);
      dataName();
      setState(2941);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 3512999431135821826) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 68)) & 8070451912006173187) != 0) || ((((_la - 138) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 138)) & 5276573893883339531) != 0) || ((((_la - 202) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 202)) & -3098194965423761407) != 0) || ((((_la - 268) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 268)) & -9202532752178970507) != 0) || ((((_la - 336) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 336)) & 4647874433930428483) != 0) || ((((_la - 401) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 401)) & 84826144769) != 0) || ((((_la - 466) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 466)) & -9119736461836320639) != 0) || _la == Cobol85Parser::IDENTIFIER) {
        setState(2936);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Cobol85Parser::COMMACHAR) {
          setState(2935);
          match(Cobol85Parser::COMMACHAR);
        }
        setState(2938);
        dataName();
        setState(2943);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReportGroupTypeClauseContext ------------------------------------------------------------------

Cobol85Parser::ReportGroupTypeClauseContext::ReportGroupTypeClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ReportGroupTypeClauseContext::TYPE() {
  return getToken(Cobol85Parser::TYPE, 0);
}

Cobol85Parser::ReportGroupTypeReportHeadingContext* Cobol85Parser::ReportGroupTypeClauseContext::reportGroupTypeReportHeading() {
  return getRuleContext<Cobol85Parser::ReportGroupTypeReportHeadingContext>(0);
}

Cobol85Parser::ReportGroupTypePageHeadingContext* Cobol85Parser::ReportGroupTypeClauseContext::reportGroupTypePageHeading() {
  return getRuleContext<Cobol85Parser::ReportGroupTypePageHeadingContext>(0);
}

Cobol85Parser::ReportGroupTypeControlHeadingContext* Cobol85Parser::ReportGroupTypeClauseContext::reportGroupTypeControlHeading() {
  return getRuleContext<Cobol85Parser::ReportGroupTypeControlHeadingContext>(0);
}

Cobol85Parser::ReportGroupTypeDetailContext* Cobol85Parser::ReportGroupTypeClauseContext::reportGroupTypeDetail() {
  return getRuleContext<Cobol85Parser::ReportGroupTypeDetailContext>(0);
}

Cobol85Parser::ReportGroupTypeControlFootingContext* Cobol85Parser::ReportGroupTypeClauseContext::reportGroupTypeControlFooting() {
  return getRuleContext<Cobol85Parser::ReportGroupTypeControlFootingContext>(0);
}

Cobol85Parser::ReportGroupTypePageFootingContext* Cobol85Parser::ReportGroupTypeClauseContext::reportGroupTypePageFooting() {
  return getRuleContext<Cobol85Parser::ReportGroupTypePageFootingContext>(0);
}

Cobol85Parser::ReportGroupTypeReportFootingContext* Cobol85Parser::ReportGroupTypeClauseContext::reportGroupTypeReportFooting() {
  return getRuleContext<Cobol85Parser::ReportGroupTypeReportFootingContext>(0);
}

tree::TerminalNode* Cobol85Parser::ReportGroupTypeClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}


size_t Cobol85Parser::ReportGroupTypeClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleReportGroupTypeClause;
}

void Cobol85Parser::ReportGroupTypeClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReportGroupTypeClause(this);
}

void Cobol85Parser::ReportGroupTypeClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReportGroupTypeClause(this);
}

Cobol85Parser::ReportGroupTypeClauseContext* Cobol85Parser::reportGroupTypeClause() {
  ReportGroupTypeClauseContext *_localctx = _tracker.createInstance<ReportGroupTypeClauseContext>(_ctx, getState());
  enterRule(_localctx, 376, Cobol85Parser::RuleReportGroupTypeClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2946);
    match(Cobol85Parser::TYPE);
    setState(2948);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(2947);
      match(Cobol85Parser::IS);
    }
    setState(2957);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 349, _ctx)) {
    case 1: {
      setState(2950);
      reportGroupTypeReportHeading();
      break;
    }

    case 2: {
      setState(2951);
      reportGroupTypePageHeading();
      break;
    }

    case 3: {
      setState(2952);
      reportGroupTypeControlHeading();
      break;
    }

    case 4: {
      setState(2953);
      reportGroupTypeDetail();
      break;
    }

    case 5: {
      setState(2954);
      reportGroupTypeControlFooting();
      break;
    }

    case 6: {
      setState(2955);
      reportGroupTypePageFooting();
      break;
    }

    case 7: {
      setState(2956);
      reportGroupTypeReportFooting();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReportGroupTypeReportHeadingContext ------------------------------------------------------------------

Cobol85Parser::ReportGroupTypeReportHeadingContext::ReportGroupTypeReportHeadingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ReportGroupTypeReportHeadingContext::REPORT() {
  return getToken(Cobol85Parser::REPORT, 0);
}

tree::TerminalNode* Cobol85Parser::ReportGroupTypeReportHeadingContext::HEADING() {
  return getToken(Cobol85Parser::HEADING, 0);
}

tree::TerminalNode* Cobol85Parser::ReportGroupTypeReportHeadingContext::RH() {
  return getToken(Cobol85Parser::RH, 0);
}


size_t Cobol85Parser::ReportGroupTypeReportHeadingContext::getRuleIndex() const {
  return Cobol85Parser::RuleReportGroupTypeReportHeading;
}

void Cobol85Parser::ReportGroupTypeReportHeadingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReportGroupTypeReportHeading(this);
}

void Cobol85Parser::ReportGroupTypeReportHeadingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReportGroupTypeReportHeading(this);
}

Cobol85Parser::ReportGroupTypeReportHeadingContext* Cobol85Parser::reportGroupTypeReportHeading() {
  ReportGroupTypeReportHeadingContext *_localctx = _tracker.createInstance<ReportGroupTypeReportHeadingContext>(_ctx, getState());
  enterRule(_localctx, 378, Cobol85Parser::RuleReportGroupTypeReportHeading);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2962);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Cobol85Parser::REPORT: {
        enterOuterAlt(_localctx, 1);
        setState(2959);
        match(Cobol85Parser::REPORT);
        setState(2960);
        match(Cobol85Parser::HEADING);
        break;
      }

      case Cobol85Parser::RH: {
        enterOuterAlt(_localctx, 2);
        setState(2961);
        match(Cobol85Parser::RH);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReportGroupTypePageHeadingContext ------------------------------------------------------------------

Cobol85Parser::ReportGroupTypePageHeadingContext::ReportGroupTypePageHeadingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ReportGroupTypePageHeadingContext::PAGE() {
  return getToken(Cobol85Parser::PAGE, 0);
}

tree::TerminalNode* Cobol85Parser::ReportGroupTypePageHeadingContext::HEADING() {
  return getToken(Cobol85Parser::HEADING, 0);
}

tree::TerminalNode* Cobol85Parser::ReportGroupTypePageHeadingContext::PH() {
  return getToken(Cobol85Parser::PH, 0);
}


size_t Cobol85Parser::ReportGroupTypePageHeadingContext::getRuleIndex() const {
  return Cobol85Parser::RuleReportGroupTypePageHeading;
}

void Cobol85Parser::ReportGroupTypePageHeadingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReportGroupTypePageHeading(this);
}

void Cobol85Parser::ReportGroupTypePageHeadingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReportGroupTypePageHeading(this);
}

Cobol85Parser::ReportGroupTypePageHeadingContext* Cobol85Parser::reportGroupTypePageHeading() {
  ReportGroupTypePageHeadingContext *_localctx = _tracker.createInstance<ReportGroupTypePageHeadingContext>(_ctx, getState());
  enterRule(_localctx, 380, Cobol85Parser::RuleReportGroupTypePageHeading);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2967);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Cobol85Parser::PAGE: {
        enterOuterAlt(_localctx, 1);
        setState(2964);
        match(Cobol85Parser::PAGE);
        setState(2965);
        match(Cobol85Parser::HEADING);
        break;
      }

      case Cobol85Parser::PH: {
        enterOuterAlt(_localctx, 2);
        setState(2966);
        match(Cobol85Parser::PH);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReportGroupTypeControlHeadingContext ------------------------------------------------------------------

Cobol85Parser::ReportGroupTypeControlHeadingContext::ReportGroupTypeControlHeadingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ReportGroupTypeControlHeadingContext::CONTROL() {
  return getToken(Cobol85Parser::CONTROL, 0);
}

tree::TerminalNode* Cobol85Parser::ReportGroupTypeControlHeadingContext::HEADING() {
  return getToken(Cobol85Parser::HEADING, 0);
}

tree::TerminalNode* Cobol85Parser::ReportGroupTypeControlHeadingContext::CH() {
  return getToken(Cobol85Parser::CH, 0);
}

tree::TerminalNode* Cobol85Parser::ReportGroupTypeControlHeadingContext::FINAL() {
  return getToken(Cobol85Parser::FINAL, 0);
}

Cobol85Parser::DataNameContext* Cobol85Parser::ReportGroupTypeControlHeadingContext::dataName() {
  return getRuleContext<Cobol85Parser::DataNameContext>(0);
}


size_t Cobol85Parser::ReportGroupTypeControlHeadingContext::getRuleIndex() const {
  return Cobol85Parser::RuleReportGroupTypeControlHeading;
}

void Cobol85Parser::ReportGroupTypeControlHeadingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReportGroupTypeControlHeading(this);
}

void Cobol85Parser::ReportGroupTypeControlHeadingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReportGroupTypeControlHeading(this);
}

Cobol85Parser::ReportGroupTypeControlHeadingContext* Cobol85Parser::reportGroupTypeControlHeading() {
  ReportGroupTypeControlHeadingContext *_localctx = _tracker.createInstance<ReportGroupTypeControlHeadingContext>(_ctx, getState());
  enterRule(_localctx, 382, Cobol85Parser::RuleReportGroupTypeControlHeading);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2972);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Cobol85Parser::CONTROL: {
        setState(2969);
        match(Cobol85Parser::CONTROL);
        setState(2970);
        match(Cobol85Parser::HEADING);
        break;
      }

      case Cobol85Parser::CH: {
        setState(2971);
        match(Cobol85Parser::CH);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(2976);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Cobol85Parser::FINAL: {
        setState(2974);
        match(Cobol85Parser::FINAL);
        break;
      }

      case Cobol85Parser::ABORT:
      case Cobol85Parser::AS:
      case Cobol85Parser::ASCII:
      case Cobol85Parser::ASSOCIATED_DATA:
      case Cobol85Parser::ASSOCIATED_DATA_LENGTH:
      case Cobol85Parser::ATTRIBUTE:
      case Cobol85Parser::AUTO:
      case Cobol85Parser::AUTO_SKIP:
      case Cobol85Parser::BACKGROUND_COLOR:
      case Cobol85Parser::BACKGROUND_COLOUR:
      case Cobol85Parser::BEEP:
      case Cobol85Parser::BELL:
      case Cobol85Parser::BINARY:
      case Cobol85Parser::BIT:
      case Cobol85Parser::BLINK:
      case Cobol85Parser::BOUNDS:
      case Cobol85Parser::CAPABLE:
      case Cobol85Parser::CCSVERSION:
      case Cobol85Parser::CHANGED:
      case Cobol85Parser::CHANNEL:
      case Cobol85Parser::CLOSE_DISPOSITION:
      case Cobol85Parser::COBOL:
      case Cobol85Parser::COMMITMENT:
      case Cobol85Parser::CONTROL_POINT:
      case Cobol85Parser::CONVENTION:
      case Cobol85Parser::CRUNCH:
      case Cobol85Parser::CURSOR:
      case Cobol85Parser::DEFAULT:
      case Cobol85Parser::DEFAULT_DISPLAY:
      case Cobol85Parser::DEFINITION:
      case Cobol85Parser::DFHRESP:
      case Cobol85Parser::DFHVALUE:
      case Cobol85Parser::DISK:
      case Cobol85Parser::DONTCARE:
      case Cobol85Parser::DOUBLE:
      case Cobol85Parser::EBCDIC:
      case Cobol85Parser::EMPTY_CHECK:
      case Cobol85Parser::ENTER:
      case Cobol85Parser::ENTRY_PROCEDURE:
      case Cobol85Parser::ERASE:
      case Cobol85Parser::EOL:
      case Cobol85Parser::EOS:
      case Cobol85Parser::ESCAPE:
      case Cobol85Parser::EVENT:
      case Cobol85Parser::EXCLUSIVE:
      case Cobol85Parser::EXPORT:
      case Cobol85Parser::EXTENDED:
      case Cobol85Parser::FOREGROUND_COLOR:
      case Cobol85Parser::FOREGROUND_COLOUR:
      case Cobol85Parser::FULL:
      case Cobol85Parser::FUNCTIONNAME:
      case Cobol85Parser::FUNCTION_POINTER:
      case Cobol85Parser::GRID:
      case Cobol85Parser::HIGHLIGHT:
      case Cobol85Parser::IMPLICIT:
      case Cobol85Parser::IMPORT:
      case Cobol85Parser::INTEGER:
      case Cobol85Parser::KEPT:
      case Cobol85Parser::KEYBOARD:
      case Cobol85Parser::LANGUAGE:
      case Cobol85Parser::LB:
      case Cobol85Parser::LD:
      case Cobol85Parser::LEFTLINE:
      case Cobol85Parser::LENGTH_CHECK:
      case Cobol85Parser::LIBACCESS:
      case Cobol85Parser::LIBPARAMETER:
      case Cobol85Parser::LIBRARY:
      case Cobol85Parser::LIST:
      case Cobol85Parser::LOCAL:
      case Cobol85Parser::LONG_DATE:
      case Cobol85Parser::LONG_TIME:
      case Cobol85Parser::LOWER:
      case Cobol85Parser::LOWLIGHT:
      case Cobol85Parser::MMDDYYYY:
      case Cobol85Parser::NAMED:
      case Cobol85Parser::NATIONAL:
      case Cobol85Parser::NATIONAL_EDITED:
      case Cobol85Parser::NETWORK:
      case Cobol85Parser::NO_ECHO:
      case Cobol85Parser::NUMERIC_DATE:
      case Cobol85Parser::NUMERIC_TIME:
      case Cobol85Parser::ODT:
      case Cobol85Parser::ORDERLY:
      case Cobol85Parser::OVERLINE:
      case Cobol85Parser::OWN:
      case Cobol85Parser::PASSWORD:
      case Cobol85Parser::PORT:
      case Cobol85Parser::PRINTER:
      case Cobol85Parser::PRIVATE:
      case Cobol85Parser::PROCESS:
      case Cobol85Parser::PROGRAM:
      case Cobol85Parser::PROMPT:
      case Cobol85Parser::READER:
      case Cobol85Parser::REMOTE:
      case Cobol85Parser::REAL:
      case Cobol85Parser::RECEIVED:
      case Cobol85Parser::RECURSIVE:
      case Cobol85Parser::REF:
      case Cobol85Parser::REMOVE:
      case Cobol85Parser::REQUIRED:
      case Cobol85Parser::REVERSE_VIDEO:
      case Cobol85Parser::SAVE:
      case Cobol85Parser::SECURE:
      case Cobol85Parser::SHARED:
      case Cobol85Parser::SHAREDBYALL:
      case Cobol85Parser::SHAREDBYRUNUNIT:
      case Cobol85Parser::SHARING:
      case Cobol85Parser::SHORT_DATE:
      case Cobol85Parser::SYMBOL:
      case Cobol85Parser::TASK:
      case Cobol85Parser::THREAD:
      case Cobol85Parser::THREAD_LOCAL:
      case Cobol85Parser::TIMER:
      case Cobol85Parser::TODAYS_DATE:
      case Cobol85Parser::TODAYS_NAME:
      case Cobol85Parser::TRUNCATED:
      case Cobol85Parser::TYPEDEF:
      case Cobol85Parser::UNDERLINE:
      case Cobol85Parser::VIRTUAL:
      case Cobol85Parser::WAIT:
      case Cobol85Parser::YEAR:
      case Cobol85Parser::YYYYMMDD:
      case Cobol85Parser::YYYYDDD:
      case Cobol85Parser::ZERO_FILL:
      case Cobol85Parser::IDENTIFIER: {
        setState(2975);
        dataName();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReportGroupTypeDetailContext ------------------------------------------------------------------

Cobol85Parser::ReportGroupTypeDetailContext::ReportGroupTypeDetailContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ReportGroupTypeDetailContext::DETAIL() {
  return getToken(Cobol85Parser::DETAIL, 0);
}

tree::TerminalNode* Cobol85Parser::ReportGroupTypeDetailContext::DE() {
  return getToken(Cobol85Parser::DE, 0);
}


size_t Cobol85Parser::ReportGroupTypeDetailContext::getRuleIndex() const {
  return Cobol85Parser::RuleReportGroupTypeDetail;
}

void Cobol85Parser::ReportGroupTypeDetailContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReportGroupTypeDetail(this);
}

void Cobol85Parser::ReportGroupTypeDetailContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReportGroupTypeDetail(this);
}

Cobol85Parser::ReportGroupTypeDetailContext* Cobol85Parser::reportGroupTypeDetail() {
  ReportGroupTypeDetailContext *_localctx = _tracker.createInstance<ReportGroupTypeDetailContext>(_ctx, getState());
  enterRule(_localctx, 384, Cobol85Parser::RuleReportGroupTypeDetail);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2978);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::DE

    || _la == Cobol85Parser::DETAIL)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReportGroupTypeControlFootingContext ------------------------------------------------------------------

Cobol85Parser::ReportGroupTypeControlFootingContext::ReportGroupTypeControlFootingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ReportGroupTypeControlFootingContext::CONTROL() {
  return getToken(Cobol85Parser::CONTROL, 0);
}

tree::TerminalNode* Cobol85Parser::ReportGroupTypeControlFootingContext::FOOTING() {
  return getToken(Cobol85Parser::FOOTING, 0);
}

tree::TerminalNode* Cobol85Parser::ReportGroupTypeControlFootingContext::CF() {
  return getToken(Cobol85Parser::CF, 0);
}

tree::TerminalNode* Cobol85Parser::ReportGroupTypeControlFootingContext::FINAL() {
  return getToken(Cobol85Parser::FINAL, 0);
}

Cobol85Parser::DataNameContext* Cobol85Parser::ReportGroupTypeControlFootingContext::dataName() {
  return getRuleContext<Cobol85Parser::DataNameContext>(0);
}


size_t Cobol85Parser::ReportGroupTypeControlFootingContext::getRuleIndex() const {
  return Cobol85Parser::RuleReportGroupTypeControlFooting;
}

void Cobol85Parser::ReportGroupTypeControlFootingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReportGroupTypeControlFooting(this);
}

void Cobol85Parser::ReportGroupTypeControlFootingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReportGroupTypeControlFooting(this);
}

Cobol85Parser::ReportGroupTypeControlFootingContext* Cobol85Parser::reportGroupTypeControlFooting() {
  ReportGroupTypeControlFootingContext *_localctx = _tracker.createInstance<ReportGroupTypeControlFootingContext>(_ctx, getState());
  enterRule(_localctx, 386, Cobol85Parser::RuleReportGroupTypeControlFooting);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2983);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Cobol85Parser::CONTROL: {
        setState(2980);
        match(Cobol85Parser::CONTROL);
        setState(2981);
        match(Cobol85Parser::FOOTING);
        break;
      }

      case Cobol85Parser::CF: {
        setState(2982);
        match(Cobol85Parser::CF);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(2987);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Cobol85Parser::FINAL: {
        setState(2985);
        match(Cobol85Parser::FINAL);
        break;
      }

      case Cobol85Parser::ABORT:
      case Cobol85Parser::AS:
      case Cobol85Parser::ASCII:
      case Cobol85Parser::ASSOCIATED_DATA:
      case Cobol85Parser::ASSOCIATED_DATA_LENGTH:
      case Cobol85Parser::ATTRIBUTE:
      case Cobol85Parser::AUTO:
      case Cobol85Parser::AUTO_SKIP:
      case Cobol85Parser::BACKGROUND_COLOR:
      case Cobol85Parser::BACKGROUND_COLOUR:
      case Cobol85Parser::BEEP:
      case Cobol85Parser::BELL:
      case Cobol85Parser::BINARY:
      case Cobol85Parser::BIT:
      case Cobol85Parser::BLINK:
      case Cobol85Parser::BOUNDS:
      case Cobol85Parser::CAPABLE:
      case Cobol85Parser::CCSVERSION:
      case Cobol85Parser::CHANGED:
      case Cobol85Parser::CHANNEL:
      case Cobol85Parser::CLOSE_DISPOSITION:
      case Cobol85Parser::COBOL:
      case Cobol85Parser::COMMITMENT:
      case Cobol85Parser::CONTROL_POINT:
      case Cobol85Parser::CONVENTION:
      case Cobol85Parser::CRUNCH:
      case Cobol85Parser::CURSOR:
      case Cobol85Parser::DEFAULT:
      case Cobol85Parser::DEFAULT_DISPLAY:
      case Cobol85Parser::DEFINITION:
      case Cobol85Parser::DFHRESP:
      case Cobol85Parser::DFHVALUE:
      case Cobol85Parser::DISK:
      case Cobol85Parser::DONTCARE:
      case Cobol85Parser::DOUBLE:
      case Cobol85Parser::EBCDIC:
      case Cobol85Parser::EMPTY_CHECK:
      case Cobol85Parser::ENTER:
      case Cobol85Parser::ENTRY_PROCEDURE:
      case Cobol85Parser::ERASE:
      case Cobol85Parser::EOL:
      case Cobol85Parser::EOS:
      case Cobol85Parser::ESCAPE:
      case Cobol85Parser::EVENT:
      case Cobol85Parser::EXCLUSIVE:
      case Cobol85Parser::EXPORT:
      case Cobol85Parser::EXTENDED:
      case Cobol85Parser::FOREGROUND_COLOR:
      case Cobol85Parser::FOREGROUND_COLOUR:
      case Cobol85Parser::FULL:
      case Cobol85Parser::FUNCTIONNAME:
      case Cobol85Parser::FUNCTION_POINTER:
      case Cobol85Parser::GRID:
      case Cobol85Parser::HIGHLIGHT:
      case Cobol85Parser::IMPLICIT:
      case Cobol85Parser::IMPORT:
      case Cobol85Parser::INTEGER:
      case Cobol85Parser::KEPT:
      case Cobol85Parser::KEYBOARD:
      case Cobol85Parser::LANGUAGE:
      case Cobol85Parser::LB:
      case Cobol85Parser::LD:
      case Cobol85Parser::LEFTLINE:
      case Cobol85Parser::LENGTH_CHECK:
      case Cobol85Parser::LIBACCESS:
      case Cobol85Parser::LIBPARAMETER:
      case Cobol85Parser::LIBRARY:
      case Cobol85Parser::LIST:
      case Cobol85Parser::LOCAL:
      case Cobol85Parser::LONG_DATE:
      case Cobol85Parser::LONG_TIME:
      case Cobol85Parser::LOWER:
      case Cobol85Parser::LOWLIGHT:
      case Cobol85Parser::MMDDYYYY:
      case Cobol85Parser::NAMED:
      case Cobol85Parser::NATIONAL:
      case Cobol85Parser::NATIONAL_EDITED:
      case Cobol85Parser::NETWORK:
      case Cobol85Parser::NO_ECHO:
      case Cobol85Parser::NUMERIC_DATE:
      case Cobol85Parser::NUMERIC_TIME:
      case Cobol85Parser::ODT:
      case Cobol85Parser::ORDERLY:
      case Cobol85Parser::OVERLINE:
      case Cobol85Parser::OWN:
      case Cobol85Parser::PASSWORD:
      case Cobol85Parser::PORT:
      case Cobol85Parser::PRINTER:
      case Cobol85Parser::PRIVATE:
      case Cobol85Parser::PROCESS:
      case Cobol85Parser::PROGRAM:
      case Cobol85Parser::PROMPT:
      case Cobol85Parser::READER:
      case Cobol85Parser::REMOTE:
      case Cobol85Parser::REAL:
      case Cobol85Parser::RECEIVED:
      case Cobol85Parser::RECURSIVE:
      case Cobol85Parser::REF:
      case Cobol85Parser::REMOVE:
      case Cobol85Parser::REQUIRED:
      case Cobol85Parser::REVERSE_VIDEO:
      case Cobol85Parser::SAVE:
      case Cobol85Parser::SECURE:
      case Cobol85Parser::SHARED:
      case Cobol85Parser::SHAREDBYALL:
      case Cobol85Parser::SHAREDBYRUNUNIT:
      case Cobol85Parser::SHARING:
      case Cobol85Parser::SHORT_DATE:
      case Cobol85Parser::SYMBOL:
      case Cobol85Parser::TASK:
      case Cobol85Parser::THREAD:
      case Cobol85Parser::THREAD_LOCAL:
      case Cobol85Parser::TIMER:
      case Cobol85Parser::TODAYS_DATE:
      case Cobol85Parser::TODAYS_NAME:
      case Cobol85Parser::TRUNCATED:
      case Cobol85Parser::TYPEDEF:
      case Cobol85Parser::UNDERLINE:
      case Cobol85Parser::VIRTUAL:
      case Cobol85Parser::WAIT:
      case Cobol85Parser::YEAR:
      case Cobol85Parser::YYYYMMDD:
      case Cobol85Parser::YYYYDDD:
      case Cobol85Parser::ZERO_FILL:
      case Cobol85Parser::IDENTIFIER: {
        setState(2986);
        dataName();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReportGroupUsageClauseContext ------------------------------------------------------------------

Cobol85Parser::ReportGroupUsageClauseContext::ReportGroupUsageClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ReportGroupUsageClauseContext::DISPLAY() {
  return getToken(Cobol85Parser::DISPLAY, 0);
}

tree::TerminalNode* Cobol85Parser::ReportGroupUsageClauseContext::DISPLAY_1() {
  return getToken(Cobol85Parser::DISPLAY_1, 0);
}

tree::TerminalNode* Cobol85Parser::ReportGroupUsageClauseContext::USAGE() {
  return getToken(Cobol85Parser::USAGE, 0);
}

tree::TerminalNode* Cobol85Parser::ReportGroupUsageClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}


size_t Cobol85Parser::ReportGroupUsageClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleReportGroupUsageClause;
}

void Cobol85Parser::ReportGroupUsageClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReportGroupUsageClause(this);
}

void Cobol85Parser::ReportGroupUsageClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReportGroupUsageClause(this);
}

Cobol85Parser::ReportGroupUsageClauseContext* Cobol85Parser::reportGroupUsageClause() {
  ReportGroupUsageClauseContext *_localctx = _tracker.createInstance<ReportGroupUsageClauseContext>(_ctx, getState());
  enterRule(_localctx, 388, Cobol85Parser::RuleReportGroupUsageClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2993);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::USAGE) {
      setState(2989);
      match(Cobol85Parser::USAGE);
      setState(2991);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Cobol85Parser::IS) {
        setState(2990);
        match(Cobol85Parser::IS);
      }
    }
    setState(2995);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::DISPLAY

    || _la == Cobol85Parser::DISPLAY_1)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReportGroupTypePageFootingContext ------------------------------------------------------------------

Cobol85Parser::ReportGroupTypePageFootingContext::ReportGroupTypePageFootingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ReportGroupTypePageFootingContext::PAGE() {
  return getToken(Cobol85Parser::PAGE, 0);
}

tree::TerminalNode* Cobol85Parser::ReportGroupTypePageFootingContext::FOOTING() {
  return getToken(Cobol85Parser::FOOTING, 0);
}

tree::TerminalNode* Cobol85Parser::ReportGroupTypePageFootingContext::PF() {
  return getToken(Cobol85Parser::PF, 0);
}


size_t Cobol85Parser::ReportGroupTypePageFootingContext::getRuleIndex() const {
  return Cobol85Parser::RuleReportGroupTypePageFooting;
}

void Cobol85Parser::ReportGroupTypePageFootingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReportGroupTypePageFooting(this);
}

void Cobol85Parser::ReportGroupTypePageFootingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReportGroupTypePageFooting(this);
}

Cobol85Parser::ReportGroupTypePageFootingContext* Cobol85Parser::reportGroupTypePageFooting() {
  ReportGroupTypePageFootingContext *_localctx = _tracker.createInstance<ReportGroupTypePageFootingContext>(_ctx, getState());
  enterRule(_localctx, 390, Cobol85Parser::RuleReportGroupTypePageFooting);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3000);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Cobol85Parser::PAGE: {
        enterOuterAlt(_localctx, 1);
        setState(2997);
        match(Cobol85Parser::PAGE);
        setState(2998);
        match(Cobol85Parser::FOOTING);
        break;
      }

      case Cobol85Parser::PF: {
        enterOuterAlt(_localctx, 2);
        setState(2999);
        match(Cobol85Parser::PF);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReportGroupTypeReportFootingContext ------------------------------------------------------------------

Cobol85Parser::ReportGroupTypeReportFootingContext::ReportGroupTypeReportFootingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ReportGroupTypeReportFootingContext::REPORT() {
  return getToken(Cobol85Parser::REPORT, 0);
}

tree::TerminalNode* Cobol85Parser::ReportGroupTypeReportFootingContext::FOOTING() {
  return getToken(Cobol85Parser::FOOTING, 0);
}

tree::TerminalNode* Cobol85Parser::ReportGroupTypeReportFootingContext::RF() {
  return getToken(Cobol85Parser::RF, 0);
}


size_t Cobol85Parser::ReportGroupTypeReportFootingContext::getRuleIndex() const {
  return Cobol85Parser::RuleReportGroupTypeReportFooting;
}

void Cobol85Parser::ReportGroupTypeReportFootingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReportGroupTypeReportFooting(this);
}

void Cobol85Parser::ReportGroupTypeReportFootingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReportGroupTypeReportFooting(this);
}

Cobol85Parser::ReportGroupTypeReportFootingContext* Cobol85Parser::reportGroupTypeReportFooting() {
  ReportGroupTypeReportFootingContext *_localctx = _tracker.createInstance<ReportGroupTypeReportFootingContext>(_ctx, getState());
  enterRule(_localctx, 392, Cobol85Parser::RuleReportGroupTypeReportFooting);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3005);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Cobol85Parser::REPORT: {
        enterOuterAlt(_localctx, 1);
        setState(3002);
        match(Cobol85Parser::REPORT);
        setState(3003);
        match(Cobol85Parser::FOOTING);
        break;
      }

      case Cobol85Parser::RF: {
        enterOuterAlt(_localctx, 2);
        setState(3004);
        match(Cobol85Parser::RF);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReportGroupValueClauseContext ------------------------------------------------------------------

Cobol85Parser::ReportGroupValueClauseContext::ReportGroupValueClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ReportGroupValueClauseContext::VALUE() {
  return getToken(Cobol85Parser::VALUE, 0);
}

Cobol85Parser::LiteralContext* Cobol85Parser::ReportGroupValueClauseContext::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}

tree::TerminalNode* Cobol85Parser::ReportGroupValueClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}


size_t Cobol85Parser::ReportGroupValueClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleReportGroupValueClause;
}

void Cobol85Parser::ReportGroupValueClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReportGroupValueClause(this);
}

void Cobol85Parser::ReportGroupValueClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReportGroupValueClause(this);
}

Cobol85Parser::ReportGroupValueClauseContext* Cobol85Parser::reportGroupValueClause() {
  ReportGroupValueClauseContext *_localctx = _tracker.createInstance<ReportGroupValueClauseContext>(_ctx, getState());
  enterRule(_localctx, 394, Cobol85Parser::RuleReportGroupValueClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3007);
    match(Cobol85Parser::VALUE);
    setState(3009);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(3008);
      match(Cobol85Parser::IS);
    }
    setState(3011);
    literal();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProgramLibrarySectionContext ------------------------------------------------------------------

Cobol85Parser::ProgramLibrarySectionContext::ProgramLibrarySectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ProgramLibrarySectionContext::PROGRAM_LIBRARY() {
  return getToken(Cobol85Parser::PROGRAM_LIBRARY, 0);
}

tree::TerminalNode* Cobol85Parser::ProgramLibrarySectionContext::SECTION() {
  return getToken(Cobol85Parser::SECTION, 0);
}

tree::TerminalNode* Cobol85Parser::ProgramLibrarySectionContext::DOT_FS() {
  return getToken(Cobol85Parser::DOT_FS, 0);
}

std::vector<Cobol85Parser::LibraryDescriptionEntryContext *> Cobol85Parser::ProgramLibrarySectionContext::libraryDescriptionEntry() {
  return getRuleContexts<Cobol85Parser::LibraryDescriptionEntryContext>();
}

Cobol85Parser::LibraryDescriptionEntryContext* Cobol85Parser::ProgramLibrarySectionContext::libraryDescriptionEntry(size_t i) {
  return getRuleContext<Cobol85Parser::LibraryDescriptionEntryContext>(i);
}


size_t Cobol85Parser::ProgramLibrarySectionContext::getRuleIndex() const {
  return Cobol85Parser::RuleProgramLibrarySection;
}

void Cobol85Parser::ProgramLibrarySectionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProgramLibrarySection(this);
}

void Cobol85Parser::ProgramLibrarySectionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProgramLibrarySection(this);
}

Cobol85Parser::ProgramLibrarySectionContext* Cobol85Parser::programLibrarySection() {
  ProgramLibrarySectionContext *_localctx = _tracker.createInstance<ProgramLibrarySectionContext>(_ctx, getState());
  enterRule(_localctx, 396, Cobol85Parser::RuleProgramLibrarySection);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3013);
    match(Cobol85Parser::PROGRAM_LIBRARY);
    setState(3014);
    match(Cobol85Parser::SECTION);
    setState(3015);
    match(Cobol85Parser::DOT_FS);
    setState(3019);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Cobol85Parser::LB

    || _la == Cobol85Parser::LD) {
      setState(3016);
      libraryDescriptionEntry();
      setState(3021);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LibraryDescriptionEntryContext ------------------------------------------------------------------

Cobol85Parser::LibraryDescriptionEntryContext::LibraryDescriptionEntryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::LibraryDescriptionEntryFormat1Context* Cobol85Parser::LibraryDescriptionEntryContext::libraryDescriptionEntryFormat1() {
  return getRuleContext<Cobol85Parser::LibraryDescriptionEntryFormat1Context>(0);
}

Cobol85Parser::LibraryDescriptionEntryFormat2Context* Cobol85Parser::LibraryDescriptionEntryContext::libraryDescriptionEntryFormat2() {
  return getRuleContext<Cobol85Parser::LibraryDescriptionEntryFormat2Context>(0);
}


size_t Cobol85Parser::LibraryDescriptionEntryContext::getRuleIndex() const {
  return Cobol85Parser::RuleLibraryDescriptionEntry;
}

void Cobol85Parser::LibraryDescriptionEntryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLibraryDescriptionEntry(this);
}

void Cobol85Parser::LibraryDescriptionEntryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLibraryDescriptionEntry(this);
}

Cobol85Parser::LibraryDescriptionEntryContext* Cobol85Parser::libraryDescriptionEntry() {
  LibraryDescriptionEntryContext *_localctx = _tracker.createInstance<LibraryDescriptionEntryContext>(_ctx, getState());
  enterRule(_localctx, 398, Cobol85Parser::RuleLibraryDescriptionEntry);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3024);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Cobol85Parser::LD: {
        enterOuterAlt(_localctx, 1);
        setState(3022);
        libraryDescriptionEntryFormat1();
        break;
      }

      case Cobol85Parser::LB: {
        enterOuterAlt(_localctx, 2);
        setState(3023);
        libraryDescriptionEntryFormat2();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LibraryDescriptionEntryFormat1Context ------------------------------------------------------------------

Cobol85Parser::LibraryDescriptionEntryFormat1Context::LibraryDescriptionEntryFormat1Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::LibraryDescriptionEntryFormat1Context::LD() {
  return getToken(Cobol85Parser::LD, 0);
}

Cobol85Parser::LibraryNameContext* Cobol85Parser::LibraryDescriptionEntryFormat1Context::libraryName() {
  return getRuleContext<Cobol85Parser::LibraryNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::LibraryDescriptionEntryFormat1Context::EXPORT() {
  return getToken(Cobol85Parser::EXPORT, 0);
}

Cobol85Parser::LibraryAttributeClauseFormat1Context* Cobol85Parser::LibraryDescriptionEntryFormat1Context::libraryAttributeClauseFormat1() {
  return getRuleContext<Cobol85Parser::LibraryAttributeClauseFormat1Context>(0);
}

Cobol85Parser::LibraryEntryProcedureClauseFormat1Context* Cobol85Parser::LibraryDescriptionEntryFormat1Context::libraryEntryProcedureClauseFormat1() {
  return getRuleContext<Cobol85Parser::LibraryEntryProcedureClauseFormat1Context>(0);
}


size_t Cobol85Parser::LibraryDescriptionEntryFormat1Context::getRuleIndex() const {
  return Cobol85Parser::RuleLibraryDescriptionEntryFormat1;
}

void Cobol85Parser::LibraryDescriptionEntryFormat1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLibraryDescriptionEntryFormat1(this);
}

void Cobol85Parser::LibraryDescriptionEntryFormat1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLibraryDescriptionEntryFormat1(this);
}

Cobol85Parser::LibraryDescriptionEntryFormat1Context* Cobol85Parser::libraryDescriptionEntryFormat1() {
  LibraryDescriptionEntryFormat1Context *_localctx = _tracker.createInstance<LibraryDescriptionEntryFormat1Context>(_ctx, getState());
  enterRule(_localctx, 400, Cobol85Parser::RuleLibraryDescriptionEntryFormat1);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3026);
    match(Cobol85Parser::LD);
    setState(3027);
    libraryName();
    setState(3028);
    match(Cobol85Parser::EXPORT);
    setState(3030);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::ATTRIBUTE) {
      setState(3029);
      libraryAttributeClauseFormat1();
    }
    setState(3033);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::ENTRY_PROCEDURE) {
      setState(3032);
      libraryEntryProcedureClauseFormat1();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LibraryDescriptionEntryFormat2Context ------------------------------------------------------------------

Cobol85Parser::LibraryDescriptionEntryFormat2Context::LibraryDescriptionEntryFormat2Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::LibraryDescriptionEntryFormat2Context::LB() {
  return getToken(Cobol85Parser::LB, 0);
}

Cobol85Parser::LibraryNameContext* Cobol85Parser::LibraryDescriptionEntryFormat2Context::libraryName() {
  return getRuleContext<Cobol85Parser::LibraryNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::LibraryDescriptionEntryFormat2Context::IMPORT() {
  return getToken(Cobol85Parser::IMPORT, 0);
}

Cobol85Parser::LibraryIsGlobalClauseContext* Cobol85Parser::LibraryDescriptionEntryFormat2Context::libraryIsGlobalClause() {
  return getRuleContext<Cobol85Parser::LibraryIsGlobalClauseContext>(0);
}

Cobol85Parser::LibraryIsCommonClauseContext* Cobol85Parser::LibraryDescriptionEntryFormat2Context::libraryIsCommonClause() {
  return getRuleContext<Cobol85Parser::LibraryIsCommonClauseContext>(0);
}

std::vector<Cobol85Parser::LibraryAttributeClauseFormat2Context *> Cobol85Parser::LibraryDescriptionEntryFormat2Context::libraryAttributeClauseFormat2() {
  return getRuleContexts<Cobol85Parser::LibraryAttributeClauseFormat2Context>();
}

Cobol85Parser::LibraryAttributeClauseFormat2Context* Cobol85Parser::LibraryDescriptionEntryFormat2Context::libraryAttributeClauseFormat2(size_t i) {
  return getRuleContext<Cobol85Parser::LibraryAttributeClauseFormat2Context>(i);
}

std::vector<Cobol85Parser::LibraryEntryProcedureClauseFormat2Context *> Cobol85Parser::LibraryDescriptionEntryFormat2Context::libraryEntryProcedureClauseFormat2() {
  return getRuleContexts<Cobol85Parser::LibraryEntryProcedureClauseFormat2Context>();
}

Cobol85Parser::LibraryEntryProcedureClauseFormat2Context* Cobol85Parser::LibraryDescriptionEntryFormat2Context::libraryEntryProcedureClauseFormat2(size_t i) {
  return getRuleContext<Cobol85Parser::LibraryEntryProcedureClauseFormat2Context>(i);
}


size_t Cobol85Parser::LibraryDescriptionEntryFormat2Context::getRuleIndex() const {
  return Cobol85Parser::RuleLibraryDescriptionEntryFormat2;
}

void Cobol85Parser::LibraryDescriptionEntryFormat2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLibraryDescriptionEntryFormat2(this);
}

void Cobol85Parser::LibraryDescriptionEntryFormat2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLibraryDescriptionEntryFormat2(this);
}

Cobol85Parser::LibraryDescriptionEntryFormat2Context* Cobol85Parser::libraryDescriptionEntryFormat2() {
  LibraryDescriptionEntryFormat2Context *_localctx = _tracker.createInstance<LibraryDescriptionEntryFormat2Context>(_ctx, getState());
  enterRule(_localctx, 402, Cobol85Parser::RuleLibraryDescriptionEntryFormat2);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3035);
    match(Cobol85Parser::LB);
    setState(3036);
    libraryName();
    setState(3037);
    match(Cobol85Parser::IMPORT);
    setState(3039);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 365, _ctx)) {
    case 1: {
      setState(3038);
      libraryIsGlobalClause();
      break;
    }

    default:
      break;
    }
    setState(3042);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::COMMON || _la == Cobol85Parser::IS) {
      setState(3041);
      libraryIsCommonClause();
    }
    setState(3048);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Cobol85Parser::ATTRIBUTE || _la == Cobol85Parser::ENTRY_PROCEDURE) {
      setState(3046);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case Cobol85Parser::ATTRIBUTE: {
          setState(3044);
          libraryAttributeClauseFormat2();
          break;
        }

        case Cobol85Parser::ENTRY_PROCEDURE: {
          setState(3045);
          libraryEntryProcedureClauseFormat2();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(3050);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LibraryAttributeClauseFormat1Context ------------------------------------------------------------------

Cobol85Parser::LibraryAttributeClauseFormat1Context::LibraryAttributeClauseFormat1Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::LibraryAttributeClauseFormat1Context::ATTRIBUTE() {
  return getToken(Cobol85Parser::ATTRIBUTE, 0);
}

tree::TerminalNode* Cobol85Parser::LibraryAttributeClauseFormat1Context::SHARING() {
  return getToken(Cobol85Parser::SHARING, 0);
}

tree::TerminalNode* Cobol85Parser::LibraryAttributeClauseFormat1Context::DONTCARE() {
  return getToken(Cobol85Parser::DONTCARE, 0);
}

tree::TerminalNode* Cobol85Parser::LibraryAttributeClauseFormat1Context::PRIVATE() {
  return getToken(Cobol85Parser::PRIVATE, 0);
}

tree::TerminalNode* Cobol85Parser::LibraryAttributeClauseFormat1Context::SHAREDBYRUNUNIT() {
  return getToken(Cobol85Parser::SHAREDBYRUNUNIT, 0);
}

tree::TerminalNode* Cobol85Parser::LibraryAttributeClauseFormat1Context::SHAREDBYALL() {
  return getToken(Cobol85Parser::SHAREDBYALL, 0);
}

tree::TerminalNode* Cobol85Parser::LibraryAttributeClauseFormat1Context::IS() {
  return getToken(Cobol85Parser::IS, 0);
}


size_t Cobol85Parser::LibraryAttributeClauseFormat1Context::getRuleIndex() const {
  return Cobol85Parser::RuleLibraryAttributeClauseFormat1;
}

void Cobol85Parser::LibraryAttributeClauseFormat1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLibraryAttributeClauseFormat1(this);
}

void Cobol85Parser::LibraryAttributeClauseFormat1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLibraryAttributeClauseFormat1(this);
}

Cobol85Parser::LibraryAttributeClauseFormat1Context* Cobol85Parser::libraryAttributeClauseFormat1() {
  LibraryAttributeClauseFormat1Context *_localctx = _tracker.createInstance<LibraryAttributeClauseFormat1Context>(_ctx, getState());
  enterRule(_localctx, 404, Cobol85Parser::RuleLibraryAttributeClauseFormat1);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3051);
    match(Cobol85Parser::ATTRIBUTE);
    setState(3057);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::SHARING) {
      setState(3052);
      match(Cobol85Parser::SHARING);
      setState(3054);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Cobol85Parser::IS) {
        setState(3053);
        match(Cobol85Parser::IS);
      }
      setState(3056);
      _la = _input->LA(1);
      if (!(_la == Cobol85Parser::DONTCARE || _la == Cobol85Parser::PRIVATE || _la == Cobol85Parser::SHAREDBYALL

      || _la == Cobol85Parser::SHAREDBYRUNUNIT)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LibraryAttributeClauseFormat2Context ------------------------------------------------------------------

Cobol85Parser::LibraryAttributeClauseFormat2Context::LibraryAttributeClauseFormat2Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::LibraryAttributeClauseFormat2Context::ATTRIBUTE() {
  return getToken(Cobol85Parser::ATTRIBUTE, 0);
}

Cobol85Parser::LibraryAttributeFunctionContext* Cobol85Parser::LibraryAttributeClauseFormat2Context::libraryAttributeFunction() {
  return getRuleContext<Cobol85Parser::LibraryAttributeFunctionContext>(0);
}

tree::TerminalNode* Cobol85Parser::LibraryAttributeClauseFormat2Context::LIBACCESS() {
  return getToken(Cobol85Parser::LIBACCESS, 0);
}

Cobol85Parser::LibraryAttributeParameterContext* Cobol85Parser::LibraryAttributeClauseFormat2Context::libraryAttributeParameter() {
  return getRuleContext<Cobol85Parser::LibraryAttributeParameterContext>(0);
}

Cobol85Parser::LibraryAttributeTitleContext* Cobol85Parser::LibraryAttributeClauseFormat2Context::libraryAttributeTitle() {
  return getRuleContext<Cobol85Parser::LibraryAttributeTitleContext>(0);
}

tree::TerminalNode* Cobol85Parser::LibraryAttributeClauseFormat2Context::BYFUNCTION() {
  return getToken(Cobol85Parser::BYFUNCTION, 0);
}

tree::TerminalNode* Cobol85Parser::LibraryAttributeClauseFormat2Context::BYTITLE() {
  return getToken(Cobol85Parser::BYTITLE, 0);
}

tree::TerminalNode* Cobol85Parser::LibraryAttributeClauseFormat2Context::IS() {
  return getToken(Cobol85Parser::IS, 0);
}


size_t Cobol85Parser::LibraryAttributeClauseFormat2Context::getRuleIndex() const {
  return Cobol85Parser::RuleLibraryAttributeClauseFormat2;
}

void Cobol85Parser::LibraryAttributeClauseFormat2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLibraryAttributeClauseFormat2(this);
}

void Cobol85Parser::LibraryAttributeClauseFormat2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLibraryAttributeClauseFormat2(this);
}

Cobol85Parser::LibraryAttributeClauseFormat2Context* Cobol85Parser::libraryAttributeClauseFormat2() {
  LibraryAttributeClauseFormat2Context *_localctx = _tracker.createInstance<LibraryAttributeClauseFormat2Context>(_ctx, getState());
  enterRule(_localctx, 406, Cobol85Parser::RuleLibraryAttributeClauseFormat2);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3059);
    match(Cobol85Parser::ATTRIBUTE);
    setState(3061);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::FUNCTIONNAME) {
      setState(3060);
      libraryAttributeFunction();
    }
    setState(3068);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::LIBACCESS) {
      setState(3063);
      match(Cobol85Parser::LIBACCESS);
      setState(3065);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Cobol85Parser::IS) {
        setState(3064);
        match(Cobol85Parser::IS);
      }
      setState(3067);
      _la = _input->LA(1);
      if (!(_la == Cobol85Parser::BYFUNCTION

      || _la == Cobol85Parser::BYTITLE)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(3071);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::LIBPARAMETER) {
      setState(3070);
      libraryAttributeParameter();
    }
    setState(3074);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::TITLE) {
      setState(3073);
      libraryAttributeTitle();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LibraryAttributeFunctionContext ------------------------------------------------------------------

Cobol85Parser::LibraryAttributeFunctionContext::LibraryAttributeFunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::LibraryAttributeFunctionContext::FUNCTIONNAME() {
  return getToken(Cobol85Parser::FUNCTIONNAME, 0);
}

tree::TerminalNode* Cobol85Parser::LibraryAttributeFunctionContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}

Cobol85Parser::LiteralContext* Cobol85Parser::LibraryAttributeFunctionContext::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}


size_t Cobol85Parser::LibraryAttributeFunctionContext::getRuleIndex() const {
  return Cobol85Parser::RuleLibraryAttributeFunction;
}

void Cobol85Parser::LibraryAttributeFunctionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLibraryAttributeFunction(this);
}

void Cobol85Parser::LibraryAttributeFunctionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLibraryAttributeFunction(this);
}

Cobol85Parser::LibraryAttributeFunctionContext* Cobol85Parser::libraryAttributeFunction() {
  LibraryAttributeFunctionContext *_localctx = _tracker.createInstance<LibraryAttributeFunctionContext>(_ctx, getState());
  enterRule(_localctx, 408, Cobol85Parser::RuleLibraryAttributeFunction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3076);
    match(Cobol85Parser::FUNCTIONNAME);
    setState(3077);
    match(Cobol85Parser::IS);
    setState(3078);
    literal();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LibraryAttributeParameterContext ------------------------------------------------------------------

Cobol85Parser::LibraryAttributeParameterContext::LibraryAttributeParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::LibraryAttributeParameterContext::LIBPARAMETER() {
  return getToken(Cobol85Parser::LIBPARAMETER, 0);
}

Cobol85Parser::LiteralContext* Cobol85Parser::LibraryAttributeParameterContext::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}

tree::TerminalNode* Cobol85Parser::LibraryAttributeParameterContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}


size_t Cobol85Parser::LibraryAttributeParameterContext::getRuleIndex() const {
  return Cobol85Parser::RuleLibraryAttributeParameter;
}

void Cobol85Parser::LibraryAttributeParameterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLibraryAttributeParameter(this);
}

void Cobol85Parser::LibraryAttributeParameterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLibraryAttributeParameter(this);
}

Cobol85Parser::LibraryAttributeParameterContext* Cobol85Parser::libraryAttributeParameter() {
  LibraryAttributeParameterContext *_localctx = _tracker.createInstance<LibraryAttributeParameterContext>(_ctx, getState());
  enterRule(_localctx, 410, Cobol85Parser::RuleLibraryAttributeParameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3080);
    match(Cobol85Parser::LIBPARAMETER);
    setState(3082);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(3081);
      match(Cobol85Parser::IS);
    }
    setState(3084);
    literal();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LibraryAttributeTitleContext ------------------------------------------------------------------

Cobol85Parser::LibraryAttributeTitleContext::LibraryAttributeTitleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::LibraryAttributeTitleContext::TITLE() {
  return getToken(Cobol85Parser::TITLE, 0);
}

Cobol85Parser::LiteralContext* Cobol85Parser::LibraryAttributeTitleContext::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}

tree::TerminalNode* Cobol85Parser::LibraryAttributeTitleContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}


size_t Cobol85Parser::LibraryAttributeTitleContext::getRuleIndex() const {
  return Cobol85Parser::RuleLibraryAttributeTitle;
}

void Cobol85Parser::LibraryAttributeTitleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLibraryAttributeTitle(this);
}

void Cobol85Parser::LibraryAttributeTitleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLibraryAttributeTitle(this);
}

Cobol85Parser::LibraryAttributeTitleContext* Cobol85Parser::libraryAttributeTitle() {
  LibraryAttributeTitleContext *_localctx = _tracker.createInstance<LibraryAttributeTitleContext>(_ctx, getState());
  enterRule(_localctx, 412, Cobol85Parser::RuleLibraryAttributeTitle);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3086);
    match(Cobol85Parser::TITLE);
    setState(3088);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(3087);
      match(Cobol85Parser::IS);
    }
    setState(3090);
    literal();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LibraryEntryProcedureClauseFormat1Context ------------------------------------------------------------------

Cobol85Parser::LibraryEntryProcedureClauseFormat1Context::LibraryEntryProcedureClauseFormat1Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::LibraryEntryProcedureClauseFormat1Context::ENTRY_PROCEDURE() {
  return getToken(Cobol85Parser::ENTRY_PROCEDURE, 0);
}

Cobol85Parser::ProgramNameContext* Cobol85Parser::LibraryEntryProcedureClauseFormat1Context::programName() {
  return getRuleContext<Cobol85Parser::ProgramNameContext>(0);
}

Cobol85Parser::LibraryEntryProcedureForClauseContext* Cobol85Parser::LibraryEntryProcedureClauseFormat1Context::libraryEntryProcedureForClause() {
  return getRuleContext<Cobol85Parser::LibraryEntryProcedureForClauseContext>(0);
}


size_t Cobol85Parser::LibraryEntryProcedureClauseFormat1Context::getRuleIndex() const {
  return Cobol85Parser::RuleLibraryEntryProcedureClauseFormat1;
}

void Cobol85Parser::LibraryEntryProcedureClauseFormat1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLibraryEntryProcedureClauseFormat1(this);
}

void Cobol85Parser::LibraryEntryProcedureClauseFormat1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLibraryEntryProcedureClauseFormat1(this);
}

Cobol85Parser::LibraryEntryProcedureClauseFormat1Context* Cobol85Parser::libraryEntryProcedureClauseFormat1() {
  LibraryEntryProcedureClauseFormat1Context *_localctx = _tracker.createInstance<LibraryEntryProcedureClauseFormat1Context>(_ctx, getState());
  enterRule(_localctx, 414, Cobol85Parser::RuleLibraryEntryProcedureClauseFormat1);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3092);
    match(Cobol85Parser::ENTRY_PROCEDURE);
    setState(3093);
    programName();
    setState(3095);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::FOR) {
      setState(3094);
      libraryEntryProcedureForClause();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LibraryEntryProcedureClauseFormat2Context ------------------------------------------------------------------

Cobol85Parser::LibraryEntryProcedureClauseFormat2Context::LibraryEntryProcedureClauseFormat2Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::LibraryEntryProcedureClauseFormat2Context::ENTRY_PROCEDURE() {
  return getToken(Cobol85Parser::ENTRY_PROCEDURE, 0);
}

Cobol85Parser::ProgramNameContext* Cobol85Parser::LibraryEntryProcedureClauseFormat2Context::programName() {
  return getRuleContext<Cobol85Parser::ProgramNameContext>(0);
}

Cobol85Parser::LibraryEntryProcedureForClauseContext* Cobol85Parser::LibraryEntryProcedureClauseFormat2Context::libraryEntryProcedureForClause() {
  return getRuleContext<Cobol85Parser::LibraryEntryProcedureForClauseContext>(0);
}

Cobol85Parser::LibraryEntryProcedureWithClauseContext* Cobol85Parser::LibraryEntryProcedureClauseFormat2Context::libraryEntryProcedureWithClause() {
  return getRuleContext<Cobol85Parser::LibraryEntryProcedureWithClauseContext>(0);
}

Cobol85Parser::LibraryEntryProcedureUsingClauseContext* Cobol85Parser::LibraryEntryProcedureClauseFormat2Context::libraryEntryProcedureUsingClause() {
  return getRuleContext<Cobol85Parser::LibraryEntryProcedureUsingClauseContext>(0);
}

Cobol85Parser::LibraryEntryProcedureGivingClauseContext* Cobol85Parser::LibraryEntryProcedureClauseFormat2Context::libraryEntryProcedureGivingClause() {
  return getRuleContext<Cobol85Parser::LibraryEntryProcedureGivingClauseContext>(0);
}


size_t Cobol85Parser::LibraryEntryProcedureClauseFormat2Context::getRuleIndex() const {
  return Cobol85Parser::RuleLibraryEntryProcedureClauseFormat2;
}

void Cobol85Parser::LibraryEntryProcedureClauseFormat2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLibraryEntryProcedureClauseFormat2(this);
}

void Cobol85Parser::LibraryEntryProcedureClauseFormat2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLibraryEntryProcedureClauseFormat2(this);
}

Cobol85Parser::LibraryEntryProcedureClauseFormat2Context* Cobol85Parser::libraryEntryProcedureClauseFormat2() {
  LibraryEntryProcedureClauseFormat2Context *_localctx = _tracker.createInstance<LibraryEntryProcedureClauseFormat2Context>(_ctx, getState());
  enterRule(_localctx, 416, Cobol85Parser::RuleLibraryEntryProcedureClauseFormat2);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3097);
    match(Cobol85Parser::ENTRY_PROCEDURE);
    setState(3098);
    programName();
    setState(3100);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::FOR) {
      setState(3099);
      libraryEntryProcedureForClause();
    }
    setState(3103);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::WITH) {
      setState(3102);
      libraryEntryProcedureWithClause();
    }
    setState(3106);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::USING) {
      setState(3105);
      libraryEntryProcedureUsingClause();
    }
    setState(3109);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::GIVING) {
      setState(3108);
      libraryEntryProcedureGivingClause();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LibraryEntryProcedureForClauseContext ------------------------------------------------------------------

Cobol85Parser::LibraryEntryProcedureForClauseContext::LibraryEntryProcedureForClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::LibraryEntryProcedureForClauseContext::FOR() {
  return getToken(Cobol85Parser::FOR, 0);
}

Cobol85Parser::LiteralContext* Cobol85Parser::LibraryEntryProcedureForClauseContext::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}


size_t Cobol85Parser::LibraryEntryProcedureForClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleLibraryEntryProcedureForClause;
}

void Cobol85Parser::LibraryEntryProcedureForClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLibraryEntryProcedureForClause(this);
}

void Cobol85Parser::LibraryEntryProcedureForClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLibraryEntryProcedureForClause(this);
}

Cobol85Parser::LibraryEntryProcedureForClauseContext* Cobol85Parser::libraryEntryProcedureForClause() {
  LibraryEntryProcedureForClauseContext *_localctx = _tracker.createInstance<LibraryEntryProcedureForClauseContext>(_ctx, getState());
  enterRule(_localctx, 418, Cobol85Parser::RuleLibraryEntryProcedureForClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3111);
    match(Cobol85Parser::FOR);
    setState(3112);
    literal();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LibraryEntryProcedureGivingClauseContext ------------------------------------------------------------------

Cobol85Parser::LibraryEntryProcedureGivingClauseContext::LibraryEntryProcedureGivingClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::LibraryEntryProcedureGivingClauseContext::GIVING() {
  return getToken(Cobol85Parser::GIVING, 0);
}

Cobol85Parser::DataNameContext* Cobol85Parser::LibraryEntryProcedureGivingClauseContext::dataName() {
  return getRuleContext<Cobol85Parser::DataNameContext>(0);
}


size_t Cobol85Parser::LibraryEntryProcedureGivingClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleLibraryEntryProcedureGivingClause;
}

void Cobol85Parser::LibraryEntryProcedureGivingClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLibraryEntryProcedureGivingClause(this);
}

void Cobol85Parser::LibraryEntryProcedureGivingClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLibraryEntryProcedureGivingClause(this);
}

Cobol85Parser::LibraryEntryProcedureGivingClauseContext* Cobol85Parser::libraryEntryProcedureGivingClause() {
  LibraryEntryProcedureGivingClauseContext *_localctx = _tracker.createInstance<LibraryEntryProcedureGivingClauseContext>(_ctx, getState());
  enterRule(_localctx, 420, Cobol85Parser::RuleLibraryEntryProcedureGivingClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3114);
    match(Cobol85Parser::GIVING);
    setState(3115);
    dataName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LibraryEntryProcedureUsingClauseContext ------------------------------------------------------------------

Cobol85Parser::LibraryEntryProcedureUsingClauseContext::LibraryEntryProcedureUsingClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::LibraryEntryProcedureUsingClauseContext::USING() {
  return getToken(Cobol85Parser::USING, 0);
}

std::vector<Cobol85Parser::LibraryEntryProcedureUsingNameContext *> Cobol85Parser::LibraryEntryProcedureUsingClauseContext::libraryEntryProcedureUsingName() {
  return getRuleContexts<Cobol85Parser::LibraryEntryProcedureUsingNameContext>();
}

Cobol85Parser::LibraryEntryProcedureUsingNameContext* Cobol85Parser::LibraryEntryProcedureUsingClauseContext::libraryEntryProcedureUsingName(size_t i) {
  return getRuleContext<Cobol85Parser::LibraryEntryProcedureUsingNameContext>(i);
}


size_t Cobol85Parser::LibraryEntryProcedureUsingClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleLibraryEntryProcedureUsingClause;
}

void Cobol85Parser::LibraryEntryProcedureUsingClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLibraryEntryProcedureUsingClause(this);
}

void Cobol85Parser::LibraryEntryProcedureUsingClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLibraryEntryProcedureUsingClause(this);
}

Cobol85Parser::LibraryEntryProcedureUsingClauseContext* Cobol85Parser::libraryEntryProcedureUsingClause() {
  LibraryEntryProcedureUsingClauseContext *_localctx = _tracker.createInstance<LibraryEntryProcedureUsingClauseContext>(_ctx, getState());
  enterRule(_localctx, 422, Cobol85Parser::RuleLibraryEntryProcedureUsingClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3117);
    match(Cobol85Parser::USING);
    setState(3119); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(3118);
              libraryEntryProcedureUsingName();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(3121); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 383, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LibraryEntryProcedureUsingNameContext ------------------------------------------------------------------

Cobol85Parser::LibraryEntryProcedureUsingNameContext::LibraryEntryProcedureUsingNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::DataNameContext* Cobol85Parser::LibraryEntryProcedureUsingNameContext::dataName() {
  return getRuleContext<Cobol85Parser::DataNameContext>(0);
}

Cobol85Parser::FileNameContext* Cobol85Parser::LibraryEntryProcedureUsingNameContext::fileName() {
  return getRuleContext<Cobol85Parser::FileNameContext>(0);
}


size_t Cobol85Parser::LibraryEntryProcedureUsingNameContext::getRuleIndex() const {
  return Cobol85Parser::RuleLibraryEntryProcedureUsingName;
}

void Cobol85Parser::LibraryEntryProcedureUsingNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLibraryEntryProcedureUsingName(this);
}

void Cobol85Parser::LibraryEntryProcedureUsingNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLibraryEntryProcedureUsingName(this);
}

Cobol85Parser::LibraryEntryProcedureUsingNameContext* Cobol85Parser::libraryEntryProcedureUsingName() {
  LibraryEntryProcedureUsingNameContext *_localctx = _tracker.createInstance<LibraryEntryProcedureUsingNameContext>(_ctx, getState());
  enterRule(_localctx, 424, Cobol85Parser::RuleLibraryEntryProcedureUsingName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3125);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 384, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3123);
      dataName();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3124);
      fileName();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LibraryEntryProcedureWithClauseContext ------------------------------------------------------------------

Cobol85Parser::LibraryEntryProcedureWithClauseContext::LibraryEntryProcedureWithClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::LibraryEntryProcedureWithClauseContext::WITH() {
  return getToken(Cobol85Parser::WITH, 0);
}

std::vector<Cobol85Parser::LibraryEntryProcedureWithNameContext *> Cobol85Parser::LibraryEntryProcedureWithClauseContext::libraryEntryProcedureWithName() {
  return getRuleContexts<Cobol85Parser::LibraryEntryProcedureWithNameContext>();
}

Cobol85Parser::LibraryEntryProcedureWithNameContext* Cobol85Parser::LibraryEntryProcedureWithClauseContext::libraryEntryProcedureWithName(size_t i) {
  return getRuleContext<Cobol85Parser::LibraryEntryProcedureWithNameContext>(i);
}


size_t Cobol85Parser::LibraryEntryProcedureWithClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleLibraryEntryProcedureWithClause;
}

void Cobol85Parser::LibraryEntryProcedureWithClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLibraryEntryProcedureWithClause(this);
}

void Cobol85Parser::LibraryEntryProcedureWithClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLibraryEntryProcedureWithClause(this);
}

Cobol85Parser::LibraryEntryProcedureWithClauseContext* Cobol85Parser::libraryEntryProcedureWithClause() {
  LibraryEntryProcedureWithClauseContext *_localctx = _tracker.createInstance<LibraryEntryProcedureWithClauseContext>(_ctx, getState());
  enterRule(_localctx, 426, Cobol85Parser::RuleLibraryEntryProcedureWithClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3127);
    match(Cobol85Parser::WITH);
    setState(3129); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(3128);
              libraryEntryProcedureWithName();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(3131); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 385, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LibraryEntryProcedureWithNameContext ------------------------------------------------------------------

Cobol85Parser::LibraryEntryProcedureWithNameContext::LibraryEntryProcedureWithNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::LocalNameContext* Cobol85Parser::LibraryEntryProcedureWithNameContext::localName() {
  return getRuleContext<Cobol85Parser::LocalNameContext>(0);
}

Cobol85Parser::FileNameContext* Cobol85Parser::LibraryEntryProcedureWithNameContext::fileName() {
  return getRuleContext<Cobol85Parser::FileNameContext>(0);
}


size_t Cobol85Parser::LibraryEntryProcedureWithNameContext::getRuleIndex() const {
  return Cobol85Parser::RuleLibraryEntryProcedureWithName;
}

void Cobol85Parser::LibraryEntryProcedureWithNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLibraryEntryProcedureWithName(this);
}

void Cobol85Parser::LibraryEntryProcedureWithNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLibraryEntryProcedureWithName(this);
}

Cobol85Parser::LibraryEntryProcedureWithNameContext* Cobol85Parser::libraryEntryProcedureWithName() {
  LibraryEntryProcedureWithNameContext *_localctx = _tracker.createInstance<LibraryEntryProcedureWithNameContext>(_ctx, getState());
  enterRule(_localctx, 428, Cobol85Parser::RuleLibraryEntryProcedureWithName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3135);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 386, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3133);
      localName();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3134);
      fileName();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LibraryIsCommonClauseContext ------------------------------------------------------------------

Cobol85Parser::LibraryIsCommonClauseContext::LibraryIsCommonClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::LibraryIsCommonClauseContext::COMMON() {
  return getToken(Cobol85Parser::COMMON, 0);
}

tree::TerminalNode* Cobol85Parser::LibraryIsCommonClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}


size_t Cobol85Parser::LibraryIsCommonClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleLibraryIsCommonClause;
}

void Cobol85Parser::LibraryIsCommonClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLibraryIsCommonClause(this);
}

void Cobol85Parser::LibraryIsCommonClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLibraryIsCommonClause(this);
}

Cobol85Parser::LibraryIsCommonClauseContext* Cobol85Parser::libraryIsCommonClause() {
  LibraryIsCommonClauseContext *_localctx = _tracker.createInstance<LibraryIsCommonClauseContext>(_ctx, getState());
  enterRule(_localctx, 430, Cobol85Parser::RuleLibraryIsCommonClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3138);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(3137);
      match(Cobol85Parser::IS);
    }
    setState(3140);
    match(Cobol85Parser::COMMON);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LibraryIsGlobalClauseContext ------------------------------------------------------------------

Cobol85Parser::LibraryIsGlobalClauseContext::LibraryIsGlobalClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::LibraryIsGlobalClauseContext::GLOBAL() {
  return getToken(Cobol85Parser::GLOBAL, 0);
}

tree::TerminalNode* Cobol85Parser::LibraryIsGlobalClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}


size_t Cobol85Parser::LibraryIsGlobalClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleLibraryIsGlobalClause;
}

void Cobol85Parser::LibraryIsGlobalClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLibraryIsGlobalClause(this);
}

void Cobol85Parser::LibraryIsGlobalClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLibraryIsGlobalClause(this);
}

Cobol85Parser::LibraryIsGlobalClauseContext* Cobol85Parser::libraryIsGlobalClause() {
  LibraryIsGlobalClauseContext *_localctx = _tracker.createInstance<LibraryIsGlobalClauseContext>(_ctx, getState());
  enterRule(_localctx, 432, Cobol85Parser::RuleLibraryIsGlobalClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3143);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(3142);
      match(Cobol85Parser::IS);
    }
    setState(3145);
    match(Cobol85Parser::GLOBAL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DataDescriptionEntryContext ------------------------------------------------------------------

Cobol85Parser::DataDescriptionEntryContext::DataDescriptionEntryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::DataDescriptionEntryFormat1Context* Cobol85Parser::DataDescriptionEntryContext::dataDescriptionEntryFormat1() {
  return getRuleContext<Cobol85Parser::DataDescriptionEntryFormat1Context>(0);
}

Cobol85Parser::DataDescriptionEntryFormat2Context* Cobol85Parser::DataDescriptionEntryContext::dataDescriptionEntryFormat2() {
  return getRuleContext<Cobol85Parser::DataDescriptionEntryFormat2Context>(0);
}

Cobol85Parser::DataDescriptionEntryFormat3Context* Cobol85Parser::DataDescriptionEntryContext::dataDescriptionEntryFormat3() {
  return getRuleContext<Cobol85Parser::DataDescriptionEntryFormat3Context>(0);
}

Cobol85Parser::DataDescriptionEntryExecSqlContext* Cobol85Parser::DataDescriptionEntryContext::dataDescriptionEntryExecSql() {
  return getRuleContext<Cobol85Parser::DataDescriptionEntryExecSqlContext>(0);
}


size_t Cobol85Parser::DataDescriptionEntryContext::getRuleIndex() const {
  return Cobol85Parser::RuleDataDescriptionEntry;
}

void Cobol85Parser::DataDescriptionEntryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDataDescriptionEntry(this);
}

void Cobol85Parser::DataDescriptionEntryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDataDescriptionEntry(this);
}

Cobol85Parser::DataDescriptionEntryContext* Cobol85Parser::dataDescriptionEntry() {
  DataDescriptionEntryContext *_localctx = _tracker.createInstance<DataDescriptionEntryContext>(_ctx, getState());
  enterRule(_localctx, 434, Cobol85Parser::RuleDataDescriptionEntry);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3151);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Cobol85Parser::LEVEL_NUMBER_77:
      case Cobol85Parser::INTEGERLITERAL: {
        enterOuterAlt(_localctx, 1);
        setState(3147);
        dataDescriptionEntryFormat1();
        break;
      }

      case Cobol85Parser::LEVEL_NUMBER_66: {
        enterOuterAlt(_localctx, 2);
        setState(3148);
        dataDescriptionEntryFormat2();
        break;
      }

      case Cobol85Parser::LEVEL_NUMBER_88: {
        enterOuterAlt(_localctx, 3);
        setState(3149);
        dataDescriptionEntryFormat3();
        break;
      }

      case Cobol85Parser::EXECSQLLINE: {
        enterOuterAlt(_localctx, 4);
        setState(3150);
        dataDescriptionEntryExecSql();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DataDescriptionEntryFormat1Context ------------------------------------------------------------------

Cobol85Parser::DataDescriptionEntryFormat1Context::DataDescriptionEntryFormat1Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::DataDescriptionEntryFormat1Context::DOT_FS() {
  return getToken(Cobol85Parser::DOT_FS, 0);
}

tree::TerminalNode* Cobol85Parser::DataDescriptionEntryFormat1Context::INTEGERLITERAL() {
  return getToken(Cobol85Parser::INTEGERLITERAL, 0);
}

tree::TerminalNode* Cobol85Parser::DataDescriptionEntryFormat1Context::LEVEL_NUMBER_77() {
  return getToken(Cobol85Parser::LEVEL_NUMBER_77, 0);
}

tree::TerminalNode* Cobol85Parser::DataDescriptionEntryFormat1Context::FILLER() {
  return getToken(Cobol85Parser::FILLER, 0);
}

Cobol85Parser::DataNameContext* Cobol85Parser::DataDescriptionEntryFormat1Context::dataName() {
  return getRuleContext<Cobol85Parser::DataNameContext>(0);
}

std::vector<Cobol85Parser::DataRedefinesClauseContext *> Cobol85Parser::DataDescriptionEntryFormat1Context::dataRedefinesClause() {
  return getRuleContexts<Cobol85Parser::DataRedefinesClauseContext>();
}

Cobol85Parser::DataRedefinesClauseContext* Cobol85Parser::DataDescriptionEntryFormat1Context::dataRedefinesClause(size_t i) {
  return getRuleContext<Cobol85Parser::DataRedefinesClauseContext>(i);
}

std::vector<Cobol85Parser::DataIntegerStringClauseContext *> Cobol85Parser::DataDescriptionEntryFormat1Context::dataIntegerStringClause() {
  return getRuleContexts<Cobol85Parser::DataIntegerStringClauseContext>();
}

Cobol85Parser::DataIntegerStringClauseContext* Cobol85Parser::DataDescriptionEntryFormat1Context::dataIntegerStringClause(size_t i) {
  return getRuleContext<Cobol85Parser::DataIntegerStringClauseContext>(i);
}

std::vector<Cobol85Parser::DataExternalClauseContext *> Cobol85Parser::DataDescriptionEntryFormat1Context::dataExternalClause() {
  return getRuleContexts<Cobol85Parser::DataExternalClauseContext>();
}

Cobol85Parser::DataExternalClauseContext* Cobol85Parser::DataDescriptionEntryFormat1Context::dataExternalClause(size_t i) {
  return getRuleContext<Cobol85Parser::DataExternalClauseContext>(i);
}

std::vector<Cobol85Parser::DataGlobalClauseContext *> Cobol85Parser::DataDescriptionEntryFormat1Context::dataGlobalClause() {
  return getRuleContexts<Cobol85Parser::DataGlobalClauseContext>();
}

Cobol85Parser::DataGlobalClauseContext* Cobol85Parser::DataDescriptionEntryFormat1Context::dataGlobalClause(size_t i) {
  return getRuleContext<Cobol85Parser::DataGlobalClauseContext>(i);
}

std::vector<Cobol85Parser::DataTypeDefClauseContext *> Cobol85Parser::DataDescriptionEntryFormat1Context::dataTypeDefClause() {
  return getRuleContexts<Cobol85Parser::DataTypeDefClauseContext>();
}

Cobol85Parser::DataTypeDefClauseContext* Cobol85Parser::DataDescriptionEntryFormat1Context::dataTypeDefClause(size_t i) {
  return getRuleContext<Cobol85Parser::DataTypeDefClauseContext>(i);
}

std::vector<Cobol85Parser::DataThreadLocalClauseContext *> Cobol85Parser::DataDescriptionEntryFormat1Context::dataThreadLocalClause() {
  return getRuleContexts<Cobol85Parser::DataThreadLocalClauseContext>();
}

Cobol85Parser::DataThreadLocalClauseContext* Cobol85Parser::DataDescriptionEntryFormat1Context::dataThreadLocalClause(size_t i) {
  return getRuleContext<Cobol85Parser::DataThreadLocalClauseContext>(i);
}

std::vector<Cobol85Parser::DataPictureClauseContext *> Cobol85Parser::DataDescriptionEntryFormat1Context::dataPictureClause() {
  return getRuleContexts<Cobol85Parser::DataPictureClauseContext>();
}

Cobol85Parser::DataPictureClauseContext* Cobol85Parser::DataDescriptionEntryFormat1Context::dataPictureClause(size_t i) {
  return getRuleContext<Cobol85Parser::DataPictureClauseContext>(i);
}

std::vector<Cobol85Parser::DataCommonOwnLocalClauseContext *> Cobol85Parser::DataDescriptionEntryFormat1Context::dataCommonOwnLocalClause() {
  return getRuleContexts<Cobol85Parser::DataCommonOwnLocalClauseContext>();
}

Cobol85Parser::DataCommonOwnLocalClauseContext* Cobol85Parser::DataDescriptionEntryFormat1Context::dataCommonOwnLocalClause(size_t i) {
  return getRuleContext<Cobol85Parser::DataCommonOwnLocalClauseContext>(i);
}

std::vector<Cobol85Parser::DataTypeClauseContext *> Cobol85Parser::DataDescriptionEntryFormat1Context::dataTypeClause() {
  return getRuleContexts<Cobol85Parser::DataTypeClauseContext>();
}

Cobol85Parser::DataTypeClauseContext* Cobol85Parser::DataDescriptionEntryFormat1Context::dataTypeClause(size_t i) {
  return getRuleContext<Cobol85Parser::DataTypeClauseContext>(i);
}

std::vector<Cobol85Parser::DataUsingClauseContext *> Cobol85Parser::DataDescriptionEntryFormat1Context::dataUsingClause() {
  return getRuleContexts<Cobol85Parser::DataUsingClauseContext>();
}

Cobol85Parser::DataUsingClauseContext* Cobol85Parser::DataDescriptionEntryFormat1Context::dataUsingClause(size_t i) {
  return getRuleContext<Cobol85Parser::DataUsingClauseContext>(i);
}

std::vector<Cobol85Parser::DataUsageClauseContext *> Cobol85Parser::DataDescriptionEntryFormat1Context::dataUsageClause() {
  return getRuleContexts<Cobol85Parser::DataUsageClauseContext>();
}

Cobol85Parser::DataUsageClauseContext* Cobol85Parser::DataDescriptionEntryFormat1Context::dataUsageClause(size_t i) {
  return getRuleContext<Cobol85Parser::DataUsageClauseContext>(i);
}

std::vector<Cobol85Parser::DataValueClauseContext *> Cobol85Parser::DataDescriptionEntryFormat1Context::dataValueClause() {
  return getRuleContexts<Cobol85Parser::DataValueClauseContext>();
}

Cobol85Parser::DataValueClauseContext* Cobol85Parser::DataDescriptionEntryFormat1Context::dataValueClause(size_t i) {
  return getRuleContext<Cobol85Parser::DataValueClauseContext>(i);
}

std::vector<Cobol85Parser::DataReceivedByClauseContext *> Cobol85Parser::DataDescriptionEntryFormat1Context::dataReceivedByClause() {
  return getRuleContexts<Cobol85Parser::DataReceivedByClauseContext>();
}

Cobol85Parser::DataReceivedByClauseContext* Cobol85Parser::DataDescriptionEntryFormat1Context::dataReceivedByClause(size_t i) {
  return getRuleContext<Cobol85Parser::DataReceivedByClauseContext>(i);
}

std::vector<Cobol85Parser::DataOccursClauseContext *> Cobol85Parser::DataDescriptionEntryFormat1Context::dataOccursClause() {
  return getRuleContexts<Cobol85Parser::DataOccursClauseContext>();
}

Cobol85Parser::DataOccursClauseContext* Cobol85Parser::DataDescriptionEntryFormat1Context::dataOccursClause(size_t i) {
  return getRuleContext<Cobol85Parser::DataOccursClauseContext>(i);
}

std::vector<Cobol85Parser::DataSignClauseContext *> Cobol85Parser::DataDescriptionEntryFormat1Context::dataSignClause() {
  return getRuleContexts<Cobol85Parser::DataSignClauseContext>();
}

Cobol85Parser::DataSignClauseContext* Cobol85Parser::DataDescriptionEntryFormat1Context::dataSignClause(size_t i) {
  return getRuleContext<Cobol85Parser::DataSignClauseContext>(i);
}

std::vector<Cobol85Parser::DataSynchronizedClauseContext *> Cobol85Parser::DataDescriptionEntryFormat1Context::dataSynchronizedClause() {
  return getRuleContexts<Cobol85Parser::DataSynchronizedClauseContext>();
}

Cobol85Parser::DataSynchronizedClauseContext* Cobol85Parser::DataDescriptionEntryFormat1Context::dataSynchronizedClause(size_t i) {
  return getRuleContext<Cobol85Parser::DataSynchronizedClauseContext>(i);
}

std::vector<Cobol85Parser::DataJustifiedClauseContext *> Cobol85Parser::DataDescriptionEntryFormat1Context::dataJustifiedClause() {
  return getRuleContexts<Cobol85Parser::DataJustifiedClauseContext>();
}

Cobol85Parser::DataJustifiedClauseContext* Cobol85Parser::DataDescriptionEntryFormat1Context::dataJustifiedClause(size_t i) {
  return getRuleContext<Cobol85Parser::DataJustifiedClauseContext>(i);
}

std::vector<Cobol85Parser::DataBlankWhenZeroClauseContext *> Cobol85Parser::DataDescriptionEntryFormat1Context::dataBlankWhenZeroClause() {
  return getRuleContexts<Cobol85Parser::DataBlankWhenZeroClauseContext>();
}

Cobol85Parser::DataBlankWhenZeroClauseContext* Cobol85Parser::DataDescriptionEntryFormat1Context::dataBlankWhenZeroClause(size_t i) {
  return getRuleContext<Cobol85Parser::DataBlankWhenZeroClauseContext>(i);
}

std::vector<Cobol85Parser::DataWithLowerBoundsClauseContext *> Cobol85Parser::DataDescriptionEntryFormat1Context::dataWithLowerBoundsClause() {
  return getRuleContexts<Cobol85Parser::DataWithLowerBoundsClauseContext>();
}

Cobol85Parser::DataWithLowerBoundsClauseContext* Cobol85Parser::DataDescriptionEntryFormat1Context::dataWithLowerBoundsClause(size_t i) {
  return getRuleContext<Cobol85Parser::DataWithLowerBoundsClauseContext>(i);
}

std::vector<Cobol85Parser::DataAlignedClauseContext *> Cobol85Parser::DataDescriptionEntryFormat1Context::dataAlignedClause() {
  return getRuleContexts<Cobol85Parser::DataAlignedClauseContext>();
}

Cobol85Parser::DataAlignedClauseContext* Cobol85Parser::DataDescriptionEntryFormat1Context::dataAlignedClause(size_t i) {
  return getRuleContext<Cobol85Parser::DataAlignedClauseContext>(i);
}

std::vector<Cobol85Parser::DataRecordAreaClauseContext *> Cobol85Parser::DataDescriptionEntryFormat1Context::dataRecordAreaClause() {
  return getRuleContexts<Cobol85Parser::DataRecordAreaClauseContext>();
}

Cobol85Parser::DataRecordAreaClauseContext* Cobol85Parser::DataDescriptionEntryFormat1Context::dataRecordAreaClause(size_t i) {
  return getRuleContext<Cobol85Parser::DataRecordAreaClauseContext>(i);
}


size_t Cobol85Parser::DataDescriptionEntryFormat1Context::getRuleIndex() const {
  return Cobol85Parser::RuleDataDescriptionEntryFormat1;
}

void Cobol85Parser::DataDescriptionEntryFormat1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDataDescriptionEntryFormat1(this);
}

void Cobol85Parser::DataDescriptionEntryFormat1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDataDescriptionEntryFormat1(this);
}

Cobol85Parser::DataDescriptionEntryFormat1Context* Cobol85Parser::dataDescriptionEntryFormat1() {
  DataDescriptionEntryFormat1Context *_localctx = _tracker.createInstance<DataDescriptionEntryFormat1Context>(_ctx, getState());
  enterRule(_localctx, 436, Cobol85Parser::RuleDataDescriptionEntryFormat1);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3153);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::LEVEL_NUMBER_77

    || _la == Cobol85Parser::INTEGERLITERAL)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(3156);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 390, _ctx)) {
    case 1: {
      setState(3154);
      match(Cobol85Parser::FILLER);
      break;
    }

    case 2: {
      setState(3155);
      dataName();
      break;
    }

    default:
      break;
    }
    setState(3181);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3513579973275288322) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 8070460708250187267) != 0) || ((((_la - 138) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 138)) & 5276573893883339579) != 0) || ((((_la - 202) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 202)) & -3030640695327893497) != 0) || ((((_la - 266) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 266)) & 119808148288963029) != 0) || ((((_la - 331) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 331)) & 1168232970228959457) != 0) || ((((_la - 398) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 398)) & 2319355586216591369) != 0) || ((((_la - 466) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 466)) & 572299384177393805) != 0) || ((((_la - 551) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 551)) & 127) != 0)) {
      setState(3179);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 391, _ctx)) {
      case 1: {
        setState(3158);
        dataRedefinesClause();
        break;
      }

      case 2: {
        setState(3159);
        dataIntegerStringClause();
        break;
      }

      case 3: {
        setState(3160);
        dataExternalClause();
        break;
      }

      case 4: {
        setState(3161);
        dataGlobalClause();
        break;
      }

      case 5: {
        setState(3162);
        dataTypeDefClause();
        break;
      }

      case 6: {
        setState(3163);
        dataThreadLocalClause();
        break;
      }

      case 7: {
        setState(3164);
        dataPictureClause();
        break;
      }

      case 8: {
        setState(3165);
        dataCommonOwnLocalClause();
        break;
      }

      case 9: {
        setState(3166);
        dataTypeClause();
        break;
      }

      case 10: {
        setState(3167);
        dataUsingClause();
        break;
      }

      case 11: {
        setState(3168);
        dataUsageClause();
        break;
      }

      case 12: {
        setState(3169);
        dataValueClause();
        break;
      }

      case 13: {
        setState(3170);
        dataReceivedByClause();
        break;
      }

      case 14: {
        setState(3171);
        dataOccursClause();
        break;
      }

      case 15: {
        setState(3172);
        dataSignClause();
        break;
      }

      case 16: {
        setState(3173);
        dataSynchronizedClause();
        break;
      }

      case 17: {
        setState(3174);
        dataJustifiedClause();
        break;
      }

      case 18: {
        setState(3175);
        dataBlankWhenZeroClause();
        break;
      }

      case 19: {
        setState(3176);
        dataWithLowerBoundsClause();
        break;
      }

      case 20: {
        setState(3177);
        dataAlignedClause();
        break;
      }

      case 21: {
        setState(3178);
        dataRecordAreaClause();
        break;
      }

      default:
        break;
      }
      setState(3183);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(3184);
    match(Cobol85Parser::DOT_FS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DataDescriptionEntryFormat2Context ------------------------------------------------------------------

Cobol85Parser::DataDescriptionEntryFormat2Context::DataDescriptionEntryFormat2Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::DataDescriptionEntryFormat2Context::LEVEL_NUMBER_66() {
  return getToken(Cobol85Parser::LEVEL_NUMBER_66, 0);
}

Cobol85Parser::DataNameContext* Cobol85Parser::DataDescriptionEntryFormat2Context::dataName() {
  return getRuleContext<Cobol85Parser::DataNameContext>(0);
}

Cobol85Parser::DataRenamesClauseContext* Cobol85Parser::DataDescriptionEntryFormat2Context::dataRenamesClause() {
  return getRuleContext<Cobol85Parser::DataRenamesClauseContext>(0);
}

tree::TerminalNode* Cobol85Parser::DataDescriptionEntryFormat2Context::DOT_FS() {
  return getToken(Cobol85Parser::DOT_FS, 0);
}


size_t Cobol85Parser::DataDescriptionEntryFormat2Context::getRuleIndex() const {
  return Cobol85Parser::RuleDataDescriptionEntryFormat2;
}

void Cobol85Parser::DataDescriptionEntryFormat2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDataDescriptionEntryFormat2(this);
}

void Cobol85Parser::DataDescriptionEntryFormat2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDataDescriptionEntryFormat2(this);
}

Cobol85Parser::DataDescriptionEntryFormat2Context* Cobol85Parser::dataDescriptionEntryFormat2() {
  DataDescriptionEntryFormat2Context *_localctx = _tracker.createInstance<DataDescriptionEntryFormat2Context>(_ctx, getState());
  enterRule(_localctx, 438, Cobol85Parser::RuleDataDescriptionEntryFormat2);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3186);
    match(Cobol85Parser::LEVEL_NUMBER_66);
    setState(3187);
    dataName();
    setState(3188);
    dataRenamesClause();
    setState(3189);
    match(Cobol85Parser::DOT_FS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DataDescriptionEntryFormat3Context ------------------------------------------------------------------

Cobol85Parser::DataDescriptionEntryFormat3Context::DataDescriptionEntryFormat3Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::DataDescriptionEntryFormat3Context::LEVEL_NUMBER_88() {
  return getToken(Cobol85Parser::LEVEL_NUMBER_88, 0);
}

Cobol85Parser::ConditionNameContext* Cobol85Parser::DataDescriptionEntryFormat3Context::conditionName() {
  return getRuleContext<Cobol85Parser::ConditionNameContext>(0);
}

Cobol85Parser::DataValueClauseContext* Cobol85Parser::DataDescriptionEntryFormat3Context::dataValueClause() {
  return getRuleContext<Cobol85Parser::DataValueClauseContext>(0);
}

tree::TerminalNode* Cobol85Parser::DataDescriptionEntryFormat3Context::DOT_FS() {
  return getToken(Cobol85Parser::DOT_FS, 0);
}


size_t Cobol85Parser::DataDescriptionEntryFormat3Context::getRuleIndex() const {
  return Cobol85Parser::RuleDataDescriptionEntryFormat3;
}

void Cobol85Parser::DataDescriptionEntryFormat3Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDataDescriptionEntryFormat3(this);
}

void Cobol85Parser::DataDescriptionEntryFormat3Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDataDescriptionEntryFormat3(this);
}

Cobol85Parser::DataDescriptionEntryFormat3Context* Cobol85Parser::dataDescriptionEntryFormat3() {
  DataDescriptionEntryFormat3Context *_localctx = _tracker.createInstance<DataDescriptionEntryFormat3Context>(_ctx, getState());
  enterRule(_localctx, 440, Cobol85Parser::RuleDataDescriptionEntryFormat3);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3191);
    match(Cobol85Parser::LEVEL_NUMBER_88);
    setState(3192);
    conditionName();
    setState(3193);
    dataValueClause();
    setState(3194);
    match(Cobol85Parser::DOT_FS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DataDescriptionEntryExecSqlContext ------------------------------------------------------------------

Cobol85Parser::DataDescriptionEntryExecSqlContext::DataDescriptionEntryExecSqlContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> Cobol85Parser::DataDescriptionEntryExecSqlContext::EXECSQLLINE() {
  return getTokens(Cobol85Parser::EXECSQLLINE);
}

tree::TerminalNode* Cobol85Parser::DataDescriptionEntryExecSqlContext::EXECSQLLINE(size_t i) {
  return getToken(Cobol85Parser::EXECSQLLINE, i);
}

tree::TerminalNode* Cobol85Parser::DataDescriptionEntryExecSqlContext::DOT_FS() {
  return getToken(Cobol85Parser::DOT_FS, 0);
}


size_t Cobol85Parser::DataDescriptionEntryExecSqlContext::getRuleIndex() const {
  return Cobol85Parser::RuleDataDescriptionEntryExecSql;
}

void Cobol85Parser::DataDescriptionEntryExecSqlContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDataDescriptionEntryExecSql(this);
}

void Cobol85Parser::DataDescriptionEntryExecSqlContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDataDescriptionEntryExecSql(this);
}

Cobol85Parser::DataDescriptionEntryExecSqlContext* Cobol85Parser::dataDescriptionEntryExecSql() {
  DataDescriptionEntryExecSqlContext *_localctx = _tracker.createInstance<DataDescriptionEntryExecSqlContext>(_ctx, getState());
  enterRule(_localctx, 442, Cobol85Parser::RuleDataDescriptionEntryExecSql);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3197); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(3196);
              match(Cobol85Parser::EXECSQLLINE);
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(3199); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 393, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(3202);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::DOT_FS) {
      setState(3201);
      match(Cobol85Parser::DOT_FS);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DataAlignedClauseContext ------------------------------------------------------------------

Cobol85Parser::DataAlignedClauseContext::DataAlignedClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::DataAlignedClauseContext::ALIGNED() {
  return getToken(Cobol85Parser::ALIGNED, 0);
}


size_t Cobol85Parser::DataAlignedClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleDataAlignedClause;
}

void Cobol85Parser::DataAlignedClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDataAlignedClause(this);
}

void Cobol85Parser::DataAlignedClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDataAlignedClause(this);
}

Cobol85Parser::DataAlignedClauseContext* Cobol85Parser::dataAlignedClause() {
  DataAlignedClauseContext *_localctx = _tracker.createInstance<DataAlignedClauseContext>(_ctx, getState());
  enterRule(_localctx, 444, Cobol85Parser::RuleDataAlignedClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3204);
    match(Cobol85Parser::ALIGNED);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DataBlankWhenZeroClauseContext ------------------------------------------------------------------

Cobol85Parser::DataBlankWhenZeroClauseContext::DataBlankWhenZeroClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::DataBlankWhenZeroClauseContext::BLANK() {
  return getToken(Cobol85Parser::BLANK, 0);
}

tree::TerminalNode* Cobol85Parser::DataBlankWhenZeroClauseContext::ZERO() {
  return getToken(Cobol85Parser::ZERO, 0);
}

tree::TerminalNode* Cobol85Parser::DataBlankWhenZeroClauseContext::ZEROS() {
  return getToken(Cobol85Parser::ZEROS, 0);
}

tree::TerminalNode* Cobol85Parser::DataBlankWhenZeroClauseContext::ZEROES() {
  return getToken(Cobol85Parser::ZEROES, 0);
}

tree::TerminalNode* Cobol85Parser::DataBlankWhenZeroClauseContext::WHEN() {
  return getToken(Cobol85Parser::WHEN, 0);
}


size_t Cobol85Parser::DataBlankWhenZeroClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleDataBlankWhenZeroClause;
}

void Cobol85Parser::DataBlankWhenZeroClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDataBlankWhenZeroClause(this);
}

void Cobol85Parser::DataBlankWhenZeroClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDataBlankWhenZeroClause(this);
}

Cobol85Parser::DataBlankWhenZeroClauseContext* Cobol85Parser::dataBlankWhenZeroClause() {
  DataBlankWhenZeroClauseContext *_localctx = _tracker.createInstance<DataBlankWhenZeroClauseContext>(_ctx, getState());
  enterRule(_localctx, 446, Cobol85Parser::RuleDataBlankWhenZeroClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3206);
    match(Cobol85Parser::BLANK);
    setState(3208);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::WHEN) {
      setState(3207);
      match(Cobol85Parser::WHEN);
    }
    setState(3210);
    _la = _input->LA(1);
    if (!(((((_la - 521) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 521)) & 13) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DataCommonOwnLocalClauseContext ------------------------------------------------------------------

Cobol85Parser::DataCommonOwnLocalClauseContext::DataCommonOwnLocalClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::DataCommonOwnLocalClauseContext::COMMON() {
  return getToken(Cobol85Parser::COMMON, 0);
}

tree::TerminalNode* Cobol85Parser::DataCommonOwnLocalClauseContext::OWN() {
  return getToken(Cobol85Parser::OWN, 0);
}

tree::TerminalNode* Cobol85Parser::DataCommonOwnLocalClauseContext::LOCAL() {
  return getToken(Cobol85Parser::LOCAL, 0);
}


size_t Cobol85Parser::DataCommonOwnLocalClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleDataCommonOwnLocalClause;
}

void Cobol85Parser::DataCommonOwnLocalClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDataCommonOwnLocalClause(this);
}

void Cobol85Parser::DataCommonOwnLocalClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDataCommonOwnLocalClause(this);
}

Cobol85Parser::DataCommonOwnLocalClauseContext* Cobol85Parser::dataCommonOwnLocalClause() {
  DataCommonOwnLocalClauseContext *_localctx = _tracker.createInstance<DataCommonOwnLocalClauseContext>(_ctx, getState());
  enterRule(_localctx, 448, Cobol85Parser::RuleDataCommonOwnLocalClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3212);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::COMMON || _la == Cobol85Parser::LOCAL

    || _la == Cobol85Parser::OWN)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DataExternalClauseContext ------------------------------------------------------------------

Cobol85Parser::DataExternalClauseContext::DataExternalClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::DataExternalClauseContext::EXTERNAL() {
  return getToken(Cobol85Parser::EXTERNAL, 0);
}

tree::TerminalNode* Cobol85Parser::DataExternalClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}

tree::TerminalNode* Cobol85Parser::DataExternalClauseContext::BY() {
  return getToken(Cobol85Parser::BY, 0);
}

Cobol85Parser::LiteralContext* Cobol85Parser::DataExternalClauseContext::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}


size_t Cobol85Parser::DataExternalClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleDataExternalClause;
}

void Cobol85Parser::DataExternalClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDataExternalClause(this);
}

void Cobol85Parser::DataExternalClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDataExternalClause(this);
}

Cobol85Parser::DataExternalClauseContext* Cobol85Parser::dataExternalClause() {
  DataExternalClauseContext *_localctx = _tracker.createInstance<DataExternalClauseContext>(_ctx, getState());
  enterRule(_localctx, 450, Cobol85Parser::RuleDataExternalClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3215);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(3214);
      match(Cobol85Parser::IS);
    }
    setState(3217);
    match(Cobol85Parser::EXTERNAL);
    setState(3220);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 397, _ctx)) {
    case 1: {
      setState(3218);
      match(Cobol85Parser::BY);
      setState(3219);
      literal();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DataGlobalClauseContext ------------------------------------------------------------------

Cobol85Parser::DataGlobalClauseContext::DataGlobalClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::DataGlobalClauseContext::GLOBAL() {
  return getToken(Cobol85Parser::GLOBAL, 0);
}

tree::TerminalNode* Cobol85Parser::DataGlobalClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}


size_t Cobol85Parser::DataGlobalClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleDataGlobalClause;
}

void Cobol85Parser::DataGlobalClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDataGlobalClause(this);
}

void Cobol85Parser::DataGlobalClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDataGlobalClause(this);
}

Cobol85Parser::DataGlobalClauseContext* Cobol85Parser::dataGlobalClause() {
  DataGlobalClauseContext *_localctx = _tracker.createInstance<DataGlobalClauseContext>(_ctx, getState());
  enterRule(_localctx, 452, Cobol85Parser::RuleDataGlobalClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3223);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(3222);
      match(Cobol85Parser::IS);
    }
    setState(3225);
    match(Cobol85Parser::GLOBAL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DataIntegerStringClauseContext ------------------------------------------------------------------

Cobol85Parser::DataIntegerStringClauseContext::DataIntegerStringClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::DataIntegerStringClauseContext::INTEGER() {
  return getToken(Cobol85Parser::INTEGER, 0);
}

tree::TerminalNode* Cobol85Parser::DataIntegerStringClauseContext::STRING() {
  return getToken(Cobol85Parser::STRING, 0);
}


size_t Cobol85Parser::DataIntegerStringClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleDataIntegerStringClause;
}

void Cobol85Parser::DataIntegerStringClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDataIntegerStringClause(this);
}

void Cobol85Parser::DataIntegerStringClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDataIntegerStringClause(this);
}

Cobol85Parser::DataIntegerStringClauseContext* Cobol85Parser::dataIntegerStringClause() {
  DataIntegerStringClauseContext *_localctx = _tracker.createInstance<DataIntegerStringClauseContext>(_ctx, getState());
  enterRule(_localctx, 454, Cobol85Parser::RuleDataIntegerStringClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3227);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::INTEGER || _la == Cobol85Parser::STRING)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DataJustifiedClauseContext ------------------------------------------------------------------

Cobol85Parser::DataJustifiedClauseContext::DataJustifiedClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::DataJustifiedClauseContext::JUSTIFIED() {
  return getToken(Cobol85Parser::JUSTIFIED, 0);
}

tree::TerminalNode* Cobol85Parser::DataJustifiedClauseContext::JUST() {
  return getToken(Cobol85Parser::JUST, 0);
}

tree::TerminalNode* Cobol85Parser::DataJustifiedClauseContext::RIGHT() {
  return getToken(Cobol85Parser::RIGHT, 0);
}


size_t Cobol85Parser::DataJustifiedClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleDataJustifiedClause;
}

void Cobol85Parser::DataJustifiedClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDataJustifiedClause(this);
}

void Cobol85Parser::DataJustifiedClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDataJustifiedClause(this);
}

Cobol85Parser::DataJustifiedClauseContext* Cobol85Parser::dataJustifiedClause() {
  DataJustifiedClauseContext *_localctx = _tracker.createInstance<DataJustifiedClauseContext>(_ctx, getState());
  enterRule(_localctx, 456, Cobol85Parser::RuleDataJustifiedClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3229);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::JUST

    || _la == Cobol85Parser::JUSTIFIED)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(3231);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::RIGHT) {
      setState(3230);
      match(Cobol85Parser::RIGHT);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DataOccursClauseContext ------------------------------------------------------------------

Cobol85Parser::DataOccursClauseContext::DataOccursClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::DataOccursClauseContext::OCCURS() {
  return getToken(Cobol85Parser::OCCURS, 0);
}

Cobol85Parser::IntegerLiteralContext* Cobol85Parser::DataOccursClauseContext::integerLiteral() {
  return getRuleContext<Cobol85Parser::IntegerLiteralContext>(0);
}

Cobol85Parser::DataOccursToContext* Cobol85Parser::DataOccursClauseContext::dataOccursTo() {
  return getRuleContext<Cobol85Parser::DataOccursToContext>(0);
}

tree::TerminalNode* Cobol85Parser::DataOccursClauseContext::TIMES() {
  return getToken(Cobol85Parser::TIMES, 0);
}

tree::TerminalNode* Cobol85Parser::DataOccursClauseContext::DEPENDING() {
  return getToken(Cobol85Parser::DEPENDING, 0);
}

Cobol85Parser::QualifiedDataNameContext* Cobol85Parser::DataOccursClauseContext::qualifiedDataName() {
  return getRuleContext<Cobol85Parser::QualifiedDataNameContext>(0);
}

std::vector<Cobol85Parser::DataOccursSortContext *> Cobol85Parser::DataOccursClauseContext::dataOccursSort() {
  return getRuleContexts<Cobol85Parser::DataOccursSortContext>();
}

Cobol85Parser::DataOccursSortContext* Cobol85Parser::DataOccursClauseContext::dataOccursSort(size_t i) {
  return getRuleContext<Cobol85Parser::DataOccursSortContext>(i);
}

tree::TerminalNode* Cobol85Parser::DataOccursClauseContext::INDEXED() {
  return getToken(Cobol85Parser::INDEXED, 0);
}

tree::TerminalNode* Cobol85Parser::DataOccursClauseContext::ON() {
  return getToken(Cobol85Parser::ON, 0);
}

tree::TerminalNode* Cobol85Parser::DataOccursClauseContext::BY() {
  return getToken(Cobol85Parser::BY, 0);
}

tree::TerminalNode* Cobol85Parser::DataOccursClauseContext::LOCAL() {
  return getToken(Cobol85Parser::LOCAL, 0);
}

std::vector<Cobol85Parser::IndexNameContext *> Cobol85Parser::DataOccursClauseContext::indexName() {
  return getRuleContexts<Cobol85Parser::IndexNameContext>();
}

Cobol85Parser::IndexNameContext* Cobol85Parser::DataOccursClauseContext::indexName(size_t i) {
  return getRuleContext<Cobol85Parser::IndexNameContext>(i);
}


size_t Cobol85Parser::DataOccursClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleDataOccursClause;
}

void Cobol85Parser::DataOccursClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDataOccursClause(this);
}

void Cobol85Parser::DataOccursClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDataOccursClause(this);
}

Cobol85Parser::DataOccursClauseContext* Cobol85Parser::dataOccursClause() {
  DataOccursClauseContext *_localctx = _tracker.createInstance<DataOccursClauseContext>(_ctx, getState());
  enterRule(_localctx, 458, Cobol85Parser::RuleDataOccursClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3233);
    match(Cobol85Parser::OCCURS);
    setState(3234);
    integerLiteral();
    setState(3236);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::TO) {
      setState(3235);
      dataOccursTo();
    }
    setState(3239);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::TIMES) {
      setState(3238);
      match(Cobol85Parser::TIMES);
    }
    setState(3246);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::DEPENDING) {
      setState(3241);
      match(Cobol85Parser::DEPENDING);
      setState(3243);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Cobol85Parser::ON) {
        setState(3242);
        match(Cobol85Parser::ON);
      }
      setState(3245);
      qualifiedDataName();
    }
    setState(3251);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Cobol85Parser::ASCENDING || _la == Cobol85Parser::DESCENDING) {
      setState(3248);
      dataOccursSort();
      setState(3253);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(3266);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::INDEXED) {
      setState(3254);
      match(Cobol85Parser::INDEXED);
      setState(3256);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Cobol85Parser::BY) {
        setState(3255);
        match(Cobol85Parser::BY);
      }
      setState(3259);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 406, _ctx)) {
      case 1: {
        setState(3258);
        match(Cobol85Parser::LOCAL);
        break;
      }

      default:
        break;
      }
      setState(3262); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(3261);
                indexName();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(3264); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 407, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DataOccursToContext ------------------------------------------------------------------

Cobol85Parser::DataOccursToContext::DataOccursToContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::DataOccursToContext::TO() {
  return getToken(Cobol85Parser::TO, 0);
}

Cobol85Parser::IntegerLiteralContext* Cobol85Parser::DataOccursToContext::integerLiteral() {
  return getRuleContext<Cobol85Parser::IntegerLiteralContext>(0);
}


size_t Cobol85Parser::DataOccursToContext::getRuleIndex() const {
  return Cobol85Parser::RuleDataOccursTo;
}

void Cobol85Parser::DataOccursToContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDataOccursTo(this);
}

void Cobol85Parser::DataOccursToContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDataOccursTo(this);
}

Cobol85Parser::DataOccursToContext* Cobol85Parser::dataOccursTo() {
  DataOccursToContext *_localctx = _tracker.createInstance<DataOccursToContext>(_ctx, getState());
  enterRule(_localctx, 460, Cobol85Parser::RuleDataOccursTo);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3268);
    match(Cobol85Parser::TO);
    setState(3269);
    integerLiteral();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DataOccursSortContext ------------------------------------------------------------------

Cobol85Parser::DataOccursSortContext::DataOccursSortContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::DataOccursSortContext::ASCENDING() {
  return getToken(Cobol85Parser::ASCENDING, 0);
}

tree::TerminalNode* Cobol85Parser::DataOccursSortContext::DESCENDING() {
  return getToken(Cobol85Parser::DESCENDING, 0);
}

tree::TerminalNode* Cobol85Parser::DataOccursSortContext::KEY() {
  return getToken(Cobol85Parser::KEY, 0);
}

tree::TerminalNode* Cobol85Parser::DataOccursSortContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}

std::vector<Cobol85Parser::QualifiedDataNameContext *> Cobol85Parser::DataOccursSortContext::qualifiedDataName() {
  return getRuleContexts<Cobol85Parser::QualifiedDataNameContext>();
}

Cobol85Parser::QualifiedDataNameContext* Cobol85Parser::DataOccursSortContext::qualifiedDataName(size_t i) {
  return getRuleContext<Cobol85Parser::QualifiedDataNameContext>(i);
}


size_t Cobol85Parser::DataOccursSortContext::getRuleIndex() const {
  return Cobol85Parser::RuleDataOccursSort;
}

void Cobol85Parser::DataOccursSortContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDataOccursSort(this);
}

void Cobol85Parser::DataOccursSortContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDataOccursSort(this);
}

Cobol85Parser::DataOccursSortContext* Cobol85Parser::dataOccursSort() {
  DataOccursSortContext *_localctx = _tracker.createInstance<DataOccursSortContext>(_ctx, getState());
  enterRule(_localctx, 462, Cobol85Parser::RuleDataOccursSort);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3271);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::ASCENDING || _la == Cobol85Parser::DESCENDING)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(3273);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::KEY) {
      setState(3272);
      match(Cobol85Parser::KEY);
    }
    setState(3276);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(3275);
      match(Cobol85Parser::IS);
    }
    setState(3279); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(3278);
              qualifiedDataName();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(3281); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 411, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DataPictureClauseContext ------------------------------------------------------------------

Cobol85Parser::DataPictureClauseContext::DataPictureClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::PictureStringContext* Cobol85Parser::DataPictureClauseContext::pictureString() {
  return getRuleContext<Cobol85Parser::PictureStringContext>(0);
}

tree::TerminalNode* Cobol85Parser::DataPictureClauseContext::PICTURE() {
  return getToken(Cobol85Parser::PICTURE, 0);
}

tree::TerminalNode* Cobol85Parser::DataPictureClauseContext::PIC() {
  return getToken(Cobol85Parser::PIC, 0);
}

tree::TerminalNode* Cobol85Parser::DataPictureClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}


size_t Cobol85Parser::DataPictureClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleDataPictureClause;
}

void Cobol85Parser::DataPictureClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDataPictureClause(this);
}

void Cobol85Parser::DataPictureClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDataPictureClause(this);
}

Cobol85Parser::DataPictureClauseContext* Cobol85Parser::dataPictureClause() {
  DataPictureClauseContext *_localctx = _tracker.createInstance<DataPictureClauseContext>(_ctx, getState());
  enterRule(_localctx, 464, Cobol85Parser::RuleDataPictureClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3283);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::PIC

    || _la == Cobol85Parser::PICTURE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(3285);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(3284);
      match(Cobol85Parser::IS);
    }
    setState(3287);
    pictureString();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PictureStringContext ------------------------------------------------------------------

Cobol85Parser::PictureStringContext::PictureStringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Cobol85Parser::PictureCharsContext *> Cobol85Parser::PictureStringContext::pictureChars() {
  return getRuleContexts<Cobol85Parser::PictureCharsContext>();
}

Cobol85Parser::PictureCharsContext* Cobol85Parser::PictureStringContext::pictureChars(size_t i) {
  return getRuleContext<Cobol85Parser::PictureCharsContext>(i);
}

std::vector<Cobol85Parser::PictureCardinalityContext *> Cobol85Parser::PictureStringContext::pictureCardinality() {
  return getRuleContexts<Cobol85Parser::PictureCardinalityContext>();
}

Cobol85Parser::PictureCardinalityContext* Cobol85Parser::PictureStringContext::pictureCardinality(size_t i) {
  return getRuleContext<Cobol85Parser::PictureCardinalityContext>(i);
}


size_t Cobol85Parser::PictureStringContext::getRuleIndex() const {
  return Cobol85Parser::RulePictureString;
}

void Cobol85Parser::PictureStringContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPictureString(this);
}

void Cobol85Parser::PictureStringContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPictureString(this);
}

Cobol85Parser::PictureStringContext* Cobol85Parser::pictureString() {
  PictureStringContext *_localctx = _tracker.createInstance<PictureStringContext>(_ctx, getState());
  enterRule(_localctx, 466, Cobol85Parser::RulePictureString);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3297); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(3290); 
              _errHandler->sync(this);
              alt = 1;
              do {
                switch (alt) {
                  case 1: {
                        setState(3289);
                        pictureChars();
                        break;
                      }

                default:
                  throw NoViableAltException(this);
                }
                setState(3292); 
                _errHandler->sync(this);
                alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 413, _ctx);
              } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
              setState(3295);
              _errHandler->sync(this);

              switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 414, _ctx)) {
              case 1: {
                setState(3294);
                pictureCardinality();
                break;
              }

              default:
                break;
              }
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(3299); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 415, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PictureCharsContext ------------------------------------------------------------------

Cobol85Parser::PictureCharsContext::PictureCharsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::PictureCharsContext::DOLLARCHAR() {
  return getToken(Cobol85Parser::DOLLARCHAR, 0);
}

tree::TerminalNode* Cobol85Parser::PictureCharsContext::IDENTIFIER() {
  return getToken(Cobol85Parser::IDENTIFIER, 0);
}

tree::TerminalNode* Cobol85Parser::PictureCharsContext::NUMERICLITERAL() {
  return getToken(Cobol85Parser::NUMERICLITERAL, 0);
}

tree::TerminalNode* Cobol85Parser::PictureCharsContext::SLASHCHAR() {
  return getToken(Cobol85Parser::SLASHCHAR, 0);
}

tree::TerminalNode* Cobol85Parser::PictureCharsContext::COMMACHAR() {
  return getToken(Cobol85Parser::COMMACHAR, 0);
}

tree::TerminalNode* Cobol85Parser::PictureCharsContext::DOT() {
  return getToken(Cobol85Parser::DOT, 0);
}

tree::TerminalNode* Cobol85Parser::PictureCharsContext::COLONCHAR() {
  return getToken(Cobol85Parser::COLONCHAR, 0);
}

tree::TerminalNode* Cobol85Parser::PictureCharsContext::ASTERISKCHAR() {
  return getToken(Cobol85Parser::ASTERISKCHAR, 0);
}

tree::TerminalNode* Cobol85Parser::PictureCharsContext::DOUBLEASTERISKCHAR() {
  return getToken(Cobol85Parser::DOUBLEASTERISKCHAR, 0);
}

tree::TerminalNode* Cobol85Parser::PictureCharsContext::LPARENCHAR() {
  return getToken(Cobol85Parser::LPARENCHAR, 0);
}

tree::TerminalNode* Cobol85Parser::PictureCharsContext::RPARENCHAR() {
  return getToken(Cobol85Parser::RPARENCHAR, 0);
}

tree::TerminalNode* Cobol85Parser::PictureCharsContext::PLUSCHAR() {
  return getToken(Cobol85Parser::PLUSCHAR, 0);
}

tree::TerminalNode* Cobol85Parser::PictureCharsContext::MINUSCHAR() {
  return getToken(Cobol85Parser::MINUSCHAR, 0);
}

tree::TerminalNode* Cobol85Parser::PictureCharsContext::LESSTHANCHAR() {
  return getToken(Cobol85Parser::LESSTHANCHAR, 0);
}

tree::TerminalNode* Cobol85Parser::PictureCharsContext::MORETHANCHAR() {
  return getToken(Cobol85Parser::MORETHANCHAR, 0);
}

Cobol85Parser::IntegerLiteralContext* Cobol85Parser::PictureCharsContext::integerLiteral() {
  return getRuleContext<Cobol85Parser::IntegerLiteralContext>(0);
}


size_t Cobol85Parser::PictureCharsContext::getRuleIndex() const {
  return Cobol85Parser::RulePictureChars;
}

void Cobol85Parser::PictureCharsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPictureChars(this);
}

void Cobol85Parser::PictureCharsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPictureChars(this);
}

Cobol85Parser::PictureCharsContext* Cobol85Parser::pictureChars() {
  PictureCharsContext *_localctx = _tracker.createInstance<PictureCharsContext>(_ctx, getState());
  enterRule(_localctx, 468, Cobol85Parser::RulePictureChars);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3317);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Cobol85Parser::DOLLARCHAR: {
        enterOuterAlt(_localctx, 1);
        setState(3301);
        match(Cobol85Parser::DOLLARCHAR);
        break;
      }

      case Cobol85Parser::IDENTIFIER: {
        enterOuterAlt(_localctx, 2);
        setState(3302);
        match(Cobol85Parser::IDENTIFIER);
        break;
      }

      case Cobol85Parser::NUMERICLITERAL: {
        enterOuterAlt(_localctx, 3);
        setState(3303);
        match(Cobol85Parser::NUMERICLITERAL);
        break;
      }

      case Cobol85Parser::SLASHCHAR: {
        enterOuterAlt(_localctx, 4);
        setState(3304);
        match(Cobol85Parser::SLASHCHAR);
        break;
      }

      case Cobol85Parser::COMMACHAR: {
        enterOuterAlt(_localctx, 5);
        setState(3305);
        match(Cobol85Parser::COMMACHAR);
        break;
      }

      case Cobol85Parser::DOT: {
        enterOuterAlt(_localctx, 6);
        setState(3306);
        match(Cobol85Parser::DOT);
        break;
      }

      case Cobol85Parser::COLONCHAR: {
        enterOuterAlt(_localctx, 7);
        setState(3307);
        match(Cobol85Parser::COLONCHAR);
        break;
      }

      case Cobol85Parser::ASTERISKCHAR: {
        enterOuterAlt(_localctx, 8);
        setState(3308);
        match(Cobol85Parser::ASTERISKCHAR);
        break;
      }

      case Cobol85Parser::DOUBLEASTERISKCHAR: {
        enterOuterAlt(_localctx, 9);
        setState(3309);
        match(Cobol85Parser::DOUBLEASTERISKCHAR);
        break;
      }

      case Cobol85Parser::LPARENCHAR: {
        enterOuterAlt(_localctx, 10);
        setState(3310);
        match(Cobol85Parser::LPARENCHAR);
        break;
      }

      case Cobol85Parser::RPARENCHAR: {
        enterOuterAlt(_localctx, 11);
        setState(3311);
        match(Cobol85Parser::RPARENCHAR);
        break;
      }

      case Cobol85Parser::PLUSCHAR: {
        enterOuterAlt(_localctx, 12);
        setState(3312);
        match(Cobol85Parser::PLUSCHAR);
        break;
      }

      case Cobol85Parser::MINUSCHAR: {
        enterOuterAlt(_localctx, 13);
        setState(3313);
        match(Cobol85Parser::MINUSCHAR);
        break;
      }

      case Cobol85Parser::LESSTHANCHAR: {
        enterOuterAlt(_localctx, 14);
        setState(3314);
        match(Cobol85Parser::LESSTHANCHAR);
        break;
      }

      case Cobol85Parser::MORETHANCHAR: {
        enterOuterAlt(_localctx, 15);
        setState(3315);
        match(Cobol85Parser::MORETHANCHAR);
        break;
      }

      case Cobol85Parser::LEVEL_NUMBER_66:
      case Cobol85Parser::LEVEL_NUMBER_77:
      case Cobol85Parser::LEVEL_NUMBER_88:
      case Cobol85Parser::INTEGERLITERAL: {
        enterOuterAlt(_localctx, 16);
        setState(3316);
        integerLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PictureCardinalityContext ------------------------------------------------------------------

Cobol85Parser::PictureCardinalityContext::PictureCardinalityContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::PictureCardinalityContext::LPARENCHAR() {
  return getToken(Cobol85Parser::LPARENCHAR, 0);
}

Cobol85Parser::IntegerLiteralContext* Cobol85Parser::PictureCardinalityContext::integerLiteral() {
  return getRuleContext<Cobol85Parser::IntegerLiteralContext>(0);
}

tree::TerminalNode* Cobol85Parser::PictureCardinalityContext::RPARENCHAR() {
  return getToken(Cobol85Parser::RPARENCHAR, 0);
}


size_t Cobol85Parser::PictureCardinalityContext::getRuleIndex() const {
  return Cobol85Parser::RulePictureCardinality;
}

void Cobol85Parser::PictureCardinalityContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPictureCardinality(this);
}

void Cobol85Parser::PictureCardinalityContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPictureCardinality(this);
}

Cobol85Parser::PictureCardinalityContext* Cobol85Parser::pictureCardinality() {
  PictureCardinalityContext *_localctx = _tracker.createInstance<PictureCardinalityContext>(_ctx, getState());
  enterRule(_localctx, 470, Cobol85Parser::RulePictureCardinality);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3319);
    match(Cobol85Parser::LPARENCHAR);
    setState(3320);
    integerLiteral();
    setState(3321);
    match(Cobol85Parser::RPARENCHAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DataReceivedByClauseContext ------------------------------------------------------------------

Cobol85Parser::DataReceivedByClauseContext::DataReceivedByClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::DataReceivedByClauseContext::CONTENT() {
  return getToken(Cobol85Parser::CONTENT, 0);
}

tree::TerminalNode* Cobol85Parser::DataReceivedByClauseContext::REFERENCE() {
  return getToken(Cobol85Parser::REFERENCE, 0);
}

tree::TerminalNode* Cobol85Parser::DataReceivedByClauseContext::REF() {
  return getToken(Cobol85Parser::REF, 0);
}

tree::TerminalNode* Cobol85Parser::DataReceivedByClauseContext::RECEIVED() {
  return getToken(Cobol85Parser::RECEIVED, 0);
}

tree::TerminalNode* Cobol85Parser::DataReceivedByClauseContext::BY() {
  return getToken(Cobol85Parser::BY, 0);
}


size_t Cobol85Parser::DataReceivedByClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleDataReceivedByClause;
}

void Cobol85Parser::DataReceivedByClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDataReceivedByClause(this);
}

void Cobol85Parser::DataReceivedByClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDataReceivedByClause(this);
}

Cobol85Parser::DataReceivedByClauseContext* Cobol85Parser::dataReceivedByClause() {
  DataReceivedByClauseContext *_localctx = _tracker.createInstance<DataReceivedByClauseContext>(_ctx, getState());
  enterRule(_localctx, 472, Cobol85Parser::RuleDataReceivedByClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3324);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::RECEIVED) {
      setState(3323);
      match(Cobol85Parser::RECEIVED);
    }
    setState(3327);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::BY) {
      setState(3326);
      match(Cobol85Parser::BY);
    }
    setState(3329);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::CONTENT || _la == Cobol85Parser::REF

    || _la == Cobol85Parser::REFERENCE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DataRecordAreaClauseContext ------------------------------------------------------------------

Cobol85Parser::DataRecordAreaClauseContext::DataRecordAreaClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::DataRecordAreaClauseContext::RECORD() {
  return getToken(Cobol85Parser::RECORD, 0);
}

tree::TerminalNode* Cobol85Parser::DataRecordAreaClauseContext::AREA() {
  return getToken(Cobol85Parser::AREA, 0);
}


size_t Cobol85Parser::DataRecordAreaClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleDataRecordAreaClause;
}

void Cobol85Parser::DataRecordAreaClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDataRecordAreaClause(this);
}

void Cobol85Parser::DataRecordAreaClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDataRecordAreaClause(this);
}

Cobol85Parser::DataRecordAreaClauseContext* Cobol85Parser::dataRecordAreaClause() {
  DataRecordAreaClauseContext *_localctx = _tracker.createInstance<DataRecordAreaClauseContext>(_ctx, getState());
  enterRule(_localctx, 474, Cobol85Parser::RuleDataRecordAreaClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3331);
    match(Cobol85Parser::RECORD);
    setState(3332);
    match(Cobol85Parser::AREA);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DataRedefinesClauseContext ------------------------------------------------------------------

Cobol85Parser::DataRedefinesClauseContext::DataRedefinesClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::DataRedefinesClauseContext::REDEFINES() {
  return getToken(Cobol85Parser::REDEFINES, 0);
}

Cobol85Parser::DataNameContext* Cobol85Parser::DataRedefinesClauseContext::dataName() {
  return getRuleContext<Cobol85Parser::DataNameContext>(0);
}


size_t Cobol85Parser::DataRedefinesClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleDataRedefinesClause;
}

void Cobol85Parser::DataRedefinesClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDataRedefinesClause(this);
}

void Cobol85Parser::DataRedefinesClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDataRedefinesClause(this);
}

Cobol85Parser::DataRedefinesClauseContext* Cobol85Parser::dataRedefinesClause() {
  DataRedefinesClauseContext *_localctx = _tracker.createInstance<DataRedefinesClauseContext>(_ctx, getState());
  enterRule(_localctx, 476, Cobol85Parser::RuleDataRedefinesClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3334);
    match(Cobol85Parser::REDEFINES);
    setState(3335);
    dataName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DataRenamesClauseContext ------------------------------------------------------------------

Cobol85Parser::DataRenamesClauseContext::DataRenamesClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::DataRenamesClauseContext::RENAMES() {
  return getToken(Cobol85Parser::RENAMES, 0);
}

std::vector<Cobol85Parser::QualifiedDataNameContext *> Cobol85Parser::DataRenamesClauseContext::qualifiedDataName() {
  return getRuleContexts<Cobol85Parser::QualifiedDataNameContext>();
}

Cobol85Parser::QualifiedDataNameContext* Cobol85Parser::DataRenamesClauseContext::qualifiedDataName(size_t i) {
  return getRuleContext<Cobol85Parser::QualifiedDataNameContext>(i);
}

tree::TerminalNode* Cobol85Parser::DataRenamesClauseContext::THROUGH() {
  return getToken(Cobol85Parser::THROUGH, 0);
}

tree::TerminalNode* Cobol85Parser::DataRenamesClauseContext::THRU() {
  return getToken(Cobol85Parser::THRU, 0);
}


size_t Cobol85Parser::DataRenamesClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleDataRenamesClause;
}

void Cobol85Parser::DataRenamesClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDataRenamesClause(this);
}

void Cobol85Parser::DataRenamesClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDataRenamesClause(this);
}

Cobol85Parser::DataRenamesClauseContext* Cobol85Parser::dataRenamesClause() {
  DataRenamesClauseContext *_localctx = _tracker.createInstance<DataRenamesClauseContext>(_ctx, getState());
  enterRule(_localctx, 478, Cobol85Parser::RuleDataRenamesClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3337);
    match(Cobol85Parser::RENAMES);
    setState(3338);
    qualifiedDataName();
    setState(3341);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::THROUGH

    || _la == Cobol85Parser::THRU) {
      setState(3339);
      _la = _input->LA(1);
      if (!(_la == Cobol85Parser::THROUGH

      || _la == Cobol85Parser::THRU)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(3340);
      qualifiedDataName();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DataSignClauseContext ------------------------------------------------------------------

Cobol85Parser::DataSignClauseContext::DataSignClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::DataSignClauseContext::LEADING() {
  return getToken(Cobol85Parser::LEADING, 0);
}

tree::TerminalNode* Cobol85Parser::DataSignClauseContext::TRAILING() {
  return getToken(Cobol85Parser::TRAILING, 0);
}

tree::TerminalNode* Cobol85Parser::DataSignClauseContext::SIGN() {
  return getToken(Cobol85Parser::SIGN, 0);
}

tree::TerminalNode* Cobol85Parser::DataSignClauseContext::SEPARATE() {
  return getToken(Cobol85Parser::SEPARATE, 0);
}

tree::TerminalNode* Cobol85Parser::DataSignClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}

tree::TerminalNode* Cobol85Parser::DataSignClauseContext::CHARACTER() {
  return getToken(Cobol85Parser::CHARACTER, 0);
}


size_t Cobol85Parser::DataSignClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleDataSignClause;
}

void Cobol85Parser::DataSignClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDataSignClause(this);
}

void Cobol85Parser::DataSignClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDataSignClause(this);
}

Cobol85Parser::DataSignClauseContext* Cobol85Parser::dataSignClause() {
  DataSignClauseContext *_localctx = _tracker.createInstance<DataSignClauseContext>(_ctx, getState());
  enterRule(_localctx, 480, Cobol85Parser::RuleDataSignClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3347);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::SIGN) {
      setState(3343);
      match(Cobol85Parser::SIGN);
      setState(3345);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Cobol85Parser::IS) {
        setState(3344);
        match(Cobol85Parser::IS);
      }
    }
    setState(3349);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::LEADING || _la == Cobol85Parser::TRAILING)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(3354);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::SEPARATE) {
      setState(3350);
      match(Cobol85Parser::SEPARATE);
      setState(3352);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Cobol85Parser::CHARACTER) {
        setState(3351);
        match(Cobol85Parser::CHARACTER);
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DataSynchronizedClauseContext ------------------------------------------------------------------

Cobol85Parser::DataSynchronizedClauseContext::DataSynchronizedClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::DataSynchronizedClauseContext::SYNCHRONIZED() {
  return getToken(Cobol85Parser::SYNCHRONIZED, 0);
}

tree::TerminalNode* Cobol85Parser::DataSynchronizedClauseContext::SYNC() {
  return getToken(Cobol85Parser::SYNC, 0);
}

tree::TerminalNode* Cobol85Parser::DataSynchronizedClauseContext::LEFT() {
  return getToken(Cobol85Parser::LEFT, 0);
}

tree::TerminalNode* Cobol85Parser::DataSynchronizedClauseContext::RIGHT() {
  return getToken(Cobol85Parser::RIGHT, 0);
}


size_t Cobol85Parser::DataSynchronizedClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleDataSynchronizedClause;
}

void Cobol85Parser::DataSynchronizedClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDataSynchronizedClause(this);
}

void Cobol85Parser::DataSynchronizedClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDataSynchronizedClause(this);
}

Cobol85Parser::DataSynchronizedClauseContext* Cobol85Parser::dataSynchronizedClause() {
  DataSynchronizedClauseContext *_localctx = _tracker.createInstance<DataSynchronizedClauseContext>(_ctx, getState());
  enterRule(_localctx, 482, Cobol85Parser::RuleDataSynchronizedClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3356);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::SYNC

    || _la == Cobol85Parser::SYNCHRONIZED)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(3358);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::LEFT || _la == Cobol85Parser::RIGHT) {
      setState(3357);
      _la = _input->LA(1);
      if (!(_la == Cobol85Parser::LEFT || _la == Cobol85Parser::RIGHT)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DataThreadLocalClauseContext ------------------------------------------------------------------

Cobol85Parser::DataThreadLocalClauseContext::DataThreadLocalClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::DataThreadLocalClauseContext::THREAD_LOCAL() {
  return getToken(Cobol85Parser::THREAD_LOCAL, 0);
}

tree::TerminalNode* Cobol85Parser::DataThreadLocalClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}


size_t Cobol85Parser::DataThreadLocalClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleDataThreadLocalClause;
}

void Cobol85Parser::DataThreadLocalClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDataThreadLocalClause(this);
}

void Cobol85Parser::DataThreadLocalClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDataThreadLocalClause(this);
}

Cobol85Parser::DataThreadLocalClauseContext* Cobol85Parser::dataThreadLocalClause() {
  DataThreadLocalClauseContext *_localctx = _tracker.createInstance<DataThreadLocalClauseContext>(_ctx, getState());
  enterRule(_localctx, 484, Cobol85Parser::RuleDataThreadLocalClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3361);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(3360);
      match(Cobol85Parser::IS);
    }
    setState(3363);
    match(Cobol85Parser::THREAD_LOCAL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DataTypeClauseContext ------------------------------------------------------------------

Cobol85Parser::DataTypeClauseContext::DataTypeClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::DataTypeClauseContext::TYPE() {
  return getToken(Cobol85Parser::TYPE, 0);
}

tree::TerminalNode* Cobol85Parser::DataTypeClauseContext::SHORT_DATE() {
  return getToken(Cobol85Parser::SHORT_DATE, 0);
}

tree::TerminalNode* Cobol85Parser::DataTypeClauseContext::LONG_DATE() {
  return getToken(Cobol85Parser::LONG_DATE, 0);
}

tree::TerminalNode* Cobol85Parser::DataTypeClauseContext::NUMERIC_DATE() {
  return getToken(Cobol85Parser::NUMERIC_DATE, 0);
}

tree::TerminalNode* Cobol85Parser::DataTypeClauseContext::NUMERIC_TIME() {
  return getToken(Cobol85Parser::NUMERIC_TIME, 0);
}

tree::TerminalNode* Cobol85Parser::DataTypeClauseContext::LONG_TIME() {
  return getToken(Cobol85Parser::LONG_TIME, 0);
}

tree::TerminalNode* Cobol85Parser::DataTypeClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}


size_t Cobol85Parser::DataTypeClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleDataTypeClause;
}

void Cobol85Parser::DataTypeClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDataTypeClause(this);
}

void Cobol85Parser::DataTypeClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDataTypeClause(this);
}

Cobol85Parser::DataTypeClauseContext* Cobol85Parser::dataTypeClause() {
  DataTypeClauseContext *_localctx = _tracker.createInstance<DataTypeClauseContext>(_ctx, getState());
  enterRule(_localctx, 486, Cobol85Parser::RuleDataTypeClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3365);
    match(Cobol85Parser::TYPE);
    setState(3367);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(3366);
      match(Cobol85Parser::IS);
    }
    setState(3369);
    _la = _input->LA(1);
    if (!(((((_la - 287) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 287)) & 5368709123) != 0) || _la == Cobol85Parser::SHORT_DATE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DataTypeDefClauseContext ------------------------------------------------------------------

Cobol85Parser::DataTypeDefClauseContext::DataTypeDefClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::DataTypeDefClauseContext::TYPEDEF() {
  return getToken(Cobol85Parser::TYPEDEF, 0);
}

tree::TerminalNode* Cobol85Parser::DataTypeDefClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}


size_t Cobol85Parser::DataTypeDefClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleDataTypeDefClause;
}

void Cobol85Parser::DataTypeDefClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDataTypeDefClause(this);
}

void Cobol85Parser::DataTypeDefClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDataTypeDefClause(this);
}

Cobol85Parser::DataTypeDefClauseContext* Cobol85Parser::dataTypeDefClause() {
  DataTypeDefClauseContext *_localctx = _tracker.createInstance<DataTypeDefClauseContext>(_ctx, getState());
  enterRule(_localctx, 488, Cobol85Parser::RuleDataTypeDefClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3372);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(3371);
      match(Cobol85Parser::IS);
    }
    setState(3374);
    match(Cobol85Parser::TYPEDEF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DataUsageClauseContext ------------------------------------------------------------------

Cobol85Parser::DataUsageClauseContext::DataUsageClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::DataUsageClauseContext::BINARY() {
  return getToken(Cobol85Parser::BINARY, 0);
}

tree::TerminalNode* Cobol85Parser::DataUsageClauseContext::BIT() {
  return getToken(Cobol85Parser::BIT, 0);
}

tree::TerminalNode* Cobol85Parser::DataUsageClauseContext::COMP() {
  return getToken(Cobol85Parser::COMP, 0);
}

tree::TerminalNode* Cobol85Parser::DataUsageClauseContext::COMP_1() {
  return getToken(Cobol85Parser::COMP_1, 0);
}

tree::TerminalNode* Cobol85Parser::DataUsageClauseContext::COMP_2() {
  return getToken(Cobol85Parser::COMP_2, 0);
}

tree::TerminalNode* Cobol85Parser::DataUsageClauseContext::COMP_3() {
  return getToken(Cobol85Parser::COMP_3, 0);
}

tree::TerminalNode* Cobol85Parser::DataUsageClauseContext::COMP_4() {
  return getToken(Cobol85Parser::COMP_4, 0);
}

tree::TerminalNode* Cobol85Parser::DataUsageClauseContext::COMP_5() {
  return getToken(Cobol85Parser::COMP_5, 0);
}

tree::TerminalNode* Cobol85Parser::DataUsageClauseContext::COMPUTATIONAL() {
  return getToken(Cobol85Parser::COMPUTATIONAL, 0);
}

tree::TerminalNode* Cobol85Parser::DataUsageClauseContext::COMPUTATIONAL_1() {
  return getToken(Cobol85Parser::COMPUTATIONAL_1, 0);
}

tree::TerminalNode* Cobol85Parser::DataUsageClauseContext::COMPUTATIONAL_2() {
  return getToken(Cobol85Parser::COMPUTATIONAL_2, 0);
}

tree::TerminalNode* Cobol85Parser::DataUsageClauseContext::COMPUTATIONAL_3() {
  return getToken(Cobol85Parser::COMPUTATIONAL_3, 0);
}

tree::TerminalNode* Cobol85Parser::DataUsageClauseContext::COMPUTATIONAL_4() {
  return getToken(Cobol85Parser::COMPUTATIONAL_4, 0);
}

tree::TerminalNode* Cobol85Parser::DataUsageClauseContext::COMPUTATIONAL_5() {
  return getToken(Cobol85Parser::COMPUTATIONAL_5, 0);
}

tree::TerminalNode* Cobol85Parser::DataUsageClauseContext::CONTROL_POINT() {
  return getToken(Cobol85Parser::CONTROL_POINT, 0);
}

tree::TerminalNode* Cobol85Parser::DataUsageClauseContext::DATE() {
  return getToken(Cobol85Parser::DATE, 0);
}

tree::TerminalNode* Cobol85Parser::DataUsageClauseContext::DISPLAY() {
  return getToken(Cobol85Parser::DISPLAY, 0);
}

tree::TerminalNode* Cobol85Parser::DataUsageClauseContext::DISPLAY_1() {
  return getToken(Cobol85Parser::DISPLAY_1, 0);
}

tree::TerminalNode* Cobol85Parser::DataUsageClauseContext::DOUBLE() {
  return getToken(Cobol85Parser::DOUBLE, 0);
}

tree::TerminalNode* Cobol85Parser::DataUsageClauseContext::EVENT() {
  return getToken(Cobol85Parser::EVENT, 0);
}

tree::TerminalNode* Cobol85Parser::DataUsageClauseContext::FUNCTION_POINTER() {
  return getToken(Cobol85Parser::FUNCTION_POINTER, 0);
}

tree::TerminalNode* Cobol85Parser::DataUsageClauseContext::INDEX() {
  return getToken(Cobol85Parser::INDEX, 0);
}

tree::TerminalNode* Cobol85Parser::DataUsageClauseContext::KANJI() {
  return getToken(Cobol85Parser::KANJI, 0);
}

tree::TerminalNode* Cobol85Parser::DataUsageClauseContext::LOCK() {
  return getToken(Cobol85Parser::LOCK, 0);
}

tree::TerminalNode* Cobol85Parser::DataUsageClauseContext::NATIONAL() {
  return getToken(Cobol85Parser::NATIONAL, 0);
}

tree::TerminalNode* Cobol85Parser::DataUsageClauseContext::PACKED_DECIMAL() {
  return getToken(Cobol85Parser::PACKED_DECIMAL, 0);
}

tree::TerminalNode* Cobol85Parser::DataUsageClauseContext::POINTER() {
  return getToken(Cobol85Parser::POINTER, 0);
}

tree::TerminalNode* Cobol85Parser::DataUsageClauseContext::PROCEDURE_POINTER() {
  return getToken(Cobol85Parser::PROCEDURE_POINTER, 0);
}

tree::TerminalNode* Cobol85Parser::DataUsageClauseContext::REAL() {
  return getToken(Cobol85Parser::REAL, 0);
}

tree::TerminalNode* Cobol85Parser::DataUsageClauseContext::TASK() {
  return getToken(Cobol85Parser::TASK, 0);
}

tree::TerminalNode* Cobol85Parser::DataUsageClauseContext::USAGE() {
  return getToken(Cobol85Parser::USAGE, 0);
}

tree::TerminalNode* Cobol85Parser::DataUsageClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}

tree::TerminalNode* Cobol85Parser::DataUsageClauseContext::TRUNCATED() {
  return getToken(Cobol85Parser::TRUNCATED, 0);
}

tree::TerminalNode* Cobol85Parser::DataUsageClauseContext::EXTENDED() {
  return getToken(Cobol85Parser::EXTENDED, 0);
}


size_t Cobol85Parser::DataUsageClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleDataUsageClause;
}

void Cobol85Parser::DataUsageClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDataUsageClause(this);
}

void Cobol85Parser::DataUsageClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDataUsageClause(this);
}

Cobol85Parser::DataUsageClauseContext* Cobol85Parser::dataUsageClause() {
  DataUsageClauseContext *_localctx = _tracker.createInstance<DataUsageClauseContext>(_ctx, getState());
  enterRule(_localctx, 490, Cobol85Parser::RuleDataUsageClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3380);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::USAGE) {
      setState(3376);
      match(Cobol85Parser::USAGE);
      setState(3378);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Cobol85Parser::IS) {
        setState(3377);
        match(Cobol85Parser::IS);
      }
    }
    setState(3415);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Cobol85Parser::BINARY: {
        setState(3382);
        match(Cobol85Parser::BINARY);
        setState(3384);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 430, _ctx)) {
        case 1: {
          setState(3383);
          _la = _input->LA(1);
          if (!(_la == Cobol85Parser::EXTENDED || _la == Cobol85Parser::TRUNCATED)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          break;
        }

        default:
          break;
        }
        break;
      }

      case Cobol85Parser::BIT: {
        setState(3386);
        match(Cobol85Parser::BIT);
        break;
      }

      case Cobol85Parser::COMP: {
        setState(3387);
        match(Cobol85Parser::COMP);
        break;
      }

      case Cobol85Parser::COMP_1: {
        setState(3388);
        match(Cobol85Parser::COMP_1);
        break;
      }

      case Cobol85Parser::COMP_2: {
        setState(3389);
        match(Cobol85Parser::COMP_2);
        break;
      }

      case Cobol85Parser::COMP_3: {
        setState(3390);
        match(Cobol85Parser::COMP_3);
        break;
      }

      case Cobol85Parser::COMP_4: {
        setState(3391);
        match(Cobol85Parser::COMP_4);
        break;
      }

      case Cobol85Parser::COMP_5: {
        setState(3392);
        match(Cobol85Parser::COMP_5);
        break;
      }

      case Cobol85Parser::COMPUTATIONAL: {
        setState(3393);
        match(Cobol85Parser::COMPUTATIONAL);
        break;
      }

      case Cobol85Parser::COMPUTATIONAL_1: {
        setState(3394);
        match(Cobol85Parser::COMPUTATIONAL_1);
        break;
      }

      case Cobol85Parser::COMPUTATIONAL_2: {
        setState(3395);
        match(Cobol85Parser::COMPUTATIONAL_2);
        break;
      }

      case Cobol85Parser::COMPUTATIONAL_3: {
        setState(3396);
        match(Cobol85Parser::COMPUTATIONAL_3);
        break;
      }

      case Cobol85Parser::COMPUTATIONAL_4: {
        setState(3397);
        match(Cobol85Parser::COMPUTATIONAL_4);
        break;
      }

      case Cobol85Parser::COMPUTATIONAL_5: {
        setState(3398);
        match(Cobol85Parser::COMPUTATIONAL_5);
        break;
      }

      case Cobol85Parser::CONTROL_POINT: {
        setState(3399);
        match(Cobol85Parser::CONTROL_POINT);
        break;
      }

      case Cobol85Parser::DATE: {
        setState(3400);
        match(Cobol85Parser::DATE);
        break;
      }

      case Cobol85Parser::DISPLAY: {
        setState(3401);
        match(Cobol85Parser::DISPLAY);
        break;
      }

      case Cobol85Parser::DISPLAY_1: {
        setState(3402);
        match(Cobol85Parser::DISPLAY_1);
        break;
      }

      case Cobol85Parser::DOUBLE: {
        setState(3403);
        match(Cobol85Parser::DOUBLE);
        break;
      }

      case Cobol85Parser::EVENT: {
        setState(3404);
        match(Cobol85Parser::EVENT);
        break;
      }

      case Cobol85Parser::FUNCTION_POINTER: {
        setState(3405);
        match(Cobol85Parser::FUNCTION_POINTER);
        break;
      }

      case Cobol85Parser::INDEX: {
        setState(3406);
        match(Cobol85Parser::INDEX);
        break;
      }

      case Cobol85Parser::KANJI: {
        setState(3407);
        match(Cobol85Parser::KANJI);
        break;
      }

      case Cobol85Parser::LOCK: {
        setState(3408);
        match(Cobol85Parser::LOCK);
        break;
      }

      case Cobol85Parser::NATIONAL: {
        setState(3409);
        match(Cobol85Parser::NATIONAL);
        break;
      }

      case Cobol85Parser::PACKED_DECIMAL: {
        setState(3410);
        match(Cobol85Parser::PACKED_DECIMAL);
        break;
      }

      case Cobol85Parser::POINTER: {
        setState(3411);
        match(Cobol85Parser::POINTER);
        break;
      }

      case Cobol85Parser::PROCEDURE_POINTER: {
        setState(3412);
        match(Cobol85Parser::PROCEDURE_POINTER);
        break;
      }

      case Cobol85Parser::REAL: {
        setState(3413);
        match(Cobol85Parser::REAL);
        break;
      }

      case Cobol85Parser::TASK: {
        setState(3414);
        match(Cobol85Parser::TASK);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DataUsingClauseContext ------------------------------------------------------------------

Cobol85Parser::DataUsingClauseContext::DataUsingClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::DataUsingClauseContext::USING() {
  return getToken(Cobol85Parser::USING, 0);
}

tree::TerminalNode* Cobol85Parser::DataUsingClauseContext::LANGUAGE() {
  return getToken(Cobol85Parser::LANGUAGE, 0);
}

tree::TerminalNode* Cobol85Parser::DataUsingClauseContext::CONVENTION() {
  return getToken(Cobol85Parser::CONVENTION, 0);
}

Cobol85Parser::CobolWordContext* Cobol85Parser::DataUsingClauseContext::cobolWord() {
  return getRuleContext<Cobol85Parser::CobolWordContext>(0);
}

Cobol85Parser::DataNameContext* Cobol85Parser::DataUsingClauseContext::dataName() {
  return getRuleContext<Cobol85Parser::DataNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::DataUsingClauseContext::OF() {
  return getToken(Cobol85Parser::OF, 0);
}


size_t Cobol85Parser::DataUsingClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleDataUsingClause;
}

void Cobol85Parser::DataUsingClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDataUsingClause(this);
}

void Cobol85Parser::DataUsingClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDataUsingClause(this);
}

Cobol85Parser::DataUsingClauseContext* Cobol85Parser::dataUsingClause() {
  DataUsingClauseContext *_localctx = _tracker.createInstance<DataUsingClauseContext>(_ctx, getState());
  enterRule(_localctx, 492, Cobol85Parser::RuleDataUsingClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3417);
    match(Cobol85Parser::USING);
    setState(3418);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::CONVENTION || _la == Cobol85Parser::LANGUAGE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(3420);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::OF) {
      setState(3419);
      match(Cobol85Parser::OF);
    }
    setState(3424);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 433, _ctx)) {
    case 1: {
      setState(3422);
      cobolWord();
      break;
    }

    case 2: {
      setState(3423);
      dataName();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DataValueClauseContext ------------------------------------------------------------------

Cobol85Parser::DataValueClauseContext::DataValueClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Cobol85Parser::DataValueIntervalContext *> Cobol85Parser::DataValueClauseContext::dataValueInterval() {
  return getRuleContexts<Cobol85Parser::DataValueIntervalContext>();
}

Cobol85Parser::DataValueIntervalContext* Cobol85Parser::DataValueClauseContext::dataValueInterval(size_t i) {
  return getRuleContext<Cobol85Parser::DataValueIntervalContext>(i);
}

tree::TerminalNode* Cobol85Parser::DataValueClauseContext::VALUE() {
  return getToken(Cobol85Parser::VALUE, 0);
}

tree::TerminalNode* Cobol85Parser::DataValueClauseContext::VALUES() {
  return getToken(Cobol85Parser::VALUES, 0);
}

tree::TerminalNode* Cobol85Parser::DataValueClauseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}

tree::TerminalNode* Cobol85Parser::DataValueClauseContext::ARE() {
  return getToken(Cobol85Parser::ARE, 0);
}

std::vector<tree::TerminalNode *> Cobol85Parser::DataValueClauseContext::COMMACHAR() {
  return getTokens(Cobol85Parser::COMMACHAR);
}

tree::TerminalNode* Cobol85Parser::DataValueClauseContext::COMMACHAR(size_t i) {
  return getToken(Cobol85Parser::COMMACHAR, i);
}


size_t Cobol85Parser::DataValueClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleDataValueClause;
}

void Cobol85Parser::DataValueClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDataValueClause(this);
}

void Cobol85Parser::DataValueClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDataValueClause(this);
}

Cobol85Parser::DataValueClauseContext* Cobol85Parser::dataValueClause() {
  DataValueClauseContext *_localctx = _tracker.createInstance<DataValueClauseContext>(_ctx, getState());
  enterRule(_localctx, 494, Cobol85Parser::RuleDataValueClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3434);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Cobol85Parser::VALUE: {
        setState(3426);
        match(Cobol85Parser::VALUE);
        setState(3428);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Cobol85Parser::IS) {
          setState(3427);
          match(Cobol85Parser::IS);
        }
        break;
      }

      case Cobol85Parser::VALUES: {
        setState(3430);
        match(Cobol85Parser::VALUES);
        setState(3432);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Cobol85Parser::ARE) {
          setState(3431);
          match(Cobol85Parser::ARE);
        }
        break;
      }

      case Cobol85Parser::ABORT:
      case Cobol85Parser::ALL:
      case Cobol85Parser::AS:
      case Cobol85Parser::ASCII:
      case Cobol85Parser::ASSOCIATED_DATA:
      case Cobol85Parser::ASSOCIATED_DATA_LENGTH:
      case Cobol85Parser::ATTRIBUTE:
      case Cobol85Parser::AUTO:
      case Cobol85Parser::AUTO_SKIP:
      case Cobol85Parser::BACKGROUND_COLOR:
      case Cobol85Parser::BACKGROUND_COLOUR:
      case Cobol85Parser::BEEP:
      case Cobol85Parser::BELL:
      case Cobol85Parser::BINARY:
      case Cobol85Parser::BIT:
      case Cobol85Parser::BLINK:
      case Cobol85Parser::BOUNDS:
      case Cobol85Parser::CAPABLE:
      case Cobol85Parser::CCSVERSION:
      case Cobol85Parser::CHANGED:
      case Cobol85Parser::CHANNEL:
      case Cobol85Parser::CLOSE_DISPOSITION:
      case Cobol85Parser::COBOL:
      case Cobol85Parser::COMMITMENT:
      case Cobol85Parser::CONTROL_POINT:
      case Cobol85Parser::CONVENTION:
      case Cobol85Parser::CRUNCH:
      case Cobol85Parser::CURSOR:
      case Cobol85Parser::DEFAULT:
      case Cobol85Parser::DEFAULT_DISPLAY:
      case Cobol85Parser::DEFINITION:
      case Cobol85Parser::DFHRESP:
      case Cobol85Parser::DFHVALUE:
      case Cobol85Parser::DISK:
      case Cobol85Parser::DONTCARE:
      case Cobol85Parser::DOUBLE:
      case Cobol85Parser::EBCDIC:
      case Cobol85Parser::EMPTY_CHECK:
      case Cobol85Parser::ENTER:
      case Cobol85Parser::ENTRY_PROCEDURE:
      case Cobol85Parser::ERASE:
      case Cobol85Parser::EOL:
      case Cobol85Parser::EOS:
      case Cobol85Parser::ESCAPE:
      case Cobol85Parser::EVENT:
      case Cobol85Parser::EXCLUSIVE:
      case Cobol85Parser::EXPORT:
      case Cobol85Parser::EXTENDED:
      case Cobol85Parser::FALSE:
      case Cobol85Parser::FOREGROUND_COLOR:
      case Cobol85Parser::FOREGROUND_COLOUR:
      case Cobol85Parser::FULL:
      case Cobol85Parser::FUNCTIONNAME:
      case Cobol85Parser::FUNCTION_POINTER:
      case Cobol85Parser::GRID:
      case Cobol85Parser::HIGHLIGHT:
      case Cobol85Parser::HIGH_VALUE:
      case Cobol85Parser::HIGH_VALUES:
      case Cobol85Parser::IMPLICIT:
      case Cobol85Parser::IMPORT:
      case Cobol85Parser::INTEGER:
      case Cobol85Parser::KEPT:
      case Cobol85Parser::KEYBOARD:
      case Cobol85Parser::LANGUAGE:
      case Cobol85Parser::LB:
      case Cobol85Parser::LD:
      case Cobol85Parser::LEFTLINE:
      case Cobol85Parser::LENGTH_CHECK:
      case Cobol85Parser::LIBACCESS:
      case Cobol85Parser::LIBPARAMETER:
      case Cobol85Parser::LIBRARY:
      case Cobol85Parser::LIST:
      case Cobol85Parser::LOCAL:
      case Cobol85Parser::LONG_DATE:
      case Cobol85Parser::LONG_TIME:
      case Cobol85Parser::LOWER:
      case Cobol85Parser::LOWLIGHT:
      case Cobol85Parser::LOW_VALUE:
      case Cobol85Parser::LOW_VALUES:
      case Cobol85Parser::MMDDYYYY:
      case Cobol85Parser::NAMED:
      case Cobol85Parser::NATIONAL:
      case Cobol85Parser::NATIONAL_EDITED:
      case Cobol85Parser::NETWORK:
      case Cobol85Parser::NO_ECHO:
      case Cobol85Parser::NULL_:
      case Cobol85Parser::NULLS:
      case Cobol85Parser::NUMERIC_DATE:
      case Cobol85Parser::NUMERIC_TIME:
      case Cobol85Parser::ODT:
      case Cobol85Parser::ORDERLY:
      case Cobol85Parser::OVERLINE:
      case Cobol85Parser::OWN:
      case Cobol85Parser::PASSWORD:
      case Cobol85Parser::PORT:
      case Cobol85Parser::PRINTER:
      case Cobol85Parser::PRIVATE:
      case Cobol85Parser::PROCESS:
      case Cobol85Parser::PROGRAM:
      case Cobol85Parser::PROMPT:
      case Cobol85Parser::QUOTE:
      case Cobol85Parser::QUOTES:
      case Cobol85Parser::READER:
      case Cobol85Parser::REMOTE:
      case Cobol85Parser::REAL:
      case Cobol85Parser::RECEIVED:
      case Cobol85Parser::RECURSIVE:
      case Cobol85Parser::REF:
      case Cobol85Parser::REMOVE:
      case Cobol85Parser::REQUIRED:
      case Cobol85Parser::REVERSE_VIDEO:
      case Cobol85Parser::SAVE:
      case Cobol85Parser::SECURE:
      case Cobol85Parser::SHARED:
      case Cobol85Parser::SHAREDBYALL:
      case Cobol85Parser::SHAREDBYRUNUNIT:
      case Cobol85Parser::SHARING:
      case Cobol85Parser::SHORT_DATE:
      case Cobol85Parser::SPACE:
      case Cobol85Parser::SPACES:
      case Cobol85Parser::SYMBOL:
      case Cobol85Parser::TASK:
      case Cobol85Parser::THREAD:
      case Cobol85Parser::THREAD_LOCAL:
      case Cobol85Parser::TIMER:
      case Cobol85Parser::TODAYS_DATE:
      case Cobol85Parser::TODAYS_NAME:
      case Cobol85Parser::TRUE:
      case Cobol85Parser::TRUNCATED:
      case Cobol85Parser::TYPEDEF:
      case Cobol85Parser::UNDERLINE:
      case Cobol85Parser::VIRTUAL:
      case Cobol85Parser::WAIT:
      case Cobol85Parser::YEAR:
      case Cobol85Parser::YYYYMMDD:
      case Cobol85Parser::YYYYDDD:
      case Cobol85Parser::ZERO:
      case Cobol85Parser::ZERO_FILL:
      case Cobol85Parser::ZEROS:
      case Cobol85Parser::ZEROES:
      case Cobol85Parser::NONNUMERICLITERAL:
      case Cobol85Parser::LEVEL_NUMBER_66:
      case Cobol85Parser::LEVEL_NUMBER_77:
      case Cobol85Parser::LEVEL_NUMBER_88:
      case Cobol85Parser::INTEGERLITERAL:
      case Cobol85Parser::NUMERICLITERAL:
      case Cobol85Parser::IDENTIFIER: {
        break;
      }

    default:
      break;
    }
    setState(3436);
    dataValueInterval();
    setState(3443);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 438, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(3438);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Cobol85Parser::COMMACHAR) {
          setState(3437);
          match(Cobol85Parser::COMMACHAR);
        }
        setState(3440);
        dataValueInterval(); 
      }
      setState(3445);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 438, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DataValueIntervalContext ------------------------------------------------------------------

Cobol85Parser::DataValueIntervalContext::DataValueIntervalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::DataValueIntervalFromContext* Cobol85Parser::DataValueIntervalContext::dataValueIntervalFrom() {
  return getRuleContext<Cobol85Parser::DataValueIntervalFromContext>(0);
}

Cobol85Parser::DataValueIntervalToContext* Cobol85Parser::DataValueIntervalContext::dataValueIntervalTo() {
  return getRuleContext<Cobol85Parser::DataValueIntervalToContext>(0);
}


size_t Cobol85Parser::DataValueIntervalContext::getRuleIndex() const {
  return Cobol85Parser::RuleDataValueInterval;
}

void Cobol85Parser::DataValueIntervalContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDataValueInterval(this);
}

void Cobol85Parser::DataValueIntervalContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDataValueInterval(this);
}

Cobol85Parser::DataValueIntervalContext* Cobol85Parser::dataValueInterval() {
  DataValueIntervalContext *_localctx = _tracker.createInstance<DataValueIntervalContext>(_ctx, getState());
  enterRule(_localctx, 496, Cobol85Parser::RuleDataValueInterval);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3446);
    dataValueIntervalFrom();
    setState(3448);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::THROUGH

    || _la == Cobol85Parser::THRU) {
      setState(3447);
      dataValueIntervalTo();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DataValueIntervalFromContext ------------------------------------------------------------------

Cobol85Parser::DataValueIntervalFromContext::DataValueIntervalFromContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::LiteralContext* Cobol85Parser::DataValueIntervalFromContext::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}

Cobol85Parser::CobolWordContext* Cobol85Parser::DataValueIntervalFromContext::cobolWord() {
  return getRuleContext<Cobol85Parser::CobolWordContext>(0);
}


size_t Cobol85Parser::DataValueIntervalFromContext::getRuleIndex() const {
  return Cobol85Parser::RuleDataValueIntervalFrom;
}

void Cobol85Parser::DataValueIntervalFromContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDataValueIntervalFrom(this);
}

void Cobol85Parser::DataValueIntervalFromContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDataValueIntervalFrom(this);
}

Cobol85Parser::DataValueIntervalFromContext* Cobol85Parser::dataValueIntervalFrom() {
  DataValueIntervalFromContext *_localctx = _tracker.createInstance<DataValueIntervalFromContext>(_ctx, getState());
  enterRule(_localctx, 498, Cobol85Parser::RuleDataValueIntervalFrom);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3452);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 440, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3450);
      literal();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3451);
      cobolWord();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DataValueIntervalToContext ------------------------------------------------------------------

Cobol85Parser::DataValueIntervalToContext::DataValueIntervalToContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::LiteralContext* Cobol85Parser::DataValueIntervalToContext::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}

tree::TerminalNode* Cobol85Parser::DataValueIntervalToContext::THROUGH() {
  return getToken(Cobol85Parser::THROUGH, 0);
}

tree::TerminalNode* Cobol85Parser::DataValueIntervalToContext::THRU() {
  return getToken(Cobol85Parser::THRU, 0);
}


size_t Cobol85Parser::DataValueIntervalToContext::getRuleIndex() const {
  return Cobol85Parser::RuleDataValueIntervalTo;
}

void Cobol85Parser::DataValueIntervalToContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDataValueIntervalTo(this);
}

void Cobol85Parser::DataValueIntervalToContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDataValueIntervalTo(this);
}

Cobol85Parser::DataValueIntervalToContext* Cobol85Parser::dataValueIntervalTo() {
  DataValueIntervalToContext *_localctx = _tracker.createInstance<DataValueIntervalToContext>(_ctx, getState());
  enterRule(_localctx, 500, Cobol85Parser::RuleDataValueIntervalTo);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3454);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::THROUGH

    || _la == Cobol85Parser::THRU)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(3455);
    literal();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DataWithLowerBoundsClauseContext ------------------------------------------------------------------

Cobol85Parser::DataWithLowerBoundsClauseContext::DataWithLowerBoundsClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::DataWithLowerBoundsClauseContext::LOWER() {
  return getToken(Cobol85Parser::LOWER, 0);
}

tree::TerminalNode* Cobol85Parser::DataWithLowerBoundsClauseContext::BOUNDS() {
  return getToken(Cobol85Parser::BOUNDS, 0);
}

tree::TerminalNode* Cobol85Parser::DataWithLowerBoundsClauseContext::WITH() {
  return getToken(Cobol85Parser::WITH, 0);
}


size_t Cobol85Parser::DataWithLowerBoundsClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleDataWithLowerBoundsClause;
}

void Cobol85Parser::DataWithLowerBoundsClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDataWithLowerBoundsClause(this);
}

void Cobol85Parser::DataWithLowerBoundsClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDataWithLowerBoundsClause(this);
}

Cobol85Parser::DataWithLowerBoundsClauseContext* Cobol85Parser::dataWithLowerBoundsClause() {
  DataWithLowerBoundsClauseContext *_localctx = _tracker.createInstance<DataWithLowerBoundsClauseContext>(_ctx, getState());
  enterRule(_localctx, 502, Cobol85Parser::RuleDataWithLowerBoundsClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3458);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::WITH) {
      setState(3457);
      match(Cobol85Parser::WITH);
    }
    setState(3460);
    match(Cobol85Parser::LOWER);
    setState(3461);
    match(Cobol85Parser::BOUNDS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProcedureDivisionContext ------------------------------------------------------------------

Cobol85Parser::ProcedureDivisionContext::ProcedureDivisionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ProcedureDivisionContext::PROCEDURE() {
  return getToken(Cobol85Parser::PROCEDURE, 0);
}

tree::TerminalNode* Cobol85Parser::ProcedureDivisionContext::DIVISION() {
  return getToken(Cobol85Parser::DIVISION, 0);
}

tree::TerminalNode* Cobol85Parser::ProcedureDivisionContext::DOT_FS() {
  return getToken(Cobol85Parser::DOT_FS, 0);
}

Cobol85Parser::ProcedureDivisionBodyContext* Cobol85Parser::ProcedureDivisionContext::procedureDivisionBody() {
  return getRuleContext<Cobol85Parser::ProcedureDivisionBodyContext>(0);
}

Cobol85Parser::ProcedureDivisionUsingClauseContext* Cobol85Parser::ProcedureDivisionContext::procedureDivisionUsingClause() {
  return getRuleContext<Cobol85Parser::ProcedureDivisionUsingClauseContext>(0);
}

Cobol85Parser::ProcedureDivisionGivingClauseContext* Cobol85Parser::ProcedureDivisionContext::procedureDivisionGivingClause() {
  return getRuleContext<Cobol85Parser::ProcedureDivisionGivingClauseContext>(0);
}

Cobol85Parser::ProcedureDeclarativesContext* Cobol85Parser::ProcedureDivisionContext::procedureDeclaratives() {
  return getRuleContext<Cobol85Parser::ProcedureDeclarativesContext>(0);
}


size_t Cobol85Parser::ProcedureDivisionContext::getRuleIndex() const {
  return Cobol85Parser::RuleProcedureDivision;
}

void Cobol85Parser::ProcedureDivisionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProcedureDivision(this);
}

void Cobol85Parser::ProcedureDivisionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProcedureDivision(this);
}

Cobol85Parser::ProcedureDivisionContext* Cobol85Parser::procedureDivision() {
  ProcedureDivisionContext *_localctx = _tracker.createInstance<ProcedureDivisionContext>(_ctx, getState());
  enterRule(_localctx, 504, Cobol85Parser::RuleProcedureDivision);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3463);
    match(Cobol85Parser::PROCEDURE);
    setState(3464);
    match(Cobol85Parser::DIVISION);
    setState(3466);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::CHAINING || _la == Cobol85Parser::USING) {
      setState(3465);
      procedureDivisionUsingClause();
    }
    setState(3469);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::GIVING || _la == Cobol85Parser::RETURNING) {
      setState(3468);
      procedureDivisionGivingClause();
    }
    setState(3471);
    match(Cobol85Parser::DOT_FS);
    setState(3473);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::DECLARATIVES) {
      setState(3472);
      procedureDeclaratives();
    }
    setState(3475);
    procedureDivisionBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProcedureDivisionUsingClauseContext ------------------------------------------------------------------

Cobol85Parser::ProcedureDivisionUsingClauseContext::ProcedureDivisionUsingClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ProcedureDivisionUsingClauseContext::USING() {
  return getToken(Cobol85Parser::USING, 0);
}

tree::TerminalNode* Cobol85Parser::ProcedureDivisionUsingClauseContext::CHAINING() {
  return getToken(Cobol85Parser::CHAINING, 0);
}

std::vector<Cobol85Parser::ProcedureDivisionUsingParameterContext *> Cobol85Parser::ProcedureDivisionUsingClauseContext::procedureDivisionUsingParameter() {
  return getRuleContexts<Cobol85Parser::ProcedureDivisionUsingParameterContext>();
}

Cobol85Parser::ProcedureDivisionUsingParameterContext* Cobol85Parser::ProcedureDivisionUsingClauseContext::procedureDivisionUsingParameter(size_t i) {
  return getRuleContext<Cobol85Parser::ProcedureDivisionUsingParameterContext>(i);
}


size_t Cobol85Parser::ProcedureDivisionUsingClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleProcedureDivisionUsingClause;
}

void Cobol85Parser::ProcedureDivisionUsingClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProcedureDivisionUsingClause(this);
}

void Cobol85Parser::ProcedureDivisionUsingClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProcedureDivisionUsingClause(this);
}

Cobol85Parser::ProcedureDivisionUsingClauseContext* Cobol85Parser::procedureDivisionUsingClause() {
  ProcedureDivisionUsingClauseContext *_localctx = _tracker.createInstance<ProcedureDivisionUsingClauseContext>(_ctx, getState());
  enterRule(_localctx, 506, Cobol85Parser::RuleProcedureDivisionUsingClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3477);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::CHAINING || _la == Cobol85Parser::USING)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(3479); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(3478);
      procedureDivisionUsingParameter();
      setState(3481); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3513562381090291746) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 8213661102500741635) != 0) || ((((_la - 138) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 138)) & 5276573893883339531) != 0) || ((((_la - 202) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 202)) & -3098194965423728639) != 0) || ((((_la - 268) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 268)) & -8049611247572114313) != 0) || ((((_la - 336) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 336)) & 4648155908907139171) != 0) || ((((_la - 401) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 401)) & 130978249457673) != 0) || ((((_la - 466) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 466)) & 103778511530590369) != 0) || ((((_la - 552) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 552)) & 47) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProcedureDivisionGivingClauseContext ------------------------------------------------------------------

Cobol85Parser::ProcedureDivisionGivingClauseContext::ProcedureDivisionGivingClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::DataNameContext* Cobol85Parser::ProcedureDivisionGivingClauseContext::dataName() {
  return getRuleContext<Cobol85Parser::DataNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::ProcedureDivisionGivingClauseContext::GIVING() {
  return getToken(Cobol85Parser::GIVING, 0);
}

tree::TerminalNode* Cobol85Parser::ProcedureDivisionGivingClauseContext::RETURNING() {
  return getToken(Cobol85Parser::RETURNING, 0);
}


size_t Cobol85Parser::ProcedureDivisionGivingClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleProcedureDivisionGivingClause;
}

void Cobol85Parser::ProcedureDivisionGivingClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProcedureDivisionGivingClause(this);
}

void Cobol85Parser::ProcedureDivisionGivingClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProcedureDivisionGivingClause(this);
}

Cobol85Parser::ProcedureDivisionGivingClauseContext* Cobol85Parser::procedureDivisionGivingClause() {
  ProcedureDivisionGivingClauseContext *_localctx = _tracker.createInstance<ProcedureDivisionGivingClauseContext>(_ctx, getState());
  enterRule(_localctx, 508, Cobol85Parser::RuleProcedureDivisionGivingClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3483);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::GIVING || _la == Cobol85Parser::RETURNING)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(3484);
    dataName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProcedureDivisionUsingParameterContext ------------------------------------------------------------------

Cobol85Parser::ProcedureDivisionUsingParameterContext::ProcedureDivisionUsingParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::ProcedureDivisionByReferencePhraseContext* Cobol85Parser::ProcedureDivisionUsingParameterContext::procedureDivisionByReferencePhrase() {
  return getRuleContext<Cobol85Parser::ProcedureDivisionByReferencePhraseContext>(0);
}

Cobol85Parser::ProcedureDivisionByValuePhraseContext* Cobol85Parser::ProcedureDivisionUsingParameterContext::procedureDivisionByValuePhrase() {
  return getRuleContext<Cobol85Parser::ProcedureDivisionByValuePhraseContext>(0);
}


size_t Cobol85Parser::ProcedureDivisionUsingParameterContext::getRuleIndex() const {
  return Cobol85Parser::RuleProcedureDivisionUsingParameter;
}

void Cobol85Parser::ProcedureDivisionUsingParameterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProcedureDivisionUsingParameter(this);
}

void Cobol85Parser::ProcedureDivisionUsingParameterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProcedureDivisionUsingParameter(this);
}

Cobol85Parser::ProcedureDivisionUsingParameterContext* Cobol85Parser::procedureDivisionUsingParameter() {
  ProcedureDivisionUsingParameterContext *_localctx = _tracker.createInstance<ProcedureDivisionUsingParameterContext>(_ctx, getState());
  enterRule(_localctx, 510, Cobol85Parser::RuleProcedureDivisionUsingParameter);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3488);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 446, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3486);
      procedureDivisionByReferencePhrase();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3487);
      procedureDivisionByValuePhrase();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProcedureDivisionByReferencePhraseContext ------------------------------------------------------------------

Cobol85Parser::ProcedureDivisionByReferencePhraseContext::ProcedureDivisionByReferencePhraseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ProcedureDivisionByReferencePhraseContext::REFERENCE() {
  return getToken(Cobol85Parser::REFERENCE, 0);
}

std::vector<Cobol85Parser::ProcedureDivisionByReferenceContext *> Cobol85Parser::ProcedureDivisionByReferencePhraseContext::procedureDivisionByReference() {
  return getRuleContexts<Cobol85Parser::ProcedureDivisionByReferenceContext>();
}

Cobol85Parser::ProcedureDivisionByReferenceContext* Cobol85Parser::ProcedureDivisionByReferencePhraseContext::procedureDivisionByReference(size_t i) {
  return getRuleContext<Cobol85Parser::ProcedureDivisionByReferenceContext>(i);
}

tree::TerminalNode* Cobol85Parser::ProcedureDivisionByReferencePhraseContext::BY() {
  return getToken(Cobol85Parser::BY, 0);
}


size_t Cobol85Parser::ProcedureDivisionByReferencePhraseContext::getRuleIndex() const {
  return Cobol85Parser::RuleProcedureDivisionByReferencePhrase;
}

void Cobol85Parser::ProcedureDivisionByReferencePhraseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProcedureDivisionByReferencePhrase(this);
}

void Cobol85Parser::ProcedureDivisionByReferencePhraseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProcedureDivisionByReferencePhrase(this);
}

Cobol85Parser::ProcedureDivisionByReferencePhraseContext* Cobol85Parser::procedureDivisionByReferencePhrase() {
  ProcedureDivisionByReferencePhraseContext *_localctx = _tracker.createInstance<ProcedureDivisionByReferencePhraseContext>(_ctx, getState());
  enterRule(_localctx, 512, Cobol85Parser::RuleProcedureDivisionByReferencePhrase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3494);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::BY || _la == Cobol85Parser::REFERENCE) {
      setState(3491);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Cobol85Parser::BY) {
        setState(3490);
        match(Cobol85Parser::BY);
      }
      setState(3493);
      match(Cobol85Parser::REFERENCE);
    }
    setState(3497); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(3496);
              procedureDivisionByReference();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(3499); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 449, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProcedureDivisionByReferenceContext ------------------------------------------------------------------

Cobol85Parser::ProcedureDivisionByReferenceContext::ProcedureDivisionByReferenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::IdentifierContext* Cobol85Parser::ProcedureDivisionByReferenceContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

Cobol85Parser::FileNameContext* Cobol85Parser::ProcedureDivisionByReferenceContext::fileName() {
  return getRuleContext<Cobol85Parser::FileNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::ProcedureDivisionByReferenceContext::OPTIONAL() {
  return getToken(Cobol85Parser::OPTIONAL, 0);
}

tree::TerminalNode* Cobol85Parser::ProcedureDivisionByReferenceContext::ANY() {
  return getToken(Cobol85Parser::ANY, 0);
}


size_t Cobol85Parser::ProcedureDivisionByReferenceContext::getRuleIndex() const {
  return Cobol85Parser::RuleProcedureDivisionByReference;
}

void Cobol85Parser::ProcedureDivisionByReferenceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProcedureDivisionByReference(this);
}

void Cobol85Parser::ProcedureDivisionByReferenceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProcedureDivisionByReference(this);
}

Cobol85Parser::ProcedureDivisionByReferenceContext* Cobol85Parser::procedureDivisionByReference() {
  ProcedureDivisionByReferenceContext *_localctx = _tracker.createInstance<ProcedureDivisionByReferenceContext>(_ctx, getState());
  enterRule(_localctx, 514, Cobol85Parser::RuleProcedureDivisionByReference);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3509);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Cobol85Parser::ABORT:
      case Cobol85Parser::ADDRESS:
      case Cobol85Parser::AS:
      case Cobol85Parser::ASCII:
      case Cobol85Parser::ASSOCIATED_DATA:
      case Cobol85Parser::ASSOCIATED_DATA_LENGTH:
      case Cobol85Parser::ATTRIBUTE:
      case Cobol85Parser::AUTO:
      case Cobol85Parser::AUTO_SKIP:
      case Cobol85Parser::BACKGROUND_COLOR:
      case Cobol85Parser::BACKGROUND_COLOUR:
      case Cobol85Parser::BEEP:
      case Cobol85Parser::BELL:
      case Cobol85Parser::BINARY:
      case Cobol85Parser::BIT:
      case Cobol85Parser::BLINK:
      case Cobol85Parser::BOUNDS:
      case Cobol85Parser::CAPABLE:
      case Cobol85Parser::CCSVERSION:
      case Cobol85Parser::CHANGED:
      case Cobol85Parser::CHANNEL:
      case Cobol85Parser::CLOSE_DISPOSITION:
      case Cobol85Parser::COBOL:
      case Cobol85Parser::COMMITMENT:
      case Cobol85Parser::CONTROL_POINT:
      case Cobol85Parser::CONVENTION:
      case Cobol85Parser::CRUNCH:
      case Cobol85Parser::CURSOR:
      case Cobol85Parser::DATE:
      case Cobol85Parser::DAY:
      case Cobol85Parser::DAY_OF_WEEK:
      case Cobol85Parser::DEBUG_CONTENTS:
      case Cobol85Parser::DEBUG_ITEM:
      case Cobol85Parser::DEBUG_LINE:
      case Cobol85Parser::DEBUG_NAME:
      case Cobol85Parser::DEBUG_SUB_1:
      case Cobol85Parser::DEBUG_SUB_2:
      case Cobol85Parser::DEBUG_SUB_3:
      case Cobol85Parser::DEFAULT:
      case Cobol85Parser::DEFAULT_DISPLAY:
      case Cobol85Parser::DEFINITION:
      case Cobol85Parser::DFHRESP:
      case Cobol85Parser::DFHVALUE:
      case Cobol85Parser::DISK:
      case Cobol85Parser::DONTCARE:
      case Cobol85Parser::DOUBLE:
      case Cobol85Parser::EBCDIC:
      case Cobol85Parser::EMPTY_CHECK:
      case Cobol85Parser::ENTER:
      case Cobol85Parser::ENTRY_PROCEDURE:
      case Cobol85Parser::ERASE:
      case Cobol85Parser::EOL:
      case Cobol85Parser::EOS:
      case Cobol85Parser::ESCAPE:
      case Cobol85Parser::EVENT:
      case Cobol85Parser::EXCLUSIVE:
      case Cobol85Parser::EXPORT:
      case Cobol85Parser::EXTENDED:
      case Cobol85Parser::FOREGROUND_COLOR:
      case Cobol85Parser::FOREGROUND_COLOUR:
      case Cobol85Parser::FULL:
      case Cobol85Parser::FUNCTION:
      case Cobol85Parser::FUNCTIONNAME:
      case Cobol85Parser::FUNCTION_POINTER:
      case Cobol85Parser::GRID:
      case Cobol85Parser::HIGHLIGHT:
      case Cobol85Parser::IMPLICIT:
      case Cobol85Parser::IMPORT:
      case Cobol85Parser::INTEGER:
      case Cobol85Parser::KEPT:
      case Cobol85Parser::KEYBOARD:
      case Cobol85Parser::LANGUAGE:
      case Cobol85Parser::LB:
      case Cobol85Parser::LD:
      case Cobol85Parser::LEFTLINE:
      case Cobol85Parser::LENGTH:
      case Cobol85Parser::LENGTH_CHECK:
      case Cobol85Parser::LIBACCESS:
      case Cobol85Parser::LIBPARAMETER:
      case Cobol85Parser::LIBRARY:
      case Cobol85Parser::LINAGE_COUNTER:
      case Cobol85Parser::LINE_COUNTER:
      case Cobol85Parser::LIST:
      case Cobol85Parser::LOCAL:
      case Cobol85Parser::LONG_DATE:
      case Cobol85Parser::LONG_TIME:
      case Cobol85Parser::LOWER:
      case Cobol85Parser::LOWLIGHT:
      case Cobol85Parser::MMDDYYYY:
      case Cobol85Parser::NAMED:
      case Cobol85Parser::NATIONAL:
      case Cobol85Parser::NATIONAL_EDITED:
      case Cobol85Parser::NETWORK:
      case Cobol85Parser::NO_ECHO:
      case Cobol85Parser::NUMERIC_DATE:
      case Cobol85Parser::NUMERIC_TIME:
      case Cobol85Parser::ODT:
      case Cobol85Parser::OPTIONAL:
      case Cobol85Parser::ORDERLY:
      case Cobol85Parser::OVERLINE:
      case Cobol85Parser::OWN:
      case Cobol85Parser::PAGE_COUNTER:
      case Cobol85Parser::PASSWORD:
      case Cobol85Parser::PORT:
      case Cobol85Parser::PRINTER:
      case Cobol85Parser::PRIVATE:
      case Cobol85Parser::PROCESS:
      case Cobol85Parser::PROGRAM:
      case Cobol85Parser::PROMPT:
      case Cobol85Parser::READER:
      case Cobol85Parser::REMOTE:
      case Cobol85Parser::REAL:
      case Cobol85Parser::RECEIVED:
      case Cobol85Parser::RECURSIVE:
      case Cobol85Parser::REF:
      case Cobol85Parser::REMOVE:
      case Cobol85Parser::REQUIRED:
      case Cobol85Parser::REVERSE_VIDEO:
      case Cobol85Parser::RETURN_CODE:
      case Cobol85Parser::SAVE:
      case Cobol85Parser::SECURE:
      case Cobol85Parser::SHARED:
      case Cobol85Parser::SHAREDBYALL:
      case Cobol85Parser::SHAREDBYRUNUNIT:
      case Cobol85Parser::SHARING:
      case Cobol85Parser::SHIFT_IN:
      case Cobol85Parser::SHIFT_OUT:
      case Cobol85Parser::SHORT_DATE:
      case Cobol85Parser::SORT_CONTROL:
      case Cobol85Parser::SORT_CORE_SIZE:
      case Cobol85Parser::SORT_FILE_SIZE:
      case Cobol85Parser::SORT_MESSAGE:
      case Cobol85Parser::SORT_MODE_SIZE:
      case Cobol85Parser::SORT_RETURN:
      case Cobol85Parser::SYMBOL:
      case Cobol85Parser::TALLY:
      case Cobol85Parser::TASK:
      case Cobol85Parser::THREAD:
      case Cobol85Parser::THREAD_LOCAL:
      case Cobol85Parser::TIME:
      case Cobol85Parser::TIMER:
      case Cobol85Parser::TODAYS_DATE:
      case Cobol85Parser::TODAYS_NAME:
      case Cobol85Parser::TRUNCATED:
      case Cobol85Parser::TYPEDEF:
      case Cobol85Parser::UNDERLINE:
      case Cobol85Parser::VIRTUAL:
      case Cobol85Parser::WAIT:
      case Cobol85Parser::WHEN_COMPILED:
      case Cobol85Parser::YEAR:
      case Cobol85Parser::YYYYMMDD:
      case Cobol85Parser::YYYYDDD:
      case Cobol85Parser::ZERO_FILL:
      case Cobol85Parser::LEVEL_NUMBER_66:
      case Cobol85Parser::LEVEL_NUMBER_77:
      case Cobol85Parser::LEVEL_NUMBER_88:
      case Cobol85Parser::INTEGERLITERAL:
      case Cobol85Parser::IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(3502);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Cobol85Parser::OPTIONAL) {
          setState(3501);
          match(Cobol85Parser::OPTIONAL);
        }
        setState(3506);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 451, _ctx)) {
        case 1: {
          setState(3504);
          identifier();
          break;
        }

        case 2: {
          setState(3505);
          fileName();
          break;
        }

        default:
          break;
        }
        break;
      }

      case Cobol85Parser::ANY: {
        enterOuterAlt(_localctx, 2);
        setState(3508);
        match(Cobol85Parser::ANY);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProcedureDivisionByValuePhraseContext ------------------------------------------------------------------

Cobol85Parser::ProcedureDivisionByValuePhraseContext::ProcedureDivisionByValuePhraseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ProcedureDivisionByValuePhraseContext::VALUE() {
  return getToken(Cobol85Parser::VALUE, 0);
}

tree::TerminalNode* Cobol85Parser::ProcedureDivisionByValuePhraseContext::BY() {
  return getToken(Cobol85Parser::BY, 0);
}

std::vector<Cobol85Parser::ProcedureDivisionByValueContext *> Cobol85Parser::ProcedureDivisionByValuePhraseContext::procedureDivisionByValue() {
  return getRuleContexts<Cobol85Parser::ProcedureDivisionByValueContext>();
}

Cobol85Parser::ProcedureDivisionByValueContext* Cobol85Parser::ProcedureDivisionByValuePhraseContext::procedureDivisionByValue(size_t i) {
  return getRuleContext<Cobol85Parser::ProcedureDivisionByValueContext>(i);
}


size_t Cobol85Parser::ProcedureDivisionByValuePhraseContext::getRuleIndex() const {
  return Cobol85Parser::RuleProcedureDivisionByValuePhrase;
}

void Cobol85Parser::ProcedureDivisionByValuePhraseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProcedureDivisionByValuePhrase(this);
}

void Cobol85Parser::ProcedureDivisionByValuePhraseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProcedureDivisionByValuePhrase(this);
}

Cobol85Parser::ProcedureDivisionByValuePhraseContext* Cobol85Parser::procedureDivisionByValuePhrase() {
  ProcedureDivisionByValuePhraseContext *_localctx = _tracker.createInstance<ProcedureDivisionByValuePhraseContext>(_ctx, getState());
  enterRule(_localctx, 516, Cobol85Parser::RuleProcedureDivisionByValuePhrase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3512);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::BY) {
      setState(3511);
      match(Cobol85Parser::BY);
    }
    setState(3514);
    match(Cobol85Parser::VALUE);
    setState(3516); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(3515);
              procedureDivisionByValue();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(3518); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 454, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProcedureDivisionByValueContext ------------------------------------------------------------------

Cobol85Parser::ProcedureDivisionByValueContext::ProcedureDivisionByValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::IdentifierContext* Cobol85Parser::ProcedureDivisionByValueContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

Cobol85Parser::LiteralContext* Cobol85Parser::ProcedureDivisionByValueContext::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}

tree::TerminalNode* Cobol85Parser::ProcedureDivisionByValueContext::ANY() {
  return getToken(Cobol85Parser::ANY, 0);
}


size_t Cobol85Parser::ProcedureDivisionByValueContext::getRuleIndex() const {
  return Cobol85Parser::RuleProcedureDivisionByValue;
}

void Cobol85Parser::ProcedureDivisionByValueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProcedureDivisionByValue(this);
}

void Cobol85Parser::ProcedureDivisionByValueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProcedureDivisionByValue(this);
}

Cobol85Parser::ProcedureDivisionByValueContext* Cobol85Parser::procedureDivisionByValue() {
  ProcedureDivisionByValueContext *_localctx = _tracker.createInstance<ProcedureDivisionByValueContext>(_ctx, getState());
  enterRule(_localctx, 518, Cobol85Parser::RuleProcedureDivisionByValue);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3523);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 455, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3520);
      identifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3521);
      literal();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3522);
      match(Cobol85Parser::ANY);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProcedureDeclarativesContext ------------------------------------------------------------------

Cobol85Parser::ProcedureDeclarativesContext::ProcedureDeclarativesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> Cobol85Parser::ProcedureDeclarativesContext::DECLARATIVES() {
  return getTokens(Cobol85Parser::DECLARATIVES);
}

tree::TerminalNode* Cobol85Parser::ProcedureDeclarativesContext::DECLARATIVES(size_t i) {
  return getToken(Cobol85Parser::DECLARATIVES, i);
}

std::vector<tree::TerminalNode *> Cobol85Parser::ProcedureDeclarativesContext::DOT_FS() {
  return getTokens(Cobol85Parser::DOT_FS);
}

tree::TerminalNode* Cobol85Parser::ProcedureDeclarativesContext::DOT_FS(size_t i) {
  return getToken(Cobol85Parser::DOT_FS, i);
}

tree::TerminalNode* Cobol85Parser::ProcedureDeclarativesContext::END() {
  return getToken(Cobol85Parser::END, 0);
}

std::vector<Cobol85Parser::ProcedureDeclarativeContext *> Cobol85Parser::ProcedureDeclarativesContext::procedureDeclarative() {
  return getRuleContexts<Cobol85Parser::ProcedureDeclarativeContext>();
}

Cobol85Parser::ProcedureDeclarativeContext* Cobol85Parser::ProcedureDeclarativesContext::procedureDeclarative(size_t i) {
  return getRuleContext<Cobol85Parser::ProcedureDeclarativeContext>(i);
}


size_t Cobol85Parser::ProcedureDeclarativesContext::getRuleIndex() const {
  return Cobol85Parser::RuleProcedureDeclaratives;
}

void Cobol85Parser::ProcedureDeclarativesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProcedureDeclaratives(this);
}

void Cobol85Parser::ProcedureDeclarativesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProcedureDeclaratives(this);
}

Cobol85Parser::ProcedureDeclarativesContext* Cobol85Parser::procedureDeclaratives() {
  ProcedureDeclarativesContext *_localctx = _tracker.createInstance<ProcedureDeclarativesContext>(_ctx, getState());
  enterRule(_localctx, 520, Cobol85Parser::RuleProcedureDeclaratives);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3525);
    match(Cobol85Parser::DECLARATIVES);
    setState(3526);
    match(Cobol85Parser::DOT_FS);
    setState(3528); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(3527);
      procedureDeclarative();
      setState(3530); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3512999431135821826) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 8070451912006173187) != 0) || ((((_la - 138) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 138)) & 5276573893883339531) != 0) || ((((_la - 202) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 202)) & -3098194965423761407) != 0) || ((((_la - 268) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 268)) & -9202532752178970507) != 0) || ((((_la - 336) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 336)) & 4647874433930428483) != 0) || ((((_la - 401) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 401)) & 84826144769) != 0) || ((((_la - 466) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 466)) & 103635575018455169) != 0) || ((((_la - 552) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 552)) & 47) != 0));
    setState(3532);
    match(Cobol85Parser::END);
    setState(3533);
    match(Cobol85Parser::DECLARATIVES);
    setState(3534);
    match(Cobol85Parser::DOT_FS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProcedureDeclarativeContext ------------------------------------------------------------------

Cobol85Parser::ProcedureDeclarativeContext::ProcedureDeclarativeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::ProcedureSectionHeaderContext* Cobol85Parser::ProcedureDeclarativeContext::procedureSectionHeader() {
  return getRuleContext<Cobol85Parser::ProcedureSectionHeaderContext>(0);
}

std::vector<tree::TerminalNode *> Cobol85Parser::ProcedureDeclarativeContext::DOT_FS() {
  return getTokens(Cobol85Parser::DOT_FS);
}

tree::TerminalNode* Cobol85Parser::ProcedureDeclarativeContext::DOT_FS(size_t i) {
  return getToken(Cobol85Parser::DOT_FS, i);
}

Cobol85Parser::UseStatementContext* Cobol85Parser::ProcedureDeclarativeContext::useStatement() {
  return getRuleContext<Cobol85Parser::UseStatementContext>(0);
}

Cobol85Parser::ParagraphsContext* Cobol85Parser::ProcedureDeclarativeContext::paragraphs() {
  return getRuleContext<Cobol85Parser::ParagraphsContext>(0);
}


size_t Cobol85Parser::ProcedureDeclarativeContext::getRuleIndex() const {
  return Cobol85Parser::RuleProcedureDeclarative;
}

void Cobol85Parser::ProcedureDeclarativeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProcedureDeclarative(this);
}

void Cobol85Parser::ProcedureDeclarativeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProcedureDeclarative(this);
}

Cobol85Parser::ProcedureDeclarativeContext* Cobol85Parser::procedureDeclarative() {
  ProcedureDeclarativeContext *_localctx = _tracker.createInstance<ProcedureDeclarativeContext>(_ctx, getState());
  enterRule(_localctx, 522, Cobol85Parser::RuleProcedureDeclarative);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3536);
    procedureSectionHeader();
    setState(3537);
    match(Cobol85Parser::DOT_FS);
    setState(3538);
    useStatement();
    setState(3539);
    match(Cobol85Parser::DOT_FS);
    setState(3540);
    paragraphs();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProcedureSectionHeaderContext ------------------------------------------------------------------

Cobol85Parser::ProcedureSectionHeaderContext::ProcedureSectionHeaderContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::SectionNameContext* Cobol85Parser::ProcedureSectionHeaderContext::sectionName() {
  return getRuleContext<Cobol85Parser::SectionNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::ProcedureSectionHeaderContext::SECTION() {
  return getToken(Cobol85Parser::SECTION, 0);
}

Cobol85Parser::IntegerLiteralContext* Cobol85Parser::ProcedureSectionHeaderContext::integerLiteral() {
  return getRuleContext<Cobol85Parser::IntegerLiteralContext>(0);
}


size_t Cobol85Parser::ProcedureSectionHeaderContext::getRuleIndex() const {
  return Cobol85Parser::RuleProcedureSectionHeader;
}

void Cobol85Parser::ProcedureSectionHeaderContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProcedureSectionHeader(this);
}

void Cobol85Parser::ProcedureSectionHeaderContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProcedureSectionHeader(this);
}

Cobol85Parser::ProcedureSectionHeaderContext* Cobol85Parser::procedureSectionHeader() {
  ProcedureSectionHeaderContext *_localctx = _tracker.createInstance<ProcedureSectionHeaderContext>(_ctx, getState());
  enterRule(_localctx, 524, Cobol85Parser::RuleProcedureSectionHeader);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3542);
    sectionName();
    setState(3543);
    match(Cobol85Parser::SECTION);
    setState(3545);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 552) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 552)) & 15) != 0)) {
      setState(3544);
      integerLiteral();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProcedureDivisionBodyContext ------------------------------------------------------------------

Cobol85Parser::ProcedureDivisionBodyContext::ProcedureDivisionBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::ParagraphsContext* Cobol85Parser::ProcedureDivisionBodyContext::paragraphs() {
  return getRuleContext<Cobol85Parser::ParagraphsContext>(0);
}

std::vector<Cobol85Parser::ProcedureSectionContext *> Cobol85Parser::ProcedureDivisionBodyContext::procedureSection() {
  return getRuleContexts<Cobol85Parser::ProcedureSectionContext>();
}

Cobol85Parser::ProcedureSectionContext* Cobol85Parser::ProcedureDivisionBodyContext::procedureSection(size_t i) {
  return getRuleContext<Cobol85Parser::ProcedureSectionContext>(i);
}


size_t Cobol85Parser::ProcedureDivisionBodyContext::getRuleIndex() const {
  return Cobol85Parser::RuleProcedureDivisionBody;
}

void Cobol85Parser::ProcedureDivisionBodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProcedureDivisionBody(this);
}

void Cobol85Parser::ProcedureDivisionBodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProcedureDivisionBody(this);
}

Cobol85Parser::ProcedureDivisionBodyContext* Cobol85Parser::procedureDivisionBody() {
  ProcedureDivisionBodyContext *_localctx = _tracker.createInstance<ProcedureDivisionBodyContext>(_ctx, getState());
  enterRule(_localctx, 526, Cobol85Parser::RuleProcedureDivisionBody);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3547);
    paragraphs();
    setState(3551);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3512999431135821826) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 8070451912006173187) != 0) || ((((_la - 138) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 138)) & 5276573893883339531) != 0) || ((((_la - 202) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 202)) & -3098194965423761407) != 0) || ((((_la - 268) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 268)) & -9202532752178970507) != 0) || ((((_la - 336) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 336)) & 4647874433930428483) != 0) || ((((_la - 401) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 401)) & 84826144769) != 0) || ((((_la - 466) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 466)) & 103635575018455169) != 0) || ((((_la - 552) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 552)) & 47) != 0)) {
      setState(3548);
      procedureSection();
      setState(3553);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProcedureSectionContext ------------------------------------------------------------------

Cobol85Parser::ProcedureSectionContext::ProcedureSectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::ProcedureSectionHeaderContext* Cobol85Parser::ProcedureSectionContext::procedureSectionHeader() {
  return getRuleContext<Cobol85Parser::ProcedureSectionHeaderContext>(0);
}

tree::TerminalNode* Cobol85Parser::ProcedureSectionContext::DOT_FS() {
  return getToken(Cobol85Parser::DOT_FS, 0);
}

Cobol85Parser::ParagraphsContext* Cobol85Parser::ProcedureSectionContext::paragraphs() {
  return getRuleContext<Cobol85Parser::ParagraphsContext>(0);
}


size_t Cobol85Parser::ProcedureSectionContext::getRuleIndex() const {
  return Cobol85Parser::RuleProcedureSection;
}

void Cobol85Parser::ProcedureSectionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProcedureSection(this);
}

void Cobol85Parser::ProcedureSectionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProcedureSection(this);
}

Cobol85Parser::ProcedureSectionContext* Cobol85Parser::procedureSection() {
  ProcedureSectionContext *_localctx = _tracker.createInstance<ProcedureSectionContext>(_ctx, getState());
  enterRule(_localctx, 528, Cobol85Parser::RuleProcedureSection);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3554);
    procedureSectionHeader();
    setState(3555);
    match(Cobol85Parser::DOT_FS);
    setState(3556);
    paragraphs();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParagraphsContext ------------------------------------------------------------------

Cobol85Parser::ParagraphsContext::ParagraphsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Cobol85Parser::SentenceContext *> Cobol85Parser::ParagraphsContext::sentence() {
  return getRuleContexts<Cobol85Parser::SentenceContext>();
}

Cobol85Parser::SentenceContext* Cobol85Parser::ParagraphsContext::sentence(size_t i) {
  return getRuleContext<Cobol85Parser::SentenceContext>(i);
}

std::vector<Cobol85Parser::ParagraphContext *> Cobol85Parser::ParagraphsContext::paragraph() {
  return getRuleContexts<Cobol85Parser::ParagraphContext>();
}

Cobol85Parser::ParagraphContext* Cobol85Parser::ParagraphsContext::paragraph(size_t i) {
  return getRuleContext<Cobol85Parser::ParagraphContext>(i);
}


size_t Cobol85Parser::ParagraphsContext::getRuleIndex() const {
  return Cobol85Parser::RuleParagraphs;
}

void Cobol85Parser::ParagraphsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParagraphs(this);
}

void Cobol85Parser::ParagraphsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParagraphs(this);
}

Cobol85Parser::ParagraphsContext* Cobol85Parser::paragraphs() {
  ParagraphsContext *_localctx = _tracker.createInstance<ParagraphsContext>(_ctx, getState());
  enterRule(_localctx, 530, Cobol85Parser::RuleParagraphs);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3561);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 13510798882242580) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 67)) & 570425345) != 0) || ((((_la - 131) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 131)) & 4613937818308192769) != 0) || ((((_la - 198) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 198)) & 1337281096974339) != 0) || ((((_la - 294) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 294)) & 562958543356225) != 0) || ((((_la - 365) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 365)) & 1161937774836712961) != 0) || ((((_la - 430) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 430)) & 70378206528513) != 0) || ((((_la - 500) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 500)) & 4035225283303964673) != 0)) {
      setState(3558);
      sentence();
      setState(3563);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(3567);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 460, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(3564);
        paragraph(); 
      }
      setState(3569);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 460, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParagraphContext ------------------------------------------------------------------

Cobol85Parser::ParagraphContext::ParagraphContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::ParagraphNameContext* Cobol85Parser::ParagraphContext::paragraphName() {
  return getRuleContext<Cobol85Parser::ParagraphNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::ParagraphContext::DOT_FS() {
  return getToken(Cobol85Parser::DOT_FS, 0);
}

Cobol85Parser::AlteredGoToContext* Cobol85Parser::ParagraphContext::alteredGoTo() {
  return getRuleContext<Cobol85Parser::AlteredGoToContext>(0);
}

std::vector<Cobol85Parser::SentenceContext *> Cobol85Parser::ParagraphContext::sentence() {
  return getRuleContexts<Cobol85Parser::SentenceContext>();
}

Cobol85Parser::SentenceContext* Cobol85Parser::ParagraphContext::sentence(size_t i) {
  return getRuleContext<Cobol85Parser::SentenceContext>(i);
}


size_t Cobol85Parser::ParagraphContext::getRuleIndex() const {
  return Cobol85Parser::RuleParagraph;
}

void Cobol85Parser::ParagraphContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParagraph(this);
}

void Cobol85Parser::ParagraphContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParagraph(this);
}

Cobol85Parser::ParagraphContext* Cobol85Parser::paragraph() {
  ParagraphContext *_localctx = _tracker.createInstance<ParagraphContext>(_ctx, getState());
  enterRule(_localctx, 532, Cobol85Parser::RuleParagraph);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3570);
    paragraphName();
    setState(3571);
    match(Cobol85Parser::DOT_FS);
    setState(3579);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 462, _ctx)) {
    case 1: {
      setState(3572);
      alteredGoTo();
      break;
    }

    case 2: {
      setState(3576);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 13510798882242580) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 67)) & 570425345) != 0) || ((((_la - 131) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 131)) & 4613937818308192769) != 0) || ((((_la - 198) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 198)) & 1337281096974339) != 0) || ((((_la - 294) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 294)) & 562958543356225) != 0) || ((((_la - 365) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 365)) & 1161937774836712961) != 0) || ((((_la - 430) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 430)) & 70378206528513) != 0) || ((((_la - 500) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 500)) & 4035225283303964673) != 0)) {
        setState(3573);
        sentence();
        setState(3578);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SentenceContext ------------------------------------------------------------------

Cobol85Parser::SentenceContext::SentenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::SentenceContext::DOT_FS() {
  return getToken(Cobol85Parser::DOT_FS, 0);
}

std::vector<Cobol85Parser::StatementContext *> Cobol85Parser::SentenceContext::statement() {
  return getRuleContexts<Cobol85Parser::StatementContext>();
}

Cobol85Parser::StatementContext* Cobol85Parser::SentenceContext::statement(size_t i) {
  return getRuleContext<Cobol85Parser::StatementContext>(i);
}


size_t Cobol85Parser::SentenceContext::getRuleIndex() const {
  return Cobol85Parser::RuleSentence;
}

void Cobol85Parser::SentenceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSentence(this);
}

void Cobol85Parser::SentenceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSentence(this);
}

Cobol85Parser::SentenceContext* Cobol85Parser::sentence() {
  SentenceContext *_localctx = _tracker.createInstance<SentenceContext>(_ctx, getState());
  enterRule(_localctx, 534, Cobol85Parser::RuleSentence);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3584);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 13510798882242580) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 67)) & 570425345) != 0) || ((((_la - 131) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 131)) & 4613937818308192769) != 0) || ((((_la - 198) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 198)) & 1337281096974339) != 0) || ((((_la - 294) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 294)) & 562958543356225) != 0) || ((((_la - 365) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 365)) & 1161937774836712961) != 0) || ((((_la - 430) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 430)) & 70378206528513) != 0) || ((((_la - 500) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 500)) & 4035225266124095489) != 0)) {
      setState(3581);
      statement();
      setState(3586);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(3587);
    match(Cobol85Parser::DOT_FS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementContext ------------------------------------------------------------------

Cobol85Parser::StatementContext::StatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::AcceptStatementContext* Cobol85Parser::StatementContext::acceptStatement() {
  return getRuleContext<Cobol85Parser::AcceptStatementContext>(0);
}

Cobol85Parser::AddStatementContext* Cobol85Parser::StatementContext::addStatement() {
  return getRuleContext<Cobol85Parser::AddStatementContext>(0);
}

Cobol85Parser::AlterStatementContext* Cobol85Parser::StatementContext::alterStatement() {
  return getRuleContext<Cobol85Parser::AlterStatementContext>(0);
}

Cobol85Parser::CallStatementContext* Cobol85Parser::StatementContext::callStatement() {
  return getRuleContext<Cobol85Parser::CallStatementContext>(0);
}

Cobol85Parser::CancelStatementContext* Cobol85Parser::StatementContext::cancelStatement() {
  return getRuleContext<Cobol85Parser::CancelStatementContext>(0);
}

Cobol85Parser::CloseStatementContext* Cobol85Parser::StatementContext::closeStatement() {
  return getRuleContext<Cobol85Parser::CloseStatementContext>(0);
}

Cobol85Parser::ComputeStatementContext* Cobol85Parser::StatementContext::computeStatement() {
  return getRuleContext<Cobol85Parser::ComputeStatementContext>(0);
}

Cobol85Parser::ContinueStatementContext* Cobol85Parser::StatementContext::continueStatement() {
  return getRuleContext<Cobol85Parser::ContinueStatementContext>(0);
}

Cobol85Parser::DeleteStatementContext* Cobol85Parser::StatementContext::deleteStatement() {
  return getRuleContext<Cobol85Parser::DeleteStatementContext>(0);
}

Cobol85Parser::DisableStatementContext* Cobol85Parser::StatementContext::disableStatement() {
  return getRuleContext<Cobol85Parser::DisableStatementContext>(0);
}

Cobol85Parser::DisplayStatementContext* Cobol85Parser::StatementContext::displayStatement() {
  return getRuleContext<Cobol85Parser::DisplayStatementContext>(0);
}

Cobol85Parser::DivideStatementContext* Cobol85Parser::StatementContext::divideStatement() {
  return getRuleContext<Cobol85Parser::DivideStatementContext>(0);
}

Cobol85Parser::EnableStatementContext* Cobol85Parser::StatementContext::enableStatement() {
  return getRuleContext<Cobol85Parser::EnableStatementContext>(0);
}

Cobol85Parser::EntryStatementContext* Cobol85Parser::StatementContext::entryStatement() {
  return getRuleContext<Cobol85Parser::EntryStatementContext>(0);
}

Cobol85Parser::EvaluateStatementContext* Cobol85Parser::StatementContext::evaluateStatement() {
  return getRuleContext<Cobol85Parser::EvaluateStatementContext>(0);
}

Cobol85Parser::ExhibitStatementContext* Cobol85Parser::StatementContext::exhibitStatement() {
  return getRuleContext<Cobol85Parser::ExhibitStatementContext>(0);
}

Cobol85Parser::ExecCicsStatementContext* Cobol85Parser::StatementContext::execCicsStatement() {
  return getRuleContext<Cobol85Parser::ExecCicsStatementContext>(0);
}

Cobol85Parser::ExecSqlStatementContext* Cobol85Parser::StatementContext::execSqlStatement() {
  return getRuleContext<Cobol85Parser::ExecSqlStatementContext>(0);
}

Cobol85Parser::ExecSqlImsStatementContext* Cobol85Parser::StatementContext::execSqlImsStatement() {
  return getRuleContext<Cobol85Parser::ExecSqlImsStatementContext>(0);
}

Cobol85Parser::ExitStatementContext* Cobol85Parser::StatementContext::exitStatement() {
  return getRuleContext<Cobol85Parser::ExitStatementContext>(0);
}

Cobol85Parser::GenerateStatementContext* Cobol85Parser::StatementContext::generateStatement() {
  return getRuleContext<Cobol85Parser::GenerateStatementContext>(0);
}

Cobol85Parser::GobackStatementContext* Cobol85Parser::StatementContext::gobackStatement() {
  return getRuleContext<Cobol85Parser::GobackStatementContext>(0);
}

Cobol85Parser::GoToStatementContext* Cobol85Parser::StatementContext::goToStatement() {
  return getRuleContext<Cobol85Parser::GoToStatementContext>(0);
}

Cobol85Parser::IfStatementContext* Cobol85Parser::StatementContext::ifStatement() {
  return getRuleContext<Cobol85Parser::IfStatementContext>(0);
}

Cobol85Parser::InitializeStatementContext* Cobol85Parser::StatementContext::initializeStatement() {
  return getRuleContext<Cobol85Parser::InitializeStatementContext>(0);
}

Cobol85Parser::InitiateStatementContext* Cobol85Parser::StatementContext::initiateStatement() {
  return getRuleContext<Cobol85Parser::InitiateStatementContext>(0);
}

Cobol85Parser::InspectStatementContext* Cobol85Parser::StatementContext::inspectStatement() {
  return getRuleContext<Cobol85Parser::InspectStatementContext>(0);
}

Cobol85Parser::MergeStatementContext* Cobol85Parser::StatementContext::mergeStatement() {
  return getRuleContext<Cobol85Parser::MergeStatementContext>(0);
}

Cobol85Parser::MoveStatementContext* Cobol85Parser::StatementContext::moveStatement() {
  return getRuleContext<Cobol85Parser::MoveStatementContext>(0);
}

Cobol85Parser::MultiplyStatementContext* Cobol85Parser::StatementContext::multiplyStatement() {
  return getRuleContext<Cobol85Parser::MultiplyStatementContext>(0);
}

Cobol85Parser::OpenStatementContext* Cobol85Parser::StatementContext::openStatement() {
  return getRuleContext<Cobol85Parser::OpenStatementContext>(0);
}

Cobol85Parser::PerformStatementContext* Cobol85Parser::StatementContext::performStatement() {
  return getRuleContext<Cobol85Parser::PerformStatementContext>(0);
}

Cobol85Parser::PurgeStatementContext* Cobol85Parser::StatementContext::purgeStatement() {
  return getRuleContext<Cobol85Parser::PurgeStatementContext>(0);
}

Cobol85Parser::ReadStatementContext* Cobol85Parser::StatementContext::readStatement() {
  return getRuleContext<Cobol85Parser::ReadStatementContext>(0);
}

Cobol85Parser::ReceiveStatementContext* Cobol85Parser::StatementContext::receiveStatement() {
  return getRuleContext<Cobol85Parser::ReceiveStatementContext>(0);
}

Cobol85Parser::ReleaseStatementContext* Cobol85Parser::StatementContext::releaseStatement() {
  return getRuleContext<Cobol85Parser::ReleaseStatementContext>(0);
}

Cobol85Parser::ReturnStatementContext* Cobol85Parser::StatementContext::returnStatement() {
  return getRuleContext<Cobol85Parser::ReturnStatementContext>(0);
}

Cobol85Parser::RewriteStatementContext* Cobol85Parser::StatementContext::rewriteStatement() {
  return getRuleContext<Cobol85Parser::RewriteStatementContext>(0);
}

Cobol85Parser::SearchStatementContext* Cobol85Parser::StatementContext::searchStatement() {
  return getRuleContext<Cobol85Parser::SearchStatementContext>(0);
}

Cobol85Parser::SendStatementContext* Cobol85Parser::StatementContext::sendStatement() {
  return getRuleContext<Cobol85Parser::SendStatementContext>(0);
}

Cobol85Parser::SetStatementContext* Cobol85Parser::StatementContext::setStatement() {
  return getRuleContext<Cobol85Parser::SetStatementContext>(0);
}

Cobol85Parser::SortStatementContext* Cobol85Parser::StatementContext::sortStatement() {
  return getRuleContext<Cobol85Parser::SortStatementContext>(0);
}

Cobol85Parser::StartStatementContext* Cobol85Parser::StatementContext::startStatement() {
  return getRuleContext<Cobol85Parser::StartStatementContext>(0);
}

Cobol85Parser::StopStatementContext* Cobol85Parser::StatementContext::stopStatement() {
  return getRuleContext<Cobol85Parser::StopStatementContext>(0);
}

Cobol85Parser::StringStatementContext* Cobol85Parser::StatementContext::stringStatement() {
  return getRuleContext<Cobol85Parser::StringStatementContext>(0);
}

Cobol85Parser::SubtractStatementContext* Cobol85Parser::StatementContext::subtractStatement() {
  return getRuleContext<Cobol85Parser::SubtractStatementContext>(0);
}

Cobol85Parser::TerminateStatementContext* Cobol85Parser::StatementContext::terminateStatement() {
  return getRuleContext<Cobol85Parser::TerminateStatementContext>(0);
}

Cobol85Parser::UnstringStatementContext* Cobol85Parser::StatementContext::unstringStatement() {
  return getRuleContext<Cobol85Parser::UnstringStatementContext>(0);
}

Cobol85Parser::WriteStatementContext* Cobol85Parser::StatementContext::writeStatement() {
  return getRuleContext<Cobol85Parser::WriteStatementContext>(0);
}


size_t Cobol85Parser::StatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleStatement;
}

void Cobol85Parser::StatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatement(this);
}

void Cobol85Parser::StatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatement(this);
}

Cobol85Parser::StatementContext* Cobol85Parser::statement() {
  StatementContext *_localctx = _tracker.createInstance<StatementContext>(_ctx, getState());
  enterRule(_localctx, 536, Cobol85Parser::RuleStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3638);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Cobol85Parser::ACCEPT: {
        enterOuterAlt(_localctx, 1);
        setState(3589);
        acceptStatement();
        break;
      }

      case Cobol85Parser::ADD: {
        enterOuterAlt(_localctx, 2);
        setState(3590);
        addStatement();
        break;
      }

      case Cobol85Parser::ALTER: {
        enterOuterAlt(_localctx, 3);
        setState(3591);
        alterStatement();
        break;
      }

      case Cobol85Parser::CALL: {
        enterOuterAlt(_localctx, 4);
        setState(3592);
        callStatement();
        break;
      }

      case Cobol85Parser::CANCEL: {
        enterOuterAlt(_localctx, 5);
        setState(3593);
        cancelStatement();
        break;
      }

      case Cobol85Parser::CLOSE: {
        enterOuterAlt(_localctx, 6);
        setState(3594);
        closeStatement();
        break;
      }

      case Cobol85Parser::COMPUTE: {
        enterOuterAlt(_localctx, 7);
        setState(3595);
        computeStatement();
        break;
      }

      case Cobol85Parser::CONTINUE: {
        enterOuterAlt(_localctx, 8);
        setState(3596);
        continueStatement();
        break;
      }

      case Cobol85Parser::DELETE: {
        enterOuterAlt(_localctx, 9);
        setState(3597);
        deleteStatement();
        break;
      }

      case Cobol85Parser::DISABLE: {
        enterOuterAlt(_localctx, 10);
        setState(3598);
        disableStatement();
        break;
      }

      case Cobol85Parser::DISPLAY: {
        enterOuterAlt(_localctx, 11);
        setState(3599);
        displayStatement();
        break;
      }

      case Cobol85Parser::DIVIDE: {
        enterOuterAlt(_localctx, 12);
        setState(3600);
        divideStatement();
        break;
      }

      case Cobol85Parser::ENABLE: {
        enterOuterAlt(_localctx, 13);
        setState(3601);
        enableStatement();
        break;
      }

      case Cobol85Parser::ENTRY: {
        enterOuterAlt(_localctx, 14);
        setState(3602);
        entryStatement();
        break;
      }

      case Cobol85Parser::EVALUATE: {
        enterOuterAlt(_localctx, 15);
        setState(3603);
        evaluateStatement();
        break;
      }

      case Cobol85Parser::EXHIBIT: {
        enterOuterAlt(_localctx, 16);
        setState(3604);
        exhibitStatement();
        break;
      }

      case Cobol85Parser::EXECCICSLINE: {
        enterOuterAlt(_localctx, 17);
        setState(3605);
        execCicsStatement();
        break;
      }

      case Cobol85Parser::EXECSQLLINE: {
        enterOuterAlt(_localctx, 18);
        setState(3606);
        execSqlStatement();
        break;
      }

      case Cobol85Parser::EXECSQLIMSLINE: {
        enterOuterAlt(_localctx, 19);
        setState(3607);
        execSqlImsStatement();
        break;
      }

      case Cobol85Parser::EXIT: {
        enterOuterAlt(_localctx, 20);
        setState(3608);
        exitStatement();
        break;
      }

      case Cobol85Parser::GENERATE: {
        enterOuterAlt(_localctx, 21);
        setState(3609);
        generateStatement();
        break;
      }

      case Cobol85Parser::GOBACK: {
        enterOuterAlt(_localctx, 22);
        setState(3610);
        gobackStatement();
        break;
      }

      case Cobol85Parser::GO: {
        enterOuterAlt(_localctx, 23);
        setState(3611);
        goToStatement();
        break;
      }

      case Cobol85Parser::IF: {
        enterOuterAlt(_localctx, 24);
        setState(3612);
        ifStatement();
        break;
      }

      case Cobol85Parser::INITIALIZE: {
        enterOuterAlt(_localctx, 25);
        setState(3613);
        initializeStatement();
        break;
      }

      case Cobol85Parser::INITIATE: {
        enterOuterAlt(_localctx, 26);
        setState(3614);
        initiateStatement();
        break;
      }

      case Cobol85Parser::INSPECT: {
        enterOuterAlt(_localctx, 27);
        setState(3615);
        inspectStatement();
        break;
      }

      case Cobol85Parser::MERGE: {
        enterOuterAlt(_localctx, 28);
        setState(3616);
        mergeStatement();
        break;
      }

      case Cobol85Parser::MOVE: {
        enterOuterAlt(_localctx, 29);
        setState(3617);
        moveStatement();
        break;
      }

      case Cobol85Parser::MULTIPLY: {
        enterOuterAlt(_localctx, 30);
        setState(3618);
        multiplyStatement();
        break;
      }

      case Cobol85Parser::OPEN: {
        enterOuterAlt(_localctx, 31);
        setState(3619);
        openStatement();
        break;
      }

      case Cobol85Parser::PERFORM: {
        enterOuterAlt(_localctx, 32);
        setState(3620);
        performStatement();
        break;
      }

      case Cobol85Parser::PURGE: {
        enterOuterAlt(_localctx, 33);
        setState(3621);
        purgeStatement();
        break;
      }

      case Cobol85Parser::READ: {
        enterOuterAlt(_localctx, 34);
        setState(3622);
        readStatement();
        break;
      }

      case Cobol85Parser::RECEIVE: {
        enterOuterAlt(_localctx, 35);
        setState(3623);
        receiveStatement();
        break;
      }

      case Cobol85Parser::RELEASE: {
        enterOuterAlt(_localctx, 36);
        setState(3624);
        releaseStatement();
        break;
      }

      case Cobol85Parser::RETURN: {
        enterOuterAlt(_localctx, 37);
        setState(3625);
        returnStatement();
        break;
      }

      case Cobol85Parser::REWRITE: {
        enterOuterAlt(_localctx, 38);
        setState(3626);
        rewriteStatement();
        break;
      }

      case Cobol85Parser::SEARCH: {
        enterOuterAlt(_localctx, 39);
        setState(3627);
        searchStatement();
        break;
      }

      case Cobol85Parser::SEND: {
        enterOuterAlt(_localctx, 40);
        setState(3628);
        sendStatement();
        break;
      }

      case Cobol85Parser::SET: {
        enterOuterAlt(_localctx, 41);
        setState(3629);
        setStatement();
        break;
      }

      case Cobol85Parser::SORT: {
        enterOuterAlt(_localctx, 42);
        setState(3630);
        sortStatement();
        break;
      }

      case Cobol85Parser::START: {
        enterOuterAlt(_localctx, 43);
        setState(3631);
        startStatement();
        break;
      }

      case Cobol85Parser::STOP: {
        enterOuterAlt(_localctx, 44);
        setState(3632);
        stopStatement();
        break;
      }

      case Cobol85Parser::STRING: {
        enterOuterAlt(_localctx, 45);
        setState(3633);
        stringStatement();
        break;
      }

      case Cobol85Parser::SUBTRACT: {
        enterOuterAlt(_localctx, 46);
        setState(3634);
        subtractStatement();
        break;
      }

      case Cobol85Parser::TERMINATE: {
        enterOuterAlt(_localctx, 47);
        setState(3635);
        terminateStatement();
        break;
      }

      case Cobol85Parser::UNSTRING: {
        enterOuterAlt(_localctx, 48);
        setState(3636);
        unstringStatement();
        break;
      }

      case Cobol85Parser::WRITE: {
        enterOuterAlt(_localctx, 49);
        setState(3637);
        writeStatement();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AcceptStatementContext ------------------------------------------------------------------

Cobol85Parser::AcceptStatementContext::AcceptStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::AcceptStatementContext::ACCEPT() {
  return getToken(Cobol85Parser::ACCEPT, 0);
}

Cobol85Parser::IdentifierContext* Cobol85Parser::AcceptStatementContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

Cobol85Parser::AcceptFromDateStatementContext* Cobol85Parser::AcceptStatementContext::acceptFromDateStatement() {
  return getRuleContext<Cobol85Parser::AcceptFromDateStatementContext>(0);
}

Cobol85Parser::AcceptFromEscapeKeyStatementContext* Cobol85Parser::AcceptStatementContext::acceptFromEscapeKeyStatement() {
  return getRuleContext<Cobol85Parser::AcceptFromEscapeKeyStatementContext>(0);
}

Cobol85Parser::AcceptFromMnemonicStatementContext* Cobol85Parser::AcceptStatementContext::acceptFromMnemonicStatement() {
  return getRuleContext<Cobol85Parser::AcceptFromMnemonicStatementContext>(0);
}

Cobol85Parser::AcceptMessageCountStatementContext* Cobol85Parser::AcceptStatementContext::acceptMessageCountStatement() {
  return getRuleContext<Cobol85Parser::AcceptMessageCountStatementContext>(0);
}

Cobol85Parser::OnExceptionClauseContext* Cobol85Parser::AcceptStatementContext::onExceptionClause() {
  return getRuleContext<Cobol85Parser::OnExceptionClauseContext>(0);
}

Cobol85Parser::NotOnExceptionClauseContext* Cobol85Parser::AcceptStatementContext::notOnExceptionClause() {
  return getRuleContext<Cobol85Parser::NotOnExceptionClauseContext>(0);
}

tree::TerminalNode* Cobol85Parser::AcceptStatementContext::END_ACCEPT() {
  return getToken(Cobol85Parser::END_ACCEPT, 0);
}


size_t Cobol85Parser::AcceptStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleAcceptStatement;
}

void Cobol85Parser::AcceptStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAcceptStatement(this);
}

void Cobol85Parser::AcceptStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAcceptStatement(this);
}

Cobol85Parser::AcceptStatementContext* Cobol85Parser::acceptStatement() {
  AcceptStatementContext *_localctx = _tracker.createInstance<AcceptStatementContext>(_ctx, getState());
  enterRule(_localctx, 538, Cobol85Parser::RuleAcceptStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3640);
    match(Cobol85Parser::ACCEPT);
    setState(3641);
    identifier();
    setState(3646);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 465, _ctx)) {
    case 1: {
      setState(3642);
      acceptFromDateStatement();
      break;
    }

    case 2: {
      setState(3643);
      acceptFromEscapeKeyStatement();
      break;
    }

    case 3: {
      setState(3644);
      acceptFromMnemonicStatement();
      break;
    }

    case 4: {
      setState(3645);
      acceptMessageCountStatement();
      break;
    }

    default:
      break;
    }
    setState(3649);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 466, _ctx)) {
    case 1: {
      setState(3648);
      onExceptionClause();
      break;
    }

    default:
      break;
    }
    setState(3652);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 467, _ctx)) {
    case 1: {
      setState(3651);
      notOnExceptionClause();
      break;
    }

    default:
      break;
    }
    setState(3655);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 468, _ctx)) {
    case 1: {
      setState(3654);
      match(Cobol85Parser::END_ACCEPT);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AcceptFromDateStatementContext ------------------------------------------------------------------

Cobol85Parser::AcceptFromDateStatementContext::AcceptFromDateStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::AcceptFromDateStatementContext::FROM() {
  return getToken(Cobol85Parser::FROM, 0);
}

tree::TerminalNode* Cobol85Parser::AcceptFromDateStatementContext::DATE() {
  return getToken(Cobol85Parser::DATE, 0);
}

tree::TerminalNode* Cobol85Parser::AcceptFromDateStatementContext::DAY() {
  return getToken(Cobol85Parser::DAY, 0);
}

tree::TerminalNode* Cobol85Parser::AcceptFromDateStatementContext::DAY_OF_WEEK() {
  return getToken(Cobol85Parser::DAY_OF_WEEK, 0);
}

tree::TerminalNode* Cobol85Parser::AcceptFromDateStatementContext::TIME() {
  return getToken(Cobol85Parser::TIME, 0);
}

tree::TerminalNode* Cobol85Parser::AcceptFromDateStatementContext::TIMER() {
  return getToken(Cobol85Parser::TIMER, 0);
}

tree::TerminalNode* Cobol85Parser::AcceptFromDateStatementContext::TODAYS_DATE() {
  return getToken(Cobol85Parser::TODAYS_DATE, 0);
}

tree::TerminalNode* Cobol85Parser::AcceptFromDateStatementContext::TODAYS_NAME() {
  return getToken(Cobol85Parser::TODAYS_NAME, 0);
}

tree::TerminalNode* Cobol85Parser::AcceptFromDateStatementContext::YEAR() {
  return getToken(Cobol85Parser::YEAR, 0);
}

tree::TerminalNode* Cobol85Parser::AcceptFromDateStatementContext::YYYYMMDD() {
  return getToken(Cobol85Parser::YYYYMMDD, 0);
}

tree::TerminalNode* Cobol85Parser::AcceptFromDateStatementContext::YYYYDDD() {
  return getToken(Cobol85Parser::YYYYDDD, 0);
}

tree::TerminalNode* Cobol85Parser::AcceptFromDateStatementContext::MMDDYYYY() {
  return getToken(Cobol85Parser::MMDDYYYY, 0);
}


size_t Cobol85Parser::AcceptFromDateStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleAcceptFromDateStatement;
}

void Cobol85Parser::AcceptFromDateStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAcceptFromDateStatement(this);
}

void Cobol85Parser::AcceptFromDateStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAcceptFromDateStatement(this);
}

Cobol85Parser::AcceptFromDateStatementContext* Cobol85Parser::acceptFromDateStatement() {
  AcceptFromDateStatementContext *_localctx = _tracker.createInstance<AcceptFromDateStatementContext>(_ctx, getState());
  enterRule(_localctx, 540, Cobol85Parser::RuleAcceptFromDateStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3657);
    match(Cobol85Parser::FROM);
    setState(3677);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Cobol85Parser::DATE: {
        setState(3658);
        match(Cobol85Parser::DATE);
        setState(3660);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Cobol85Parser::YYYYMMDD) {
          setState(3659);
          match(Cobol85Parser::YYYYMMDD);
        }
        break;
      }

      case Cobol85Parser::DAY: {
        setState(3662);
        match(Cobol85Parser::DAY);
        setState(3664);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Cobol85Parser::YYYYDDD) {
          setState(3663);
          match(Cobol85Parser::YYYYDDD);
        }
        break;
      }

      case Cobol85Parser::DAY_OF_WEEK: {
        setState(3666);
        match(Cobol85Parser::DAY_OF_WEEK);
        break;
      }

      case Cobol85Parser::TIME: {
        setState(3667);
        match(Cobol85Parser::TIME);
        break;
      }

      case Cobol85Parser::TIMER: {
        setState(3668);
        match(Cobol85Parser::TIMER);
        break;
      }

      case Cobol85Parser::TODAYS_DATE: {
        setState(3669);
        match(Cobol85Parser::TODAYS_DATE);
        setState(3671);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Cobol85Parser::MMDDYYYY) {
          setState(3670);
          match(Cobol85Parser::MMDDYYYY);
        }
        break;
      }

      case Cobol85Parser::TODAYS_NAME: {
        setState(3673);
        match(Cobol85Parser::TODAYS_NAME);
        break;
      }

      case Cobol85Parser::YEAR: {
        setState(3674);
        match(Cobol85Parser::YEAR);
        break;
      }

      case Cobol85Parser::YYYYMMDD: {
        setState(3675);
        match(Cobol85Parser::YYYYMMDD);
        break;
      }

      case Cobol85Parser::YYYYDDD: {
        setState(3676);
        match(Cobol85Parser::YYYYDDD);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AcceptFromMnemonicStatementContext ------------------------------------------------------------------

Cobol85Parser::AcceptFromMnemonicStatementContext::AcceptFromMnemonicStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::AcceptFromMnemonicStatementContext::FROM() {
  return getToken(Cobol85Parser::FROM, 0);
}

Cobol85Parser::MnemonicNameContext* Cobol85Parser::AcceptFromMnemonicStatementContext::mnemonicName() {
  return getRuleContext<Cobol85Parser::MnemonicNameContext>(0);
}


size_t Cobol85Parser::AcceptFromMnemonicStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleAcceptFromMnemonicStatement;
}

void Cobol85Parser::AcceptFromMnemonicStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAcceptFromMnemonicStatement(this);
}

void Cobol85Parser::AcceptFromMnemonicStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAcceptFromMnemonicStatement(this);
}

Cobol85Parser::AcceptFromMnemonicStatementContext* Cobol85Parser::acceptFromMnemonicStatement() {
  AcceptFromMnemonicStatementContext *_localctx = _tracker.createInstance<AcceptFromMnemonicStatementContext>(_ctx, getState());
  enterRule(_localctx, 542, Cobol85Parser::RuleAcceptFromMnemonicStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3679);
    match(Cobol85Parser::FROM);
    setState(3680);
    mnemonicName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AcceptFromEscapeKeyStatementContext ------------------------------------------------------------------

Cobol85Parser::AcceptFromEscapeKeyStatementContext::AcceptFromEscapeKeyStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::AcceptFromEscapeKeyStatementContext::FROM() {
  return getToken(Cobol85Parser::FROM, 0);
}

tree::TerminalNode* Cobol85Parser::AcceptFromEscapeKeyStatementContext::ESCAPE() {
  return getToken(Cobol85Parser::ESCAPE, 0);
}

tree::TerminalNode* Cobol85Parser::AcceptFromEscapeKeyStatementContext::KEY() {
  return getToken(Cobol85Parser::KEY, 0);
}


size_t Cobol85Parser::AcceptFromEscapeKeyStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleAcceptFromEscapeKeyStatement;
}

void Cobol85Parser::AcceptFromEscapeKeyStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAcceptFromEscapeKeyStatement(this);
}

void Cobol85Parser::AcceptFromEscapeKeyStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAcceptFromEscapeKeyStatement(this);
}

Cobol85Parser::AcceptFromEscapeKeyStatementContext* Cobol85Parser::acceptFromEscapeKeyStatement() {
  AcceptFromEscapeKeyStatementContext *_localctx = _tracker.createInstance<AcceptFromEscapeKeyStatementContext>(_ctx, getState());
  enterRule(_localctx, 544, Cobol85Parser::RuleAcceptFromEscapeKeyStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3682);
    match(Cobol85Parser::FROM);
    setState(3683);
    match(Cobol85Parser::ESCAPE);
    setState(3684);
    match(Cobol85Parser::KEY);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AcceptMessageCountStatementContext ------------------------------------------------------------------

Cobol85Parser::AcceptMessageCountStatementContext::AcceptMessageCountStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::AcceptMessageCountStatementContext::COUNT() {
  return getToken(Cobol85Parser::COUNT, 0);
}

tree::TerminalNode* Cobol85Parser::AcceptMessageCountStatementContext::MESSAGE() {
  return getToken(Cobol85Parser::MESSAGE, 0);
}


size_t Cobol85Parser::AcceptMessageCountStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleAcceptMessageCountStatement;
}

void Cobol85Parser::AcceptMessageCountStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAcceptMessageCountStatement(this);
}

void Cobol85Parser::AcceptMessageCountStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAcceptMessageCountStatement(this);
}

Cobol85Parser::AcceptMessageCountStatementContext* Cobol85Parser::acceptMessageCountStatement() {
  AcceptMessageCountStatementContext *_localctx = _tracker.createInstance<AcceptMessageCountStatementContext>(_ctx, getState());
  enterRule(_localctx, 546, Cobol85Parser::RuleAcceptMessageCountStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3687);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::MESSAGE) {
      setState(3686);
      match(Cobol85Parser::MESSAGE);
    }
    setState(3689);
    match(Cobol85Parser::COUNT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AddStatementContext ------------------------------------------------------------------

Cobol85Parser::AddStatementContext::AddStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::AddStatementContext::ADD() {
  return getToken(Cobol85Parser::ADD, 0);
}

Cobol85Parser::AddToStatementContext* Cobol85Parser::AddStatementContext::addToStatement() {
  return getRuleContext<Cobol85Parser::AddToStatementContext>(0);
}

Cobol85Parser::AddToGivingStatementContext* Cobol85Parser::AddStatementContext::addToGivingStatement() {
  return getRuleContext<Cobol85Parser::AddToGivingStatementContext>(0);
}

Cobol85Parser::AddCorrespondingStatementContext* Cobol85Parser::AddStatementContext::addCorrespondingStatement() {
  return getRuleContext<Cobol85Parser::AddCorrespondingStatementContext>(0);
}

Cobol85Parser::OnSizeErrorPhraseContext* Cobol85Parser::AddStatementContext::onSizeErrorPhrase() {
  return getRuleContext<Cobol85Parser::OnSizeErrorPhraseContext>(0);
}

Cobol85Parser::NotOnSizeErrorPhraseContext* Cobol85Parser::AddStatementContext::notOnSizeErrorPhrase() {
  return getRuleContext<Cobol85Parser::NotOnSizeErrorPhraseContext>(0);
}

tree::TerminalNode* Cobol85Parser::AddStatementContext::END_ADD() {
  return getToken(Cobol85Parser::END_ADD, 0);
}


size_t Cobol85Parser::AddStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleAddStatement;
}

void Cobol85Parser::AddStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAddStatement(this);
}

void Cobol85Parser::AddStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAddStatement(this);
}

Cobol85Parser::AddStatementContext* Cobol85Parser::addStatement() {
  AddStatementContext *_localctx = _tracker.createInstance<AddStatementContext>(_ctx, getState());
  enterRule(_localctx, 548, Cobol85Parser::RuleAddStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3691);
    match(Cobol85Parser::ADD);
    setState(3695);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 474, _ctx)) {
    case 1: {
      setState(3692);
      addToStatement();
      break;
    }

    case 2: {
      setState(3693);
      addToGivingStatement();
      break;
    }

    case 3: {
      setState(3694);
      addCorrespondingStatement();
      break;
    }

    default:
      break;
    }
    setState(3698);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 475, _ctx)) {
    case 1: {
      setState(3697);
      onSizeErrorPhrase();
      break;
    }

    default:
      break;
    }
    setState(3701);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 476, _ctx)) {
    case 1: {
      setState(3700);
      notOnSizeErrorPhrase();
      break;
    }

    default:
      break;
    }
    setState(3704);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 477, _ctx)) {
    case 1: {
      setState(3703);
      match(Cobol85Parser::END_ADD);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AddToStatementContext ------------------------------------------------------------------

Cobol85Parser::AddToStatementContext::AddToStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::AddToStatementContext::TO() {
  return getToken(Cobol85Parser::TO, 0);
}

std::vector<Cobol85Parser::AddFromContext *> Cobol85Parser::AddToStatementContext::addFrom() {
  return getRuleContexts<Cobol85Parser::AddFromContext>();
}

Cobol85Parser::AddFromContext* Cobol85Parser::AddToStatementContext::addFrom(size_t i) {
  return getRuleContext<Cobol85Parser::AddFromContext>(i);
}

std::vector<Cobol85Parser::AddToContext *> Cobol85Parser::AddToStatementContext::addTo() {
  return getRuleContexts<Cobol85Parser::AddToContext>();
}

Cobol85Parser::AddToContext* Cobol85Parser::AddToStatementContext::addTo(size_t i) {
  return getRuleContext<Cobol85Parser::AddToContext>(i);
}


size_t Cobol85Parser::AddToStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleAddToStatement;
}

void Cobol85Parser::AddToStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAddToStatement(this);
}

void Cobol85Parser::AddToStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAddToStatement(this);
}

Cobol85Parser::AddToStatementContext* Cobol85Parser::addToStatement() {
  AddToStatementContext *_localctx = _tracker.createInstance<AddToStatementContext>(_ctx, getState());
  enterRule(_localctx, 550, Cobol85Parser::RuleAddToStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3707); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(3706);
      addFrom();
      setState(3709); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3512999431135822370) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 8213661102500741635) != 0) || ((((_la - 138) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 138)) & 5276573893883339531) != 0) || ((((_la - 202) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 202)) & -3098194964618422267) != 0) || ((((_la - 268) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 268)) & -9202427199037528969) != 0) || ((((_la - 336) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 336)) & 4647874440372879459) != 0) || ((((_la - 401) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 401)) & 1819828109721609) != 0) || ((((_la - 466) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 466)) & 572150674022301857) != 0) || ((((_la - 551) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 551)) & 127) != 0));
    setState(3711);
    match(Cobol85Parser::TO);
    setState(3713); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(3712);
      addTo();
      setState(3715); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3512999431135821858) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 8213661102500741635) != 0) || ((((_la - 138) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 138)) & 5276573893883339531) != 0) || ((((_la - 202) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 202)) & -3098194965423728639) != 0) || ((((_la - 268) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 268)) & -9202532752178961289) != 0) || ((((_la - 336) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 336)) & 4647874433930428515) != 0) || ((((_la - 401) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 401)) & 130978249457673) != 0) || ((((_la - 466) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 466)) & 103776312507334817) != 0) || ((((_la - 552) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 552)) & 47) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AddToGivingStatementContext ------------------------------------------------------------------

Cobol85Parser::AddToGivingStatementContext::AddToGivingStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::AddToGivingStatementContext::GIVING() {
  return getToken(Cobol85Parser::GIVING, 0);
}

std::vector<Cobol85Parser::AddFromContext *> Cobol85Parser::AddToGivingStatementContext::addFrom() {
  return getRuleContexts<Cobol85Parser::AddFromContext>();
}

Cobol85Parser::AddFromContext* Cobol85Parser::AddToGivingStatementContext::addFrom(size_t i) {
  return getRuleContext<Cobol85Parser::AddFromContext>(i);
}

tree::TerminalNode* Cobol85Parser::AddToGivingStatementContext::TO() {
  return getToken(Cobol85Parser::TO, 0);
}

std::vector<Cobol85Parser::AddGivingContext *> Cobol85Parser::AddToGivingStatementContext::addGiving() {
  return getRuleContexts<Cobol85Parser::AddGivingContext>();
}

Cobol85Parser::AddGivingContext* Cobol85Parser::AddToGivingStatementContext::addGiving(size_t i) {
  return getRuleContext<Cobol85Parser::AddGivingContext>(i);
}

std::vector<Cobol85Parser::AddToGivingContext *> Cobol85Parser::AddToGivingStatementContext::addToGiving() {
  return getRuleContexts<Cobol85Parser::AddToGivingContext>();
}

Cobol85Parser::AddToGivingContext* Cobol85Parser::AddToGivingStatementContext::addToGiving(size_t i) {
  return getRuleContext<Cobol85Parser::AddToGivingContext>(i);
}


size_t Cobol85Parser::AddToGivingStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleAddToGivingStatement;
}

void Cobol85Parser::AddToGivingStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAddToGivingStatement(this);
}

void Cobol85Parser::AddToGivingStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAddToGivingStatement(this);
}

Cobol85Parser::AddToGivingStatementContext* Cobol85Parser::addToGivingStatement() {
  AddToGivingStatementContext *_localctx = _tracker.createInstance<AddToGivingStatementContext>(_ctx, getState());
  enterRule(_localctx, 552, Cobol85Parser::RuleAddToGivingStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3718); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(3717);
      addFrom();
      setState(3720); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3512999431135822370) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 8213661102500741635) != 0) || ((((_la - 138) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 138)) & 5276573893883339531) != 0) || ((((_la - 202) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 202)) & -3098194964618422267) != 0) || ((((_la - 268) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 268)) & -9202427199037528969) != 0) || ((((_la - 336) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 336)) & 4647874440372879459) != 0) || ((((_la - 401) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 401)) & 1819828109721609) != 0) || ((((_la - 466) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 466)) & 572150674022301857) != 0) || ((((_la - 551) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 551)) & 127) != 0));
    setState(3728);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::TO) {
      setState(3722);
      match(Cobol85Parser::TO);
      setState(3724); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(3723);
        addToGiving();
        setState(3726); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 3512999431135822370) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 68)) & 8213661102500741635) != 0) || ((((_la - 138) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 138)) & 5276573893883339531) != 0) || ((((_la - 202) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 202)) & -3098194964618422267) != 0) || ((((_la - 268) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 268)) & -9202427199037528969) != 0) || ((((_la - 336) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 336)) & 4647874440372879459) != 0) || ((((_la - 401) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 401)) & 1819828109721609) != 0) || ((((_la - 466) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 466)) & 572150674022301857) != 0) || ((((_la - 551) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 551)) & 127) != 0));
    }
    setState(3730);
    match(Cobol85Parser::GIVING);
    setState(3732); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(3731);
      addGiving();
      setState(3734); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3512999431135821858) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 8213661102500741635) != 0) || ((((_la - 138) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 138)) & 5276573893883339531) != 0) || ((((_la - 202) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 202)) & -3098194965423728639) != 0) || ((((_la - 268) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 268)) & -9202532752178961289) != 0) || ((((_la - 336) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 336)) & 4647874433930428515) != 0) || ((((_la - 401) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 401)) & 130978249457673) != 0) || ((((_la - 466) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 466)) & 103776312507334817) != 0) || ((((_la - 552) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 552)) & 47) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AddCorrespondingStatementContext ------------------------------------------------------------------

Cobol85Parser::AddCorrespondingStatementContext::AddCorrespondingStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::IdentifierContext* Cobol85Parser::AddCorrespondingStatementContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

tree::TerminalNode* Cobol85Parser::AddCorrespondingStatementContext::TO() {
  return getToken(Cobol85Parser::TO, 0);
}

Cobol85Parser::AddToContext* Cobol85Parser::AddCorrespondingStatementContext::addTo() {
  return getRuleContext<Cobol85Parser::AddToContext>(0);
}

tree::TerminalNode* Cobol85Parser::AddCorrespondingStatementContext::CORRESPONDING() {
  return getToken(Cobol85Parser::CORRESPONDING, 0);
}

tree::TerminalNode* Cobol85Parser::AddCorrespondingStatementContext::CORR() {
  return getToken(Cobol85Parser::CORR, 0);
}


size_t Cobol85Parser::AddCorrespondingStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleAddCorrespondingStatement;
}

void Cobol85Parser::AddCorrespondingStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAddCorrespondingStatement(this);
}

void Cobol85Parser::AddCorrespondingStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAddCorrespondingStatement(this);
}

Cobol85Parser::AddCorrespondingStatementContext* Cobol85Parser::addCorrespondingStatement() {
  AddCorrespondingStatementContext *_localctx = _tracker.createInstance<AddCorrespondingStatementContext>(_ctx, getState());
  enterRule(_localctx, 554, Cobol85Parser::RuleAddCorrespondingStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3736);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::CORR

    || _la == Cobol85Parser::CORRESPONDING)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(3737);
    identifier();
    setState(3738);
    match(Cobol85Parser::TO);
    setState(3739);
    addTo();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AddFromContext ------------------------------------------------------------------

Cobol85Parser::AddFromContext::AddFromContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::IdentifierContext* Cobol85Parser::AddFromContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

Cobol85Parser::LiteralContext* Cobol85Parser::AddFromContext::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}


size_t Cobol85Parser::AddFromContext::getRuleIndex() const {
  return Cobol85Parser::RuleAddFrom;
}

void Cobol85Parser::AddFromContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAddFrom(this);
}

void Cobol85Parser::AddFromContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAddFrom(this);
}

Cobol85Parser::AddFromContext* Cobol85Parser::addFrom() {
  AddFromContext *_localctx = _tracker.createInstance<AddFromContext>(_ctx, getState());
  enterRule(_localctx, 556, Cobol85Parser::RuleAddFrom);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3743);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 484, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3741);
      identifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3742);
      literal();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AddToContext ------------------------------------------------------------------

Cobol85Parser::AddToContext::AddToContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::IdentifierContext* Cobol85Parser::AddToContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

tree::TerminalNode* Cobol85Parser::AddToContext::ROUNDED() {
  return getToken(Cobol85Parser::ROUNDED, 0);
}


size_t Cobol85Parser::AddToContext::getRuleIndex() const {
  return Cobol85Parser::RuleAddTo;
}

void Cobol85Parser::AddToContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAddTo(this);
}

void Cobol85Parser::AddToContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAddTo(this);
}

Cobol85Parser::AddToContext* Cobol85Parser::addTo() {
  AddToContext *_localctx = _tracker.createInstance<AddToContext>(_ctx, getState());
  enterRule(_localctx, 558, Cobol85Parser::RuleAddTo);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3745);
    identifier();
    setState(3747);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::ROUNDED) {
      setState(3746);
      match(Cobol85Parser::ROUNDED);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AddToGivingContext ------------------------------------------------------------------

Cobol85Parser::AddToGivingContext::AddToGivingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::IdentifierContext* Cobol85Parser::AddToGivingContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

Cobol85Parser::LiteralContext* Cobol85Parser::AddToGivingContext::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}


size_t Cobol85Parser::AddToGivingContext::getRuleIndex() const {
  return Cobol85Parser::RuleAddToGiving;
}

void Cobol85Parser::AddToGivingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAddToGiving(this);
}

void Cobol85Parser::AddToGivingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAddToGiving(this);
}

Cobol85Parser::AddToGivingContext* Cobol85Parser::addToGiving() {
  AddToGivingContext *_localctx = _tracker.createInstance<AddToGivingContext>(_ctx, getState());
  enterRule(_localctx, 560, Cobol85Parser::RuleAddToGiving);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3751);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 486, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3749);
      identifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3750);
      literal();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AddGivingContext ------------------------------------------------------------------

Cobol85Parser::AddGivingContext::AddGivingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::IdentifierContext* Cobol85Parser::AddGivingContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

tree::TerminalNode* Cobol85Parser::AddGivingContext::ROUNDED() {
  return getToken(Cobol85Parser::ROUNDED, 0);
}


size_t Cobol85Parser::AddGivingContext::getRuleIndex() const {
  return Cobol85Parser::RuleAddGiving;
}

void Cobol85Parser::AddGivingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAddGiving(this);
}

void Cobol85Parser::AddGivingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAddGiving(this);
}

Cobol85Parser::AddGivingContext* Cobol85Parser::addGiving() {
  AddGivingContext *_localctx = _tracker.createInstance<AddGivingContext>(_ctx, getState());
  enterRule(_localctx, 562, Cobol85Parser::RuleAddGiving);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3753);
    identifier();
    setState(3755);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::ROUNDED) {
      setState(3754);
      match(Cobol85Parser::ROUNDED);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AlteredGoToContext ------------------------------------------------------------------

Cobol85Parser::AlteredGoToContext::AlteredGoToContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::AlteredGoToContext::GO() {
  return getToken(Cobol85Parser::GO, 0);
}

tree::TerminalNode* Cobol85Parser::AlteredGoToContext::DOT_FS() {
  return getToken(Cobol85Parser::DOT_FS, 0);
}

tree::TerminalNode* Cobol85Parser::AlteredGoToContext::TO() {
  return getToken(Cobol85Parser::TO, 0);
}


size_t Cobol85Parser::AlteredGoToContext::getRuleIndex() const {
  return Cobol85Parser::RuleAlteredGoTo;
}

void Cobol85Parser::AlteredGoToContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlteredGoTo(this);
}

void Cobol85Parser::AlteredGoToContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlteredGoTo(this);
}

Cobol85Parser::AlteredGoToContext* Cobol85Parser::alteredGoTo() {
  AlteredGoToContext *_localctx = _tracker.createInstance<AlteredGoToContext>(_ctx, getState());
  enterRule(_localctx, 564, Cobol85Parser::RuleAlteredGoTo);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3757);
    match(Cobol85Parser::GO);
    setState(3759);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::TO) {
      setState(3758);
      match(Cobol85Parser::TO);
    }
    setState(3761);
    match(Cobol85Parser::DOT_FS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AlterStatementContext ------------------------------------------------------------------

Cobol85Parser::AlterStatementContext::AlterStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::AlterStatementContext::ALTER() {
  return getToken(Cobol85Parser::ALTER, 0);
}

std::vector<Cobol85Parser::AlterProceedToContext *> Cobol85Parser::AlterStatementContext::alterProceedTo() {
  return getRuleContexts<Cobol85Parser::AlterProceedToContext>();
}

Cobol85Parser::AlterProceedToContext* Cobol85Parser::AlterStatementContext::alterProceedTo(size_t i) {
  return getRuleContext<Cobol85Parser::AlterProceedToContext>(i);
}


size_t Cobol85Parser::AlterStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleAlterStatement;
}

void Cobol85Parser::AlterStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlterStatement(this);
}

void Cobol85Parser::AlterStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlterStatement(this);
}

Cobol85Parser::AlterStatementContext* Cobol85Parser::alterStatement() {
  AlterStatementContext *_localctx = _tracker.createInstance<AlterStatementContext>(_ctx, getState());
  enterRule(_localctx, 566, Cobol85Parser::RuleAlterStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3763);
    match(Cobol85Parser::ALTER);
    setState(3765); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(3764);
      alterProceedTo();
      setState(3767); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3512999431135821826) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 8070451912006173187) != 0) || ((((_la - 138) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 138)) & 5276573893883339531) != 0) || ((((_la - 202) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 202)) & -3098194965423761407) != 0) || ((((_la - 268) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 268)) & -9202532752178970507) != 0) || ((((_la - 336) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 336)) & 4647874433930428483) != 0) || ((((_la - 401) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 401)) & 84826144769) != 0) || ((((_la - 466) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 466)) & 103635575018455169) != 0) || ((((_la - 552) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 552)) & 47) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AlterProceedToContext ------------------------------------------------------------------

Cobol85Parser::AlterProceedToContext::AlterProceedToContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Cobol85Parser::ProcedureNameContext *> Cobol85Parser::AlterProceedToContext::procedureName() {
  return getRuleContexts<Cobol85Parser::ProcedureNameContext>();
}

Cobol85Parser::ProcedureNameContext* Cobol85Parser::AlterProceedToContext::procedureName(size_t i) {
  return getRuleContext<Cobol85Parser::ProcedureNameContext>(i);
}

std::vector<tree::TerminalNode *> Cobol85Parser::AlterProceedToContext::TO() {
  return getTokens(Cobol85Parser::TO);
}

tree::TerminalNode* Cobol85Parser::AlterProceedToContext::TO(size_t i) {
  return getToken(Cobol85Parser::TO, i);
}

tree::TerminalNode* Cobol85Parser::AlterProceedToContext::PROCEED() {
  return getToken(Cobol85Parser::PROCEED, 0);
}


size_t Cobol85Parser::AlterProceedToContext::getRuleIndex() const {
  return Cobol85Parser::RuleAlterProceedTo;
}

void Cobol85Parser::AlterProceedToContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlterProceedTo(this);
}

void Cobol85Parser::AlterProceedToContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlterProceedTo(this);
}

Cobol85Parser::AlterProceedToContext* Cobol85Parser::alterProceedTo() {
  AlterProceedToContext *_localctx = _tracker.createInstance<AlterProceedToContext>(_ctx, getState());
  enterRule(_localctx, 568, Cobol85Parser::RuleAlterProceedTo);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3769);
    procedureName();
    setState(3770);
    match(Cobol85Parser::TO);
    setState(3773);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::PROCEED) {
      setState(3771);
      match(Cobol85Parser::PROCEED);
      setState(3772);
      match(Cobol85Parser::TO);
    }
    setState(3775);
    procedureName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CallStatementContext ------------------------------------------------------------------

Cobol85Parser::CallStatementContext::CallStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::CallStatementContext::CALL() {
  return getToken(Cobol85Parser::CALL, 0);
}

Cobol85Parser::IdentifierContext* Cobol85Parser::CallStatementContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

Cobol85Parser::LiteralContext* Cobol85Parser::CallStatementContext::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}

Cobol85Parser::CallUsingPhraseContext* Cobol85Parser::CallStatementContext::callUsingPhrase() {
  return getRuleContext<Cobol85Parser::CallUsingPhraseContext>(0);
}

Cobol85Parser::CallGivingPhraseContext* Cobol85Parser::CallStatementContext::callGivingPhrase() {
  return getRuleContext<Cobol85Parser::CallGivingPhraseContext>(0);
}

Cobol85Parser::OnOverflowPhraseContext* Cobol85Parser::CallStatementContext::onOverflowPhrase() {
  return getRuleContext<Cobol85Parser::OnOverflowPhraseContext>(0);
}

Cobol85Parser::OnExceptionClauseContext* Cobol85Parser::CallStatementContext::onExceptionClause() {
  return getRuleContext<Cobol85Parser::OnExceptionClauseContext>(0);
}

Cobol85Parser::NotOnExceptionClauseContext* Cobol85Parser::CallStatementContext::notOnExceptionClause() {
  return getRuleContext<Cobol85Parser::NotOnExceptionClauseContext>(0);
}

tree::TerminalNode* Cobol85Parser::CallStatementContext::END_CALL() {
  return getToken(Cobol85Parser::END_CALL, 0);
}


size_t Cobol85Parser::CallStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleCallStatement;
}

void Cobol85Parser::CallStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCallStatement(this);
}

void Cobol85Parser::CallStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCallStatement(this);
}

Cobol85Parser::CallStatementContext* Cobol85Parser::callStatement() {
  CallStatementContext *_localctx = _tracker.createInstance<CallStatementContext>(_ctx, getState());
  enterRule(_localctx, 570, Cobol85Parser::RuleCallStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3777);
    match(Cobol85Parser::CALL);
    setState(3780);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 491, _ctx)) {
    case 1: {
      setState(3778);
      identifier();
      break;
    }

    case 2: {
      setState(3779);
      literal();
      break;
    }

    default:
      break;
    }
    setState(3783);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::USING) {
      setState(3782);
      callUsingPhrase();
    }
    setState(3786);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::GIVING || _la == Cobol85Parser::RETURNING) {
      setState(3785);
      callGivingPhrase();
    }
    setState(3789);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 494, _ctx)) {
    case 1: {
      setState(3788);
      onOverflowPhrase();
      break;
    }

    default:
      break;
    }
    setState(3792);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 495, _ctx)) {
    case 1: {
      setState(3791);
      onExceptionClause();
      break;
    }

    default:
      break;
    }
    setState(3795);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 496, _ctx)) {
    case 1: {
      setState(3794);
      notOnExceptionClause();
      break;
    }

    default:
      break;
    }
    setState(3798);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 497, _ctx)) {
    case 1: {
      setState(3797);
      match(Cobol85Parser::END_CALL);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CallUsingPhraseContext ------------------------------------------------------------------

Cobol85Parser::CallUsingPhraseContext::CallUsingPhraseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::CallUsingPhraseContext::USING() {
  return getToken(Cobol85Parser::USING, 0);
}

std::vector<Cobol85Parser::CallUsingParameterContext *> Cobol85Parser::CallUsingPhraseContext::callUsingParameter() {
  return getRuleContexts<Cobol85Parser::CallUsingParameterContext>();
}

Cobol85Parser::CallUsingParameterContext* Cobol85Parser::CallUsingPhraseContext::callUsingParameter(size_t i) {
  return getRuleContext<Cobol85Parser::CallUsingParameterContext>(i);
}


size_t Cobol85Parser::CallUsingPhraseContext::getRuleIndex() const {
  return Cobol85Parser::RuleCallUsingPhrase;
}

void Cobol85Parser::CallUsingPhraseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCallUsingPhrase(this);
}

void Cobol85Parser::CallUsingPhraseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCallUsingPhrase(this);
}

Cobol85Parser::CallUsingPhraseContext* Cobol85Parser::callUsingPhrase() {
  CallUsingPhraseContext *_localctx = _tracker.createInstance<CallUsingPhraseContext>(_ctx, getState());
  enterRule(_localctx, 572, Cobol85Parser::RuleCallUsingPhrase);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3800);
    match(Cobol85Parser::USING);
    setState(3802); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(3801);
              callUsingParameter();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(3804); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 498, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CallUsingParameterContext ------------------------------------------------------------------

Cobol85Parser::CallUsingParameterContext::CallUsingParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::CallByReferencePhraseContext* Cobol85Parser::CallUsingParameterContext::callByReferencePhrase() {
  return getRuleContext<Cobol85Parser::CallByReferencePhraseContext>(0);
}

Cobol85Parser::CallByValuePhraseContext* Cobol85Parser::CallUsingParameterContext::callByValuePhrase() {
  return getRuleContext<Cobol85Parser::CallByValuePhraseContext>(0);
}

Cobol85Parser::CallByContentPhraseContext* Cobol85Parser::CallUsingParameterContext::callByContentPhrase() {
  return getRuleContext<Cobol85Parser::CallByContentPhraseContext>(0);
}


size_t Cobol85Parser::CallUsingParameterContext::getRuleIndex() const {
  return Cobol85Parser::RuleCallUsingParameter;
}

void Cobol85Parser::CallUsingParameterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCallUsingParameter(this);
}

void Cobol85Parser::CallUsingParameterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCallUsingParameter(this);
}

Cobol85Parser::CallUsingParameterContext* Cobol85Parser::callUsingParameter() {
  CallUsingParameterContext *_localctx = _tracker.createInstance<CallUsingParameterContext>(_ctx, getState());
  enterRule(_localctx, 574, Cobol85Parser::RuleCallUsingParameter);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3809);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 499, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3806);
      callByReferencePhrase();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3807);
      callByValuePhrase();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3808);
      callByContentPhrase();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CallByReferencePhraseContext ------------------------------------------------------------------

Cobol85Parser::CallByReferencePhraseContext::CallByReferencePhraseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::CallByReferencePhraseContext::REFERENCE() {
  return getToken(Cobol85Parser::REFERENCE, 0);
}

std::vector<Cobol85Parser::CallByReferenceContext *> Cobol85Parser::CallByReferencePhraseContext::callByReference() {
  return getRuleContexts<Cobol85Parser::CallByReferenceContext>();
}

Cobol85Parser::CallByReferenceContext* Cobol85Parser::CallByReferencePhraseContext::callByReference(size_t i) {
  return getRuleContext<Cobol85Parser::CallByReferenceContext>(i);
}

tree::TerminalNode* Cobol85Parser::CallByReferencePhraseContext::BY() {
  return getToken(Cobol85Parser::BY, 0);
}


size_t Cobol85Parser::CallByReferencePhraseContext::getRuleIndex() const {
  return Cobol85Parser::RuleCallByReferencePhrase;
}

void Cobol85Parser::CallByReferencePhraseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCallByReferencePhrase(this);
}

void Cobol85Parser::CallByReferencePhraseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCallByReferencePhrase(this);
}

Cobol85Parser::CallByReferencePhraseContext* Cobol85Parser::callByReferencePhrase() {
  CallByReferencePhraseContext *_localctx = _tracker.createInstance<CallByReferencePhraseContext>(_ctx, getState());
  enterRule(_localctx, 576, Cobol85Parser::RuleCallByReferencePhrase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3815);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::BY || _la == Cobol85Parser::REFERENCE) {
      setState(3812);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Cobol85Parser::BY) {
        setState(3811);
        match(Cobol85Parser::BY);
      }
      setState(3814);
      match(Cobol85Parser::REFERENCE);
    }
    setState(3818); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(3817);
              callByReference();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(3820); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 502, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CallByReferenceContext ------------------------------------------------------------------

Cobol85Parser::CallByReferenceContext::CallByReferenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::IdentifierContext* Cobol85Parser::CallByReferenceContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

Cobol85Parser::LiteralContext* Cobol85Parser::CallByReferenceContext::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}

Cobol85Parser::FileNameContext* Cobol85Parser::CallByReferenceContext::fileName() {
  return getRuleContext<Cobol85Parser::FileNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::CallByReferenceContext::ADDRESS() {
  return getToken(Cobol85Parser::ADDRESS, 0);
}

tree::TerminalNode* Cobol85Parser::CallByReferenceContext::OF() {
  return getToken(Cobol85Parser::OF, 0);
}

tree::TerminalNode* Cobol85Parser::CallByReferenceContext::INTEGER() {
  return getToken(Cobol85Parser::INTEGER, 0);
}

tree::TerminalNode* Cobol85Parser::CallByReferenceContext::STRING() {
  return getToken(Cobol85Parser::STRING, 0);
}

tree::TerminalNode* Cobol85Parser::CallByReferenceContext::OMITTED() {
  return getToken(Cobol85Parser::OMITTED, 0);
}


size_t Cobol85Parser::CallByReferenceContext::getRuleIndex() const {
  return Cobol85Parser::RuleCallByReference;
}

void Cobol85Parser::CallByReferenceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCallByReference(this);
}

void Cobol85Parser::CallByReferenceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCallByReference(this);
}

Cobol85Parser::CallByReferenceContext* Cobol85Parser::callByReference() {
  CallByReferenceContext *_localctx = _tracker.createInstance<CallByReferenceContext>(_ctx, getState());
  enterRule(_localctx, 578, Cobol85Parser::RuleCallByReference);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3834);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Cobol85Parser::ABORT:
      case Cobol85Parser::ADDRESS:
      case Cobol85Parser::ALL:
      case Cobol85Parser::AS:
      case Cobol85Parser::ASCII:
      case Cobol85Parser::ASSOCIATED_DATA:
      case Cobol85Parser::ASSOCIATED_DATA_LENGTH:
      case Cobol85Parser::ATTRIBUTE:
      case Cobol85Parser::AUTO:
      case Cobol85Parser::AUTO_SKIP:
      case Cobol85Parser::BACKGROUND_COLOR:
      case Cobol85Parser::BACKGROUND_COLOUR:
      case Cobol85Parser::BEEP:
      case Cobol85Parser::BELL:
      case Cobol85Parser::BINARY:
      case Cobol85Parser::BIT:
      case Cobol85Parser::BLINK:
      case Cobol85Parser::BOUNDS:
      case Cobol85Parser::CAPABLE:
      case Cobol85Parser::CCSVERSION:
      case Cobol85Parser::CHANGED:
      case Cobol85Parser::CHANNEL:
      case Cobol85Parser::CLOSE_DISPOSITION:
      case Cobol85Parser::COBOL:
      case Cobol85Parser::COMMITMENT:
      case Cobol85Parser::CONTROL_POINT:
      case Cobol85Parser::CONVENTION:
      case Cobol85Parser::CRUNCH:
      case Cobol85Parser::CURSOR:
      case Cobol85Parser::DATE:
      case Cobol85Parser::DAY:
      case Cobol85Parser::DAY_OF_WEEK:
      case Cobol85Parser::DEBUG_CONTENTS:
      case Cobol85Parser::DEBUG_ITEM:
      case Cobol85Parser::DEBUG_LINE:
      case Cobol85Parser::DEBUG_NAME:
      case Cobol85Parser::DEBUG_SUB_1:
      case Cobol85Parser::DEBUG_SUB_2:
      case Cobol85Parser::DEBUG_SUB_3:
      case Cobol85Parser::DEFAULT:
      case Cobol85Parser::DEFAULT_DISPLAY:
      case Cobol85Parser::DEFINITION:
      case Cobol85Parser::DFHRESP:
      case Cobol85Parser::DFHVALUE:
      case Cobol85Parser::DISK:
      case Cobol85Parser::DONTCARE:
      case Cobol85Parser::DOUBLE:
      case Cobol85Parser::EBCDIC:
      case Cobol85Parser::EMPTY_CHECK:
      case Cobol85Parser::ENTER:
      case Cobol85Parser::ENTRY_PROCEDURE:
      case Cobol85Parser::ERASE:
      case Cobol85Parser::EOL:
      case Cobol85Parser::EOS:
      case Cobol85Parser::ESCAPE:
      case Cobol85Parser::EVENT:
      case Cobol85Parser::EXCLUSIVE:
      case Cobol85Parser::EXPORT:
      case Cobol85Parser::EXTENDED:
      case Cobol85Parser::FALSE:
      case Cobol85Parser::FOREGROUND_COLOR:
      case Cobol85Parser::FOREGROUND_COLOUR:
      case Cobol85Parser::FULL:
      case Cobol85Parser::FUNCTION:
      case Cobol85Parser::FUNCTIONNAME:
      case Cobol85Parser::FUNCTION_POINTER:
      case Cobol85Parser::GRID:
      case Cobol85Parser::HIGHLIGHT:
      case Cobol85Parser::HIGH_VALUE:
      case Cobol85Parser::HIGH_VALUES:
      case Cobol85Parser::IMPLICIT:
      case Cobol85Parser::IMPORT:
      case Cobol85Parser::INTEGER:
      case Cobol85Parser::KEPT:
      case Cobol85Parser::KEYBOARD:
      case Cobol85Parser::LANGUAGE:
      case Cobol85Parser::LB:
      case Cobol85Parser::LD:
      case Cobol85Parser::LEFTLINE:
      case Cobol85Parser::LENGTH:
      case Cobol85Parser::LENGTH_CHECK:
      case Cobol85Parser::LIBACCESS:
      case Cobol85Parser::LIBPARAMETER:
      case Cobol85Parser::LIBRARY:
      case Cobol85Parser::LINAGE_COUNTER:
      case Cobol85Parser::LINE_COUNTER:
      case Cobol85Parser::LIST:
      case Cobol85Parser::LOCAL:
      case Cobol85Parser::LONG_DATE:
      case Cobol85Parser::LONG_TIME:
      case Cobol85Parser::LOWER:
      case Cobol85Parser::LOWLIGHT:
      case Cobol85Parser::LOW_VALUE:
      case Cobol85Parser::LOW_VALUES:
      case Cobol85Parser::MMDDYYYY:
      case Cobol85Parser::NAMED:
      case Cobol85Parser::NATIONAL:
      case Cobol85Parser::NATIONAL_EDITED:
      case Cobol85Parser::NETWORK:
      case Cobol85Parser::NO_ECHO:
      case Cobol85Parser::NULL_:
      case Cobol85Parser::NULLS:
      case Cobol85Parser::NUMERIC_DATE:
      case Cobol85Parser::NUMERIC_TIME:
      case Cobol85Parser::ODT:
      case Cobol85Parser::ORDERLY:
      case Cobol85Parser::OVERLINE:
      case Cobol85Parser::OWN:
      case Cobol85Parser::PAGE_COUNTER:
      case Cobol85Parser::PASSWORD:
      case Cobol85Parser::PORT:
      case Cobol85Parser::PRINTER:
      case Cobol85Parser::PRIVATE:
      case Cobol85Parser::PROCESS:
      case Cobol85Parser::PROGRAM:
      case Cobol85Parser::PROMPT:
      case Cobol85Parser::QUOTE:
      case Cobol85Parser::QUOTES:
      case Cobol85Parser::READER:
      case Cobol85Parser::REMOTE:
      case Cobol85Parser::REAL:
      case Cobol85Parser::RECEIVED:
      case Cobol85Parser::RECURSIVE:
      case Cobol85Parser::REF:
      case Cobol85Parser::REMOVE:
      case Cobol85Parser::REQUIRED:
      case Cobol85Parser::REVERSE_VIDEO:
      case Cobol85Parser::RETURN_CODE:
      case Cobol85Parser::SAVE:
      case Cobol85Parser::SECURE:
      case Cobol85Parser::SHARED:
      case Cobol85Parser::SHAREDBYALL:
      case Cobol85Parser::SHAREDBYRUNUNIT:
      case Cobol85Parser::SHARING:
      case Cobol85Parser::SHIFT_IN:
      case Cobol85Parser::SHIFT_OUT:
      case Cobol85Parser::SHORT_DATE:
      case Cobol85Parser::SORT_CONTROL:
      case Cobol85Parser::SORT_CORE_SIZE:
      case Cobol85Parser::SORT_FILE_SIZE:
      case Cobol85Parser::SORT_MESSAGE:
      case Cobol85Parser::SORT_MODE_SIZE:
      case Cobol85Parser::SORT_RETURN:
      case Cobol85Parser::SPACE:
      case Cobol85Parser::SPACES:
      case Cobol85Parser::STRING:
      case Cobol85Parser::SYMBOL:
      case Cobol85Parser::TALLY:
      case Cobol85Parser::TASK:
      case Cobol85Parser::THREAD:
      case Cobol85Parser::THREAD_LOCAL:
      case Cobol85Parser::TIME:
      case Cobol85Parser::TIMER:
      case Cobol85Parser::TODAYS_DATE:
      case Cobol85Parser::TODAYS_NAME:
      case Cobol85Parser::TRUE:
      case Cobol85Parser::TRUNCATED:
      case Cobol85Parser::TYPEDEF:
      case Cobol85Parser::UNDERLINE:
      case Cobol85Parser::VIRTUAL:
      case Cobol85Parser::WAIT:
      case Cobol85Parser::WHEN_COMPILED:
      case Cobol85Parser::YEAR:
      case Cobol85Parser::YYYYMMDD:
      case Cobol85Parser::YYYYDDD:
      case Cobol85Parser::ZERO:
      case Cobol85Parser::ZERO_FILL:
      case Cobol85Parser::ZEROS:
      case Cobol85Parser::ZEROES:
      case Cobol85Parser::NONNUMERICLITERAL:
      case Cobol85Parser::LEVEL_NUMBER_66:
      case Cobol85Parser::LEVEL_NUMBER_77:
      case Cobol85Parser::LEVEL_NUMBER_88:
      case Cobol85Parser::INTEGERLITERAL:
      case Cobol85Parser::NUMERICLITERAL:
      case Cobol85Parser::IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(3831);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 504, _ctx)) {
        case 1: {
          setState(3826);
          _errHandler->sync(this);

          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 503, _ctx)) {
          case 1: {
            setState(3822);
            match(Cobol85Parser::ADDRESS);
            setState(3823);
            match(Cobol85Parser::OF);
            break;
          }

          case 2: {
            setState(3824);
            match(Cobol85Parser::INTEGER);
            break;
          }

          case 3: {
            setState(3825);
            match(Cobol85Parser::STRING);
            break;
          }

          default:
            break;
          }
          setState(3828);
          identifier();
          break;
        }

        case 2: {
          setState(3829);
          literal();
          break;
        }

        case 3: {
          setState(3830);
          fileName();
          break;
        }

        default:
          break;
        }
        break;
      }

      case Cobol85Parser::OMITTED: {
        enterOuterAlt(_localctx, 2);
        setState(3833);
        match(Cobol85Parser::OMITTED);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CallByValuePhraseContext ------------------------------------------------------------------

Cobol85Parser::CallByValuePhraseContext::CallByValuePhraseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::CallByValuePhraseContext::VALUE() {
  return getToken(Cobol85Parser::VALUE, 0);
}

tree::TerminalNode* Cobol85Parser::CallByValuePhraseContext::BY() {
  return getToken(Cobol85Parser::BY, 0);
}

std::vector<Cobol85Parser::CallByValueContext *> Cobol85Parser::CallByValuePhraseContext::callByValue() {
  return getRuleContexts<Cobol85Parser::CallByValueContext>();
}

Cobol85Parser::CallByValueContext* Cobol85Parser::CallByValuePhraseContext::callByValue(size_t i) {
  return getRuleContext<Cobol85Parser::CallByValueContext>(i);
}


size_t Cobol85Parser::CallByValuePhraseContext::getRuleIndex() const {
  return Cobol85Parser::RuleCallByValuePhrase;
}

void Cobol85Parser::CallByValuePhraseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCallByValuePhrase(this);
}

void Cobol85Parser::CallByValuePhraseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCallByValuePhrase(this);
}

Cobol85Parser::CallByValuePhraseContext* Cobol85Parser::callByValuePhrase() {
  CallByValuePhraseContext *_localctx = _tracker.createInstance<CallByValuePhraseContext>(_ctx, getState());
  enterRule(_localctx, 580, Cobol85Parser::RuleCallByValuePhrase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3837);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::BY) {
      setState(3836);
      match(Cobol85Parser::BY);
    }
    setState(3839);
    match(Cobol85Parser::VALUE);
    setState(3841); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(3840);
              callByValue();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(3843); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 507, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CallByValueContext ------------------------------------------------------------------

Cobol85Parser::CallByValueContext::CallByValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::IdentifierContext* Cobol85Parser::CallByValueContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

Cobol85Parser::LiteralContext* Cobol85Parser::CallByValueContext::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}

tree::TerminalNode* Cobol85Parser::CallByValueContext::ADDRESS() {
  return getToken(Cobol85Parser::ADDRESS, 0);
}

tree::TerminalNode* Cobol85Parser::CallByValueContext::OF() {
  return getToken(Cobol85Parser::OF, 0);
}

tree::TerminalNode* Cobol85Parser::CallByValueContext::LENGTH() {
  return getToken(Cobol85Parser::LENGTH, 0);
}


size_t Cobol85Parser::CallByValueContext::getRuleIndex() const {
  return Cobol85Parser::RuleCallByValue;
}

void Cobol85Parser::CallByValueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCallByValue(this);
}

void Cobol85Parser::CallByValueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCallByValue(this);
}

Cobol85Parser::CallByValueContext* Cobol85Parser::callByValue() {
  CallByValueContext *_localctx = _tracker.createInstance<CallByValueContext>(_ctx, getState());
  enterRule(_localctx, 582, Cobol85Parser::RuleCallByValue);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3851);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 509, _ctx)) {
    case 1: {
      setState(3845);
      match(Cobol85Parser::ADDRESS);
      setState(3846);
      match(Cobol85Parser::OF);
      break;
    }

    case 2: {
      setState(3847);
      match(Cobol85Parser::LENGTH);
      setState(3849);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Cobol85Parser::OF) {
        setState(3848);
        match(Cobol85Parser::OF);
      }
      break;
    }

    default:
      break;
    }
    setState(3855);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 510, _ctx)) {
    case 1: {
      setState(3853);
      identifier();
      break;
    }

    case 2: {
      setState(3854);
      literal();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CallByContentPhraseContext ------------------------------------------------------------------

Cobol85Parser::CallByContentPhraseContext::CallByContentPhraseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::CallByContentPhraseContext::CONTENT() {
  return getToken(Cobol85Parser::CONTENT, 0);
}

tree::TerminalNode* Cobol85Parser::CallByContentPhraseContext::BY() {
  return getToken(Cobol85Parser::BY, 0);
}

std::vector<Cobol85Parser::CallByContentContext *> Cobol85Parser::CallByContentPhraseContext::callByContent() {
  return getRuleContexts<Cobol85Parser::CallByContentContext>();
}

Cobol85Parser::CallByContentContext* Cobol85Parser::CallByContentPhraseContext::callByContent(size_t i) {
  return getRuleContext<Cobol85Parser::CallByContentContext>(i);
}


size_t Cobol85Parser::CallByContentPhraseContext::getRuleIndex() const {
  return Cobol85Parser::RuleCallByContentPhrase;
}

void Cobol85Parser::CallByContentPhraseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCallByContentPhrase(this);
}

void Cobol85Parser::CallByContentPhraseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCallByContentPhrase(this);
}

Cobol85Parser::CallByContentPhraseContext* Cobol85Parser::callByContentPhrase() {
  CallByContentPhraseContext *_localctx = _tracker.createInstance<CallByContentPhraseContext>(_ctx, getState());
  enterRule(_localctx, 584, Cobol85Parser::RuleCallByContentPhrase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3858);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::BY) {
      setState(3857);
      match(Cobol85Parser::BY);
    }
    setState(3860);
    match(Cobol85Parser::CONTENT);
    setState(3862); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(3861);
              callByContent();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(3864); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 512, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CallByContentContext ------------------------------------------------------------------

Cobol85Parser::CallByContentContext::CallByContentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::IdentifierContext* Cobol85Parser::CallByContentContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

tree::TerminalNode* Cobol85Parser::CallByContentContext::ADDRESS() {
  return getToken(Cobol85Parser::ADDRESS, 0);
}

tree::TerminalNode* Cobol85Parser::CallByContentContext::OF() {
  return getToken(Cobol85Parser::OF, 0);
}

tree::TerminalNode* Cobol85Parser::CallByContentContext::LENGTH() {
  return getToken(Cobol85Parser::LENGTH, 0);
}

Cobol85Parser::LiteralContext* Cobol85Parser::CallByContentContext::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}

tree::TerminalNode* Cobol85Parser::CallByContentContext::OMITTED() {
  return getToken(Cobol85Parser::OMITTED, 0);
}


size_t Cobol85Parser::CallByContentContext::getRuleIndex() const {
  return Cobol85Parser::RuleCallByContent;
}

void Cobol85Parser::CallByContentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCallByContent(this);
}

void Cobol85Parser::CallByContentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCallByContent(this);
}

Cobol85Parser::CallByContentContext* Cobol85Parser::callByContent() {
  CallByContentContext *_localctx = _tracker.createInstance<CallByContentContext>(_ctx, getState());
  enterRule(_localctx, 586, Cobol85Parser::RuleCallByContent);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3877);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 515, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3872);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 514, _ctx)) {
      case 1: {
        setState(3866);
        match(Cobol85Parser::ADDRESS);
        setState(3867);
        match(Cobol85Parser::OF);
        break;
      }

      case 2: {
        setState(3868);
        match(Cobol85Parser::LENGTH);
        setState(3870);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Cobol85Parser::OF) {
          setState(3869);
          match(Cobol85Parser::OF);
        }
        break;
      }

      default:
        break;
      }
      setState(3874);
      identifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3875);
      literal();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3876);
      match(Cobol85Parser::OMITTED);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CallGivingPhraseContext ------------------------------------------------------------------

Cobol85Parser::CallGivingPhraseContext::CallGivingPhraseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::IdentifierContext* Cobol85Parser::CallGivingPhraseContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

tree::TerminalNode* Cobol85Parser::CallGivingPhraseContext::GIVING() {
  return getToken(Cobol85Parser::GIVING, 0);
}

tree::TerminalNode* Cobol85Parser::CallGivingPhraseContext::RETURNING() {
  return getToken(Cobol85Parser::RETURNING, 0);
}


size_t Cobol85Parser::CallGivingPhraseContext::getRuleIndex() const {
  return Cobol85Parser::RuleCallGivingPhrase;
}

void Cobol85Parser::CallGivingPhraseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCallGivingPhrase(this);
}

void Cobol85Parser::CallGivingPhraseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCallGivingPhrase(this);
}

Cobol85Parser::CallGivingPhraseContext* Cobol85Parser::callGivingPhrase() {
  CallGivingPhraseContext *_localctx = _tracker.createInstance<CallGivingPhraseContext>(_ctx, getState());
  enterRule(_localctx, 588, Cobol85Parser::RuleCallGivingPhrase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3879);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::GIVING || _la == Cobol85Parser::RETURNING)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(3880);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CancelStatementContext ------------------------------------------------------------------

Cobol85Parser::CancelStatementContext::CancelStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::CancelStatementContext::CANCEL() {
  return getToken(Cobol85Parser::CANCEL, 0);
}

std::vector<Cobol85Parser::CancelCallContext *> Cobol85Parser::CancelStatementContext::cancelCall() {
  return getRuleContexts<Cobol85Parser::CancelCallContext>();
}

Cobol85Parser::CancelCallContext* Cobol85Parser::CancelStatementContext::cancelCall(size_t i) {
  return getRuleContext<Cobol85Parser::CancelCallContext>(i);
}


size_t Cobol85Parser::CancelStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleCancelStatement;
}

void Cobol85Parser::CancelStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCancelStatement(this);
}

void Cobol85Parser::CancelStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCancelStatement(this);
}

Cobol85Parser::CancelStatementContext* Cobol85Parser::cancelStatement() {
  CancelStatementContext *_localctx = _tracker.createInstance<CancelStatementContext>(_ctx, getState());
  enterRule(_localctx, 590, Cobol85Parser::RuleCancelStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3882);
    match(Cobol85Parser::CANCEL);
    setState(3884); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(3883);
      cancelCall();
      setState(3886); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3512999431135822370) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 8213661102500741635) != 0) || ((((_la - 138) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 138)) & 5276573893883339531) != 0) || ((((_la - 202) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 202)) & -3098194964618422267) != 0) || ((((_la - 268) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 268)) & -9202427199037528969) != 0) || ((((_la - 336) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 336)) & 4647874440372879459) != 0) || ((((_la - 401) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 401)) & 1819828109721609) != 0) || ((((_la - 466) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 466)) & 572150674022301857) != 0) || ((((_la - 551) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 551)) & 127) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CancelCallContext ------------------------------------------------------------------

Cobol85Parser::CancelCallContext::CancelCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::LibraryNameContext* Cobol85Parser::CancelCallContext::libraryName() {
  return getRuleContext<Cobol85Parser::LibraryNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::CancelCallContext::BYTITLE() {
  return getToken(Cobol85Parser::BYTITLE, 0);
}

tree::TerminalNode* Cobol85Parser::CancelCallContext::BYFUNCTION() {
  return getToken(Cobol85Parser::BYFUNCTION, 0);
}

Cobol85Parser::IdentifierContext* Cobol85Parser::CancelCallContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

Cobol85Parser::LiteralContext* Cobol85Parser::CancelCallContext::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}


size_t Cobol85Parser::CancelCallContext::getRuleIndex() const {
  return Cobol85Parser::RuleCancelCall;
}

void Cobol85Parser::CancelCallContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCancelCall(this);
}

void Cobol85Parser::CancelCallContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCancelCall(this);
}

Cobol85Parser::CancelCallContext* Cobol85Parser::cancelCall() {
  CancelCallContext *_localctx = _tracker.createInstance<CancelCallContext>(_ctx, getState());
  enterRule(_localctx, 592, Cobol85Parser::RuleCancelCall);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3893);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 517, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3888);
      libraryName();
      setState(3889);
      _la = _input->LA(1);
      if (!(_la == Cobol85Parser::BYFUNCTION

      || _la == Cobol85Parser::BYTITLE)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3891);
      identifier();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3892);
      literal();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CloseStatementContext ------------------------------------------------------------------

Cobol85Parser::CloseStatementContext::CloseStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::CloseStatementContext::CLOSE() {
  return getToken(Cobol85Parser::CLOSE, 0);
}

std::vector<Cobol85Parser::CloseFileContext *> Cobol85Parser::CloseStatementContext::closeFile() {
  return getRuleContexts<Cobol85Parser::CloseFileContext>();
}

Cobol85Parser::CloseFileContext* Cobol85Parser::CloseStatementContext::closeFile(size_t i) {
  return getRuleContext<Cobol85Parser::CloseFileContext>(i);
}


size_t Cobol85Parser::CloseStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleCloseStatement;
}

void Cobol85Parser::CloseStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCloseStatement(this);
}

void Cobol85Parser::CloseStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCloseStatement(this);
}

Cobol85Parser::CloseStatementContext* Cobol85Parser::closeStatement() {
  CloseStatementContext *_localctx = _tracker.createInstance<CloseStatementContext>(_ctx, getState());
  enterRule(_localctx, 594, Cobol85Parser::RuleCloseStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3895);
    match(Cobol85Parser::CLOSE);
    setState(3897); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(3896);
      closeFile();
      setState(3899); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3512999431135821826) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 8070451912006173187) != 0) || ((((_la - 138) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 138)) & 5276573893883339531) != 0) || ((((_la - 202) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 202)) & -3098194965423761407) != 0) || ((((_la - 268) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 268)) & -9202532752178970507) != 0) || ((((_la - 336) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 336)) & 4647874433930428483) != 0) || ((((_la - 401) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 401)) & 84826144769) != 0) || ((((_la - 466) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 466)) & 103635575018455169) != 0) || _la == Cobol85Parser::IDENTIFIER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CloseFileContext ------------------------------------------------------------------

Cobol85Parser::CloseFileContext::CloseFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::FileNameContext* Cobol85Parser::CloseFileContext::fileName() {
  return getRuleContext<Cobol85Parser::FileNameContext>(0);
}

Cobol85Parser::CloseReelUnitStatementContext* Cobol85Parser::CloseFileContext::closeReelUnitStatement() {
  return getRuleContext<Cobol85Parser::CloseReelUnitStatementContext>(0);
}

Cobol85Parser::CloseRelativeStatementContext* Cobol85Parser::CloseFileContext::closeRelativeStatement() {
  return getRuleContext<Cobol85Parser::CloseRelativeStatementContext>(0);
}

Cobol85Parser::ClosePortFileIOStatementContext* Cobol85Parser::CloseFileContext::closePortFileIOStatement() {
  return getRuleContext<Cobol85Parser::ClosePortFileIOStatementContext>(0);
}


size_t Cobol85Parser::CloseFileContext::getRuleIndex() const {
  return Cobol85Parser::RuleCloseFile;
}

void Cobol85Parser::CloseFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCloseFile(this);
}

void Cobol85Parser::CloseFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCloseFile(this);
}

Cobol85Parser::CloseFileContext* Cobol85Parser::closeFile() {
  CloseFileContext *_localctx = _tracker.createInstance<CloseFileContext>(_ctx, getState());
  enterRule(_localctx, 596, Cobol85Parser::RuleCloseFile);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3901);
    fileName();
    setState(3905);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 519, _ctx)) {
    case 1: {
      setState(3902);
      closeReelUnitStatement();
      break;
    }

    case 2: {
      setState(3903);
      closeRelativeStatement();
      break;
    }

    case 3: {
      setState(3904);
      closePortFileIOStatement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CloseReelUnitStatementContext ------------------------------------------------------------------

Cobol85Parser::CloseReelUnitStatementContext::CloseReelUnitStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::CloseReelUnitStatementContext::REEL() {
  return getToken(Cobol85Parser::REEL, 0);
}

tree::TerminalNode* Cobol85Parser::CloseReelUnitStatementContext::UNIT() {
  return getToken(Cobol85Parser::UNIT, 0);
}

tree::TerminalNode* Cobol85Parser::CloseReelUnitStatementContext::REMOVAL() {
  return getToken(Cobol85Parser::REMOVAL, 0);
}

tree::TerminalNode* Cobol85Parser::CloseReelUnitStatementContext::NO() {
  return getToken(Cobol85Parser::NO, 0);
}

tree::TerminalNode* Cobol85Parser::CloseReelUnitStatementContext::REWIND() {
  return getToken(Cobol85Parser::REWIND, 0);
}

tree::TerminalNode* Cobol85Parser::CloseReelUnitStatementContext::LOCK() {
  return getToken(Cobol85Parser::LOCK, 0);
}

tree::TerminalNode* Cobol85Parser::CloseReelUnitStatementContext::FOR() {
  return getToken(Cobol85Parser::FOR, 0);
}

tree::TerminalNode* Cobol85Parser::CloseReelUnitStatementContext::WITH() {
  return getToken(Cobol85Parser::WITH, 0);
}


size_t Cobol85Parser::CloseReelUnitStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleCloseReelUnitStatement;
}

void Cobol85Parser::CloseReelUnitStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCloseReelUnitStatement(this);
}

void Cobol85Parser::CloseReelUnitStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCloseReelUnitStatement(this);
}

Cobol85Parser::CloseReelUnitStatementContext* Cobol85Parser::closeReelUnitStatement() {
  CloseReelUnitStatementContext *_localctx = _tracker.createInstance<CloseReelUnitStatementContext>(_ctx, getState());
  enterRule(_localctx, 598, Cobol85Parser::RuleCloseReelUnitStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3907);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::REEL || _la == Cobol85Parser::UNIT)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(3912);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::FOR || _la == Cobol85Parser::REMOVAL) {
      setState(3909);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Cobol85Parser::FOR) {
        setState(3908);
        match(Cobol85Parser::FOR);
      }
      setState(3911);
      match(Cobol85Parser::REMOVAL);
    }
    setState(3922);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 524, _ctx)) {
    case 1: {
      setState(3915);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Cobol85Parser::WITH) {
        setState(3914);
        match(Cobol85Parser::WITH);
      }
      setState(3920);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case Cobol85Parser::NO: {
          setState(3917);
          match(Cobol85Parser::NO);
          setState(3918);
          match(Cobol85Parser::REWIND);
          break;
        }

        case Cobol85Parser::LOCK: {
          setState(3919);
          match(Cobol85Parser::LOCK);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CloseRelativeStatementContext ------------------------------------------------------------------

Cobol85Parser::CloseRelativeStatementContext::CloseRelativeStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::CloseRelativeStatementContext::NO() {
  return getToken(Cobol85Parser::NO, 0);
}

tree::TerminalNode* Cobol85Parser::CloseRelativeStatementContext::REWIND() {
  return getToken(Cobol85Parser::REWIND, 0);
}

tree::TerminalNode* Cobol85Parser::CloseRelativeStatementContext::LOCK() {
  return getToken(Cobol85Parser::LOCK, 0);
}

tree::TerminalNode* Cobol85Parser::CloseRelativeStatementContext::WITH() {
  return getToken(Cobol85Parser::WITH, 0);
}


size_t Cobol85Parser::CloseRelativeStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleCloseRelativeStatement;
}

void Cobol85Parser::CloseRelativeStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCloseRelativeStatement(this);
}

void Cobol85Parser::CloseRelativeStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCloseRelativeStatement(this);
}

Cobol85Parser::CloseRelativeStatementContext* Cobol85Parser::closeRelativeStatement() {
  CloseRelativeStatementContext *_localctx = _tracker.createInstance<CloseRelativeStatementContext>(_ctx, getState());
  enterRule(_localctx, 600, Cobol85Parser::RuleCloseRelativeStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3925);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::WITH) {
      setState(3924);
      match(Cobol85Parser::WITH);
    }
    setState(3930);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Cobol85Parser::NO: {
        setState(3927);
        match(Cobol85Parser::NO);
        setState(3928);
        match(Cobol85Parser::REWIND);
        break;
      }

      case Cobol85Parser::LOCK: {
        setState(3929);
        match(Cobol85Parser::LOCK);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClosePortFileIOStatementContext ------------------------------------------------------------------

Cobol85Parser::ClosePortFileIOStatementContext::ClosePortFileIOStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ClosePortFileIOStatementContext::NO() {
  return getToken(Cobol85Parser::NO, 0);
}

tree::TerminalNode* Cobol85Parser::ClosePortFileIOStatementContext::WAIT() {
  return getToken(Cobol85Parser::WAIT, 0);
}

tree::TerminalNode* Cobol85Parser::ClosePortFileIOStatementContext::WITH() {
  return getToken(Cobol85Parser::WITH, 0);
}

tree::TerminalNode* Cobol85Parser::ClosePortFileIOStatementContext::USING() {
  return getToken(Cobol85Parser::USING, 0);
}

std::vector<Cobol85Parser::ClosePortFileIOUsingContext *> Cobol85Parser::ClosePortFileIOStatementContext::closePortFileIOUsing() {
  return getRuleContexts<Cobol85Parser::ClosePortFileIOUsingContext>();
}

Cobol85Parser::ClosePortFileIOUsingContext* Cobol85Parser::ClosePortFileIOStatementContext::closePortFileIOUsing(size_t i) {
  return getRuleContext<Cobol85Parser::ClosePortFileIOUsingContext>(i);
}


size_t Cobol85Parser::ClosePortFileIOStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleClosePortFileIOStatement;
}

void Cobol85Parser::ClosePortFileIOStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClosePortFileIOStatement(this);
}

void Cobol85Parser::ClosePortFileIOStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClosePortFileIOStatement(this);
}

Cobol85Parser::ClosePortFileIOStatementContext* Cobol85Parser::closePortFileIOStatement() {
  ClosePortFileIOStatementContext *_localctx = _tracker.createInstance<ClosePortFileIOStatementContext>(_ctx, getState());
  enterRule(_localctx, 602, Cobol85Parser::RuleClosePortFileIOStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3939);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 528, _ctx)) {
    case 1: {
      setState(3933);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Cobol85Parser::WITH) {
        setState(3932);
        match(Cobol85Parser::WITH);
      }
      setState(3935);
      match(Cobol85Parser::NO);
      setState(3936);
      match(Cobol85Parser::WAIT);
      break;
    }

    case 2: {
      setState(3937);
      match(Cobol85Parser::WITH);
      setState(3938);
      match(Cobol85Parser::WAIT);
      break;
    }

    default:
      break;
    }
    setState(3947);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::USING) {
      setState(3941);
      match(Cobol85Parser::USING);
      setState(3943); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(3942);
                closePortFileIOUsing();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(3945); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 529, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClosePortFileIOUsingContext ------------------------------------------------------------------

Cobol85Parser::ClosePortFileIOUsingContext::ClosePortFileIOUsingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::ClosePortFileIOUsingCloseDispositionContext* Cobol85Parser::ClosePortFileIOUsingContext::closePortFileIOUsingCloseDisposition() {
  return getRuleContext<Cobol85Parser::ClosePortFileIOUsingCloseDispositionContext>(0);
}

Cobol85Parser::ClosePortFileIOUsingAssociatedDataContext* Cobol85Parser::ClosePortFileIOUsingContext::closePortFileIOUsingAssociatedData() {
  return getRuleContext<Cobol85Parser::ClosePortFileIOUsingAssociatedDataContext>(0);
}

Cobol85Parser::ClosePortFileIOUsingAssociatedDataLengthContext* Cobol85Parser::ClosePortFileIOUsingContext::closePortFileIOUsingAssociatedDataLength() {
  return getRuleContext<Cobol85Parser::ClosePortFileIOUsingAssociatedDataLengthContext>(0);
}


size_t Cobol85Parser::ClosePortFileIOUsingContext::getRuleIndex() const {
  return Cobol85Parser::RuleClosePortFileIOUsing;
}

void Cobol85Parser::ClosePortFileIOUsingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClosePortFileIOUsing(this);
}

void Cobol85Parser::ClosePortFileIOUsingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClosePortFileIOUsing(this);
}

Cobol85Parser::ClosePortFileIOUsingContext* Cobol85Parser::closePortFileIOUsing() {
  ClosePortFileIOUsingContext *_localctx = _tracker.createInstance<ClosePortFileIOUsingContext>(_ctx, getState());
  enterRule(_localctx, 604, Cobol85Parser::RuleClosePortFileIOUsing);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3952);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Cobol85Parser::CLOSE_DISPOSITION: {
        enterOuterAlt(_localctx, 1);
        setState(3949);
        closePortFileIOUsingCloseDisposition();
        break;
      }

      case Cobol85Parser::ASSOCIATED_DATA: {
        enterOuterAlt(_localctx, 2);
        setState(3950);
        closePortFileIOUsingAssociatedData();
        break;
      }

      case Cobol85Parser::ASSOCIATED_DATA_LENGTH: {
        enterOuterAlt(_localctx, 3);
        setState(3951);
        closePortFileIOUsingAssociatedDataLength();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClosePortFileIOUsingCloseDispositionContext ------------------------------------------------------------------

Cobol85Parser::ClosePortFileIOUsingCloseDispositionContext::ClosePortFileIOUsingCloseDispositionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ClosePortFileIOUsingCloseDispositionContext::CLOSE_DISPOSITION() {
  return getToken(Cobol85Parser::CLOSE_DISPOSITION, 0);
}

tree::TerminalNode* Cobol85Parser::ClosePortFileIOUsingCloseDispositionContext::ABORT() {
  return getToken(Cobol85Parser::ABORT, 0);
}

tree::TerminalNode* Cobol85Parser::ClosePortFileIOUsingCloseDispositionContext::ORDERLY() {
  return getToken(Cobol85Parser::ORDERLY, 0);
}

tree::TerminalNode* Cobol85Parser::ClosePortFileIOUsingCloseDispositionContext::OF() {
  return getToken(Cobol85Parser::OF, 0);
}


size_t Cobol85Parser::ClosePortFileIOUsingCloseDispositionContext::getRuleIndex() const {
  return Cobol85Parser::RuleClosePortFileIOUsingCloseDisposition;
}

void Cobol85Parser::ClosePortFileIOUsingCloseDispositionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClosePortFileIOUsingCloseDisposition(this);
}

void Cobol85Parser::ClosePortFileIOUsingCloseDispositionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClosePortFileIOUsingCloseDisposition(this);
}

Cobol85Parser::ClosePortFileIOUsingCloseDispositionContext* Cobol85Parser::closePortFileIOUsingCloseDisposition() {
  ClosePortFileIOUsingCloseDispositionContext *_localctx = _tracker.createInstance<ClosePortFileIOUsingCloseDispositionContext>(_ctx, getState());
  enterRule(_localctx, 606, Cobol85Parser::RuleClosePortFileIOUsingCloseDisposition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3954);
    match(Cobol85Parser::CLOSE_DISPOSITION);
    setState(3956);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::OF) {
      setState(3955);
      match(Cobol85Parser::OF);
    }
    setState(3958);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::ABORT || _la == Cobol85Parser::ORDERLY)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClosePortFileIOUsingAssociatedDataContext ------------------------------------------------------------------

Cobol85Parser::ClosePortFileIOUsingAssociatedDataContext::ClosePortFileIOUsingAssociatedDataContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ClosePortFileIOUsingAssociatedDataContext::ASSOCIATED_DATA() {
  return getToken(Cobol85Parser::ASSOCIATED_DATA, 0);
}

Cobol85Parser::IdentifierContext* Cobol85Parser::ClosePortFileIOUsingAssociatedDataContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

Cobol85Parser::IntegerLiteralContext* Cobol85Parser::ClosePortFileIOUsingAssociatedDataContext::integerLiteral() {
  return getRuleContext<Cobol85Parser::IntegerLiteralContext>(0);
}


size_t Cobol85Parser::ClosePortFileIOUsingAssociatedDataContext::getRuleIndex() const {
  return Cobol85Parser::RuleClosePortFileIOUsingAssociatedData;
}

void Cobol85Parser::ClosePortFileIOUsingAssociatedDataContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClosePortFileIOUsingAssociatedData(this);
}

void Cobol85Parser::ClosePortFileIOUsingAssociatedDataContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClosePortFileIOUsingAssociatedData(this);
}

Cobol85Parser::ClosePortFileIOUsingAssociatedDataContext* Cobol85Parser::closePortFileIOUsingAssociatedData() {
  ClosePortFileIOUsingAssociatedDataContext *_localctx = _tracker.createInstance<ClosePortFileIOUsingAssociatedDataContext>(_ctx, getState());
  enterRule(_localctx, 608, Cobol85Parser::RuleClosePortFileIOUsingAssociatedData);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3960);
    match(Cobol85Parser::ASSOCIATED_DATA);
    setState(3963);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 533, _ctx)) {
    case 1: {
      setState(3961);
      identifier();
      break;
    }

    case 2: {
      setState(3962);
      integerLiteral();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClosePortFileIOUsingAssociatedDataLengthContext ------------------------------------------------------------------

Cobol85Parser::ClosePortFileIOUsingAssociatedDataLengthContext::ClosePortFileIOUsingAssociatedDataLengthContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ClosePortFileIOUsingAssociatedDataLengthContext::ASSOCIATED_DATA_LENGTH() {
  return getToken(Cobol85Parser::ASSOCIATED_DATA_LENGTH, 0);
}

Cobol85Parser::IdentifierContext* Cobol85Parser::ClosePortFileIOUsingAssociatedDataLengthContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

Cobol85Parser::IntegerLiteralContext* Cobol85Parser::ClosePortFileIOUsingAssociatedDataLengthContext::integerLiteral() {
  return getRuleContext<Cobol85Parser::IntegerLiteralContext>(0);
}

tree::TerminalNode* Cobol85Parser::ClosePortFileIOUsingAssociatedDataLengthContext::OF() {
  return getToken(Cobol85Parser::OF, 0);
}


size_t Cobol85Parser::ClosePortFileIOUsingAssociatedDataLengthContext::getRuleIndex() const {
  return Cobol85Parser::RuleClosePortFileIOUsingAssociatedDataLength;
}

void Cobol85Parser::ClosePortFileIOUsingAssociatedDataLengthContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClosePortFileIOUsingAssociatedDataLength(this);
}

void Cobol85Parser::ClosePortFileIOUsingAssociatedDataLengthContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClosePortFileIOUsingAssociatedDataLength(this);
}

Cobol85Parser::ClosePortFileIOUsingAssociatedDataLengthContext* Cobol85Parser::closePortFileIOUsingAssociatedDataLength() {
  ClosePortFileIOUsingAssociatedDataLengthContext *_localctx = _tracker.createInstance<ClosePortFileIOUsingAssociatedDataLengthContext>(_ctx, getState());
  enterRule(_localctx, 610, Cobol85Parser::RuleClosePortFileIOUsingAssociatedDataLength);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3965);
    match(Cobol85Parser::ASSOCIATED_DATA_LENGTH);
    setState(3967);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::OF) {
      setState(3966);
      match(Cobol85Parser::OF);
    }
    setState(3971);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 535, _ctx)) {
    case 1: {
      setState(3969);
      identifier();
      break;
    }

    case 2: {
      setState(3970);
      integerLiteral();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ComputeStatementContext ------------------------------------------------------------------

Cobol85Parser::ComputeStatementContext::ComputeStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ComputeStatementContext::COMPUTE() {
  return getToken(Cobol85Parser::COMPUTE, 0);
}

Cobol85Parser::ArithmeticExpressionContext* Cobol85Parser::ComputeStatementContext::arithmeticExpression() {
  return getRuleContext<Cobol85Parser::ArithmeticExpressionContext>(0);
}

tree::TerminalNode* Cobol85Parser::ComputeStatementContext::EQUALCHAR() {
  return getToken(Cobol85Parser::EQUALCHAR, 0);
}

tree::TerminalNode* Cobol85Parser::ComputeStatementContext::EQUAL() {
  return getToken(Cobol85Parser::EQUAL, 0);
}

std::vector<Cobol85Parser::ComputeStoreContext *> Cobol85Parser::ComputeStatementContext::computeStore() {
  return getRuleContexts<Cobol85Parser::ComputeStoreContext>();
}

Cobol85Parser::ComputeStoreContext* Cobol85Parser::ComputeStatementContext::computeStore(size_t i) {
  return getRuleContext<Cobol85Parser::ComputeStoreContext>(i);
}

Cobol85Parser::OnSizeErrorPhraseContext* Cobol85Parser::ComputeStatementContext::onSizeErrorPhrase() {
  return getRuleContext<Cobol85Parser::OnSizeErrorPhraseContext>(0);
}

Cobol85Parser::NotOnSizeErrorPhraseContext* Cobol85Parser::ComputeStatementContext::notOnSizeErrorPhrase() {
  return getRuleContext<Cobol85Parser::NotOnSizeErrorPhraseContext>(0);
}

tree::TerminalNode* Cobol85Parser::ComputeStatementContext::END_COMPUTE() {
  return getToken(Cobol85Parser::END_COMPUTE, 0);
}


size_t Cobol85Parser::ComputeStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleComputeStatement;
}

void Cobol85Parser::ComputeStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComputeStatement(this);
}

void Cobol85Parser::ComputeStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComputeStatement(this);
}

Cobol85Parser::ComputeStatementContext* Cobol85Parser::computeStatement() {
  ComputeStatementContext *_localctx = _tracker.createInstance<ComputeStatementContext>(_ctx, getState());
  enterRule(_localctx, 612, Cobol85Parser::RuleComputeStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3973);
    match(Cobol85Parser::COMPUTE);
    setState(3975); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(3974);
      computeStore();
      setState(3977); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3512999431135821858) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 8213661102500741635) != 0) || ((((_la - 138) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 138)) & 5276573893883339531) != 0) || ((((_la - 202) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 202)) & -3098194965423728639) != 0) || ((((_la - 268) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 268)) & -9202532752178961289) != 0) || ((((_la - 336) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 336)) & 4647874433930428515) != 0) || ((((_la - 401) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 401)) & 130978249457673) != 0) || ((((_la - 466) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 466)) & 103776312507334817) != 0) || ((((_la - 552) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 552)) & 47) != 0));
    setState(3979);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::EQUAL || _la == Cobol85Parser::EQUALCHAR)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(3980);
    arithmeticExpression();
    setState(3982);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 537, _ctx)) {
    case 1: {
      setState(3981);
      onSizeErrorPhrase();
      break;
    }

    default:
      break;
    }
    setState(3985);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 538, _ctx)) {
    case 1: {
      setState(3984);
      notOnSizeErrorPhrase();
      break;
    }

    default:
      break;
    }
    setState(3988);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 539, _ctx)) {
    case 1: {
      setState(3987);
      match(Cobol85Parser::END_COMPUTE);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ComputeStoreContext ------------------------------------------------------------------

Cobol85Parser::ComputeStoreContext::ComputeStoreContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::IdentifierContext* Cobol85Parser::ComputeStoreContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

tree::TerminalNode* Cobol85Parser::ComputeStoreContext::ROUNDED() {
  return getToken(Cobol85Parser::ROUNDED, 0);
}


size_t Cobol85Parser::ComputeStoreContext::getRuleIndex() const {
  return Cobol85Parser::RuleComputeStore;
}

void Cobol85Parser::ComputeStoreContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComputeStore(this);
}

void Cobol85Parser::ComputeStoreContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComputeStore(this);
}

Cobol85Parser::ComputeStoreContext* Cobol85Parser::computeStore() {
  ComputeStoreContext *_localctx = _tracker.createInstance<ComputeStoreContext>(_ctx, getState());
  enterRule(_localctx, 614, Cobol85Parser::RuleComputeStore);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3990);
    identifier();
    setState(3992);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::ROUNDED) {
      setState(3991);
      match(Cobol85Parser::ROUNDED);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ContinueStatementContext ------------------------------------------------------------------

Cobol85Parser::ContinueStatementContext::ContinueStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ContinueStatementContext::CONTINUE() {
  return getToken(Cobol85Parser::CONTINUE, 0);
}


size_t Cobol85Parser::ContinueStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleContinueStatement;
}

void Cobol85Parser::ContinueStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterContinueStatement(this);
}

void Cobol85Parser::ContinueStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitContinueStatement(this);
}

Cobol85Parser::ContinueStatementContext* Cobol85Parser::continueStatement() {
  ContinueStatementContext *_localctx = _tracker.createInstance<ContinueStatementContext>(_ctx, getState());
  enterRule(_localctx, 616, Cobol85Parser::RuleContinueStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3994);
    match(Cobol85Parser::CONTINUE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeleteStatementContext ------------------------------------------------------------------

Cobol85Parser::DeleteStatementContext::DeleteStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::DeleteStatementContext::DELETE() {
  return getToken(Cobol85Parser::DELETE, 0);
}

Cobol85Parser::FileNameContext* Cobol85Parser::DeleteStatementContext::fileName() {
  return getRuleContext<Cobol85Parser::FileNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::DeleteStatementContext::RECORD() {
  return getToken(Cobol85Parser::RECORD, 0);
}

Cobol85Parser::InvalidKeyPhraseContext* Cobol85Parser::DeleteStatementContext::invalidKeyPhrase() {
  return getRuleContext<Cobol85Parser::InvalidKeyPhraseContext>(0);
}

Cobol85Parser::NotInvalidKeyPhraseContext* Cobol85Parser::DeleteStatementContext::notInvalidKeyPhrase() {
  return getRuleContext<Cobol85Parser::NotInvalidKeyPhraseContext>(0);
}

tree::TerminalNode* Cobol85Parser::DeleteStatementContext::END_DELETE() {
  return getToken(Cobol85Parser::END_DELETE, 0);
}


size_t Cobol85Parser::DeleteStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleDeleteStatement;
}

void Cobol85Parser::DeleteStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeleteStatement(this);
}

void Cobol85Parser::DeleteStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeleteStatement(this);
}

Cobol85Parser::DeleteStatementContext* Cobol85Parser::deleteStatement() {
  DeleteStatementContext *_localctx = _tracker.createInstance<DeleteStatementContext>(_ctx, getState());
  enterRule(_localctx, 618, Cobol85Parser::RuleDeleteStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3996);
    match(Cobol85Parser::DELETE);
    setState(3997);
    fileName();
    setState(3999);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::RECORD) {
      setState(3998);
      match(Cobol85Parser::RECORD);
    }
    setState(4002);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 542, _ctx)) {
    case 1: {
      setState(4001);
      invalidKeyPhrase();
      break;
    }

    default:
      break;
    }
    setState(4005);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 543, _ctx)) {
    case 1: {
      setState(4004);
      notInvalidKeyPhrase();
      break;
    }

    default:
      break;
    }
    setState(4008);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 544, _ctx)) {
    case 1: {
      setState(4007);
      match(Cobol85Parser::END_DELETE);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DisableStatementContext ------------------------------------------------------------------

Cobol85Parser::DisableStatementContext::DisableStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::DisableStatementContext::DISABLE() {
  return getToken(Cobol85Parser::DISABLE, 0);
}

Cobol85Parser::CdNameContext* Cobol85Parser::DisableStatementContext::cdName() {
  return getRuleContext<Cobol85Parser::CdNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::DisableStatementContext::KEY() {
  return getToken(Cobol85Parser::KEY, 0);
}

tree::TerminalNode* Cobol85Parser::DisableStatementContext::INPUT() {
  return getToken(Cobol85Parser::INPUT, 0);
}

tree::TerminalNode* Cobol85Parser::DisableStatementContext::I_O() {
  return getToken(Cobol85Parser::I_O, 0);
}

tree::TerminalNode* Cobol85Parser::DisableStatementContext::TERMINAL() {
  return getToken(Cobol85Parser::TERMINAL, 0);
}

tree::TerminalNode* Cobol85Parser::DisableStatementContext::OUTPUT() {
  return getToken(Cobol85Parser::OUTPUT, 0);
}

Cobol85Parser::IdentifierContext* Cobol85Parser::DisableStatementContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

Cobol85Parser::LiteralContext* Cobol85Parser::DisableStatementContext::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}

tree::TerminalNode* Cobol85Parser::DisableStatementContext::WITH() {
  return getToken(Cobol85Parser::WITH, 0);
}


size_t Cobol85Parser::DisableStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleDisableStatement;
}

void Cobol85Parser::DisableStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDisableStatement(this);
}

void Cobol85Parser::DisableStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDisableStatement(this);
}

Cobol85Parser::DisableStatementContext* Cobol85Parser::disableStatement() {
  DisableStatementContext *_localctx = _tracker.createInstance<DisableStatementContext>(_ctx, getState());
  enterRule(_localctx, 620, Cobol85Parser::RuleDisableStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4010);
    match(Cobol85Parser::DISABLE);
    setState(4018);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Cobol85Parser::INPUT: {
        setState(4011);
        match(Cobol85Parser::INPUT);
        setState(4013);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Cobol85Parser::TERMINAL) {
          setState(4012);
          match(Cobol85Parser::TERMINAL);
        }
        break;
      }

      case Cobol85Parser::I_O: {
        setState(4015);
        match(Cobol85Parser::I_O);
        setState(4016);
        match(Cobol85Parser::TERMINAL);
        break;
      }

      case Cobol85Parser::OUTPUT: {
        setState(4017);
        match(Cobol85Parser::OUTPUT);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(4020);
    cdName();
    setState(4022);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::WITH) {
      setState(4021);
      match(Cobol85Parser::WITH);
    }
    setState(4024);
    match(Cobol85Parser::KEY);
    setState(4027);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 548, _ctx)) {
    case 1: {
      setState(4025);
      identifier();
      break;
    }

    case 2: {
      setState(4026);
      literal();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DisplayStatementContext ------------------------------------------------------------------

Cobol85Parser::DisplayStatementContext::DisplayStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::DisplayStatementContext::DISPLAY() {
  return getToken(Cobol85Parser::DISPLAY, 0);
}

std::vector<Cobol85Parser::DisplayOperandContext *> Cobol85Parser::DisplayStatementContext::displayOperand() {
  return getRuleContexts<Cobol85Parser::DisplayOperandContext>();
}

Cobol85Parser::DisplayOperandContext* Cobol85Parser::DisplayStatementContext::displayOperand(size_t i) {
  return getRuleContext<Cobol85Parser::DisplayOperandContext>(i);
}

Cobol85Parser::DisplayAtContext* Cobol85Parser::DisplayStatementContext::displayAt() {
  return getRuleContext<Cobol85Parser::DisplayAtContext>(0);
}

Cobol85Parser::DisplayUponContext* Cobol85Parser::DisplayStatementContext::displayUpon() {
  return getRuleContext<Cobol85Parser::DisplayUponContext>(0);
}

Cobol85Parser::DisplayWithContext* Cobol85Parser::DisplayStatementContext::displayWith() {
  return getRuleContext<Cobol85Parser::DisplayWithContext>(0);
}


size_t Cobol85Parser::DisplayStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleDisplayStatement;
}

void Cobol85Parser::DisplayStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDisplayStatement(this);
}

void Cobol85Parser::DisplayStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDisplayStatement(this);
}

Cobol85Parser::DisplayStatementContext* Cobol85Parser::displayStatement() {
  DisplayStatementContext *_localctx = _tracker.createInstance<DisplayStatementContext>(_ctx, getState());
  enterRule(_localctx, 622, Cobol85Parser::RuleDisplayStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4029);
    match(Cobol85Parser::DISPLAY);
    setState(4031); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(4030);
      displayOperand();
      setState(4033); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3512999431135822370) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 8213661102500741635) != 0) || ((((_la - 138) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 138)) & 5276573893883339531) != 0) || ((((_la - 202) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 202)) & -3098194964618422267) != 0) || ((((_la - 268) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 268)) & -9202427199037528969) != 0) || ((((_la - 336) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 336)) & 4647874440372879459) != 0) || ((((_la - 401) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 401)) & 1819828109721609) != 0) || ((((_la - 466) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 466)) & 572150674022301857) != 0) || ((((_la - 551) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 551)) & 127) != 0));
    setState(4036);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 550, _ctx)) {
    case 1: {
      setState(4035);
      displayAt();
      break;
    }

    default:
      break;
    }
    setState(4039);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::UPON) {
      setState(4038);
      displayUpon();
    }
    setState(4042);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 552, _ctx)) {
    case 1: {
      setState(4041);
      displayWith();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DisplayOperandContext ------------------------------------------------------------------

Cobol85Parser::DisplayOperandContext::DisplayOperandContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::IdentifierContext* Cobol85Parser::DisplayOperandContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

Cobol85Parser::LiteralContext* Cobol85Parser::DisplayOperandContext::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}


size_t Cobol85Parser::DisplayOperandContext::getRuleIndex() const {
  return Cobol85Parser::RuleDisplayOperand;
}

void Cobol85Parser::DisplayOperandContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDisplayOperand(this);
}

void Cobol85Parser::DisplayOperandContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDisplayOperand(this);
}

Cobol85Parser::DisplayOperandContext* Cobol85Parser::displayOperand() {
  DisplayOperandContext *_localctx = _tracker.createInstance<DisplayOperandContext>(_ctx, getState());
  enterRule(_localctx, 624, Cobol85Parser::RuleDisplayOperand);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4046);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 553, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4044);
      identifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4045);
      literal();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DisplayAtContext ------------------------------------------------------------------

Cobol85Parser::DisplayAtContext::DisplayAtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::DisplayAtContext::AT() {
  return getToken(Cobol85Parser::AT, 0);
}

Cobol85Parser::IdentifierContext* Cobol85Parser::DisplayAtContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

Cobol85Parser::LiteralContext* Cobol85Parser::DisplayAtContext::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}


size_t Cobol85Parser::DisplayAtContext::getRuleIndex() const {
  return Cobol85Parser::RuleDisplayAt;
}

void Cobol85Parser::DisplayAtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDisplayAt(this);
}

void Cobol85Parser::DisplayAtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDisplayAt(this);
}

Cobol85Parser::DisplayAtContext* Cobol85Parser::displayAt() {
  DisplayAtContext *_localctx = _tracker.createInstance<DisplayAtContext>(_ctx, getState());
  enterRule(_localctx, 626, Cobol85Parser::RuleDisplayAt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4048);
    match(Cobol85Parser::AT);
    setState(4051);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 554, _ctx)) {
    case 1: {
      setState(4049);
      identifier();
      break;
    }

    case 2: {
      setState(4050);
      literal();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DisplayUponContext ------------------------------------------------------------------

Cobol85Parser::DisplayUponContext::DisplayUponContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::DisplayUponContext::UPON() {
  return getToken(Cobol85Parser::UPON, 0);
}

Cobol85Parser::MnemonicNameContext* Cobol85Parser::DisplayUponContext::mnemonicName() {
  return getRuleContext<Cobol85Parser::MnemonicNameContext>(0);
}

Cobol85Parser::EnvironmentNameContext* Cobol85Parser::DisplayUponContext::environmentName() {
  return getRuleContext<Cobol85Parser::EnvironmentNameContext>(0);
}


size_t Cobol85Parser::DisplayUponContext::getRuleIndex() const {
  return Cobol85Parser::RuleDisplayUpon;
}

void Cobol85Parser::DisplayUponContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDisplayUpon(this);
}

void Cobol85Parser::DisplayUponContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDisplayUpon(this);
}

Cobol85Parser::DisplayUponContext* Cobol85Parser::displayUpon() {
  DisplayUponContext *_localctx = _tracker.createInstance<DisplayUponContext>(_ctx, getState());
  enterRule(_localctx, 628, Cobol85Parser::RuleDisplayUpon);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4053);
    match(Cobol85Parser::UPON);
    setState(4056);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 555, _ctx)) {
    case 1: {
      setState(4054);
      mnemonicName();
      break;
    }

    case 2: {
      setState(4055);
      environmentName();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DisplayWithContext ------------------------------------------------------------------

Cobol85Parser::DisplayWithContext::DisplayWithContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::DisplayWithContext::NO() {
  return getToken(Cobol85Parser::NO, 0);
}

tree::TerminalNode* Cobol85Parser::DisplayWithContext::ADVANCING() {
  return getToken(Cobol85Parser::ADVANCING, 0);
}

tree::TerminalNode* Cobol85Parser::DisplayWithContext::WITH() {
  return getToken(Cobol85Parser::WITH, 0);
}


size_t Cobol85Parser::DisplayWithContext::getRuleIndex() const {
  return Cobol85Parser::RuleDisplayWith;
}

void Cobol85Parser::DisplayWithContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDisplayWith(this);
}

void Cobol85Parser::DisplayWithContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDisplayWith(this);
}

Cobol85Parser::DisplayWithContext* Cobol85Parser::displayWith() {
  DisplayWithContext *_localctx = _tracker.createInstance<DisplayWithContext>(_ctx, getState());
  enterRule(_localctx, 630, Cobol85Parser::RuleDisplayWith);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4059);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::WITH) {
      setState(4058);
      match(Cobol85Parser::WITH);
    }
    setState(4061);
    match(Cobol85Parser::NO);
    setState(4062);
    match(Cobol85Parser::ADVANCING);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DivideStatementContext ------------------------------------------------------------------

Cobol85Parser::DivideStatementContext::DivideStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::DivideStatementContext::DIVIDE() {
  return getToken(Cobol85Parser::DIVIDE, 0);
}

Cobol85Parser::IdentifierContext* Cobol85Parser::DivideStatementContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

Cobol85Parser::LiteralContext* Cobol85Parser::DivideStatementContext::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}

Cobol85Parser::DivideIntoStatementContext* Cobol85Parser::DivideStatementContext::divideIntoStatement() {
  return getRuleContext<Cobol85Parser::DivideIntoStatementContext>(0);
}

Cobol85Parser::DivideIntoGivingStatementContext* Cobol85Parser::DivideStatementContext::divideIntoGivingStatement() {
  return getRuleContext<Cobol85Parser::DivideIntoGivingStatementContext>(0);
}

Cobol85Parser::DivideByGivingStatementContext* Cobol85Parser::DivideStatementContext::divideByGivingStatement() {
  return getRuleContext<Cobol85Parser::DivideByGivingStatementContext>(0);
}

Cobol85Parser::DivideRemainderContext* Cobol85Parser::DivideStatementContext::divideRemainder() {
  return getRuleContext<Cobol85Parser::DivideRemainderContext>(0);
}

Cobol85Parser::OnSizeErrorPhraseContext* Cobol85Parser::DivideStatementContext::onSizeErrorPhrase() {
  return getRuleContext<Cobol85Parser::OnSizeErrorPhraseContext>(0);
}

Cobol85Parser::NotOnSizeErrorPhraseContext* Cobol85Parser::DivideStatementContext::notOnSizeErrorPhrase() {
  return getRuleContext<Cobol85Parser::NotOnSizeErrorPhraseContext>(0);
}

tree::TerminalNode* Cobol85Parser::DivideStatementContext::END_DIVIDE() {
  return getToken(Cobol85Parser::END_DIVIDE, 0);
}


size_t Cobol85Parser::DivideStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleDivideStatement;
}

void Cobol85Parser::DivideStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDivideStatement(this);
}

void Cobol85Parser::DivideStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDivideStatement(this);
}

Cobol85Parser::DivideStatementContext* Cobol85Parser::divideStatement() {
  DivideStatementContext *_localctx = _tracker.createInstance<DivideStatementContext>(_ctx, getState());
  enterRule(_localctx, 632, Cobol85Parser::RuleDivideStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4064);
    match(Cobol85Parser::DIVIDE);
    setState(4067);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 557, _ctx)) {
    case 1: {
      setState(4065);
      identifier();
      break;
    }

    case 2: {
      setState(4066);
      literal();
      break;
    }

    default:
      break;
    }
    setState(4072);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 558, _ctx)) {
    case 1: {
      setState(4069);
      divideIntoStatement();
      break;
    }

    case 2: {
      setState(4070);
      divideIntoGivingStatement();
      break;
    }

    case 3: {
      setState(4071);
      divideByGivingStatement();
      break;
    }

    default:
      break;
    }
    setState(4075);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::REMAINDER) {
      setState(4074);
      divideRemainder();
    }
    setState(4078);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 560, _ctx)) {
    case 1: {
      setState(4077);
      onSizeErrorPhrase();
      break;
    }

    default:
      break;
    }
    setState(4081);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 561, _ctx)) {
    case 1: {
      setState(4080);
      notOnSizeErrorPhrase();
      break;
    }

    default:
      break;
    }
    setState(4084);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 562, _ctx)) {
    case 1: {
      setState(4083);
      match(Cobol85Parser::END_DIVIDE);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DivideIntoStatementContext ------------------------------------------------------------------

Cobol85Parser::DivideIntoStatementContext::DivideIntoStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::DivideIntoStatementContext::INTO() {
  return getToken(Cobol85Parser::INTO, 0);
}

std::vector<Cobol85Parser::DivideIntoContext *> Cobol85Parser::DivideIntoStatementContext::divideInto() {
  return getRuleContexts<Cobol85Parser::DivideIntoContext>();
}

Cobol85Parser::DivideIntoContext* Cobol85Parser::DivideIntoStatementContext::divideInto(size_t i) {
  return getRuleContext<Cobol85Parser::DivideIntoContext>(i);
}


size_t Cobol85Parser::DivideIntoStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleDivideIntoStatement;
}

void Cobol85Parser::DivideIntoStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDivideIntoStatement(this);
}

void Cobol85Parser::DivideIntoStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDivideIntoStatement(this);
}

Cobol85Parser::DivideIntoStatementContext* Cobol85Parser::divideIntoStatement() {
  DivideIntoStatementContext *_localctx = _tracker.createInstance<DivideIntoStatementContext>(_ctx, getState());
  enterRule(_localctx, 634, Cobol85Parser::RuleDivideIntoStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4086);
    match(Cobol85Parser::INTO);
    setState(4088); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(4087);
      divideInto();
      setState(4090); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3512999431135821858) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 8213661102500741635) != 0) || ((((_la - 138) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 138)) & 5276573893883339531) != 0) || ((((_la - 202) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 202)) & -3098194965423728639) != 0) || ((((_la - 268) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 268)) & -9202532752178961289) != 0) || ((((_la - 336) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 336)) & 4647874433930428515) != 0) || ((((_la - 401) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 401)) & 130978249457673) != 0) || ((((_la - 466) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 466)) & 103776312507334817) != 0) || ((((_la - 552) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 552)) & 47) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DivideIntoGivingStatementContext ------------------------------------------------------------------

Cobol85Parser::DivideIntoGivingStatementContext::DivideIntoGivingStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::DivideIntoGivingStatementContext::INTO() {
  return getToken(Cobol85Parser::INTO, 0);
}

Cobol85Parser::IdentifierContext* Cobol85Parser::DivideIntoGivingStatementContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

Cobol85Parser::LiteralContext* Cobol85Parser::DivideIntoGivingStatementContext::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}

Cobol85Parser::DivideGivingPhraseContext* Cobol85Parser::DivideIntoGivingStatementContext::divideGivingPhrase() {
  return getRuleContext<Cobol85Parser::DivideGivingPhraseContext>(0);
}


size_t Cobol85Parser::DivideIntoGivingStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleDivideIntoGivingStatement;
}

void Cobol85Parser::DivideIntoGivingStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDivideIntoGivingStatement(this);
}

void Cobol85Parser::DivideIntoGivingStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDivideIntoGivingStatement(this);
}

Cobol85Parser::DivideIntoGivingStatementContext* Cobol85Parser::divideIntoGivingStatement() {
  DivideIntoGivingStatementContext *_localctx = _tracker.createInstance<DivideIntoGivingStatementContext>(_ctx, getState());
  enterRule(_localctx, 636, Cobol85Parser::RuleDivideIntoGivingStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4092);
    match(Cobol85Parser::INTO);
    setState(4095);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 564, _ctx)) {
    case 1: {
      setState(4093);
      identifier();
      break;
    }

    case 2: {
      setState(4094);
      literal();
      break;
    }

    default:
      break;
    }
    setState(4098);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::GIVING) {
      setState(4097);
      divideGivingPhrase();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DivideByGivingStatementContext ------------------------------------------------------------------

Cobol85Parser::DivideByGivingStatementContext::DivideByGivingStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::DivideByGivingStatementContext::BY() {
  return getToken(Cobol85Parser::BY, 0);
}

Cobol85Parser::IdentifierContext* Cobol85Parser::DivideByGivingStatementContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

Cobol85Parser::LiteralContext* Cobol85Parser::DivideByGivingStatementContext::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}

Cobol85Parser::DivideGivingPhraseContext* Cobol85Parser::DivideByGivingStatementContext::divideGivingPhrase() {
  return getRuleContext<Cobol85Parser::DivideGivingPhraseContext>(0);
}


size_t Cobol85Parser::DivideByGivingStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleDivideByGivingStatement;
}

void Cobol85Parser::DivideByGivingStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDivideByGivingStatement(this);
}

void Cobol85Parser::DivideByGivingStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDivideByGivingStatement(this);
}

Cobol85Parser::DivideByGivingStatementContext* Cobol85Parser::divideByGivingStatement() {
  DivideByGivingStatementContext *_localctx = _tracker.createInstance<DivideByGivingStatementContext>(_ctx, getState());
  enterRule(_localctx, 638, Cobol85Parser::RuleDivideByGivingStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4100);
    match(Cobol85Parser::BY);
    setState(4103);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 566, _ctx)) {
    case 1: {
      setState(4101);
      identifier();
      break;
    }

    case 2: {
      setState(4102);
      literal();
      break;
    }

    default:
      break;
    }
    setState(4106);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::GIVING) {
      setState(4105);
      divideGivingPhrase();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DivideGivingPhraseContext ------------------------------------------------------------------

Cobol85Parser::DivideGivingPhraseContext::DivideGivingPhraseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::DivideGivingPhraseContext::GIVING() {
  return getToken(Cobol85Parser::GIVING, 0);
}

std::vector<Cobol85Parser::DivideGivingContext *> Cobol85Parser::DivideGivingPhraseContext::divideGiving() {
  return getRuleContexts<Cobol85Parser::DivideGivingContext>();
}

Cobol85Parser::DivideGivingContext* Cobol85Parser::DivideGivingPhraseContext::divideGiving(size_t i) {
  return getRuleContext<Cobol85Parser::DivideGivingContext>(i);
}


size_t Cobol85Parser::DivideGivingPhraseContext::getRuleIndex() const {
  return Cobol85Parser::RuleDivideGivingPhrase;
}

void Cobol85Parser::DivideGivingPhraseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDivideGivingPhrase(this);
}

void Cobol85Parser::DivideGivingPhraseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDivideGivingPhrase(this);
}

Cobol85Parser::DivideGivingPhraseContext* Cobol85Parser::divideGivingPhrase() {
  DivideGivingPhraseContext *_localctx = _tracker.createInstance<DivideGivingPhraseContext>(_ctx, getState());
  enterRule(_localctx, 640, Cobol85Parser::RuleDivideGivingPhrase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4108);
    match(Cobol85Parser::GIVING);
    setState(4110); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(4109);
      divideGiving();
      setState(4112); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3512999431135821858) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 8213661102500741635) != 0) || ((((_la - 138) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 138)) & 5276573893883339531) != 0) || ((((_la - 202) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 202)) & -3098194965423728639) != 0) || ((((_la - 268) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 268)) & -9202532752178961289) != 0) || ((((_la - 336) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 336)) & 4647874433930428515) != 0) || ((((_la - 401) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 401)) & 130978249457673) != 0) || ((((_la - 466) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 466)) & 103776312507334817) != 0) || ((((_la - 552) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 552)) & 47) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DivideIntoContext ------------------------------------------------------------------

Cobol85Parser::DivideIntoContext::DivideIntoContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::IdentifierContext* Cobol85Parser::DivideIntoContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

tree::TerminalNode* Cobol85Parser::DivideIntoContext::ROUNDED() {
  return getToken(Cobol85Parser::ROUNDED, 0);
}


size_t Cobol85Parser::DivideIntoContext::getRuleIndex() const {
  return Cobol85Parser::RuleDivideInto;
}

void Cobol85Parser::DivideIntoContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDivideInto(this);
}

void Cobol85Parser::DivideIntoContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDivideInto(this);
}

Cobol85Parser::DivideIntoContext* Cobol85Parser::divideInto() {
  DivideIntoContext *_localctx = _tracker.createInstance<DivideIntoContext>(_ctx, getState());
  enterRule(_localctx, 642, Cobol85Parser::RuleDivideInto);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4114);
    identifier();
    setState(4116);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::ROUNDED) {
      setState(4115);
      match(Cobol85Parser::ROUNDED);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DivideGivingContext ------------------------------------------------------------------

Cobol85Parser::DivideGivingContext::DivideGivingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::IdentifierContext* Cobol85Parser::DivideGivingContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

tree::TerminalNode* Cobol85Parser::DivideGivingContext::ROUNDED() {
  return getToken(Cobol85Parser::ROUNDED, 0);
}


size_t Cobol85Parser::DivideGivingContext::getRuleIndex() const {
  return Cobol85Parser::RuleDivideGiving;
}

void Cobol85Parser::DivideGivingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDivideGiving(this);
}

void Cobol85Parser::DivideGivingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDivideGiving(this);
}

Cobol85Parser::DivideGivingContext* Cobol85Parser::divideGiving() {
  DivideGivingContext *_localctx = _tracker.createInstance<DivideGivingContext>(_ctx, getState());
  enterRule(_localctx, 644, Cobol85Parser::RuleDivideGiving);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4118);
    identifier();
    setState(4120);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::ROUNDED) {
      setState(4119);
      match(Cobol85Parser::ROUNDED);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DivideRemainderContext ------------------------------------------------------------------

Cobol85Parser::DivideRemainderContext::DivideRemainderContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::DivideRemainderContext::REMAINDER() {
  return getToken(Cobol85Parser::REMAINDER, 0);
}

Cobol85Parser::IdentifierContext* Cobol85Parser::DivideRemainderContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}


size_t Cobol85Parser::DivideRemainderContext::getRuleIndex() const {
  return Cobol85Parser::RuleDivideRemainder;
}

void Cobol85Parser::DivideRemainderContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDivideRemainder(this);
}

void Cobol85Parser::DivideRemainderContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDivideRemainder(this);
}

Cobol85Parser::DivideRemainderContext* Cobol85Parser::divideRemainder() {
  DivideRemainderContext *_localctx = _tracker.createInstance<DivideRemainderContext>(_ctx, getState());
  enterRule(_localctx, 646, Cobol85Parser::RuleDivideRemainder);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4122);
    match(Cobol85Parser::REMAINDER);
    setState(4123);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnableStatementContext ------------------------------------------------------------------

Cobol85Parser::EnableStatementContext::EnableStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::EnableStatementContext::ENABLE() {
  return getToken(Cobol85Parser::ENABLE, 0);
}

Cobol85Parser::CdNameContext* Cobol85Parser::EnableStatementContext::cdName() {
  return getRuleContext<Cobol85Parser::CdNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::EnableStatementContext::KEY() {
  return getToken(Cobol85Parser::KEY, 0);
}

tree::TerminalNode* Cobol85Parser::EnableStatementContext::INPUT() {
  return getToken(Cobol85Parser::INPUT, 0);
}

tree::TerminalNode* Cobol85Parser::EnableStatementContext::I_O() {
  return getToken(Cobol85Parser::I_O, 0);
}

tree::TerminalNode* Cobol85Parser::EnableStatementContext::TERMINAL() {
  return getToken(Cobol85Parser::TERMINAL, 0);
}

tree::TerminalNode* Cobol85Parser::EnableStatementContext::OUTPUT() {
  return getToken(Cobol85Parser::OUTPUT, 0);
}

Cobol85Parser::LiteralContext* Cobol85Parser::EnableStatementContext::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}

Cobol85Parser::IdentifierContext* Cobol85Parser::EnableStatementContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

tree::TerminalNode* Cobol85Parser::EnableStatementContext::WITH() {
  return getToken(Cobol85Parser::WITH, 0);
}


size_t Cobol85Parser::EnableStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleEnableStatement;
}

void Cobol85Parser::EnableStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnableStatement(this);
}

void Cobol85Parser::EnableStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnableStatement(this);
}

Cobol85Parser::EnableStatementContext* Cobol85Parser::enableStatement() {
  EnableStatementContext *_localctx = _tracker.createInstance<EnableStatementContext>(_ctx, getState());
  enterRule(_localctx, 648, Cobol85Parser::RuleEnableStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4125);
    match(Cobol85Parser::ENABLE);
    setState(4133);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Cobol85Parser::INPUT: {
        setState(4126);
        match(Cobol85Parser::INPUT);
        setState(4128);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Cobol85Parser::TERMINAL) {
          setState(4127);
          match(Cobol85Parser::TERMINAL);
        }
        break;
      }

      case Cobol85Parser::I_O: {
        setState(4130);
        match(Cobol85Parser::I_O);
        setState(4131);
        match(Cobol85Parser::TERMINAL);
        break;
      }

      case Cobol85Parser::OUTPUT: {
        setState(4132);
        match(Cobol85Parser::OUTPUT);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(4135);
    cdName();
    setState(4137);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::WITH) {
      setState(4136);
      match(Cobol85Parser::WITH);
    }
    setState(4139);
    match(Cobol85Parser::KEY);
    setState(4142);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 574, _ctx)) {
    case 1: {
      setState(4140);
      literal();
      break;
    }

    case 2: {
      setState(4141);
      identifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EntryStatementContext ------------------------------------------------------------------

Cobol85Parser::EntryStatementContext::EntryStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::EntryStatementContext::ENTRY() {
  return getToken(Cobol85Parser::ENTRY, 0);
}

Cobol85Parser::LiteralContext* Cobol85Parser::EntryStatementContext::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}

tree::TerminalNode* Cobol85Parser::EntryStatementContext::USING() {
  return getToken(Cobol85Parser::USING, 0);
}

std::vector<Cobol85Parser::IdentifierContext *> Cobol85Parser::EntryStatementContext::identifier() {
  return getRuleContexts<Cobol85Parser::IdentifierContext>();
}

Cobol85Parser::IdentifierContext* Cobol85Parser::EntryStatementContext::identifier(size_t i) {
  return getRuleContext<Cobol85Parser::IdentifierContext>(i);
}


size_t Cobol85Parser::EntryStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleEntryStatement;
}

void Cobol85Parser::EntryStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEntryStatement(this);
}

void Cobol85Parser::EntryStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEntryStatement(this);
}

Cobol85Parser::EntryStatementContext* Cobol85Parser::entryStatement() {
  EntryStatementContext *_localctx = _tracker.createInstance<EntryStatementContext>(_ctx, getState());
  enterRule(_localctx, 650, Cobol85Parser::RuleEntryStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4144);
    match(Cobol85Parser::ENTRY);
    setState(4145);
    literal();
    setState(4152);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::USING) {
      setState(4146);
      match(Cobol85Parser::USING);
      setState(4148); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(4147);
        identifier();
        setState(4150); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 3512999431135821858) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 68)) & 8213661102500741635) != 0) || ((((_la - 138) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 138)) & 5276573893883339531) != 0) || ((((_la - 202) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 202)) & -3098194965423728639) != 0) || ((((_la - 268) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 268)) & -9202532752178961289) != 0) || ((((_la - 336) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 336)) & 4647874433930428515) != 0) || ((((_la - 401) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 401)) & 130978249457673) != 0) || ((((_la - 466) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 466)) & 103776312507334817) != 0) || ((((_la - 552) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 552)) & 47) != 0));
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EvaluateStatementContext ------------------------------------------------------------------

Cobol85Parser::EvaluateStatementContext::EvaluateStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::EvaluateStatementContext::EVALUATE() {
  return getToken(Cobol85Parser::EVALUATE, 0);
}

Cobol85Parser::EvaluateSelectContext* Cobol85Parser::EvaluateStatementContext::evaluateSelect() {
  return getRuleContext<Cobol85Parser::EvaluateSelectContext>(0);
}

std::vector<Cobol85Parser::EvaluateAlsoSelectContext *> Cobol85Parser::EvaluateStatementContext::evaluateAlsoSelect() {
  return getRuleContexts<Cobol85Parser::EvaluateAlsoSelectContext>();
}

Cobol85Parser::EvaluateAlsoSelectContext* Cobol85Parser::EvaluateStatementContext::evaluateAlsoSelect(size_t i) {
  return getRuleContext<Cobol85Parser::EvaluateAlsoSelectContext>(i);
}

std::vector<Cobol85Parser::EvaluateWhenPhraseContext *> Cobol85Parser::EvaluateStatementContext::evaluateWhenPhrase() {
  return getRuleContexts<Cobol85Parser::EvaluateWhenPhraseContext>();
}

Cobol85Parser::EvaluateWhenPhraseContext* Cobol85Parser::EvaluateStatementContext::evaluateWhenPhrase(size_t i) {
  return getRuleContext<Cobol85Parser::EvaluateWhenPhraseContext>(i);
}

Cobol85Parser::EvaluateWhenOtherContext* Cobol85Parser::EvaluateStatementContext::evaluateWhenOther() {
  return getRuleContext<Cobol85Parser::EvaluateWhenOtherContext>(0);
}

tree::TerminalNode* Cobol85Parser::EvaluateStatementContext::END_EVALUATE() {
  return getToken(Cobol85Parser::END_EVALUATE, 0);
}


size_t Cobol85Parser::EvaluateStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleEvaluateStatement;
}

void Cobol85Parser::EvaluateStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEvaluateStatement(this);
}

void Cobol85Parser::EvaluateStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEvaluateStatement(this);
}

Cobol85Parser::EvaluateStatementContext* Cobol85Parser::evaluateStatement() {
  EvaluateStatementContext *_localctx = _tracker.createInstance<EvaluateStatementContext>(_ctx, getState());
  enterRule(_localctx, 652, Cobol85Parser::RuleEvaluateStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(4154);
    match(Cobol85Parser::EVALUATE);
    setState(4155);
    evaluateSelect();
    setState(4159);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Cobol85Parser::ALSO) {
      setState(4156);
      evaluateAlsoSelect();
      setState(4161);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(4163); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(4162);
              evaluateWhenPhrase();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(4165); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 578, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(4168);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 579, _ctx)) {
    case 1: {
      setState(4167);
      evaluateWhenOther();
      break;
    }

    default:
      break;
    }
    setState(4171);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 580, _ctx)) {
    case 1: {
      setState(4170);
      match(Cobol85Parser::END_EVALUATE);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EvaluateSelectContext ------------------------------------------------------------------

Cobol85Parser::EvaluateSelectContext::EvaluateSelectContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::IdentifierContext* Cobol85Parser::EvaluateSelectContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

Cobol85Parser::LiteralContext* Cobol85Parser::EvaluateSelectContext::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}

Cobol85Parser::ArithmeticExpressionContext* Cobol85Parser::EvaluateSelectContext::arithmeticExpression() {
  return getRuleContext<Cobol85Parser::ArithmeticExpressionContext>(0);
}

Cobol85Parser::ConditionContext* Cobol85Parser::EvaluateSelectContext::condition() {
  return getRuleContext<Cobol85Parser::ConditionContext>(0);
}


size_t Cobol85Parser::EvaluateSelectContext::getRuleIndex() const {
  return Cobol85Parser::RuleEvaluateSelect;
}

void Cobol85Parser::EvaluateSelectContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEvaluateSelect(this);
}

void Cobol85Parser::EvaluateSelectContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEvaluateSelect(this);
}

Cobol85Parser::EvaluateSelectContext* Cobol85Parser::evaluateSelect() {
  EvaluateSelectContext *_localctx = _tracker.createInstance<EvaluateSelectContext>(_ctx, getState());
  enterRule(_localctx, 654, Cobol85Parser::RuleEvaluateSelect);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4177);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 581, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4173);
      identifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4174);
      literal();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(4175);
      arithmeticExpression();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(4176);
      condition();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EvaluateAlsoSelectContext ------------------------------------------------------------------

Cobol85Parser::EvaluateAlsoSelectContext::EvaluateAlsoSelectContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::EvaluateAlsoSelectContext::ALSO() {
  return getToken(Cobol85Parser::ALSO, 0);
}

Cobol85Parser::EvaluateSelectContext* Cobol85Parser::EvaluateAlsoSelectContext::evaluateSelect() {
  return getRuleContext<Cobol85Parser::EvaluateSelectContext>(0);
}


size_t Cobol85Parser::EvaluateAlsoSelectContext::getRuleIndex() const {
  return Cobol85Parser::RuleEvaluateAlsoSelect;
}

void Cobol85Parser::EvaluateAlsoSelectContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEvaluateAlsoSelect(this);
}

void Cobol85Parser::EvaluateAlsoSelectContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEvaluateAlsoSelect(this);
}

Cobol85Parser::EvaluateAlsoSelectContext* Cobol85Parser::evaluateAlsoSelect() {
  EvaluateAlsoSelectContext *_localctx = _tracker.createInstance<EvaluateAlsoSelectContext>(_ctx, getState());
  enterRule(_localctx, 656, Cobol85Parser::RuleEvaluateAlsoSelect);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4179);
    match(Cobol85Parser::ALSO);
    setState(4180);
    evaluateSelect();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EvaluateWhenPhraseContext ------------------------------------------------------------------

Cobol85Parser::EvaluateWhenPhraseContext::EvaluateWhenPhraseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Cobol85Parser::EvaluateWhenContext *> Cobol85Parser::EvaluateWhenPhraseContext::evaluateWhen() {
  return getRuleContexts<Cobol85Parser::EvaluateWhenContext>();
}

Cobol85Parser::EvaluateWhenContext* Cobol85Parser::EvaluateWhenPhraseContext::evaluateWhen(size_t i) {
  return getRuleContext<Cobol85Parser::EvaluateWhenContext>(i);
}

std::vector<Cobol85Parser::StatementContext *> Cobol85Parser::EvaluateWhenPhraseContext::statement() {
  return getRuleContexts<Cobol85Parser::StatementContext>();
}

Cobol85Parser::StatementContext* Cobol85Parser::EvaluateWhenPhraseContext::statement(size_t i) {
  return getRuleContext<Cobol85Parser::StatementContext>(i);
}


size_t Cobol85Parser::EvaluateWhenPhraseContext::getRuleIndex() const {
  return Cobol85Parser::RuleEvaluateWhenPhrase;
}

void Cobol85Parser::EvaluateWhenPhraseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEvaluateWhenPhrase(this);
}

void Cobol85Parser::EvaluateWhenPhraseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEvaluateWhenPhrase(this);
}

Cobol85Parser::EvaluateWhenPhraseContext* Cobol85Parser::evaluateWhenPhrase() {
  EvaluateWhenPhraseContext *_localctx = _tracker.createInstance<EvaluateWhenPhraseContext>(_ctx, getState());
  enterRule(_localctx, 658, Cobol85Parser::RuleEvaluateWhenPhrase);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(4183); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(4182);
              evaluateWhen();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(4185); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 582, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(4190);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 583, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(4187);
        statement(); 
      }
      setState(4192);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 583, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EvaluateWhenContext ------------------------------------------------------------------

Cobol85Parser::EvaluateWhenContext::EvaluateWhenContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::EvaluateWhenContext::WHEN() {
  return getToken(Cobol85Parser::WHEN, 0);
}

Cobol85Parser::EvaluateConditionContext* Cobol85Parser::EvaluateWhenContext::evaluateCondition() {
  return getRuleContext<Cobol85Parser::EvaluateConditionContext>(0);
}

std::vector<Cobol85Parser::EvaluateAlsoConditionContext *> Cobol85Parser::EvaluateWhenContext::evaluateAlsoCondition() {
  return getRuleContexts<Cobol85Parser::EvaluateAlsoConditionContext>();
}

Cobol85Parser::EvaluateAlsoConditionContext* Cobol85Parser::EvaluateWhenContext::evaluateAlsoCondition(size_t i) {
  return getRuleContext<Cobol85Parser::EvaluateAlsoConditionContext>(i);
}


size_t Cobol85Parser::EvaluateWhenContext::getRuleIndex() const {
  return Cobol85Parser::RuleEvaluateWhen;
}

void Cobol85Parser::EvaluateWhenContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEvaluateWhen(this);
}

void Cobol85Parser::EvaluateWhenContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEvaluateWhen(this);
}

Cobol85Parser::EvaluateWhenContext* Cobol85Parser::evaluateWhen() {
  EvaluateWhenContext *_localctx = _tracker.createInstance<EvaluateWhenContext>(_ctx, getState());
  enterRule(_localctx, 660, Cobol85Parser::RuleEvaluateWhen);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4193);
    match(Cobol85Parser::WHEN);
    setState(4194);
    evaluateCondition();
    setState(4198);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Cobol85Parser::ALSO) {
      setState(4195);
      evaluateAlsoCondition();
      setState(4200);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EvaluateConditionContext ------------------------------------------------------------------

Cobol85Parser::EvaluateConditionContext::EvaluateConditionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::EvaluateConditionContext::ANY() {
  return getToken(Cobol85Parser::ANY, 0);
}

Cobol85Parser::EvaluateValueContext* Cobol85Parser::EvaluateConditionContext::evaluateValue() {
  return getRuleContext<Cobol85Parser::EvaluateValueContext>(0);
}

tree::TerminalNode* Cobol85Parser::EvaluateConditionContext::NOT() {
  return getToken(Cobol85Parser::NOT, 0);
}

Cobol85Parser::EvaluateThroughContext* Cobol85Parser::EvaluateConditionContext::evaluateThrough() {
  return getRuleContext<Cobol85Parser::EvaluateThroughContext>(0);
}

Cobol85Parser::ConditionContext* Cobol85Parser::EvaluateConditionContext::condition() {
  return getRuleContext<Cobol85Parser::ConditionContext>(0);
}

Cobol85Parser::BooleanLiteralContext* Cobol85Parser::EvaluateConditionContext::booleanLiteral() {
  return getRuleContext<Cobol85Parser::BooleanLiteralContext>(0);
}


size_t Cobol85Parser::EvaluateConditionContext::getRuleIndex() const {
  return Cobol85Parser::RuleEvaluateCondition;
}

void Cobol85Parser::EvaluateConditionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEvaluateCondition(this);
}

void Cobol85Parser::EvaluateConditionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEvaluateCondition(this);
}

Cobol85Parser::EvaluateConditionContext* Cobol85Parser::evaluateCondition() {
  EvaluateConditionContext *_localctx = _tracker.createInstance<EvaluateConditionContext>(_ctx, getState());
  enterRule(_localctx, 662, Cobol85Parser::RuleEvaluateCondition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4211);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 587, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4201);
      match(Cobol85Parser::ANY);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4203);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Cobol85Parser::NOT) {
        setState(4202);
        match(Cobol85Parser::NOT);
      }
      setState(4205);
      evaluateValue();
      setState(4207);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Cobol85Parser::THROUGH

      || _la == Cobol85Parser::THRU) {
        setState(4206);
        evaluateThrough();
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(4209);
      condition();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(4210);
      booleanLiteral();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EvaluateThroughContext ------------------------------------------------------------------

Cobol85Parser::EvaluateThroughContext::EvaluateThroughContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::EvaluateValueContext* Cobol85Parser::EvaluateThroughContext::evaluateValue() {
  return getRuleContext<Cobol85Parser::EvaluateValueContext>(0);
}

tree::TerminalNode* Cobol85Parser::EvaluateThroughContext::THROUGH() {
  return getToken(Cobol85Parser::THROUGH, 0);
}

tree::TerminalNode* Cobol85Parser::EvaluateThroughContext::THRU() {
  return getToken(Cobol85Parser::THRU, 0);
}


size_t Cobol85Parser::EvaluateThroughContext::getRuleIndex() const {
  return Cobol85Parser::RuleEvaluateThrough;
}

void Cobol85Parser::EvaluateThroughContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEvaluateThrough(this);
}

void Cobol85Parser::EvaluateThroughContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEvaluateThrough(this);
}

Cobol85Parser::EvaluateThroughContext* Cobol85Parser::evaluateThrough() {
  EvaluateThroughContext *_localctx = _tracker.createInstance<EvaluateThroughContext>(_ctx, getState());
  enterRule(_localctx, 664, Cobol85Parser::RuleEvaluateThrough);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4213);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::THROUGH

    || _la == Cobol85Parser::THRU)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(4214);
    evaluateValue();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EvaluateAlsoConditionContext ------------------------------------------------------------------

Cobol85Parser::EvaluateAlsoConditionContext::EvaluateAlsoConditionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::EvaluateAlsoConditionContext::ALSO() {
  return getToken(Cobol85Parser::ALSO, 0);
}

Cobol85Parser::EvaluateConditionContext* Cobol85Parser::EvaluateAlsoConditionContext::evaluateCondition() {
  return getRuleContext<Cobol85Parser::EvaluateConditionContext>(0);
}


size_t Cobol85Parser::EvaluateAlsoConditionContext::getRuleIndex() const {
  return Cobol85Parser::RuleEvaluateAlsoCondition;
}

void Cobol85Parser::EvaluateAlsoConditionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEvaluateAlsoCondition(this);
}

void Cobol85Parser::EvaluateAlsoConditionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEvaluateAlsoCondition(this);
}

Cobol85Parser::EvaluateAlsoConditionContext* Cobol85Parser::evaluateAlsoCondition() {
  EvaluateAlsoConditionContext *_localctx = _tracker.createInstance<EvaluateAlsoConditionContext>(_ctx, getState());
  enterRule(_localctx, 666, Cobol85Parser::RuleEvaluateAlsoCondition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4216);
    match(Cobol85Parser::ALSO);
    setState(4217);
    evaluateCondition();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EvaluateWhenOtherContext ------------------------------------------------------------------

Cobol85Parser::EvaluateWhenOtherContext::EvaluateWhenOtherContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::EvaluateWhenOtherContext::WHEN() {
  return getToken(Cobol85Parser::WHEN, 0);
}

tree::TerminalNode* Cobol85Parser::EvaluateWhenOtherContext::OTHER() {
  return getToken(Cobol85Parser::OTHER, 0);
}

std::vector<Cobol85Parser::StatementContext *> Cobol85Parser::EvaluateWhenOtherContext::statement() {
  return getRuleContexts<Cobol85Parser::StatementContext>();
}

Cobol85Parser::StatementContext* Cobol85Parser::EvaluateWhenOtherContext::statement(size_t i) {
  return getRuleContext<Cobol85Parser::StatementContext>(i);
}


size_t Cobol85Parser::EvaluateWhenOtherContext::getRuleIndex() const {
  return Cobol85Parser::RuleEvaluateWhenOther;
}

void Cobol85Parser::EvaluateWhenOtherContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEvaluateWhenOther(this);
}

void Cobol85Parser::EvaluateWhenOtherContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEvaluateWhenOther(this);
}

Cobol85Parser::EvaluateWhenOtherContext* Cobol85Parser::evaluateWhenOther() {
  EvaluateWhenOtherContext *_localctx = _tracker.createInstance<EvaluateWhenOtherContext>(_ctx, getState());
  enterRule(_localctx, 668, Cobol85Parser::RuleEvaluateWhenOther);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(4219);
    match(Cobol85Parser::WHEN);
    setState(4220);
    match(Cobol85Parser::OTHER);
    setState(4224);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 588, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(4221);
        statement(); 
      }
      setState(4226);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 588, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EvaluateValueContext ------------------------------------------------------------------

Cobol85Parser::EvaluateValueContext::EvaluateValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::IdentifierContext* Cobol85Parser::EvaluateValueContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

Cobol85Parser::LiteralContext* Cobol85Parser::EvaluateValueContext::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}

Cobol85Parser::ArithmeticExpressionContext* Cobol85Parser::EvaluateValueContext::arithmeticExpression() {
  return getRuleContext<Cobol85Parser::ArithmeticExpressionContext>(0);
}


size_t Cobol85Parser::EvaluateValueContext::getRuleIndex() const {
  return Cobol85Parser::RuleEvaluateValue;
}

void Cobol85Parser::EvaluateValueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEvaluateValue(this);
}

void Cobol85Parser::EvaluateValueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEvaluateValue(this);
}

Cobol85Parser::EvaluateValueContext* Cobol85Parser::evaluateValue() {
  EvaluateValueContext *_localctx = _tracker.createInstance<EvaluateValueContext>(_ctx, getState());
  enterRule(_localctx, 670, Cobol85Parser::RuleEvaluateValue);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4230);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 589, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4227);
      identifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4228);
      literal();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(4229);
      arithmeticExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExecCicsStatementContext ------------------------------------------------------------------

Cobol85Parser::ExecCicsStatementContext::ExecCicsStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> Cobol85Parser::ExecCicsStatementContext::EXECCICSLINE() {
  return getTokens(Cobol85Parser::EXECCICSLINE);
}

tree::TerminalNode* Cobol85Parser::ExecCicsStatementContext::EXECCICSLINE(size_t i) {
  return getToken(Cobol85Parser::EXECCICSLINE, i);
}


size_t Cobol85Parser::ExecCicsStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleExecCicsStatement;
}

void Cobol85Parser::ExecCicsStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExecCicsStatement(this);
}

void Cobol85Parser::ExecCicsStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExecCicsStatement(this);
}

Cobol85Parser::ExecCicsStatementContext* Cobol85Parser::execCicsStatement() {
  ExecCicsStatementContext *_localctx = _tracker.createInstance<ExecCicsStatementContext>(_ctx, getState());
  enterRule(_localctx, 672, Cobol85Parser::RuleExecCicsStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(4233); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(4232);
              match(Cobol85Parser::EXECCICSLINE);
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(4235); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 590, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExecSqlStatementContext ------------------------------------------------------------------

Cobol85Parser::ExecSqlStatementContext::ExecSqlStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> Cobol85Parser::ExecSqlStatementContext::EXECSQLLINE() {
  return getTokens(Cobol85Parser::EXECSQLLINE);
}

tree::TerminalNode* Cobol85Parser::ExecSqlStatementContext::EXECSQLLINE(size_t i) {
  return getToken(Cobol85Parser::EXECSQLLINE, i);
}


size_t Cobol85Parser::ExecSqlStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleExecSqlStatement;
}

void Cobol85Parser::ExecSqlStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExecSqlStatement(this);
}

void Cobol85Parser::ExecSqlStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExecSqlStatement(this);
}

Cobol85Parser::ExecSqlStatementContext* Cobol85Parser::execSqlStatement() {
  ExecSqlStatementContext *_localctx = _tracker.createInstance<ExecSqlStatementContext>(_ctx, getState());
  enterRule(_localctx, 674, Cobol85Parser::RuleExecSqlStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(4238); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(4237);
              match(Cobol85Parser::EXECSQLLINE);
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(4240); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 591, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExecSqlImsStatementContext ------------------------------------------------------------------

Cobol85Parser::ExecSqlImsStatementContext::ExecSqlImsStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> Cobol85Parser::ExecSqlImsStatementContext::EXECSQLIMSLINE() {
  return getTokens(Cobol85Parser::EXECSQLIMSLINE);
}

tree::TerminalNode* Cobol85Parser::ExecSqlImsStatementContext::EXECSQLIMSLINE(size_t i) {
  return getToken(Cobol85Parser::EXECSQLIMSLINE, i);
}


size_t Cobol85Parser::ExecSqlImsStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleExecSqlImsStatement;
}

void Cobol85Parser::ExecSqlImsStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExecSqlImsStatement(this);
}

void Cobol85Parser::ExecSqlImsStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExecSqlImsStatement(this);
}

Cobol85Parser::ExecSqlImsStatementContext* Cobol85Parser::execSqlImsStatement() {
  ExecSqlImsStatementContext *_localctx = _tracker.createInstance<ExecSqlImsStatementContext>(_ctx, getState());
  enterRule(_localctx, 676, Cobol85Parser::RuleExecSqlImsStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(4243); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(4242);
              match(Cobol85Parser::EXECSQLIMSLINE);
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(4245); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 592, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExhibitStatementContext ------------------------------------------------------------------

Cobol85Parser::ExhibitStatementContext::ExhibitStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ExhibitStatementContext::EXHIBIT() {
  return getToken(Cobol85Parser::EXHIBIT, 0);
}

tree::TerminalNode* Cobol85Parser::ExhibitStatementContext::NAMED() {
  return getToken(Cobol85Parser::NAMED, 0);
}

tree::TerminalNode* Cobol85Parser::ExhibitStatementContext::CHANGED() {
  return getToken(Cobol85Parser::CHANGED, 0);
}

std::vector<Cobol85Parser::ExhibitOperandContext *> Cobol85Parser::ExhibitStatementContext::exhibitOperand() {
  return getRuleContexts<Cobol85Parser::ExhibitOperandContext>();
}

Cobol85Parser::ExhibitOperandContext* Cobol85Parser::ExhibitStatementContext::exhibitOperand(size_t i) {
  return getRuleContext<Cobol85Parser::ExhibitOperandContext>(i);
}


size_t Cobol85Parser::ExhibitStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleExhibitStatement;
}

void Cobol85Parser::ExhibitStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExhibitStatement(this);
}

void Cobol85Parser::ExhibitStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExhibitStatement(this);
}

Cobol85Parser::ExhibitStatementContext* Cobol85Parser::exhibitStatement() {
  ExhibitStatementContext *_localctx = _tracker.createInstance<ExhibitStatementContext>(_ctx, getState());
  enterRule(_localctx, 678, Cobol85Parser::RuleExhibitStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4247);
    match(Cobol85Parser::EXHIBIT);
    setState(4249);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 593, _ctx)) {
    case 1: {
      setState(4248);
      match(Cobol85Parser::NAMED);
      break;
    }

    default:
      break;
    }
    setState(4252);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 594, _ctx)) {
    case 1: {
      setState(4251);
      match(Cobol85Parser::CHANGED);
      break;
    }

    default:
      break;
    }
    setState(4255); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(4254);
      exhibitOperand();
      setState(4257); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3512999431135822370) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 8213661102500741635) != 0) || ((((_la - 138) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 138)) & 5276573893883339531) != 0) || ((((_la - 202) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 202)) & -3098194964618422267) != 0) || ((((_la - 268) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 268)) & -9202427199037528969) != 0) || ((((_la - 336) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 336)) & 4647874440372879459) != 0) || ((((_la - 401) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 401)) & 1819828109721609) != 0) || ((((_la - 466) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 466)) & 572150674022301857) != 0) || ((((_la - 551) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 551)) & 127) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExhibitOperandContext ------------------------------------------------------------------

Cobol85Parser::ExhibitOperandContext::ExhibitOperandContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::IdentifierContext* Cobol85Parser::ExhibitOperandContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

Cobol85Parser::LiteralContext* Cobol85Parser::ExhibitOperandContext::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}


size_t Cobol85Parser::ExhibitOperandContext::getRuleIndex() const {
  return Cobol85Parser::RuleExhibitOperand;
}

void Cobol85Parser::ExhibitOperandContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExhibitOperand(this);
}

void Cobol85Parser::ExhibitOperandContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExhibitOperand(this);
}

Cobol85Parser::ExhibitOperandContext* Cobol85Parser::exhibitOperand() {
  ExhibitOperandContext *_localctx = _tracker.createInstance<ExhibitOperandContext>(_ctx, getState());
  enterRule(_localctx, 680, Cobol85Parser::RuleExhibitOperand);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4261);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 596, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4259);
      identifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4260);
      literal();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExitStatementContext ------------------------------------------------------------------

Cobol85Parser::ExitStatementContext::ExitStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ExitStatementContext::EXIT() {
  return getToken(Cobol85Parser::EXIT, 0);
}

tree::TerminalNode* Cobol85Parser::ExitStatementContext::PROGRAM() {
  return getToken(Cobol85Parser::PROGRAM, 0);
}


size_t Cobol85Parser::ExitStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleExitStatement;
}

void Cobol85Parser::ExitStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExitStatement(this);
}

void Cobol85Parser::ExitStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExitStatement(this);
}

Cobol85Parser::ExitStatementContext* Cobol85Parser::exitStatement() {
  ExitStatementContext *_localctx = _tracker.createInstance<ExitStatementContext>(_ctx, getState());
  enterRule(_localctx, 682, Cobol85Parser::RuleExitStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4263);
    match(Cobol85Parser::EXIT);
    setState(4265);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::PROGRAM) {
      setState(4264);
      match(Cobol85Parser::PROGRAM);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GenerateStatementContext ------------------------------------------------------------------

Cobol85Parser::GenerateStatementContext::GenerateStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::GenerateStatementContext::GENERATE() {
  return getToken(Cobol85Parser::GENERATE, 0);
}

Cobol85Parser::ReportNameContext* Cobol85Parser::GenerateStatementContext::reportName() {
  return getRuleContext<Cobol85Parser::ReportNameContext>(0);
}


size_t Cobol85Parser::GenerateStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleGenerateStatement;
}

void Cobol85Parser::GenerateStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGenerateStatement(this);
}

void Cobol85Parser::GenerateStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGenerateStatement(this);
}

Cobol85Parser::GenerateStatementContext* Cobol85Parser::generateStatement() {
  GenerateStatementContext *_localctx = _tracker.createInstance<GenerateStatementContext>(_ctx, getState());
  enterRule(_localctx, 684, Cobol85Parser::RuleGenerateStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4267);
    match(Cobol85Parser::GENERATE);
    setState(4268);
    reportName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GobackStatementContext ------------------------------------------------------------------

Cobol85Parser::GobackStatementContext::GobackStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::GobackStatementContext::GOBACK() {
  return getToken(Cobol85Parser::GOBACK, 0);
}


size_t Cobol85Parser::GobackStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleGobackStatement;
}

void Cobol85Parser::GobackStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGobackStatement(this);
}

void Cobol85Parser::GobackStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGobackStatement(this);
}

Cobol85Parser::GobackStatementContext* Cobol85Parser::gobackStatement() {
  GobackStatementContext *_localctx = _tracker.createInstance<GobackStatementContext>(_ctx, getState());
  enterRule(_localctx, 686, Cobol85Parser::RuleGobackStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4270);
    match(Cobol85Parser::GOBACK);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GoToStatementContext ------------------------------------------------------------------

Cobol85Parser::GoToStatementContext::GoToStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::GoToStatementContext::GO() {
  return getToken(Cobol85Parser::GO, 0);
}

Cobol85Parser::GoToStatementSimpleContext* Cobol85Parser::GoToStatementContext::goToStatementSimple() {
  return getRuleContext<Cobol85Parser::GoToStatementSimpleContext>(0);
}

Cobol85Parser::GoToDependingOnStatementContext* Cobol85Parser::GoToStatementContext::goToDependingOnStatement() {
  return getRuleContext<Cobol85Parser::GoToDependingOnStatementContext>(0);
}

tree::TerminalNode* Cobol85Parser::GoToStatementContext::TO() {
  return getToken(Cobol85Parser::TO, 0);
}


size_t Cobol85Parser::GoToStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleGoToStatement;
}

void Cobol85Parser::GoToStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGoToStatement(this);
}

void Cobol85Parser::GoToStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGoToStatement(this);
}

Cobol85Parser::GoToStatementContext* Cobol85Parser::goToStatement() {
  GoToStatementContext *_localctx = _tracker.createInstance<GoToStatementContext>(_ctx, getState());
  enterRule(_localctx, 688, Cobol85Parser::RuleGoToStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4272);
    match(Cobol85Parser::GO);
    setState(4274);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::TO) {
      setState(4273);
      match(Cobol85Parser::TO);
    }
    setState(4278);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 599, _ctx)) {
    case 1: {
      setState(4276);
      goToStatementSimple();
      break;
    }

    case 2: {
      setState(4277);
      goToDependingOnStatement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GoToStatementSimpleContext ------------------------------------------------------------------

Cobol85Parser::GoToStatementSimpleContext::GoToStatementSimpleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::ProcedureNameContext* Cobol85Parser::GoToStatementSimpleContext::procedureName() {
  return getRuleContext<Cobol85Parser::ProcedureNameContext>(0);
}


size_t Cobol85Parser::GoToStatementSimpleContext::getRuleIndex() const {
  return Cobol85Parser::RuleGoToStatementSimple;
}

void Cobol85Parser::GoToStatementSimpleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGoToStatementSimple(this);
}

void Cobol85Parser::GoToStatementSimpleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGoToStatementSimple(this);
}

Cobol85Parser::GoToStatementSimpleContext* Cobol85Parser::goToStatementSimple() {
  GoToStatementSimpleContext *_localctx = _tracker.createInstance<GoToStatementSimpleContext>(_ctx, getState());
  enterRule(_localctx, 690, Cobol85Parser::RuleGoToStatementSimple);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4280);
    procedureName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GoToDependingOnStatementContext ------------------------------------------------------------------

Cobol85Parser::GoToDependingOnStatementContext::GoToDependingOnStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::GoToDependingOnStatementContext::MORE_LABELS() {
  return getToken(Cobol85Parser::MORE_LABELS, 0);
}

std::vector<Cobol85Parser::ProcedureNameContext *> Cobol85Parser::GoToDependingOnStatementContext::procedureName() {
  return getRuleContexts<Cobol85Parser::ProcedureNameContext>();
}

Cobol85Parser::ProcedureNameContext* Cobol85Parser::GoToDependingOnStatementContext::procedureName(size_t i) {
  return getRuleContext<Cobol85Parser::ProcedureNameContext>(i);
}

tree::TerminalNode* Cobol85Parser::GoToDependingOnStatementContext::DEPENDING() {
  return getToken(Cobol85Parser::DEPENDING, 0);
}

Cobol85Parser::IdentifierContext* Cobol85Parser::GoToDependingOnStatementContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

tree::TerminalNode* Cobol85Parser::GoToDependingOnStatementContext::ON() {
  return getToken(Cobol85Parser::ON, 0);
}


size_t Cobol85Parser::GoToDependingOnStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleGoToDependingOnStatement;
}

void Cobol85Parser::GoToDependingOnStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGoToDependingOnStatement(this);
}

void Cobol85Parser::GoToDependingOnStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGoToDependingOnStatement(this);
}

Cobol85Parser::GoToDependingOnStatementContext* Cobol85Parser::goToDependingOnStatement() {
  GoToDependingOnStatementContext *_localctx = _tracker.createInstance<GoToDependingOnStatementContext>(_ctx, getState());
  enterRule(_localctx, 692, Cobol85Parser::RuleGoToDependingOnStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4295);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Cobol85Parser::MORE_LABELS: {
        enterOuterAlt(_localctx, 1);
        setState(4282);
        match(Cobol85Parser::MORE_LABELS);
        break;
      }

      case Cobol85Parser::ABORT:
      case Cobol85Parser::AS:
      case Cobol85Parser::ASCII:
      case Cobol85Parser::ASSOCIATED_DATA:
      case Cobol85Parser::ASSOCIATED_DATA_LENGTH:
      case Cobol85Parser::ATTRIBUTE:
      case Cobol85Parser::AUTO:
      case Cobol85Parser::AUTO_SKIP:
      case Cobol85Parser::BACKGROUND_COLOR:
      case Cobol85Parser::BACKGROUND_COLOUR:
      case Cobol85Parser::BEEP:
      case Cobol85Parser::BELL:
      case Cobol85Parser::BINARY:
      case Cobol85Parser::BIT:
      case Cobol85Parser::BLINK:
      case Cobol85Parser::BOUNDS:
      case Cobol85Parser::CAPABLE:
      case Cobol85Parser::CCSVERSION:
      case Cobol85Parser::CHANGED:
      case Cobol85Parser::CHANNEL:
      case Cobol85Parser::CLOSE_DISPOSITION:
      case Cobol85Parser::COBOL:
      case Cobol85Parser::COMMITMENT:
      case Cobol85Parser::CONTROL_POINT:
      case Cobol85Parser::CONVENTION:
      case Cobol85Parser::CRUNCH:
      case Cobol85Parser::CURSOR:
      case Cobol85Parser::DEFAULT:
      case Cobol85Parser::DEFAULT_DISPLAY:
      case Cobol85Parser::DEFINITION:
      case Cobol85Parser::DFHRESP:
      case Cobol85Parser::DFHVALUE:
      case Cobol85Parser::DISK:
      case Cobol85Parser::DONTCARE:
      case Cobol85Parser::DOUBLE:
      case Cobol85Parser::EBCDIC:
      case Cobol85Parser::EMPTY_CHECK:
      case Cobol85Parser::ENTER:
      case Cobol85Parser::ENTRY_PROCEDURE:
      case Cobol85Parser::ERASE:
      case Cobol85Parser::EOL:
      case Cobol85Parser::EOS:
      case Cobol85Parser::ESCAPE:
      case Cobol85Parser::EVENT:
      case Cobol85Parser::EXCLUSIVE:
      case Cobol85Parser::EXPORT:
      case Cobol85Parser::EXTENDED:
      case Cobol85Parser::FOREGROUND_COLOR:
      case Cobol85Parser::FOREGROUND_COLOUR:
      case Cobol85Parser::FULL:
      case Cobol85Parser::FUNCTIONNAME:
      case Cobol85Parser::FUNCTION_POINTER:
      case Cobol85Parser::GRID:
      case Cobol85Parser::HIGHLIGHT:
      case Cobol85Parser::IMPLICIT:
      case Cobol85Parser::IMPORT:
      case Cobol85Parser::INTEGER:
      case Cobol85Parser::KEPT:
      case Cobol85Parser::KEYBOARD:
      case Cobol85Parser::LANGUAGE:
      case Cobol85Parser::LB:
      case Cobol85Parser::LD:
      case Cobol85Parser::LEFTLINE:
      case Cobol85Parser::LENGTH_CHECK:
      case Cobol85Parser::LIBACCESS:
      case Cobol85Parser::LIBPARAMETER:
      case Cobol85Parser::LIBRARY:
      case Cobol85Parser::LIST:
      case Cobol85Parser::LOCAL:
      case Cobol85Parser::LONG_DATE:
      case Cobol85Parser::LONG_TIME:
      case Cobol85Parser::LOWER:
      case Cobol85Parser::LOWLIGHT:
      case Cobol85Parser::MMDDYYYY:
      case Cobol85Parser::NAMED:
      case Cobol85Parser::NATIONAL:
      case Cobol85Parser::NATIONAL_EDITED:
      case Cobol85Parser::NETWORK:
      case Cobol85Parser::NO_ECHO:
      case Cobol85Parser::NUMERIC_DATE:
      case Cobol85Parser::NUMERIC_TIME:
      case Cobol85Parser::ODT:
      case Cobol85Parser::ORDERLY:
      case Cobol85Parser::OVERLINE:
      case Cobol85Parser::OWN:
      case Cobol85Parser::PASSWORD:
      case Cobol85Parser::PORT:
      case Cobol85Parser::PRINTER:
      case Cobol85Parser::PRIVATE:
      case Cobol85Parser::PROCESS:
      case Cobol85Parser::PROGRAM:
      case Cobol85Parser::PROMPT:
      case Cobol85Parser::READER:
      case Cobol85Parser::REMOTE:
      case Cobol85Parser::REAL:
      case Cobol85Parser::RECEIVED:
      case Cobol85Parser::RECURSIVE:
      case Cobol85Parser::REF:
      case Cobol85Parser::REMOVE:
      case Cobol85Parser::REQUIRED:
      case Cobol85Parser::REVERSE_VIDEO:
      case Cobol85Parser::SAVE:
      case Cobol85Parser::SECURE:
      case Cobol85Parser::SHARED:
      case Cobol85Parser::SHAREDBYALL:
      case Cobol85Parser::SHAREDBYRUNUNIT:
      case Cobol85Parser::SHARING:
      case Cobol85Parser::SHORT_DATE:
      case Cobol85Parser::SYMBOL:
      case Cobol85Parser::TASK:
      case Cobol85Parser::THREAD:
      case Cobol85Parser::THREAD_LOCAL:
      case Cobol85Parser::TIMER:
      case Cobol85Parser::TODAYS_DATE:
      case Cobol85Parser::TODAYS_NAME:
      case Cobol85Parser::TRUNCATED:
      case Cobol85Parser::TYPEDEF:
      case Cobol85Parser::UNDERLINE:
      case Cobol85Parser::VIRTUAL:
      case Cobol85Parser::WAIT:
      case Cobol85Parser::YEAR:
      case Cobol85Parser::YYYYMMDD:
      case Cobol85Parser::YYYYDDD:
      case Cobol85Parser::ZERO_FILL:
      case Cobol85Parser::LEVEL_NUMBER_66:
      case Cobol85Parser::LEVEL_NUMBER_77:
      case Cobol85Parser::LEVEL_NUMBER_88:
      case Cobol85Parser::INTEGERLITERAL:
      case Cobol85Parser::IDENTIFIER: {
        enterOuterAlt(_localctx, 2);
        setState(4284); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(4283);
          procedureName();
          setState(4286); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 3512999431135821826) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 68)) & 8070451912006173187) != 0) || ((((_la - 138) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 138)) & 5276573893883339531) != 0) || ((((_la - 202) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 202)) & -3098194965423761407) != 0) || ((((_la - 268) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 268)) & -9202532752178970507) != 0) || ((((_la - 336) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 336)) & 4647874433930428483) != 0) || ((((_la - 401) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 401)) & 84826144769) != 0) || ((((_la - 466) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 466)) & 103635575018455169) != 0) || ((((_la - 552) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 552)) & 47) != 0));
        setState(4293);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Cobol85Parser::DEPENDING) {
          setState(4288);
          match(Cobol85Parser::DEPENDING);
          setState(4290);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == Cobol85Parser::ON) {
            setState(4289);
            match(Cobol85Parser::ON);
          }
          setState(4292);
          identifier();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IfStatementContext ------------------------------------------------------------------

Cobol85Parser::IfStatementContext::IfStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::IfStatementContext::IF() {
  return getToken(Cobol85Parser::IF, 0);
}

Cobol85Parser::ConditionContext* Cobol85Parser::IfStatementContext::condition() {
  return getRuleContext<Cobol85Parser::ConditionContext>(0);
}

Cobol85Parser::IfThenContext* Cobol85Parser::IfStatementContext::ifThen() {
  return getRuleContext<Cobol85Parser::IfThenContext>(0);
}

Cobol85Parser::IfElseContext* Cobol85Parser::IfStatementContext::ifElse() {
  return getRuleContext<Cobol85Parser::IfElseContext>(0);
}

tree::TerminalNode* Cobol85Parser::IfStatementContext::END_IF() {
  return getToken(Cobol85Parser::END_IF, 0);
}


size_t Cobol85Parser::IfStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleIfStatement;
}

void Cobol85Parser::IfStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIfStatement(this);
}

void Cobol85Parser::IfStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIfStatement(this);
}

Cobol85Parser::IfStatementContext* Cobol85Parser::ifStatement() {
  IfStatementContext *_localctx = _tracker.createInstance<IfStatementContext>(_ctx, getState());
  enterRule(_localctx, 694, Cobol85Parser::RuleIfStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4297);
    match(Cobol85Parser::IF);
    setState(4298);
    condition();
    setState(4299);
    ifThen();
    setState(4301);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 604, _ctx)) {
    case 1: {
      setState(4300);
      ifElse();
      break;
    }

    default:
      break;
    }
    setState(4304);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 605, _ctx)) {
    case 1: {
      setState(4303);
      match(Cobol85Parser::END_IF);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IfThenContext ------------------------------------------------------------------

Cobol85Parser::IfThenContext::IfThenContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::IfThenContext::NEXT() {
  return getToken(Cobol85Parser::NEXT, 0);
}

tree::TerminalNode* Cobol85Parser::IfThenContext::SENTENCE() {
  return getToken(Cobol85Parser::SENTENCE, 0);
}

tree::TerminalNode* Cobol85Parser::IfThenContext::THEN() {
  return getToken(Cobol85Parser::THEN, 0);
}

std::vector<Cobol85Parser::StatementContext *> Cobol85Parser::IfThenContext::statement() {
  return getRuleContexts<Cobol85Parser::StatementContext>();
}

Cobol85Parser::StatementContext* Cobol85Parser::IfThenContext::statement(size_t i) {
  return getRuleContext<Cobol85Parser::StatementContext>(i);
}


size_t Cobol85Parser::IfThenContext::getRuleIndex() const {
  return Cobol85Parser::RuleIfThen;
}

void Cobol85Parser::IfThenContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIfThen(this);
}

void Cobol85Parser::IfThenContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIfThen(this);
}

Cobol85Parser::IfThenContext* Cobol85Parser::ifThen() {
  IfThenContext *_localctx = _tracker.createInstance<IfThenContext>(_ctx, getState());
  enterRule(_localctx, 696, Cobol85Parser::RuleIfThen);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(4307);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::THEN) {
      setState(4306);
      match(Cobol85Parser::THEN);
    }
    setState(4317);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Cobol85Parser::NEXT: {
        setState(4309);
        match(Cobol85Parser::NEXT);
        setState(4310);
        match(Cobol85Parser::SENTENCE);
        break;
      }

      case Cobol85Parser::ACCEPT:
      case Cobol85Parser::ADD:
      case Cobol85Parser::ALTER:
      case Cobol85Parser::AT:
      case Cobol85Parser::CALL:
      case Cobol85Parser::CANCEL:
      case Cobol85Parser::CLOSE:
      case Cobol85Parser::COMPUTE:
      case Cobol85Parser::CONTINUE:
      case Cobol85Parser::DELETE:
      case Cobol85Parser::DISABLE:
      case Cobol85Parser::DISPLAY:
      case Cobol85Parser::DIVIDE:
      case Cobol85Parser::ELSE:
      case Cobol85Parser::ENABLE:
      case Cobol85Parser::END:
      case Cobol85Parser::END_ACCEPT:
      case Cobol85Parser::END_ADD:
      case Cobol85Parser::END_CALL:
      case Cobol85Parser::END_COMPUTE:
      case Cobol85Parser::END_DELETE:
      case Cobol85Parser::END_DIVIDE:
      case Cobol85Parser::END_EVALUATE:
      case Cobol85Parser::END_IF:
      case Cobol85Parser::END_MULTIPLY:
      case Cobol85Parser::END_PERFORM:
      case Cobol85Parser::END_READ:
      case Cobol85Parser::END_RECEIVE:
      case Cobol85Parser::END_RETURN:
      case Cobol85Parser::END_REWRITE:
      case Cobol85Parser::END_SEARCH:
      case Cobol85Parser::END_START:
      case Cobol85Parser::END_STRING:
      case Cobol85Parser::END_SUBTRACT:
      case Cobol85Parser::END_UNSTRING:
      case Cobol85Parser::END_WRITE:
      case Cobol85Parser::ENTRY:
      case Cobol85Parser::EVALUATE:
      case Cobol85Parser::EXCEPTION:
      case Cobol85Parser::EXHIBIT:
      case Cobol85Parser::EXIT:
      case Cobol85Parser::GENERATE:
      case Cobol85Parser::GOBACK:
      case Cobol85Parser::GO:
      case Cobol85Parser::IF:
      case Cobol85Parser::INITIALIZE:
      case Cobol85Parser::INITIATE:
      case Cobol85Parser::INSPECT:
      case Cobol85Parser::INVALID:
      case Cobol85Parser::MERGE:
      case Cobol85Parser::MOVE:
      case Cobol85Parser::MULTIPLY:
      case Cobol85Parser::NOT:
      case Cobol85Parser::ON:
      case Cobol85Parser::OPEN:
      case Cobol85Parser::PERFORM:
      case Cobol85Parser::PURGE:
      case Cobol85Parser::READ:
      case Cobol85Parser::RECEIVE:
      case Cobol85Parser::RELEASE:
      case Cobol85Parser::RETURN:
      case Cobol85Parser::REWRITE:
      case Cobol85Parser::SEARCH:
      case Cobol85Parser::SEND:
      case Cobol85Parser::SET:
      case Cobol85Parser::SORT:
      case Cobol85Parser::START:
      case Cobol85Parser::STOP:
      case Cobol85Parser::STRING:
      case Cobol85Parser::SUBTRACT:
      case Cobol85Parser::TERMINATE:
      case Cobol85Parser::UNSTRING:
      case Cobol85Parser::WHEN:
      case Cobol85Parser::WITH:
      case Cobol85Parser::WRITE:
      case Cobol85Parser::DOT_FS:
      case Cobol85Parser::EXECCICSLINE:
      case Cobol85Parser::EXECSQLIMSLINE:
      case Cobol85Parser::EXECSQLLINE: {
        setState(4314);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 607, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(4311);
            statement(); 
          }
          setState(4316);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 607, _ctx);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IfElseContext ------------------------------------------------------------------

Cobol85Parser::IfElseContext::IfElseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::IfElseContext::ELSE() {
  return getToken(Cobol85Parser::ELSE, 0);
}

tree::TerminalNode* Cobol85Parser::IfElseContext::NEXT() {
  return getToken(Cobol85Parser::NEXT, 0);
}

tree::TerminalNode* Cobol85Parser::IfElseContext::SENTENCE() {
  return getToken(Cobol85Parser::SENTENCE, 0);
}

std::vector<Cobol85Parser::StatementContext *> Cobol85Parser::IfElseContext::statement() {
  return getRuleContexts<Cobol85Parser::StatementContext>();
}

Cobol85Parser::StatementContext* Cobol85Parser::IfElseContext::statement(size_t i) {
  return getRuleContext<Cobol85Parser::StatementContext>(i);
}


size_t Cobol85Parser::IfElseContext::getRuleIndex() const {
  return Cobol85Parser::RuleIfElse;
}

void Cobol85Parser::IfElseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIfElse(this);
}

void Cobol85Parser::IfElseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIfElse(this);
}

Cobol85Parser::IfElseContext* Cobol85Parser::ifElse() {
  IfElseContext *_localctx = _tracker.createInstance<IfElseContext>(_ctx, getState());
  enterRule(_localctx, 698, Cobol85Parser::RuleIfElse);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(4319);
    match(Cobol85Parser::ELSE);
    setState(4328);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Cobol85Parser::NEXT: {
        setState(4320);
        match(Cobol85Parser::NEXT);
        setState(4321);
        match(Cobol85Parser::SENTENCE);
        break;
      }

      case Cobol85Parser::ACCEPT:
      case Cobol85Parser::ADD:
      case Cobol85Parser::ALTER:
      case Cobol85Parser::AT:
      case Cobol85Parser::CALL:
      case Cobol85Parser::CANCEL:
      case Cobol85Parser::CLOSE:
      case Cobol85Parser::COMPUTE:
      case Cobol85Parser::CONTINUE:
      case Cobol85Parser::DELETE:
      case Cobol85Parser::DISABLE:
      case Cobol85Parser::DISPLAY:
      case Cobol85Parser::DIVIDE:
      case Cobol85Parser::ELSE:
      case Cobol85Parser::ENABLE:
      case Cobol85Parser::END:
      case Cobol85Parser::END_ACCEPT:
      case Cobol85Parser::END_ADD:
      case Cobol85Parser::END_CALL:
      case Cobol85Parser::END_COMPUTE:
      case Cobol85Parser::END_DELETE:
      case Cobol85Parser::END_DIVIDE:
      case Cobol85Parser::END_EVALUATE:
      case Cobol85Parser::END_IF:
      case Cobol85Parser::END_MULTIPLY:
      case Cobol85Parser::END_PERFORM:
      case Cobol85Parser::END_READ:
      case Cobol85Parser::END_RECEIVE:
      case Cobol85Parser::END_RETURN:
      case Cobol85Parser::END_REWRITE:
      case Cobol85Parser::END_SEARCH:
      case Cobol85Parser::END_START:
      case Cobol85Parser::END_STRING:
      case Cobol85Parser::END_SUBTRACT:
      case Cobol85Parser::END_UNSTRING:
      case Cobol85Parser::END_WRITE:
      case Cobol85Parser::ENTRY:
      case Cobol85Parser::EVALUATE:
      case Cobol85Parser::EXCEPTION:
      case Cobol85Parser::EXHIBIT:
      case Cobol85Parser::EXIT:
      case Cobol85Parser::GENERATE:
      case Cobol85Parser::GOBACK:
      case Cobol85Parser::GO:
      case Cobol85Parser::IF:
      case Cobol85Parser::INITIALIZE:
      case Cobol85Parser::INITIATE:
      case Cobol85Parser::INSPECT:
      case Cobol85Parser::INVALID:
      case Cobol85Parser::MERGE:
      case Cobol85Parser::MOVE:
      case Cobol85Parser::MULTIPLY:
      case Cobol85Parser::NOT:
      case Cobol85Parser::ON:
      case Cobol85Parser::OPEN:
      case Cobol85Parser::PERFORM:
      case Cobol85Parser::PURGE:
      case Cobol85Parser::READ:
      case Cobol85Parser::RECEIVE:
      case Cobol85Parser::RELEASE:
      case Cobol85Parser::RETURN:
      case Cobol85Parser::REWRITE:
      case Cobol85Parser::SEARCH:
      case Cobol85Parser::SEND:
      case Cobol85Parser::SET:
      case Cobol85Parser::SORT:
      case Cobol85Parser::START:
      case Cobol85Parser::STOP:
      case Cobol85Parser::STRING:
      case Cobol85Parser::SUBTRACT:
      case Cobol85Parser::TERMINATE:
      case Cobol85Parser::UNSTRING:
      case Cobol85Parser::WHEN:
      case Cobol85Parser::WITH:
      case Cobol85Parser::WRITE:
      case Cobol85Parser::DOT_FS:
      case Cobol85Parser::EXECCICSLINE:
      case Cobol85Parser::EXECSQLIMSLINE:
      case Cobol85Parser::EXECSQLLINE: {
        setState(4325);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 609, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(4322);
            statement(); 
          }
          setState(4327);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 609, _ctx);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InitializeStatementContext ------------------------------------------------------------------

Cobol85Parser::InitializeStatementContext::InitializeStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::InitializeStatementContext::INITIALIZE() {
  return getToken(Cobol85Parser::INITIALIZE, 0);
}

std::vector<Cobol85Parser::IdentifierContext *> Cobol85Parser::InitializeStatementContext::identifier() {
  return getRuleContexts<Cobol85Parser::IdentifierContext>();
}

Cobol85Parser::IdentifierContext* Cobol85Parser::InitializeStatementContext::identifier(size_t i) {
  return getRuleContext<Cobol85Parser::IdentifierContext>(i);
}

Cobol85Parser::InitializeReplacingPhraseContext* Cobol85Parser::InitializeStatementContext::initializeReplacingPhrase() {
  return getRuleContext<Cobol85Parser::InitializeReplacingPhraseContext>(0);
}


size_t Cobol85Parser::InitializeStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleInitializeStatement;
}

void Cobol85Parser::InitializeStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInitializeStatement(this);
}

void Cobol85Parser::InitializeStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInitializeStatement(this);
}

Cobol85Parser::InitializeStatementContext* Cobol85Parser::initializeStatement() {
  InitializeStatementContext *_localctx = _tracker.createInstance<InitializeStatementContext>(_ctx, getState());
  enterRule(_localctx, 700, Cobol85Parser::RuleInitializeStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4330);
    match(Cobol85Parser::INITIALIZE);
    setState(4332); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(4331);
      identifier();
      setState(4334); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3512999431135821858) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 8213661102500741635) != 0) || ((((_la - 138) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 138)) & 5276573893883339531) != 0) || ((((_la - 202) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 202)) & -3098194965423728639) != 0) || ((((_la - 268) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 268)) & -9202532752178961289) != 0) || ((((_la - 336) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 336)) & 4647874433930428515) != 0) || ((((_la - 401) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 401)) & 130978249457673) != 0) || ((((_la - 466) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 466)) & 103776312507334817) != 0) || ((((_la - 552) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 552)) & 47) != 0));
    setState(4337);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::REPLACING) {
      setState(4336);
      initializeReplacingPhrase();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InitializeReplacingPhraseContext ------------------------------------------------------------------

Cobol85Parser::InitializeReplacingPhraseContext::InitializeReplacingPhraseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::InitializeReplacingPhraseContext::REPLACING() {
  return getToken(Cobol85Parser::REPLACING, 0);
}

std::vector<Cobol85Parser::InitializeReplacingByContext *> Cobol85Parser::InitializeReplacingPhraseContext::initializeReplacingBy() {
  return getRuleContexts<Cobol85Parser::InitializeReplacingByContext>();
}

Cobol85Parser::InitializeReplacingByContext* Cobol85Parser::InitializeReplacingPhraseContext::initializeReplacingBy(size_t i) {
  return getRuleContext<Cobol85Parser::InitializeReplacingByContext>(i);
}


size_t Cobol85Parser::InitializeReplacingPhraseContext::getRuleIndex() const {
  return Cobol85Parser::RuleInitializeReplacingPhrase;
}

void Cobol85Parser::InitializeReplacingPhraseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInitializeReplacingPhrase(this);
}

void Cobol85Parser::InitializeReplacingPhraseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInitializeReplacingPhrase(this);
}

Cobol85Parser::InitializeReplacingPhraseContext* Cobol85Parser::initializeReplacingPhrase() {
  InitializeReplacingPhraseContext *_localctx = _tracker.createInstance<InitializeReplacingPhraseContext>(_ctx, getState());
  enterRule(_localctx, 702, Cobol85Parser::RuleInitializeReplacingPhrase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4339);
    match(Cobol85Parser::REPLACING);
    setState(4341); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(4340);
      initializeReplacingBy();
      setState(4343); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 51200) != 0) || _la == Cobol85Parser::DBCS

    || _la == Cobol85Parser::EGCS || ((((_la - 304) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 304)) & 20483) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InitializeReplacingByContext ------------------------------------------------------------------

Cobol85Parser::InitializeReplacingByContext::InitializeReplacingByContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::InitializeReplacingByContext::BY() {
  return getToken(Cobol85Parser::BY, 0);
}

tree::TerminalNode* Cobol85Parser::InitializeReplacingByContext::ALPHABETIC() {
  return getToken(Cobol85Parser::ALPHABETIC, 0);
}

tree::TerminalNode* Cobol85Parser::InitializeReplacingByContext::ALPHANUMERIC() {
  return getToken(Cobol85Parser::ALPHANUMERIC, 0);
}

tree::TerminalNode* Cobol85Parser::InitializeReplacingByContext::ALPHANUMERIC_EDITED() {
  return getToken(Cobol85Parser::ALPHANUMERIC_EDITED, 0);
}

tree::TerminalNode* Cobol85Parser::InitializeReplacingByContext::NATIONAL() {
  return getToken(Cobol85Parser::NATIONAL, 0);
}

tree::TerminalNode* Cobol85Parser::InitializeReplacingByContext::NATIONAL_EDITED() {
  return getToken(Cobol85Parser::NATIONAL_EDITED, 0);
}

tree::TerminalNode* Cobol85Parser::InitializeReplacingByContext::NUMERIC() {
  return getToken(Cobol85Parser::NUMERIC, 0);
}

tree::TerminalNode* Cobol85Parser::InitializeReplacingByContext::NUMERIC_EDITED() {
  return getToken(Cobol85Parser::NUMERIC_EDITED, 0);
}

tree::TerminalNode* Cobol85Parser::InitializeReplacingByContext::DBCS() {
  return getToken(Cobol85Parser::DBCS, 0);
}

tree::TerminalNode* Cobol85Parser::InitializeReplacingByContext::EGCS() {
  return getToken(Cobol85Parser::EGCS, 0);
}

Cobol85Parser::IdentifierContext* Cobol85Parser::InitializeReplacingByContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

Cobol85Parser::LiteralContext* Cobol85Parser::InitializeReplacingByContext::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}

tree::TerminalNode* Cobol85Parser::InitializeReplacingByContext::DATA() {
  return getToken(Cobol85Parser::DATA, 0);
}


size_t Cobol85Parser::InitializeReplacingByContext::getRuleIndex() const {
  return Cobol85Parser::RuleInitializeReplacingBy;
}

void Cobol85Parser::InitializeReplacingByContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInitializeReplacingBy(this);
}

void Cobol85Parser::InitializeReplacingByContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInitializeReplacingBy(this);
}

Cobol85Parser::InitializeReplacingByContext* Cobol85Parser::initializeReplacingBy() {
  InitializeReplacingByContext *_localctx = _tracker.createInstance<InitializeReplacingByContext>(_ctx, getState());
  enterRule(_localctx, 704, Cobol85Parser::RuleInitializeReplacingBy);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4345);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 51200) != 0) || _la == Cobol85Parser::DBCS

    || _la == Cobol85Parser::EGCS || ((((_la - 304) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 304)) & 20483) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(4347);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::DATA) {
      setState(4346);
      match(Cobol85Parser::DATA);
    }
    setState(4349);
    match(Cobol85Parser::BY);
    setState(4352);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 615, _ctx)) {
    case 1: {
      setState(4350);
      identifier();
      break;
    }

    case 2: {
      setState(4351);
      literal();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InitiateStatementContext ------------------------------------------------------------------

Cobol85Parser::InitiateStatementContext::InitiateStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::InitiateStatementContext::INITIATE() {
  return getToken(Cobol85Parser::INITIATE, 0);
}

std::vector<Cobol85Parser::ReportNameContext *> Cobol85Parser::InitiateStatementContext::reportName() {
  return getRuleContexts<Cobol85Parser::ReportNameContext>();
}

Cobol85Parser::ReportNameContext* Cobol85Parser::InitiateStatementContext::reportName(size_t i) {
  return getRuleContext<Cobol85Parser::ReportNameContext>(i);
}


size_t Cobol85Parser::InitiateStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleInitiateStatement;
}

void Cobol85Parser::InitiateStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInitiateStatement(this);
}

void Cobol85Parser::InitiateStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInitiateStatement(this);
}

Cobol85Parser::InitiateStatementContext* Cobol85Parser::initiateStatement() {
  InitiateStatementContext *_localctx = _tracker.createInstance<InitiateStatementContext>(_ctx, getState());
  enterRule(_localctx, 706, Cobol85Parser::RuleInitiateStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4354);
    match(Cobol85Parser::INITIATE);
    setState(4356); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(4355);
      reportName();
      setState(4358); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3512999431135821826) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 8070451912006173187) != 0) || ((((_la - 138) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 138)) & 5276573893883339531) != 0) || ((((_la - 202) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 202)) & -3098194965423761407) != 0) || ((((_la - 268) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 268)) & -9202532752178969483) != 0) || ((((_la - 336) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 336)) & 4647874433930428483) != 0) || ((((_la - 401) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 401)) & 84826144769) != 0) || ((((_la - 466) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 466)) & 103635575018455169) != 0) || ((((_la - 552) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 552)) & 47) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InspectStatementContext ------------------------------------------------------------------

Cobol85Parser::InspectStatementContext::InspectStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::InspectStatementContext::INSPECT() {
  return getToken(Cobol85Parser::INSPECT, 0);
}

Cobol85Parser::IdentifierContext* Cobol85Parser::InspectStatementContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

Cobol85Parser::InspectTallyingPhraseContext* Cobol85Parser::InspectStatementContext::inspectTallyingPhrase() {
  return getRuleContext<Cobol85Parser::InspectTallyingPhraseContext>(0);
}

Cobol85Parser::InspectReplacingPhraseContext* Cobol85Parser::InspectStatementContext::inspectReplacingPhrase() {
  return getRuleContext<Cobol85Parser::InspectReplacingPhraseContext>(0);
}

Cobol85Parser::InspectTallyingReplacingPhraseContext* Cobol85Parser::InspectStatementContext::inspectTallyingReplacingPhrase() {
  return getRuleContext<Cobol85Parser::InspectTallyingReplacingPhraseContext>(0);
}

Cobol85Parser::InspectConvertingPhraseContext* Cobol85Parser::InspectStatementContext::inspectConvertingPhrase() {
  return getRuleContext<Cobol85Parser::InspectConvertingPhraseContext>(0);
}


size_t Cobol85Parser::InspectStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleInspectStatement;
}

void Cobol85Parser::InspectStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInspectStatement(this);
}

void Cobol85Parser::InspectStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInspectStatement(this);
}

Cobol85Parser::InspectStatementContext* Cobol85Parser::inspectStatement() {
  InspectStatementContext *_localctx = _tracker.createInstance<InspectStatementContext>(_ctx, getState());
  enterRule(_localctx, 708, Cobol85Parser::RuleInspectStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4360);
    match(Cobol85Parser::INSPECT);
    setState(4361);
    identifier();
    setState(4366);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 617, _ctx)) {
    case 1: {
      setState(4362);
      inspectTallyingPhrase();
      break;
    }

    case 2: {
      setState(4363);
      inspectReplacingPhrase();
      break;
    }

    case 3: {
      setState(4364);
      inspectTallyingReplacingPhrase();
      break;
    }

    case 4: {
      setState(4365);
      inspectConvertingPhrase();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InspectTallyingPhraseContext ------------------------------------------------------------------

Cobol85Parser::InspectTallyingPhraseContext::InspectTallyingPhraseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::InspectTallyingPhraseContext::TALLYING() {
  return getToken(Cobol85Parser::TALLYING, 0);
}

std::vector<Cobol85Parser::InspectForContext *> Cobol85Parser::InspectTallyingPhraseContext::inspectFor() {
  return getRuleContexts<Cobol85Parser::InspectForContext>();
}

Cobol85Parser::InspectForContext* Cobol85Parser::InspectTallyingPhraseContext::inspectFor(size_t i) {
  return getRuleContext<Cobol85Parser::InspectForContext>(i);
}


size_t Cobol85Parser::InspectTallyingPhraseContext::getRuleIndex() const {
  return Cobol85Parser::RuleInspectTallyingPhrase;
}

void Cobol85Parser::InspectTallyingPhraseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInspectTallyingPhrase(this);
}

void Cobol85Parser::InspectTallyingPhraseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInspectTallyingPhrase(this);
}

Cobol85Parser::InspectTallyingPhraseContext* Cobol85Parser::inspectTallyingPhrase() {
  InspectTallyingPhraseContext *_localctx = _tracker.createInstance<InspectTallyingPhraseContext>(_ctx, getState());
  enterRule(_localctx, 710, Cobol85Parser::RuleInspectTallyingPhrase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4368);
    match(Cobol85Parser::TALLYING);
    setState(4370); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(4369);
      inspectFor();
      setState(4372); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3512999431135821858) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 8213661102500741635) != 0) || ((((_la - 138) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 138)) & 5276573893883339531) != 0) || ((((_la - 202) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 202)) & -3098194965423728639) != 0) || ((((_la - 268) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 268)) & -9202532752178961289) != 0) || ((((_la - 336) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 336)) & 4647874433930428515) != 0) || ((((_la - 401) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 401)) & 130978249457673) != 0) || ((((_la - 466) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 466)) & 103776312507334817) != 0) || ((((_la - 552) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 552)) & 47) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InspectReplacingPhraseContext ------------------------------------------------------------------

Cobol85Parser::InspectReplacingPhraseContext::InspectReplacingPhraseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::InspectReplacingPhraseContext::REPLACING() {
  return getToken(Cobol85Parser::REPLACING, 0);
}

std::vector<Cobol85Parser::InspectReplacingCharactersContext *> Cobol85Parser::InspectReplacingPhraseContext::inspectReplacingCharacters() {
  return getRuleContexts<Cobol85Parser::InspectReplacingCharactersContext>();
}

Cobol85Parser::InspectReplacingCharactersContext* Cobol85Parser::InspectReplacingPhraseContext::inspectReplacingCharacters(size_t i) {
  return getRuleContext<Cobol85Parser::InspectReplacingCharactersContext>(i);
}

std::vector<Cobol85Parser::InspectReplacingAllLeadingsContext *> Cobol85Parser::InspectReplacingPhraseContext::inspectReplacingAllLeadings() {
  return getRuleContexts<Cobol85Parser::InspectReplacingAllLeadingsContext>();
}

Cobol85Parser::InspectReplacingAllLeadingsContext* Cobol85Parser::InspectReplacingPhraseContext::inspectReplacingAllLeadings(size_t i) {
  return getRuleContext<Cobol85Parser::InspectReplacingAllLeadingsContext>(i);
}


size_t Cobol85Parser::InspectReplacingPhraseContext::getRuleIndex() const {
  return Cobol85Parser::RuleInspectReplacingPhrase;
}

void Cobol85Parser::InspectReplacingPhraseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInspectReplacingPhrase(this);
}

void Cobol85Parser::InspectReplacingPhraseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInspectReplacingPhrase(this);
}

Cobol85Parser::InspectReplacingPhraseContext* Cobol85Parser::inspectReplacingPhrase() {
  InspectReplacingPhraseContext *_localctx = _tracker.createInstance<InspectReplacingPhraseContext>(_ctx, getState());
  enterRule(_localctx, 712, Cobol85Parser::RuleInspectReplacingPhrase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4374);
    match(Cobol85Parser::REPLACING);
    setState(4377); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(4377);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case Cobol85Parser::CHARACTERS: {
          setState(4375);
          inspectReplacingCharacters();
          break;
        }

        case Cobol85Parser::ALL:
        case Cobol85Parser::FIRST:
        case Cobol85Parser::LEADING: {
          setState(4376);
          inspectReplacingAllLeadings();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(4379); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == Cobol85Parser::ALL

    || _la == Cobol85Parser::CHARACTERS || _la == Cobol85Parser::FIRST

    || _la == Cobol85Parser::LEADING);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InspectTallyingReplacingPhraseContext ------------------------------------------------------------------

Cobol85Parser::InspectTallyingReplacingPhraseContext::InspectTallyingReplacingPhraseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::InspectTallyingReplacingPhraseContext::TALLYING() {
  return getToken(Cobol85Parser::TALLYING, 0);
}

std::vector<Cobol85Parser::InspectForContext *> Cobol85Parser::InspectTallyingReplacingPhraseContext::inspectFor() {
  return getRuleContexts<Cobol85Parser::InspectForContext>();
}

Cobol85Parser::InspectForContext* Cobol85Parser::InspectTallyingReplacingPhraseContext::inspectFor(size_t i) {
  return getRuleContext<Cobol85Parser::InspectForContext>(i);
}

std::vector<Cobol85Parser::InspectReplacingPhraseContext *> Cobol85Parser::InspectTallyingReplacingPhraseContext::inspectReplacingPhrase() {
  return getRuleContexts<Cobol85Parser::InspectReplacingPhraseContext>();
}

Cobol85Parser::InspectReplacingPhraseContext* Cobol85Parser::InspectTallyingReplacingPhraseContext::inspectReplacingPhrase(size_t i) {
  return getRuleContext<Cobol85Parser::InspectReplacingPhraseContext>(i);
}


size_t Cobol85Parser::InspectTallyingReplacingPhraseContext::getRuleIndex() const {
  return Cobol85Parser::RuleInspectTallyingReplacingPhrase;
}

void Cobol85Parser::InspectTallyingReplacingPhraseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInspectTallyingReplacingPhrase(this);
}

void Cobol85Parser::InspectTallyingReplacingPhraseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInspectTallyingReplacingPhrase(this);
}

Cobol85Parser::InspectTallyingReplacingPhraseContext* Cobol85Parser::inspectTallyingReplacingPhrase() {
  InspectTallyingReplacingPhraseContext *_localctx = _tracker.createInstance<InspectTallyingReplacingPhraseContext>(_ctx, getState());
  enterRule(_localctx, 714, Cobol85Parser::RuleInspectTallyingReplacingPhrase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4381);
    match(Cobol85Parser::TALLYING);
    setState(4383); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(4382);
      inspectFor();
      setState(4385); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3512999431135821858) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 8213661102500741635) != 0) || ((((_la - 138) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 138)) & 5276573893883339531) != 0) || ((((_la - 202) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 202)) & -3098194965423728639) != 0) || ((((_la - 268) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 268)) & -9202532752178961289) != 0) || ((((_la - 336) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 336)) & 4647874433930428515) != 0) || ((((_la - 401) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 401)) & 130978249457673) != 0) || ((((_la - 466) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 466)) & 103776312507334817) != 0) || ((((_la - 552) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 552)) & 47) != 0));
    setState(4388); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(4387);
      inspectReplacingPhrase();
      setState(4390); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == Cobol85Parser::REPLACING);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InspectConvertingPhraseContext ------------------------------------------------------------------

Cobol85Parser::InspectConvertingPhraseContext::InspectConvertingPhraseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::InspectConvertingPhraseContext::CONVERTING() {
  return getToken(Cobol85Parser::CONVERTING, 0);
}

Cobol85Parser::InspectToContext* Cobol85Parser::InspectConvertingPhraseContext::inspectTo() {
  return getRuleContext<Cobol85Parser::InspectToContext>(0);
}

Cobol85Parser::IdentifierContext* Cobol85Parser::InspectConvertingPhraseContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

Cobol85Parser::LiteralContext* Cobol85Parser::InspectConvertingPhraseContext::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}

std::vector<Cobol85Parser::InspectBeforeAfterContext *> Cobol85Parser::InspectConvertingPhraseContext::inspectBeforeAfter() {
  return getRuleContexts<Cobol85Parser::InspectBeforeAfterContext>();
}

Cobol85Parser::InspectBeforeAfterContext* Cobol85Parser::InspectConvertingPhraseContext::inspectBeforeAfter(size_t i) {
  return getRuleContext<Cobol85Parser::InspectBeforeAfterContext>(i);
}


size_t Cobol85Parser::InspectConvertingPhraseContext::getRuleIndex() const {
  return Cobol85Parser::RuleInspectConvertingPhrase;
}

void Cobol85Parser::InspectConvertingPhraseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInspectConvertingPhrase(this);
}

void Cobol85Parser::InspectConvertingPhraseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInspectConvertingPhrase(this);
}

Cobol85Parser::InspectConvertingPhraseContext* Cobol85Parser::inspectConvertingPhrase() {
  InspectConvertingPhraseContext *_localctx = _tracker.createInstance<InspectConvertingPhraseContext>(_ctx, getState());
  enterRule(_localctx, 716, Cobol85Parser::RuleInspectConvertingPhrase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4392);
    match(Cobol85Parser::CONVERTING);
    setState(4395);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 623, _ctx)) {
    case 1: {
      setState(4393);
      identifier();
      break;
    }

    case 2: {
      setState(4394);
      literal();
      break;
    }

    default:
      break;
    }
    setState(4397);
    inspectTo();
    setState(4401);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Cobol85Parser::AFTER

    || _la == Cobol85Parser::BEFORE) {
      setState(4398);
      inspectBeforeAfter();
      setState(4403);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InspectForContext ------------------------------------------------------------------

Cobol85Parser::InspectForContext::InspectForContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::IdentifierContext* Cobol85Parser::InspectForContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

tree::TerminalNode* Cobol85Parser::InspectForContext::FOR() {
  return getToken(Cobol85Parser::FOR, 0);
}

std::vector<Cobol85Parser::InspectCharactersContext *> Cobol85Parser::InspectForContext::inspectCharacters() {
  return getRuleContexts<Cobol85Parser::InspectCharactersContext>();
}

Cobol85Parser::InspectCharactersContext* Cobol85Parser::InspectForContext::inspectCharacters(size_t i) {
  return getRuleContext<Cobol85Parser::InspectCharactersContext>(i);
}

std::vector<Cobol85Parser::InspectAllLeadingsContext *> Cobol85Parser::InspectForContext::inspectAllLeadings() {
  return getRuleContexts<Cobol85Parser::InspectAllLeadingsContext>();
}

Cobol85Parser::InspectAllLeadingsContext* Cobol85Parser::InspectForContext::inspectAllLeadings(size_t i) {
  return getRuleContext<Cobol85Parser::InspectAllLeadingsContext>(i);
}


size_t Cobol85Parser::InspectForContext::getRuleIndex() const {
  return Cobol85Parser::RuleInspectFor;
}

void Cobol85Parser::InspectForContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInspectFor(this);
}

void Cobol85Parser::InspectForContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInspectFor(this);
}

Cobol85Parser::InspectForContext* Cobol85Parser::inspectFor() {
  InspectForContext *_localctx = _tracker.createInstance<InspectForContext>(_ctx, getState());
  enterRule(_localctx, 718, Cobol85Parser::RuleInspectFor);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4404);
    identifier();
    setState(4405);
    match(Cobol85Parser::FOR);
    setState(4408); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(4408);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case Cobol85Parser::CHARACTERS: {
          setState(4406);
          inspectCharacters();
          break;
        }

        case Cobol85Parser::ALL:
        case Cobol85Parser::LEADING: {
          setState(4407);
          inspectAllLeadings();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(4410); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == Cobol85Parser::ALL

    || _la == Cobol85Parser::CHARACTERS || _la == Cobol85Parser::LEADING);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InspectCharactersContext ------------------------------------------------------------------

Cobol85Parser::InspectCharactersContext::InspectCharactersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::InspectCharactersContext::CHARACTERS() {
  return getToken(Cobol85Parser::CHARACTERS, 0);
}

std::vector<Cobol85Parser::InspectBeforeAfterContext *> Cobol85Parser::InspectCharactersContext::inspectBeforeAfter() {
  return getRuleContexts<Cobol85Parser::InspectBeforeAfterContext>();
}

Cobol85Parser::InspectBeforeAfterContext* Cobol85Parser::InspectCharactersContext::inspectBeforeAfter(size_t i) {
  return getRuleContext<Cobol85Parser::InspectBeforeAfterContext>(i);
}


size_t Cobol85Parser::InspectCharactersContext::getRuleIndex() const {
  return Cobol85Parser::RuleInspectCharacters;
}

void Cobol85Parser::InspectCharactersContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInspectCharacters(this);
}

void Cobol85Parser::InspectCharactersContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInspectCharacters(this);
}

Cobol85Parser::InspectCharactersContext* Cobol85Parser::inspectCharacters() {
  InspectCharactersContext *_localctx = _tracker.createInstance<InspectCharactersContext>(_ctx, getState());
  enterRule(_localctx, 720, Cobol85Parser::RuleInspectCharacters);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4412);
    match(Cobol85Parser::CHARACTERS);
    setState(4416);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Cobol85Parser::AFTER

    || _la == Cobol85Parser::BEFORE) {
      setState(4413);
      inspectBeforeAfter();
      setState(4418);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InspectReplacingCharactersContext ------------------------------------------------------------------

Cobol85Parser::InspectReplacingCharactersContext::InspectReplacingCharactersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::InspectReplacingCharactersContext::CHARACTERS() {
  return getToken(Cobol85Parser::CHARACTERS, 0);
}

Cobol85Parser::InspectByContext* Cobol85Parser::InspectReplacingCharactersContext::inspectBy() {
  return getRuleContext<Cobol85Parser::InspectByContext>(0);
}

std::vector<Cobol85Parser::InspectBeforeAfterContext *> Cobol85Parser::InspectReplacingCharactersContext::inspectBeforeAfter() {
  return getRuleContexts<Cobol85Parser::InspectBeforeAfterContext>();
}

Cobol85Parser::InspectBeforeAfterContext* Cobol85Parser::InspectReplacingCharactersContext::inspectBeforeAfter(size_t i) {
  return getRuleContext<Cobol85Parser::InspectBeforeAfterContext>(i);
}


size_t Cobol85Parser::InspectReplacingCharactersContext::getRuleIndex() const {
  return Cobol85Parser::RuleInspectReplacingCharacters;
}

void Cobol85Parser::InspectReplacingCharactersContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInspectReplacingCharacters(this);
}

void Cobol85Parser::InspectReplacingCharactersContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInspectReplacingCharacters(this);
}

Cobol85Parser::InspectReplacingCharactersContext* Cobol85Parser::inspectReplacingCharacters() {
  InspectReplacingCharactersContext *_localctx = _tracker.createInstance<InspectReplacingCharactersContext>(_ctx, getState());
  enterRule(_localctx, 722, Cobol85Parser::RuleInspectReplacingCharacters);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4419);
    match(Cobol85Parser::CHARACTERS);
    setState(4420);
    inspectBy();
    setState(4424);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Cobol85Parser::AFTER

    || _la == Cobol85Parser::BEFORE) {
      setState(4421);
      inspectBeforeAfter();
      setState(4426);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InspectAllLeadingsContext ------------------------------------------------------------------

Cobol85Parser::InspectAllLeadingsContext::InspectAllLeadingsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::InspectAllLeadingsContext::ALL() {
  return getToken(Cobol85Parser::ALL, 0);
}

tree::TerminalNode* Cobol85Parser::InspectAllLeadingsContext::LEADING() {
  return getToken(Cobol85Parser::LEADING, 0);
}

std::vector<Cobol85Parser::InspectAllLeadingContext *> Cobol85Parser::InspectAllLeadingsContext::inspectAllLeading() {
  return getRuleContexts<Cobol85Parser::InspectAllLeadingContext>();
}

Cobol85Parser::InspectAllLeadingContext* Cobol85Parser::InspectAllLeadingsContext::inspectAllLeading(size_t i) {
  return getRuleContext<Cobol85Parser::InspectAllLeadingContext>(i);
}


size_t Cobol85Parser::InspectAllLeadingsContext::getRuleIndex() const {
  return Cobol85Parser::RuleInspectAllLeadings;
}

void Cobol85Parser::InspectAllLeadingsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInspectAllLeadings(this);
}

void Cobol85Parser::InspectAllLeadingsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInspectAllLeadings(this);
}

Cobol85Parser::InspectAllLeadingsContext* Cobol85Parser::inspectAllLeadings() {
  InspectAllLeadingsContext *_localctx = _tracker.createInstance<InspectAllLeadingsContext>(_ctx, getState());
  enterRule(_localctx, 724, Cobol85Parser::RuleInspectAllLeadings);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(4427);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::ALL || _la == Cobol85Parser::LEADING)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(4429); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(4428);
              inspectAllLeading();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(4431); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 629, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InspectReplacingAllLeadingsContext ------------------------------------------------------------------

Cobol85Parser::InspectReplacingAllLeadingsContext::InspectReplacingAllLeadingsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::InspectReplacingAllLeadingsContext::ALL() {
  return getToken(Cobol85Parser::ALL, 0);
}

tree::TerminalNode* Cobol85Parser::InspectReplacingAllLeadingsContext::LEADING() {
  return getToken(Cobol85Parser::LEADING, 0);
}

tree::TerminalNode* Cobol85Parser::InspectReplacingAllLeadingsContext::FIRST() {
  return getToken(Cobol85Parser::FIRST, 0);
}

std::vector<Cobol85Parser::InspectReplacingAllLeadingContext *> Cobol85Parser::InspectReplacingAllLeadingsContext::inspectReplacingAllLeading() {
  return getRuleContexts<Cobol85Parser::InspectReplacingAllLeadingContext>();
}

Cobol85Parser::InspectReplacingAllLeadingContext* Cobol85Parser::InspectReplacingAllLeadingsContext::inspectReplacingAllLeading(size_t i) {
  return getRuleContext<Cobol85Parser::InspectReplacingAllLeadingContext>(i);
}


size_t Cobol85Parser::InspectReplacingAllLeadingsContext::getRuleIndex() const {
  return Cobol85Parser::RuleInspectReplacingAllLeadings;
}

void Cobol85Parser::InspectReplacingAllLeadingsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInspectReplacingAllLeadings(this);
}

void Cobol85Parser::InspectReplacingAllLeadingsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInspectReplacingAllLeadings(this);
}

Cobol85Parser::InspectReplacingAllLeadingsContext* Cobol85Parser::inspectReplacingAllLeadings() {
  InspectReplacingAllLeadingsContext *_localctx = _tracker.createInstance<InspectReplacingAllLeadingsContext>(_ctx, getState());
  enterRule(_localctx, 726, Cobol85Parser::RuleInspectReplacingAllLeadings);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(4433);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::ALL || _la == Cobol85Parser::FIRST

    || _la == Cobol85Parser::LEADING)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(4435); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(4434);
              inspectReplacingAllLeading();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(4437); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 630, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InspectAllLeadingContext ------------------------------------------------------------------

Cobol85Parser::InspectAllLeadingContext::InspectAllLeadingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::IdentifierContext* Cobol85Parser::InspectAllLeadingContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

Cobol85Parser::LiteralContext* Cobol85Parser::InspectAllLeadingContext::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}

std::vector<Cobol85Parser::InspectBeforeAfterContext *> Cobol85Parser::InspectAllLeadingContext::inspectBeforeAfter() {
  return getRuleContexts<Cobol85Parser::InspectBeforeAfterContext>();
}

Cobol85Parser::InspectBeforeAfterContext* Cobol85Parser::InspectAllLeadingContext::inspectBeforeAfter(size_t i) {
  return getRuleContext<Cobol85Parser::InspectBeforeAfterContext>(i);
}


size_t Cobol85Parser::InspectAllLeadingContext::getRuleIndex() const {
  return Cobol85Parser::RuleInspectAllLeading;
}

void Cobol85Parser::InspectAllLeadingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInspectAllLeading(this);
}

void Cobol85Parser::InspectAllLeadingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInspectAllLeading(this);
}

Cobol85Parser::InspectAllLeadingContext* Cobol85Parser::inspectAllLeading() {
  InspectAllLeadingContext *_localctx = _tracker.createInstance<InspectAllLeadingContext>(_ctx, getState());
  enterRule(_localctx, 728, Cobol85Parser::RuleInspectAllLeading);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4441);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 631, _ctx)) {
    case 1: {
      setState(4439);
      identifier();
      break;
    }

    case 2: {
      setState(4440);
      literal();
      break;
    }

    default:
      break;
    }
    setState(4446);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Cobol85Parser::AFTER

    || _la == Cobol85Parser::BEFORE) {
      setState(4443);
      inspectBeforeAfter();
      setState(4448);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InspectReplacingAllLeadingContext ------------------------------------------------------------------

Cobol85Parser::InspectReplacingAllLeadingContext::InspectReplacingAllLeadingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::InspectByContext* Cobol85Parser::InspectReplacingAllLeadingContext::inspectBy() {
  return getRuleContext<Cobol85Parser::InspectByContext>(0);
}

Cobol85Parser::IdentifierContext* Cobol85Parser::InspectReplacingAllLeadingContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

Cobol85Parser::LiteralContext* Cobol85Parser::InspectReplacingAllLeadingContext::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}

std::vector<Cobol85Parser::InspectBeforeAfterContext *> Cobol85Parser::InspectReplacingAllLeadingContext::inspectBeforeAfter() {
  return getRuleContexts<Cobol85Parser::InspectBeforeAfterContext>();
}

Cobol85Parser::InspectBeforeAfterContext* Cobol85Parser::InspectReplacingAllLeadingContext::inspectBeforeAfter(size_t i) {
  return getRuleContext<Cobol85Parser::InspectBeforeAfterContext>(i);
}


size_t Cobol85Parser::InspectReplacingAllLeadingContext::getRuleIndex() const {
  return Cobol85Parser::RuleInspectReplacingAllLeading;
}

void Cobol85Parser::InspectReplacingAllLeadingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInspectReplacingAllLeading(this);
}

void Cobol85Parser::InspectReplacingAllLeadingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInspectReplacingAllLeading(this);
}

Cobol85Parser::InspectReplacingAllLeadingContext* Cobol85Parser::inspectReplacingAllLeading() {
  InspectReplacingAllLeadingContext *_localctx = _tracker.createInstance<InspectReplacingAllLeadingContext>(_ctx, getState());
  enterRule(_localctx, 730, Cobol85Parser::RuleInspectReplacingAllLeading);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4451);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 633, _ctx)) {
    case 1: {
      setState(4449);
      identifier();
      break;
    }

    case 2: {
      setState(4450);
      literal();
      break;
    }

    default:
      break;
    }
    setState(4453);
    inspectBy();
    setState(4457);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Cobol85Parser::AFTER

    || _la == Cobol85Parser::BEFORE) {
      setState(4454);
      inspectBeforeAfter();
      setState(4459);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InspectByContext ------------------------------------------------------------------

Cobol85Parser::InspectByContext::InspectByContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::InspectByContext::BY() {
  return getToken(Cobol85Parser::BY, 0);
}

Cobol85Parser::IdentifierContext* Cobol85Parser::InspectByContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

Cobol85Parser::LiteralContext* Cobol85Parser::InspectByContext::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}


size_t Cobol85Parser::InspectByContext::getRuleIndex() const {
  return Cobol85Parser::RuleInspectBy;
}

void Cobol85Parser::InspectByContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInspectBy(this);
}

void Cobol85Parser::InspectByContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInspectBy(this);
}

Cobol85Parser::InspectByContext* Cobol85Parser::inspectBy() {
  InspectByContext *_localctx = _tracker.createInstance<InspectByContext>(_ctx, getState());
  enterRule(_localctx, 732, Cobol85Parser::RuleInspectBy);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4460);
    match(Cobol85Parser::BY);
    setState(4463);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 635, _ctx)) {
    case 1: {
      setState(4461);
      identifier();
      break;
    }

    case 2: {
      setState(4462);
      literal();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InspectToContext ------------------------------------------------------------------

Cobol85Parser::InspectToContext::InspectToContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::InspectToContext::TO() {
  return getToken(Cobol85Parser::TO, 0);
}

Cobol85Parser::IdentifierContext* Cobol85Parser::InspectToContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

Cobol85Parser::LiteralContext* Cobol85Parser::InspectToContext::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}


size_t Cobol85Parser::InspectToContext::getRuleIndex() const {
  return Cobol85Parser::RuleInspectTo;
}

void Cobol85Parser::InspectToContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInspectTo(this);
}

void Cobol85Parser::InspectToContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInspectTo(this);
}

Cobol85Parser::InspectToContext* Cobol85Parser::inspectTo() {
  InspectToContext *_localctx = _tracker.createInstance<InspectToContext>(_ctx, getState());
  enterRule(_localctx, 734, Cobol85Parser::RuleInspectTo);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4465);
    match(Cobol85Parser::TO);
    setState(4468);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 636, _ctx)) {
    case 1: {
      setState(4466);
      identifier();
      break;
    }

    case 2: {
      setState(4467);
      literal();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InspectBeforeAfterContext ------------------------------------------------------------------

Cobol85Parser::InspectBeforeAfterContext::InspectBeforeAfterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::InspectBeforeAfterContext::BEFORE() {
  return getToken(Cobol85Parser::BEFORE, 0);
}

tree::TerminalNode* Cobol85Parser::InspectBeforeAfterContext::AFTER() {
  return getToken(Cobol85Parser::AFTER, 0);
}

Cobol85Parser::IdentifierContext* Cobol85Parser::InspectBeforeAfterContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

Cobol85Parser::LiteralContext* Cobol85Parser::InspectBeforeAfterContext::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}

tree::TerminalNode* Cobol85Parser::InspectBeforeAfterContext::INITIAL() {
  return getToken(Cobol85Parser::INITIAL, 0);
}


size_t Cobol85Parser::InspectBeforeAfterContext::getRuleIndex() const {
  return Cobol85Parser::RuleInspectBeforeAfter;
}

void Cobol85Parser::InspectBeforeAfterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInspectBeforeAfter(this);
}

void Cobol85Parser::InspectBeforeAfterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInspectBeforeAfter(this);
}

Cobol85Parser::InspectBeforeAfterContext* Cobol85Parser::inspectBeforeAfter() {
  InspectBeforeAfterContext *_localctx = _tracker.createInstance<InspectBeforeAfterContext>(_ctx, getState());
  enterRule(_localctx, 736, Cobol85Parser::RuleInspectBeforeAfter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4470);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::AFTER

    || _la == Cobol85Parser::BEFORE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(4472);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::INITIAL) {
      setState(4471);
      match(Cobol85Parser::INITIAL);
    }
    setState(4476);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 638, _ctx)) {
    case 1: {
      setState(4474);
      identifier();
      break;
    }

    case 2: {
      setState(4475);
      literal();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MergeStatementContext ------------------------------------------------------------------

Cobol85Parser::MergeStatementContext::MergeStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::MergeStatementContext::MERGE() {
  return getToken(Cobol85Parser::MERGE, 0);
}

Cobol85Parser::FileNameContext* Cobol85Parser::MergeStatementContext::fileName() {
  return getRuleContext<Cobol85Parser::FileNameContext>(0);
}

std::vector<Cobol85Parser::MergeOnKeyClauseContext *> Cobol85Parser::MergeStatementContext::mergeOnKeyClause() {
  return getRuleContexts<Cobol85Parser::MergeOnKeyClauseContext>();
}

Cobol85Parser::MergeOnKeyClauseContext* Cobol85Parser::MergeStatementContext::mergeOnKeyClause(size_t i) {
  return getRuleContext<Cobol85Parser::MergeOnKeyClauseContext>(i);
}

Cobol85Parser::MergeCollatingSequencePhraseContext* Cobol85Parser::MergeStatementContext::mergeCollatingSequencePhrase() {
  return getRuleContext<Cobol85Parser::MergeCollatingSequencePhraseContext>(0);
}

std::vector<Cobol85Parser::MergeUsingContext *> Cobol85Parser::MergeStatementContext::mergeUsing() {
  return getRuleContexts<Cobol85Parser::MergeUsingContext>();
}

Cobol85Parser::MergeUsingContext* Cobol85Parser::MergeStatementContext::mergeUsing(size_t i) {
  return getRuleContext<Cobol85Parser::MergeUsingContext>(i);
}

Cobol85Parser::MergeOutputProcedurePhraseContext* Cobol85Parser::MergeStatementContext::mergeOutputProcedurePhrase() {
  return getRuleContext<Cobol85Parser::MergeOutputProcedurePhraseContext>(0);
}

std::vector<Cobol85Parser::MergeGivingPhraseContext *> Cobol85Parser::MergeStatementContext::mergeGivingPhrase() {
  return getRuleContexts<Cobol85Parser::MergeGivingPhraseContext>();
}

Cobol85Parser::MergeGivingPhraseContext* Cobol85Parser::MergeStatementContext::mergeGivingPhrase(size_t i) {
  return getRuleContext<Cobol85Parser::MergeGivingPhraseContext>(i);
}


size_t Cobol85Parser::MergeStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleMergeStatement;
}

void Cobol85Parser::MergeStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMergeStatement(this);
}

void Cobol85Parser::MergeStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMergeStatement(this);
}

Cobol85Parser::MergeStatementContext* Cobol85Parser::mergeStatement() {
  MergeStatementContext *_localctx = _tracker.createInstance<MergeStatementContext>(_ctx, getState());
  enterRule(_localctx, 738, Cobol85Parser::RuleMergeStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(4478);
    match(Cobol85Parser::MERGE);
    setState(4479);
    fileName();
    setState(4481); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(4480);
              mergeOnKeyClause();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(4483); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 639, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(4486);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::COLLATING || _la == Cobol85Parser::SEQUENCE) {
      setState(4485);
      mergeCollatingSequencePhrase();
    }
    setState(4491);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Cobol85Parser::USING) {
      setState(4488);
      mergeUsing();
      setState(4493);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(4495);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::OUTPUT) {
      setState(4494);
      mergeOutputProcedurePhrase();
    }
    setState(4500);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Cobol85Parser::GIVING) {
      setState(4497);
      mergeGivingPhrase();
      setState(4502);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MergeOnKeyClauseContext ------------------------------------------------------------------

Cobol85Parser::MergeOnKeyClauseContext::MergeOnKeyClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::MergeOnKeyClauseContext::ASCENDING() {
  return getToken(Cobol85Parser::ASCENDING, 0);
}

tree::TerminalNode* Cobol85Parser::MergeOnKeyClauseContext::DESCENDING() {
  return getToken(Cobol85Parser::DESCENDING, 0);
}

tree::TerminalNode* Cobol85Parser::MergeOnKeyClauseContext::ON() {
  return getToken(Cobol85Parser::ON, 0);
}

tree::TerminalNode* Cobol85Parser::MergeOnKeyClauseContext::KEY() {
  return getToken(Cobol85Parser::KEY, 0);
}

std::vector<Cobol85Parser::QualifiedDataNameContext *> Cobol85Parser::MergeOnKeyClauseContext::qualifiedDataName() {
  return getRuleContexts<Cobol85Parser::QualifiedDataNameContext>();
}

Cobol85Parser::QualifiedDataNameContext* Cobol85Parser::MergeOnKeyClauseContext::qualifiedDataName(size_t i) {
  return getRuleContext<Cobol85Parser::QualifiedDataNameContext>(i);
}


size_t Cobol85Parser::MergeOnKeyClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleMergeOnKeyClause;
}

void Cobol85Parser::MergeOnKeyClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMergeOnKeyClause(this);
}

void Cobol85Parser::MergeOnKeyClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMergeOnKeyClause(this);
}

Cobol85Parser::MergeOnKeyClauseContext* Cobol85Parser::mergeOnKeyClause() {
  MergeOnKeyClauseContext *_localctx = _tracker.createInstance<MergeOnKeyClauseContext>(_ctx, getState());
  enterRule(_localctx, 740, Cobol85Parser::RuleMergeOnKeyClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4504);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::ON) {
      setState(4503);
      match(Cobol85Parser::ON);
    }
    setState(4506);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::ASCENDING || _la == Cobol85Parser::DESCENDING)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(4508);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::KEY) {
      setState(4507);
      match(Cobol85Parser::KEY);
    }
    setState(4511); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(4510);
      qualifiedDataName();
      setState(4513); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3512999431135821826) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 8070451912006173187) != 0) || ((((_la - 138) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 138)) & 5276573893883339531) != 0) || ((((_la - 202) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 202)) & -3098194965423761407) != 0) || ((((_la - 268) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 268)) & -9202532752178969483) != 0) || ((((_la - 336) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 336)) & 4647874433930428483) != 0) || ((((_la - 401) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 401)) & 84826144769) != 0) || ((((_la - 466) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 466)) & 103635575018455169) != 0) || ((((_la - 552) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 552)) & 47) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MergeCollatingSequencePhraseContext ------------------------------------------------------------------

Cobol85Parser::MergeCollatingSequencePhraseContext::MergeCollatingSequencePhraseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::MergeCollatingSequencePhraseContext::SEQUENCE() {
  return getToken(Cobol85Parser::SEQUENCE, 0);
}

tree::TerminalNode* Cobol85Parser::MergeCollatingSequencePhraseContext::COLLATING() {
  return getToken(Cobol85Parser::COLLATING, 0);
}

tree::TerminalNode* Cobol85Parser::MergeCollatingSequencePhraseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}

std::vector<Cobol85Parser::AlphabetNameContext *> Cobol85Parser::MergeCollatingSequencePhraseContext::alphabetName() {
  return getRuleContexts<Cobol85Parser::AlphabetNameContext>();
}

Cobol85Parser::AlphabetNameContext* Cobol85Parser::MergeCollatingSequencePhraseContext::alphabetName(size_t i) {
  return getRuleContext<Cobol85Parser::AlphabetNameContext>(i);
}

Cobol85Parser::MergeCollatingAlphanumericContext* Cobol85Parser::MergeCollatingSequencePhraseContext::mergeCollatingAlphanumeric() {
  return getRuleContext<Cobol85Parser::MergeCollatingAlphanumericContext>(0);
}

Cobol85Parser::MergeCollatingNationalContext* Cobol85Parser::MergeCollatingSequencePhraseContext::mergeCollatingNational() {
  return getRuleContext<Cobol85Parser::MergeCollatingNationalContext>(0);
}


size_t Cobol85Parser::MergeCollatingSequencePhraseContext::getRuleIndex() const {
  return Cobol85Parser::RuleMergeCollatingSequencePhrase;
}

void Cobol85Parser::MergeCollatingSequencePhraseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMergeCollatingSequencePhrase(this);
}

void Cobol85Parser::MergeCollatingSequencePhraseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMergeCollatingSequencePhrase(this);
}

Cobol85Parser::MergeCollatingSequencePhraseContext* Cobol85Parser::mergeCollatingSequencePhrase() {
  MergeCollatingSequencePhraseContext *_localctx = _tracker.createInstance<MergeCollatingSequencePhraseContext>(_ctx, getState());
  enterRule(_localctx, 742, Cobol85Parser::RuleMergeCollatingSequencePhrase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(4516);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::COLLATING) {
      setState(4515);
      match(Cobol85Parser::COLLATING);
    }
    setState(4518);
    match(Cobol85Parser::SEQUENCE);
    setState(4520);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(4519);
      match(Cobol85Parser::IS);
    }
    setState(4523); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(4522);
              alphabetName();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(4525); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 649, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(4528);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 650, _ctx)) {
    case 1: {
      setState(4527);
      mergeCollatingAlphanumeric();
      break;
    }

    default:
      break;
    }
    setState(4531);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::FOR || _la == Cobol85Parser::NATIONAL) {
      setState(4530);
      mergeCollatingNational();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MergeCollatingAlphanumericContext ------------------------------------------------------------------

Cobol85Parser::MergeCollatingAlphanumericContext::MergeCollatingAlphanumericContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::MergeCollatingAlphanumericContext::ALPHANUMERIC() {
  return getToken(Cobol85Parser::ALPHANUMERIC, 0);
}

tree::TerminalNode* Cobol85Parser::MergeCollatingAlphanumericContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}

Cobol85Parser::AlphabetNameContext* Cobol85Parser::MergeCollatingAlphanumericContext::alphabetName() {
  return getRuleContext<Cobol85Parser::AlphabetNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::MergeCollatingAlphanumericContext::FOR() {
  return getToken(Cobol85Parser::FOR, 0);
}


size_t Cobol85Parser::MergeCollatingAlphanumericContext::getRuleIndex() const {
  return Cobol85Parser::RuleMergeCollatingAlphanumeric;
}

void Cobol85Parser::MergeCollatingAlphanumericContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMergeCollatingAlphanumeric(this);
}

void Cobol85Parser::MergeCollatingAlphanumericContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMergeCollatingAlphanumeric(this);
}

Cobol85Parser::MergeCollatingAlphanumericContext* Cobol85Parser::mergeCollatingAlphanumeric() {
  MergeCollatingAlphanumericContext *_localctx = _tracker.createInstance<MergeCollatingAlphanumericContext>(_ctx, getState());
  enterRule(_localctx, 744, Cobol85Parser::RuleMergeCollatingAlphanumeric);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4534);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::FOR) {
      setState(4533);
      match(Cobol85Parser::FOR);
    }
    setState(4536);
    match(Cobol85Parser::ALPHANUMERIC);
    setState(4537);
    match(Cobol85Parser::IS);
    setState(4538);
    alphabetName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MergeCollatingNationalContext ------------------------------------------------------------------

Cobol85Parser::MergeCollatingNationalContext::MergeCollatingNationalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::MergeCollatingNationalContext::NATIONAL() {
  return getToken(Cobol85Parser::NATIONAL, 0);
}

Cobol85Parser::AlphabetNameContext* Cobol85Parser::MergeCollatingNationalContext::alphabetName() {
  return getRuleContext<Cobol85Parser::AlphabetNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::MergeCollatingNationalContext::FOR() {
  return getToken(Cobol85Parser::FOR, 0);
}

tree::TerminalNode* Cobol85Parser::MergeCollatingNationalContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}


size_t Cobol85Parser::MergeCollatingNationalContext::getRuleIndex() const {
  return Cobol85Parser::RuleMergeCollatingNational;
}

void Cobol85Parser::MergeCollatingNationalContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMergeCollatingNational(this);
}

void Cobol85Parser::MergeCollatingNationalContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMergeCollatingNational(this);
}

Cobol85Parser::MergeCollatingNationalContext* Cobol85Parser::mergeCollatingNational() {
  MergeCollatingNationalContext *_localctx = _tracker.createInstance<MergeCollatingNationalContext>(_ctx, getState());
  enterRule(_localctx, 746, Cobol85Parser::RuleMergeCollatingNational);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4541);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::FOR) {
      setState(4540);
      match(Cobol85Parser::FOR);
    }
    setState(4543);
    match(Cobol85Parser::NATIONAL);
    setState(4545);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(4544);
      match(Cobol85Parser::IS);
    }
    setState(4547);
    alphabetName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MergeUsingContext ------------------------------------------------------------------

Cobol85Parser::MergeUsingContext::MergeUsingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::MergeUsingContext::USING() {
  return getToken(Cobol85Parser::USING, 0);
}

std::vector<Cobol85Parser::FileNameContext *> Cobol85Parser::MergeUsingContext::fileName() {
  return getRuleContexts<Cobol85Parser::FileNameContext>();
}

Cobol85Parser::FileNameContext* Cobol85Parser::MergeUsingContext::fileName(size_t i) {
  return getRuleContext<Cobol85Parser::FileNameContext>(i);
}


size_t Cobol85Parser::MergeUsingContext::getRuleIndex() const {
  return Cobol85Parser::RuleMergeUsing;
}

void Cobol85Parser::MergeUsingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMergeUsing(this);
}

void Cobol85Parser::MergeUsingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMergeUsing(this);
}

Cobol85Parser::MergeUsingContext* Cobol85Parser::mergeUsing() {
  MergeUsingContext *_localctx = _tracker.createInstance<MergeUsingContext>(_ctx, getState());
  enterRule(_localctx, 748, Cobol85Parser::RuleMergeUsing);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4549);
    match(Cobol85Parser::USING);
    setState(4551); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(4550);
      fileName();
      setState(4553); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3512999431135821826) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 8070451912006173187) != 0) || ((((_la - 138) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 138)) & 5276573893883339531) != 0) || ((((_la - 202) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 202)) & -3098194965423761407) != 0) || ((((_la - 268) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 268)) & -9202532752178970507) != 0) || ((((_la - 336) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 336)) & 4647874433930428483) != 0) || ((((_la - 401) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 401)) & 84826144769) != 0) || ((((_la - 466) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 466)) & 103635575018455169) != 0) || _la == Cobol85Parser::IDENTIFIER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MergeOutputProcedurePhraseContext ------------------------------------------------------------------

Cobol85Parser::MergeOutputProcedurePhraseContext::MergeOutputProcedurePhraseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::MergeOutputProcedurePhraseContext::OUTPUT() {
  return getToken(Cobol85Parser::OUTPUT, 0);
}

tree::TerminalNode* Cobol85Parser::MergeOutputProcedurePhraseContext::PROCEDURE() {
  return getToken(Cobol85Parser::PROCEDURE, 0);
}

Cobol85Parser::ProcedureNameContext* Cobol85Parser::MergeOutputProcedurePhraseContext::procedureName() {
  return getRuleContext<Cobol85Parser::ProcedureNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::MergeOutputProcedurePhraseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}

Cobol85Parser::MergeOutputThroughContext* Cobol85Parser::MergeOutputProcedurePhraseContext::mergeOutputThrough() {
  return getRuleContext<Cobol85Parser::MergeOutputThroughContext>(0);
}


size_t Cobol85Parser::MergeOutputProcedurePhraseContext::getRuleIndex() const {
  return Cobol85Parser::RuleMergeOutputProcedurePhrase;
}

void Cobol85Parser::MergeOutputProcedurePhraseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMergeOutputProcedurePhrase(this);
}

void Cobol85Parser::MergeOutputProcedurePhraseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMergeOutputProcedurePhrase(this);
}

Cobol85Parser::MergeOutputProcedurePhraseContext* Cobol85Parser::mergeOutputProcedurePhrase() {
  MergeOutputProcedurePhraseContext *_localctx = _tracker.createInstance<MergeOutputProcedurePhraseContext>(_ctx, getState());
  enterRule(_localctx, 750, Cobol85Parser::RuleMergeOutputProcedurePhrase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4555);
    match(Cobol85Parser::OUTPUT);
    setState(4556);
    match(Cobol85Parser::PROCEDURE);
    setState(4558);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(4557);
      match(Cobol85Parser::IS);
    }
    setState(4560);
    procedureName();
    setState(4562);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::THROUGH

    || _la == Cobol85Parser::THRU) {
      setState(4561);
      mergeOutputThrough();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MergeOutputThroughContext ------------------------------------------------------------------

Cobol85Parser::MergeOutputThroughContext::MergeOutputThroughContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::ProcedureNameContext* Cobol85Parser::MergeOutputThroughContext::procedureName() {
  return getRuleContext<Cobol85Parser::ProcedureNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::MergeOutputThroughContext::THROUGH() {
  return getToken(Cobol85Parser::THROUGH, 0);
}

tree::TerminalNode* Cobol85Parser::MergeOutputThroughContext::THRU() {
  return getToken(Cobol85Parser::THRU, 0);
}


size_t Cobol85Parser::MergeOutputThroughContext::getRuleIndex() const {
  return Cobol85Parser::RuleMergeOutputThrough;
}

void Cobol85Parser::MergeOutputThroughContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMergeOutputThrough(this);
}

void Cobol85Parser::MergeOutputThroughContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMergeOutputThrough(this);
}

Cobol85Parser::MergeOutputThroughContext* Cobol85Parser::mergeOutputThrough() {
  MergeOutputThroughContext *_localctx = _tracker.createInstance<MergeOutputThroughContext>(_ctx, getState());
  enterRule(_localctx, 752, Cobol85Parser::RuleMergeOutputThrough);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4564);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::THROUGH

    || _la == Cobol85Parser::THRU)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(4565);
    procedureName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MergeGivingPhraseContext ------------------------------------------------------------------

Cobol85Parser::MergeGivingPhraseContext::MergeGivingPhraseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::MergeGivingPhraseContext::GIVING() {
  return getToken(Cobol85Parser::GIVING, 0);
}

std::vector<Cobol85Parser::MergeGivingContext *> Cobol85Parser::MergeGivingPhraseContext::mergeGiving() {
  return getRuleContexts<Cobol85Parser::MergeGivingContext>();
}

Cobol85Parser::MergeGivingContext* Cobol85Parser::MergeGivingPhraseContext::mergeGiving(size_t i) {
  return getRuleContext<Cobol85Parser::MergeGivingContext>(i);
}


size_t Cobol85Parser::MergeGivingPhraseContext::getRuleIndex() const {
  return Cobol85Parser::RuleMergeGivingPhrase;
}

void Cobol85Parser::MergeGivingPhraseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMergeGivingPhrase(this);
}

void Cobol85Parser::MergeGivingPhraseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMergeGivingPhrase(this);
}

Cobol85Parser::MergeGivingPhraseContext* Cobol85Parser::mergeGivingPhrase() {
  MergeGivingPhraseContext *_localctx = _tracker.createInstance<MergeGivingPhraseContext>(_ctx, getState());
  enterRule(_localctx, 754, Cobol85Parser::RuleMergeGivingPhrase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4567);
    match(Cobol85Parser::GIVING);
    setState(4569); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(4568);
      mergeGiving();
      setState(4571); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3512999431135821826) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 8070451912006173187) != 0) || ((((_la - 138) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 138)) & 5276573893883339531) != 0) || ((((_la - 202) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 202)) & -3098194965423761407) != 0) || ((((_la - 268) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 268)) & -9202532752178970507) != 0) || ((((_la - 336) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 336)) & 4647874433930428483) != 0) || ((((_la - 401) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 401)) & 84826144769) != 0) || ((((_la - 466) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 466)) & 103635575018455169) != 0) || _la == Cobol85Parser::IDENTIFIER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MergeGivingContext ------------------------------------------------------------------

Cobol85Parser::MergeGivingContext::MergeGivingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::FileNameContext* Cobol85Parser::MergeGivingContext::fileName() {
  return getRuleContext<Cobol85Parser::FileNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::MergeGivingContext::LOCK() {
  return getToken(Cobol85Parser::LOCK, 0);
}

tree::TerminalNode* Cobol85Parser::MergeGivingContext::SAVE() {
  return getToken(Cobol85Parser::SAVE, 0);
}

tree::TerminalNode* Cobol85Parser::MergeGivingContext::NO() {
  return getToken(Cobol85Parser::NO, 0);
}

tree::TerminalNode* Cobol85Parser::MergeGivingContext::REWIND() {
  return getToken(Cobol85Parser::REWIND, 0);
}

tree::TerminalNode* Cobol85Parser::MergeGivingContext::CRUNCH() {
  return getToken(Cobol85Parser::CRUNCH, 0);
}

tree::TerminalNode* Cobol85Parser::MergeGivingContext::RELEASE() {
  return getToken(Cobol85Parser::RELEASE, 0);
}

tree::TerminalNode* Cobol85Parser::MergeGivingContext::WITH() {
  return getToken(Cobol85Parser::WITH, 0);
}

tree::TerminalNode* Cobol85Parser::MergeGivingContext::REMOVE() {
  return getToken(Cobol85Parser::REMOVE, 0);
}


size_t Cobol85Parser::MergeGivingContext::getRuleIndex() const {
  return Cobol85Parser::RuleMergeGiving;
}

void Cobol85Parser::MergeGivingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMergeGiving(this);
}

void Cobol85Parser::MergeGivingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMergeGiving(this);
}

Cobol85Parser::MergeGivingContext* Cobol85Parser::mergeGiving() {
  MergeGivingContext *_localctx = _tracker.createInstance<MergeGivingContext>(_ctx, getState());
  enterRule(_localctx, 756, Cobol85Parser::RuleMergeGiving);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4573);
    fileName();
    setState(4583);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 659, _ctx)) {
    case 1: {
      setState(4574);
      match(Cobol85Parser::LOCK);
      break;
    }

    case 2: {
      setState(4575);
      match(Cobol85Parser::SAVE);
      break;
    }

    case 3: {
      setState(4576);
      match(Cobol85Parser::NO);
      setState(4577);
      match(Cobol85Parser::REWIND);
      break;
    }

    case 4: {
      setState(4578);
      match(Cobol85Parser::CRUNCH);
      break;
    }

    case 5: {
      setState(4579);
      match(Cobol85Parser::RELEASE);
      break;
    }

    case 6: {
      setState(4580);
      match(Cobol85Parser::WITH);
      setState(4581);
      match(Cobol85Parser::REMOVE);
      setState(4582);
      match(Cobol85Parser::CRUNCH);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MoveStatementContext ------------------------------------------------------------------

Cobol85Parser::MoveStatementContext::MoveStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::MoveStatementContext::MOVE() {
  return getToken(Cobol85Parser::MOVE, 0);
}

Cobol85Parser::MoveToStatementContext* Cobol85Parser::MoveStatementContext::moveToStatement() {
  return getRuleContext<Cobol85Parser::MoveToStatementContext>(0);
}

Cobol85Parser::MoveCorrespondingToStatementContext* Cobol85Parser::MoveStatementContext::moveCorrespondingToStatement() {
  return getRuleContext<Cobol85Parser::MoveCorrespondingToStatementContext>(0);
}

tree::TerminalNode* Cobol85Parser::MoveStatementContext::ALL() {
  return getToken(Cobol85Parser::ALL, 0);
}


size_t Cobol85Parser::MoveStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleMoveStatement;
}

void Cobol85Parser::MoveStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMoveStatement(this);
}

void Cobol85Parser::MoveStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMoveStatement(this);
}

Cobol85Parser::MoveStatementContext* Cobol85Parser::moveStatement() {
  MoveStatementContext *_localctx = _tracker.createInstance<MoveStatementContext>(_ctx, getState());
  enterRule(_localctx, 758, Cobol85Parser::RuleMoveStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4585);
    match(Cobol85Parser::MOVE);
    setState(4587);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 660, _ctx)) {
    case 1: {
      setState(4586);
      match(Cobol85Parser::ALL);
      break;
    }

    default:
      break;
    }
    setState(4591);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Cobol85Parser::ABORT:
      case Cobol85Parser::ADDRESS:
      case Cobol85Parser::ALL:
      case Cobol85Parser::AS:
      case Cobol85Parser::ASCII:
      case Cobol85Parser::ASSOCIATED_DATA:
      case Cobol85Parser::ASSOCIATED_DATA_LENGTH:
      case Cobol85Parser::ATTRIBUTE:
      case Cobol85Parser::AUTO:
      case Cobol85Parser::AUTO_SKIP:
      case Cobol85Parser::BACKGROUND_COLOR:
      case Cobol85Parser::BACKGROUND_COLOUR:
      case Cobol85Parser::BEEP:
      case Cobol85Parser::BELL:
      case Cobol85Parser::BINARY:
      case Cobol85Parser::BIT:
      case Cobol85Parser::BLINK:
      case Cobol85Parser::BOUNDS:
      case Cobol85Parser::CAPABLE:
      case Cobol85Parser::CCSVERSION:
      case Cobol85Parser::CHANGED:
      case Cobol85Parser::CHANNEL:
      case Cobol85Parser::CLOSE_DISPOSITION:
      case Cobol85Parser::COBOL:
      case Cobol85Parser::COMMITMENT:
      case Cobol85Parser::CONTROL_POINT:
      case Cobol85Parser::CONVENTION:
      case Cobol85Parser::CRUNCH:
      case Cobol85Parser::CURSOR:
      case Cobol85Parser::DATE:
      case Cobol85Parser::DAY:
      case Cobol85Parser::DAY_OF_WEEK:
      case Cobol85Parser::DEBUG_CONTENTS:
      case Cobol85Parser::DEBUG_ITEM:
      case Cobol85Parser::DEBUG_LINE:
      case Cobol85Parser::DEBUG_NAME:
      case Cobol85Parser::DEBUG_SUB_1:
      case Cobol85Parser::DEBUG_SUB_2:
      case Cobol85Parser::DEBUG_SUB_3:
      case Cobol85Parser::DEFAULT:
      case Cobol85Parser::DEFAULT_DISPLAY:
      case Cobol85Parser::DEFINITION:
      case Cobol85Parser::DFHRESP:
      case Cobol85Parser::DFHVALUE:
      case Cobol85Parser::DISK:
      case Cobol85Parser::DONTCARE:
      case Cobol85Parser::DOUBLE:
      case Cobol85Parser::EBCDIC:
      case Cobol85Parser::EMPTY_CHECK:
      case Cobol85Parser::ENTER:
      case Cobol85Parser::ENTRY_PROCEDURE:
      case Cobol85Parser::ERASE:
      case Cobol85Parser::EOL:
      case Cobol85Parser::EOS:
      case Cobol85Parser::ESCAPE:
      case Cobol85Parser::EVENT:
      case Cobol85Parser::EXCLUSIVE:
      case Cobol85Parser::EXPORT:
      case Cobol85Parser::EXTENDED:
      case Cobol85Parser::FALSE:
      case Cobol85Parser::FOREGROUND_COLOR:
      case Cobol85Parser::FOREGROUND_COLOUR:
      case Cobol85Parser::FULL:
      case Cobol85Parser::FUNCTION:
      case Cobol85Parser::FUNCTIONNAME:
      case Cobol85Parser::FUNCTION_POINTER:
      case Cobol85Parser::GRID:
      case Cobol85Parser::HIGHLIGHT:
      case Cobol85Parser::HIGH_VALUE:
      case Cobol85Parser::HIGH_VALUES:
      case Cobol85Parser::IMPLICIT:
      case Cobol85Parser::IMPORT:
      case Cobol85Parser::INTEGER:
      case Cobol85Parser::KEPT:
      case Cobol85Parser::KEYBOARD:
      case Cobol85Parser::LANGUAGE:
      case Cobol85Parser::LB:
      case Cobol85Parser::LD:
      case Cobol85Parser::LEFTLINE:
      case Cobol85Parser::LENGTH:
      case Cobol85Parser::LENGTH_CHECK:
      case Cobol85Parser::LIBACCESS:
      case Cobol85Parser::LIBPARAMETER:
      case Cobol85Parser::LIBRARY:
      case Cobol85Parser::LINAGE_COUNTER:
      case Cobol85Parser::LINE_COUNTER:
      case Cobol85Parser::LIST:
      case Cobol85Parser::LOCAL:
      case Cobol85Parser::LONG_DATE:
      case Cobol85Parser::LONG_TIME:
      case Cobol85Parser::LOWER:
      case Cobol85Parser::LOWLIGHT:
      case Cobol85Parser::LOW_VALUE:
      case Cobol85Parser::LOW_VALUES:
      case Cobol85Parser::MMDDYYYY:
      case Cobol85Parser::NAMED:
      case Cobol85Parser::NATIONAL:
      case Cobol85Parser::NATIONAL_EDITED:
      case Cobol85Parser::NETWORK:
      case Cobol85Parser::NO_ECHO:
      case Cobol85Parser::NULL_:
      case Cobol85Parser::NULLS:
      case Cobol85Parser::NUMERIC_DATE:
      case Cobol85Parser::NUMERIC_TIME:
      case Cobol85Parser::ODT:
      case Cobol85Parser::ORDERLY:
      case Cobol85Parser::OVERLINE:
      case Cobol85Parser::OWN:
      case Cobol85Parser::PAGE_COUNTER:
      case Cobol85Parser::PASSWORD:
      case Cobol85Parser::PORT:
      case Cobol85Parser::PRINTER:
      case Cobol85Parser::PRIVATE:
      case Cobol85Parser::PROCESS:
      case Cobol85Parser::PROGRAM:
      case Cobol85Parser::PROMPT:
      case Cobol85Parser::QUOTE:
      case Cobol85Parser::QUOTES:
      case Cobol85Parser::READER:
      case Cobol85Parser::REMOTE:
      case Cobol85Parser::REAL:
      case Cobol85Parser::RECEIVED:
      case Cobol85Parser::RECURSIVE:
      case Cobol85Parser::REF:
      case Cobol85Parser::REMOVE:
      case Cobol85Parser::REQUIRED:
      case Cobol85Parser::REVERSE_VIDEO:
      case Cobol85Parser::RETURN_CODE:
      case Cobol85Parser::SAVE:
      case Cobol85Parser::SECURE:
      case Cobol85Parser::SHARED:
      case Cobol85Parser::SHAREDBYALL:
      case Cobol85Parser::SHAREDBYRUNUNIT:
      case Cobol85Parser::SHARING:
      case Cobol85Parser::SHIFT_IN:
      case Cobol85Parser::SHIFT_OUT:
      case Cobol85Parser::SHORT_DATE:
      case Cobol85Parser::SORT_CONTROL:
      case Cobol85Parser::SORT_CORE_SIZE:
      case Cobol85Parser::SORT_FILE_SIZE:
      case Cobol85Parser::SORT_MESSAGE:
      case Cobol85Parser::SORT_MODE_SIZE:
      case Cobol85Parser::SORT_RETURN:
      case Cobol85Parser::SPACE:
      case Cobol85Parser::SPACES:
      case Cobol85Parser::SYMBOL:
      case Cobol85Parser::TALLY:
      case Cobol85Parser::TASK:
      case Cobol85Parser::THREAD:
      case Cobol85Parser::THREAD_LOCAL:
      case Cobol85Parser::TIME:
      case Cobol85Parser::TIMER:
      case Cobol85Parser::TODAYS_DATE:
      case Cobol85Parser::TODAYS_NAME:
      case Cobol85Parser::TRUE:
      case Cobol85Parser::TRUNCATED:
      case Cobol85Parser::TYPEDEF:
      case Cobol85Parser::UNDERLINE:
      case Cobol85Parser::VIRTUAL:
      case Cobol85Parser::WAIT:
      case Cobol85Parser::WHEN_COMPILED:
      case Cobol85Parser::YEAR:
      case Cobol85Parser::YYYYMMDD:
      case Cobol85Parser::YYYYDDD:
      case Cobol85Parser::ZERO:
      case Cobol85Parser::ZERO_FILL:
      case Cobol85Parser::ZEROS:
      case Cobol85Parser::ZEROES:
      case Cobol85Parser::NONNUMERICLITERAL:
      case Cobol85Parser::LEVEL_NUMBER_66:
      case Cobol85Parser::LEVEL_NUMBER_77:
      case Cobol85Parser::LEVEL_NUMBER_88:
      case Cobol85Parser::INTEGERLITERAL:
      case Cobol85Parser::NUMERICLITERAL:
      case Cobol85Parser::IDENTIFIER: {
        setState(4589);
        moveToStatement();
        break;
      }

      case Cobol85Parser::CORR:
      case Cobol85Parser::CORRESPONDING: {
        setState(4590);
        moveCorrespondingToStatement();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MoveToStatementContext ------------------------------------------------------------------

Cobol85Parser::MoveToStatementContext::MoveToStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::MoveToSendingAreaContext* Cobol85Parser::MoveToStatementContext::moveToSendingArea() {
  return getRuleContext<Cobol85Parser::MoveToSendingAreaContext>(0);
}

tree::TerminalNode* Cobol85Parser::MoveToStatementContext::TO() {
  return getToken(Cobol85Parser::TO, 0);
}

std::vector<Cobol85Parser::IdentifierContext *> Cobol85Parser::MoveToStatementContext::identifier() {
  return getRuleContexts<Cobol85Parser::IdentifierContext>();
}

Cobol85Parser::IdentifierContext* Cobol85Parser::MoveToStatementContext::identifier(size_t i) {
  return getRuleContext<Cobol85Parser::IdentifierContext>(i);
}


size_t Cobol85Parser::MoveToStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleMoveToStatement;
}

void Cobol85Parser::MoveToStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMoveToStatement(this);
}

void Cobol85Parser::MoveToStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMoveToStatement(this);
}

Cobol85Parser::MoveToStatementContext* Cobol85Parser::moveToStatement() {
  MoveToStatementContext *_localctx = _tracker.createInstance<MoveToStatementContext>(_ctx, getState());
  enterRule(_localctx, 760, Cobol85Parser::RuleMoveToStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4593);
    moveToSendingArea();
    setState(4594);
    match(Cobol85Parser::TO);
    setState(4596); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(4595);
      identifier();
      setState(4598); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3512999431135821858) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 8213661102500741635) != 0) || ((((_la - 138) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 138)) & 5276573893883339531) != 0) || ((((_la - 202) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 202)) & -3098194965423728639) != 0) || ((((_la - 268) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 268)) & -9202532752178961289) != 0) || ((((_la - 336) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 336)) & 4647874433930428515) != 0) || ((((_la - 401) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 401)) & 130978249457673) != 0) || ((((_la - 466) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 466)) & 103776312507334817) != 0) || ((((_la - 552) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 552)) & 47) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MoveToSendingAreaContext ------------------------------------------------------------------

Cobol85Parser::MoveToSendingAreaContext::MoveToSendingAreaContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::IdentifierContext* Cobol85Parser::MoveToSendingAreaContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

Cobol85Parser::LiteralContext* Cobol85Parser::MoveToSendingAreaContext::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}


size_t Cobol85Parser::MoveToSendingAreaContext::getRuleIndex() const {
  return Cobol85Parser::RuleMoveToSendingArea;
}

void Cobol85Parser::MoveToSendingAreaContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMoveToSendingArea(this);
}

void Cobol85Parser::MoveToSendingAreaContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMoveToSendingArea(this);
}

Cobol85Parser::MoveToSendingAreaContext* Cobol85Parser::moveToSendingArea() {
  MoveToSendingAreaContext *_localctx = _tracker.createInstance<MoveToSendingAreaContext>(_ctx, getState());
  enterRule(_localctx, 762, Cobol85Parser::RuleMoveToSendingArea);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4602);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 663, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4600);
      identifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4601);
      literal();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MoveCorrespondingToStatementContext ------------------------------------------------------------------

Cobol85Parser::MoveCorrespondingToStatementContext::MoveCorrespondingToStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::MoveCorrespondingToSendingAreaContext* Cobol85Parser::MoveCorrespondingToStatementContext::moveCorrespondingToSendingArea() {
  return getRuleContext<Cobol85Parser::MoveCorrespondingToSendingAreaContext>(0);
}

tree::TerminalNode* Cobol85Parser::MoveCorrespondingToStatementContext::TO() {
  return getToken(Cobol85Parser::TO, 0);
}

tree::TerminalNode* Cobol85Parser::MoveCorrespondingToStatementContext::CORRESPONDING() {
  return getToken(Cobol85Parser::CORRESPONDING, 0);
}

tree::TerminalNode* Cobol85Parser::MoveCorrespondingToStatementContext::CORR() {
  return getToken(Cobol85Parser::CORR, 0);
}

std::vector<Cobol85Parser::IdentifierContext *> Cobol85Parser::MoveCorrespondingToStatementContext::identifier() {
  return getRuleContexts<Cobol85Parser::IdentifierContext>();
}

Cobol85Parser::IdentifierContext* Cobol85Parser::MoveCorrespondingToStatementContext::identifier(size_t i) {
  return getRuleContext<Cobol85Parser::IdentifierContext>(i);
}


size_t Cobol85Parser::MoveCorrespondingToStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleMoveCorrespondingToStatement;
}

void Cobol85Parser::MoveCorrespondingToStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMoveCorrespondingToStatement(this);
}

void Cobol85Parser::MoveCorrespondingToStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMoveCorrespondingToStatement(this);
}

Cobol85Parser::MoveCorrespondingToStatementContext* Cobol85Parser::moveCorrespondingToStatement() {
  MoveCorrespondingToStatementContext *_localctx = _tracker.createInstance<MoveCorrespondingToStatementContext>(_ctx, getState());
  enterRule(_localctx, 764, Cobol85Parser::RuleMoveCorrespondingToStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4604);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::CORR

    || _la == Cobol85Parser::CORRESPONDING)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(4605);
    moveCorrespondingToSendingArea();
    setState(4606);
    match(Cobol85Parser::TO);
    setState(4608); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(4607);
      identifier();
      setState(4610); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3512999431135821858) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 8213661102500741635) != 0) || ((((_la - 138) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 138)) & 5276573893883339531) != 0) || ((((_la - 202) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 202)) & -3098194965423728639) != 0) || ((((_la - 268) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 268)) & -9202532752178961289) != 0) || ((((_la - 336) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 336)) & 4647874433930428515) != 0) || ((((_la - 401) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 401)) & 130978249457673) != 0) || ((((_la - 466) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 466)) & 103776312507334817) != 0) || ((((_la - 552) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 552)) & 47) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MoveCorrespondingToSendingAreaContext ------------------------------------------------------------------

Cobol85Parser::MoveCorrespondingToSendingAreaContext::MoveCorrespondingToSendingAreaContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::IdentifierContext* Cobol85Parser::MoveCorrespondingToSendingAreaContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}


size_t Cobol85Parser::MoveCorrespondingToSendingAreaContext::getRuleIndex() const {
  return Cobol85Parser::RuleMoveCorrespondingToSendingArea;
}

void Cobol85Parser::MoveCorrespondingToSendingAreaContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMoveCorrespondingToSendingArea(this);
}

void Cobol85Parser::MoveCorrespondingToSendingAreaContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMoveCorrespondingToSendingArea(this);
}

Cobol85Parser::MoveCorrespondingToSendingAreaContext* Cobol85Parser::moveCorrespondingToSendingArea() {
  MoveCorrespondingToSendingAreaContext *_localctx = _tracker.createInstance<MoveCorrespondingToSendingAreaContext>(_ctx, getState());
  enterRule(_localctx, 766, Cobol85Parser::RuleMoveCorrespondingToSendingArea);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4612);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MultiplyStatementContext ------------------------------------------------------------------

Cobol85Parser::MultiplyStatementContext::MultiplyStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::MultiplyStatementContext::MULTIPLY() {
  return getToken(Cobol85Parser::MULTIPLY, 0);
}

tree::TerminalNode* Cobol85Parser::MultiplyStatementContext::BY() {
  return getToken(Cobol85Parser::BY, 0);
}

Cobol85Parser::IdentifierContext* Cobol85Parser::MultiplyStatementContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

Cobol85Parser::LiteralContext* Cobol85Parser::MultiplyStatementContext::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}

Cobol85Parser::MultiplyRegularContext* Cobol85Parser::MultiplyStatementContext::multiplyRegular() {
  return getRuleContext<Cobol85Parser::MultiplyRegularContext>(0);
}

Cobol85Parser::MultiplyGivingContext* Cobol85Parser::MultiplyStatementContext::multiplyGiving() {
  return getRuleContext<Cobol85Parser::MultiplyGivingContext>(0);
}

Cobol85Parser::OnSizeErrorPhraseContext* Cobol85Parser::MultiplyStatementContext::onSizeErrorPhrase() {
  return getRuleContext<Cobol85Parser::OnSizeErrorPhraseContext>(0);
}

Cobol85Parser::NotOnSizeErrorPhraseContext* Cobol85Parser::MultiplyStatementContext::notOnSizeErrorPhrase() {
  return getRuleContext<Cobol85Parser::NotOnSizeErrorPhraseContext>(0);
}

tree::TerminalNode* Cobol85Parser::MultiplyStatementContext::END_MULTIPLY() {
  return getToken(Cobol85Parser::END_MULTIPLY, 0);
}


size_t Cobol85Parser::MultiplyStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleMultiplyStatement;
}

void Cobol85Parser::MultiplyStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMultiplyStatement(this);
}

void Cobol85Parser::MultiplyStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMultiplyStatement(this);
}

Cobol85Parser::MultiplyStatementContext* Cobol85Parser::multiplyStatement() {
  MultiplyStatementContext *_localctx = _tracker.createInstance<MultiplyStatementContext>(_ctx, getState());
  enterRule(_localctx, 768, Cobol85Parser::RuleMultiplyStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4614);
    match(Cobol85Parser::MULTIPLY);
    setState(4617);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 665, _ctx)) {
    case 1: {
      setState(4615);
      identifier();
      break;
    }

    case 2: {
      setState(4616);
      literal();
      break;
    }

    default:
      break;
    }
    setState(4619);
    match(Cobol85Parser::BY);
    setState(4622);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 666, _ctx)) {
    case 1: {
      setState(4620);
      multiplyRegular();
      break;
    }

    case 2: {
      setState(4621);
      multiplyGiving();
      break;
    }

    default:
      break;
    }
    setState(4625);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 667, _ctx)) {
    case 1: {
      setState(4624);
      onSizeErrorPhrase();
      break;
    }

    default:
      break;
    }
    setState(4628);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 668, _ctx)) {
    case 1: {
      setState(4627);
      notOnSizeErrorPhrase();
      break;
    }

    default:
      break;
    }
    setState(4631);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 669, _ctx)) {
    case 1: {
      setState(4630);
      match(Cobol85Parser::END_MULTIPLY);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MultiplyRegularContext ------------------------------------------------------------------

Cobol85Parser::MultiplyRegularContext::MultiplyRegularContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Cobol85Parser::MultiplyRegularOperandContext *> Cobol85Parser::MultiplyRegularContext::multiplyRegularOperand() {
  return getRuleContexts<Cobol85Parser::MultiplyRegularOperandContext>();
}

Cobol85Parser::MultiplyRegularOperandContext* Cobol85Parser::MultiplyRegularContext::multiplyRegularOperand(size_t i) {
  return getRuleContext<Cobol85Parser::MultiplyRegularOperandContext>(i);
}


size_t Cobol85Parser::MultiplyRegularContext::getRuleIndex() const {
  return Cobol85Parser::RuleMultiplyRegular;
}

void Cobol85Parser::MultiplyRegularContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMultiplyRegular(this);
}

void Cobol85Parser::MultiplyRegularContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMultiplyRegular(this);
}

Cobol85Parser::MultiplyRegularContext* Cobol85Parser::multiplyRegular() {
  MultiplyRegularContext *_localctx = _tracker.createInstance<MultiplyRegularContext>(_ctx, getState());
  enterRule(_localctx, 770, Cobol85Parser::RuleMultiplyRegular);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4634); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(4633);
      multiplyRegularOperand();
      setState(4636); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3512999431135821858) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 8213661102500741635) != 0) || ((((_la - 138) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 138)) & 5276573893883339531) != 0) || ((((_la - 202) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 202)) & -3098194965423728639) != 0) || ((((_la - 268) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 268)) & -9202532752178961289) != 0) || ((((_la - 336) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 336)) & 4647874433930428515) != 0) || ((((_la - 401) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 401)) & 130978249457673) != 0) || ((((_la - 466) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 466)) & 103776312507334817) != 0) || ((((_la - 552) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 552)) & 47) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MultiplyRegularOperandContext ------------------------------------------------------------------

Cobol85Parser::MultiplyRegularOperandContext::MultiplyRegularOperandContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::IdentifierContext* Cobol85Parser::MultiplyRegularOperandContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

tree::TerminalNode* Cobol85Parser::MultiplyRegularOperandContext::ROUNDED() {
  return getToken(Cobol85Parser::ROUNDED, 0);
}


size_t Cobol85Parser::MultiplyRegularOperandContext::getRuleIndex() const {
  return Cobol85Parser::RuleMultiplyRegularOperand;
}

void Cobol85Parser::MultiplyRegularOperandContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMultiplyRegularOperand(this);
}

void Cobol85Parser::MultiplyRegularOperandContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMultiplyRegularOperand(this);
}

Cobol85Parser::MultiplyRegularOperandContext* Cobol85Parser::multiplyRegularOperand() {
  MultiplyRegularOperandContext *_localctx = _tracker.createInstance<MultiplyRegularOperandContext>(_ctx, getState());
  enterRule(_localctx, 772, Cobol85Parser::RuleMultiplyRegularOperand);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4638);
    identifier();
    setState(4640);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::ROUNDED) {
      setState(4639);
      match(Cobol85Parser::ROUNDED);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MultiplyGivingContext ------------------------------------------------------------------

Cobol85Parser::MultiplyGivingContext::MultiplyGivingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::MultiplyGivingOperandContext* Cobol85Parser::MultiplyGivingContext::multiplyGivingOperand() {
  return getRuleContext<Cobol85Parser::MultiplyGivingOperandContext>(0);
}

tree::TerminalNode* Cobol85Parser::MultiplyGivingContext::GIVING() {
  return getToken(Cobol85Parser::GIVING, 0);
}

std::vector<Cobol85Parser::MultiplyGivingResultContext *> Cobol85Parser::MultiplyGivingContext::multiplyGivingResult() {
  return getRuleContexts<Cobol85Parser::MultiplyGivingResultContext>();
}

Cobol85Parser::MultiplyGivingResultContext* Cobol85Parser::MultiplyGivingContext::multiplyGivingResult(size_t i) {
  return getRuleContext<Cobol85Parser::MultiplyGivingResultContext>(i);
}


size_t Cobol85Parser::MultiplyGivingContext::getRuleIndex() const {
  return Cobol85Parser::RuleMultiplyGiving;
}

void Cobol85Parser::MultiplyGivingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMultiplyGiving(this);
}

void Cobol85Parser::MultiplyGivingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMultiplyGiving(this);
}

Cobol85Parser::MultiplyGivingContext* Cobol85Parser::multiplyGiving() {
  MultiplyGivingContext *_localctx = _tracker.createInstance<MultiplyGivingContext>(_ctx, getState());
  enterRule(_localctx, 774, Cobol85Parser::RuleMultiplyGiving);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4642);
    multiplyGivingOperand();
    setState(4643);
    match(Cobol85Parser::GIVING);
    setState(4645); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(4644);
      multiplyGivingResult();
      setState(4647); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3512999431135821858) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 8213661102500741635) != 0) || ((((_la - 138) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 138)) & 5276573893883339531) != 0) || ((((_la - 202) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 202)) & -3098194965423728639) != 0) || ((((_la - 268) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 268)) & -9202532752178961289) != 0) || ((((_la - 336) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 336)) & 4647874433930428515) != 0) || ((((_la - 401) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 401)) & 130978249457673) != 0) || ((((_la - 466) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 466)) & 103776312507334817) != 0) || ((((_la - 552) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 552)) & 47) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MultiplyGivingOperandContext ------------------------------------------------------------------

Cobol85Parser::MultiplyGivingOperandContext::MultiplyGivingOperandContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::IdentifierContext* Cobol85Parser::MultiplyGivingOperandContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

Cobol85Parser::LiteralContext* Cobol85Parser::MultiplyGivingOperandContext::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}


size_t Cobol85Parser::MultiplyGivingOperandContext::getRuleIndex() const {
  return Cobol85Parser::RuleMultiplyGivingOperand;
}

void Cobol85Parser::MultiplyGivingOperandContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMultiplyGivingOperand(this);
}

void Cobol85Parser::MultiplyGivingOperandContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMultiplyGivingOperand(this);
}

Cobol85Parser::MultiplyGivingOperandContext* Cobol85Parser::multiplyGivingOperand() {
  MultiplyGivingOperandContext *_localctx = _tracker.createInstance<MultiplyGivingOperandContext>(_ctx, getState());
  enterRule(_localctx, 776, Cobol85Parser::RuleMultiplyGivingOperand);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4651);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 673, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4649);
      identifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4650);
      literal();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MultiplyGivingResultContext ------------------------------------------------------------------

Cobol85Parser::MultiplyGivingResultContext::MultiplyGivingResultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::IdentifierContext* Cobol85Parser::MultiplyGivingResultContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

tree::TerminalNode* Cobol85Parser::MultiplyGivingResultContext::ROUNDED() {
  return getToken(Cobol85Parser::ROUNDED, 0);
}


size_t Cobol85Parser::MultiplyGivingResultContext::getRuleIndex() const {
  return Cobol85Parser::RuleMultiplyGivingResult;
}

void Cobol85Parser::MultiplyGivingResultContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMultiplyGivingResult(this);
}

void Cobol85Parser::MultiplyGivingResultContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMultiplyGivingResult(this);
}

Cobol85Parser::MultiplyGivingResultContext* Cobol85Parser::multiplyGivingResult() {
  MultiplyGivingResultContext *_localctx = _tracker.createInstance<MultiplyGivingResultContext>(_ctx, getState());
  enterRule(_localctx, 778, Cobol85Parser::RuleMultiplyGivingResult);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4653);
    identifier();
    setState(4655);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::ROUNDED) {
      setState(4654);
      match(Cobol85Parser::ROUNDED);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OpenStatementContext ------------------------------------------------------------------

Cobol85Parser::OpenStatementContext::OpenStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::OpenStatementContext::OPEN() {
  return getToken(Cobol85Parser::OPEN, 0);
}

std::vector<Cobol85Parser::OpenInputStatementContext *> Cobol85Parser::OpenStatementContext::openInputStatement() {
  return getRuleContexts<Cobol85Parser::OpenInputStatementContext>();
}

Cobol85Parser::OpenInputStatementContext* Cobol85Parser::OpenStatementContext::openInputStatement(size_t i) {
  return getRuleContext<Cobol85Parser::OpenInputStatementContext>(i);
}

std::vector<Cobol85Parser::OpenOutputStatementContext *> Cobol85Parser::OpenStatementContext::openOutputStatement() {
  return getRuleContexts<Cobol85Parser::OpenOutputStatementContext>();
}

Cobol85Parser::OpenOutputStatementContext* Cobol85Parser::OpenStatementContext::openOutputStatement(size_t i) {
  return getRuleContext<Cobol85Parser::OpenOutputStatementContext>(i);
}

std::vector<Cobol85Parser::OpenIOStatementContext *> Cobol85Parser::OpenStatementContext::openIOStatement() {
  return getRuleContexts<Cobol85Parser::OpenIOStatementContext>();
}

Cobol85Parser::OpenIOStatementContext* Cobol85Parser::OpenStatementContext::openIOStatement(size_t i) {
  return getRuleContext<Cobol85Parser::OpenIOStatementContext>(i);
}

std::vector<Cobol85Parser::OpenExtendStatementContext *> Cobol85Parser::OpenStatementContext::openExtendStatement() {
  return getRuleContexts<Cobol85Parser::OpenExtendStatementContext>();
}

Cobol85Parser::OpenExtendStatementContext* Cobol85Parser::OpenStatementContext::openExtendStatement(size_t i) {
  return getRuleContext<Cobol85Parser::OpenExtendStatementContext>(i);
}


size_t Cobol85Parser::OpenStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleOpenStatement;
}

void Cobol85Parser::OpenStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOpenStatement(this);
}

void Cobol85Parser::OpenStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOpenStatement(this);
}

Cobol85Parser::OpenStatementContext* Cobol85Parser::openStatement() {
  OpenStatementContext *_localctx = _tracker.createInstance<OpenStatementContext>(_ctx, getState());
  enterRule(_localctx, 780, Cobol85Parser::RuleOpenStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4657);
    match(Cobol85Parser::OPEN);
    setState(4662); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(4662);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case Cobol85Parser::INPUT: {
          setState(4658);
          openInputStatement();
          break;
        }

        case Cobol85Parser::OUTPUT: {
          setState(4659);
          openOutputStatement();
          break;
        }

        case Cobol85Parser::I_O: {
          setState(4660);
          openIOStatement();
          break;
        }

        case Cobol85Parser::EXTEND: {
          setState(4661);
          openExtendStatement();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(4664); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (((((_la - 201) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 201)) & 35186519572481) != 0) || _la == Cobol85Parser::OUTPUT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OpenInputStatementContext ------------------------------------------------------------------

Cobol85Parser::OpenInputStatementContext::OpenInputStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::OpenInputStatementContext::INPUT() {
  return getToken(Cobol85Parser::INPUT, 0);
}

std::vector<Cobol85Parser::OpenInputContext *> Cobol85Parser::OpenInputStatementContext::openInput() {
  return getRuleContexts<Cobol85Parser::OpenInputContext>();
}

Cobol85Parser::OpenInputContext* Cobol85Parser::OpenInputStatementContext::openInput(size_t i) {
  return getRuleContext<Cobol85Parser::OpenInputContext>(i);
}


size_t Cobol85Parser::OpenInputStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleOpenInputStatement;
}

void Cobol85Parser::OpenInputStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOpenInputStatement(this);
}

void Cobol85Parser::OpenInputStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOpenInputStatement(this);
}

Cobol85Parser::OpenInputStatementContext* Cobol85Parser::openInputStatement() {
  OpenInputStatementContext *_localctx = _tracker.createInstance<OpenInputStatementContext>(_ctx, getState());
  enterRule(_localctx, 782, Cobol85Parser::RuleOpenInputStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4666);
    match(Cobol85Parser::INPUT);
    setState(4668); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(4667);
      openInput();
      setState(4670); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3512999431135821826) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 8070451912006173187) != 0) || ((((_la - 138) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 138)) & 5276573893883339531) != 0) || ((((_la - 202) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 202)) & -3098194965423761407) != 0) || ((((_la - 268) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 268)) & -9202532752178970507) != 0) || ((((_la - 336) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 336)) & 4647874433930428483) != 0) || ((((_la - 401) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 401)) & 84826144769) != 0) || ((((_la - 466) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 466)) & 103635575018455169) != 0) || _la == Cobol85Parser::IDENTIFIER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OpenInputContext ------------------------------------------------------------------

Cobol85Parser::OpenInputContext::OpenInputContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::FileNameContext* Cobol85Parser::OpenInputContext::fileName() {
  return getRuleContext<Cobol85Parser::FileNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::OpenInputContext::REVERSED() {
  return getToken(Cobol85Parser::REVERSED, 0);
}

tree::TerminalNode* Cobol85Parser::OpenInputContext::NO() {
  return getToken(Cobol85Parser::NO, 0);
}

tree::TerminalNode* Cobol85Parser::OpenInputContext::REWIND() {
  return getToken(Cobol85Parser::REWIND, 0);
}

tree::TerminalNode* Cobol85Parser::OpenInputContext::WITH() {
  return getToken(Cobol85Parser::WITH, 0);
}


size_t Cobol85Parser::OpenInputContext::getRuleIndex() const {
  return Cobol85Parser::RuleOpenInput;
}

void Cobol85Parser::OpenInputContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOpenInput(this);
}

void Cobol85Parser::OpenInputContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOpenInput(this);
}

Cobol85Parser::OpenInputContext* Cobol85Parser::openInput() {
  OpenInputContext *_localctx = _tracker.createInstance<OpenInputContext>(_ctx, getState());
  enterRule(_localctx, 784, Cobol85Parser::RuleOpenInput);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4672);
    fileName();
    setState(4679);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 679, _ctx)) {
    case 1: {
      setState(4673);
      match(Cobol85Parser::REVERSED);
      break;
    }

    case 2: {
      setState(4675);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Cobol85Parser::WITH) {
        setState(4674);
        match(Cobol85Parser::WITH);
      }
      setState(4677);
      match(Cobol85Parser::NO);
      setState(4678);
      match(Cobol85Parser::REWIND);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OpenOutputStatementContext ------------------------------------------------------------------

Cobol85Parser::OpenOutputStatementContext::OpenOutputStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::OpenOutputStatementContext::OUTPUT() {
  return getToken(Cobol85Parser::OUTPUT, 0);
}

std::vector<Cobol85Parser::OpenOutputContext *> Cobol85Parser::OpenOutputStatementContext::openOutput() {
  return getRuleContexts<Cobol85Parser::OpenOutputContext>();
}

Cobol85Parser::OpenOutputContext* Cobol85Parser::OpenOutputStatementContext::openOutput(size_t i) {
  return getRuleContext<Cobol85Parser::OpenOutputContext>(i);
}


size_t Cobol85Parser::OpenOutputStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleOpenOutputStatement;
}

void Cobol85Parser::OpenOutputStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOpenOutputStatement(this);
}

void Cobol85Parser::OpenOutputStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOpenOutputStatement(this);
}

Cobol85Parser::OpenOutputStatementContext* Cobol85Parser::openOutputStatement() {
  OpenOutputStatementContext *_localctx = _tracker.createInstance<OpenOutputStatementContext>(_ctx, getState());
  enterRule(_localctx, 786, Cobol85Parser::RuleOpenOutputStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4681);
    match(Cobol85Parser::OUTPUT);
    setState(4683); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(4682);
      openOutput();
      setState(4685); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3512999431135821826) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 8070451912006173187) != 0) || ((((_la - 138) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 138)) & 5276573893883339531) != 0) || ((((_la - 202) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 202)) & -3098194965423761407) != 0) || ((((_la - 268) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 268)) & -9202532752178970507) != 0) || ((((_la - 336) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 336)) & 4647874433930428483) != 0) || ((((_la - 401) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 401)) & 84826144769) != 0) || ((((_la - 466) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 466)) & 103635575018455169) != 0) || _la == Cobol85Parser::IDENTIFIER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OpenOutputContext ------------------------------------------------------------------

Cobol85Parser::OpenOutputContext::OpenOutputContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::FileNameContext* Cobol85Parser::OpenOutputContext::fileName() {
  return getRuleContext<Cobol85Parser::FileNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::OpenOutputContext::NO() {
  return getToken(Cobol85Parser::NO, 0);
}

tree::TerminalNode* Cobol85Parser::OpenOutputContext::REWIND() {
  return getToken(Cobol85Parser::REWIND, 0);
}

tree::TerminalNode* Cobol85Parser::OpenOutputContext::WITH() {
  return getToken(Cobol85Parser::WITH, 0);
}


size_t Cobol85Parser::OpenOutputContext::getRuleIndex() const {
  return Cobol85Parser::RuleOpenOutput;
}

void Cobol85Parser::OpenOutputContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOpenOutput(this);
}

void Cobol85Parser::OpenOutputContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOpenOutput(this);
}

Cobol85Parser::OpenOutputContext* Cobol85Parser::openOutput() {
  OpenOutputContext *_localctx = _tracker.createInstance<OpenOutputContext>(_ctx, getState());
  enterRule(_localctx, 788, Cobol85Parser::RuleOpenOutput);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4687);
    fileName();
    setState(4693);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 682, _ctx)) {
    case 1: {
      setState(4689);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Cobol85Parser::WITH) {
        setState(4688);
        match(Cobol85Parser::WITH);
      }
      setState(4691);
      match(Cobol85Parser::NO);
      setState(4692);
      match(Cobol85Parser::REWIND);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OpenIOStatementContext ------------------------------------------------------------------

Cobol85Parser::OpenIOStatementContext::OpenIOStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::OpenIOStatementContext::I_O() {
  return getToken(Cobol85Parser::I_O, 0);
}

std::vector<Cobol85Parser::FileNameContext *> Cobol85Parser::OpenIOStatementContext::fileName() {
  return getRuleContexts<Cobol85Parser::FileNameContext>();
}

Cobol85Parser::FileNameContext* Cobol85Parser::OpenIOStatementContext::fileName(size_t i) {
  return getRuleContext<Cobol85Parser::FileNameContext>(i);
}


size_t Cobol85Parser::OpenIOStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleOpenIOStatement;
}

void Cobol85Parser::OpenIOStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOpenIOStatement(this);
}

void Cobol85Parser::OpenIOStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOpenIOStatement(this);
}

Cobol85Parser::OpenIOStatementContext* Cobol85Parser::openIOStatement() {
  OpenIOStatementContext *_localctx = _tracker.createInstance<OpenIOStatementContext>(_ctx, getState());
  enterRule(_localctx, 790, Cobol85Parser::RuleOpenIOStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4695);
    match(Cobol85Parser::I_O);
    setState(4697); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(4696);
      fileName();
      setState(4699); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3512999431135821826) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 8070451912006173187) != 0) || ((((_la - 138) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 138)) & 5276573893883339531) != 0) || ((((_la - 202) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 202)) & -3098194965423761407) != 0) || ((((_la - 268) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 268)) & -9202532752178970507) != 0) || ((((_la - 336) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 336)) & 4647874433930428483) != 0) || ((((_la - 401) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 401)) & 84826144769) != 0) || ((((_la - 466) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 466)) & 103635575018455169) != 0) || _la == Cobol85Parser::IDENTIFIER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OpenExtendStatementContext ------------------------------------------------------------------

Cobol85Parser::OpenExtendStatementContext::OpenExtendStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::OpenExtendStatementContext::EXTEND() {
  return getToken(Cobol85Parser::EXTEND, 0);
}

std::vector<Cobol85Parser::FileNameContext *> Cobol85Parser::OpenExtendStatementContext::fileName() {
  return getRuleContexts<Cobol85Parser::FileNameContext>();
}

Cobol85Parser::FileNameContext* Cobol85Parser::OpenExtendStatementContext::fileName(size_t i) {
  return getRuleContext<Cobol85Parser::FileNameContext>(i);
}


size_t Cobol85Parser::OpenExtendStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleOpenExtendStatement;
}

void Cobol85Parser::OpenExtendStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOpenExtendStatement(this);
}

void Cobol85Parser::OpenExtendStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOpenExtendStatement(this);
}

Cobol85Parser::OpenExtendStatementContext* Cobol85Parser::openExtendStatement() {
  OpenExtendStatementContext *_localctx = _tracker.createInstance<OpenExtendStatementContext>(_ctx, getState());
  enterRule(_localctx, 792, Cobol85Parser::RuleOpenExtendStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4701);
    match(Cobol85Parser::EXTEND);
    setState(4703); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(4702);
      fileName();
      setState(4705); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3512999431135821826) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 8070451912006173187) != 0) || ((((_la - 138) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 138)) & 5276573893883339531) != 0) || ((((_la - 202) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 202)) & -3098194965423761407) != 0) || ((((_la - 268) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 268)) & -9202532752178970507) != 0) || ((((_la - 336) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 336)) & 4647874433930428483) != 0) || ((((_la - 401) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 401)) & 84826144769) != 0) || ((((_la - 466) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 466)) & 103635575018455169) != 0) || _la == Cobol85Parser::IDENTIFIER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PerformStatementContext ------------------------------------------------------------------

Cobol85Parser::PerformStatementContext::PerformStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::PerformStatementContext::PERFORM() {
  return getToken(Cobol85Parser::PERFORM, 0);
}

Cobol85Parser::PerformInlineStatementContext* Cobol85Parser::PerformStatementContext::performInlineStatement() {
  return getRuleContext<Cobol85Parser::PerformInlineStatementContext>(0);
}

Cobol85Parser::PerformProcedureStatementContext* Cobol85Parser::PerformStatementContext::performProcedureStatement() {
  return getRuleContext<Cobol85Parser::PerformProcedureStatementContext>(0);
}


size_t Cobol85Parser::PerformStatementContext::getRuleIndex() const {
  return Cobol85Parser::RulePerformStatement;
}

void Cobol85Parser::PerformStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPerformStatement(this);
}

void Cobol85Parser::PerformStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPerformStatement(this);
}

Cobol85Parser::PerformStatementContext* Cobol85Parser::performStatement() {
  PerformStatementContext *_localctx = _tracker.createInstance<PerformStatementContext>(_ctx, getState());
  enterRule(_localctx, 794, Cobol85Parser::RulePerformStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4707);
    match(Cobol85Parser::PERFORM);
    setState(4710);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 685, _ctx)) {
    case 1: {
      setState(4708);
      performInlineStatement();
      break;
    }

    case 2: {
      setState(4709);
      performProcedureStatement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PerformInlineStatementContext ------------------------------------------------------------------

Cobol85Parser::PerformInlineStatementContext::PerformInlineStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::PerformInlineStatementContext::END_PERFORM() {
  return getToken(Cobol85Parser::END_PERFORM, 0);
}

Cobol85Parser::PerformTypeContext* Cobol85Parser::PerformInlineStatementContext::performType() {
  return getRuleContext<Cobol85Parser::PerformTypeContext>(0);
}

std::vector<Cobol85Parser::StatementContext *> Cobol85Parser::PerformInlineStatementContext::statement() {
  return getRuleContexts<Cobol85Parser::StatementContext>();
}

Cobol85Parser::StatementContext* Cobol85Parser::PerformInlineStatementContext::statement(size_t i) {
  return getRuleContext<Cobol85Parser::StatementContext>(i);
}


size_t Cobol85Parser::PerformInlineStatementContext::getRuleIndex() const {
  return Cobol85Parser::RulePerformInlineStatement;
}

void Cobol85Parser::PerformInlineStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPerformInlineStatement(this);
}

void Cobol85Parser::PerformInlineStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPerformInlineStatement(this);
}

Cobol85Parser::PerformInlineStatementContext* Cobol85Parser::performInlineStatement() {
  PerformInlineStatementContext *_localctx = _tracker.createInstance<PerformInlineStatementContext>(_ctx, getState());
  enterRule(_localctx, 796, Cobol85Parser::RulePerformInlineStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4713);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3512999431135821858) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 8213661102500741635) != 0) || ((((_la - 138) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 138)) & 5276573893883339531) != 0) || ((((_la - 202) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 202)) & -3098194965423728639) != 0) || ((((_la - 268) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 268)) & -9202532752178961289) != 0) || ((((_la - 336) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 336)) & 4647874433930428515) != 0) || ((((_la - 401) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 401)) & 130978249457673) != 0) || ((((_la - 466) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 466)) & 104066617936808097) != 0) || ((((_la - 552) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 552)) & 47) != 0)) {
      setState(4712);
      performType();
    }
    setState(4718);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 13510798882242580) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 67)) & 570425345) != 0) || ((((_la - 131) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 131)) & 4613937818308192769) != 0) || ((((_la - 198) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 198)) & 1337281096974339) != 0) || ((((_la - 294) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 294)) & 562958543356225) != 0) || ((((_la - 365) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 365)) & 1161937774836712961) != 0) || ((((_la - 430) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 430)) & 70378206528513) != 0) || ((((_la - 500) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 500)) & 4035225266124095489) != 0)) {
      setState(4715);
      statement();
      setState(4720);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(4721);
    match(Cobol85Parser::END_PERFORM);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PerformProcedureStatementContext ------------------------------------------------------------------

Cobol85Parser::PerformProcedureStatementContext::PerformProcedureStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Cobol85Parser::ProcedureNameContext *> Cobol85Parser::PerformProcedureStatementContext::procedureName() {
  return getRuleContexts<Cobol85Parser::ProcedureNameContext>();
}

Cobol85Parser::ProcedureNameContext* Cobol85Parser::PerformProcedureStatementContext::procedureName(size_t i) {
  return getRuleContext<Cobol85Parser::ProcedureNameContext>(i);
}

Cobol85Parser::PerformTypeContext* Cobol85Parser::PerformProcedureStatementContext::performType() {
  return getRuleContext<Cobol85Parser::PerformTypeContext>(0);
}

tree::TerminalNode* Cobol85Parser::PerformProcedureStatementContext::THROUGH() {
  return getToken(Cobol85Parser::THROUGH, 0);
}

tree::TerminalNode* Cobol85Parser::PerformProcedureStatementContext::THRU() {
  return getToken(Cobol85Parser::THRU, 0);
}


size_t Cobol85Parser::PerformProcedureStatementContext::getRuleIndex() const {
  return Cobol85Parser::RulePerformProcedureStatement;
}

void Cobol85Parser::PerformProcedureStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPerformProcedureStatement(this);
}

void Cobol85Parser::PerformProcedureStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPerformProcedureStatement(this);
}

Cobol85Parser::PerformProcedureStatementContext* Cobol85Parser::performProcedureStatement() {
  PerformProcedureStatementContext *_localctx = _tracker.createInstance<PerformProcedureStatementContext>(_ctx, getState());
  enterRule(_localctx, 798, Cobol85Parser::RulePerformProcedureStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4723);
    procedureName();
    setState(4726);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::THROUGH

    || _la == Cobol85Parser::THRU) {
      setState(4724);
      _la = _input->LA(1);
      if (!(_la == Cobol85Parser::THROUGH

      || _la == Cobol85Parser::THRU)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(4725);
      procedureName();
    }
    setState(4729);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 689, _ctx)) {
    case 1: {
      setState(4728);
      performType();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PerformTypeContext ------------------------------------------------------------------

Cobol85Parser::PerformTypeContext::PerformTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::PerformTimesContext* Cobol85Parser::PerformTypeContext::performTimes() {
  return getRuleContext<Cobol85Parser::PerformTimesContext>(0);
}

Cobol85Parser::PerformUntilContext* Cobol85Parser::PerformTypeContext::performUntil() {
  return getRuleContext<Cobol85Parser::PerformUntilContext>(0);
}

Cobol85Parser::PerformVaryingContext* Cobol85Parser::PerformTypeContext::performVarying() {
  return getRuleContext<Cobol85Parser::PerformVaryingContext>(0);
}


size_t Cobol85Parser::PerformTypeContext::getRuleIndex() const {
  return Cobol85Parser::RulePerformType;
}

void Cobol85Parser::PerformTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPerformType(this);
}

void Cobol85Parser::PerformTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPerformType(this);
}

Cobol85Parser::PerformTypeContext* Cobol85Parser::performType() {
  PerformTypeContext *_localctx = _tracker.createInstance<PerformTypeContext>(_ctx, getState());
  enterRule(_localctx, 800, Cobol85Parser::RulePerformType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4734);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 690, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4731);
      performTimes();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4732);
      performUntil();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(4733);
      performVarying();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PerformTimesContext ------------------------------------------------------------------

Cobol85Parser::PerformTimesContext::PerformTimesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::PerformTimesContext::TIMES() {
  return getToken(Cobol85Parser::TIMES, 0);
}

Cobol85Parser::IdentifierContext* Cobol85Parser::PerformTimesContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

Cobol85Parser::IntegerLiteralContext* Cobol85Parser::PerformTimesContext::integerLiteral() {
  return getRuleContext<Cobol85Parser::IntegerLiteralContext>(0);
}


size_t Cobol85Parser::PerformTimesContext::getRuleIndex() const {
  return Cobol85Parser::RulePerformTimes;
}

void Cobol85Parser::PerformTimesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPerformTimes(this);
}

void Cobol85Parser::PerformTimesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPerformTimes(this);
}

Cobol85Parser::PerformTimesContext* Cobol85Parser::performTimes() {
  PerformTimesContext *_localctx = _tracker.createInstance<PerformTimesContext>(_ctx, getState());
  enterRule(_localctx, 802, Cobol85Parser::RulePerformTimes);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4738);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 691, _ctx)) {
    case 1: {
      setState(4736);
      identifier();
      break;
    }

    case 2: {
      setState(4737);
      integerLiteral();
      break;
    }

    default:
      break;
    }
    setState(4740);
    match(Cobol85Parser::TIMES);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PerformUntilContext ------------------------------------------------------------------

Cobol85Parser::PerformUntilContext::PerformUntilContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::PerformUntilContext::UNTIL() {
  return getToken(Cobol85Parser::UNTIL, 0);
}

Cobol85Parser::ConditionContext* Cobol85Parser::PerformUntilContext::condition() {
  return getRuleContext<Cobol85Parser::ConditionContext>(0);
}

Cobol85Parser::PerformTestClauseContext* Cobol85Parser::PerformUntilContext::performTestClause() {
  return getRuleContext<Cobol85Parser::PerformTestClauseContext>(0);
}


size_t Cobol85Parser::PerformUntilContext::getRuleIndex() const {
  return Cobol85Parser::RulePerformUntil;
}

void Cobol85Parser::PerformUntilContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPerformUntil(this);
}

void Cobol85Parser::PerformUntilContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPerformUntil(this);
}

Cobol85Parser::PerformUntilContext* Cobol85Parser::performUntil() {
  PerformUntilContext *_localctx = _tracker.createInstance<PerformUntilContext>(_ctx, getState());
  enterRule(_localctx, 804, Cobol85Parser::RulePerformUntil);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4743);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::TEST

    || _la == Cobol85Parser::WITH) {
      setState(4742);
      performTestClause();
    }
    setState(4745);
    match(Cobol85Parser::UNTIL);
    setState(4746);
    condition();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PerformVaryingContext ------------------------------------------------------------------

Cobol85Parser::PerformVaryingContext::PerformVaryingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::PerformTestClauseContext* Cobol85Parser::PerformVaryingContext::performTestClause() {
  return getRuleContext<Cobol85Parser::PerformTestClauseContext>(0);
}

Cobol85Parser::PerformVaryingClauseContext* Cobol85Parser::PerformVaryingContext::performVaryingClause() {
  return getRuleContext<Cobol85Parser::PerformVaryingClauseContext>(0);
}


size_t Cobol85Parser::PerformVaryingContext::getRuleIndex() const {
  return Cobol85Parser::RulePerformVarying;
}

void Cobol85Parser::PerformVaryingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPerformVarying(this);
}

void Cobol85Parser::PerformVaryingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPerformVarying(this);
}

Cobol85Parser::PerformVaryingContext* Cobol85Parser::performVarying() {
  PerformVaryingContext *_localctx = _tracker.createInstance<PerformVaryingContext>(_ctx, getState());
  enterRule(_localctx, 806, Cobol85Parser::RulePerformVarying);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4755);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Cobol85Parser::TEST:
      case Cobol85Parser::WITH: {
        enterOuterAlt(_localctx, 1);
        setState(4748);
        performTestClause();
        setState(4749);
        performVaryingClause();
        break;
      }

      case Cobol85Parser::VARYING: {
        enterOuterAlt(_localctx, 2);
        setState(4751);
        performVaryingClause();
        setState(4753);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 693, _ctx)) {
        case 1: {
          setState(4752);
          performTestClause();
          break;
        }

        default:
          break;
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PerformVaryingClauseContext ------------------------------------------------------------------

Cobol85Parser::PerformVaryingClauseContext::PerformVaryingClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::PerformVaryingClauseContext::VARYING() {
  return getToken(Cobol85Parser::VARYING, 0);
}

Cobol85Parser::PerformVaryingPhraseContext* Cobol85Parser::PerformVaryingClauseContext::performVaryingPhrase() {
  return getRuleContext<Cobol85Parser::PerformVaryingPhraseContext>(0);
}

std::vector<Cobol85Parser::PerformAfterContext *> Cobol85Parser::PerformVaryingClauseContext::performAfter() {
  return getRuleContexts<Cobol85Parser::PerformAfterContext>();
}

Cobol85Parser::PerformAfterContext* Cobol85Parser::PerformVaryingClauseContext::performAfter(size_t i) {
  return getRuleContext<Cobol85Parser::PerformAfterContext>(i);
}


size_t Cobol85Parser::PerformVaryingClauseContext::getRuleIndex() const {
  return Cobol85Parser::RulePerformVaryingClause;
}

void Cobol85Parser::PerformVaryingClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPerformVaryingClause(this);
}

void Cobol85Parser::PerformVaryingClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPerformVaryingClause(this);
}

Cobol85Parser::PerformVaryingClauseContext* Cobol85Parser::performVaryingClause() {
  PerformVaryingClauseContext *_localctx = _tracker.createInstance<PerformVaryingClauseContext>(_ctx, getState());
  enterRule(_localctx, 808, Cobol85Parser::RulePerformVaryingClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4757);
    match(Cobol85Parser::VARYING);
    setState(4758);
    performVaryingPhrase();
    setState(4762);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Cobol85Parser::AFTER) {
      setState(4759);
      performAfter();
      setState(4764);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PerformVaryingPhraseContext ------------------------------------------------------------------

Cobol85Parser::PerformVaryingPhraseContext::PerformVaryingPhraseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::PerformFromContext* Cobol85Parser::PerformVaryingPhraseContext::performFrom() {
  return getRuleContext<Cobol85Parser::PerformFromContext>(0);
}

Cobol85Parser::PerformByContext* Cobol85Parser::PerformVaryingPhraseContext::performBy() {
  return getRuleContext<Cobol85Parser::PerformByContext>(0);
}

Cobol85Parser::PerformUntilContext* Cobol85Parser::PerformVaryingPhraseContext::performUntil() {
  return getRuleContext<Cobol85Parser::PerformUntilContext>(0);
}

Cobol85Parser::IdentifierContext* Cobol85Parser::PerformVaryingPhraseContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

Cobol85Parser::LiteralContext* Cobol85Parser::PerformVaryingPhraseContext::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}


size_t Cobol85Parser::PerformVaryingPhraseContext::getRuleIndex() const {
  return Cobol85Parser::RulePerformVaryingPhrase;
}

void Cobol85Parser::PerformVaryingPhraseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPerformVaryingPhrase(this);
}

void Cobol85Parser::PerformVaryingPhraseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPerformVaryingPhrase(this);
}

Cobol85Parser::PerformVaryingPhraseContext* Cobol85Parser::performVaryingPhrase() {
  PerformVaryingPhraseContext *_localctx = _tracker.createInstance<PerformVaryingPhraseContext>(_ctx, getState());
  enterRule(_localctx, 810, Cobol85Parser::RulePerformVaryingPhrase);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4767);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 696, _ctx)) {
    case 1: {
      setState(4765);
      identifier();
      break;
    }

    case 2: {
      setState(4766);
      literal();
      break;
    }

    default:
      break;
    }
    setState(4769);
    performFrom();
    setState(4770);
    performBy();
    setState(4771);
    performUntil();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PerformAfterContext ------------------------------------------------------------------

Cobol85Parser::PerformAfterContext::PerformAfterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::PerformAfterContext::AFTER() {
  return getToken(Cobol85Parser::AFTER, 0);
}

Cobol85Parser::PerformVaryingPhraseContext* Cobol85Parser::PerformAfterContext::performVaryingPhrase() {
  return getRuleContext<Cobol85Parser::PerformVaryingPhraseContext>(0);
}


size_t Cobol85Parser::PerformAfterContext::getRuleIndex() const {
  return Cobol85Parser::RulePerformAfter;
}

void Cobol85Parser::PerformAfterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPerformAfter(this);
}

void Cobol85Parser::PerformAfterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPerformAfter(this);
}

Cobol85Parser::PerformAfterContext* Cobol85Parser::performAfter() {
  PerformAfterContext *_localctx = _tracker.createInstance<PerformAfterContext>(_ctx, getState());
  enterRule(_localctx, 812, Cobol85Parser::RulePerformAfter);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4773);
    match(Cobol85Parser::AFTER);
    setState(4774);
    performVaryingPhrase();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PerformFromContext ------------------------------------------------------------------

Cobol85Parser::PerformFromContext::PerformFromContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::PerformFromContext::FROM() {
  return getToken(Cobol85Parser::FROM, 0);
}

Cobol85Parser::IdentifierContext* Cobol85Parser::PerformFromContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

Cobol85Parser::LiteralContext* Cobol85Parser::PerformFromContext::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}

Cobol85Parser::ArithmeticExpressionContext* Cobol85Parser::PerformFromContext::arithmeticExpression() {
  return getRuleContext<Cobol85Parser::ArithmeticExpressionContext>(0);
}


size_t Cobol85Parser::PerformFromContext::getRuleIndex() const {
  return Cobol85Parser::RulePerformFrom;
}

void Cobol85Parser::PerformFromContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPerformFrom(this);
}

void Cobol85Parser::PerformFromContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPerformFrom(this);
}

Cobol85Parser::PerformFromContext* Cobol85Parser::performFrom() {
  PerformFromContext *_localctx = _tracker.createInstance<PerformFromContext>(_ctx, getState());
  enterRule(_localctx, 814, Cobol85Parser::RulePerformFrom);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4776);
    match(Cobol85Parser::FROM);
    setState(4780);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 697, _ctx)) {
    case 1: {
      setState(4777);
      identifier();
      break;
    }

    case 2: {
      setState(4778);
      literal();
      break;
    }

    case 3: {
      setState(4779);
      arithmeticExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PerformByContext ------------------------------------------------------------------

Cobol85Parser::PerformByContext::PerformByContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::PerformByContext::BY() {
  return getToken(Cobol85Parser::BY, 0);
}

Cobol85Parser::IdentifierContext* Cobol85Parser::PerformByContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

Cobol85Parser::LiteralContext* Cobol85Parser::PerformByContext::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}

Cobol85Parser::ArithmeticExpressionContext* Cobol85Parser::PerformByContext::arithmeticExpression() {
  return getRuleContext<Cobol85Parser::ArithmeticExpressionContext>(0);
}


size_t Cobol85Parser::PerformByContext::getRuleIndex() const {
  return Cobol85Parser::RulePerformBy;
}

void Cobol85Parser::PerformByContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPerformBy(this);
}

void Cobol85Parser::PerformByContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPerformBy(this);
}

Cobol85Parser::PerformByContext* Cobol85Parser::performBy() {
  PerformByContext *_localctx = _tracker.createInstance<PerformByContext>(_ctx, getState());
  enterRule(_localctx, 816, Cobol85Parser::RulePerformBy);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4782);
    match(Cobol85Parser::BY);
    setState(4786);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 698, _ctx)) {
    case 1: {
      setState(4783);
      identifier();
      break;
    }

    case 2: {
      setState(4784);
      literal();
      break;
    }

    case 3: {
      setState(4785);
      arithmeticExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PerformTestClauseContext ------------------------------------------------------------------

Cobol85Parser::PerformTestClauseContext::PerformTestClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::PerformTestClauseContext::TEST() {
  return getToken(Cobol85Parser::TEST, 0);
}

tree::TerminalNode* Cobol85Parser::PerformTestClauseContext::BEFORE() {
  return getToken(Cobol85Parser::BEFORE, 0);
}

tree::TerminalNode* Cobol85Parser::PerformTestClauseContext::AFTER() {
  return getToken(Cobol85Parser::AFTER, 0);
}

tree::TerminalNode* Cobol85Parser::PerformTestClauseContext::WITH() {
  return getToken(Cobol85Parser::WITH, 0);
}


size_t Cobol85Parser::PerformTestClauseContext::getRuleIndex() const {
  return Cobol85Parser::RulePerformTestClause;
}

void Cobol85Parser::PerformTestClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPerformTestClause(this);
}

void Cobol85Parser::PerformTestClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPerformTestClause(this);
}

Cobol85Parser::PerformTestClauseContext* Cobol85Parser::performTestClause() {
  PerformTestClauseContext *_localctx = _tracker.createInstance<PerformTestClauseContext>(_ctx, getState());
  enterRule(_localctx, 818, Cobol85Parser::RulePerformTestClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4789);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::WITH) {
      setState(4788);
      match(Cobol85Parser::WITH);
    }
    setState(4791);
    match(Cobol85Parser::TEST);
    setState(4792);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::AFTER

    || _la == Cobol85Parser::BEFORE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PurgeStatementContext ------------------------------------------------------------------

Cobol85Parser::PurgeStatementContext::PurgeStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::PurgeStatementContext::PURGE() {
  return getToken(Cobol85Parser::PURGE, 0);
}

std::vector<Cobol85Parser::CdNameContext *> Cobol85Parser::PurgeStatementContext::cdName() {
  return getRuleContexts<Cobol85Parser::CdNameContext>();
}

Cobol85Parser::CdNameContext* Cobol85Parser::PurgeStatementContext::cdName(size_t i) {
  return getRuleContext<Cobol85Parser::CdNameContext>(i);
}


size_t Cobol85Parser::PurgeStatementContext::getRuleIndex() const {
  return Cobol85Parser::RulePurgeStatement;
}

void Cobol85Parser::PurgeStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPurgeStatement(this);
}

void Cobol85Parser::PurgeStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPurgeStatement(this);
}

Cobol85Parser::PurgeStatementContext* Cobol85Parser::purgeStatement() {
  PurgeStatementContext *_localctx = _tracker.createInstance<PurgeStatementContext>(_ctx, getState());
  enterRule(_localctx, 820, Cobol85Parser::RulePurgeStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4794);
    match(Cobol85Parser::PURGE);
    setState(4796); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(4795);
      cdName();
      setState(4798); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3512999431135821826) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 8070451912006173187) != 0) || ((((_la - 138) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 138)) & 5276573893883339531) != 0) || ((((_la - 202) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 202)) & -3098194965423761407) != 0) || ((((_la - 268) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 268)) & -9202532752178970507) != 0) || ((((_la - 336) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 336)) & 4647874433930428483) != 0) || ((((_la - 401) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 401)) & 84826144769) != 0) || ((((_la - 466) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 466)) & 103635575018455169) != 0) || _la == Cobol85Parser::IDENTIFIER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReadStatementContext ------------------------------------------------------------------

Cobol85Parser::ReadStatementContext::ReadStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ReadStatementContext::READ() {
  return getToken(Cobol85Parser::READ, 0);
}

Cobol85Parser::FileNameContext* Cobol85Parser::ReadStatementContext::fileName() {
  return getRuleContext<Cobol85Parser::FileNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::ReadStatementContext::NEXT() {
  return getToken(Cobol85Parser::NEXT, 0);
}

tree::TerminalNode* Cobol85Parser::ReadStatementContext::RECORD() {
  return getToken(Cobol85Parser::RECORD, 0);
}

Cobol85Parser::ReadIntoContext* Cobol85Parser::ReadStatementContext::readInto() {
  return getRuleContext<Cobol85Parser::ReadIntoContext>(0);
}

Cobol85Parser::ReadWithContext* Cobol85Parser::ReadStatementContext::readWith() {
  return getRuleContext<Cobol85Parser::ReadWithContext>(0);
}

Cobol85Parser::ReadKeyContext* Cobol85Parser::ReadStatementContext::readKey() {
  return getRuleContext<Cobol85Parser::ReadKeyContext>(0);
}

Cobol85Parser::InvalidKeyPhraseContext* Cobol85Parser::ReadStatementContext::invalidKeyPhrase() {
  return getRuleContext<Cobol85Parser::InvalidKeyPhraseContext>(0);
}

Cobol85Parser::NotInvalidKeyPhraseContext* Cobol85Parser::ReadStatementContext::notInvalidKeyPhrase() {
  return getRuleContext<Cobol85Parser::NotInvalidKeyPhraseContext>(0);
}

Cobol85Parser::AtEndPhraseContext* Cobol85Parser::ReadStatementContext::atEndPhrase() {
  return getRuleContext<Cobol85Parser::AtEndPhraseContext>(0);
}

Cobol85Parser::NotAtEndPhraseContext* Cobol85Parser::ReadStatementContext::notAtEndPhrase() {
  return getRuleContext<Cobol85Parser::NotAtEndPhraseContext>(0);
}

tree::TerminalNode* Cobol85Parser::ReadStatementContext::END_READ() {
  return getToken(Cobol85Parser::END_READ, 0);
}


size_t Cobol85Parser::ReadStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleReadStatement;
}

void Cobol85Parser::ReadStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReadStatement(this);
}

void Cobol85Parser::ReadStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReadStatement(this);
}

Cobol85Parser::ReadStatementContext* Cobol85Parser::readStatement() {
  ReadStatementContext *_localctx = _tracker.createInstance<ReadStatementContext>(_ctx, getState());
  enterRule(_localctx, 822, Cobol85Parser::RuleReadStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4800);
    match(Cobol85Parser::READ);
    setState(4801);
    fileName();
    setState(4803);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::NEXT) {
      setState(4802);
      match(Cobol85Parser::NEXT);
    }
    setState(4806);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::RECORD) {
      setState(4805);
      match(Cobol85Parser::RECORD);
    }
    setState(4809);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::INTO) {
      setState(4808);
      readInto();
    }
    setState(4812);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 704, _ctx)) {
    case 1: {
      setState(4811);
      readWith();
      break;
    }

    default:
      break;
    }
    setState(4815);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::KEY) {
      setState(4814);
      readKey();
    }
    setState(4818);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 706, _ctx)) {
    case 1: {
      setState(4817);
      invalidKeyPhrase();
      break;
    }

    default:
      break;
    }
    setState(4821);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 707, _ctx)) {
    case 1: {
      setState(4820);
      notInvalidKeyPhrase();
      break;
    }

    default:
      break;
    }
    setState(4824);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 708, _ctx)) {
    case 1: {
      setState(4823);
      atEndPhrase();
      break;
    }

    default:
      break;
    }
    setState(4827);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 709, _ctx)) {
    case 1: {
      setState(4826);
      notAtEndPhrase();
      break;
    }

    default:
      break;
    }
    setState(4830);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 710, _ctx)) {
    case 1: {
      setState(4829);
      match(Cobol85Parser::END_READ);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReadIntoContext ------------------------------------------------------------------

Cobol85Parser::ReadIntoContext::ReadIntoContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ReadIntoContext::INTO() {
  return getToken(Cobol85Parser::INTO, 0);
}

Cobol85Parser::IdentifierContext* Cobol85Parser::ReadIntoContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}


size_t Cobol85Parser::ReadIntoContext::getRuleIndex() const {
  return Cobol85Parser::RuleReadInto;
}

void Cobol85Parser::ReadIntoContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReadInto(this);
}

void Cobol85Parser::ReadIntoContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReadInto(this);
}

Cobol85Parser::ReadIntoContext* Cobol85Parser::readInto() {
  ReadIntoContext *_localctx = _tracker.createInstance<ReadIntoContext>(_ctx, getState());
  enterRule(_localctx, 824, Cobol85Parser::RuleReadInto);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4832);
    match(Cobol85Parser::INTO);
    setState(4833);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReadWithContext ------------------------------------------------------------------

Cobol85Parser::ReadWithContext::ReadWithContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ReadWithContext::LOCK() {
  return getToken(Cobol85Parser::LOCK, 0);
}

tree::TerminalNode* Cobol85Parser::ReadWithContext::WAIT() {
  return getToken(Cobol85Parser::WAIT, 0);
}

tree::TerminalNode* Cobol85Parser::ReadWithContext::WITH() {
  return getToken(Cobol85Parser::WITH, 0);
}

tree::TerminalNode* Cobol85Parser::ReadWithContext::KEPT() {
  return getToken(Cobol85Parser::KEPT, 0);
}

tree::TerminalNode* Cobol85Parser::ReadWithContext::NO() {
  return getToken(Cobol85Parser::NO, 0);
}


size_t Cobol85Parser::ReadWithContext::getRuleIndex() const {
  return Cobol85Parser::RuleReadWith;
}

void Cobol85Parser::ReadWithContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReadWith(this);
}

void Cobol85Parser::ReadWithContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReadWith(this);
}

Cobol85Parser::ReadWithContext* Cobol85Parser::readWith() {
  ReadWithContext *_localctx = _tracker.createInstance<ReadWithContext>(_ctx, getState());
  enterRule(_localctx, 826, Cobol85Parser::RuleReadWith);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4836);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::WITH) {
      setState(4835);
      match(Cobol85Parser::WITH);
    }
    setState(4841);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Cobol85Parser::KEPT:
      case Cobol85Parser::NO: {
        setState(4838);
        _la = _input->LA(1);
        if (!(_la == Cobol85Parser::KEPT

        || _la == Cobol85Parser::NO)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(4839);
        match(Cobol85Parser::LOCK);
        break;
      }

      case Cobol85Parser::WAIT: {
        setState(4840);
        match(Cobol85Parser::WAIT);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReadKeyContext ------------------------------------------------------------------

Cobol85Parser::ReadKeyContext::ReadKeyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ReadKeyContext::KEY() {
  return getToken(Cobol85Parser::KEY, 0);
}

Cobol85Parser::QualifiedDataNameContext* Cobol85Parser::ReadKeyContext::qualifiedDataName() {
  return getRuleContext<Cobol85Parser::QualifiedDataNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::ReadKeyContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}


size_t Cobol85Parser::ReadKeyContext::getRuleIndex() const {
  return Cobol85Parser::RuleReadKey;
}

void Cobol85Parser::ReadKeyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReadKey(this);
}

void Cobol85Parser::ReadKeyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReadKey(this);
}

Cobol85Parser::ReadKeyContext* Cobol85Parser::readKey() {
  ReadKeyContext *_localctx = _tracker.createInstance<ReadKeyContext>(_ctx, getState());
  enterRule(_localctx, 828, Cobol85Parser::RuleReadKey);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4843);
    match(Cobol85Parser::KEY);
    setState(4845);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(4844);
      match(Cobol85Parser::IS);
    }
    setState(4847);
    qualifiedDataName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReceiveStatementContext ------------------------------------------------------------------

Cobol85Parser::ReceiveStatementContext::ReceiveStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ReceiveStatementContext::RECEIVE() {
  return getToken(Cobol85Parser::RECEIVE, 0);
}

Cobol85Parser::ReceiveFromStatementContext* Cobol85Parser::ReceiveStatementContext::receiveFromStatement() {
  return getRuleContext<Cobol85Parser::ReceiveFromStatementContext>(0);
}

Cobol85Parser::ReceiveIntoStatementContext* Cobol85Parser::ReceiveStatementContext::receiveIntoStatement() {
  return getRuleContext<Cobol85Parser::ReceiveIntoStatementContext>(0);
}

Cobol85Parser::OnExceptionClauseContext* Cobol85Parser::ReceiveStatementContext::onExceptionClause() {
  return getRuleContext<Cobol85Parser::OnExceptionClauseContext>(0);
}

Cobol85Parser::NotOnExceptionClauseContext* Cobol85Parser::ReceiveStatementContext::notOnExceptionClause() {
  return getRuleContext<Cobol85Parser::NotOnExceptionClauseContext>(0);
}

tree::TerminalNode* Cobol85Parser::ReceiveStatementContext::END_RECEIVE() {
  return getToken(Cobol85Parser::END_RECEIVE, 0);
}


size_t Cobol85Parser::ReceiveStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleReceiveStatement;
}

void Cobol85Parser::ReceiveStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReceiveStatement(this);
}

void Cobol85Parser::ReceiveStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReceiveStatement(this);
}

Cobol85Parser::ReceiveStatementContext* Cobol85Parser::receiveStatement() {
  ReceiveStatementContext *_localctx = _tracker.createInstance<ReceiveStatementContext>(_ctx, getState());
  enterRule(_localctx, 830, Cobol85Parser::RuleReceiveStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4849);
    match(Cobol85Parser::RECEIVE);
    setState(4852);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 714, _ctx)) {
    case 1: {
      setState(4850);
      receiveFromStatement();
      break;
    }

    case 2: {
      setState(4851);
      receiveIntoStatement();
      break;
    }

    default:
      break;
    }
    setState(4855);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 715, _ctx)) {
    case 1: {
      setState(4854);
      onExceptionClause();
      break;
    }

    default:
      break;
    }
    setState(4858);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 716, _ctx)) {
    case 1: {
      setState(4857);
      notOnExceptionClause();
      break;
    }

    default:
      break;
    }
    setState(4861);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 717, _ctx)) {
    case 1: {
      setState(4860);
      match(Cobol85Parser::END_RECEIVE);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReceiveFromStatementContext ------------------------------------------------------------------

Cobol85Parser::ReceiveFromStatementContext::ReceiveFromStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::DataNameContext* Cobol85Parser::ReceiveFromStatementContext::dataName() {
  return getRuleContext<Cobol85Parser::DataNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::ReceiveFromStatementContext::FROM() {
  return getToken(Cobol85Parser::FROM, 0);
}

Cobol85Parser::ReceiveFromContext* Cobol85Parser::ReceiveFromStatementContext::receiveFrom() {
  return getRuleContext<Cobol85Parser::ReceiveFromContext>(0);
}

std::vector<Cobol85Parser::ReceiveBeforeContext *> Cobol85Parser::ReceiveFromStatementContext::receiveBefore() {
  return getRuleContexts<Cobol85Parser::ReceiveBeforeContext>();
}

Cobol85Parser::ReceiveBeforeContext* Cobol85Parser::ReceiveFromStatementContext::receiveBefore(size_t i) {
  return getRuleContext<Cobol85Parser::ReceiveBeforeContext>(i);
}

std::vector<Cobol85Parser::ReceiveWithContext *> Cobol85Parser::ReceiveFromStatementContext::receiveWith() {
  return getRuleContexts<Cobol85Parser::ReceiveWithContext>();
}

Cobol85Parser::ReceiveWithContext* Cobol85Parser::ReceiveFromStatementContext::receiveWith(size_t i) {
  return getRuleContext<Cobol85Parser::ReceiveWithContext>(i);
}

std::vector<Cobol85Parser::ReceiveThreadContext *> Cobol85Parser::ReceiveFromStatementContext::receiveThread() {
  return getRuleContexts<Cobol85Parser::ReceiveThreadContext>();
}

Cobol85Parser::ReceiveThreadContext* Cobol85Parser::ReceiveFromStatementContext::receiveThread(size_t i) {
  return getRuleContext<Cobol85Parser::ReceiveThreadContext>(i);
}

std::vector<Cobol85Parser::ReceiveSizeContext *> Cobol85Parser::ReceiveFromStatementContext::receiveSize() {
  return getRuleContexts<Cobol85Parser::ReceiveSizeContext>();
}

Cobol85Parser::ReceiveSizeContext* Cobol85Parser::ReceiveFromStatementContext::receiveSize(size_t i) {
  return getRuleContext<Cobol85Parser::ReceiveSizeContext>(i);
}

std::vector<Cobol85Parser::ReceiveStatusContext *> Cobol85Parser::ReceiveFromStatementContext::receiveStatus() {
  return getRuleContexts<Cobol85Parser::ReceiveStatusContext>();
}

Cobol85Parser::ReceiveStatusContext* Cobol85Parser::ReceiveFromStatementContext::receiveStatus(size_t i) {
  return getRuleContext<Cobol85Parser::ReceiveStatusContext>(i);
}


size_t Cobol85Parser::ReceiveFromStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleReceiveFromStatement;
}

void Cobol85Parser::ReceiveFromStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReceiveFromStatement(this);
}

void Cobol85Parser::ReceiveFromStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReceiveFromStatement(this);
}

Cobol85Parser::ReceiveFromStatementContext* Cobol85Parser::receiveFromStatement() {
  ReceiveFromStatementContext *_localctx = _tracker.createInstance<ReceiveFromStatementContext>(_ctx, getState());
  enterRule(_localctx, 832, Cobol85Parser::RuleReceiveFromStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(4863);
    dataName();
    setState(4864);
    match(Cobol85Parser::FROM);
    setState(4865);
    receiveFrom();
    setState(4873);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 719, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(4871);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case Cobol85Parser::BEFORE: {
            setState(4866);
            receiveBefore();
            break;
          }

          case Cobol85Parser::NO:
          case Cobol85Parser::WITH: {
            setState(4867);
            receiveWith();
            break;
          }

          case Cobol85Parser::THREAD: {
            setState(4868);
            receiveThread();
            break;
          }

          case Cobol85Parser::SIZE: {
            setState(4869);
            receiveSize();
            break;
          }

          case Cobol85Parser::STATUS: {
            setState(4870);
            receiveStatus();
            break;
          }

        default:
          throw NoViableAltException(this);
        } 
      }
      setState(4875);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 719, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReceiveFromContext ------------------------------------------------------------------

Cobol85Parser::ReceiveFromContext::ReceiveFromContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ReceiveFromContext::THREAD() {
  return getToken(Cobol85Parser::THREAD, 0);
}

Cobol85Parser::DataNameContext* Cobol85Parser::ReceiveFromContext::dataName() {
  return getRuleContext<Cobol85Parser::DataNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::ReceiveFromContext::LAST() {
  return getToken(Cobol85Parser::LAST, 0);
}

tree::TerminalNode* Cobol85Parser::ReceiveFromContext::ANY() {
  return getToken(Cobol85Parser::ANY, 0);
}


size_t Cobol85Parser::ReceiveFromContext::getRuleIndex() const {
  return Cobol85Parser::RuleReceiveFrom;
}

void Cobol85Parser::ReceiveFromContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReceiveFrom(this);
}

void Cobol85Parser::ReceiveFromContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReceiveFrom(this);
}

Cobol85Parser::ReceiveFromContext* Cobol85Parser::receiveFrom() {
  ReceiveFromContext *_localctx = _tracker.createInstance<ReceiveFromContext>(_ctx, getState());
  enterRule(_localctx, 834, Cobol85Parser::RuleReceiveFrom);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4882);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Cobol85Parser::THREAD: {
        enterOuterAlt(_localctx, 1);
        setState(4876);
        match(Cobol85Parser::THREAD);
        setState(4877);
        dataName();
        break;
      }

      case Cobol85Parser::LAST: {
        enterOuterAlt(_localctx, 2);
        setState(4878);
        match(Cobol85Parser::LAST);
        setState(4879);
        match(Cobol85Parser::THREAD);
        break;
      }

      case Cobol85Parser::ANY: {
        enterOuterAlt(_localctx, 3);
        setState(4880);
        match(Cobol85Parser::ANY);
        setState(4881);
        match(Cobol85Parser::THREAD);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReceiveIntoStatementContext ------------------------------------------------------------------

Cobol85Parser::ReceiveIntoStatementContext::ReceiveIntoStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::CdNameContext* Cobol85Parser::ReceiveIntoStatementContext::cdName() {
  return getRuleContext<Cobol85Parser::CdNameContext>(0);
}

Cobol85Parser::IdentifierContext* Cobol85Parser::ReceiveIntoStatementContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

tree::TerminalNode* Cobol85Parser::ReceiveIntoStatementContext::MESSAGE() {
  return getToken(Cobol85Parser::MESSAGE, 0);
}

tree::TerminalNode* Cobol85Parser::ReceiveIntoStatementContext::SEGMENT() {
  return getToken(Cobol85Parser::SEGMENT, 0);
}

tree::TerminalNode* Cobol85Parser::ReceiveIntoStatementContext::INTO() {
  return getToken(Cobol85Parser::INTO, 0);
}

Cobol85Parser::ReceiveNoDataContext* Cobol85Parser::ReceiveIntoStatementContext::receiveNoData() {
  return getRuleContext<Cobol85Parser::ReceiveNoDataContext>(0);
}

Cobol85Parser::ReceiveWithDataContext* Cobol85Parser::ReceiveIntoStatementContext::receiveWithData() {
  return getRuleContext<Cobol85Parser::ReceiveWithDataContext>(0);
}


size_t Cobol85Parser::ReceiveIntoStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleReceiveIntoStatement;
}

void Cobol85Parser::ReceiveIntoStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReceiveIntoStatement(this);
}

void Cobol85Parser::ReceiveIntoStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReceiveIntoStatement(this);
}

Cobol85Parser::ReceiveIntoStatementContext* Cobol85Parser::receiveIntoStatement() {
  ReceiveIntoStatementContext *_localctx = _tracker.createInstance<ReceiveIntoStatementContext>(_ctx, getState());
  enterRule(_localctx, 836, Cobol85Parser::RuleReceiveIntoStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4884);
    cdName();
    setState(4885);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::MESSAGE || _la == Cobol85Parser::SEGMENT)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(4887);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::INTO) {
      setState(4886);
      match(Cobol85Parser::INTO);
    }
    setState(4889);
    identifier();
    setState(4891);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::NO) {
      setState(4890);
      receiveNoData();
    }
    setState(4894);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 723, _ctx)) {
    case 1: {
      setState(4893);
      receiveWithData();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReceiveNoDataContext ------------------------------------------------------------------

Cobol85Parser::ReceiveNoDataContext::ReceiveNoDataContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ReceiveNoDataContext::NO() {
  return getToken(Cobol85Parser::NO, 0);
}

tree::TerminalNode* Cobol85Parser::ReceiveNoDataContext::DATA() {
  return getToken(Cobol85Parser::DATA, 0);
}

std::vector<Cobol85Parser::StatementContext *> Cobol85Parser::ReceiveNoDataContext::statement() {
  return getRuleContexts<Cobol85Parser::StatementContext>();
}

Cobol85Parser::StatementContext* Cobol85Parser::ReceiveNoDataContext::statement(size_t i) {
  return getRuleContext<Cobol85Parser::StatementContext>(i);
}


size_t Cobol85Parser::ReceiveNoDataContext::getRuleIndex() const {
  return Cobol85Parser::RuleReceiveNoData;
}

void Cobol85Parser::ReceiveNoDataContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReceiveNoData(this);
}

void Cobol85Parser::ReceiveNoDataContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReceiveNoData(this);
}

Cobol85Parser::ReceiveNoDataContext* Cobol85Parser::receiveNoData() {
  ReceiveNoDataContext *_localctx = _tracker.createInstance<ReceiveNoDataContext>(_ctx, getState());
  enterRule(_localctx, 838, Cobol85Parser::RuleReceiveNoData);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(4896);
    match(Cobol85Parser::NO);
    setState(4897);
    match(Cobol85Parser::DATA);
    setState(4901);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 724, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(4898);
        statement(); 
      }
      setState(4903);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 724, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReceiveWithDataContext ------------------------------------------------------------------

Cobol85Parser::ReceiveWithDataContext::ReceiveWithDataContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ReceiveWithDataContext::WITH() {
  return getToken(Cobol85Parser::WITH, 0);
}

tree::TerminalNode* Cobol85Parser::ReceiveWithDataContext::DATA() {
  return getToken(Cobol85Parser::DATA, 0);
}

std::vector<Cobol85Parser::StatementContext *> Cobol85Parser::ReceiveWithDataContext::statement() {
  return getRuleContexts<Cobol85Parser::StatementContext>();
}

Cobol85Parser::StatementContext* Cobol85Parser::ReceiveWithDataContext::statement(size_t i) {
  return getRuleContext<Cobol85Parser::StatementContext>(i);
}


size_t Cobol85Parser::ReceiveWithDataContext::getRuleIndex() const {
  return Cobol85Parser::RuleReceiveWithData;
}

void Cobol85Parser::ReceiveWithDataContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReceiveWithData(this);
}

void Cobol85Parser::ReceiveWithDataContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReceiveWithData(this);
}

Cobol85Parser::ReceiveWithDataContext* Cobol85Parser::receiveWithData() {
  ReceiveWithDataContext *_localctx = _tracker.createInstance<ReceiveWithDataContext>(_ctx, getState());
  enterRule(_localctx, 840, Cobol85Parser::RuleReceiveWithData);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(4904);
    match(Cobol85Parser::WITH);
    setState(4905);
    match(Cobol85Parser::DATA);
    setState(4909);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 725, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(4906);
        statement(); 
      }
      setState(4911);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 725, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReceiveBeforeContext ------------------------------------------------------------------

Cobol85Parser::ReceiveBeforeContext::ReceiveBeforeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ReceiveBeforeContext::BEFORE() {
  return getToken(Cobol85Parser::BEFORE, 0);
}

Cobol85Parser::NumericLiteralContext* Cobol85Parser::ReceiveBeforeContext::numericLiteral() {
  return getRuleContext<Cobol85Parser::NumericLiteralContext>(0);
}

Cobol85Parser::IdentifierContext* Cobol85Parser::ReceiveBeforeContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

tree::TerminalNode* Cobol85Parser::ReceiveBeforeContext::TIME() {
  return getToken(Cobol85Parser::TIME, 0);
}


size_t Cobol85Parser::ReceiveBeforeContext::getRuleIndex() const {
  return Cobol85Parser::RuleReceiveBefore;
}

void Cobol85Parser::ReceiveBeforeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReceiveBefore(this);
}

void Cobol85Parser::ReceiveBeforeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReceiveBefore(this);
}

Cobol85Parser::ReceiveBeforeContext* Cobol85Parser::receiveBefore() {
  ReceiveBeforeContext *_localctx = _tracker.createInstance<ReceiveBeforeContext>(_ctx, getState());
  enterRule(_localctx, 842, Cobol85Parser::RuleReceiveBefore);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4912);
    match(Cobol85Parser::BEFORE);
    setState(4914);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 726, _ctx)) {
    case 1: {
      setState(4913);
      match(Cobol85Parser::TIME);
      break;
    }

    default:
      break;
    }
    setState(4918);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 727, _ctx)) {
    case 1: {
      setState(4916);
      numericLiteral();
      break;
    }

    case 2: {
      setState(4917);
      identifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReceiveWithContext ------------------------------------------------------------------

Cobol85Parser::ReceiveWithContext::ReceiveWithContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ReceiveWithContext::NO() {
  return getToken(Cobol85Parser::NO, 0);
}

tree::TerminalNode* Cobol85Parser::ReceiveWithContext::WAIT() {
  return getToken(Cobol85Parser::WAIT, 0);
}

tree::TerminalNode* Cobol85Parser::ReceiveWithContext::WITH() {
  return getToken(Cobol85Parser::WITH, 0);
}


size_t Cobol85Parser::ReceiveWithContext::getRuleIndex() const {
  return Cobol85Parser::RuleReceiveWith;
}

void Cobol85Parser::ReceiveWithContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReceiveWith(this);
}

void Cobol85Parser::ReceiveWithContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReceiveWith(this);
}

Cobol85Parser::ReceiveWithContext* Cobol85Parser::receiveWith() {
  ReceiveWithContext *_localctx = _tracker.createInstance<ReceiveWithContext>(_ctx, getState());
  enterRule(_localctx, 844, Cobol85Parser::RuleReceiveWith);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4921);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::WITH) {
      setState(4920);
      match(Cobol85Parser::WITH);
    }
    setState(4923);
    match(Cobol85Parser::NO);
    setState(4924);
    match(Cobol85Parser::WAIT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReceiveThreadContext ------------------------------------------------------------------

Cobol85Parser::ReceiveThreadContext::ReceiveThreadContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ReceiveThreadContext::THREAD() {
  return getToken(Cobol85Parser::THREAD, 0);
}

Cobol85Parser::DataNameContext* Cobol85Parser::ReceiveThreadContext::dataName() {
  return getRuleContext<Cobol85Parser::DataNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::ReceiveThreadContext::IN() {
  return getToken(Cobol85Parser::IN, 0);
}


size_t Cobol85Parser::ReceiveThreadContext::getRuleIndex() const {
  return Cobol85Parser::RuleReceiveThread;
}

void Cobol85Parser::ReceiveThreadContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReceiveThread(this);
}

void Cobol85Parser::ReceiveThreadContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReceiveThread(this);
}

Cobol85Parser::ReceiveThreadContext* Cobol85Parser::receiveThread() {
  ReceiveThreadContext *_localctx = _tracker.createInstance<ReceiveThreadContext>(_ctx, getState());
  enterRule(_localctx, 846, Cobol85Parser::RuleReceiveThread);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4926);
    match(Cobol85Parser::THREAD);
    setState(4928);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IN) {
      setState(4927);
      match(Cobol85Parser::IN);
    }
    setState(4930);
    dataName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReceiveSizeContext ------------------------------------------------------------------

Cobol85Parser::ReceiveSizeContext::ReceiveSizeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ReceiveSizeContext::SIZE() {
  return getToken(Cobol85Parser::SIZE, 0);
}

Cobol85Parser::NumericLiteralContext* Cobol85Parser::ReceiveSizeContext::numericLiteral() {
  return getRuleContext<Cobol85Parser::NumericLiteralContext>(0);
}

Cobol85Parser::IdentifierContext* Cobol85Parser::ReceiveSizeContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

tree::TerminalNode* Cobol85Parser::ReceiveSizeContext::IN() {
  return getToken(Cobol85Parser::IN, 0);
}


size_t Cobol85Parser::ReceiveSizeContext::getRuleIndex() const {
  return Cobol85Parser::RuleReceiveSize;
}

void Cobol85Parser::ReceiveSizeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReceiveSize(this);
}

void Cobol85Parser::ReceiveSizeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReceiveSize(this);
}

Cobol85Parser::ReceiveSizeContext* Cobol85Parser::receiveSize() {
  ReceiveSizeContext *_localctx = _tracker.createInstance<ReceiveSizeContext>(_ctx, getState());
  enterRule(_localctx, 848, Cobol85Parser::RuleReceiveSize);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4932);
    match(Cobol85Parser::SIZE);
    setState(4934);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IN) {
      setState(4933);
      match(Cobol85Parser::IN);
    }
    setState(4938);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 731, _ctx)) {
    case 1: {
      setState(4936);
      numericLiteral();
      break;
    }

    case 2: {
      setState(4937);
      identifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReceiveStatusContext ------------------------------------------------------------------

Cobol85Parser::ReceiveStatusContext::ReceiveStatusContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ReceiveStatusContext::STATUS() {
  return getToken(Cobol85Parser::STATUS, 0);
}

Cobol85Parser::IdentifierContext* Cobol85Parser::ReceiveStatusContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

tree::TerminalNode* Cobol85Parser::ReceiveStatusContext::IN() {
  return getToken(Cobol85Parser::IN, 0);
}


size_t Cobol85Parser::ReceiveStatusContext::getRuleIndex() const {
  return Cobol85Parser::RuleReceiveStatus;
}

void Cobol85Parser::ReceiveStatusContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReceiveStatus(this);
}

void Cobol85Parser::ReceiveStatusContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReceiveStatus(this);
}

Cobol85Parser::ReceiveStatusContext* Cobol85Parser::receiveStatus() {
  ReceiveStatusContext *_localctx = _tracker.createInstance<ReceiveStatusContext>(_ctx, getState());
  enterRule(_localctx, 850, Cobol85Parser::RuleReceiveStatus);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4940);
    match(Cobol85Parser::STATUS);
    setState(4942);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IN) {
      setState(4941);
      match(Cobol85Parser::IN);
    }

    setState(4944);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReleaseStatementContext ------------------------------------------------------------------

Cobol85Parser::ReleaseStatementContext::ReleaseStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ReleaseStatementContext::RELEASE() {
  return getToken(Cobol85Parser::RELEASE, 0);
}

Cobol85Parser::RecordNameContext* Cobol85Parser::ReleaseStatementContext::recordName() {
  return getRuleContext<Cobol85Parser::RecordNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::ReleaseStatementContext::FROM() {
  return getToken(Cobol85Parser::FROM, 0);
}

Cobol85Parser::QualifiedDataNameContext* Cobol85Parser::ReleaseStatementContext::qualifiedDataName() {
  return getRuleContext<Cobol85Parser::QualifiedDataNameContext>(0);
}


size_t Cobol85Parser::ReleaseStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleReleaseStatement;
}

void Cobol85Parser::ReleaseStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReleaseStatement(this);
}

void Cobol85Parser::ReleaseStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReleaseStatement(this);
}

Cobol85Parser::ReleaseStatementContext* Cobol85Parser::releaseStatement() {
  ReleaseStatementContext *_localctx = _tracker.createInstance<ReleaseStatementContext>(_ctx, getState());
  enterRule(_localctx, 852, Cobol85Parser::RuleReleaseStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4946);
    match(Cobol85Parser::RELEASE);
    setState(4947);
    recordName();
    setState(4950);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::FROM) {
      setState(4948);
      match(Cobol85Parser::FROM);
      setState(4949);
      qualifiedDataName();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReturnStatementContext ------------------------------------------------------------------

Cobol85Parser::ReturnStatementContext::ReturnStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ReturnStatementContext::RETURN() {
  return getToken(Cobol85Parser::RETURN, 0);
}

Cobol85Parser::FileNameContext* Cobol85Parser::ReturnStatementContext::fileName() {
  return getRuleContext<Cobol85Parser::FileNameContext>(0);
}

Cobol85Parser::AtEndPhraseContext* Cobol85Parser::ReturnStatementContext::atEndPhrase() {
  return getRuleContext<Cobol85Parser::AtEndPhraseContext>(0);
}

tree::TerminalNode* Cobol85Parser::ReturnStatementContext::RECORD() {
  return getToken(Cobol85Parser::RECORD, 0);
}

Cobol85Parser::ReturnIntoContext* Cobol85Parser::ReturnStatementContext::returnInto() {
  return getRuleContext<Cobol85Parser::ReturnIntoContext>(0);
}

Cobol85Parser::NotAtEndPhraseContext* Cobol85Parser::ReturnStatementContext::notAtEndPhrase() {
  return getRuleContext<Cobol85Parser::NotAtEndPhraseContext>(0);
}

tree::TerminalNode* Cobol85Parser::ReturnStatementContext::END_RETURN() {
  return getToken(Cobol85Parser::END_RETURN, 0);
}


size_t Cobol85Parser::ReturnStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleReturnStatement;
}

void Cobol85Parser::ReturnStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReturnStatement(this);
}

void Cobol85Parser::ReturnStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReturnStatement(this);
}

Cobol85Parser::ReturnStatementContext* Cobol85Parser::returnStatement() {
  ReturnStatementContext *_localctx = _tracker.createInstance<ReturnStatementContext>(_ctx, getState());
  enterRule(_localctx, 854, Cobol85Parser::RuleReturnStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4952);
    match(Cobol85Parser::RETURN);
    setState(4953);
    fileName();
    setState(4955);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::RECORD) {
      setState(4954);
      match(Cobol85Parser::RECORD);
    }
    setState(4958);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::INTO) {
      setState(4957);
      returnInto();
    }
    setState(4960);
    atEndPhrase();
    setState(4962);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 736, _ctx)) {
    case 1: {
      setState(4961);
      notAtEndPhrase();
      break;
    }

    default:
      break;
    }
    setState(4965);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 737, _ctx)) {
    case 1: {
      setState(4964);
      match(Cobol85Parser::END_RETURN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReturnIntoContext ------------------------------------------------------------------

Cobol85Parser::ReturnIntoContext::ReturnIntoContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ReturnIntoContext::INTO() {
  return getToken(Cobol85Parser::INTO, 0);
}

Cobol85Parser::QualifiedDataNameContext* Cobol85Parser::ReturnIntoContext::qualifiedDataName() {
  return getRuleContext<Cobol85Parser::QualifiedDataNameContext>(0);
}


size_t Cobol85Parser::ReturnIntoContext::getRuleIndex() const {
  return Cobol85Parser::RuleReturnInto;
}

void Cobol85Parser::ReturnIntoContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReturnInto(this);
}

void Cobol85Parser::ReturnIntoContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReturnInto(this);
}

Cobol85Parser::ReturnIntoContext* Cobol85Parser::returnInto() {
  ReturnIntoContext *_localctx = _tracker.createInstance<ReturnIntoContext>(_ctx, getState());
  enterRule(_localctx, 856, Cobol85Parser::RuleReturnInto);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4967);
    match(Cobol85Parser::INTO);
    setState(4968);
    qualifiedDataName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RewriteStatementContext ------------------------------------------------------------------

Cobol85Parser::RewriteStatementContext::RewriteStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::RewriteStatementContext::REWRITE() {
  return getToken(Cobol85Parser::REWRITE, 0);
}

Cobol85Parser::RecordNameContext* Cobol85Parser::RewriteStatementContext::recordName() {
  return getRuleContext<Cobol85Parser::RecordNameContext>(0);
}

Cobol85Parser::RewriteFromContext* Cobol85Parser::RewriteStatementContext::rewriteFrom() {
  return getRuleContext<Cobol85Parser::RewriteFromContext>(0);
}

Cobol85Parser::InvalidKeyPhraseContext* Cobol85Parser::RewriteStatementContext::invalidKeyPhrase() {
  return getRuleContext<Cobol85Parser::InvalidKeyPhraseContext>(0);
}

Cobol85Parser::NotInvalidKeyPhraseContext* Cobol85Parser::RewriteStatementContext::notInvalidKeyPhrase() {
  return getRuleContext<Cobol85Parser::NotInvalidKeyPhraseContext>(0);
}

tree::TerminalNode* Cobol85Parser::RewriteStatementContext::END_REWRITE() {
  return getToken(Cobol85Parser::END_REWRITE, 0);
}


size_t Cobol85Parser::RewriteStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleRewriteStatement;
}

void Cobol85Parser::RewriteStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRewriteStatement(this);
}

void Cobol85Parser::RewriteStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRewriteStatement(this);
}

Cobol85Parser::RewriteStatementContext* Cobol85Parser::rewriteStatement() {
  RewriteStatementContext *_localctx = _tracker.createInstance<RewriteStatementContext>(_ctx, getState());
  enterRule(_localctx, 858, Cobol85Parser::RuleRewriteStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4970);
    match(Cobol85Parser::REWRITE);
    setState(4971);
    recordName();
    setState(4973);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::FROM) {
      setState(4972);
      rewriteFrom();
    }
    setState(4976);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 739, _ctx)) {
    case 1: {
      setState(4975);
      invalidKeyPhrase();
      break;
    }

    default:
      break;
    }
    setState(4979);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 740, _ctx)) {
    case 1: {
      setState(4978);
      notInvalidKeyPhrase();
      break;
    }

    default:
      break;
    }
    setState(4982);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 741, _ctx)) {
    case 1: {
      setState(4981);
      match(Cobol85Parser::END_REWRITE);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RewriteFromContext ------------------------------------------------------------------

Cobol85Parser::RewriteFromContext::RewriteFromContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::RewriteFromContext::FROM() {
  return getToken(Cobol85Parser::FROM, 0);
}

Cobol85Parser::IdentifierContext* Cobol85Parser::RewriteFromContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}


size_t Cobol85Parser::RewriteFromContext::getRuleIndex() const {
  return Cobol85Parser::RuleRewriteFrom;
}

void Cobol85Parser::RewriteFromContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRewriteFrom(this);
}

void Cobol85Parser::RewriteFromContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRewriteFrom(this);
}

Cobol85Parser::RewriteFromContext* Cobol85Parser::rewriteFrom() {
  RewriteFromContext *_localctx = _tracker.createInstance<RewriteFromContext>(_ctx, getState());
  enterRule(_localctx, 860, Cobol85Parser::RuleRewriteFrom);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4984);
    match(Cobol85Parser::FROM);
    setState(4985);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SearchStatementContext ------------------------------------------------------------------

Cobol85Parser::SearchStatementContext::SearchStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::SearchStatementContext::SEARCH() {
  return getToken(Cobol85Parser::SEARCH, 0);
}

Cobol85Parser::QualifiedDataNameContext* Cobol85Parser::SearchStatementContext::qualifiedDataName() {
  return getRuleContext<Cobol85Parser::QualifiedDataNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::SearchStatementContext::ALL() {
  return getToken(Cobol85Parser::ALL, 0);
}

Cobol85Parser::SearchVaryingContext* Cobol85Parser::SearchStatementContext::searchVarying() {
  return getRuleContext<Cobol85Parser::SearchVaryingContext>(0);
}

Cobol85Parser::AtEndPhraseContext* Cobol85Parser::SearchStatementContext::atEndPhrase() {
  return getRuleContext<Cobol85Parser::AtEndPhraseContext>(0);
}

std::vector<Cobol85Parser::SearchWhenContext *> Cobol85Parser::SearchStatementContext::searchWhen() {
  return getRuleContexts<Cobol85Parser::SearchWhenContext>();
}

Cobol85Parser::SearchWhenContext* Cobol85Parser::SearchStatementContext::searchWhen(size_t i) {
  return getRuleContext<Cobol85Parser::SearchWhenContext>(i);
}

tree::TerminalNode* Cobol85Parser::SearchStatementContext::END_SEARCH() {
  return getToken(Cobol85Parser::END_SEARCH, 0);
}


size_t Cobol85Parser::SearchStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleSearchStatement;
}

void Cobol85Parser::SearchStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSearchStatement(this);
}

void Cobol85Parser::SearchStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSearchStatement(this);
}

Cobol85Parser::SearchStatementContext* Cobol85Parser::searchStatement() {
  SearchStatementContext *_localctx = _tracker.createInstance<SearchStatementContext>(_ctx, getState());
  enterRule(_localctx, 862, Cobol85Parser::RuleSearchStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(4987);
    match(Cobol85Parser::SEARCH);
    setState(4989);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::ALL) {
      setState(4988);
      match(Cobol85Parser::ALL);
    }
    setState(4991);
    qualifiedDataName();
    setState(4993);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::VARYING) {
      setState(4992);
      searchVarying();
    }
    setState(4996);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::AT || _la == Cobol85Parser::END) {
      setState(4995);
      atEndPhrase();
    }
    setState(4999); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(4998);
              searchWhen();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(5001); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 745, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(5004);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 746, _ctx)) {
    case 1: {
      setState(5003);
      match(Cobol85Parser::END_SEARCH);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SearchVaryingContext ------------------------------------------------------------------

Cobol85Parser::SearchVaryingContext::SearchVaryingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::SearchVaryingContext::VARYING() {
  return getToken(Cobol85Parser::VARYING, 0);
}

Cobol85Parser::QualifiedDataNameContext* Cobol85Parser::SearchVaryingContext::qualifiedDataName() {
  return getRuleContext<Cobol85Parser::QualifiedDataNameContext>(0);
}


size_t Cobol85Parser::SearchVaryingContext::getRuleIndex() const {
  return Cobol85Parser::RuleSearchVarying;
}

void Cobol85Parser::SearchVaryingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSearchVarying(this);
}

void Cobol85Parser::SearchVaryingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSearchVarying(this);
}

Cobol85Parser::SearchVaryingContext* Cobol85Parser::searchVarying() {
  SearchVaryingContext *_localctx = _tracker.createInstance<SearchVaryingContext>(_ctx, getState());
  enterRule(_localctx, 864, Cobol85Parser::RuleSearchVarying);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5006);
    match(Cobol85Parser::VARYING);
    setState(5007);
    qualifiedDataName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SearchWhenContext ------------------------------------------------------------------

Cobol85Parser::SearchWhenContext::SearchWhenContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::SearchWhenContext::WHEN() {
  return getToken(Cobol85Parser::WHEN, 0);
}

Cobol85Parser::ConditionContext* Cobol85Parser::SearchWhenContext::condition() {
  return getRuleContext<Cobol85Parser::ConditionContext>(0);
}

tree::TerminalNode* Cobol85Parser::SearchWhenContext::NEXT() {
  return getToken(Cobol85Parser::NEXT, 0);
}

tree::TerminalNode* Cobol85Parser::SearchWhenContext::SENTENCE() {
  return getToken(Cobol85Parser::SENTENCE, 0);
}

std::vector<Cobol85Parser::StatementContext *> Cobol85Parser::SearchWhenContext::statement() {
  return getRuleContexts<Cobol85Parser::StatementContext>();
}

Cobol85Parser::StatementContext* Cobol85Parser::SearchWhenContext::statement(size_t i) {
  return getRuleContext<Cobol85Parser::StatementContext>(i);
}


size_t Cobol85Parser::SearchWhenContext::getRuleIndex() const {
  return Cobol85Parser::RuleSearchWhen;
}

void Cobol85Parser::SearchWhenContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSearchWhen(this);
}

void Cobol85Parser::SearchWhenContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSearchWhen(this);
}

Cobol85Parser::SearchWhenContext* Cobol85Parser::searchWhen() {
  SearchWhenContext *_localctx = _tracker.createInstance<SearchWhenContext>(_ctx, getState());
  enterRule(_localctx, 866, Cobol85Parser::RuleSearchWhen);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(5009);
    match(Cobol85Parser::WHEN);
    setState(5010);
    condition();
    setState(5019);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Cobol85Parser::NEXT: {
        setState(5011);
        match(Cobol85Parser::NEXT);
        setState(5012);
        match(Cobol85Parser::SENTENCE);
        break;
      }

      case Cobol85Parser::ACCEPT:
      case Cobol85Parser::ADD:
      case Cobol85Parser::ALTER:
      case Cobol85Parser::AT:
      case Cobol85Parser::CALL:
      case Cobol85Parser::CANCEL:
      case Cobol85Parser::CLOSE:
      case Cobol85Parser::COMPUTE:
      case Cobol85Parser::CONTINUE:
      case Cobol85Parser::DELETE:
      case Cobol85Parser::DISABLE:
      case Cobol85Parser::DISPLAY:
      case Cobol85Parser::DIVIDE:
      case Cobol85Parser::ELSE:
      case Cobol85Parser::ENABLE:
      case Cobol85Parser::END:
      case Cobol85Parser::END_ACCEPT:
      case Cobol85Parser::END_ADD:
      case Cobol85Parser::END_CALL:
      case Cobol85Parser::END_COMPUTE:
      case Cobol85Parser::END_DELETE:
      case Cobol85Parser::END_DIVIDE:
      case Cobol85Parser::END_EVALUATE:
      case Cobol85Parser::END_IF:
      case Cobol85Parser::END_MULTIPLY:
      case Cobol85Parser::END_PERFORM:
      case Cobol85Parser::END_READ:
      case Cobol85Parser::END_RECEIVE:
      case Cobol85Parser::END_RETURN:
      case Cobol85Parser::END_REWRITE:
      case Cobol85Parser::END_SEARCH:
      case Cobol85Parser::END_START:
      case Cobol85Parser::END_STRING:
      case Cobol85Parser::END_SUBTRACT:
      case Cobol85Parser::END_UNSTRING:
      case Cobol85Parser::END_WRITE:
      case Cobol85Parser::ENTRY:
      case Cobol85Parser::EVALUATE:
      case Cobol85Parser::EXCEPTION:
      case Cobol85Parser::EXHIBIT:
      case Cobol85Parser::EXIT:
      case Cobol85Parser::GENERATE:
      case Cobol85Parser::GOBACK:
      case Cobol85Parser::GO:
      case Cobol85Parser::IF:
      case Cobol85Parser::INITIALIZE:
      case Cobol85Parser::INITIATE:
      case Cobol85Parser::INSPECT:
      case Cobol85Parser::INVALID:
      case Cobol85Parser::MERGE:
      case Cobol85Parser::MOVE:
      case Cobol85Parser::MULTIPLY:
      case Cobol85Parser::NOT:
      case Cobol85Parser::ON:
      case Cobol85Parser::OPEN:
      case Cobol85Parser::PERFORM:
      case Cobol85Parser::PURGE:
      case Cobol85Parser::READ:
      case Cobol85Parser::RECEIVE:
      case Cobol85Parser::RELEASE:
      case Cobol85Parser::RETURN:
      case Cobol85Parser::REWRITE:
      case Cobol85Parser::SEARCH:
      case Cobol85Parser::SEND:
      case Cobol85Parser::SET:
      case Cobol85Parser::SORT:
      case Cobol85Parser::START:
      case Cobol85Parser::STOP:
      case Cobol85Parser::STRING:
      case Cobol85Parser::SUBTRACT:
      case Cobol85Parser::TERMINATE:
      case Cobol85Parser::UNSTRING:
      case Cobol85Parser::WHEN:
      case Cobol85Parser::WITH:
      case Cobol85Parser::WRITE:
      case Cobol85Parser::DOT_FS:
      case Cobol85Parser::EXECCICSLINE:
      case Cobol85Parser::EXECSQLIMSLINE:
      case Cobol85Parser::EXECSQLLINE: {
        setState(5016);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 747, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(5013);
            statement(); 
          }
          setState(5018);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 747, _ctx);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SendStatementContext ------------------------------------------------------------------

Cobol85Parser::SendStatementContext::SendStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::SendStatementContext::SEND() {
  return getToken(Cobol85Parser::SEND, 0);
}

Cobol85Parser::SendStatementSyncContext* Cobol85Parser::SendStatementContext::sendStatementSync() {
  return getRuleContext<Cobol85Parser::SendStatementSyncContext>(0);
}

Cobol85Parser::SendStatementAsyncContext* Cobol85Parser::SendStatementContext::sendStatementAsync() {
  return getRuleContext<Cobol85Parser::SendStatementAsyncContext>(0);
}

Cobol85Parser::OnExceptionClauseContext* Cobol85Parser::SendStatementContext::onExceptionClause() {
  return getRuleContext<Cobol85Parser::OnExceptionClauseContext>(0);
}

Cobol85Parser::NotOnExceptionClauseContext* Cobol85Parser::SendStatementContext::notOnExceptionClause() {
  return getRuleContext<Cobol85Parser::NotOnExceptionClauseContext>(0);
}


size_t Cobol85Parser::SendStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleSendStatement;
}

void Cobol85Parser::SendStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSendStatement(this);
}

void Cobol85Parser::SendStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSendStatement(this);
}

Cobol85Parser::SendStatementContext* Cobol85Parser::sendStatement() {
  SendStatementContext *_localctx = _tracker.createInstance<SendStatementContext>(_ctx, getState());
  enterRule(_localctx, 868, Cobol85Parser::RuleSendStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5021);
    match(Cobol85Parser::SEND);
    setState(5024);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Cobol85Parser::ABORT:
      case Cobol85Parser::ADDRESS:
      case Cobol85Parser::ALL:
      case Cobol85Parser::AS:
      case Cobol85Parser::ASCII:
      case Cobol85Parser::ASSOCIATED_DATA:
      case Cobol85Parser::ASSOCIATED_DATA_LENGTH:
      case Cobol85Parser::ATTRIBUTE:
      case Cobol85Parser::AUTO:
      case Cobol85Parser::AUTO_SKIP:
      case Cobol85Parser::BACKGROUND_COLOR:
      case Cobol85Parser::BACKGROUND_COLOUR:
      case Cobol85Parser::BEEP:
      case Cobol85Parser::BELL:
      case Cobol85Parser::BINARY:
      case Cobol85Parser::BIT:
      case Cobol85Parser::BLINK:
      case Cobol85Parser::BOUNDS:
      case Cobol85Parser::CAPABLE:
      case Cobol85Parser::CCSVERSION:
      case Cobol85Parser::CHANGED:
      case Cobol85Parser::CHANNEL:
      case Cobol85Parser::CLOSE_DISPOSITION:
      case Cobol85Parser::COBOL:
      case Cobol85Parser::COMMITMENT:
      case Cobol85Parser::CONTROL_POINT:
      case Cobol85Parser::CONVENTION:
      case Cobol85Parser::CRUNCH:
      case Cobol85Parser::CURSOR:
      case Cobol85Parser::DATE:
      case Cobol85Parser::DAY:
      case Cobol85Parser::DAY_OF_WEEK:
      case Cobol85Parser::DEBUG_CONTENTS:
      case Cobol85Parser::DEBUG_ITEM:
      case Cobol85Parser::DEBUG_LINE:
      case Cobol85Parser::DEBUG_NAME:
      case Cobol85Parser::DEBUG_SUB_1:
      case Cobol85Parser::DEBUG_SUB_2:
      case Cobol85Parser::DEBUG_SUB_3:
      case Cobol85Parser::DEFAULT:
      case Cobol85Parser::DEFAULT_DISPLAY:
      case Cobol85Parser::DEFINITION:
      case Cobol85Parser::DFHRESP:
      case Cobol85Parser::DFHVALUE:
      case Cobol85Parser::DISK:
      case Cobol85Parser::DONTCARE:
      case Cobol85Parser::DOUBLE:
      case Cobol85Parser::EBCDIC:
      case Cobol85Parser::EMPTY_CHECK:
      case Cobol85Parser::ENTER:
      case Cobol85Parser::ENTRY_PROCEDURE:
      case Cobol85Parser::ERASE:
      case Cobol85Parser::EOL:
      case Cobol85Parser::EOS:
      case Cobol85Parser::ESCAPE:
      case Cobol85Parser::EVENT:
      case Cobol85Parser::EXCLUSIVE:
      case Cobol85Parser::EXPORT:
      case Cobol85Parser::EXTENDED:
      case Cobol85Parser::FALSE:
      case Cobol85Parser::FOREGROUND_COLOR:
      case Cobol85Parser::FOREGROUND_COLOUR:
      case Cobol85Parser::FULL:
      case Cobol85Parser::FUNCTION:
      case Cobol85Parser::FUNCTIONNAME:
      case Cobol85Parser::FUNCTION_POINTER:
      case Cobol85Parser::GRID:
      case Cobol85Parser::HIGHLIGHT:
      case Cobol85Parser::HIGH_VALUE:
      case Cobol85Parser::HIGH_VALUES:
      case Cobol85Parser::IMPLICIT:
      case Cobol85Parser::IMPORT:
      case Cobol85Parser::INTEGER:
      case Cobol85Parser::KEPT:
      case Cobol85Parser::KEYBOARD:
      case Cobol85Parser::LANGUAGE:
      case Cobol85Parser::LB:
      case Cobol85Parser::LD:
      case Cobol85Parser::LEFTLINE:
      case Cobol85Parser::LENGTH:
      case Cobol85Parser::LENGTH_CHECK:
      case Cobol85Parser::LIBACCESS:
      case Cobol85Parser::LIBPARAMETER:
      case Cobol85Parser::LIBRARY:
      case Cobol85Parser::LINAGE_COUNTER:
      case Cobol85Parser::LINE_COUNTER:
      case Cobol85Parser::LIST:
      case Cobol85Parser::LOCAL:
      case Cobol85Parser::LONG_DATE:
      case Cobol85Parser::LONG_TIME:
      case Cobol85Parser::LOWER:
      case Cobol85Parser::LOWLIGHT:
      case Cobol85Parser::LOW_VALUE:
      case Cobol85Parser::LOW_VALUES:
      case Cobol85Parser::MMDDYYYY:
      case Cobol85Parser::NAMED:
      case Cobol85Parser::NATIONAL:
      case Cobol85Parser::NATIONAL_EDITED:
      case Cobol85Parser::NETWORK:
      case Cobol85Parser::NO_ECHO:
      case Cobol85Parser::NULL_:
      case Cobol85Parser::NULLS:
      case Cobol85Parser::NUMERIC_DATE:
      case Cobol85Parser::NUMERIC_TIME:
      case Cobol85Parser::ODT:
      case Cobol85Parser::ORDERLY:
      case Cobol85Parser::OVERLINE:
      case Cobol85Parser::OWN:
      case Cobol85Parser::PAGE_COUNTER:
      case Cobol85Parser::PASSWORD:
      case Cobol85Parser::PORT:
      case Cobol85Parser::PRINTER:
      case Cobol85Parser::PRIVATE:
      case Cobol85Parser::PROCESS:
      case Cobol85Parser::PROGRAM:
      case Cobol85Parser::PROMPT:
      case Cobol85Parser::QUOTE:
      case Cobol85Parser::QUOTES:
      case Cobol85Parser::READER:
      case Cobol85Parser::REMOTE:
      case Cobol85Parser::REAL:
      case Cobol85Parser::RECEIVED:
      case Cobol85Parser::RECURSIVE:
      case Cobol85Parser::REF:
      case Cobol85Parser::REMOVE:
      case Cobol85Parser::REQUIRED:
      case Cobol85Parser::REVERSE_VIDEO:
      case Cobol85Parser::RETURN_CODE:
      case Cobol85Parser::SAVE:
      case Cobol85Parser::SECURE:
      case Cobol85Parser::SHARED:
      case Cobol85Parser::SHAREDBYALL:
      case Cobol85Parser::SHAREDBYRUNUNIT:
      case Cobol85Parser::SHARING:
      case Cobol85Parser::SHIFT_IN:
      case Cobol85Parser::SHIFT_OUT:
      case Cobol85Parser::SHORT_DATE:
      case Cobol85Parser::SORT_CONTROL:
      case Cobol85Parser::SORT_CORE_SIZE:
      case Cobol85Parser::SORT_FILE_SIZE:
      case Cobol85Parser::SORT_MESSAGE:
      case Cobol85Parser::SORT_MODE_SIZE:
      case Cobol85Parser::SORT_RETURN:
      case Cobol85Parser::SPACE:
      case Cobol85Parser::SPACES:
      case Cobol85Parser::SYMBOL:
      case Cobol85Parser::TALLY:
      case Cobol85Parser::TASK:
      case Cobol85Parser::THREAD:
      case Cobol85Parser::THREAD_LOCAL:
      case Cobol85Parser::TIME:
      case Cobol85Parser::TIMER:
      case Cobol85Parser::TODAYS_DATE:
      case Cobol85Parser::TODAYS_NAME:
      case Cobol85Parser::TRUE:
      case Cobol85Parser::TRUNCATED:
      case Cobol85Parser::TYPEDEF:
      case Cobol85Parser::UNDERLINE:
      case Cobol85Parser::VIRTUAL:
      case Cobol85Parser::WAIT:
      case Cobol85Parser::WHEN_COMPILED:
      case Cobol85Parser::YEAR:
      case Cobol85Parser::YYYYMMDD:
      case Cobol85Parser::YYYYDDD:
      case Cobol85Parser::ZERO:
      case Cobol85Parser::ZERO_FILL:
      case Cobol85Parser::ZEROS:
      case Cobol85Parser::ZEROES:
      case Cobol85Parser::NONNUMERICLITERAL:
      case Cobol85Parser::LEVEL_NUMBER_66:
      case Cobol85Parser::LEVEL_NUMBER_77:
      case Cobol85Parser::LEVEL_NUMBER_88:
      case Cobol85Parser::INTEGERLITERAL:
      case Cobol85Parser::NUMERICLITERAL:
      case Cobol85Parser::IDENTIFIER: {
        setState(5022);
        sendStatementSync();
        break;
      }

      case Cobol85Parser::TO: {
        setState(5023);
        sendStatementAsync();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(5027);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 750, _ctx)) {
    case 1: {
      setState(5026);
      onExceptionClause();
      break;
    }

    default:
      break;
    }
    setState(5030);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 751, _ctx)) {
    case 1: {
      setState(5029);
      notOnExceptionClause();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SendStatementSyncContext ------------------------------------------------------------------

Cobol85Parser::SendStatementSyncContext::SendStatementSyncContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::IdentifierContext* Cobol85Parser::SendStatementSyncContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

Cobol85Parser::LiteralContext* Cobol85Parser::SendStatementSyncContext::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}

Cobol85Parser::SendFromPhraseContext* Cobol85Parser::SendStatementSyncContext::sendFromPhrase() {
  return getRuleContext<Cobol85Parser::SendFromPhraseContext>(0);
}

Cobol85Parser::SendWithPhraseContext* Cobol85Parser::SendStatementSyncContext::sendWithPhrase() {
  return getRuleContext<Cobol85Parser::SendWithPhraseContext>(0);
}

Cobol85Parser::SendReplacingPhraseContext* Cobol85Parser::SendStatementSyncContext::sendReplacingPhrase() {
  return getRuleContext<Cobol85Parser::SendReplacingPhraseContext>(0);
}

Cobol85Parser::SendAdvancingPhraseContext* Cobol85Parser::SendStatementSyncContext::sendAdvancingPhrase() {
  return getRuleContext<Cobol85Parser::SendAdvancingPhraseContext>(0);
}


size_t Cobol85Parser::SendStatementSyncContext::getRuleIndex() const {
  return Cobol85Parser::RuleSendStatementSync;
}

void Cobol85Parser::SendStatementSyncContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSendStatementSync(this);
}

void Cobol85Parser::SendStatementSyncContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSendStatementSync(this);
}

Cobol85Parser::SendStatementSyncContext* Cobol85Parser::sendStatementSync() {
  SendStatementSyncContext *_localctx = _tracker.createInstance<SendStatementSyncContext>(_ctx, getState());
  enterRule(_localctx, 870, Cobol85Parser::RuleSendStatementSync);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5034);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 752, _ctx)) {
    case 1: {
      setState(5032);
      identifier();
      break;
    }

    case 2: {
      setState(5033);
      literal();
      break;
    }

    default:
      break;
    }
    setState(5037);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::FROM) {
      setState(5036);
      sendFromPhrase();
    }
    setState(5040);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 754, _ctx)) {
    case 1: {
      setState(5039);
      sendWithPhrase();
      break;
    }

    default:
      break;
    }
    setState(5043);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::REPLACING) {
      setState(5042);
      sendReplacingPhrase();
    }
    setState(5046);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::AFTER

    || _la == Cobol85Parser::BEFORE) {
      setState(5045);
      sendAdvancingPhrase();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SendStatementAsyncContext ------------------------------------------------------------------

Cobol85Parser::SendStatementAsyncContext::SendStatementAsyncContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::SendStatementAsyncContext::TO() {
  return getToken(Cobol85Parser::TO, 0);
}

Cobol85Parser::IdentifierContext* Cobol85Parser::SendStatementAsyncContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

tree::TerminalNode* Cobol85Parser::SendStatementAsyncContext::TOP() {
  return getToken(Cobol85Parser::TOP, 0);
}

tree::TerminalNode* Cobol85Parser::SendStatementAsyncContext::BOTTOM() {
  return getToken(Cobol85Parser::BOTTOM, 0);
}


size_t Cobol85Parser::SendStatementAsyncContext::getRuleIndex() const {
  return Cobol85Parser::RuleSendStatementAsync;
}

void Cobol85Parser::SendStatementAsyncContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSendStatementAsync(this);
}

void Cobol85Parser::SendStatementAsyncContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSendStatementAsync(this);
}

Cobol85Parser::SendStatementAsyncContext* Cobol85Parser::sendStatementAsync() {
  SendStatementAsyncContext *_localctx = _tracker.createInstance<SendStatementAsyncContext>(_ctx, getState());
  enterRule(_localctx, 872, Cobol85Parser::RuleSendStatementAsync);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5048);
    match(Cobol85Parser::TO);
    setState(5049);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::BOTTOM || _la == Cobol85Parser::TOP)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(5050);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SendFromPhraseContext ------------------------------------------------------------------

Cobol85Parser::SendFromPhraseContext::SendFromPhraseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::SendFromPhraseContext::FROM() {
  return getToken(Cobol85Parser::FROM, 0);
}

Cobol85Parser::IdentifierContext* Cobol85Parser::SendFromPhraseContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}


size_t Cobol85Parser::SendFromPhraseContext::getRuleIndex() const {
  return Cobol85Parser::RuleSendFromPhrase;
}

void Cobol85Parser::SendFromPhraseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSendFromPhrase(this);
}

void Cobol85Parser::SendFromPhraseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSendFromPhrase(this);
}

Cobol85Parser::SendFromPhraseContext* Cobol85Parser::sendFromPhrase() {
  SendFromPhraseContext *_localctx = _tracker.createInstance<SendFromPhraseContext>(_ctx, getState());
  enterRule(_localctx, 874, Cobol85Parser::RuleSendFromPhrase);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5052);
    match(Cobol85Parser::FROM);
    setState(5053);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SendWithPhraseContext ------------------------------------------------------------------

Cobol85Parser::SendWithPhraseContext::SendWithPhraseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::SendWithPhraseContext::WITH() {
  return getToken(Cobol85Parser::WITH, 0);
}

tree::TerminalNode* Cobol85Parser::SendWithPhraseContext::EGI() {
  return getToken(Cobol85Parser::EGI, 0);
}

tree::TerminalNode* Cobol85Parser::SendWithPhraseContext::EMI() {
  return getToken(Cobol85Parser::EMI, 0);
}

tree::TerminalNode* Cobol85Parser::SendWithPhraseContext::ESI() {
  return getToken(Cobol85Parser::ESI, 0);
}

Cobol85Parser::IdentifierContext* Cobol85Parser::SendWithPhraseContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}


size_t Cobol85Parser::SendWithPhraseContext::getRuleIndex() const {
  return Cobol85Parser::RuleSendWithPhrase;
}

void Cobol85Parser::SendWithPhraseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSendWithPhrase(this);
}

void Cobol85Parser::SendWithPhraseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSendWithPhrase(this);
}

Cobol85Parser::SendWithPhraseContext* Cobol85Parser::sendWithPhrase() {
  SendWithPhraseContext *_localctx = _tracker.createInstance<SendWithPhraseContext>(_ctx, getState());
  enterRule(_localctx, 876, Cobol85Parser::RuleSendWithPhrase);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5055);
    match(Cobol85Parser::WITH);
    setState(5060);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Cobol85Parser::EGI: {
        setState(5056);
        match(Cobol85Parser::EGI);
        break;
      }

      case Cobol85Parser::EMI: {
        setState(5057);
        match(Cobol85Parser::EMI);
        break;
      }

      case Cobol85Parser::ESI: {
        setState(5058);
        match(Cobol85Parser::ESI);
        break;
      }

      case Cobol85Parser::ABORT:
      case Cobol85Parser::ADDRESS:
      case Cobol85Parser::AS:
      case Cobol85Parser::ASCII:
      case Cobol85Parser::ASSOCIATED_DATA:
      case Cobol85Parser::ASSOCIATED_DATA_LENGTH:
      case Cobol85Parser::ATTRIBUTE:
      case Cobol85Parser::AUTO:
      case Cobol85Parser::AUTO_SKIP:
      case Cobol85Parser::BACKGROUND_COLOR:
      case Cobol85Parser::BACKGROUND_COLOUR:
      case Cobol85Parser::BEEP:
      case Cobol85Parser::BELL:
      case Cobol85Parser::BINARY:
      case Cobol85Parser::BIT:
      case Cobol85Parser::BLINK:
      case Cobol85Parser::BOUNDS:
      case Cobol85Parser::CAPABLE:
      case Cobol85Parser::CCSVERSION:
      case Cobol85Parser::CHANGED:
      case Cobol85Parser::CHANNEL:
      case Cobol85Parser::CLOSE_DISPOSITION:
      case Cobol85Parser::COBOL:
      case Cobol85Parser::COMMITMENT:
      case Cobol85Parser::CONTROL_POINT:
      case Cobol85Parser::CONVENTION:
      case Cobol85Parser::CRUNCH:
      case Cobol85Parser::CURSOR:
      case Cobol85Parser::DATE:
      case Cobol85Parser::DAY:
      case Cobol85Parser::DAY_OF_WEEK:
      case Cobol85Parser::DEBUG_CONTENTS:
      case Cobol85Parser::DEBUG_ITEM:
      case Cobol85Parser::DEBUG_LINE:
      case Cobol85Parser::DEBUG_NAME:
      case Cobol85Parser::DEBUG_SUB_1:
      case Cobol85Parser::DEBUG_SUB_2:
      case Cobol85Parser::DEBUG_SUB_3:
      case Cobol85Parser::DEFAULT:
      case Cobol85Parser::DEFAULT_DISPLAY:
      case Cobol85Parser::DEFINITION:
      case Cobol85Parser::DFHRESP:
      case Cobol85Parser::DFHVALUE:
      case Cobol85Parser::DISK:
      case Cobol85Parser::DONTCARE:
      case Cobol85Parser::DOUBLE:
      case Cobol85Parser::EBCDIC:
      case Cobol85Parser::EMPTY_CHECK:
      case Cobol85Parser::ENTER:
      case Cobol85Parser::ENTRY_PROCEDURE:
      case Cobol85Parser::ERASE:
      case Cobol85Parser::EOL:
      case Cobol85Parser::EOS:
      case Cobol85Parser::ESCAPE:
      case Cobol85Parser::EVENT:
      case Cobol85Parser::EXCLUSIVE:
      case Cobol85Parser::EXPORT:
      case Cobol85Parser::EXTENDED:
      case Cobol85Parser::FOREGROUND_COLOR:
      case Cobol85Parser::FOREGROUND_COLOUR:
      case Cobol85Parser::FULL:
      case Cobol85Parser::FUNCTION:
      case Cobol85Parser::FUNCTIONNAME:
      case Cobol85Parser::FUNCTION_POINTER:
      case Cobol85Parser::GRID:
      case Cobol85Parser::HIGHLIGHT:
      case Cobol85Parser::IMPLICIT:
      case Cobol85Parser::IMPORT:
      case Cobol85Parser::INTEGER:
      case Cobol85Parser::KEPT:
      case Cobol85Parser::KEYBOARD:
      case Cobol85Parser::LANGUAGE:
      case Cobol85Parser::LB:
      case Cobol85Parser::LD:
      case Cobol85Parser::LEFTLINE:
      case Cobol85Parser::LENGTH:
      case Cobol85Parser::LENGTH_CHECK:
      case Cobol85Parser::LIBACCESS:
      case Cobol85Parser::LIBPARAMETER:
      case Cobol85Parser::LIBRARY:
      case Cobol85Parser::LINAGE_COUNTER:
      case Cobol85Parser::LINE_COUNTER:
      case Cobol85Parser::LIST:
      case Cobol85Parser::LOCAL:
      case Cobol85Parser::LONG_DATE:
      case Cobol85Parser::LONG_TIME:
      case Cobol85Parser::LOWER:
      case Cobol85Parser::LOWLIGHT:
      case Cobol85Parser::MMDDYYYY:
      case Cobol85Parser::NAMED:
      case Cobol85Parser::NATIONAL:
      case Cobol85Parser::NATIONAL_EDITED:
      case Cobol85Parser::NETWORK:
      case Cobol85Parser::NO_ECHO:
      case Cobol85Parser::NUMERIC_DATE:
      case Cobol85Parser::NUMERIC_TIME:
      case Cobol85Parser::ODT:
      case Cobol85Parser::ORDERLY:
      case Cobol85Parser::OVERLINE:
      case Cobol85Parser::OWN:
      case Cobol85Parser::PAGE_COUNTER:
      case Cobol85Parser::PASSWORD:
      case Cobol85Parser::PORT:
      case Cobol85Parser::PRINTER:
      case Cobol85Parser::PRIVATE:
      case Cobol85Parser::PROCESS:
      case Cobol85Parser::PROGRAM:
      case Cobol85Parser::PROMPT:
      case Cobol85Parser::READER:
      case Cobol85Parser::REMOTE:
      case Cobol85Parser::REAL:
      case Cobol85Parser::RECEIVED:
      case Cobol85Parser::RECURSIVE:
      case Cobol85Parser::REF:
      case Cobol85Parser::REMOVE:
      case Cobol85Parser::REQUIRED:
      case Cobol85Parser::REVERSE_VIDEO:
      case Cobol85Parser::RETURN_CODE:
      case Cobol85Parser::SAVE:
      case Cobol85Parser::SECURE:
      case Cobol85Parser::SHARED:
      case Cobol85Parser::SHAREDBYALL:
      case Cobol85Parser::SHAREDBYRUNUNIT:
      case Cobol85Parser::SHARING:
      case Cobol85Parser::SHIFT_IN:
      case Cobol85Parser::SHIFT_OUT:
      case Cobol85Parser::SHORT_DATE:
      case Cobol85Parser::SORT_CONTROL:
      case Cobol85Parser::SORT_CORE_SIZE:
      case Cobol85Parser::SORT_FILE_SIZE:
      case Cobol85Parser::SORT_MESSAGE:
      case Cobol85Parser::SORT_MODE_SIZE:
      case Cobol85Parser::SORT_RETURN:
      case Cobol85Parser::SYMBOL:
      case Cobol85Parser::TALLY:
      case Cobol85Parser::TASK:
      case Cobol85Parser::THREAD:
      case Cobol85Parser::THREAD_LOCAL:
      case Cobol85Parser::TIME:
      case Cobol85Parser::TIMER:
      case Cobol85Parser::TODAYS_DATE:
      case Cobol85Parser::TODAYS_NAME:
      case Cobol85Parser::TRUNCATED:
      case Cobol85Parser::TYPEDEF:
      case Cobol85Parser::UNDERLINE:
      case Cobol85Parser::VIRTUAL:
      case Cobol85Parser::WAIT:
      case Cobol85Parser::WHEN_COMPILED:
      case Cobol85Parser::YEAR:
      case Cobol85Parser::YYYYMMDD:
      case Cobol85Parser::YYYYDDD:
      case Cobol85Parser::ZERO_FILL:
      case Cobol85Parser::LEVEL_NUMBER_66:
      case Cobol85Parser::LEVEL_NUMBER_77:
      case Cobol85Parser::LEVEL_NUMBER_88:
      case Cobol85Parser::INTEGERLITERAL:
      case Cobol85Parser::IDENTIFIER: {
        setState(5059);
        identifier();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SendReplacingPhraseContext ------------------------------------------------------------------

Cobol85Parser::SendReplacingPhraseContext::SendReplacingPhraseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::SendReplacingPhraseContext::REPLACING() {
  return getToken(Cobol85Parser::REPLACING, 0);
}

tree::TerminalNode* Cobol85Parser::SendReplacingPhraseContext::LINE() {
  return getToken(Cobol85Parser::LINE, 0);
}


size_t Cobol85Parser::SendReplacingPhraseContext::getRuleIndex() const {
  return Cobol85Parser::RuleSendReplacingPhrase;
}

void Cobol85Parser::SendReplacingPhraseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSendReplacingPhrase(this);
}

void Cobol85Parser::SendReplacingPhraseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSendReplacingPhrase(this);
}

Cobol85Parser::SendReplacingPhraseContext* Cobol85Parser::sendReplacingPhrase() {
  SendReplacingPhraseContext *_localctx = _tracker.createInstance<SendReplacingPhraseContext>(_ctx, getState());
  enterRule(_localctx, 878, Cobol85Parser::RuleSendReplacingPhrase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5062);
    match(Cobol85Parser::REPLACING);
    setState(5064);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::LINE) {
      setState(5063);
      match(Cobol85Parser::LINE);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SendAdvancingPhraseContext ------------------------------------------------------------------

Cobol85Parser::SendAdvancingPhraseContext::SendAdvancingPhraseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::SendAdvancingPhraseContext::BEFORE() {
  return getToken(Cobol85Parser::BEFORE, 0);
}

tree::TerminalNode* Cobol85Parser::SendAdvancingPhraseContext::AFTER() {
  return getToken(Cobol85Parser::AFTER, 0);
}

Cobol85Parser::SendAdvancingPageContext* Cobol85Parser::SendAdvancingPhraseContext::sendAdvancingPage() {
  return getRuleContext<Cobol85Parser::SendAdvancingPageContext>(0);
}

Cobol85Parser::SendAdvancingLinesContext* Cobol85Parser::SendAdvancingPhraseContext::sendAdvancingLines() {
  return getRuleContext<Cobol85Parser::SendAdvancingLinesContext>(0);
}

Cobol85Parser::SendAdvancingMnemonicContext* Cobol85Parser::SendAdvancingPhraseContext::sendAdvancingMnemonic() {
  return getRuleContext<Cobol85Parser::SendAdvancingMnemonicContext>(0);
}

tree::TerminalNode* Cobol85Parser::SendAdvancingPhraseContext::ADVANCING() {
  return getToken(Cobol85Parser::ADVANCING, 0);
}


size_t Cobol85Parser::SendAdvancingPhraseContext::getRuleIndex() const {
  return Cobol85Parser::RuleSendAdvancingPhrase;
}

void Cobol85Parser::SendAdvancingPhraseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSendAdvancingPhrase(this);
}

void Cobol85Parser::SendAdvancingPhraseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSendAdvancingPhrase(this);
}

Cobol85Parser::SendAdvancingPhraseContext* Cobol85Parser::sendAdvancingPhrase() {
  SendAdvancingPhraseContext *_localctx = _tracker.createInstance<SendAdvancingPhraseContext>(_ctx, getState());
  enterRule(_localctx, 880, Cobol85Parser::RuleSendAdvancingPhrase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5066);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::AFTER

    || _la == Cobol85Parser::BEFORE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(5068);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::ADVANCING) {
      setState(5067);
      match(Cobol85Parser::ADVANCING);
    }
    setState(5073);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 760, _ctx)) {
    case 1: {
      setState(5070);
      sendAdvancingPage();
      break;
    }

    case 2: {
      setState(5071);
      sendAdvancingLines();
      break;
    }

    case 3: {
      setState(5072);
      sendAdvancingMnemonic();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SendAdvancingPageContext ------------------------------------------------------------------

Cobol85Parser::SendAdvancingPageContext::SendAdvancingPageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::SendAdvancingPageContext::PAGE() {
  return getToken(Cobol85Parser::PAGE, 0);
}


size_t Cobol85Parser::SendAdvancingPageContext::getRuleIndex() const {
  return Cobol85Parser::RuleSendAdvancingPage;
}

void Cobol85Parser::SendAdvancingPageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSendAdvancingPage(this);
}

void Cobol85Parser::SendAdvancingPageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSendAdvancingPage(this);
}

Cobol85Parser::SendAdvancingPageContext* Cobol85Parser::sendAdvancingPage() {
  SendAdvancingPageContext *_localctx = _tracker.createInstance<SendAdvancingPageContext>(_ctx, getState());
  enterRule(_localctx, 882, Cobol85Parser::RuleSendAdvancingPage);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5075);
    match(Cobol85Parser::PAGE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SendAdvancingLinesContext ------------------------------------------------------------------

Cobol85Parser::SendAdvancingLinesContext::SendAdvancingLinesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::IdentifierContext* Cobol85Parser::SendAdvancingLinesContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

Cobol85Parser::LiteralContext* Cobol85Parser::SendAdvancingLinesContext::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}

tree::TerminalNode* Cobol85Parser::SendAdvancingLinesContext::LINE() {
  return getToken(Cobol85Parser::LINE, 0);
}

tree::TerminalNode* Cobol85Parser::SendAdvancingLinesContext::LINES() {
  return getToken(Cobol85Parser::LINES, 0);
}


size_t Cobol85Parser::SendAdvancingLinesContext::getRuleIndex() const {
  return Cobol85Parser::RuleSendAdvancingLines;
}

void Cobol85Parser::SendAdvancingLinesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSendAdvancingLines(this);
}

void Cobol85Parser::SendAdvancingLinesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSendAdvancingLines(this);
}

Cobol85Parser::SendAdvancingLinesContext* Cobol85Parser::sendAdvancingLines() {
  SendAdvancingLinesContext *_localctx = _tracker.createInstance<SendAdvancingLinesContext>(_ctx, getState());
  enterRule(_localctx, 884, Cobol85Parser::RuleSendAdvancingLines);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5079);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 761, _ctx)) {
    case 1: {
      setState(5077);
      identifier();
      break;
    }

    case 2: {
      setState(5078);
      literal();
      break;
    }

    default:
      break;
    }
    setState(5082);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::LINE

    || _la == Cobol85Parser::LINES) {
      setState(5081);
      _la = _input->LA(1);
      if (!(_la == Cobol85Parser::LINE

      || _la == Cobol85Parser::LINES)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SendAdvancingMnemonicContext ------------------------------------------------------------------

Cobol85Parser::SendAdvancingMnemonicContext::SendAdvancingMnemonicContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::MnemonicNameContext* Cobol85Parser::SendAdvancingMnemonicContext::mnemonicName() {
  return getRuleContext<Cobol85Parser::MnemonicNameContext>(0);
}


size_t Cobol85Parser::SendAdvancingMnemonicContext::getRuleIndex() const {
  return Cobol85Parser::RuleSendAdvancingMnemonic;
}

void Cobol85Parser::SendAdvancingMnemonicContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSendAdvancingMnemonic(this);
}

void Cobol85Parser::SendAdvancingMnemonicContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSendAdvancingMnemonic(this);
}

Cobol85Parser::SendAdvancingMnemonicContext* Cobol85Parser::sendAdvancingMnemonic() {
  SendAdvancingMnemonicContext *_localctx = _tracker.createInstance<SendAdvancingMnemonicContext>(_ctx, getState());
  enterRule(_localctx, 886, Cobol85Parser::RuleSendAdvancingMnemonic);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5084);
    mnemonicName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SetStatementContext ------------------------------------------------------------------

Cobol85Parser::SetStatementContext::SetStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::SetStatementContext::SET() {
  return getToken(Cobol85Parser::SET, 0);
}

Cobol85Parser::SetUpDownByStatementContext* Cobol85Parser::SetStatementContext::setUpDownByStatement() {
  return getRuleContext<Cobol85Parser::SetUpDownByStatementContext>(0);
}

std::vector<Cobol85Parser::SetToStatementContext *> Cobol85Parser::SetStatementContext::setToStatement() {
  return getRuleContexts<Cobol85Parser::SetToStatementContext>();
}

Cobol85Parser::SetToStatementContext* Cobol85Parser::SetStatementContext::setToStatement(size_t i) {
  return getRuleContext<Cobol85Parser::SetToStatementContext>(i);
}


size_t Cobol85Parser::SetStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleSetStatement;
}

void Cobol85Parser::SetStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSetStatement(this);
}

void Cobol85Parser::SetStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSetStatement(this);
}

Cobol85Parser::SetStatementContext* Cobol85Parser::setStatement() {
  SetStatementContext *_localctx = _tracker.createInstance<SetStatementContext>(_ctx, getState());
  enterRule(_localctx, 888, Cobol85Parser::RuleSetStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5086);
    match(Cobol85Parser::SET);
    setState(5093);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 764, _ctx)) {
    case 1: {
      setState(5088); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(5087);
        setToStatement();
        setState(5090); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 3512999431135821858) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 68)) & 8213661102500741635) != 0) || ((((_la - 138) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 138)) & 5276573893883339531) != 0) || ((((_la - 202) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 202)) & -3098194965423728639) != 0) || ((((_la - 268) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 268)) & -9202532752178961289) != 0) || ((((_la - 336) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 336)) & 4647874433930428515) != 0) || ((((_la - 401) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 401)) & 130978249457673) != 0) || ((((_la - 466) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 466)) & 103776312507334817) != 0) || ((((_la - 552) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 552)) & 47) != 0));
      break;
    }

    case 2: {
      setState(5092);
      setUpDownByStatement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SetToStatementContext ------------------------------------------------------------------

Cobol85Parser::SetToStatementContext::SetToStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::SetToStatementContext::TO() {
  return getToken(Cobol85Parser::TO, 0);
}

std::vector<Cobol85Parser::SetToContext *> Cobol85Parser::SetToStatementContext::setTo() {
  return getRuleContexts<Cobol85Parser::SetToContext>();
}

Cobol85Parser::SetToContext* Cobol85Parser::SetToStatementContext::setTo(size_t i) {
  return getRuleContext<Cobol85Parser::SetToContext>(i);
}

std::vector<Cobol85Parser::SetToValueContext *> Cobol85Parser::SetToStatementContext::setToValue() {
  return getRuleContexts<Cobol85Parser::SetToValueContext>();
}

Cobol85Parser::SetToValueContext* Cobol85Parser::SetToStatementContext::setToValue(size_t i) {
  return getRuleContext<Cobol85Parser::SetToValueContext>(i);
}


size_t Cobol85Parser::SetToStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleSetToStatement;
}

void Cobol85Parser::SetToStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSetToStatement(this);
}

void Cobol85Parser::SetToStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSetToStatement(this);
}

Cobol85Parser::SetToStatementContext* Cobol85Parser::setToStatement() {
  SetToStatementContext *_localctx = _tracker.createInstance<SetToStatementContext>(_ctx, getState());
  enterRule(_localctx, 890, Cobol85Parser::RuleSetToStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(5096); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(5095);
      setTo();
      setState(5098); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3512999431135821858) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 8213661102500741635) != 0) || ((((_la - 138) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 138)) & 5276573893883339531) != 0) || ((((_la - 202) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 202)) & -3098194965423728639) != 0) || ((((_la - 268) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 268)) & -9202532752178961289) != 0) || ((((_la - 336) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 336)) & 4647874433930428515) != 0) || ((((_la - 401) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 401)) & 130978249457673) != 0) || ((((_la - 466) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 466)) & 103776312507334817) != 0) || ((((_la - 552) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 552)) & 47) != 0));
    setState(5100);
    match(Cobol85Parser::TO);
    setState(5102); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(5101);
              setToValue();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(5104); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 766, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SetUpDownByStatementContext ------------------------------------------------------------------

Cobol85Parser::SetUpDownByStatementContext::SetUpDownByStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::SetByValueContext* Cobol85Parser::SetUpDownByStatementContext::setByValue() {
  return getRuleContext<Cobol85Parser::SetByValueContext>(0);
}

tree::TerminalNode* Cobol85Parser::SetUpDownByStatementContext::UP() {
  return getToken(Cobol85Parser::UP, 0);
}

tree::TerminalNode* Cobol85Parser::SetUpDownByStatementContext::BY() {
  return getToken(Cobol85Parser::BY, 0);
}

tree::TerminalNode* Cobol85Parser::SetUpDownByStatementContext::DOWN() {
  return getToken(Cobol85Parser::DOWN, 0);
}

std::vector<Cobol85Parser::SetToContext *> Cobol85Parser::SetUpDownByStatementContext::setTo() {
  return getRuleContexts<Cobol85Parser::SetToContext>();
}

Cobol85Parser::SetToContext* Cobol85Parser::SetUpDownByStatementContext::setTo(size_t i) {
  return getRuleContext<Cobol85Parser::SetToContext>(i);
}


size_t Cobol85Parser::SetUpDownByStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleSetUpDownByStatement;
}

void Cobol85Parser::SetUpDownByStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSetUpDownByStatement(this);
}

void Cobol85Parser::SetUpDownByStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSetUpDownByStatement(this);
}

Cobol85Parser::SetUpDownByStatementContext* Cobol85Parser::setUpDownByStatement() {
  SetUpDownByStatementContext *_localctx = _tracker.createInstance<SetUpDownByStatementContext>(_ctx, getState());
  enterRule(_localctx, 892, Cobol85Parser::RuleSetUpDownByStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5107); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(5106);
      setTo();
      setState(5109); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3512999431135821858) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 8213661102500741635) != 0) || ((((_la - 138) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 138)) & 5276573893883339531) != 0) || ((((_la - 202) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 202)) & -3098194965423728639) != 0) || ((((_la - 268) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 268)) & -9202532752178961289) != 0) || ((((_la - 336) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 336)) & 4647874433930428515) != 0) || ((((_la - 401) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 401)) & 130978249457673) != 0) || ((((_la - 466) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 466)) & 103776312507334817) != 0) || ((((_la - 552) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 552)) & 47) != 0));
    setState(5115);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Cobol85Parser::UP: {
        setState(5111);
        match(Cobol85Parser::UP);
        setState(5112);
        match(Cobol85Parser::BY);
        break;
      }

      case Cobol85Parser::DOWN: {
        setState(5113);
        match(Cobol85Parser::DOWN);
        setState(5114);
        match(Cobol85Parser::BY);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(5117);
    setByValue();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SetToContext ------------------------------------------------------------------

Cobol85Parser::SetToContext::SetToContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::IdentifierContext* Cobol85Parser::SetToContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}


size_t Cobol85Parser::SetToContext::getRuleIndex() const {
  return Cobol85Parser::RuleSetTo;
}

void Cobol85Parser::SetToContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSetTo(this);
}

void Cobol85Parser::SetToContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSetTo(this);
}

Cobol85Parser::SetToContext* Cobol85Parser::setTo() {
  SetToContext *_localctx = _tracker.createInstance<SetToContext>(_ctx, getState());
  enterRule(_localctx, 894, Cobol85Parser::RuleSetTo);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5119);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SetToValueContext ------------------------------------------------------------------

Cobol85Parser::SetToValueContext::SetToValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::SetToValueContext::ON() {
  return getToken(Cobol85Parser::ON, 0);
}

tree::TerminalNode* Cobol85Parser::SetToValueContext::OFF() {
  return getToken(Cobol85Parser::OFF, 0);
}

tree::TerminalNode* Cobol85Parser::SetToValueContext::ENTRY() {
  return getToken(Cobol85Parser::ENTRY, 0);
}

Cobol85Parser::IdentifierContext* Cobol85Parser::SetToValueContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

Cobol85Parser::LiteralContext* Cobol85Parser::SetToValueContext::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}


size_t Cobol85Parser::SetToValueContext::getRuleIndex() const {
  return Cobol85Parser::RuleSetToValue;
}

void Cobol85Parser::SetToValueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSetToValue(this);
}

void Cobol85Parser::SetToValueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSetToValue(this);
}

Cobol85Parser::SetToValueContext* Cobol85Parser::setToValue() {
  SetToValueContext *_localctx = _tracker.createInstance<SetToValueContext>(_ctx, getState());
  enterRule(_localctx, 896, Cobol85Parser::RuleSetToValue);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(5130);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 770, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(5121);
      match(Cobol85Parser::ON);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(5122);
      match(Cobol85Parser::OFF);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(5123);
      match(Cobol85Parser::ENTRY);
      setState(5126);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 769, _ctx)) {
      case 1: {
        setState(5124);
        identifier();
        break;
      }

      case 2: {
        setState(5125);
        literal();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(5128);
      identifier();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(5129);
      literal();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SetByValueContext ------------------------------------------------------------------

Cobol85Parser::SetByValueContext::SetByValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::IdentifierContext* Cobol85Parser::SetByValueContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

Cobol85Parser::LiteralContext* Cobol85Parser::SetByValueContext::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}


size_t Cobol85Parser::SetByValueContext::getRuleIndex() const {
  return Cobol85Parser::RuleSetByValue;
}

void Cobol85Parser::SetByValueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSetByValue(this);
}

void Cobol85Parser::SetByValueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSetByValue(this);
}

Cobol85Parser::SetByValueContext* Cobol85Parser::setByValue() {
  SetByValueContext *_localctx = _tracker.createInstance<SetByValueContext>(_ctx, getState());
  enterRule(_localctx, 898, Cobol85Parser::RuleSetByValue);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(5134);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 771, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(5132);
      identifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(5133);
      literal();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SortStatementContext ------------------------------------------------------------------

Cobol85Parser::SortStatementContext::SortStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::SortStatementContext::SORT() {
  return getToken(Cobol85Parser::SORT, 0);
}

Cobol85Parser::FileNameContext* Cobol85Parser::SortStatementContext::fileName() {
  return getRuleContext<Cobol85Parser::FileNameContext>(0);
}

std::vector<Cobol85Parser::SortOnKeyClauseContext *> Cobol85Parser::SortStatementContext::sortOnKeyClause() {
  return getRuleContexts<Cobol85Parser::SortOnKeyClauseContext>();
}

Cobol85Parser::SortOnKeyClauseContext* Cobol85Parser::SortStatementContext::sortOnKeyClause(size_t i) {
  return getRuleContext<Cobol85Parser::SortOnKeyClauseContext>(i);
}

Cobol85Parser::SortDuplicatesPhraseContext* Cobol85Parser::SortStatementContext::sortDuplicatesPhrase() {
  return getRuleContext<Cobol85Parser::SortDuplicatesPhraseContext>(0);
}

Cobol85Parser::SortCollatingSequencePhraseContext* Cobol85Parser::SortStatementContext::sortCollatingSequencePhrase() {
  return getRuleContext<Cobol85Parser::SortCollatingSequencePhraseContext>(0);
}

Cobol85Parser::SortInputProcedurePhraseContext* Cobol85Parser::SortStatementContext::sortInputProcedurePhrase() {
  return getRuleContext<Cobol85Parser::SortInputProcedurePhraseContext>(0);
}

std::vector<Cobol85Parser::SortUsingContext *> Cobol85Parser::SortStatementContext::sortUsing() {
  return getRuleContexts<Cobol85Parser::SortUsingContext>();
}

Cobol85Parser::SortUsingContext* Cobol85Parser::SortStatementContext::sortUsing(size_t i) {
  return getRuleContext<Cobol85Parser::SortUsingContext>(i);
}

Cobol85Parser::SortOutputProcedurePhraseContext* Cobol85Parser::SortStatementContext::sortOutputProcedurePhrase() {
  return getRuleContext<Cobol85Parser::SortOutputProcedurePhraseContext>(0);
}

std::vector<Cobol85Parser::SortGivingPhraseContext *> Cobol85Parser::SortStatementContext::sortGivingPhrase() {
  return getRuleContexts<Cobol85Parser::SortGivingPhraseContext>();
}

Cobol85Parser::SortGivingPhraseContext* Cobol85Parser::SortStatementContext::sortGivingPhrase(size_t i) {
  return getRuleContext<Cobol85Parser::SortGivingPhraseContext>(i);
}


size_t Cobol85Parser::SortStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleSortStatement;
}

void Cobol85Parser::SortStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSortStatement(this);
}

void Cobol85Parser::SortStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSortStatement(this);
}

Cobol85Parser::SortStatementContext* Cobol85Parser::sortStatement() {
  SortStatementContext *_localctx = _tracker.createInstance<SortStatementContext>(_ctx, getState());
  enterRule(_localctx, 900, Cobol85Parser::RuleSortStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(5136);
    match(Cobol85Parser::SORT);
    setState(5137);
    fileName();
    setState(5139); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(5138);
              sortOnKeyClause();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(5141); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 772, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(5144);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 773, _ctx)) {
    case 1: {
      setState(5143);
      sortDuplicatesPhrase();
      break;
    }

    default:
      break;
    }
    setState(5147);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::COLLATING || _la == Cobol85Parser::SEQUENCE) {
      setState(5146);
      sortCollatingSequencePhrase();
    }
    setState(5150);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::INPUT) {
      setState(5149);
      sortInputProcedurePhrase();
    }
    setState(5155);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Cobol85Parser::USING) {
      setState(5152);
      sortUsing();
      setState(5157);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(5159);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::OUTPUT) {
      setState(5158);
      sortOutputProcedurePhrase();
    }
    setState(5164);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Cobol85Parser::GIVING) {
      setState(5161);
      sortGivingPhrase();
      setState(5166);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SortOnKeyClauseContext ------------------------------------------------------------------

Cobol85Parser::SortOnKeyClauseContext::SortOnKeyClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::SortOnKeyClauseContext::ASCENDING() {
  return getToken(Cobol85Parser::ASCENDING, 0);
}

tree::TerminalNode* Cobol85Parser::SortOnKeyClauseContext::DESCENDING() {
  return getToken(Cobol85Parser::DESCENDING, 0);
}

tree::TerminalNode* Cobol85Parser::SortOnKeyClauseContext::ON() {
  return getToken(Cobol85Parser::ON, 0);
}

tree::TerminalNode* Cobol85Parser::SortOnKeyClauseContext::KEY() {
  return getToken(Cobol85Parser::KEY, 0);
}

std::vector<Cobol85Parser::QualifiedDataNameContext *> Cobol85Parser::SortOnKeyClauseContext::qualifiedDataName() {
  return getRuleContexts<Cobol85Parser::QualifiedDataNameContext>();
}

Cobol85Parser::QualifiedDataNameContext* Cobol85Parser::SortOnKeyClauseContext::qualifiedDataName(size_t i) {
  return getRuleContext<Cobol85Parser::QualifiedDataNameContext>(i);
}


size_t Cobol85Parser::SortOnKeyClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleSortOnKeyClause;
}

void Cobol85Parser::SortOnKeyClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSortOnKeyClause(this);
}

void Cobol85Parser::SortOnKeyClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSortOnKeyClause(this);
}

Cobol85Parser::SortOnKeyClauseContext* Cobol85Parser::sortOnKeyClause() {
  SortOnKeyClauseContext *_localctx = _tracker.createInstance<SortOnKeyClauseContext>(_ctx, getState());
  enterRule(_localctx, 902, Cobol85Parser::RuleSortOnKeyClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5168);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::ON) {
      setState(5167);
      match(Cobol85Parser::ON);
    }
    setState(5170);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::ASCENDING || _la == Cobol85Parser::DESCENDING)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(5172);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::KEY) {
      setState(5171);
      match(Cobol85Parser::KEY);
    }
    setState(5175); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(5174);
      qualifiedDataName();
      setState(5177); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3512999431135821826) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 8070451912006173187) != 0) || ((((_la - 138) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 138)) & 5276573893883339531) != 0) || ((((_la - 202) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 202)) & -3098194965423761407) != 0) || ((((_la - 268) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 268)) & -9202532752178969483) != 0) || ((((_la - 336) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 336)) & 4647874433930428483) != 0) || ((((_la - 401) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 401)) & 84826144769) != 0) || ((((_la - 466) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 466)) & 103635575018455169) != 0) || ((((_la - 552) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 552)) & 47) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SortDuplicatesPhraseContext ------------------------------------------------------------------

Cobol85Parser::SortDuplicatesPhraseContext::SortDuplicatesPhraseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::SortDuplicatesPhraseContext::DUPLICATES() {
  return getToken(Cobol85Parser::DUPLICATES, 0);
}

tree::TerminalNode* Cobol85Parser::SortDuplicatesPhraseContext::WITH() {
  return getToken(Cobol85Parser::WITH, 0);
}

tree::TerminalNode* Cobol85Parser::SortDuplicatesPhraseContext::IN() {
  return getToken(Cobol85Parser::IN, 0);
}

tree::TerminalNode* Cobol85Parser::SortDuplicatesPhraseContext::ORDER() {
  return getToken(Cobol85Parser::ORDER, 0);
}


size_t Cobol85Parser::SortDuplicatesPhraseContext::getRuleIndex() const {
  return Cobol85Parser::RuleSortDuplicatesPhrase;
}

void Cobol85Parser::SortDuplicatesPhraseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSortDuplicatesPhrase(this);
}

void Cobol85Parser::SortDuplicatesPhraseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSortDuplicatesPhrase(this);
}

Cobol85Parser::SortDuplicatesPhraseContext* Cobol85Parser::sortDuplicatesPhrase() {
  SortDuplicatesPhraseContext *_localctx = _tracker.createInstance<SortDuplicatesPhraseContext>(_ctx, getState());
  enterRule(_localctx, 904, Cobol85Parser::RuleSortDuplicatesPhrase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5180);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::WITH) {
      setState(5179);
      match(Cobol85Parser::WITH);
    }
    setState(5182);
    match(Cobol85Parser::DUPLICATES);
    setState(5184);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IN) {
      setState(5183);
      match(Cobol85Parser::IN);
    }
    setState(5187);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::ORDER) {
      setState(5186);
      match(Cobol85Parser::ORDER);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SortCollatingSequencePhraseContext ------------------------------------------------------------------

Cobol85Parser::SortCollatingSequencePhraseContext::SortCollatingSequencePhraseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::SortCollatingSequencePhraseContext::SEQUENCE() {
  return getToken(Cobol85Parser::SEQUENCE, 0);
}

tree::TerminalNode* Cobol85Parser::SortCollatingSequencePhraseContext::COLLATING() {
  return getToken(Cobol85Parser::COLLATING, 0);
}

tree::TerminalNode* Cobol85Parser::SortCollatingSequencePhraseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}

std::vector<Cobol85Parser::AlphabetNameContext *> Cobol85Parser::SortCollatingSequencePhraseContext::alphabetName() {
  return getRuleContexts<Cobol85Parser::AlphabetNameContext>();
}

Cobol85Parser::AlphabetNameContext* Cobol85Parser::SortCollatingSequencePhraseContext::alphabetName(size_t i) {
  return getRuleContext<Cobol85Parser::AlphabetNameContext>(i);
}

Cobol85Parser::SortCollatingAlphanumericContext* Cobol85Parser::SortCollatingSequencePhraseContext::sortCollatingAlphanumeric() {
  return getRuleContext<Cobol85Parser::SortCollatingAlphanumericContext>(0);
}

Cobol85Parser::SortCollatingNationalContext* Cobol85Parser::SortCollatingSequencePhraseContext::sortCollatingNational() {
  return getRuleContext<Cobol85Parser::SortCollatingNationalContext>(0);
}


size_t Cobol85Parser::SortCollatingSequencePhraseContext::getRuleIndex() const {
  return Cobol85Parser::RuleSortCollatingSequencePhrase;
}

void Cobol85Parser::SortCollatingSequencePhraseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSortCollatingSequencePhrase(this);
}

void Cobol85Parser::SortCollatingSequencePhraseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSortCollatingSequencePhrase(this);
}

Cobol85Parser::SortCollatingSequencePhraseContext* Cobol85Parser::sortCollatingSequencePhrase() {
  SortCollatingSequencePhraseContext *_localctx = _tracker.createInstance<SortCollatingSequencePhraseContext>(_ctx, getState());
  enterRule(_localctx, 906, Cobol85Parser::RuleSortCollatingSequencePhrase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(5190);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::COLLATING) {
      setState(5189);
      match(Cobol85Parser::COLLATING);
    }
    setState(5192);
    match(Cobol85Parser::SEQUENCE);
    setState(5194);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(5193);
      match(Cobol85Parser::IS);
    }
    setState(5197); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(5196);
              alphabetName();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(5199); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 787, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(5202);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 788, _ctx)) {
    case 1: {
      setState(5201);
      sortCollatingAlphanumeric();
      break;
    }

    default:
      break;
    }
    setState(5205);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::FOR || _la == Cobol85Parser::NATIONAL) {
      setState(5204);
      sortCollatingNational();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SortCollatingAlphanumericContext ------------------------------------------------------------------

Cobol85Parser::SortCollatingAlphanumericContext::SortCollatingAlphanumericContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::SortCollatingAlphanumericContext::ALPHANUMERIC() {
  return getToken(Cobol85Parser::ALPHANUMERIC, 0);
}

tree::TerminalNode* Cobol85Parser::SortCollatingAlphanumericContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}

Cobol85Parser::AlphabetNameContext* Cobol85Parser::SortCollatingAlphanumericContext::alphabetName() {
  return getRuleContext<Cobol85Parser::AlphabetNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::SortCollatingAlphanumericContext::FOR() {
  return getToken(Cobol85Parser::FOR, 0);
}


size_t Cobol85Parser::SortCollatingAlphanumericContext::getRuleIndex() const {
  return Cobol85Parser::RuleSortCollatingAlphanumeric;
}

void Cobol85Parser::SortCollatingAlphanumericContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSortCollatingAlphanumeric(this);
}

void Cobol85Parser::SortCollatingAlphanumericContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSortCollatingAlphanumeric(this);
}

Cobol85Parser::SortCollatingAlphanumericContext* Cobol85Parser::sortCollatingAlphanumeric() {
  SortCollatingAlphanumericContext *_localctx = _tracker.createInstance<SortCollatingAlphanumericContext>(_ctx, getState());
  enterRule(_localctx, 908, Cobol85Parser::RuleSortCollatingAlphanumeric);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5208);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::FOR) {
      setState(5207);
      match(Cobol85Parser::FOR);
    }
    setState(5210);
    match(Cobol85Parser::ALPHANUMERIC);
    setState(5211);
    match(Cobol85Parser::IS);
    setState(5212);
    alphabetName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SortCollatingNationalContext ------------------------------------------------------------------

Cobol85Parser::SortCollatingNationalContext::SortCollatingNationalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::SortCollatingNationalContext::NATIONAL() {
  return getToken(Cobol85Parser::NATIONAL, 0);
}

Cobol85Parser::AlphabetNameContext* Cobol85Parser::SortCollatingNationalContext::alphabetName() {
  return getRuleContext<Cobol85Parser::AlphabetNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::SortCollatingNationalContext::FOR() {
  return getToken(Cobol85Parser::FOR, 0);
}

tree::TerminalNode* Cobol85Parser::SortCollatingNationalContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}


size_t Cobol85Parser::SortCollatingNationalContext::getRuleIndex() const {
  return Cobol85Parser::RuleSortCollatingNational;
}

void Cobol85Parser::SortCollatingNationalContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSortCollatingNational(this);
}

void Cobol85Parser::SortCollatingNationalContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSortCollatingNational(this);
}

Cobol85Parser::SortCollatingNationalContext* Cobol85Parser::sortCollatingNational() {
  SortCollatingNationalContext *_localctx = _tracker.createInstance<SortCollatingNationalContext>(_ctx, getState());
  enterRule(_localctx, 910, Cobol85Parser::RuleSortCollatingNational);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5215);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::FOR) {
      setState(5214);
      match(Cobol85Parser::FOR);
    }
    setState(5217);
    match(Cobol85Parser::NATIONAL);
    setState(5219);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(5218);
      match(Cobol85Parser::IS);
    }
    setState(5221);
    alphabetName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SortInputProcedurePhraseContext ------------------------------------------------------------------

Cobol85Parser::SortInputProcedurePhraseContext::SortInputProcedurePhraseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::SortInputProcedurePhraseContext::INPUT() {
  return getToken(Cobol85Parser::INPUT, 0);
}

tree::TerminalNode* Cobol85Parser::SortInputProcedurePhraseContext::PROCEDURE() {
  return getToken(Cobol85Parser::PROCEDURE, 0);
}

Cobol85Parser::ProcedureNameContext* Cobol85Parser::SortInputProcedurePhraseContext::procedureName() {
  return getRuleContext<Cobol85Parser::ProcedureNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::SortInputProcedurePhraseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}

Cobol85Parser::SortInputThroughContext* Cobol85Parser::SortInputProcedurePhraseContext::sortInputThrough() {
  return getRuleContext<Cobol85Parser::SortInputThroughContext>(0);
}


size_t Cobol85Parser::SortInputProcedurePhraseContext::getRuleIndex() const {
  return Cobol85Parser::RuleSortInputProcedurePhrase;
}

void Cobol85Parser::SortInputProcedurePhraseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSortInputProcedurePhrase(this);
}

void Cobol85Parser::SortInputProcedurePhraseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSortInputProcedurePhrase(this);
}

Cobol85Parser::SortInputProcedurePhraseContext* Cobol85Parser::sortInputProcedurePhrase() {
  SortInputProcedurePhraseContext *_localctx = _tracker.createInstance<SortInputProcedurePhraseContext>(_ctx, getState());
  enterRule(_localctx, 912, Cobol85Parser::RuleSortInputProcedurePhrase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5223);
    match(Cobol85Parser::INPUT);
    setState(5224);
    match(Cobol85Parser::PROCEDURE);
    setState(5226);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(5225);
      match(Cobol85Parser::IS);
    }
    setState(5228);
    procedureName();
    setState(5230);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::THROUGH

    || _la == Cobol85Parser::THRU) {
      setState(5229);
      sortInputThrough();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SortInputThroughContext ------------------------------------------------------------------

Cobol85Parser::SortInputThroughContext::SortInputThroughContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::ProcedureNameContext* Cobol85Parser::SortInputThroughContext::procedureName() {
  return getRuleContext<Cobol85Parser::ProcedureNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::SortInputThroughContext::THROUGH() {
  return getToken(Cobol85Parser::THROUGH, 0);
}

tree::TerminalNode* Cobol85Parser::SortInputThroughContext::THRU() {
  return getToken(Cobol85Parser::THRU, 0);
}


size_t Cobol85Parser::SortInputThroughContext::getRuleIndex() const {
  return Cobol85Parser::RuleSortInputThrough;
}

void Cobol85Parser::SortInputThroughContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSortInputThrough(this);
}

void Cobol85Parser::SortInputThroughContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSortInputThrough(this);
}

Cobol85Parser::SortInputThroughContext* Cobol85Parser::sortInputThrough() {
  SortInputThroughContext *_localctx = _tracker.createInstance<SortInputThroughContext>(_ctx, getState());
  enterRule(_localctx, 914, Cobol85Parser::RuleSortInputThrough);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5232);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::THROUGH

    || _la == Cobol85Parser::THRU)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(5233);
    procedureName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SortUsingContext ------------------------------------------------------------------

Cobol85Parser::SortUsingContext::SortUsingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::SortUsingContext::USING() {
  return getToken(Cobol85Parser::USING, 0);
}

std::vector<Cobol85Parser::FileNameContext *> Cobol85Parser::SortUsingContext::fileName() {
  return getRuleContexts<Cobol85Parser::FileNameContext>();
}

Cobol85Parser::FileNameContext* Cobol85Parser::SortUsingContext::fileName(size_t i) {
  return getRuleContext<Cobol85Parser::FileNameContext>(i);
}


size_t Cobol85Parser::SortUsingContext::getRuleIndex() const {
  return Cobol85Parser::RuleSortUsing;
}

void Cobol85Parser::SortUsingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSortUsing(this);
}

void Cobol85Parser::SortUsingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSortUsing(this);
}

Cobol85Parser::SortUsingContext* Cobol85Parser::sortUsing() {
  SortUsingContext *_localctx = _tracker.createInstance<SortUsingContext>(_ctx, getState());
  enterRule(_localctx, 916, Cobol85Parser::RuleSortUsing);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5235);
    match(Cobol85Parser::USING);
    setState(5237); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(5236);
      fileName();
      setState(5239); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3512999431135821826) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 8070451912006173187) != 0) || ((((_la - 138) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 138)) & 5276573893883339531) != 0) || ((((_la - 202) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 202)) & -3098194965423761407) != 0) || ((((_la - 268) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 268)) & -9202532752178970507) != 0) || ((((_la - 336) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 336)) & 4647874433930428483) != 0) || ((((_la - 401) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 401)) & 84826144769) != 0) || ((((_la - 466) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 466)) & 103635575018455169) != 0) || _la == Cobol85Parser::IDENTIFIER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SortOutputProcedurePhraseContext ------------------------------------------------------------------

Cobol85Parser::SortOutputProcedurePhraseContext::SortOutputProcedurePhraseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::SortOutputProcedurePhraseContext::OUTPUT() {
  return getToken(Cobol85Parser::OUTPUT, 0);
}

tree::TerminalNode* Cobol85Parser::SortOutputProcedurePhraseContext::PROCEDURE() {
  return getToken(Cobol85Parser::PROCEDURE, 0);
}

Cobol85Parser::ProcedureNameContext* Cobol85Parser::SortOutputProcedurePhraseContext::procedureName() {
  return getRuleContext<Cobol85Parser::ProcedureNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::SortOutputProcedurePhraseContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}

Cobol85Parser::SortOutputThroughContext* Cobol85Parser::SortOutputProcedurePhraseContext::sortOutputThrough() {
  return getRuleContext<Cobol85Parser::SortOutputThroughContext>(0);
}


size_t Cobol85Parser::SortOutputProcedurePhraseContext::getRuleIndex() const {
  return Cobol85Parser::RuleSortOutputProcedurePhrase;
}

void Cobol85Parser::SortOutputProcedurePhraseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSortOutputProcedurePhrase(this);
}

void Cobol85Parser::SortOutputProcedurePhraseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSortOutputProcedurePhrase(this);
}

Cobol85Parser::SortOutputProcedurePhraseContext* Cobol85Parser::sortOutputProcedurePhrase() {
  SortOutputProcedurePhraseContext *_localctx = _tracker.createInstance<SortOutputProcedurePhraseContext>(_ctx, getState());
  enterRule(_localctx, 918, Cobol85Parser::RuleSortOutputProcedurePhrase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5241);
    match(Cobol85Parser::OUTPUT);
    setState(5242);
    match(Cobol85Parser::PROCEDURE);
    setState(5244);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(5243);
      match(Cobol85Parser::IS);
    }
    setState(5246);
    procedureName();
    setState(5248);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::THROUGH

    || _la == Cobol85Parser::THRU) {
      setState(5247);
      sortOutputThrough();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SortOutputThroughContext ------------------------------------------------------------------

Cobol85Parser::SortOutputThroughContext::SortOutputThroughContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::ProcedureNameContext* Cobol85Parser::SortOutputThroughContext::procedureName() {
  return getRuleContext<Cobol85Parser::ProcedureNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::SortOutputThroughContext::THROUGH() {
  return getToken(Cobol85Parser::THROUGH, 0);
}

tree::TerminalNode* Cobol85Parser::SortOutputThroughContext::THRU() {
  return getToken(Cobol85Parser::THRU, 0);
}


size_t Cobol85Parser::SortOutputThroughContext::getRuleIndex() const {
  return Cobol85Parser::RuleSortOutputThrough;
}

void Cobol85Parser::SortOutputThroughContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSortOutputThrough(this);
}

void Cobol85Parser::SortOutputThroughContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSortOutputThrough(this);
}

Cobol85Parser::SortOutputThroughContext* Cobol85Parser::sortOutputThrough() {
  SortOutputThroughContext *_localctx = _tracker.createInstance<SortOutputThroughContext>(_ctx, getState());
  enterRule(_localctx, 920, Cobol85Parser::RuleSortOutputThrough);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5250);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::THROUGH

    || _la == Cobol85Parser::THRU)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(5251);
    procedureName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SortGivingPhraseContext ------------------------------------------------------------------

Cobol85Parser::SortGivingPhraseContext::SortGivingPhraseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::SortGivingPhraseContext::GIVING() {
  return getToken(Cobol85Parser::GIVING, 0);
}

std::vector<Cobol85Parser::SortGivingContext *> Cobol85Parser::SortGivingPhraseContext::sortGiving() {
  return getRuleContexts<Cobol85Parser::SortGivingContext>();
}

Cobol85Parser::SortGivingContext* Cobol85Parser::SortGivingPhraseContext::sortGiving(size_t i) {
  return getRuleContext<Cobol85Parser::SortGivingContext>(i);
}


size_t Cobol85Parser::SortGivingPhraseContext::getRuleIndex() const {
  return Cobol85Parser::RuleSortGivingPhrase;
}

void Cobol85Parser::SortGivingPhraseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSortGivingPhrase(this);
}

void Cobol85Parser::SortGivingPhraseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSortGivingPhrase(this);
}

Cobol85Parser::SortGivingPhraseContext* Cobol85Parser::sortGivingPhrase() {
  SortGivingPhraseContext *_localctx = _tracker.createInstance<SortGivingPhraseContext>(_ctx, getState());
  enterRule(_localctx, 922, Cobol85Parser::RuleSortGivingPhrase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5253);
    match(Cobol85Parser::GIVING);
    setState(5255); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(5254);
      sortGiving();
      setState(5257); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3512999431135821826) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 8070451912006173187) != 0) || ((((_la - 138) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 138)) & 5276573893883339531) != 0) || ((((_la - 202) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 202)) & -3098194965423761407) != 0) || ((((_la - 268) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 268)) & -9202532752178970507) != 0) || ((((_la - 336) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 336)) & 4647874433930428483) != 0) || ((((_la - 401) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 401)) & 84826144769) != 0) || ((((_la - 466) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 466)) & 103635575018455169) != 0) || _la == Cobol85Parser::IDENTIFIER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SortGivingContext ------------------------------------------------------------------

Cobol85Parser::SortGivingContext::SortGivingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::FileNameContext* Cobol85Parser::SortGivingContext::fileName() {
  return getRuleContext<Cobol85Parser::FileNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::SortGivingContext::LOCK() {
  return getToken(Cobol85Parser::LOCK, 0);
}

tree::TerminalNode* Cobol85Parser::SortGivingContext::SAVE() {
  return getToken(Cobol85Parser::SAVE, 0);
}

tree::TerminalNode* Cobol85Parser::SortGivingContext::NO() {
  return getToken(Cobol85Parser::NO, 0);
}

tree::TerminalNode* Cobol85Parser::SortGivingContext::REWIND() {
  return getToken(Cobol85Parser::REWIND, 0);
}

tree::TerminalNode* Cobol85Parser::SortGivingContext::CRUNCH() {
  return getToken(Cobol85Parser::CRUNCH, 0);
}

tree::TerminalNode* Cobol85Parser::SortGivingContext::RELEASE() {
  return getToken(Cobol85Parser::RELEASE, 0);
}

tree::TerminalNode* Cobol85Parser::SortGivingContext::WITH() {
  return getToken(Cobol85Parser::WITH, 0);
}

tree::TerminalNode* Cobol85Parser::SortGivingContext::REMOVE() {
  return getToken(Cobol85Parser::REMOVE, 0);
}


size_t Cobol85Parser::SortGivingContext::getRuleIndex() const {
  return Cobol85Parser::RuleSortGiving;
}

void Cobol85Parser::SortGivingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSortGiving(this);
}

void Cobol85Parser::SortGivingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSortGiving(this);
}

Cobol85Parser::SortGivingContext* Cobol85Parser::sortGiving() {
  SortGivingContext *_localctx = _tracker.createInstance<SortGivingContext>(_ctx, getState());
  enterRule(_localctx, 924, Cobol85Parser::RuleSortGiving);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5259);
    fileName();
    setState(5269);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 799, _ctx)) {
    case 1: {
      setState(5260);
      match(Cobol85Parser::LOCK);
      break;
    }

    case 2: {
      setState(5261);
      match(Cobol85Parser::SAVE);
      break;
    }

    case 3: {
      setState(5262);
      match(Cobol85Parser::NO);
      setState(5263);
      match(Cobol85Parser::REWIND);
      break;
    }

    case 4: {
      setState(5264);
      match(Cobol85Parser::CRUNCH);
      break;
    }

    case 5: {
      setState(5265);
      match(Cobol85Parser::RELEASE);
      break;
    }

    case 6: {
      setState(5266);
      match(Cobol85Parser::WITH);
      setState(5267);
      match(Cobol85Parser::REMOVE);
      setState(5268);
      match(Cobol85Parser::CRUNCH);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StartStatementContext ------------------------------------------------------------------

Cobol85Parser::StartStatementContext::StartStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::StartStatementContext::START() {
  return getToken(Cobol85Parser::START, 0);
}

Cobol85Parser::FileNameContext* Cobol85Parser::StartStatementContext::fileName() {
  return getRuleContext<Cobol85Parser::FileNameContext>(0);
}

Cobol85Parser::StartKeyContext* Cobol85Parser::StartStatementContext::startKey() {
  return getRuleContext<Cobol85Parser::StartKeyContext>(0);
}

Cobol85Parser::InvalidKeyPhraseContext* Cobol85Parser::StartStatementContext::invalidKeyPhrase() {
  return getRuleContext<Cobol85Parser::InvalidKeyPhraseContext>(0);
}

Cobol85Parser::NotInvalidKeyPhraseContext* Cobol85Parser::StartStatementContext::notInvalidKeyPhrase() {
  return getRuleContext<Cobol85Parser::NotInvalidKeyPhraseContext>(0);
}

tree::TerminalNode* Cobol85Parser::StartStatementContext::END_START() {
  return getToken(Cobol85Parser::END_START, 0);
}


size_t Cobol85Parser::StartStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleStartStatement;
}

void Cobol85Parser::StartStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStartStatement(this);
}

void Cobol85Parser::StartStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStartStatement(this);
}

Cobol85Parser::StartStatementContext* Cobol85Parser::startStatement() {
  StartStatementContext *_localctx = _tracker.createInstance<StartStatementContext>(_ctx, getState());
  enterRule(_localctx, 926, Cobol85Parser::RuleStartStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5271);
    match(Cobol85Parser::START);
    setState(5272);
    fileName();
    setState(5274);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::KEY) {
      setState(5273);
      startKey();
    }
    setState(5277);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 801, _ctx)) {
    case 1: {
      setState(5276);
      invalidKeyPhrase();
      break;
    }

    default:
      break;
    }
    setState(5280);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 802, _ctx)) {
    case 1: {
      setState(5279);
      notInvalidKeyPhrase();
      break;
    }

    default:
      break;
    }
    setState(5283);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 803, _ctx)) {
    case 1: {
      setState(5282);
      match(Cobol85Parser::END_START);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StartKeyContext ------------------------------------------------------------------

Cobol85Parser::StartKeyContext::StartKeyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::StartKeyContext::KEY() {
  return getToken(Cobol85Parser::KEY, 0);
}

Cobol85Parser::QualifiedDataNameContext* Cobol85Parser::StartKeyContext::qualifiedDataName() {
  return getRuleContext<Cobol85Parser::QualifiedDataNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::StartKeyContext::EQUAL() {
  return getToken(Cobol85Parser::EQUAL, 0);
}

tree::TerminalNode* Cobol85Parser::StartKeyContext::EQUALCHAR() {
  return getToken(Cobol85Parser::EQUALCHAR, 0);
}

tree::TerminalNode* Cobol85Parser::StartKeyContext::GREATER() {
  return getToken(Cobol85Parser::GREATER, 0);
}

tree::TerminalNode* Cobol85Parser::StartKeyContext::MORETHANCHAR() {
  return getToken(Cobol85Parser::MORETHANCHAR, 0);
}

tree::TerminalNode* Cobol85Parser::StartKeyContext::NOT() {
  return getToken(Cobol85Parser::NOT, 0);
}

tree::TerminalNode* Cobol85Parser::StartKeyContext::LESS() {
  return getToken(Cobol85Parser::LESS, 0);
}

tree::TerminalNode* Cobol85Parser::StartKeyContext::LESSTHANCHAR() {
  return getToken(Cobol85Parser::LESSTHANCHAR, 0);
}

tree::TerminalNode* Cobol85Parser::StartKeyContext::OR() {
  return getToken(Cobol85Parser::OR, 0);
}

tree::TerminalNode* Cobol85Parser::StartKeyContext::MORETHANOREQUAL() {
  return getToken(Cobol85Parser::MORETHANOREQUAL, 0);
}

tree::TerminalNode* Cobol85Parser::StartKeyContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}

tree::TerminalNode* Cobol85Parser::StartKeyContext::TO() {
  return getToken(Cobol85Parser::TO, 0);
}

tree::TerminalNode* Cobol85Parser::StartKeyContext::THAN() {
  return getToken(Cobol85Parser::THAN, 0);
}


size_t Cobol85Parser::StartKeyContext::getRuleIndex() const {
  return Cobol85Parser::RuleStartKey;
}

void Cobol85Parser::StartKeyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStartKey(this);
}

void Cobol85Parser::StartKeyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStartKey(this);
}

Cobol85Parser::StartKeyContext* Cobol85Parser::startKey() {
  StartKeyContext *_localctx = _tracker.createInstance<StartKeyContext>(_ctx, getState());
  enterRule(_localctx, 928, Cobol85Parser::RuleStartKey);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5285);
    match(Cobol85Parser::KEY);
    setState(5287);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(5286);
      match(Cobol85Parser::IS);
    }
    setState(5316);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 810, _ctx)) {
    case 1: {
      setState(5289);
      match(Cobol85Parser::EQUAL);
      setState(5291);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Cobol85Parser::TO) {
        setState(5290);
        match(Cobol85Parser::TO);
      }
      break;
    }

    case 2: {
      setState(5293);
      match(Cobol85Parser::EQUALCHAR);
      break;
    }

    case 3: {
      setState(5294);
      match(Cobol85Parser::GREATER);
      setState(5296);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Cobol85Parser::THAN) {
        setState(5295);
        match(Cobol85Parser::THAN);
      }
      break;
    }

    case 4: {
      setState(5298);
      match(Cobol85Parser::MORETHANCHAR);
      break;
    }

    case 5: {
      setState(5299);
      match(Cobol85Parser::NOT);
      setState(5300);
      match(Cobol85Parser::LESS);
      setState(5302);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Cobol85Parser::THAN) {
        setState(5301);
        match(Cobol85Parser::THAN);
      }
      break;
    }

    case 6: {
      setState(5304);
      match(Cobol85Parser::NOT);
      setState(5305);
      match(Cobol85Parser::LESSTHANCHAR);
      break;
    }

    case 7: {
      setState(5306);
      match(Cobol85Parser::GREATER);
      setState(5308);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Cobol85Parser::THAN) {
        setState(5307);
        match(Cobol85Parser::THAN);
      }
      setState(5310);
      match(Cobol85Parser::OR);
      setState(5311);
      match(Cobol85Parser::EQUAL);
      setState(5313);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Cobol85Parser::TO) {
        setState(5312);
        match(Cobol85Parser::TO);
      }
      break;
    }

    case 8: {
      setState(5315);
      match(Cobol85Parser::MORETHANOREQUAL);
      break;
    }

    default:
      break;
    }
    setState(5318);
    qualifiedDataName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StopStatementContext ------------------------------------------------------------------

Cobol85Parser::StopStatementContext::StopStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::StopStatementContext::STOP() {
  return getToken(Cobol85Parser::STOP, 0);
}

tree::TerminalNode* Cobol85Parser::StopStatementContext::RUN() {
  return getToken(Cobol85Parser::RUN, 0);
}

Cobol85Parser::LiteralContext* Cobol85Parser::StopStatementContext::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}


size_t Cobol85Parser::StopStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleStopStatement;
}

void Cobol85Parser::StopStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStopStatement(this);
}

void Cobol85Parser::StopStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStopStatement(this);
}

Cobol85Parser::StopStatementContext* Cobol85Parser::stopStatement() {
  StopStatementContext *_localctx = _tracker.createInstance<StopStatementContext>(_ctx, getState());
  enterRule(_localctx, 930, Cobol85Parser::RuleStopStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5320);
    match(Cobol85Parser::STOP);
    setState(5323);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Cobol85Parser::RUN: {
        setState(5321);
        match(Cobol85Parser::RUN);
        break;
      }

      case Cobol85Parser::ALL:
      case Cobol85Parser::DFHRESP:
      case Cobol85Parser::DFHVALUE:
      case Cobol85Parser::FALSE:
      case Cobol85Parser::HIGH_VALUE:
      case Cobol85Parser::HIGH_VALUES:
      case Cobol85Parser::LOW_VALUE:
      case Cobol85Parser::LOW_VALUES:
      case Cobol85Parser::NULL_:
      case Cobol85Parser::NULLS:
      case Cobol85Parser::QUOTE:
      case Cobol85Parser::QUOTES:
      case Cobol85Parser::SPACE:
      case Cobol85Parser::SPACES:
      case Cobol85Parser::TRUE:
      case Cobol85Parser::ZERO:
      case Cobol85Parser::ZEROS:
      case Cobol85Parser::ZEROES:
      case Cobol85Parser::NONNUMERICLITERAL:
      case Cobol85Parser::LEVEL_NUMBER_66:
      case Cobol85Parser::LEVEL_NUMBER_77:
      case Cobol85Parser::LEVEL_NUMBER_88:
      case Cobol85Parser::INTEGERLITERAL:
      case Cobol85Parser::NUMERICLITERAL: {
        setState(5322);
        literal();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StringStatementContext ------------------------------------------------------------------

Cobol85Parser::StringStatementContext::StringStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::StringStatementContext::STRING() {
  return getToken(Cobol85Parser::STRING, 0);
}

Cobol85Parser::StringIntoPhraseContext* Cobol85Parser::StringStatementContext::stringIntoPhrase() {
  return getRuleContext<Cobol85Parser::StringIntoPhraseContext>(0);
}

std::vector<Cobol85Parser::StringSendingPhraseContext *> Cobol85Parser::StringStatementContext::stringSendingPhrase() {
  return getRuleContexts<Cobol85Parser::StringSendingPhraseContext>();
}

Cobol85Parser::StringSendingPhraseContext* Cobol85Parser::StringStatementContext::stringSendingPhrase(size_t i) {
  return getRuleContext<Cobol85Parser::StringSendingPhraseContext>(i);
}

Cobol85Parser::StringWithPointerPhraseContext* Cobol85Parser::StringStatementContext::stringWithPointerPhrase() {
  return getRuleContext<Cobol85Parser::StringWithPointerPhraseContext>(0);
}

Cobol85Parser::OnOverflowPhraseContext* Cobol85Parser::StringStatementContext::onOverflowPhrase() {
  return getRuleContext<Cobol85Parser::OnOverflowPhraseContext>(0);
}

Cobol85Parser::NotOnOverflowPhraseContext* Cobol85Parser::StringStatementContext::notOnOverflowPhrase() {
  return getRuleContext<Cobol85Parser::NotOnOverflowPhraseContext>(0);
}

tree::TerminalNode* Cobol85Parser::StringStatementContext::END_STRING() {
  return getToken(Cobol85Parser::END_STRING, 0);
}


size_t Cobol85Parser::StringStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleStringStatement;
}

void Cobol85Parser::StringStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStringStatement(this);
}

void Cobol85Parser::StringStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStringStatement(this);
}

Cobol85Parser::StringStatementContext* Cobol85Parser::stringStatement() {
  StringStatementContext *_localctx = _tracker.createInstance<StringStatementContext>(_ctx, getState());
  enterRule(_localctx, 932, Cobol85Parser::RuleStringStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5325);
    match(Cobol85Parser::STRING);
    setState(5327); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(5326);
      stringSendingPhrase();
      setState(5329); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3512999431135822370) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 8213661102500741635) != 0) || ((((_la - 138) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 138)) & 5276573893883339531) != 0) || ((((_la - 202) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 202)) & -3098194964618422267) != 0) || ((((_la - 268) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 268)) & -9202427199037528969) != 0) || ((((_la - 336) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 336)) & 4647874440372879459) != 0) || ((((_la - 401) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 401)) & 1819828109721609) != 0) || ((((_la - 466) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 466)) & 572150674022301857) != 0) || ((((_la - 551) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 551)) & 127) != 0));
    setState(5331);
    stringIntoPhrase();
    setState(5333);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 813, _ctx)) {
    case 1: {
      setState(5332);
      stringWithPointerPhrase();
      break;
    }

    default:
      break;
    }
    setState(5336);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 814, _ctx)) {
    case 1: {
      setState(5335);
      onOverflowPhrase();
      break;
    }

    default:
      break;
    }
    setState(5339);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 815, _ctx)) {
    case 1: {
      setState(5338);
      notOnOverflowPhrase();
      break;
    }

    default:
      break;
    }
    setState(5342);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 816, _ctx)) {
    case 1: {
      setState(5341);
      match(Cobol85Parser::END_STRING);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StringSendingPhraseContext ------------------------------------------------------------------

Cobol85Parser::StringSendingPhraseContext::StringSendingPhraseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::StringDelimitedByPhraseContext* Cobol85Parser::StringSendingPhraseContext::stringDelimitedByPhrase() {
  return getRuleContext<Cobol85Parser::StringDelimitedByPhraseContext>(0);
}

Cobol85Parser::StringForPhraseContext* Cobol85Parser::StringSendingPhraseContext::stringForPhrase() {
  return getRuleContext<Cobol85Parser::StringForPhraseContext>(0);
}

std::vector<Cobol85Parser::StringSendingContext *> Cobol85Parser::StringSendingPhraseContext::stringSending() {
  return getRuleContexts<Cobol85Parser::StringSendingContext>();
}

Cobol85Parser::StringSendingContext* Cobol85Parser::StringSendingPhraseContext::stringSending(size_t i) {
  return getRuleContext<Cobol85Parser::StringSendingContext>(i);
}


size_t Cobol85Parser::StringSendingPhraseContext::getRuleIndex() const {
  return Cobol85Parser::RuleStringSendingPhrase;
}

void Cobol85Parser::StringSendingPhraseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStringSendingPhrase(this);
}

void Cobol85Parser::StringSendingPhraseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStringSendingPhrase(this);
}

Cobol85Parser::StringSendingPhraseContext* Cobol85Parser::stringSendingPhrase() {
  StringSendingPhraseContext *_localctx = _tracker.createInstance<StringSendingPhraseContext>(_ctx, getState());
  enterRule(_localctx, 934, Cobol85Parser::RuleStringSendingPhrase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5345); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(5344);
      stringSending();
      setState(5347); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3512999431135822370) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 8213661102500741635) != 0) || ((((_la - 138) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 138)) & 5276573893883339531) != 0) || ((((_la - 202) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 202)) & -3098194964618422267) != 0) || ((((_la - 268) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 268)) & -9202427199037528969) != 0) || ((((_la - 336) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 336)) & 4647874440372879459) != 0) || ((((_la - 401) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 401)) & 1819828109721609) != 0) || ((((_la - 466) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 466)) & 572150674022301857) != 0) || ((((_la - 551) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 551)) & 127) != 0));
    setState(5351);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Cobol85Parser::DELIMITED: {
        setState(5349);
        stringDelimitedByPhrase();
        break;
      }

      case Cobol85Parser::FOR: {
        setState(5350);
        stringForPhrase();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StringSendingContext ------------------------------------------------------------------

Cobol85Parser::StringSendingContext::StringSendingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::IdentifierContext* Cobol85Parser::StringSendingContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

Cobol85Parser::LiteralContext* Cobol85Parser::StringSendingContext::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}


size_t Cobol85Parser::StringSendingContext::getRuleIndex() const {
  return Cobol85Parser::RuleStringSending;
}

void Cobol85Parser::StringSendingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStringSending(this);
}

void Cobol85Parser::StringSendingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStringSending(this);
}

Cobol85Parser::StringSendingContext* Cobol85Parser::stringSending() {
  StringSendingContext *_localctx = _tracker.createInstance<StringSendingContext>(_ctx, getState());
  enterRule(_localctx, 936, Cobol85Parser::RuleStringSending);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(5355);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 819, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(5353);
      identifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(5354);
      literal();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StringDelimitedByPhraseContext ------------------------------------------------------------------

Cobol85Parser::StringDelimitedByPhraseContext::StringDelimitedByPhraseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::StringDelimitedByPhraseContext::DELIMITED() {
  return getToken(Cobol85Parser::DELIMITED, 0);
}

tree::TerminalNode* Cobol85Parser::StringDelimitedByPhraseContext::SIZE() {
  return getToken(Cobol85Parser::SIZE, 0);
}

Cobol85Parser::IdentifierContext* Cobol85Parser::StringDelimitedByPhraseContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

Cobol85Parser::LiteralContext* Cobol85Parser::StringDelimitedByPhraseContext::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}

tree::TerminalNode* Cobol85Parser::StringDelimitedByPhraseContext::BY() {
  return getToken(Cobol85Parser::BY, 0);
}


size_t Cobol85Parser::StringDelimitedByPhraseContext::getRuleIndex() const {
  return Cobol85Parser::RuleStringDelimitedByPhrase;
}

void Cobol85Parser::StringDelimitedByPhraseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStringDelimitedByPhrase(this);
}

void Cobol85Parser::StringDelimitedByPhraseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStringDelimitedByPhrase(this);
}

Cobol85Parser::StringDelimitedByPhraseContext* Cobol85Parser::stringDelimitedByPhrase() {
  StringDelimitedByPhraseContext *_localctx = _tracker.createInstance<StringDelimitedByPhraseContext>(_ctx, getState());
  enterRule(_localctx, 938, Cobol85Parser::RuleStringDelimitedByPhrase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5357);
    match(Cobol85Parser::DELIMITED);
    setState(5359);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::BY) {
      setState(5358);
      match(Cobol85Parser::BY);
    }
    setState(5364);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 821, _ctx)) {
    case 1: {
      setState(5361);
      match(Cobol85Parser::SIZE);
      break;
    }

    case 2: {
      setState(5362);
      identifier();
      break;
    }

    case 3: {
      setState(5363);
      literal();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StringForPhraseContext ------------------------------------------------------------------

Cobol85Parser::StringForPhraseContext::StringForPhraseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::StringForPhraseContext::FOR() {
  return getToken(Cobol85Parser::FOR, 0);
}

Cobol85Parser::IdentifierContext* Cobol85Parser::StringForPhraseContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

Cobol85Parser::LiteralContext* Cobol85Parser::StringForPhraseContext::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}


size_t Cobol85Parser::StringForPhraseContext::getRuleIndex() const {
  return Cobol85Parser::RuleStringForPhrase;
}

void Cobol85Parser::StringForPhraseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStringForPhrase(this);
}

void Cobol85Parser::StringForPhraseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStringForPhrase(this);
}

Cobol85Parser::StringForPhraseContext* Cobol85Parser::stringForPhrase() {
  StringForPhraseContext *_localctx = _tracker.createInstance<StringForPhraseContext>(_ctx, getState());
  enterRule(_localctx, 940, Cobol85Parser::RuleStringForPhrase);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5366);
    match(Cobol85Parser::FOR);
    setState(5369);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 822, _ctx)) {
    case 1: {
      setState(5367);
      identifier();
      break;
    }

    case 2: {
      setState(5368);
      literal();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StringIntoPhraseContext ------------------------------------------------------------------

Cobol85Parser::StringIntoPhraseContext::StringIntoPhraseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::StringIntoPhraseContext::INTO() {
  return getToken(Cobol85Parser::INTO, 0);
}

Cobol85Parser::IdentifierContext* Cobol85Parser::StringIntoPhraseContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}


size_t Cobol85Parser::StringIntoPhraseContext::getRuleIndex() const {
  return Cobol85Parser::RuleStringIntoPhrase;
}

void Cobol85Parser::StringIntoPhraseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStringIntoPhrase(this);
}

void Cobol85Parser::StringIntoPhraseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStringIntoPhrase(this);
}

Cobol85Parser::StringIntoPhraseContext* Cobol85Parser::stringIntoPhrase() {
  StringIntoPhraseContext *_localctx = _tracker.createInstance<StringIntoPhraseContext>(_ctx, getState());
  enterRule(_localctx, 942, Cobol85Parser::RuleStringIntoPhrase);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5371);
    match(Cobol85Parser::INTO);
    setState(5372);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StringWithPointerPhraseContext ------------------------------------------------------------------

Cobol85Parser::StringWithPointerPhraseContext::StringWithPointerPhraseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::StringWithPointerPhraseContext::POINTER() {
  return getToken(Cobol85Parser::POINTER, 0);
}

Cobol85Parser::QualifiedDataNameContext* Cobol85Parser::StringWithPointerPhraseContext::qualifiedDataName() {
  return getRuleContext<Cobol85Parser::QualifiedDataNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::StringWithPointerPhraseContext::WITH() {
  return getToken(Cobol85Parser::WITH, 0);
}


size_t Cobol85Parser::StringWithPointerPhraseContext::getRuleIndex() const {
  return Cobol85Parser::RuleStringWithPointerPhrase;
}

void Cobol85Parser::StringWithPointerPhraseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStringWithPointerPhrase(this);
}

void Cobol85Parser::StringWithPointerPhraseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStringWithPointerPhrase(this);
}

Cobol85Parser::StringWithPointerPhraseContext* Cobol85Parser::stringWithPointerPhrase() {
  StringWithPointerPhraseContext *_localctx = _tracker.createInstance<StringWithPointerPhraseContext>(_ctx, getState());
  enterRule(_localctx, 944, Cobol85Parser::RuleStringWithPointerPhrase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5375);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::WITH) {
      setState(5374);
      match(Cobol85Parser::WITH);
    }
    setState(5377);
    match(Cobol85Parser::POINTER);
    setState(5378);
    qualifiedDataName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubtractStatementContext ------------------------------------------------------------------

Cobol85Parser::SubtractStatementContext::SubtractStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::SubtractStatementContext::SUBTRACT() {
  return getToken(Cobol85Parser::SUBTRACT, 0);
}

Cobol85Parser::SubtractFromStatementContext* Cobol85Parser::SubtractStatementContext::subtractFromStatement() {
  return getRuleContext<Cobol85Parser::SubtractFromStatementContext>(0);
}

Cobol85Parser::SubtractFromGivingStatementContext* Cobol85Parser::SubtractStatementContext::subtractFromGivingStatement() {
  return getRuleContext<Cobol85Parser::SubtractFromGivingStatementContext>(0);
}

Cobol85Parser::SubtractCorrespondingStatementContext* Cobol85Parser::SubtractStatementContext::subtractCorrespondingStatement() {
  return getRuleContext<Cobol85Parser::SubtractCorrespondingStatementContext>(0);
}

Cobol85Parser::OnSizeErrorPhraseContext* Cobol85Parser::SubtractStatementContext::onSizeErrorPhrase() {
  return getRuleContext<Cobol85Parser::OnSizeErrorPhraseContext>(0);
}

Cobol85Parser::NotOnSizeErrorPhraseContext* Cobol85Parser::SubtractStatementContext::notOnSizeErrorPhrase() {
  return getRuleContext<Cobol85Parser::NotOnSizeErrorPhraseContext>(0);
}

tree::TerminalNode* Cobol85Parser::SubtractStatementContext::END_SUBTRACT() {
  return getToken(Cobol85Parser::END_SUBTRACT, 0);
}


size_t Cobol85Parser::SubtractStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleSubtractStatement;
}

void Cobol85Parser::SubtractStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubtractStatement(this);
}

void Cobol85Parser::SubtractStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubtractStatement(this);
}

Cobol85Parser::SubtractStatementContext* Cobol85Parser::subtractStatement() {
  SubtractStatementContext *_localctx = _tracker.createInstance<SubtractStatementContext>(_ctx, getState());
  enterRule(_localctx, 946, Cobol85Parser::RuleSubtractStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5380);
    match(Cobol85Parser::SUBTRACT);
    setState(5384);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 824, _ctx)) {
    case 1: {
      setState(5381);
      subtractFromStatement();
      break;
    }

    case 2: {
      setState(5382);
      subtractFromGivingStatement();
      break;
    }

    case 3: {
      setState(5383);
      subtractCorrespondingStatement();
      break;
    }

    default:
      break;
    }
    setState(5387);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 825, _ctx)) {
    case 1: {
      setState(5386);
      onSizeErrorPhrase();
      break;
    }

    default:
      break;
    }
    setState(5390);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 826, _ctx)) {
    case 1: {
      setState(5389);
      notOnSizeErrorPhrase();
      break;
    }

    default:
      break;
    }
    setState(5393);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 827, _ctx)) {
    case 1: {
      setState(5392);
      match(Cobol85Parser::END_SUBTRACT);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubtractFromStatementContext ------------------------------------------------------------------

Cobol85Parser::SubtractFromStatementContext::SubtractFromStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::SubtractFromStatementContext::FROM() {
  return getToken(Cobol85Parser::FROM, 0);
}

std::vector<Cobol85Parser::SubtractSubtrahendContext *> Cobol85Parser::SubtractFromStatementContext::subtractSubtrahend() {
  return getRuleContexts<Cobol85Parser::SubtractSubtrahendContext>();
}

Cobol85Parser::SubtractSubtrahendContext* Cobol85Parser::SubtractFromStatementContext::subtractSubtrahend(size_t i) {
  return getRuleContext<Cobol85Parser::SubtractSubtrahendContext>(i);
}

std::vector<Cobol85Parser::SubtractMinuendContext *> Cobol85Parser::SubtractFromStatementContext::subtractMinuend() {
  return getRuleContexts<Cobol85Parser::SubtractMinuendContext>();
}

Cobol85Parser::SubtractMinuendContext* Cobol85Parser::SubtractFromStatementContext::subtractMinuend(size_t i) {
  return getRuleContext<Cobol85Parser::SubtractMinuendContext>(i);
}


size_t Cobol85Parser::SubtractFromStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleSubtractFromStatement;
}

void Cobol85Parser::SubtractFromStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubtractFromStatement(this);
}

void Cobol85Parser::SubtractFromStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubtractFromStatement(this);
}

Cobol85Parser::SubtractFromStatementContext* Cobol85Parser::subtractFromStatement() {
  SubtractFromStatementContext *_localctx = _tracker.createInstance<SubtractFromStatementContext>(_ctx, getState());
  enterRule(_localctx, 948, Cobol85Parser::RuleSubtractFromStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5396); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(5395);
      subtractSubtrahend();
      setState(5398); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3512999431135822370) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 8213661102500741635) != 0) || ((((_la - 138) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 138)) & 5276573893883339531) != 0) || ((((_la - 202) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 202)) & -3098194964618422267) != 0) || ((((_la - 268) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 268)) & -9202427199037528969) != 0) || ((((_la - 336) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 336)) & 4647874440372879459) != 0) || ((((_la - 401) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 401)) & 1819828109721609) != 0) || ((((_la - 466) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 466)) & 572150674022301857) != 0) || ((((_la - 551) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 551)) & 127) != 0));
    setState(5400);
    match(Cobol85Parser::FROM);
    setState(5402); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(5401);
      subtractMinuend();
      setState(5404); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3512999431135821858) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 8213661102500741635) != 0) || ((((_la - 138) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 138)) & 5276573893883339531) != 0) || ((((_la - 202) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 202)) & -3098194965423728639) != 0) || ((((_la - 268) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 268)) & -9202532752178961289) != 0) || ((((_la - 336) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 336)) & 4647874433930428515) != 0) || ((((_la - 401) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 401)) & 130978249457673) != 0) || ((((_la - 466) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 466)) & 103776312507334817) != 0) || ((((_la - 552) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 552)) & 47) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubtractFromGivingStatementContext ------------------------------------------------------------------

Cobol85Parser::SubtractFromGivingStatementContext::SubtractFromGivingStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::SubtractFromGivingStatementContext::FROM() {
  return getToken(Cobol85Parser::FROM, 0);
}

Cobol85Parser::SubtractMinuendGivingContext* Cobol85Parser::SubtractFromGivingStatementContext::subtractMinuendGiving() {
  return getRuleContext<Cobol85Parser::SubtractMinuendGivingContext>(0);
}

tree::TerminalNode* Cobol85Parser::SubtractFromGivingStatementContext::GIVING() {
  return getToken(Cobol85Parser::GIVING, 0);
}

std::vector<Cobol85Parser::SubtractSubtrahendContext *> Cobol85Parser::SubtractFromGivingStatementContext::subtractSubtrahend() {
  return getRuleContexts<Cobol85Parser::SubtractSubtrahendContext>();
}

Cobol85Parser::SubtractSubtrahendContext* Cobol85Parser::SubtractFromGivingStatementContext::subtractSubtrahend(size_t i) {
  return getRuleContext<Cobol85Parser::SubtractSubtrahendContext>(i);
}

std::vector<Cobol85Parser::SubtractGivingContext *> Cobol85Parser::SubtractFromGivingStatementContext::subtractGiving() {
  return getRuleContexts<Cobol85Parser::SubtractGivingContext>();
}

Cobol85Parser::SubtractGivingContext* Cobol85Parser::SubtractFromGivingStatementContext::subtractGiving(size_t i) {
  return getRuleContext<Cobol85Parser::SubtractGivingContext>(i);
}


size_t Cobol85Parser::SubtractFromGivingStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleSubtractFromGivingStatement;
}

void Cobol85Parser::SubtractFromGivingStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubtractFromGivingStatement(this);
}

void Cobol85Parser::SubtractFromGivingStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubtractFromGivingStatement(this);
}

Cobol85Parser::SubtractFromGivingStatementContext* Cobol85Parser::subtractFromGivingStatement() {
  SubtractFromGivingStatementContext *_localctx = _tracker.createInstance<SubtractFromGivingStatementContext>(_ctx, getState());
  enterRule(_localctx, 950, Cobol85Parser::RuleSubtractFromGivingStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5407); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(5406);
      subtractSubtrahend();
      setState(5409); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3512999431135822370) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 8213661102500741635) != 0) || ((((_la - 138) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 138)) & 5276573893883339531) != 0) || ((((_la - 202) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 202)) & -3098194964618422267) != 0) || ((((_la - 268) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 268)) & -9202427199037528969) != 0) || ((((_la - 336) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 336)) & 4647874440372879459) != 0) || ((((_la - 401) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 401)) & 1819828109721609) != 0) || ((((_la - 466) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 466)) & 572150674022301857) != 0) || ((((_la - 551) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 551)) & 127) != 0));
    setState(5411);
    match(Cobol85Parser::FROM);
    setState(5412);
    subtractMinuendGiving();
    setState(5413);
    match(Cobol85Parser::GIVING);
    setState(5415); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(5414);
      subtractGiving();
      setState(5417); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3512999431135821858) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 8213661102500741635) != 0) || ((((_la - 138) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 138)) & 5276573893883339531) != 0) || ((((_la - 202) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 202)) & -3098194965423728639) != 0) || ((((_la - 268) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 268)) & -9202532752178961289) != 0) || ((((_la - 336) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 336)) & 4647874433930428515) != 0) || ((((_la - 401) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 401)) & 130978249457673) != 0) || ((((_la - 466) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 466)) & 103776312507334817) != 0) || ((((_la - 552) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 552)) & 47) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubtractCorrespondingStatementContext ------------------------------------------------------------------

Cobol85Parser::SubtractCorrespondingStatementContext::SubtractCorrespondingStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::QualifiedDataNameContext* Cobol85Parser::SubtractCorrespondingStatementContext::qualifiedDataName() {
  return getRuleContext<Cobol85Parser::QualifiedDataNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::SubtractCorrespondingStatementContext::FROM() {
  return getToken(Cobol85Parser::FROM, 0);
}

Cobol85Parser::SubtractMinuendCorrespondingContext* Cobol85Parser::SubtractCorrespondingStatementContext::subtractMinuendCorresponding() {
  return getRuleContext<Cobol85Parser::SubtractMinuendCorrespondingContext>(0);
}

tree::TerminalNode* Cobol85Parser::SubtractCorrespondingStatementContext::CORRESPONDING() {
  return getToken(Cobol85Parser::CORRESPONDING, 0);
}

tree::TerminalNode* Cobol85Parser::SubtractCorrespondingStatementContext::CORR() {
  return getToken(Cobol85Parser::CORR, 0);
}


size_t Cobol85Parser::SubtractCorrespondingStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleSubtractCorrespondingStatement;
}

void Cobol85Parser::SubtractCorrespondingStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubtractCorrespondingStatement(this);
}

void Cobol85Parser::SubtractCorrespondingStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubtractCorrespondingStatement(this);
}

Cobol85Parser::SubtractCorrespondingStatementContext* Cobol85Parser::subtractCorrespondingStatement() {
  SubtractCorrespondingStatementContext *_localctx = _tracker.createInstance<SubtractCorrespondingStatementContext>(_ctx, getState());
  enterRule(_localctx, 952, Cobol85Parser::RuleSubtractCorrespondingStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5419);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::CORR

    || _la == Cobol85Parser::CORRESPONDING)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(5420);
    qualifiedDataName();
    setState(5421);
    match(Cobol85Parser::FROM);
    setState(5422);
    subtractMinuendCorresponding();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubtractSubtrahendContext ------------------------------------------------------------------

Cobol85Parser::SubtractSubtrahendContext::SubtractSubtrahendContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::IdentifierContext* Cobol85Parser::SubtractSubtrahendContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

Cobol85Parser::LiteralContext* Cobol85Parser::SubtractSubtrahendContext::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}


size_t Cobol85Parser::SubtractSubtrahendContext::getRuleIndex() const {
  return Cobol85Parser::RuleSubtractSubtrahend;
}

void Cobol85Parser::SubtractSubtrahendContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubtractSubtrahend(this);
}

void Cobol85Parser::SubtractSubtrahendContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubtractSubtrahend(this);
}

Cobol85Parser::SubtractSubtrahendContext* Cobol85Parser::subtractSubtrahend() {
  SubtractSubtrahendContext *_localctx = _tracker.createInstance<SubtractSubtrahendContext>(_ctx, getState());
  enterRule(_localctx, 954, Cobol85Parser::RuleSubtractSubtrahend);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(5426);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 832, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(5424);
      identifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(5425);
      literal();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubtractMinuendContext ------------------------------------------------------------------

Cobol85Parser::SubtractMinuendContext::SubtractMinuendContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::IdentifierContext* Cobol85Parser::SubtractMinuendContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

tree::TerminalNode* Cobol85Parser::SubtractMinuendContext::ROUNDED() {
  return getToken(Cobol85Parser::ROUNDED, 0);
}


size_t Cobol85Parser::SubtractMinuendContext::getRuleIndex() const {
  return Cobol85Parser::RuleSubtractMinuend;
}

void Cobol85Parser::SubtractMinuendContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubtractMinuend(this);
}

void Cobol85Parser::SubtractMinuendContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubtractMinuend(this);
}

Cobol85Parser::SubtractMinuendContext* Cobol85Parser::subtractMinuend() {
  SubtractMinuendContext *_localctx = _tracker.createInstance<SubtractMinuendContext>(_ctx, getState());
  enterRule(_localctx, 956, Cobol85Parser::RuleSubtractMinuend);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5428);
    identifier();
    setState(5430);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::ROUNDED) {
      setState(5429);
      match(Cobol85Parser::ROUNDED);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubtractMinuendGivingContext ------------------------------------------------------------------

Cobol85Parser::SubtractMinuendGivingContext::SubtractMinuendGivingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::IdentifierContext* Cobol85Parser::SubtractMinuendGivingContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

Cobol85Parser::LiteralContext* Cobol85Parser::SubtractMinuendGivingContext::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}


size_t Cobol85Parser::SubtractMinuendGivingContext::getRuleIndex() const {
  return Cobol85Parser::RuleSubtractMinuendGiving;
}

void Cobol85Parser::SubtractMinuendGivingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubtractMinuendGiving(this);
}

void Cobol85Parser::SubtractMinuendGivingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubtractMinuendGiving(this);
}

Cobol85Parser::SubtractMinuendGivingContext* Cobol85Parser::subtractMinuendGiving() {
  SubtractMinuendGivingContext *_localctx = _tracker.createInstance<SubtractMinuendGivingContext>(_ctx, getState());
  enterRule(_localctx, 958, Cobol85Parser::RuleSubtractMinuendGiving);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(5434);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 834, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(5432);
      identifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(5433);
      literal();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubtractGivingContext ------------------------------------------------------------------

Cobol85Parser::SubtractGivingContext::SubtractGivingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::IdentifierContext* Cobol85Parser::SubtractGivingContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

tree::TerminalNode* Cobol85Parser::SubtractGivingContext::ROUNDED() {
  return getToken(Cobol85Parser::ROUNDED, 0);
}


size_t Cobol85Parser::SubtractGivingContext::getRuleIndex() const {
  return Cobol85Parser::RuleSubtractGiving;
}

void Cobol85Parser::SubtractGivingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubtractGiving(this);
}

void Cobol85Parser::SubtractGivingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubtractGiving(this);
}

Cobol85Parser::SubtractGivingContext* Cobol85Parser::subtractGiving() {
  SubtractGivingContext *_localctx = _tracker.createInstance<SubtractGivingContext>(_ctx, getState());
  enterRule(_localctx, 960, Cobol85Parser::RuleSubtractGiving);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5436);
    identifier();
    setState(5438);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::ROUNDED) {
      setState(5437);
      match(Cobol85Parser::ROUNDED);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubtractMinuendCorrespondingContext ------------------------------------------------------------------

Cobol85Parser::SubtractMinuendCorrespondingContext::SubtractMinuendCorrespondingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::QualifiedDataNameContext* Cobol85Parser::SubtractMinuendCorrespondingContext::qualifiedDataName() {
  return getRuleContext<Cobol85Parser::QualifiedDataNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::SubtractMinuendCorrespondingContext::ROUNDED() {
  return getToken(Cobol85Parser::ROUNDED, 0);
}


size_t Cobol85Parser::SubtractMinuendCorrespondingContext::getRuleIndex() const {
  return Cobol85Parser::RuleSubtractMinuendCorresponding;
}

void Cobol85Parser::SubtractMinuendCorrespondingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubtractMinuendCorresponding(this);
}

void Cobol85Parser::SubtractMinuendCorrespondingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubtractMinuendCorresponding(this);
}

Cobol85Parser::SubtractMinuendCorrespondingContext* Cobol85Parser::subtractMinuendCorresponding() {
  SubtractMinuendCorrespondingContext *_localctx = _tracker.createInstance<SubtractMinuendCorrespondingContext>(_ctx, getState());
  enterRule(_localctx, 962, Cobol85Parser::RuleSubtractMinuendCorresponding);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5440);
    qualifiedDataName();
    setState(5442);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::ROUNDED) {
      setState(5441);
      match(Cobol85Parser::ROUNDED);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TerminateStatementContext ------------------------------------------------------------------

Cobol85Parser::TerminateStatementContext::TerminateStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::TerminateStatementContext::TERMINATE() {
  return getToken(Cobol85Parser::TERMINATE, 0);
}

Cobol85Parser::ReportNameContext* Cobol85Parser::TerminateStatementContext::reportName() {
  return getRuleContext<Cobol85Parser::ReportNameContext>(0);
}


size_t Cobol85Parser::TerminateStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleTerminateStatement;
}

void Cobol85Parser::TerminateStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTerminateStatement(this);
}

void Cobol85Parser::TerminateStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTerminateStatement(this);
}

Cobol85Parser::TerminateStatementContext* Cobol85Parser::terminateStatement() {
  TerminateStatementContext *_localctx = _tracker.createInstance<TerminateStatementContext>(_ctx, getState());
  enterRule(_localctx, 964, Cobol85Parser::RuleTerminateStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5444);
    match(Cobol85Parser::TERMINATE);
    setState(5445);
    reportName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnstringStatementContext ------------------------------------------------------------------

Cobol85Parser::UnstringStatementContext::UnstringStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::UnstringStatementContext::UNSTRING() {
  return getToken(Cobol85Parser::UNSTRING, 0);
}

Cobol85Parser::UnstringSendingPhraseContext* Cobol85Parser::UnstringStatementContext::unstringSendingPhrase() {
  return getRuleContext<Cobol85Parser::UnstringSendingPhraseContext>(0);
}

Cobol85Parser::UnstringIntoPhraseContext* Cobol85Parser::UnstringStatementContext::unstringIntoPhrase() {
  return getRuleContext<Cobol85Parser::UnstringIntoPhraseContext>(0);
}

Cobol85Parser::UnstringWithPointerPhraseContext* Cobol85Parser::UnstringStatementContext::unstringWithPointerPhrase() {
  return getRuleContext<Cobol85Parser::UnstringWithPointerPhraseContext>(0);
}

Cobol85Parser::UnstringTallyingPhraseContext* Cobol85Parser::UnstringStatementContext::unstringTallyingPhrase() {
  return getRuleContext<Cobol85Parser::UnstringTallyingPhraseContext>(0);
}

Cobol85Parser::OnOverflowPhraseContext* Cobol85Parser::UnstringStatementContext::onOverflowPhrase() {
  return getRuleContext<Cobol85Parser::OnOverflowPhraseContext>(0);
}

Cobol85Parser::NotOnOverflowPhraseContext* Cobol85Parser::UnstringStatementContext::notOnOverflowPhrase() {
  return getRuleContext<Cobol85Parser::NotOnOverflowPhraseContext>(0);
}

tree::TerminalNode* Cobol85Parser::UnstringStatementContext::END_UNSTRING() {
  return getToken(Cobol85Parser::END_UNSTRING, 0);
}


size_t Cobol85Parser::UnstringStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleUnstringStatement;
}

void Cobol85Parser::UnstringStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnstringStatement(this);
}

void Cobol85Parser::UnstringStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnstringStatement(this);
}

Cobol85Parser::UnstringStatementContext* Cobol85Parser::unstringStatement() {
  UnstringStatementContext *_localctx = _tracker.createInstance<UnstringStatementContext>(_ctx, getState());
  enterRule(_localctx, 966, Cobol85Parser::RuleUnstringStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5447);
    match(Cobol85Parser::UNSTRING);
    setState(5448);
    unstringSendingPhrase();
    setState(5449);
    unstringIntoPhrase();
    setState(5451);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 837, _ctx)) {
    case 1: {
      setState(5450);
      unstringWithPointerPhrase();
      break;
    }

    default:
      break;
    }
    setState(5454);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::TALLYING) {
      setState(5453);
      unstringTallyingPhrase();
    }
    setState(5457);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 839, _ctx)) {
    case 1: {
      setState(5456);
      onOverflowPhrase();
      break;
    }

    default:
      break;
    }
    setState(5460);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 840, _ctx)) {
    case 1: {
      setState(5459);
      notOnOverflowPhrase();
      break;
    }

    default:
      break;
    }
    setState(5463);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 841, _ctx)) {
    case 1: {
      setState(5462);
      match(Cobol85Parser::END_UNSTRING);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnstringSendingPhraseContext ------------------------------------------------------------------

Cobol85Parser::UnstringSendingPhraseContext::UnstringSendingPhraseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::IdentifierContext* Cobol85Parser::UnstringSendingPhraseContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

Cobol85Parser::UnstringDelimitedByPhraseContext* Cobol85Parser::UnstringSendingPhraseContext::unstringDelimitedByPhrase() {
  return getRuleContext<Cobol85Parser::UnstringDelimitedByPhraseContext>(0);
}

std::vector<Cobol85Parser::UnstringOrAllPhraseContext *> Cobol85Parser::UnstringSendingPhraseContext::unstringOrAllPhrase() {
  return getRuleContexts<Cobol85Parser::UnstringOrAllPhraseContext>();
}

Cobol85Parser::UnstringOrAllPhraseContext* Cobol85Parser::UnstringSendingPhraseContext::unstringOrAllPhrase(size_t i) {
  return getRuleContext<Cobol85Parser::UnstringOrAllPhraseContext>(i);
}


size_t Cobol85Parser::UnstringSendingPhraseContext::getRuleIndex() const {
  return Cobol85Parser::RuleUnstringSendingPhrase;
}

void Cobol85Parser::UnstringSendingPhraseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnstringSendingPhrase(this);
}

void Cobol85Parser::UnstringSendingPhraseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnstringSendingPhrase(this);
}

Cobol85Parser::UnstringSendingPhraseContext* Cobol85Parser::unstringSendingPhrase() {
  UnstringSendingPhraseContext *_localctx = _tracker.createInstance<UnstringSendingPhraseContext>(_ctx, getState());
  enterRule(_localctx, 968, Cobol85Parser::RuleUnstringSendingPhrase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5465);
    identifier();
    setState(5473);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::DELIMITED) {
      setState(5466);
      unstringDelimitedByPhrase();
      setState(5470);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == Cobol85Parser::OR) {
        setState(5467);
        unstringOrAllPhrase();
        setState(5472);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnstringDelimitedByPhraseContext ------------------------------------------------------------------

Cobol85Parser::UnstringDelimitedByPhraseContext::UnstringDelimitedByPhraseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::UnstringDelimitedByPhraseContext::DELIMITED() {
  return getToken(Cobol85Parser::DELIMITED, 0);
}

Cobol85Parser::IdentifierContext* Cobol85Parser::UnstringDelimitedByPhraseContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

Cobol85Parser::LiteralContext* Cobol85Parser::UnstringDelimitedByPhraseContext::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}

tree::TerminalNode* Cobol85Parser::UnstringDelimitedByPhraseContext::BY() {
  return getToken(Cobol85Parser::BY, 0);
}

tree::TerminalNode* Cobol85Parser::UnstringDelimitedByPhraseContext::ALL() {
  return getToken(Cobol85Parser::ALL, 0);
}


size_t Cobol85Parser::UnstringDelimitedByPhraseContext::getRuleIndex() const {
  return Cobol85Parser::RuleUnstringDelimitedByPhrase;
}

void Cobol85Parser::UnstringDelimitedByPhraseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnstringDelimitedByPhrase(this);
}

void Cobol85Parser::UnstringDelimitedByPhraseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnstringDelimitedByPhrase(this);
}

Cobol85Parser::UnstringDelimitedByPhraseContext* Cobol85Parser::unstringDelimitedByPhrase() {
  UnstringDelimitedByPhraseContext *_localctx = _tracker.createInstance<UnstringDelimitedByPhraseContext>(_ctx, getState());
  enterRule(_localctx, 970, Cobol85Parser::RuleUnstringDelimitedByPhrase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5475);
    match(Cobol85Parser::DELIMITED);
    setState(5477);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::BY) {
      setState(5476);
      match(Cobol85Parser::BY);
    }
    setState(5480);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 845, _ctx)) {
    case 1: {
      setState(5479);
      match(Cobol85Parser::ALL);
      break;
    }

    default:
      break;
    }
    setState(5484);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 846, _ctx)) {
    case 1: {
      setState(5482);
      identifier();
      break;
    }

    case 2: {
      setState(5483);
      literal();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnstringOrAllPhraseContext ------------------------------------------------------------------

Cobol85Parser::UnstringOrAllPhraseContext::UnstringOrAllPhraseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::UnstringOrAllPhraseContext::OR() {
  return getToken(Cobol85Parser::OR, 0);
}

Cobol85Parser::IdentifierContext* Cobol85Parser::UnstringOrAllPhraseContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

Cobol85Parser::LiteralContext* Cobol85Parser::UnstringOrAllPhraseContext::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}

tree::TerminalNode* Cobol85Parser::UnstringOrAllPhraseContext::ALL() {
  return getToken(Cobol85Parser::ALL, 0);
}


size_t Cobol85Parser::UnstringOrAllPhraseContext::getRuleIndex() const {
  return Cobol85Parser::RuleUnstringOrAllPhrase;
}

void Cobol85Parser::UnstringOrAllPhraseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnstringOrAllPhrase(this);
}

void Cobol85Parser::UnstringOrAllPhraseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnstringOrAllPhrase(this);
}

Cobol85Parser::UnstringOrAllPhraseContext* Cobol85Parser::unstringOrAllPhrase() {
  UnstringOrAllPhraseContext *_localctx = _tracker.createInstance<UnstringOrAllPhraseContext>(_ctx, getState());
  enterRule(_localctx, 972, Cobol85Parser::RuleUnstringOrAllPhrase);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5486);
    match(Cobol85Parser::OR);
    setState(5488);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 847, _ctx)) {
    case 1: {
      setState(5487);
      match(Cobol85Parser::ALL);
      break;
    }

    default:
      break;
    }
    setState(5492);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 848, _ctx)) {
    case 1: {
      setState(5490);
      identifier();
      break;
    }

    case 2: {
      setState(5491);
      literal();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnstringIntoPhraseContext ------------------------------------------------------------------

Cobol85Parser::UnstringIntoPhraseContext::UnstringIntoPhraseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::UnstringIntoPhraseContext::INTO() {
  return getToken(Cobol85Parser::INTO, 0);
}

std::vector<Cobol85Parser::UnstringIntoContext *> Cobol85Parser::UnstringIntoPhraseContext::unstringInto() {
  return getRuleContexts<Cobol85Parser::UnstringIntoContext>();
}

Cobol85Parser::UnstringIntoContext* Cobol85Parser::UnstringIntoPhraseContext::unstringInto(size_t i) {
  return getRuleContext<Cobol85Parser::UnstringIntoContext>(i);
}


size_t Cobol85Parser::UnstringIntoPhraseContext::getRuleIndex() const {
  return Cobol85Parser::RuleUnstringIntoPhrase;
}

void Cobol85Parser::UnstringIntoPhraseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnstringIntoPhrase(this);
}

void Cobol85Parser::UnstringIntoPhraseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnstringIntoPhrase(this);
}

Cobol85Parser::UnstringIntoPhraseContext* Cobol85Parser::unstringIntoPhrase() {
  UnstringIntoPhraseContext *_localctx = _tracker.createInstance<UnstringIntoPhraseContext>(_ctx, getState());
  enterRule(_localctx, 974, Cobol85Parser::RuleUnstringIntoPhrase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5494);
    match(Cobol85Parser::INTO);
    setState(5496); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(5495);
      unstringInto();
      setState(5498); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3512999431135821858) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 8213661102500741635) != 0) || ((((_la - 138) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 138)) & 5276573893883339531) != 0) || ((((_la - 202) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 202)) & -3098194965423728639) != 0) || ((((_la - 268) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 268)) & -9202532752178961289) != 0) || ((((_la - 336) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 336)) & 4647874433930428515) != 0) || ((((_la - 401) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 401)) & 130978249457673) != 0) || ((((_la - 466) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 466)) & 103776312507334817) != 0) || ((((_la - 552) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 552)) & 47) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnstringIntoContext ------------------------------------------------------------------

Cobol85Parser::UnstringIntoContext::UnstringIntoContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::IdentifierContext* Cobol85Parser::UnstringIntoContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

Cobol85Parser::UnstringDelimiterInContext* Cobol85Parser::UnstringIntoContext::unstringDelimiterIn() {
  return getRuleContext<Cobol85Parser::UnstringDelimiterInContext>(0);
}

Cobol85Parser::UnstringCountInContext* Cobol85Parser::UnstringIntoContext::unstringCountIn() {
  return getRuleContext<Cobol85Parser::UnstringCountInContext>(0);
}


size_t Cobol85Parser::UnstringIntoContext::getRuleIndex() const {
  return Cobol85Parser::RuleUnstringInto;
}

void Cobol85Parser::UnstringIntoContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnstringInto(this);
}

void Cobol85Parser::UnstringIntoContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnstringInto(this);
}

Cobol85Parser::UnstringIntoContext* Cobol85Parser::unstringInto() {
  UnstringIntoContext *_localctx = _tracker.createInstance<UnstringIntoContext>(_ctx, getState());
  enterRule(_localctx, 976, Cobol85Parser::RuleUnstringInto);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5500);
    identifier();
    setState(5502);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::DELIMITER) {
      setState(5501);
      unstringDelimiterIn();
    }
    setState(5505);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::COUNT) {
      setState(5504);
      unstringCountIn();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnstringDelimiterInContext ------------------------------------------------------------------

Cobol85Parser::UnstringDelimiterInContext::UnstringDelimiterInContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::UnstringDelimiterInContext::DELIMITER() {
  return getToken(Cobol85Parser::DELIMITER, 0);
}

Cobol85Parser::IdentifierContext* Cobol85Parser::UnstringDelimiterInContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

tree::TerminalNode* Cobol85Parser::UnstringDelimiterInContext::IN() {
  return getToken(Cobol85Parser::IN, 0);
}


size_t Cobol85Parser::UnstringDelimiterInContext::getRuleIndex() const {
  return Cobol85Parser::RuleUnstringDelimiterIn;
}

void Cobol85Parser::UnstringDelimiterInContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnstringDelimiterIn(this);
}

void Cobol85Parser::UnstringDelimiterInContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnstringDelimiterIn(this);
}

Cobol85Parser::UnstringDelimiterInContext* Cobol85Parser::unstringDelimiterIn() {
  UnstringDelimiterInContext *_localctx = _tracker.createInstance<UnstringDelimiterInContext>(_ctx, getState());
  enterRule(_localctx, 978, Cobol85Parser::RuleUnstringDelimiterIn);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5507);
    match(Cobol85Parser::DELIMITER);
    setState(5509);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IN) {
      setState(5508);
      match(Cobol85Parser::IN);
    }
    setState(5511);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnstringCountInContext ------------------------------------------------------------------

Cobol85Parser::UnstringCountInContext::UnstringCountInContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::UnstringCountInContext::COUNT() {
  return getToken(Cobol85Parser::COUNT, 0);
}

Cobol85Parser::IdentifierContext* Cobol85Parser::UnstringCountInContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

tree::TerminalNode* Cobol85Parser::UnstringCountInContext::IN() {
  return getToken(Cobol85Parser::IN, 0);
}


size_t Cobol85Parser::UnstringCountInContext::getRuleIndex() const {
  return Cobol85Parser::RuleUnstringCountIn;
}

void Cobol85Parser::UnstringCountInContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnstringCountIn(this);
}

void Cobol85Parser::UnstringCountInContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnstringCountIn(this);
}

Cobol85Parser::UnstringCountInContext* Cobol85Parser::unstringCountIn() {
  UnstringCountInContext *_localctx = _tracker.createInstance<UnstringCountInContext>(_ctx, getState());
  enterRule(_localctx, 980, Cobol85Parser::RuleUnstringCountIn);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5513);
    match(Cobol85Parser::COUNT);
    setState(5515);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IN) {
      setState(5514);
      match(Cobol85Parser::IN);
    }
    setState(5517);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnstringWithPointerPhraseContext ------------------------------------------------------------------

Cobol85Parser::UnstringWithPointerPhraseContext::UnstringWithPointerPhraseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::UnstringWithPointerPhraseContext::POINTER() {
  return getToken(Cobol85Parser::POINTER, 0);
}

Cobol85Parser::QualifiedDataNameContext* Cobol85Parser::UnstringWithPointerPhraseContext::qualifiedDataName() {
  return getRuleContext<Cobol85Parser::QualifiedDataNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::UnstringWithPointerPhraseContext::WITH() {
  return getToken(Cobol85Parser::WITH, 0);
}


size_t Cobol85Parser::UnstringWithPointerPhraseContext::getRuleIndex() const {
  return Cobol85Parser::RuleUnstringWithPointerPhrase;
}

void Cobol85Parser::UnstringWithPointerPhraseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnstringWithPointerPhrase(this);
}

void Cobol85Parser::UnstringWithPointerPhraseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnstringWithPointerPhrase(this);
}

Cobol85Parser::UnstringWithPointerPhraseContext* Cobol85Parser::unstringWithPointerPhrase() {
  UnstringWithPointerPhraseContext *_localctx = _tracker.createInstance<UnstringWithPointerPhraseContext>(_ctx, getState());
  enterRule(_localctx, 982, Cobol85Parser::RuleUnstringWithPointerPhrase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5520);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::WITH) {
      setState(5519);
      match(Cobol85Parser::WITH);
    }
    setState(5522);
    match(Cobol85Parser::POINTER);
    setState(5523);
    qualifiedDataName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnstringTallyingPhraseContext ------------------------------------------------------------------

Cobol85Parser::UnstringTallyingPhraseContext::UnstringTallyingPhraseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::UnstringTallyingPhraseContext::TALLYING() {
  return getToken(Cobol85Parser::TALLYING, 0);
}

Cobol85Parser::QualifiedDataNameContext* Cobol85Parser::UnstringTallyingPhraseContext::qualifiedDataName() {
  return getRuleContext<Cobol85Parser::QualifiedDataNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::UnstringTallyingPhraseContext::IN() {
  return getToken(Cobol85Parser::IN, 0);
}


size_t Cobol85Parser::UnstringTallyingPhraseContext::getRuleIndex() const {
  return Cobol85Parser::RuleUnstringTallyingPhrase;
}

void Cobol85Parser::UnstringTallyingPhraseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnstringTallyingPhrase(this);
}

void Cobol85Parser::UnstringTallyingPhraseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnstringTallyingPhrase(this);
}

Cobol85Parser::UnstringTallyingPhraseContext* Cobol85Parser::unstringTallyingPhrase() {
  UnstringTallyingPhraseContext *_localctx = _tracker.createInstance<UnstringTallyingPhraseContext>(_ctx, getState());
  enterRule(_localctx, 984, Cobol85Parser::RuleUnstringTallyingPhrase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5525);
    match(Cobol85Parser::TALLYING);
    setState(5527);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IN) {
      setState(5526);
      match(Cobol85Parser::IN);
    }
    setState(5529);
    qualifiedDataName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UseStatementContext ------------------------------------------------------------------

Cobol85Parser::UseStatementContext::UseStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::UseStatementContext::USE() {
  return getToken(Cobol85Parser::USE, 0);
}

Cobol85Parser::UseAfterClauseContext* Cobol85Parser::UseStatementContext::useAfterClause() {
  return getRuleContext<Cobol85Parser::UseAfterClauseContext>(0);
}

Cobol85Parser::UseDebugClauseContext* Cobol85Parser::UseStatementContext::useDebugClause() {
  return getRuleContext<Cobol85Parser::UseDebugClauseContext>(0);
}


size_t Cobol85Parser::UseStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleUseStatement;
}

void Cobol85Parser::UseStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUseStatement(this);
}

void Cobol85Parser::UseStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUseStatement(this);
}

Cobol85Parser::UseStatementContext* Cobol85Parser::useStatement() {
  UseStatementContext *_localctx = _tracker.createInstance<UseStatementContext>(_ctx, getState());
  enterRule(_localctx, 986, Cobol85Parser::RuleUseStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5531);
    match(Cobol85Parser::USE);
    setState(5534);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Cobol85Parser::AFTER:
      case Cobol85Parser::GLOBAL: {
        setState(5532);
        useAfterClause();
        break;
      }

      case Cobol85Parser::DEBUGGING:
      case Cobol85Parser::FOR: {
        setState(5533);
        useDebugClause();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UseAfterClauseContext ------------------------------------------------------------------

Cobol85Parser::UseAfterClauseContext::UseAfterClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::UseAfterClauseContext::AFTER() {
  return getToken(Cobol85Parser::AFTER, 0);
}

tree::TerminalNode* Cobol85Parser::UseAfterClauseContext::PROCEDURE() {
  return getToken(Cobol85Parser::PROCEDURE, 0);
}

Cobol85Parser::UseAfterOnContext* Cobol85Parser::UseAfterClauseContext::useAfterOn() {
  return getRuleContext<Cobol85Parser::UseAfterOnContext>(0);
}

tree::TerminalNode* Cobol85Parser::UseAfterClauseContext::EXCEPTION() {
  return getToken(Cobol85Parser::EXCEPTION, 0);
}

tree::TerminalNode* Cobol85Parser::UseAfterClauseContext::ERROR() {
  return getToken(Cobol85Parser::ERROR, 0);
}

tree::TerminalNode* Cobol85Parser::UseAfterClauseContext::GLOBAL() {
  return getToken(Cobol85Parser::GLOBAL, 0);
}

tree::TerminalNode* Cobol85Parser::UseAfterClauseContext::STANDARD() {
  return getToken(Cobol85Parser::STANDARD, 0);
}

tree::TerminalNode* Cobol85Parser::UseAfterClauseContext::ON() {
  return getToken(Cobol85Parser::ON, 0);
}


size_t Cobol85Parser::UseAfterClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleUseAfterClause;
}

void Cobol85Parser::UseAfterClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUseAfterClause(this);
}

void Cobol85Parser::UseAfterClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUseAfterClause(this);
}

Cobol85Parser::UseAfterClauseContext* Cobol85Parser::useAfterClause() {
  UseAfterClauseContext *_localctx = _tracker.createInstance<UseAfterClauseContext>(_ctx, getState());
  enterRule(_localctx, 988, Cobol85Parser::RuleUseAfterClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5537);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::GLOBAL) {
      setState(5536);
      match(Cobol85Parser::GLOBAL);
    }
    setState(5539);
    match(Cobol85Parser::AFTER);
    setState(5541);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::STANDARD) {
      setState(5540);
      match(Cobol85Parser::STANDARD);
    }
    setState(5543);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::ERROR

    || _la == Cobol85Parser::EXCEPTION)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(5544);
    match(Cobol85Parser::PROCEDURE);
    setState(5546);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::ON) {
      setState(5545);
      match(Cobol85Parser::ON);
    }
    setState(5548);
    useAfterOn();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UseAfterOnContext ------------------------------------------------------------------

Cobol85Parser::UseAfterOnContext::UseAfterOnContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::UseAfterOnContext::INPUT() {
  return getToken(Cobol85Parser::INPUT, 0);
}

tree::TerminalNode* Cobol85Parser::UseAfterOnContext::OUTPUT() {
  return getToken(Cobol85Parser::OUTPUT, 0);
}

tree::TerminalNode* Cobol85Parser::UseAfterOnContext::I_O() {
  return getToken(Cobol85Parser::I_O, 0);
}

tree::TerminalNode* Cobol85Parser::UseAfterOnContext::EXTEND() {
  return getToken(Cobol85Parser::EXTEND, 0);
}

std::vector<Cobol85Parser::FileNameContext *> Cobol85Parser::UseAfterOnContext::fileName() {
  return getRuleContexts<Cobol85Parser::FileNameContext>();
}

Cobol85Parser::FileNameContext* Cobol85Parser::UseAfterOnContext::fileName(size_t i) {
  return getRuleContext<Cobol85Parser::FileNameContext>(i);
}


size_t Cobol85Parser::UseAfterOnContext::getRuleIndex() const {
  return Cobol85Parser::RuleUseAfterOn;
}

void Cobol85Parser::UseAfterOnContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUseAfterOn(this);
}

void Cobol85Parser::UseAfterOnContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUseAfterOn(this);
}

Cobol85Parser::UseAfterOnContext* Cobol85Parser::useAfterOn() {
  UseAfterOnContext *_localctx = _tracker.createInstance<UseAfterOnContext>(_ctx, getState());
  enterRule(_localctx, 990, Cobol85Parser::RuleUseAfterOn);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(5559);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Cobol85Parser::INPUT: {
        enterOuterAlt(_localctx, 1);
        setState(5550);
        match(Cobol85Parser::INPUT);
        break;
      }

      case Cobol85Parser::OUTPUT: {
        enterOuterAlt(_localctx, 2);
        setState(5551);
        match(Cobol85Parser::OUTPUT);
        break;
      }

      case Cobol85Parser::I_O: {
        enterOuterAlt(_localctx, 3);
        setState(5552);
        match(Cobol85Parser::I_O);
        break;
      }

      case Cobol85Parser::EXTEND: {
        enterOuterAlt(_localctx, 4);
        setState(5553);
        match(Cobol85Parser::EXTEND);
        break;
      }

      case Cobol85Parser::ABORT:
      case Cobol85Parser::AS:
      case Cobol85Parser::ASCII:
      case Cobol85Parser::ASSOCIATED_DATA:
      case Cobol85Parser::ASSOCIATED_DATA_LENGTH:
      case Cobol85Parser::ATTRIBUTE:
      case Cobol85Parser::AUTO:
      case Cobol85Parser::AUTO_SKIP:
      case Cobol85Parser::BACKGROUND_COLOR:
      case Cobol85Parser::BACKGROUND_COLOUR:
      case Cobol85Parser::BEEP:
      case Cobol85Parser::BELL:
      case Cobol85Parser::BINARY:
      case Cobol85Parser::BIT:
      case Cobol85Parser::BLINK:
      case Cobol85Parser::BOUNDS:
      case Cobol85Parser::CAPABLE:
      case Cobol85Parser::CCSVERSION:
      case Cobol85Parser::CHANGED:
      case Cobol85Parser::CHANNEL:
      case Cobol85Parser::CLOSE_DISPOSITION:
      case Cobol85Parser::COBOL:
      case Cobol85Parser::COMMITMENT:
      case Cobol85Parser::CONTROL_POINT:
      case Cobol85Parser::CONVENTION:
      case Cobol85Parser::CRUNCH:
      case Cobol85Parser::CURSOR:
      case Cobol85Parser::DEFAULT:
      case Cobol85Parser::DEFAULT_DISPLAY:
      case Cobol85Parser::DEFINITION:
      case Cobol85Parser::DFHRESP:
      case Cobol85Parser::DFHVALUE:
      case Cobol85Parser::DISK:
      case Cobol85Parser::DONTCARE:
      case Cobol85Parser::DOUBLE:
      case Cobol85Parser::EBCDIC:
      case Cobol85Parser::EMPTY_CHECK:
      case Cobol85Parser::ENTER:
      case Cobol85Parser::ENTRY_PROCEDURE:
      case Cobol85Parser::ERASE:
      case Cobol85Parser::EOL:
      case Cobol85Parser::EOS:
      case Cobol85Parser::ESCAPE:
      case Cobol85Parser::EVENT:
      case Cobol85Parser::EXCLUSIVE:
      case Cobol85Parser::EXPORT:
      case Cobol85Parser::EXTENDED:
      case Cobol85Parser::FOREGROUND_COLOR:
      case Cobol85Parser::FOREGROUND_COLOUR:
      case Cobol85Parser::FULL:
      case Cobol85Parser::FUNCTIONNAME:
      case Cobol85Parser::FUNCTION_POINTER:
      case Cobol85Parser::GRID:
      case Cobol85Parser::HIGHLIGHT:
      case Cobol85Parser::IMPLICIT:
      case Cobol85Parser::IMPORT:
      case Cobol85Parser::INTEGER:
      case Cobol85Parser::KEPT:
      case Cobol85Parser::KEYBOARD:
      case Cobol85Parser::LANGUAGE:
      case Cobol85Parser::LB:
      case Cobol85Parser::LD:
      case Cobol85Parser::LEFTLINE:
      case Cobol85Parser::LENGTH_CHECK:
      case Cobol85Parser::LIBACCESS:
      case Cobol85Parser::LIBPARAMETER:
      case Cobol85Parser::LIBRARY:
      case Cobol85Parser::LIST:
      case Cobol85Parser::LOCAL:
      case Cobol85Parser::LONG_DATE:
      case Cobol85Parser::LONG_TIME:
      case Cobol85Parser::LOWER:
      case Cobol85Parser::LOWLIGHT:
      case Cobol85Parser::MMDDYYYY:
      case Cobol85Parser::NAMED:
      case Cobol85Parser::NATIONAL:
      case Cobol85Parser::NATIONAL_EDITED:
      case Cobol85Parser::NETWORK:
      case Cobol85Parser::NO_ECHO:
      case Cobol85Parser::NUMERIC_DATE:
      case Cobol85Parser::NUMERIC_TIME:
      case Cobol85Parser::ODT:
      case Cobol85Parser::ORDERLY:
      case Cobol85Parser::OVERLINE:
      case Cobol85Parser::OWN:
      case Cobol85Parser::PASSWORD:
      case Cobol85Parser::PORT:
      case Cobol85Parser::PRINTER:
      case Cobol85Parser::PRIVATE:
      case Cobol85Parser::PROCESS:
      case Cobol85Parser::PROGRAM:
      case Cobol85Parser::PROMPT:
      case Cobol85Parser::READER:
      case Cobol85Parser::REMOTE:
      case Cobol85Parser::REAL:
      case Cobol85Parser::RECEIVED:
      case Cobol85Parser::RECURSIVE:
      case Cobol85Parser::REF:
      case Cobol85Parser::REMOVE:
      case Cobol85Parser::REQUIRED:
      case Cobol85Parser::REVERSE_VIDEO:
      case Cobol85Parser::SAVE:
      case Cobol85Parser::SECURE:
      case Cobol85Parser::SHARED:
      case Cobol85Parser::SHAREDBYALL:
      case Cobol85Parser::SHAREDBYRUNUNIT:
      case Cobol85Parser::SHARING:
      case Cobol85Parser::SHORT_DATE:
      case Cobol85Parser::SYMBOL:
      case Cobol85Parser::TASK:
      case Cobol85Parser::THREAD:
      case Cobol85Parser::THREAD_LOCAL:
      case Cobol85Parser::TIMER:
      case Cobol85Parser::TODAYS_DATE:
      case Cobol85Parser::TODAYS_NAME:
      case Cobol85Parser::TRUNCATED:
      case Cobol85Parser::TYPEDEF:
      case Cobol85Parser::UNDERLINE:
      case Cobol85Parser::VIRTUAL:
      case Cobol85Parser::WAIT:
      case Cobol85Parser::YEAR:
      case Cobol85Parser::YYYYMMDD:
      case Cobol85Parser::YYYYDDD:
      case Cobol85Parser::ZERO_FILL:
      case Cobol85Parser::IDENTIFIER: {
        enterOuterAlt(_localctx, 5);
        setState(5555); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(5554);
          fileName();
          setState(5557); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 3512999431135821826) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 68)) & 8070451912006173187) != 0) || ((((_la - 138) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 138)) & 5276573893883339531) != 0) || ((((_la - 202) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 202)) & -3098194965423761407) != 0) || ((((_la - 268) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 268)) & -9202532752178970507) != 0) || ((((_la - 336) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 336)) & 4647874433930428483) != 0) || ((((_la - 401) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 401)) & 84826144769) != 0) || ((((_la - 466) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 466)) & 103635575018455169) != 0) || _la == Cobol85Parser::IDENTIFIER);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UseDebugClauseContext ------------------------------------------------------------------

Cobol85Parser::UseDebugClauseContext::UseDebugClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::UseDebugClauseContext::DEBUGGING() {
  return getToken(Cobol85Parser::DEBUGGING, 0);
}

tree::TerminalNode* Cobol85Parser::UseDebugClauseContext::FOR() {
  return getToken(Cobol85Parser::FOR, 0);
}

tree::TerminalNode* Cobol85Parser::UseDebugClauseContext::ON() {
  return getToken(Cobol85Parser::ON, 0);
}

std::vector<Cobol85Parser::UseDebugOnContext *> Cobol85Parser::UseDebugClauseContext::useDebugOn() {
  return getRuleContexts<Cobol85Parser::UseDebugOnContext>();
}

Cobol85Parser::UseDebugOnContext* Cobol85Parser::UseDebugClauseContext::useDebugOn(size_t i) {
  return getRuleContext<Cobol85Parser::UseDebugOnContext>(i);
}


size_t Cobol85Parser::UseDebugClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleUseDebugClause;
}

void Cobol85Parser::UseDebugClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUseDebugClause(this);
}

void Cobol85Parser::UseDebugClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUseDebugClause(this);
}

Cobol85Parser::UseDebugClauseContext* Cobol85Parser::useDebugClause() {
  UseDebugClauseContext *_localctx = _tracker.createInstance<UseDebugClauseContext>(_ctx, getState());
  enterRule(_localctx, 992, Cobol85Parser::RuleUseDebugClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5562);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::FOR) {
      setState(5561);
      match(Cobol85Parser::FOR);
    }
    setState(5564);
    match(Cobol85Parser::DEBUGGING);
    setState(5566);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::ON) {
      setState(5565);
      match(Cobol85Parser::ON);
    }
    setState(5569); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(5568);
      useDebugOn();
      setState(5571); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3512999431135822338) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 8070451912006173187) != 0) || ((((_la - 138) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 138)) & 5276573893883339531) != 0) || ((((_la - 202) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 202)) & -3098194965423761407) != 0) || ((((_la - 268) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 268)) & -9202532752178970507) != 0) || ((((_la - 336) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 336)) & 4647874433930428483) != 0) || ((((_la - 401) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 401)) & 84826144769) != 0) || ((((_la - 466) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 466)) & 103635575018455169) != 0) || ((((_la - 552) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 552)) & 47) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UseDebugOnContext ------------------------------------------------------------------

Cobol85Parser::UseDebugOnContext::UseDebugOnContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::UseDebugOnContext::ALL() {
  return getToken(Cobol85Parser::ALL, 0);
}

tree::TerminalNode* Cobol85Parser::UseDebugOnContext::PROCEDURES() {
  return getToken(Cobol85Parser::PROCEDURES, 0);
}

Cobol85Parser::IdentifierContext* Cobol85Parser::UseDebugOnContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

tree::TerminalNode* Cobol85Parser::UseDebugOnContext::REFERENCES() {
  return getToken(Cobol85Parser::REFERENCES, 0);
}

tree::TerminalNode* Cobol85Parser::UseDebugOnContext::OF() {
  return getToken(Cobol85Parser::OF, 0);
}

Cobol85Parser::ProcedureNameContext* Cobol85Parser::UseDebugOnContext::procedureName() {
  return getRuleContext<Cobol85Parser::ProcedureNameContext>(0);
}

Cobol85Parser::FileNameContext* Cobol85Parser::UseDebugOnContext::fileName() {
  return getRuleContext<Cobol85Parser::FileNameContext>(0);
}


size_t Cobol85Parser::UseDebugOnContext::getRuleIndex() const {
  return Cobol85Parser::RuleUseDebugOn;
}

void Cobol85Parser::UseDebugOnContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUseDebugOn(this);
}

void Cobol85Parser::UseDebugOnContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUseDebugOn(this);
}

Cobol85Parser::UseDebugOnContext* Cobol85Parser::useDebugOn() {
  UseDebugOnContext *_localctx = _tracker.createInstance<UseDebugOnContext>(_ctx, getState());
  enterRule(_localctx, 994, Cobol85Parser::RuleUseDebugOn);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(5585);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 867, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(5573);
      match(Cobol85Parser::ALL);
      setState(5574);
      match(Cobol85Parser::PROCEDURES);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(5575);
      match(Cobol85Parser::ALL);
      setState(5577);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Cobol85Parser::REFERENCES) {
        setState(5576);
        match(Cobol85Parser::REFERENCES);
      }
      setState(5580);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Cobol85Parser::OF) {
        setState(5579);
        match(Cobol85Parser::OF);
      }
      setState(5582);
      identifier();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(5583);
      procedureName();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(5584);
      fileName();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WriteStatementContext ------------------------------------------------------------------

Cobol85Parser::WriteStatementContext::WriteStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::WriteStatementContext::WRITE() {
  return getToken(Cobol85Parser::WRITE, 0);
}

Cobol85Parser::RecordNameContext* Cobol85Parser::WriteStatementContext::recordName() {
  return getRuleContext<Cobol85Parser::RecordNameContext>(0);
}

Cobol85Parser::WriteFromPhraseContext* Cobol85Parser::WriteStatementContext::writeFromPhrase() {
  return getRuleContext<Cobol85Parser::WriteFromPhraseContext>(0);
}

Cobol85Parser::WriteAdvancingPhraseContext* Cobol85Parser::WriteStatementContext::writeAdvancingPhrase() {
  return getRuleContext<Cobol85Parser::WriteAdvancingPhraseContext>(0);
}

Cobol85Parser::WriteAtEndOfPagePhraseContext* Cobol85Parser::WriteStatementContext::writeAtEndOfPagePhrase() {
  return getRuleContext<Cobol85Parser::WriteAtEndOfPagePhraseContext>(0);
}

Cobol85Parser::WriteNotAtEndOfPagePhraseContext* Cobol85Parser::WriteStatementContext::writeNotAtEndOfPagePhrase() {
  return getRuleContext<Cobol85Parser::WriteNotAtEndOfPagePhraseContext>(0);
}

Cobol85Parser::InvalidKeyPhraseContext* Cobol85Parser::WriteStatementContext::invalidKeyPhrase() {
  return getRuleContext<Cobol85Parser::InvalidKeyPhraseContext>(0);
}

Cobol85Parser::NotInvalidKeyPhraseContext* Cobol85Parser::WriteStatementContext::notInvalidKeyPhrase() {
  return getRuleContext<Cobol85Parser::NotInvalidKeyPhraseContext>(0);
}

tree::TerminalNode* Cobol85Parser::WriteStatementContext::END_WRITE() {
  return getToken(Cobol85Parser::END_WRITE, 0);
}


size_t Cobol85Parser::WriteStatementContext::getRuleIndex() const {
  return Cobol85Parser::RuleWriteStatement;
}

void Cobol85Parser::WriteStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWriteStatement(this);
}

void Cobol85Parser::WriteStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWriteStatement(this);
}

Cobol85Parser::WriteStatementContext* Cobol85Parser::writeStatement() {
  WriteStatementContext *_localctx = _tracker.createInstance<WriteStatementContext>(_ctx, getState());
  enterRule(_localctx, 996, Cobol85Parser::RuleWriteStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5587);
    match(Cobol85Parser::WRITE);
    setState(5588);
    recordName();
    setState(5590);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::FROM) {
      setState(5589);
      writeFromPhrase();
    }
    setState(5593);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::AFTER

    || _la == Cobol85Parser::BEFORE) {
      setState(5592);
      writeAdvancingPhrase();
    }
    setState(5596);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 870, _ctx)) {
    case 1: {
      setState(5595);
      writeAtEndOfPagePhrase();
      break;
    }

    default:
      break;
    }
    setState(5599);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 871, _ctx)) {
    case 1: {
      setState(5598);
      writeNotAtEndOfPagePhrase();
      break;
    }

    default:
      break;
    }
    setState(5602);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 872, _ctx)) {
    case 1: {
      setState(5601);
      invalidKeyPhrase();
      break;
    }

    default:
      break;
    }
    setState(5605);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 873, _ctx)) {
    case 1: {
      setState(5604);
      notInvalidKeyPhrase();
      break;
    }

    default:
      break;
    }
    setState(5608);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 874, _ctx)) {
    case 1: {
      setState(5607);
      match(Cobol85Parser::END_WRITE);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WriteFromPhraseContext ------------------------------------------------------------------

Cobol85Parser::WriteFromPhraseContext::WriteFromPhraseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::WriteFromPhraseContext::FROM() {
  return getToken(Cobol85Parser::FROM, 0);
}

Cobol85Parser::IdentifierContext* Cobol85Parser::WriteFromPhraseContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

Cobol85Parser::LiteralContext* Cobol85Parser::WriteFromPhraseContext::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}


size_t Cobol85Parser::WriteFromPhraseContext::getRuleIndex() const {
  return Cobol85Parser::RuleWriteFromPhrase;
}

void Cobol85Parser::WriteFromPhraseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWriteFromPhrase(this);
}

void Cobol85Parser::WriteFromPhraseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWriteFromPhrase(this);
}

Cobol85Parser::WriteFromPhraseContext* Cobol85Parser::writeFromPhrase() {
  WriteFromPhraseContext *_localctx = _tracker.createInstance<WriteFromPhraseContext>(_ctx, getState());
  enterRule(_localctx, 998, Cobol85Parser::RuleWriteFromPhrase);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5610);
    match(Cobol85Parser::FROM);
    setState(5613);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 875, _ctx)) {
    case 1: {
      setState(5611);
      identifier();
      break;
    }

    case 2: {
      setState(5612);
      literal();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WriteAdvancingPhraseContext ------------------------------------------------------------------

Cobol85Parser::WriteAdvancingPhraseContext::WriteAdvancingPhraseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::WriteAdvancingPhraseContext::BEFORE() {
  return getToken(Cobol85Parser::BEFORE, 0);
}

tree::TerminalNode* Cobol85Parser::WriteAdvancingPhraseContext::AFTER() {
  return getToken(Cobol85Parser::AFTER, 0);
}

Cobol85Parser::WriteAdvancingPageContext* Cobol85Parser::WriteAdvancingPhraseContext::writeAdvancingPage() {
  return getRuleContext<Cobol85Parser::WriteAdvancingPageContext>(0);
}

Cobol85Parser::WriteAdvancingLinesContext* Cobol85Parser::WriteAdvancingPhraseContext::writeAdvancingLines() {
  return getRuleContext<Cobol85Parser::WriteAdvancingLinesContext>(0);
}

Cobol85Parser::WriteAdvancingMnemonicContext* Cobol85Parser::WriteAdvancingPhraseContext::writeAdvancingMnemonic() {
  return getRuleContext<Cobol85Parser::WriteAdvancingMnemonicContext>(0);
}

tree::TerminalNode* Cobol85Parser::WriteAdvancingPhraseContext::ADVANCING() {
  return getToken(Cobol85Parser::ADVANCING, 0);
}


size_t Cobol85Parser::WriteAdvancingPhraseContext::getRuleIndex() const {
  return Cobol85Parser::RuleWriteAdvancingPhrase;
}

void Cobol85Parser::WriteAdvancingPhraseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWriteAdvancingPhrase(this);
}

void Cobol85Parser::WriteAdvancingPhraseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWriteAdvancingPhrase(this);
}

Cobol85Parser::WriteAdvancingPhraseContext* Cobol85Parser::writeAdvancingPhrase() {
  WriteAdvancingPhraseContext *_localctx = _tracker.createInstance<WriteAdvancingPhraseContext>(_ctx, getState());
  enterRule(_localctx, 1000, Cobol85Parser::RuleWriteAdvancingPhrase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5615);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::AFTER

    || _la == Cobol85Parser::BEFORE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(5617);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::ADVANCING) {
      setState(5616);
      match(Cobol85Parser::ADVANCING);
    }
    setState(5622);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 877, _ctx)) {
    case 1: {
      setState(5619);
      writeAdvancingPage();
      break;
    }

    case 2: {
      setState(5620);
      writeAdvancingLines();
      break;
    }

    case 3: {
      setState(5621);
      writeAdvancingMnemonic();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WriteAdvancingPageContext ------------------------------------------------------------------

Cobol85Parser::WriteAdvancingPageContext::WriteAdvancingPageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::WriteAdvancingPageContext::PAGE() {
  return getToken(Cobol85Parser::PAGE, 0);
}


size_t Cobol85Parser::WriteAdvancingPageContext::getRuleIndex() const {
  return Cobol85Parser::RuleWriteAdvancingPage;
}

void Cobol85Parser::WriteAdvancingPageContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWriteAdvancingPage(this);
}

void Cobol85Parser::WriteAdvancingPageContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWriteAdvancingPage(this);
}

Cobol85Parser::WriteAdvancingPageContext* Cobol85Parser::writeAdvancingPage() {
  WriteAdvancingPageContext *_localctx = _tracker.createInstance<WriteAdvancingPageContext>(_ctx, getState());
  enterRule(_localctx, 1002, Cobol85Parser::RuleWriteAdvancingPage);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5624);
    match(Cobol85Parser::PAGE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WriteAdvancingLinesContext ------------------------------------------------------------------

Cobol85Parser::WriteAdvancingLinesContext::WriteAdvancingLinesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::IdentifierContext* Cobol85Parser::WriteAdvancingLinesContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

Cobol85Parser::LiteralContext* Cobol85Parser::WriteAdvancingLinesContext::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}

tree::TerminalNode* Cobol85Parser::WriteAdvancingLinesContext::LINE() {
  return getToken(Cobol85Parser::LINE, 0);
}

tree::TerminalNode* Cobol85Parser::WriteAdvancingLinesContext::LINES() {
  return getToken(Cobol85Parser::LINES, 0);
}


size_t Cobol85Parser::WriteAdvancingLinesContext::getRuleIndex() const {
  return Cobol85Parser::RuleWriteAdvancingLines;
}

void Cobol85Parser::WriteAdvancingLinesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWriteAdvancingLines(this);
}

void Cobol85Parser::WriteAdvancingLinesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWriteAdvancingLines(this);
}

Cobol85Parser::WriteAdvancingLinesContext* Cobol85Parser::writeAdvancingLines() {
  WriteAdvancingLinesContext *_localctx = _tracker.createInstance<WriteAdvancingLinesContext>(_ctx, getState());
  enterRule(_localctx, 1004, Cobol85Parser::RuleWriteAdvancingLines);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5628);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 878, _ctx)) {
    case 1: {
      setState(5626);
      identifier();
      break;
    }

    case 2: {
      setState(5627);
      literal();
      break;
    }

    default:
      break;
    }
    setState(5631);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::LINE

    || _la == Cobol85Parser::LINES) {
      setState(5630);
      _la = _input->LA(1);
      if (!(_la == Cobol85Parser::LINE

      || _la == Cobol85Parser::LINES)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WriteAdvancingMnemonicContext ------------------------------------------------------------------

Cobol85Parser::WriteAdvancingMnemonicContext::WriteAdvancingMnemonicContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::MnemonicNameContext* Cobol85Parser::WriteAdvancingMnemonicContext::mnemonicName() {
  return getRuleContext<Cobol85Parser::MnemonicNameContext>(0);
}


size_t Cobol85Parser::WriteAdvancingMnemonicContext::getRuleIndex() const {
  return Cobol85Parser::RuleWriteAdvancingMnemonic;
}

void Cobol85Parser::WriteAdvancingMnemonicContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWriteAdvancingMnemonic(this);
}

void Cobol85Parser::WriteAdvancingMnemonicContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWriteAdvancingMnemonic(this);
}

Cobol85Parser::WriteAdvancingMnemonicContext* Cobol85Parser::writeAdvancingMnemonic() {
  WriteAdvancingMnemonicContext *_localctx = _tracker.createInstance<WriteAdvancingMnemonicContext>(_ctx, getState());
  enterRule(_localctx, 1006, Cobol85Parser::RuleWriteAdvancingMnemonic);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5633);
    mnemonicName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WriteAtEndOfPagePhraseContext ------------------------------------------------------------------

Cobol85Parser::WriteAtEndOfPagePhraseContext::WriteAtEndOfPagePhraseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::WriteAtEndOfPagePhraseContext::END_OF_PAGE() {
  return getToken(Cobol85Parser::END_OF_PAGE, 0);
}

tree::TerminalNode* Cobol85Parser::WriteAtEndOfPagePhraseContext::EOP() {
  return getToken(Cobol85Parser::EOP, 0);
}

tree::TerminalNode* Cobol85Parser::WriteAtEndOfPagePhraseContext::AT() {
  return getToken(Cobol85Parser::AT, 0);
}

std::vector<Cobol85Parser::StatementContext *> Cobol85Parser::WriteAtEndOfPagePhraseContext::statement() {
  return getRuleContexts<Cobol85Parser::StatementContext>();
}

Cobol85Parser::StatementContext* Cobol85Parser::WriteAtEndOfPagePhraseContext::statement(size_t i) {
  return getRuleContext<Cobol85Parser::StatementContext>(i);
}


size_t Cobol85Parser::WriteAtEndOfPagePhraseContext::getRuleIndex() const {
  return Cobol85Parser::RuleWriteAtEndOfPagePhrase;
}

void Cobol85Parser::WriteAtEndOfPagePhraseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWriteAtEndOfPagePhrase(this);
}

void Cobol85Parser::WriteAtEndOfPagePhraseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWriteAtEndOfPagePhrase(this);
}

Cobol85Parser::WriteAtEndOfPagePhraseContext* Cobol85Parser::writeAtEndOfPagePhrase() {
  WriteAtEndOfPagePhraseContext *_localctx = _tracker.createInstance<WriteAtEndOfPagePhraseContext>(_ctx, getState());
  enterRule(_localctx, 1008, Cobol85Parser::RuleWriteAtEndOfPagePhrase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(5636);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::AT) {
      setState(5635);
      match(Cobol85Parser::AT);
    }
    setState(5638);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::END_OF_PAGE

    || _la == Cobol85Parser::EOP)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(5642);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 881, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(5639);
        statement(); 
      }
      setState(5644);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 881, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WriteNotAtEndOfPagePhraseContext ------------------------------------------------------------------

Cobol85Parser::WriteNotAtEndOfPagePhraseContext::WriteNotAtEndOfPagePhraseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::WriteNotAtEndOfPagePhraseContext::NOT() {
  return getToken(Cobol85Parser::NOT, 0);
}

tree::TerminalNode* Cobol85Parser::WriteNotAtEndOfPagePhraseContext::END_OF_PAGE() {
  return getToken(Cobol85Parser::END_OF_PAGE, 0);
}

tree::TerminalNode* Cobol85Parser::WriteNotAtEndOfPagePhraseContext::EOP() {
  return getToken(Cobol85Parser::EOP, 0);
}

tree::TerminalNode* Cobol85Parser::WriteNotAtEndOfPagePhraseContext::AT() {
  return getToken(Cobol85Parser::AT, 0);
}

std::vector<Cobol85Parser::StatementContext *> Cobol85Parser::WriteNotAtEndOfPagePhraseContext::statement() {
  return getRuleContexts<Cobol85Parser::StatementContext>();
}

Cobol85Parser::StatementContext* Cobol85Parser::WriteNotAtEndOfPagePhraseContext::statement(size_t i) {
  return getRuleContext<Cobol85Parser::StatementContext>(i);
}


size_t Cobol85Parser::WriteNotAtEndOfPagePhraseContext::getRuleIndex() const {
  return Cobol85Parser::RuleWriteNotAtEndOfPagePhrase;
}

void Cobol85Parser::WriteNotAtEndOfPagePhraseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWriteNotAtEndOfPagePhrase(this);
}

void Cobol85Parser::WriteNotAtEndOfPagePhraseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWriteNotAtEndOfPagePhrase(this);
}

Cobol85Parser::WriteNotAtEndOfPagePhraseContext* Cobol85Parser::writeNotAtEndOfPagePhrase() {
  WriteNotAtEndOfPagePhraseContext *_localctx = _tracker.createInstance<WriteNotAtEndOfPagePhraseContext>(_ctx, getState());
  enterRule(_localctx, 1010, Cobol85Parser::RuleWriteNotAtEndOfPagePhrase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(5645);
    match(Cobol85Parser::NOT);
    setState(5647);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::AT) {
      setState(5646);
      match(Cobol85Parser::AT);
    }
    setState(5649);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::END_OF_PAGE

    || _la == Cobol85Parser::EOP)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(5653);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 883, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(5650);
        statement(); 
      }
      setState(5655);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 883, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AtEndPhraseContext ------------------------------------------------------------------

Cobol85Parser::AtEndPhraseContext::AtEndPhraseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::AtEndPhraseContext::END() {
  return getToken(Cobol85Parser::END, 0);
}

tree::TerminalNode* Cobol85Parser::AtEndPhraseContext::AT() {
  return getToken(Cobol85Parser::AT, 0);
}

std::vector<Cobol85Parser::StatementContext *> Cobol85Parser::AtEndPhraseContext::statement() {
  return getRuleContexts<Cobol85Parser::StatementContext>();
}

Cobol85Parser::StatementContext* Cobol85Parser::AtEndPhraseContext::statement(size_t i) {
  return getRuleContext<Cobol85Parser::StatementContext>(i);
}


size_t Cobol85Parser::AtEndPhraseContext::getRuleIndex() const {
  return Cobol85Parser::RuleAtEndPhrase;
}

void Cobol85Parser::AtEndPhraseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAtEndPhrase(this);
}

void Cobol85Parser::AtEndPhraseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAtEndPhrase(this);
}

Cobol85Parser::AtEndPhraseContext* Cobol85Parser::atEndPhrase() {
  AtEndPhraseContext *_localctx = _tracker.createInstance<AtEndPhraseContext>(_ctx, getState());
  enterRule(_localctx, 1012, Cobol85Parser::RuleAtEndPhrase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(5657);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::AT) {
      setState(5656);
      match(Cobol85Parser::AT);
    }
    setState(5659);
    match(Cobol85Parser::END);
    setState(5663);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 885, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(5660);
        statement(); 
      }
      setState(5665);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 885, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NotAtEndPhraseContext ------------------------------------------------------------------

Cobol85Parser::NotAtEndPhraseContext::NotAtEndPhraseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::NotAtEndPhraseContext::NOT() {
  return getToken(Cobol85Parser::NOT, 0);
}

tree::TerminalNode* Cobol85Parser::NotAtEndPhraseContext::END() {
  return getToken(Cobol85Parser::END, 0);
}

tree::TerminalNode* Cobol85Parser::NotAtEndPhraseContext::AT() {
  return getToken(Cobol85Parser::AT, 0);
}

std::vector<Cobol85Parser::StatementContext *> Cobol85Parser::NotAtEndPhraseContext::statement() {
  return getRuleContexts<Cobol85Parser::StatementContext>();
}

Cobol85Parser::StatementContext* Cobol85Parser::NotAtEndPhraseContext::statement(size_t i) {
  return getRuleContext<Cobol85Parser::StatementContext>(i);
}


size_t Cobol85Parser::NotAtEndPhraseContext::getRuleIndex() const {
  return Cobol85Parser::RuleNotAtEndPhrase;
}

void Cobol85Parser::NotAtEndPhraseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNotAtEndPhrase(this);
}

void Cobol85Parser::NotAtEndPhraseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNotAtEndPhrase(this);
}

Cobol85Parser::NotAtEndPhraseContext* Cobol85Parser::notAtEndPhrase() {
  NotAtEndPhraseContext *_localctx = _tracker.createInstance<NotAtEndPhraseContext>(_ctx, getState());
  enterRule(_localctx, 1014, Cobol85Parser::RuleNotAtEndPhrase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(5666);
    match(Cobol85Parser::NOT);
    setState(5668);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::AT) {
      setState(5667);
      match(Cobol85Parser::AT);
    }
    setState(5670);
    match(Cobol85Parser::END);
    setState(5674);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 887, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(5671);
        statement(); 
      }
      setState(5676);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 887, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InvalidKeyPhraseContext ------------------------------------------------------------------

Cobol85Parser::InvalidKeyPhraseContext::InvalidKeyPhraseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::InvalidKeyPhraseContext::INVALID() {
  return getToken(Cobol85Parser::INVALID, 0);
}

tree::TerminalNode* Cobol85Parser::InvalidKeyPhraseContext::KEY() {
  return getToken(Cobol85Parser::KEY, 0);
}

std::vector<Cobol85Parser::StatementContext *> Cobol85Parser::InvalidKeyPhraseContext::statement() {
  return getRuleContexts<Cobol85Parser::StatementContext>();
}

Cobol85Parser::StatementContext* Cobol85Parser::InvalidKeyPhraseContext::statement(size_t i) {
  return getRuleContext<Cobol85Parser::StatementContext>(i);
}


size_t Cobol85Parser::InvalidKeyPhraseContext::getRuleIndex() const {
  return Cobol85Parser::RuleInvalidKeyPhrase;
}

void Cobol85Parser::InvalidKeyPhraseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInvalidKeyPhrase(this);
}

void Cobol85Parser::InvalidKeyPhraseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInvalidKeyPhrase(this);
}

Cobol85Parser::InvalidKeyPhraseContext* Cobol85Parser::invalidKeyPhrase() {
  InvalidKeyPhraseContext *_localctx = _tracker.createInstance<InvalidKeyPhraseContext>(_ctx, getState());
  enterRule(_localctx, 1016, Cobol85Parser::RuleInvalidKeyPhrase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(5677);
    match(Cobol85Parser::INVALID);
    setState(5679);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::KEY) {
      setState(5678);
      match(Cobol85Parser::KEY);
    }
    setState(5684);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 889, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(5681);
        statement(); 
      }
      setState(5686);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 889, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NotInvalidKeyPhraseContext ------------------------------------------------------------------

Cobol85Parser::NotInvalidKeyPhraseContext::NotInvalidKeyPhraseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::NotInvalidKeyPhraseContext::NOT() {
  return getToken(Cobol85Parser::NOT, 0);
}

tree::TerminalNode* Cobol85Parser::NotInvalidKeyPhraseContext::INVALID() {
  return getToken(Cobol85Parser::INVALID, 0);
}

tree::TerminalNode* Cobol85Parser::NotInvalidKeyPhraseContext::KEY() {
  return getToken(Cobol85Parser::KEY, 0);
}

std::vector<Cobol85Parser::StatementContext *> Cobol85Parser::NotInvalidKeyPhraseContext::statement() {
  return getRuleContexts<Cobol85Parser::StatementContext>();
}

Cobol85Parser::StatementContext* Cobol85Parser::NotInvalidKeyPhraseContext::statement(size_t i) {
  return getRuleContext<Cobol85Parser::StatementContext>(i);
}


size_t Cobol85Parser::NotInvalidKeyPhraseContext::getRuleIndex() const {
  return Cobol85Parser::RuleNotInvalidKeyPhrase;
}

void Cobol85Parser::NotInvalidKeyPhraseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNotInvalidKeyPhrase(this);
}

void Cobol85Parser::NotInvalidKeyPhraseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNotInvalidKeyPhrase(this);
}

Cobol85Parser::NotInvalidKeyPhraseContext* Cobol85Parser::notInvalidKeyPhrase() {
  NotInvalidKeyPhraseContext *_localctx = _tracker.createInstance<NotInvalidKeyPhraseContext>(_ctx, getState());
  enterRule(_localctx, 1018, Cobol85Parser::RuleNotInvalidKeyPhrase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(5687);
    match(Cobol85Parser::NOT);
    setState(5688);
    match(Cobol85Parser::INVALID);
    setState(5690);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::KEY) {
      setState(5689);
      match(Cobol85Parser::KEY);
    }
    setState(5695);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 891, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(5692);
        statement(); 
      }
      setState(5697);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 891, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OnOverflowPhraseContext ------------------------------------------------------------------

Cobol85Parser::OnOverflowPhraseContext::OnOverflowPhraseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::OnOverflowPhraseContext::OVERFLOW() {
  return getToken(Cobol85Parser::OVERFLOW, 0);
}

tree::TerminalNode* Cobol85Parser::OnOverflowPhraseContext::ON() {
  return getToken(Cobol85Parser::ON, 0);
}

std::vector<Cobol85Parser::StatementContext *> Cobol85Parser::OnOverflowPhraseContext::statement() {
  return getRuleContexts<Cobol85Parser::StatementContext>();
}

Cobol85Parser::StatementContext* Cobol85Parser::OnOverflowPhraseContext::statement(size_t i) {
  return getRuleContext<Cobol85Parser::StatementContext>(i);
}


size_t Cobol85Parser::OnOverflowPhraseContext::getRuleIndex() const {
  return Cobol85Parser::RuleOnOverflowPhrase;
}

void Cobol85Parser::OnOverflowPhraseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOnOverflowPhrase(this);
}

void Cobol85Parser::OnOverflowPhraseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOnOverflowPhrase(this);
}

Cobol85Parser::OnOverflowPhraseContext* Cobol85Parser::onOverflowPhrase() {
  OnOverflowPhraseContext *_localctx = _tracker.createInstance<OnOverflowPhraseContext>(_ctx, getState());
  enterRule(_localctx, 1020, Cobol85Parser::RuleOnOverflowPhrase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(5699);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::ON) {
      setState(5698);
      match(Cobol85Parser::ON);
    }
    setState(5701);
    match(Cobol85Parser::OVERFLOW);
    setState(5705);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 893, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(5702);
        statement(); 
      }
      setState(5707);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 893, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NotOnOverflowPhraseContext ------------------------------------------------------------------

Cobol85Parser::NotOnOverflowPhraseContext::NotOnOverflowPhraseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::NotOnOverflowPhraseContext::NOT() {
  return getToken(Cobol85Parser::NOT, 0);
}

tree::TerminalNode* Cobol85Parser::NotOnOverflowPhraseContext::OVERFLOW() {
  return getToken(Cobol85Parser::OVERFLOW, 0);
}

tree::TerminalNode* Cobol85Parser::NotOnOverflowPhraseContext::ON() {
  return getToken(Cobol85Parser::ON, 0);
}

std::vector<Cobol85Parser::StatementContext *> Cobol85Parser::NotOnOverflowPhraseContext::statement() {
  return getRuleContexts<Cobol85Parser::StatementContext>();
}

Cobol85Parser::StatementContext* Cobol85Parser::NotOnOverflowPhraseContext::statement(size_t i) {
  return getRuleContext<Cobol85Parser::StatementContext>(i);
}


size_t Cobol85Parser::NotOnOverflowPhraseContext::getRuleIndex() const {
  return Cobol85Parser::RuleNotOnOverflowPhrase;
}

void Cobol85Parser::NotOnOverflowPhraseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNotOnOverflowPhrase(this);
}

void Cobol85Parser::NotOnOverflowPhraseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNotOnOverflowPhrase(this);
}

Cobol85Parser::NotOnOverflowPhraseContext* Cobol85Parser::notOnOverflowPhrase() {
  NotOnOverflowPhraseContext *_localctx = _tracker.createInstance<NotOnOverflowPhraseContext>(_ctx, getState());
  enterRule(_localctx, 1022, Cobol85Parser::RuleNotOnOverflowPhrase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(5708);
    match(Cobol85Parser::NOT);
    setState(5710);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::ON) {
      setState(5709);
      match(Cobol85Parser::ON);
    }
    setState(5712);
    match(Cobol85Parser::OVERFLOW);
    setState(5716);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 895, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(5713);
        statement(); 
      }
      setState(5718);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 895, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OnSizeErrorPhraseContext ------------------------------------------------------------------

Cobol85Parser::OnSizeErrorPhraseContext::OnSizeErrorPhraseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::OnSizeErrorPhraseContext::SIZE() {
  return getToken(Cobol85Parser::SIZE, 0);
}

tree::TerminalNode* Cobol85Parser::OnSizeErrorPhraseContext::ERROR() {
  return getToken(Cobol85Parser::ERROR, 0);
}

tree::TerminalNode* Cobol85Parser::OnSizeErrorPhraseContext::ON() {
  return getToken(Cobol85Parser::ON, 0);
}

std::vector<Cobol85Parser::StatementContext *> Cobol85Parser::OnSizeErrorPhraseContext::statement() {
  return getRuleContexts<Cobol85Parser::StatementContext>();
}

Cobol85Parser::StatementContext* Cobol85Parser::OnSizeErrorPhraseContext::statement(size_t i) {
  return getRuleContext<Cobol85Parser::StatementContext>(i);
}


size_t Cobol85Parser::OnSizeErrorPhraseContext::getRuleIndex() const {
  return Cobol85Parser::RuleOnSizeErrorPhrase;
}

void Cobol85Parser::OnSizeErrorPhraseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOnSizeErrorPhrase(this);
}

void Cobol85Parser::OnSizeErrorPhraseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOnSizeErrorPhrase(this);
}

Cobol85Parser::OnSizeErrorPhraseContext* Cobol85Parser::onSizeErrorPhrase() {
  OnSizeErrorPhraseContext *_localctx = _tracker.createInstance<OnSizeErrorPhraseContext>(_ctx, getState());
  enterRule(_localctx, 1024, Cobol85Parser::RuleOnSizeErrorPhrase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(5720);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::ON) {
      setState(5719);
      match(Cobol85Parser::ON);
    }
    setState(5722);
    match(Cobol85Parser::SIZE);
    setState(5723);
    match(Cobol85Parser::ERROR);
    setState(5727);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 897, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(5724);
        statement(); 
      }
      setState(5729);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 897, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NotOnSizeErrorPhraseContext ------------------------------------------------------------------

Cobol85Parser::NotOnSizeErrorPhraseContext::NotOnSizeErrorPhraseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::NotOnSizeErrorPhraseContext::NOT() {
  return getToken(Cobol85Parser::NOT, 0);
}

tree::TerminalNode* Cobol85Parser::NotOnSizeErrorPhraseContext::SIZE() {
  return getToken(Cobol85Parser::SIZE, 0);
}

tree::TerminalNode* Cobol85Parser::NotOnSizeErrorPhraseContext::ERROR() {
  return getToken(Cobol85Parser::ERROR, 0);
}

tree::TerminalNode* Cobol85Parser::NotOnSizeErrorPhraseContext::ON() {
  return getToken(Cobol85Parser::ON, 0);
}

std::vector<Cobol85Parser::StatementContext *> Cobol85Parser::NotOnSizeErrorPhraseContext::statement() {
  return getRuleContexts<Cobol85Parser::StatementContext>();
}

Cobol85Parser::StatementContext* Cobol85Parser::NotOnSizeErrorPhraseContext::statement(size_t i) {
  return getRuleContext<Cobol85Parser::StatementContext>(i);
}


size_t Cobol85Parser::NotOnSizeErrorPhraseContext::getRuleIndex() const {
  return Cobol85Parser::RuleNotOnSizeErrorPhrase;
}

void Cobol85Parser::NotOnSizeErrorPhraseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNotOnSizeErrorPhrase(this);
}

void Cobol85Parser::NotOnSizeErrorPhraseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNotOnSizeErrorPhrase(this);
}

Cobol85Parser::NotOnSizeErrorPhraseContext* Cobol85Parser::notOnSizeErrorPhrase() {
  NotOnSizeErrorPhraseContext *_localctx = _tracker.createInstance<NotOnSizeErrorPhraseContext>(_ctx, getState());
  enterRule(_localctx, 1026, Cobol85Parser::RuleNotOnSizeErrorPhrase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(5730);
    match(Cobol85Parser::NOT);
    setState(5732);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::ON) {
      setState(5731);
      match(Cobol85Parser::ON);
    }
    setState(5734);
    match(Cobol85Parser::SIZE);
    setState(5735);
    match(Cobol85Parser::ERROR);
    setState(5739);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 899, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(5736);
        statement(); 
      }
      setState(5741);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 899, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OnExceptionClauseContext ------------------------------------------------------------------

Cobol85Parser::OnExceptionClauseContext::OnExceptionClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::OnExceptionClauseContext::EXCEPTION() {
  return getToken(Cobol85Parser::EXCEPTION, 0);
}

tree::TerminalNode* Cobol85Parser::OnExceptionClauseContext::ON() {
  return getToken(Cobol85Parser::ON, 0);
}

std::vector<Cobol85Parser::StatementContext *> Cobol85Parser::OnExceptionClauseContext::statement() {
  return getRuleContexts<Cobol85Parser::StatementContext>();
}

Cobol85Parser::StatementContext* Cobol85Parser::OnExceptionClauseContext::statement(size_t i) {
  return getRuleContext<Cobol85Parser::StatementContext>(i);
}


size_t Cobol85Parser::OnExceptionClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleOnExceptionClause;
}

void Cobol85Parser::OnExceptionClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOnExceptionClause(this);
}

void Cobol85Parser::OnExceptionClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOnExceptionClause(this);
}

Cobol85Parser::OnExceptionClauseContext* Cobol85Parser::onExceptionClause() {
  OnExceptionClauseContext *_localctx = _tracker.createInstance<OnExceptionClauseContext>(_ctx, getState());
  enterRule(_localctx, 1028, Cobol85Parser::RuleOnExceptionClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(5743);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::ON) {
      setState(5742);
      match(Cobol85Parser::ON);
    }
    setState(5745);
    match(Cobol85Parser::EXCEPTION);
    setState(5749);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 901, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(5746);
        statement(); 
      }
      setState(5751);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 901, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NotOnExceptionClauseContext ------------------------------------------------------------------

Cobol85Parser::NotOnExceptionClauseContext::NotOnExceptionClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::NotOnExceptionClauseContext::NOT() {
  return getToken(Cobol85Parser::NOT, 0);
}

tree::TerminalNode* Cobol85Parser::NotOnExceptionClauseContext::EXCEPTION() {
  return getToken(Cobol85Parser::EXCEPTION, 0);
}

tree::TerminalNode* Cobol85Parser::NotOnExceptionClauseContext::ON() {
  return getToken(Cobol85Parser::ON, 0);
}

std::vector<Cobol85Parser::StatementContext *> Cobol85Parser::NotOnExceptionClauseContext::statement() {
  return getRuleContexts<Cobol85Parser::StatementContext>();
}

Cobol85Parser::StatementContext* Cobol85Parser::NotOnExceptionClauseContext::statement(size_t i) {
  return getRuleContext<Cobol85Parser::StatementContext>(i);
}


size_t Cobol85Parser::NotOnExceptionClauseContext::getRuleIndex() const {
  return Cobol85Parser::RuleNotOnExceptionClause;
}

void Cobol85Parser::NotOnExceptionClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNotOnExceptionClause(this);
}

void Cobol85Parser::NotOnExceptionClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNotOnExceptionClause(this);
}

Cobol85Parser::NotOnExceptionClauseContext* Cobol85Parser::notOnExceptionClause() {
  NotOnExceptionClauseContext *_localctx = _tracker.createInstance<NotOnExceptionClauseContext>(_ctx, getState());
  enterRule(_localctx, 1030, Cobol85Parser::RuleNotOnExceptionClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(5752);
    match(Cobol85Parser::NOT);
    setState(5754);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::ON) {
      setState(5753);
      match(Cobol85Parser::ON);
    }
    setState(5756);
    match(Cobol85Parser::EXCEPTION);
    setState(5760);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 903, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(5757);
        statement(); 
      }
      setState(5762);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 903, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArithmeticExpressionContext ------------------------------------------------------------------

Cobol85Parser::ArithmeticExpressionContext::ArithmeticExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::MultDivsContext* Cobol85Parser::ArithmeticExpressionContext::multDivs() {
  return getRuleContext<Cobol85Parser::MultDivsContext>(0);
}

std::vector<Cobol85Parser::PlusMinusContext *> Cobol85Parser::ArithmeticExpressionContext::plusMinus() {
  return getRuleContexts<Cobol85Parser::PlusMinusContext>();
}

Cobol85Parser::PlusMinusContext* Cobol85Parser::ArithmeticExpressionContext::plusMinus(size_t i) {
  return getRuleContext<Cobol85Parser::PlusMinusContext>(i);
}


size_t Cobol85Parser::ArithmeticExpressionContext::getRuleIndex() const {
  return Cobol85Parser::RuleArithmeticExpression;
}

void Cobol85Parser::ArithmeticExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArithmeticExpression(this);
}

void Cobol85Parser::ArithmeticExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArithmeticExpression(this);
}

Cobol85Parser::ArithmeticExpressionContext* Cobol85Parser::arithmeticExpression() {
  ArithmeticExpressionContext *_localctx = _tracker.createInstance<ArithmeticExpressionContext>(_ctx, getState());
  enterRule(_localctx, 1032, Cobol85Parser::RuleArithmeticExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(5763);
    multDivs();
    setState(5767);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 904, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(5764);
        plusMinus(); 
      }
      setState(5769);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 904, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PlusMinusContext ------------------------------------------------------------------

Cobol85Parser::PlusMinusContext::PlusMinusContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::MultDivsContext* Cobol85Parser::PlusMinusContext::multDivs() {
  return getRuleContext<Cobol85Parser::MultDivsContext>(0);
}

tree::TerminalNode* Cobol85Parser::PlusMinusContext::PLUSCHAR() {
  return getToken(Cobol85Parser::PLUSCHAR, 0);
}

tree::TerminalNode* Cobol85Parser::PlusMinusContext::MINUSCHAR() {
  return getToken(Cobol85Parser::MINUSCHAR, 0);
}


size_t Cobol85Parser::PlusMinusContext::getRuleIndex() const {
  return Cobol85Parser::RulePlusMinus;
}

void Cobol85Parser::PlusMinusContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPlusMinus(this);
}

void Cobol85Parser::PlusMinusContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPlusMinus(this);
}

Cobol85Parser::PlusMinusContext* Cobol85Parser::plusMinus() {
  PlusMinusContext *_localctx = _tracker.createInstance<PlusMinusContext>(_ctx, getState());
  enterRule(_localctx, 1034, Cobol85Parser::RulePlusMinus);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5770);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::MINUSCHAR

    || _la == Cobol85Parser::PLUSCHAR)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(5771);
    multDivs();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MultDivsContext ------------------------------------------------------------------

Cobol85Parser::MultDivsContext::MultDivsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::PowersContext* Cobol85Parser::MultDivsContext::powers() {
  return getRuleContext<Cobol85Parser::PowersContext>(0);
}

std::vector<Cobol85Parser::MultDivContext *> Cobol85Parser::MultDivsContext::multDiv() {
  return getRuleContexts<Cobol85Parser::MultDivContext>();
}

Cobol85Parser::MultDivContext* Cobol85Parser::MultDivsContext::multDiv(size_t i) {
  return getRuleContext<Cobol85Parser::MultDivContext>(i);
}


size_t Cobol85Parser::MultDivsContext::getRuleIndex() const {
  return Cobol85Parser::RuleMultDivs;
}

void Cobol85Parser::MultDivsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMultDivs(this);
}

void Cobol85Parser::MultDivsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMultDivs(this);
}

Cobol85Parser::MultDivsContext* Cobol85Parser::multDivs() {
  MultDivsContext *_localctx = _tracker.createInstance<MultDivsContext>(_ctx, getState());
  enterRule(_localctx, 1036, Cobol85Parser::RuleMultDivs);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5773);
    powers();
    setState(5777);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Cobol85Parser::ASTERISKCHAR

    || _la == Cobol85Parser::SLASHCHAR) {
      setState(5774);
      multDiv();
      setState(5779);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MultDivContext ------------------------------------------------------------------

Cobol85Parser::MultDivContext::MultDivContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::PowersContext* Cobol85Parser::MultDivContext::powers() {
  return getRuleContext<Cobol85Parser::PowersContext>(0);
}

tree::TerminalNode* Cobol85Parser::MultDivContext::ASTERISKCHAR() {
  return getToken(Cobol85Parser::ASTERISKCHAR, 0);
}

tree::TerminalNode* Cobol85Parser::MultDivContext::SLASHCHAR() {
  return getToken(Cobol85Parser::SLASHCHAR, 0);
}


size_t Cobol85Parser::MultDivContext::getRuleIndex() const {
  return Cobol85Parser::RuleMultDiv;
}

void Cobol85Parser::MultDivContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMultDiv(this);
}

void Cobol85Parser::MultDivContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMultDiv(this);
}

Cobol85Parser::MultDivContext* Cobol85Parser::multDiv() {
  MultDivContext *_localctx = _tracker.createInstance<MultDivContext>(_ctx, getState());
  enterRule(_localctx, 1038, Cobol85Parser::RuleMultDiv);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5780);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::ASTERISKCHAR

    || _la == Cobol85Parser::SLASHCHAR)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(5781);
    powers();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PowersContext ------------------------------------------------------------------

Cobol85Parser::PowersContext::PowersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::BasisContext* Cobol85Parser::PowersContext::basis() {
  return getRuleContext<Cobol85Parser::BasisContext>(0);
}

std::vector<Cobol85Parser::PowerContext *> Cobol85Parser::PowersContext::power() {
  return getRuleContexts<Cobol85Parser::PowerContext>();
}

Cobol85Parser::PowerContext* Cobol85Parser::PowersContext::power(size_t i) {
  return getRuleContext<Cobol85Parser::PowerContext>(i);
}

tree::TerminalNode* Cobol85Parser::PowersContext::PLUSCHAR() {
  return getToken(Cobol85Parser::PLUSCHAR, 0);
}

tree::TerminalNode* Cobol85Parser::PowersContext::MINUSCHAR() {
  return getToken(Cobol85Parser::MINUSCHAR, 0);
}


size_t Cobol85Parser::PowersContext::getRuleIndex() const {
  return Cobol85Parser::RulePowers;
}

void Cobol85Parser::PowersContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPowers(this);
}

void Cobol85Parser::PowersContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPowers(this);
}

Cobol85Parser::PowersContext* Cobol85Parser::powers() {
  PowersContext *_localctx = _tracker.createInstance<PowersContext>(_ctx, getState());
  enterRule(_localctx, 1040, Cobol85Parser::RulePowers);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5784);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::MINUSCHAR

    || _la == Cobol85Parser::PLUSCHAR) {
      setState(5783);
      _la = _input->LA(1);
      if (!(_la == Cobol85Parser::MINUSCHAR

      || _la == Cobol85Parser::PLUSCHAR)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(5786);
    basis();
    setState(5790);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Cobol85Parser::DOUBLEASTERISKCHAR) {
      setState(5787);
      power();
      setState(5792);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PowerContext ------------------------------------------------------------------

Cobol85Parser::PowerContext::PowerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::PowerContext::DOUBLEASTERISKCHAR() {
  return getToken(Cobol85Parser::DOUBLEASTERISKCHAR, 0);
}

Cobol85Parser::BasisContext* Cobol85Parser::PowerContext::basis() {
  return getRuleContext<Cobol85Parser::BasisContext>(0);
}


size_t Cobol85Parser::PowerContext::getRuleIndex() const {
  return Cobol85Parser::RulePower;
}

void Cobol85Parser::PowerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPower(this);
}

void Cobol85Parser::PowerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPower(this);
}

Cobol85Parser::PowerContext* Cobol85Parser::power() {
  PowerContext *_localctx = _tracker.createInstance<PowerContext>(_ctx, getState());
  enterRule(_localctx, 1042, Cobol85Parser::RulePower);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5793);
    match(Cobol85Parser::DOUBLEASTERISKCHAR);
    setState(5794);
    basis();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BasisContext ------------------------------------------------------------------

Cobol85Parser::BasisContext::BasisContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::BasisContext::LPARENCHAR() {
  return getToken(Cobol85Parser::LPARENCHAR, 0);
}

Cobol85Parser::ArithmeticExpressionContext* Cobol85Parser::BasisContext::arithmeticExpression() {
  return getRuleContext<Cobol85Parser::ArithmeticExpressionContext>(0);
}

tree::TerminalNode* Cobol85Parser::BasisContext::RPARENCHAR() {
  return getToken(Cobol85Parser::RPARENCHAR, 0);
}

Cobol85Parser::IdentifierContext* Cobol85Parser::BasisContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

Cobol85Parser::LiteralContext* Cobol85Parser::BasisContext::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}


size_t Cobol85Parser::BasisContext::getRuleIndex() const {
  return Cobol85Parser::RuleBasis;
}

void Cobol85Parser::BasisContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBasis(this);
}

void Cobol85Parser::BasisContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBasis(this);
}

Cobol85Parser::BasisContext* Cobol85Parser::basis() {
  BasisContext *_localctx = _tracker.createInstance<BasisContext>(_ctx, getState());
  enterRule(_localctx, 1044, Cobol85Parser::RuleBasis);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(5802);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 908, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(5796);
      match(Cobol85Parser::LPARENCHAR);
      setState(5797);
      arithmeticExpression();
      setState(5798);
      match(Cobol85Parser::RPARENCHAR);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(5800);
      identifier();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(5801);
      literal();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConditionContext ------------------------------------------------------------------

Cobol85Parser::ConditionContext::ConditionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::CombinableConditionContext* Cobol85Parser::ConditionContext::combinableCondition() {
  return getRuleContext<Cobol85Parser::CombinableConditionContext>(0);
}

std::vector<Cobol85Parser::AndOrConditionContext *> Cobol85Parser::ConditionContext::andOrCondition() {
  return getRuleContexts<Cobol85Parser::AndOrConditionContext>();
}

Cobol85Parser::AndOrConditionContext* Cobol85Parser::ConditionContext::andOrCondition(size_t i) {
  return getRuleContext<Cobol85Parser::AndOrConditionContext>(i);
}


size_t Cobol85Parser::ConditionContext::getRuleIndex() const {
  return Cobol85Parser::RuleCondition;
}

void Cobol85Parser::ConditionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCondition(this);
}

void Cobol85Parser::ConditionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCondition(this);
}

Cobol85Parser::ConditionContext* Cobol85Parser::condition() {
  ConditionContext *_localctx = _tracker.createInstance<ConditionContext>(_ctx, getState());
  enterRule(_localctx, 1046, Cobol85Parser::RuleCondition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5804);
    combinableCondition();
    setState(5808);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Cobol85Parser::AND || _la == Cobol85Parser::OR) {
      setState(5805);
      andOrCondition();
      setState(5810);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AndOrConditionContext ------------------------------------------------------------------

Cobol85Parser::AndOrConditionContext::AndOrConditionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::AndOrConditionContext::AND() {
  return getToken(Cobol85Parser::AND, 0);
}

tree::TerminalNode* Cobol85Parser::AndOrConditionContext::OR() {
  return getToken(Cobol85Parser::OR, 0);
}

Cobol85Parser::CombinableConditionContext* Cobol85Parser::AndOrConditionContext::combinableCondition() {
  return getRuleContext<Cobol85Parser::CombinableConditionContext>(0);
}

std::vector<Cobol85Parser::AbbreviationContext *> Cobol85Parser::AndOrConditionContext::abbreviation() {
  return getRuleContexts<Cobol85Parser::AbbreviationContext>();
}

Cobol85Parser::AbbreviationContext* Cobol85Parser::AndOrConditionContext::abbreviation(size_t i) {
  return getRuleContext<Cobol85Parser::AbbreviationContext>(i);
}


size_t Cobol85Parser::AndOrConditionContext::getRuleIndex() const {
  return Cobol85Parser::RuleAndOrCondition;
}

void Cobol85Parser::AndOrConditionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAndOrCondition(this);
}

void Cobol85Parser::AndOrConditionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAndOrCondition(this);
}

Cobol85Parser::AndOrConditionContext* Cobol85Parser::andOrCondition() {
  AndOrConditionContext *_localctx = _tracker.createInstance<AndOrConditionContext>(_ctx, getState());
  enterRule(_localctx, 1048, Cobol85Parser::RuleAndOrCondition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(5811);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::AND || _la == Cobol85Parser::OR)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(5818);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 911, _ctx)) {
    case 1: {
      setState(5812);
      combinableCondition();
      break;
    }

    case 2: {
      setState(5814); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(5813);
                abbreviation();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(5816); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 910, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CombinableConditionContext ------------------------------------------------------------------

Cobol85Parser::CombinableConditionContext::CombinableConditionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::SimpleConditionContext* Cobol85Parser::CombinableConditionContext::simpleCondition() {
  return getRuleContext<Cobol85Parser::SimpleConditionContext>(0);
}

tree::TerminalNode* Cobol85Parser::CombinableConditionContext::NOT() {
  return getToken(Cobol85Parser::NOT, 0);
}


size_t Cobol85Parser::CombinableConditionContext::getRuleIndex() const {
  return Cobol85Parser::RuleCombinableCondition;
}

void Cobol85Parser::CombinableConditionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCombinableCondition(this);
}

void Cobol85Parser::CombinableConditionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCombinableCondition(this);
}

Cobol85Parser::CombinableConditionContext* Cobol85Parser::combinableCondition() {
  CombinableConditionContext *_localctx = _tracker.createInstance<CombinableConditionContext>(_ctx, getState());
  enterRule(_localctx, 1050, Cobol85Parser::RuleCombinableCondition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5821);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::NOT) {
      setState(5820);
      match(Cobol85Parser::NOT);
    }
    setState(5823);
    simpleCondition();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimpleConditionContext ------------------------------------------------------------------

Cobol85Parser::SimpleConditionContext::SimpleConditionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::SimpleConditionContext::LPARENCHAR() {
  return getToken(Cobol85Parser::LPARENCHAR, 0);
}

Cobol85Parser::ConditionContext* Cobol85Parser::SimpleConditionContext::condition() {
  return getRuleContext<Cobol85Parser::ConditionContext>(0);
}

tree::TerminalNode* Cobol85Parser::SimpleConditionContext::RPARENCHAR() {
  return getToken(Cobol85Parser::RPARENCHAR, 0);
}

Cobol85Parser::RelationConditionContext* Cobol85Parser::SimpleConditionContext::relationCondition() {
  return getRuleContext<Cobol85Parser::RelationConditionContext>(0);
}

Cobol85Parser::ClassConditionContext* Cobol85Parser::SimpleConditionContext::classCondition() {
  return getRuleContext<Cobol85Parser::ClassConditionContext>(0);
}

Cobol85Parser::ConditionNameReferenceContext* Cobol85Parser::SimpleConditionContext::conditionNameReference() {
  return getRuleContext<Cobol85Parser::ConditionNameReferenceContext>(0);
}


size_t Cobol85Parser::SimpleConditionContext::getRuleIndex() const {
  return Cobol85Parser::RuleSimpleCondition;
}

void Cobol85Parser::SimpleConditionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimpleCondition(this);
}

void Cobol85Parser::SimpleConditionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimpleCondition(this);
}

Cobol85Parser::SimpleConditionContext* Cobol85Parser::simpleCondition() {
  SimpleConditionContext *_localctx = _tracker.createInstance<SimpleConditionContext>(_ctx, getState());
  enterRule(_localctx, 1052, Cobol85Parser::RuleSimpleCondition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(5832);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 913, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(5825);
      match(Cobol85Parser::LPARENCHAR);
      setState(5826);
      condition();
      setState(5827);
      match(Cobol85Parser::RPARENCHAR);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(5829);
      relationCondition();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(5830);
      classCondition();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(5831);
      conditionNameReference();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassConditionContext ------------------------------------------------------------------

Cobol85Parser::ClassConditionContext::ClassConditionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::IdentifierContext* Cobol85Parser::ClassConditionContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

tree::TerminalNode* Cobol85Parser::ClassConditionContext::NUMERIC() {
  return getToken(Cobol85Parser::NUMERIC, 0);
}

tree::TerminalNode* Cobol85Parser::ClassConditionContext::ALPHABETIC() {
  return getToken(Cobol85Parser::ALPHABETIC, 0);
}

tree::TerminalNode* Cobol85Parser::ClassConditionContext::ALPHABETIC_LOWER() {
  return getToken(Cobol85Parser::ALPHABETIC_LOWER, 0);
}

tree::TerminalNode* Cobol85Parser::ClassConditionContext::ALPHABETIC_UPPER() {
  return getToken(Cobol85Parser::ALPHABETIC_UPPER, 0);
}

tree::TerminalNode* Cobol85Parser::ClassConditionContext::DBCS() {
  return getToken(Cobol85Parser::DBCS, 0);
}

tree::TerminalNode* Cobol85Parser::ClassConditionContext::KANJI() {
  return getToken(Cobol85Parser::KANJI, 0);
}

Cobol85Parser::ClassNameContext* Cobol85Parser::ClassConditionContext::className() {
  return getRuleContext<Cobol85Parser::ClassNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::ClassConditionContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}

tree::TerminalNode* Cobol85Parser::ClassConditionContext::NOT() {
  return getToken(Cobol85Parser::NOT, 0);
}


size_t Cobol85Parser::ClassConditionContext::getRuleIndex() const {
  return Cobol85Parser::RuleClassCondition;
}

void Cobol85Parser::ClassConditionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassCondition(this);
}

void Cobol85Parser::ClassConditionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassCondition(this);
}

Cobol85Parser::ClassConditionContext* Cobol85Parser::classCondition() {
  ClassConditionContext *_localctx = _tracker.createInstance<ClassConditionContext>(_ctx, getState());
  enterRule(_localctx, 1054, Cobol85Parser::RuleClassCondition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5834);
    identifier();
    setState(5836);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(5835);
      match(Cobol85Parser::IS);
    }
    setState(5839);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::NOT) {
      setState(5838);
      match(Cobol85Parser::NOT);
    }
    setState(5848);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Cobol85Parser::NUMERIC: {
        setState(5841);
        match(Cobol85Parser::NUMERIC);
        break;
      }

      case Cobol85Parser::ALPHABETIC: {
        setState(5842);
        match(Cobol85Parser::ALPHABETIC);
        break;
      }

      case Cobol85Parser::ALPHABETIC_LOWER: {
        setState(5843);
        match(Cobol85Parser::ALPHABETIC_LOWER);
        break;
      }

      case Cobol85Parser::ALPHABETIC_UPPER: {
        setState(5844);
        match(Cobol85Parser::ALPHABETIC_UPPER);
        break;
      }

      case Cobol85Parser::DBCS: {
        setState(5845);
        match(Cobol85Parser::DBCS);
        break;
      }

      case Cobol85Parser::KANJI: {
        setState(5846);
        match(Cobol85Parser::KANJI);
        break;
      }

      case Cobol85Parser::ABORT:
      case Cobol85Parser::AS:
      case Cobol85Parser::ASCII:
      case Cobol85Parser::ASSOCIATED_DATA:
      case Cobol85Parser::ASSOCIATED_DATA_LENGTH:
      case Cobol85Parser::ATTRIBUTE:
      case Cobol85Parser::AUTO:
      case Cobol85Parser::AUTO_SKIP:
      case Cobol85Parser::BACKGROUND_COLOR:
      case Cobol85Parser::BACKGROUND_COLOUR:
      case Cobol85Parser::BEEP:
      case Cobol85Parser::BELL:
      case Cobol85Parser::BINARY:
      case Cobol85Parser::BIT:
      case Cobol85Parser::BLINK:
      case Cobol85Parser::BOUNDS:
      case Cobol85Parser::CAPABLE:
      case Cobol85Parser::CCSVERSION:
      case Cobol85Parser::CHANGED:
      case Cobol85Parser::CHANNEL:
      case Cobol85Parser::CLOSE_DISPOSITION:
      case Cobol85Parser::COBOL:
      case Cobol85Parser::COMMITMENT:
      case Cobol85Parser::CONTROL_POINT:
      case Cobol85Parser::CONVENTION:
      case Cobol85Parser::CRUNCH:
      case Cobol85Parser::CURSOR:
      case Cobol85Parser::DEFAULT:
      case Cobol85Parser::DEFAULT_DISPLAY:
      case Cobol85Parser::DEFINITION:
      case Cobol85Parser::DFHRESP:
      case Cobol85Parser::DFHVALUE:
      case Cobol85Parser::DISK:
      case Cobol85Parser::DONTCARE:
      case Cobol85Parser::DOUBLE:
      case Cobol85Parser::EBCDIC:
      case Cobol85Parser::EMPTY_CHECK:
      case Cobol85Parser::ENTER:
      case Cobol85Parser::ENTRY_PROCEDURE:
      case Cobol85Parser::ERASE:
      case Cobol85Parser::EOL:
      case Cobol85Parser::EOS:
      case Cobol85Parser::ESCAPE:
      case Cobol85Parser::EVENT:
      case Cobol85Parser::EXCLUSIVE:
      case Cobol85Parser::EXPORT:
      case Cobol85Parser::EXTENDED:
      case Cobol85Parser::FOREGROUND_COLOR:
      case Cobol85Parser::FOREGROUND_COLOUR:
      case Cobol85Parser::FULL:
      case Cobol85Parser::FUNCTIONNAME:
      case Cobol85Parser::FUNCTION_POINTER:
      case Cobol85Parser::GRID:
      case Cobol85Parser::HIGHLIGHT:
      case Cobol85Parser::IMPLICIT:
      case Cobol85Parser::IMPORT:
      case Cobol85Parser::INTEGER:
      case Cobol85Parser::KEPT:
      case Cobol85Parser::KEYBOARD:
      case Cobol85Parser::LANGUAGE:
      case Cobol85Parser::LB:
      case Cobol85Parser::LD:
      case Cobol85Parser::LEFTLINE:
      case Cobol85Parser::LENGTH_CHECK:
      case Cobol85Parser::LIBACCESS:
      case Cobol85Parser::LIBPARAMETER:
      case Cobol85Parser::LIBRARY:
      case Cobol85Parser::LIST:
      case Cobol85Parser::LOCAL:
      case Cobol85Parser::LONG_DATE:
      case Cobol85Parser::LONG_TIME:
      case Cobol85Parser::LOWER:
      case Cobol85Parser::LOWLIGHT:
      case Cobol85Parser::MMDDYYYY:
      case Cobol85Parser::NAMED:
      case Cobol85Parser::NATIONAL:
      case Cobol85Parser::NATIONAL_EDITED:
      case Cobol85Parser::NETWORK:
      case Cobol85Parser::NO_ECHO:
      case Cobol85Parser::NUMERIC_DATE:
      case Cobol85Parser::NUMERIC_TIME:
      case Cobol85Parser::ODT:
      case Cobol85Parser::ORDERLY:
      case Cobol85Parser::OVERLINE:
      case Cobol85Parser::OWN:
      case Cobol85Parser::PASSWORD:
      case Cobol85Parser::PORT:
      case Cobol85Parser::PRINTER:
      case Cobol85Parser::PRIVATE:
      case Cobol85Parser::PROCESS:
      case Cobol85Parser::PROGRAM:
      case Cobol85Parser::PROMPT:
      case Cobol85Parser::READER:
      case Cobol85Parser::REMOTE:
      case Cobol85Parser::REAL:
      case Cobol85Parser::RECEIVED:
      case Cobol85Parser::RECURSIVE:
      case Cobol85Parser::REF:
      case Cobol85Parser::REMOVE:
      case Cobol85Parser::REQUIRED:
      case Cobol85Parser::REVERSE_VIDEO:
      case Cobol85Parser::SAVE:
      case Cobol85Parser::SECURE:
      case Cobol85Parser::SHARED:
      case Cobol85Parser::SHAREDBYALL:
      case Cobol85Parser::SHAREDBYRUNUNIT:
      case Cobol85Parser::SHARING:
      case Cobol85Parser::SHORT_DATE:
      case Cobol85Parser::SYMBOL:
      case Cobol85Parser::TASK:
      case Cobol85Parser::THREAD:
      case Cobol85Parser::THREAD_LOCAL:
      case Cobol85Parser::TIMER:
      case Cobol85Parser::TODAYS_DATE:
      case Cobol85Parser::TODAYS_NAME:
      case Cobol85Parser::TRUNCATED:
      case Cobol85Parser::TYPEDEF:
      case Cobol85Parser::UNDERLINE:
      case Cobol85Parser::VIRTUAL:
      case Cobol85Parser::WAIT:
      case Cobol85Parser::YEAR:
      case Cobol85Parser::YYYYMMDD:
      case Cobol85Parser::YYYYDDD:
      case Cobol85Parser::ZERO_FILL:
      case Cobol85Parser::IDENTIFIER: {
        setState(5847);
        className();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConditionNameReferenceContext ------------------------------------------------------------------

Cobol85Parser::ConditionNameReferenceContext::ConditionNameReferenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::ConditionNameContext* Cobol85Parser::ConditionNameReferenceContext::conditionName() {
  return getRuleContext<Cobol85Parser::ConditionNameContext>(0);
}

std::vector<Cobol85Parser::InDataContext *> Cobol85Parser::ConditionNameReferenceContext::inData() {
  return getRuleContexts<Cobol85Parser::InDataContext>();
}

Cobol85Parser::InDataContext* Cobol85Parser::ConditionNameReferenceContext::inData(size_t i) {
  return getRuleContext<Cobol85Parser::InDataContext>(i);
}

Cobol85Parser::InFileContext* Cobol85Parser::ConditionNameReferenceContext::inFile() {
  return getRuleContext<Cobol85Parser::InFileContext>(0);
}

std::vector<Cobol85Parser::ConditionNameSubscriptReferenceContext *> Cobol85Parser::ConditionNameReferenceContext::conditionNameSubscriptReference() {
  return getRuleContexts<Cobol85Parser::ConditionNameSubscriptReferenceContext>();
}

Cobol85Parser::ConditionNameSubscriptReferenceContext* Cobol85Parser::ConditionNameReferenceContext::conditionNameSubscriptReference(size_t i) {
  return getRuleContext<Cobol85Parser::ConditionNameSubscriptReferenceContext>(i);
}

std::vector<Cobol85Parser::InMnemonicContext *> Cobol85Parser::ConditionNameReferenceContext::inMnemonic() {
  return getRuleContexts<Cobol85Parser::InMnemonicContext>();
}

Cobol85Parser::InMnemonicContext* Cobol85Parser::ConditionNameReferenceContext::inMnemonic(size_t i) {
  return getRuleContext<Cobol85Parser::InMnemonicContext>(i);
}


size_t Cobol85Parser::ConditionNameReferenceContext::getRuleIndex() const {
  return Cobol85Parser::RuleConditionNameReference;
}

void Cobol85Parser::ConditionNameReferenceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConditionNameReference(this);
}

void Cobol85Parser::ConditionNameReferenceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConditionNameReference(this);
}

Cobol85Parser::ConditionNameReferenceContext* Cobol85Parser::conditionNameReference() {
  ConditionNameReferenceContext *_localctx = _tracker.createInstance<ConditionNameReferenceContext>(_ctx, getState());
  enterRule(_localctx, 1056, Cobol85Parser::RuleConditionNameReference);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(5850);
    conditionName();
    setState(5872);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 921, _ctx)) {
    case 1: {
      setState(5854);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 917, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(5851);
          inData(); 
        }
        setState(5856);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 917, _ctx);
      }
      setState(5858);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Cobol85Parser::IN || _la == Cobol85Parser::OF) {
        setState(5857);
        inFile();
      }
      setState(5863);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == Cobol85Parser::LPARENCHAR) {
        setState(5860);
        conditionNameSubscriptReference();
        setState(5865);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 2: {
      setState(5869);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == Cobol85Parser::IN || _la == Cobol85Parser::OF) {
        setState(5866);
        inMnemonic();
        setState(5871);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConditionNameSubscriptReferenceContext ------------------------------------------------------------------

Cobol85Parser::ConditionNameSubscriptReferenceContext::ConditionNameSubscriptReferenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ConditionNameSubscriptReferenceContext::LPARENCHAR() {
  return getToken(Cobol85Parser::LPARENCHAR, 0);
}

std::vector<Cobol85Parser::Subscript_Context *> Cobol85Parser::ConditionNameSubscriptReferenceContext::subscript_() {
  return getRuleContexts<Cobol85Parser::Subscript_Context>();
}

Cobol85Parser::Subscript_Context* Cobol85Parser::ConditionNameSubscriptReferenceContext::subscript_(size_t i) {
  return getRuleContext<Cobol85Parser::Subscript_Context>(i);
}

tree::TerminalNode* Cobol85Parser::ConditionNameSubscriptReferenceContext::RPARENCHAR() {
  return getToken(Cobol85Parser::RPARENCHAR, 0);
}

std::vector<tree::TerminalNode *> Cobol85Parser::ConditionNameSubscriptReferenceContext::COMMACHAR() {
  return getTokens(Cobol85Parser::COMMACHAR);
}

tree::TerminalNode* Cobol85Parser::ConditionNameSubscriptReferenceContext::COMMACHAR(size_t i) {
  return getToken(Cobol85Parser::COMMACHAR, i);
}


size_t Cobol85Parser::ConditionNameSubscriptReferenceContext::getRuleIndex() const {
  return Cobol85Parser::RuleConditionNameSubscriptReference;
}

void Cobol85Parser::ConditionNameSubscriptReferenceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConditionNameSubscriptReference(this);
}

void Cobol85Parser::ConditionNameSubscriptReferenceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConditionNameSubscriptReference(this);
}

Cobol85Parser::ConditionNameSubscriptReferenceContext* Cobol85Parser::conditionNameSubscriptReference() {
  ConditionNameSubscriptReferenceContext *_localctx = _tracker.createInstance<ConditionNameSubscriptReferenceContext>(_ctx, getState());
  enterRule(_localctx, 1058, Cobol85Parser::RuleConditionNameSubscriptReference);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5874);
    match(Cobol85Parser::LPARENCHAR);
    setState(5875);
    subscript_();
    setState(5882);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3512999431135822370) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 8213661102500741635) != 0) || ((((_la - 138) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 138)) & 5276573893883339531) != 0) || ((((_la - 202) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 202)) & -3098194964618422267) != 0) || ((((_la - 268) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 268)) & -9202427199037528969) != 0) || ((((_la - 336) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 336)) & 4647874440372879459) != 0) || ((((_la - 401) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 401)) & 1819828109721609) != 0) || ((((_la - 466) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 466)) & -8651221362832473951) != 0) || ((((_la - 542) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 542)) & 65059) != 0)) {
      setState(5877);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Cobol85Parser::COMMACHAR) {
        setState(5876);
        match(Cobol85Parser::COMMACHAR);
      }
      setState(5879);
      subscript_();
      setState(5884);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(5885);
    match(Cobol85Parser::RPARENCHAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RelationConditionContext ------------------------------------------------------------------

Cobol85Parser::RelationConditionContext::RelationConditionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::RelationSignConditionContext* Cobol85Parser::RelationConditionContext::relationSignCondition() {
  return getRuleContext<Cobol85Parser::RelationSignConditionContext>(0);
}

Cobol85Parser::RelationArithmeticComparisonContext* Cobol85Parser::RelationConditionContext::relationArithmeticComparison() {
  return getRuleContext<Cobol85Parser::RelationArithmeticComparisonContext>(0);
}

Cobol85Parser::RelationCombinedComparisonContext* Cobol85Parser::RelationConditionContext::relationCombinedComparison() {
  return getRuleContext<Cobol85Parser::RelationCombinedComparisonContext>(0);
}


size_t Cobol85Parser::RelationConditionContext::getRuleIndex() const {
  return Cobol85Parser::RuleRelationCondition;
}

void Cobol85Parser::RelationConditionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRelationCondition(this);
}

void Cobol85Parser::RelationConditionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRelationCondition(this);
}

Cobol85Parser::RelationConditionContext* Cobol85Parser::relationCondition() {
  RelationConditionContext *_localctx = _tracker.createInstance<RelationConditionContext>(_ctx, getState());
  enterRule(_localctx, 1060, Cobol85Parser::RuleRelationCondition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(5890);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 924, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(5887);
      relationSignCondition();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(5888);
      relationArithmeticComparison();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(5889);
      relationCombinedComparison();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RelationSignConditionContext ------------------------------------------------------------------

Cobol85Parser::RelationSignConditionContext::RelationSignConditionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::ArithmeticExpressionContext* Cobol85Parser::RelationSignConditionContext::arithmeticExpression() {
  return getRuleContext<Cobol85Parser::ArithmeticExpressionContext>(0);
}

tree::TerminalNode* Cobol85Parser::RelationSignConditionContext::POSITIVE() {
  return getToken(Cobol85Parser::POSITIVE, 0);
}

tree::TerminalNode* Cobol85Parser::RelationSignConditionContext::NEGATIVE() {
  return getToken(Cobol85Parser::NEGATIVE, 0);
}

tree::TerminalNode* Cobol85Parser::RelationSignConditionContext::ZERO() {
  return getToken(Cobol85Parser::ZERO, 0);
}

tree::TerminalNode* Cobol85Parser::RelationSignConditionContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}

tree::TerminalNode* Cobol85Parser::RelationSignConditionContext::NOT() {
  return getToken(Cobol85Parser::NOT, 0);
}


size_t Cobol85Parser::RelationSignConditionContext::getRuleIndex() const {
  return Cobol85Parser::RuleRelationSignCondition;
}

void Cobol85Parser::RelationSignConditionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRelationSignCondition(this);
}

void Cobol85Parser::RelationSignConditionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRelationSignCondition(this);
}

Cobol85Parser::RelationSignConditionContext* Cobol85Parser::relationSignCondition() {
  RelationSignConditionContext *_localctx = _tracker.createInstance<RelationSignConditionContext>(_ctx, getState());
  enterRule(_localctx, 1062, Cobol85Parser::RuleRelationSignCondition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5892);
    arithmeticExpression();
    setState(5894);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::IS) {
      setState(5893);
      match(Cobol85Parser::IS);
    }
    setState(5897);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::NOT) {
      setState(5896);
      match(Cobol85Parser::NOT);
    }
    setState(5899);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::NEGATIVE

    || _la == Cobol85Parser::POSITIVE || _la == Cobol85Parser::ZERO)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RelationArithmeticComparisonContext ------------------------------------------------------------------

Cobol85Parser::RelationArithmeticComparisonContext::RelationArithmeticComparisonContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Cobol85Parser::ArithmeticExpressionContext *> Cobol85Parser::RelationArithmeticComparisonContext::arithmeticExpression() {
  return getRuleContexts<Cobol85Parser::ArithmeticExpressionContext>();
}

Cobol85Parser::ArithmeticExpressionContext* Cobol85Parser::RelationArithmeticComparisonContext::arithmeticExpression(size_t i) {
  return getRuleContext<Cobol85Parser::ArithmeticExpressionContext>(i);
}

Cobol85Parser::RelationalOperatorContext* Cobol85Parser::RelationArithmeticComparisonContext::relationalOperator() {
  return getRuleContext<Cobol85Parser::RelationalOperatorContext>(0);
}


size_t Cobol85Parser::RelationArithmeticComparisonContext::getRuleIndex() const {
  return Cobol85Parser::RuleRelationArithmeticComparison;
}

void Cobol85Parser::RelationArithmeticComparisonContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRelationArithmeticComparison(this);
}

void Cobol85Parser::RelationArithmeticComparisonContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRelationArithmeticComparison(this);
}

Cobol85Parser::RelationArithmeticComparisonContext* Cobol85Parser::relationArithmeticComparison() {
  RelationArithmeticComparisonContext *_localctx = _tracker.createInstance<RelationArithmeticComparisonContext>(_ctx, getState());
  enterRule(_localctx, 1064, Cobol85Parser::RuleRelationArithmeticComparison);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5901);
    arithmeticExpression();
    setState(5902);
    relationalOperator();
    setState(5903);
    arithmeticExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RelationCombinedComparisonContext ------------------------------------------------------------------

Cobol85Parser::RelationCombinedComparisonContext::RelationCombinedComparisonContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::ArithmeticExpressionContext* Cobol85Parser::RelationCombinedComparisonContext::arithmeticExpression() {
  return getRuleContext<Cobol85Parser::ArithmeticExpressionContext>(0);
}

Cobol85Parser::RelationalOperatorContext* Cobol85Parser::RelationCombinedComparisonContext::relationalOperator() {
  return getRuleContext<Cobol85Parser::RelationalOperatorContext>(0);
}

tree::TerminalNode* Cobol85Parser::RelationCombinedComparisonContext::LPARENCHAR() {
  return getToken(Cobol85Parser::LPARENCHAR, 0);
}

Cobol85Parser::RelationCombinedConditionContext* Cobol85Parser::RelationCombinedComparisonContext::relationCombinedCondition() {
  return getRuleContext<Cobol85Parser::RelationCombinedConditionContext>(0);
}

tree::TerminalNode* Cobol85Parser::RelationCombinedComparisonContext::RPARENCHAR() {
  return getToken(Cobol85Parser::RPARENCHAR, 0);
}


size_t Cobol85Parser::RelationCombinedComparisonContext::getRuleIndex() const {
  return Cobol85Parser::RuleRelationCombinedComparison;
}

void Cobol85Parser::RelationCombinedComparisonContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRelationCombinedComparison(this);
}

void Cobol85Parser::RelationCombinedComparisonContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRelationCombinedComparison(this);
}

Cobol85Parser::RelationCombinedComparisonContext* Cobol85Parser::relationCombinedComparison() {
  RelationCombinedComparisonContext *_localctx = _tracker.createInstance<RelationCombinedComparisonContext>(_ctx, getState());
  enterRule(_localctx, 1066, Cobol85Parser::RuleRelationCombinedComparison);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5905);
    arithmeticExpression();
    setState(5906);
    relationalOperator();
    setState(5907);
    match(Cobol85Parser::LPARENCHAR);
    setState(5908);
    relationCombinedCondition();
    setState(5909);
    match(Cobol85Parser::RPARENCHAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RelationCombinedConditionContext ------------------------------------------------------------------

Cobol85Parser::RelationCombinedConditionContext::RelationCombinedConditionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Cobol85Parser::ArithmeticExpressionContext *> Cobol85Parser::RelationCombinedConditionContext::arithmeticExpression() {
  return getRuleContexts<Cobol85Parser::ArithmeticExpressionContext>();
}

Cobol85Parser::ArithmeticExpressionContext* Cobol85Parser::RelationCombinedConditionContext::arithmeticExpression(size_t i) {
  return getRuleContext<Cobol85Parser::ArithmeticExpressionContext>(i);
}

std::vector<tree::TerminalNode *> Cobol85Parser::RelationCombinedConditionContext::AND() {
  return getTokens(Cobol85Parser::AND);
}

tree::TerminalNode* Cobol85Parser::RelationCombinedConditionContext::AND(size_t i) {
  return getToken(Cobol85Parser::AND, i);
}

std::vector<tree::TerminalNode *> Cobol85Parser::RelationCombinedConditionContext::OR() {
  return getTokens(Cobol85Parser::OR);
}

tree::TerminalNode* Cobol85Parser::RelationCombinedConditionContext::OR(size_t i) {
  return getToken(Cobol85Parser::OR, i);
}


size_t Cobol85Parser::RelationCombinedConditionContext::getRuleIndex() const {
  return Cobol85Parser::RuleRelationCombinedCondition;
}

void Cobol85Parser::RelationCombinedConditionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRelationCombinedCondition(this);
}

void Cobol85Parser::RelationCombinedConditionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRelationCombinedCondition(this);
}

Cobol85Parser::RelationCombinedConditionContext* Cobol85Parser::relationCombinedCondition() {
  RelationCombinedConditionContext *_localctx = _tracker.createInstance<RelationCombinedConditionContext>(_ctx, getState());
  enterRule(_localctx, 1068, Cobol85Parser::RuleRelationCombinedCondition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5911);
    arithmeticExpression();
    setState(5914); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(5912);
      _la = _input->LA(1);
      if (!(_la == Cobol85Parser::AND || _la == Cobol85Parser::OR)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(5913);
      arithmeticExpression();
      setState(5916); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == Cobol85Parser::AND || _la == Cobol85Parser::OR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RelationalOperatorContext ------------------------------------------------------------------

Cobol85Parser::RelationalOperatorContext::RelationalOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::RelationalOperatorContext::NOTEQUALCHAR() {
  return getToken(Cobol85Parser::NOTEQUALCHAR, 0);
}

tree::TerminalNode* Cobol85Parser::RelationalOperatorContext::GREATER() {
  return getToken(Cobol85Parser::GREATER, 0);
}

tree::TerminalNode* Cobol85Parser::RelationalOperatorContext::OR() {
  return getToken(Cobol85Parser::OR, 0);
}

tree::TerminalNode* Cobol85Parser::RelationalOperatorContext::EQUAL() {
  return getToken(Cobol85Parser::EQUAL, 0);
}

tree::TerminalNode* Cobol85Parser::RelationalOperatorContext::MORETHANOREQUAL() {
  return getToken(Cobol85Parser::MORETHANOREQUAL, 0);
}

tree::TerminalNode* Cobol85Parser::RelationalOperatorContext::LESS() {
  return getToken(Cobol85Parser::LESS, 0);
}

tree::TerminalNode* Cobol85Parser::RelationalOperatorContext::LESSTHANOREQUAL() {
  return getToken(Cobol85Parser::LESSTHANOREQUAL, 0);
}

tree::TerminalNode* Cobol85Parser::RelationalOperatorContext::IS() {
  return getToken(Cobol85Parser::IS, 0);
}

tree::TerminalNode* Cobol85Parser::RelationalOperatorContext::ARE() {
  return getToken(Cobol85Parser::ARE, 0);
}

tree::TerminalNode* Cobol85Parser::RelationalOperatorContext::MORETHANCHAR() {
  return getToken(Cobol85Parser::MORETHANCHAR, 0);
}

tree::TerminalNode* Cobol85Parser::RelationalOperatorContext::LESSTHANCHAR() {
  return getToken(Cobol85Parser::LESSTHANCHAR, 0);
}

tree::TerminalNode* Cobol85Parser::RelationalOperatorContext::EQUALCHAR() {
  return getToken(Cobol85Parser::EQUALCHAR, 0);
}

tree::TerminalNode* Cobol85Parser::RelationalOperatorContext::NOT() {
  return getToken(Cobol85Parser::NOT, 0);
}

tree::TerminalNode* Cobol85Parser::RelationalOperatorContext::THAN() {
  return getToken(Cobol85Parser::THAN, 0);
}

tree::TerminalNode* Cobol85Parser::RelationalOperatorContext::TO() {
  return getToken(Cobol85Parser::TO, 0);
}


size_t Cobol85Parser::RelationalOperatorContext::getRuleIndex() const {
  return Cobol85Parser::RuleRelationalOperator;
}

void Cobol85Parser::RelationalOperatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRelationalOperator(this);
}

void Cobol85Parser::RelationalOperatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRelationalOperator(this);
}

Cobol85Parser::RelationalOperatorContext* Cobol85Parser::relationalOperator() {
  RelationalOperatorContext *_localctx = _tracker.createInstance<RelationalOperatorContext>(_ctx, getState());
  enterRule(_localctx, 1070, Cobol85Parser::RuleRelationalOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5919);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::ARE || _la == Cobol85Parser::IS) {
      setState(5918);
      _la = _input->LA(1);
      if (!(_la == Cobol85Parser::ARE || _la == Cobol85Parser::IS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(5962);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 938, _ctx)) {
    case 1: {
      setState(5922);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Cobol85Parser::NOT) {
        setState(5921);
        match(Cobol85Parser::NOT);
      }
      setState(5939);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case Cobol85Parser::GREATER: {
          setState(5924);
          match(Cobol85Parser::GREATER);
          setState(5926);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == Cobol85Parser::THAN) {
            setState(5925);
            match(Cobol85Parser::THAN);
          }
          break;
        }

        case Cobol85Parser::MORETHANCHAR: {
          setState(5928);
          match(Cobol85Parser::MORETHANCHAR);
          break;
        }

        case Cobol85Parser::LESS: {
          setState(5929);
          match(Cobol85Parser::LESS);
          setState(5931);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == Cobol85Parser::THAN) {
            setState(5930);
            match(Cobol85Parser::THAN);
          }
          break;
        }

        case Cobol85Parser::LESSTHANCHAR: {
          setState(5933);
          match(Cobol85Parser::LESSTHANCHAR);
          break;
        }

        case Cobol85Parser::EQUAL: {
          setState(5934);
          match(Cobol85Parser::EQUAL);
          setState(5936);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == Cobol85Parser::TO) {
            setState(5935);
            match(Cobol85Parser::TO);
          }
          break;
        }

        case Cobol85Parser::EQUALCHAR: {
          setState(5938);
          match(Cobol85Parser::EQUALCHAR);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 2: {
      setState(5941);
      match(Cobol85Parser::NOTEQUALCHAR);
      break;
    }

    case 3: {
      setState(5942);
      match(Cobol85Parser::GREATER);
      setState(5944);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Cobol85Parser::THAN) {
        setState(5943);
        match(Cobol85Parser::THAN);
      }
      setState(5946);
      match(Cobol85Parser::OR);
      setState(5947);
      match(Cobol85Parser::EQUAL);
      setState(5949);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Cobol85Parser::TO) {
        setState(5948);
        match(Cobol85Parser::TO);
      }
      break;
    }

    case 4: {
      setState(5951);
      match(Cobol85Parser::MORETHANOREQUAL);
      break;
    }

    case 5: {
      setState(5952);
      match(Cobol85Parser::LESS);
      setState(5954);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Cobol85Parser::THAN) {
        setState(5953);
        match(Cobol85Parser::THAN);
      }
      setState(5956);
      match(Cobol85Parser::OR);
      setState(5957);
      match(Cobol85Parser::EQUAL);
      setState(5959);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Cobol85Parser::TO) {
        setState(5958);
        match(Cobol85Parser::TO);
      }
      break;
    }

    case 6: {
      setState(5961);
      match(Cobol85Parser::LESSTHANOREQUAL);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AbbreviationContext ------------------------------------------------------------------

Cobol85Parser::AbbreviationContext::AbbreviationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::ArithmeticExpressionContext* Cobol85Parser::AbbreviationContext::arithmeticExpression() {
  return getRuleContext<Cobol85Parser::ArithmeticExpressionContext>(0);
}

tree::TerminalNode* Cobol85Parser::AbbreviationContext::LPARENCHAR() {
  return getToken(Cobol85Parser::LPARENCHAR, 0);
}

Cobol85Parser::AbbreviationContext* Cobol85Parser::AbbreviationContext::abbreviation() {
  return getRuleContext<Cobol85Parser::AbbreviationContext>(0);
}

tree::TerminalNode* Cobol85Parser::AbbreviationContext::RPARENCHAR() {
  return getToken(Cobol85Parser::RPARENCHAR, 0);
}

tree::TerminalNode* Cobol85Parser::AbbreviationContext::NOT() {
  return getToken(Cobol85Parser::NOT, 0);
}

Cobol85Parser::RelationalOperatorContext* Cobol85Parser::AbbreviationContext::relationalOperator() {
  return getRuleContext<Cobol85Parser::RelationalOperatorContext>(0);
}


size_t Cobol85Parser::AbbreviationContext::getRuleIndex() const {
  return Cobol85Parser::RuleAbbreviation;
}

void Cobol85Parser::AbbreviationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAbbreviation(this);
}

void Cobol85Parser::AbbreviationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAbbreviation(this);
}

Cobol85Parser::AbbreviationContext* Cobol85Parser::abbreviation() {
  AbbreviationContext *_localctx = _tracker.createInstance<AbbreviationContext>(_ctx, getState());
  enterRule(_localctx, 1072, Cobol85Parser::RuleAbbreviation);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5965);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 939, _ctx)) {
    case 1: {
      setState(5964);
      match(Cobol85Parser::NOT);
      break;
    }

    default:
      break;
    }
    setState(5968);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Cobol85Parser::ARE || _la == Cobol85Parser::EQUAL

    || _la == Cobol85Parser::GREATER || ((((_la - 254) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 254)) & 288230376151842817) != 0) || ((((_la - 536) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 536)) & 1841) != 0)) {
      setState(5967);
      relationalOperator();
    }
    setState(5976);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 941, _ctx)) {
    case 1: {
      setState(5970);
      arithmeticExpression();
      break;
    }

    case 2: {
      setState(5971);
      match(Cobol85Parser::LPARENCHAR);
      setState(5972);
      arithmeticExpression();
      setState(5973);
      abbreviation();
      setState(5974);
      match(Cobol85Parser::RPARENCHAR);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdentifierContext ------------------------------------------------------------------

Cobol85Parser::IdentifierContext::IdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::QualifiedDataNameContext* Cobol85Parser::IdentifierContext::qualifiedDataName() {
  return getRuleContext<Cobol85Parser::QualifiedDataNameContext>(0);
}

Cobol85Parser::TableCallContext* Cobol85Parser::IdentifierContext::tableCall() {
  return getRuleContext<Cobol85Parser::TableCallContext>(0);
}

Cobol85Parser::FunctionCallContext* Cobol85Parser::IdentifierContext::functionCall() {
  return getRuleContext<Cobol85Parser::FunctionCallContext>(0);
}

Cobol85Parser::SpecialRegisterContext* Cobol85Parser::IdentifierContext::specialRegister() {
  return getRuleContext<Cobol85Parser::SpecialRegisterContext>(0);
}


size_t Cobol85Parser::IdentifierContext::getRuleIndex() const {
  return Cobol85Parser::RuleIdentifier;
}

void Cobol85Parser::IdentifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIdentifier(this);
}

void Cobol85Parser::IdentifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIdentifier(this);
}

Cobol85Parser::IdentifierContext* Cobol85Parser::identifier() {
  IdentifierContext *_localctx = _tracker.createInstance<IdentifierContext>(_ctx, getState());
  enterRule(_localctx, 1074, Cobol85Parser::RuleIdentifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(5982);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 942, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(5978);
      qualifiedDataName();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(5979);
      tableCall();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(5980);
      functionCall();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(5981);
      specialRegister();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TableCallContext ------------------------------------------------------------------

Cobol85Parser::TableCallContext::TableCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::QualifiedDataNameContext* Cobol85Parser::TableCallContext::qualifiedDataName() {
  return getRuleContext<Cobol85Parser::QualifiedDataNameContext>(0);
}

std::vector<tree::TerminalNode *> Cobol85Parser::TableCallContext::LPARENCHAR() {
  return getTokens(Cobol85Parser::LPARENCHAR);
}

tree::TerminalNode* Cobol85Parser::TableCallContext::LPARENCHAR(size_t i) {
  return getToken(Cobol85Parser::LPARENCHAR, i);
}

std::vector<Cobol85Parser::Subscript_Context *> Cobol85Parser::TableCallContext::subscript_() {
  return getRuleContexts<Cobol85Parser::Subscript_Context>();
}

Cobol85Parser::Subscript_Context* Cobol85Parser::TableCallContext::subscript_(size_t i) {
  return getRuleContext<Cobol85Parser::Subscript_Context>(i);
}

std::vector<tree::TerminalNode *> Cobol85Parser::TableCallContext::RPARENCHAR() {
  return getTokens(Cobol85Parser::RPARENCHAR);
}

tree::TerminalNode* Cobol85Parser::TableCallContext::RPARENCHAR(size_t i) {
  return getToken(Cobol85Parser::RPARENCHAR, i);
}

Cobol85Parser::ReferenceModifierContext* Cobol85Parser::TableCallContext::referenceModifier() {
  return getRuleContext<Cobol85Parser::ReferenceModifierContext>(0);
}

std::vector<tree::TerminalNode *> Cobol85Parser::TableCallContext::COMMACHAR() {
  return getTokens(Cobol85Parser::COMMACHAR);
}

tree::TerminalNode* Cobol85Parser::TableCallContext::COMMACHAR(size_t i) {
  return getToken(Cobol85Parser::COMMACHAR, i);
}


size_t Cobol85Parser::TableCallContext::getRuleIndex() const {
  return Cobol85Parser::RuleTableCall;
}

void Cobol85Parser::TableCallContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTableCall(this);
}

void Cobol85Parser::TableCallContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTableCall(this);
}

Cobol85Parser::TableCallContext* Cobol85Parser::tableCall() {
  TableCallContext *_localctx = _tracker.createInstance<TableCallContext>(_ctx, getState());
  enterRule(_localctx, 1076, Cobol85Parser::RuleTableCall);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(5984);
    qualifiedDataName();
    setState(6000);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 945, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(5985);
        match(Cobol85Parser::LPARENCHAR);
        setState(5986);
        subscript_();
        setState(5993);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 3512999431135822370) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 68)) & 8213661102500741635) != 0) || ((((_la - 138) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 138)) & 5276573893883339531) != 0) || ((((_la - 202) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 202)) & -3098194964618422267) != 0) || ((((_la - 268) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 268)) & -9202427199037528969) != 0) || ((((_la - 336) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 336)) & 4647874440372879459) != 0) || ((((_la - 401) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 401)) & 1819828109721609) != 0) || ((((_la - 466) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 466)) & -8651221362832473951) != 0) || ((((_la - 542) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 542)) & 65059) != 0)) {
          setState(5988);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == Cobol85Parser::COMMACHAR) {
            setState(5987);
            match(Cobol85Parser::COMMACHAR);
          }
          setState(5990);
          subscript_();
          setState(5995);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(5996);
        match(Cobol85Parser::RPARENCHAR); 
      }
      setState(6002);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 945, _ctx);
    }
    setState(6004);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 946, _ctx)) {
    case 1: {
      setState(6003);
      referenceModifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionCallContext ------------------------------------------------------------------

Cobol85Parser::FunctionCallContext::FunctionCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::FunctionCallContext::FUNCTION() {
  return getToken(Cobol85Parser::FUNCTION, 0);
}

Cobol85Parser::FunctionNameContext* Cobol85Parser::FunctionCallContext::functionName() {
  return getRuleContext<Cobol85Parser::FunctionNameContext>(0);
}

std::vector<tree::TerminalNode *> Cobol85Parser::FunctionCallContext::LPARENCHAR() {
  return getTokens(Cobol85Parser::LPARENCHAR);
}

tree::TerminalNode* Cobol85Parser::FunctionCallContext::LPARENCHAR(size_t i) {
  return getToken(Cobol85Parser::LPARENCHAR, i);
}

std::vector<Cobol85Parser::ArgumentContext *> Cobol85Parser::FunctionCallContext::argument() {
  return getRuleContexts<Cobol85Parser::ArgumentContext>();
}

Cobol85Parser::ArgumentContext* Cobol85Parser::FunctionCallContext::argument(size_t i) {
  return getRuleContext<Cobol85Parser::ArgumentContext>(i);
}

std::vector<tree::TerminalNode *> Cobol85Parser::FunctionCallContext::RPARENCHAR() {
  return getTokens(Cobol85Parser::RPARENCHAR);
}

tree::TerminalNode* Cobol85Parser::FunctionCallContext::RPARENCHAR(size_t i) {
  return getToken(Cobol85Parser::RPARENCHAR, i);
}

Cobol85Parser::ReferenceModifierContext* Cobol85Parser::FunctionCallContext::referenceModifier() {
  return getRuleContext<Cobol85Parser::ReferenceModifierContext>(0);
}

std::vector<tree::TerminalNode *> Cobol85Parser::FunctionCallContext::COMMACHAR() {
  return getTokens(Cobol85Parser::COMMACHAR);
}

tree::TerminalNode* Cobol85Parser::FunctionCallContext::COMMACHAR(size_t i) {
  return getToken(Cobol85Parser::COMMACHAR, i);
}


size_t Cobol85Parser::FunctionCallContext::getRuleIndex() const {
  return Cobol85Parser::RuleFunctionCall;
}

void Cobol85Parser::FunctionCallContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunctionCall(this);
}

void Cobol85Parser::FunctionCallContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunctionCall(this);
}

Cobol85Parser::FunctionCallContext* Cobol85Parser::functionCall() {
  FunctionCallContext *_localctx = _tracker.createInstance<FunctionCallContext>(_ctx, getState());
  enterRule(_localctx, 1078, Cobol85Parser::RuleFunctionCall);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(6006);
    match(Cobol85Parser::FUNCTION);
    setState(6007);
    functionName();
    setState(6023);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 949, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(6008);
        match(Cobol85Parser::LPARENCHAR);
        setState(6009);
        argument();
        setState(6016);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 3512999431135822370) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 68)) & 8213661102500741635) != 0) || ((((_la - 138) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 138)) & 5276573893883339531) != 0) || ((((_la - 202) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 202)) & -3098194964618422267) != 0) || ((((_la - 268) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 268)) & -9202427199037528969) != 0) || ((((_la - 336) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 336)) & 4647874440372879459) != 0) || ((((_la - 401) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 401)) & 1819828109721609) != 0) || ((((_la - 466) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 466)) & -8651221362832473951) != 0) || ((((_la - 542) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 542)) & 65059) != 0)) {
          setState(6011);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == Cobol85Parser::COMMACHAR) {
            setState(6010);
            match(Cobol85Parser::COMMACHAR);
          }
          setState(6013);
          argument();
          setState(6018);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(6019);
        match(Cobol85Parser::RPARENCHAR); 
      }
      setState(6025);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 949, _ctx);
    }
    setState(6027);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 950, _ctx)) {
    case 1: {
      setState(6026);
      referenceModifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReferenceModifierContext ------------------------------------------------------------------

Cobol85Parser::ReferenceModifierContext::ReferenceModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ReferenceModifierContext::LPARENCHAR() {
  return getToken(Cobol85Parser::LPARENCHAR, 0);
}

Cobol85Parser::CharacterPositionContext* Cobol85Parser::ReferenceModifierContext::characterPosition() {
  return getRuleContext<Cobol85Parser::CharacterPositionContext>(0);
}

tree::TerminalNode* Cobol85Parser::ReferenceModifierContext::COLONCHAR() {
  return getToken(Cobol85Parser::COLONCHAR, 0);
}

tree::TerminalNode* Cobol85Parser::ReferenceModifierContext::RPARENCHAR() {
  return getToken(Cobol85Parser::RPARENCHAR, 0);
}

Cobol85Parser::LengthContext* Cobol85Parser::ReferenceModifierContext::length() {
  return getRuleContext<Cobol85Parser::LengthContext>(0);
}


size_t Cobol85Parser::ReferenceModifierContext::getRuleIndex() const {
  return Cobol85Parser::RuleReferenceModifier;
}

void Cobol85Parser::ReferenceModifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReferenceModifier(this);
}

void Cobol85Parser::ReferenceModifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReferenceModifier(this);
}

Cobol85Parser::ReferenceModifierContext* Cobol85Parser::referenceModifier() {
  ReferenceModifierContext *_localctx = _tracker.createInstance<ReferenceModifierContext>(_ctx, getState());
  enterRule(_localctx, 1080, Cobol85Parser::RuleReferenceModifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6029);
    match(Cobol85Parser::LPARENCHAR);
    setState(6030);
    characterPosition();
    setState(6031);
    match(Cobol85Parser::COLONCHAR);
    setState(6033);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3512999431135822370) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 8213661102500741635) != 0) || ((((_la - 138) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 138)) & 5276573893883339531) != 0) || ((((_la - 202) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 202)) & -3098194964618422267) != 0) || ((((_la - 268) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 268)) & -9202427199037528969) != 0) || ((((_la - 336) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 336)) & 4647874440372879459) != 0) || ((((_la - 401) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 401)) & 1819828109721609) != 0) || ((((_la - 466) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 466)) & 572150674022301857) != 0) || ((((_la - 542) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 542)) & 65059) != 0)) {
      setState(6032);
      length();
    }
    setState(6035);
    match(Cobol85Parser::RPARENCHAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CharacterPositionContext ------------------------------------------------------------------

Cobol85Parser::CharacterPositionContext::CharacterPositionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::ArithmeticExpressionContext* Cobol85Parser::CharacterPositionContext::arithmeticExpression() {
  return getRuleContext<Cobol85Parser::ArithmeticExpressionContext>(0);
}


size_t Cobol85Parser::CharacterPositionContext::getRuleIndex() const {
  return Cobol85Parser::RuleCharacterPosition;
}

void Cobol85Parser::CharacterPositionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCharacterPosition(this);
}

void Cobol85Parser::CharacterPositionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCharacterPosition(this);
}

Cobol85Parser::CharacterPositionContext* Cobol85Parser::characterPosition() {
  CharacterPositionContext *_localctx = _tracker.createInstance<CharacterPositionContext>(_ctx, getState());
  enterRule(_localctx, 1082, Cobol85Parser::RuleCharacterPosition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6037);
    arithmeticExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LengthContext ------------------------------------------------------------------

Cobol85Parser::LengthContext::LengthContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::ArithmeticExpressionContext* Cobol85Parser::LengthContext::arithmeticExpression() {
  return getRuleContext<Cobol85Parser::ArithmeticExpressionContext>(0);
}


size_t Cobol85Parser::LengthContext::getRuleIndex() const {
  return Cobol85Parser::RuleLength;
}

void Cobol85Parser::LengthContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLength(this);
}

void Cobol85Parser::LengthContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLength(this);
}

Cobol85Parser::LengthContext* Cobol85Parser::length() {
  LengthContext *_localctx = _tracker.createInstance<LengthContext>(_ctx, getState());
  enterRule(_localctx, 1084, Cobol85Parser::RuleLength);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6039);
    arithmeticExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Subscript_Context ------------------------------------------------------------------

Cobol85Parser::Subscript_Context::Subscript_Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::Subscript_Context::ALL() {
  return getToken(Cobol85Parser::ALL, 0);
}

Cobol85Parser::IntegerLiteralContext* Cobol85Parser::Subscript_Context::integerLiteral() {
  return getRuleContext<Cobol85Parser::IntegerLiteralContext>(0);
}

Cobol85Parser::QualifiedDataNameContext* Cobol85Parser::Subscript_Context::qualifiedDataName() {
  return getRuleContext<Cobol85Parser::QualifiedDataNameContext>(0);
}

Cobol85Parser::IndexNameContext* Cobol85Parser::Subscript_Context::indexName() {
  return getRuleContext<Cobol85Parser::IndexNameContext>(0);
}

Cobol85Parser::ArithmeticExpressionContext* Cobol85Parser::Subscript_Context::arithmeticExpression() {
  return getRuleContext<Cobol85Parser::ArithmeticExpressionContext>(0);
}


size_t Cobol85Parser::Subscript_Context::getRuleIndex() const {
  return Cobol85Parser::RuleSubscript_;
}

void Cobol85Parser::Subscript_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubscript_(this);
}

void Cobol85Parser::Subscript_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubscript_(this);
}

Cobol85Parser::Subscript_Context* Cobol85Parser::subscript_() {
  Subscript_Context *_localctx = _tracker.createInstance<Subscript_Context>(_ctx, getState());
  enterRule(_localctx, 1086, Cobol85Parser::RuleSubscript_);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(6052);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 954, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(6041);
      match(Cobol85Parser::ALL);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(6042);
      integerLiteral();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(6043);
      qualifiedDataName();
      setState(6045);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 952, _ctx)) {
      case 1: {
        setState(6044);
        integerLiteral();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(6047);
      indexName();
      setState(6049);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 953, _ctx)) {
      case 1: {
        setState(6048);
        integerLiteral();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(6051);
      arithmeticExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArgumentContext ------------------------------------------------------------------

Cobol85Parser::ArgumentContext::ArgumentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::LiteralContext* Cobol85Parser::ArgumentContext::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}

Cobol85Parser::IdentifierContext* Cobol85Parser::ArgumentContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

Cobol85Parser::QualifiedDataNameContext* Cobol85Parser::ArgumentContext::qualifiedDataName() {
  return getRuleContext<Cobol85Parser::QualifiedDataNameContext>(0);
}

Cobol85Parser::IntegerLiteralContext* Cobol85Parser::ArgumentContext::integerLiteral() {
  return getRuleContext<Cobol85Parser::IntegerLiteralContext>(0);
}

Cobol85Parser::IndexNameContext* Cobol85Parser::ArgumentContext::indexName() {
  return getRuleContext<Cobol85Parser::IndexNameContext>(0);
}

Cobol85Parser::ArithmeticExpressionContext* Cobol85Parser::ArgumentContext::arithmeticExpression() {
  return getRuleContext<Cobol85Parser::ArithmeticExpressionContext>(0);
}


size_t Cobol85Parser::ArgumentContext::getRuleIndex() const {
  return Cobol85Parser::RuleArgument;
}

void Cobol85Parser::ArgumentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArgument(this);
}

void Cobol85Parser::ArgumentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArgument(this);
}

Cobol85Parser::ArgumentContext* Cobol85Parser::argument() {
  ArgumentContext *_localctx = _tracker.createInstance<ArgumentContext>(_ctx, getState());
  enterRule(_localctx, 1088, Cobol85Parser::RuleArgument);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(6065);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 957, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(6054);
      literal();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(6055);
      identifier();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(6056);
      qualifiedDataName();
      setState(6058);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 955, _ctx)) {
      case 1: {
        setState(6057);
        integerLiteral();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(6060);
      indexName();
      setState(6062);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 956, _ctx)) {
      case 1: {
        setState(6061);
        integerLiteral();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(6064);
      arithmeticExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QualifiedDataNameContext ------------------------------------------------------------------

Cobol85Parser::QualifiedDataNameContext::QualifiedDataNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::QualifiedDataNameFormat1Context* Cobol85Parser::QualifiedDataNameContext::qualifiedDataNameFormat1() {
  return getRuleContext<Cobol85Parser::QualifiedDataNameFormat1Context>(0);
}

Cobol85Parser::QualifiedDataNameFormat2Context* Cobol85Parser::QualifiedDataNameContext::qualifiedDataNameFormat2() {
  return getRuleContext<Cobol85Parser::QualifiedDataNameFormat2Context>(0);
}

Cobol85Parser::QualifiedDataNameFormat3Context* Cobol85Parser::QualifiedDataNameContext::qualifiedDataNameFormat3() {
  return getRuleContext<Cobol85Parser::QualifiedDataNameFormat3Context>(0);
}

Cobol85Parser::QualifiedDataNameFormat4Context* Cobol85Parser::QualifiedDataNameContext::qualifiedDataNameFormat4() {
  return getRuleContext<Cobol85Parser::QualifiedDataNameFormat4Context>(0);
}


size_t Cobol85Parser::QualifiedDataNameContext::getRuleIndex() const {
  return Cobol85Parser::RuleQualifiedDataName;
}

void Cobol85Parser::QualifiedDataNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQualifiedDataName(this);
}

void Cobol85Parser::QualifiedDataNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQualifiedDataName(this);
}

Cobol85Parser::QualifiedDataNameContext* Cobol85Parser::qualifiedDataName() {
  QualifiedDataNameContext *_localctx = _tracker.createInstance<QualifiedDataNameContext>(_ctx, getState());
  enterRule(_localctx, 1090, Cobol85Parser::RuleQualifiedDataName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(6071);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 958, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(6067);
      qualifiedDataNameFormat1();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(6068);
      qualifiedDataNameFormat2();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(6069);
      qualifiedDataNameFormat3();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(6070);
      qualifiedDataNameFormat4();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QualifiedDataNameFormat1Context ------------------------------------------------------------------

Cobol85Parser::QualifiedDataNameFormat1Context::QualifiedDataNameFormat1Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::DataNameContext* Cobol85Parser::QualifiedDataNameFormat1Context::dataName() {
  return getRuleContext<Cobol85Parser::DataNameContext>(0);
}

Cobol85Parser::ConditionNameContext* Cobol85Parser::QualifiedDataNameFormat1Context::conditionName() {
  return getRuleContext<Cobol85Parser::ConditionNameContext>(0);
}

Cobol85Parser::InFileContext* Cobol85Parser::QualifiedDataNameFormat1Context::inFile() {
  return getRuleContext<Cobol85Parser::InFileContext>(0);
}

std::vector<Cobol85Parser::QualifiedInDataContext *> Cobol85Parser::QualifiedDataNameFormat1Context::qualifiedInData() {
  return getRuleContexts<Cobol85Parser::QualifiedInDataContext>();
}

Cobol85Parser::QualifiedInDataContext* Cobol85Parser::QualifiedDataNameFormat1Context::qualifiedInData(size_t i) {
  return getRuleContext<Cobol85Parser::QualifiedInDataContext>(i);
}


size_t Cobol85Parser::QualifiedDataNameFormat1Context::getRuleIndex() const {
  return Cobol85Parser::RuleQualifiedDataNameFormat1;
}

void Cobol85Parser::QualifiedDataNameFormat1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQualifiedDataNameFormat1(this);
}

void Cobol85Parser::QualifiedDataNameFormat1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQualifiedDataNameFormat1(this);
}

Cobol85Parser::QualifiedDataNameFormat1Context* Cobol85Parser::qualifiedDataNameFormat1() {
  QualifiedDataNameFormat1Context *_localctx = _tracker.createInstance<QualifiedDataNameFormat1Context>(_ctx, getState());
  enterRule(_localctx, 1092, Cobol85Parser::RuleQualifiedDataNameFormat1);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(6075);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 959, _ctx)) {
    case 1: {
      setState(6073);
      dataName();
      break;
    }

    case 2: {
      setState(6074);
      conditionName();
      break;
    }

    default:
      break;
    }
    setState(6086);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 962, _ctx)) {
    case 1: {
      setState(6078); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(6077);
                qualifiedInData();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(6080); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 960, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      setState(6083);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 961, _ctx)) {
      case 1: {
        setState(6082);
        inFile();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      setState(6085);
      inFile();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QualifiedDataNameFormat2Context ------------------------------------------------------------------

Cobol85Parser::QualifiedDataNameFormat2Context::QualifiedDataNameFormat2Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::ParagraphNameContext* Cobol85Parser::QualifiedDataNameFormat2Context::paragraphName() {
  return getRuleContext<Cobol85Parser::ParagraphNameContext>(0);
}

Cobol85Parser::InSectionContext* Cobol85Parser::QualifiedDataNameFormat2Context::inSection() {
  return getRuleContext<Cobol85Parser::InSectionContext>(0);
}


size_t Cobol85Parser::QualifiedDataNameFormat2Context::getRuleIndex() const {
  return Cobol85Parser::RuleQualifiedDataNameFormat2;
}

void Cobol85Parser::QualifiedDataNameFormat2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQualifiedDataNameFormat2(this);
}

void Cobol85Parser::QualifiedDataNameFormat2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQualifiedDataNameFormat2(this);
}

Cobol85Parser::QualifiedDataNameFormat2Context* Cobol85Parser::qualifiedDataNameFormat2() {
  QualifiedDataNameFormat2Context *_localctx = _tracker.createInstance<QualifiedDataNameFormat2Context>(_ctx, getState());
  enterRule(_localctx, 1094, Cobol85Parser::RuleQualifiedDataNameFormat2);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6088);
    paragraphName();
    setState(6089);
    inSection();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QualifiedDataNameFormat3Context ------------------------------------------------------------------

Cobol85Parser::QualifiedDataNameFormat3Context::QualifiedDataNameFormat3Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::TextNameContext* Cobol85Parser::QualifiedDataNameFormat3Context::textName() {
  return getRuleContext<Cobol85Parser::TextNameContext>(0);
}

Cobol85Parser::InLibraryContext* Cobol85Parser::QualifiedDataNameFormat3Context::inLibrary() {
  return getRuleContext<Cobol85Parser::InLibraryContext>(0);
}


size_t Cobol85Parser::QualifiedDataNameFormat3Context::getRuleIndex() const {
  return Cobol85Parser::RuleQualifiedDataNameFormat3;
}

void Cobol85Parser::QualifiedDataNameFormat3Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQualifiedDataNameFormat3(this);
}

void Cobol85Parser::QualifiedDataNameFormat3Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQualifiedDataNameFormat3(this);
}

Cobol85Parser::QualifiedDataNameFormat3Context* Cobol85Parser::qualifiedDataNameFormat3() {
  QualifiedDataNameFormat3Context *_localctx = _tracker.createInstance<QualifiedDataNameFormat3Context>(_ctx, getState());
  enterRule(_localctx, 1096, Cobol85Parser::RuleQualifiedDataNameFormat3);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6091);
    textName();
    setState(6092);
    inLibrary();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QualifiedDataNameFormat4Context ------------------------------------------------------------------

Cobol85Parser::QualifiedDataNameFormat4Context::QualifiedDataNameFormat4Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::QualifiedDataNameFormat4Context::LINAGE_COUNTER() {
  return getToken(Cobol85Parser::LINAGE_COUNTER, 0);
}

Cobol85Parser::InFileContext* Cobol85Parser::QualifiedDataNameFormat4Context::inFile() {
  return getRuleContext<Cobol85Parser::InFileContext>(0);
}


size_t Cobol85Parser::QualifiedDataNameFormat4Context::getRuleIndex() const {
  return Cobol85Parser::RuleQualifiedDataNameFormat4;
}

void Cobol85Parser::QualifiedDataNameFormat4Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQualifiedDataNameFormat4(this);
}

void Cobol85Parser::QualifiedDataNameFormat4Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQualifiedDataNameFormat4(this);
}

Cobol85Parser::QualifiedDataNameFormat4Context* Cobol85Parser::qualifiedDataNameFormat4() {
  QualifiedDataNameFormat4Context *_localctx = _tracker.createInstance<QualifiedDataNameFormat4Context>(_ctx, getState());
  enterRule(_localctx, 1098, Cobol85Parser::RuleQualifiedDataNameFormat4);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6094);
    match(Cobol85Parser::LINAGE_COUNTER);
    setState(6095);
    inFile();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QualifiedInDataContext ------------------------------------------------------------------

Cobol85Parser::QualifiedInDataContext::QualifiedInDataContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::InDataContext* Cobol85Parser::QualifiedInDataContext::inData() {
  return getRuleContext<Cobol85Parser::InDataContext>(0);
}

Cobol85Parser::InTableContext* Cobol85Parser::QualifiedInDataContext::inTable() {
  return getRuleContext<Cobol85Parser::InTableContext>(0);
}


size_t Cobol85Parser::QualifiedInDataContext::getRuleIndex() const {
  return Cobol85Parser::RuleQualifiedInData;
}

void Cobol85Parser::QualifiedInDataContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQualifiedInData(this);
}

void Cobol85Parser::QualifiedInDataContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQualifiedInData(this);
}

Cobol85Parser::QualifiedInDataContext* Cobol85Parser::qualifiedInData() {
  QualifiedInDataContext *_localctx = _tracker.createInstance<QualifiedInDataContext>(_ctx, getState());
  enterRule(_localctx, 1100, Cobol85Parser::RuleQualifiedInData);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(6099);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 963, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(6097);
      inData();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(6098);
      inTable();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InDataContext ------------------------------------------------------------------

Cobol85Parser::InDataContext::InDataContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::DataNameContext* Cobol85Parser::InDataContext::dataName() {
  return getRuleContext<Cobol85Parser::DataNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::InDataContext::IN() {
  return getToken(Cobol85Parser::IN, 0);
}

tree::TerminalNode* Cobol85Parser::InDataContext::OF() {
  return getToken(Cobol85Parser::OF, 0);
}


size_t Cobol85Parser::InDataContext::getRuleIndex() const {
  return Cobol85Parser::RuleInData;
}

void Cobol85Parser::InDataContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInData(this);
}

void Cobol85Parser::InDataContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInData(this);
}

Cobol85Parser::InDataContext* Cobol85Parser::inData() {
  InDataContext *_localctx = _tracker.createInstance<InDataContext>(_ctx, getState());
  enterRule(_localctx, 1102, Cobol85Parser::RuleInData);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6101);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::IN || _la == Cobol85Parser::OF)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(6102);
    dataName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InFileContext ------------------------------------------------------------------

Cobol85Parser::InFileContext::InFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::FileNameContext* Cobol85Parser::InFileContext::fileName() {
  return getRuleContext<Cobol85Parser::FileNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::InFileContext::IN() {
  return getToken(Cobol85Parser::IN, 0);
}

tree::TerminalNode* Cobol85Parser::InFileContext::OF() {
  return getToken(Cobol85Parser::OF, 0);
}


size_t Cobol85Parser::InFileContext::getRuleIndex() const {
  return Cobol85Parser::RuleInFile;
}

void Cobol85Parser::InFileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInFile(this);
}

void Cobol85Parser::InFileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInFile(this);
}

Cobol85Parser::InFileContext* Cobol85Parser::inFile() {
  InFileContext *_localctx = _tracker.createInstance<InFileContext>(_ctx, getState());
  enterRule(_localctx, 1104, Cobol85Parser::RuleInFile);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6104);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::IN || _la == Cobol85Parser::OF)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(6105);
    fileName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InMnemonicContext ------------------------------------------------------------------

Cobol85Parser::InMnemonicContext::InMnemonicContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::MnemonicNameContext* Cobol85Parser::InMnemonicContext::mnemonicName() {
  return getRuleContext<Cobol85Parser::MnemonicNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::InMnemonicContext::IN() {
  return getToken(Cobol85Parser::IN, 0);
}

tree::TerminalNode* Cobol85Parser::InMnemonicContext::OF() {
  return getToken(Cobol85Parser::OF, 0);
}


size_t Cobol85Parser::InMnemonicContext::getRuleIndex() const {
  return Cobol85Parser::RuleInMnemonic;
}

void Cobol85Parser::InMnemonicContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInMnemonic(this);
}

void Cobol85Parser::InMnemonicContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInMnemonic(this);
}

Cobol85Parser::InMnemonicContext* Cobol85Parser::inMnemonic() {
  InMnemonicContext *_localctx = _tracker.createInstance<InMnemonicContext>(_ctx, getState());
  enterRule(_localctx, 1106, Cobol85Parser::RuleInMnemonic);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6107);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::IN || _la == Cobol85Parser::OF)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(6108);
    mnemonicName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InSectionContext ------------------------------------------------------------------

Cobol85Parser::InSectionContext::InSectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::SectionNameContext* Cobol85Parser::InSectionContext::sectionName() {
  return getRuleContext<Cobol85Parser::SectionNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::InSectionContext::IN() {
  return getToken(Cobol85Parser::IN, 0);
}

tree::TerminalNode* Cobol85Parser::InSectionContext::OF() {
  return getToken(Cobol85Parser::OF, 0);
}


size_t Cobol85Parser::InSectionContext::getRuleIndex() const {
  return Cobol85Parser::RuleInSection;
}

void Cobol85Parser::InSectionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInSection(this);
}

void Cobol85Parser::InSectionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInSection(this);
}

Cobol85Parser::InSectionContext* Cobol85Parser::inSection() {
  InSectionContext *_localctx = _tracker.createInstance<InSectionContext>(_ctx, getState());
  enterRule(_localctx, 1108, Cobol85Parser::RuleInSection);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6110);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::IN || _la == Cobol85Parser::OF)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(6111);
    sectionName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InLibraryContext ------------------------------------------------------------------

Cobol85Parser::InLibraryContext::InLibraryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::LibraryNameContext* Cobol85Parser::InLibraryContext::libraryName() {
  return getRuleContext<Cobol85Parser::LibraryNameContext>(0);
}

tree::TerminalNode* Cobol85Parser::InLibraryContext::IN() {
  return getToken(Cobol85Parser::IN, 0);
}

tree::TerminalNode* Cobol85Parser::InLibraryContext::OF() {
  return getToken(Cobol85Parser::OF, 0);
}


size_t Cobol85Parser::InLibraryContext::getRuleIndex() const {
  return Cobol85Parser::RuleInLibrary;
}

void Cobol85Parser::InLibraryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInLibrary(this);
}

void Cobol85Parser::InLibraryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInLibrary(this);
}

Cobol85Parser::InLibraryContext* Cobol85Parser::inLibrary() {
  InLibraryContext *_localctx = _tracker.createInstance<InLibraryContext>(_ctx, getState());
  enterRule(_localctx, 1110, Cobol85Parser::RuleInLibrary);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6113);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::IN || _la == Cobol85Parser::OF)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(6114);
    libraryName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InTableContext ------------------------------------------------------------------

Cobol85Parser::InTableContext::InTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::TableCallContext* Cobol85Parser::InTableContext::tableCall() {
  return getRuleContext<Cobol85Parser::TableCallContext>(0);
}

tree::TerminalNode* Cobol85Parser::InTableContext::IN() {
  return getToken(Cobol85Parser::IN, 0);
}

tree::TerminalNode* Cobol85Parser::InTableContext::OF() {
  return getToken(Cobol85Parser::OF, 0);
}


size_t Cobol85Parser::InTableContext::getRuleIndex() const {
  return Cobol85Parser::RuleInTable;
}

void Cobol85Parser::InTableContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInTable(this);
}

void Cobol85Parser::InTableContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInTable(this);
}

Cobol85Parser::InTableContext* Cobol85Parser::inTable() {
  InTableContext *_localctx = _tracker.createInstance<InTableContext>(_ctx, getState());
  enterRule(_localctx, 1112, Cobol85Parser::RuleInTable);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6116);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::IN || _la == Cobol85Parser::OF)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(6117);
    tableCall();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AlphabetNameContext ------------------------------------------------------------------

Cobol85Parser::AlphabetNameContext::AlphabetNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::CobolWordContext* Cobol85Parser::AlphabetNameContext::cobolWord() {
  return getRuleContext<Cobol85Parser::CobolWordContext>(0);
}


size_t Cobol85Parser::AlphabetNameContext::getRuleIndex() const {
  return Cobol85Parser::RuleAlphabetName;
}

void Cobol85Parser::AlphabetNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlphabetName(this);
}

void Cobol85Parser::AlphabetNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlphabetName(this);
}

Cobol85Parser::AlphabetNameContext* Cobol85Parser::alphabetName() {
  AlphabetNameContext *_localctx = _tracker.createInstance<AlphabetNameContext>(_ctx, getState());
  enterRule(_localctx, 1114, Cobol85Parser::RuleAlphabetName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6119);
    cobolWord();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssignmentNameContext ------------------------------------------------------------------

Cobol85Parser::AssignmentNameContext::AssignmentNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::SystemNameContext* Cobol85Parser::AssignmentNameContext::systemName() {
  return getRuleContext<Cobol85Parser::SystemNameContext>(0);
}


size_t Cobol85Parser::AssignmentNameContext::getRuleIndex() const {
  return Cobol85Parser::RuleAssignmentName;
}

void Cobol85Parser::AssignmentNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssignmentName(this);
}

void Cobol85Parser::AssignmentNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssignmentName(this);
}

Cobol85Parser::AssignmentNameContext* Cobol85Parser::assignmentName() {
  AssignmentNameContext *_localctx = _tracker.createInstance<AssignmentNameContext>(_ctx, getState());
  enterRule(_localctx, 1116, Cobol85Parser::RuleAssignmentName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6121);
    systemName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BasisNameContext ------------------------------------------------------------------

Cobol85Parser::BasisNameContext::BasisNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::ProgramNameContext* Cobol85Parser::BasisNameContext::programName() {
  return getRuleContext<Cobol85Parser::ProgramNameContext>(0);
}


size_t Cobol85Parser::BasisNameContext::getRuleIndex() const {
  return Cobol85Parser::RuleBasisName;
}

void Cobol85Parser::BasisNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBasisName(this);
}

void Cobol85Parser::BasisNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBasisName(this);
}

Cobol85Parser::BasisNameContext* Cobol85Parser::basisName() {
  BasisNameContext *_localctx = _tracker.createInstance<BasisNameContext>(_ctx, getState());
  enterRule(_localctx, 1118, Cobol85Parser::RuleBasisName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6123);
    programName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CdNameContext ------------------------------------------------------------------

Cobol85Parser::CdNameContext::CdNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::CobolWordContext* Cobol85Parser::CdNameContext::cobolWord() {
  return getRuleContext<Cobol85Parser::CobolWordContext>(0);
}


size_t Cobol85Parser::CdNameContext::getRuleIndex() const {
  return Cobol85Parser::RuleCdName;
}

void Cobol85Parser::CdNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCdName(this);
}

void Cobol85Parser::CdNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCdName(this);
}

Cobol85Parser::CdNameContext* Cobol85Parser::cdName() {
  CdNameContext *_localctx = _tracker.createInstance<CdNameContext>(_ctx, getState());
  enterRule(_localctx, 1120, Cobol85Parser::RuleCdName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6125);
    cobolWord();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassNameContext ------------------------------------------------------------------

Cobol85Parser::ClassNameContext::ClassNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::CobolWordContext* Cobol85Parser::ClassNameContext::cobolWord() {
  return getRuleContext<Cobol85Parser::CobolWordContext>(0);
}


size_t Cobol85Parser::ClassNameContext::getRuleIndex() const {
  return Cobol85Parser::RuleClassName;
}

void Cobol85Parser::ClassNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassName(this);
}

void Cobol85Parser::ClassNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassName(this);
}

Cobol85Parser::ClassNameContext* Cobol85Parser::className() {
  ClassNameContext *_localctx = _tracker.createInstance<ClassNameContext>(_ctx, getState());
  enterRule(_localctx, 1122, Cobol85Parser::RuleClassName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6127);
    cobolWord();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ComputerNameContext ------------------------------------------------------------------

Cobol85Parser::ComputerNameContext::ComputerNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::SystemNameContext* Cobol85Parser::ComputerNameContext::systemName() {
  return getRuleContext<Cobol85Parser::SystemNameContext>(0);
}


size_t Cobol85Parser::ComputerNameContext::getRuleIndex() const {
  return Cobol85Parser::RuleComputerName;
}

void Cobol85Parser::ComputerNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComputerName(this);
}

void Cobol85Parser::ComputerNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComputerName(this);
}

Cobol85Parser::ComputerNameContext* Cobol85Parser::computerName() {
  ComputerNameContext *_localctx = _tracker.createInstance<ComputerNameContext>(_ctx, getState());
  enterRule(_localctx, 1124, Cobol85Parser::RuleComputerName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6129);
    systemName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConditionNameContext ------------------------------------------------------------------

Cobol85Parser::ConditionNameContext::ConditionNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::CobolWordContext* Cobol85Parser::ConditionNameContext::cobolWord() {
  return getRuleContext<Cobol85Parser::CobolWordContext>(0);
}


size_t Cobol85Parser::ConditionNameContext::getRuleIndex() const {
  return Cobol85Parser::RuleConditionName;
}

void Cobol85Parser::ConditionNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConditionName(this);
}

void Cobol85Parser::ConditionNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConditionName(this);
}

Cobol85Parser::ConditionNameContext* Cobol85Parser::conditionName() {
  ConditionNameContext *_localctx = _tracker.createInstance<ConditionNameContext>(_ctx, getState());
  enterRule(_localctx, 1126, Cobol85Parser::RuleConditionName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6131);
    cobolWord();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DataNameContext ------------------------------------------------------------------

Cobol85Parser::DataNameContext::DataNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::CobolWordContext* Cobol85Parser::DataNameContext::cobolWord() {
  return getRuleContext<Cobol85Parser::CobolWordContext>(0);
}


size_t Cobol85Parser::DataNameContext::getRuleIndex() const {
  return Cobol85Parser::RuleDataName;
}

void Cobol85Parser::DataNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDataName(this);
}

void Cobol85Parser::DataNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDataName(this);
}

Cobol85Parser::DataNameContext* Cobol85Parser::dataName() {
  DataNameContext *_localctx = _tracker.createInstance<DataNameContext>(_ctx, getState());
  enterRule(_localctx, 1128, Cobol85Parser::RuleDataName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6133);
    cobolWord();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DataDescNameContext ------------------------------------------------------------------

Cobol85Parser::DataDescNameContext::DataDescNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::DataDescNameContext::FILLER() {
  return getToken(Cobol85Parser::FILLER, 0);
}

tree::TerminalNode* Cobol85Parser::DataDescNameContext::CURSOR() {
  return getToken(Cobol85Parser::CURSOR, 0);
}

Cobol85Parser::DataNameContext* Cobol85Parser::DataDescNameContext::dataName() {
  return getRuleContext<Cobol85Parser::DataNameContext>(0);
}


size_t Cobol85Parser::DataDescNameContext::getRuleIndex() const {
  return Cobol85Parser::RuleDataDescName;
}

void Cobol85Parser::DataDescNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDataDescName(this);
}

void Cobol85Parser::DataDescNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDataDescName(this);
}

Cobol85Parser::DataDescNameContext* Cobol85Parser::dataDescName() {
  DataDescNameContext *_localctx = _tracker.createInstance<DataDescNameContext>(_ctx, getState());
  enterRule(_localctx, 1130, Cobol85Parser::RuleDataDescName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(6138);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 964, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(6135);
      match(Cobol85Parser::FILLER);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(6136);
      match(Cobol85Parser::CURSOR);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(6137);
      dataName();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnvironmentNameContext ------------------------------------------------------------------

Cobol85Parser::EnvironmentNameContext::EnvironmentNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::SystemNameContext* Cobol85Parser::EnvironmentNameContext::systemName() {
  return getRuleContext<Cobol85Parser::SystemNameContext>(0);
}


size_t Cobol85Parser::EnvironmentNameContext::getRuleIndex() const {
  return Cobol85Parser::RuleEnvironmentName;
}

void Cobol85Parser::EnvironmentNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnvironmentName(this);
}

void Cobol85Parser::EnvironmentNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnvironmentName(this);
}

Cobol85Parser::EnvironmentNameContext* Cobol85Parser::environmentName() {
  EnvironmentNameContext *_localctx = _tracker.createInstance<EnvironmentNameContext>(_ctx, getState());
  enterRule(_localctx, 1132, Cobol85Parser::RuleEnvironmentName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6140);
    systemName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FileNameContext ------------------------------------------------------------------

Cobol85Parser::FileNameContext::FileNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::CobolWordContext* Cobol85Parser::FileNameContext::cobolWord() {
  return getRuleContext<Cobol85Parser::CobolWordContext>(0);
}


size_t Cobol85Parser::FileNameContext::getRuleIndex() const {
  return Cobol85Parser::RuleFileName;
}

void Cobol85Parser::FileNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFileName(this);
}

void Cobol85Parser::FileNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFileName(this);
}

Cobol85Parser::FileNameContext* Cobol85Parser::fileName() {
  FileNameContext *_localctx = _tracker.createInstance<FileNameContext>(_ctx, getState());
  enterRule(_localctx, 1134, Cobol85Parser::RuleFileName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6142);
    cobolWord();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionNameContext ------------------------------------------------------------------

Cobol85Parser::FunctionNameContext::FunctionNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::FunctionNameContext::INTEGER() {
  return getToken(Cobol85Parser::INTEGER, 0);
}

tree::TerminalNode* Cobol85Parser::FunctionNameContext::LENGTH() {
  return getToken(Cobol85Parser::LENGTH, 0);
}

tree::TerminalNode* Cobol85Parser::FunctionNameContext::RANDOM() {
  return getToken(Cobol85Parser::RANDOM, 0);
}

tree::TerminalNode* Cobol85Parser::FunctionNameContext::SUM() {
  return getToken(Cobol85Parser::SUM, 0);
}

tree::TerminalNode* Cobol85Parser::FunctionNameContext::WHEN_COMPILED() {
  return getToken(Cobol85Parser::WHEN_COMPILED, 0);
}

Cobol85Parser::CobolWordContext* Cobol85Parser::FunctionNameContext::cobolWord() {
  return getRuleContext<Cobol85Parser::CobolWordContext>(0);
}


size_t Cobol85Parser::FunctionNameContext::getRuleIndex() const {
  return Cobol85Parser::RuleFunctionName;
}

void Cobol85Parser::FunctionNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunctionName(this);
}

void Cobol85Parser::FunctionNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunctionName(this);
}

Cobol85Parser::FunctionNameContext* Cobol85Parser::functionName() {
  FunctionNameContext *_localctx = _tracker.createInstance<FunctionNameContext>(_ctx, getState());
  enterRule(_localctx, 1136, Cobol85Parser::RuleFunctionName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(6150);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 965, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(6144);
      match(Cobol85Parser::INTEGER);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(6145);
      match(Cobol85Parser::LENGTH);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(6146);
      match(Cobol85Parser::RANDOM);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(6147);
      match(Cobol85Parser::SUM);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(6148);
      match(Cobol85Parser::WHEN_COMPILED);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(6149);
      cobolWord();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IndexNameContext ------------------------------------------------------------------

Cobol85Parser::IndexNameContext::IndexNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::CobolWordContext* Cobol85Parser::IndexNameContext::cobolWord() {
  return getRuleContext<Cobol85Parser::CobolWordContext>(0);
}


size_t Cobol85Parser::IndexNameContext::getRuleIndex() const {
  return Cobol85Parser::RuleIndexName;
}

void Cobol85Parser::IndexNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIndexName(this);
}

void Cobol85Parser::IndexNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIndexName(this);
}

Cobol85Parser::IndexNameContext* Cobol85Parser::indexName() {
  IndexNameContext *_localctx = _tracker.createInstance<IndexNameContext>(_ctx, getState());
  enterRule(_localctx, 1138, Cobol85Parser::RuleIndexName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6152);
    cobolWord();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LanguageNameContext ------------------------------------------------------------------

Cobol85Parser::LanguageNameContext::LanguageNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::SystemNameContext* Cobol85Parser::LanguageNameContext::systemName() {
  return getRuleContext<Cobol85Parser::SystemNameContext>(0);
}


size_t Cobol85Parser::LanguageNameContext::getRuleIndex() const {
  return Cobol85Parser::RuleLanguageName;
}

void Cobol85Parser::LanguageNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLanguageName(this);
}

void Cobol85Parser::LanguageNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLanguageName(this);
}

Cobol85Parser::LanguageNameContext* Cobol85Parser::languageName() {
  LanguageNameContext *_localctx = _tracker.createInstance<LanguageNameContext>(_ctx, getState());
  enterRule(_localctx, 1140, Cobol85Parser::RuleLanguageName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6154);
    systemName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LibraryNameContext ------------------------------------------------------------------

Cobol85Parser::LibraryNameContext::LibraryNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::CobolWordContext* Cobol85Parser::LibraryNameContext::cobolWord() {
  return getRuleContext<Cobol85Parser::CobolWordContext>(0);
}


size_t Cobol85Parser::LibraryNameContext::getRuleIndex() const {
  return Cobol85Parser::RuleLibraryName;
}

void Cobol85Parser::LibraryNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLibraryName(this);
}

void Cobol85Parser::LibraryNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLibraryName(this);
}

Cobol85Parser::LibraryNameContext* Cobol85Parser::libraryName() {
  LibraryNameContext *_localctx = _tracker.createInstance<LibraryNameContext>(_ctx, getState());
  enterRule(_localctx, 1142, Cobol85Parser::RuleLibraryName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6156);
    cobolWord();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LocalNameContext ------------------------------------------------------------------

Cobol85Parser::LocalNameContext::LocalNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::CobolWordContext* Cobol85Parser::LocalNameContext::cobolWord() {
  return getRuleContext<Cobol85Parser::CobolWordContext>(0);
}


size_t Cobol85Parser::LocalNameContext::getRuleIndex() const {
  return Cobol85Parser::RuleLocalName;
}

void Cobol85Parser::LocalNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLocalName(this);
}

void Cobol85Parser::LocalNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLocalName(this);
}

Cobol85Parser::LocalNameContext* Cobol85Parser::localName() {
  LocalNameContext *_localctx = _tracker.createInstance<LocalNameContext>(_ctx, getState());
  enterRule(_localctx, 1144, Cobol85Parser::RuleLocalName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6158);
    cobolWord();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MnemonicNameContext ------------------------------------------------------------------

Cobol85Parser::MnemonicNameContext::MnemonicNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::CobolWordContext* Cobol85Parser::MnemonicNameContext::cobolWord() {
  return getRuleContext<Cobol85Parser::CobolWordContext>(0);
}


size_t Cobol85Parser::MnemonicNameContext::getRuleIndex() const {
  return Cobol85Parser::RuleMnemonicName;
}

void Cobol85Parser::MnemonicNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMnemonicName(this);
}

void Cobol85Parser::MnemonicNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMnemonicName(this);
}

Cobol85Parser::MnemonicNameContext* Cobol85Parser::mnemonicName() {
  MnemonicNameContext *_localctx = _tracker.createInstance<MnemonicNameContext>(_ctx, getState());
  enterRule(_localctx, 1146, Cobol85Parser::RuleMnemonicName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6160);
    cobolWord();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParagraphNameContext ------------------------------------------------------------------

Cobol85Parser::ParagraphNameContext::ParagraphNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::CobolWordContext* Cobol85Parser::ParagraphNameContext::cobolWord() {
  return getRuleContext<Cobol85Parser::CobolWordContext>(0);
}

Cobol85Parser::IntegerLiteralContext* Cobol85Parser::ParagraphNameContext::integerLiteral() {
  return getRuleContext<Cobol85Parser::IntegerLiteralContext>(0);
}


size_t Cobol85Parser::ParagraphNameContext::getRuleIndex() const {
  return Cobol85Parser::RuleParagraphName;
}

void Cobol85Parser::ParagraphNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParagraphName(this);
}

void Cobol85Parser::ParagraphNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParagraphName(this);
}

Cobol85Parser::ParagraphNameContext* Cobol85Parser::paragraphName() {
  ParagraphNameContext *_localctx = _tracker.createInstance<ParagraphNameContext>(_ctx, getState());
  enterRule(_localctx, 1148, Cobol85Parser::RuleParagraphName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(6164);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Cobol85Parser::ABORT:
      case Cobol85Parser::AS:
      case Cobol85Parser::ASCII:
      case Cobol85Parser::ASSOCIATED_DATA:
      case Cobol85Parser::ASSOCIATED_DATA_LENGTH:
      case Cobol85Parser::ATTRIBUTE:
      case Cobol85Parser::AUTO:
      case Cobol85Parser::AUTO_SKIP:
      case Cobol85Parser::BACKGROUND_COLOR:
      case Cobol85Parser::BACKGROUND_COLOUR:
      case Cobol85Parser::BEEP:
      case Cobol85Parser::BELL:
      case Cobol85Parser::BINARY:
      case Cobol85Parser::BIT:
      case Cobol85Parser::BLINK:
      case Cobol85Parser::BOUNDS:
      case Cobol85Parser::CAPABLE:
      case Cobol85Parser::CCSVERSION:
      case Cobol85Parser::CHANGED:
      case Cobol85Parser::CHANNEL:
      case Cobol85Parser::CLOSE_DISPOSITION:
      case Cobol85Parser::COBOL:
      case Cobol85Parser::COMMITMENT:
      case Cobol85Parser::CONTROL_POINT:
      case Cobol85Parser::CONVENTION:
      case Cobol85Parser::CRUNCH:
      case Cobol85Parser::CURSOR:
      case Cobol85Parser::DEFAULT:
      case Cobol85Parser::DEFAULT_DISPLAY:
      case Cobol85Parser::DEFINITION:
      case Cobol85Parser::DFHRESP:
      case Cobol85Parser::DFHVALUE:
      case Cobol85Parser::DISK:
      case Cobol85Parser::DONTCARE:
      case Cobol85Parser::DOUBLE:
      case Cobol85Parser::EBCDIC:
      case Cobol85Parser::EMPTY_CHECK:
      case Cobol85Parser::ENTER:
      case Cobol85Parser::ENTRY_PROCEDURE:
      case Cobol85Parser::ERASE:
      case Cobol85Parser::EOL:
      case Cobol85Parser::EOS:
      case Cobol85Parser::ESCAPE:
      case Cobol85Parser::EVENT:
      case Cobol85Parser::EXCLUSIVE:
      case Cobol85Parser::EXPORT:
      case Cobol85Parser::EXTENDED:
      case Cobol85Parser::FOREGROUND_COLOR:
      case Cobol85Parser::FOREGROUND_COLOUR:
      case Cobol85Parser::FULL:
      case Cobol85Parser::FUNCTIONNAME:
      case Cobol85Parser::FUNCTION_POINTER:
      case Cobol85Parser::GRID:
      case Cobol85Parser::HIGHLIGHT:
      case Cobol85Parser::IMPLICIT:
      case Cobol85Parser::IMPORT:
      case Cobol85Parser::INTEGER:
      case Cobol85Parser::KEPT:
      case Cobol85Parser::KEYBOARD:
      case Cobol85Parser::LANGUAGE:
      case Cobol85Parser::LB:
      case Cobol85Parser::LD:
      case Cobol85Parser::LEFTLINE:
      case Cobol85Parser::LENGTH_CHECK:
      case Cobol85Parser::LIBACCESS:
      case Cobol85Parser::LIBPARAMETER:
      case Cobol85Parser::LIBRARY:
      case Cobol85Parser::LIST:
      case Cobol85Parser::LOCAL:
      case Cobol85Parser::LONG_DATE:
      case Cobol85Parser::LONG_TIME:
      case Cobol85Parser::LOWER:
      case Cobol85Parser::LOWLIGHT:
      case Cobol85Parser::MMDDYYYY:
      case Cobol85Parser::NAMED:
      case Cobol85Parser::NATIONAL:
      case Cobol85Parser::NATIONAL_EDITED:
      case Cobol85Parser::NETWORK:
      case Cobol85Parser::NO_ECHO:
      case Cobol85Parser::NUMERIC_DATE:
      case Cobol85Parser::NUMERIC_TIME:
      case Cobol85Parser::ODT:
      case Cobol85Parser::ORDERLY:
      case Cobol85Parser::OVERLINE:
      case Cobol85Parser::OWN:
      case Cobol85Parser::PASSWORD:
      case Cobol85Parser::PORT:
      case Cobol85Parser::PRINTER:
      case Cobol85Parser::PRIVATE:
      case Cobol85Parser::PROCESS:
      case Cobol85Parser::PROGRAM:
      case Cobol85Parser::PROMPT:
      case Cobol85Parser::READER:
      case Cobol85Parser::REMOTE:
      case Cobol85Parser::REAL:
      case Cobol85Parser::RECEIVED:
      case Cobol85Parser::RECURSIVE:
      case Cobol85Parser::REF:
      case Cobol85Parser::REMOVE:
      case Cobol85Parser::REQUIRED:
      case Cobol85Parser::REVERSE_VIDEO:
      case Cobol85Parser::SAVE:
      case Cobol85Parser::SECURE:
      case Cobol85Parser::SHARED:
      case Cobol85Parser::SHAREDBYALL:
      case Cobol85Parser::SHAREDBYRUNUNIT:
      case Cobol85Parser::SHARING:
      case Cobol85Parser::SHORT_DATE:
      case Cobol85Parser::SYMBOL:
      case Cobol85Parser::TASK:
      case Cobol85Parser::THREAD:
      case Cobol85Parser::THREAD_LOCAL:
      case Cobol85Parser::TIMER:
      case Cobol85Parser::TODAYS_DATE:
      case Cobol85Parser::TODAYS_NAME:
      case Cobol85Parser::TRUNCATED:
      case Cobol85Parser::TYPEDEF:
      case Cobol85Parser::UNDERLINE:
      case Cobol85Parser::VIRTUAL:
      case Cobol85Parser::WAIT:
      case Cobol85Parser::YEAR:
      case Cobol85Parser::YYYYMMDD:
      case Cobol85Parser::YYYYDDD:
      case Cobol85Parser::ZERO_FILL:
      case Cobol85Parser::IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(6162);
        cobolWord();
        break;
      }

      case Cobol85Parser::LEVEL_NUMBER_66:
      case Cobol85Parser::LEVEL_NUMBER_77:
      case Cobol85Parser::LEVEL_NUMBER_88:
      case Cobol85Parser::INTEGERLITERAL: {
        enterOuterAlt(_localctx, 2);
        setState(6163);
        integerLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProcedureNameContext ------------------------------------------------------------------

Cobol85Parser::ProcedureNameContext::ProcedureNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::ParagraphNameContext* Cobol85Parser::ProcedureNameContext::paragraphName() {
  return getRuleContext<Cobol85Parser::ParagraphNameContext>(0);
}

Cobol85Parser::InSectionContext* Cobol85Parser::ProcedureNameContext::inSection() {
  return getRuleContext<Cobol85Parser::InSectionContext>(0);
}

Cobol85Parser::SectionNameContext* Cobol85Parser::ProcedureNameContext::sectionName() {
  return getRuleContext<Cobol85Parser::SectionNameContext>(0);
}


size_t Cobol85Parser::ProcedureNameContext::getRuleIndex() const {
  return Cobol85Parser::RuleProcedureName;
}

void Cobol85Parser::ProcedureNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProcedureName(this);
}

void Cobol85Parser::ProcedureNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProcedureName(this);
}

Cobol85Parser::ProcedureNameContext* Cobol85Parser::procedureName() {
  ProcedureNameContext *_localctx = _tracker.createInstance<ProcedureNameContext>(_ctx, getState());
  enterRule(_localctx, 1150, Cobol85Parser::RuleProcedureName);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(6171);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 968, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(6166);
      paragraphName();
      setState(6168);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Cobol85Parser::IN || _la == Cobol85Parser::OF) {
        setState(6167);
        inSection();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(6170);
      sectionName();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProgramNameContext ------------------------------------------------------------------

Cobol85Parser::ProgramNameContext::ProgramNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::ProgramNameContext::NONNUMERICLITERAL() {
  return getToken(Cobol85Parser::NONNUMERICLITERAL, 0);
}

Cobol85Parser::CobolWordContext* Cobol85Parser::ProgramNameContext::cobolWord() {
  return getRuleContext<Cobol85Parser::CobolWordContext>(0);
}


size_t Cobol85Parser::ProgramNameContext::getRuleIndex() const {
  return Cobol85Parser::RuleProgramName;
}

void Cobol85Parser::ProgramNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProgramName(this);
}

void Cobol85Parser::ProgramNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProgramName(this);
}

Cobol85Parser::ProgramNameContext* Cobol85Parser::programName() {
  ProgramNameContext *_localctx = _tracker.createInstance<ProgramNameContext>(_ctx, getState());
  enterRule(_localctx, 1152, Cobol85Parser::RuleProgramName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(6175);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Cobol85Parser::NONNUMERICLITERAL: {
        enterOuterAlt(_localctx, 1);
        setState(6173);
        match(Cobol85Parser::NONNUMERICLITERAL);
        break;
      }

      case Cobol85Parser::ABORT:
      case Cobol85Parser::AS:
      case Cobol85Parser::ASCII:
      case Cobol85Parser::ASSOCIATED_DATA:
      case Cobol85Parser::ASSOCIATED_DATA_LENGTH:
      case Cobol85Parser::ATTRIBUTE:
      case Cobol85Parser::AUTO:
      case Cobol85Parser::AUTO_SKIP:
      case Cobol85Parser::BACKGROUND_COLOR:
      case Cobol85Parser::BACKGROUND_COLOUR:
      case Cobol85Parser::BEEP:
      case Cobol85Parser::BELL:
      case Cobol85Parser::BINARY:
      case Cobol85Parser::BIT:
      case Cobol85Parser::BLINK:
      case Cobol85Parser::BOUNDS:
      case Cobol85Parser::CAPABLE:
      case Cobol85Parser::CCSVERSION:
      case Cobol85Parser::CHANGED:
      case Cobol85Parser::CHANNEL:
      case Cobol85Parser::CLOSE_DISPOSITION:
      case Cobol85Parser::COBOL:
      case Cobol85Parser::COMMITMENT:
      case Cobol85Parser::CONTROL_POINT:
      case Cobol85Parser::CONVENTION:
      case Cobol85Parser::CRUNCH:
      case Cobol85Parser::CURSOR:
      case Cobol85Parser::DEFAULT:
      case Cobol85Parser::DEFAULT_DISPLAY:
      case Cobol85Parser::DEFINITION:
      case Cobol85Parser::DFHRESP:
      case Cobol85Parser::DFHVALUE:
      case Cobol85Parser::DISK:
      case Cobol85Parser::DONTCARE:
      case Cobol85Parser::DOUBLE:
      case Cobol85Parser::EBCDIC:
      case Cobol85Parser::EMPTY_CHECK:
      case Cobol85Parser::ENTER:
      case Cobol85Parser::ENTRY_PROCEDURE:
      case Cobol85Parser::ERASE:
      case Cobol85Parser::EOL:
      case Cobol85Parser::EOS:
      case Cobol85Parser::ESCAPE:
      case Cobol85Parser::EVENT:
      case Cobol85Parser::EXCLUSIVE:
      case Cobol85Parser::EXPORT:
      case Cobol85Parser::EXTENDED:
      case Cobol85Parser::FOREGROUND_COLOR:
      case Cobol85Parser::FOREGROUND_COLOUR:
      case Cobol85Parser::FULL:
      case Cobol85Parser::FUNCTIONNAME:
      case Cobol85Parser::FUNCTION_POINTER:
      case Cobol85Parser::GRID:
      case Cobol85Parser::HIGHLIGHT:
      case Cobol85Parser::IMPLICIT:
      case Cobol85Parser::IMPORT:
      case Cobol85Parser::INTEGER:
      case Cobol85Parser::KEPT:
      case Cobol85Parser::KEYBOARD:
      case Cobol85Parser::LANGUAGE:
      case Cobol85Parser::LB:
      case Cobol85Parser::LD:
      case Cobol85Parser::LEFTLINE:
      case Cobol85Parser::LENGTH_CHECK:
      case Cobol85Parser::LIBACCESS:
      case Cobol85Parser::LIBPARAMETER:
      case Cobol85Parser::LIBRARY:
      case Cobol85Parser::LIST:
      case Cobol85Parser::LOCAL:
      case Cobol85Parser::LONG_DATE:
      case Cobol85Parser::LONG_TIME:
      case Cobol85Parser::LOWER:
      case Cobol85Parser::LOWLIGHT:
      case Cobol85Parser::MMDDYYYY:
      case Cobol85Parser::NAMED:
      case Cobol85Parser::NATIONAL:
      case Cobol85Parser::NATIONAL_EDITED:
      case Cobol85Parser::NETWORK:
      case Cobol85Parser::NO_ECHO:
      case Cobol85Parser::NUMERIC_DATE:
      case Cobol85Parser::NUMERIC_TIME:
      case Cobol85Parser::ODT:
      case Cobol85Parser::ORDERLY:
      case Cobol85Parser::OVERLINE:
      case Cobol85Parser::OWN:
      case Cobol85Parser::PASSWORD:
      case Cobol85Parser::PORT:
      case Cobol85Parser::PRINTER:
      case Cobol85Parser::PRIVATE:
      case Cobol85Parser::PROCESS:
      case Cobol85Parser::PROGRAM:
      case Cobol85Parser::PROMPT:
      case Cobol85Parser::READER:
      case Cobol85Parser::REMOTE:
      case Cobol85Parser::REAL:
      case Cobol85Parser::RECEIVED:
      case Cobol85Parser::RECURSIVE:
      case Cobol85Parser::REF:
      case Cobol85Parser::REMOVE:
      case Cobol85Parser::REQUIRED:
      case Cobol85Parser::REVERSE_VIDEO:
      case Cobol85Parser::SAVE:
      case Cobol85Parser::SECURE:
      case Cobol85Parser::SHARED:
      case Cobol85Parser::SHAREDBYALL:
      case Cobol85Parser::SHAREDBYRUNUNIT:
      case Cobol85Parser::SHARING:
      case Cobol85Parser::SHORT_DATE:
      case Cobol85Parser::SYMBOL:
      case Cobol85Parser::TASK:
      case Cobol85Parser::THREAD:
      case Cobol85Parser::THREAD_LOCAL:
      case Cobol85Parser::TIMER:
      case Cobol85Parser::TODAYS_DATE:
      case Cobol85Parser::TODAYS_NAME:
      case Cobol85Parser::TRUNCATED:
      case Cobol85Parser::TYPEDEF:
      case Cobol85Parser::UNDERLINE:
      case Cobol85Parser::VIRTUAL:
      case Cobol85Parser::WAIT:
      case Cobol85Parser::YEAR:
      case Cobol85Parser::YYYYMMDD:
      case Cobol85Parser::YYYYDDD:
      case Cobol85Parser::ZERO_FILL:
      case Cobol85Parser::IDENTIFIER: {
        enterOuterAlt(_localctx, 2);
        setState(6174);
        cobolWord();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RecordNameContext ------------------------------------------------------------------

Cobol85Parser::RecordNameContext::RecordNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::QualifiedDataNameContext* Cobol85Parser::RecordNameContext::qualifiedDataName() {
  return getRuleContext<Cobol85Parser::QualifiedDataNameContext>(0);
}


size_t Cobol85Parser::RecordNameContext::getRuleIndex() const {
  return Cobol85Parser::RuleRecordName;
}

void Cobol85Parser::RecordNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRecordName(this);
}

void Cobol85Parser::RecordNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRecordName(this);
}

Cobol85Parser::RecordNameContext* Cobol85Parser::recordName() {
  RecordNameContext *_localctx = _tracker.createInstance<RecordNameContext>(_ctx, getState());
  enterRule(_localctx, 1154, Cobol85Parser::RuleRecordName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6177);
    qualifiedDataName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReportNameContext ------------------------------------------------------------------

Cobol85Parser::ReportNameContext::ReportNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::QualifiedDataNameContext* Cobol85Parser::ReportNameContext::qualifiedDataName() {
  return getRuleContext<Cobol85Parser::QualifiedDataNameContext>(0);
}


size_t Cobol85Parser::ReportNameContext::getRuleIndex() const {
  return Cobol85Parser::RuleReportName;
}

void Cobol85Parser::ReportNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReportName(this);
}

void Cobol85Parser::ReportNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReportName(this);
}

Cobol85Parser::ReportNameContext* Cobol85Parser::reportName() {
  ReportNameContext *_localctx = _tracker.createInstance<ReportNameContext>(_ctx, getState());
  enterRule(_localctx, 1156, Cobol85Parser::RuleReportName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6179);
    qualifiedDataName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RoutineNameContext ------------------------------------------------------------------

Cobol85Parser::RoutineNameContext::RoutineNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::CobolWordContext* Cobol85Parser::RoutineNameContext::cobolWord() {
  return getRuleContext<Cobol85Parser::CobolWordContext>(0);
}


size_t Cobol85Parser::RoutineNameContext::getRuleIndex() const {
  return Cobol85Parser::RuleRoutineName;
}

void Cobol85Parser::RoutineNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRoutineName(this);
}

void Cobol85Parser::RoutineNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRoutineName(this);
}

Cobol85Parser::RoutineNameContext* Cobol85Parser::routineName() {
  RoutineNameContext *_localctx = _tracker.createInstance<RoutineNameContext>(_ctx, getState());
  enterRule(_localctx, 1158, Cobol85Parser::RuleRoutineName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6181);
    cobolWord();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ScreenNameContext ------------------------------------------------------------------

Cobol85Parser::ScreenNameContext::ScreenNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::CobolWordContext* Cobol85Parser::ScreenNameContext::cobolWord() {
  return getRuleContext<Cobol85Parser::CobolWordContext>(0);
}


size_t Cobol85Parser::ScreenNameContext::getRuleIndex() const {
  return Cobol85Parser::RuleScreenName;
}

void Cobol85Parser::ScreenNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterScreenName(this);
}

void Cobol85Parser::ScreenNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitScreenName(this);
}

Cobol85Parser::ScreenNameContext* Cobol85Parser::screenName() {
  ScreenNameContext *_localctx = _tracker.createInstance<ScreenNameContext>(_ctx, getState());
  enterRule(_localctx, 1160, Cobol85Parser::RuleScreenName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6183);
    cobolWord();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SectionNameContext ------------------------------------------------------------------

Cobol85Parser::SectionNameContext::SectionNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::CobolWordContext* Cobol85Parser::SectionNameContext::cobolWord() {
  return getRuleContext<Cobol85Parser::CobolWordContext>(0);
}

Cobol85Parser::IntegerLiteralContext* Cobol85Parser::SectionNameContext::integerLiteral() {
  return getRuleContext<Cobol85Parser::IntegerLiteralContext>(0);
}


size_t Cobol85Parser::SectionNameContext::getRuleIndex() const {
  return Cobol85Parser::RuleSectionName;
}

void Cobol85Parser::SectionNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSectionName(this);
}

void Cobol85Parser::SectionNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSectionName(this);
}

Cobol85Parser::SectionNameContext* Cobol85Parser::sectionName() {
  SectionNameContext *_localctx = _tracker.createInstance<SectionNameContext>(_ctx, getState());
  enterRule(_localctx, 1162, Cobol85Parser::RuleSectionName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(6187);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Cobol85Parser::ABORT:
      case Cobol85Parser::AS:
      case Cobol85Parser::ASCII:
      case Cobol85Parser::ASSOCIATED_DATA:
      case Cobol85Parser::ASSOCIATED_DATA_LENGTH:
      case Cobol85Parser::ATTRIBUTE:
      case Cobol85Parser::AUTO:
      case Cobol85Parser::AUTO_SKIP:
      case Cobol85Parser::BACKGROUND_COLOR:
      case Cobol85Parser::BACKGROUND_COLOUR:
      case Cobol85Parser::BEEP:
      case Cobol85Parser::BELL:
      case Cobol85Parser::BINARY:
      case Cobol85Parser::BIT:
      case Cobol85Parser::BLINK:
      case Cobol85Parser::BOUNDS:
      case Cobol85Parser::CAPABLE:
      case Cobol85Parser::CCSVERSION:
      case Cobol85Parser::CHANGED:
      case Cobol85Parser::CHANNEL:
      case Cobol85Parser::CLOSE_DISPOSITION:
      case Cobol85Parser::COBOL:
      case Cobol85Parser::COMMITMENT:
      case Cobol85Parser::CONTROL_POINT:
      case Cobol85Parser::CONVENTION:
      case Cobol85Parser::CRUNCH:
      case Cobol85Parser::CURSOR:
      case Cobol85Parser::DEFAULT:
      case Cobol85Parser::DEFAULT_DISPLAY:
      case Cobol85Parser::DEFINITION:
      case Cobol85Parser::DFHRESP:
      case Cobol85Parser::DFHVALUE:
      case Cobol85Parser::DISK:
      case Cobol85Parser::DONTCARE:
      case Cobol85Parser::DOUBLE:
      case Cobol85Parser::EBCDIC:
      case Cobol85Parser::EMPTY_CHECK:
      case Cobol85Parser::ENTER:
      case Cobol85Parser::ENTRY_PROCEDURE:
      case Cobol85Parser::ERASE:
      case Cobol85Parser::EOL:
      case Cobol85Parser::EOS:
      case Cobol85Parser::ESCAPE:
      case Cobol85Parser::EVENT:
      case Cobol85Parser::EXCLUSIVE:
      case Cobol85Parser::EXPORT:
      case Cobol85Parser::EXTENDED:
      case Cobol85Parser::FOREGROUND_COLOR:
      case Cobol85Parser::FOREGROUND_COLOUR:
      case Cobol85Parser::FULL:
      case Cobol85Parser::FUNCTIONNAME:
      case Cobol85Parser::FUNCTION_POINTER:
      case Cobol85Parser::GRID:
      case Cobol85Parser::HIGHLIGHT:
      case Cobol85Parser::IMPLICIT:
      case Cobol85Parser::IMPORT:
      case Cobol85Parser::INTEGER:
      case Cobol85Parser::KEPT:
      case Cobol85Parser::KEYBOARD:
      case Cobol85Parser::LANGUAGE:
      case Cobol85Parser::LB:
      case Cobol85Parser::LD:
      case Cobol85Parser::LEFTLINE:
      case Cobol85Parser::LENGTH_CHECK:
      case Cobol85Parser::LIBACCESS:
      case Cobol85Parser::LIBPARAMETER:
      case Cobol85Parser::LIBRARY:
      case Cobol85Parser::LIST:
      case Cobol85Parser::LOCAL:
      case Cobol85Parser::LONG_DATE:
      case Cobol85Parser::LONG_TIME:
      case Cobol85Parser::LOWER:
      case Cobol85Parser::LOWLIGHT:
      case Cobol85Parser::MMDDYYYY:
      case Cobol85Parser::NAMED:
      case Cobol85Parser::NATIONAL:
      case Cobol85Parser::NATIONAL_EDITED:
      case Cobol85Parser::NETWORK:
      case Cobol85Parser::NO_ECHO:
      case Cobol85Parser::NUMERIC_DATE:
      case Cobol85Parser::NUMERIC_TIME:
      case Cobol85Parser::ODT:
      case Cobol85Parser::ORDERLY:
      case Cobol85Parser::OVERLINE:
      case Cobol85Parser::OWN:
      case Cobol85Parser::PASSWORD:
      case Cobol85Parser::PORT:
      case Cobol85Parser::PRINTER:
      case Cobol85Parser::PRIVATE:
      case Cobol85Parser::PROCESS:
      case Cobol85Parser::PROGRAM:
      case Cobol85Parser::PROMPT:
      case Cobol85Parser::READER:
      case Cobol85Parser::REMOTE:
      case Cobol85Parser::REAL:
      case Cobol85Parser::RECEIVED:
      case Cobol85Parser::RECURSIVE:
      case Cobol85Parser::REF:
      case Cobol85Parser::REMOVE:
      case Cobol85Parser::REQUIRED:
      case Cobol85Parser::REVERSE_VIDEO:
      case Cobol85Parser::SAVE:
      case Cobol85Parser::SECURE:
      case Cobol85Parser::SHARED:
      case Cobol85Parser::SHAREDBYALL:
      case Cobol85Parser::SHAREDBYRUNUNIT:
      case Cobol85Parser::SHARING:
      case Cobol85Parser::SHORT_DATE:
      case Cobol85Parser::SYMBOL:
      case Cobol85Parser::TASK:
      case Cobol85Parser::THREAD:
      case Cobol85Parser::THREAD_LOCAL:
      case Cobol85Parser::TIMER:
      case Cobol85Parser::TODAYS_DATE:
      case Cobol85Parser::TODAYS_NAME:
      case Cobol85Parser::TRUNCATED:
      case Cobol85Parser::TYPEDEF:
      case Cobol85Parser::UNDERLINE:
      case Cobol85Parser::VIRTUAL:
      case Cobol85Parser::WAIT:
      case Cobol85Parser::YEAR:
      case Cobol85Parser::YYYYMMDD:
      case Cobol85Parser::YYYYDDD:
      case Cobol85Parser::ZERO_FILL:
      case Cobol85Parser::IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(6185);
        cobolWord();
        break;
      }

      case Cobol85Parser::LEVEL_NUMBER_66:
      case Cobol85Parser::LEVEL_NUMBER_77:
      case Cobol85Parser::LEVEL_NUMBER_88:
      case Cobol85Parser::INTEGERLITERAL: {
        enterOuterAlt(_localctx, 2);
        setState(6186);
        integerLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SystemNameContext ------------------------------------------------------------------

Cobol85Parser::SystemNameContext::SystemNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::CobolWordContext* Cobol85Parser::SystemNameContext::cobolWord() {
  return getRuleContext<Cobol85Parser::CobolWordContext>(0);
}


size_t Cobol85Parser::SystemNameContext::getRuleIndex() const {
  return Cobol85Parser::RuleSystemName;
}

void Cobol85Parser::SystemNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSystemName(this);
}

void Cobol85Parser::SystemNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSystemName(this);
}

Cobol85Parser::SystemNameContext* Cobol85Parser::systemName() {
  SystemNameContext *_localctx = _tracker.createInstance<SystemNameContext>(_ctx, getState());
  enterRule(_localctx, 1164, Cobol85Parser::RuleSystemName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6189);
    cobolWord();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SymbolicCharacterContext ------------------------------------------------------------------

Cobol85Parser::SymbolicCharacterContext::SymbolicCharacterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::CobolWordContext* Cobol85Parser::SymbolicCharacterContext::cobolWord() {
  return getRuleContext<Cobol85Parser::CobolWordContext>(0);
}


size_t Cobol85Parser::SymbolicCharacterContext::getRuleIndex() const {
  return Cobol85Parser::RuleSymbolicCharacter;
}

void Cobol85Parser::SymbolicCharacterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSymbolicCharacter(this);
}

void Cobol85Parser::SymbolicCharacterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSymbolicCharacter(this);
}

Cobol85Parser::SymbolicCharacterContext* Cobol85Parser::symbolicCharacter() {
  SymbolicCharacterContext *_localctx = _tracker.createInstance<SymbolicCharacterContext>(_ctx, getState());
  enterRule(_localctx, 1166, Cobol85Parser::RuleSymbolicCharacter);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6191);
    cobolWord();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TextNameContext ------------------------------------------------------------------

Cobol85Parser::TextNameContext::TextNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Cobol85Parser::CobolWordContext* Cobol85Parser::TextNameContext::cobolWord() {
  return getRuleContext<Cobol85Parser::CobolWordContext>(0);
}


size_t Cobol85Parser::TextNameContext::getRuleIndex() const {
  return Cobol85Parser::RuleTextName;
}

void Cobol85Parser::TextNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTextName(this);
}

void Cobol85Parser::TextNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTextName(this);
}

Cobol85Parser::TextNameContext* Cobol85Parser::textName() {
  TextNameContext *_localctx = _tracker.createInstance<TextNameContext>(_ctx, getState());
  enterRule(_localctx, 1168, Cobol85Parser::RuleTextName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6193);
    cobolWord();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CobolWordContext ------------------------------------------------------------------

Cobol85Parser::CobolWordContext::CobolWordContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::IDENTIFIER() {
  return getToken(Cobol85Parser::IDENTIFIER, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::COBOL() {
  return getToken(Cobol85Parser::COBOL, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::PROGRAM() {
  return getToken(Cobol85Parser::PROGRAM, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::ABORT() {
  return getToken(Cobol85Parser::ABORT, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::AS() {
  return getToken(Cobol85Parser::AS, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::ASCII() {
  return getToken(Cobol85Parser::ASCII, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::ASSOCIATED_DATA() {
  return getToken(Cobol85Parser::ASSOCIATED_DATA, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::ASSOCIATED_DATA_LENGTH() {
  return getToken(Cobol85Parser::ASSOCIATED_DATA_LENGTH, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::ATTRIBUTE() {
  return getToken(Cobol85Parser::ATTRIBUTE, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::AUTO() {
  return getToken(Cobol85Parser::AUTO, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::AUTO_SKIP() {
  return getToken(Cobol85Parser::AUTO_SKIP, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::BACKGROUND_COLOR() {
  return getToken(Cobol85Parser::BACKGROUND_COLOR, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::BACKGROUND_COLOUR() {
  return getToken(Cobol85Parser::BACKGROUND_COLOUR, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::BEEP() {
  return getToken(Cobol85Parser::BEEP, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::BELL() {
  return getToken(Cobol85Parser::BELL, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::BINARY() {
  return getToken(Cobol85Parser::BINARY, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::BIT() {
  return getToken(Cobol85Parser::BIT, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::BLINK() {
  return getToken(Cobol85Parser::BLINK, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::BOUNDS() {
  return getToken(Cobol85Parser::BOUNDS, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::CAPABLE() {
  return getToken(Cobol85Parser::CAPABLE, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::CCSVERSION() {
  return getToken(Cobol85Parser::CCSVERSION, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::CHANGED() {
  return getToken(Cobol85Parser::CHANGED, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::CHANNEL() {
  return getToken(Cobol85Parser::CHANNEL, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::CLOSE_DISPOSITION() {
  return getToken(Cobol85Parser::CLOSE_DISPOSITION, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::COMMITMENT() {
  return getToken(Cobol85Parser::COMMITMENT, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::CONTROL_POINT() {
  return getToken(Cobol85Parser::CONTROL_POINT, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::CONVENTION() {
  return getToken(Cobol85Parser::CONVENTION, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::CRUNCH() {
  return getToken(Cobol85Parser::CRUNCH, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::CURSOR() {
  return getToken(Cobol85Parser::CURSOR, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::DEFAULT() {
  return getToken(Cobol85Parser::DEFAULT, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::DEFAULT_DISPLAY() {
  return getToken(Cobol85Parser::DEFAULT_DISPLAY, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::DEFINITION() {
  return getToken(Cobol85Parser::DEFINITION, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::DFHRESP() {
  return getToken(Cobol85Parser::DFHRESP, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::DFHVALUE() {
  return getToken(Cobol85Parser::DFHVALUE, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::DISK() {
  return getToken(Cobol85Parser::DISK, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::DONTCARE() {
  return getToken(Cobol85Parser::DONTCARE, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::DOUBLE() {
  return getToken(Cobol85Parser::DOUBLE, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::EBCDIC() {
  return getToken(Cobol85Parser::EBCDIC, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::EMPTY_CHECK() {
  return getToken(Cobol85Parser::EMPTY_CHECK, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::ENTER() {
  return getToken(Cobol85Parser::ENTER, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::ENTRY_PROCEDURE() {
  return getToken(Cobol85Parser::ENTRY_PROCEDURE, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::EOL() {
  return getToken(Cobol85Parser::EOL, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::EOS() {
  return getToken(Cobol85Parser::EOS, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::ERASE() {
  return getToken(Cobol85Parser::ERASE, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::ESCAPE() {
  return getToken(Cobol85Parser::ESCAPE, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::EVENT() {
  return getToken(Cobol85Parser::EVENT, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::EXCLUSIVE() {
  return getToken(Cobol85Parser::EXCLUSIVE, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::EXPORT() {
  return getToken(Cobol85Parser::EXPORT, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::EXTENDED() {
  return getToken(Cobol85Parser::EXTENDED, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::FOREGROUND_COLOR() {
  return getToken(Cobol85Parser::FOREGROUND_COLOR, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::FOREGROUND_COLOUR() {
  return getToken(Cobol85Parser::FOREGROUND_COLOUR, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::FULL() {
  return getToken(Cobol85Parser::FULL, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::FUNCTIONNAME() {
  return getToken(Cobol85Parser::FUNCTIONNAME, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::FUNCTION_POINTER() {
  return getToken(Cobol85Parser::FUNCTION_POINTER, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::GRID() {
  return getToken(Cobol85Parser::GRID, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::HIGHLIGHT() {
  return getToken(Cobol85Parser::HIGHLIGHT, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::IMPLICIT() {
  return getToken(Cobol85Parser::IMPLICIT, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::IMPORT() {
  return getToken(Cobol85Parser::IMPORT, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::INTEGER() {
  return getToken(Cobol85Parser::INTEGER, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::KEPT() {
  return getToken(Cobol85Parser::KEPT, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::KEYBOARD() {
  return getToken(Cobol85Parser::KEYBOARD, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::LANGUAGE() {
  return getToken(Cobol85Parser::LANGUAGE, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::LB() {
  return getToken(Cobol85Parser::LB, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::LD() {
  return getToken(Cobol85Parser::LD, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::LEFTLINE() {
  return getToken(Cobol85Parser::LEFTLINE, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::LENGTH_CHECK() {
  return getToken(Cobol85Parser::LENGTH_CHECK, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::LIBACCESS() {
  return getToken(Cobol85Parser::LIBACCESS, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::LIBPARAMETER() {
  return getToken(Cobol85Parser::LIBPARAMETER, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::LIBRARY() {
  return getToken(Cobol85Parser::LIBRARY, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::LIST() {
  return getToken(Cobol85Parser::LIST, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::LOCAL() {
  return getToken(Cobol85Parser::LOCAL, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::LONG_DATE() {
  return getToken(Cobol85Parser::LONG_DATE, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::LONG_TIME() {
  return getToken(Cobol85Parser::LONG_TIME, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::LOWER() {
  return getToken(Cobol85Parser::LOWER, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::LOWLIGHT() {
  return getToken(Cobol85Parser::LOWLIGHT, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::MMDDYYYY() {
  return getToken(Cobol85Parser::MMDDYYYY, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::NAMED() {
  return getToken(Cobol85Parser::NAMED, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::NATIONAL() {
  return getToken(Cobol85Parser::NATIONAL, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::NATIONAL_EDITED() {
  return getToken(Cobol85Parser::NATIONAL_EDITED, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::NETWORK() {
  return getToken(Cobol85Parser::NETWORK, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::NO_ECHO() {
  return getToken(Cobol85Parser::NO_ECHO, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::NUMERIC_DATE() {
  return getToken(Cobol85Parser::NUMERIC_DATE, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::NUMERIC_TIME() {
  return getToken(Cobol85Parser::NUMERIC_TIME, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::ODT() {
  return getToken(Cobol85Parser::ODT, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::ORDERLY() {
  return getToken(Cobol85Parser::ORDERLY, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::OVERLINE() {
  return getToken(Cobol85Parser::OVERLINE, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::OWN() {
  return getToken(Cobol85Parser::OWN, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::PASSWORD() {
  return getToken(Cobol85Parser::PASSWORD, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::PORT() {
  return getToken(Cobol85Parser::PORT, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::PRINTER() {
  return getToken(Cobol85Parser::PRINTER, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::PRIVATE() {
  return getToken(Cobol85Parser::PRIVATE, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::PROCESS() {
  return getToken(Cobol85Parser::PROCESS, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::PROMPT() {
  return getToken(Cobol85Parser::PROMPT, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::READER() {
  return getToken(Cobol85Parser::READER, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::REAL() {
  return getToken(Cobol85Parser::REAL, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::RECEIVED() {
  return getToken(Cobol85Parser::RECEIVED, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::RECURSIVE() {
  return getToken(Cobol85Parser::RECURSIVE, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::REF() {
  return getToken(Cobol85Parser::REF, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::REMOTE() {
  return getToken(Cobol85Parser::REMOTE, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::REMOVE() {
  return getToken(Cobol85Parser::REMOVE, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::REQUIRED() {
  return getToken(Cobol85Parser::REQUIRED, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::REVERSE_VIDEO() {
  return getToken(Cobol85Parser::REVERSE_VIDEO, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::SAVE() {
  return getToken(Cobol85Parser::SAVE, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::SECURE() {
  return getToken(Cobol85Parser::SECURE, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::SHARED() {
  return getToken(Cobol85Parser::SHARED, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::SHAREDBYALL() {
  return getToken(Cobol85Parser::SHAREDBYALL, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::SHAREDBYRUNUNIT() {
  return getToken(Cobol85Parser::SHAREDBYRUNUNIT, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::SHARING() {
  return getToken(Cobol85Parser::SHARING, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::SHORT_DATE() {
  return getToken(Cobol85Parser::SHORT_DATE, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::SYMBOL() {
  return getToken(Cobol85Parser::SYMBOL, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::TASK() {
  return getToken(Cobol85Parser::TASK, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::THREAD() {
  return getToken(Cobol85Parser::THREAD, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::THREAD_LOCAL() {
  return getToken(Cobol85Parser::THREAD_LOCAL, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::TIMER() {
  return getToken(Cobol85Parser::TIMER, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::TODAYS_DATE() {
  return getToken(Cobol85Parser::TODAYS_DATE, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::TODAYS_NAME() {
  return getToken(Cobol85Parser::TODAYS_NAME, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::TRUNCATED() {
  return getToken(Cobol85Parser::TRUNCATED, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::TYPEDEF() {
  return getToken(Cobol85Parser::TYPEDEF, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::UNDERLINE() {
  return getToken(Cobol85Parser::UNDERLINE, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::VIRTUAL() {
  return getToken(Cobol85Parser::VIRTUAL, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::WAIT() {
  return getToken(Cobol85Parser::WAIT, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::YEAR() {
  return getToken(Cobol85Parser::YEAR, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::YYYYMMDD() {
  return getToken(Cobol85Parser::YYYYMMDD, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::YYYYDDD() {
  return getToken(Cobol85Parser::YYYYDDD, 0);
}

tree::TerminalNode* Cobol85Parser::CobolWordContext::ZERO_FILL() {
  return getToken(Cobol85Parser::ZERO_FILL, 0);
}


size_t Cobol85Parser::CobolWordContext::getRuleIndex() const {
  return Cobol85Parser::RuleCobolWord;
}

void Cobol85Parser::CobolWordContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCobolWord(this);
}

void Cobol85Parser::CobolWordContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCobolWord(this);
}

Cobol85Parser::CobolWordContext* Cobol85Parser::cobolWord() {
  CobolWordContext *_localctx = _tracker.createInstance<CobolWordContext>(_ctx, getState());
  enterRule(_localctx, 1170, Cobol85Parser::RuleCobolWord);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6195);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3512999431135821826) != 0) || ((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 8070451912006173187) != 0) || ((((_la - 138) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 138)) & 5276573893883339531) != 0) || ((((_la - 202) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 202)) & -3098194965423761407) != 0) || ((((_la - 268) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 268)) & -9202532752178970507) != 0) || ((((_la - 336) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 336)) & 4647874433930428483) != 0) || ((((_la - 401) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 401)) & 84826144769) != 0) || ((((_la - 466) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 466)) & 103635575018455169) != 0) || _la == Cobol85Parser::IDENTIFIER)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LiteralContext ------------------------------------------------------------------

Cobol85Parser::LiteralContext::LiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::LiteralContext::NONNUMERICLITERAL() {
  return getToken(Cobol85Parser::NONNUMERICLITERAL, 0);
}

Cobol85Parser::FigurativeConstantContext* Cobol85Parser::LiteralContext::figurativeConstant() {
  return getRuleContext<Cobol85Parser::FigurativeConstantContext>(0);
}

Cobol85Parser::NumericLiteralContext* Cobol85Parser::LiteralContext::numericLiteral() {
  return getRuleContext<Cobol85Parser::NumericLiteralContext>(0);
}

Cobol85Parser::BooleanLiteralContext* Cobol85Parser::LiteralContext::booleanLiteral() {
  return getRuleContext<Cobol85Parser::BooleanLiteralContext>(0);
}

Cobol85Parser::CicsDfhRespLiteralContext* Cobol85Parser::LiteralContext::cicsDfhRespLiteral() {
  return getRuleContext<Cobol85Parser::CicsDfhRespLiteralContext>(0);
}

Cobol85Parser::CicsDfhValueLiteralContext* Cobol85Parser::LiteralContext::cicsDfhValueLiteral() {
  return getRuleContext<Cobol85Parser::CicsDfhValueLiteralContext>(0);
}


size_t Cobol85Parser::LiteralContext::getRuleIndex() const {
  return Cobol85Parser::RuleLiteral;
}

void Cobol85Parser::LiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteral(this);
}

void Cobol85Parser::LiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteral(this);
}

Cobol85Parser::LiteralContext* Cobol85Parser::literal() {
  LiteralContext *_localctx = _tracker.createInstance<LiteralContext>(_ctx, getState());
  enterRule(_localctx, 1172, Cobol85Parser::RuleLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(6203);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 971, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(6197);
      match(Cobol85Parser::NONNUMERICLITERAL);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(6198);
      figurativeConstant();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(6199);
      numericLiteral();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(6200);
      booleanLiteral();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(6201);
      cicsDfhRespLiteral();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(6202);
      cicsDfhValueLiteral();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BooleanLiteralContext ------------------------------------------------------------------

Cobol85Parser::BooleanLiteralContext::BooleanLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::BooleanLiteralContext::TRUE() {
  return getToken(Cobol85Parser::TRUE, 0);
}

tree::TerminalNode* Cobol85Parser::BooleanLiteralContext::FALSE() {
  return getToken(Cobol85Parser::FALSE, 0);
}


size_t Cobol85Parser::BooleanLiteralContext::getRuleIndex() const {
  return Cobol85Parser::RuleBooleanLiteral;
}

void Cobol85Parser::BooleanLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBooleanLiteral(this);
}

void Cobol85Parser::BooleanLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBooleanLiteral(this);
}

Cobol85Parser::BooleanLiteralContext* Cobol85Parser::booleanLiteral() {
  BooleanLiteralContext *_localctx = _tracker.createInstance<BooleanLiteralContext>(_ctx, getState());
  enterRule(_localctx, 1174, Cobol85Parser::RuleBooleanLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6205);
    _la = _input->LA(1);
    if (!(_la == Cobol85Parser::FALSE || _la == Cobol85Parser::TRUE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NumericLiteralContext ------------------------------------------------------------------

Cobol85Parser::NumericLiteralContext::NumericLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::NumericLiteralContext::NUMERICLITERAL() {
  return getToken(Cobol85Parser::NUMERICLITERAL, 0);
}

tree::TerminalNode* Cobol85Parser::NumericLiteralContext::ZERO() {
  return getToken(Cobol85Parser::ZERO, 0);
}

Cobol85Parser::IntegerLiteralContext* Cobol85Parser::NumericLiteralContext::integerLiteral() {
  return getRuleContext<Cobol85Parser::IntegerLiteralContext>(0);
}


size_t Cobol85Parser::NumericLiteralContext::getRuleIndex() const {
  return Cobol85Parser::RuleNumericLiteral;
}

void Cobol85Parser::NumericLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNumericLiteral(this);
}

void Cobol85Parser::NumericLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNumericLiteral(this);
}

Cobol85Parser::NumericLiteralContext* Cobol85Parser::numericLiteral() {
  NumericLiteralContext *_localctx = _tracker.createInstance<NumericLiteralContext>(_ctx, getState());
  enterRule(_localctx, 1176, Cobol85Parser::RuleNumericLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(6210);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Cobol85Parser::NUMERICLITERAL: {
        enterOuterAlt(_localctx, 1);
        setState(6207);
        match(Cobol85Parser::NUMERICLITERAL);
        break;
      }

      case Cobol85Parser::ZERO: {
        enterOuterAlt(_localctx, 2);
        setState(6208);
        match(Cobol85Parser::ZERO);
        break;
      }

      case Cobol85Parser::LEVEL_NUMBER_66:
      case Cobol85Parser::LEVEL_NUMBER_77:
      case Cobol85Parser::LEVEL_NUMBER_88:
      case Cobol85Parser::INTEGERLITERAL: {
        enterOuterAlt(_localctx, 3);
        setState(6209);
        integerLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IntegerLiteralContext ------------------------------------------------------------------

Cobol85Parser::IntegerLiteralContext::IntegerLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::IntegerLiteralContext::INTEGERLITERAL() {
  return getToken(Cobol85Parser::INTEGERLITERAL, 0);
}

tree::TerminalNode* Cobol85Parser::IntegerLiteralContext::LEVEL_NUMBER_66() {
  return getToken(Cobol85Parser::LEVEL_NUMBER_66, 0);
}

tree::TerminalNode* Cobol85Parser::IntegerLiteralContext::LEVEL_NUMBER_77() {
  return getToken(Cobol85Parser::LEVEL_NUMBER_77, 0);
}

tree::TerminalNode* Cobol85Parser::IntegerLiteralContext::LEVEL_NUMBER_88() {
  return getToken(Cobol85Parser::LEVEL_NUMBER_88, 0);
}


size_t Cobol85Parser::IntegerLiteralContext::getRuleIndex() const {
  return Cobol85Parser::RuleIntegerLiteral;
}

void Cobol85Parser::IntegerLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIntegerLiteral(this);
}

void Cobol85Parser::IntegerLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIntegerLiteral(this);
}

Cobol85Parser::IntegerLiteralContext* Cobol85Parser::integerLiteral() {
  IntegerLiteralContext *_localctx = _tracker.createInstance<IntegerLiteralContext>(_ctx, getState());
  enterRule(_localctx, 1178, Cobol85Parser::RuleIntegerLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6212);
    _la = _input->LA(1);
    if (!(((((_la - 552) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 552)) & 15) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CicsDfhRespLiteralContext ------------------------------------------------------------------

Cobol85Parser::CicsDfhRespLiteralContext::CicsDfhRespLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::CicsDfhRespLiteralContext::DFHRESP() {
  return getToken(Cobol85Parser::DFHRESP, 0);
}

tree::TerminalNode* Cobol85Parser::CicsDfhRespLiteralContext::LPARENCHAR() {
  return getToken(Cobol85Parser::LPARENCHAR, 0);
}

tree::TerminalNode* Cobol85Parser::CicsDfhRespLiteralContext::RPARENCHAR() {
  return getToken(Cobol85Parser::RPARENCHAR, 0);
}

Cobol85Parser::CobolWordContext* Cobol85Parser::CicsDfhRespLiteralContext::cobolWord() {
  return getRuleContext<Cobol85Parser::CobolWordContext>(0);
}

Cobol85Parser::LiteralContext* Cobol85Parser::CicsDfhRespLiteralContext::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}


size_t Cobol85Parser::CicsDfhRespLiteralContext::getRuleIndex() const {
  return Cobol85Parser::RuleCicsDfhRespLiteral;
}

void Cobol85Parser::CicsDfhRespLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCicsDfhRespLiteral(this);
}

void Cobol85Parser::CicsDfhRespLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCicsDfhRespLiteral(this);
}

Cobol85Parser::CicsDfhRespLiteralContext* Cobol85Parser::cicsDfhRespLiteral() {
  CicsDfhRespLiteralContext *_localctx = _tracker.createInstance<CicsDfhRespLiteralContext>(_ctx, getState());
  enterRule(_localctx, 1180, Cobol85Parser::RuleCicsDfhRespLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6214);
    match(Cobol85Parser::DFHRESP);
    setState(6215);
    match(Cobol85Parser::LPARENCHAR);
    setState(6218);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 973, _ctx)) {
    case 1: {
      setState(6216);
      cobolWord();
      break;
    }

    case 2: {
      setState(6217);
      literal();
      break;
    }

    default:
      break;
    }
    setState(6220);
    match(Cobol85Parser::RPARENCHAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CicsDfhValueLiteralContext ------------------------------------------------------------------

Cobol85Parser::CicsDfhValueLiteralContext::CicsDfhValueLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::CicsDfhValueLiteralContext::DFHVALUE() {
  return getToken(Cobol85Parser::DFHVALUE, 0);
}

tree::TerminalNode* Cobol85Parser::CicsDfhValueLiteralContext::LPARENCHAR() {
  return getToken(Cobol85Parser::LPARENCHAR, 0);
}

tree::TerminalNode* Cobol85Parser::CicsDfhValueLiteralContext::RPARENCHAR() {
  return getToken(Cobol85Parser::RPARENCHAR, 0);
}

Cobol85Parser::CobolWordContext* Cobol85Parser::CicsDfhValueLiteralContext::cobolWord() {
  return getRuleContext<Cobol85Parser::CobolWordContext>(0);
}

Cobol85Parser::LiteralContext* Cobol85Parser::CicsDfhValueLiteralContext::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}


size_t Cobol85Parser::CicsDfhValueLiteralContext::getRuleIndex() const {
  return Cobol85Parser::RuleCicsDfhValueLiteral;
}

void Cobol85Parser::CicsDfhValueLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCicsDfhValueLiteral(this);
}

void Cobol85Parser::CicsDfhValueLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCicsDfhValueLiteral(this);
}

Cobol85Parser::CicsDfhValueLiteralContext* Cobol85Parser::cicsDfhValueLiteral() {
  CicsDfhValueLiteralContext *_localctx = _tracker.createInstance<CicsDfhValueLiteralContext>(_ctx, getState());
  enterRule(_localctx, 1182, Cobol85Parser::RuleCicsDfhValueLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6222);
    match(Cobol85Parser::DFHVALUE);
    setState(6223);
    match(Cobol85Parser::LPARENCHAR);
    setState(6226);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 974, _ctx)) {
    case 1: {
      setState(6224);
      cobolWord();
      break;
    }

    case 2: {
      setState(6225);
      literal();
      break;
    }

    default:
      break;
    }
    setState(6228);
    match(Cobol85Parser::RPARENCHAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FigurativeConstantContext ------------------------------------------------------------------

Cobol85Parser::FigurativeConstantContext::FigurativeConstantContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::FigurativeConstantContext::ALL() {
  return getToken(Cobol85Parser::ALL, 0);
}

Cobol85Parser::LiteralContext* Cobol85Parser::FigurativeConstantContext::literal() {
  return getRuleContext<Cobol85Parser::LiteralContext>(0);
}

tree::TerminalNode* Cobol85Parser::FigurativeConstantContext::HIGH_VALUE() {
  return getToken(Cobol85Parser::HIGH_VALUE, 0);
}

tree::TerminalNode* Cobol85Parser::FigurativeConstantContext::HIGH_VALUES() {
  return getToken(Cobol85Parser::HIGH_VALUES, 0);
}

tree::TerminalNode* Cobol85Parser::FigurativeConstantContext::LOW_VALUE() {
  return getToken(Cobol85Parser::LOW_VALUE, 0);
}

tree::TerminalNode* Cobol85Parser::FigurativeConstantContext::LOW_VALUES() {
  return getToken(Cobol85Parser::LOW_VALUES, 0);
}

tree::TerminalNode* Cobol85Parser::FigurativeConstantContext::NULL_() {
  return getToken(Cobol85Parser::NULL_, 0);
}

tree::TerminalNode* Cobol85Parser::FigurativeConstantContext::NULLS() {
  return getToken(Cobol85Parser::NULLS, 0);
}

tree::TerminalNode* Cobol85Parser::FigurativeConstantContext::QUOTE() {
  return getToken(Cobol85Parser::QUOTE, 0);
}

tree::TerminalNode* Cobol85Parser::FigurativeConstantContext::QUOTES() {
  return getToken(Cobol85Parser::QUOTES, 0);
}

tree::TerminalNode* Cobol85Parser::FigurativeConstantContext::SPACE() {
  return getToken(Cobol85Parser::SPACE, 0);
}

tree::TerminalNode* Cobol85Parser::FigurativeConstantContext::SPACES() {
  return getToken(Cobol85Parser::SPACES, 0);
}

tree::TerminalNode* Cobol85Parser::FigurativeConstantContext::ZERO() {
  return getToken(Cobol85Parser::ZERO, 0);
}

tree::TerminalNode* Cobol85Parser::FigurativeConstantContext::ZEROS() {
  return getToken(Cobol85Parser::ZEROS, 0);
}

tree::TerminalNode* Cobol85Parser::FigurativeConstantContext::ZEROES() {
  return getToken(Cobol85Parser::ZEROES, 0);
}


size_t Cobol85Parser::FigurativeConstantContext::getRuleIndex() const {
  return Cobol85Parser::RuleFigurativeConstant;
}

void Cobol85Parser::FigurativeConstantContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFigurativeConstant(this);
}

void Cobol85Parser::FigurativeConstantContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFigurativeConstant(this);
}

Cobol85Parser::FigurativeConstantContext* Cobol85Parser::figurativeConstant() {
  FigurativeConstantContext *_localctx = _tracker.createInstance<FigurativeConstantContext>(_ctx, getState());
  enterRule(_localctx, 1184, Cobol85Parser::RuleFigurativeConstant);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(6245);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Cobol85Parser::ALL: {
        enterOuterAlt(_localctx, 1);
        setState(6230);
        match(Cobol85Parser::ALL);
        setState(6231);
        literal();
        break;
      }

      case Cobol85Parser::HIGH_VALUE: {
        enterOuterAlt(_localctx, 2);
        setState(6232);
        match(Cobol85Parser::HIGH_VALUE);
        break;
      }

      case Cobol85Parser::HIGH_VALUES: {
        enterOuterAlt(_localctx, 3);
        setState(6233);
        match(Cobol85Parser::HIGH_VALUES);
        break;
      }

      case Cobol85Parser::LOW_VALUE: {
        enterOuterAlt(_localctx, 4);
        setState(6234);
        match(Cobol85Parser::LOW_VALUE);
        break;
      }

      case Cobol85Parser::LOW_VALUES: {
        enterOuterAlt(_localctx, 5);
        setState(6235);
        match(Cobol85Parser::LOW_VALUES);
        break;
      }

      case Cobol85Parser::NULL_: {
        enterOuterAlt(_localctx, 6);
        setState(6236);
        match(Cobol85Parser::NULL_);
        break;
      }

      case Cobol85Parser::NULLS: {
        enterOuterAlt(_localctx, 7);
        setState(6237);
        match(Cobol85Parser::NULLS);
        break;
      }

      case Cobol85Parser::QUOTE: {
        enterOuterAlt(_localctx, 8);
        setState(6238);
        match(Cobol85Parser::QUOTE);
        break;
      }

      case Cobol85Parser::QUOTES: {
        enterOuterAlt(_localctx, 9);
        setState(6239);
        match(Cobol85Parser::QUOTES);
        break;
      }

      case Cobol85Parser::SPACE: {
        enterOuterAlt(_localctx, 10);
        setState(6240);
        match(Cobol85Parser::SPACE);
        break;
      }

      case Cobol85Parser::SPACES: {
        enterOuterAlt(_localctx, 11);
        setState(6241);
        match(Cobol85Parser::SPACES);
        break;
      }

      case Cobol85Parser::ZERO: {
        enterOuterAlt(_localctx, 12);
        setState(6242);
        match(Cobol85Parser::ZERO);
        break;
      }

      case Cobol85Parser::ZEROS: {
        enterOuterAlt(_localctx, 13);
        setState(6243);
        match(Cobol85Parser::ZEROS);
        break;
      }

      case Cobol85Parser::ZEROES: {
        enterOuterAlt(_localctx, 14);
        setState(6244);
        match(Cobol85Parser::ZEROES);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SpecialRegisterContext ------------------------------------------------------------------

Cobol85Parser::SpecialRegisterContext::SpecialRegisterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Cobol85Parser::SpecialRegisterContext::ADDRESS() {
  return getToken(Cobol85Parser::ADDRESS, 0);
}

tree::TerminalNode* Cobol85Parser::SpecialRegisterContext::OF() {
  return getToken(Cobol85Parser::OF, 0);
}

Cobol85Parser::IdentifierContext* Cobol85Parser::SpecialRegisterContext::identifier() {
  return getRuleContext<Cobol85Parser::IdentifierContext>(0);
}

tree::TerminalNode* Cobol85Parser::SpecialRegisterContext::DATE() {
  return getToken(Cobol85Parser::DATE, 0);
}

tree::TerminalNode* Cobol85Parser::SpecialRegisterContext::DAY() {
  return getToken(Cobol85Parser::DAY, 0);
}

tree::TerminalNode* Cobol85Parser::SpecialRegisterContext::DAY_OF_WEEK() {
  return getToken(Cobol85Parser::DAY_OF_WEEK, 0);
}

tree::TerminalNode* Cobol85Parser::SpecialRegisterContext::DEBUG_CONTENTS() {
  return getToken(Cobol85Parser::DEBUG_CONTENTS, 0);
}

tree::TerminalNode* Cobol85Parser::SpecialRegisterContext::DEBUG_ITEM() {
  return getToken(Cobol85Parser::DEBUG_ITEM, 0);
}

tree::TerminalNode* Cobol85Parser::SpecialRegisterContext::DEBUG_LINE() {
  return getToken(Cobol85Parser::DEBUG_LINE, 0);
}

tree::TerminalNode* Cobol85Parser::SpecialRegisterContext::DEBUG_NAME() {
  return getToken(Cobol85Parser::DEBUG_NAME, 0);
}

tree::TerminalNode* Cobol85Parser::SpecialRegisterContext::DEBUG_SUB_1() {
  return getToken(Cobol85Parser::DEBUG_SUB_1, 0);
}

tree::TerminalNode* Cobol85Parser::SpecialRegisterContext::DEBUG_SUB_2() {
  return getToken(Cobol85Parser::DEBUG_SUB_2, 0);
}

tree::TerminalNode* Cobol85Parser::SpecialRegisterContext::DEBUG_SUB_3() {
  return getToken(Cobol85Parser::DEBUG_SUB_3, 0);
}

tree::TerminalNode* Cobol85Parser::SpecialRegisterContext::LENGTH() {
  return getToken(Cobol85Parser::LENGTH, 0);
}

tree::TerminalNode* Cobol85Parser::SpecialRegisterContext::LINAGE_COUNTER() {
  return getToken(Cobol85Parser::LINAGE_COUNTER, 0);
}

tree::TerminalNode* Cobol85Parser::SpecialRegisterContext::LINE_COUNTER() {
  return getToken(Cobol85Parser::LINE_COUNTER, 0);
}

tree::TerminalNode* Cobol85Parser::SpecialRegisterContext::PAGE_COUNTER() {
  return getToken(Cobol85Parser::PAGE_COUNTER, 0);
}

tree::TerminalNode* Cobol85Parser::SpecialRegisterContext::RETURN_CODE() {
  return getToken(Cobol85Parser::RETURN_CODE, 0);
}

tree::TerminalNode* Cobol85Parser::SpecialRegisterContext::SHIFT_IN() {
  return getToken(Cobol85Parser::SHIFT_IN, 0);
}

tree::TerminalNode* Cobol85Parser::SpecialRegisterContext::SHIFT_OUT() {
  return getToken(Cobol85Parser::SHIFT_OUT, 0);
}

tree::TerminalNode* Cobol85Parser::SpecialRegisterContext::SORT_CONTROL() {
  return getToken(Cobol85Parser::SORT_CONTROL, 0);
}

tree::TerminalNode* Cobol85Parser::SpecialRegisterContext::SORT_CORE_SIZE() {
  return getToken(Cobol85Parser::SORT_CORE_SIZE, 0);
}

tree::TerminalNode* Cobol85Parser::SpecialRegisterContext::SORT_FILE_SIZE() {
  return getToken(Cobol85Parser::SORT_FILE_SIZE, 0);
}

tree::TerminalNode* Cobol85Parser::SpecialRegisterContext::SORT_MESSAGE() {
  return getToken(Cobol85Parser::SORT_MESSAGE, 0);
}

tree::TerminalNode* Cobol85Parser::SpecialRegisterContext::SORT_MODE_SIZE() {
  return getToken(Cobol85Parser::SORT_MODE_SIZE, 0);
}

tree::TerminalNode* Cobol85Parser::SpecialRegisterContext::SORT_RETURN() {
  return getToken(Cobol85Parser::SORT_RETURN, 0);
}

tree::TerminalNode* Cobol85Parser::SpecialRegisterContext::TALLY() {
  return getToken(Cobol85Parser::TALLY, 0);
}

tree::TerminalNode* Cobol85Parser::SpecialRegisterContext::TIME() {
  return getToken(Cobol85Parser::TIME, 0);
}

tree::TerminalNode* Cobol85Parser::SpecialRegisterContext::WHEN_COMPILED() {
  return getToken(Cobol85Parser::WHEN_COMPILED, 0);
}


size_t Cobol85Parser::SpecialRegisterContext::getRuleIndex() const {
  return Cobol85Parser::RuleSpecialRegister;
}

void Cobol85Parser::SpecialRegisterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSpecialRegister(this);
}

void Cobol85Parser::SpecialRegisterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSpecialRegister(this);
}

Cobol85Parser::SpecialRegisterContext* Cobol85Parser::specialRegister() {
  SpecialRegisterContext *_localctx = _tracker.createInstance<SpecialRegisterContext>(_ctx, getState());
  enterRule(_localctx, 1186, Cobol85Parser::RuleSpecialRegister);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(6280);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Cobol85Parser::ADDRESS: {
        enterOuterAlt(_localctx, 1);
        setState(6247);
        match(Cobol85Parser::ADDRESS);
        setState(6248);
        match(Cobol85Parser::OF);
        setState(6249);
        identifier();
        break;
      }

      case Cobol85Parser::DATE: {
        enterOuterAlt(_localctx, 2);
        setState(6250);
        match(Cobol85Parser::DATE);
        break;
      }

      case Cobol85Parser::DAY: {
        enterOuterAlt(_localctx, 3);
        setState(6251);
        match(Cobol85Parser::DAY);
        break;
      }

      case Cobol85Parser::DAY_OF_WEEK: {
        enterOuterAlt(_localctx, 4);
        setState(6252);
        match(Cobol85Parser::DAY_OF_WEEK);
        break;
      }

      case Cobol85Parser::DEBUG_CONTENTS: {
        enterOuterAlt(_localctx, 5);
        setState(6253);
        match(Cobol85Parser::DEBUG_CONTENTS);
        break;
      }

      case Cobol85Parser::DEBUG_ITEM: {
        enterOuterAlt(_localctx, 6);
        setState(6254);
        match(Cobol85Parser::DEBUG_ITEM);
        break;
      }

      case Cobol85Parser::DEBUG_LINE: {
        enterOuterAlt(_localctx, 7);
        setState(6255);
        match(Cobol85Parser::DEBUG_LINE);
        break;
      }

      case Cobol85Parser::DEBUG_NAME: {
        enterOuterAlt(_localctx, 8);
        setState(6256);
        match(Cobol85Parser::DEBUG_NAME);
        break;
      }

      case Cobol85Parser::DEBUG_SUB_1: {
        enterOuterAlt(_localctx, 9);
        setState(6257);
        match(Cobol85Parser::DEBUG_SUB_1);
        break;
      }

      case Cobol85Parser::DEBUG_SUB_2: {
        enterOuterAlt(_localctx, 10);
        setState(6258);
        match(Cobol85Parser::DEBUG_SUB_2);
        break;
      }

      case Cobol85Parser::DEBUG_SUB_3: {
        enterOuterAlt(_localctx, 11);
        setState(6259);
        match(Cobol85Parser::DEBUG_SUB_3);
        break;
      }

      case Cobol85Parser::LENGTH: {
        enterOuterAlt(_localctx, 12);
        setState(6260);
        match(Cobol85Parser::LENGTH);
        setState(6262);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Cobol85Parser::OF) {
          setState(6261);
          match(Cobol85Parser::OF);
        }
        setState(6264);
        identifier();
        break;
      }

      case Cobol85Parser::LINAGE_COUNTER: {
        enterOuterAlt(_localctx, 13);
        setState(6265);
        match(Cobol85Parser::LINAGE_COUNTER);
        break;
      }

      case Cobol85Parser::LINE_COUNTER: {
        enterOuterAlt(_localctx, 14);
        setState(6266);
        match(Cobol85Parser::LINE_COUNTER);
        break;
      }

      case Cobol85Parser::PAGE_COUNTER: {
        enterOuterAlt(_localctx, 15);
        setState(6267);
        match(Cobol85Parser::PAGE_COUNTER);
        break;
      }

      case Cobol85Parser::RETURN_CODE: {
        enterOuterAlt(_localctx, 16);
        setState(6268);
        match(Cobol85Parser::RETURN_CODE);
        break;
      }

      case Cobol85Parser::SHIFT_IN: {
        enterOuterAlt(_localctx, 17);
        setState(6269);
        match(Cobol85Parser::SHIFT_IN);
        break;
      }

      case Cobol85Parser::SHIFT_OUT: {
        enterOuterAlt(_localctx, 18);
        setState(6270);
        match(Cobol85Parser::SHIFT_OUT);
        break;
      }

      case Cobol85Parser::SORT_CONTROL: {
        enterOuterAlt(_localctx, 19);
        setState(6271);
        match(Cobol85Parser::SORT_CONTROL);
        break;
      }

      case Cobol85Parser::SORT_CORE_SIZE: {
        enterOuterAlt(_localctx, 20);
        setState(6272);
        match(Cobol85Parser::SORT_CORE_SIZE);
        break;
      }

      case Cobol85Parser::SORT_FILE_SIZE: {
        enterOuterAlt(_localctx, 21);
        setState(6273);
        match(Cobol85Parser::SORT_FILE_SIZE);
        break;
      }

      case Cobol85Parser::SORT_MESSAGE: {
        enterOuterAlt(_localctx, 22);
        setState(6274);
        match(Cobol85Parser::SORT_MESSAGE);
        break;
      }

      case Cobol85Parser::SORT_MODE_SIZE: {
        enterOuterAlt(_localctx, 23);
        setState(6275);
        match(Cobol85Parser::SORT_MODE_SIZE);
        break;
      }

      case Cobol85Parser::SORT_RETURN: {
        enterOuterAlt(_localctx, 24);
        setState(6276);
        match(Cobol85Parser::SORT_RETURN);
        break;
      }

      case Cobol85Parser::TALLY: {
        enterOuterAlt(_localctx, 25);
        setState(6277);
        match(Cobol85Parser::TALLY);
        break;
      }

      case Cobol85Parser::TIME: {
        enterOuterAlt(_localctx, 26);
        setState(6278);
        match(Cobol85Parser::TIME);
        break;
      }

      case Cobol85Parser::WHEN_COMPILED: {
        enterOuterAlt(_localctx, 27);
        setState(6279);
        match(Cobol85Parser::WHEN_COMPILED);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CommentEntryContext ------------------------------------------------------------------

Cobol85Parser::CommentEntryContext::CommentEntryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> Cobol85Parser::CommentEntryContext::COMMENTENTRYLINE() {
  return getTokens(Cobol85Parser::COMMENTENTRYLINE);
}

tree::TerminalNode* Cobol85Parser::CommentEntryContext::COMMENTENTRYLINE(size_t i) {
  return getToken(Cobol85Parser::COMMENTENTRYLINE, i);
}


size_t Cobol85Parser::CommentEntryContext::getRuleIndex() const {
  return Cobol85Parser::RuleCommentEntry;
}

void Cobol85Parser::CommentEntryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCommentEntry(this);
}

void Cobol85Parser::CommentEntryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Cobol85Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCommentEntry(this);
}

Cobol85Parser::CommentEntryContext* Cobol85Parser::commentEntry() {
  CommentEntryContext *_localctx = _tracker.createInstance<CommentEntryContext>(_ctx, getState());
  enterRule(_localctx, 1188, Cobol85Parser::RuleCommentEntry);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(6283); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(6282);
      match(Cobol85Parser::COMMENTENTRYLINE);
      setState(6285); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == Cobol85Parser::COMMENTENTRYLINE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

void Cobol85Parser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  cobol85ParserInitialize();
#else
  ::antlr4::internal::call_once(cobol85ParserOnceFlag, cobol85ParserInitialize);
#endif
}
