
// Generated from VisualBasic6Parser.g4 by ANTLR 4.13.0


#include "VisualBasic6ParserListener.h"

#include "VisualBasic6Parser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct VisualBasic6ParserStaticData final {
  VisualBasic6ParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  VisualBasic6ParserStaticData(const VisualBasic6ParserStaticData&) = delete;
  VisualBasic6ParserStaticData(VisualBasic6ParserStaticData&&) = delete;
  VisualBasic6ParserStaticData& operator=(const VisualBasic6ParserStaticData&) = delete;
  VisualBasic6ParserStaticData& operator=(VisualBasic6ParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag visualbasic6parserParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
VisualBasic6ParserStaticData *visualbasic6parserParserStaticData = nullptr;

void visualbasic6parserParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (visualbasic6parserParserStaticData != nullptr) {
    return;
  }
#else
  assert(visualbasic6parserParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<VisualBasic6ParserStaticData>(
    std::vector<std::string>{
      "startRule", "module", "moduleReferences", "moduleReference", "moduleReferenceValue", 
      "moduleReferenceComponent", "moduleHeader", "moduleConfig", "moduleConfigElement", 
      "moduleAttributes", "moduleOptions", "moduleOption", "moduleBody", 
      "moduleBodyElement", "controlProperties", "cp_Properties", "cp_SingleProperty", 
      "cp_PropertyName", "cp_PropertyValue", "cp_NestedProperty", "cp_ControlType", 
      "cp_ControlIdentifier", "moduleBlock", "attributeStmt", "block", "blockStmt", 
      "appActivateStmt", "beepStmt", "chDirStmt", "chDriveStmt", "closeStmt", 
      "constStmt", "constSubStmt", "dateStmt", "declareStmt", "deftypeStmt", 
      "deleteSettingStmt", "doLoopStmt", "endStmt", "enumerationStmt", "enumerationStmt_Constant", 
      "eraseStmt", "errorStmt", "eventStmt", "exitStmt", "filecopyStmt", 
      "forEachStmt", "forNextStmt", "functionStmt", "getStmt", "goSubStmt", 
      "goToStmt", "ifThenElseStmt", "ifBlockStmt", "ifConditionStmt", "ifElseIfBlockStmt", 
      "ifElseBlockStmt", "implementsStmt", "inputStmt", "killStmt", "letStmt", 
      "lineInputStmt", "loadStmt", "lockStmt", "lsetStmt", "macroIfThenElseStmt", 
      "macroIfBlockStmt", "macroElseIfBlockStmt", "macroElseBlockStmt", 
      "midStmt", "mkdirStmt", "nameStmt", "onErrorStmt", "onGoToStmt", "onGoSubStmt", 
      "openStmt", "outputList", "outputList_Expression", "printStmt", "propertyGetStmt", 
      "propertySetStmt", "propertyLetStmt", "putStmt", "raiseEventStmt", 
      "randomizeStmt", "redimStmt", "redimSubStmt", "resetStmt", "resumeStmt", 
      "returnStmt", "rmdirStmt", "rsetStmt", "savepictureStmt", "saveSettingStmt", 
      "seekStmt", "selectCaseStmt", "sC_Case", "sC_Cond", "sC_CondExpr", 
      "sendkeysStmt", "setattrStmt", "setStmt", "stopStmt", "subStmt", "timeStmt", 
      "typeStmt", "typeStmt_Element", "typeOfStmt", "unloadStmt", "unlockStmt", 
      "valueStmt", "variableStmt", "variableListStmt", "variableSubStmt", 
      "whileWendStmt", "widthStmt", "withStmt", "writeStmt", "explicitCallStmt", 
      "eCS_ProcedureCall", "eCS_MemberProcedureCall", "implicitCallStmt_InBlock", 
      "iCS_B_ProcedureCall", "iCS_B_MemberProcedureCall", "implicitCallStmt_InStmt", 
      "iCS_S_VariableOrProcedureCall", "iCS_S_ProcedureOrArrayCall", "iCS_S_NestedProcedureCall", 
      "iCS_S_MembersCall", "iCS_S_MemberCall", "iCS_S_DictionaryCall", "argsCall", 
      "argCall", "dictionaryCallStmt", "argList", "arg", "argDefaultValue", 
      "subscripts", "subscript_", "ambiguousIdentifier", "asTypeClause", 
      "baseType", "certainIdentifier", "comparisonOperator", "complexType", 
      "fieldLength", "letterrange", "lineLabel", "literal", "publicPrivateVisibility", 
      "publicPrivateGlobalVisibility", "type_", "typeHint", "visibility", 
      "ambiguousKeyword", "integerLiteral", "octalLiteral", "doubleLiteral"
    },
    std::vector<std::string>{
      "", "'ACCESS'", "'ADDRESSOF'", "'ALIAS'", "'AND'", "'ATTRIBUTE'", 
      "'APPACTIVATE'", "'APPEND'", "'AS'", "'BEEP'", "'BEGIN'", "'BEGINPROPERTY'", 
      "'BINARY'", "'BOOLEAN'", "'BYVAL'", "'BYREF'", "'BYTE'", "'CALL'", 
      "'CASE'", "'CHDIR'", "'CHDRIVE'", "'CLASS'", "'CLOSE'", "'COLLECTION'", 
      "'CONST'", "'DATE'", "'DECLARE'", "'DEFBOOL'", "'DEFBYTE'", "'DEFDATE'", 
      "'DEFDBL'", "'DEFDEC'", "'DEFCUR'", "'DEFINT'", "'DEFLNG'", "'DEFOBJ'", 
      "'DEFSNG'", "'DEFSTR'", "'DEFVAR'", "'DELETESETTING'", "'DIM'", "'DO'", 
      "'DOUBLE'", "'EACH'", "'ELSE'", "'ELSEIF'", "'END ENUM'", "'END FUNCTION'", 
      "'END IF'", "'END PROPERTY'", "'END SELECT'", "'END SUB'", "'END TYPE'", 
      "'END WITH'", "'END'", "'ENDPROPERTY'", "'ENUM'", "'EQV'", "'ERASE'", 
      "'ERROR'", "'EVENT'", "'EXIT DO'", "'EXIT FOR'", "'EXIT FUNCTION'", 
      "'EXIT PROPERTY'", "'EXIT SUB'", "'FALSE'", "'FILECOPY'", "'FRIEND'", 
      "'FOR'", "'FUNCTION'", "'GET'", "'GLOBAL'", "'GOSUB'", "'GOTO'", "'IF'", 
      "'IMP'", "'IMPLEMENTS'", "'IN'", "'INPUT'", "'IS'", "'INTEGER'", "'KILL'", 
      "'LOAD'", "'LOCK'", "'LONG'", "'LOOP'", "'LEN'", "'LET'", "'LIB'", 
      "'LIKE'", "'LINE INPUT'", "'LOCK READ'", "'LOCK WRITE'", "'LOCK READ WRITE'", 
      "'LSET'", "", "", "", "", "'ME'", "'MID'", "'MKDIR'", "'MOD'", "'NAME'", 
      "'NEXT'", "'NEW'", "'NOT'", "'NOTHING'", "'NULL'", "'OBJECT'", "'ON'", 
      "'ON ERROR'", "'ON LOCAL ERROR'", "'OPEN'", "'OPTIONAL'", "'OPTION BASE'", 
      "'OPTION EXPLICIT'", "'OPTION COMPARE'", "'OPTION PRIVATE MODULE'", 
      "'OR'", "'OUTPUT'", "'PARAMARRAY'", "'PRESERVE'", "'PRINT'", "'PRIVATE'", 
      "'PROPERTY GET'", "'PROPERTY LET'", "'PROPERTY SET'", "'PUBLIC'", 
      "'PUT'", "'RANDOM'", "'RANDOMIZE'", "'RAISEEVENT'", "'READ'", "'READ WRITE'", 
      "'REDIM'", "'REM'", "'RESET'", "'RESUME'", "'RETURN'", "'RMDIR'", 
      "'RSET'", "'SAVEPICTURE'", "'SAVESETTING'", "'SEEK'", "'SELECT'", 
      "'SENDKEYS'", "'SET'", "'SETATTR'", "'SHARED'", "'SINGLE'", "'SPC'", 
      "'STATIC'", "'STEP'", "'STOP'", "'STRING'", "'SUB'", "'TAB'", "'TEXT'", 
      "'THEN'", "'TIME'", "'TO'", "'TRUE'", "'TYPE'", "'TYPEOF'", "'UNLOAD'", 
      "'UNLOCK'", "'UNTIL'", "'VARIANT'", "'VERSION'", "'WEND'", "'WHILE'", 
      "'WIDTH'", "'WITH'", "'WITHEVENTS'", "'WRITE'", "'XOR'", "'&'", "':='", 
      "'@'", "':'", "','", "'\\'", "'/'", "'$'", "'.'", "'='", "'!'", "'>='", 
      "'>'", "'#'", "'<='", "'{'", "'('", "'<'", "'-'", "'-='", "'*'", "'<>'", 
      "'%'", "'+'", "'+='", "'^'", "'}'", "')'", "';'", "'['", "']'"
    },
    std::vector<std::string>{
      "", "ACCESS", "ADDRESSOF", "ALIAS", "AND", "ATTRIBUTE", "APPACTIVATE", 
      "APPEND", "AS", "BEEP", "BEGIN", "BEGINPROPERTY", "BINARY", "BOOLEAN", 
      "BYVAL", "BYREF", "BYTE", "CALL", "CASE", "CHDIR", "CHDRIVE", "CLASS", 
      "CLOSE", "COLLECTION", "CONST", "DATE", "DECLARE", "DEFBOOL", "DEFBYTE", 
      "DEFDATE", "DEFDBL", "DEFDEC", "DEFCUR", "DEFINT", "DEFLNG", "DEFOBJ", 
      "DEFSNG", "DEFSTR", "DEFVAR", "DELETESETTING", "DIM", "DO", "DOUBLE", 
      "EACH", "ELSE", "ELSEIF", "END_ENUM", "END_FUNCTION", "END_IF", "END_PROPERTY", 
      "END_SELECT", "END_SUB", "END_TYPE", "END_WITH", "END", "ENDPROPERTY", 
      "ENUM", "EQV", "ERASE", "ERROR", "EVENT", "EXIT_DO", "EXIT_FOR", "EXIT_FUNCTION", 
      "EXIT_PROPERTY", "EXIT_SUB", "FALSE", "FILECOPY", "FRIEND", "FOR", 
      "FUNCTION", "GET", "GLOBAL", "GOSUB", "GOTO", "IF", "IMP", "IMPLEMENTS", 
      "IN", "INPUT", "IS", "INTEGER", "KILL", "LOAD", "LOCK", "LONG", "LOOP", 
      "LEN", "LET", "LIB", "LIKE", "LINE_INPUT", "LOCK_READ", "LOCK_WRITE", 
      "LOCK_READ_WRITE", "LSET", "MACRO_IF", "MACRO_ELSEIF", "MACRO_ELSE", 
      "MACRO_END_IF", "ME", "MID", "MKDIR", "MOD", "NAME", "NEXT", "NEW", 
      "NOT", "NOTHING", "NULL_", "OBJECT", "ON", "ON_ERROR", "ON_LOCAL_ERROR", 
      "OPEN", "OPTIONAL", "OPTION_BASE", "OPTION_EXPLICIT", "OPTION_COMPARE", 
      "OPTION_PRIVATE_MODULE", "OR", "OUTPUT", "PARAMARRAY", "PRESERVE", 
      "PRINT", "PRIVATE", "PROPERTY_GET", "PROPERTY_LET", "PROPERTY_SET", 
      "PUBLIC", "PUT", "RANDOM", "RANDOMIZE", "RAISEEVENT", "READ", "READ_WRITE", 
      "REDIM", "REM", "RESET", "RESUME", "RETURN", "RMDIR", "RSET", "SAVEPICTURE", 
      "SAVESETTING", "SEEK", "SELECT", "SENDKEYS", "SET", "SETATTR", "SHARED", 
      "SINGLE", "SPC", "STATIC", "STEP", "STOP", "STRING", "SUB", "TAB", 
      "TEXT", "THEN", "TIME", "TO", "TRUE", "TYPE", "TYPEOF", "UNLOAD", 
      "UNLOCK", "UNTIL", "VARIANT", "VERSION", "WEND", "WHILE", "WIDTH", 
      "WITH", "WITHEVENTS", "WRITE", "XOR", "AMPERSAND", "ASSIGN", "AT", 
      "COLON", "COMMA", "IDIV", "DIV", "DOLLAR", "DOT", "EQ", "EXCLAMATIONMARK", 
      "GEQ", "GT", "HASH", "LEQ", "LBRACE", "LPAREN", "LT", "MINUS", "MINUS_EQ", 
      "MULT", "NEQ", "PERCENT", "PLUS", "PLUS_EQ", "POW", "RBRACE", "RPAREN", 
      "SEMICOLON", "L_SQUARE_BRACKET", "R_SQUARE_BRACKET", "STRINGLITERAL", 
      "DATELITERAL", "COLORLITERAL", "INTEGERLITERAL", "DOUBLELITERAL", 
      "FILENUMBER", "OCTALLITERAL", "FRX_OFFSET", "GUID", "IDENTIFIER", 
      "LINE_CONTINUATION", "NEWLINE", "COMMENT", "WS"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,222,2861,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,
  	7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,
  	7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,
  	7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,
  	7,122,2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,
  	7,128,2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,
  	7,134,2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,
  	7,140,2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,
  	7,146,2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,
  	7,152,2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,1,0,
  	1,0,1,0,1,1,3,1,321,8,1,1,1,5,1,324,8,1,10,1,12,1,327,9,1,1,1,1,1,4,1,
  	331,8,1,11,1,12,1,332,3,1,335,8,1,1,1,3,1,338,8,1,1,1,5,1,341,8,1,10,
  	1,12,1,344,9,1,1,1,3,1,347,8,1,1,1,5,1,350,8,1,10,1,12,1,353,9,1,1,1,
  	3,1,356,8,1,1,1,5,1,359,8,1,10,1,12,1,362,9,1,1,1,3,1,365,8,1,1,1,5,1,
  	368,8,1,10,1,12,1,371,9,1,1,1,3,1,374,8,1,1,1,5,1,377,8,1,10,1,12,1,380,
  	9,1,1,1,3,1,383,8,1,1,1,5,1,386,8,1,10,1,12,1,389,9,1,1,1,3,1,392,8,1,
  	1,2,4,2,395,8,2,11,2,12,2,396,1,3,1,3,3,3,401,8,3,1,3,1,3,3,3,405,8,3,
  	1,3,1,3,1,3,3,3,410,8,3,1,3,3,3,413,8,3,1,3,5,3,416,8,3,10,3,12,3,419,
  	9,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,6,3,6,430,8,6,1,7,1,7,4,7,434,8,
  	7,11,7,12,7,435,1,7,4,7,439,8,7,11,7,12,7,440,1,7,1,7,4,7,445,8,7,11,
  	7,12,7,446,1,8,1,8,3,8,451,8,8,1,8,1,8,3,8,455,8,8,1,8,1,8,1,8,1,9,1,
  	9,4,9,462,8,9,11,9,12,9,463,4,9,466,8,9,11,9,12,9,467,1,10,1,10,4,10,
  	472,8,10,11,10,12,10,473,4,10,476,8,10,11,10,12,10,477,1,11,1,11,1,11,
  	1,11,1,11,1,11,1,11,1,11,3,11,488,8,11,1,12,1,12,4,12,492,8,12,11,12,
  	12,12,493,1,12,5,12,497,8,12,10,12,12,12,500,9,12,1,13,1,13,1,13,1,13,
  	1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,514,8,13,1,14,3,14,517,8,
  	14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,525,8,14,1,14,4,14,528,8,14,11,
  	14,12,14,529,1,14,4,14,533,8,14,11,14,12,14,534,1,14,1,14,5,14,539,8,
  	14,10,14,12,14,542,9,14,1,15,1,15,1,15,3,15,547,8,15,1,16,3,16,550,8,
  	16,1,16,1,16,3,16,554,8,16,1,16,1,16,3,16,558,8,16,1,16,3,16,561,8,16,
  	1,16,1,16,3,16,565,8,16,1,16,4,16,568,8,16,11,16,12,16,569,1,17,1,17,
  	3,17,574,8,17,1,17,1,17,1,17,1,17,1,17,3,17,581,8,17,1,17,1,17,1,17,1,
  	17,1,17,1,17,3,17,589,8,17,5,17,591,8,17,10,17,12,17,594,9,17,1,18,3,
  	18,597,8,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,606,8,18,1,19,3,19,
  	609,8,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,618,8,19,1,19,1,19,3,
  	19,622,8,19,1,19,4,19,625,8,19,11,19,12,19,626,1,19,4,19,630,8,19,11,
  	19,12,19,631,3,19,634,8,19,1,19,1,19,4,19,638,8,19,11,19,12,19,639,1,
  	20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,23,1,23,3,23,652,8,23,1,23,1,
  	23,3,23,656,8,23,1,23,1,23,3,23,660,8,23,1,23,1,23,3,23,664,8,23,1,23,
  	5,23,667,8,23,10,23,12,23,670,9,23,1,24,1,24,4,24,674,8,24,11,24,12,24,
  	675,1,24,3,24,679,8,24,1,24,5,24,682,8,24,10,24,12,24,685,9,24,1,25,1,
  	25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,
  	25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,
  	25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,
  	25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,
  	25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,754,8,25,1,26,1,
  	26,1,26,1,26,3,26,760,8,26,1,26,1,26,3,26,764,8,26,1,26,3,26,767,8,26,
  	1,27,1,27,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,
  	3,30,783,8,30,1,30,1,30,3,30,787,8,30,1,30,5,30,790,8,30,10,30,12,30,
  	793,9,30,3,30,795,8,30,1,31,1,31,1,31,3,31,800,8,31,1,31,1,31,1,31,1,
  	31,3,31,806,8,31,1,31,1,31,3,31,810,8,31,1,31,5,31,813,8,31,10,31,12,
  	31,816,9,31,1,32,1,32,3,32,820,8,32,1,32,1,32,3,32,824,8,32,1,32,3,32,
  	827,8,32,1,32,1,32,3,32,831,8,32,1,32,1,32,1,33,1,33,3,33,837,8,33,1,
  	33,1,33,3,33,841,8,33,1,33,1,33,1,34,1,34,1,34,3,34,848,8,34,1,34,1,34,
  	1,34,1,34,3,34,854,8,34,1,34,3,34,857,8,34,1,34,1,34,1,34,3,34,862,8,
  	34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,872,8,34,1,34,3,34,875,
  	8,34,1,34,3,34,878,8,34,1,34,1,34,3,34,882,8,34,1,35,1,35,1,35,1,35,3,
  	35,888,8,35,1,35,1,35,3,35,892,8,35,1,35,5,35,895,8,35,10,35,12,35,898,
  	9,35,1,36,1,36,1,36,1,36,3,36,904,8,36,1,36,1,36,3,36,908,8,36,1,36,1,
  	36,3,36,912,8,36,1,36,1,36,3,36,916,8,36,1,36,3,36,919,8,36,1,37,1,37,
  	4,37,923,8,37,11,37,12,37,924,1,37,1,37,4,37,929,8,37,11,37,12,37,930,
  	3,37,933,8,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,4,37,942,8,37,11,37,
  	12,37,943,1,37,1,37,4,37,948,8,37,11,37,12,37,949,3,37,952,8,37,1,37,
  	1,37,1,37,1,37,4,37,958,8,37,11,37,12,37,959,1,37,1,37,4,37,964,8,37,
  	11,37,12,37,965,1,37,1,37,1,37,1,37,1,37,1,37,3,37,974,8,37,1,38,1,38,
  	1,39,1,39,1,39,3,39,981,8,39,1,39,1,39,1,39,1,39,4,39,987,8,39,11,39,
  	12,39,988,1,39,5,39,992,8,39,10,39,12,39,995,9,39,1,39,1,39,1,40,1,40,
  	3,40,1001,8,40,1,40,1,40,3,40,1005,8,40,1,40,3,40,1008,8,40,1,40,4,40,
  	1011,8,40,11,40,12,40,1012,1,41,1,41,1,41,1,41,3,41,1019,8,41,1,41,1,
  	41,3,41,1023,8,41,1,41,5,41,1026,8,41,10,41,12,41,1029,9,41,1,42,1,42,
  	1,42,1,42,1,43,1,43,1,43,3,43,1038,8,43,1,43,1,43,1,43,1,43,3,43,1044,
  	8,43,1,43,1,43,1,44,1,44,1,45,1,45,1,45,1,45,3,45,1054,8,45,1,45,1,45,
  	3,45,1058,8,45,1,45,1,45,1,46,1,46,1,46,1,46,1,46,1,46,3,46,1068,8,46,
  	1,46,1,46,1,46,1,46,1,46,4,46,1075,8,46,11,46,12,46,1076,1,46,1,46,4,
  	46,1081,8,46,11,46,12,46,1082,3,46,1085,8,46,1,46,1,46,1,46,3,46,1090,
  	8,46,1,47,1,47,1,47,1,47,3,47,1096,8,47,1,47,1,47,3,47,1100,8,47,1,47,
  	3,47,1103,8,47,1,47,1,47,3,47,1107,8,47,1,47,1,47,1,47,1,47,1,47,1,47,
  	1,47,1,47,1,47,3,47,1118,8,47,1,47,4,47,1121,8,47,11,47,12,47,1122,1,
  	47,1,47,4,47,1127,8,47,11,47,12,47,1128,3,47,1131,8,47,1,47,1,47,1,47,
  	1,47,3,47,1137,8,47,3,47,1139,8,47,1,48,1,48,1,48,3,48,1144,8,48,1,48,
  	1,48,3,48,1148,8,48,1,48,1,48,1,48,1,48,3,48,1154,8,48,1,48,3,48,1157,
  	8,48,1,48,1,48,3,48,1161,8,48,1,48,4,48,1164,8,48,11,48,12,48,1165,1,
  	48,1,48,4,48,1170,8,48,11,48,12,48,1171,3,48,1174,8,48,1,48,1,48,1,49,
  	1,49,1,49,1,49,3,49,1182,8,49,1,49,1,49,3,49,1186,8,49,1,49,3,49,1189,
  	8,49,1,49,3,49,1192,8,49,1,49,1,49,3,49,1196,8,49,1,49,1,49,1,50,1,50,
  	1,50,1,50,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
  	1,52,1,52,1,52,3,52,1219,8,52,1,52,1,52,5,52,1223,8,52,10,52,12,52,1226,
  	9,52,1,52,3,52,1229,8,52,1,52,1,52,3,52,1233,8,52,1,53,1,53,1,53,1,53,
  	1,53,1,53,4,53,1241,8,53,11,53,12,53,1242,1,53,1,53,4,53,1247,8,53,11,
  	53,12,53,1248,3,53,1251,8,53,1,54,1,54,1,55,1,55,1,55,1,55,1,55,1,55,
  	4,55,1261,8,55,11,55,12,55,1262,1,55,1,55,4,55,1267,8,55,11,55,12,55,
  	1268,3,55,1271,8,55,1,56,1,56,4,56,1275,8,56,11,56,12,56,1276,1,56,1,
  	56,4,56,1281,8,56,11,56,12,56,1282,3,56,1285,8,56,1,57,1,57,1,57,1,57,
  	1,58,1,58,1,58,1,58,3,58,1295,8,58,1,58,1,58,3,58,1299,8,58,1,58,4,58,
  	1302,8,58,11,58,12,58,1303,1,59,1,59,1,59,1,59,1,60,1,60,3,60,1312,8,
  	60,1,60,1,60,3,60,1316,8,60,1,60,1,60,3,60,1320,8,60,1,60,1,60,1,61,1,
  	61,1,61,1,61,3,61,1328,8,61,1,61,1,61,3,61,1332,8,61,1,61,1,61,1,62,1,
  	62,1,62,1,62,1,63,1,63,1,63,1,63,3,63,1344,8,63,1,63,1,63,3,63,1348,8,
  	63,1,63,1,63,1,63,1,63,1,63,3,63,1355,8,63,3,63,1357,8,63,1,64,1,64,1,
  	64,1,64,3,64,1363,8,64,1,64,1,64,3,64,1367,8,64,1,64,1,64,1,65,1,65,5,
  	65,1373,8,65,10,65,12,65,1376,9,65,1,65,3,65,1379,8,65,1,65,1,65,1,66,
  	1,66,1,66,1,66,1,66,1,66,4,66,1389,8,66,11,66,12,66,1390,1,66,1,66,4,
  	66,1395,8,66,11,66,12,66,1396,3,66,1399,8,66,1,67,1,67,1,67,1,67,1,67,
  	1,67,4,67,1407,8,67,11,67,12,67,1408,1,67,1,67,4,67,1413,8,67,11,67,12,
  	67,1414,3,67,1417,8,67,1,68,1,68,4,68,1421,8,68,11,68,12,68,1422,1,68,
  	1,68,4,68,1427,8,68,11,68,12,68,1428,3,68,1431,8,68,1,69,1,69,3,69,1435,
  	8,69,1,69,1,69,3,69,1439,8,69,1,69,1,69,3,69,1443,8,69,1,69,1,69,1,70,
  	1,70,1,70,1,70,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,72,1,72,1,72,
  	1,72,1,72,1,72,3,72,1465,8,72,1,72,1,72,1,72,3,72,1470,8,72,1,73,1,73,
  	1,73,1,73,1,73,1,73,1,73,1,73,3,73,1480,8,73,1,73,1,73,3,73,1484,8,73,
  	1,73,5,73,1487,8,73,10,73,12,73,1490,9,73,1,74,1,74,1,74,1,74,1,74,1,
  	74,1,74,1,74,3,74,1500,8,74,1,74,1,74,3,74,1504,8,74,1,74,5,74,1507,8,
  	74,10,74,12,74,1510,9,74,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,
  	1,75,1,75,3,75,1523,8,75,1,75,1,75,3,75,1527,8,75,1,75,1,75,1,75,1,75,
  	1,75,1,75,1,75,3,75,1536,8,75,1,75,1,75,3,75,1540,8,75,1,75,3,75,1543,
  	8,75,1,76,1,76,3,76,1547,8,76,1,76,1,76,3,76,1551,8,76,1,76,3,76,1554,
  	8,76,5,76,1556,8,76,10,76,12,76,1559,9,76,1,76,3,76,1562,8,76,1,76,3,
  	76,1565,8,76,1,76,1,76,3,76,1569,8,76,1,76,3,76,1572,8,76,4,76,1574,8,
  	76,11,76,12,76,1575,3,76,1578,8,76,1,77,1,77,3,77,1582,8,77,1,77,1,77,
  	3,77,1586,8,77,1,77,1,77,3,77,1590,8,77,1,77,1,77,3,77,1594,8,77,1,77,
  	3,77,1597,8,77,1,78,1,78,1,78,1,78,3,78,1603,8,78,1,78,1,78,3,78,1607,
  	8,78,1,78,3,78,1610,8,78,1,79,1,79,1,79,3,79,1615,8,79,1,79,1,79,3,79,
  	1619,8,79,1,79,1,79,1,79,1,79,3,79,1625,8,79,1,79,3,79,1628,8,79,1,79,
  	3,79,1631,8,79,1,79,1,79,3,79,1635,8,79,1,79,4,79,1638,8,79,11,79,12,
  	79,1639,1,79,1,79,4,79,1644,8,79,11,79,12,79,1645,3,79,1648,8,79,1,79,
  	1,79,1,80,1,80,1,80,3,80,1655,8,80,1,80,1,80,3,80,1659,8,80,1,80,1,80,
  	1,80,1,80,3,80,1665,8,80,1,80,3,80,1668,8,80,1,80,4,80,1671,8,80,11,80,
  	12,80,1672,1,80,1,80,4,80,1677,8,80,11,80,12,80,1678,3,80,1681,8,80,1,
  	80,1,80,1,81,1,81,1,81,3,81,1688,8,81,1,81,1,81,3,81,1692,8,81,1,81,1,
  	81,1,81,1,81,3,81,1698,8,81,1,81,3,81,1701,8,81,1,81,4,81,1704,8,81,11,
  	81,12,81,1705,1,81,1,81,4,81,1710,8,81,11,81,12,81,1711,3,81,1714,8,81,
  	1,81,1,81,1,82,1,82,1,82,1,82,3,82,1722,8,82,1,82,1,82,3,82,1726,8,82,
  	1,82,3,82,1729,8,82,1,82,3,82,1732,8,82,1,82,1,82,3,82,1736,8,82,1,82,
  	1,82,1,83,1,83,1,83,1,83,3,83,1744,8,83,1,83,1,83,3,83,1748,8,83,1,83,
  	1,83,3,83,1752,8,83,3,83,1754,8,83,1,83,3,83,1757,8,83,1,84,1,84,1,84,
  	3,84,1762,8,84,1,85,1,85,1,85,1,85,3,85,1768,8,85,1,85,1,85,3,85,1772,
  	8,85,1,85,1,85,3,85,1776,8,85,1,85,5,85,1779,8,85,10,85,12,85,1782,9,
  	85,1,86,1,86,3,86,1786,8,86,1,86,1,86,3,86,1790,8,86,1,86,1,86,3,86,1794,
  	8,86,1,86,1,86,1,86,3,86,1799,8,86,1,87,1,87,1,88,1,88,1,88,1,88,3,88,
  	1807,8,88,3,88,1809,8,88,1,89,1,89,1,90,1,90,1,90,1,90,1,91,1,91,1,91,
  	1,91,3,91,1821,8,91,1,91,1,91,3,91,1825,8,91,1,91,1,91,1,92,1,92,1,92,
  	1,92,3,92,1833,8,92,1,92,1,92,3,92,1837,8,92,1,92,1,92,1,93,1,93,1,93,
  	1,93,3,93,1845,8,93,1,93,1,93,3,93,1849,8,93,1,93,1,93,3,93,1853,8,93,
  	1,93,1,93,3,93,1857,8,93,1,93,1,93,3,93,1861,8,93,1,93,1,93,3,93,1865,
  	8,93,1,93,1,93,1,94,1,94,1,94,1,94,3,94,1873,8,94,1,94,1,94,3,94,1877,
  	8,94,1,94,1,94,1,95,1,95,1,95,1,95,1,95,1,95,4,95,1887,8,95,11,95,12,
  	95,1888,1,95,5,95,1892,8,95,10,95,12,95,1895,9,95,1,95,3,95,1898,8,95,
  	1,95,1,95,1,96,1,96,1,96,1,96,3,96,1906,8,96,1,96,3,96,1909,8,96,1,96,
  	5,96,1912,8,96,10,96,12,96,1915,9,96,1,96,4,96,1918,8,96,11,96,12,96,
  	1919,3,96,1922,8,96,1,96,1,96,4,96,1926,8,96,11,96,12,96,1927,3,96,1930,
  	8,96,1,97,1,97,1,97,3,97,1935,8,97,1,97,1,97,3,97,1939,8,97,1,97,5,97,
  	1942,8,97,10,97,12,97,1945,9,97,3,97,1947,8,97,1,98,1,98,3,98,1951,8,
  	98,1,98,1,98,3,98,1955,8,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,
  	98,3,98,1966,8,98,1,99,1,99,1,99,1,99,3,99,1972,8,99,1,99,1,99,3,99,1976,
  	8,99,1,99,3,99,1979,8,99,1,100,1,100,1,100,1,100,3,100,1985,8,100,1,100,
  	1,100,3,100,1989,8,100,1,100,1,100,1,101,1,101,1,101,1,101,3,101,1997,
  	8,101,1,101,1,101,3,101,2001,8,101,1,101,1,101,1,102,1,102,1,103,1,103,
  	1,103,3,103,2010,8,103,1,103,1,103,3,103,2014,8,103,1,103,1,103,1,103,
  	1,103,3,103,2020,8,103,1,103,3,103,2023,8,103,1,103,4,103,2026,8,103,
  	11,103,12,103,2027,1,103,1,103,4,103,2032,8,103,11,103,12,103,2033,3,
  	103,2036,8,103,1,103,1,103,1,104,1,104,3,104,2042,8,104,1,104,1,104,3,
  	104,2046,8,104,1,104,1,104,1,105,1,105,1,105,3,105,2053,8,105,1,105,1,
  	105,1,105,1,105,4,105,2059,8,105,11,105,12,105,2060,1,105,5,105,2064,
  	8,105,10,105,12,105,2067,9,105,1,105,1,105,1,106,1,106,3,106,2073,8,106,
  	1,106,1,106,3,106,2077,8,106,1,106,3,106,2080,8,106,1,106,3,106,2083,
  	8,106,1,106,3,106,2086,8,106,1,106,1,106,3,106,2090,8,106,1,106,4,106,
  	2093,8,106,11,106,12,106,2094,1,107,1,107,1,107,1,107,1,107,1,107,1,107,
  	3,107,2104,8,107,1,108,1,108,1,108,1,108,1,109,1,109,1,109,1,109,3,109,
  	2114,8,109,1,109,1,109,3,109,2118,8,109,1,109,1,109,1,109,1,109,1,109,
  	3,109,2125,8,109,3,109,2127,8,109,1,110,1,110,1,110,1,110,3,110,2133,
  	8,110,1,110,1,110,3,110,2137,8,110,1,110,1,110,3,110,2141,8,110,1,110,
  	5,110,2144,8,110,10,110,12,110,2147,9,110,1,110,3,110,2150,8,110,1,110,
  	1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,3,110,2163,
  	8,110,1,110,1,110,3,110,2167,8,110,1,110,1,110,1,110,1,110,3,110,2173,
  	8,110,1,110,1,110,1,110,1,110,1,110,1,110,3,110,2181,8,110,1,110,1,110,
  	3,110,2185,8,110,1,110,1,110,3,110,2189,8,110,1,110,1,110,3,110,2193,
  	8,110,1,110,1,110,3,110,2197,8,110,1,110,1,110,3,110,2201,8,110,1,110,
  	1,110,1,110,3,110,2206,8,110,1,110,1,110,3,110,2210,8,110,1,110,1,110,
  	1,110,3,110,2215,8,110,1,110,1,110,3,110,2219,8,110,1,110,1,110,1,110,
  	3,110,2224,8,110,1,110,1,110,3,110,2228,8,110,1,110,1,110,1,110,3,110,
  	2233,8,110,1,110,1,110,3,110,2237,8,110,1,110,1,110,1,110,3,110,2242,
  	8,110,1,110,1,110,3,110,2246,8,110,1,110,1,110,1,110,3,110,2251,8,110,
  	1,110,1,110,3,110,2255,8,110,1,110,1,110,1,110,3,110,2260,8,110,1,110,
  	1,110,3,110,2264,8,110,1,110,1,110,1,110,3,110,2269,8,110,1,110,1,110,
  	3,110,2273,8,110,1,110,1,110,1,110,3,110,2278,8,110,1,110,1,110,3,110,
  	2282,8,110,1,110,1,110,1,110,3,110,2287,8,110,1,110,1,110,3,110,2291,
  	8,110,1,110,1,110,1,110,3,110,2296,8,110,1,110,1,110,3,110,2300,8,110,
  	1,110,5,110,2303,8,110,10,110,12,110,2306,9,110,1,111,1,111,1,111,3,111,
  	2311,8,111,1,111,1,111,1,111,3,111,2316,8,111,1,111,1,111,1,112,1,112,
  	3,112,2322,8,112,1,112,1,112,3,112,2326,8,112,1,112,5,112,2329,8,112,
  	10,112,12,112,2332,9,112,1,113,1,113,3,113,2336,8,113,1,113,3,113,2339,
  	8,113,1,113,1,113,3,113,2343,8,113,1,113,1,113,3,113,2347,8,113,3,113,
  	2349,8,113,1,113,1,113,3,113,2353,8,113,3,113,2355,8,113,1,113,1,113,
  	3,113,2359,8,113,1,114,1,114,1,114,1,114,4,114,2365,8,114,11,114,12,114,
  	2366,1,114,5,114,2370,8,114,10,114,12,114,2373,9,114,1,114,5,114,2376,
  	8,114,10,114,12,114,2379,9,114,1,114,1,114,1,115,1,115,1,115,1,115,3,
  	115,2387,8,115,1,115,1,115,3,115,2391,8,115,1,115,1,115,1,116,1,116,1,
  	116,1,116,3,116,2399,8,116,1,116,1,116,4,116,2403,8,116,11,116,12,116,
  	2404,1,116,1,116,4,116,2409,8,116,11,116,12,116,2410,3,116,2413,8,116,
  	1,116,1,116,1,117,1,117,1,117,1,117,3,117,2421,8,117,1,117,1,117,3,117,
  	2425,8,117,1,117,3,117,2428,8,117,1,118,1,118,3,118,2432,8,118,1,119,
  	1,119,1,119,1,119,3,119,2438,8,119,1,119,3,119,2441,8,119,1,119,1,119,
  	3,119,2445,8,119,1,119,1,119,3,119,2449,8,119,1,119,1,119,3,119,2453,
  	8,119,1,120,1,120,1,120,3,120,2458,8,120,1,120,1,120,3,120,2462,8,120,
  	1,120,1,120,3,120,2466,8,120,1,120,3,120,2469,8,120,1,120,1,120,3,120,
  	2473,8,120,1,120,1,120,3,120,2477,8,120,1,120,1,120,3,120,2481,8,120,
  	1,121,1,121,3,121,2485,8,121,1,122,1,122,1,122,3,122,2490,8,122,1,123,
  	3,123,2493,8,123,1,123,1,123,1,123,3,123,2498,8,123,1,123,1,123,3,123,
  	2502,8,123,1,123,3,123,2505,8,123,1,124,1,124,1,124,1,124,3,124,2511,
  	8,124,1,125,1,125,3,125,2515,8,125,1,125,3,125,2518,8,125,1,126,1,126,
  	1,126,3,126,2523,8,126,1,126,3,126,2526,8,126,1,126,3,126,2529,8,126,
  	1,126,1,126,3,126,2533,8,126,1,126,1,126,3,126,2537,8,126,3,126,2539,
  	8,126,1,126,4,126,2542,8,126,11,126,12,126,2543,1,126,3,126,2547,8,126,
  	1,127,1,127,3,127,2551,8,127,1,127,3,127,2554,8,127,1,127,1,127,3,127,
  	2558,8,127,1,127,1,127,3,127,2562,8,127,3,127,2564,8,127,1,127,1,127,
  	1,128,1,128,3,128,2570,8,128,1,128,4,128,2573,8,128,11,128,12,128,2574,
  	1,128,3,128,2578,8,128,1,129,3,129,2581,8,129,1,129,1,129,1,129,3,129,
  	2586,8,129,1,130,1,130,1,131,3,131,2591,8,131,1,131,3,131,2594,8,131,
  	1,131,1,131,3,131,2598,8,131,5,131,2600,8,131,10,131,12,131,2603,9,131,
  	1,131,1,131,3,131,2607,8,131,1,131,1,131,3,131,2611,8,131,1,131,3,131,
  	2614,8,131,5,131,2616,8,131,10,131,12,131,2619,9,131,1,132,1,132,3,132,
  	2623,8,132,1,132,1,132,1,133,1,133,1,133,3,133,2630,8,133,1,134,1,134,
  	3,134,2634,8,134,1,134,1,134,3,134,2638,8,134,1,134,1,134,3,134,2642,
  	8,134,1,134,5,134,2645,8,134,10,134,12,134,2648,9,134,3,134,2650,8,134,
  	1,134,3,134,2653,8,134,1,134,1,134,1,135,1,135,3,135,2659,8,135,1,135,
  	1,135,3,135,2663,8,135,1,135,1,135,3,135,2667,8,135,1,135,1,135,3,135,
  	2671,8,135,1,135,3,135,2674,8,135,1,135,1,135,3,135,2678,8,135,1,135,
  	3,135,2681,8,135,1,135,1,135,3,135,2685,8,135,1,135,3,135,2688,8,135,
  	1,135,3,135,2691,8,135,1,136,1,136,3,136,2695,8,136,1,136,1,136,1,137,
  	1,137,3,137,2701,8,137,1,137,1,137,3,137,2705,8,137,1,137,5,137,2708,
  	8,137,10,137,12,137,2711,9,137,1,138,1,138,1,138,1,138,1,138,3,138,2718,
  	8,138,1,138,1,138,1,139,1,139,4,139,2724,8,139,11,139,12,139,2725,1,139,
  	1,139,1,139,4,139,2731,8,139,11,139,12,139,2732,1,139,3,139,2736,8,139,
  	1,140,1,140,1,140,1,140,3,140,2742,8,140,1,140,1,140,1,140,3,140,2747,
  	8,140,1,141,1,141,1,142,1,142,1,142,5,142,2754,8,142,10,142,12,142,2757,
  	9,142,1,142,1,142,1,142,4,142,2762,8,142,11,142,12,142,2763,3,142,2766,
  	8,142,1,143,1,143,1,144,1,144,1,144,5,144,2773,8,144,10,144,12,144,2776,
  	9,144,1,145,1,145,3,145,2780,8,145,1,145,1,145,3,145,2784,8,145,1,146,
  	1,146,3,146,2788,8,146,1,146,1,146,3,146,2792,8,146,1,146,3,146,2795,
  	8,146,1,147,1,147,1,147,1,148,1,148,1,148,1,148,1,148,1,148,1,148,1,148,
  	1,148,1,148,1,148,3,148,2811,8,148,1,149,1,149,1,150,1,150,1,151,1,151,
  	3,151,2819,8,151,1,151,3,151,2822,8,151,1,151,1,151,3,151,2826,8,151,
  	1,151,3,151,2829,8,151,1,152,1,152,1,153,1,153,1,154,1,154,1,155,5,155,
  	2838,8,155,10,155,12,155,2841,9,155,1,155,1,155,1,156,5,156,2846,8,156,
  	10,156,12,156,2849,9,156,1,156,1,156,1,157,5,157,2854,8,157,10,157,12,
  	157,2857,9,157,1,157,1,157,1,157,0,1,220,158,0,2,4,6,8,10,12,14,16,18,
  	20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,
  	66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,
  	110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,
  	146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,
  	182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,
  	218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,
  	254,256,258,260,262,264,266,268,270,272,274,276,278,280,282,284,286,288,
  	290,292,294,296,298,300,302,304,306,308,310,312,314,0,22,2,0,12,12,159,
  	159,1,0,27,38,2,0,168,168,172,172,1,0,61,65,3,0,187,187,197,197,202,202,
  	1,0,112,113,5,0,7,7,12,12,79,79,121,121,131,131,2,0,134,135,176,176,2,
  	0,92,94,150,150,2,0,182,182,206,206,2,0,152,152,158,158,2,0,196,196,201,
  	201,2,0,184,184,198,198,7,0,80,80,90,90,187,187,189,190,192,192,195,195,
  	199,199,2,0,14,15,122,122,1,0,14,15,11,0,13,13,16,16,23,23,25,25,42,42,
  	81,81,85,85,110,110,151,151,156,156,169,169,2,0,125,125,129,129,3,0,72,
  	72,125,125,129,129,6,0,178,178,180,180,185,185,188,188,191,191,200,200,
  	4,0,68,68,72,72,125,125,129,129,11,0,1,10,12,45,54,54,56,60,66,90,95,
  	95,100,111,114,115,120,125,129,134,136,177,3306,0,316,1,0,0,0,2,320,1,
  	0,0,0,4,394,1,0,0,0,6,398,1,0,0,0,8,420,1,0,0,0,10,422,1,0,0,0,12,424,
  	1,0,0,0,14,431,1,0,0,0,16,448,1,0,0,0,18,465,1,0,0,0,20,475,1,0,0,0,22,
  	487,1,0,0,0,24,489,1,0,0,0,26,513,1,0,0,0,28,516,1,0,0,0,30,546,1,0,0,
  	0,32,549,1,0,0,0,34,573,1,0,0,0,36,596,1,0,0,0,38,608,1,0,0,0,40,641,
  	1,0,0,0,42,643,1,0,0,0,44,645,1,0,0,0,46,647,1,0,0,0,48,671,1,0,0,0,50,
  	753,1,0,0,0,52,755,1,0,0,0,54,768,1,0,0,0,56,770,1,0,0,0,58,774,1,0,0,
  	0,60,778,1,0,0,0,62,799,1,0,0,0,64,817,1,0,0,0,66,834,1,0,0,0,68,847,
  	1,0,0,0,70,883,1,0,0,0,72,899,1,0,0,0,74,973,1,0,0,0,76,975,1,0,0,0,78,
  	980,1,0,0,0,80,998,1,0,0,0,82,1014,1,0,0,0,84,1030,1,0,0,0,86,1037,1,
  	0,0,0,88,1047,1,0,0,0,90,1049,1,0,0,0,92,1061,1,0,0,0,94,1091,1,0,0,0,
  	96,1143,1,0,0,0,98,1177,1,0,0,0,100,1199,1,0,0,0,102,1203,1,0,0,0,104,
  	1232,1,0,0,0,106,1234,1,0,0,0,108,1252,1,0,0,0,110,1254,1,0,0,0,112,1272,
  	1,0,0,0,114,1286,1,0,0,0,116,1290,1,0,0,0,118,1305,1,0,0,0,120,1311,1,
  	0,0,0,122,1323,1,0,0,0,124,1335,1,0,0,0,126,1339,1,0,0,0,128,1358,1,0,
  	0,0,130,1370,1,0,0,0,132,1382,1,0,0,0,134,1400,1,0,0,0,136,1418,1,0,0,
  	0,138,1432,1,0,0,0,140,1446,1,0,0,0,142,1450,1,0,0,0,144,1458,1,0,0,0,
  	146,1471,1,0,0,0,148,1491,1,0,0,0,150,1511,1,0,0,0,152,1577,1,0,0,0,154,
  	1596,1,0,0,0,156,1598,1,0,0,0,158,1614,1,0,0,0,160,1654,1,0,0,0,162,1687,
  	1,0,0,0,164,1717,1,0,0,0,166,1739,1,0,0,0,168,1758,1,0,0,0,170,1763,1,
  	0,0,0,172,1783,1,0,0,0,174,1800,1,0,0,0,176,1802,1,0,0,0,178,1810,1,0,
  	0,0,180,1812,1,0,0,0,182,1816,1,0,0,0,184,1828,1,0,0,0,186,1840,1,0,0,
  	0,188,1868,1,0,0,0,190,1880,1,0,0,0,192,1901,1,0,0,0,194,1946,1,0,0,0,
  	196,1965,1,0,0,0,198,1967,1,0,0,0,200,1980,1,0,0,0,202,1992,1,0,0,0,204,
  	2004,1,0,0,0,206,2009,1,0,0,0,208,2039,1,0,0,0,210,2052,1,0,0,0,212,2070,
  	1,0,0,0,214,2096,1,0,0,0,216,2105,1,0,0,0,218,2109,1,0,0,0,220,2192,1,
  	0,0,0,222,2310,1,0,0,0,224,2319,1,0,0,0,226,2333,1,0,0,0,228,2360,1,0,
  	0,0,230,2382,1,0,0,0,232,2394,1,0,0,0,234,2416,1,0,0,0,236,2431,1,0,0,
  	0,238,2433,1,0,0,0,240,2454,1,0,0,0,242,2484,1,0,0,0,244,2486,1,0,0,0,
  	246,2492,1,0,0,0,248,2510,1,0,0,0,250,2512,1,0,0,0,252,2522,1,0,0,0,254,
  	2548,1,0,0,0,256,2569,1,0,0,0,258,2580,1,0,0,0,260,2587,1,0,0,0,262,2601,
  	1,0,0,0,264,2622,1,0,0,0,266,2626,1,0,0,0,268,2631,1,0,0,0,270,2658,1,
  	0,0,0,272,2692,1,0,0,0,274,2698,1,0,0,0,276,2717,1,0,0,0,278,2735,1,0,
  	0,0,280,2737,1,0,0,0,282,2748,1,0,0,0,284,2765,1,0,0,0,286,2767,1,0,0,
  	0,288,2769,1,0,0,0,290,2777,1,0,0,0,292,2785,1,0,0,0,294,2796,1,0,0,0,
  	296,2810,1,0,0,0,298,2812,1,0,0,0,300,2814,1,0,0,0,302,2818,1,0,0,0,304,
  	2830,1,0,0,0,306,2832,1,0,0,0,308,2834,1,0,0,0,310,2839,1,0,0,0,312,2847,
  	1,0,0,0,314,2855,1,0,0,0,316,317,3,2,1,0,317,318,5,0,0,1,318,1,1,0,0,
  	0,319,321,5,222,0,0,320,319,1,0,0,0,320,321,1,0,0,0,321,325,1,0,0,0,322,
  	324,5,220,0,0,323,322,1,0,0,0,324,327,1,0,0,0,325,323,1,0,0,0,325,326,
  	1,0,0,0,326,334,1,0,0,0,327,325,1,0,0,0,328,330,3,12,6,0,329,331,5,220,
  	0,0,330,329,1,0,0,0,331,332,1,0,0,0,332,330,1,0,0,0,332,333,1,0,0,0,333,
  	335,1,0,0,0,334,328,1,0,0,0,334,335,1,0,0,0,335,337,1,0,0,0,336,338,3,
  	4,2,0,337,336,1,0,0,0,337,338,1,0,0,0,338,342,1,0,0,0,339,341,5,220,0,
  	0,340,339,1,0,0,0,341,344,1,0,0,0,342,340,1,0,0,0,342,343,1,0,0,0,343,
  	346,1,0,0,0,344,342,1,0,0,0,345,347,3,28,14,0,346,345,1,0,0,0,346,347,
  	1,0,0,0,347,351,1,0,0,0,348,350,5,220,0,0,349,348,1,0,0,0,350,353,1,0,
  	0,0,351,349,1,0,0,0,351,352,1,0,0,0,352,355,1,0,0,0,353,351,1,0,0,0,354,
  	356,3,14,7,0,355,354,1,0,0,0,355,356,1,0,0,0,356,360,1,0,0,0,357,359,
  	5,220,0,0,358,357,1,0,0,0,359,362,1,0,0,0,360,358,1,0,0,0,360,361,1,0,
  	0,0,361,364,1,0,0,0,362,360,1,0,0,0,363,365,3,18,9,0,364,363,1,0,0,0,
  	364,365,1,0,0,0,365,369,1,0,0,0,366,368,5,220,0,0,367,366,1,0,0,0,368,
  	371,1,0,0,0,369,367,1,0,0,0,369,370,1,0,0,0,370,373,1,0,0,0,371,369,1,
  	0,0,0,372,374,3,20,10,0,373,372,1,0,0,0,373,374,1,0,0,0,374,378,1,0,0,
  	0,375,377,5,220,0,0,376,375,1,0,0,0,377,380,1,0,0,0,378,376,1,0,0,0,378,
  	379,1,0,0,0,379,382,1,0,0,0,380,378,1,0,0,0,381,383,3,24,12,0,382,381,
  	1,0,0,0,382,383,1,0,0,0,383,387,1,0,0,0,384,386,5,220,0,0,385,384,1,0,
  	0,0,386,389,1,0,0,0,387,385,1,0,0,0,387,388,1,0,0,0,388,391,1,0,0,0,389,
  	387,1,0,0,0,390,392,5,222,0,0,391,390,1,0,0,0,391,392,1,0,0,0,392,3,1,
  	0,0,0,393,395,3,6,3,0,394,393,1,0,0,0,395,396,1,0,0,0,396,394,1,0,0,0,
  	396,397,1,0,0,0,397,5,1,0,0,0,398,400,5,110,0,0,399,401,5,222,0,0,400,
  	399,1,0,0,0,400,401,1,0,0,0,401,402,1,0,0,0,402,404,5,187,0,0,403,405,
  	5,222,0,0,404,403,1,0,0,0,404,405,1,0,0,0,405,406,1,0,0,0,406,412,3,8,
  	4,0,407,409,5,206,0,0,408,410,5,222,0,0,409,408,1,0,0,0,409,410,1,0,0,
  	0,410,411,1,0,0,0,411,413,3,10,5,0,412,407,1,0,0,0,412,413,1,0,0,0,413,
  	417,1,0,0,0,414,416,5,220,0,0,415,414,1,0,0,0,416,419,1,0,0,0,417,415,
  	1,0,0,0,417,418,1,0,0,0,418,7,1,0,0,0,419,417,1,0,0,0,420,421,5,209,0,
  	0,421,9,1,0,0,0,422,423,5,209,0,0,423,11,1,0,0,0,424,425,5,170,0,0,425,
  	426,5,222,0,0,426,429,3,314,157,0,427,428,5,222,0,0,428,430,5,21,0,0,
  	429,427,1,0,0,0,429,430,1,0,0,0,430,13,1,0,0,0,431,433,5,10,0,0,432,434,
  	5,220,0,0,433,432,1,0,0,0,434,435,1,0,0,0,435,433,1,0,0,0,435,436,1,0,
  	0,0,436,438,1,0,0,0,437,439,3,16,8,0,438,437,1,0,0,0,439,440,1,0,0,0,
  	440,438,1,0,0,0,440,441,1,0,0,0,441,442,1,0,0,0,442,444,5,54,0,0,443,
  	445,5,220,0,0,444,443,1,0,0,0,445,446,1,0,0,0,446,444,1,0,0,0,446,447,
  	1,0,0,0,447,15,1,0,0,0,448,450,3,278,139,0,449,451,5,222,0,0,450,449,
  	1,0,0,0,450,451,1,0,0,0,451,452,1,0,0,0,452,454,5,187,0,0,453,455,5,222,
  	0,0,454,453,1,0,0,0,454,455,1,0,0,0,455,456,1,0,0,0,456,457,3,296,148,
  	0,457,458,5,220,0,0,458,17,1,0,0,0,459,461,3,46,23,0,460,462,5,220,0,
  	0,461,460,1,0,0,0,462,463,1,0,0,0,463,461,1,0,0,0,463,464,1,0,0,0,464,
  	466,1,0,0,0,465,459,1,0,0,0,466,467,1,0,0,0,467,465,1,0,0,0,467,468,1,
  	0,0,0,468,19,1,0,0,0,469,471,3,22,11,0,470,472,5,220,0,0,471,470,1,0,
  	0,0,472,473,1,0,0,0,473,471,1,0,0,0,473,474,1,0,0,0,474,476,1,0,0,0,475,
  	469,1,0,0,0,476,477,1,0,0,0,477,475,1,0,0,0,477,478,1,0,0,0,478,21,1,
  	0,0,0,479,480,5,116,0,0,480,481,5,222,0,0,481,488,3,310,155,0,482,483,
  	5,118,0,0,483,484,5,222,0,0,484,488,7,0,0,0,485,488,5,117,0,0,486,488,
  	5,119,0,0,487,479,1,0,0,0,487,482,1,0,0,0,487,485,1,0,0,0,487,486,1,0,
  	0,0,488,23,1,0,0,0,489,498,3,26,13,0,490,492,5,220,0,0,491,490,1,0,0,
  	0,492,493,1,0,0,0,493,491,1,0,0,0,493,494,1,0,0,0,494,495,1,0,0,0,495,
  	497,3,26,13,0,496,491,1,0,0,0,497,500,1,0,0,0,498,496,1,0,0,0,498,499,
  	1,0,0,0,499,25,1,0,0,0,500,498,1,0,0,0,501,514,3,44,22,0,502,514,3,22,
  	11,0,503,514,3,68,34,0,504,514,3,78,39,0,505,514,3,86,43,0,506,514,3,
  	96,48,0,507,514,3,130,65,0,508,514,3,158,79,0,509,514,3,160,80,0,510,
  	514,3,162,81,0,511,514,3,206,103,0,512,514,3,210,105,0,513,501,1,0,0,
  	0,513,502,1,0,0,0,513,503,1,0,0,0,513,504,1,0,0,0,513,505,1,0,0,0,513,
  	506,1,0,0,0,513,507,1,0,0,0,513,508,1,0,0,0,513,509,1,0,0,0,513,510,1,
  	0,0,0,513,511,1,0,0,0,513,512,1,0,0,0,514,27,1,0,0,0,515,517,5,222,0,
  	0,516,515,1,0,0,0,516,517,1,0,0,0,517,518,1,0,0,0,518,519,5,10,0,0,519,
  	520,5,222,0,0,520,521,3,40,20,0,521,522,5,222,0,0,522,524,3,42,21,0,523,
  	525,5,222,0,0,524,523,1,0,0,0,524,525,1,0,0,0,525,527,1,0,0,0,526,528,
  	5,220,0,0,527,526,1,0,0,0,528,529,1,0,0,0,529,527,1,0,0,0,529,530,1,0,
  	0,0,530,532,1,0,0,0,531,533,3,30,15,0,532,531,1,0,0,0,533,534,1,0,0,0,
  	534,532,1,0,0,0,534,535,1,0,0,0,535,536,1,0,0,0,536,540,5,54,0,0,537,
  	539,5,220,0,0,538,537,1,0,0,0,539,542,1,0,0,0,540,538,1,0,0,0,540,541,
  	1,0,0,0,541,29,1,0,0,0,542,540,1,0,0,0,543,547,3,32,16,0,544,547,3,38,
  	19,0,545,547,3,28,14,0,546,543,1,0,0,0,546,544,1,0,0,0,546,545,1,0,0,
  	0,547,31,1,0,0,0,548,550,5,222,0,0,549,548,1,0,0,0,549,550,1,0,0,0,550,
  	551,1,0,0,0,551,553,3,248,124,0,552,554,5,222,0,0,553,552,1,0,0,0,553,
  	554,1,0,0,0,554,555,1,0,0,0,555,557,5,187,0,0,556,558,5,222,0,0,557,556,
  	1,0,0,0,557,558,1,0,0,0,558,560,1,0,0,0,559,561,5,185,0,0,560,559,1,0,
  	0,0,560,561,1,0,0,0,561,562,1,0,0,0,562,564,3,36,18,0,563,565,5,216,0,
  	0,564,563,1,0,0,0,564,565,1,0,0,0,565,567,1,0,0,0,566,568,5,220,0,0,567,
  	566,1,0,0,0,568,569,1,0,0,0,569,567,1,0,0,0,569,570,1,0,0,0,570,33,1,
  	0,0,0,571,572,5,110,0,0,572,574,5,186,0,0,573,571,1,0,0,0,573,574,1,0,
  	0,0,574,575,1,0,0,0,575,580,3,278,139,0,576,577,5,194,0,0,577,578,3,296,
  	148,0,578,579,5,205,0,0,579,581,1,0,0,0,580,576,1,0,0,0,580,581,1,0,0,
  	0,581,592,1,0,0,0,582,583,5,186,0,0,583,588,3,278,139,0,584,585,5,194,
  	0,0,585,586,3,296,148,0,586,587,5,205,0,0,587,589,1,0,0,0,588,584,1,0,
  	0,0,588,589,1,0,0,0,589,591,1,0,0,0,590,582,1,0,0,0,591,594,1,0,0,0,592,
  	590,1,0,0,0,592,593,1,0,0,0,593,35,1,0,0,0,594,592,1,0,0,0,595,597,5,
  	185,0,0,596,595,1,0,0,0,596,597,1,0,0,0,597,605,1,0,0,0,598,606,3,296,
  	148,0,599,600,5,193,0,0,600,601,3,278,139,0,601,602,5,204,0,0,602,606,
  	1,0,0,0,603,604,5,203,0,0,604,606,3,278,139,0,605,598,1,0,0,0,605,599,
  	1,0,0,0,605,603,1,0,0,0,606,37,1,0,0,0,607,609,5,222,0,0,608,607,1,0,
  	0,0,608,609,1,0,0,0,609,610,1,0,0,0,610,611,5,11,0,0,611,612,5,222,0,
  	0,612,617,3,278,139,0,613,614,5,194,0,0,614,615,3,310,155,0,615,616,5,
  	205,0,0,616,618,1,0,0,0,617,613,1,0,0,0,617,618,1,0,0,0,618,621,1,0,0,
  	0,619,620,5,222,0,0,620,622,5,217,0,0,621,619,1,0,0,0,621,622,1,0,0,0,
  	622,624,1,0,0,0,623,625,5,220,0,0,624,623,1,0,0,0,625,626,1,0,0,0,626,
  	624,1,0,0,0,626,627,1,0,0,0,627,633,1,0,0,0,628,630,3,30,15,0,629,628,
  	1,0,0,0,630,631,1,0,0,0,631,629,1,0,0,0,631,632,1,0,0,0,632,634,1,0,0,
  	0,633,629,1,0,0,0,633,634,1,0,0,0,634,635,1,0,0,0,635,637,5,55,0,0,636,
  	638,5,220,0,0,637,636,1,0,0,0,638,639,1,0,0,0,639,637,1,0,0,0,639,640,
  	1,0,0,0,640,39,1,0,0,0,641,642,3,288,144,0,642,41,1,0,0,0,643,644,3,278,
  	139,0,644,43,1,0,0,0,645,646,3,48,24,0,646,45,1,0,0,0,647,648,5,5,0,0,
  	648,649,5,222,0,0,649,651,3,248,124,0,650,652,5,222,0,0,651,650,1,0,0,
  	0,651,652,1,0,0,0,652,653,1,0,0,0,653,655,5,187,0,0,654,656,5,222,0,0,
  	655,654,1,0,0,0,655,656,1,0,0,0,656,657,1,0,0,0,657,668,3,296,148,0,658,
  	660,5,222,0,0,659,658,1,0,0,0,659,660,1,0,0,0,660,661,1,0,0,0,661,663,
  	5,182,0,0,662,664,5,222,0,0,663,662,1,0,0,0,663,664,1,0,0,0,664,665,1,
  	0,0,0,665,667,3,296,148,0,666,659,1,0,0,0,667,670,1,0,0,0,668,666,1,0,
  	0,0,668,669,1,0,0,0,669,47,1,0,0,0,670,668,1,0,0,0,671,683,3,50,25,0,
  	672,674,5,220,0,0,673,672,1,0,0,0,674,675,1,0,0,0,675,673,1,0,0,0,675,
  	676,1,0,0,0,676,678,1,0,0,0,677,679,5,222,0,0,678,677,1,0,0,0,678,679,
  	1,0,0,0,679,680,1,0,0,0,680,682,3,50,25,0,681,673,1,0,0,0,682,685,1,0,
  	0,0,683,681,1,0,0,0,683,684,1,0,0,0,684,49,1,0,0,0,685,683,1,0,0,0,686,
  	754,3,52,26,0,687,754,3,46,23,0,688,754,3,54,27,0,689,754,3,56,28,0,690,
  	754,3,58,29,0,691,754,3,60,30,0,692,754,3,62,31,0,693,754,3,66,33,0,694,
  	754,3,72,36,0,695,754,3,70,35,0,696,754,3,74,37,0,697,754,3,76,38,0,698,
  	754,3,82,41,0,699,754,3,84,42,0,700,754,3,88,44,0,701,754,3,236,118,0,
  	702,754,3,90,45,0,703,754,3,92,46,0,704,754,3,94,47,0,705,754,3,98,49,
  	0,706,754,3,100,50,0,707,754,3,102,51,0,708,754,3,104,52,0,709,754,3,
  	114,57,0,710,754,3,116,58,0,711,754,3,118,59,0,712,754,3,120,60,0,713,
  	754,3,122,61,0,714,754,3,294,147,0,715,754,3,124,62,0,716,754,3,126,63,
  	0,717,754,3,128,64,0,718,754,3,130,65,0,719,754,3,138,69,0,720,754,3,
  	140,70,0,721,754,3,142,71,0,722,754,3,144,72,0,723,754,3,146,73,0,724,
  	754,3,148,74,0,725,754,3,150,75,0,726,754,3,156,78,0,727,754,3,164,82,
  	0,728,754,3,166,83,0,729,754,3,168,84,0,730,754,3,170,85,0,731,754,3,
  	174,87,0,732,754,3,176,88,0,733,754,3,178,89,0,734,754,3,180,90,0,735,
  	754,3,182,91,0,736,754,3,184,92,0,737,754,3,186,93,0,738,754,3,188,94,
  	0,739,754,3,190,95,0,740,754,3,198,99,0,741,754,3,200,100,0,742,754,3,
  	202,101,0,743,754,3,204,102,0,744,754,3,208,104,0,745,754,3,216,108,0,
  	746,754,3,218,109,0,747,754,3,222,111,0,748,754,3,228,114,0,749,754,3,
  	230,115,0,750,754,3,232,116,0,751,754,3,234,117,0,752,754,3,242,121,0,
  	753,686,1,0,0,0,753,687,1,0,0,0,753,688,1,0,0,0,753,689,1,0,0,0,753,690,
  	1,0,0,0,753,691,1,0,0,0,753,692,1,0,0,0,753,693,1,0,0,0,753,694,1,0,0,
  	0,753,695,1,0,0,0,753,696,1,0,0,0,753,697,1,0,0,0,753,698,1,0,0,0,753,
  	699,1,0,0,0,753,700,1,0,0,0,753,701,1,0,0,0,753,702,1,0,0,0,753,703,1,
  	0,0,0,753,704,1,0,0,0,753,705,1,0,0,0,753,706,1,0,0,0,753,707,1,0,0,0,
  	753,708,1,0,0,0,753,709,1,0,0,0,753,710,1,0,0,0,753,711,1,0,0,0,753,712,
  	1,0,0,0,753,713,1,0,0,0,753,714,1,0,0,0,753,715,1,0,0,0,753,716,1,0,0,
  	0,753,717,1,0,0,0,753,718,1,0,0,0,753,719,1,0,0,0,753,720,1,0,0,0,753,
  	721,1,0,0,0,753,722,1,0,0,0,753,723,1,0,0,0,753,724,1,0,0,0,753,725,1,
  	0,0,0,753,726,1,0,0,0,753,727,1,0,0,0,753,728,1,0,0,0,753,729,1,0,0,0,
  	753,730,1,0,0,0,753,731,1,0,0,0,753,732,1,0,0,0,753,733,1,0,0,0,753,734,
  	1,0,0,0,753,735,1,0,0,0,753,736,1,0,0,0,753,737,1,0,0,0,753,738,1,0,0,
  	0,753,739,1,0,0,0,753,740,1,0,0,0,753,741,1,0,0,0,753,742,1,0,0,0,753,
  	743,1,0,0,0,753,744,1,0,0,0,753,745,1,0,0,0,753,746,1,0,0,0,753,747,1,
  	0,0,0,753,748,1,0,0,0,753,749,1,0,0,0,753,750,1,0,0,0,753,751,1,0,0,0,
  	753,752,1,0,0,0,754,51,1,0,0,0,755,756,5,6,0,0,756,757,5,222,0,0,757,
  	766,3,220,110,0,758,760,5,222,0,0,759,758,1,0,0,0,759,760,1,0,0,0,760,
  	761,1,0,0,0,761,763,5,182,0,0,762,764,5,222,0,0,763,762,1,0,0,0,763,764,
  	1,0,0,0,764,765,1,0,0,0,765,767,3,220,110,0,766,759,1,0,0,0,766,767,1,
  	0,0,0,767,53,1,0,0,0,768,769,5,9,0,0,769,55,1,0,0,0,770,771,5,19,0,0,
  	771,772,5,222,0,0,772,773,3,220,110,0,773,57,1,0,0,0,774,775,5,20,0,0,
  	775,776,5,222,0,0,776,777,3,220,110,0,777,59,1,0,0,0,778,794,5,22,0,0,
  	779,780,5,222,0,0,780,791,3,220,110,0,781,783,5,222,0,0,782,781,1,0,0,
  	0,782,783,1,0,0,0,783,784,1,0,0,0,784,786,5,182,0,0,785,787,5,222,0,0,
  	786,785,1,0,0,0,786,787,1,0,0,0,787,788,1,0,0,0,788,790,3,220,110,0,789,
  	782,1,0,0,0,790,793,1,0,0,0,791,789,1,0,0,0,791,792,1,0,0,0,792,795,1,
  	0,0,0,793,791,1,0,0,0,794,779,1,0,0,0,794,795,1,0,0,0,795,61,1,0,0,0,
  	796,797,3,300,150,0,797,798,5,222,0,0,798,800,1,0,0,0,799,796,1,0,0,0,
  	799,800,1,0,0,0,800,801,1,0,0,0,801,802,5,24,0,0,802,803,5,222,0,0,803,
  	814,3,64,32,0,804,806,5,222,0,0,805,804,1,0,0,0,805,806,1,0,0,0,806,807,
  	1,0,0,0,807,809,5,182,0,0,808,810,5,222,0,0,809,808,1,0,0,0,809,810,1,
  	0,0,0,810,811,1,0,0,0,811,813,3,64,32,0,812,805,1,0,0,0,813,816,1,0,0,
  	0,814,812,1,0,0,0,814,815,1,0,0,0,815,63,1,0,0,0,816,814,1,0,0,0,817,
  	819,3,278,139,0,818,820,3,304,152,0,819,818,1,0,0,0,819,820,1,0,0,0,820,
  	823,1,0,0,0,821,822,5,222,0,0,822,824,3,280,140,0,823,821,1,0,0,0,823,
  	824,1,0,0,0,824,826,1,0,0,0,825,827,5,222,0,0,826,825,1,0,0,0,826,827,
  	1,0,0,0,827,828,1,0,0,0,828,830,5,187,0,0,829,831,5,222,0,0,830,829,1,
  	0,0,0,830,831,1,0,0,0,831,832,1,0,0,0,832,833,3,220,110,0,833,65,1,0,
  	0,0,834,836,5,25,0,0,835,837,5,222,0,0,836,835,1,0,0,0,836,837,1,0,0,
  	0,837,838,1,0,0,0,838,840,5,187,0,0,839,841,5,222,0,0,840,839,1,0,0,0,
  	840,841,1,0,0,0,841,842,1,0,0,0,842,843,3,220,110,0,843,67,1,0,0,0,844,
  	845,3,306,153,0,845,846,5,222,0,0,846,848,1,0,0,0,847,844,1,0,0,0,847,
  	848,1,0,0,0,848,849,1,0,0,0,849,850,5,26,0,0,850,856,5,222,0,0,851,853,
  	5,70,0,0,852,854,3,304,152,0,853,852,1,0,0,0,853,854,1,0,0,0,854,857,
  	1,0,0,0,855,857,5,157,0,0,856,851,1,0,0,0,856,855,1,0,0,0,857,858,1,0,
  	0,0,858,859,5,222,0,0,859,861,3,278,139,0,860,862,3,304,152,0,861,860,
  	1,0,0,0,861,862,1,0,0,0,862,863,1,0,0,0,863,864,5,222,0,0,864,865,5,89,
  	0,0,865,866,5,222,0,0,866,871,5,209,0,0,867,868,5,222,0,0,868,869,5,3,
  	0,0,869,870,5,222,0,0,870,872,5,209,0,0,871,867,1,0,0,0,871,872,1,0,0,
  	0,872,877,1,0,0,0,873,875,5,222,0,0,874,873,1,0,0,0,874,875,1,0,0,0,875,
  	876,1,0,0,0,876,878,3,268,134,0,877,874,1,0,0,0,877,878,1,0,0,0,878,881,
  	1,0,0,0,879,880,5,222,0,0,880,882,3,280,140,0,881,879,1,0,0,0,881,882,
  	1,0,0,0,882,69,1,0,0,0,883,884,7,1,0,0,884,885,5,222,0,0,885,896,3,292,
  	146,0,886,888,5,222,0,0,887,886,1,0,0,0,887,888,1,0,0,0,888,889,1,0,0,
  	0,889,891,5,182,0,0,890,892,5,222,0,0,891,890,1,0,0,0,891,892,1,0,0,0,
  	892,893,1,0,0,0,893,895,3,292,146,0,894,887,1,0,0,0,895,898,1,0,0,0,896,
  	894,1,0,0,0,896,897,1,0,0,0,897,71,1,0,0,0,898,896,1,0,0,0,899,900,5,
  	39,0,0,900,901,5,222,0,0,901,903,3,220,110,0,902,904,5,222,0,0,903,902,
  	1,0,0,0,903,904,1,0,0,0,904,905,1,0,0,0,905,907,5,182,0,0,906,908,5,222,
  	0,0,907,906,1,0,0,0,907,908,1,0,0,0,908,909,1,0,0,0,909,918,3,220,110,
  	0,910,912,5,222,0,0,911,910,1,0,0,0,911,912,1,0,0,0,912,913,1,0,0,0,913,
  	915,5,182,0,0,914,916,5,222,0,0,915,914,1,0,0,0,915,916,1,0,0,0,916,917,
  	1,0,0,0,917,919,3,220,110,0,918,911,1,0,0,0,918,919,1,0,0,0,919,73,1,
  	0,0,0,920,922,5,41,0,0,921,923,5,220,0,0,922,921,1,0,0,0,923,924,1,0,
  	0,0,924,922,1,0,0,0,924,925,1,0,0,0,925,932,1,0,0,0,926,928,3,48,24,0,
  	927,929,5,220,0,0,928,927,1,0,0,0,929,930,1,0,0,0,930,928,1,0,0,0,930,
  	931,1,0,0,0,931,933,1,0,0,0,932,926,1,0,0,0,932,933,1,0,0,0,933,934,1,
  	0,0,0,934,974,5,86,0,0,935,936,5,41,0,0,936,937,5,222,0,0,937,938,7,2,
  	0,0,938,939,5,222,0,0,939,941,3,220,110,0,940,942,5,220,0,0,941,940,1,
  	0,0,0,942,943,1,0,0,0,943,941,1,0,0,0,943,944,1,0,0,0,944,951,1,0,0,0,
  	945,947,3,48,24,0,946,948,5,220,0,0,947,946,1,0,0,0,948,949,1,0,0,0,949,
  	947,1,0,0,0,949,950,1,0,0,0,950,952,1,0,0,0,951,945,1,0,0,0,951,952,1,
  	0,0,0,952,953,1,0,0,0,953,954,5,86,0,0,954,974,1,0,0,0,955,957,5,41,0,
  	0,956,958,5,220,0,0,957,956,1,0,0,0,958,959,1,0,0,0,959,957,1,0,0,0,959,
  	960,1,0,0,0,960,961,1,0,0,0,961,963,3,48,24,0,962,964,5,220,0,0,963,962,
  	1,0,0,0,964,965,1,0,0,0,965,963,1,0,0,0,965,966,1,0,0,0,966,967,1,0,0,
  	0,967,968,5,86,0,0,968,969,5,222,0,0,969,970,7,2,0,0,970,971,5,222,0,
  	0,971,972,3,220,110,0,972,974,1,0,0,0,973,920,1,0,0,0,973,935,1,0,0,0,
  	973,955,1,0,0,0,974,75,1,0,0,0,975,976,5,54,0,0,976,77,1,0,0,0,977,978,
  	3,298,149,0,978,979,5,222,0,0,979,981,1,0,0,0,980,977,1,0,0,0,980,981,
  	1,0,0,0,981,982,1,0,0,0,982,983,5,56,0,0,983,984,5,222,0,0,984,986,3,
  	278,139,0,985,987,5,220,0,0,986,985,1,0,0,0,987,988,1,0,0,0,988,986,1,
  	0,0,0,988,989,1,0,0,0,989,993,1,0,0,0,990,992,3,80,40,0,991,990,1,0,0,
  	0,992,995,1,0,0,0,993,991,1,0,0,0,993,994,1,0,0,0,994,996,1,0,0,0,995,
  	993,1,0,0,0,996,997,5,46,0,0,997,79,1,0,0,0,998,1007,3,278,139,0,999,
  	1001,5,222,0,0,1000,999,1,0,0,0,1000,1001,1,0,0,0,1001,1002,1,0,0,0,1002,
  	1004,5,187,0,0,1003,1005,5,222,0,0,1004,1003,1,0,0,0,1004,1005,1,0,0,
  	0,1005,1006,1,0,0,0,1006,1008,3,220,110,0,1007,1000,1,0,0,0,1007,1008,
  	1,0,0,0,1008,1010,1,0,0,0,1009,1011,5,220,0,0,1010,1009,1,0,0,0,1011,
  	1012,1,0,0,0,1012,1010,1,0,0,0,1012,1013,1,0,0,0,1013,81,1,0,0,0,1014,
  	1015,5,58,0,0,1015,1016,5,222,0,0,1016,1027,3,220,110,0,1017,1019,5,222,
  	0,0,1018,1017,1,0,0,0,1018,1019,1,0,0,0,1019,1020,1,0,0,0,1020,1022,5,
  	182,0,0,1021,1023,5,222,0,0,1022,1021,1,0,0,0,1022,1023,1,0,0,0,1023,
  	1024,1,0,0,0,1024,1026,3,220,110,0,1025,1018,1,0,0,0,1026,1029,1,0,0,
  	0,1027,1025,1,0,0,0,1027,1028,1,0,0,0,1028,83,1,0,0,0,1029,1027,1,0,0,
  	0,1030,1031,5,59,0,0,1031,1032,5,222,0,0,1032,1033,3,220,110,0,1033,85,
  	1,0,0,0,1034,1035,3,306,153,0,1035,1036,5,222,0,0,1036,1038,1,0,0,0,1037,
  	1034,1,0,0,0,1037,1038,1,0,0,0,1038,1039,1,0,0,0,1039,1040,5,60,0,0,1040,
  	1041,5,222,0,0,1041,1043,3,278,139,0,1042,1044,5,222,0,0,1043,1042,1,
  	0,0,0,1043,1044,1,0,0,0,1044,1045,1,0,0,0,1045,1046,3,268,134,0,1046,
  	87,1,0,0,0,1047,1048,7,3,0,0,1048,89,1,0,0,0,1049,1050,5,67,0,0,1050,
  	1051,5,222,0,0,1051,1053,3,220,110,0,1052,1054,5,222,0,0,1053,1052,1,
  	0,0,0,1053,1054,1,0,0,0,1054,1055,1,0,0,0,1055,1057,5,182,0,0,1056,1058,
  	5,222,0,0,1057,1056,1,0,0,0,1057,1058,1,0,0,0,1058,1059,1,0,0,0,1059,
  	1060,3,220,110,0,1060,91,1,0,0,0,1061,1062,5,69,0,0,1062,1063,5,222,0,
  	0,1063,1064,5,43,0,0,1064,1065,5,222,0,0,1065,1067,3,278,139,0,1066,1068,
  	3,304,152,0,1067,1066,1,0,0,0,1067,1068,1,0,0,0,1068,1069,1,0,0,0,1069,
  	1070,5,222,0,0,1070,1071,5,78,0,0,1071,1072,5,222,0,0,1072,1074,3,220,
  	110,0,1073,1075,5,220,0,0,1074,1073,1,0,0,0,1075,1076,1,0,0,0,1076,1074,
  	1,0,0,0,1076,1077,1,0,0,0,1077,1084,1,0,0,0,1078,1080,3,48,24,0,1079,
  	1081,5,220,0,0,1080,1079,1,0,0,0,1081,1082,1,0,0,0,1082,1080,1,0,0,0,
  	1082,1083,1,0,0,0,1083,1085,1,0,0,0,1084,1078,1,0,0,0,1084,1085,1,0,0,
  	0,1085,1086,1,0,0,0,1086,1089,5,105,0,0,1087,1088,5,222,0,0,1088,1090,
  	3,278,139,0,1089,1087,1,0,0,0,1089,1090,1,0,0,0,1090,93,1,0,0,0,1091,
  	1092,5,69,0,0,1092,1093,5,222,0,0,1093,1095,3,250,125,0,1094,1096,3,304,
  	152,0,1095,1094,1,0,0,0,1095,1096,1,0,0,0,1096,1099,1,0,0,0,1097,1098,
  	5,222,0,0,1098,1100,3,280,140,0,1099,1097,1,0,0,0,1099,1100,1,0,0,0,1100,
  	1102,1,0,0,0,1101,1103,5,222,0,0,1102,1101,1,0,0,0,1102,1103,1,0,0,0,
  	1103,1104,1,0,0,0,1104,1106,5,187,0,0,1105,1107,5,222,0,0,1106,1105,1,
  	0,0,0,1106,1107,1,0,0,0,1107,1108,1,0,0,0,1108,1109,3,220,110,0,1109,
  	1110,5,222,0,0,1110,1111,5,162,0,0,1111,1112,5,222,0,0,1112,1117,3,220,
  	110,0,1113,1114,5,222,0,0,1114,1115,5,154,0,0,1115,1116,5,222,0,0,1116,
  	1118,3,220,110,0,1117,1113,1,0,0,0,1117,1118,1,0,0,0,1118,1120,1,0,0,
  	0,1119,1121,5,220,0,0,1120,1119,1,0,0,0,1121,1122,1,0,0,0,1122,1120,1,
  	0,0,0,1122,1123,1,0,0,0,1123,1130,1,0,0,0,1124,1126,3,48,24,0,1125,1127,
  	5,220,0,0,1126,1125,1,0,0,0,1127,1128,1,0,0,0,1128,1126,1,0,0,0,1128,
  	1129,1,0,0,0,1129,1131,1,0,0,0,1130,1124,1,0,0,0,1130,1131,1,0,0,0,1131,
  	1132,1,0,0,0,1132,1138,5,105,0,0,1133,1134,5,222,0,0,1134,1136,3,278,
  	139,0,1135,1137,3,304,152,0,1136,1135,1,0,0,0,1136,1137,1,0,0,0,1137,
  	1139,1,0,0,0,1138,1133,1,0,0,0,1138,1139,1,0,0,0,1139,95,1,0,0,0,1140,
  	1141,3,306,153,0,1141,1142,5,222,0,0,1142,1144,1,0,0,0,1143,1140,1,0,
  	0,0,1143,1144,1,0,0,0,1144,1147,1,0,0,0,1145,1146,5,153,0,0,1146,1148,
  	5,222,0,0,1147,1145,1,0,0,0,1147,1148,1,0,0,0,1148,1149,1,0,0,0,1149,
  	1150,5,70,0,0,1150,1151,5,222,0,0,1151,1156,3,278,139,0,1152,1154,5,222,
  	0,0,1153,1152,1,0,0,0,1153,1154,1,0,0,0,1154,1155,1,0,0,0,1155,1157,3,
  	268,134,0,1156,1153,1,0,0,0,1156,1157,1,0,0,0,1157,1160,1,0,0,0,1158,
  	1159,5,222,0,0,1159,1161,3,280,140,0,1160,1158,1,0,0,0,1160,1161,1,0,
  	0,0,1161,1163,1,0,0,0,1162,1164,5,220,0,0,1163,1162,1,0,0,0,1164,1165,
  	1,0,0,0,1165,1163,1,0,0,0,1165,1166,1,0,0,0,1166,1173,1,0,0,0,1167,1169,
  	3,48,24,0,1168,1170,5,220,0,0,1169,1168,1,0,0,0,1170,1171,1,0,0,0,1171,
  	1169,1,0,0,0,1171,1172,1,0,0,0,1172,1174,1,0,0,0,1173,1167,1,0,0,0,1173,
  	1174,1,0,0,0,1174,1175,1,0,0,0,1175,1176,5,47,0,0,1176,97,1,0,0,0,1177,
  	1178,5,71,0,0,1178,1179,5,222,0,0,1179,1181,3,220,110,0,1180,1182,5,222,
  	0,0,1181,1180,1,0,0,0,1181,1182,1,0,0,0,1182,1183,1,0,0,0,1183,1185,5,
  	182,0,0,1184,1186,5,222,0,0,1185,1184,1,0,0,0,1185,1186,1,0,0,0,1186,
  	1188,1,0,0,0,1187,1189,3,220,110,0,1188,1187,1,0,0,0,1188,1189,1,0,0,
  	0,1189,1191,1,0,0,0,1190,1192,5,222,0,0,1191,1190,1,0,0,0,1191,1192,1,
  	0,0,0,1192,1193,1,0,0,0,1193,1195,5,182,0,0,1194,1196,5,222,0,0,1195,
  	1194,1,0,0,0,1195,1196,1,0,0,0,1196,1197,1,0,0,0,1197,1198,3,220,110,
  	0,1198,99,1,0,0,0,1199,1200,5,73,0,0,1200,1201,5,222,0,0,1201,1202,3,
  	220,110,0,1202,101,1,0,0,0,1203,1204,5,74,0,0,1204,1205,5,222,0,0,1205,
  	1206,3,220,110,0,1206,103,1,0,0,0,1207,1208,5,75,0,0,1208,1209,5,222,
  	0,0,1209,1210,3,108,54,0,1210,1211,5,222,0,0,1211,1212,5,160,0,0,1212,
  	1213,5,222,0,0,1213,1218,3,50,25,0,1214,1215,5,222,0,0,1215,1216,5,44,
  	0,0,1216,1217,5,222,0,0,1217,1219,3,50,25,0,1218,1214,1,0,0,0,1218,1219,
  	1,0,0,0,1219,1233,1,0,0,0,1220,1224,3,106,53,0,1221,1223,3,110,55,0,1222,
  	1221,1,0,0,0,1223,1226,1,0,0,0,1224,1222,1,0,0,0,1224,1225,1,0,0,0,1225,
  	1228,1,0,0,0,1226,1224,1,0,0,0,1227,1229,3,112,56,0,1228,1227,1,0,0,0,
  	1228,1229,1,0,0,0,1229,1230,1,0,0,0,1230,1231,5,48,0,0,1231,1233,1,0,
  	0,0,1232,1207,1,0,0,0,1232,1220,1,0,0,0,1233,105,1,0,0,0,1234,1235,5,
  	75,0,0,1235,1236,5,222,0,0,1236,1237,3,108,54,0,1237,1238,5,222,0,0,1238,
  	1240,5,160,0,0,1239,1241,5,220,0,0,1240,1239,1,0,0,0,1241,1242,1,0,0,
  	0,1242,1240,1,0,0,0,1242,1243,1,0,0,0,1243,1250,1,0,0,0,1244,1246,3,48,
  	24,0,1245,1247,5,220,0,0,1246,1245,1,0,0,0,1247,1248,1,0,0,0,1248,1246,
  	1,0,0,0,1248,1249,1,0,0,0,1249,1251,1,0,0,0,1250,1244,1,0,0,0,1250,1251,
  	1,0,0,0,1251,107,1,0,0,0,1252,1253,3,220,110,0,1253,109,1,0,0,0,1254,
  	1255,5,45,0,0,1255,1256,5,222,0,0,1256,1257,3,108,54,0,1257,1258,5,222,
  	0,0,1258,1260,5,160,0,0,1259,1261,5,220,0,0,1260,1259,1,0,0,0,1261,1262,
  	1,0,0,0,1262,1260,1,0,0,0,1262,1263,1,0,0,0,1263,1270,1,0,0,0,1264,1266,
  	3,48,24,0,1265,1267,5,220,0,0,1266,1265,1,0,0,0,1267,1268,1,0,0,0,1268,
  	1266,1,0,0,0,1268,1269,1,0,0,0,1269,1271,1,0,0,0,1270,1264,1,0,0,0,1270,
  	1271,1,0,0,0,1271,111,1,0,0,0,1272,1274,5,44,0,0,1273,1275,5,220,0,0,
  	1274,1273,1,0,0,0,1275,1276,1,0,0,0,1276,1274,1,0,0,0,1276,1277,1,0,0,
  	0,1277,1284,1,0,0,0,1278,1280,3,48,24,0,1279,1281,5,220,0,0,1280,1279,
  	1,0,0,0,1281,1282,1,0,0,0,1282,1280,1,0,0,0,1282,1283,1,0,0,0,1283,1285,
  	1,0,0,0,1284,1278,1,0,0,0,1284,1285,1,0,0,0,1285,113,1,0,0,0,1286,1287,
  	5,77,0,0,1287,1288,5,222,0,0,1288,1289,3,278,139,0,1289,115,1,0,0,0,1290,
  	1291,5,79,0,0,1291,1292,5,222,0,0,1292,1301,3,220,110,0,1293,1295,5,222,
  	0,0,1294,1293,1,0,0,0,1294,1295,1,0,0,0,1295,1296,1,0,0,0,1296,1298,5,
  	182,0,0,1297,1299,5,222,0,0,1298,1297,1,0,0,0,1298,1299,1,0,0,0,1299,
  	1300,1,0,0,0,1300,1302,3,220,110,0,1301,1294,1,0,0,0,1302,1303,1,0,0,
  	0,1303,1301,1,0,0,0,1303,1304,1,0,0,0,1304,117,1,0,0,0,1305,1306,5,82,
  	0,0,1306,1307,5,222,0,0,1307,1308,3,220,110,0,1308,119,1,0,0,0,1309,1310,
  	5,88,0,0,1310,1312,5,222,0,0,1311,1309,1,0,0,0,1311,1312,1,0,0,0,1312,
  	1313,1,0,0,0,1313,1315,3,248,124,0,1314,1316,5,222,0,0,1315,1314,1,0,
  	0,0,1315,1316,1,0,0,0,1316,1317,1,0,0,0,1317,1319,7,4,0,0,1318,1320,5,
  	222,0,0,1319,1318,1,0,0,0,1319,1320,1,0,0,0,1320,1321,1,0,0,0,1321,1322,
  	3,220,110,0,1322,121,1,0,0,0,1323,1324,5,91,0,0,1324,1325,5,222,0,0,1325,
  	1327,3,220,110,0,1326,1328,5,222,0,0,1327,1326,1,0,0,0,1327,1328,1,0,
  	0,0,1328,1329,1,0,0,0,1329,1331,5,182,0,0,1330,1332,5,222,0,0,1331,1330,
  	1,0,0,0,1331,1332,1,0,0,0,1332,1333,1,0,0,0,1333,1334,3,220,110,0,1334,
  	123,1,0,0,0,1335,1336,5,83,0,0,1336,1337,5,222,0,0,1337,1338,3,220,110,
  	0,1338,125,1,0,0,0,1339,1340,5,84,0,0,1340,1341,5,222,0,0,1341,1356,3,
  	220,110,0,1342,1344,5,222,0,0,1343,1342,1,0,0,0,1343,1344,1,0,0,0,1344,
  	1345,1,0,0,0,1345,1347,5,182,0,0,1346,1348,5,222,0,0,1347,1346,1,0,0,
  	0,1347,1348,1,0,0,0,1348,1349,1,0,0,0,1349,1354,3,220,110,0,1350,1351,
  	5,222,0,0,1351,1352,5,162,0,0,1352,1353,5,222,0,0,1353,1355,3,220,110,
  	0,1354,1350,1,0,0,0,1354,1355,1,0,0,0,1355,1357,1,0,0,0,1356,1343,1,0,
  	0,0,1356,1357,1,0,0,0,1357,127,1,0,0,0,1358,1359,5,95,0,0,1359,1360,5,
  	222,0,0,1360,1362,3,248,124,0,1361,1363,5,222,0,0,1362,1361,1,0,0,0,1362,
  	1363,1,0,0,0,1363,1364,1,0,0,0,1364,1366,5,187,0,0,1365,1367,5,222,0,
  	0,1366,1365,1,0,0,0,1366,1367,1,0,0,0,1367,1368,1,0,0,0,1368,1369,3,220,
  	110,0,1369,129,1,0,0,0,1370,1374,3,132,66,0,1371,1373,3,134,67,0,1372,
  	1371,1,0,0,0,1373,1376,1,0,0,0,1374,1372,1,0,0,0,1374,1375,1,0,0,0,1375,
  	1378,1,0,0,0,1376,1374,1,0,0,0,1377,1379,3,136,68,0,1378,1377,1,0,0,0,
  	1378,1379,1,0,0,0,1379,1380,1,0,0,0,1380,1381,5,99,0,0,1381,131,1,0,0,
  	0,1382,1383,5,96,0,0,1383,1384,5,222,0,0,1384,1385,3,108,54,0,1385,1386,
  	5,222,0,0,1386,1388,5,160,0,0,1387,1389,5,220,0,0,1388,1387,1,0,0,0,1389,
  	1390,1,0,0,0,1390,1388,1,0,0,0,1390,1391,1,0,0,0,1391,1398,1,0,0,0,1392,
  	1394,3,24,12,0,1393,1395,5,220,0,0,1394,1393,1,0,0,0,1395,1396,1,0,0,
  	0,1396,1394,1,0,0,0,1396,1397,1,0,0,0,1397,1399,1,0,0,0,1398,1392,1,0,
  	0,0,1398,1399,1,0,0,0,1399,133,1,0,0,0,1400,1401,5,97,0,0,1401,1402,5,
  	222,0,0,1402,1403,3,108,54,0,1403,1404,5,222,0,0,1404,1406,5,160,0,0,
  	1405,1407,5,220,0,0,1406,1405,1,0,0,0,1407,1408,1,0,0,0,1408,1406,1,0,
  	0,0,1408,1409,1,0,0,0,1409,1416,1,0,0,0,1410,1412,3,24,12,0,1411,1413,
  	5,220,0,0,1412,1411,1,0,0,0,1413,1414,1,0,0,0,1414,1412,1,0,0,0,1414,
  	1415,1,0,0,0,1415,1417,1,0,0,0,1416,1410,1,0,0,0,1416,1417,1,0,0,0,1417,
  	135,1,0,0,0,1418,1420,5,98,0,0,1419,1421,5,220,0,0,1420,1419,1,0,0,0,
  	1421,1422,1,0,0,0,1422,1420,1,0,0,0,1422,1423,1,0,0,0,1423,1430,1,0,0,
  	0,1424,1426,3,24,12,0,1425,1427,5,220,0,0,1426,1425,1,0,0,0,1427,1428,
  	1,0,0,0,1428,1426,1,0,0,0,1428,1429,1,0,0,0,1429,1431,1,0,0,0,1430,1424,
  	1,0,0,0,1430,1431,1,0,0,0,1431,137,1,0,0,0,1432,1434,5,101,0,0,1433,1435,
  	5,222,0,0,1434,1433,1,0,0,0,1434,1435,1,0,0,0,1435,1436,1,0,0,0,1436,
  	1438,5,194,0,0,1437,1439,5,222,0,0,1438,1437,1,0,0,0,1438,1439,1,0,0,
  	0,1439,1440,1,0,0,0,1440,1442,3,262,131,0,1441,1443,5,222,0,0,1442,1441,
  	1,0,0,0,1442,1443,1,0,0,0,1443,1444,1,0,0,0,1444,1445,5,205,0,0,1445,
  	139,1,0,0,0,1446,1447,5,102,0,0,1447,1448,5,222,0,0,1448,1449,3,220,110,
  	0,1449,141,1,0,0,0,1450,1451,5,104,0,0,1451,1452,5,222,0,0,1452,1453,
  	3,220,110,0,1453,1454,5,222,0,0,1454,1455,5,8,0,0,1455,1456,5,222,0,0,
  	1456,1457,3,220,110,0,1457,143,1,0,0,0,1458,1459,7,5,0,0,1459,1469,5,
  	222,0,0,1460,1461,5,74,0,0,1461,1462,5,222,0,0,1462,1464,3,220,110,0,
  	1463,1465,5,181,0,0,1464,1463,1,0,0,0,1464,1465,1,0,0,0,1465,1470,1,0,
  	0,0,1466,1467,5,139,0,0,1467,1468,5,222,0,0,1468,1470,5,105,0,0,1469,
  	1460,1,0,0,0,1469,1466,1,0,0,0,1470,145,1,0,0,0,1471,1472,5,111,0,0,1472,
  	1473,5,222,0,0,1473,1474,3,220,110,0,1474,1475,5,222,0,0,1475,1476,5,
  	74,0,0,1476,1477,5,222,0,0,1477,1488,3,220,110,0,1478,1480,5,222,0,0,
  	1479,1478,1,0,0,0,1479,1480,1,0,0,0,1480,1481,1,0,0,0,1481,1483,5,182,
  	0,0,1482,1484,5,222,0,0,1483,1482,1,0,0,0,1483,1484,1,0,0,0,1484,1485,
  	1,0,0,0,1485,1487,3,220,110,0,1486,1479,1,0,0,0,1487,1490,1,0,0,0,1488,
  	1486,1,0,0,0,1488,1489,1,0,0,0,1489,147,1,0,0,0,1490,1488,1,0,0,0,1491,
  	1492,5,111,0,0,1492,1493,5,222,0,0,1493,1494,3,220,110,0,1494,1495,5,
  	222,0,0,1495,1496,5,73,0,0,1496,1497,5,222,0,0,1497,1508,3,220,110,0,
  	1498,1500,5,222,0,0,1499,1498,1,0,0,0,1499,1500,1,0,0,0,1500,1501,1,0,
  	0,0,1501,1503,5,182,0,0,1502,1504,5,222,0,0,1503,1502,1,0,0,0,1503,1504,
  	1,0,0,0,1504,1505,1,0,0,0,1505,1507,3,220,110,0,1506,1499,1,0,0,0,1507,
  	1510,1,0,0,0,1508,1506,1,0,0,0,1508,1509,1,0,0,0,1509,149,1,0,0,0,1510,
  	1508,1,0,0,0,1511,1512,5,114,0,0,1512,1513,5,222,0,0,1513,1514,3,220,
  	110,0,1514,1515,5,222,0,0,1515,1516,5,69,0,0,1516,1517,5,222,0,0,1517,
  	1522,7,6,0,0,1518,1519,5,222,0,0,1519,1520,5,1,0,0,1520,1521,5,222,0,
  	0,1521,1523,7,7,0,0,1522,1518,1,0,0,0,1522,1523,1,0,0,0,1523,1526,1,0,
  	0,0,1524,1525,5,222,0,0,1525,1527,7,8,0,0,1526,1524,1,0,0,0,1526,1527,
  	1,0,0,0,1527,1528,1,0,0,0,1528,1529,5,222,0,0,1529,1530,5,8,0,0,1530,
  	1531,5,222,0,0,1531,1542,3,220,110,0,1532,1533,5,222,0,0,1533,1535,5,
  	87,0,0,1534,1536,5,222,0,0,1535,1534,1,0,0,0,1535,1536,1,0,0,0,1536,1537,
  	1,0,0,0,1537,1539,5,187,0,0,1538,1540,5,222,0,0,1539,1538,1,0,0,0,1539,
  	1540,1,0,0,0,1540,1541,1,0,0,0,1541,1543,3,220,110,0,1542,1532,1,0,0,
  	0,1542,1543,1,0,0,0,1543,151,1,0,0,0,1544,1557,3,154,77,0,1545,1547,5,
  	222,0,0,1546,1545,1,0,0,0,1546,1547,1,0,0,0,1547,1548,1,0,0,0,1548,1550,
  	7,9,0,0,1549,1551,5,222,0,0,1550,1549,1,0,0,0,1550,1551,1,0,0,0,1551,
  	1553,1,0,0,0,1552,1554,3,154,77,0,1553,1552,1,0,0,0,1553,1554,1,0,0,0,
  	1554,1556,1,0,0,0,1555,1546,1,0,0,0,1556,1559,1,0,0,0,1557,1555,1,0,0,
  	0,1557,1558,1,0,0,0,1558,1578,1,0,0,0,1559,1557,1,0,0,0,1560,1562,3,154,
  	77,0,1561,1560,1,0,0,0,1561,1562,1,0,0,0,1562,1573,1,0,0,0,1563,1565,
  	5,222,0,0,1564,1563,1,0,0,0,1564,1565,1,0,0,0,1565,1566,1,0,0,0,1566,
  	1568,7,9,0,0,1567,1569,5,222,0,0,1568,1567,1,0,0,0,1568,1569,1,0,0,0,
  	1569,1571,1,0,0,0,1570,1572,3,154,77,0,1571,1570,1,0,0,0,1571,1572,1,
  	0,0,0,1572,1574,1,0,0,0,1573,1564,1,0,0,0,1574,1575,1,0,0,0,1575,1573,
  	1,0,0,0,1575,1576,1,0,0,0,1576,1578,1,0,0,0,1577,1544,1,0,0,0,1577,1561,
  	1,0,0,0,1578,153,1,0,0,0,1579,1593,7,10,0,0,1580,1582,5,222,0,0,1581,
  	1580,1,0,0,0,1581,1582,1,0,0,0,1582,1583,1,0,0,0,1583,1585,5,194,0,0,
  	1584,1586,5,222,0,0,1585,1584,1,0,0,0,1585,1586,1,0,0,0,1586,1587,1,0,
  	0,0,1587,1589,3,262,131,0,1588,1590,5,222,0,0,1589,1588,1,0,0,0,1589,
  	1590,1,0,0,0,1590,1591,1,0,0,0,1591,1592,5,205,0,0,1592,1594,1,0,0,0,
  	1593,1581,1,0,0,0,1593,1594,1,0,0,0,1594,1597,1,0,0,0,1595,1597,3,220,
  	110,0,1596,1579,1,0,0,0,1596,1595,1,0,0,0,1597,155,1,0,0,0,1598,1599,
  	5,124,0,0,1599,1600,5,222,0,0,1600,1602,3,220,110,0,1601,1603,5,222,0,
  	0,1602,1601,1,0,0,0,1602,1603,1,0,0,0,1603,1604,1,0,0,0,1604,1609,5,182,
  	0,0,1605,1607,5,222,0,0,1606,1605,1,0,0,0,1606,1607,1,0,0,0,1607,1608,
  	1,0,0,0,1608,1610,3,152,76,0,1609,1606,1,0,0,0,1609,1610,1,0,0,0,1610,
  	157,1,0,0,0,1611,1612,3,306,153,0,1612,1613,5,222,0,0,1613,1615,1,0,0,
  	0,1614,1611,1,0,0,0,1614,1615,1,0,0,0,1615,1618,1,0,0,0,1616,1617,5,153,
  	0,0,1617,1619,5,222,0,0,1618,1616,1,0,0,0,1618,1619,1,0,0,0,1619,1620,
  	1,0,0,0,1620,1621,5,126,0,0,1621,1622,5,222,0,0,1622,1624,3,278,139,0,
  	1623,1625,3,304,152,0,1624,1623,1,0,0,0,1624,1625,1,0,0,0,1625,1630,1,
  	0,0,0,1626,1628,5,222,0,0,1627,1626,1,0,0,0,1627,1628,1,0,0,0,1628,1629,
  	1,0,0,0,1629,1631,3,268,134,0,1630,1627,1,0,0,0,1630,1631,1,0,0,0,1631,
  	1634,1,0,0,0,1632,1633,5,222,0,0,1633,1635,3,280,140,0,1634,1632,1,0,
  	0,0,1634,1635,1,0,0,0,1635,1637,1,0,0,0,1636,1638,5,220,0,0,1637,1636,
  	1,0,0,0,1638,1639,1,0,0,0,1639,1637,1,0,0,0,1639,1640,1,0,0,0,1640,1647,
  	1,0,0,0,1641,1643,3,48,24,0,1642,1644,5,220,0,0,1643,1642,1,0,0,0,1644,
  	1645,1,0,0,0,1645,1643,1,0,0,0,1645,1646,1,0,0,0,1646,1648,1,0,0,0,1647,
  	1641,1,0,0,0,1647,1648,1,0,0,0,1648,1649,1,0,0,0,1649,1650,5,49,0,0,1650,
  	159,1,0,0,0,1651,1652,3,306,153,0,1652,1653,5,222,0,0,1653,1655,1,0,0,
  	0,1654,1651,1,0,0,0,1654,1655,1,0,0,0,1655,1658,1,0,0,0,1656,1657,5,153,
  	0,0,1657,1659,5,222,0,0,1658,1656,1,0,0,0,1658,1659,1,0,0,0,1659,1660,
  	1,0,0,0,1660,1661,5,128,0,0,1661,1662,5,222,0,0,1662,1667,3,278,139,0,
  	1663,1665,5,222,0,0,1664,1663,1,0,0,0,1664,1665,1,0,0,0,1665,1666,1,0,
  	0,0,1666,1668,3,268,134,0,1667,1664,1,0,0,0,1667,1668,1,0,0,0,1668,1670,
  	1,0,0,0,1669,1671,5,220,0,0,1670,1669,1,0,0,0,1671,1672,1,0,0,0,1672,
  	1670,1,0,0,0,1672,1673,1,0,0,0,1673,1680,1,0,0,0,1674,1676,3,48,24,0,
  	1675,1677,5,220,0,0,1676,1675,1,0,0,0,1677,1678,1,0,0,0,1678,1676,1,0,
  	0,0,1678,1679,1,0,0,0,1679,1681,1,0,0,0,1680,1674,1,0,0,0,1680,1681,1,
  	0,0,0,1681,1682,1,0,0,0,1682,1683,5,49,0,0,1683,161,1,0,0,0,1684,1685,
  	3,306,153,0,1685,1686,5,222,0,0,1686,1688,1,0,0,0,1687,1684,1,0,0,0,1687,
  	1688,1,0,0,0,1688,1691,1,0,0,0,1689,1690,5,153,0,0,1690,1692,5,222,0,
  	0,1691,1689,1,0,0,0,1691,1692,1,0,0,0,1692,1693,1,0,0,0,1693,1694,5,127,
  	0,0,1694,1695,5,222,0,0,1695,1700,3,278,139,0,1696,1698,5,222,0,0,1697,
  	1696,1,0,0,0,1697,1698,1,0,0,0,1698,1699,1,0,0,0,1699,1701,3,268,134,
  	0,1700,1697,1,0,0,0,1700,1701,1,0,0,0,1701,1703,1,0,0,0,1702,1704,5,220,
  	0,0,1703,1702,1,0,0,0,1704,1705,1,0,0,0,1705,1703,1,0,0,0,1705,1706,1,
  	0,0,0,1706,1713,1,0,0,0,1707,1709,3,48,24,0,1708,1710,5,220,0,0,1709,
  	1708,1,0,0,0,1710,1711,1,0,0,0,1711,1709,1,0,0,0,1711,1712,1,0,0,0,1712,
  	1714,1,0,0,0,1713,1707,1,0,0,0,1713,1714,1,0,0,0,1714,1715,1,0,0,0,1715,
  	1716,5,49,0,0,1716,163,1,0,0,0,1717,1718,5,130,0,0,1718,1719,5,222,0,
  	0,1719,1721,3,220,110,0,1720,1722,5,222,0,0,1721,1720,1,0,0,0,1721,1722,
  	1,0,0,0,1722,1723,1,0,0,0,1723,1725,5,182,0,0,1724,1726,5,222,0,0,1725,
  	1724,1,0,0,0,1725,1726,1,0,0,0,1726,1728,1,0,0,0,1727,1729,3,220,110,
  	0,1728,1727,1,0,0,0,1728,1729,1,0,0,0,1729,1731,1,0,0,0,1730,1732,5,222,
  	0,0,1731,1730,1,0,0,0,1731,1732,1,0,0,0,1732,1733,1,0,0,0,1733,1735,5,
  	182,0,0,1734,1736,5,222,0,0,1735,1734,1,0,0,0,1735,1736,1,0,0,0,1736,
  	1737,1,0,0,0,1737,1738,3,220,110,0,1738,165,1,0,0,0,1739,1740,5,133,0,
  	0,1740,1741,5,222,0,0,1741,1756,3,278,139,0,1742,1744,5,222,0,0,1743,
  	1742,1,0,0,0,1743,1744,1,0,0,0,1744,1745,1,0,0,0,1745,1747,5,194,0,0,
  	1746,1748,5,222,0,0,1747,1746,1,0,0,0,1747,1748,1,0,0,0,1748,1753,1,0,
  	0,0,1749,1751,3,262,131,0,1750,1752,5,222,0,0,1751,1750,1,0,0,0,1751,
  	1752,1,0,0,0,1752,1754,1,0,0,0,1753,1749,1,0,0,0,1753,1754,1,0,0,0,1754,
  	1755,1,0,0,0,1755,1757,5,205,0,0,1756,1743,1,0,0,0,1756,1757,1,0,0,0,
  	1757,167,1,0,0,0,1758,1761,5,132,0,0,1759,1760,5,222,0,0,1760,1762,3,
  	220,110,0,1761,1759,1,0,0,0,1761,1762,1,0,0,0,1762,169,1,0,0,0,1763,1764,
  	5,136,0,0,1764,1767,5,222,0,0,1765,1766,5,123,0,0,1766,1768,5,222,0,0,
  	1767,1765,1,0,0,0,1767,1768,1,0,0,0,1768,1769,1,0,0,0,1769,1780,3,172,
  	86,0,1770,1772,5,222,0,0,1771,1770,1,0,0,0,1771,1772,1,0,0,0,1772,1773,
  	1,0,0,0,1773,1775,5,182,0,0,1774,1776,5,222,0,0,1775,1774,1,0,0,0,1775,
  	1776,1,0,0,0,1776,1777,1,0,0,0,1777,1779,3,172,86,0,1778,1771,1,0,0,0,
  	1779,1782,1,0,0,0,1780,1778,1,0,0,0,1780,1781,1,0,0,0,1781,171,1,0,0,
  	0,1782,1780,1,0,0,0,1783,1785,3,248,124,0,1784,1786,5,222,0,0,1785,1784,
  	1,0,0,0,1785,1786,1,0,0,0,1786,1787,1,0,0,0,1787,1789,5,194,0,0,1788,
  	1790,5,222,0,0,1789,1788,1,0,0,0,1789,1790,1,0,0,0,1790,1791,1,0,0,0,
  	1791,1793,3,274,137,0,1792,1794,5,222,0,0,1793,1792,1,0,0,0,1793,1794,
  	1,0,0,0,1794,1795,1,0,0,0,1795,1798,5,205,0,0,1796,1797,5,222,0,0,1797,
  	1799,3,280,140,0,1798,1796,1,0,0,0,1798,1799,1,0,0,0,1799,173,1,0,0,0,
  	1800,1801,5,138,0,0,1801,175,1,0,0,0,1802,1808,5,139,0,0,1803,1806,5,
  	222,0,0,1804,1807,5,105,0,0,1805,1807,3,278,139,0,1806,1804,1,0,0,0,1806,
  	1805,1,0,0,0,1807,1809,1,0,0,0,1808,1803,1,0,0,0,1808,1809,1,0,0,0,1809,
  	177,1,0,0,0,1810,1811,5,140,0,0,1811,179,1,0,0,0,1812,1813,5,141,0,0,
  	1813,1814,5,222,0,0,1814,1815,3,220,110,0,1815,181,1,0,0,0,1816,1817,
  	5,142,0,0,1817,1818,5,222,0,0,1818,1820,3,248,124,0,1819,1821,5,222,0,
  	0,1820,1819,1,0,0,0,1820,1821,1,0,0,0,1821,1822,1,0,0,0,1822,1824,5,187,
  	0,0,1823,1825,5,222,0,0,1824,1823,1,0,0,0,1824,1825,1,0,0,0,1825,1826,
  	1,0,0,0,1826,1827,3,220,110,0,1827,183,1,0,0,0,1828,1829,5,143,0,0,1829,
  	1830,5,222,0,0,1830,1832,3,220,110,0,1831,1833,5,222,0,0,1832,1831,1,
  	0,0,0,1832,1833,1,0,0,0,1833,1834,1,0,0,0,1834,1836,5,182,0,0,1835,1837,
  	5,222,0,0,1836,1835,1,0,0,0,1836,1837,1,0,0,0,1837,1838,1,0,0,0,1838,
  	1839,3,220,110,0,1839,185,1,0,0,0,1840,1841,5,144,0,0,1841,1842,5,222,
  	0,0,1842,1844,3,220,110,0,1843,1845,5,222,0,0,1844,1843,1,0,0,0,1844,
  	1845,1,0,0,0,1845,1846,1,0,0,0,1846,1848,5,182,0,0,1847,1849,5,222,0,
  	0,1848,1847,1,0,0,0,1848,1849,1,0,0,0,1849,1850,1,0,0,0,1850,1852,3,220,
  	110,0,1851,1853,5,222,0,0,1852,1851,1,0,0,0,1852,1853,1,0,0,0,1853,1854,
  	1,0,0,0,1854,1856,5,182,0,0,1855,1857,5,222,0,0,1856,1855,1,0,0,0,1856,
  	1857,1,0,0,0,1857,1858,1,0,0,0,1858,1860,3,220,110,0,1859,1861,5,222,
  	0,0,1860,1859,1,0,0,0,1860,1861,1,0,0,0,1861,1862,1,0,0,0,1862,1864,5,
  	182,0,0,1863,1865,5,222,0,0,1864,1863,1,0,0,0,1864,1865,1,0,0,0,1865,
  	1866,1,0,0,0,1866,1867,3,220,110,0,1867,187,1,0,0,0,1868,1869,5,145,0,
  	0,1869,1870,5,222,0,0,1870,1872,3,220,110,0,1871,1873,5,222,0,0,1872,
  	1871,1,0,0,0,1872,1873,1,0,0,0,1873,1874,1,0,0,0,1874,1876,5,182,0,0,
  	1875,1877,5,222,0,0,1876,1875,1,0,0,0,1876,1877,1,0,0,0,1877,1878,1,0,
  	0,0,1878,1879,3,220,110,0,1879,189,1,0,0,0,1880,1881,5,146,0,0,1881,1882,
  	5,222,0,0,1882,1883,5,18,0,0,1883,1884,5,222,0,0,1884,1886,3,220,110,
  	0,1885,1887,5,220,0,0,1886,1885,1,0,0,0,1887,1888,1,0,0,0,1888,1886,1,
  	0,0,0,1888,1889,1,0,0,0,1889,1893,1,0,0,0,1890,1892,3,192,96,0,1891,1890,
  	1,0,0,0,1892,1895,1,0,0,0,1893,1891,1,0,0,0,1893,1894,1,0,0,0,1894,1897,
  	1,0,0,0,1895,1893,1,0,0,0,1896,1898,5,222,0,0,1897,1896,1,0,0,0,1897,
  	1898,1,0,0,0,1898,1899,1,0,0,0,1899,1900,5,50,0,0,1900,191,1,0,0,0,1901,
  	1902,5,18,0,0,1902,1903,5,222,0,0,1903,1905,3,194,97,0,1904,1906,5,222,
  	0,0,1905,1904,1,0,0,0,1905,1906,1,0,0,0,1906,1921,1,0,0,0,1907,1909,5,
  	181,0,0,1908,1907,1,0,0,0,1908,1909,1,0,0,0,1909,1913,1,0,0,0,1910,1912,
  	5,220,0,0,1911,1910,1,0,0,0,1912,1915,1,0,0,0,1913,1911,1,0,0,0,1913,
  	1914,1,0,0,0,1914,1922,1,0,0,0,1915,1913,1,0,0,0,1916,1918,5,220,0,0,
  	1917,1916,1,0,0,0,1918,1919,1,0,0,0,1919,1917,1,0,0,0,1919,1920,1,0,0,
  	0,1920,1922,1,0,0,0,1921,1908,1,0,0,0,1921,1917,1,0,0,0,1922,1929,1,0,
  	0,0,1923,1925,3,48,24,0,1924,1926,5,220,0,0,1925,1924,1,0,0,0,1926,1927,
  	1,0,0,0,1927,1925,1,0,0,0,1927,1928,1,0,0,0,1928,1930,1,0,0,0,1929,1923,
  	1,0,0,0,1929,1930,1,0,0,0,1930,193,1,0,0,0,1931,1947,5,44,0,0,1932,1943,
  	3,196,98,0,1933,1935,5,222,0,0,1934,1933,1,0,0,0,1934,1935,1,0,0,0,1935,
  	1936,1,0,0,0,1936,1938,5,182,0,0,1937,1939,5,222,0,0,1938,1937,1,0,0,
  	0,1938,1939,1,0,0,0,1939,1940,1,0,0,0,1940,1942,3,196,98,0,1941,1934,
  	1,0,0,0,1942,1945,1,0,0,0,1943,1941,1,0,0,0,1943,1944,1,0,0,0,1944,1947,
  	1,0,0,0,1945,1943,1,0,0,0,1946,1931,1,0,0,0,1946,1932,1,0,0,0,1947,195,
  	1,0,0,0,1948,1950,5,80,0,0,1949,1951,5,222,0,0,1950,1949,1,0,0,0,1950,
  	1951,1,0,0,0,1951,1952,1,0,0,0,1952,1954,3,286,143,0,1953,1955,5,222,
  	0,0,1954,1953,1,0,0,0,1954,1955,1,0,0,0,1955,1956,1,0,0,0,1956,1957,3,
  	220,110,0,1957,1966,1,0,0,0,1958,1966,3,220,110,0,1959,1960,3,220,110,
  	0,1960,1961,5,222,0,0,1961,1962,5,162,0,0,1962,1963,5,222,0,0,1963,1964,
  	3,220,110,0,1964,1966,1,0,0,0,1965,1948,1,0,0,0,1965,1958,1,0,0,0,1965,
  	1959,1,0,0,0,1966,197,1,0,0,0,1967,1968,5,147,0,0,1968,1969,5,222,0,0,
  	1969,1978,3,220,110,0,1970,1972,5,222,0,0,1971,1970,1,0,0,0,1971,1972,
  	1,0,0,0,1972,1973,1,0,0,0,1973,1975,5,182,0,0,1974,1976,5,222,0,0,1975,
  	1974,1,0,0,0,1975,1976,1,0,0,0,1976,1977,1,0,0,0,1977,1979,3,220,110,
  	0,1978,1971,1,0,0,0,1978,1979,1,0,0,0,1979,199,1,0,0,0,1980,1981,5,149,
  	0,0,1981,1982,5,222,0,0,1982,1984,3,220,110,0,1983,1985,5,222,0,0,1984,
  	1983,1,0,0,0,1984,1985,1,0,0,0,1985,1986,1,0,0,0,1986,1988,5,182,0,0,
  	1987,1989,5,222,0,0,1988,1987,1,0,0,0,1988,1989,1,0,0,0,1989,1990,1,0,
  	0,0,1990,1991,3,220,110,0,1991,201,1,0,0,0,1992,1993,5,148,0,0,1993,1994,
  	5,222,0,0,1994,1996,3,248,124,0,1995,1997,5,222,0,0,1996,1995,1,0,0,0,
  	1996,1997,1,0,0,0,1997,1998,1,0,0,0,1998,2000,5,187,0,0,1999,2001,5,222,
  	0,0,2000,1999,1,0,0,0,2000,2001,1,0,0,0,2001,2002,1,0,0,0,2002,2003,3,
  	220,110,0,2003,203,1,0,0,0,2004,2005,5,155,0,0,2005,205,1,0,0,0,2006,
  	2007,3,306,153,0,2007,2008,5,222,0,0,2008,2010,1,0,0,0,2009,2006,1,0,
  	0,0,2009,2010,1,0,0,0,2010,2013,1,0,0,0,2011,2012,5,153,0,0,2012,2014,
  	5,222,0,0,2013,2011,1,0,0,0,2013,2014,1,0,0,0,2014,2015,1,0,0,0,2015,
  	2016,5,157,0,0,2016,2017,5,222,0,0,2017,2022,3,278,139,0,2018,2020,5,
  	222,0,0,2019,2018,1,0,0,0,2019,2020,1,0,0,0,2020,2021,1,0,0,0,2021,2023,
  	3,268,134,0,2022,2019,1,0,0,0,2022,2023,1,0,0,0,2023,2025,1,0,0,0,2024,
  	2026,5,220,0,0,2025,2024,1,0,0,0,2026,2027,1,0,0,0,2027,2025,1,0,0,0,
  	2027,2028,1,0,0,0,2028,2035,1,0,0,0,2029,2031,3,48,24,0,2030,2032,5,220,
  	0,0,2031,2030,1,0,0,0,2032,2033,1,0,0,0,2033,2031,1,0,0,0,2033,2034,1,
  	0,0,0,2034,2036,1,0,0,0,2035,2029,1,0,0,0,2035,2036,1,0,0,0,2036,2037,
  	1,0,0,0,2037,2038,5,51,0,0,2038,207,1,0,0,0,2039,2041,5,161,0,0,2040,
  	2042,5,222,0,0,2041,2040,1,0,0,0,2041,2042,1,0,0,0,2042,2043,1,0,0,0,
  	2043,2045,5,187,0,0,2044,2046,5,222,0,0,2045,2044,1,0,0,0,2045,2046,1,
  	0,0,0,2046,2047,1,0,0,0,2047,2048,3,220,110,0,2048,209,1,0,0,0,2049,2050,
  	3,306,153,0,2050,2051,5,222,0,0,2051,2053,1,0,0,0,2052,2049,1,0,0,0,2052,
  	2053,1,0,0,0,2053,2054,1,0,0,0,2054,2055,5,164,0,0,2055,2056,5,222,0,
  	0,2056,2058,3,278,139,0,2057,2059,5,220,0,0,2058,2057,1,0,0,0,2059,2060,
  	1,0,0,0,2060,2058,1,0,0,0,2060,2061,1,0,0,0,2061,2065,1,0,0,0,2062,2064,
  	3,212,106,0,2063,2062,1,0,0,0,2064,2067,1,0,0,0,2065,2063,1,0,0,0,2065,
  	2066,1,0,0,0,2066,2068,1,0,0,0,2067,2065,1,0,0,0,2068,2069,5,52,0,0,2069,
  	211,1,0,0,0,2070,2085,3,278,139,0,2071,2073,5,222,0,0,2072,2071,1,0,0,
  	0,2072,2073,1,0,0,0,2073,2074,1,0,0,0,2074,2079,5,194,0,0,2075,2077,5,
  	222,0,0,2076,2075,1,0,0,0,2076,2077,1,0,0,0,2077,2078,1,0,0,0,2078,2080,
  	3,274,137,0,2079,2076,1,0,0,0,2079,2080,1,0,0,0,2080,2082,1,0,0,0,2081,
  	2083,5,222,0,0,2082,2081,1,0,0,0,2082,2083,1,0,0,0,2083,2084,1,0,0,0,
  	2084,2086,5,205,0,0,2085,2072,1,0,0,0,2085,2086,1,0,0,0,2086,2089,1,0,
  	0,0,2087,2088,5,222,0,0,2088,2090,3,280,140,0,2089,2087,1,0,0,0,2089,
  	2090,1,0,0,0,2090,2092,1,0,0,0,2091,2093,5,220,0,0,2092,2091,1,0,0,0,
  	2093,2094,1,0,0,0,2094,2092,1,0,0,0,2094,2095,1,0,0,0,2095,213,1,0,0,
  	0,2096,2097,5,165,0,0,2097,2098,5,222,0,0,2098,2103,3,220,110,0,2099,
  	2100,5,222,0,0,2100,2101,5,80,0,0,2101,2102,5,222,0,0,2102,2104,3,302,
  	151,0,2103,2099,1,0,0,0,2103,2104,1,0,0,0,2104,215,1,0,0,0,2105,2106,
  	5,166,0,0,2106,2107,5,222,0,0,2107,2108,3,220,110,0,2108,217,1,0,0,0,
  	2109,2110,5,167,0,0,2110,2111,5,222,0,0,2111,2126,3,220,110,0,2112,2114,
  	5,222,0,0,2113,2112,1,0,0,0,2113,2114,1,0,0,0,2114,2115,1,0,0,0,2115,
  	2117,5,182,0,0,2116,2118,5,222,0,0,2117,2116,1,0,0,0,2117,2118,1,0,0,
  	0,2118,2119,1,0,0,0,2119,2124,3,220,110,0,2120,2121,5,222,0,0,2121,2122,
  	5,162,0,0,2122,2123,5,222,0,0,2123,2125,3,220,110,0,2124,2120,1,0,0,0,
  	2124,2125,1,0,0,0,2125,2127,1,0,0,0,2126,2113,1,0,0,0,2126,2127,1,0,0,
  	0,2127,219,1,0,0,0,2128,2129,6,110,-1,0,2129,2193,3,296,148,0,2130,2132,
  	5,194,0,0,2131,2133,5,222,0,0,2132,2131,1,0,0,0,2132,2133,1,0,0,0,2133,
  	2134,1,0,0,0,2134,2145,3,220,110,0,2135,2137,5,222,0,0,2136,2135,1,0,
  	0,0,2136,2137,1,0,0,0,2137,2138,1,0,0,0,2138,2140,5,182,0,0,2139,2141,
  	5,222,0,0,2140,2139,1,0,0,0,2140,2141,1,0,0,0,2141,2142,1,0,0,0,2142,
  	2144,3,220,110,0,2143,2136,1,0,0,0,2144,2147,1,0,0,0,2145,2143,1,0,0,
  	0,2145,2146,1,0,0,0,2146,2149,1,0,0,0,2147,2145,1,0,0,0,2148,2150,5,222,
  	0,0,2149,2148,1,0,0,0,2149,2150,1,0,0,0,2150,2151,1,0,0,0,2151,2152,5,
  	205,0,0,2152,2193,1,0,0,0,2153,2154,5,106,0,0,2154,2155,5,222,0,0,2155,
  	2193,3,220,110,20,2156,2193,3,214,107,0,2157,2158,5,2,0,0,2158,2159,5,
  	222,0,0,2159,2193,3,220,110,18,2160,2162,3,248,124,0,2161,2163,5,222,
  	0,0,2162,2161,1,0,0,0,2162,2163,1,0,0,0,2163,2164,1,0,0,0,2164,2166,5,
  	179,0,0,2165,2167,5,222,0,0,2166,2165,1,0,0,0,2166,2167,1,0,0,0,2167,
  	2168,1,0,0,0,2168,2169,3,220,110,17,2169,2193,1,0,0,0,2170,2172,7,11,
  	0,0,2171,2173,5,222,0,0,2172,2171,1,0,0,0,2172,2173,1,0,0,0,2173,2174,
  	1,0,0,0,2174,2193,3,220,110,15,2175,2188,5,107,0,0,2176,2177,5,222,0,
  	0,2177,2189,3,220,110,0,2178,2180,5,194,0,0,2179,2181,5,222,0,0,2180,
  	2179,1,0,0,0,2180,2181,1,0,0,0,2181,2182,1,0,0,0,2182,2184,3,220,110,
  	0,2183,2185,5,222,0,0,2184,2183,1,0,0,0,2184,2185,1,0,0,0,2185,2186,1,
  	0,0,0,2186,2187,5,205,0,0,2187,2189,1,0,0,0,2188,2176,1,0,0,0,2188,2178,
  	1,0,0,0,2189,2193,1,0,0,0,2190,2193,3,248,124,0,2191,2193,3,138,69,0,
  	2192,2128,1,0,0,0,2192,2130,1,0,0,0,2192,2153,1,0,0,0,2192,2156,1,0,0,
  	0,2192,2157,1,0,0,0,2192,2160,1,0,0,0,2192,2170,1,0,0,0,2192,2175,1,0,
  	0,0,2192,2190,1,0,0,0,2192,2191,1,0,0,0,2193,2304,1,0,0,0,2194,2196,10,
  	16,0,0,2195,2197,5,222,0,0,2196,2195,1,0,0,0,2196,2197,1,0,0,0,2197,2198,
  	1,0,0,0,2198,2200,5,203,0,0,2199,2201,5,222,0,0,2200,2199,1,0,0,0,2200,
  	2201,1,0,0,0,2201,2202,1,0,0,0,2202,2303,3,220,110,17,2203,2205,10,14,
  	0,0,2204,2206,5,222,0,0,2205,2204,1,0,0,0,2205,2206,1,0,0,0,2206,2207,
  	1,0,0,0,2207,2209,7,12,0,0,2208,2210,5,222,0,0,2209,2208,1,0,0,0,2209,
  	2210,1,0,0,0,2210,2211,1,0,0,0,2211,2303,3,220,110,15,2212,2214,10,13,
  	0,0,2213,2215,5,222,0,0,2214,2213,1,0,0,0,2214,2215,1,0,0,0,2215,2216,
  	1,0,0,0,2216,2218,5,183,0,0,2217,2219,5,222,0,0,2218,2217,1,0,0,0,2218,
  	2219,1,0,0,0,2219,2220,1,0,0,0,2220,2303,3,220,110,14,2221,2223,10,12,
  	0,0,2222,2224,5,222,0,0,2223,2222,1,0,0,0,2223,2224,1,0,0,0,2224,2225,
  	1,0,0,0,2225,2227,5,103,0,0,2226,2228,5,222,0,0,2227,2226,1,0,0,0,2227,
  	2228,1,0,0,0,2228,2229,1,0,0,0,2229,2303,3,220,110,13,2230,2232,10,11,
  	0,0,2231,2233,5,222,0,0,2232,2231,1,0,0,0,2232,2233,1,0,0,0,2233,2234,
  	1,0,0,0,2234,2236,7,11,0,0,2235,2237,5,222,0,0,2236,2235,1,0,0,0,2236,
  	2237,1,0,0,0,2237,2238,1,0,0,0,2238,2303,3,220,110,12,2239,2241,10,10,
  	0,0,2240,2242,5,222,0,0,2241,2240,1,0,0,0,2241,2242,1,0,0,0,2242,2243,
  	1,0,0,0,2243,2245,5,178,0,0,2244,2246,5,222,0,0,2245,2244,1,0,0,0,2245,
  	2246,1,0,0,0,2246,2247,1,0,0,0,2247,2303,3,220,110,11,2248,2250,10,9,
  	0,0,2249,2251,5,222,0,0,2250,2249,1,0,0,0,2250,2251,1,0,0,0,2251,2252,
  	1,0,0,0,2252,2254,7,13,0,0,2253,2255,5,222,0,0,2254,2253,1,0,0,0,2254,
  	2255,1,0,0,0,2255,2256,1,0,0,0,2256,2303,3,220,110,10,2257,2259,10,7,
  	0,0,2258,2260,5,222,0,0,2259,2258,1,0,0,0,2259,2260,1,0,0,0,2260,2261,
  	1,0,0,0,2261,2263,5,4,0,0,2262,2264,5,222,0,0,2263,2262,1,0,0,0,2263,
  	2264,1,0,0,0,2264,2265,1,0,0,0,2265,2303,3,220,110,8,2266,2268,10,6,0,
  	0,2267,2269,5,222,0,0,2268,2267,1,0,0,0,2268,2269,1,0,0,0,2269,2270,1,
  	0,0,0,2270,2272,5,120,0,0,2271,2273,5,222,0,0,2272,2271,1,0,0,0,2272,
  	2273,1,0,0,0,2273,2274,1,0,0,0,2274,2303,3,220,110,7,2275,2277,10,5,0,
  	0,2276,2278,5,222,0,0,2277,2276,1,0,0,0,2277,2278,1,0,0,0,2278,2279,1,
  	0,0,0,2279,2281,5,177,0,0,2280,2282,5,222,0,0,2281,2280,1,0,0,0,2281,
  	2282,1,0,0,0,2282,2283,1,0,0,0,2283,2303,3,220,110,6,2284,2286,10,4,0,
  	0,2285,2287,5,222,0,0,2286,2285,1,0,0,0,2286,2287,1,0,0,0,2287,2288,1,
  	0,0,0,2288,2290,5,57,0,0,2289,2291,5,222,0,0,2290,2289,1,0,0,0,2290,2291,
  	1,0,0,0,2291,2292,1,0,0,0,2292,2303,3,220,110,5,2293,2295,10,3,0,0,2294,
  	2296,5,222,0,0,2295,2294,1,0,0,0,2295,2296,1,0,0,0,2296,2297,1,0,0,0,
  	2297,2299,5,76,0,0,2298,2300,5,222,0,0,2299,2298,1,0,0,0,2299,2300,1,
  	0,0,0,2300,2301,1,0,0,0,2301,2303,3,220,110,4,2302,2194,1,0,0,0,2302,
  	2203,1,0,0,0,2302,2212,1,0,0,0,2302,2221,1,0,0,0,2302,2230,1,0,0,0,2302,
  	2239,1,0,0,0,2302,2248,1,0,0,0,2302,2257,1,0,0,0,2302,2266,1,0,0,0,2302,
  	2275,1,0,0,0,2302,2284,1,0,0,0,2302,2293,1,0,0,0,2303,2306,1,0,0,0,2304,
  	2302,1,0,0,0,2304,2305,1,0,0,0,2305,221,1,0,0,0,2306,2304,1,0,0,0,2307,
  	2311,5,40,0,0,2308,2311,5,153,0,0,2309,2311,3,306,153,0,2310,2307,1,0,
  	0,0,2310,2308,1,0,0,0,2310,2309,1,0,0,0,2311,2312,1,0,0,0,2312,2315,5,
  	222,0,0,2313,2314,5,175,0,0,2314,2316,5,222,0,0,2315,2313,1,0,0,0,2315,
  	2316,1,0,0,0,2316,2317,1,0,0,0,2317,2318,3,224,112,0,2318,223,1,0,0,0,
  	2319,2330,3,226,113,0,2320,2322,5,222,0,0,2321,2320,1,0,0,0,2321,2322,
  	1,0,0,0,2322,2323,1,0,0,0,2323,2325,5,182,0,0,2324,2326,5,222,0,0,2325,
  	2324,1,0,0,0,2325,2326,1,0,0,0,2326,2327,1,0,0,0,2327,2329,3,226,113,
  	0,2328,2321,1,0,0,0,2329,2332,1,0,0,0,2330,2328,1,0,0,0,2330,2331,1,0,
  	0,0,2331,225,1,0,0,0,2332,2330,1,0,0,0,2333,2335,3,278,139,0,2334,2336,
  	3,304,152,0,2335,2334,1,0,0,0,2335,2336,1,0,0,0,2336,2354,1,0,0,0,2337,
  	2339,5,222,0,0,2338,2337,1,0,0,0,2338,2339,1,0,0,0,2339,2340,1,0,0,0,
  	2340,2342,5,194,0,0,2341,2343,5,222,0,0,2342,2341,1,0,0,0,2342,2343,1,
  	0,0,0,2343,2348,1,0,0,0,2344,2346,3,274,137,0,2345,2347,5,222,0,0,2346,
  	2345,1,0,0,0,2346,2347,1,0,0,0,2347,2349,1,0,0,0,2348,2344,1,0,0,0,2348,
  	2349,1,0,0,0,2349,2350,1,0,0,0,2350,2352,5,205,0,0,2351,2353,5,222,0,
  	0,2352,2351,1,0,0,0,2352,2353,1,0,0,0,2353,2355,1,0,0,0,2354,2338,1,0,
  	0,0,2354,2355,1,0,0,0,2355,2358,1,0,0,0,2356,2357,5,222,0,0,2357,2359,
  	3,280,140,0,2358,2356,1,0,0,0,2358,2359,1,0,0,0,2359,227,1,0,0,0,2360,
  	2361,5,172,0,0,2361,2362,5,222,0,0,2362,2364,3,220,110,0,2363,2365,5,
  	220,0,0,2364,2363,1,0,0,0,2365,2366,1,0,0,0,2366,2364,1,0,0,0,2366,2367,
  	1,0,0,0,2367,2371,1,0,0,0,2368,2370,3,48,24,0,2369,2368,1,0,0,0,2370,
  	2373,1,0,0,0,2371,2369,1,0,0,0,2371,2372,1,0,0,0,2372,2377,1,0,0,0,2373,
  	2371,1,0,0,0,2374,2376,5,220,0,0,2375,2374,1,0,0,0,2376,2379,1,0,0,0,
  	2377,2375,1,0,0,0,2377,2378,1,0,0,0,2378,2380,1,0,0,0,2379,2377,1,0,0,
  	0,2380,2381,5,171,0,0,2381,229,1,0,0,0,2382,2383,5,173,0,0,2383,2384,
  	5,222,0,0,2384,2386,3,220,110,0,2385,2387,5,222,0,0,2386,2385,1,0,0,0,
  	2386,2387,1,0,0,0,2387,2388,1,0,0,0,2388,2390,5,182,0,0,2389,2391,5,222,
  	0,0,2390,2389,1,0,0,0,2390,2391,1,0,0,0,2391,2392,1,0,0,0,2392,2393,3,
  	220,110,0,2393,231,1,0,0,0,2394,2395,5,174,0,0,2395,2398,5,222,0,0,2396,
  	2397,5,106,0,0,2397,2399,5,222,0,0,2398,2396,1,0,0,0,2398,2399,1,0,0,
  	0,2399,2400,1,0,0,0,2400,2402,3,248,124,0,2401,2403,5,220,0,0,2402,2401,
  	1,0,0,0,2403,2404,1,0,0,0,2404,2402,1,0,0,0,2404,2405,1,0,0,0,2405,2412,
  	1,0,0,0,2406,2408,3,48,24,0,2407,2409,5,220,0,0,2408,2407,1,0,0,0,2409,
  	2410,1,0,0,0,2410,2408,1,0,0,0,2410,2411,1,0,0,0,2411,2413,1,0,0,0,2412,
  	2406,1,0,0,0,2412,2413,1,0,0,0,2413,2414,1,0,0,0,2414,2415,5,53,0,0,2415,
  	233,1,0,0,0,2416,2417,5,176,0,0,2417,2418,5,222,0,0,2418,2420,3,220,110,
  	0,2419,2421,5,222,0,0,2420,2419,1,0,0,0,2420,2421,1,0,0,0,2421,2422,1,
  	0,0,0,2422,2427,5,182,0,0,2423,2425,5,222,0,0,2424,2423,1,0,0,0,2424,
  	2425,1,0,0,0,2425,2426,1,0,0,0,2426,2428,3,152,76,0,2427,2424,1,0,0,0,
  	2427,2428,1,0,0,0,2428,235,1,0,0,0,2429,2432,3,238,119,0,2430,2432,3,
  	240,120,0,2431,2429,1,0,0,0,2431,2430,1,0,0,0,2432,237,1,0,0,0,2433,2434,
  	5,17,0,0,2434,2435,5,222,0,0,2435,2437,3,278,139,0,2436,2438,3,304,152,
  	0,2437,2436,1,0,0,0,2437,2438,1,0,0,0,2438,2452,1,0,0,0,2439,2441,5,222,
  	0,0,2440,2439,1,0,0,0,2440,2441,1,0,0,0,2441,2442,1,0,0,0,2442,2444,5,
  	194,0,0,2443,2445,5,222,0,0,2444,2443,1,0,0,0,2444,2445,1,0,0,0,2445,
  	2446,1,0,0,0,2446,2448,3,262,131,0,2447,2449,5,222,0,0,2448,2447,1,0,
  	0,0,2448,2449,1,0,0,0,2449,2450,1,0,0,0,2450,2451,5,205,0,0,2451,2453,
  	1,0,0,0,2452,2440,1,0,0,0,2452,2453,1,0,0,0,2453,239,1,0,0,0,2454,2455,
  	5,17,0,0,2455,2457,5,222,0,0,2456,2458,3,248,124,0,2457,2456,1,0,0,0,
  	2457,2458,1,0,0,0,2458,2459,1,0,0,0,2459,2461,5,186,0,0,2460,2462,5,222,
  	0,0,2461,2460,1,0,0,0,2461,2462,1,0,0,0,2462,2463,1,0,0,0,2463,2465,3,
  	278,139,0,2464,2466,3,304,152,0,2465,2464,1,0,0,0,2465,2466,1,0,0,0,2466,
  	2480,1,0,0,0,2467,2469,5,222,0,0,2468,2467,1,0,0,0,2468,2469,1,0,0,0,
  	2469,2470,1,0,0,0,2470,2472,5,194,0,0,2471,2473,5,222,0,0,2472,2471,1,
  	0,0,0,2472,2473,1,0,0,0,2473,2474,1,0,0,0,2474,2476,3,262,131,0,2475,
  	2477,5,222,0,0,2476,2475,1,0,0,0,2476,2477,1,0,0,0,2477,2478,1,0,0,0,
  	2478,2479,5,205,0,0,2479,2481,1,0,0,0,2480,2468,1,0,0,0,2480,2481,1,0,
  	0,0,2481,241,1,0,0,0,2482,2485,3,244,122,0,2483,2485,3,246,123,0,2484,
  	2482,1,0,0,0,2484,2483,1,0,0,0,2485,243,1,0,0,0,2486,2489,3,284,142,0,
  	2487,2488,5,222,0,0,2488,2490,3,262,131,0,2489,2487,1,0,0,0,2489,2490,
  	1,0,0,0,2490,245,1,0,0,0,2491,2493,3,248,124,0,2492,2491,1,0,0,0,2492,
  	2493,1,0,0,0,2493,2494,1,0,0,0,2494,2495,5,186,0,0,2495,2497,3,278,139,
  	0,2496,2498,3,304,152,0,2497,2496,1,0,0,0,2497,2498,1,0,0,0,2498,2501,
  	1,0,0,0,2499,2500,5,222,0,0,2500,2502,3,262,131,0,2501,2499,1,0,0,0,2501,
  	2502,1,0,0,0,2502,2504,1,0,0,0,2503,2505,3,266,133,0,2504,2503,1,0,0,
  	0,2504,2505,1,0,0,0,2505,247,1,0,0,0,2506,2511,3,256,128,0,2507,2511,
  	3,250,125,0,2508,2511,3,252,126,0,2509,2511,3,260,130,0,2510,2506,1,0,
  	0,0,2510,2507,1,0,0,0,2510,2508,1,0,0,0,2510,2509,1,0,0,0,2511,249,1,
  	0,0,0,2512,2514,3,278,139,0,2513,2515,3,304,152,0,2514,2513,1,0,0,0,2514,
  	2515,1,0,0,0,2515,2517,1,0,0,0,2516,2518,3,266,133,0,2517,2516,1,0,0,
  	0,2517,2518,1,0,0,0,2518,251,1,0,0,0,2519,2523,3,278,139,0,2520,2523,
  	3,282,141,0,2521,2523,3,254,127,0,2522,2519,1,0,0,0,2522,2520,1,0,0,0,
  	2522,2521,1,0,0,0,2523,2525,1,0,0,0,2524,2526,3,304,152,0,2525,2524,1,
  	0,0,0,2525,2526,1,0,0,0,2526,2528,1,0,0,0,2527,2529,5,222,0,0,2528,2527,
  	1,0,0,0,2528,2529,1,0,0,0,2529,2541,1,0,0,0,2530,2532,5,194,0,0,2531,
  	2533,5,222,0,0,2532,2531,1,0,0,0,2532,2533,1,0,0,0,2533,2538,1,0,0,0,
  	2534,2536,3,262,131,0,2535,2537,5,222,0,0,2536,2535,1,0,0,0,2536,2537,
  	1,0,0,0,2537,2539,1,0,0,0,2538,2534,1,0,0,0,2538,2539,1,0,0,0,2539,2540,
  	1,0,0,0,2540,2542,5,205,0,0,2541,2530,1,0,0,0,2542,2543,1,0,0,0,2543,
  	2541,1,0,0,0,2543,2544,1,0,0,0,2544,2546,1,0,0,0,2545,2547,3,266,133,
  	0,2546,2545,1,0,0,0,2546,2547,1,0,0,0,2547,253,1,0,0,0,2548,2550,3,278,
  	139,0,2549,2551,3,304,152,0,2550,2549,1,0,0,0,2550,2551,1,0,0,0,2551,
  	2553,1,0,0,0,2552,2554,5,222,0,0,2553,2552,1,0,0,0,2553,2554,1,0,0,0,
  	2554,2555,1,0,0,0,2555,2557,5,194,0,0,2556,2558,5,222,0,0,2557,2556,1,
  	0,0,0,2557,2558,1,0,0,0,2558,2563,1,0,0,0,2559,2561,3,262,131,0,2560,
  	2562,5,222,0,0,2561,2560,1,0,0,0,2561,2562,1,0,0,0,2562,2564,1,0,0,0,
  	2563,2559,1,0,0,0,2563,2564,1,0,0,0,2564,2565,1,0,0,0,2565,2566,5,205,
  	0,0,2566,255,1,0,0,0,2567,2570,3,250,125,0,2568,2570,3,252,126,0,2569,
  	2567,1,0,0,0,2569,2568,1,0,0,0,2569,2570,1,0,0,0,2570,2572,1,0,0,0,2571,
  	2573,3,258,129,0,2572,2571,1,0,0,0,2573,2574,1,0,0,0,2574,2572,1,0,0,
  	0,2574,2575,1,0,0,0,2575,2577,1,0,0,0,2576,2578,3,266,133,0,2577,2576,
  	1,0,0,0,2577,2578,1,0,0,0,2578,257,1,0,0,0,2579,2581,5,222,0,0,2580,2579,
  	1,0,0,0,2580,2581,1,0,0,0,2581,2582,1,0,0,0,2582,2585,5,186,0,0,2583,
  	2586,3,250,125,0,2584,2586,3,252,126,0,2585,2583,1,0,0,0,2585,2584,1,
  	0,0,0,2586,259,1,0,0,0,2587,2588,3,266,133,0,2588,261,1,0,0,0,2589,2591,
  	3,264,132,0,2590,2589,1,0,0,0,2590,2591,1,0,0,0,2591,2593,1,0,0,0,2592,
  	2594,5,222,0,0,2593,2592,1,0,0,0,2593,2594,1,0,0,0,2594,2595,1,0,0,0,
  	2595,2597,7,9,0,0,2596,2598,5,222,0,0,2597,2596,1,0,0,0,2597,2598,1,0,
  	0,0,2598,2600,1,0,0,0,2599,2590,1,0,0,0,2600,2603,1,0,0,0,2601,2599,1,
  	0,0,0,2601,2602,1,0,0,0,2602,2604,1,0,0,0,2603,2601,1,0,0,0,2604,2617,
  	3,264,132,0,2605,2607,5,222,0,0,2606,2605,1,0,0,0,2606,2607,1,0,0,0,2607,
  	2608,1,0,0,0,2608,2610,7,9,0,0,2609,2611,5,222,0,0,2610,2609,1,0,0,0,
  	2610,2611,1,0,0,0,2611,2613,1,0,0,0,2612,2614,3,264,132,0,2613,2612,1,
  	0,0,0,2613,2614,1,0,0,0,2614,2616,1,0,0,0,2615,2606,1,0,0,0,2616,2619,
  	1,0,0,0,2617,2615,1,0,0,0,2617,2618,1,0,0,0,2618,263,1,0,0,0,2619,2617,
  	1,0,0,0,2620,2621,7,14,0,0,2621,2623,5,222,0,0,2622,2620,1,0,0,0,2622,
  	2623,1,0,0,0,2623,2624,1,0,0,0,2624,2625,3,220,110,0,2625,265,1,0,0,0,
  	2626,2627,5,188,0,0,2627,2629,3,278,139,0,2628,2630,3,304,152,0,2629,
  	2628,1,0,0,0,2629,2630,1,0,0,0,2630,267,1,0,0,0,2631,2649,5,194,0,0,2632,
  	2634,5,222,0,0,2633,2632,1,0,0,0,2633,2634,1,0,0,0,2634,2635,1,0,0,0,
  	2635,2646,3,270,135,0,2636,2638,5,222,0,0,2637,2636,1,0,0,0,2637,2638,
  	1,0,0,0,2638,2639,1,0,0,0,2639,2641,5,182,0,0,2640,2642,5,222,0,0,2641,
  	2640,1,0,0,0,2641,2642,1,0,0,0,2642,2643,1,0,0,0,2643,2645,3,270,135,
  	0,2644,2637,1,0,0,0,2645,2648,1,0,0,0,2646,2644,1,0,0,0,2646,2647,1,0,
  	0,0,2647,2650,1,0,0,0,2648,2646,1,0,0,0,2649,2633,1,0,0,0,2649,2650,1,
  	0,0,0,2650,2652,1,0,0,0,2651,2653,5,222,0,0,2652,2651,1,0,0,0,2652,2653,
  	1,0,0,0,2653,2654,1,0,0,0,2654,2655,5,205,0,0,2655,269,1,0,0,0,2656,2657,
  	5,115,0,0,2657,2659,5,222,0,0,2658,2656,1,0,0,0,2658,2659,1,0,0,0,2659,
  	2662,1,0,0,0,2660,2661,7,15,0,0,2661,2663,5,222,0,0,2662,2660,1,0,0,0,
  	2662,2663,1,0,0,0,2663,2666,1,0,0,0,2664,2665,5,122,0,0,2665,2667,5,222,
  	0,0,2666,2664,1,0,0,0,2666,2667,1,0,0,0,2667,2668,1,0,0,0,2668,2670,3,
  	278,139,0,2669,2671,3,304,152,0,2670,2669,1,0,0,0,2670,2671,1,0,0,0,2671,
  	2680,1,0,0,0,2672,2674,5,222,0,0,2673,2672,1,0,0,0,2673,2674,1,0,0,0,
  	2674,2675,1,0,0,0,2675,2677,5,194,0,0,2676,2678,5,222,0,0,2677,2676,1,
  	0,0,0,2677,2678,1,0,0,0,2678,2679,1,0,0,0,2679,2681,5,205,0,0,2680,2673,
  	1,0,0,0,2680,2681,1,0,0,0,2681,2684,1,0,0,0,2682,2683,5,222,0,0,2683,
  	2685,3,280,140,0,2684,2682,1,0,0,0,2684,2685,1,0,0,0,2685,2690,1,0,0,
  	0,2686,2688,5,222,0,0,2687,2686,1,0,0,0,2687,2688,1,0,0,0,2688,2689,1,
  	0,0,0,2689,2691,3,272,136,0,2690,2687,1,0,0,0,2690,2691,1,0,0,0,2691,
  	271,1,0,0,0,2692,2694,5,187,0,0,2693,2695,5,222,0,0,2694,2693,1,0,0,0,
  	2694,2695,1,0,0,0,2695,2696,1,0,0,0,2696,2697,3,220,110,0,2697,273,1,
  	0,0,0,2698,2709,3,276,138,0,2699,2701,5,222,0,0,2700,2699,1,0,0,0,2700,
  	2701,1,0,0,0,2701,2702,1,0,0,0,2702,2704,5,182,0,0,2703,2705,5,222,0,
  	0,2704,2703,1,0,0,0,2704,2705,1,0,0,0,2705,2706,1,0,0,0,2706,2708,3,276,
  	138,0,2707,2700,1,0,0,0,2708,2711,1,0,0,0,2709,2707,1,0,0,0,2709,2710,
  	1,0,0,0,2710,275,1,0,0,0,2711,2709,1,0,0,0,2712,2713,3,220,110,0,2713,
  	2714,5,222,0,0,2714,2715,5,162,0,0,2715,2716,5,222,0,0,2716,2718,1,0,
  	0,0,2717,2712,1,0,0,0,2717,2718,1,0,0,0,2718,2719,1,0,0,0,2719,2720,3,
  	220,110,0,2720,277,1,0,0,0,2721,2724,5,218,0,0,2722,2724,3,308,154,0,
  	2723,2721,1,0,0,0,2723,2722,1,0,0,0,2724,2725,1,0,0,0,2725,2723,1,0,0,
  	0,2725,2726,1,0,0,0,2726,2736,1,0,0,0,2727,2730,5,207,0,0,2728,2731,5,
  	218,0,0,2729,2731,3,308,154,0,2730,2728,1,0,0,0,2730,2729,1,0,0,0,2731,
  	2732,1,0,0,0,2732,2730,1,0,0,0,2732,2733,1,0,0,0,2733,2734,1,0,0,0,2734,
  	2736,5,208,0,0,2735,2723,1,0,0,0,2735,2727,1,0,0,0,2736,279,1,0,0,0,2737,
  	2738,5,8,0,0,2738,2741,5,222,0,0,2739,2740,5,106,0,0,2740,2742,5,222,
  	0,0,2741,2739,1,0,0,0,2741,2742,1,0,0,0,2742,2743,1,0,0,0,2743,2746,3,
  	302,151,0,2744,2745,5,222,0,0,2745,2747,3,290,145,0,2746,2744,1,0,0,0,
  	2746,2747,1,0,0,0,2747,281,1,0,0,0,2748,2749,7,16,0,0,2749,283,1,0,0,
  	0,2750,2755,5,218,0,0,2751,2754,3,308,154,0,2752,2754,5,218,0,0,2753,
  	2751,1,0,0,0,2753,2752,1,0,0,0,2754,2757,1,0,0,0,2755,2753,1,0,0,0,2755,
  	2756,1,0,0,0,2756,2766,1,0,0,0,2757,2755,1,0,0,0,2758,2761,3,308,154,
  	0,2759,2762,3,308,154,0,2760,2762,5,218,0,0,2761,2759,1,0,0,0,2761,2760,
  	1,0,0,0,2762,2763,1,0,0,0,2763,2761,1,0,0,0,2763,2764,1,0,0,0,2764,2766,
  	1,0,0,0,2765,2750,1,0,0,0,2765,2758,1,0,0,0,2766,285,1,0,0,0,2767,2768,
  	7,13,0,0,2768,287,1,0,0,0,2769,2774,3,278,139,0,2770,2771,5,186,0,0,2771,
  	2773,3,278,139,0,2772,2770,1,0,0,0,2773,2776,1,0,0,0,2774,2772,1,0,0,
  	0,2774,2775,1,0,0,0,2775,289,1,0,0,0,2776,2774,1,0,0,0,2777,2779,5,198,
  	0,0,2778,2780,5,222,0,0,2779,2778,1,0,0,0,2779,2780,1,0,0,0,2780,2783,
  	1,0,0,0,2781,2784,3,310,155,0,2782,2784,3,278,139,0,2783,2781,1,0,0,0,
  	2783,2782,1,0,0,0,2784,291,1,0,0,0,2785,2794,3,284,142,0,2786,2788,5,
  	222,0,0,2787,2786,1,0,0,0,2787,2788,1,0,0,0,2788,2789,1,0,0,0,2789,2791,
  	5,196,0,0,2790,2792,5,222,0,0,2791,2790,1,0,0,0,2791,2792,1,0,0,0,2792,
  	2793,1,0,0,0,2793,2795,3,284,142,0,2794,2787,1,0,0,0,2794,2795,1,0,0,
  	0,2795,293,1,0,0,0,2796,2797,3,278,139,0,2797,2798,5,181,0,0,2798,295,
  	1,0,0,0,2799,2811,5,211,0,0,2800,2811,5,210,0,0,2801,2811,3,314,157,0,
  	2802,2811,5,214,0,0,2803,2811,3,310,155,0,2804,2811,3,312,156,0,2805,
  	2811,5,209,0,0,2806,2811,5,163,0,0,2807,2811,5,66,0,0,2808,2811,5,108,
  	0,0,2809,2811,5,109,0,0,2810,2799,1,0,0,0,2810,2800,1,0,0,0,2810,2801,
  	1,0,0,0,2810,2802,1,0,0,0,2810,2803,1,0,0,0,2810,2804,1,0,0,0,2810,2805,
  	1,0,0,0,2810,2806,1,0,0,0,2810,2807,1,0,0,0,2810,2808,1,0,0,0,2810,2809,
  	1,0,0,0,2811,297,1,0,0,0,2812,2813,7,17,0,0,2813,299,1,0,0,0,2814,2815,
  	7,18,0,0,2815,301,1,0,0,0,2816,2819,3,282,141,0,2817,2819,3,288,144,0,
  	2818,2816,1,0,0,0,2818,2817,1,0,0,0,2819,2828,1,0,0,0,2820,2822,5,222,
  	0,0,2821,2820,1,0,0,0,2821,2822,1,0,0,0,2822,2823,1,0,0,0,2823,2825,5,
  	194,0,0,2824,2826,5,222,0,0,2825,2824,1,0,0,0,2825,2826,1,0,0,0,2826,
  	2827,1,0,0,0,2827,2829,5,205,0,0,2828,2821,1,0,0,0,2828,2829,1,0,0,0,
  	2829,303,1,0,0,0,2830,2831,7,19,0,0,2831,305,1,0,0,0,2832,2833,7,20,0,
  	0,2833,307,1,0,0,0,2834,2835,7,21,0,0,2835,309,1,0,0,0,2836,2838,7,11,
  	0,0,2837,2836,1,0,0,0,2838,2841,1,0,0,0,2839,2837,1,0,0,0,2839,2840,1,
  	0,0,0,2840,2842,1,0,0,0,2841,2839,1,0,0,0,2842,2843,5,212,0,0,2843,311,
  	1,0,0,0,2844,2846,7,11,0,0,2845,2844,1,0,0,0,2846,2849,1,0,0,0,2847,2845,
  	1,0,0,0,2847,2848,1,0,0,0,2848,2850,1,0,0,0,2849,2847,1,0,0,0,2850,2851,
  	5,215,0,0,2851,313,1,0,0,0,2852,2854,7,11,0,0,2853,2852,1,0,0,0,2854,
  	2857,1,0,0,0,2855,2853,1,0,0,0,2855,2856,1,0,0,0,2856,2858,1,0,0,0,2857,
  	2855,1,0,0,0,2858,2859,5,213,0,0,2859,315,1,0,0,0,491,320,325,332,334,
  	337,342,346,351,355,360,364,369,373,378,382,387,391,396,400,404,409,412,
  	417,429,435,440,446,450,454,463,467,473,477,487,493,498,513,516,524,529,
  	534,540,546,549,553,557,560,564,569,573,580,588,592,596,605,608,617,621,
  	626,631,633,639,651,655,659,663,668,675,678,683,753,759,763,766,782,786,
  	791,794,799,805,809,814,819,823,826,830,836,840,847,853,856,861,871,874,
  	877,881,887,891,896,903,907,911,915,918,924,930,932,943,949,951,959,965,
  	973,980,988,993,1000,1004,1007,1012,1018,1022,1027,1037,1043,1053,1057,
  	1067,1076,1082,1084,1089,1095,1099,1102,1106,1117,1122,1128,1130,1136,
  	1138,1143,1147,1153,1156,1160,1165,1171,1173,1181,1185,1188,1191,1195,
  	1218,1224,1228,1232,1242,1248,1250,1262,1268,1270,1276,1282,1284,1294,
  	1298,1303,1311,1315,1319,1327,1331,1343,1347,1354,1356,1362,1366,1374,
  	1378,1390,1396,1398,1408,1414,1416,1422,1428,1430,1434,1438,1442,1464,
  	1469,1479,1483,1488,1499,1503,1508,1522,1526,1535,1539,1542,1546,1550,
  	1553,1557,1561,1564,1568,1571,1575,1577,1581,1585,1589,1593,1596,1602,
  	1606,1609,1614,1618,1624,1627,1630,1634,1639,1645,1647,1654,1658,1664,
  	1667,1672,1678,1680,1687,1691,1697,1700,1705,1711,1713,1721,1725,1728,
  	1731,1735,1743,1747,1751,1753,1756,1761,1767,1771,1775,1780,1785,1789,
  	1793,1798,1806,1808,1820,1824,1832,1836,1844,1848,1852,1856,1860,1864,
  	1872,1876,1888,1893,1897,1905,1908,1913,1919,1921,1927,1929,1934,1938,
  	1943,1946,1950,1954,1965,1971,1975,1978,1984,1988,1996,2000,2009,2013,
  	2019,2022,2027,2033,2035,2041,2045,2052,2060,2065,2072,2076,2079,2082,
  	2085,2089,2094,2103,2113,2117,2124,2126,2132,2136,2140,2145,2149,2162,
  	2166,2172,2180,2184,2188,2192,2196,2200,2205,2209,2214,2218,2223,2227,
  	2232,2236,2241,2245,2250,2254,2259,2263,2268,2272,2277,2281,2286,2290,
  	2295,2299,2302,2304,2310,2315,2321,2325,2330,2335,2338,2342,2346,2348,
  	2352,2354,2358,2366,2371,2377,2386,2390,2398,2404,2410,2412,2420,2424,
  	2427,2431,2437,2440,2444,2448,2452,2457,2461,2465,2468,2472,2476,2480,
  	2484,2489,2492,2497,2501,2504,2510,2514,2517,2522,2525,2528,2532,2536,
  	2538,2543,2546,2550,2553,2557,2561,2563,2569,2574,2577,2580,2585,2590,
  	2593,2597,2601,2606,2610,2613,2617,2622,2629,2633,2637,2641,2646,2649,
  	2652,2658,2662,2666,2670,2673,2677,2680,2684,2687,2690,2694,2700,2704,
  	2709,2717,2723,2725,2730,2732,2735,2741,2746,2753,2755,2761,2763,2765,
  	2774,2779,2783,2787,2791,2794,2810,2818,2821,2825,2828,2839,2847,2855
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  visualbasic6parserParserStaticData = staticData.release();
}

}

VisualBasic6Parser::VisualBasic6Parser(TokenStream *input) : VisualBasic6Parser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

VisualBasic6Parser::VisualBasic6Parser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  VisualBasic6Parser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *visualbasic6parserParserStaticData->atn, visualbasic6parserParserStaticData->decisionToDFA, visualbasic6parserParserStaticData->sharedContextCache, options);
}

VisualBasic6Parser::~VisualBasic6Parser() {
  delete _interpreter;
}

const atn::ATN& VisualBasic6Parser::getATN() const {
  return *visualbasic6parserParserStaticData->atn;
}

std::string VisualBasic6Parser::getGrammarFileName() const {
  return "VisualBasic6Parser.g4";
}

const std::vector<std::string>& VisualBasic6Parser::getRuleNames() const {
  return visualbasic6parserParserStaticData->ruleNames;
}

const dfa::Vocabulary& VisualBasic6Parser::getVocabulary() const {
  return visualbasic6parserParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView VisualBasic6Parser::getSerializedATN() const {
  return visualbasic6parserParserStaticData->serializedATN;
}


//----------------- StartRuleContext ------------------------------------------------------------------

VisualBasic6Parser::StartRuleContext::StartRuleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

VisualBasic6Parser::ModuleContext* VisualBasic6Parser::StartRuleContext::module() {
  return getRuleContext<VisualBasic6Parser::ModuleContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::StartRuleContext::EOF() {
  return getToken(VisualBasic6Parser::EOF, 0);
}


size_t VisualBasic6Parser::StartRuleContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleStartRule;
}

void VisualBasic6Parser::StartRuleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStartRule(this);
}

void VisualBasic6Parser::StartRuleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStartRule(this);
}

VisualBasic6Parser::StartRuleContext* VisualBasic6Parser::startRule() {
  StartRuleContext *_localctx = _tracker.createInstance<StartRuleContext>(_ctx, getState());
  enterRule(_localctx, 0, VisualBasic6Parser::RuleStartRule);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(316);
    module();
    setState(317);
    match(VisualBasic6Parser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModuleContext ------------------------------------------------------------------

VisualBasic6Parser::ModuleContext::ModuleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::ModuleContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::ModuleContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::ModuleContext::NEWLINE() {
  return getTokens(VisualBasic6Parser::NEWLINE);
}

tree::TerminalNode* VisualBasic6Parser::ModuleContext::NEWLINE(size_t i) {
  return getToken(VisualBasic6Parser::NEWLINE, i);
}

VisualBasic6Parser::ModuleHeaderContext* VisualBasic6Parser::ModuleContext::moduleHeader() {
  return getRuleContext<VisualBasic6Parser::ModuleHeaderContext>(0);
}

VisualBasic6Parser::ModuleReferencesContext* VisualBasic6Parser::ModuleContext::moduleReferences() {
  return getRuleContext<VisualBasic6Parser::ModuleReferencesContext>(0);
}

VisualBasic6Parser::ControlPropertiesContext* VisualBasic6Parser::ModuleContext::controlProperties() {
  return getRuleContext<VisualBasic6Parser::ControlPropertiesContext>(0);
}

VisualBasic6Parser::ModuleConfigContext* VisualBasic6Parser::ModuleContext::moduleConfig() {
  return getRuleContext<VisualBasic6Parser::ModuleConfigContext>(0);
}

VisualBasic6Parser::ModuleAttributesContext* VisualBasic6Parser::ModuleContext::moduleAttributes() {
  return getRuleContext<VisualBasic6Parser::ModuleAttributesContext>(0);
}

VisualBasic6Parser::ModuleOptionsContext* VisualBasic6Parser::ModuleContext::moduleOptions() {
  return getRuleContext<VisualBasic6Parser::ModuleOptionsContext>(0);
}

VisualBasic6Parser::ModuleBodyContext* VisualBasic6Parser::ModuleContext::moduleBody() {
  return getRuleContext<VisualBasic6Parser::ModuleBodyContext>(0);
}


size_t VisualBasic6Parser::ModuleContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleModule;
}

void VisualBasic6Parser::ModuleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModule(this);
}

void VisualBasic6Parser::ModuleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModule(this);
}

VisualBasic6Parser::ModuleContext* VisualBasic6Parser::module() {
  ModuleContext *_localctx = _tracker.createInstance<ModuleContext>(_ctx, getState());
  enterRule(_localctx, 2, VisualBasic6Parser::RuleModule);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(320);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 0, _ctx)) {
    case 1: {
      setState(319);
      match(VisualBasic6Parser::WS);
      break;
    }

    default:
      break;
    }
    setState(325);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 1, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(322);
        match(VisualBasic6Parser::NEWLINE); 
      }
      setState(327);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 1, _ctx);
    }
    setState(334);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 3, _ctx)) {
    case 1: {
      setState(328);
      moduleHeader();
      setState(330); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(329);
                match(VisualBasic6Parser::NEWLINE);
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(332); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    default:
      break;
    }
    setState(337);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 4, _ctx)) {
    case 1: {
      setState(336);
      moduleReferences();
      break;
    }

    default:
      break;
    }
    setState(342);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 5, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(339);
        match(VisualBasic6Parser::NEWLINE); 
      }
      setState(344);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 5, _ctx);
    }
    setState(346);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 6, _ctx)) {
    case 1: {
      setState(345);
      controlProperties();
      break;
    }

    default:
      break;
    }
    setState(351);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 7, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(348);
        match(VisualBasic6Parser::NEWLINE); 
      }
      setState(353);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 7, _ctx);
    }
    setState(355);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 8, _ctx)) {
    case 1: {
      setState(354);
      moduleConfig();
      break;
    }

    default:
      break;
    }
    setState(360);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 9, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(357);
        match(VisualBasic6Parser::NEWLINE); 
      }
      setState(362);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 9, _ctx);
    }
    setState(364);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 10, _ctx)) {
    case 1: {
      setState(363);
      moduleAttributes();
      break;
    }

    default:
      break;
    }
    setState(369);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 11, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(366);
        match(VisualBasic6Parser::NEWLINE); 
      }
      setState(371);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 11, _ctx);
    }
    setState(373);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 12, _ctx)) {
    case 1: {
      setState(372);
      moduleOptions();
      break;
    }

    default:
      break;
    }
    setState(378);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 13, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(375);
        match(VisualBasic6Parser::NEWLINE); 
      }
      setState(380);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 13, _ctx);
    }
    setState(382);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 14, _ctx)) {
    case 1: {
      setState(381);
      moduleBody();
      break;
    }

    default:
      break;
    }
    setState(387);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == VisualBasic6Parser::NEWLINE) {
      setState(384);
      match(VisualBasic6Parser::NEWLINE);
      setState(389);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(391);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::WS) {
      setState(390);
      match(VisualBasic6Parser::WS);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModuleReferencesContext ------------------------------------------------------------------

VisualBasic6Parser::ModuleReferencesContext::ModuleReferencesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<VisualBasic6Parser::ModuleReferenceContext *> VisualBasic6Parser::ModuleReferencesContext::moduleReference() {
  return getRuleContexts<VisualBasic6Parser::ModuleReferenceContext>();
}

VisualBasic6Parser::ModuleReferenceContext* VisualBasic6Parser::ModuleReferencesContext::moduleReference(size_t i) {
  return getRuleContext<VisualBasic6Parser::ModuleReferenceContext>(i);
}


size_t VisualBasic6Parser::ModuleReferencesContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleModuleReferences;
}

void VisualBasic6Parser::ModuleReferencesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModuleReferences(this);
}

void VisualBasic6Parser::ModuleReferencesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModuleReferences(this);
}

VisualBasic6Parser::ModuleReferencesContext* VisualBasic6Parser::moduleReferences() {
  ModuleReferencesContext *_localctx = _tracker.createInstance<ModuleReferencesContext>(_ctx, getState());
  enterRule(_localctx, 4, VisualBasic6Parser::RuleModuleReferences);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(394); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(393);
              moduleReference();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(396); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 17, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModuleReferenceContext ------------------------------------------------------------------

VisualBasic6Parser::ModuleReferenceContext::ModuleReferenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::ModuleReferenceContext::OBJECT() {
  return getToken(VisualBasic6Parser::OBJECT, 0);
}

tree::TerminalNode* VisualBasic6Parser::ModuleReferenceContext::EQ() {
  return getToken(VisualBasic6Parser::EQ, 0);
}

VisualBasic6Parser::ModuleReferenceValueContext* VisualBasic6Parser::ModuleReferenceContext::moduleReferenceValue() {
  return getRuleContext<VisualBasic6Parser::ModuleReferenceValueContext>(0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::ModuleReferenceContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::ModuleReferenceContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

tree::TerminalNode* VisualBasic6Parser::ModuleReferenceContext::SEMICOLON() {
  return getToken(VisualBasic6Parser::SEMICOLON, 0);
}

VisualBasic6Parser::ModuleReferenceComponentContext* VisualBasic6Parser::ModuleReferenceContext::moduleReferenceComponent() {
  return getRuleContext<VisualBasic6Parser::ModuleReferenceComponentContext>(0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::ModuleReferenceContext::NEWLINE() {
  return getTokens(VisualBasic6Parser::NEWLINE);
}

tree::TerminalNode* VisualBasic6Parser::ModuleReferenceContext::NEWLINE(size_t i) {
  return getToken(VisualBasic6Parser::NEWLINE, i);
}


size_t VisualBasic6Parser::ModuleReferenceContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleModuleReference;
}

void VisualBasic6Parser::ModuleReferenceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModuleReference(this);
}

void VisualBasic6Parser::ModuleReferenceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModuleReference(this);
}

VisualBasic6Parser::ModuleReferenceContext* VisualBasic6Parser::moduleReference() {
  ModuleReferenceContext *_localctx = _tracker.createInstance<ModuleReferenceContext>(_ctx, getState());
  enterRule(_localctx, 6, VisualBasic6Parser::RuleModuleReference);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(398);
    match(VisualBasic6Parser::OBJECT);
    setState(400);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::WS) {
      setState(399);
      match(VisualBasic6Parser::WS);
    }
    setState(402);
    match(VisualBasic6Parser::EQ);
    setState(404);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::WS) {
      setState(403);
      match(VisualBasic6Parser::WS);
    }
    setState(406);
    moduleReferenceValue();
    setState(412);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::SEMICOLON) {
      setState(407);
      match(VisualBasic6Parser::SEMICOLON);
      setState(409);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == VisualBasic6Parser::WS) {
        setState(408);
        match(VisualBasic6Parser::WS);
      }
      setState(411);
      moduleReferenceComponent();
    }
    setState(417);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 22, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(414);
        match(VisualBasic6Parser::NEWLINE); 
      }
      setState(419);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 22, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModuleReferenceValueContext ------------------------------------------------------------------

VisualBasic6Parser::ModuleReferenceValueContext::ModuleReferenceValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::ModuleReferenceValueContext::STRINGLITERAL() {
  return getToken(VisualBasic6Parser::STRINGLITERAL, 0);
}


size_t VisualBasic6Parser::ModuleReferenceValueContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleModuleReferenceValue;
}

void VisualBasic6Parser::ModuleReferenceValueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModuleReferenceValue(this);
}

void VisualBasic6Parser::ModuleReferenceValueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModuleReferenceValue(this);
}

VisualBasic6Parser::ModuleReferenceValueContext* VisualBasic6Parser::moduleReferenceValue() {
  ModuleReferenceValueContext *_localctx = _tracker.createInstance<ModuleReferenceValueContext>(_ctx, getState());
  enterRule(_localctx, 8, VisualBasic6Parser::RuleModuleReferenceValue);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(420);
    match(VisualBasic6Parser::STRINGLITERAL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModuleReferenceComponentContext ------------------------------------------------------------------

VisualBasic6Parser::ModuleReferenceComponentContext::ModuleReferenceComponentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::ModuleReferenceComponentContext::STRINGLITERAL() {
  return getToken(VisualBasic6Parser::STRINGLITERAL, 0);
}


size_t VisualBasic6Parser::ModuleReferenceComponentContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleModuleReferenceComponent;
}

void VisualBasic6Parser::ModuleReferenceComponentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModuleReferenceComponent(this);
}

void VisualBasic6Parser::ModuleReferenceComponentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModuleReferenceComponent(this);
}

VisualBasic6Parser::ModuleReferenceComponentContext* VisualBasic6Parser::moduleReferenceComponent() {
  ModuleReferenceComponentContext *_localctx = _tracker.createInstance<ModuleReferenceComponentContext>(_ctx, getState());
  enterRule(_localctx, 10, VisualBasic6Parser::RuleModuleReferenceComponent);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(422);
    match(VisualBasic6Parser::STRINGLITERAL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModuleHeaderContext ------------------------------------------------------------------

VisualBasic6Parser::ModuleHeaderContext::ModuleHeaderContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::ModuleHeaderContext::VERSION() {
  return getToken(VisualBasic6Parser::VERSION, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::ModuleHeaderContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::ModuleHeaderContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

VisualBasic6Parser::DoubleLiteralContext* VisualBasic6Parser::ModuleHeaderContext::doubleLiteral() {
  return getRuleContext<VisualBasic6Parser::DoubleLiteralContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::ModuleHeaderContext::CLASS() {
  return getToken(VisualBasic6Parser::CLASS, 0);
}


size_t VisualBasic6Parser::ModuleHeaderContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleModuleHeader;
}

void VisualBasic6Parser::ModuleHeaderContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModuleHeader(this);
}

void VisualBasic6Parser::ModuleHeaderContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModuleHeader(this);
}

VisualBasic6Parser::ModuleHeaderContext* VisualBasic6Parser::moduleHeader() {
  ModuleHeaderContext *_localctx = _tracker.createInstance<ModuleHeaderContext>(_ctx, getState());
  enterRule(_localctx, 12, VisualBasic6Parser::RuleModuleHeader);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(424);
    match(VisualBasic6Parser::VERSION);
    setState(425);
    match(VisualBasic6Parser::WS);
    setState(426);
    doubleLiteral();
    setState(429);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::WS) {
      setState(427);
      match(VisualBasic6Parser::WS);
      setState(428);
      match(VisualBasic6Parser::CLASS);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModuleConfigContext ------------------------------------------------------------------

VisualBasic6Parser::ModuleConfigContext::ModuleConfigContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::ModuleConfigContext::BEGIN() {
  return getToken(VisualBasic6Parser::BEGIN, 0);
}

tree::TerminalNode* VisualBasic6Parser::ModuleConfigContext::END() {
  return getToken(VisualBasic6Parser::END, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::ModuleConfigContext::NEWLINE() {
  return getTokens(VisualBasic6Parser::NEWLINE);
}

tree::TerminalNode* VisualBasic6Parser::ModuleConfigContext::NEWLINE(size_t i) {
  return getToken(VisualBasic6Parser::NEWLINE, i);
}

std::vector<VisualBasic6Parser::ModuleConfigElementContext *> VisualBasic6Parser::ModuleConfigContext::moduleConfigElement() {
  return getRuleContexts<VisualBasic6Parser::ModuleConfigElementContext>();
}

VisualBasic6Parser::ModuleConfigElementContext* VisualBasic6Parser::ModuleConfigContext::moduleConfigElement(size_t i) {
  return getRuleContext<VisualBasic6Parser::ModuleConfigElementContext>(i);
}


size_t VisualBasic6Parser::ModuleConfigContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleModuleConfig;
}

void VisualBasic6Parser::ModuleConfigContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModuleConfig(this);
}

void VisualBasic6Parser::ModuleConfigContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModuleConfig(this);
}

VisualBasic6Parser::ModuleConfigContext* VisualBasic6Parser::moduleConfig() {
  ModuleConfigContext *_localctx = _tracker.createInstance<ModuleConfigContext>(_ctx, getState());
  enterRule(_localctx, 14, VisualBasic6Parser::RuleModuleConfig);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(431);
    match(VisualBasic6Parser::BEGIN);
    setState(433); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(432);
      match(VisualBasic6Parser::NEWLINE);
      setState(435); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == VisualBasic6Parser::NEWLINE);
    setState(438); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(437);
              moduleConfigElement();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(440); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 25, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(442);
    match(VisualBasic6Parser::END);
    setState(444); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(443);
              match(VisualBasic6Parser::NEWLINE);
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(446); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 26, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModuleConfigElementContext ------------------------------------------------------------------

VisualBasic6Parser::ModuleConfigElementContext::ModuleConfigElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

VisualBasic6Parser::AmbiguousIdentifierContext* VisualBasic6Parser::ModuleConfigElementContext::ambiguousIdentifier() {
  return getRuleContext<VisualBasic6Parser::AmbiguousIdentifierContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::ModuleConfigElementContext::EQ() {
  return getToken(VisualBasic6Parser::EQ, 0);
}

VisualBasic6Parser::LiteralContext* VisualBasic6Parser::ModuleConfigElementContext::literal() {
  return getRuleContext<VisualBasic6Parser::LiteralContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::ModuleConfigElementContext::NEWLINE() {
  return getToken(VisualBasic6Parser::NEWLINE, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::ModuleConfigElementContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::ModuleConfigElementContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}


size_t VisualBasic6Parser::ModuleConfigElementContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleModuleConfigElement;
}

void VisualBasic6Parser::ModuleConfigElementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModuleConfigElement(this);
}

void VisualBasic6Parser::ModuleConfigElementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModuleConfigElement(this);
}

VisualBasic6Parser::ModuleConfigElementContext* VisualBasic6Parser::moduleConfigElement() {
  ModuleConfigElementContext *_localctx = _tracker.createInstance<ModuleConfigElementContext>(_ctx, getState());
  enterRule(_localctx, 16, VisualBasic6Parser::RuleModuleConfigElement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(448);
    ambiguousIdentifier();
    setState(450);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::WS) {
      setState(449);
      match(VisualBasic6Parser::WS);
    }
    setState(452);
    match(VisualBasic6Parser::EQ);
    setState(454);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::WS) {
      setState(453);
      match(VisualBasic6Parser::WS);
    }
    setState(456);
    literal();
    setState(457);
    match(VisualBasic6Parser::NEWLINE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModuleAttributesContext ------------------------------------------------------------------

VisualBasic6Parser::ModuleAttributesContext::ModuleAttributesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<VisualBasic6Parser::AttributeStmtContext *> VisualBasic6Parser::ModuleAttributesContext::attributeStmt() {
  return getRuleContexts<VisualBasic6Parser::AttributeStmtContext>();
}

VisualBasic6Parser::AttributeStmtContext* VisualBasic6Parser::ModuleAttributesContext::attributeStmt(size_t i) {
  return getRuleContext<VisualBasic6Parser::AttributeStmtContext>(i);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::ModuleAttributesContext::NEWLINE() {
  return getTokens(VisualBasic6Parser::NEWLINE);
}

tree::TerminalNode* VisualBasic6Parser::ModuleAttributesContext::NEWLINE(size_t i) {
  return getToken(VisualBasic6Parser::NEWLINE, i);
}


size_t VisualBasic6Parser::ModuleAttributesContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleModuleAttributes;
}

void VisualBasic6Parser::ModuleAttributesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModuleAttributes(this);
}

void VisualBasic6Parser::ModuleAttributesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModuleAttributes(this);
}

VisualBasic6Parser::ModuleAttributesContext* VisualBasic6Parser::moduleAttributes() {
  ModuleAttributesContext *_localctx = _tracker.createInstance<ModuleAttributesContext>(_ctx, getState());
  enterRule(_localctx, 18, VisualBasic6Parser::RuleModuleAttributes);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(465); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(459);
              attributeStmt();
              setState(461); 
              _errHandler->sync(this);
              alt = 1;
              do {
                switch (alt) {
                  case 1: {
                        setState(460);
                        match(VisualBasic6Parser::NEWLINE);
                        break;
                      }

                default:
                  throw NoViableAltException(this);
                }
                setState(463); 
                _errHandler->sync(this);
                alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 29, _ctx);
              } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(467); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 30, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModuleOptionsContext ------------------------------------------------------------------

VisualBasic6Parser::ModuleOptionsContext::ModuleOptionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<VisualBasic6Parser::ModuleOptionContext *> VisualBasic6Parser::ModuleOptionsContext::moduleOption() {
  return getRuleContexts<VisualBasic6Parser::ModuleOptionContext>();
}

VisualBasic6Parser::ModuleOptionContext* VisualBasic6Parser::ModuleOptionsContext::moduleOption(size_t i) {
  return getRuleContext<VisualBasic6Parser::ModuleOptionContext>(i);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::ModuleOptionsContext::NEWLINE() {
  return getTokens(VisualBasic6Parser::NEWLINE);
}

tree::TerminalNode* VisualBasic6Parser::ModuleOptionsContext::NEWLINE(size_t i) {
  return getToken(VisualBasic6Parser::NEWLINE, i);
}


size_t VisualBasic6Parser::ModuleOptionsContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleModuleOptions;
}

void VisualBasic6Parser::ModuleOptionsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModuleOptions(this);
}

void VisualBasic6Parser::ModuleOptionsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModuleOptions(this);
}

VisualBasic6Parser::ModuleOptionsContext* VisualBasic6Parser::moduleOptions() {
  ModuleOptionsContext *_localctx = _tracker.createInstance<ModuleOptionsContext>(_ctx, getState());
  enterRule(_localctx, 20, VisualBasic6Parser::RuleModuleOptions);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(475); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(469);
              moduleOption();
              setState(471); 
              _errHandler->sync(this);
              alt = 1;
              do {
                switch (alt) {
                  case 1: {
                        setState(470);
                        match(VisualBasic6Parser::NEWLINE);
                        break;
                      }

                default:
                  throw NoViableAltException(this);
                }
                setState(473); 
                _errHandler->sync(this);
                alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 31, _ctx);
              } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(477); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 32, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModuleOptionContext ------------------------------------------------------------------

VisualBasic6Parser::ModuleOptionContext::ModuleOptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t VisualBasic6Parser::ModuleOptionContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleModuleOption;
}

void VisualBasic6Parser::ModuleOptionContext::copyFrom(ModuleOptionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- OptionExplicitStmtContext ------------------------------------------------------------------

tree::TerminalNode* VisualBasic6Parser::OptionExplicitStmtContext::OPTION_EXPLICIT() {
  return getToken(VisualBasic6Parser::OPTION_EXPLICIT, 0);
}

VisualBasic6Parser::OptionExplicitStmtContext::OptionExplicitStmtContext(ModuleOptionContext *ctx) { copyFrom(ctx); }

void VisualBasic6Parser::OptionExplicitStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOptionExplicitStmt(this);
}
void VisualBasic6Parser::OptionExplicitStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOptionExplicitStmt(this);
}
//----------------- OptionBaseStmtContext ------------------------------------------------------------------

tree::TerminalNode* VisualBasic6Parser::OptionBaseStmtContext::OPTION_BASE() {
  return getToken(VisualBasic6Parser::OPTION_BASE, 0);
}

tree::TerminalNode* VisualBasic6Parser::OptionBaseStmtContext::WS() {
  return getToken(VisualBasic6Parser::WS, 0);
}

VisualBasic6Parser::IntegerLiteralContext* VisualBasic6Parser::OptionBaseStmtContext::integerLiteral() {
  return getRuleContext<VisualBasic6Parser::IntegerLiteralContext>(0);
}

VisualBasic6Parser::OptionBaseStmtContext::OptionBaseStmtContext(ModuleOptionContext *ctx) { copyFrom(ctx); }

void VisualBasic6Parser::OptionBaseStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOptionBaseStmt(this);
}
void VisualBasic6Parser::OptionBaseStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOptionBaseStmt(this);
}
//----------------- OptionPrivateModuleStmtContext ------------------------------------------------------------------

tree::TerminalNode* VisualBasic6Parser::OptionPrivateModuleStmtContext::OPTION_PRIVATE_MODULE() {
  return getToken(VisualBasic6Parser::OPTION_PRIVATE_MODULE, 0);
}

VisualBasic6Parser::OptionPrivateModuleStmtContext::OptionPrivateModuleStmtContext(ModuleOptionContext *ctx) { copyFrom(ctx); }

void VisualBasic6Parser::OptionPrivateModuleStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOptionPrivateModuleStmt(this);
}
void VisualBasic6Parser::OptionPrivateModuleStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOptionPrivateModuleStmt(this);
}
//----------------- OptionCompareStmtContext ------------------------------------------------------------------

tree::TerminalNode* VisualBasic6Parser::OptionCompareStmtContext::OPTION_COMPARE() {
  return getToken(VisualBasic6Parser::OPTION_COMPARE, 0);
}

tree::TerminalNode* VisualBasic6Parser::OptionCompareStmtContext::WS() {
  return getToken(VisualBasic6Parser::WS, 0);
}

tree::TerminalNode* VisualBasic6Parser::OptionCompareStmtContext::BINARY() {
  return getToken(VisualBasic6Parser::BINARY, 0);
}

tree::TerminalNode* VisualBasic6Parser::OptionCompareStmtContext::TEXT() {
  return getToken(VisualBasic6Parser::TEXT, 0);
}

VisualBasic6Parser::OptionCompareStmtContext::OptionCompareStmtContext(ModuleOptionContext *ctx) { copyFrom(ctx); }

void VisualBasic6Parser::OptionCompareStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOptionCompareStmt(this);
}
void VisualBasic6Parser::OptionCompareStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOptionCompareStmt(this);
}
VisualBasic6Parser::ModuleOptionContext* VisualBasic6Parser::moduleOption() {
  ModuleOptionContext *_localctx = _tracker.createInstance<ModuleOptionContext>(_ctx, getState());
  enterRule(_localctx, 22, VisualBasic6Parser::RuleModuleOption);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(487);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case VisualBasic6Parser::OPTION_BASE: {
        _localctx = _tracker.createInstance<VisualBasic6Parser::OptionBaseStmtContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(479);
        match(VisualBasic6Parser::OPTION_BASE);
        setState(480);
        match(VisualBasic6Parser::WS);
        setState(481);
        integerLiteral();
        break;
      }

      case VisualBasic6Parser::OPTION_COMPARE: {
        _localctx = _tracker.createInstance<VisualBasic6Parser::OptionCompareStmtContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(482);
        match(VisualBasic6Parser::OPTION_COMPARE);
        setState(483);
        match(VisualBasic6Parser::WS);
        setState(484);
        _la = _input->LA(1);
        if (!(_la == VisualBasic6Parser::BINARY || _la == VisualBasic6Parser::TEXT)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case VisualBasic6Parser::OPTION_EXPLICIT: {
        _localctx = _tracker.createInstance<VisualBasic6Parser::OptionExplicitStmtContext>(_localctx);
        enterOuterAlt(_localctx, 3);
        setState(485);
        match(VisualBasic6Parser::OPTION_EXPLICIT);
        break;
      }

      case VisualBasic6Parser::OPTION_PRIVATE_MODULE: {
        _localctx = _tracker.createInstance<VisualBasic6Parser::OptionPrivateModuleStmtContext>(_localctx);
        enterOuterAlt(_localctx, 4);
        setState(486);
        match(VisualBasic6Parser::OPTION_PRIVATE_MODULE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModuleBodyContext ------------------------------------------------------------------

VisualBasic6Parser::ModuleBodyContext::ModuleBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<VisualBasic6Parser::ModuleBodyElementContext *> VisualBasic6Parser::ModuleBodyContext::moduleBodyElement() {
  return getRuleContexts<VisualBasic6Parser::ModuleBodyElementContext>();
}

VisualBasic6Parser::ModuleBodyElementContext* VisualBasic6Parser::ModuleBodyContext::moduleBodyElement(size_t i) {
  return getRuleContext<VisualBasic6Parser::ModuleBodyElementContext>(i);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::ModuleBodyContext::NEWLINE() {
  return getTokens(VisualBasic6Parser::NEWLINE);
}

tree::TerminalNode* VisualBasic6Parser::ModuleBodyContext::NEWLINE(size_t i) {
  return getToken(VisualBasic6Parser::NEWLINE, i);
}


size_t VisualBasic6Parser::ModuleBodyContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleModuleBody;
}

void VisualBasic6Parser::ModuleBodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModuleBody(this);
}

void VisualBasic6Parser::ModuleBodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModuleBody(this);
}

VisualBasic6Parser::ModuleBodyContext* VisualBasic6Parser::moduleBody() {
  ModuleBodyContext *_localctx = _tracker.createInstance<ModuleBodyContext>(_ctx, getState());
  enterRule(_localctx, 24, VisualBasic6Parser::RuleModuleBody);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(489);
    moduleBodyElement();
    setState(498);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 35, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(491); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(490);
          match(VisualBasic6Parser::NEWLINE);
          setState(493); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (_la == VisualBasic6Parser::NEWLINE);
        setState(495);
        moduleBodyElement(); 
      }
      setState(500);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 35, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModuleBodyElementContext ------------------------------------------------------------------

VisualBasic6Parser::ModuleBodyElementContext::ModuleBodyElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

VisualBasic6Parser::ModuleBlockContext* VisualBasic6Parser::ModuleBodyElementContext::moduleBlock() {
  return getRuleContext<VisualBasic6Parser::ModuleBlockContext>(0);
}

VisualBasic6Parser::ModuleOptionContext* VisualBasic6Parser::ModuleBodyElementContext::moduleOption() {
  return getRuleContext<VisualBasic6Parser::ModuleOptionContext>(0);
}

VisualBasic6Parser::DeclareStmtContext* VisualBasic6Parser::ModuleBodyElementContext::declareStmt() {
  return getRuleContext<VisualBasic6Parser::DeclareStmtContext>(0);
}

VisualBasic6Parser::EnumerationStmtContext* VisualBasic6Parser::ModuleBodyElementContext::enumerationStmt() {
  return getRuleContext<VisualBasic6Parser::EnumerationStmtContext>(0);
}

VisualBasic6Parser::EventStmtContext* VisualBasic6Parser::ModuleBodyElementContext::eventStmt() {
  return getRuleContext<VisualBasic6Parser::EventStmtContext>(0);
}

VisualBasic6Parser::FunctionStmtContext* VisualBasic6Parser::ModuleBodyElementContext::functionStmt() {
  return getRuleContext<VisualBasic6Parser::FunctionStmtContext>(0);
}

VisualBasic6Parser::MacroIfThenElseStmtContext* VisualBasic6Parser::ModuleBodyElementContext::macroIfThenElseStmt() {
  return getRuleContext<VisualBasic6Parser::MacroIfThenElseStmtContext>(0);
}

VisualBasic6Parser::PropertyGetStmtContext* VisualBasic6Parser::ModuleBodyElementContext::propertyGetStmt() {
  return getRuleContext<VisualBasic6Parser::PropertyGetStmtContext>(0);
}

VisualBasic6Parser::PropertySetStmtContext* VisualBasic6Parser::ModuleBodyElementContext::propertySetStmt() {
  return getRuleContext<VisualBasic6Parser::PropertySetStmtContext>(0);
}

VisualBasic6Parser::PropertyLetStmtContext* VisualBasic6Parser::ModuleBodyElementContext::propertyLetStmt() {
  return getRuleContext<VisualBasic6Parser::PropertyLetStmtContext>(0);
}

VisualBasic6Parser::SubStmtContext* VisualBasic6Parser::ModuleBodyElementContext::subStmt() {
  return getRuleContext<VisualBasic6Parser::SubStmtContext>(0);
}

VisualBasic6Parser::TypeStmtContext* VisualBasic6Parser::ModuleBodyElementContext::typeStmt() {
  return getRuleContext<VisualBasic6Parser::TypeStmtContext>(0);
}


size_t VisualBasic6Parser::ModuleBodyElementContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleModuleBodyElement;
}

void VisualBasic6Parser::ModuleBodyElementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModuleBodyElement(this);
}

void VisualBasic6Parser::ModuleBodyElementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModuleBodyElement(this);
}

VisualBasic6Parser::ModuleBodyElementContext* VisualBasic6Parser::moduleBodyElement() {
  ModuleBodyElementContext *_localctx = _tracker.createInstance<ModuleBodyElementContext>(_ctx, getState());
  enterRule(_localctx, 26, VisualBasic6Parser::RuleModuleBodyElement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(513);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 36, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(501);
      moduleBlock();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(502);
      moduleOption();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(503);
      declareStmt();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(504);
      enumerationStmt();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(505);
      eventStmt();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(506);
      functionStmt();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(507);
      macroIfThenElseStmt();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(508);
      propertyGetStmt();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(509);
      propertySetStmt();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(510);
      propertyLetStmt();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(511);
      subStmt();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(512);
      typeStmt();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ControlPropertiesContext ------------------------------------------------------------------

VisualBasic6Parser::ControlPropertiesContext::ControlPropertiesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::ControlPropertiesContext::BEGIN() {
  return getToken(VisualBasic6Parser::BEGIN, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::ControlPropertiesContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::ControlPropertiesContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

VisualBasic6Parser::Cp_ControlTypeContext* VisualBasic6Parser::ControlPropertiesContext::cp_ControlType() {
  return getRuleContext<VisualBasic6Parser::Cp_ControlTypeContext>(0);
}

VisualBasic6Parser::Cp_ControlIdentifierContext* VisualBasic6Parser::ControlPropertiesContext::cp_ControlIdentifier() {
  return getRuleContext<VisualBasic6Parser::Cp_ControlIdentifierContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::ControlPropertiesContext::END() {
  return getToken(VisualBasic6Parser::END, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::ControlPropertiesContext::NEWLINE() {
  return getTokens(VisualBasic6Parser::NEWLINE);
}

tree::TerminalNode* VisualBasic6Parser::ControlPropertiesContext::NEWLINE(size_t i) {
  return getToken(VisualBasic6Parser::NEWLINE, i);
}

std::vector<VisualBasic6Parser::Cp_PropertiesContext *> VisualBasic6Parser::ControlPropertiesContext::cp_Properties() {
  return getRuleContexts<VisualBasic6Parser::Cp_PropertiesContext>();
}

VisualBasic6Parser::Cp_PropertiesContext* VisualBasic6Parser::ControlPropertiesContext::cp_Properties(size_t i) {
  return getRuleContext<VisualBasic6Parser::Cp_PropertiesContext>(i);
}


size_t VisualBasic6Parser::ControlPropertiesContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleControlProperties;
}

void VisualBasic6Parser::ControlPropertiesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterControlProperties(this);
}

void VisualBasic6Parser::ControlPropertiesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitControlProperties(this);
}

VisualBasic6Parser::ControlPropertiesContext* VisualBasic6Parser::controlProperties() {
  ControlPropertiesContext *_localctx = _tracker.createInstance<ControlPropertiesContext>(_ctx, getState());
  enterRule(_localctx, 28, VisualBasic6Parser::RuleControlProperties);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(516);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::WS) {
      setState(515);
      match(VisualBasic6Parser::WS);
    }
    setState(518);
    match(VisualBasic6Parser::BEGIN);
    setState(519);
    match(VisualBasic6Parser::WS);
    setState(520);
    cp_ControlType();
    setState(521);
    match(VisualBasic6Parser::WS);
    setState(522);
    cp_ControlIdentifier();
    setState(524);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::WS) {
      setState(523);
      match(VisualBasic6Parser::WS);
    }
    setState(527); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(526);
      match(VisualBasic6Parser::NEWLINE);
      setState(529); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == VisualBasic6Parser::NEWLINE);
    setState(532); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(531);
              cp_Properties();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(534); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 40, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(536);
    match(VisualBasic6Parser::END);
    setState(540);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 41, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(537);
        match(VisualBasic6Parser::NEWLINE); 
      }
      setState(542);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 41, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Cp_PropertiesContext ------------------------------------------------------------------

VisualBasic6Parser::Cp_PropertiesContext::Cp_PropertiesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

VisualBasic6Parser::Cp_SinglePropertyContext* VisualBasic6Parser::Cp_PropertiesContext::cp_SingleProperty() {
  return getRuleContext<VisualBasic6Parser::Cp_SinglePropertyContext>(0);
}

VisualBasic6Parser::Cp_NestedPropertyContext* VisualBasic6Parser::Cp_PropertiesContext::cp_NestedProperty() {
  return getRuleContext<VisualBasic6Parser::Cp_NestedPropertyContext>(0);
}

VisualBasic6Parser::ControlPropertiesContext* VisualBasic6Parser::Cp_PropertiesContext::controlProperties() {
  return getRuleContext<VisualBasic6Parser::ControlPropertiesContext>(0);
}


size_t VisualBasic6Parser::Cp_PropertiesContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleCp_Properties;
}

void VisualBasic6Parser::Cp_PropertiesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCp_Properties(this);
}

void VisualBasic6Parser::Cp_PropertiesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCp_Properties(this);
}

VisualBasic6Parser::Cp_PropertiesContext* VisualBasic6Parser::cp_Properties() {
  Cp_PropertiesContext *_localctx = _tracker.createInstance<Cp_PropertiesContext>(_ctx, getState());
  enterRule(_localctx, 30, VisualBasic6Parser::RuleCp_Properties);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(546);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 42, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(543);
      cp_SingleProperty();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(544);
      cp_NestedProperty();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(545);
      controlProperties();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Cp_SinglePropertyContext ------------------------------------------------------------------

VisualBasic6Parser::Cp_SinglePropertyContext::Cp_SinglePropertyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

VisualBasic6Parser::ImplicitCallStmt_InStmtContext* VisualBasic6Parser::Cp_SinglePropertyContext::implicitCallStmt_InStmt() {
  return getRuleContext<VisualBasic6Parser::ImplicitCallStmt_InStmtContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::Cp_SinglePropertyContext::EQ() {
  return getToken(VisualBasic6Parser::EQ, 0);
}

VisualBasic6Parser::Cp_PropertyValueContext* VisualBasic6Parser::Cp_SinglePropertyContext::cp_PropertyValue() {
  return getRuleContext<VisualBasic6Parser::Cp_PropertyValueContext>(0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::Cp_SinglePropertyContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::Cp_SinglePropertyContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

tree::TerminalNode* VisualBasic6Parser::Cp_SinglePropertyContext::DOLLAR() {
  return getToken(VisualBasic6Parser::DOLLAR, 0);
}

tree::TerminalNode* VisualBasic6Parser::Cp_SinglePropertyContext::FRX_OFFSET() {
  return getToken(VisualBasic6Parser::FRX_OFFSET, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::Cp_SinglePropertyContext::NEWLINE() {
  return getTokens(VisualBasic6Parser::NEWLINE);
}

tree::TerminalNode* VisualBasic6Parser::Cp_SinglePropertyContext::NEWLINE(size_t i) {
  return getToken(VisualBasic6Parser::NEWLINE, i);
}


size_t VisualBasic6Parser::Cp_SinglePropertyContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleCp_SingleProperty;
}

void VisualBasic6Parser::Cp_SinglePropertyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCp_SingleProperty(this);
}

void VisualBasic6Parser::Cp_SinglePropertyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCp_SingleProperty(this);
}

VisualBasic6Parser::Cp_SinglePropertyContext* VisualBasic6Parser::cp_SingleProperty() {
  Cp_SinglePropertyContext *_localctx = _tracker.createInstance<Cp_SinglePropertyContext>(_ctx, getState());
  enterRule(_localctx, 32, VisualBasic6Parser::RuleCp_SingleProperty);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(549);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 43, _ctx)) {
    case 1: {
      setState(548);
      match(VisualBasic6Parser::WS);
      break;
    }

    default:
      break;
    }
    setState(551);
    implicitCallStmt_InStmt();
    setState(553);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::WS) {
      setState(552);
      match(VisualBasic6Parser::WS);
    }
    setState(555);
    match(VisualBasic6Parser::EQ);
    setState(557);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::WS) {
      setState(556);
      match(VisualBasic6Parser::WS);
    }
    setState(560);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 46, _ctx)) {
    case 1: {
      setState(559);
      match(VisualBasic6Parser::DOLLAR);
      break;
    }

    default:
      break;
    }
    setState(562);
    cp_PropertyValue();
    setState(564);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::FRX_OFFSET) {
      setState(563);
      match(VisualBasic6Parser::FRX_OFFSET);
    }
    setState(567); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(566);
      match(VisualBasic6Parser::NEWLINE);
      setState(569); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == VisualBasic6Parser::NEWLINE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Cp_PropertyNameContext ------------------------------------------------------------------

VisualBasic6Parser::Cp_PropertyNameContext::Cp_PropertyNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<VisualBasic6Parser::AmbiguousIdentifierContext *> VisualBasic6Parser::Cp_PropertyNameContext::ambiguousIdentifier() {
  return getRuleContexts<VisualBasic6Parser::AmbiguousIdentifierContext>();
}

VisualBasic6Parser::AmbiguousIdentifierContext* VisualBasic6Parser::Cp_PropertyNameContext::ambiguousIdentifier(size_t i) {
  return getRuleContext<VisualBasic6Parser::AmbiguousIdentifierContext>(i);
}

tree::TerminalNode* VisualBasic6Parser::Cp_PropertyNameContext::OBJECT() {
  return getToken(VisualBasic6Parser::OBJECT, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::Cp_PropertyNameContext::DOT() {
  return getTokens(VisualBasic6Parser::DOT);
}

tree::TerminalNode* VisualBasic6Parser::Cp_PropertyNameContext::DOT(size_t i) {
  return getToken(VisualBasic6Parser::DOT, i);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::Cp_PropertyNameContext::LPAREN() {
  return getTokens(VisualBasic6Parser::LPAREN);
}

tree::TerminalNode* VisualBasic6Parser::Cp_PropertyNameContext::LPAREN(size_t i) {
  return getToken(VisualBasic6Parser::LPAREN, i);
}

std::vector<VisualBasic6Parser::LiteralContext *> VisualBasic6Parser::Cp_PropertyNameContext::literal() {
  return getRuleContexts<VisualBasic6Parser::LiteralContext>();
}

VisualBasic6Parser::LiteralContext* VisualBasic6Parser::Cp_PropertyNameContext::literal(size_t i) {
  return getRuleContext<VisualBasic6Parser::LiteralContext>(i);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::Cp_PropertyNameContext::RPAREN() {
  return getTokens(VisualBasic6Parser::RPAREN);
}

tree::TerminalNode* VisualBasic6Parser::Cp_PropertyNameContext::RPAREN(size_t i) {
  return getToken(VisualBasic6Parser::RPAREN, i);
}


size_t VisualBasic6Parser::Cp_PropertyNameContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleCp_PropertyName;
}

void VisualBasic6Parser::Cp_PropertyNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCp_PropertyName(this);
}

void VisualBasic6Parser::Cp_PropertyNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCp_PropertyName(this);
}

VisualBasic6Parser::Cp_PropertyNameContext* VisualBasic6Parser::cp_PropertyName() {
  Cp_PropertyNameContext *_localctx = _tracker.createInstance<Cp_PropertyNameContext>(_ctx, getState());
  enterRule(_localctx, 34, VisualBasic6Parser::RuleCp_PropertyName);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(573);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 49, _ctx)) {
    case 1: {
      setState(571);
      match(VisualBasic6Parser::OBJECT);
      setState(572);
      match(VisualBasic6Parser::DOT);
      break;
    }

    default:
      break;
    }
    setState(575);
    ambiguousIdentifier();
    setState(580);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::LPAREN) {
      setState(576);
      match(VisualBasic6Parser::LPAREN);
      setState(577);
      literal();
      setState(578);
      match(VisualBasic6Parser::RPAREN);
    }
    setState(592);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == VisualBasic6Parser::DOT) {
      setState(582);
      match(VisualBasic6Parser::DOT);
      setState(583);
      ambiguousIdentifier();
      setState(588);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == VisualBasic6Parser::LPAREN) {
        setState(584);
        match(VisualBasic6Parser::LPAREN);
        setState(585);
        literal();
        setState(586);
        match(VisualBasic6Parser::RPAREN);
      }
      setState(594);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Cp_PropertyValueContext ------------------------------------------------------------------

VisualBasic6Parser::Cp_PropertyValueContext::Cp_PropertyValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

VisualBasic6Parser::LiteralContext* VisualBasic6Parser::Cp_PropertyValueContext::literal() {
  return getRuleContext<VisualBasic6Parser::LiteralContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::Cp_PropertyValueContext::POW() {
  return getToken(VisualBasic6Parser::POW, 0);
}

VisualBasic6Parser::AmbiguousIdentifierContext* VisualBasic6Parser::Cp_PropertyValueContext::ambiguousIdentifier() {
  return getRuleContext<VisualBasic6Parser::AmbiguousIdentifierContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::Cp_PropertyValueContext::DOLLAR() {
  return getToken(VisualBasic6Parser::DOLLAR, 0);
}

tree::TerminalNode* VisualBasic6Parser::Cp_PropertyValueContext::LBRACE() {
  return getToken(VisualBasic6Parser::LBRACE, 0);
}

tree::TerminalNode* VisualBasic6Parser::Cp_PropertyValueContext::RBRACE() {
  return getToken(VisualBasic6Parser::RBRACE, 0);
}


size_t VisualBasic6Parser::Cp_PropertyValueContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleCp_PropertyValue;
}

void VisualBasic6Parser::Cp_PropertyValueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCp_PropertyValue(this);
}

void VisualBasic6Parser::Cp_PropertyValueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCp_PropertyValue(this);
}

VisualBasic6Parser::Cp_PropertyValueContext* VisualBasic6Parser::cp_PropertyValue() {
  Cp_PropertyValueContext *_localctx = _tracker.createInstance<Cp_PropertyValueContext>(_ctx, getState());
  enterRule(_localctx, 36, VisualBasic6Parser::RuleCp_PropertyValue);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(596);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::DOLLAR) {
      setState(595);
      match(VisualBasic6Parser::DOLLAR);
    }
    setState(605);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case VisualBasic6Parser::FALSE:
      case VisualBasic6Parser::NOTHING:
      case VisualBasic6Parser::NULL_:
      case VisualBasic6Parser::TRUE:
      case VisualBasic6Parser::MINUS:
      case VisualBasic6Parser::PLUS:
      case VisualBasic6Parser::STRINGLITERAL:
      case VisualBasic6Parser::DATELITERAL:
      case VisualBasic6Parser::COLORLITERAL:
      case VisualBasic6Parser::INTEGERLITERAL:
      case VisualBasic6Parser::DOUBLELITERAL:
      case VisualBasic6Parser::FILENUMBER:
      case VisualBasic6Parser::OCTALLITERAL: {
        setState(598);
        literal();
        break;
      }

      case VisualBasic6Parser::LBRACE: {
        setState(599);
        match(VisualBasic6Parser::LBRACE);
        setState(600);
        ambiguousIdentifier();
        setState(601);
        match(VisualBasic6Parser::RBRACE);
        break;
      }

      case VisualBasic6Parser::POW: {
        setState(603);
        match(VisualBasic6Parser::POW);
        setState(604);
        ambiguousIdentifier();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Cp_NestedPropertyContext ------------------------------------------------------------------

VisualBasic6Parser::Cp_NestedPropertyContext::Cp_NestedPropertyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::Cp_NestedPropertyContext::BEGINPROPERTY() {
  return getToken(VisualBasic6Parser::BEGINPROPERTY, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::Cp_NestedPropertyContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::Cp_NestedPropertyContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

VisualBasic6Parser::AmbiguousIdentifierContext* VisualBasic6Parser::Cp_NestedPropertyContext::ambiguousIdentifier() {
  return getRuleContext<VisualBasic6Parser::AmbiguousIdentifierContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::Cp_NestedPropertyContext::ENDPROPERTY() {
  return getToken(VisualBasic6Parser::ENDPROPERTY, 0);
}

tree::TerminalNode* VisualBasic6Parser::Cp_NestedPropertyContext::LPAREN() {
  return getToken(VisualBasic6Parser::LPAREN, 0);
}

VisualBasic6Parser::IntegerLiteralContext* VisualBasic6Parser::Cp_NestedPropertyContext::integerLiteral() {
  return getRuleContext<VisualBasic6Parser::IntegerLiteralContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::Cp_NestedPropertyContext::RPAREN() {
  return getToken(VisualBasic6Parser::RPAREN, 0);
}

tree::TerminalNode* VisualBasic6Parser::Cp_NestedPropertyContext::GUID() {
  return getToken(VisualBasic6Parser::GUID, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::Cp_NestedPropertyContext::NEWLINE() {
  return getTokens(VisualBasic6Parser::NEWLINE);
}

tree::TerminalNode* VisualBasic6Parser::Cp_NestedPropertyContext::NEWLINE(size_t i) {
  return getToken(VisualBasic6Parser::NEWLINE, i);
}

std::vector<VisualBasic6Parser::Cp_PropertiesContext *> VisualBasic6Parser::Cp_NestedPropertyContext::cp_Properties() {
  return getRuleContexts<VisualBasic6Parser::Cp_PropertiesContext>();
}

VisualBasic6Parser::Cp_PropertiesContext* VisualBasic6Parser::Cp_NestedPropertyContext::cp_Properties(size_t i) {
  return getRuleContext<VisualBasic6Parser::Cp_PropertiesContext>(i);
}


size_t VisualBasic6Parser::Cp_NestedPropertyContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleCp_NestedProperty;
}

void VisualBasic6Parser::Cp_NestedPropertyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCp_NestedProperty(this);
}

void VisualBasic6Parser::Cp_NestedPropertyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCp_NestedProperty(this);
}

VisualBasic6Parser::Cp_NestedPropertyContext* VisualBasic6Parser::cp_NestedProperty() {
  Cp_NestedPropertyContext *_localctx = _tracker.createInstance<Cp_NestedPropertyContext>(_ctx, getState());
  enterRule(_localctx, 38, VisualBasic6Parser::RuleCp_NestedProperty);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(608);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::WS) {
      setState(607);
      match(VisualBasic6Parser::WS);
    }
    setState(610);
    match(VisualBasic6Parser::BEGINPROPERTY);
    setState(611);
    match(VisualBasic6Parser::WS);
    setState(612);
    ambiguousIdentifier();
    setState(617);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::LPAREN) {
      setState(613);
      match(VisualBasic6Parser::LPAREN);
      setState(614);
      integerLiteral();
      setState(615);
      match(VisualBasic6Parser::RPAREN);
    }
    setState(621);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::WS) {
      setState(619);
      match(VisualBasic6Parser::WS);
      setState(620);
      match(VisualBasic6Parser::GUID);
    }
    setState(624); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(623);
      match(VisualBasic6Parser::NEWLINE);
      setState(626); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == VisualBasic6Parser::NEWLINE);
    setState(633);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2251870182429425662) != 0) || ((((_la - 66) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 66)) & -8087550153692545025) != 0) || ((((_la - 130) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 130)) & 360569445166350303) != 0) || ((((_la - 207) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 207)) & 34817) != 0)) {
      setState(629); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(628);
        cp_Properties();
        setState(631); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 2251870182429425662) != 0) || ((((_la - 66) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 66)) & -8087550153692545025) != 0) || ((((_la - 130) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 130)) & 360569445166350303) != 0) || ((((_la - 207) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 207)) & 34817) != 0));
    }
    setState(635);
    match(VisualBasic6Parser::ENDPROPERTY);
    setState(637); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(636);
      match(VisualBasic6Parser::NEWLINE);
      setState(639); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == VisualBasic6Parser::NEWLINE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Cp_ControlTypeContext ------------------------------------------------------------------

VisualBasic6Parser::Cp_ControlTypeContext::Cp_ControlTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

VisualBasic6Parser::ComplexTypeContext* VisualBasic6Parser::Cp_ControlTypeContext::complexType() {
  return getRuleContext<VisualBasic6Parser::ComplexTypeContext>(0);
}


size_t VisualBasic6Parser::Cp_ControlTypeContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleCp_ControlType;
}

void VisualBasic6Parser::Cp_ControlTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCp_ControlType(this);
}

void VisualBasic6Parser::Cp_ControlTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCp_ControlType(this);
}

VisualBasic6Parser::Cp_ControlTypeContext* VisualBasic6Parser::cp_ControlType() {
  Cp_ControlTypeContext *_localctx = _tracker.createInstance<Cp_ControlTypeContext>(_ctx, getState());
  enterRule(_localctx, 40, VisualBasic6Parser::RuleCp_ControlType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(641);
    complexType();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Cp_ControlIdentifierContext ------------------------------------------------------------------

VisualBasic6Parser::Cp_ControlIdentifierContext::Cp_ControlIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

VisualBasic6Parser::AmbiguousIdentifierContext* VisualBasic6Parser::Cp_ControlIdentifierContext::ambiguousIdentifier() {
  return getRuleContext<VisualBasic6Parser::AmbiguousIdentifierContext>(0);
}


size_t VisualBasic6Parser::Cp_ControlIdentifierContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleCp_ControlIdentifier;
}

void VisualBasic6Parser::Cp_ControlIdentifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCp_ControlIdentifier(this);
}

void VisualBasic6Parser::Cp_ControlIdentifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCp_ControlIdentifier(this);
}

VisualBasic6Parser::Cp_ControlIdentifierContext* VisualBasic6Parser::cp_ControlIdentifier() {
  Cp_ControlIdentifierContext *_localctx = _tracker.createInstance<Cp_ControlIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 42, VisualBasic6Parser::RuleCp_ControlIdentifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(643);
    ambiguousIdentifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModuleBlockContext ------------------------------------------------------------------

VisualBasic6Parser::ModuleBlockContext::ModuleBlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

VisualBasic6Parser::BlockContext* VisualBasic6Parser::ModuleBlockContext::block() {
  return getRuleContext<VisualBasic6Parser::BlockContext>(0);
}


size_t VisualBasic6Parser::ModuleBlockContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleModuleBlock;
}

void VisualBasic6Parser::ModuleBlockContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModuleBlock(this);
}

void VisualBasic6Parser::ModuleBlockContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModuleBlock(this);
}

VisualBasic6Parser::ModuleBlockContext* VisualBasic6Parser::moduleBlock() {
  ModuleBlockContext *_localctx = _tracker.createInstance<ModuleBlockContext>(_ctx, getState());
  enterRule(_localctx, 44, VisualBasic6Parser::RuleModuleBlock);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(645);
    block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AttributeStmtContext ------------------------------------------------------------------

VisualBasic6Parser::AttributeStmtContext::AttributeStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::AttributeStmtContext::ATTRIBUTE() {
  return getToken(VisualBasic6Parser::ATTRIBUTE, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::AttributeStmtContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::AttributeStmtContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

VisualBasic6Parser::ImplicitCallStmt_InStmtContext* VisualBasic6Parser::AttributeStmtContext::implicitCallStmt_InStmt() {
  return getRuleContext<VisualBasic6Parser::ImplicitCallStmt_InStmtContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::AttributeStmtContext::EQ() {
  return getToken(VisualBasic6Parser::EQ, 0);
}

std::vector<VisualBasic6Parser::LiteralContext *> VisualBasic6Parser::AttributeStmtContext::literal() {
  return getRuleContexts<VisualBasic6Parser::LiteralContext>();
}

VisualBasic6Parser::LiteralContext* VisualBasic6Parser::AttributeStmtContext::literal(size_t i) {
  return getRuleContext<VisualBasic6Parser::LiteralContext>(i);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::AttributeStmtContext::COMMA() {
  return getTokens(VisualBasic6Parser::COMMA);
}

tree::TerminalNode* VisualBasic6Parser::AttributeStmtContext::COMMA(size_t i) {
  return getToken(VisualBasic6Parser::COMMA, i);
}


size_t VisualBasic6Parser::AttributeStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleAttributeStmt;
}

void VisualBasic6Parser::AttributeStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAttributeStmt(this);
}

void VisualBasic6Parser::AttributeStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAttributeStmt(this);
}

VisualBasic6Parser::AttributeStmtContext* VisualBasic6Parser::attributeStmt() {
  AttributeStmtContext *_localctx = _tracker.createInstance<AttributeStmtContext>(_ctx, getState());
  enterRule(_localctx, 46, VisualBasic6Parser::RuleAttributeStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(647);
    match(VisualBasic6Parser::ATTRIBUTE);
    setState(648);
    match(VisualBasic6Parser::WS);
    setState(649);
    implicitCallStmt_InStmt();
    setState(651);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::WS) {
      setState(650);
      match(VisualBasic6Parser::WS);
    }
    setState(653);
    match(VisualBasic6Parser::EQ);
    setState(655);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::WS) {
      setState(654);
      match(VisualBasic6Parser::WS);
    }
    setState(657);
    literal();
    setState(668);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 66, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(659);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == VisualBasic6Parser::WS) {
          setState(658);
          match(VisualBasic6Parser::WS);
        }
        setState(661);
        match(VisualBasic6Parser::COMMA);
        setState(663);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == VisualBasic6Parser::WS) {
          setState(662);
          match(VisualBasic6Parser::WS);
        }
        setState(665);
        literal(); 
      }
      setState(670);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 66, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlockContext ------------------------------------------------------------------

VisualBasic6Parser::BlockContext::BlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<VisualBasic6Parser::BlockStmtContext *> VisualBasic6Parser::BlockContext::blockStmt() {
  return getRuleContexts<VisualBasic6Parser::BlockStmtContext>();
}

VisualBasic6Parser::BlockStmtContext* VisualBasic6Parser::BlockContext::blockStmt(size_t i) {
  return getRuleContext<VisualBasic6Parser::BlockStmtContext>(i);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::BlockContext::NEWLINE() {
  return getTokens(VisualBasic6Parser::NEWLINE);
}

tree::TerminalNode* VisualBasic6Parser::BlockContext::NEWLINE(size_t i) {
  return getToken(VisualBasic6Parser::NEWLINE, i);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::BlockContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::BlockContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}


size_t VisualBasic6Parser::BlockContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleBlock;
}

void VisualBasic6Parser::BlockContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBlock(this);
}

void VisualBasic6Parser::BlockContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBlock(this);
}

VisualBasic6Parser::BlockContext* VisualBasic6Parser::block() {
  BlockContext *_localctx = _tracker.createInstance<BlockContext>(_ctx, getState());
  enterRule(_localctx, 48, VisualBasic6Parser::RuleBlock);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(671);
    blockStmt();
    setState(683);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 69, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(673); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(672);
          match(VisualBasic6Parser::NEWLINE);
          setState(675); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (_la == VisualBasic6Parser::NEWLINE);
        setState(678);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 68, _ctx)) {
        case 1: {
          setState(677);
          match(VisualBasic6Parser::WS);
          break;
        }

        default:
          break;
        }
        setState(680);
        blockStmt(); 
      }
      setState(685);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 69, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlockStmtContext ------------------------------------------------------------------

VisualBasic6Parser::BlockStmtContext::BlockStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

VisualBasic6Parser::AppActivateStmtContext* VisualBasic6Parser::BlockStmtContext::appActivateStmt() {
  return getRuleContext<VisualBasic6Parser::AppActivateStmtContext>(0);
}

VisualBasic6Parser::AttributeStmtContext* VisualBasic6Parser::BlockStmtContext::attributeStmt() {
  return getRuleContext<VisualBasic6Parser::AttributeStmtContext>(0);
}

VisualBasic6Parser::BeepStmtContext* VisualBasic6Parser::BlockStmtContext::beepStmt() {
  return getRuleContext<VisualBasic6Parser::BeepStmtContext>(0);
}

VisualBasic6Parser::ChDirStmtContext* VisualBasic6Parser::BlockStmtContext::chDirStmt() {
  return getRuleContext<VisualBasic6Parser::ChDirStmtContext>(0);
}

VisualBasic6Parser::ChDriveStmtContext* VisualBasic6Parser::BlockStmtContext::chDriveStmt() {
  return getRuleContext<VisualBasic6Parser::ChDriveStmtContext>(0);
}

VisualBasic6Parser::CloseStmtContext* VisualBasic6Parser::BlockStmtContext::closeStmt() {
  return getRuleContext<VisualBasic6Parser::CloseStmtContext>(0);
}

VisualBasic6Parser::ConstStmtContext* VisualBasic6Parser::BlockStmtContext::constStmt() {
  return getRuleContext<VisualBasic6Parser::ConstStmtContext>(0);
}

VisualBasic6Parser::DateStmtContext* VisualBasic6Parser::BlockStmtContext::dateStmt() {
  return getRuleContext<VisualBasic6Parser::DateStmtContext>(0);
}

VisualBasic6Parser::DeleteSettingStmtContext* VisualBasic6Parser::BlockStmtContext::deleteSettingStmt() {
  return getRuleContext<VisualBasic6Parser::DeleteSettingStmtContext>(0);
}

VisualBasic6Parser::DeftypeStmtContext* VisualBasic6Parser::BlockStmtContext::deftypeStmt() {
  return getRuleContext<VisualBasic6Parser::DeftypeStmtContext>(0);
}

VisualBasic6Parser::DoLoopStmtContext* VisualBasic6Parser::BlockStmtContext::doLoopStmt() {
  return getRuleContext<VisualBasic6Parser::DoLoopStmtContext>(0);
}

VisualBasic6Parser::EndStmtContext* VisualBasic6Parser::BlockStmtContext::endStmt() {
  return getRuleContext<VisualBasic6Parser::EndStmtContext>(0);
}

VisualBasic6Parser::EraseStmtContext* VisualBasic6Parser::BlockStmtContext::eraseStmt() {
  return getRuleContext<VisualBasic6Parser::EraseStmtContext>(0);
}

VisualBasic6Parser::ErrorStmtContext* VisualBasic6Parser::BlockStmtContext::errorStmt() {
  return getRuleContext<VisualBasic6Parser::ErrorStmtContext>(0);
}

VisualBasic6Parser::ExitStmtContext* VisualBasic6Parser::BlockStmtContext::exitStmt() {
  return getRuleContext<VisualBasic6Parser::ExitStmtContext>(0);
}

VisualBasic6Parser::ExplicitCallStmtContext* VisualBasic6Parser::BlockStmtContext::explicitCallStmt() {
  return getRuleContext<VisualBasic6Parser::ExplicitCallStmtContext>(0);
}

VisualBasic6Parser::FilecopyStmtContext* VisualBasic6Parser::BlockStmtContext::filecopyStmt() {
  return getRuleContext<VisualBasic6Parser::FilecopyStmtContext>(0);
}

VisualBasic6Parser::ForEachStmtContext* VisualBasic6Parser::BlockStmtContext::forEachStmt() {
  return getRuleContext<VisualBasic6Parser::ForEachStmtContext>(0);
}

VisualBasic6Parser::ForNextStmtContext* VisualBasic6Parser::BlockStmtContext::forNextStmt() {
  return getRuleContext<VisualBasic6Parser::ForNextStmtContext>(0);
}

VisualBasic6Parser::GetStmtContext* VisualBasic6Parser::BlockStmtContext::getStmt() {
  return getRuleContext<VisualBasic6Parser::GetStmtContext>(0);
}

VisualBasic6Parser::GoSubStmtContext* VisualBasic6Parser::BlockStmtContext::goSubStmt() {
  return getRuleContext<VisualBasic6Parser::GoSubStmtContext>(0);
}

VisualBasic6Parser::GoToStmtContext* VisualBasic6Parser::BlockStmtContext::goToStmt() {
  return getRuleContext<VisualBasic6Parser::GoToStmtContext>(0);
}

VisualBasic6Parser::IfThenElseStmtContext* VisualBasic6Parser::BlockStmtContext::ifThenElseStmt() {
  return getRuleContext<VisualBasic6Parser::IfThenElseStmtContext>(0);
}

VisualBasic6Parser::ImplementsStmtContext* VisualBasic6Parser::BlockStmtContext::implementsStmt() {
  return getRuleContext<VisualBasic6Parser::ImplementsStmtContext>(0);
}

VisualBasic6Parser::InputStmtContext* VisualBasic6Parser::BlockStmtContext::inputStmt() {
  return getRuleContext<VisualBasic6Parser::InputStmtContext>(0);
}

VisualBasic6Parser::KillStmtContext* VisualBasic6Parser::BlockStmtContext::killStmt() {
  return getRuleContext<VisualBasic6Parser::KillStmtContext>(0);
}

VisualBasic6Parser::LetStmtContext* VisualBasic6Parser::BlockStmtContext::letStmt() {
  return getRuleContext<VisualBasic6Parser::LetStmtContext>(0);
}

VisualBasic6Parser::LineInputStmtContext* VisualBasic6Parser::BlockStmtContext::lineInputStmt() {
  return getRuleContext<VisualBasic6Parser::LineInputStmtContext>(0);
}

VisualBasic6Parser::LineLabelContext* VisualBasic6Parser::BlockStmtContext::lineLabel() {
  return getRuleContext<VisualBasic6Parser::LineLabelContext>(0);
}

VisualBasic6Parser::LoadStmtContext* VisualBasic6Parser::BlockStmtContext::loadStmt() {
  return getRuleContext<VisualBasic6Parser::LoadStmtContext>(0);
}

VisualBasic6Parser::LockStmtContext* VisualBasic6Parser::BlockStmtContext::lockStmt() {
  return getRuleContext<VisualBasic6Parser::LockStmtContext>(0);
}

VisualBasic6Parser::LsetStmtContext* VisualBasic6Parser::BlockStmtContext::lsetStmt() {
  return getRuleContext<VisualBasic6Parser::LsetStmtContext>(0);
}

VisualBasic6Parser::MacroIfThenElseStmtContext* VisualBasic6Parser::BlockStmtContext::macroIfThenElseStmt() {
  return getRuleContext<VisualBasic6Parser::MacroIfThenElseStmtContext>(0);
}

VisualBasic6Parser::MidStmtContext* VisualBasic6Parser::BlockStmtContext::midStmt() {
  return getRuleContext<VisualBasic6Parser::MidStmtContext>(0);
}

VisualBasic6Parser::MkdirStmtContext* VisualBasic6Parser::BlockStmtContext::mkdirStmt() {
  return getRuleContext<VisualBasic6Parser::MkdirStmtContext>(0);
}

VisualBasic6Parser::NameStmtContext* VisualBasic6Parser::BlockStmtContext::nameStmt() {
  return getRuleContext<VisualBasic6Parser::NameStmtContext>(0);
}

VisualBasic6Parser::OnErrorStmtContext* VisualBasic6Parser::BlockStmtContext::onErrorStmt() {
  return getRuleContext<VisualBasic6Parser::OnErrorStmtContext>(0);
}

VisualBasic6Parser::OnGoToStmtContext* VisualBasic6Parser::BlockStmtContext::onGoToStmt() {
  return getRuleContext<VisualBasic6Parser::OnGoToStmtContext>(0);
}

VisualBasic6Parser::OnGoSubStmtContext* VisualBasic6Parser::BlockStmtContext::onGoSubStmt() {
  return getRuleContext<VisualBasic6Parser::OnGoSubStmtContext>(0);
}

VisualBasic6Parser::OpenStmtContext* VisualBasic6Parser::BlockStmtContext::openStmt() {
  return getRuleContext<VisualBasic6Parser::OpenStmtContext>(0);
}

VisualBasic6Parser::PrintStmtContext* VisualBasic6Parser::BlockStmtContext::printStmt() {
  return getRuleContext<VisualBasic6Parser::PrintStmtContext>(0);
}

VisualBasic6Parser::PutStmtContext* VisualBasic6Parser::BlockStmtContext::putStmt() {
  return getRuleContext<VisualBasic6Parser::PutStmtContext>(0);
}

VisualBasic6Parser::RaiseEventStmtContext* VisualBasic6Parser::BlockStmtContext::raiseEventStmt() {
  return getRuleContext<VisualBasic6Parser::RaiseEventStmtContext>(0);
}

VisualBasic6Parser::RandomizeStmtContext* VisualBasic6Parser::BlockStmtContext::randomizeStmt() {
  return getRuleContext<VisualBasic6Parser::RandomizeStmtContext>(0);
}

VisualBasic6Parser::RedimStmtContext* VisualBasic6Parser::BlockStmtContext::redimStmt() {
  return getRuleContext<VisualBasic6Parser::RedimStmtContext>(0);
}

VisualBasic6Parser::ResetStmtContext* VisualBasic6Parser::BlockStmtContext::resetStmt() {
  return getRuleContext<VisualBasic6Parser::ResetStmtContext>(0);
}

VisualBasic6Parser::ResumeStmtContext* VisualBasic6Parser::BlockStmtContext::resumeStmt() {
  return getRuleContext<VisualBasic6Parser::ResumeStmtContext>(0);
}

VisualBasic6Parser::ReturnStmtContext* VisualBasic6Parser::BlockStmtContext::returnStmt() {
  return getRuleContext<VisualBasic6Parser::ReturnStmtContext>(0);
}

VisualBasic6Parser::RmdirStmtContext* VisualBasic6Parser::BlockStmtContext::rmdirStmt() {
  return getRuleContext<VisualBasic6Parser::RmdirStmtContext>(0);
}

VisualBasic6Parser::RsetStmtContext* VisualBasic6Parser::BlockStmtContext::rsetStmt() {
  return getRuleContext<VisualBasic6Parser::RsetStmtContext>(0);
}

VisualBasic6Parser::SavepictureStmtContext* VisualBasic6Parser::BlockStmtContext::savepictureStmt() {
  return getRuleContext<VisualBasic6Parser::SavepictureStmtContext>(0);
}

VisualBasic6Parser::SaveSettingStmtContext* VisualBasic6Parser::BlockStmtContext::saveSettingStmt() {
  return getRuleContext<VisualBasic6Parser::SaveSettingStmtContext>(0);
}

VisualBasic6Parser::SeekStmtContext* VisualBasic6Parser::BlockStmtContext::seekStmt() {
  return getRuleContext<VisualBasic6Parser::SeekStmtContext>(0);
}

VisualBasic6Parser::SelectCaseStmtContext* VisualBasic6Parser::BlockStmtContext::selectCaseStmt() {
  return getRuleContext<VisualBasic6Parser::SelectCaseStmtContext>(0);
}

VisualBasic6Parser::SendkeysStmtContext* VisualBasic6Parser::BlockStmtContext::sendkeysStmt() {
  return getRuleContext<VisualBasic6Parser::SendkeysStmtContext>(0);
}

VisualBasic6Parser::SetattrStmtContext* VisualBasic6Parser::BlockStmtContext::setattrStmt() {
  return getRuleContext<VisualBasic6Parser::SetattrStmtContext>(0);
}

VisualBasic6Parser::SetStmtContext* VisualBasic6Parser::BlockStmtContext::setStmt() {
  return getRuleContext<VisualBasic6Parser::SetStmtContext>(0);
}

VisualBasic6Parser::StopStmtContext* VisualBasic6Parser::BlockStmtContext::stopStmt() {
  return getRuleContext<VisualBasic6Parser::StopStmtContext>(0);
}

VisualBasic6Parser::TimeStmtContext* VisualBasic6Parser::BlockStmtContext::timeStmt() {
  return getRuleContext<VisualBasic6Parser::TimeStmtContext>(0);
}

VisualBasic6Parser::UnloadStmtContext* VisualBasic6Parser::BlockStmtContext::unloadStmt() {
  return getRuleContext<VisualBasic6Parser::UnloadStmtContext>(0);
}

VisualBasic6Parser::UnlockStmtContext* VisualBasic6Parser::BlockStmtContext::unlockStmt() {
  return getRuleContext<VisualBasic6Parser::UnlockStmtContext>(0);
}

VisualBasic6Parser::VariableStmtContext* VisualBasic6Parser::BlockStmtContext::variableStmt() {
  return getRuleContext<VisualBasic6Parser::VariableStmtContext>(0);
}

VisualBasic6Parser::WhileWendStmtContext* VisualBasic6Parser::BlockStmtContext::whileWendStmt() {
  return getRuleContext<VisualBasic6Parser::WhileWendStmtContext>(0);
}

VisualBasic6Parser::WidthStmtContext* VisualBasic6Parser::BlockStmtContext::widthStmt() {
  return getRuleContext<VisualBasic6Parser::WidthStmtContext>(0);
}

VisualBasic6Parser::WithStmtContext* VisualBasic6Parser::BlockStmtContext::withStmt() {
  return getRuleContext<VisualBasic6Parser::WithStmtContext>(0);
}

VisualBasic6Parser::WriteStmtContext* VisualBasic6Parser::BlockStmtContext::writeStmt() {
  return getRuleContext<VisualBasic6Parser::WriteStmtContext>(0);
}

VisualBasic6Parser::ImplicitCallStmt_InBlockContext* VisualBasic6Parser::BlockStmtContext::implicitCallStmt_InBlock() {
  return getRuleContext<VisualBasic6Parser::ImplicitCallStmt_InBlockContext>(0);
}


size_t VisualBasic6Parser::BlockStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleBlockStmt;
}

void VisualBasic6Parser::BlockStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBlockStmt(this);
}

void VisualBasic6Parser::BlockStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBlockStmt(this);
}

VisualBasic6Parser::BlockStmtContext* VisualBasic6Parser::blockStmt() {
  BlockStmtContext *_localctx = _tracker.createInstance<BlockStmtContext>(_ctx, getState());
  enterRule(_localctx, 50, VisualBasic6Parser::RuleBlockStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(753);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 70, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(686);
      appActivateStmt();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(687);
      attributeStmt();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(688);
      beepStmt();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(689);
      chDirStmt();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(690);
      chDriveStmt();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(691);
      closeStmt();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(692);
      constStmt();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(693);
      dateStmt();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(694);
      deleteSettingStmt();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(695);
      deftypeStmt();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(696);
      doLoopStmt();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(697);
      endStmt();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(698);
      eraseStmt();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(699);
      errorStmt();
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(700);
      exitStmt();
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(701);
      explicitCallStmt();
      break;
    }

    case 17: {
      enterOuterAlt(_localctx, 17);
      setState(702);
      filecopyStmt();
      break;
    }

    case 18: {
      enterOuterAlt(_localctx, 18);
      setState(703);
      forEachStmt();
      break;
    }

    case 19: {
      enterOuterAlt(_localctx, 19);
      setState(704);
      forNextStmt();
      break;
    }

    case 20: {
      enterOuterAlt(_localctx, 20);
      setState(705);
      getStmt();
      break;
    }

    case 21: {
      enterOuterAlt(_localctx, 21);
      setState(706);
      goSubStmt();
      break;
    }

    case 22: {
      enterOuterAlt(_localctx, 22);
      setState(707);
      goToStmt();
      break;
    }

    case 23: {
      enterOuterAlt(_localctx, 23);
      setState(708);
      ifThenElseStmt();
      break;
    }

    case 24: {
      enterOuterAlt(_localctx, 24);
      setState(709);
      implementsStmt();
      break;
    }

    case 25: {
      enterOuterAlt(_localctx, 25);
      setState(710);
      inputStmt();
      break;
    }

    case 26: {
      enterOuterAlt(_localctx, 26);
      setState(711);
      killStmt();
      break;
    }

    case 27: {
      enterOuterAlt(_localctx, 27);
      setState(712);
      letStmt();
      break;
    }

    case 28: {
      enterOuterAlt(_localctx, 28);
      setState(713);
      lineInputStmt();
      break;
    }

    case 29: {
      enterOuterAlt(_localctx, 29);
      setState(714);
      lineLabel();
      break;
    }

    case 30: {
      enterOuterAlt(_localctx, 30);
      setState(715);
      loadStmt();
      break;
    }

    case 31: {
      enterOuterAlt(_localctx, 31);
      setState(716);
      lockStmt();
      break;
    }

    case 32: {
      enterOuterAlt(_localctx, 32);
      setState(717);
      lsetStmt();
      break;
    }

    case 33: {
      enterOuterAlt(_localctx, 33);
      setState(718);
      macroIfThenElseStmt();
      break;
    }

    case 34: {
      enterOuterAlt(_localctx, 34);
      setState(719);
      midStmt();
      break;
    }

    case 35: {
      enterOuterAlt(_localctx, 35);
      setState(720);
      mkdirStmt();
      break;
    }

    case 36: {
      enterOuterAlt(_localctx, 36);
      setState(721);
      nameStmt();
      break;
    }

    case 37: {
      enterOuterAlt(_localctx, 37);
      setState(722);
      onErrorStmt();
      break;
    }

    case 38: {
      enterOuterAlt(_localctx, 38);
      setState(723);
      onGoToStmt();
      break;
    }

    case 39: {
      enterOuterAlt(_localctx, 39);
      setState(724);
      onGoSubStmt();
      break;
    }

    case 40: {
      enterOuterAlt(_localctx, 40);
      setState(725);
      openStmt();
      break;
    }

    case 41: {
      enterOuterAlt(_localctx, 41);
      setState(726);
      printStmt();
      break;
    }

    case 42: {
      enterOuterAlt(_localctx, 42);
      setState(727);
      putStmt();
      break;
    }

    case 43: {
      enterOuterAlt(_localctx, 43);
      setState(728);
      raiseEventStmt();
      break;
    }

    case 44: {
      enterOuterAlt(_localctx, 44);
      setState(729);
      randomizeStmt();
      break;
    }

    case 45: {
      enterOuterAlt(_localctx, 45);
      setState(730);
      redimStmt();
      break;
    }

    case 46: {
      enterOuterAlt(_localctx, 46);
      setState(731);
      resetStmt();
      break;
    }

    case 47: {
      enterOuterAlt(_localctx, 47);
      setState(732);
      resumeStmt();
      break;
    }

    case 48: {
      enterOuterAlt(_localctx, 48);
      setState(733);
      returnStmt();
      break;
    }

    case 49: {
      enterOuterAlt(_localctx, 49);
      setState(734);
      rmdirStmt();
      break;
    }

    case 50: {
      enterOuterAlt(_localctx, 50);
      setState(735);
      rsetStmt();
      break;
    }

    case 51: {
      enterOuterAlt(_localctx, 51);
      setState(736);
      savepictureStmt();
      break;
    }

    case 52: {
      enterOuterAlt(_localctx, 52);
      setState(737);
      saveSettingStmt();
      break;
    }

    case 53: {
      enterOuterAlt(_localctx, 53);
      setState(738);
      seekStmt();
      break;
    }

    case 54: {
      enterOuterAlt(_localctx, 54);
      setState(739);
      selectCaseStmt();
      break;
    }

    case 55: {
      enterOuterAlt(_localctx, 55);
      setState(740);
      sendkeysStmt();
      break;
    }

    case 56: {
      enterOuterAlt(_localctx, 56);
      setState(741);
      setattrStmt();
      break;
    }

    case 57: {
      enterOuterAlt(_localctx, 57);
      setState(742);
      setStmt();
      break;
    }

    case 58: {
      enterOuterAlt(_localctx, 58);
      setState(743);
      stopStmt();
      break;
    }

    case 59: {
      enterOuterAlt(_localctx, 59);
      setState(744);
      timeStmt();
      break;
    }

    case 60: {
      enterOuterAlt(_localctx, 60);
      setState(745);
      unloadStmt();
      break;
    }

    case 61: {
      enterOuterAlt(_localctx, 61);
      setState(746);
      unlockStmt();
      break;
    }

    case 62: {
      enterOuterAlt(_localctx, 62);
      setState(747);
      variableStmt();
      break;
    }

    case 63: {
      enterOuterAlt(_localctx, 63);
      setState(748);
      whileWendStmt();
      break;
    }

    case 64: {
      enterOuterAlt(_localctx, 64);
      setState(749);
      widthStmt();
      break;
    }

    case 65: {
      enterOuterAlt(_localctx, 65);
      setState(750);
      withStmt();
      break;
    }

    case 66: {
      enterOuterAlt(_localctx, 66);
      setState(751);
      writeStmt();
      break;
    }

    case 67: {
      enterOuterAlt(_localctx, 67);
      setState(752);
      implicitCallStmt_InBlock();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AppActivateStmtContext ------------------------------------------------------------------

VisualBasic6Parser::AppActivateStmtContext::AppActivateStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::AppActivateStmtContext::APPACTIVATE() {
  return getToken(VisualBasic6Parser::APPACTIVATE, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::AppActivateStmtContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::AppActivateStmtContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

std::vector<VisualBasic6Parser::ValueStmtContext *> VisualBasic6Parser::AppActivateStmtContext::valueStmt() {
  return getRuleContexts<VisualBasic6Parser::ValueStmtContext>();
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::AppActivateStmtContext::valueStmt(size_t i) {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(i);
}

tree::TerminalNode* VisualBasic6Parser::AppActivateStmtContext::COMMA() {
  return getToken(VisualBasic6Parser::COMMA, 0);
}


size_t VisualBasic6Parser::AppActivateStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleAppActivateStmt;
}

void VisualBasic6Parser::AppActivateStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAppActivateStmt(this);
}

void VisualBasic6Parser::AppActivateStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAppActivateStmt(this);
}

VisualBasic6Parser::AppActivateStmtContext* VisualBasic6Parser::appActivateStmt() {
  AppActivateStmtContext *_localctx = _tracker.createInstance<AppActivateStmtContext>(_ctx, getState());
  enterRule(_localctx, 52, VisualBasic6Parser::RuleAppActivateStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(755);
    match(VisualBasic6Parser::APPACTIVATE);
    setState(756);
    match(VisualBasic6Parser::WS);
    setState(757);
    valueStmt(0);
    setState(766);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 73, _ctx)) {
    case 1: {
      setState(759);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == VisualBasic6Parser::WS) {
        setState(758);
        match(VisualBasic6Parser::WS);
      }
      setState(761);
      match(VisualBasic6Parser::COMMA);
      setState(763);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 72, _ctx)) {
      case 1: {
        setState(762);
        match(VisualBasic6Parser::WS);
        break;
      }

      default:
        break;
      }
      setState(765);
      valueStmt(0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BeepStmtContext ------------------------------------------------------------------

VisualBasic6Parser::BeepStmtContext::BeepStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::BeepStmtContext::BEEP() {
  return getToken(VisualBasic6Parser::BEEP, 0);
}


size_t VisualBasic6Parser::BeepStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleBeepStmt;
}

void VisualBasic6Parser::BeepStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBeepStmt(this);
}

void VisualBasic6Parser::BeepStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBeepStmt(this);
}

VisualBasic6Parser::BeepStmtContext* VisualBasic6Parser::beepStmt() {
  BeepStmtContext *_localctx = _tracker.createInstance<BeepStmtContext>(_ctx, getState());
  enterRule(_localctx, 54, VisualBasic6Parser::RuleBeepStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(768);
    match(VisualBasic6Parser::BEEP);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ChDirStmtContext ------------------------------------------------------------------

VisualBasic6Parser::ChDirStmtContext::ChDirStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::ChDirStmtContext::CHDIR() {
  return getToken(VisualBasic6Parser::CHDIR, 0);
}

tree::TerminalNode* VisualBasic6Parser::ChDirStmtContext::WS() {
  return getToken(VisualBasic6Parser::WS, 0);
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::ChDirStmtContext::valueStmt() {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(0);
}


size_t VisualBasic6Parser::ChDirStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleChDirStmt;
}

void VisualBasic6Parser::ChDirStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterChDirStmt(this);
}

void VisualBasic6Parser::ChDirStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitChDirStmt(this);
}

VisualBasic6Parser::ChDirStmtContext* VisualBasic6Parser::chDirStmt() {
  ChDirStmtContext *_localctx = _tracker.createInstance<ChDirStmtContext>(_ctx, getState());
  enterRule(_localctx, 56, VisualBasic6Parser::RuleChDirStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(770);
    match(VisualBasic6Parser::CHDIR);
    setState(771);
    match(VisualBasic6Parser::WS);
    setState(772);
    valueStmt(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ChDriveStmtContext ------------------------------------------------------------------

VisualBasic6Parser::ChDriveStmtContext::ChDriveStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::ChDriveStmtContext::CHDRIVE() {
  return getToken(VisualBasic6Parser::CHDRIVE, 0);
}

tree::TerminalNode* VisualBasic6Parser::ChDriveStmtContext::WS() {
  return getToken(VisualBasic6Parser::WS, 0);
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::ChDriveStmtContext::valueStmt() {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(0);
}


size_t VisualBasic6Parser::ChDriveStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleChDriveStmt;
}

void VisualBasic6Parser::ChDriveStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterChDriveStmt(this);
}

void VisualBasic6Parser::ChDriveStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitChDriveStmt(this);
}

VisualBasic6Parser::ChDriveStmtContext* VisualBasic6Parser::chDriveStmt() {
  ChDriveStmtContext *_localctx = _tracker.createInstance<ChDriveStmtContext>(_ctx, getState());
  enterRule(_localctx, 58, VisualBasic6Parser::RuleChDriveStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(774);
    match(VisualBasic6Parser::CHDRIVE);
    setState(775);
    match(VisualBasic6Parser::WS);
    setState(776);
    valueStmt(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CloseStmtContext ------------------------------------------------------------------

VisualBasic6Parser::CloseStmtContext::CloseStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::CloseStmtContext::CLOSE() {
  return getToken(VisualBasic6Parser::CLOSE, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::CloseStmtContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::CloseStmtContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

std::vector<VisualBasic6Parser::ValueStmtContext *> VisualBasic6Parser::CloseStmtContext::valueStmt() {
  return getRuleContexts<VisualBasic6Parser::ValueStmtContext>();
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::CloseStmtContext::valueStmt(size_t i) {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(i);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::CloseStmtContext::COMMA() {
  return getTokens(VisualBasic6Parser::COMMA);
}

tree::TerminalNode* VisualBasic6Parser::CloseStmtContext::COMMA(size_t i) {
  return getToken(VisualBasic6Parser::COMMA, i);
}


size_t VisualBasic6Parser::CloseStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleCloseStmt;
}

void VisualBasic6Parser::CloseStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCloseStmt(this);
}

void VisualBasic6Parser::CloseStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCloseStmt(this);
}

VisualBasic6Parser::CloseStmtContext* VisualBasic6Parser::closeStmt() {
  CloseStmtContext *_localctx = _tracker.createInstance<CloseStmtContext>(_ctx, getState());
  enterRule(_localctx, 60, VisualBasic6Parser::RuleCloseStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(778);
    match(VisualBasic6Parser::CLOSE);
    setState(794);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 77, _ctx)) {
    case 1: {
      setState(779);
      match(VisualBasic6Parser::WS);
      setState(780);
      valueStmt(0);
      setState(791);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 76, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(782);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == VisualBasic6Parser::WS) {
            setState(781);
            match(VisualBasic6Parser::WS);
          }
          setState(784);
          match(VisualBasic6Parser::COMMA);
          setState(786);
          _errHandler->sync(this);

          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 75, _ctx)) {
          case 1: {
            setState(785);
            match(VisualBasic6Parser::WS);
            break;
          }

          default:
            break;
          }
          setState(788);
          valueStmt(0); 
        }
        setState(793);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 76, _ctx);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstStmtContext ------------------------------------------------------------------

VisualBasic6Parser::ConstStmtContext::ConstStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::ConstStmtContext::CONST() {
  return getToken(VisualBasic6Parser::CONST, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::ConstStmtContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::ConstStmtContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

std::vector<VisualBasic6Parser::ConstSubStmtContext *> VisualBasic6Parser::ConstStmtContext::constSubStmt() {
  return getRuleContexts<VisualBasic6Parser::ConstSubStmtContext>();
}

VisualBasic6Parser::ConstSubStmtContext* VisualBasic6Parser::ConstStmtContext::constSubStmt(size_t i) {
  return getRuleContext<VisualBasic6Parser::ConstSubStmtContext>(i);
}

VisualBasic6Parser::PublicPrivateGlobalVisibilityContext* VisualBasic6Parser::ConstStmtContext::publicPrivateGlobalVisibility() {
  return getRuleContext<VisualBasic6Parser::PublicPrivateGlobalVisibilityContext>(0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::ConstStmtContext::COMMA() {
  return getTokens(VisualBasic6Parser::COMMA);
}

tree::TerminalNode* VisualBasic6Parser::ConstStmtContext::COMMA(size_t i) {
  return getToken(VisualBasic6Parser::COMMA, i);
}


size_t VisualBasic6Parser::ConstStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleConstStmt;
}

void VisualBasic6Parser::ConstStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstStmt(this);
}

void VisualBasic6Parser::ConstStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstStmt(this);
}

VisualBasic6Parser::ConstStmtContext* VisualBasic6Parser::constStmt() {
  ConstStmtContext *_localctx = _tracker.createInstance<ConstStmtContext>(_ctx, getState());
  enterRule(_localctx, 62, VisualBasic6Parser::RuleConstStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(799);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 72) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 72)) & 153122387330596865) != 0)) {
      setState(796);
      publicPrivateGlobalVisibility();
      setState(797);
      match(VisualBasic6Parser::WS);
    }
    setState(801);
    match(VisualBasic6Parser::CONST);
    setState(802);
    match(VisualBasic6Parser::WS);
    setState(803);
    constSubStmt();
    setState(814);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 81, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(805);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == VisualBasic6Parser::WS) {
          setState(804);
          match(VisualBasic6Parser::WS);
        }
        setState(807);
        match(VisualBasic6Parser::COMMA);
        setState(809);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == VisualBasic6Parser::WS) {
          setState(808);
          match(VisualBasic6Parser::WS);
        }
        setState(811);
        constSubStmt(); 
      }
      setState(816);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 81, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstSubStmtContext ------------------------------------------------------------------

VisualBasic6Parser::ConstSubStmtContext::ConstSubStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

VisualBasic6Parser::AmbiguousIdentifierContext* VisualBasic6Parser::ConstSubStmtContext::ambiguousIdentifier() {
  return getRuleContext<VisualBasic6Parser::AmbiguousIdentifierContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::ConstSubStmtContext::EQ() {
  return getToken(VisualBasic6Parser::EQ, 0);
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::ConstSubStmtContext::valueStmt() {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(0);
}

VisualBasic6Parser::TypeHintContext* VisualBasic6Parser::ConstSubStmtContext::typeHint() {
  return getRuleContext<VisualBasic6Parser::TypeHintContext>(0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::ConstSubStmtContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::ConstSubStmtContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

VisualBasic6Parser::AsTypeClauseContext* VisualBasic6Parser::ConstSubStmtContext::asTypeClause() {
  return getRuleContext<VisualBasic6Parser::AsTypeClauseContext>(0);
}


size_t VisualBasic6Parser::ConstSubStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleConstSubStmt;
}

void VisualBasic6Parser::ConstSubStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstSubStmt(this);
}

void VisualBasic6Parser::ConstSubStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstSubStmt(this);
}

VisualBasic6Parser::ConstSubStmtContext* VisualBasic6Parser::constSubStmt() {
  ConstSubStmtContext *_localctx = _tracker.createInstance<ConstSubStmtContext>(_ctx, getState());
  enterRule(_localctx, 64, VisualBasic6Parser::RuleConstSubStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(817);
    ambiguousIdentifier();
    setState(819);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 178) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 178)) & 4203653) != 0)) {
      setState(818);
      typeHint();
    }
    setState(823);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 83, _ctx)) {
    case 1: {
      setState(821);
      match(VisualBasic6Parser::WS);
      setState(822);
      asTypeClause();
      break;
    }

    default:
      break;
    }
    setState(826);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::WS) {
      setState(825);
      match(VisualBasic6Parser::WS);
    }
    setState(828);
    match(VisualBasic6Parser::EQ);
    setState(830);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 85, _ctx)) {
    case 1: {
      setState(829);
      match(VisualBasic6Parser::WS);
      break;
    }

    default:
      break;
    }
    setState(832);
    valueStmt(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DateStmtContext ------------------------------------------------------------------

VisualBasic6Parser::DateStmtContext::DateStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::DateStmtContext::DATE() {
  return getToken(VisualBasic6Parser::DATE, 0);
}

tree::TerminalNode* VisualBasic6Parser::DateStmtContext::EQ() {
  return getToken(VisualBasic6Parser::EQ, 0);
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::DateStmtContext::valueStmt() {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::DateStmtContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::DateStmtContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}


size_t VisualBasic6Parser::DateStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleDateStmt;
}

void VisualBasic6Parser::DateStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDateStmt(this);
}

void VisualBasic6Parser::DateStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDateStmt(this);
}

VisualBasic6Parser::DateStmtContext* VisualBasic6Parser::dateStmt() {
  DateStmtContext *_localctx = _tracker.createInstance<DateStmtContext>(_ctx, getState());
  enterRule(_localctx, 66, VisualBasic6Parser::RuleDateStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(834);
    match(VisualBasic6Parser::DATE);
    setState(836);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::WS) {
      setState(835);
      match(VisualBasic6Parser::WS);
    }
    setState(838);
    match(VisualBasic6Parser::EQ);
    setState(840);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 87, _ctx)) {
    case 1: {
      setState(839);
      match(VisualBasic6Parser::WS);
      break;
    }

    default:
      break;
    }
    setState(842);
    valueStmt(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeclareStmtContext ------------------------------------------------------------------

VisualBasic6Parser::DeclareStmtContext::DeclareStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::DeclareStmtContext::DECLARE() {
  return getToken(VisualBasic6Parser::DECLARE, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::DeclareStmtContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::DeclareStmtContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

VisualBasic6Parser::AmbiguousIdentifierContext* VisualBasic6Parser::DeclareStmtContext::ambiguousIdentifier() {
  return getRuleContext<VisualBasic6Parser::AmbiguousIdentifierContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::DeclareStmtContext::LIB() {
  return getToken(VisualBasic6Parser::LIB, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::DeclareStmtContext::STRINGLITERAL() {
  return getTokens(VisualBasic6Parser::STRINGLITERAL);
}

tree::TerminalNode* VisualBasic6Parser::DeclareStmtContext::STRINGLITERAL(size_t i) {
  return getToken(VisualBasic6Parser::STRINGLITERAL, i);
}

tree::TerminalNode* VisualBasic6Parser::DeclareStmtContext::FUNCTION() {
  return getToken(VisualBasic6Parser::FUNCTION, 0);
}

tree::TerminalNode* VisualBasic6Parser::DeclareStmtContext::SUB() {
  return getToken(VisualBasic6Parser::SUB, 0);
}

VisualBasic6Parser::VisibilityContext* VisualBasic6Parser::DeclareStmtContext::visibility() {
  return getRuleContext<VisualBasic6Parser::VisibilityContext>(0);
}

std::vector<VisualBasic6Parser::TypeHintContext *> VisualBasic6Parser::DeclareStmtContext::typeHint() {
  return getRuleContexts<VisualBasic6Parser::TypeHintContext>();
}

VisualBasic6Parser::TypeHintContext* VisualBasic6Parser::DeclareStmtContext::typeHint(size_t i) {
  return getRuleContext<VisualBasic6Parser::TypeHintContext>(i);
}

tree::TerminalNode* VisualBasic6Parser::DeclareStmtContext::ALIAS() {
  return getToken(VisualBasic6Parser::ALIAS, 0);
}

VisualBasic6Parser::ArgListContext* VisualBasic6Parser::DeclareStmtContext::argList() {
  return getRuleContext<VisualBasic6Parser::ArgListContext>(0);
}

VisualBasic6Parser::AsTypeClauseContext* VisualBasic6Parser::DeclareStmtContext::asTypeClause() {
  return getRuleContext<VisualBasic6Parser::AsTypeClauseContext>(0);
}


size_t VisualBasic6Parser::DeclareStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleDeclareStmt;
}

void VisualBasic6Parser::DeclareStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeclareStmt(this);
}

void VisualBasic6Parser::DeclareStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeclareStmt(this);
}

VisualBasic6Parser::DeclareStmtContext* VisualBasic6Parser::declareStmt() {
  DeclareStmtContext *_localctx = _tracker.createInstance<DeclareStmtContext>(_ctx, getState());
  enterRule(_localctx, 68, VisualBasic6Parser::RuleDeclareStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(847);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 2449958197289549841) != 0)) {
      setState(844);
      visibility();
      setState(845);
      match(VisualBasic6Parser::WS);
    }
    setState(849);
    match(VisualBasic6Parser::DECLARE);
    setState(850);
    match(VisualBasic6Parser::WS);
    setState(856);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case VisualBasic6Parser::FUNCTION: {
        setState(851);
        match(VisualBasic6Parser::FUNCTION);
        setState(853);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 178) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 178)) & 4203653) != 0)) {
          setState(852);
          typeHint();
        }
        break;
      }

      case VisualBasic6Parser::SUB: {
        setState(855);
        match(VisualBasic6Parser::SUB);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(858);
    match(VisualBasic6Parser::WS);
    setState(859);
    ambiguousIdentifier();
    setState(861);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 178) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 178)) & 4203653) != 0)) {
      setState(860);
      typeHint();
    }
    setState(863);
    match(VisualBasic6Parser::WS);
    setState(864);
    match(VisualBasic6Parser::LIB);
    setState(865);
    match(VisualBasic6Parser::WS);
    setState(866);
    match(VisualBasic6Parser::STRINGLITERAL);
    setState(871);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 92, _ctx)) {
    case 1: {
      setState(867);
      match(VisualBasic6Parser::WS);
      setState(868);
      match(VisualBasic6Parser::ALIAS);
      setState(869);
      match(VisualBasic6Parser::WS);
      setState(870);
      match(VisualBasic6Parser::STRINGLITERAL);
      break;
    }

    default:
      break;
    }
    setState(877);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 94, _ctx)) {
    case 1: {
      setState(874);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == VisualBasic6Parser::WS) {
        setState(873);
        match(VisualBasic6Parser::WS);
      }
      setState(876);
      argList();
      break;
    }

    default:
      break;
    }
    setState(881);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 95, _ctx)) {
    case 1: {
      setState(879);
      match(VisualBasic6Parser::WS);
      setState(880);
      asTypeClause();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeftypeStmtContext ------------------------------------------------------------------

VisualBasic6Parser::DeftypeStmtContext::DeftypeStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::DeftypeStmtContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::DeftypeStmtContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

std::vector<VisualBasic6Parser::LetterrangeContext *> VisualBasic6Parser::DeftypeStmtContext::letterrange() {
  return getRuleContexts<VisualBasic6Parser::LetterrangeContext>();
}

VisualBasic6Parser::LetterrangeContext* VisualBasic6Parser::DeftypeStmtContext::letterrange(size_t i) {
  return getRuleContext<VisualBasic6Parser::LetterrangeContext>(i);
}

tree::TerminalNode* VisualBasic6Parser::DeftypeStmtContext::DEFBOOL() {
  return getToken(VisualBasic6Parser::DEFBOOL, 0);
}

tree::TerminalNode* VisualBasic6Parser::DeftypeStmtContext::DEFBYTE() {
  return getToken(VisualBasic6Parser::DEFBYTE, 0);
}

tree::TerminalNode* VisualBasic6Parser::DeftypeStmtContext::DEFINT() {
  return getToken(VisualBasic6Parser::DEFINT, 0);
}

tree::TerminalNode* VisualBasic6Parser::DeftypeStmtContext::DEFLNG() {
  return getToken(VisualBasic6Parser::DEFLNG, 0);
}

tree::TerminalNode* VisualBasic6Parser::DeftypeStmtContext::DEFCUR() {
  return getToken(VisualBasic6Parser::DEFCUR, 0);
}

tree::TerminalNode* VisualBasic6Parser::DeftypeStmtContext::DEFSNG() {
  return getToken(VisualBasic6Parser::DEFSNG, 0);
}

tree::TerminalNode* VisualBasic6Parser::DeftypeStmtContext::DEFDBL() {
  return getToken(VisualBasic6Parser::DEFDBL, 0);
}

tree::TerminalNode* VisualBasic6Parser::DeftypeStmtContext::DEFDEC() {
  return getToken(VisualBasic6Parser::DEFDEC, 0);
}

tree::TerminalNode* VisualBasic6Parser::DeftypeStmtContext::DEFDATE() {
  return getToken(VisualBasic6Parser::DEFDATE, 0);
}

tree::TerminalNode* VisualBasic6Parser::DeftypeStmtContext::DEFSTR() {
  return getToken(VisualBasic6Parser::DEFSTR, 0);
}

tree::TerminalNode* VisualBasic6Parser::DeftypeStmtContext::DEFOBJ() {
  return getToken(VisualBasic6Parser::DEFOBJ, 0);
}

tree::TerminalNode* VisualBasic6Parser::DeftypeStmtContext::DEFVAR() {
  return getToken(VisualBasic6Parser::DEFVAR, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::DeftypeStmtContext::COMMA() {
  return getTokens(VisualBasic6Parser::COMMA);
}

tree::TerminalNode* VisualBasic6Parser::DeftypeStmtContext::COMMA(size_t i) {
  return getToken(VisualBasic6Parser::COMMA, i);
}


size_t VisualBasic6Parser::DeftypeStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleDeftypeStmt;
}

void VisualBasic6Parser::DeftypeStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeftypeStmt(this);
}

void VisualBasic6Parser::DeftypeStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeftypeStmt(this);
}

VisualBasic6Parser::DeftypeStmtContext* VisualBasic6Parser::deftypeStmt() {
  DeftypeStmtContext *_localctx = _tracker.createInstance<DeftypeStmtContext>(_ctx, getState());
  enterRule(_localctx, 70, VisualBasic6Parser::RuleDeftypeStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(883);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 549621596160) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(884);
    match(VisualBasic6Parser::WS);
    setState(885);
    letterrange();
    setState(896);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 98, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(887);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == VisualBasic6Parser::WS) {
          setState(886);
          match(VisualBasic6Parser::WS);
        }
        setState(889);
        match(VisualBasic6Parser::COMMA);
        setState(891);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == VisualBasic6Parser::WS) {
          setState(890);
          match(VisualBasic6Parser::WS);
        }
        setState(893);
        letterrange(); 
      }
      setState(898);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 98, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeleteSettingStmtContext ------------------------------------------------------------------

VisualBasic6Parser::DeleteSettingStmtContext::DeleteSettingStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::DeleteSettingStmtContext::DELETESETTING() {
  return getToken(VisualBasic6Parser::DELETESETTING, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::DeleteSettingStmtContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::DeleteSettingStmtContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

std::vector<VisualBasic6Parser::ValueStmtContext *> VisualBasic6Parser::DeleteSettingStmtContext::valueStmt() {
  return getRuleContexts<VisualBasic6Parser::ValueStmtContext>();
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::DeleteSettingStmtContext::valueStmt(size_t i) {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(i);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::DeleteSettingStmtContext::COMMA() {
  return getTokens(VisualBasic6Parser::COMMA);
}

tree::TerminalNode* VisualBasic6Parser::DeleteSettingStmtContext::COMMA(size_t i) {
  return getToken(VisualBasic6Parser::COMMA, i);
}


size_t VisualBasic6Parser::DeleteSettingStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleDeleteSettingStmt;
}

void VisualBasic6Parser::DeleteSettingStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeleteSettingStmt(this);
}

void VisualBasic6Parser::DeleteSettingStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeleteSettingStmt(this);
}

VisualBasic6Parser::DeleteSettingStmtContext* VisualBasic6Parser::deleteSettingStmt() {
  DeleteSettingStmtContext *_localctx = _tracker.createInstance<DeleteSettingStmtContext>(_ctx, getState());
  enterRule(_localctx, 72, VisualBasic6Parser::RuleDeleteSettingStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(899);
    match(VisualBasic6Parser::DELETESETTING);
    setState(900);
    match(VisualBasic6Parser::WS);
    setState(901);
    valueStmt(0);
    setState(903);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::WS) {
      setState(902);
      match(VisualBasic6Parser::WS);
    }
    setState(905);
    match(VisualBasic6Parser::COMMA);
    setState(907);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 100, _ctx)) {
    case 1: {
      setState(906);
      match(VisualBasic6Parser::WS);
      break;
    }

    default:
      break;
    }
    setState(909);
    valueStmt(0);
    setState(918);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 103, _ctx)) {
    case 1: {
      setState(911);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == VisualBasic6Parser::WS) {
        setState(910);
        match(VisualBasic6Parser::WS);
      }
      setState(913);
      match(VisualBasic6Parser::COMMA);
      setState(915);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 102, _ctx)) {
      case 1: {
        setState(914);
        match(VisualBasic6Parser::WS);
        break;
      }

      default:
        break;
      }
      setState(917);
      valueStmt(0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DoLoopStmtContext ------------------------------------------------------------------

VisualBasic6Parser::DoLoopStmtContext::DoLoopStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::DoLoopStmtContext::DO() {
  return getToken(VisualBasic6Parser::DO, 0);
}

tree::TerminalNode* VisualBasic6Parser::DoLoopStmtContext::LOOP() {
  return getToken(VisualBasic6Parser::LOOP, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::DoLoopStmtContext::NEWLINE() {
  return getTokens(VisualBasic6Parser::NEWLINE);
}

tree::TerminalNode* VisualBasic6Parser::DoLoopStmtContext::NEWLINE(size_t i) {
  return getToken(VisualBasic6Parser::NEWLINE, i);
}

VisualBasic6Parser::BlockContext* VisualBasic6Parser::DoLoopStmtContext::block() {
  return getRuleContext<VisualBasic6Parser::BlockContext>(0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::DoLoopStmtContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::DoLoopStmtContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::DoLoopStmtContext::valueStmt() {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::DoLoopStmtContext::WHILE() {
  return getToken(VisualBasic6Parser::WHILE, 0);
}

tree::TerminalNode* VisualBasic6Parser::DoLoopStmtContext::UNTIL() {
  return getToken(VisualBasic6Parser::UNTIL, 0);
}


size_t VisualBasic6Parser::DoLoopStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleDoLoopStmt;
}

void VisualBasic6Parser::DoLoopStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDoLoopStmt(this);
}

void VisualBasic6Parser::DoLoopStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDoLoopStmt(this);
}

VisualBasic6Parser::DoLoopStmtContext* VisualBasic6Parser::doLoopStmt() {
  DoLoopStmtContext *_localctx = _tracker.createInstance<DoLoopStmtContext>(_ctx, getState());
  enterRule(_localctx, 74, VisualBasic6Parser::RuleDoLoopStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(973);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 112, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(920);
      match(VisualBasic6Parser::DO);
      setState(922); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(921);
        match(VisualBasic6Parser::NEWLINE);
        setState(924); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == VisualBasic6Parser::NEWLINE);
      setState(932);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 106, _ctx)) {
      case 1: {
        setState(926);
        block();
        setState(928); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(927);
          match(VisualBasic6Parser::NEWLINE);
          setState(930); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (_la == VisualBasic6Parser::NEWLINE);
        break;
      }

      default:
        break;
      }
      setState(934);
      match(VisualBasic6Parser::LOOP);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(935);
      match(VisualBasic6Parser::DO);
      setState(936);
      match(VisualBasic6Parser::WS);
      setState(937);
      _la = _input->LA(1);
      if (!(_la == VisualBasic6Parser::UNTIL

      || _la == VisualBasic6Parser::WHILE)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(938);
      match(VisualBasic6Parser::WS);
      setState(939);
      valueStmt(0);
      setState(941); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(940);
        match(VisualBasic6Parser::NEWLINE);
        setState(943); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == VisualBasic6Parser::NEWLINE);
      setState(951);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 109, _ctx)) {
      case 1: {
        setState(945);
        block();
        setState(947); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(946);
          match(VisualBasic6Parser::NEWLINE);
          setState(949); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (_la == VisualBasic6Parser::NEWLINE);
        break;
      }

      default:
        break;
      }
      setState(953);
      match(VisualBasic6Parser::LOOP);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(955);
      match(VisualBasic6Parser::DO);
      setState(957); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(956);
        match(VisualBasic6Parser::NEWLINE);
        setState(959); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == VisualBasic6Parser::NEWLINE);

      setState(961);
      block();
      setState(963); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(962);
        match(VisualBasic6Parser::NEWLINE);
        setState(965); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == VisualBasic6Parser::NEWLINE);
      setState(967);
      match(VisualBasic6Parser::LOOP);
      setState(968);
      match(VisualBasic6Parser::WS);
      setState(969);
      _la = _input->LA(1);
      if (!(_la == VisualBasic6Parser::UNTIL

      || _la == VisualBasic6Parser::WHILE)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(970);
      match(VisualBasic6Parser::WS);
      setState(971);
      valueStmt(0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EndStmtContext ------------------------------------------------------------------

VisualBasic6Parser::EndStmtContext::EndStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::EndStmtContext::END() {
  return getToken(VisualBasic6Parser::END, 0);
}


size_t VisualBasic6Parser::EndStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleEndStmt;
}

void VisualBasic6Parser::EndStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEndStmt(this);
}

void VisualBasic6Parser::EndStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEndStmt(this);
}

VisualBasic6Parser::EndStmtContext* VisualBasic6Parser::endStmt() {
  EndStmtContext *_localctx = _tracker.createInstance<EndStmtContext>(_ctx, getState());
  enterRule(_localctx, 76, VisualBasic6Parser::RuleEndStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(975);
    match(VisualBasic6Parser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumerationStmtContext ------------------------------------------------------------------

VisualBasic6Parser::EnumerationStmtContext::EnumerationStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::EnumerationStmtContext::ENUM() {
  return getToken(VisualBasic6Parser::ENUM, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::EnumerationStmtContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::EnumerationStmtContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

VisualBasic6Parser::AmbiguousIdentifierContext* VisualBasic6Parser::EnumerationStmtContext::ambiguousIdentifier() {
  return getRuleContext<VisualBasic6Parser::AmbiguousIdentifierContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::EnumerationStmtContext::END_ENUM() {
  return getToken(VisualBasic6Parser::END_ENUM, 0);
}

VisualBasic6Parser::PublicPrivateVisibilityContext* VisualBasic6Parser::EnumerationStmtContext::publicPrivateVisibility() {
  return getRuleContext<VisualBasic6Parser::PublicPrivateVisibilityContext>(0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::EnumerationStmtContext::NEWLINE() {
  return getTokens(VisualBasic6Parser::NEWLINE);
}

tree::TerminalNode* VisualBasic6Parser::EnumerationStmtContext::NEWLINE(size_t i) {
  return getToken(VisualBasic6Parser::NEWLINE, i);
}

std::vector<VisualBasic6Parser::EnumerationStmt_ConstantContext *> VisualBasic6Parser::EnumerationStmtContext::enumerationStmt_Constant() {
  return getRuleContexts<VisualBasic6Parser::EnumerationStmt_ConstantContext>();
}

VisualBasic6Parser::EnumerationStmt_ConstantContext* VisualBasic6Parser::EnumerationStmtContext::enumerationStmt_Constant(size_t i) {
  return getRuleContext<VisualBasic6Parser::EnumerationStmt_ConstantContext>(i);
}


size_t VisualBasic6Parser::EnumerationStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleEnumerationStmt;
}

void VisualBasic6Parser::EnumerationStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumerationStmt(this);
}

void VisualBasic6Parser::EnumerationStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumerationStmt(this);
}

VisualBasic6Parser::EnumerationStmtContext* VisualBasic6Parser::enumerationStmt() {
  EnumerationStmtContext *_localctx = _tracker.createInstance<EnumerationStmtContext>(_ctx, getState());
  enterRule(_localctx, 78, VisualBasic6Parser::RuleEnumerationStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(980);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::PRIVATE

    || _la == VisualBasic6Parser::PUBLIC) {
      setState(977);
      publicPrivateVisibility();
      setState(978);
      match(VisualBasic6Parser::WS);
    }
    setState(982);
    match(VisualBasic6Parser::ENUM);
    setState(983);
    match(VisualBasic6Parser::WS);
    setState(984);
    ambiguousIdentifier();
    setState(986); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(985);
      match(VisualBasic6Parser::NEWLINE);
      setState(988); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == VisualBasic6Parser::NEWLINE);
    setState(993);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2251870182429423614) != 0) || ((((_la - 66) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 66)) & -8087550153692545025) != 0) || ((((_la - 130) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 130)) & 281474976710623) != 0) || _la == VisualBasic6Parser::L_SQUARE_BRACKET

    || _la == VisualBasic6Parser::IDENTIFIER) {
      setState(990);
      enumerationStmt_Constant();
      setState(995);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(996);
    match(VisualBasic6Parser::END_ENUM);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumerationStmt_ConstantContext ------------------------------------------------------------------

VisualBasic6Parser::EnumerationStmt_ConstantContext::EnumerationStmt_ConstantContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

VisualBasic6Parser::AmbiguousIdentifierContext* VisualBasic6Parser::EnumerationStmt_ConstantContext::ambiguousIdentifier() {
  return getRuleContext<VisualBasic6Parser::AmbiguousIdentifierContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::EnumerationStmt_ConstantContext::EQ() {
  return getToken(VisualBasic6Parser::EQ, 0);
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::EnumerationStmt_ConstantContext::valueStmt() {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::EnumerationStmt_ConstantContext::NEWLINE() {
  return getTokens(VisualBasic6Parser::NEWLINE);
}

tree::TerminalNode* VisualBasic6Parser::EnumerationStmt_ConstantContext::NEWLINE(size_t i) {
  return getToken(VisualBasic6Parser::NEWLINE, i);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::EnumerationStmt_ConstantContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::EnumerationStmt_ConstantContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}


size_t VisualBasic6Parser::EnumerationStmt_ConstantContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleEnumerationStmt_Constant;
}

void VisualBasic6Parser::EnumerationStmt_ConstantContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumerationStmt_Constant(this);
}

void VisualBasic6Parser::EnumerationStmt_ConstantContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumerationStmt_Constant(this);
}

VisualBasic6Parser::EnumerationStmt_ConstantContext* VisualBasic6Parser::enumerationStmt_Constant() {
  EnumerationStmt_ConstantContext *_localctx = _tracker.createInstance<EnumerationStmt_ConstantContext>(_ctx, getState());
  enterRule(_localctx, 80, VisualBasic6Parser::RuleEnumerationStmt_Constant);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(998);
    ambiguousIdentifier();
    setState(1007);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::EQ

    || _la == VisualBasic6Parser::WS) {
      setState(1000);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == VisualBasic6Parser::WS) {
        setState(999);
        match(VisualBasic6Parser::WS);
      }
      setState(1002);
      match(VisualBasic6Parser::EQ);
      setState(1004);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 117, _ctx)) {
      case 1: {
        setState(1003);
        match(VisualBasic6Parser::WS);
        break;
      }

      default:
        break;
      }
      setState(1006);
      valueStmt(0);
    }
    setState(1010); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1009);
      match(VisualBasic6Parser::NEWLINE);
      setState(1012); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == VisualBasic6Parser::NEWLINE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EraseStmtContext ------------------------------------------------------------------

VisualBasic6Parser::EraseStmtContext::EraseStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::EraseStmtContext::ERASE() {
  return getToken(VisualBasic6Parser::ERASE, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::EraseStmtContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::EraseStmtContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

std::vector<VisualBasic6Parser::ValueStmtContext *> VisualBasic6Parser::EraseStmtContext::valueStmt() {
  return getRuleContexts<VisualBasic6Parser::ValueStmtContext>();
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::EraseStmtContext::valueStmt(size_t i) {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(i);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::EraseStmtContext::COMMA() {
  return getTokens(VisualBasic6Parser::COMMA);
}

tree::TerminalNode* VisualBasic6Parser::EraseStmtContext::COMMA(size_t i) {
  return getToken(VisualBasic6Parser::COMMA, i);
}


size_t VisualBasic6Parser::EraseStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleEraseStmt;
}

void VisualBasic6Parser::EraseStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEraseStmt(this);
}

void VisualBasic6Parser::EraseStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEraseStmt(this);
}

VisualBasic6Parser::EraseStmtContext* VisualBasic6Parser::eraseStmt() {
  EraseStmtContext *_localctx = _tracker.createInstance<EraseStmtContext>(_ctx, getState());
  enterRule(_localctx, 82, VisualBasic6Parser::RuleEraseStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1014);
    match(VisualBasic6Parser::ERASE);
    setState(1015);
    match(VisualBasic6Parser::WS);
    setState(1016);
    valueStmt(0);
    setState(1027);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 122, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1018);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == VisualBasic6Parser::WS) {
          setState(1017);
          match(VisualBasic6Parser::WS);
        }
        setState(1020);
        match(VisualBasic6Parser::COMMA);
        setState(1022);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 121, _ctx)) {
        case 1: {
          setState(1021);
          match(VisualBasic6Parser::WS);
          break;
        }

        default:
          break;
        }
        setState(1024);
        valueStmt(0); 
      }
      setState(1029);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 122, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ErrorStmtContext ------------------------------------------------------------------

VisualBasic6Parser::ErrorStmtContext::ErrorStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::ErrorStmtContext::ERROR() {
  return getToken(VisualBasic6Parser::ERROR, 0);
}

tree::TerminalNode* VisualBasic6Parser::ErrorStmtContext::WS() {
  return getToken(VisualBasic6Parser::WS, 0);
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::ErrorStmtContext::valueStmt() {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(0);
}


size_t VisualBasic6Parser::ErrorStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleErrorStmt;
}

void VisualBasic6Parser::ErrorStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterErrorStmt(this);
}

void VisualBasic6Parser::ErrorStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitErrorStmt(this);
}

VisualBasic6Parser::ErrorStmtContext* VisualBasic6Parser::errorStmt() {
  ErrorStmtContext *_localctx = _tracker.createInstance<ErrorStmtContext>(_ctx, getState());
  enterRule(_localctx, 84, VisualBasic6Parser::RuleErrorStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1030);
    match(VisualBasic6Parser::ERROR);
    setState(1031);
    match(VisualBasic6Parser::WS);
    setState(1032);
    valueStmt(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EventStmtContext ------------------------------------------------------------------

VisualBasic6Parser::EventStmtContext::EventStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::EventStmtContext::EVENT() {
  return getToken(VisualBasic6Parser::EVENT, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::EventStmtContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::EventStmtContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

VisualBasic6Parser::AmbiguousIdentifierContext* VisualBasic6Parser::EventStmtContext::ambiguousIdentifier() {
  return getRuleContext<VisualBasic6Parser::AmbiguousIdentifierContext>(0);
}

VisualBasic6Parser::ArgListContext* VisualBasic6Parser::EventStmtContext::argList() {
  return getRuleContext<VisualBasic6Parser::ArgListContext>(0);
}

VisualBasic6Parser::VisibilityContext* VisualBasic6Parser::EventStmtContext::visibility() {
  return getRuleContext<VisualBasic6Parser::VisibilityContext>(0);
}


size_t VisualBasic6Parser::EventStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleEventStmt;
}

void VisualBasic6Parser::EventStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEventStmt(this);
}

void VisualBasic6Parser::EventStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEventStmt(this);
}

VisualBasic6Parser::EventStmtContext* VisualBasic6Parser::eventStmt() {
  EventStmtContext *_localctx = _tracker.createInstance<EventStmtContext>(_ctx, getState());
  enterRule(_localctx, 86, VisualBasic6Parser::RuleEventStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1037);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 2449958197289549841) != 0)) {
      setState(1034);
      visibility();
      setState(1035);
      match(VisualBasic6Parser::WS);
    }
    setState(1039);
    match(VisualBasic6Parser::EVENT);
    setState(1040);
    match(VisualBasic6Parser::WS);
    setState(1041);
    ambiguousIdentifier();
    setState(1043);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::WS) {
      setState(1042);
      match(VisualBasic6Parser::WS);
    }
    setState(1045);
    argList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExitStmtContext ------------------------------------------------------------------

VisualBasic6Parser::ExitStmtContext::ExitStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::ExitStmtContext::EXIT_DO() {
  return getToken(VisualBasic6Parser::EXIT_DO, 0);
}

tree::TerminalNode* VisualBasic6Parser::ExitStmtContext::EXIT_FOR() {
  return getToken(VisualBasic6Parser::EXIT_FOR, 0);
}

tree::TerminalNode* VisualBasic6Parser::ExitStmtContext::EXIT_FUNCTION() {
  return getToken(VisualBasic6Parser::EXIT_FUNCTION, 0);
}

tree::TerminalNode* VisualBasic6Parser::ExitStmtContext::EXIT_PROPERTY() {
  return getToken(VisualBasic6Parser::EXIT_PROPERTY, 0);
}

tree::TerminalNode* VisualBasic6Parser::ExitStmtContext::EXIT_SUB() {
  return getToken(VisualBasic6Parser::EXIT_SUB, 0);
}


size_t VisualBasic6Parser::ExitStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleExitStmt;
}

void VisualBasic6Parser::ExitStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExitStmt(this);
}

void VisualBasic6Parser::ExitStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExitStmt(this);
}

VisualBasic6Parser::ExitStmtContext* VisualBasic6Parser::exitStmt() {
  ExitStmtContext *_localctx = _tracker.createInstance<ExitStmtContext>(_ctx, getState());
  enterRule(_localctx, 88, VisualBasic6Parser::RuleExitStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1047);
    _la = _input->LA(1);
    if (!(((((_la - 61) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 61)) & 31) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FilecopyStmtContext ------------------------------------------------------------------

VisualBasic6Parser::FilecopyStmtContext::FilecopyStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::FilecopyStmtContext::FILECOPY() {
  return getToken(VisualBasic6Parser::FILECOPY, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::FilecopyStmtContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::FilecopyStmtContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

std::vector<VisualBasic6Parser::ValueStmtContext *> VisualBasic6Parser::FilecopyStmtContext::valueStmt() {
  return getRuleContexts<VisualBasic6Parser::ValueStmtContext>();
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::FilecopyStmtContext::valueStmt(size_t i) {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(i);
}

tree::TerminalNode* VisualBasic6Parser::FilecopyStmtContext::COMMA() {
  return getToken(VisualBasic6Parser::COMMA, 0);
}


size_t VisualBasic6Parser::FilecopyStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleFilecopyStmt;
}

void VisualBasic6Parser::FilecopyStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFilecopyStmt(this);
}

void VisualBasic6Parser::FilecopyStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFilecopyStmt(this);
}

VisualBasic6Parser::FilecopyStmtContext* VisualBasic6Parser::filecopyStmt() {
  FilecopyStmtContext *_localctx = _tracker.createInstance<FilecopyStmtContext>(_ctx, getState());
  enterRule(_localctx, 90, VisualBasic6Parser::RuleFilecopyStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1049);
    match(VisualBasic6Parser::FILECOPY);
    setState(1050);
    match(VisualBasic6Parser::WS);
    setState(1051);
    valueStmt(0);
    setState(1053);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::WS) {
      setState(1052);
      match(VisualBasic6Parser::WS);
    }
    setState(1055);
    match(VisualBasic6Parser::COMMA);
    setState(1057);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 126, _ctx)) {
    case 1: {
      setState(1056);
      match(VisualBasic6Parser::WS);
      break;
    }

    default:
      break;
    }
    setState(1059);
    valueStmt(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForEachStmtContext ------------------------------------------------------------------

VisualBasic6Parser::ForEachStmtContext::ForEachStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::ForEachStmtContext::FOR() {
  return getToken(VisualBasic6Parser::FOR, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::ForEachStmtContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::ForEachStmtContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

tree::TerminalNode* VisualBasic6Parser::ForEachStmtContext::EACH() {
  return getToken(VisualBasic6Parser::EACH, 0);
}

std::vector<VisualBasic6Parser::AmbiguousIdentifierContext *> VisualBasic6Parser::ForEachStmtContext::ambiguousIdentifier() {
  return getRuleContexts<VisualBasic6Parser::AmbiguousIdentifierContext>();
}

VisualBasic6Parser::AmbiguousIdentifierContext* VisualBasic6Parser::ForEachStmtContext::ambiguousIdentifier(size_t i) {
  return getRuleContext<VisualBasic6Parser::AmbiguousIdentifierContext>(i);
}

tree::TerminalNode* VisualBasic6Parser::ForEachStmtContext::IN() {
  return getToken(VisualBasic6Parser::IN, 0);
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::ForEachStmtContext::valueStmt() {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::ForEachStmtContext::NEXT() {
  return getToken(VisualBasic6Parser::NEXT, 0);
}

VisualBasic6Parser::TypeHintContext* VisualBasic6Parser::ForEachStmtContext::typeHint() {
  return getRuleContext<VisualBasic6Parser::TypeHintContext>(0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::ForEachStmtContext::NEWLINE() {
  return getTokens(VisualBasic6Parser::NEWLINE);
}

tree::TerminalNode* VisualBasic6Parser::ForEachStmtContext::NEWLINE(size_t i) {
  return getToken(VisualBasic6Parser::NEWLINE, i);
}

VisualBasic6Parser::BlockContext* VisualBasic6Parser::ForEachStmtContext::block() {
  return getRuleContext<VisualBasic6Parser::BlockContext>(0);
}


size_t VisualBasic6Parser::ForEachStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleForEachStmt;
}

void VisualBasic6Parser::ForEachStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterForEachStmt(this);
}

void VisualBasic6Parser::ForEachStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitForEachStmt(this);
}

VisualBasic6Parser::ForEachStmtContext* VisualBasic6Parser::forEachStmt() {
  ForEachStmtContext *_localctx = _tracker.createInstance<ForEachStmtContext>(_ctx, getState());
  enterRule(_localctx, 92, VisualBasic6Parser::RuleForEachStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1061);
    match(VisualBasic6Parser::FOR);
    setState(1062);
    match(VisualBasic6Parser::WS);
    setState(1063);
    match(VisualBasic6Parser::EACH);
    setState(1064);
    match(VisualBasic6Parser::WS);
    setState(1065);
    ambiguousIdentifier();
    setState(1067);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 178) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 178)) & 4203653) != 0)) {
      setState(1066);
      typeHint();
    }
    setState(1069);
    match(VisualBasic6Parser::WS);
    setState(1070);
    match(VisualBasic6Parser::IN);
    setState(1071);
    match(VisualBasic6Parser::WS);
    setState(1072);
    valueStmt(0);
    setState(1074); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1073);
      match(VisualBasic6Parser::NEWLINE);
      setState(1076); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == VisualBasic6Parser::NEWLINE);
    setState(1084);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 130, _ctx)) {
    case 1: {
      setState(1078);
      block();
      setState(1080); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(1079);
        match(VisualBasic6Parser::NEWLINE);
        setState(1082); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == VisualBasic6Parser::NEWLINE);
      break;
    }

    default:
      break;
    }
    setState(1086);
    match(VisualBasic6Parser::NEXT);
    setState(1089);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 131, _ctx)) {
    case 1: {
      setState(1087);
      match(VisualBasic6Parser::WS);
      setState(1088);
      ambiguousIdentifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForNextStmtContext ------------------------------------------------------------------

VisualBasic6Parser::ForNextStmtContext::ForNextStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::ForNextStmtContext::FOR() {
  return getToken(VisualBasic6Parser::FOR, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::ForNextStmtContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::ForNextStmtContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

VisualBasic6Parser::ICS_S_VariableOrProcedureCallContext* VisualBasic6Parser::ForNextStmtContext::iCS_S_VariableOrProcedureCall() {
  return getRuleContext<VisualBasic6Parser::ICS_S_VariableOrProcedureCallContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::ForNextStmtContext::EQ() {
  return getToken(VisualBasic6Parser::EQ, 0);
}

std::vector<VisualBasic6Parser::ValueStmtContext *> VisualBasic6Parser::ForNextStmtContext::valueStmt() {
  return getRuleContexts<VisualBasic6Parser::ValueStmtContext>();
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::ForNextStmtContext::valueStmt(size_t i) {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(i);
}

tree::TerminalNode* VisualBasic6Parser::ForNextStmtContext::TO() {
  return getToken(VisualBasic6Parser::TO, 0);
}

tree::TerminalNode* VisualBasic6Parser::ForNextStmtContext::NEXT() {
  return getToken(VisualBasic6Parser::NEXT, 0);
}

std::vector<VisualBasic6Parser::TypeHintContext *> VisualBasic6Parser::ForNextStmtContext::typeHint() {
  return getRuleContexts<VisualBasic6Parser::TypeHintContext>();
}

VisualBasic6Parser::TypeHintContext* VisualBasic6Parser::ForNextStmtContext::typeHint(size_t i) {
  return getRuleContext<VisualBasic6Parser::TypeHintContext>(i);
}

VisualBasic6Parser::AsTypeClauseContext* VisualBasic6Parser::ForNextStmtContext::asTypeClause() {
  return getRuleContext<VisualBasic6Parser::AsTypeClauseContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::ForNextStmtContext::STEP() {
  return getToken(VisualBasic6Parser::STEP, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::ForNextStmtContext::NEWLINE() {
  return getTokens(VisualBasic6Parser::NEWLINE);
}

tree::TerminalNode* VisualBasic6Parser::ForNextStmtContext::NEWLINE(size_t i) {
  return getToken(VisualBasic6Parser::NEWLINE, i);
}

VisualBasic6Parser::BlockContext* VisualBasic6Parser::ForNextStmtContext::block() {
  return getRuleContext<VisualBasic6Parser::BlockContext>(0);
}

VisualBasic6Parser::AmbiguousIdentifierContext* VisualBasic6Parser::ForNextStmtContext::ambiguousIdentifier() {
  return getRuleContext<VisualBasic6Parser::AmbiguousIdentifierContext>(0);
}


size_t VisualBasic6Parser::ForNextStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleForNextStmt;
}

void VisualBasic6Parser::ForNextStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterForNextStmt(this);
}

void VisualBasic6Parser::ForNextStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitForNextStmt(this);
}

VisualBasic6Parser::ForNextStmtContext* VisualBasic6Parser::forNextStmt() {
  ForNextStmtContext *_localctx = _tracker.createInstance<ForNextStmtContext>(_ctx, getState());
  enterRule(_localctx, 94, VisualBasic6Parser::RuleForNextStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1091);
    match(VisualBasic6Parser::FOR);
    setState(1092);
    match(VisualBasic6Parser::WS);
    setState(1093);
    iCS_S_VariableOrProcedureCall();
    setState(1095);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 178) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 178)) & 4203653) != 0)) {
      setState(1094);
      typeHint();
    }
    setState(1099);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 133, _ctx)) {
    case 1: {
      setState(1097);
      match(VisualBasic6Parser::WS);
      setState(1098);
      asTypeClause();
      break;
    }

    default:
      break;
    }
    setState(1102);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::WS) {
      setState(1101);
      match(VisualBasic6Parser::WS);
    }
    setState(1104);
    match(VisualBasic6Parser::EQ);
    setState(1106);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 135, _ctx)) {
    case 1: {
      setState(1105);
      match(VisualBasic6Parser::WS);
      break;
    }

    default:
      break;
    }
    setState(1108);
    valueStmt(0);
    setState(1109);
    match(VisualBasic6Parser::WS);
    setState(1110);
    match(VisualBasic6Parser::TO);
    setState(1111);
    match(VisualBasic6Parser::WS);
    setState(1112);
    valueStmt(0);
    setState(1117);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::WS) {
      setState(1113);
      match(VisualBasic6Parser::WS);
      setState(1114);
      match(VisualBasic6Parser::STEP);
      setState(1115);
      match(VisualBasic6Parser::WS);
      setState(1116);
      valueStmt(0);
    }
    setState(1120); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1119);
      match(VisualBasic6Parser::NEWLINE);
      setState(1122); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == VisualBasic6Parser::NEWLINE);
    setState(1130);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 139, _ctx)) {
    case 1: {
      setState(1124);
      block();
      setState(1126); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(1125);
        match(VisualBasic6Parser::NEWLINE);
        setState(1128); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == VisualBasic6Parser::NEWLINE);
      break;
    }

    default:
      break;
    }
    setState(1132);
    match(VisualBasic6Parser::NEXT);
    setState(1138);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 141, _ctx)) {
    case 1: {
      setState(1133);
      match(VisualBasic6Parser::WS);
      setState(1134);
      ambiguousIdentifier();
      setState(1136);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 140, _ctx)) {
      case 1: {
        setState(1135);
        typeHint();
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionStmtContext ------------------------------------------------------------------

VisualBasic6Parser::FunctionStmtContext::FunctionStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::FunctionStmtContext::FUNCTION() {
  return getToken(VisualBasic6Parser::FUNCTION, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::FunctionStmtContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::FunctionStmtContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

VisualBasic6Parser::AmbiguousIdentifierContext* VisualBasic6Parser::FunctionStmtContext::ambiguousIdentifier() {
  return getRuleContext<VisualBasic6Parser::AmbiguousIdentifierContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::FunctionStmtContext::END_FUNCTION() {
  return getToken(VisualBasic6Parser::END_FUNCTION, 0);
}

VisualBasic6Parser::VisibilityContext* VisualBasic6Parser::FunctionStmtContext::visibility() {
  return getRuleContext<VisualBasic6Parser::VisibilityContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::FunctionStmtContext::STATIC() {
  return getToken(VisualBasic6Parser::STATIC, 0);
}

VisualBasic6Parser::ArgListContext* VisualBasic6Parser::FunctionStmtContext::argList() {
  return getRuleContext<VisualBasic6Parser::ArgListContext>(0);
}

VisualBasic6Parser::AsTypeClauseContext* VisualBasic6Parser::FunctionStmtContext::asTypeClause() {
  return getRuleContext<VisualBasic6Parser::AsTypeClauseContext>(0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::FunctionStmtContext::NEWLINE() {
  return getTokens(VisualBasic6Parser::NEWLINE);
}

tree::TerminalNode* VisualBasic6Parser::FunctionStmtContext::NEWLINE(size_t i) {
  return getToken(VisualBasic6Parser::NEWLINE, i);
}

VisualBasic6Parser::BlockContext* VisualBasic6Parser::FunctionStmtContext::block() {
  return getRuleContext<VisualBasic6Parser::BlockContext>(0);
}


size_t VisualBasic6Parser::FunctionStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleFunctionStmt;
}

void VisualBasic6Parser::FunctionStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunctionStmt(this);
}

void VisualBasic6Parser::FunctionStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunctionStmt(this);
}

VisualBasic6Parser::FunctionStmtContext* VisualBasic6Parser::functionStmt() {
  FunctionStmtContext *_localctx = _tracker.createInstance<FunctionStmtContext>(_ctx, getState());
  enterRule(_localctx, 96, VisualBasic6Parser::RuleFunctionStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1143);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 2449958197289549841) != 0)) {
      setState(1140);
      visibility();
      setState(1141);
      match(VisualBasic6Parser::WS);
    }
    setState(1147);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::STATIC) {
      setState(1145);
      match(VisualBasic6Parser::STATIC);
      setState(1146);
      match(VisualBasic6Parser::WS);
    }
    setState(1149);
    match(VisualBasic6Parser::FUNCTION);
    setState(1150);
    match(VisualBasic6Parser::WS);
    setState(1151);
    ambiguousIdentifier();
    setState(1156);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 145, _ctx)) {
    case 1: {
      setState(1153);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == VisualBasic6Parser::WS) {
        setState(1152);
        match(VisualBasic6Parser::WS);
      }
      setState(1155);
      argList();
      break;
    }

    default:
      break;
    }
    setState(1160);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::WS) {
      setState(1158);
      match(VisualBasic6Parser::WS);
      setState(1159);
      asTypeClause();
    }
    setState(1163); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1162);
      match(VisualBasic6Parser::NEWLINE);
      setState(1165); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == VisualBasic6Parser::NEWLINE);
    setState(1173);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -53972826784270338) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 4544131962008240127) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 129)) & 721138890332700607) != 0) || ((((_la - 207) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 207)) & 34817) != 0)) {
      setState(1167);
      block();
      setState(1169); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(1168);
        match(VisualBasic6Parser::NEWLINE);
        setState(1171); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == VisualBasic6Parser::NEWLINE);
    }
    setState(1175);
    match(VisualBasic6Parser::END_FUNCTION);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GetStmtContext ------------------------------------------------------------------

VisualBasic6Parser::GetStmtContext::GetStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::GetStmtContext::GET() {
  return getToken(VisualBasic6Parser::GET, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::GetStmtContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::GetStmtContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

std::vector<VisualBasic6Parser::ValueStmtContext *> VisualBasic6Parser::GetStmtContext::valueStmt() {
  return getRuleContexts<VisualBasic6Parser::ValueStmtContext>();
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::GetStmtContext::valueStmt(size_t i) {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(i);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::GetStmtContext::COMMA() {
  return getTokens(VisualBasic6Parser::COMMA);
}

tree::TerminalNode* VisualBasic6Parser::GetStmtContext::COMMA(size_t i) {
  return getToken(VisualBasic6Parser::COMMA, i);
}


size_t VisualBasic6Parser::GetStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleGetStmt;
}

void VisualBasic6Parser::GetStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGetStmt(this);
}

void VisualBasic6Parser::GetStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGetStmt(this);
}

VisualBasic6Parser::GetStmtContext* VisualBasic6Parser::getStmt() {
  GetStmtContext *_localctx = _tracker.createInstance<GetStmtContext>(_ctx, getState());
  enterRule(_localctx, 98, VisualBasic6Parser::RuleGetStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1177);
    match(VisualBasic6Parser::GET);
    setState(1178);
    match(VisualBasic6Parser::WS);
    setState(1179);
    valueStmt(0);
    setState(1181);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::WS) {
      setState(1180);
      match(VisualBasic6Parser::WS);
    }
    setState(1183);
    match(VisualBasic6Parser::COMMA);
    setState(1185);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 151, _ctx)) {
    case 1: {
      setState(1184);
      match(VisualBasic6Parser::WS);
      break;
    }

    default:
      break;
    }
    setState(1188);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 152, _ctx)) {
    case 1: {
      setState(1187);
      valueStmt(0);
      break;
    }

    default:
      break;
    }
    setState(1191);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::WS) {
      setState(1190);
      match(VisualBasic6Parser::WS);
    }
    setState(1193);
    match(VisualBasic6Parser::COMMA);
    setState(1195);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 154, _ctx)) {
    case 1: {
      setState(1194);
      match(VisualBasic6Parser::WS);
      break;
    }

    default:
      break;
    }
    setState(1197);
    valueStmt(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GoSubStmtContext ------------------------------------------------------------------

VisualBasic6Parser::GoSubStmtContext::GoSubStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::GoSubStmtContext::GOSUB() {
  return getToken(VisualBasic6Parser::GOSUB, 0);
}

tree::TerminalNode* VisualBasic6Parser::GoSubStmtContext::WS() {
  return getToken(VisualBasic6Parser::WS, 0);
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::GoSubStmtContext::valueStmt() {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(0);
}


size_t VisualBasic6Parser::GoSubStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleGoSubStmt;
}

void VisualBasic6Parser::GoSubStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGoSubStmt(this);
}

void VisualBasic6Parser::GoSubStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGoSubStmt(this);
}

VisualBasic6Parser::GoSubStmtContext* VisualBasic6Parser::goSubStmt() {
  GoSubStmtContext *_localctx = _tracker.createInstance<GoSubStmtContext>(_ctx, getState());
  enterRule(_localctx, 100, VisualBasic6Parser::RuleGoSubStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1199);
    match(VisualBasic6Parser::GOSUB);
    setState(1200);
    match(VisualBasic6Parser::WS);
    setState(1201);
    valueStmt(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GoToStmtContext ------------------------------------------------------------------

VisualBasic6Parser::GoToStmtContext::GoToStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::GoToStmtContext::GOTO() {
  return getToken(VisualBasic6Parser::GOTO, 0);
}

tree::TerminalNode* VisualBasic6Parser::GoToStmtContext::WS() {
  return getToken(VisualBasic6Parser::WS, 0);
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::GoToStmtContext::valueStmt() {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(0);
}


size_t VisualBasic6Parser::GoToStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleGoToStmt;
}

void VisualBasic6Parser::GoToStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGoToStmt(this);
}

void VisualBasic6Parser::GoToStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGoToStmt(this);
}

VisualBasic6Parser::GoToStmtContext* VisualBasic6Parser::goToStmt() {
  GoToStmtContext *_localctx = _tracker.createInstance<GoToStmtContext>(_ctx, getState());
  enterRule(_localctx, 102, VisualBasic6Parser::RuleGoToStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1203);
    match(VisualBasic6Parser::GOTO);
    setState(1204);
    match(VisualBasic6Parser::WS);
    setState(1205);
    valueStmt(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IfThenElseStmtContext ------------------------------------------------------------------

VisualBasic6Parser::IfThenElseStmtContext::IfThenElseStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t VisualBasic6Parser::IfThenElseStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleIfThenElseStmt;
}

void VisualBasic6Parser::IfThenElseStmtContext::copyFrom(IfThenElseStmtContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- BlockIfThenElseContext ------------------------------------------------------------------

VisualBasic6Parser::IfBlockStmtContext* VisualBasic6Parser::BlockIfThenElseContext::ifBlockStmt() {
  return getRuleContext<VisualBasic6Parser::IfBlockStmtContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::BlockIfThenElseContext::END_IF() {
  return getToken(VisualBasic6Parser::END_IF, 0);
}

std::vector<VisualBasic6Parser::IfElseIfBlockStmtContext *> VisualBasic6Parser::BlockIfThenElseContext::ifElseIfBlockStmt() {
  return getRuleContexts<VisualBasic6Parser::IfElseIfBlockStmtContext>();
}

VisualBasic6Parser::IfElseIfBlockStmtContext* VisualBasic6Parser::BlockIfThenElseContext::ifElseIfBlockStmt(size_t i) {
  return getRuleContext<VisualBasic6Parser::IfElseIfBlockStmtContext>(i);
}

VisualBasic6Parser::IfElseBlockStmtContext* VisualBasic6Parser::BlockIfThenElseContext::ifElseBlockStmt() {
  return getRuleContext<VisualBasic6Parser::IfElseBlockStmtContext>(0);
}

VisualBasic6Parser::BlockIfThenElseContext::BlockIfThenElseContext(IfThenElseStmtContext *ctx) { copyFrom(ctx); }

void VisualBasic6Parser::BlockIfThenElseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBlockIfThenElse(this);
}
void VisualBasic6Parser::BlockIfThenElseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBlockIfThenElse(this);
}
//----------------- InlineIfThenElseContext ------------------------------------------------------------------

tree::TerminalNode* VisualBasic6Parser::InlineIfThenElseContext::IF() {
  return getToken(VisualBasic6Parser::IF, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::InlineIfThenElseContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::InlineIfThenElseContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

VisualBasic6Parser::IfConditionStmtContext* VisualBasic6Parser::InlineIfThenElseContext::ifConditionStmt() {
  return getRuleContext<VisualBasic6Parser::IfConditionStmtContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::InlineIfThenElseContext::THEN() {
  return getToken(VisualBasic6Parser::THEN, 0);
}

std::vector<VisualBasic6Parser::BlockStmtContext *> VisualBasic6Parser::InlineIfThenElseContext::blockStmt() {
  return getRuleContexts<VisualBasic6Parser::BlockStmtContext>();
}

VisualBasic6Parser::BlockStmtContext* VisualBasic6Parser::InlineIfThenElseContext::blockStmt(size_t i) {
  return getRuleContext<VisualBasic6Parser::BlockStmtContext>(i);
}

tree::TerminalNode* VisualBasic6Parser::InlineIfThenElseContext::ELSE() {
  return getToken(VisualBasic6Parser::ELSE, 0);
}

VisualBasic6Parser::InlineIfThenElseContext::InlineIfThenElseContext(IfThenElseStmtContext *ctx) { copyFrom(ctx); }

void VisualBasic6Parser::InlineIfThenElseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInlineIfThenElse(this);
}
void VisualBasic6Parser::InlineIfThenElseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInlineIfThenElse(this);
}
VisualBasic6Parser::IfThenElseStmtContext* VisualBasic6Parser::ifThenElseStmt() {
  IfThenElseStmtContext *_localctx = _tracker.createInstance<IfThenElseStmtContext>(_ctx, getState());
  enterRule(_localctx, 104, VisualBasic6Parser::RuleIfThenElseStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1232);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 158, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<VisualBasic6Parser::InlineIfThenElseContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(1207);
      match(VisualBasic6Parser::IF);
      setState(1208);
      match(VisualBasic6Parser::WS);
      setState(1209);
      ifConditionStmt();
      setState(1210);
      match(VisualBasic6Parser::WS);
      setState(1211);
      match(VisualBasic6Parser::THEN);
      setState(1212);
      match(VisualBasic6Parser::WS);
      setState(1213);
      blockStmt();
      setState(1218);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 155, _ctx)) {
      case 1: {
        setState(1214);
        match(VisualBasic6Parser::WS);
        setState(1215);
        match(VisualBasic6Parser::ELSE);
        setState(1216);
        match(VisualBasic6Parser::WS);
        setState(1217);
        blockStmt();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<VisualBasic6Parser::BlockIfThenElseContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(1220);
      ifBlockStmt();
      setState(1224);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == VisualBasic6Parser::ELSEIF) {
        setState(1221);
        ifElseIfBlockStmt();
        setState(1226);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1228);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == VisualBasic6Parser::ELSE) {
        setState(1227);
        ifElseBlockStmt();
      }
      setState(1230);
      match(VisualBasic6Parser::END_IF);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IfBlockStmtContext ------------------------------------------------------------------

VisualBasic6Parser::IfBlockStmtContext::IfBlockStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::IfBlockStmtContext::IF() {
  return getToken(VisualBasic6Parser::IF, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::IfBlockStmtContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::IfBlockStmtContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

VisualBasic6Parser::IfConditionStmtContext* VisualBasic6Parser::IfBlockStmtContext::ifConditionStmt() {
  return getRuleContext<VisualBasic6Parser::IfConditionStmtContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::IfBlockStmtContext::THEN() {
  return getToken(VisualBasic6Parser::THEN, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::IfBlockStmtContext::NEWLINE() {
  return getTokens(VisualBasic6Parser::NEWLINE);
}

tree::TerminalNode* VisualBasic6Parser::IfBlockStmtContext::NEWLINE(size_t i) {
  return getToken(VisualBasic6Parser::NEWLINE, i);
}

VisualBasic6Parser::BlockContext* VisualBasic6Parser::IfBlockStmtContext::block() {
  return getRuleContext<VisualBasic6Parser::BlockContext>(0);
}


size_t VisualBasic6Parser::IfBlockStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleIfBlockStmt;
}

void VisualBasic6Parser::IfBlockStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIfBlockStmt(this);
}

void VisualBasic6Parser::IfBlockStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIfBlockStmt(this);
}

VisualBasic6Parser::IfBlockStmtContext* VisualBasic6Parser::ifBlockStmt() {
  IfBlockStmtContext *_localctx = _tracker.createInstance<IfBlockStmtContext>(_ctx, getState());
  enterRule(_localctx, 106, VisualBasic6Parser::RuleIfBlockStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1234);
    match(VisualBasic6Parser::IF);
    setState(1235);
    match(VisualBasic6Parser::WS);
    setState(1236);
    ifConditionStmt();
    setState(1237);
    match(VisualBasic6Parser::WS);
    setState(1238);
    match(VisualBasic6Parser::THEN);
    setState(1240); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1239);
      match(VisualBasic6Parser::NEWLINE);
      setState(1242); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == VisualBasic6Parser::NEWLINE);
    setState(1250);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 161, _ctx)) {
    case 1: {
      setState(1244);
      block();
      setState(1246); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(1245);
        match(VisualBasic6Parser::NEWLINE);
        setState(1248); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == VisualBasic6Parser::NEWLINE);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IfConditionStmtContext ------------------------------------------------------------------

VisualBasic6Parser::IfConditionStmtContext::IfConditionStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::IfConditionStmtContext::valueStmt() {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(0);
}


size_t VisualBasic6Parser::IfConditionStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleIfConditionStmt;
}

void VisualBasic6Parser::IfConditionStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIfConditionStmt(this);
}

void VisualBasic6Parser::IfConditionStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIfConditionStmt(this);
}

VisualBasic6Parser::IfConditionStmtContext* VisualBasic6Parser::ifConditionStmt() {
  IfConditionStmtContext *_localctx = _tracker.createInstance<IfConditionStmtContext>(_ctx, getState());
  enterRule(_localctx, 108, VisualBasic6Parser::RuleIfConditionStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1252);
    valueStmt(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IfElseIfBlockStmtContext ------------------------------------------------------------------

VisualBasic6Parser::IfElseIfBlockStmtContext::IfElseIfBlockStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::IfElseIfBlockStmtContext::ELSEIF() {
  return getToken(VisualBasic6Parser::ELSEIF, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::IfElseIfBlockStmtContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::IfElseIfBlockStmtContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

VisualBasic6Parser::IfConditionStmtContext* VisualBasic6Parser::IfElseIfBlockStmtContext::ifConditionStmt() {
  return getRuleContext<VisualBasic6Parser::IfConditionStmtContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::IfElseIfBlockStmtContext::THEN() {
  return getToken(VisualBasic6Parser::THEN, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::IfElseIfBlockStmtContext::NEWLINE() {
  return getTokens(VisualBasic6Parser::NEWLINE);
}

tree::TerminalNode* VisualBasic6Parser::IfElseIfBlockStmtContext::NEWLINE(size_t i) {
  return getToken(VisualBasic6Parser::NEWLINE, i);
}

VisualBasic6Parser::BlockContext* VisualBasic6Parser::IfElseIfBlockStmtContext::block() {
  return getRuleContext<VisualBasic6Parser::BlockContext>(0);
}


size_t VisualBasic6Parser::IfElseIfBlockStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleIfElseIfBlockStmt;
}

void VisualBasic6Parser::IfElseIfBlockStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIfElseIfBlockStmt(this);
}

void VisualBasic6Parser::IfElseIfBlockStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIfElseIfBlockStmt(this);
}

VisualBasic6Parser::IfElseIfBlockStmtContext* VisualBasic6Parser::ifElseIfBlockStmt() {
  IfElseIfBlockStmtContext *_localctx = _tracker.createInstance<IfElseIfBlockStmtContext>(_ctx, getState());
  enterRule(_localctx, 110, VisualBasic6Parser::RuleIfElseIfBlockStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1254);
    match(VisualBasic6Parser::ELSEIF);
    setState(1255);
    match(VisualBasic6Parser::WS);
    setState(1256);
    ifConditionStmt();
    setState(1257);
    match(VisualBasic6Parser::WS);
    setState(1258);
    match(VisualBasic6Parser::THEN);
    setState(1260); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1259);
      match(VisualBasic6Parser::NEWLINE);
      setState(1262); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == VisualBasic6Parser::NEWLINE);
    setState(1270);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 164, _ctx)) {
    case 1: {
      setState(1264);
      block();
      setState(1266); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(1265);
        match(VisualBasic6Parser::NEWLINE);
        setState(1268); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == VisualBasic6Parser::NEWLINE);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IfElseBlockStmtContext ------------------------------------------------------------------

VisualBasic6Parser::IfElseBlockStmtContext::IfElseBlockStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::IfElseBlockStmtContext::ELSE() {
  return getToken(VisualBasic6Parser::ELSE, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::IfElseBlockStmtContext::NEWLINE() {
  return getTokens(VisualBasic6Parser::NEWLINE);
}

tree::TerminalNode* VisualBasic6Parser::IfElseBlockStmtContext::NEWLINE(size_t i) {
  return getToken(VisualBasic6Parser::NEWLINE, i);
}

VisualBasic6Parser::BlockContext* VisualBasic6Parser::IfElseBlockStmtContext::block() {
  return getRuleContext<VisualBasic6Parser::BlockContext>(0);
}


size_t VisualBasic6Parser::IfElseBlockStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleIfElseBlockStmt;
}

void VisualBasic6Parser::IfElseBlockStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIfElseBlockStmt(this);
}

void VisualBasic6Parser::IfElseBlockStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIfElseBlockStmt(this);
}

VisualBasic6Parser::IfElseBlockStmtContext* VisualBasic6Parser::ifElseBlockStmt() {
  IfElseBlockStmtContext *_localctx = _tracker.createInstance<IfElseBlockStmtContext>(_ctx, getState());
  enterRule(_localctx, 112, VisualBasic6Parser::RuleIfElseBlockStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1272);
    match(VisualBasic6Parser::ELSE);
    setState(1274); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1273);
      match(VisualBasic6Parser::NEWLINE);
      setState(1276); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == VisualBasic6Parser::NEWLINE);
    setState(1284);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -53972826784270338) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 4544131962008240127) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 129)) & 721138890332700607) != 0) || ((((_la - 207) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 207)) & 34817) != 0)) {
      setState(1278);
      block();
      setState(1280); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(1279);
        match(VisualBasic6Parser::NEWLINE);
        setState(1282); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == VisualBasic6Parser::NEWLINE);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ImplementsStmtContext ------------------------------------------------------------------

VisualBasic6Parser::ImplementsStmtContext::ImplementsStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::ImplementsStmtContext::IMPLEMENTS() {
  return getToken(VisualBasic6Parser::IMPLEMENTS, 0);
}

tree::TerminalNode* VisualBasic6Parser::ImplementsStmtContext::WS() {
  return getToken(VisualBasic6Parser::WS, 0);
}

VisualBasic6Parser::AmbiguousIdentifierContext* VisualBasic6Parser::ImplementsStmtContext::ambiguousIdentifier() {
  return getRuleContext<VisualBasic6Parser::AmbiguousIdentifierContext>(0);
}


size_t VisualBasic6Parser::ImplementsStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleImplementsStmt;
}

void VisualBasic6Parser::ImplementsStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImplementsStmt(this);
}

void VisualBasic6Parser::ImplementsStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImplementsStmt(this);
}

VisualBasic6Parser::ImplementsStmtContext* VisualBasic6Parser::implementsStmt() {
  ImplementsStmtContext *_localctx = _tracker.createInstance<ImplementsStmtContext>(_ctx, getState());
  enterRule(_localctx, 114, VisualBasic6Parser::RuleImplementsStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1286);
    match(VisualBasic6Parser::IMPLEMENTS);
    setState(1287);
    match(VisualBasic6Parser::WS);
    setState(1288);
    ambiguousIdentifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InputStmtContext ------------------------------------------------------------------

VisualBasic6Parser::InputStmtContext::InputStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::InputStmtContext::INPUT() {
  return getToken(VisualBasic6Parser::INPUT, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::InputStmtContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::InputStmtContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

std::vector<VisualBasic6Parser::ValueStmtContext *> VisualBasic6Parser::InputStmtContext::valueStmt() {
  return getRuleContexts<VisualBasic6Parser::ValueStmtContext>();
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::InputStmtContext::valueStmt(size_t i) {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(i);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::InputStmtContext::COMMA() {
  return getTokens(VisualBasic6Parser::COMMA);
}

tree::TerminalNode* VisualBasic6Parser::InputStmtContext::COMMA(size_t i) {
  return getToken(VisualBasic6Parser::COMMA, i);
}


size_t VisualBasic6Parser::InputStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleInputStmt;
}

void VisualBasic6Parser::InputStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInputStmt(this);
}

void VisualBasic6Parser::InputStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInputStmt(this);
}

VisualBasic6Parser::InputStmtContext* VisualBasic6Parser::inputStmt() {
  InputStmtContext *_localctx = _tracker.createInstance<InputStmtContext>(_ctx, getState());
  enterRule(_localctx, 116, VisualBasic6Parser::RuleInputStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1290);
    match(VisualBasic6Parser::INPUT);
    setState(1291);
    match(VisualBasic6Parser::WS);
    setState(1292);
    valueStmt(0);
    setState(1301); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1294);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == VisualBasic6Parser::WS) {
                setState(1293);
                match(VisualBasic6Parser::WS);
              }
              setState(1296);
              match(VisualBasic6Parser::COMMA);
              setState(1298);
              _errHandler->sync(this);

              switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 169, _ctx)) {
              case 1: {
                setState(1297);
                match(VisualBasic6Parser::WS);
                break;
              }

              default:
                break;
              }
              setState(1300);
              valueStmt(0);
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1303); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 170, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KillStmtContext ------------------------------------------------------------------

VisualBasic6Parser::KillStmtContext::KillStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::KillStmtContext::KILL() {
  return getToken(VisualBasic6Parser::KILL, 0);
}

tree::TerminalNode* VisualBasic6Parser::KillStmtContext::WS() {
  return getToken(VisualBasic6Parser::WS, 0);
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::KillStmtContext::valueStmt() {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(0);
}


size_t VisualBasic6Parser::KillStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleKillStmt;
}

void VisualBasic6Parser::KillStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterKillStmt(this);
}

void VisualBasic6Parser::KillStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitKillStmt(this);
}

VisualBasic6Parser::KillStmtContext* VisualBasic6Parser::killStmt() {
  KillStmtContext *_localctx = _tracker.createInstance<KillStmtContext>(_ctx, getState());
  enterRule(_localctx, 118, VisualBasic6Parser::RuleKillStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1305);
    match(VisualBasic6Parser::KILL);
    setState(1306);
    match(VisualBasic6Parser::WS);
    setState(1307);
    valueStmt(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LetStmtContext ------------------------------------------------------------------

VisualBasic6Parser::LetStmtContext::LetStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

VisualBasic6Parser::ImplicitCallStmt_InStmtContext* VisualBasic6Parser::LetStmtContext::implicitCallStmt_InStmt() {
  return getRuleContext<VisualBasic6Parser::ImplicitCallStmt_InStmtContext>(0);
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::LetStmtContext::valueStmt() {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::LetStmtContext::EQ() {
  return getToken(VisualBasic6Parser::EQ, 0);
}

tree::TerminalNode* VisualBasic6Parser::LetStmtContext::PLUS_EQ() {
  return getToken(VisualBasic6Parser::PLUS_EQ, 0);
}

tree::TerminalNode* VisualBasic6Parser::LetStmtContext::MINUS_EQ() {
  return getToken(VisualBasic6Parser::MINUS_EQ, 0);
}

tree::TerminalNode* VisualBasic6Parser::LetStmtContext::LET() {
  return getToken(VisualBasic6Parser::LET, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::LetStmtContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::LetStmtContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}


size_t VisualBasic6Parser::LetStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleLetStmt;
}

void VisualBasic6Parser::LetStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLetStmt(this);
}

void VisualBasic6Parser::LetStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLetStmt(this);
}

VisualBasic6Parser::LetStmtContext* VisualBasic6Parser::letStmt() {
  LetStmtContext *_localctx = _tracker.createInstance<LetStmtContext>(_ctx, getState());
  enterRule(_localctx, 120, VisualBasic6Parser::RuleLetStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1311);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 171, _ctx)) {
    case 1: {
      setState(1309);
      match(VisualBasic6Parser::LET);
      setState(1310);
      match(VisualBasic6Parser::WS);
      break;
    }

    default:
      break;
    }
    setState(1313);
    implicitCallStmt_InStmt();
    setState(1315);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::WS) {
      setState(1314);
      match(VisualBasic6Parser::WS);
    }
    setState(1317);
    _la = _input->LA(1);
    if (!(((((_la - 187) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 187)) & 33793) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(1319);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 173, _ctx)) {
    case 1: {
      setState(1318);
      match(VisualBasic6Parser::WS);
      break;
    }

    default:
      break;
    }
    setState(1321);
    valueStmt(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LineInputStmtContext ------------------------------------------------------------------

VisualBasic6Parser::LineInputStmtContext::LineInputStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::LineInputStmtContext::LINE_INPUT() {
  return getToken(VisualBasic6Parser::LINE_INPUT, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::LineInputStmtContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::LineInputStmtContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

std::vector<VisualBasic6Parser::ValueStmtContext *> VisualBasic6Parser::LineInputStmtContext::valueStmt() {
  return getRuleContexts<VisualBasic6Parser::ValueStmtContext>();
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::LineInputStmtContext::valueStmt(size_t i) {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(i);
}

tree::TerminalNode* VisualBasic6Parser::LineInputStmtContext::COMMA() {
  return getToken(VisualBasic6Parser::COMMA, 0);
}


size_t VisualBasic6Parser::LineInputStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleLineInputStmt;
}

void VisualBasic6Parser::LineInputStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLineInputStmt(this);
}

void VisualBasic6Parser::LineInputStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLineInputStmt(this);
}

VisualBasic6Parser::LineInputStmtContext* VisualBasic6Parser::lineInputStmt() {
  LineInputStmtContext *_localctx = _tracker.createInstance<LineInputStmtContext>(_ctx, getState());
  enterRule(_localctx, 122, VisualBasic6Parser::RuleLineInputStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1323);
    match(VisualBasic6Parser::LINE_INPUT);
    setState(1324);
    match(VisualBasic6Parser::WS);
    setState(1325);
    valueStmt(0);
    setState(1327);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::WS) {
      setState(1326);
      match(VisualBasic6Parser::WS);
    }
    setState(1329);
    match(VisualBasic6Parser::COMMA);
    setState(1331);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 175, _ctx)) {
    case 1: {
      setState(1330);
      match(VisualBasic6Parser::WS);
      break;
    }

    default:
      break;
    }
    setState(1333);
    valueStmt(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LoadStmtContext ------------------------------------------------------------------

VisualBasic6Parser::LoadStmtContext::LoadStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::LoadStmtContext::LOAD() {
  return getToken(VisualBasic6Parser::LOAD, 0);
}

tree::TerminalNode* VisualBasic6Parser::LoadStmtContext::WS() {
  return getToken(VisualBasic6Parser::WS, 0);
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::LoadStmtContext::valueStmt() {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(0);
}


size_t VisualBasic6Parser::LoadStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleLoadStmt;
}

void VisualBasic6Parser::LoadStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLoadStmt(this);
}

void VisualBasic6Parser::LoadStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLoadStmt(this);
}

VisualBasic6Parser::LoadStmtContext* VisualBasic6Parser::loadStmt() {
  LoadStmtContext *_localctx = _tracker.createInstance<LoadStmtContext>(_ctx, getState());
  enterRule(_localctx, 124, VisualBasic6Parser::RuleLoadStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1335);
    match(VisualBasic6Parser::LOAD);
    setState(1336);
    match(VisualBasic6Parser::WS);
    setState(1337);
    valueStmt(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LockStmtContext ------------------------------------------------------------------

VisualBasic6Parser::LockStmtContext::LockStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::LockStmtContext::LOCK() {
  return getToken(VisualBasic6Parser::LOCK, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::LockStmtContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::LockStmtContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

std::vector<VisualBasic6Parser::ValueStmtContext *> VisualBasic6Parser::LockStmtContext::valueStmt() {
  return getRuleContexts<VisualBasic6Parser::ValueStmtContext>();
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::LockStmtContext::valueStmt(size_t i) {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(i);
}

tree::TerminalNode* VisualBasic6Parser::LockStmtContext::COMMA() {
  return getToken(VisualBasic6Parser::COMMA, 0);
}

tree::TerminalNode* VisualBasic6Parser::LockStmtContext::TO() {
  return getToken(VisualBasic6Parser::TO, 0);
}


size_t VisualBasic6Parser::LockStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleLockStmt;
}

void VisualBasic6Parser::LockStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLockStmt(this);
}

void VisualBasic6Parser::LockStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLockStmt(this);
}

VisualBasic6Parser::LockStmtContext* VisualBasic6Parser::lockStmt() {
  LockStmtContext *_localctx = _tracker.createInstance<LockStmtContext>(_ctx, getState());
  enterRule(_localctx, 126, VisualBasic6Parser::RuleLockStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1339);
    match(VisualBasic6Parser::LOCK);
    setState(1340);
    match(VisualBasic6Parser::WS);
    setState(1341);
    valueStmt(0);
    setState(1356);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 179, _ctx)) {
    case 1: {
      setState(1343);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == VisualBasic6Parser::WS) {
        setState(1342);
        match(VisualBasic6Parser::WS);
      }
      setState(1345);
      match(VisualBasic6Parser::COMMA);
      setState(1347);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 177, _ctx)) {
      case 1: {
        setState(1346);
        match(VisualBasic6Parser::WS);
        break;
      }

      default:
        break;
      }
      setState(1349);
      valueStmt(0);
      setState(1354);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 178, _ctx)) {
      case 1: {
        setState(1350);
        match(VisualBasic6Parser::WS);
        setState(1351);
        match(VisualBasic6Parser::TO);
        setState(1352);
        match(VisualBasic6Parser::WS);
        setState(1353);
        valueStmt(0);
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LsetStmtContext ------------------------------------------------------------------

VisualBasic6Parser::LsetStmtContext::LsetStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::LsetStmtContext::LSET() {
  return getToken(VisualBasic6Parser::LSET, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::LsetStmtContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::LsetStmtContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

VisualBasic6Parser::ImplicitCallStmt_InStmtContext* VisualBasic6Parser::LsetStmtContext::implicitCallStmt_InStmt() {
  return getRuleContext<VisualBasic6Parser::ImplicitCallStmt_InStmtContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::LsetStmtContext::EQ() {
  return getToken(VisualBasic6Parser::EQ, 0);
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::LsetStmtContext::valueStmt() {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(0);
}


size_t VisualBasic6Parser::LsetStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleLsetStmt;
}

void VisualBasic6Parser::LsetStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLsetStmt(this);
}

void VisualBasic6Parser::LsetStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLsetStmt(this);
}

VisualBasic6Parser::LsetStmtContext* VisualBasic6Parser::lsetStmt() {
  LsetStmtContext *_localctx = _tracker.createInstance<LsetStmtContext>(_ctx, getState());
  enterRule(_localctx, 128, VisualBasic6Parser::RuleLsetStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1358);
    match(VisualBasic6Parser::LSET);
    setState(1359);
    match(VisualBasic6Parser::WS);
    setState(1360);
    implicitCallStmt_InStmt();
    setState(1362);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::WS) {
      setState(1361);
      match(VisualBasic6Parser::WS);
    }
    setState(1364);
    match(VisualBasic6Parser::EQ);
    setState(1366);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 181, _ctx)) {
    case 1: {
      setState(1365);
      match(VisualBasic6Parser::WS);
      break;
    }

    default:
      break;
    }
    setState(1368);
    valueStmt(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MacroIfThenElseStmtContext ------------------------------------------------------------------

VisualBasic6Parser::MacroIfThenElseStmtContext::MacroIfThenElseStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

VisualBasic6Parser::MacroIfBlockStmtContext* VisualBasic6Parser::MacroIfThenElseStmtContext::macroIfBlockStmt() {
  return getRuleContext<VisualBasic6Parser::MacroIfBlockStmtContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::MacroIfThenElseStmtContext::MACRO_END_IF() {
  return getToken(VisualBasic6Parser::MACRO_END_IF, 0);
}

std::vector<VisualBasic6Parser::MacroElseIfBlockStmtContext *> VisualBasic6Parser::MacroIfThenElseStmtContext::macroElseIfBlockStmt() {
  return getRuleContexts<VisualBasic6Parser::MacroElseIfBlockStmtContext>();
}

VisualBasic6Parser::MacroElseIfBlockStmtContext* VisualBasic6Parser::MacroIfThenElseStmtContext::macroElseIfBlockStmt(size_t i) {
  return getRuleContext<VisualBasic6Parser::MacroElseIfBlockStmtContext>(i);
}

VisualBasic6Parser::MacroElseBlockStmtContext* VisualBasic6Parser::MacroIfThenElseStmtContext::macroElseBlockStmt() {
  return getRuleContext<VisualBasic6Parser::MacroElseBlockStmtContext>(0);
}


size_t VisualBasic6Parser::MacroIfThenElseStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleMacroIfThenElseStmt;
}

void VisualBasic6Parser::MacroIfThenElseStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMacroIfThenElseStmt(this);
}

void VisualBasic6Parser::MacroIfThenElseStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMacroIfThenElseStmt(this);
}

VisualBasic6Parser::MacroIfThenElseStmtContext* VisualBasic6Parser::macroIfThenElseStmt() {
  MacroIfThenElseStmtContext *_localctx = _tracker.createInstance<MacroIfThenElseStmtContext>(_ctx, getState());
  enterRule(_localctx, 130, VisualBasic6Parser::RuleMacroIfThenElseStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1370);
    macroIfBlockStmt();
    setState(1374);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == VisualBasic6Parser::MACRO_ELSEIF) {
      setState(1371);
      macroElseIfBlockStmt();
      setState(1376);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1378);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::MACRO_ELSE) {
      setState(1377);
      macroElseBlockStmt();
    }
    setState(1380);
    match(VisualBasic6Parser::MACRO_END_IF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MacroIfBlockStmtContext ------------------------------------------------------------------

VisualBasic6Parser::MacroIfBlockStmtContext::MacroIfBlockStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::MacroIfBlockStmtContext::MACRO_IF() {
  return getToken(VisualBasic6Parser::MACRO_IF, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::MacroIfBlockStmtContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::MacroIfBlockStmtContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

VisualBasic6Parser::IfConditionStmtContext* VisualBasic6Parser::MacroIfBlockStmtContext::ifConditionStmt() {
  return getRuleContext<VisualBasic6Parser::IfConditionStmtContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::MacroIfBlockStmtContext::THEN() {
  return getToken(VisualBasic6Parser::THEN, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::MacroIfBlockStmtContext::NEWLINE() {
  return getTokens(VisualBasic6Parser::NEWLINE);
}

tree::TerminalNode* VisualBasic6Parser::MacroIfBlockStmtContext::NEWLINE(size_t i) {
  return getToken(VisualBasic6Parser::NEWLINE, i);
}

VisualBasic6Parser::ModuleBodyContext* VisualBasic6Parser::MacroIfBlockStmtContext::moduleBody() {
  return getRuleContext<VisualBasic6Parser::ModuleBodyContext>(0);
}


size_t VisualBasic6Parser::MacroIfBlockStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleMacroIfBlockStmt;
}

void VisualBasic6Parser::MacroIfBlockStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMacroIfBlockStmt(this);
}

void VisualBasic6Parser::MacroIfBlockStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMacroIfBlockStmt(this);
}

VisualBasic6Parser::MacroIfBlockStmtContext* VisualBasic6Parser::macroIfBlockStmt() {
  MacroIfBlockStmtContext *_localctx = _tracker.createInstance<MacroIfBlockStmtContext>(_ctx, getState());
  enterRule(_localctx, 132, VisualBasic6Parser::RuleMacroIfBlockStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1382);
    match(VisualBasic6Parser::MACRO_IF);
    setState(1383);
    match(VisualBasic6Parser::WS);
    setState(1384);
    ifConditionStmt();
    setState(1385);
    match(VisualBasic6Parser::WS);
    setState(1386);
    match(VisualBasic6Parser::THEN);
    setState(1388); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1387);
      match(VisualBasic6Parser::NEWLINE);
      setState(1390); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == VisualBasic6Parser::NEWLINE);
    setState(1398);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -53972826784270338) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & -62008590337) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & 1442277780665401215) != 0) || ((((_la - 207) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 207)) & 34817) != 0)) {
      setState(1392);
      moduleBody();
      setState(1394); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(1393);
        match(VisualBasic6Parser::NEWLINE);
        setState(1396); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == VisualBasic6Parser::NEWLINE);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MacroElseIfBlockStmtContext ------------------------------------------------------------------

VisualBasic6Parser::MacroElseIfBlockStmtContext::MacroElseIfBlockStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::MacroElseIfBlockStmtContext::MACRO_ELSEIF() {
  return getToken(VisualBasic6Parser::MACRO_ELSEIF, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::MacroElseIfBlockStmtContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::MacroElseIfBlockStmtContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

VisualBasic6Parser::IfConditionStmtContext* VisualBasic6Parser::MacroElseIfBlockStmtContext::ifConditionStmt() {
  return getRuleContext<VisualBasic6Parser::IfConditionStmtContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::MacroElseIfBlockStmtContext::THEN() {
  return getToken(VisualBasic6Parser::THEN, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::MacroElseIfBlockStmtContext::NEWLINE() {
  return getTokens(VisualBasic6Parser::NEWLINE);
}

tree::TerminalNode* VisualBasic6Parser::MacroElseIfBlockStmtContext::NEWLINE(size_t i) {
  return getToken(VisualBasic6Parser::NEWLINE, i);
}

VisualBasic6Parser::ModuleBodyContext* VisualBasic6Parser::MacroElseIfBlockStmtContext::moduleBody() {
  return getRuleContext<VisualBasic6Parser::ModuleBodyContext>(0);
}


size_t VisualBasic6Parser::MacroElseIfBlockStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleMacroElseIfBlockStmt;
}

void VisualBasic6Parser::MacroElseIfBlockStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMacroElseIfBlockStmt(this);
}

void VisualBasic6Parser::MacroElseIfBlockStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMacroElseIfBlockStmt(this);
}

VisualBasic6Parser::MacroElseIfBlockStmtContext* VisualBasic6Parser::macroElseIfBlockStmt() {
  MacroElseIfBlockStmtContext *_localctx = _tracker.createInstance<MacroElseIfBlockStmtContext>(_ctx, getState());
  enterRule(_localctx, 134, VisualBasic6Parser::RuleMacroElseIfBlockStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1400);
    match(VisualBasic6Parser::MACRO_ELSEIF);
    setState(1401);
    match(VisualBasic6Parser::WS);
    setState(1402);
    ifConditionStmt();
    setState(1403);
    match(VisualBasic6Parser::WS);
    setState(1404);
    match(VisualBasic6Parser::THEN);
    setState(1406); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1405);
      match(VisualBasic6Parser::NEWLINE);
      setState(1408); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == VisualBasic6Parser::NEWLINE);
    setState(1416);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -53972826784270338) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & -62008590337) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & 1442277780665401215) != 0) || ((((_la - 207) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 207)) & 34817) != 0)) {
      setState(1410);
      moduleBody();
      setState(1412); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(1411);
        match(VisualBasic6Parser::NEWLINE);
        setState(1414); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == VisualBasic6Parser::NEWLINE);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MacroElseBlockStmtContext ------------------------------------------------------------------

VisualBasic6Parser::MacroElseBlockStmtContext::MacroElseBlockStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::MacroElseBlockStmtContext::MACRO_ELSE() {
  return getToken(VisualBasic6Parser::MACRO_ELSE, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::MacroElseBlockStmtContext::NEWLINE() {
  return getTokens(VisualBasic6Parser::NEWLINE);
}

tree::TerminalNode* VisualBasic6Parser::MacroElseBlockStmtContext::NEWLINE(size_t i) {
  return getToken(VisualBasic6Parser::NEWLINE, i);
}

VisualBasic6Parser::ModuleBodyContext* VisualBasic6Parser::MacroElseBlockStmtContext::moduleBody() {
  return getRuleContext<VisualBasic6Parser::ModuleBodyContext>(0);
}


size_t VisualBasic6Parser::MacroElseBlockStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleMacroElseBlockStmt;
}

void VisualBasic6Parser::MacroElseBlockStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMacroElseBlockStmt(this);
}

void VisualBasic6Parser::MacroElseBlockStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMacroElseBlockStmt(this);
}

VisualBasic6Parser::MacroElseBlockStmtContext* VisualBasic6Parser::macroElseBlockStmt() {
  MacroElseBlockStmtContext *_localctx = _tracker.createInstance<MacroElseBlockStmtContext>(_ctx, getState());
  enterRule(_localctx, 136, VisualBasic6Parser::RuleMacroElseBlockStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1418);
    match(VisualBasic6Parser::MACRO_ELSE);
    setState(1420); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1419);
      match(VisualBasic6Parser::NEWLINE);
      setState(1422); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == VisualBasic6Parser::NEWLINE);
    setState(1430);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -53972826784270338) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & -62008590337) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & 1442277780665401215) != 0) || ((((_la - 207) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 207)) & 34817) != 0)) {
      setState(1424);
      moduleBody();
      setState(1426); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(1425);
        match(VisualBasic6Parser::NEWLINE);
        setState(1428); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == VisualBasic6Parser::NEWLINE);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MidStmtContext ------------------------------------------------------------------

VisualBasic6Parser::MidStmtContext::MidStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::MidStmtContext::MID() {
  return getToken(VisualBasic6Parser::MID, 0);
}

tree::TerminalNode* VisualBasic6Parser::MidStmtContext::LPAREN() {
  return getToken(VisualBasic6Parser::LPAREN, 0);
}

VisualBasic6Parser::ArgsCallContext* VisualBasic6Parser::MidStmtContext::argsCall() {
  return getRuleContext<VisualBasic6Parser::ArgsCallContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::MidStmtContext::RPAREN() {
  return getToken(VisualBasic6Parser::RPAREN, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::MidStmtContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::MidStmtContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}


size_t VisualBasic6Parser::MidStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleMidStmt;
}

void VisualBasic6Parser::MidStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMidStmt(this);
}

void VisualBasic6Parser::MidStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMidStmt(this);
}

VisualBasic6Parser::MidStmtContext* VisualBasic6Parser::midStmt() {
  MidStmtContext *_localctx = _tracker.createInstance<MidStmtContext>(_ctx, getState());
  enterRule(_localctx, 138, VisualBasic6Parser::RuleMidStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1432);
    match(VisualBasic6Parser::MID);
    setState(1434);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::WS) {
      setState(1433);
      match(VisualBasic6Parser::WS);
    }
    setState(1436);
    match(VisualBasic6Parser::LPAREN);
    setState(1438);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 194, _ctx)) {
    case 1: {
      setState(1437);
      match(VisualBasic6Parser::WS);
      break;
    }

    default:
      break;
    }
    setState(1440);
    argsCall();
    setState(1442);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::WS) {
      setState(1441);
      match(VisualBasic6Parser::WS);
    }
    setState(1444);
    match(VisualBasic6Parser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MkdirStmtContext ------------------------------------------------------------------

VisualBasic6Parser::MkdirStmtContext::MkdirStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::MkdirStmtContext::MKDIR() {
  return getToken(VisualBasic6Parser::MKDIR, 0);
}

tree::TerminalNode* VisualBasic6Parser::MkdirStmtContext::WS() {
  return getToken(VisualBasic6Parser::WS, 0);
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::MkdirStmtContext::valueStmt() {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(0);
}


size_t VisualBasic6Parser::MkdirStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleMkdirStmt;
}

void VisualBasic6Parser::MkdirStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMkdirStmt(this);
}

void VisualBasic6Parser::MkdirStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMkdirStmt(this);
}

VisualBasic6Parser::MkdirStmtContext* VisualBasic6Parser::mkdirStmt() {
  MkdirStmtContext *_localctx = _tracker.createInstance<MkdirStmtContext>(_ctx, getState());
  enterRule(_localctx, 140, VisualBasic6Parser::RuleMkdirStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1446);
    match(VisualBasic6Parser::MKDIR);
    setState(1447);
    match(VisualBasic6Parser::WS);
    setState(1448);
    valueStmt(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NameStmtContext ------------------------------------------------------------------

VisualBasic6Parser::NameStmtContext::NameStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::NameStmtContext::NAME() {
  return getToken(VisualBasic6Parser::NAME, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::NameStmtContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::NameStmtContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

std::vector<VisualBasic6Parser::ValueStmtContext *> VisualBasic6Parser::NameStmtContext::valueStmt() {
  return getRuleContexts<VisualBasic6Parser::ValueStmtContext>();
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::NameStmtContext::valueStmt(size_t i) {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(i);
}

tree::TerminalNode* VisualBasic6Parser::NameStmtContext::AS() {
  return getToken(VisualBasic6Parser::AS, 0);
}


size_t VisualBasic6Parser::NameStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleNameStmt;
}

void VisualBasic6Parser::NameStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNameStmt(this);
}

void VisualBasic6Parser::NameStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNameStmt(this);
}

VisualBasic6Parser::NameStmtContext* VisualBasic6Parser::nameStmt() {
  NameStmtContext *_localctx = _tracker.createInstance<NameStmtContext>(_ctx, getState());
  enterRule(_localctx, 142, VisualBasic6Parser::RuleNameStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1450);
    match(VisualBasic6Parser::NAME);
    setState(1451);
    match(VisualBasic6Parser::WS);
    setState(1452);
    valueStmt(0);
    setState(1453);
    match(VisualBasic6Parser::WS);
    setState(1454);
    match(VisualBasic6Parser::AS);
    setState(1455);
    match(VisualBasic6Parser::WS);
    setState(1456);
    valueStmt(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OnErrorStmtContext ------------------------------------------------------------------

VisualBasic6Parser::OnErrorStmtContext::OnErrorStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::OnErrorStmtContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::OnErrorStmtContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

tree::TerminalNode* VisualBasic6Parser::OnErrorStmtContext::ON_ERROR() {
  return getToken(VisualBasic6Parser::ON_ERROR, 0);
}

tree::TerminalNode* VisualBasic6Parser::OnErrorStmtContext::ON_LOCAL_ERROR() {
  return getToken(VisualBasic6Parser::ON_LOCAL_ERROR, 0);
}

tree::TerminalNode* VisualBasic6Parser::OnErrorStmtContext::GOTO() {
  return getToken(VisualBasic6Parser::GOTO, 0);
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::OnErrorStmtContext::valueStmt() {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::OnErrorStmtContext::RESUME() {
  return getToken(VisualBasic6Parser::RESUME, 0);
}

tree::TerminalNode* VisualBasic6Parser::OnErrorStmtContext::NEXT() {
  return getToken(VisualBasic6Parser::NEXT, 0);
}

tree::TerminalNode* VisualBasic6Parser::OnErrorStmtContext::COLON() {
  return getToken(VisualBasic6Parser::COLON, 0);
}


size_t VisualBasic6Parser::OnErrorStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleOnErrorStmt;
}

void VisualBasic6Parser::OnErrorStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOnErrorStmt(this);
}

void VisualBasic6Parser::OnErrorStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOnErrorStmt(this);
}

VisualBasic6Parser::OnErrorStmtContext* VisualBasic6Parser::onErrorStmt() {
  OnErrorStmtContext *_localctx = _tracker.createInstance<OnErrorStmtContext>(_ctx, getState());
  enterRule(_localctx, 144, VisualBasic6Parser::RuleOnErrorStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1458);
    _la = _input->LA(1);
    if (!(_la == VisualBasic6Parser::ON_ERROR

    || _la == VisualBasic6Parser::ON_LOCAL_ERROR)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(1459);
    match(VisualBasic6Parser::WS);
    setState(1469);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case VisualBasic6Parser::GOTO: {
        setState(1460);
        match(VisualBasic6Parser::GOTO);
        setState(1461);
        match(VisualBasic6Parser::WS);
        setState(1462);
        valueStmt(0);
        setState(1464);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == VisualBasic6Parser::COLON) {
          setState(1463);
          match(VisualBasic6Parser::COLON);
        }
        break;
      }

      case VisualBasic6Parser::RESUME: {
        setState(1466);
        match(VisualBasic6Parser::RESUME);
        setState(1467);
        match(VisualBasic6Parser::WS);
        setState(1468);
        match(VisualBasic6Parser::NEXT);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OnGoToStmtContext ------------------------------------------------------------------

VisualBasic6Parser::OnGoToStmtContext::OnGoToStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::OnGoToStmtContext::ON() {
  return getToken(VisualBasic6Parser::ON, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::OnGoToStmtContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::OnGoToStmtContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

std::vector<VisualBasic6Parser::ValueStmtContext *> VisualBasic6Parser::OnGoToStmtContext::valueStmt() {
  return getRuleContexts<VisualBasic6Parser::ValueStmtContext>();
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::OnGoToStmtContext::valueStmt(size_t i) {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(i);
}

tree::TerminalNode* VisualBasic6Parser::OnGoToStmtContext::GOTO() {
  return getToken(VisualBasic6Parser::GOTO, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::OnGoToStmtContext::COMMA() {
  return getTokens(VisualBasic6Parser::COMMA);
}

tree::TerminalNode* VisualBasic6Parser::OnGoToStmtContext::COMMA(size_t i) {
  return getToken(VisualBasic6Parser::COMMA, i);
}


size_t VisualBasic6Parser::OnGoToStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleOnGoToStmt;
}

void VisualBasic6Parser::OnGoToStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOnGoToStmt(this);
}

void VisualBasic6Parser::OnGoToStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOnGoToStmt(this);
}

VisualBasic6Parser::OnGoToStmtContext* VisualBasic6Parser::onGoToStmt() {
  OnGoToStmtContext *_localctx = _tracker.createInstance<OnGoToStmtContext>(_ctx, getState());
  enterRule(_localctx, 146, VisualBasic6Parser::RuleOnGoToStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1471);
    match(VisualBasic6Parser::ON);
    setState(1472);
    match(VisualBasic6Parser::WS);
    setState(1473);
    valueStmt(0);
    setState(1474);
    match(VisualBasic6Parser::WS);
    setState(1475);
    match(VisualBasic6Parser::GOTO);
    setState(1476);
    match(VisualBasic6Parser::WS);
    setState(1477);
    valueStmt(0);
    setState(1488);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 200, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1479);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == VisualBasic6Parser::WS) {
          setState(1478);
          match(VisualBasic6Parser::WS);
        }
        setState(1481);
        match(VisualBasic6Parser::COMMA);
        setState(1483);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 199, _ctx)) {
        case 1: {
          setState(1482);
          match(VisualBasic6Parser::WS);
          break;
        }

        default:
          break;
        }
        setState(1485);
        valueStmt(0); 
      }
      setState(1490);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 200, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OnGoSubStmtContext ------------------------------------------------------------------

VisualBasic6Parser::OnGoSubStmtContext::OnGoSubStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::OnGoSubStmtContext::ON() {
  return getToken(VisualBasic6Parser::ON, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::OnGoSubStmtContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::OnGoSubStmtContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

std::vector<VisualBasic6Parser::ValueStmtContext *> VisualBasic6Parser::OnGoSubStmtContext::valueStmt() {
  return getRuleContexts<VisualBasic6Parser::ValueStmtContext>();
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::OnGoSubStmtContext::valueStmt(size_t i) {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(i);
}

tree::TerminalNode* VisualBasic6Parser::OnGoSubStmtContext::GOSUB() {
  return getToken(VisualBasic6Parser::GOSUB, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::OnGoSubStmtContext::COMMA() {
  return getTokens(VisualBasic6Parser::COMMA);
}

tree::TerminalNode* VisualBasic6Parser::OnGoSubStmtContext::COMMA(size_t i) {
  return getToken(VisualBasic6Parser::COMMA, i);
}


size_t VisualBasic6Parser::OnGoSubStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleOnGoSubStmt;
}

void VisualBasic6Parser::OnGoSubStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOnGoSubStmt(this);
}

void VisualBasic6Parser::OnGoSubStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOnGoSubStmt(this);
}

VisualBasic6Parser::OnGoSubStmtContext* VisualBasic6Parser::onGoSubStmt() {
  OnGoSubStmtContext *_localctx = _tracker.createInstance<OnGoSubStmtContext>(_ctx, getState());
  enterRule(_localctx, 148, VisualBasic6Parser::RuleOnGoSubStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1491);
    match(VisualBasic6Parser::ON);
    setState(1492);
    match(VisualBasic6Parser::WS);
    setState(1493);
    valueStmt(0);
    setState(1494);
    match(VisualBasic6Parser::WS);
    setState(1495);
    match(VisualBasic6Parser::GOSUB);
    setState(1496);
    match(VisualBasic6Parser::WS);
    setState(1497);
    valueStmt(0);
    setState(1508);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 203, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1499);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == VisualBasic6Parser::WS) {
          setState(1498);
          match(VisualBasic6Parser::WS);
        }
        setState(1501);
        match(VisualBasic6Parser::COMMA);
        setState(1503);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 202, _ctx)) {
        case 1: {
          setState(1502);
          match(VisualBasic6Parser::WS);
          break;
        }

        default:
          break;
        }
        setState(1505);
        valueStmt(0); 
      }
      setState(1510);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 203, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OpenStmtContext ------------------------------------------------------------------

VisualBasic6Parser::OpenStmtContext::OpenStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::OpenStmtContext::OPEN() {
  return getToken(VisualBasic6Parser::OPEN, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::OpenStmtContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::OpenStmtContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

std::vector<VisualBasic6Parser::ValueStmtContext *> VisualBasic6Parser::OpenStmtContext::valueStmt() {
  return getRuleContexts<VisualBasic6Parser::ValueStmtContext>();
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::OpenStmtContext::valueStmt(size_t i) {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(i);
}

tree::TerminalNode* VisualBasic6Parser::OpenStmtContext::FOR() {
  return getToken(VisualBasic6Parser::FOR, 0);
}

tree::TerminalNode* VisualBasic6Parser::OpenStmtContext::AS() {
  return getToken(VisualBasic6Parser::AS, 0);
}

tree::TerminalNode* VisualBasic6Parser::OpenStmtContext::APPEND() {
  return getToken(VisualBasic6Parser::APPEND, 0);
}

tree::TerminalNode* VisualBasic6Parser::OpenStmtContext::BINARY() {
  return getToken(VisualBasic6Parser::BINARY, 0);
}

tree::TerminalNode* VisualBasic6Parser::OpenStmtContext::INPUT() {
  return getToken(VisualBasic6Parser::INPUT, 0);
}

tree::TerminalNode* VisualBasic6Parser::OpenStmtContext::OUTPUT() {
  return getToken(VisualBasic6Parser::OUTPUT, 0);
}

tree::TerminalNode* VisualBasic6Parser::OpenStmtContext::RANDOM() {
  return getToken(VisualBasic6Parser::RANDOM, 0);
}

tree::TerminalNode* VisualBasic6Parser::OpenStmtContext::ACCESS() {
  return getToken(VisualBasic6Parser::ACCESS, 0);
}

tree::TerminalNode* VisualBasic6Parser::OpenStmtContext::LEN() {
  return getToken(VisualBasic6Parser::LEN, 0);
}

tree::TerminalNode* VisualBasic6Parser::OpenStmtContext::EQ() {
  return getToken(VisualBasic6Parser::EQ, 0);
}

tree::TerminalNode* VisualBasic6Parser::OpenStmtContext::READ() {
  return getToken(VisualBasic6Parser::READ, 0);
}

tree::TerminalNode* VisualBasic6Parser::OpenStmtContext::WRITE() {
  return getToken(VisualBasic6Parser::WRITE, 0);
}

tree::TerminalNode* VisualBasic6Parser::OpenStmtContext::READ_WRITE() {
  return getToken(VisualBasic6Parser::READ_WRITE, 0);
}

tree::TerminalNode* VisualBasic6Parser::OpenStmtContext::SHARED() {
  return getToken(VisualBasic6Parser::SHARED, 0);
}

tree::TerminalNode* VisualBasic6Parser::OpenStmtContext::LOCK_READ() {
  return getToken(VisualBasic6Parser::LOCK_READ, 0);
}

tree::TerminalNode* VisualBasic6Parser::OpenStmtContext::LOCK_WRITE() {
  return getToken(VisualBasic6Parser::LOCK_WRITE, 0);
}

tree::TerminalNode* VisualBasic6Parser::OpenStmtContext::LOCK_READ_WRITE() {
  return getToken(VisualBasic6Parser::LOCK_READ_WRITE, 0);
}


size_t VisualBasic6Parser::OpenStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleOpenStmt;
}

void VisualBasic6Parser::OpenStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOpenStmt(this);
}

void VisualBasic6Parser::OpenStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOpenStmt(this);
}

VisualBasic6Parser::OpenStmtContext* VisualBasic6Parser::openStmt() {
  OpenStmtContext *_localctx = _tracker.createInstance<OpenStmtContext>(_ctx, getState());
  enterRule(_localctx, 150, VisualBasic6Parser::RuleOpenStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1511);
    match(VisualBasic6Parser::OPEN);
    setState(1512);
    match(VisualBasic6Parser::WS);
    setState(1513);
    valueStmt(0);
    setState(1514);
    match(VisualBasic6Parser::WS);
    setState(1515);
    match(VisualBasic6Parser::FOR);
    setState(1516);
    match(VisualBasic6Parser::WS);
    setState(1517);
    _la = _input->LA(1);
    if (!(_la == VisualBasic6Parser::APPEND

    || _la == VisualBasic6Parser::BINARY || ((((_la - 79) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 79)) & 4507997673881601) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(1522);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 204, _ctx)) {
    case 1: {
      setState(1518);
      match(VisualBasic6Parser::WS);
      setState(1519);
      match(VisualBasic6Parser::ACCESS);
      setState(1520);
      match(VisualBasic6Parser::WS);
      setState(1521);
      _la = _input->LA(1);
      if (!(((((_la - 134) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 134)) & 4398046511107) != 0))) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    default:
      break;
    }
    setState(1526);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 205, _ctx)) {
    case 1: {
      setState(1524);
      match(VisualBasic6Parser::WS);
      setState(1525);
      _la = _input->LA(1);
      if (!(((((_la - 92) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 92)) & 288230376151711751) != 0))) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    default:
      break;
    }
    setState(1528);
    match(VisualBasic6Parser::WS);
    setState(1529);
    match(VisualBasic6Parser::AS);
    setState(1530);
    match(VisualBasic6Parser::WS);
    setState(1531);
    valueStmt(0);
    setState(1542);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 208, _ctx)) {
    case 1: {
      setState(1532);
      match(VisualBasic6Parser::WS);
      setState(1533);
      match(VisualBasic6Parser::LEN);
      setState(1535);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == VisualBasic6Parser::WS) {
        setState(1534);
        match(VisualBasic6Parser::WS);
      }
      setState(1537);
      match(VisualBasic6Parser::EQ);
      setState(1539);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 207, _ctx)) {
      case 1: {
        setState(1538);
        match(VisualBasic6Parser::WS);
        break;
      }

      default:
        break;
      }
      setState(1541);
      valueStmt(0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OutputListContext ------------------------------------------------------------------

VisualBasic6Parser::OutputListContext::OutputListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<VisualBasic6Parser::OutputList_ExpressionContext *> VisualBasic6Parser::OutputListContext::outputList_Expression() {
  return getRuleContexts<VisualBasic6Parser::OutputList_ExpressionContext>();
}

VisualBasic6Parser::OutputList_ExpressionContext* VisualBasic6Parser::OutputListContext::outputList_Expression(size_t i) {
  return getRuleContext<VisualBasic6Parser::OutputList_ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::OutputListContext::SEMICOLON() {
  return getTokens(VisualBasic6Parser::SEMICOLON);
}

tree::TerminalNode* VisualBasic6Parser::OutputListContext::SEMICOLON(size_t i) {
  return getToken(VisualBasic6Parser::SEMICOLON, i);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::OutputListContext::COMMA() {
  return getTokens(VisualBasic6Parser::COMMA);
}

tree::TerminalNode* VisualBasic6Parser::OutputListContext::COMMA(size_t i) {
  return getToken(VisualBasic6Parser::COMMA, i);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::OutputListContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::OutputListContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}


size_t VisualBasic6Parser::OutputListContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleOutputList;
}

void VisualBasic6Parser::OutputListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOutputList(this);
}

void VisualBasic6Parser::OutputListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOutputList(this);
}

VisualBasic6Parser::OutputListContext* VisualBasic6Parser::outputList() {
  OutputListContext *_localctx = _tracker.createInstance<OutputListContext>(_ctx, getState());
  enterRule(_localctx, 152, VisualBasic6Parser::RuleOutputList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1577);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 218, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1544);
      outputList_Expression();
      setState(1557);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 212, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1546);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == VisualBasic6Parser::WS) {
            setState(1545);
            match(VisualBasic6Parser::WS);
          }
          setState(1548);
          _la = _input->LA(1);
          if (!(_la == VisualBasic6Parser::COMMA

          || _la == VisualBasic6Parser::SEMICOLON)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(1550);
          _errHandler->sync(this);

          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 210, _ctx)) {
          case 1: {
            setState(1549);
            match(VisualBasic6Parser::WS);
            break;
          }

          default:
            break;
          }
          setState(1553);
          _errHandler->sync(this);

          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 211, _ctx)) {
          case 1: {
            setState(1552);
            outputList_Expression();
            break;
          }

          default:
            break;
          } 
        }
        setState(1559);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 212, _ctx);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1561);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 213, _ctx)) {
      case 1: {
        setState(1560);
        outputList_Expression();
        break;
      }

      default:
        break;
      }
      setState(1573); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(1564);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == VisualBasic6Parser::WS) {
                  setState(1563);
                  match(VisualBasic6Parser::WS);
                }
                setState(1566);
                _la = _input->LA(1);
                if (!(_la == VisualBasic6Parser::COMMA

                || _la == VisualBasic6Parser::SEMICOLON)) {
                _errHandler->recoverInline(this);
                }
                else {
                  _errHandler->reportMatch(this);
                  consume();
                }
                setState(1568);
                _errHandler->sync(this);

                switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 215, _ctx)) {
                case 1: {
                  setState(1567);
                  match(VisualBasic6Parser::WS);
                  break;
                }

                default:
                  break;
                }
                setState(1571);
                _errHandler->sync(this);

                switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 216, _ctx)) {
                case 1: {
                  setState(1570);
                  outputList_Expression();
                  break;
                }

                default:
                  break;
                }
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(1575); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 217, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OutputList_ExpressionContext ------------------------------------------------------------------

VisualBasic6Parser::OutputList_ExpressionContext::OutputList_ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::OutputList_ExpressionContext::SPC() {
  return getToken(VisualBasic6Parser::SPC, 0);
}

tree::TerminalNode* VisualBasic6Parser::OutputList_ExpressionContext::TAB() {
  return getToken(VisualBasic6Parser::TAB, 0);
}

tree::TerminalNode* VisualBasic6Parser::OutputList_ExpressionContext::LPAREN() {
  return getToken(VisualBasic6Parser::LPAREN, 0);
}

VisualBasic6Parser::ArgsCallContext* VisualBasic6Parser::OutputList_ExpressionContext::argsCall() {
  return getRuleContext<VisualBasic6Parser::ArgsCallContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::OutputList_ExpressionContext::RPAREN() {
  return getToken(VisualBasic6Parser::RPAREN, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::OutputList_ExpressionContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::OutputList_ExpressionContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::OutputList_ExpressionContext::valueStmt() {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(0);
}


size_t VisualBasic6Parser::OutputList_ExpressionContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleOutputList_Expression;
}

void VisualBasic6Parser::OutputList_ExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOutputList_Expression(this);
}

void VisualBasic6Parser::OutputList_ExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOutputList_Expression(this);
}

VisualBasic6Parser::OutputList_ExpressionContext* VisualBasic6Parser::outputList_Expression() {
  OutputList_ExpressionContext *_localctx = _tracker.createInstance<OutputList_ExpressionContext>(_ctx, getState());
  enterRule(_localctx, 154, VisualBasic6Parser::RuleOutputList_Expression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1596);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 223, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1579);
      _la = _input->LA(1);
      if (!(_la == VisualBasic6Parser::SPC

      || _la == VisualBasic6Parser::TAB)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1593);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 222, _ctx)) {
      case 1: {
        setState(1581);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == VisualBasic6Parser::WS) {
          setState(1580);
          match(VisualBasic6Parser::WS);
        }
        setState(1583);
        match(VisualBasic6Parser::LPAREN);
        setState(1585);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 220, _ctx)) {
        case 1: {
          setState(1584);
          match(VisualBasic6Parser::WS);
          break;
        }

        default:
          break;
        }
        setState(1587);
        argsCall();
        setState(1589);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == VisualBasic6Parser::WS) {
          setState(1588);
          match(VisualBasic6Parser::WS);
        }
        setState(1591);
        match(VisualBasic6Parser::RPAREN);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1595);
      valueStmt(0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrintStmtContext ------------------------------------------------------------------

VisualBasic6Parser::PrintStmtContext::PrintStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::PrintStmtContext::PRINT() {
  return getToken(VisualBasic6Parser::PRINT, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::PrintStmtContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::PrintStmtContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::PrintStmtContext::valueStmt() {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::PrintStmtContext::COMMA() {
  return getToken(VisualBasic6Parser::COMMA, 0);
}

VisualBasic6Parser::OutputListContext* VisualBasic6Parser::PrintStmtContext::outputList() {
  return getRuleContext<VisualBasic6Parser::OutputListContext>(0);
}


size_t VisualBasic6Parser::PrintStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RulePrintStmt;
}

void VisualBasic6Parser::PrintStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrintStmt(this);
}

void VisualBasic6Parser::PrintStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrintStmt(this);
}

VisualBasic6Parser::PrintStmtContext* VisualBasic6Parser::printStmt() {
  PrintStmtContext *_localctx = _tracker.createInstance<PrintStmtContext>(_ctx, getState());
  enterRule(_localctx, 156, VisualBasic6Parser::RulePrintStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1598);
    match(VisualBasic6Parser::PRINT);
    setState(1599);
    match(VisualBasic6Parser::WS);
    setState(1600);
    valueStmt(0);
    setState(1602);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::WS) {
      setState(1601);
      match(VisualBasic6Parser::WS);
    }
    setState(1604);
    match(VisualBasic6Parser::COMMA);
    setState(1609);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 226, _ctx)) {
    case 1: {
      setState(1606);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 225, _ctx)) {
      case 1: {
        setState(1605);
        match(VisualBasic6Parser::WS);
        break;
      }

      default:
        break;
      }
      setState(1608);
      outputList();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PropertyGetStmtContext ------------------------------------------------------------------

VisualBasic6Parser::PropertyGetStmtContext::PropertyGetStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::PropertyGetStmtContext::PROPERTY_GET() {
  return getToken(VisualBasic6Parser::PROPERTY_GET, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::PropertyGetStmtContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::PropertyGetStmtContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

VisualBasic6Parser::AmbiguousIdentifierContext* VisualBasic6Parser::PropertyGetStmtContext::ambiguousIdentifier() {
  return getRuleContext<VisualBasic6Parser::AmbiguousIdentifierContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::PropertyGetStmtContext::END_PROPERTY() {
  return getToken(VisualBasic6Parser::END_PROPERTY, 0);
}

VisualBasic6Parser::VisibilityContext* VisualBasic6Parser::PropertyGetStmtContext::visibility() {
  return getRuleContext<VisualBasic6Parser::VisibilityContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::PropertyGetStmtContext::STATIC() {
  return getToken(VisualBasic6Parser::STATIC, 0);
}

VisualBasic6Parser::TypeHintContext* VisualBasic6Parser::PropertyGetStmtContext::typeHint() {
  return getRuleContext<VisualBasic6Parser::TypeHintContext>(0);
}

VisualBasic6Parser::ArgListContext* VisualBasic6Parser::PropertyGetStmtContext::argList() {
  return getRuleContext<VisualBasic6Parser::ArgListContext>(0);
}

VisualBasic6Parser::AsTypeClauseContext* VisualBasic6Parser::PropertyGetStmtContext::asTypeClause() {
  return getRuleContext<VisualBasic6Parser::AsTypeClauseContext>(0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::PropertyGetStmtContext::NEWLINE() {
  return getTokens(VisualBasic6Parser::NEWLINE);
}

tree::TerminalNode* VisualBasic6Parser::PropertyGetStmtContext::NEWLINE(size_t i) {
  return getToken(VisualBasic6Parser::NEWLINE, i);
}

VisualBasic6Parser::BlockContext* VisualBasic6Parser::PropertyGetStmtContext::block() {
  return getRuleContext<VisualBasic6Parser::BlockContext>(0);
}


size_t VisualBasic6Parser::PropertyGetStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RulePropertyGetStmt;
}

void VisualBasic6Parser::PropertyGetStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPropertyGetStmt(this);
}

void VisualBasic6Parser::PropertyGetStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPropertyGetStmt(this);
}

VisualBasic6Parser::PropertyGetStmtContext* VisualBasic6Parser::propertyGetStmt() {
  PropertyGetStmtContext *_localctx = _tracker.createInstance<PropertyGetStmtContext>(_ctx, getState());
  enterRule(_localctx, 158, VisualBasic6Parser::RulePropertyGetStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1614);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 2449958197289549841) != 0)) {
      setState(1611);
      visibility();
      setState(1612);
      match(VisualBasic6Parser::WS);
    }
    setState(1618);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::STATIC) {
      setState(1616);
      match(VisualBasic6Parser::STATIC);
      setState(1617);
      match(VisualBasic6Parser::WS);
    }
    setState(1620);
    match(VisualBasic6Parser::PROPERTY_GET);
    setState(1621);
    match(VisualBasic6Parser::WS);
    setState(1622);
    ambiguousIdentifier();
    setState(1624);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 178) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 178)) & 4203653) != 0)) {
      setState(1623);
      typeHint();
    }
    setState(1630);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 231, _ctx)) {
    case 1: {
      setState(1627);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == VisualBasic6Parser::WS) {
        setState(1626);
        match(VisualBasic6Parser::WS);
      }
      setState(1629);
      argList();
      break;
    }

    default:
      break;
    }
    setState(1634);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::WS) {
      setState(1632);
      match(VisualBasic6Parser::WS);
      setState(1633);
      asTypeClause();
    }
    setState(1637); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1636);
      match(VisualBasic6Parser::NEWLINE);
      setState(1639); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == VisualBasic6Parser::NEWLINE);
    setState(1647);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -53972826784270338) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 4544131962008240127) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 129)) & 721138890332700607) != 0) || ((((_la - 207) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 207)) & 34817) != 0)) {
      setState(1641);
      block();
      setState(1643); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(1642);
        match(VisualBasic6Parser::NEWLINE);
        setState(1645); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == VisualBasic6Parser::NEWLINE);
    }
    setState(1649);
    match(VisualBasic6Parser::END_PROPERTY);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PropertySetStmtContext ------------------------------------------------------------------

VisualBasic6Parser::PropertySetStmtContext::PropertySetStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::PropertySetStmtContext::PROPERTY_SET() {
  return getToken(VisualBasic6Parser::PROPERTY_SET, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::PropertySetStmtContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::PropertySetStmtContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

VisualBasic6Parser::AmbiguousIdentifierContext* VisualBasic6Parser::PropertySetStmtContext::ambiguousIdentifier() {
  return getRuleContext<VisualBasic6Parser::AmbiguousIdentifierContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::PropertySetStmtContext::END_PROPERTY() {
  return getToken(VisualBasic6Parser::END_PROPERTY, 0);
}

VisualBasic6Parser::VisibilityContext* VisualBasic6Parser::PropertySetStmtContext::visibility() {
  return getRuleContext<VisualBasic6Parser::VisibilityContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::PropertySetStmtContext::STATIC() {
  return getToken(VisualBasic6Parser::STATIC, 0);
}

VisualBasic6Parser::ArgListContext* VisualBasic6Parser::PropertySetStmtContext::argList() {
  return getRuleContext<VisualBasic6Parser::ArgListContext>(0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::PropertySetStmtContext::NEWLINE() {
  return getTokens(VisualBasic6Parser::NEWLINE);
}

tree::TerminalNode* VisualBasic6Parser::PropertySetStmtContext::NEWLINE(size_t i) {
  return getToken(VisualBasic6Parser::NEWLINE, i);
}

VisualBasic6Parser::BlockContext* VisualBasic6Parser::PropertySetStmtContext::block() {
  return getRuleContext<VisualBasic6Parser::BlockContext>(0);
}


size_t VisualBasic6Parser::PropertySetStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RulePropertySetStmt;
}

void VisualBasic6Parser::PropertySetStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPropertySetStmt(this);
}

void VisualBasic6Parser::PropertySetStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPropertySetStmt(this);
}

VisualBasic6Parser::PropertySetStmtContext* VisualBasic6Parser::propertySetStmt() {
  PropertySetStmtContext *_localctx = _tracker.createInstance<PropertySetStmtContext>(_ctx, getState());
  enterRule(_localctx, 160, VisualBasic6Parser::RulePropertySetStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1654);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 2449958197289549841) != 0)) {
      setState(1651);
      visibility();
      setState(1652);
      match(VisualBasic6Parser::WS);
    }
    setState(1658);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::STATIC) {
      setState(1656);
      match(VisualBasic6Parser::STATIC);
      setState(1657);
      match(VisualBasic6Parser::WS);
    }
    setState(1660);
    match(VisualBasic6Parser::PROPERTY_SET);
    setState(1661);
    match(VisualBasic6Parser::WS);
    setState(1662);
    ambiguousIdentifier();
    setState(1667);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::LPAREN

    || _la == VisualBasic6Parser::WS) {
      setState(1664);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == VisualBasic6Parser::WS) {
        setState(1663);
        match(VisualBasic6Parser::WS);
      }
      setState(1666);
      argList();
    }
    setState(1670); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1669);
      match(VisualBasic6Parser::NEWLINE);
      setState(1672); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == VisualBasic6Parser::NEWLINE);
    setState(1680);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -53972826784270338) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 4544131962008240127) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 129)) & 721138890332700607) != 0) || ((((_la - 207) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 207)) & 34817) != 0)) {
      setState(1674);
      block();
      setState(1676); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(1675);
        match(VisualBasic6Parser::NEWLINE);
        setState(1678); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == VisualBasic6Parser::NEWLINE);
    }
    setState(1682);
    match(VisualBasic6Parser::END_PROPERTY);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PropertyLetStmtContext ------------------------------------------------------------------

VisualBasic6Parser::PropertyLetStmtContext::PropertyLetStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::PropertyLetStmtContext::PROPERTY_LET() {
  return getToken(VisualBasic6Parser::PROPERTY_LET, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::PropertyLetStmtContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::PropertyLetStmtContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

VisualBasic6Parser::AmbiguousIdentifierContext* VisualBasic6Parser::PropertyLetStmtContext::ambiguousIdentifier() {
  return getRuleContext<VisualBasic6Parser::AmbiguousIdentifierContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::PropertyLetStmtContext::END_PROPERTY() {
  return getToken(VisualBasic6Parser::END_PROPERTY, 0);
}

VisualBasic6Parser::VisibilityContext* VisualBasic6Parser::PropertyLetStmtContext::visibility() {
  return getRuleContext<VisualBasic6Parser::VisibilityContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::PropertyLetStmtContext::STATIC() {
  return getToken(VisualBasic6Parser::STATIC, 0);
}

VisualBasic6Parser::ArgListContext* VisualBasic6Parser::PropertyLetStmtContext::argList() {
  return getRuleContext<VisualBasic6Parser::ArgListContext>(0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::PropertyLetStmtContext::NEWLINE() {
  return getTokens(VisualBasic6Parser::NEWLINE);
}

tree::TerminalNode* VisualBasic6Parser::PropertyLetStmtContext::NEWLINE(size_t i) {
  return getToken(VisualBasic6Parser::NEWLINE, i);
}

VisualBasic6Parser::BlockContext* VisualBasic6Parser::PropertyLetStmtContext::block() {
  return getRuleContext<VisualBasic6Parser::BlockContext>(0);
}


size_t VisualBasic6Parser::PropertyLetStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RulePropertyLetStmt;
}

void VisualBasic6Parser::PropertyLetStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPropertyLetStmt(this);
}

void VisualBasic6Parser::PropertyLetStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPropertyLetStmt(this);
}

VisualBasic6Parser::PropertyLetStmtContext* VisualBasic6Parser::propertyLetStmt() {
  PropertyLetStmtContext *_localctx = _tracker.createInstance<PropertyLetStmtContext>(_ctx, getState());
  enterRule(_localctx, 162, VisualBasic6Parser::RulePropertyLetStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1687);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 2449958197289549841) != 0)) {
      setState(1684);
      visibility();
      setState(1685);
      match(VisualBasic6Parser::WS);
    }
    setState(1691);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::STATIC) {
      setState(1689);
      match(VisualBasic6Parser::STATIC);
      setState(1690);
      match(VisualBasic6Parser::WS);
    }
    setState(1693);
    match(VisualBasic6Parser::PROPERTY_LET);
    setState(1694);
    match(VisualBasic6Parser::WS);
    setState(1695);
    ambiguousIdentifier();
    setState(1700);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::LPAREN

    || _la == VisualBasic6Parser::WS) {
      setState(1697);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == VisualBasic6Parser::WS) {
        setState(1696);
        match(VisualBasic6Parser::WS);
      }
      setState(1699);
      argList();
    }
    setState(1703); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1702);
      match(VisualBasic6Parser::NEWLINE);
      setState(1705); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == VisualBasic6Parser::NEWLINE);
    setState(1713);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -53972826784270338) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 4544131962008240127) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 129)) & 721138890332700607) != 0) || ((((_la - 207) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 207)) & 34817) != 0)) {
      setState(1707);
      block();
      setState(1709); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(1708);
        match(VisualBasic6Parser::NEWLINE);
        setState(1711); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == VisualBasic6Parser::NEWLINE);
    }
    setState(1715);
    match(VisualBasic6Parser::END_PROPERTY);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PutStmtContext ------------------------------------------------------------------

VisualBasic6Parser::PutStmtContext::PutStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::PutStmtContext::PUT() {
  return getToken(VisualBasic6Parser::PUT, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::PutStmtContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::PutStmtContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

std::vector<VisualBasic6Parser::ValueStmtContext *> VisualBasic6Parser::PutStmtContext::valueStmt() {
  return getRuleContexts<VisualBasic6Parser::ValueStmtContext>();
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::PutStmtContext::valueStmt(size_t i) {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(i);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::PutStmtContext::COMMA() {
  return getTokens(VisualBasic6Parser::COMMA);
}

tree::TerminalNode* VisualBasic6Parser::PutStmtContext::COMMA(size_t i) {
  return getToken(VisualBasic6Parser::COMMA, i);
}


size_t VisualBasic6Parser::PutStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RulePutStmt;
}

void VisualBasic6Parser::PutStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPutStmt(this);
}

void VisualBasic6Parser::PutStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPutStmt(this);
}

VisualBasic6Parser::PutStmtContext* VisualBasic6Parser::putStmt() {
  PutStmtContext *_localctx = _tracker.createInstance<PutStmtContext>(_ctx, getState());
  enterRule(_localctx, 164, VisualBasic6Parser::RulePutStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1717);
    match(VisualBasic6Parser::PUT);
    setState(1718);
    match(VisualBasic6Parser::WS);
    setState(1719);
    valueStmt(0);
    setState(1721);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::WS) {
      setState(1720);
      match(VisualBasic6Parser::WS);
    }
    setState(1723);
    match(VisualBasic6Parser::COMMA);
    setState(1725);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 251, _ctx)) {
    case 1: {
      setState(1724);
      match(VisualBasic6Parser::WS);
      break;
    }

    default:
      break;
    }
    setState(1728);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 252, _ctx)) {
    case 1: {
      setState(1727);
      valueStmt(0);
      break;
    }

    default:
      break;
    }
    setState(1731);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::WS) {
      setState(1730);
      match(VisualBasic6Parser::WS);
    }
    setState(1733);
    match(VisualBasic6Parser::COMMA);
    setState(1735);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 254, _ctx)) {
    case 1: {
      setState(1734);
      match(VisualBasic6Parser::WS);
      break;
    }

    default:
      break;
    }
    setState(1737);
    valueStmt(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RaiseEventStmtContext ------------------------------------------------------------------

VisualBasic6Parser::RaiseEventStmtContext::RaiseEventStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::RaiseEventStmtContext::RAISEEVENT() {
  return getToken(VisualBasic6Parser::RAISEEVENT, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::RaiseEventStmtContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::RaiseEventStmtContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

VisualBasic6Parser::AmbiguousIdentifierContext* VisualBasic6Parser::RaiseEventStmtContext::ambiguousIdentifier() {
  return getRuleContext<VisualBasic6Parser::AmbiguousIdentifierContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::RaiseEventStmtContext::LPAREN() {
  return getToken(VisualBasic6Parser::LPAREN, 0);
}

tree::TerminalNode* VisualBasic6Parser::RaiseEventStmtContext::RPAREN() {
  return getToken(VisualBasic6Parser::RPAREN, 0);
}

VisualBasic6Parser::ArgsCallContext* VisualBasic6Parser::RaiseEventStmtContext::argsCall() {
  return getRuleContext<VisualBasic6Parser::ArgsCallContext>(0);
}


size_t VisualBasic6Parser::RaiseEventStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleRaiseEventStmt;
}

void VisualBasic6Parser::RaiseEventStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRaiseEventStmt(this);
}

void VisualBasic6Parser::RaiseEventStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRaiseEventStmt(this);
}

VisualBasic6Parser::RaiseEventStmtContext* VisualBasic6Parser::raiseEventStmt() {
  RaiseEventStmtContext *_localctx = _tracker.createInstance<RaiseEventStmtContext>(_ctx, getState());
  enterRule(_localctx, 166, VisualBasic6Parser::RuleRaiseEventStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1739);
    match(VisualBasic6Parser::RAISEEVENT);
    setState(1740);
    match(VisualBasic6Parser::WS);
    setState(1741);
    ambiguousIdentifier();
    setState(1756);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 259, _ctx)) {
    case 1: {
      setState(1743);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == VisualBasic6Parser::WS) {
        setState(1742);
        match(VisualBasic6Parser::WS);
      }
      setState(1745);
      match(VisualBasic6Parser::LPAREN);
      setState(1747);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 256, _ctx)) {
      case 1: {
        setState(1746);
        match(VisualBasic6Parser::WS);
        break;
      }

      default:
        break;
      }
      setState(1753);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 2251870182429423614) != 0) || ((((_la - 66) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 66)) & -8087550153692545025) != 0) || ((((_la - 130) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 130)) & 365073044793720799) != 0) || ((((_la - 194) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 194)) & 289386629) != 0)) {
        setState(1749);
        argsCall();
        setState(1751);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == VisualBasic6Parser::WS) {
          setState(1750);
          match(VisualBasic6Parser::WS);
        }
      }
      setState(1755);
      match(VisualBasic6Parser::RPAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RandomizeStmtContext ------------------------------------------------------------------

VisualBasic6Parser::RandomizeStmtContext::RandomizeStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::RandomizeStmtContext::RANDOMIZE() {
  return getToken(VisualBasic6Parser::RANDOMIZE, 0);
}

tree::TerminalNode* VisualBasic6Parser::RandomizeStmtContext::WS() {
  return getToken(VisualBasic6Parser::WS, 0);
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::RandomizeStmtContext::valueStmt() {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(0);
}


size_t VisualBasic6Parser::RandomizeStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleRandomizeStmt;
}

void VisualBasic6Parser::RandomizeStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRandomizeStmt(this);
}

void VisualBasic6Parser::RandomizeStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRandomizeStmt(this);
}

VisualBasic6Parser::RandomizeStmtContext* VisualBasic6Parser::randomizeStmt() {
  RandomizeStmtContext *_localctx = _tracker.createInstance<RandomizeStmtContext>(_ctx, getState());
  enterRule(_localctx, 168, VisualBasic6Parser::RuleRandomizeStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1758);
    match(VisualBasic6Parser::RANDOMIZE);
    setState(1761);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 260, _ctx)) {
    case 1: {
      setState(1759);
      match(VisualBasic6Parser::WS);
      setState(1760);
      valueStmt(0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RedimStmtContext ------------------------------------------------------------------

VisualBasic6Parser::RedimStmtContext::RedimStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::RedimStmtContext::REDIM() {
  return getToken(VisualBasic6Parser::REDIM, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::RedimStmtContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::RedimStmtContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

std::vector<VisualBasic6Parser::RedimSubStmtContext *> VisualBasic6Parser::RedimStmtContext::redimSubStmt() {
  return getRuleContexts<VisualBasic6Parser::RedimSubStmtContext>();
}

VisualBasic6Parser::RedimSubStmtContext* VisualBasic6Parser::RedimStmtContext::redimSubStmt(size_t i) {
  return getRuleContext<VisualBasic6Parser::RedimSubStmtContext>(i);
}

tree::TerminalNode* VisualBasic6Parser::RedimStmtContext::PRESERVE() {
  return getToken(VisualBasic6Parser::PRESERVE, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::RedimStmtContext::COMMA() {
  return getTokens(VisualBasic6Parser::COMMA);
}

tree::TerminalNode* VisualBasic6Parser::RedimStmtContext::COMMA(size_t i) {
  return getToken(VisualBasic6Parser::COMMA, i);
}


size_t VisualBasic6Parser::RedimStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleRedimStmt;
}

void VisualBasic6Parser::RedimStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRedimStmt(this);
}

void VisualBasic6Parser::RedimStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRedimStmt(this);
}

VisualBasic6Parser::RedimStmtContext* VisualBasic6Parser::redimStmt() {
  RedimStmtContext *_localctx = _tracker.createInstance<RedimStmtContext>(_ctx, getState());
  enterRule(_localctx, 170, VisualBasic6Parser::RuleRedimStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1763);
    match(VisualBasic6Parser::REDIM);
    setState(1764);
    match(VisualBasic6Parser::WS);
    setState(1767);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 261, _ctx)) {
    case 1: {
      setState(1765);
      match(VisualBasic6Parser::PRESERVE);
      setState(1766);
      match(VisualBasic6Parser::WS);
      break;
    }

    default:
      break;
    }
    setState(1769);
    redimSubStmt();
    setState(1780);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 264, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1771);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == VisualBasic6Parser::WS) {
          setState(1770);
          match(VisualBasic6Parser::WS);
        }
        setState(1773);
        match(VisualBasic6Parser::COMMA);
        setState(1775);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 263, _ctx)) {
        case 1: {
          setState(1774);
          match(VisualBasic6Parser::WS);
          break;
        }

        default:
          break;
        }
        setState(1777);
        redimSubStmt(); 
      }
      setState(1782);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 264, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RedimSubStmtContext ------------------------------------------------------------------

VisualBasic6Parser::RedimSubStmtContext::RedimSubStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

VisualBasic6Parser::ImplicitCallStmt_InStmtContext* VisualBasic6Parser::RedimSubStmtContext::implicitCallStmt_InStmt() {
  return getRuleContext<VisualBasic6Parser::ImplicitCallStmt_InStmtContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::RedimSubStmtContext::LPAREN() {
  return getToken(VisualBasic6Parser::LPAREN, 0);
}

VisualBasic6Parser::SubscriptsContext* VisualBasic6Parser::RedimSubStmtContext::subscripts() {
  return getRuleContext<VisualBasic6Parser::SubscriptsContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::RedimSubStmtContext::RPAREN() {
  return getToken(VisualBasic6Parser::RPAREN, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::RedimSubStmtContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::RedimSubStmtContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

VisualBasic6Parser::AsTypeClauseContext* VisualBasic6Parser::RedimSubStmtContext::asTypeClause() {
  return getRuleContext<VisualBasic6Parser::AsTypeClauseContext>(0);
}


size_t VisualBasic6Parser::RedimSubStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleRedimSubStmt;
}

void VisualBasic6Parser::RedimSubStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRedimSubStmt(this);
}

void VisualBasic6Parser::RedimSubStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRedimSubStmt(this);
}

VisualBasic6Parser::RedimSubStmtContext* VisualBasic6Parser::redimSubStmt() {
  RedimSubStmtContext *_localctx = _tracker.createInstance<RedimSubStmtContext>(_ctx, getState());
  enterRule(_localctx, 172, VisualBasic6Parser::RuleRedimSubStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1783);
    implicitCallStmt_InStmt();
    setState(1785);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::WS) {
      setState(1784);
      match(VisualBasic6Parser::WS);
    }
    setState(1787);
    match(VisualBasic6Parser::LPAREN);
    setState(1789);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 266, _ctx)) {
    case 1: {
      setState(1788);
      match(VisualBasic6Parser::WS);
      break;
    }

    default:
      break;
    }
    setState(1791);
    subscripts();
    setState(1793);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::WS) {
      setState(1792);
      match(VisualBasic6Parser::WS);
    }
    setState(1795);
    match(VisualBasic6Parser::RPAREN);
    setState(1798);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 268, _ctx)) {
    case 1: {
      setState(1796);
      match(VisualBasic6Parser::WS);
      setState(1797);
      asTypeClause();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ResetStmtContext ------------------------------------------------------------------

VisualBasic6Parser::ResetStmtContext::ResetStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::ResetStmtContext::RESET() {
  return getToken(VisualBasic6Parser::RESET, 0);
}


size_t VisualBasic6Parser::ResetStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleResetStmt;
}

void VisualBasic6Parser::ResetStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterResetStmt(this);
}

void VisualBasic6Parser::ResetStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitResetStmt(this);
}

VisualBasic6Parser::ResetStmtContext* VisualBasic6Parser::resetStmt() {
  ResetStmtContext *_localctx = _tracker.createInstance<ResetStmtContext>(_ctx, getState());
  enterRule(_localctx, 174, VisualBasic6Parser::RuleResetStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1800);
    match(VisualBasic6Parser::RESET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ResumeStmtContext ------------------------------------------------------------------

VisualBasic6Parser::ResumeStmtContext::ResumeStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::ResumeStmtContext::RESUME() {
  return getToken(VisualBasic6Parser::RESUME, 0);
}

tree::TerminalNode* VisualBasic6Parser::ResumeStmtContext::WS() {
  return getToken(VisualBasic6Parser::WS, 0);
}

tree::TerminalNode* VisualBasic6Parser::ResumeStmtContext::NEXT() {
  return getToken(VisualBasic6Parser::NEXT, 0);
}

VisualBasic6Parser::AmbiguousIdentifierContext* VisualBasic6Parser::ResumeStmtContext::ambiguousIdentifier() {
  return getRuleContext<VisualBasic6Parser::AmbiguousIdentifierContext>(0);
}


size_t VisualBasic6Parser::ResumeStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleResumeStmt;
}

void VisualBasic6Parser::ResumeStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterResumeStmt(this);
}

void VisualBasic6Parser::ResumeStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitResumeStmt(this);
}

VisualBasic6Parser::ResumeStmtContext* VisualBasic6Parser::resumeStmt() {
  ResumeStmtContext *_localctx = _tracker.createInstance<ResumeStmtContext>(_ctx, getState());
  enterRule(_localctx, 176, VisualBasic6Parser::RuleResumeStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1802);
    match(VisualBasic6Parser::RESUME);
    setState(1808);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 270, _ctx)) {
    case 1: {
      setState(1803);
      match(VisualBasic6Parser::WS);
      setState(1806);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 269, _ctx)) {
      case 1: {
        setState(1804);
        match(VisualBasic6Parser::NEXT);
        break;
      }

      case 2: {
        setState(1805);
        ambiguousIdentifier();
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReturnStmtContext ------------------------------------------------------------------

VisualBasic6Parser::ReturnStmtContext::ReturnStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::ReturnStmtContext::RETURN() {
  return getToken(VisualBasic6Parser::RETURN, 0);
}


size_t VisualBasic6Parser::ReturnStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleReturnStmt;
}

void VisualBasic6Parser::ReturnStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReturnStmt(this);
}

void VisualBasic6Parser::ReturnStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReturnStmt(this);
}

VisualBasic6Parser::ReturnStmtContext* VisualBasic6Parser::returnStmt() {
  ReturnStmtContext *_localctx = _tracker.createInstance<ReturnStmtContext>(_ctx, getState());
  enterRule(_localctx, 178, VisualBasic6Parser::RuleReturnStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1810);
    match(VisualBasic6Parser::RETURN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RmdirStmtContext ------------------------------------------------------------------

VisualBasic6Parser::RmdirStmtContext::RmdirStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::RmdirStmtContext::RMDIR() {
  return getToken(VisualBasic6Parser::RMDIR, 0);
}

tree::TerminalNode* VisualBasic6Parser::RmdirStmtContext::WS() {
  return getToken(VisualBasic6Parser::WS, 0);
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::RmdirStmtContext::valueStmt() {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(0);
}


size_t VisualBasic6Parser::RmdirStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleRmdirStmt;
}

void VisualBasic6Parser::RmdirStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRmdirStmt(this);
}

void VisualBasic6Parser::RmdirStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRmdirStmt(this);
}

VisualBasic6Parser::RmdirStmtContext* VisualBasic6Parser::rmdirStmt() {
  RmdirStmtContext *_localctx = _tracker.createInstance<RmdirStmtContext>(_ctx, getState());
  enterRule(_localctx, 180, VisualBasic6Parser::RuleRmdirStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1812);
    match(VisualBasic6Parser::RMDIR);
    setState(1813);
    match(VisualBasic6Parser::WS);
    setState(1814);
    valueStmt(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RsetStmtContext ------------------------------------------------------------------

VisualBasic6Parser::RsetStmtContext::RsetStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::RsetStmtContext::RSET() {
  return getToken(VisualBasic6Parser::RSET, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::RsetStmtContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::RsetStmtContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

VisualBasic6Parser::ImplicitCallStmt_InStmtContext* VisualBasic6Parser::RsetStmtContext::implicitCallStmt_InStmt() {
  return getRuleContext<VisualBasic6Parser::ImplicitCallStmt_InStmtContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::RsetStmtContext::EQ() {
  return getToken(VisualBasic6Parser::EQ, 0);
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::RsetStmtContext::valueStmt() {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(0);
}


size_t VisualBasic6Parser::RsetStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleRsetStmt;
}

void VisualBasic6Parser::RsetStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRsetStmt(this);
}

void VisualBasic6Parser::RsetStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRsetStmt(this);
}

VisualBasic6Parser::RsetStmtContext* VisualBasic6Parser::rsetStmt() {
  RsetStmtContext *_localctx = _tracker.createInstance<RsetStmtContext>(_ctx, getState());
  enterRule(_localctx, 182, VisualBasic6Parser::RuleRsetStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1816);
    match(VisualBasic6Parser::RSET);
    setState(1817);
    match(VisualBasic6Parser::WS);
    setState(1818);
    implicitCallStmt_InStmt();
    setState(1820);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::WS) {
      setState(1819);
      match(VisualBasic6Parser::WS);
    }
    setState(1822);
    match(VisualBasic6Parser::EQ);
    setState(1824);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 272, _ctx)) {
    case 1: {
      setState(1823);
      match(VisualBasic6Parser::WS);
      break;
    }

    default:
      break;
    }
    setState(1826);
    valueStmt(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SavepictureStmtContext ------------------------------------------------------------------

VisualBasic6Parser::SavepictureStmtContext::SavepictureStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::SavepictureStmtContext::SAVEPICTURE() {
  return getToken(VisualBasic6Parser::SAVEPICTURE, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::SavepictureStmtContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::SavepictureStmtContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

std::vector<VisualBasic6Parser::ValueStmtContext *> VisualBasic6Parser::SavepictureStmtContext::valueStmt() {
  return getRuleContexts<VisualBasic6Parser::ValueStmtContext>();
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::SavepictureStmtContext::valueStmt(size_t i) {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(i);
}

tree::TerminalNode* VisualBasic6Parser::SavepictureStmtContext::COMMA() {
  return getToken(VisualBasic6Parser::COMMA, 0);
}


size_t VisualBasic6Parser::SavepictureStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleSavepictureStmt;
}

void VisualBasic6Parser::SavepictureStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSavepictureStmt(this);
}

void VisualBasic6Parser::SavepictureStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSavepictureStmt(this);
}

VisualBasic6Parser::SavepictureStmtContext* VisualBasic6Parser::savepictureStmt() {
  SavepictureStmtContext *_localctx = _tracker.createInstance<SavepictureStmtContext>(_ctx, getState());
  enterRule(_localctx, 184, VisualBasic6Parser::RuleSavepictureStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1828);
    match(VisualBasic6Parser::SAVEPICTURE);
    setState(1829);
    match(VisualBasic6Parser::WS);
    setState(1830);
    valueStmt(0);
    setState(1832);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::WS) {
      setState(1831);
      match(VisualBasic6Parser::WS);
    }
    setState(1834);
    match(VisualBasic6Parser::COMMA);
    setState(1836);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 274, _ctx)) {
    case 1: {
      setState(1835);
      match(VisualBasic6Parser::WS);
      break;
    }

    default:
      break;
    }
    setState(1838);
    valueStmt(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SaveSettingStmtContext ------------------------------------------------------------------

VisualBasic6Parser::SaveSettingStmtContext::SaveSettingStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::SaveSettingStmtContext::SAVESETTING() {
  return getToken(VisualBasic6Parser::SAVESETTING, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::SaveSettingStmtContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::SaveSettingStmtContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

std::vector<VisualBasic6Parser::ValueStmtContext *> VisualBasic6Parser::SaveSettingStmtContext::valueStmt() {
  return getRuleContexts<VisualBasic6Parser::ValueStmtContext>();
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::SaveSettingStmtContext::valueStmt(size_t i) {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(i);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::SaveSettingStmtContext::COMMA() {
  return getTokens(VisualBasic6Parser::COMMA);
}

tree::TerminalNode* VisualBasic6Parser::SaveSettingStmtContext::COMMA(size_t i) {
  return getToken(VisualBasic6Parser::COMMA, i);
}


size_t VisualBasic6Parser::SaveSettingStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleSaveSettingStmt;
}

void VisualBasic6Parser::SaveSettingStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSaveSettingStmt(this);
}

void VisualBasic6Parser::SaveSettingStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSaveSettingStmt(this);
}

VisualBasic6Parser::SaveSettingStmtContext* VisualBasic6Parser::saveSettingStmt() {
  SaveSettingStmtContext *_localctx = _tracker.createInstance<SaveSettingStmtContext>(_ctx, getState());
  enterRule(_localctx, 186, VisualBasic6Parser::RuleSaveSettingStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1840);
    match(VisualBasic6Parser::SAVESETTING);
    setState(1841);
    match(VisualBasic6Parser::WS);
    setState(1842);
    valueStmt(0);
    setState(1844);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::WS) {
      setState(1843);
      match(VisualBasic6Parser::WS);
    }
    setState(1846);
    match(VisualBasic6Parser::COMMA);
    setState(1848);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 276, _ctx)) {
    case 1: {
      setState(1847);
      match(VisualBasic6Parser::WS);
      break;
    }

    default:
      break;
    }
    setState(1850);
    valueStmt(0);
    setState(1852);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::WS) {
      setState(1851);
      match(VisualBasic6Parser::WS);
    }
    setState(1854);
    match(VisualBasic6Parser::COMMA);
    setState(1856);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 278, _ctx)) {
    case 1: {
      setState(1855);
      match(VisualBasic6Parser::WS);
      break;
    }

    default:
      break;
    }
    setState(1858);
    valueStmt(0);
    setState(1860);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::WS) {
      setState(1859);
      match(VisualBasic6Parser::WS);
    }
    setState(1862);
    match(VisualBasic6Parser::COMMA);
    setState(1864);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 280, _ctx)) {
    case 1: {
      setState(1863);
      match(VisualBasic6Parser::WS);
      break;
    }

    default:
      break;
    }
    setState(1866);
    valueStmt(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SeekStmtContext ------------------------------------------------------------------

VisualBasic6Parser::SeekStmtContext::SeekStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::SeekStmtContext::SEEK() {
  return getToken(VisualBasic6Parser::SEEK, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::SeekStmtContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::SeekStmtContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

std::vector<VisualBasic6Parser::ValueStmtContext *> VisualBasic6Parser::SeekStmtContext::valueStmt() {
  return getRuleContexts<VisualBasic6Parser::ValueStmtContext>();
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::SeekStmtContext::valueStmt(size_t i) {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(i);
}

tree::TerminalNode* VisualBasic6Parser::SeekStmtContext::COMMA() {
  return getToken(VisualBasic6Parser::COMMA, 0);
}


size_t VisualBasic6Parser::SeekStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleSeekStmt;
}

void VisualBasic6Parser::SeekStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSeekStmt(this);
}

void VisualBasic6Parser::SeekStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSeekStmt(this);
}

VisualBasic6Parser::SeekStmtContext* VisualBasic6Parser::seekStmt() {
  SeekStmtContext *_localctx = _tracker.createInstance<SeekStmtContext>(_ctx, getState());
  enterRule(_localctx, 188, VisualBasic6Parser::RuleSeekStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1868);
    match(VisualBasic6Parser::SEEK);
    setState(1869);
    match(VisualBasic6Parser::WS);
    setState(1870);
    valueStmt(0);
    setState(1872);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::WS) {
      setState(1871);
      match(VisualBasic6Parser::WS);
    }
    setState(1874);
    match(VisualBasic6Parser::COMMA);
    setState(1876);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 282, _ctx)) {
    case 1: {
      setState(1875);
      match(VisualBasic6Parser::WS);
      break;
    }

    default:
      break;
    }
    setState(1878);
    valueStmt(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectCaseStmtContext ------------------------------------------------------------------

VisualBasic6Parser::SelectCaseStmtContext::SelectCaseStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::SelectCaseStmtContext::SELECT() {
  return getToken(VisualBasic6Parser::SELECT, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::SelectCaseStmtContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::SelectCaseStmtContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

tree::TerminalNode* VisualBasic6Parser::SelectCaseStmtContext::CASE() {
  return getToken(VisualBasic6Parser::CASE, 0);
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::SelectCaseStmtContext::valueStmt() {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::SelectCaseStmtContext::END_SELECT() {
  return getToken(VisualBasic6Parser::END_SELECT, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::SelectCaseStmtContext::NEWLINE() {
  return getTokens(VisualBasic6Parser::NEWLINE);
}

tree::TerminalNode* VisualBasic6Parser::SelectCaseStmtContext::NEWLINE(size_t i) {
  return getToken(VisualBasic6Parser::NEWLINE, i);
}

std::vector<VisualBasic6Parser::SC_CaseContext *> VisualBasic6Parser::SelectCaseStmtContext::sC_Case() {
  return getRuleContexts<VisualBasic6Parser::SC_CaseContext>();
}

VisualBasic6Parser::SC_CaseContext* VisualBasic6Parser::SelectCaseStmtContext::sC_Case(size_t i) {
  return getRuleContext<VisualBasic6Parser::SC_CaseContext>(i);
}


size_t VisualBasic6Parser::SelectCaseStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleSelectCaseStmt;
}

void VisualBasic6Parser::SelectCaseStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelectCaseStmt(this);
}

void VisualBasic6Parser::SelectCaseStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelectCaseStmt(this);
}

VisualBasic6Parser::SelectCaseStmtContext* VisualBasic6Parser::selectCaseStmt() {
  SelectCaseStmtContext *_localctx = _tracker.createInstance<SelectCaseStmtContext>(_ctx, getState());
  enterRule(_localctx, 190, VisualBasic6Parser::RuleSelectCaseStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1880);
    match(VisualBasic6Parser::SELECT);
    setState(1881);
    match(VisualBasic6Parser::WS);
    setState(1882);
    match(VisualBasic6Parser::CASE);
    setState(1883);
    match(VisualBasic6Parser::WS);
    setState(1884);
    valueStmt(0);
    setState(1886); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1885);
      match(VisualBasic6Parser::NEWLINE);
      setState(1888); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == VisualBasic6Parser::NEWLINE);
    setState(1893);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == VisualBasic6Parser::CASE) {
      setState(1890);
      sC_Case();
      setState(1895);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1897);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::WS) {
      setState(1896);
      match(VisualBasic6Parser::WS);
    }
    setState(1899);
    match(VisualBasic6Parser::END_SELECT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SC_CaseContext ------------------------------------------------------------------

VisualBasic6Parser::SC_CaseContext::SC_CaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::SC_CaseContext::CASE() {
  return getToken(VisualBasic6Parser::CASE, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::SC_CaseContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::SC_CaseContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

VisualBasic6Parser::SC_CondContext* VisualBasic6Parser::SC_CaseContext::sC_Cond() {
  return getRuleContext<VisualBasic6Parser::SC_CondContext>(0);
}

VisualBasic6Parser::BlockContext* VisualBasic6Parser::SC_CaseContext::block() {
  return getRuleContext<VisualBasic6Parser::BlockContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::SC_CaseContext::COLON() {
  return getToken(VisualBasic6Parser::COLON, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::SC_CaseContext::NEWLINE() {
  return getTokens(VisualBasic6Parser::NEWLINE);
}

tree::TerminalNode* VisualBasic6Parser::SC_CaseContext::NEWLINE(size_t i) {
  return getToken(VisualBasic6Parser::NEWLINE, i);
}


size_t VisualBasic6Parser::SC_CaseContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleSC_Case;
}

void VisualBasic6Parser::SC_CaseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSC_Case(this);
}

void VisualBasic6Parser::SC_CaseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSC_Case(this);
}

VisualBasic6Parser::SC_CaseContext* VisualBasic6Parser::sC_Case() {
  SC_CaseContext *_localctx = _tracker.createInstance<SC_CaseContext>(_ctx, getState());
  enterRule(_localctx, 192, VisualBasic6Parser::RuleSC_Case);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1901);
    match(VisualBasic6Parser::CASE);
    setState(1902);
    match(VisualBasic6Parser::WS);
    setState(1903);
    sC_Cond();
    setState(1905);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 286, _ctx)) {
    case 1: {
      setState(1904);
      match(VisualBasic6Parser::WS);
      break;
    }

    default:
      break;
    }
    setState(1921);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 290, _ctx)) {
    case 1: {
      setState(1908);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == VisualBasic6Parser::COLON) {
        setState(1907);
        match(VisualBasic6Parser::COLON);
      }
      setState(1913);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == VisualBasic6Parser::NEWLINE) {
        setState(1910);
        match(VisualBasic6Parser::NEWLINE);
        setState(1915);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 2: {
      setState(1917); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(1916);
        match(VisualBasic6Parser::NEWLINE);
        setState(1919); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == VisualBasic6Parser::NEWLINE);
      break;
    }

    default:
      break;
    }
    setState(1929);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 292, _ctx)) {
    case 1: {
      setState(1923);
      block();
      setState(1925); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(1924);
        match(VisualBasic6Parser::NEWLINE);
        setState(1927); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == VisualBasic6Parser::NEWLINE);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SC_CondContext ------------------------------------------------------------------

VisualBasic6Parser::SC_CondContext::SC_CondContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t VisualBasic6Parser::SC_CondContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleSC_Cond;
}

void VisualBasic6Parser::SC_CondContext::copyFrom(SC_CondContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- CaseCondExprContext ------------------------------------------------------------------

std::vector<VisualBasic6Parser::SC_CondExprContext *> VisualBasic6Parser::CaseCondExprContext::sC_CondExpr() {
  return getRuleContexts<VisualBasic6Parser::SC_CondExprContext>();
}

VisualBasic6Parser::SC_CondExprContext* VisualBasic6Parser::CaseCondExprContext::sC_CondExpr(size_t i) {
  return getRuleContext<VisualBasic6Parser::SC_CondExprContext>(i);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::CaseCondExprContext::COMMA() {
  return getTokens(VisualBasic6Parser::COMMA);
}

tree::TerminalNode* VisualBasic6Parser::CaseCondExprContext::COMMA(size_t i) {
  return getToken(VisualBasic6Parser::COMMA, i);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::CaseCondExprContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::CaseCondExprContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

VisualBasic6Parser::CaseCondExprContext::CaseCondExprContext(SC_CondContext *ctx) { copyFrom(ctx); }

void VisualBasic6Parser::CaseCondExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCaseCondExpr(this);
}
void VisualBasic6Parser::CaseCondExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCaseCondExpr(this);
}
//----------------- CaseCondElseContext ------------------------------------------------------------------

tree::TerminalNode* VisualBasic6Parser::CaseCondElseContext::ELSE() {
  return getToken(VisualBasic6Parser::ELSE, 0);
}

VisualBasic6Parser::CaseCondElseContext::CaseCondElseContext(SC_CondContext *ctx) { copyFrom(ctx); }

void VisualBasic6Parser::CaseCondElseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCaseCondElse(this);
}
void VisualBasic6Parser::CaseCondElseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCaseCondElse(this);
}
VisualBasic6Parser::SC_CondContext* VisualBasic6Parser::sC_Cond() {
  SC_CondContext *_localctx = _tracker.createInstance<SC_CondContext>(_ctx, getState());
  enterRule(_localctx, 194, VisualBasic6Parser::RuleSC_Cond);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1946);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 296, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<VisualBasic6Parser::CaseCondElseContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(1931);
      match(VisualBasic6Parser::ELSE);
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<VisualBasic6Parser::CaseCondExprContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(1932);
      sC_CondExpr();
      setState(1943);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 295, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1934);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == VisualBasic6Parser::WS) {
            setState(1933);
            match(VisualBasic6Parser::WS);
          }
          setState(1936);
          match(VisualBasic6Parser::COMMA);
          setState(1938);
          _errHandler->sync(this);

          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 294, _ctx)) {
          case 1: {
            setState(1937);
            match(VisualBasic6Parser::WS);
            break;
          }

          default:
            break;
          }
          setState(1940);
          sC_CondExpr(); 
        }
        setState(1945);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 295, _ctx);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SC_CondExprContext ------------------------------------------------------------------

VisualBasic6Parser::SC_CondExprContext::SC_CondExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t VisualBasic6Parser::SC_CondExprContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleSC_CondExpr;
}

void VisualBasic6Parser::SC_CondExprContext::copyFrom(SC_CondExprContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- CaseCondExprValueContext ------------------------------------------------------------------

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::CaseCondExprValueContext::valueStmt() {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(0);
}

VisualBasic6Parser::CaseCondExprValueContext::CaseCondExprValueContext(SC_CondExprContext *ctx) { copyFrom(ctx); }

void VisualBasic6Parser::CaseCondExprValueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCaseCondExprValue(this);
}
void VisualBasic6Parser::CaseCondExprValueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCaseCondExprValue(this);
}
//----------------- CaseCondExprIsContext ------------------------------------------------------------------

tree::TerminalNode* VisualBasic6Parser::CaseCondExprIsContext::IS() {
  return getToken(VisualBasic6Parser::IS, 0);
}

VisualBasic6Parser::ComparisonOperatorContext* VisualBasic6Parser::CaseCondExprIsContext::comparisonOperator() {
  return getRuleContext<VisualBasic6Parser::ComparisonOperatorContext>(0);
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::CaseCondExprIsContext::valueStmt() {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::CaseCondExprIsContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::CaseCondExprIsContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

VisualBasic6Parser::CaseCondExprIsContext::CaseCondExprIsContext(SC_CondExprContext *ctx) { copyFrom(ctx); }

void VisualBasic6Parser::CaseCondExprIsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCaseCondExprIs(this);
}
void VisualBasic6Parser::CaseCondExprIsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCaseCondExprIs(this);
}
//----------------- CaseCondExprToContext ------------------------------------------------------------------

std::vector<VisualBasic6Parser::ValueStmtContext *> VisualBasic6Parser::CaseCondExprToContext::valueStmt() {
  return getRuleContexts<VisualBasic6Parser::ValueStmtContext>();
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::CaseCondExprToContext::valueStmt(size_t i) {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(i);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::CaseCondExprToContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::CaseCondExprToContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

tree::TerminalNode* VisualBasic6Parser::CaseCondExprToContext::TO() {
  return getToken(VisualBasic6Parser::TO, 0);
}

VisualBasic6Parser::CaseCondExprToContext::CaseCondExprToContext(SC_CondExprContext *ctx) { copyFrom(ctx); }

void VisualBasic6Parser::CaseCondExprToContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCaseCondExprTo(this);
}
void VisualBasic6Parser::CaseCondExprToContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCaseCondExprTo(this);
}
VisualBasic6Parser::SC_CondExprContext* VisualBasic6Parser::sC_CondExpr() {
  SC_CondExprContext *_localctx = _tracker.createInstance<SC_CondExprContext>(_ctx, getState());
  enterRule(_localctx, 196, VisualBasic6Parser::RuleSC_CondExpr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1965);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 299, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<VisualBasic6Parser::CaseCondExprIsContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(1948);
      match(VisualBasic6Parser::IS);
      setState(1950);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == VisualBasic6Parser::WS) {
        setState(1949);
        match(VisualBasic6Parser::WS);
      }
      setState(1952);
      comparisonOperator();
      setState(1954);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 298, _ctx)) {
      case 1: {
        setState(1953);
        match(VisualBasic6Parser::WS);
        break;
      }

      default:
        break;
      }
      setState(1956);
      valueStmt(0);
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<VisualBasic6Parser::CaseCondExprValueContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(1958);
      valueStmt(0);
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<VisualBasic6Parser::CaseCondExprToContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(1959);
      valueStmt(0);
      setState(1960);
      match(VisualBasic6Parser::WS);
      setState(1961);
      match(VisualBasic6Parser::TO);
      setState(1962);
      match(VisualBasic6Parser::WS);
      setState(1963);
      valueStmt(0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SendkeysStmtContext ------------------------------------------------------------------

VisualBasic6Parser::SendkeysStmtContext::SendkeysStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::SendkeysStmtContext::SENDKEYS() {
  return getToken(VisualBasic6Parser::SENDKEYS, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::SendkeysStmtContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::SendkeysStmtContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

std::vector<VisualBasic6Parser::ValueStmtContext *> VisualBasic6Parser::SendkeysStmtContext::valueStmt() {
  return getRuleContexts<VisualBasic6Parser::ValueStmtContext>();
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::SendkeysStmtContext::valueStmt(size_t i) {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(i);
}

tree::TerminalNode* VisualBasic6Parser::SendkeysStmtContext::COMMA() {
  return getToken(VisualBasic6Parser::COMMA, 0);
}


size_t VisualBasic6Parser::SendkeysStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleSendkeysStmt;
}

void VisualBasic6Parser::SendkeysStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSendkeysStmt(this);
}

void VisualBasic6Parser::SendkeysStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSendkeysStmt(this);
}

VisualBasic6Parser::SendkeysStmtContext* VisualBasic6Parser::sendkeysStmt() {
  SendkeysStmtContext *_localctx = _tracker.createInstance<SendkeysStmtContext>(_ctx, getState());
  enterRule(_localctx, 198, VisualBasic6Parser::RuleSendkeysStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1967);
    match(VisualBasic6Parser::SENDKEYS);
    setState(1968);
    match(VisualBasic6Parser::WS);
    setState(1969);
    valueStmt(0);
    setState(1978);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 302, _ctx)) {
    case 1: {
      setState(1971);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == VisualBasic6Parser::WS) {
        setState(1970);
        match(VisualBasic6Parser::WS);
      }
      setState(1973);
      match(VisualBasic6Parser::COMMA);
      setState(1975);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 301, _ctx)) {
      case 1: {
        setState(1974);
        match(VisualBasic6Parser::WS);
        break;
      }

      default:
        break;
      }
      setState(1977);
      valueStmt(0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SetattrStmtContext ------------------------------------------------------------------

VisualBasic6Parser::SetattrStmtContext::SetattrStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::SetattrStmtContext::SETATTR() {
  return getToken(VisualBasic6Parser::SETATTR, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::SetattrStmtContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::SetattrStmtContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

std::vector<VisualBasic6Parser::ValueStmtContext *> VisualBasic6Parser::SetattrStmtContext::valueStmt() {
  return getRuleContexts<VisualBasic6Parser::ValueStmtContext>();
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::SetattrStmtContext::valueStmt(size_t i) {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(i);
}

tree::TerminalNode* VisualBasic6Parser::SetattrStmtContext::COMMA() {
  return getToken(VisualBasic6Parser::COMMA, 0);
}


size_t VisualBasic6Parser::SetattrStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleSetattrStmt;
}

void VisualBasic6Parser::SetattrStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSetattrStmt(this);
}

void VisualBasic6Parser::SetattrStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSetattrStmt(this);
}

VisualBasic6Parser::SetattrStmtContext* VisualBasic6Parser::setattrStmt() {
  SetattrStmtContext *_localctx = _tracker.createInstance<SetattrStmtContext>(_ctx, getState());
  enterRule(_localctx, 200, VisualBasic6Parser::RuleSetattrStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1980);
    match(VisualBasic6Parser::SETATTR);
    setState(1981);
    match(VisualBasic6Parser::WS);
    setState(1982);
    valueStmt(0);
    setState(1984);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::WS) {
      setState(1983);
      match(VisualBasic6Parser::WS);
    }
    setState(1986);
    match(VisualBasic6Parser::COMMA);
    setState(1988);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 304, _ctx)) {
    case 1: {
      setState(1987);
      match(VisualBasic6Parser::WS);
      break;
    }

    default:
      break;
    }
    setState(1990);
    valueStmt(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SetStmtContext ------------------------------------------------------------------

VisualBasic6Parser::SetStmtContext::SetStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::SetStmtContext::SET() {
  return getToken(VisualBasic6Parser::SET, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::SetStmtContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::SetStmtContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

VisualBasic6Parser::ImplicitCallStmt_InStmtContext* VisualBasic6Parser::SetStmtContext::implicitCallStmt_InStmt() {
  return getRuleContext<VisualBasic6Parser::ImplicitCallStmt_InStmtContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::SetStmtContext::EQ() {
  return getToken(VisualBasic6Parser::EQ, 0);
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::SetStmtContext::valueStmt() {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(0);
}


size_t VisualBasic6Parser::SetStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleSetStmt;
}

void VisualBasic6Parser::SetStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSetStmt(this);
}

void VisualBasic6Parser::SetStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSetStmt(this);
}

VisualBasic6Parser::SetStmtContext* VisualBasic6Parser::setStmt() {
  SetStmtContext *_localctx = _tracker.createInstance<SetStmtContext>(_ctx, getState());
  enterRule(_localctx, 202, VisualBasic6Parser::RuleSetStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1992);
    match(VisualBasic6Parser::SET);
    setState(1993);
    match(VisualBasic6Parser::WS);
    setState(1994);
    implicitCallStmt_InStmt();
    setState(1996);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::WS) {
      setState(1995);
      match(VisualBasic6Parser::WS);
    }
    setState(1998);
    match(VisualBasic6Parser::EQ);
    setState(2000);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 306, _ctx)) {
    case 1: {
      setState(1999);
      match(VisualBasic6Parser::WS);
      break;
    }

    default:
      break;
    }
    setState(2002);
    valueStmt(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StopStmtContext ------------------------------------------------------------------

VisualBasic6Parser::StopStmtContext::StopStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::StopStmtContext::STOP() {
  return getToken(VisualBasic6Parser::STOP, 0);
}


size_t VisualBasic6Parser::StopStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleStopStmt;
}

void VisualBasic6Parser::StopStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStopStmt(this);
}

void VisualBasic6Parser::StopStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStopStmt(this);
}

VisualBasic6Parser::StopStmtContext* VisualBasic6Parser::stopStmt() {
  StopStmtContext *_localctx = _tracker.createInstance<StopStmtContext>(_ctx, getState());
  enterRule(_localctx, 204, VisualBasic6Parser::RuleStopStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2004);
    match(VisualBasic6Parser::STOP);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubStmtContext ------------------------------------------------------------------

VisualBasic6Parser::SubStmtContext::SubStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::SubStmtContext::SUB() {
  return getToken(VisualBasic6Parser::SUB, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::SubStmtContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::SubStmtContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

VisualBasic6Parser::AmbiguousIdentifierContext* VisualBasic6Parser::SubStmtContext::ambiguousIdentifier() {
  return getRuleContext<VisualBasic6Parser::AmbiguousIdentifierContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::SubStmtContext::END_SUB() {
  return getToken(VisualBasic6Parser::END_SUB, 0);
}

VisualBasic6Parser::VisibilityContext* VisualBasic6Parser::SubStmtContext::visibility() {
  return getRuleContext<VisualBasic6Parser::VisibilityContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::SubStmtContext::STATIC() {
  return getToken(VisualBasic6Parser::STATIC, 0);
}

VisualBasic6Parser::ArgListContext* VisualBasic6Parser::SubStmtContext::argList() {
  return getRuleContext<VisualBasic6Parser::ArgListContext>(0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::SubStmtContext::NEWLINE() {
  return getTokens(VisualBasic6Parser::NEWLINE);
}

tree::TerminalNode* VisualBasic6Parser::SubStmtContext::NEWLINE(size_t i) {
  return getToken(VisualBasic6Parser::NEWLINE, i);
}

VisualBasic6Parser::BlockContext* VisualBasic6Parser::SubStmtContext::block() {
  return getRuleContext<VisualBasic6Parser::BlockContext>(0);
}


size_t VisualBasic6Parser::SubStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleSubStmt;
}

void VisualBasic6Parser::SubStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubStmt(this);
}

void VisualBasic6Parser::SubStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubStmt(this);
}

VisualBasic6Parser::SubStmtContext* VisualBasic6Parser::subStmt() {
  SubStmtContext *_localctx = _tracker.createInstance<SubStmtContext>(_ctx, getState());
  enterRule(_localctx, 206, VisualBasic6Parser::RuleSubStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2009);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 2449958197289549841) != 0)) {
      setState(2006);
      visibility();
      setState(2007);
      match(VisualBasic6Parser::WS);
    }
    setState(2013);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::STATIC) {
      setState(2011);
      match(VisualBasic6Parser::STATIC);
      setState(2012);
      match(VisualBasic6Parser::WS);
    }
    setState(2015);
    match(VisualBasic6Parser::SUB);
    setState(2016);
    match(VisualBasic6Parser::WS);
    setState(2017);
    ambiguousIdentifier();
    setState(2022);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::LPAREN

    || _la == VisualBasic6Parser::WS) {
      setState(2019);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == VisualBasic6Parser::WS) {
        setState(2018);
        match(VisualBasic6Parser::WS);
      }
      setState(2021);
      argList();
    }
    setState(2025); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(2024);
      match(VisualBasic6Parser::NEWLINE);
      setState(2027); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == VisualBasic6Parser::NEWLINE);
    setState(2035);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -53972826784270338) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 4544131962008240127) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 129)) & 721138890332700607) != 0) || ((((_la - 207) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 207)) & 34817) != 0)) {
      setState(2029);
      block();
      setState(2031); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(2030);
        match(VisualBasic6Parser::NEWLINE);
        setState(2033); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == VisualBasic6Parser::NEWLINE);
    }
    setState(2037);
    match(VisualBasic6Parser::END_SUB);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TimeStmtContext ------------------------------------------------------------------

VisualBasic6Parser::TimeStmtContext::TimeStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::TimeStmtContext::TIME() {
  return getToken(VisualBasic6Parser::TIME, 0);
}

tree::TerminalNode* VisualBasic6Parser::TimeStmtContext::EQ() {
  return getToken(VisualBasic6Parser::EQ, 0);
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::TimeStmtContext::valueStmt() {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::TimeStmtContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::TimeStmtContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}


size_t VisualBasic6Parser::TimeStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleTimeStmt;
}

void VisualBasic6Parser::TimeStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTimeStmt(this);
}

void VisualBasic6Parser::TimeStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTimeStmt(this);
}

VisualBasic6Parser::TimeStmtContext* VisualBasic6Parser::timeStmt() {
  TimeStmtContext *_localctx = _tracker.createInstance<TimeStmtContext>(_ctx, getState());
  enterRule(_localctx, 208, VisualBasic6Parser::RuleTimeStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2039);
    match(VisualBasic6Parser::TIME);
    setState(2041);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::WS) {
      setState(2040);
      match(VisualBasic6Parser::WS);
    }
    setState(2043);
    match(VisualBasic6Parser::EQ);
    setState(2045);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 315, _ctx)) {
    case 1: {
      setState(2044);
      match(VisualBasic6Parser::WS);
      break;
    }

    default:
      break;
    }
    setState(2047);
    valueStmt(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeStmtContext ------------------------------------------------------------------

VisualBasic6Parser::TypeStmtContext::TypeStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::TypeStmtContext::TYPE() {
  return getToken(VisualBasic6Parser::TYPE, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::TypeStmtContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::TypeStmtContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

VisualBasic6Parser::AmbiguousIdentifierContext* VisualBasic6Parser::TypeStmtContext::ambiguousIdentifier() {
  return getRuleContext<VisualBasic6Parser::AmbiguousIdentifierContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::TypeStmtContext::END_TYPE() {
  return getToken(VisualBasic6Parser::END_TYPE, 0);
}

VisualBasic6Parser::VisibilityContext* VisualBasic6Parser::TypeStmtContext::visibility() {
  return getRuleContext<VisualBasic6Parser::VisibilityContext>(0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::TypeStmtContext::NEWLINE() {
  return getTokens(VisualBasic6Parser::NEWLINE);
}

tree::TerminalNode* VisualBasic6Parser::TypeStmtContext::NEWLINE(size_t i) {
  return getToken(VisualBasic6Parser::NEWLINE, i);
}

std::vector<VisualBasic6Parser::TypeStmt_ElementContext *> VisualBasic6Parser::TypeStmtContext::typeStmt_Element() {
  return getRuleContexts<VisualBasic6Parser::TypeStmt_ElementContext>();
}

VisualBasic6Parser::TypeStmt_ElementContext* VisualBasic6Parser::TypeStmtContext::typeStmt_Element(size_t i) {
  return getRuleContext<VisualBasic6Parser::TypeStmt_ElementContext>(i);
}


size_t VisualBasic6Parser::TypeStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleTypeStmt;
}

void VisualBasic6Parser::TypeStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeStmt(this);
}

void VisualBasic6Parser::TypeStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeStmt(this);
}

VisualBasic6Parser::TypeStmtContext* VisualBasic6Parser::typeStmt() {
  TypeStmtContext *_localctx = _tracker.createInstance<TypeStmtContext>(_ctx, getState());
  enterRule(_localctx, 210, VisualBasic6Parser::RuleTypeStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2052);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 2449958197289549841) != 0)) {
      setState(2049);
      visibility();
      setState(2050);
      match(VisualBasic6Parser::WS);
    }
    setState(2054);
    match(VisualBasic6Parser::TYPE);
    setState(2055);
    match(VisualBasic6Parser::WS);
    setState(2056);
    ambiguousIdentifier();
    setState(2058); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(2057);
      match(VisualBasic6Parser::NEWLINE);
      setState(2060); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == VisualBasic6Parser::NEWLINE);
    setState(2065);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2251870182429423614) != 0) || ((((_la - 66) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 66)) & -8087550153692545025) != 0) || ((((_la - 130) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 130)) & 281474976710623) != 0) || _la == VisualBasic6Parser::L_SQUARE_BRACKET

    || _la == VisualBasic6Parser::IDENTIFIER) {
      setState(2062);
      typeStmt_Element();
      setState(2067);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2068);
    match(VisualBasic6Parser::END_TYPE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeStmt_ElementContext ------------------------------------------------------------------

VisualBasic6Parser::TypeStmt_ElementContext::TypeStmt_ElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

VisualBasic6Parser::AmbiguousIdentifierContext* VisualBasic6Parser::TypeStmt_ElementContext::ambiguousIdentifier() {
  return getRuleContext<VisualBasic6Parser::AmbiguousIdentifierContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::TypeStmt_ElementContext::LPAREN() {
  return getToken(VisualBasic6Parser::LPAREN, 0);
}

tree::TerminalNode* VisualBasic6Parser::TypeStmt_ElementContext::RPAREN() {
  return getToken(VisualBasic6Parser::RPAREN, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::TypeStmt_ElementContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::TypeStmt_ElementContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

VisualBasic6Parser::AsTypeClauseContext* VisualBasic6Parser::TypeStmt_ElementContext::asTypeClause() {
  return getRuleContext<VisualBasic6Parser::AsTypeClauseContext>(0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::TypeStmt_ElementContext::NEWLINE() {
  return getTokens(VisualBasic6Parser::NEWLINE);
}

tree::TerminalNode* VisualBasic6Parser::TypeStmt_ElementContext::NEWLINE(size_t i) {
  return getToken(VisualBasic6Parser::NEWLINE, i);
}

VisualBasic6Parser::SubscriptsContext* VisualBasic6Parser::TypeStmt_ElementContext::subscripts() {
  return getRuleContext<VisualBasic6Parser::SubscriptsContext>(0);
}


size_t VisualBasic6Parser::TypeStmt_ElementContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleTypeStmt_Element;
}

void VisualBasic6Parser::TypeStmt_ElementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeStmt_Element(this);
}

void VisualBasic6Parser::TypeStmt_ElementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeStmt_Element(this);
}

VisualBasic6Parser::TypeStmt_ElementContext* VisualBasic6Parser::typeStmt_Element() {
  TypeStmt_ElementContext *_localctx = _tracker.createInstance<TypeStmt_ElementContext>(_ctx, getState());
  enterRule(_localctx, 212, VisualBasic6Parser::RuleTypeStmt_Element);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2070);
    ambiguousIdentifier();
    setState(2085);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 323, _ctx)) {
    case 1: {
      setState(2072);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == VisualBasic6Parser::WS) {
        setState(2071);
        match(VisualBasic6Parser::WS);
      }
      setState(2074);
      match(VisualBasic6Parser::LPAREN);
      setState(2079);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 321, _ctx)) {
      case 1: {
        setState(2076);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 320, _ctx)) {
        case 1: {
          setState(2075);
          match(VisualBasic6Parser::WS);
          break;
        }

        default:
          break;
        }
        setState(2078);
        subscripts();
        break;
      }

      default:
        break;
      }
      setState(2082);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == VisualBasic6Parser::WS) {
        setState(2081);
        match(VisualBasic6Parser::WS);
      }
      setState(2084);
      match(VisualBasic6Parser::RPAREN);
      break;
    }

    default:
      break;
    }
    setState(2089);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::WS) {
      setState(2087);
      match(VisualBasic6Parser::WS);
      setState(2088);
      asTypeClause();
    }
    setState(2092); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(2091);
      match(VisualBasic6Parser::NEWLINE);
      setState(2094); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == VisualBasic6Parser::NEWLINE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeOfStmtContext ------------------------------------------------------------------

VisualBasic6Parser::TypeOfStmtContext::TypeOfStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::TypeOfStmtContext::TYPEOF() {
  return getToken(VisualBasic6Parser::TYPEOF, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::TypeOfStmtContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::TypeOfStmtContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::TypeOfStmtContext::valueStmt() {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::TypeOfStmtContext::IS() {
  return getToken(VisualBasic6Parser::IS, 0);
}

VisualBasic6Parser::Type_Context* VisualBasic6Parser::TypeOfStmtContext::type_() {
  return getRuleContext<VisualBasic6Parser::Type_Context>(0);
}


size_t VisualBasic6Parser::TypeOfStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleTypeOfStmt;
}

void VisualBasic6Parser::TypeOfStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeOfStmt(this);
}

void VisualBasic6Parser::TypeOfStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeOfStmt(this);
}

VisualBasic6Parser::TypeOfStmtContext* VisualBasic6Parser::typeOfStmt() {
  TypeOfStmtContext *_localctx = _tracker.createInstance<TypeOfStmtContext>(_ctx, getState());
  enterRule(_localctx, 214, VisualBasic6Parser::RuleTypeOfStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2096);
    match(VisualBasic6Parser::TYPEOF);
    setState(2097);
    match(VisualBasic6Parser::WS);
    setState(2098);
    valueStmt(0);
    setState(2103);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 326, _ctx)) {
    case 1: {
      setState(2099);
      match(VisualBasic6Parser::WS);
      setState(2100);
      match(VisualBasic6Parser::IS);
      setState(2101);
      match(VisualBasic6Parser::WS);
      setState(2102);
      type_();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnloadStmtContext ------------------------------------------------------------------

VisualBasic6Parser::UnloadStmtContext::UnloadStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::UnloadStmtContext::UNLOAD() {
  return getToken(VisualBasic6Parser::UNLOAD, 0);
}

tree::TerminalNode* VisualBasic6Parser::UnloadStmtContext::WS() {
  return getToken(VisualBasic6Parser::WS, 0);
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::UnloadStmtContext::valueStmt() {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(0);
}


size_t VisualBasic6Parser::UnloadStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleUnloadStmt;
}

void VisualBasic6Parser::UnloadStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnloadStmt(this);
}

void VisualBasic6Parser::UnloadStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnloadStmt(this);
}

VisualBasic6Parser::UnloadStmtContext* VisualBasic6Parser::unloadStmt() {
  UnloadStmtContext *_localctx = _tracker.createInstance<UnloadStmtContext>(_ctx, getState());
  enterRule(_localctx, 216, VisualBasic6Parser::RuleUnloadStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2105);
    match(VisualBasic6Parser::UNLOAD);
    setState(2106);
    match(VisualBasic6Parser::WS);
    setState(2107);
    valueStmt(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnlockStmtContext ------------------------------------------------------------------

VisualBasic6Parser::UnlockStmtContext::UnlockStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::UnlockStmtContext::UNLOCK() {
  return getToken(VisualBasic6Parser::UNLOCK, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::UnlockStmtContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::UnlockStmtContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

std::vector<VisualBasic6Parser::ValueStmtContext *> VisualBasic6Parser::UnlockStmtContext::valueStmt() {
  return getRuleContexts<VisualBasic6Parser::ValueStmtContext>();
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::UnlockStmtContext::valueStmt(size_t i) {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(i);
}

tree::TerminalNode* VisualBasic6Parser::UnlockStmtContext::COMMA() {
  return getToken(VisualBasic6Parser::COMMA, 0);
}

tree::TerminalNode* VisualBasic6Parser::UnlockStmtContext::TO() {
  return getToken(VisualBasic6Parser::TO, 0);
}


size_t VisualBasic6Parser::UnlockStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleUnlockStmt;
}

void VisualBasic6Parser::UnlockStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnlockStmt(this);
}

void VisualBasic6Parser::UnlockStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnlockStmt(this);
}

VisualBasic6Parser::UnlockStmtContext* VisualBasic6Parser::unlockStmt() {
  UnlockStmtContext *_localctx = _tracker.createInstance<UnlockStmtContext>(_ctx, getState());
  enterRule(_localctx, 218, VisualBasic6Parser::RuleUnlockStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2109);
    match(VisualBasic6Parser::UNLOCK);
    setState(2110);
    match(VisualBasic6Parser::WS);
    setState(2111);
    valueStmt(0);
    setState(2126);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 330, _ctx)) {
    case 1: {
      setState(2113);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == VisualBasic6Parser::WS) {
        setState(2112);
        match(VisualBasic6Parser::WS);
      }
      setState(2115);
      match(VisualBasic6Parser::COMMA);
      setState(2117);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 328, _ctx)) {
      case 1: {
        setState(2116);
        match(VisualBasic6Parser::WS);
        break;
      }

      default:
        break;
      }
      setState(2119);
      valueStmt(0);
      setState(2124);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 329, _ctx)) {
      case 1: {
        setState(2120);
        match(VisualBasic6Parser::WS);
        setState(2121);
        match(VisualBasic6Parser::TO);
        setState(2122);
        match(VisualBasic6Parser::WS);
        setState(2123);
        valueStmt(0);
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ValueStmtContext ------------------------------------------------------------------

VisualBasic6Parser::ValueStmtContext::ValueStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t VisualBasic6Parser::ValueStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleValueStmt;
}

void VisualBasic6Parser::ValueStmtContext::copyFrom(ValueStmtContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- VsAssignContext ------------------------------------------------------------------

VisualBasic6Parser::ImplicitCallStmt_InStmtContext* VisualBasic6Parser::VsAssignContext::implicitCallStmt_InStmt() {
  return getRuleContext<VisualBasic6Parser::ImplicitCallStmt_InStmtContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::VsAssignContext::ASSIGN() {
  return getToken(VisualBasic6Parser::ASSIGN, 0);
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::VsAssignContext::valueStmt() {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::VsAssignContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::VsAssignContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

VisualBasic6Parser::VsAssignContext::VsAssignContext(ValueStmtContext *ctx) { copyFrom(ctx); }

void VisualBasic6Parser::VsAssignContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVsAssign(this);
}
void VisualBasic6Parser::VsAssignContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVsAssign(this);
}
//----------------- VsNotContext ------------------------------------------------------------------

tree::TerminalNode* VisualBasic6Parser::VsNotContext::NOT() {
  return getToken(VisualBasic6Parser::NOT, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::VsNotContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::VsNotContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::VsNotContext::valueStmt() {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::VsNotContext::LPAREN() {
  return getToken(VisualBasic6Parser::LPAREN, 0);
}

tree::TerminalNode* VisualBasic6Parser::VsNotContext::RPAREN() {
  return getToken(VisualBasic6Parser::RPAREN, 0);
}

VisualBasic6Parser::VsNotContext::VsNotContext(ValueStmtContext *ctx) { copyFrom(ctx); }

void VisualBasic6Parser::VsNotContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVsNot(this);
}
void VisualBasic6Parser::VsNotContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVsNot(this);
}
//----------------- VsStructContext ------------------------------------------------------------------

tree::TerminalNode* VisualBasic6Parser::VsStructContext::LPAREN() {
  return getToken(VisualBasic6Parser::LPAREN, 0);
}

std::vector<VisualBasic6Parser::ValueStmtContext *> VisualBasic6Parser::VsStructContext::valueStmt() {
  return getRuleContexts<VisualBasic6Parser::ValueStmtContext>();
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::VsStructContext::valueStmt(size_t i) {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(i);
}

tree::TerminalNode* VisualBasic6Parser::VsStructContext::RPAREN() {
  return getToken(VisualBasic6Parser::RPAREN, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::VsStructContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::VsStructContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::VsStructContext::COMMA() {
  return getTokens(VisualBasic6Parser::COMMA);
}

tree::TerminalNode* VisualBasic6Parser::VsStructContext::COMMA(size_t i) {
  return getToken(VisualBasic6Parser::COMMA, i);
}

VisualBasic6Parser::VsStructContext::VsStructContext(ValueStmtContext *ctx) { copyFrom(ctx); }

void VisualBasic6Parser::VsStructContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVsStruct(this);
}
void VisualBasic6Parser::VsStructContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVsStruct(this);
}
//----------------- VsMultDivContext ------------------------------------------------------------------

std::vector<VisualBasic6Parser::ValueStmtContext *> VisualBasic6Parser::VsMultDivContext::valueStmt() {
  return getRuleContexts<VisualBasic6Parser::ValueStmtContext>();
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::VsMultDivContext::valueStmt(size_t i) {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(i);
}

tree::TerminalNode* VisualBasic6Parser::VsMultDivContext::MULT() {
  return getToken(VisualBasic6Parser::MULT, 0);
}

tree::TerminalNode* VisualBasic6Parser::VsMultDivContext::DIV() {
  return getToken(VisualBasic6Parser::DIV, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::VsMultDivContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::VsMultDivContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

VisualBasic6Parser::VsMultDivContext::VsMultDivContext(ValueStmtContext *ctx) { copyFrom(ctx); }

void VisualBasic6Parser::VsMultDivContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVsMultDiv(this);
}
void VisualBasic6Parser::VsMultDivContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVsMultDiv(this);
}
//----------------- VsTypeOfContext ------------------------------------------------------------------

VisualBasic6Parser::TypeOfStmtContext* VisualBasic6Parser::VsTypeOfContext::typeOfStmt() {
  return getRuleContext<VisualBasic6Parser::TypeOfStmtContext>(0);
}

VisualBasic6Parser::VsTypeOfContext::VsTypeOfContext(ValueStmtContext *ctx) { copyFrom(ctx); }

void VisualBasic6Parser::VsTypeOfContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVsTypeOf(this);
}
void VisualBasic6Parser::VsTypeOfContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVsTypeOf(this);
}
//----------------- VsICSContext ------------------------------------------------------------------

VisualBasic6Parser::ImplicitCallStmt_InStmtContext* VisualBasic6Parser::VsICSContext::implicitCallStmt_InStmt() {
  return getRuleContext<VisualBasic6Parser::ImplicitCallStmt_InStmtContext>(0);
}

VisualBasic6Parser::VsICSContext::VsICSContext(ValueStmtContext *ctx) { copyFrom(ctx); }

void VisualBasic6Parser::VsICSContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVsICS(this);
}
void VisualBasic6Parser::VsICSContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVsICS(this);
}
//----------------- VsXorContext ------------------------------------------------------------------

std::vector<VisualBasic6Parser::ValueStmtContext *> VisualBasic6Parser::VsXorContext::valueStmt() {
  return getRuleContexts<VisualBasic6Parser::ValueStmtContext>();
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::VsXorContext::valueStmt(size_t i) {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(i);
}

tree::TerminalNode* VisualBasic6Parser::VsXorContext::XOR() {
  return getToken(VisualBasic6Parser::XOR, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::VsXorContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::VsXorContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

VisualBasic6Parser::VsXorContext::VsXorContext(ValueStmtContext *ctx) { copyFrom(ctx); }

void VisualBasic6Parser::VsXorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVsXor(this);
}
void VisualBasic6Parser::VsXorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVsXor(this);
}
//----------------- VsAddSubContext ------------------------------------------------------------------

std::vector<VisualBasic6Parser::ValueStmtContext *> VisualBasic6Parser::VsAddSubContext::valueStmt() {
  return getRuleContexts<VisualBasic6Parser::ValueStmtContext>();
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::VsAddSubContext::valueStmt(size_t i) {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(i);
}

tree::TerminalNode* VisualBasic6Parser::VsAddSubContext::PLUS() {
  return getToken(VisualBasic6Parser::PLUS, 0);
}

tree::TerminalNode* VisualBasic6Parser::VsAddSubContext::MINUS() {
  return getToken(VisualBasic6Parser::MINUS, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::VsAddSubContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::VsAddSubContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

VisualBasic6Parser::VsAddSubContext::VsAddSubContext(ValueStmtContext *ctx) { copyFrom(ctx); }

void VisualBasic6Parser::VsAddSubContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVsAddSub(this);
}
void VisualBasic6Parser::VsAddSubContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVsAddSub(this);
}
//----------------- VsAndContext ------------------------------------------------------------------

std::vector<VisualBasic6Parser::ValueStmtContext *> VisualBasic6Parser::VsAndContext::valueStmt() {
  return getRuleContexts<VisualBasic6Parser::ValueStmtContext>();
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::VsAndContext::valueStmt(size_t i) {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(i);
}

tree::TerminalNode* VisualBasic6Parser::VsAndContext::AND() {
  return getToken(VisualBasic6Parser::AND, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::VsAndContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::VsAndContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

VisualBasic6Parser::VsAndContext::VsAndContext(ValueStmtContext *ctx) { copyFrom(ctx); }

void VisualBasic6Parser::VsAndContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVsAnd(this);
}
void VisualBasic6Parser::VsAndContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVsAnd(this);
}
//----------------- VsPowContext ------------------------------------------------------------------

std::vector<VisualBasic6Parser::ValueStmtContext *> VisualBasic6Parser::VsPowContext::valueStmt() {
  return getRuleContexts<VisualBasic6Parser::ValueStmtContext>();
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::VsPowContext::valueStmt(size_t i) {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(i);
}

tree::TerminalNode* VisualBasic6Parser::VsPowContext::POW() {
  return getToken(VisualBasic6Parser::POW, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::VsPowContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::VsPowContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

VisualBasic6Parser::VsPowContext::VsPowContext(ValueStmtContext *ctx) { copyFrom(ctx); }

void VisualBasic6Parser::VsPowContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVsPow(this);
}
void VisualBasic6Parser::VsPowContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVsPow(this);
}
//----------------- VsModContext ------------------------------------------------------------------

std::vector<VisualBasic6Parser::ValueStmtContext *> VisualBasic6Parser::VsModContext::valueStmt() {
  return getRuleContexts<VisualBasic6Parser::ValueStmtContext>();
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::VsModContext::valueStmt(size_t i) {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(i);
}

tree::TerminalNode* VisualBasic6Parser::VsModContext::MOD() {
  return getToken(VisualBasic6Parser::MOD, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::VsModContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::VsModContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

VisualBasic6Parser::VsModContext::VsModContext(ValueStmtContext *ctx) { copyFrom(ctx); }

void VisualBasic6Parser::VsModContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVsMod(this);
}
void VisualBasic6Parser::VsModContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVsMod(this);
}
//----------------- VsAmpContext ------------------------------------------------------------------

std::vector<VisualBasic6Parser::ValueStmtContext *> VisualBasic6Parser::VsAmpContext::valueStmt() {
  return getRuleContexts<VisualBasic6Parser::ValueStmtContext>();
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::VsAmpContext::valueStmt(size_t i) {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(i);
}

tree::TerminalNode* VisualBasic6Parser::VsAmpContext::AMPERSAND() {
  return getToken(VisualBasic6Parser::AMPERSAND, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::VsAmpContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::VsAmpContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

VisualBasic6Parser::VsAmpContext::VsAmpContext(ValueStmtContext *ctx) { copyFrom(ctx); }

void VisualBasic6Parser::VsAmpContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVsAmp(this);
}
void VisualBasic6Parser::VsAmpContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVsAmp(this);
}
//----------------- VsAddressOfContext ------------------------------------------------------------------

tree::TerminalNode* VisualBasic6Parser::VsAddressOfContext::ADDRESSOF() {
  return getToken(VisualBasic6Parser::ADDRESSOF, 0);
}

tree::TerminalNode* VisualBasic6Parser::VsAddressOfContext::WS() {
  return getToken(VisualBasic6Parser::WS, 0);
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::VsAddressOfContext::valueStmt() {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(0);
}

VisualBasic6Parser::VsAddressOfContext::VsAddressOfContext(ValueStmtContext *ctx) { copyFrom(ctx); }

void VisualBasic6Parser::VsAddressOfContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVsAddressOf(this);
}
void VisualBasic6Parser::VsAddressOfContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVsAddressOf(this);
}
//----------------- VsNewContext ------------------------------------------------------------------

tree::TerminalNode* VisualBasic6Parser::VsNewContext::NEW() {
  return getToken(VisualBasic6Parser::NEW, 0);
}

tree::TerminalNode* VisualBasic6Parser::VsNewContext::WS() {
  return getToken(VisualBasic6Parser::WS, 0);
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::VsNewContext::valueStmt() {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(0);
}

VisualBasic6Parser::VsNewContext::VsNewContext(ValueStmtContext *ctx) { copyFrom(ctx); }

void VisualBasic6Parser::VsNewContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVsNew(this);
}
void VisualBasic6Parser::VsNewContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVsNew(this);
}
//----------------- VsPlusMinusContext ------------------------------------------------------------------

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::VsPlusMinusContext::valueStmt() {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::VsPlusMinusContext::PLUS() {
  return getToken(VisualBasic6Parser::PLUS, 0);
}

tree::TerminalNode* VisualBasic6Parser::VsPlusMinusContext::MINUS() {
  return getToken(VisualBasic6Parser::MINUS, 0);
}

tree::TerminalNode* VisualBasic6Parser::VsPlusMinusContext::WS() {
  return getToken(VisualBasic6Parser::WS, 0);
}

VisualBasic6Parser::VsPlusMinusContext::VsPlusMinusContext(ValueStmtContext *ctx) { copyFrom(ctx); }

void VisualBasic6Parser::VsPlusMinusContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVsPlusMinus(this);
}
void VisualBasic6Parser::VsPlusMinusContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVsPlusMinus(this);
}
//----------------- VsIDivContext ------------------------------------------------------------------

std::vector<VisualBasic6Parser::ValueStmtContext *> VisualBasic6Parser::VsIDivContext::valueStmt() {
  return getRuleContexts<VisualBasic6Parser::ValueStmtContext>();
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::VsIDivContext::valueStmt(size_t i) {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(i);
}

tree::TerminalNode* VisualBasic6Parser::VsIDivContext::IDIV() {
  return getToken(VisualBasic6Parser::IDIV, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::VsIDivContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::VsIDivContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

VisualBasic6Parser::VsIDivContext::VsIDivContext(ValueStmtContext *ctx) { copyFrom(ctx); }

void VisualBasic6Parser::VsIDivContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVsIDiv(this);
}
void VisualBasic6Parser::VsIDivContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVsIDiv(this);
}
//----------------- VsOrContext ------------------------------------------------------------------

std::vector<VisualBasic6Parser::ValueStmtContext *> VisualBasic6Parser::VsOrContext::valueStmt() {
  return getRuleContexts<VisualBasic6Parser::ValueStmtContext>();
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::VsOrContext::valueStmt(size_t i) {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(i);
}

tree::TerminalNode* VisualBasic6Parser::VsOrContext::OR() {
  return getToken(VisualBasic6Parser::OR, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::VsOrContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::VsOrContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

VisualBasic6Parser::VsOrContext::VsOrContext(ValueStmtContext *ctx) { copyFrom(ctx); }

void VisualBasic6Parser::VsOrContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVsOr(this);
}
void VisualBasic6Parser::VsOrContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVsOr(this);
}
//----------------- VsLiteralContext ------------------------------------------------------------------

VisualBasic6Parser::LiteralContext* VisualBasic6Parser::VsLiteralContext::literal() {
  return getRuleContext<VisualBasic6Parser::LiteralContext>(0);
}

VisualBasic6Parser::VsLiteralContext::VsLiteralContext(ValueStmtContext *ctx) { copyFrom(ctx); }

void VisualBasic6Parser::VsLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVsLiteral(this);
}
void VisualBasic6Parser::VsLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVsLiteral(this);
}
//----------------- VsEqvContext ------------------------------------------------------------------

std::vector<VisualBasic6Parser::ValueStmtContext *> VisualBasic6Parser::VsEqvContext::valueStmt() {
  return getRuleContexts<VisualBasic6Parser::ValueStmtContext>();
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::VsEqvContext::valueStmt(size_t i) {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(i);
}

tree::TerminalNode* VisualBasic6Parser::VsEqvContext::EQV() {
  return getToken(VisualBasic6Parser::EQV, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::VsEqvContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::VsEqvContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

VisualBasic6Parser::VsEqvContext::VsEqvContext(ValueStmtContext *ctx) { copyFrom(ctx); }

void VisualBasic6Parser::VsEqvContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVsEqv(this);
}
void VisualBasic6Parser::VsEqvContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVsEqv(this);
}
//----------------- VsImpContext ------------------------------------------------------------------

std::vector<VisualBasic6Parser::ValueStmtContext *> VisualBasic6Parser::VsImpContext::valueStmt() {
  return getRuleContexts<VisualBasic6Parser::ValueStmtContext>();
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::VsImpContext::valueStmt(size_t i) {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(i);
}

tree::TerminalNode* VisualBasic6Parser::VsImpContext::IMP() {
  return getToken(VisualBasic6Parser::IMP, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::VsImpContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::VsImpContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

VisualBasic6Parser::VsImpContext::VsImpContext(ValueStmtContext *ctx) { copyFrom(ctx); }

void VisualBasic6Parser::VsImpContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVsImp(this);
}
void VisualBasic6Parser::VsImpContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVsImp(this);
}
//----------------- VsCompContext ------------------------------------------------------------------

std::vector<VisualBasic6Parser::ValueStmtContext *> VisualBasic6Parser::VsCompContext::valueStmt() {
  return getRuleContexts<VisualBasic6Parser::ValueStmtContext>();
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::VsCompContext::valueStmt(size_t i) {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(i);
}

tree::TerminalNode* VisualBasic6Parser::VsCompContext::EQ() {
  return getToken(VisualBasic6Parser::EQ, 0);
}

tree::TerminalNode* VisualBasic6Parser::VsCompContext::NEQ() {
  return getToken(VisualBasic6Parser::NEQ, 0);
}

tree::TerminalNode* VisualBasic6Parser::VsCompContext::LT() {
  return getToken(VisualBasic6Parser::LT, 0);
}

tree::TerminalNode* VisualBasic6Parser::VsCompContext::GT() {
  return getToken(VisualBasic6Parser::GT, 0);
}

tree::TerminalNode* VisualBasic6Parser::VsCompContext::LEQ() {
  return getToken(VisualBasic6Parser::LEQ, 0);
}

tree::TerminalNode* VisualBasic6Parser::VsCompContext::GEQ() {
  return getToken(VisualBasic6Parser::GEQ, 0);
}

tree::TerminalNode* VisualBasic6Parser::VsCompContext::LIKE() {
  return getToken(VisualBasic6Parser::LIKE, 0);
}

tree::TerminalNode* VisualBasic6Parser::VsCompContext::IS() {
  return getToken(VisualBasic6Parser::IS, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::VsCompContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::VsCompContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

VisualBasic6Parser::VsCompContext::VsCompContext(ValueStmtContext *ctx) { copyFrom(ctx); }

void VisualBasic6Parser::VsCompContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVsComp(this);
}
void VisualBasic6Parser::VsCompContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVsComp(this);
}
//----------------- VsMidContext ------------------------------------------------------------------

VisualBasic6Parser::MidStmtContext* VisualBasic6Parser::VsMidContext::midStmt() {
  return getRuleContext<VisualBasic6Parser::MidStmtContext>(0);
}

VisualBasic6Parser::VsMidContext::VsMidContext(ValueStmtContext *ctx) { copyFrom(ctx); }

void VisualBasic6Parser::VsMidContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVsMid(this);
}
void VisualBasic6Parser::VsMidContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVsMid(this);
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::valueStmt() {
   return valueStmt(0);
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::valueStmt(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  VisualBasic6Parser::ValueStmtContext *_localctx = _tracker.createInstance<ValueStmtContext>(_ctx, parentState);
  VisualBasic6Parser::ValueStmtContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 220;
  enterRecursionRule(_localctx, 220, VisualBasic6Parser::RuleValueStmt, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2192);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 342, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<VsLiteralContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;

      setState(2129);
      literal();
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<VsStructContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(2130);
      match(VisualBasic6Parser::LPAREN);
      setState(2132);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 331, _ctx)) {
      case 1: {
        setState(2131);
        match(VisualBasic6Parser::WS);
        break;
      }

      default:
        break;
      }
      setState(2134);
      valueStmt(0);
      setState(2145);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 334, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(2136);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == VisualBasic6Parser::WS) {
            setState(2135);
            match(VisualBasic6Parser::WS);
          }
          setState(2138);
          match(VisualBasic6Parser::COMMA);
          setState(2140);
          _errHandler->sync(this);

          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 333, _ctx)) {
          case 1: {
            setState(2139);
            match(VisualBasic6Parser::WS);
            break;
          }

          default:
            break;
          }
          setState(2142);
          valueStmt(0); 
        }
        setState(2147);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 334, _ctx);
      }
      setState(2149);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == VisualBasic6Parser::WS) {
        setState(2148);
        match(VisualBasic6Parser::WS);
      }
      setState(2151);
      match(VisualBasic6Parser::RPAREN);
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<VsNewContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(2153);
      match(VisualBasic6Parser::NEW);
      setState(2154);
      match(VisualBasic6Parser::WS);
      setState(2155);
      valueStmt(20);
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<VsTypeOfContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(2156);
      typeOfStmt();
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<VsAddressOfContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(2157);
      match(VisualBasic6Parser::ADDRESSOF);
      setState(2158);
      match(VisualBasic6Parser::WS);
      setState(2159);
      valueStmt(18);
      break;
    }

    case 6: {
      _localctx = _tracker.createInstance<VsAssignContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(2160);
      implicitCallStmt_InStmt();
      setState(2162);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == VisualBasic6Parser::WS) {
        setState(2161);
        match(VisualBasic6Parser::WS);
      }
      setState(2164);
      match(VisualBasic6Parser::ASSIGN);
      setState(2166);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 337, _ctx)) {
      case 1: {
        setState(2165);
        match(VisualBasic6Parser::WS);
        break;
      }

      default:
        break;
      }
      setState(2168);
      valueStmt(17);
      break;
    }

    case 7: {
      _localctx = _tracker.createInstance<VsPlusMinusContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(2170);
      _la = _input->LA(1);
      if (!(_la == VisualBasic6Parser::MINUS

      || _la == VisualBasic6Parser::PLUS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(2172);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 338, _ctx)) {
      case 1: {
        setState(2171);
        match(VisualBasic6Parser::WS);
        break;
      }

      default:
        break;
      }
      setState(2174);
      valueStmt(15);
      break;
    }

    case 8: {
      _localctx = _tracker.createInstance<VsNotContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(2175);
      match(VisualBasic6Parser::NOT);
      setState(2188);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case VisualBasic6Parser::WS: {
          setState(2176);
          match(VisualBasic6Parser::WS);
          setState(2177);
          valueStmt(0);
          break;
        }

        case VisualBasic6Parser::LPAREN: {
          setState(2178);
          match(VisualBasic6Parser::LPAREN);
          setState(2180);
          _errHandler->sync(this);

          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 339, _ctx)) {
          case 1: {
            setState(2179);
            match(VisualBasic6Parser::WS);
            break;
          }

          default:
            break;
          }
          setState(2182);
          valueStmt(0);
          setState(2184);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == VisualBasic6Parser::WS) {
            setState(2183);
            match(VisualBasic6Parser::WS);
          }
          setState(2186);
          match(VisualBasic6Parser::RPAREN);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 9: {
      _localctx = _tracker.createInstance<VsICSContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(2190);
      implicitCallStmt_InStmt();
      break;
    }

    case 10: {
      _localctx = _tracker.createInstance<VsMidContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(2191);
      midStmt();
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(2304);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 368, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(2302);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 367, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<VsPowContext>(_tracker.createInstance<ValueStmtContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleValueStmt);
          setState(2194);

          if (!(precpred(_ctx, 16))) throw FailedPredicateException(this, "precpred(_ctx, 16)");
          setState(2196);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == VisualBasic6Parser::WS) {
            setState(2195);
            match(VisualBasic6Parser::WS);
          }
          setState(2198);
          match(VisualBasic6Parser::POW);
          setState(2200);
          _errHandler->sync(this);

          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 344, _ctx)) {
          case 1: {
            setState(2199);
            match(VisualBasic6Parser::WS);
            break;
          }

          default:
            break;
          }
          setState(2202);
          valueStmt(17);
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<VsMultDivContext>(_tracker.createInstance<ValueStmtContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleValueStmt);
          setState(2203);

          if (!(precpred(_ctx, 14))) throw FailedPredicateException(this, "precpred(_ctx, 14)");
          setState(2205);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == VisualBasic6Parser::WS) {
            setState(2204);
            match(VisualBasic6Parser::WS);
          }
          setState(2207);
          _la = _input->LA(1);
          if (!(_la == VisualBasic6Parser::DIV

          || _la == VisualBasic6Parser::MULT)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(2209);
          _errHandler->sync(this);

          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 346, _ctx)) {
          case 1: {
            setState(2208);
            match(VisualBasic6Parser::WS);
            break;
          }

          default:
            break;
          }
          setState(2211);
          valueStmt(15);
          break;
        }

        case 3: {
          auto newContext = _tracker.createInstance<VsIDivContext>(_tracker.createInstance<ValueStmtContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleValueStmt);
          setState(2212);

          if (!(precpred(_ctx, 13))) throw FailedPredicateException(this, "precpred(_ctx, 13)");
          setState(2214);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == VisualBasic6Parser::WS) {
            setState(2213);
            match(VisualBasic6Parser::WS);
          }

          setState(2216);
          match(VisualBasic6Parser::IDIV);
          setState(2218);
          _errHandler->sync(this);

          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 348, _ctx)) {
          case 1: {
            setState(2217);
            match(VisualBasic6Parser::WS);
            break;
          }

          default:
            break;
          }
          setState(2220);
          valueStmt(14);
          break;
        }

        case 4: {
          auto newContext = _tracker.createInstance<VsModContext>(_tracker.createInstance<ValueStmtContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleValueStmt);
          setState(2221);

          if (!(precpred(_ctx, 12))) throw FailedPredicateException(this, "precpred(_ctx, 12)");
          setState(2223);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == VisualBasic6Parser::WS) {
            setState(2222);
            match(VisualBasic6Parser::WS);
          }
          setState(2225);
          match(VisualBasic6Parser::MOD);
          setState(2227);
          _errHandler->sync(this);

          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 350, _ctx)) {
          case 1: {
            setState(2226);
            match(VisualBasic6Parser::WS);
            break;
          }

          default:
            break;
          }
          setState(2229);
          valueStmt(13);
          break;
        }

        case 5: {
          auto newContext = _tracker.createInstance<VsAddSubContext>(_tracker.createInstance<ValueStmtContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleValueStmt);
          setState(2230);

          if (!(precpred(_ctx, 11))) throw FailedPredicateException(this, "precpred(_ctx, 11)");
          setState(2232);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == VisualBasic6Parser::WS) {
            setState(2231);
            match(VisualBasic6Parser::WS);
          }
          setState(2234);
          _la = _input->LA(1);
          if (!(_la == VisualBasic6Parser::MINUS

          || _la == VisualBasic6Parser::PLUS)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(2236);
          _errHandler->sync(this);

          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 352, _ctx)) {
          case 1: {
            setState(2235);
            match(VisualBasic6Parser::WS);
            break;
          }

          default:
            break;
          }
          setState(2238);
          valueStmt(12);
          break;
        }

        case 6: {
          auto newContext = _tracker.createInstance<VsAmpContext>(_tracker.createInstance<ValueStmtContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleValueStmt);
          setState(2239);

          if (!(precpred(_ctx, 10))) throw FailedPredicateException(this, "precpred(_ctx, 10)");
          setState(2241);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == VisualBasic6Parser::WS) {
            setState(2240);
            match(VisualBasic6Parser::WS);
          }
          setState(2243);
          match(VisualBasic6Parser::AMPERSAND);
          setState(2245);
          _errHandler->sync(this);

          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 354, _ctx)) {
          case 1: {
            setState(2244);
            match(VisualBasic6Parser::WS);
            break;
          }

          default:
            break;
          }
          setState(2247);
          valueStmt(11);
          break;
        }

        case 7: {
          auto newContext = _tracker.createInstance<VsCompContext>(_tracker.createInstance<ValueStmtContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleValueStmt);
          setState(2248);

          if (!(precpred(_ctx, 9))) throw FailedPredicateException(this, "precpred(_ctx, 9)");
          setState(2250);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == VisualBasic6Parser::WS) {
            setState(2249);
            match(VisualBasic6Parser::WS);
          }
          setState(2252);
          _la = _input->LA(1);
          if (!(_la == VisualBasic6Parser::IS

          || _la == VisualBasic6Parser::LIKE || ((((_la - 187) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 187)) & 4397) != 0))) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(2254);
          _errHandler->sync(this);

          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 356, _ctx)) {
          case 1: {
            setState(2253);
            match(VisualBasic6Parser::WS);
            break;
          }

          default:
            break;
          }
          setState(2256);
          valueStmt(10);
          break;
        }

        case 8: {
          auto newContext = _tracker.createInstance<VsAndContext>(_tracker.createInstance<ValueStmtContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleValueStmt);
          setState(2257);

          if (!(precpred(_ctx, 7))) throw FailedPredicateException(this, "precpred(_ctx, 7)");
          setState(2259);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == VisualBasic6Parser::WS) {
            setState(2258);
            match(VisualBasic6Parser::WS);
          }
          setState(2261);
          match(VisualBasic6Parser::AND);
          setState(2263);
          _errHandler->sync(this);

          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 358, _ctx)) {
          case 1: {
            setState(2262);
            match(VisualBasic6Parser::WS);
            break;
          }

          default:
            break;
          }
          setState(2265);
          valueStmt(8);
          break;
        }

        case 9: {
          auto newContext = _tracker.createInstance<VsOrContext>(_tracker.createInstance<ValueStmtContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleValueStmt);
          setState(2266);

          if (!(precpred(_ctx, 6))) throw FailedPredicateException(this, "precpred(_ctx, 6)");
          setState(2268);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == VisualBasic6Parser::WS) {
            setState(2267);
            match(VisualBasic6Parser::WS);
          }
          setState(2270);
          match(VisualBasic6Parser::OR);
          setState(2272);
          _errHandler->sync(this);

          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 360, _ctx)) {
          case 1: {
            setState(2271);
            match(VisualBasic6Parser::WS);
            break;
          }

          default:
            break;
          }
          setState(2274);
          valueStmt(7);
          break;
        }

        case 10: {
          auto newContext = _tracker.createInstance<VsXorContext>(_tracker.createInstance<ValueStmtContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleValueStmt);
          setState(2275);

          if (!(precpred(_ctx, 5))) throw FailedPredicateException(this, "precpred(_ctx, 5)");
          setState(2277);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == VisualBasic6Parser::WS) {
            setState(2276);
            match(VisualBasic6Parser::WS);
          }
          setState(2279);
          match(VisualBasic6Parser::XOR);
          setState(2281);
          _errHandler->sync(this);

          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 362, _ctx)) {
          case 1: {
            setState(2280);
            match(VisualBasic6Parser::WS);
            break;
          }

          default:
            break;
          }
          setState(2283);
          valueStmt(6);
          break;
        }

        case 11: {
          auto newContext = _tracker.createInstance<VsEqvContext>(_tracker.createInstance<ValueStmtContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleValueStmt);
          setState(2284);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(2286);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == VisualBasic6Parser::WS) {
            setState(2285);
            match(VisualBasic6Parser::WS);
          }
          setState(2288);
          match(VisualBasic6Parser::EQV);
          setState(2290);
          _errHandler->sync(this);

          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 364, _ctx)) {
          case 1: {
            setState(2289);
            match(VisualBasic6Parser::WS);
            break;
          }

          default:
            break;
          }
          setState(2292);
          valueStmt(5);
          break;
        }

        case 12: {
          auto newContext = _tracker.createInstance<VsImpContext>(_tracker.createInstance<ValueStmtContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleValueStmt);
          setState(2293);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(2295);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == VisualBasic6Parser::WS) {
            setState(2294);
            match(VisualBasic6Parser::WS);
          }
          setState(2297);
          match(VisualBasic6Parser::IMP);
          setState(2299);
          _errHandler->sync(this);

          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 366, _ctx)) {
          case 1: {
            setState(2298);
            match(VisualBasic6Parser::WS);
            break;
          }

          default:
            break;
          }
          setState(2301);
          valueStmt(4);
          break;
        }

        default:
          break;
        } 
      }
      setState(2306);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 368, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- VariableStmtContext ------------------------------------------------------------------

VisualBasic6Parser::VariableStmtContext::VariableStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::VariableStmtContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::VariableStmtContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

VisualBasic6Parser::VariableListStmtContext* VisualBasic6Parser::VariableStmtContext::variableListStmt() {
  return getRuleContext<VisualBasic6Parser::VariableListStmtContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::VariableStmtContext::DIM() {
  return getToken(VisualBasic6Parser::DIM, 0);
}

tree::TerminalNode* VisualBasic6Parser::VariableStmtContext::STATIC() {
  return getToken(VisualBasic6Parser::STATIC, 0);
}

VisualBasic6Parser::VisibilityContext* VisualBasic6Parser::VariableStmtContext::visibility() {
  return getRuleContext<VisualBasic6Parser::VisibilityContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::VariableStmtContext::WITHEVENTS() {
  return getToken(VisualBasic6Parser::WITHEVENTS, 0);
}


size_t VisualBasic6Parser::VariableStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleVariableStmt;
}

void VisualBasic6Parser::VariableStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariableStmt(this);
}

void VisualBasic6Parser::VariableStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariableStmt(this);
}

VisualBasic6Parser::VariableStmtContext* VisualBasic6Parser::variableStmt() {
  VariableStmtContext *_localctx = _tracker.createInstance<VariableStmtContext>(_ctx, getState());
  enterRule(_localctx, 222, VisualBasic6Parser::RuleVariableStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2310);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case VisualBasic6Parser::DIM: {
        setState(2307);
        match(VisualBasic6Parser::DIM);
        break;
      }

      case VisualBasic6Parser::STATIC: {
        setState(2308);
        match(VisualBasic6Parser::STATIC);
        break;
      }

      case VisualBasic6Parser::FRIEND:
      case VisualBasic6Parser::GLOBAL:
      case VisualBasic6Parser::PRIVATE:
      case VisualBasic6Parser::PUBLIC: {
        setState(2309);
        visibility();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(2312);
    match(VisualBasic6Parser::WS);
    setState(2315);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 370, _ctx)) {
    case 1: {
      setState(2313);
      match(VisualBasic6Parser::WITHEVENTS);
      setState(2314);
      match(VisualBasic6Parser::WS);
      break;
    }

    default:
      break;
    }
    setState(2317);
    variableListStmt();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableListStmtContext ------------------------------------------------------------------

VisualBasic6Parser::VariableListStmtContext::VariableListStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<VisualBasic6Parser::VariableSubStmtContext *> VisualBasic6Parser::VariableListStmtContext::variableSubStmt() {
  return getRuleContexts<VisualBasic6Parser::VariableSubStmtContext>();
}

VisualBasic6Parser::VariableSubStmtContext* VisualBasic6Parser::VariableListStmtContext::variableSubStmt(size_t i) {
  return getRuleContext<VisualBasic6Parser::VariableSubStmtContext>(i);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::VariableListStmtContext::COMMA() {
  return getTokens(VisualBasic6Parser::COMMA);
}

tree::TerminalNode* VisualBasic6Parser::VariableListStmtContext::COMMA(size_t i) {
  return getToken(VisualBasic6Parser::COMMA, i);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::VariableListStmtContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::VariableListStmtContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}


size_t VisualBasic6Parser::VariableListStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleVariableListStmt;
}

void VisualBasic6Parser::VariableListStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariableListStmt(this);
}

void VisualBasic6Parser::VariableListStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariableListStmt(this);
}

VisualBasic6Parser::VariableListStmtContext* VisualBasic6Parser::variableListStmt() {
  VariableListStmtContext *_localctx = _tracker.createInstance<VariableListStmtContext>(_ctx, getState());
  enterRule(_localctx, 224, VisualBasic6Parser::RuleVariableListStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2319);
    variableSubStmt();
    setState(2330);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 373, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2321);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == VisualBasic6Parser::WS) {
          setState(2320);
          match(VisualBasic6Parser::WS);
        }
        setState(2323);
        match(VisualBasic6Parser::COMMA);
        setState(2325);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == VisualBasic6Parser::WS) {
          setState(2324);
          match(VisualBasic6Parser::WS);
        }
        setState(2327);
        variableSubStmt(); 
      }
      setState(2332);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 373, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableSubStmtContext ------------------------------------------------------------------

VisualBasic6Parser::VariableSubStmtContext::VariableSubStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

VisualBasic6Parser::AmbiguousIdentifierContext* VisualBasic6Parser::VariableSubStmtContext::ambiguousIdentifier() {
  return getRuleContext<VisualBasic6Parser::AmbiguousIdentifierContext>(0);
}

VisualBasic6Parser::TypeHintContext* VisualBasic6Parser::VariableSubStmtContext::typeHint() {
  return getRuleContext<VisualBasic6Parser::TypeHintContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::VariableSubStmtContext::LPAREN() {
  return getToken(VisualBasic6Parser::LPAREN, 0);
}

tree::TerminalNode* VisualBasic6Parser::VariableSubStmtContext::RPAREN() {
  return getToken(VisualBasic6Parser::RPAREN, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::VariableSubStmtContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::VariableSubStmtContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

VisualBasic6Parser::AsTypeClauseContext* VisualBasic6Parser::VariableSubStmtContext::asTypeClause() {
  return getRuleContext<VisualBasic6Parser::AsTypeClauseContext>(0);
}

VisualBasic6Parser::SubscriptsContext* VisualBasic6Parser::VariableSubStmtContext::subscripts() {
  return getRuleContext<VisualBasic6Parser::SubscriptsContext>(0);
}


size_t VisualBasic6Parser::VariableSubStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleVariableSubStmt;
}

void VisualBasic6Parser::VariableSubStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariableSubStmt(this);
}

void VisualBasic6Parser::VariableSubStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariableSubStmt(this);
}

VisualBasic6Parser::VariableSubStmtContext* VisualBasic6Parser::variableSubStmt() {
  VariableSubStmtContext *_localctx = _tracker.createInstance<VariableSubStmtContext>(_ctx, getState());
  enterRule(_localctx, 226, VisualBasic6Parser::RuleVariableSubStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2333);
    ambiguousIdentifier();
    setState(2335);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 374, _ctx)) {
    case 1: {
      setState(2334);
      typeHint();
      break;
    }

    default:
      break;
    }
    setState(2354);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 380, _ctx)) {
    case 1: {
      setState(2338);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == VisualBasic6Parser::WS) {
        setState(2337);
        match(VisualBasic6Parser::WS);
      }
      setState(2340);
      match(VisualBasic6Parser::LPAREN);
      setState(2342);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 376, _ctx)) {
      case 1: {
        setState(2341);
        match(VisualBasic6Parser::WS);
        break;
      }

      default:
        break;
      }
      setState(2348);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 2251870182429423614) != 0) || ((((_la - 66) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 66)) & -8087550153692545025) != 0) || ((((_la - 130) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 130)) & 360569445166350303) != 0) || ((((_la - 194) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 194)) & 289382533) != 0)) {
        setState(2344);
        subscripts();
        setState(2346);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == VisualBasic6Parser::WS) {
          setState(2345);
          match(VisualBasic6Parser::WS);
        }
      }
      setState(2350);
      match(VisualBasic6Parser::RPAREN);
      setState(2352);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 379, _ctx)) {
      case 1: {
        setState(2351);
        match(VisualBasic6Parser::WS);
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
    setState(2358);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 381, _ctx)) {
    case 1: {
      setState(2356);
      match(VisualBasic6Parser::WS);
      setState(2357);
      asTypeClause();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WhileWendStmtContext ------------------------------------------------------------------

VisualBasic6Parser::WhileWendStmtContext::WhileWendStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::WhileWendStmtContext::WHILE() {
  return getToken(VisualBasic6Parser::WHILE, 0);
}

tree::TerminalNode* VisualBasic6Parser::WhileWendStmtContext::WS() {
  return getToken(VisualBasic6Parser::WS, 0);
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::WhileWendStmtContext::valueStmt() {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::WhileWendStmtContext::WEND() {
  return getToken(VisualBasic6Parser::WEND, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::WhileWendStmtContext::NEWLINE() {
  return getTokens(VisualBasic6Parser::NEWLINE);
}

tree::TerminalNode* VisualBasic6Parser::WhileWendStmtContext::NEWLINE(size_t i) {
  return getToken(VisualBasic6Parser::NEWLINE, i);
}

std::vector<VisualBasic6Parser::BlockContext *> VisualBasic6Parser::WhileWendStmtContext::block() {
  return getRuleContexts<VisualBasic6Parser::BlockContext>();
}

VisualBasic6Parser::BlockContext* VisualBasic6Parser::WhileWendStmtContext::block(size_t i) {
  return getRuleContext<VisualBasic6Parser::BlockContext>(i);
}


size_t VisualBasic6Parser::WhileWendStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleWhileWendStmt;
}

void VisualBasic6Parser::WhileWendStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWhileWendStmt(this);
}

void VisualBasic6Parser::WhileWendStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWhileWendStmt(this);
}

VisualBasic6Parser::WhileWendStmtContext* VisualBasic6Parser::whileWendStmt() {
  WhileWendStmtContext *_localctx = _tracker.createInstance<WhileWendStmtContext>(_ctx, getState());
  enterRule(_localctx, 228, VisualBasic6Parser::RuleWhileWendStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2360);
    match(VisualBasic6Parser::WHILE);
    setState(2361);
    match(VisualBasic6Parser::WS);
    setState(2362);
    valueStmt(0);
    setState(2364); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(2363);
              match(VisualBasic6Parser::NEWLINE);
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(2366); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 382, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(2371);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 383, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2368);
        block(); 
      }
      setState(2373);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 383, _ctx);
    }
    setState(2377);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == VisualBasic6Parser::NEWLINE) {
      setState(2374);
      match(VisualBasic6Parser::NEWLINE);
      setState(2379);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2380);
    match(VisualBasic6Parser::WEND);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WidthStmtContext ------------------------------------------------------------------

VisualBasic6Parser::WidthStmtContext::WidthStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::WidthStmtContext::WIDTH() {
  return getToken(VisualBasic6Parser::WIDTH, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::WidthStmtContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::WidthStmtContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

std::vector<VisualBasic6Parser::ValueStmtContext *> VisualBasic6Parser::WidthStmtContext::valueStmt() {
  return getRuleContexts<VisualBasic6Parser::ValueStmtContext>();
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::WidthStmtContext::valueStmt(size_t i) {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(i);
}

tree::TerminalNode* VisualBasic6Parser::WidthStmtContext::COMMA() {
  return getToken(VisualBasic6Parser::COMMA, 0);
}


size_t VisualBasic6Parser::WidthStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleWidthStmt;
}

void VisualBasic6Parser::WidthStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWidthStmt(this);
}

void VisualBasic6Parser::WidthStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWidthStmt(this);
}

VisualBasic6Parser::WidthStmtContext* VisualBasic6Parser::widthStmt() {
  WidthStmtContext *_localctx = _tracker.createInstance<WidthStmtContext>(_ctx, getState());
  enterRule(_localctx, 230, VisualBasic6Parser::RuleWidthStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2382);
    match(VisualBasic6Parser::WIDTH);
    setState(2383);
    match(VisualBasic6Parser::WS);
    setState(2384);
    valueStmt(0);
    setState(2386);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::WS) {
      setState(2385);
      match(VisualBasic6Parser::WS);
    }
    setState(2388);
    match(VisualBasic6Parser::COMMA);
    setState(2390);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 386, _ctx)) {
    case 1: {
      setState(2389);
      match(VisualBasic6Parser::WS);
      break;
    }

    default:
      break;
    }
    setState(2392);
    valueStmt(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WithStmtContext ------------------------------------------------------------------

VisualBasic6Parser::WithStmtContext::WithStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::WithStmtContext::WITH() {
  return getToken(VisualBasic6Parser::WITH, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::WithStmtContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::WithStmtContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

VisualBasic6Parser::ImplicitCallStmt_InStmtContext* VisualBasic6Parser::WithStmtContext::implicitCallStmt_InStmt() {
  return getRuleContext<VisualBasic6Parser::ImplicitCallStmt_InStmtContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::WithStmtContext::END_WITH() {
  return getToken(VisualBasic6Parser::END_WITH, 0);
}

tree::TerminalNode* VisualBasic6Parser::WithStmtContext::NEW() {
  return getToken(VisualBasic6Parser::NEW, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::WithStmtContext::NEWLINE() {
  return getTokens(VisualBasic6Parser::NEWLINE);
}

tree::TerminalNode* VisualBasic6Parser::WithStmtContext::NEWLINE(size_t i) {
  return getToken(VisualBasic6Parser::NEWLINE, i);
}

VisualBasic6Parser::BlockContext* VisualBasic6Parser::WithStmtContext::block() {
  return getRuleContext<VisualBasic6Parser::BlockContext>(0);
}


size_t VisualBasic6Parser::WithStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleWithStmt;
}

void VisualBasic6Parser::WithStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWithStmt(this);
}

void VisualBasic6Parser::WithStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWithStmt(this);
}

VisualBasic6Parser::WithStmtContext* VisualBasic6Parser::withStmt() {
  WithStmtContext *_localctx = _tracker.createInstance<WithStmtContext>(_ctx, getState());
  enterRule(_localctx, 232, VisualBasic6Parser::RuleWithStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2394);
    match(VisualBasic6Parser::WITH);
    setState(2395);
    match(VisualBasic6Parser::WS);
    setState(2398);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 387, _ctx)) {
    case 1: {
      setState(2396);
      match(VisualBasic6Parser::NEW);
      setState(2397);
      match(VisualBasic6Parser::WS);
      break;
    }

    default:
      break;
    }
    setState(2400);
    implicitCallStmt_InStmt();
    setState(2402); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(2401);
      match(VisualBasic6Parser::NEWLINE);
      setState(2404); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == VisualBasic6Parser::NEWLINE);
    setState(2412);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -53972826784270338) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 4544131962008240127) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 129)) & 721138890332700607) != 0) || ((((_la - 207) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 207)) & 34817) != 0)) {
      setState(2406);
      block();
      setState(2408); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(2407);
        match(VisualBasic6Parser::NEWLINE);
        setState(2410); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == VisualBasic6Parser::NEWLINE);
    }
    setState(2414);
    match(VisualBasic6Parser::END_WITH);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WriteStmtContext ------------------------------------------------------------------

VisualBasic6Parser::WriteStmtContext::WriteStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::WriteStmtContext::WRITE() {
  return getToken(VisualBasic6Parser::WRITE, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::WriteStmtContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::WriteStmtContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::WriteStmtContext::valueStmt() {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::WriteStmtContext::COMMA() {
  return getToken(VisualBasic6Parser::COMMA, 0);
}

VisualBasic6Parser::OutputListContext* VisualBasic6Parser::WriteStmtContext::outputList() {
  return getRuleContext<VisualBasic6Parser::OutputListContext>(0);
}


size_t VisualBasic6Parser::WriteStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleWriteStmt;
}

void VisualBasic6Parser::WriteStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWriteStmt(this);
}

void VisualBasic6Parser::WriteStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWriteStmt(this);
}

VisualBasic6Parser::WriteStmtContext* VisualBasic6Parser::writeStmt() {
  WriteStmtContext *_localctx = _tracker.createInstance<WriteStmtContext>(_ctx, getState());
  enterRule(_localctx, 234, VisualBasic6Parser::RuleWriteStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2416);
    match(VisualBasic6Parser::WRITE);
    setState(2417);
    match(VisualBasic6Parser::WS);
    setState(2418);
    valueStmt(0);
    setState(2420);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::WS) {
      setState(2419);
      match(VisualBasic6Parser::WS);
    }
    setState(2422);
    match(VisualBasic6Parser::COMMA);
    setState(2427);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 393, _ctx)) {
    case 1: {
      setState(2424);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 392, _ctx)) {
      case 1: {
        setState(2423);
        match(VisualBasic6Parser::WS);
        break;
      }

      default:
        break;
      }
      setState(2426);
      outputList();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExplicitCallStmtContext ------------------------------------------------------------------

VisualBasic6Parser::ExplicitCallStmtContext::ExplicitCallStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

VisualBasic6Parser::ECS_ProcedureCallContext* VisualBasic6Parser::ExplicitCallStmtContext::eCS_ProcedureCall() {
  return getRuleContext<VisualBasic6Parser::ECS_ProcedureCallContext>(0);
}

VisualBasic6Parser::ECS_MemberProcedureCallContext* VisualBasic6Parser::ExplicitCallStmtContext::eCS_MemberProcedureCall() {
  return getRuleContext<VisualBasic6Parser::ECS_MemberProcedureCallContext>(0);
}


size_t VisualBasic6Parser::ExplicitCallStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleExplicitCallStmt;
}

void VisualBasic6Parser::ExplicitCallStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExplicitCallStmt(this);
}

void VisualBasic6Parser::ExplicitCallStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExplicitCallStmt(this);
}

VisualBasic6Parser::ExplicitCallStmtContext* VisualBasic6Parser::explicitCallStmt() {
  ExplicitCallStmtContext *_localctx = _tracker.createInstance<ExplicitCallStmtContext>(_ctx, getState());
  enterRule(_localctx, 236, VisualBasic6Parser::RuleExplicitCallStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2431);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 394, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2429);
      eCS_ProcedureCall();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2430);
      eCS_MemberProcedureCall();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ECS_ProcedureCallContext ------------------------------------------------------------------

VisualBasic6Parser::ECS_ProcedureCallContext::ECS_ProcedureCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::ECS_ProcedureCallContext::CALL() {
  return getToken(VisualBasic6Parser::CALL, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::ECS_ProcedureCallContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::ECS_ProcedureCallContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

VisualBasic6Parser::AmbiguousIdentifierContext* VisualBasic6Parser::ECS_ProcedureCallContext::ambiguousIdentifier() {
  return getRuleContext<VisualBasic6Parser::AmbiguousIdentifierContext>(0);
}

VisualBasic6Parser::TypeHintContext* VisualBasic6Parser::ECS_ProcedureCallContext::typeHint() {
  return getRuleContext<VisualBasic6Parser::TypeHintContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::ECS_ProcedureCallContext::LPAREN() {
  return getToken(VisualBasic6Parser::LPAREN, 0);
}

VisualBasic6Parser::ArgsCallContext* VisualBasic6Parser::ECS_ProcedureCallContext::argsCall() {
  return getRuleContext<VisualBasic6Parser::ArgsCallContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::ECS_ProcedureCallContext::RPAREN() {
  return getToken(VisualBasic6Parser::RPAREN, 0);
}


size_t VisualBasic6Parser::ECS_ProcedureCallContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleECS_ProcedureCall;
}

void VisualBasic6Parser::ECS_ProcedureCallContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterECS_ProcedureCall(this);
}

void VisualBasic6Parser::ECS_ProcedureCallContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitECS_ProcedureCall(this);
}

VisualBasic6Parser::ECS_ProcedureCallContext* VisualBasic6Parser::eCS_ProcedureCall() {
  ECS_ProcedureCallContext *_localctx = _tracker.createInstance<ECS_ProcedureCallContext>(_ctx, getState());
  enterRule(_localctx, 238, VisualBasic6Parser::RuleECS_ProcedureCall);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2433);
    match(VisualBasic6Parser::CALL);
    setState(2434);
    match(VisualBasic6Parser::WS);
    setState(2435);
    ambiguousIdentifier();
    setState(2437);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 395, _ctx)) {
    case 1: {
      setState(2436);
      typeHint();
      break;
    }

    default:
      break;
    }
    setState(2452);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 399, _ctx)) {
    case 1: {
      setState(2440);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == VisualBasic6Parser::WS) {
        setState(2439);
        match(VisualBasic6Parser::WS);
      }
      setState(2442);
      match(VisualBasic6Parser::LPAREN);
      setState(2444);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 397, _ctx)) {
      case 1: {
        setState(2443);
        match(VisualBasic6Parser::WS);
        break;
      }

      default:
        break;
      }
      setState(2446);
      argsCall();
      setState(2448);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == VisualBasic6Parser::WS) {
        setState(2447);
        match(VisualBasic6Parser::WS);
      }
      setState(2450);
      match(VisualBasic6Parser::RPAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ECS_MemberProcedureCallContext ------------------------------------------------------------------

VisualBasic6Parser::ECS_MemberProcedureCallContext::ECS_MemberProcedureCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::ECS_MemberProcedureCallContext::CALL() {
  return getToken(VisualBasic6Parser::CALL, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::ECS_MemberProcedureCallContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::ECS_MemberProcedureCallContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

tree::TerminalNode* VisualBasic6Parser::ECS_MemberProcedureCallContext::DOT() {
  return getToken(VisualBasic6Parser::DOT, 0);
}

VisualBasic6Parser::AmbiguousIdentifierContext* VisualBasic6Parser::ECS_MemberProcedureCallContext::ambiguousIdentifier() {
  return getRuleContext<VisualBasic6Parser::AmbiguousIdentifierContext>(0);
}

VisualBasic6Parser::ImplicitCallStmt_InStmtContext* VisualBasic6Parser::ECS_MemberProcedureCallContext::implicitCallStmt_InStmt() {
  return getRuleContext<VisualBasic6Parser::ImplicitCallStmt_InStmtContext>(0);
}

VisualBasic6Parser::TypeHintContext* VisualBasic6Parser::ECS_MemberProcedureCallContext::typeHint() {
  return getRuleContext<VisualBasic6Parser::TypeHintContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::ECS_MemberProcedureCallContext::LPAREN() {
  return getToken(VisualBasic6Parser::LPAREN, 0);
}

VisualBasic6Parser::ArgsCallContext* VisualBasic6Parser::ECS_MemberProcedureCallContext::argsCall() {
  return getRuleContext<VisualBasic6Parser::ArgsCallContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::ECS_MemberProcedureCallContext::RPAREN() {
  return getToken(VisualBasic6Parser::RPAREN, 0);
}


size_t VisualBasic6Parser::ECS_MemberProcedureCallContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleECS_MemberProcedureCall;
}

void VisualBasic6Parser::ECS_MemberProcedureCallContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterECS_MemberProcedureCall(this);
}

void VisualBasic6Parser::ECS_MemberProcedureCallContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitECS_MemberProcedureCall(this);
}

VisualBasic6Parser::ECS_MemberProcedureCallContext* VisualBasic6Parser::eCS_MemberProcedureCall() {
  ECS_MemberProcedureCallContext *_localctx = _tracker.createInstance<ECS_MemberProcedureCallContext>(_ctx, getState());
  enterRule(_localctx, 240, VisualBasic6Parser::RuleECS_MemberProcedureCall);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2454);
    match(VisualBasic6Parser::CALL);
    setState(2455);
    match(VisualBasic6Parser::WS);
    setState(2457);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 400, _ctx)) {
    case 1: {
      setState(2456);
      implicitCallStmt_InStmt();
      break;
    }

    default:
      break;
    }
    setState(2459);
    match(VisualBasic6Parser::DOT);
    setState(2461);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::WS) {
      setState(2460);
      match(VisualBasic6Parser::WS);
    }
    setState(2463);
    ambiguousIdentifier();
    setState(2465);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 402, _ctx)) {
    case 1: {
      setState(2464);
      typeHint();
      break;
    }

    default:
      break;
    }
    setState(2480);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 406, _ctx)) {
    case 1: {
      setState(2468);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == VisualBasic6Parser::WS) {
        setState(2467);
        match(VisualBasic6Parser::WS);
      }
      setState(2470);
      match(VisualBasic6Parser::LPAREN);
      setState(2472);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 404, _ctx)) {
      case 1: {
        setState(2471);
        match(VisualBasic6Parser::WS);
        break;
      }

      default:
        break;
      }
      setState(2474);
      argsCall();
      setState(2476);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == VisualBasic6Parser::WS) {
        setState(2475);
        match(VisualBasic6Parser::WS);
      }
      setState(2478);
      match(VisualBasic6Parser::RPAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ImplicitCallStmt_InBlockContext ------------------------------------------------------------------

VisualBasic6Parser::ImplicitCallStmt_InBlockContext::ImplicitCallStmt_InBlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

VisualBasic6Parser::ICS_B_ProcedureCallContext* VisualBasic6Parser::ImplicitCallStmt_InBlockContext::iCS_B_ProcedureCall() {
  return getRuleContext<VisualBasic6Parser::ICS_B_ProcedureCallContext>(0);
}

VisualBasic6Parser::ICS_B_MemberProcedureCallContext* VisualBasic6Parser::ImplicitCallStmt_InBlockContext::iCS_B_MemberProcedureCall() {
  return getRuleContext<VisualBasic6Parser::ICS_B_MemberProcedureCallContext>(0);
}


size_t VisualBasic6Parser::ImplicitCallStmt_InBlockContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleImplicitCallStmt_InBlock;
}

void VisualBasic6Parser::ImplicitCallStmt_InBlockContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImplicitCallStmt_InBlock(this);
}

void VisualBasic6Parser::ImplicitCallStmt_InBlockContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImplicitCallStmt_InBlock(this);
}

VisualBasic6Parser::ImplicitCallStmt_InBlockContext* VisualBasic6Parser::implicitCallStmt_InBlock() {
  ImplicitCallStmt_InBlockContext *_localctx = _tracker.createInstance<ImplicitCallStmt_InBlockContext>(_ctx, getState());
  enterRule(_localctx, 242, VisualBasic6Parser::RuleImplicitCallStmt_InBlock);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2484);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 407, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2482);
      iCS_B_ProcedureCall();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2483);
      iCS_B_MemberProcedureCall();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ICS_B_ProcedureCallContext ------------------------------------------------------------------

VisualBasic6Parser::ICS_B_ProcedureCallContext::ICS_B_ProcedureCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

VisualBasic6Parser::CertainIdentifierContext* VisualBasic6Parser::ICS_B_ProcedureCallContext::certainIdentifier() {
  return getRuleContext<VisualBasic6Parser::CertainIdentifierContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::ICS_B_ProcedureCallContext::WS() {
  return getToken(VisualBasic6Parser::WS, 0);
}

VisualBasic6Parser::ArgsCallContext* VisualBasic6Parser::ICS_B_ProcedureCallContext::argsCall() {
  return getRuleContext<VisualBasic6Parser::ArgsCallContext>(0);
}


size_t VisualBasic6Parser::ICS_B_ProcedureCallContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleICS_B_ProcedureCall;
}

void VisualBasic6Parser::ICS_B_ProcedureCallContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterICS_B_ProcedureCall(this);
}

void VisualBasic6Parser::ICS_B_ProcedureCallContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitICS_B_ProcedureCall(this);
}

VisualBasic6Parser::ICS_B_ProcedureCallContext* VisualBasic6Parser::iCS_B_ProcedureCall() {
  ICS_B_ProcedureCallContext *_localctx = _tracker.createInstance<ICS_B_ProcedureCallContext>(_ctx, getState());
  enterRule(_localctx, 244, VisualBasic6Parser::RuleICS_B_ProcedureCall);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2486);
    certainIdentifier();
    setState(2489);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 408, _ctx)) {
    case 1: {
      setState(2487);
      match(VisualBasic6Parser::WS);
      setState(2488);
      argsCall();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ICS_B_MemberProcedureCallContext ------------------------------------------------------------------

VisualBasic6Parser::ICS_B_MemberProcedureCallContext::ICS_B_MemberProcedureCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::ICS_B_MemberProcedureCallContext::DOT() {
  return getToken(VisualBasic6Parser::DOT, 0);
}

VisualBasic6Parser::AmbiguousIdentifierContext* VisualBasic6Parser::ICS_B_MemberProcedureCallContext::ambiguousIdentifier() {
  return getRuleContext<VisualBasic6Parser::AmbiguousIdentifierContext>(0);
}

VisualBasic6Parser::ImplicitCallStmt_InStmtContext* VisualBasic6Parser::ICS_B_MemberProcedureCallContext::implicitCallStmt_InStmt() {
  return getRuleContext<VisualBasic6Parser::ImplicitCallStmt_InStmtContext>(0);
}

VisualBasic6Parser::TypeHintContext* VisualBasic6Parser::ICS_B_MemberProcedureCallContext::typeHint() {
  return getRuleContext<VisualBasic6Parser::TypeHintContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::ICS_B_MemberProcedureCallContext::WS() {
  return getToken(VisualBasic6Parser::WS, 0);
}

VisualBasic6Parser::ArgsCallContext* VisualBasic6Parser::ICS_B_MemberProcedureCallContext::argsCall() {
  return getRuleContext<VisualBasic6Parser::ArgsCallContext>(0);
}

VisualBasic6Parser::DictionaryCallStmtContext* VisualBasic6Parser::ICS_B_MemberProcedureCallContext::dictionaryCallStmt() {
  return getRuleContext<VisualBasic6Parser::DictionaryCallStmtContext>(0);
}


size_t VisualBasic6Parser::ICS_B_MemberProcedureCallContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleICS_B_MemberProcedureCall;
}

void VisualBasic6Parser::ICS_B_MemberProcedureCallContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterICS_B_MemberProcedureCall(this);
}

void VisualBasic6Parser::ICS_B_MemberProcedureCallContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitICS_B_MemberProcedureCall(this);
}

VisualBasic6Parser::ICS_B_MemberProcedureCallContext* VisualBasic6Parser::iCS_B_MemberProcedureCall() {
  ICS_B_MemberProcedureCallContext *_localctx = _tracker.createInstance<ICS_B_MemberProcedureCallContext>(_ctx, getState());
  enterRule(_localctx, 246, VisualBasic6Parser::RuleICS_B_MemberProcedureCall);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2492);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 409, _ctx)) {
    case 1: {
      setState(2491);
      implicitCallStmt_InStmt();
      break;
    }

    default:
      break;
    }
    setState(2494);
    match(VisualBasic6Parser::DOT);
    setState(2495);
    ambiguousIdentifier();
    setState(2497);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 410, _ctx)) {
    case 1: {
      setState(2496);
      typeHint();
      break;
    }

    default:
      break;
    }
    setState(2501);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 411, _ctx)) {
    case 1: {
      setState(2499);
      match(VisualBasic6Parser::WS);
      setState(2500);
      argsCall();
      break;
    }

    default:
      break;
    }
    setState(2504);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 412, _ctx)) {
    case 1: {
      setState(2503);
      dictionaryCallStmt();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ImplicitCallStmt_InStmtContext ------------------------------------------------------------------

VisualBasic6Parser::ImplicitCallStmt_InStmtContext::ImplicitCallStmt_InStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

VisualBasic6Parser::ICS_S_MembersCallContext* VisualBasic6Parser::ImplicitCallStmt_InStmtContext::iCS_S_MembersCall() {
  return getRuleContext<VisualBasic6Parser::ICS_S_MembersCallContext>(0);
}

VisualBasic6Parser::ICS_S_VariableOrProcedureCallContext* VisualBasic6Parser::ImplicitCallStmt_InStmtContext::iCS_S_VariableOrProcedureCall() {
  return getRuleContext<VisualBasic6Parser::ICS_S_VariableOrProcedureCallContext>(0);
}

VisualBasic6Parser::ICS_S_ProcedureOrArrayCallContext* VisualBasic6Parser::ImplicitCallStmt_InStmtContext::iCS_S_ProcedureOrArrayCall() {
  return getRuleContext<VisualBasic6Parser::ICS_S_ProcedureOrArrayCallContext>(0);
}

VisualBasic6Parser::ICS_S_DictionaryCallContext* VisualBasic6Parser::ImplicitCallStmt_InStmtContext::iCS_S_DictionaryCall() {
  return getRuleContext<VisualBasic6Parser::ICS_S_DictionaryCallContext>(0);
}


size_t VisualBasic6Parser::ImplicitCallStmt_InStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleImplicitCallStmt_InStmt;
}

void VisualBasic6Parser::ImplicitCallStmt_InStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImplicitCallStmt_InStmt(this);
}

void VisualBasic6Parser::ImplicitCallStmt_InStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImplicitCallStmt_InStmt(this);
}

VisualBasic6Parser::ImplicitCallStmt_InStmtContext* VisualBasic6Parser::implicitCallStmt_InStmt() {
  ImplicitCallStmt_InStmtContext *_localctx = _tracker.createInstance<ImplicitCallStmt_InStmtContext>(_ctx, getState());
  enterRule(_localctx, 248, VisualBasic6Parser::RuleImplicitCallStmt_InStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2510);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 413, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2506);
      iCS_S_MembersCall();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2507);
      iCS_S_VariableOrProcedureCall();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2508);
      iCS_S_ProcedureOrArrayCall();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2509);
      iCS_S_DictionaryCall();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ICS_S_VariableOrProcedureCallContext ------------------------------------------------------------------

VisualBasic6Parser::ICS_S_VariableOrProcedureCallContext::ICS_S_VariableOrProcedureCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

VisualBasic6Parser::AmbiguousIdentifierContext* VisualBasic6Parser::ICS_S_VariableOrProcedureCallContext::ambiguousIdentifier() {
  return getRuleContext<VisualBasic6Parser::AmbiguousIdentifierContext>(0);
}

VisualBasic6Parser::TypeHintContext* VisualBasic6Parser::ICS_S_VariableOrProcedureCallContext::typeHint() {
  return getRuleContext<VisualBasic6Parser::TypeHintContext>(0);
}

VisualBasic6Parser::DictionaryCallStmtContext* VisualBasic6Parser::ICS_S_VariableOrProcedureCallContext::dictionaryCallStmt() {
  return getRuleContext<VisualBasic6Parser::DictionaryCallStmtContext>(0);
}


size_t VisualBasic6Parser::ICS_S_VariableOrProcedureCallContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleICS_S_VariableOrProcedureCall;
}

void VisualBasic6Parser::ICS_S_VariableOrProcedureCallContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterICS_S_VariableOrProcedureCall(this);
}

void VisualBasic6Parser::ICS_S_VariableOrProcedureCallContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitICS_S_VariableOrProcedureCall(this);
}

VisualBasic6Parser::ICS_S_VariableOrProcedureCallContext* VisualBasic6Parser::iCS_S_VariableOrProcedureCall() {
  ICS_S_VariableOrProcedureCallContext *_localctx = _tracker.createInstance<ICS_S_VariableOrProcedureCallContext>(_ctx, getState());
  enterRule(_localctx, 250, VisualBasic6Parser::RuleICS_S_VariableOrProcedureCall);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2512);
    ambiguousIdentifier();
    setState(2514);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 414, _ctx)) {
    case 1: {
      setState(2513);
      typeHint();
      break;
    }

    default:
      break;
    }
    setState(2517);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 415, _ctx)) {
    case 1: {
      setState(2516);
      dictionaryCallStmt();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ICS_S_ProcedureOrArrayCallContext ------------------------------------------------------------------

VisualBasic6Parser::ICS_S_ProcedureOrArrayCallContext::ICS_S_ProcedureOrArrayCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

VisualBasic6Parser::AmbiguousIdentifierContext* VisualBasic6Parser::ICS_S_ProcedureOrArrayCallContext::ambiguousIdentifier() {
  return getRuleContext<VisualBasic6Parser::AmbiguousIdentifierContext>(0);
}

VisualBasic6Parser::BaseTypeContext* VisualBasic6Parser::ICS_S_ProcedureOrArrayCallContext::baseType() {
  return getRuleContext<VisualBasic6Parser::BaseTypeContext>(0);
}

VisualBasic6Parser::ICS_S_NestedProcedureCallContext* VisualBasic6Parser::ICS_S_ProcedureOrArrayCallContext::iCS_S_NestedProcedureCall() {
  return getRuleContext<VisualBasic6Parser::ICS_S_NestedProcedureCallContext>(0);
}

VisualBasic6Parser::TypeHintContext* VisualBasic6Parser::ICS_S_ProcedureOrArrayCallContext::typeHint() {
  return getRuleContext<VisualBasic6Parser::TypeHintContext>(0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::ICS_S_ProcedureOrArrayCallContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::ICS_S_ProcedureOrArrayCallContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::ICS_S_ProcedureOrArrayCallContext::LPAREN() {
  return getTokens(VisualBasic6Parser::LPAREN);
}

tree::TerminalNode* VisualBasic6Parser::ICS_S_ProcedureOrArrayCallContext::LPAREN(size_t i) {
  return getToken(VisualBasic6Parser::LPAREN, i);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::ICS_S_ProcedureOrArrayCallContext::RPAREN() {
  return getTokens(VisualBasic6Parser::RPAREN);
}

tree::TerminalNode* VisualBasic6Parser::ICS_S_ProcedureOrArrayCallContext::RPAREN(size_t i) {
  return getToken(VisualBasic6Parser::RPAREN, i);
}

VisualBasic6Parser::DictionaryCallStmtContext* VisualBasic6Parser::ICS_S_ProcedureOrArrayCallContext::dictionaryCallStmt() {
  return getRuleContext<VisualBasic6Parser::DictionaryCallStmtContext>(0);
}

std::vector<VisualBasic6Parser::ArgsCallContext *> VisualBasic6Parser::ICS_S_ProcedureOrArrayCallContext::argsCall() {
  return getRuleContexts<VisualBasic6Parser::ArgsCallContext>();
}

VisualBasic6Parser::ArgsCallContext* VisualBasic6Parser::ICS_S_ProcedureOrArrayCallContext::argsCall(size_t i) {
  return getRuleContext<VisualBasic6Parser::ArgsCallContext>(i);
}


size_t VisualBasic6Parser::ICS_S_ProcedureOrArrayCallContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleICS_S_ProcedureOrArrayCall;
}

void VisualBasic6Parser::ICS_S_ProcedureOrArrayCallContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterICS_S_ProcedureOrArrayCall(this);
}

void VisualBasic6Parser::ICS_S_ProcedureOrArrayCallContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitICS_S_ProcedureOrArrayCall(this);
}

VisualBasic6Parser::ICS_S_ProcedureOrArrayCallContext* VisualBasic6Parser::iCS_S_ProcedureOrArrayCall() {
  ICS_S_ProcedureOrArrayCallContext *_localctx = _tracker.createInstance<ICS_S_ProcedureOrArrayCallContext>(_ctx, getState());
  enterRule(_localctx, 252, VisualBasic6Parser::RuleICS_S_ProcedureOrArrayCall);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2522);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 416, _ctx)) {
    case 1: {
      setState(2519);
      ambiguousIdentifier();
      break;
    }

    case 2: {
      setState(2520);
      baseType();
      break;
    }

    case 3: {
      setState(2521);
      iCS_S_NestedProcedureCall();
      break;
    }

    default:
      break;
    }
    setState(2525);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 178) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 178)) & 4203653) != 0)) {
      setState(2524);
      typeHint();
    }
    setState(2528);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::WS) {
      setState(2527);
      match(VisualBasic6Parser::WS);
    }
    setState(2541); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(2530);
              match(VisualBasic6Parser::LPAREN);
              setState(2532);
              _errHandler->sync(this);

              switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 419, _ctx)) {
              case 1: {
                setState(2531);
                match(VisualBasic6Parser::WS);
                break;
              }

              default:
                break;
              }
              setState(2538);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if ((((_la & ~ 0x3fULL) == 0) &&
                ((1ULL << _la) & 2251870182429423614) != 0) || ((((_la - 66) & ~ 0x3fULL) == 0) &&
                ((1ULL << (_la - 66)) & -8087550153692545025) != 0) || ((((_la - 130) & ~ 0x3fULL) == 0) &&
                ((1ULL << (_la - 130)) & 365073044793720799) != 0) || ((((_la - 194) & ~ 0x3fULL) == 0) &&
                ((1ULL << (_la - 194)) & 289386629) != 0)) {
                setState(2534);
                argsCall();
                setState(2536);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == VisualBasic6Parser::WS) {
                  setState(2535);
                  match(VisualBasic6Parser::WS);
                }
              }
              setState(2540);
              match(VisualBasic6Parser::RPAREN);
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(2543); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 422, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(2546);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 423, _ctx)) {
    case 1: {
      setState(2545);
      dictionaryCallStmt();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ICS_S_NestedProcedureCallContext ------------------------------------------------------------------

VisualBasic6Parser::ICS_S_NestedProcedureCallContext::ICS_S_NestedProcedureCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

VisualBasic6Parser::AmbiguousIdentifierContext* VisualBasic6Parser::ICS_S_NestedProcedureCallContext::ambiguousIdentifier() {
  return getRuleContext<VisualBasic6Parser::AmbiguousIdentifierContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::ICS_S_NestedProcedureCallContext::LPAREN() {
  return getToken(VisualBasic6Parser::LPAREN, 0);
}

tree::TerminalNode* VisualBasic6Parser::ICS_S_NestedProcedureCallContext::RPAREN() {
  return getToken(VisualBasic6Parser::RPAREN, 0);
}

VisualBasic6Parser::TypeHintContext* VisualBasic6Parser::ICS_S_NestedProcedureCallContext::typeHint() {
  return getRuleContext<VisualBasic6Parser::TypeHintContext>(0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::ICS_S_NestedProcedureCallContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::ICS_S_NestedProcedureCallContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

VisualBasic6Parser::ArgsCallContext* VisualBasic6Parser::ICS_S_NestedProcedureCallContext::argsCall() {
  return getRuleContext<VisualBasic6Parser::ArgsCallContext>(0);
}


size_t VisualBasic6Parser::ICS_S_NestedProcedureCallContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleICS_S_NestedProcedureCall;
}

void VisualBasic6Parser::ICS_S_NestedProcedureCallContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterICS_S_NestedProcedureCall(this);
}

void VisualBasic6Parser::ICS_S_NestedProcedureCallContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitICS_S_NestedProcedureCall(this);
}

VisualBasic6Parser::ICS_S_NestedProcedureCallContext* VisualBasic6Parser::iCS_S_NestedProcedureCall() {
  ICS_S_NestedProcedureCallContext *_localctx = _tracker.createInstance<ICS_S_NestedProcedureCallContext>(_ctx, getState());
  enterRule(_localctx, 254, VisualBasic6Parser::RuleICS_S_NestedProcedureCall);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2548);
    ambiguousIdentifier();
    setState(2550);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 178) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 178)) & 4203653) != 0)) {
      setState(2549);
      typeHint();
    }
    setState(2553);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::WS) {
      setState(2552);
      match(VisualBasic6Parser::WS);
    }
    setState(2555);
    match(VisualBasic6Parser::LPAREN);
    setState(2557);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 426, _ctx)) {
    case 1: {
      setState(2556);
      match(VisualBasic6Parser::WS);
      break;
    }

    default:
      break;
    }
    setState(2563);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2251870182429423614) != 0) || ((((_la - 66) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 66)) & -8087550153692545025) != 0) || ((((_la - 130) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 130)) & 365073044793720799) != 0) || ((((_la - 194) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 194)) & 289386629) != 0)) {
      setState(2559);
      argsCall();
      setState(2561);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == VisualBasic6Parser::WS) {
        setState(2560);
        match(VisualBasic6Parser::WS);
      }
    }
    setState(2565);
    match(VisualBasic6Parser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ICS_S_MembersCallContext ------------------------------------------------------------------

VisualBasic6Parser::ICS_S_MembersCallContext::ICS_S_MembersCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

VisualBasic6Parser::ICS_S_VariableOrProcedureCallContext* VisualBasic6Parser::ICS_S_MembersCallContext::iCS_S_VariableOrProcedureCall() {
  return getRuleContext<VisualBasic6Parser::ICS_S_VariableOrProcedureCallContext>(0);
}

VisualBasic6Parser::ICS_S_ProcedureOrArrayCallContext* VisualBasic6Parser::ICS_S_MembersCallContext::iCS_S_ProcedureOrArrayCall() {
  return getRuleContext<VisualBasic6Parser::ICS_S_ProcedureOrArrayCallContext>(0);
}

std::vector<VisualBasic6Parser::ICS_S_MemberCallContext *> VisualBasic6Parser::ICS_S_MembersCallContext::iCS_S_MemberCall() {
  return getRuleContexts<VisualBasic6Parser::ICS_S_MemberCallContext>();
}

VisualBasic6Parser::ICS_S_MemberCallContext* VisualBasic6Parser::ICS_S_MembersCallContext::iCS_S_MemberCall(size_t i) {
  return getRuleContext<VisualBasic6Parser::ICS_S_MemberCallContext>(i);
}

VisualBasic6Parser::DictionaryCallStmtContext* VisualBasic6Parser::ICS_S_MembersCallContext::dictionaryCallStmt() {
  return getRuleContext<VisualBasic6Parser::DictionaryCallStmtContext>(0);
}


size_t VisualBasic6Parser::ICS_S_MembersCallContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleICS_S_MembersCall;
}

void VisualBasic6Parser::ICS_S_MembersCallContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterICS_S_MembersCall(this);
}

void VisualBasic6Parser::ICS_S_MembersCallContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitICS_S_MembersCall(this);
}

VisualBasic6Parser::ICS_S_MembersCallContext* VisualBasic6Parser::iCS_S_MembersCall() {
  ICS_S_MembersCallContext *_localctx = _tracker.createInstance<ICS_S_MembersCallContext>(_ctx, getState());
  enterRule(_localctx, 256, VisualBasic6Parser::RuleICS_S_MembersCall);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2569);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 429, _ctx)) {
    case 1: {
      setState(2567);
      iCS_S_VariableOrProcedureCall();
      break;
    }

    case 2: {
      setState(2568);
      iCS_S_ProcedureOrArrayCall();
      break;
    }

    default:
      break;
    }
    setState(2572); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(2571);
              iCS_S_MemberCall();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(2574); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 430, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(2577);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 431, _ctx)) {
    case 1: {
      setState(2576);
      dictionaryCallStmt();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ICS_S_MemberCallContext ------------------------------------------------------------------

VisualBasic6Parser::ICS_S_MemberCallContext::ICS_S_MemberCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::ICS_S_MemberCallContext::DOT() {
  return getToken(VisualBasic6Parser::DOT, 0);
}

VisualBasic6Parser::ICS_S_VariableOrProcedureCallContext* VisualBasic6Parser::ICS_S_MemberCallContext::iCS_S_VariableOrProcedureCall() {
  return getRuleContext<VisualBasic6Parser::ICS_S_VariableOrProcedureCallContext>(0);
}

VisualBasic6Parser::ICS_S_ProcedureOrArrayCallContext* VisualBasic6Parser::ICS_S_MemberCallContext::iCS_S_ProcedureOrArrayCall() {
  return getRuleContext<VisualBasic6Parser::ICS_S_ProcedureOrArrayCallContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::ICS_S_MemberCallContext::WS() {
  return getToken(VisualBasic6Parser::WS, 0);
}


size_t VisualBasic6Parser::ICS_S_MemberCallContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleICS_S_MemberCall;
}

void VisualBasic6Parser::ICS_S_MemberCallContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterICS_S_MemberCall(this);
}

void VisualBasic6Parser::ICS_S_MemberCallContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitICS_S_MemberCall(this);
}

VisualBasic6Parser::ICS_S_MemberCallContext* VisualBasic6Parser::iCS_S_MemberCall() {
  ICS_S_MemberCallContext *_localctx = _tracker.createInstance<ICS_S_MemberCallContext>(_ctx, getState());
  enterRule(_localctx, 258, VisualBasic6Parser::RuleICS_S_MemberCall);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2580);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::WS) {
      setState(2579);
      match(VisualBasic6Parser::WS);
    }
    setState(2582);
    match(VisualBasic6Parser::DOT);
    setState(2585);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 433, _ctx)) {
    case 1: {
      setState(2583);
      iCS_S_VariableOrProcedureCall();
      break;
    }

    case 2: {
      setState(2584);
      iCS_S_ProcedureOrArrayCall();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ICS_S_DictionaryCallContext ------------------------------------------------------------------

VisualBasic6Parser::ICS_S_DictionaryCallContext::ICS_S_DictionaryCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

VisualBasic6Parser::DictionaryCallStmtContext* VisualBasic6Parser::ICS_S_DictionaryCallContext::dictionaryCallStmt() {
  return getRuleContext<VisualBasic6Parser::DictionaryCallStmtContext>(0);
}


size_t VisualBasic6Parser::ICS_S_DictionaryCallContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleICS_S_DictionaryCall;
}

void VisualBasic6Parser::ICS_S_DictionaryCallContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterICS_S_DictionaryCall(this);
}

void VisualBasic6Parser::ICS_S_DictionaryCallContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitICS_S_DictionaryCall(this);
}

VisualBasic6Parser::ICS_S_DictionaryCallContext* VisualBasic6Parser::iCS_S_DictionaryCall() {
  ICS_S_DictionaryCallContext *_localctx = _tracker.createInstance<ICS_S_DictionaryCallContext>(_ctx, getState());
  enterRule(_localctx, 260, VisualBasic6Parser::RuleICS_S_DictionaryCall);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2587);
    dictionaryCallStmt();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArgsCallContext ------------------------------------------------------------------

VisualBasic6Parser::ArgsCallContext::ArgsCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<VisualBasic6Parser::ArgCallContext *> VisualBasic6Parser::ArgsCallContext::argCall() {
  return getRuleContexts<VisualBasic6Parser::ArgCallContext>();
}

VisualBasic6Parser::ArgCallContext* VisualBasic6Parser::ArgsCallContext::argCall(size_t i) {
  return getRuleContext<VisualBasic6Parser::ArgCallContext>(i);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::ArgsCallContext::COMMA() {
  return getTokens(VisualBasic6Parser::COMMA);
}

tree::TerminalNode* VisualBasic6Parser::ArgsCallContext::COMMA(size_t i) {
  return getToken(VisualBasic6Parser::COMMA, i);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::ArgsCallContext::SEMICOLON() {
  return getTokens(VisualBasic6Parser::SEMICOLON);
}

tree::TerminalNode* VisualBasic6Parser::ArgsCallContext::SEMICOLON(size_t i) {
  return getToken(VisualBasic6Parser::SEMICOLON, i);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::ArgsCallContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::ArgsCallContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}


size_t VisualBasic6Parser::ArgsCallContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleArgsCall;
}

void VisualBasic6Parser::ArgsCallContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArgsCall(this);
}

void VisualBasic6Parser::ArgsCallContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArgsCall(this);
}

VisualBasic6Parser::ArgsCallContext* VisualBasic6Parser::argsCall() {
  ArgsCallContext *_localctx = _tracker.createInstance<ArgsCallContext>(_ctx, getState());
  enterRule(_localctx, 262, VisualBasic6Parser::RuleArgsCall);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2601);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 437, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2590);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 434, _ctx)) {
        case 1: {
          setState(2589);
          argCall();
          break;
        }

        default:
          break;
        }
        setState(2593);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == VisualBasic6Parser::WS) {
          setState(2592);
          match(VisualBasic6Parser::WS);
        }
        setState(2595);
        _la = _input->LA(1);
        if (!(_la == VisualBasic6Parser::COMMA

        || _la == VisualBasic6Parser::SEMICOLON)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(2597);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 436, _ctx)) {
        case 1: {
          setState(2596);
          match(VisualBasic6Parser::WS);
          break;
        }

        default:
          break;
        } 
      }
      setState(2603);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 437, _ctx);
    }
    setState(2604);
    argCall();
    setState(2617);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 441, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2606);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == VisualBasic6Parser::WS) {
          setState(2605);
          match(VisualBasic6Parser::WS);
        }
        setState(2608);
        _la = _input->LA(1);
        if (!(_la == VisualBasic6Parser::COMMA

        || _la == VisualBasic6Parser::SEMICOLON)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(2610);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 439, _ctx)) {
        case 1: {
          setState(2609);
          match(VisualBasic6Parser::WS);
          break;
        }

        default:
          break;
        }
        setState(2613);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 440, _ctx)) {
        case 1: {
          setState(2612);
          argCall();
          break;
        }

        default:
          break;
        } 
      }
      setState(2619);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 441, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArgCallContext ------------------------------------------------------------------

VisualBasic6Parser::ArgCallContext::ArgCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::ArgCallContext::valueStmt() {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::ArgCallContext::WS() {
  return getToken(VisualBasic6Parser::WS, 0);
}

tree::TerminalNode* VisualBasic6Parser::ArgCallContext::BYVAL() {
  return getToken(VisualBasic6Parser::BYVAL, 0);
}

tree::TerminalNode* VisualBasic6Parser::ArgCallContext::BYREF() {
  return getToken(VisualBasic6Parser::BYREF, 0);
}

tree::TerminalNode* VisualBasic6Parser::ArgCallContext::PARAMARRAY() {
  return getToken(VisualBasic6Parser::PARAMARRAY, 0);
}


size_t VisualBasic6Parser::ArgCallContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleArgCall;
}

void VisualBasic6Parser::ArgCallContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArgCall(this);
}

void VisualBasic6Parser::ArgCallContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArgCall(this);
}

VisualBasic6Parser::ArgCallContext* VisualBasic6Parser::argCall() {
  ArgCallContext *_localctx = _tracker.createInstance<ArgCallContext>(_ctx, getState());
  enterRule(_localctx, 264, VisualBasic6Parser::RuleArgCall);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2622);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 442, _ctx)) {
    case 1: {
      setState(2620);
      _la = _input->LA(1);
      if (!(_la == VisualBasic6Parser::BYVAL

      || _la == VisualBasic6Parser::BYREF || _la == VisualBasic6Parser::PARAMARRAY)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(2621);
      match(VisualBasic6Parser::WS);
      break;
    }

    default:
      break;
    }
    setState(2624);
    valueStmt(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DictionaryCallStmtContext ------------------------------------------------------------------

VisualBasic6Parser::DictionaryCallStmtContext::DictionaryCallStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::DictionaryCallStmtContext::EXCLAMATIONMARK() {
  return getToken(VisualBasic6Parser::EXCLAMATIONMARK, 0);
}

VisualBasic6Parser::AmbiguousIdentifierContext* VisualBasic6Parser::DictionaryCallStmtContext::ambiguousIdentifier() {
  return getRuleContext<VisualBasic6Parser::AmbiguousIdentifierContext>(0);
}

VisualBasic6Parser::TypeHintContext* VisualBasic6Parser::DictionaryCallStmtContext::typeHint() {
  return getRuleContext<VisualBasic6Parser::TypeHintContext>(0);
}


size_t VisualBasic6Parser::DictionaryCallStmtContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleDictionaryCallStmt;
}

void VisualBasic6Parser::DictionaryCallStmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDictionaryCallStmt(this);
}

void VisualBasic6Parser::DictionaryCallStmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDictionaryCallStmt(this);
}

VisualBasic6Parser::DictionaryCallStmtContext* VisualBasic6Parser::dictionaryCallStmt() {
  DictionaryCallStmtContext *_localctx = _tracker.createInstance<DictionaryCallStmtContext>(_ctx, getState());
  enterRule(_localctx, 266, VisualBasic6Parser::RuleDictionaryCallStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2626);
    match(VisualBasic6Parser::EXCLAMATIONMARK);
    setState(2627);
    ambiguousIdentifier();
    setState(2629);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 443, _ctx)) {
    case 1: {
      setState(2628);
      typeHint();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArgListContext ------------------------------------------------------------------

VisualBasic6Parser::ArgListContext::ArgListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::ArgListContext::LPAREN() {
  return getToken(VisualBasic6Parser::LPAREN, 0);
}

tree::TerminalNode* VisualBasic6Parser::ArgListContext::RPAREN() {
  return getToken(VisualBasic6Parser::RPAREN, 0);
}

std::vector<VisualBasic6Parser::ArgContext *> VisualBasic6Parser::ArgListContext::arg() {
  return getRuleContexts<VisualBasic6Parser::ArgContext>();
}

VisualBasic6Parser::ArgContext* VisualBasic6Parser::ArgListContext::arg(size_t i) {
  return getRuleContext<VisualBasic6Parser::ArgContext>(i);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::ArgListContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::ArgListContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::ArgListContext::COMMA() {
  return getTokens(VisualBasic6Parser::COMMA);
}

tree::TerminalNode* VisualBasic6Parser::ArgListContext::COMMA(size_t i) {
  return getToken(VisualBasic6Parser::COMMA, i);
}


size_t VisualBasic6Parser::ArgListContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleArgList;
}

void VisualBasic6Parser::ArgListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArgList(this);
}

void VisualBasic6Parser::ArgListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArgList(this);
}

VisualBasic6Parser::ArgListContext* VisualBasic6Parser::argList() {
  ArgListContext *_localctx = _tracker.createInstance<ArgListContext>(_ctx, getState());
  enterRule(_localctx, 268, VisualBasic6Parser::RuleArgList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2631);
    match(VisualBasic6Parser::LPAREN);
    setState(2649);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 448, _ctx)) {
    case 1: {
      setState(2633);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == VisualBasic6Parser::WS) {
        setState(2632);
        match(VisualBasic6Parser::WS);
      }
      setState(2635);
      arg();
      setState(2646);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 447, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(2637);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == VisualBasic6Parser::WS) {
            setState(2636);
            match(VisualBasic6Parser::WS);
          }
          setState(2639);
          match(VisualBasic6Parser::COMMA);
          setState(2641);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == VisualBasic6Parser::WS) {
            setState(2640);
            match(VisualBasic6Parser::WS);
          }
          setState(2643);
          arg(); 
        }
        setState(2648);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 447, _ctx);
      }
      break;
    }

    default:
      break;
    }
    setState(2652);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::WS) {
      setState(2651);
      match(VisualBasic6Parser::WS);
    }
    setState(2654);
    match(VisualBasic6Parser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArgContext ------------------------------------------------------------------

VisualBasic6Parser::ArgContext::ArgContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

VisualBasic6Parser::AmbiguousIdentifierContext* VisualBasic6Parser::ArgContext::ambiguousIdentifier() {
  return getRuleContext<VisualBasic6Parser::AmbiguousIdentifierContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::ArgContext::OPTIONAL() {
  return getToken(VisualBasic6Parser::OPTIONAL, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::ArgContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::ArgContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

tree::TerminalNode* VisualBasic6Parser::ArgContext::PARAMARRAY() {
  return getToken(VisualBasic6Parser::PARAMARRAY, 0);
}

VisualBasic6Parser::TypeHintContext* VisualBasic6Parser::ArgContext::typeHint() {
  return getRuleContext<VisualBasic6Parser::TypeHintContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::ArgContext::LPAREN() {
  return getToken(VisualBasic6Parser::LPAREN, 0);
}

tree::TerminalNode* VisualBasic6Parser::ArgContext::RPAREN() {
  return getToken(VisualBasic6Parser::RPAREN, 0);
}

VisualBasic6Parser::AsTypeClauseContext* VisualBasic6Parser::ArgContext::asTypeClause() {
  return getRuleContext<VisualBasic6Parser::AsTypeClauseContext>(0);
}

VisualBasic6Parser::ArgDefaultValueContext* VisualBasic6Parser::ArgContext::argDefaultValue() {
  return getRuleContext<VisualBasic6Parser::ArgDefaultValueContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::ArgContext::BYVAL() {
  return getToken(VisualBasic6Parser::BYVAL, 0);
}

tree::TerminalNode* VisualBasic6Parser::ArgContext::BYREF() {
  return getToken(VisualBasic6Parser::BYREF, 0);
}


size_t VisualBasic6Parser::ArgContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleArg;
}

void VisualBasic6Parser::ArgContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArg(this);
}

void VisualBasic6Parser::ArgContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArg(this);
}

VisualBasic6Parser::ArgContext* VisualBasic6Parser::arg() {
  ArgContext *_localctx = _tracker.createInstance<ArgContext>(_ctx, getState());
  enterRule(_localctx, 270, VisualBasic6Parser::RuleArg);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2658);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 450, _ctx)) {
    case 1: {
      setState(2656);
      match(VisualBasic6Parser::OPTIONAL);
      setState(2657);
      match(VisualBasic6Parser::WS);
      break;
    }

    default:
      break;
    }
    setState(2662);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 451, _ctx)) {
    case 1: {
      setState(2660);
      _la = _input->LA(1);
      if (!(_la == VisualBasic6Parser::BYVAL

      || _la == VisualBasic6Parser::BYREF)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(2661);
      match(VisualBasic6Parser::WS);
      break;
    }

    default:
      break;
    }
    setState(2666);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 452, _ctx)) {
    case 1: {
      setState(2664);
      match(VisualBasic6Parser::PARAMARRAY);
      setState(2665);
      match(VisualBasic6Parser::WS);
      break;
    }

    default:
      break;
    }
    setState(2668);
    ambiguousIdentifier();
    setState(2670);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 178) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 178)) & 4203653) != 0)) {
      setState(2669);
      typeHint();
    }
    setState(2680);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 456, _ctx)) {
    case 1: {
      setState(2673);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == VisualBasic6Parser::WS) {
        setState(2672);
        match(VisualBasic6Parser::WS);
      }
      setState(2675);
      match(VisualBasic6Parser::LPAREN);
      setState(2677);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == VisualBasic6Parser::WS) {
        setState(2676);
        match(VisualBasic6Parser::WS);
      }
      setState(2679);
      match(VisualBasic6Parser::RPAREN);
      break;
    }

    default:
      break;
    }
    setState(2684);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 457, _ctx)) {
    case 1: {
      setState(2682);
      match(VisualBasic6Parser::WS);
      setState(2683);
      asTypeClause();
      break;
    }

    default:
      break;
    }
    setState(2690);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 459, _ctx)) {
    case 1: {
      setState(2687);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == VisualBasic6Parser::WS) {
        setState(2686);
        match(VisualBasic6Parser::WS);
      }
      setState(2689);
      argDefaultValue();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArgDefaultValueContext ------------------------------------------------------------------

VisualBasic6Parser::ArgDefaultValueContext::ArgDefaultValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::ArgDefaultValueContext::EQ() {
  return getToken(VisualBasic6Parser::EQ, 0);
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::ArgDefaultValueContext::valueStmt() {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::ArgDefaultValueContext::WS() {
  return getToken(VisualBasic6Parser::WS, 0);
}


size_t VisualBasic6Parser::ArgDefaultValueContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleArgDefaultValue;
}

void VisualBasic6Parser::ArgDefaultValueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArgDefaultValue(this);
}

void VisualBasic6Parser::ArgDefaultValueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArgDefaultValue(this);
}

VisualBasic6Parser::ArgDefaultValueContext* VisualBasic6Parser::argDefaultValue() {
  ArgDefaultValueContext *_localctx = _tracker.createInstance<ArgDefaultValueContext>(_ctx, getState());
  enterRule(_localctx, 272, VisualBasic6Parser::RuleArgDefaultValue);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2692);
    match(VisualBasic6Parser::EQ);
    setState(2694);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 460, _ctx)) {
    case 1: {
      setState(2693);
      match(VisualBasic6Parser::WS);
      break;
    }

    default:
      break;
    }
    setState(2696);
    valueStmt(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubscriptsContext ------------------------------------------------------------------

VisualBasic6Parser::SubscriptsContext::SubscriptsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<VisualBasic6Parser::Subscript_Context *> VisualBasic6Parser::SubscriptsContext::subscript_() {
  return getRuleContexts<VisualBasic6Parser::Subscript_Context>();
}

VisualBasic6Parser::Subscript_Context* VisualBasic6Parser::SubscriptsContext::subscript_(size_t i) {
  return getRuleContext<VisualBasic6Parser::Subscript_Context>(i);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::SubscriptsContext::COMMA() {
  return getTokens(VisualBasic6Parser::COMMA);
}

tree::TerminalNode* VisualBasic6Parser::SubscriptsContext::COMMA(size_t i) {
  return getToken(VisualBasic6Parser::COMMA, i);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::SubscriptsContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::SubscriptsContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}


size_t VisualBasic6Parser::SubscriptsContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleSubscripts;
}

void VisualBasic6Parser::SubscriptsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubscripts(this);
}

void VisualBasic6Parser::SubscriptsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubscripts(this);
}

VisualBasic6Parser::SubscriptsContext* VisualBasic6Parser::subscripts() {
  SubscriptsContext *_localctx = _tracker.createInstance<SubscriptsContext>(_ctx, getState());
  enterRule(_localctx, 274, VisualBasic6Parser::RuleSubscripts);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2698);
    subscript_();
    setState(2709);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 463, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2700);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == VisualBasic6Parser::WS) {
          setState(2699);
          match(VisualBasic6Parser::WS);
        }
        setState(2702);
        match(VisualBasic6Parser::COMMA);
        setState(2704);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 462, _ctx)) {
        case 1: {
          setState(2703);
          match(VisualBasic6Parser::WS);
          break;
        }

        default:
          break;
        }
        setState(2706);
        subscript_(); 
      }
      setState(2711);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 463, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Subscript_Context ------------------------------------------------------------------

VisualBasic6Parser::Subscript_Context::Subscript_Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<VisualBasic6Parser::ValueStmtContext *> VisualBasic6Parser::Subscript_Context::valueStmt() {
  return getRuleContexts<VisualBasic6Parser::ValueStmtContext>();
}

VisualBasic6Parser::ValueStmtContext* VisualBasic6Parser::Subscript_Context::valueStmt(size_t i) {
  return getRuleContext<VisualBasic6Parser::ValueStmtContext>(i);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::Subscript_Context::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::Subscript_Context::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

tree::TerminalNode* VisualBasic6Parser::Subscript_Context::TO() {
  return getToken(VisualBasic6Parser::TO, 0);
}


size_t VisualBasic6Parser::Subscript_Context::getRuleIndex() const {
  return VisualBasic6Parser::RuleSubscript_;
}

void VisualBasic6Parser::Subscript_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubscript_(this);
}

void VisualBasic6Parser::Subscript_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubscript_(this);
}

VisualBasic6Parser::Subscript_Context* VisualBasic6Parser::subscript_() {
  Subscript_Context *_localctx = _tracker.createInstance<Subscript_Context>(_ctx, getState());
  enterRule(_localctx, 276, VisualBasic6Parser::RuleSubscript_);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2717);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 464, _ctx)) {
    case 1: {
      setState(2712);
      valueStmt(0);
      setState(2713);
      match(VisualBasic6Parser::WS);
      setState(2714);
      match(VisualBasic6Parser::TO);
      setState(2715);
      match(VisualBasic6Parser::WS);
      break;
    }

    default:
      break;
    }
    setState(2719);
    valueStmt(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AmbiguousIdentifierContext ------------------------------------------------------------------

VisualBasic6Parser::AmbiguousIdentifierContext::AmbiguousIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::AmbiguousIdentifierContext::IDENTIFIER() {
  return getTokens(VisualBasic6Parser::IDENTIFIER);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousIdentifierContext::IDENTIFIER(size_t i) {
  return getToken(VisualBasic6Parser::IDENTIFIER, i);
}

std::vector<VisualBasic6Parser::AmbiguousKeywordContext *> VisualBasic6Parser::AmbiguousIdentifierContext::ambiguousKeyword() {
  return getRuleContexts<VisualBasic6Parser::AmbiguousKeywordContext>();
}

VisualBasic6Parser::AmbiguousKeywordContext* VisualBasic6Parser::AmbiguousIdentifierContext::ambiguousKeyword(size_t i) {
  return getRuleContext<VisualBasic6Parser::AmbiguousKeywordContext>(i);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousIdentifierContext::L_SQUARE_BRACKET() {
  return getToken(VisualBasic6Parser::L_SQUARE_BRACKET, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousIdentifierContext::R_SQUARE_BRACKET() {
  return getToken(VisualBasic6Parser::R_SQUARE_BRACKET, 0);
}


size_t VisualBasic6Parser::AmbiguousIdentifierContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleAmbiguousIdentifier;
}

void VisualBasic6Parser::AmbiguousIdentifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAmbiguousIdentifier(this);
}

void VisualBasic6Parser::AmbiguousIdentifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAmbiguousIdentifier(this);
}

VisualBasic6Parser::AmbiguousIdentifierContext* VisualBasic6Parser::ambiguousIdentifier() {
  AmbiguousIdentifierContext *_localctx = _tracker.createInstance<AmbiguousIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 278, VisualBasic6Parser::RuleAmbiguousIdentifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(2735);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case VisualBasic6Parser::ACCESS:
      case VisualBasic6Parser::ADDRESSOF:
      case VisualBasic6Parser::ALIAS:
      case VisualBasic6Parser::AND:
      case VisualBasic6Parser::ATTRIBUTE:
      case VisualBasic6Parser::APPACTIVATE:
      case VisualBasic6Parser::APPEND:
      case VisualBasic6Parser::AS:
      case VisualBasic6Parser::BEEP:
      case VisualBasic6Parser::BEGIN:
      case VisualBasic6Parser::BINARY:
      case VisualBasic6Parser::BOOLEAN:
      case VisualBasic6Parser::BYVAL:
      case VisualBasic6Parser::BYREF:
      case VisualBasic6Parser::BYTE:
      case VisualBasic6Parser::CALL:
      case VisualBasic6Parser::CASE:
      case VisualBasic6Parser::CHDIR:
      case VisualBasic6Parser::CHDRIVE:
      case VisualBasic6Parser::CLASS:
      case VisualBasic6Parser::CLOSE:
      case VisualBasic6Parser::COLLECTION:
      case VisualBasic6Parser::CONST:
      case VisualBasic6Parser::DATE:
      case VisualBasic6Parser::DECLARE:
      case VisualBasic6Parser::DEFBOOL:
      case VisualBasic6Parser::DEFBYTE:
      case VisualBasic6Parser::DEFDATE:
      case VisualBasic6Parser::DEFDBL:
      case VisualBasic6Parser::DEFDEC:
      case VisualBasic6Parser::DEFCUR:
      case VisualBasic6Parser::DEFINT:
      case VisualBasic6Parser::DEFLNG:
      case VisualBasic6Parser::DEFOBJ:
      case VisualBasic6Parser::DEFSNG:
      case VisualBasic6Parser::DEFSTR:
      case VisualBasic6Parser::DEFVAR:
      case VisualBasic6Parser::DELETESETTING:
      case VisualBasic6Parser::DIM:
      case VisualBasic6Parser::DO:
      case VisualBasic6Parser::DOUBLE:
      case VisualBasic6Parser::EACH:
      case VisualBasic6Parser::ELSE:
      case VisualBasic6Parser::ELSEIF:
      case VisualBasic6Parser::END:
      case VisualBasic6Parser::ENUM:
      case VisualBasic6Parser::EQV:
      case VisualBasic6Parser::ERASE:
      case VisualBasic6Parser::ERROR:
      case VisualBasic6Parser::EVENT:
      case VisualBasic6Parser::FALSE:
      case VisualBasic6Parser::FILECOPY:
      case VisualBasic6Parser::FRIEND:
      case VisualBasic6Parser::FOR:
      case VisualBasic6Parser::FUNCTION:
      case VisualBasic6Parser::GET:
      case VisualBasic6Parser::GLOBAL:
      case VisualBasic6Parser::GOSUB:
      case VisualBasic6Parser::GOTO:
      case VisualBasic6Parser::IF:
      case VisualBasic6Parser::IMP:
      case VisualBasic6Parser::IMPLEMENTS:
      case VisualBasic6Parser::IN:
      case VisualBasic6Parser::INPUT:
      case VisualBasic6Parser::IS:
      case VisualBasic6Parser::INTEGER:
      case VisualBasic6Parser::KILL:
      case VisualBasic6Parser::LOAD:
      case VisualBasic6Parser::LOCK:
      case VisualBasic6Parser::LONG:
      case VisualBasic6Parser::LOOP:
      case VisualBasic6Parser::LEN:
      case VisualBasic6Parser::LET:
      case VisualBasic6Parser::LIB:
      case VisualBasic6Parser::LIKE:
      case VisualBasic6Parser::LSET:
      case VisualBasic6Parser::ME:
      case VisualBasic6Parser::MID:
      case VisualBasic6Parser::MKDIR:
      case VisualBasic6Parser::MOD:
      case VisualBasic6Parser::NAME:
      case VisualBasic6Parser::NEXT:
      case VisualBasic6Parser::NEW:
      case VisualBasic6Parser::NOT:
      case VisualBasic6Parser::NOTHING:
      case VisualBasic6Parser::NULL_:
      case VisualBasic6Parser::OBJECT:
      case VisualBasic6Parser::ON:
      case VisualBasic6Parser::OPEN:
      case VisualBasic6Parser::OPTIONAL:
      case VisualBasic6Parser::OR:
      case VisualBasic6Parser::OUTPUT:
      case VisualBasic6Parser::PARAMARRAY:
      case VisualBasic6Parser::PRESERVE:
      case VisualBasic6Parser::PRINT:
      case VisualBasic6Parser::PRIVATE:
      case VisualBasic6Parser::PUBLIC:
      case VisualBasic6Parser::PUT:
      case VisualBasic6Parser::RANDOM:
      case VisualBasic6Parser::RANDOMIZE:
      case VisualBasic6Parser::RAISEEVENT:
      case VisualBasic6Parser::READ:
      case VisualBasic6Parser::REDIM:
      case VisualBasic6Parser::REM:
      case VisualBasic6Parser::RESET:
      case VisualBasic6Parser::RESUME:
      case VisualBasic6Parser::RETURN:
      case VisualBasic6Parser::RMDIR:
      case VisualBasic6Parser::RSET:
      case VisualBasic6Parser::SAVEPICTURE:
      case VisualBasic6Parser::SAVESETTING:
      case VisualBasic6Parser::SEEK:
      case VisualBasic6Parser::SELECT:
      case VisualBasic6Parser::SENDKEYS:
      case VisualBasic6Parser::SET:
      case VisualBasic6Parser::SETATTR:
      case VisualBasic6Parser::SHARED:
      case VisualBasic6Parser::SINGLE:
      case VisualBasic6Parser::SPC:
      case VisualBasic6Parser::STATIC:
      case VisualBasic6Parser::STEP:
      case VisualBasic6Parser::STOP:
      case VisualBasic6Parser::STRING:
      case VisualBasic6Parser::SUB:
      case VisualBasic6Parser::TAB:
      case VisualBasic6Parser::TEXT:
      case VisualBasic6Parser::THEN:
      case VisualBasic6Parser::TIME:
      case VisualBasic6Parser::TO:
      case VisualBasic6Parser::TRUE:
      case VisualBasic6Parser::TYPE:
      case VisualBasic6Parser::TYPEOF:
      case VisualBasic6Parser::UNLOAD:
      case VisualBasic6Parser::UNLOCK:
      case VisualBasic6Parser::UNTIL:
      case VisualBasic6Parser::VARIANT:
      case VisualBasic6Parser::VERSION:
      case VisualBasic6Parser::WEND:
      case VisualBasic6Parser::WHILE:
      case VisualBasic6Parser::WIDTH:
      case VisualBasic6Parser::WITH:
      case VisualBasic6Parser::WITHEVENTS:
      case VisualBasic6Parser::WRITE:
      case VisualBasic6Parser::XOR:
      case VisualBasic6Parser::IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(2723); 
        _errHandler->sync(this);
        alt = 1;
        do {
          switch (alt) {
            case 1: {
                  setState(2723);
                  _errHandler->sync(this);
                  switch (_input->LA(1)) {
                    case VisualBasic6Parser::IDENTIFIER: {
                      setState(2721);
                      match(VisualBasic6Parser::IDENTIFIER);
                      break;
                    }

                    case VisualBasic6Parser::ACCESS:
                    case VisualBasic6Parser::ADDRESSOF:
                    case VisualBasic6Parser::ALIAS:
                    case VisualBasic6Parser::AND:
                    case VisualBasic6Parser::ATTRIBUTE:
                    case VisualBasic6Parser::APPACTIVATE:
                    case VisualBasic6Parser::APPEND:
                    case VisualBasic6Parser::AS:
                    case VisualBasic6Parser::BEEP:
                    case VisualBasic6Parser::BEGIN:
                    case VisualBasic6Parser::BINARY:
                    case VisualBasic6Parser::BOOLEAN:
                    case VisualBasic6Parser::BYVAL:
                    case VisualBasic6Parser::BYREF:
                    case VisualBasic6Parser::BYTE:
                    case VisualBasic6Parser::CALL:
                    case VisualBasic6Parser::CASE:
                    case VisualBasic6Parser::CHDIR:
                    case VisualBasic6Parser::CHDRIVE:
                    case VisualBasic6Parser::CLASS:
                    case VisualBasic6Parser::CLOSE:
                    case VisualBasic6Parser::COLLECTION:
                    case VisualBasic6Parser::CONST:
                    case VisualBasic6Parser::DATE:
                    case VisualBasic6Parser::DECLARE:
                    case VisualBasic6Parser::DEFBOOL:
                    case VisualBasic6Parser::DEFBYTE:
                    case VisualBasic6Parser::DEFDATE:
                    case VisualBasic6Parser::DEFDBL:
                    case VisualBasic6Parser::DEFDEC:
                    case VisualBasic6Parser::DEFCUR:
                    case VisualBasic6Parser::DEFINT:
                    case VisualBasic6Parser::DEFLNG:
                    case VisualBasic6Parser::DEFOBJ:
                    case VisualBasic6Parser::DEFSNG:
                    case VisualBasic6Parser::DEFSTR:
                    case VisualBasic6Parser::DEFVAR:
                    case VisualBasic6Parser::DELETESETTING:
                    case VisualBasic6Parser::DIM:
                    case VisualBasic6Parser::DO:
                    case VisualBasic6Parser::DOUBLE:
                    case VisualBasic6Parser::EACH:
                    case VisualBasic6Parser::ELSE:
                    case VisualBasic6Parser::ELSEIF:
                    case VisualBasic6Parser::END:
                    case VisualBasic6Parser::ENUM:
                    case VisualBasic6Parser::EQV:
                    case VisualBasic6Parser::ERASE:
                    case VisualBasic6Parser::ERROR:
                    case VisualBasic6Parser::EVENT:
                    case VisualBasic6Parser::FALSE:
                    case VisualBasic6Parser::FILECOPY:
                    case VisualBasic6Parser::FRIEND:
                    case VisualBasic6Parser::FOR:
                    case VisualBasic6Parser::FUNCTION:
                    case VisualBasic6Parser::GET:
                    case VisualBasic6Parser::GLOBAL:
                    case VisualBasic6Parser::GOSUB:
                    case VisualBasic6Parser::GOTO:
                    case VisualBasic6Parser::IF:
                    case VisualBasic6Parser::IMP:
                    case VisualBasic6Parser::IMPLEMENTS:
                    case VisualBasic6Parser::IN:
                    case VisualBasic6Parser::INPUT:
                    case VisualBasic6Parser::IS:
                    case VisualBasic6Parser::INTEGER:
                    case VisualBasic6Parser::KILL:
                    case VisualBasic6Parser::LOAD:
                    case VisualBasic6Parser::LOCK:
                    case VisualBasic6Parser::LONG:
                    case VisualBasic6Parser::LOOP:
                    case VisualBasic6Parser::LEN:
                    case VisualBasic6Parser::LET:
                    case VisualBasic6Parser::LIB:
                    case VisualBasic6Parser::LIKE:
                    case VisualBasic6Parser::LSET:
                    case VisualBasic6Parser::ME:
                    case VisualBasic6Parser::MID:
                    case VisualBasic6Parser::MKDIR:
                    case VisualBasic6Parser::MOD:
                    case VisualBasic6Parser::NAME:
                    case VisualBasic6Parser::NEXT:
                    case VisualBasic6Parser::NEW:
                    case VisualBasic6Parser::NOT:
                    case VisualBasic6Parser::NOTHING:
                    case VisualBasic6Parser::NULL_:
                    case VisualBasic6Parser::OBJECT:
                    case VisualBasic6Parser::ON:
                    case VisualBasic6Parser::OPEN:
                    case VisualBasic6Parser::OPTIONAL:
                    case VisualBasic6Parser::OR:
                    case VisualBasic6Parser::OUTPUT:
                    case VisualBasic6Parser::PARAMARRAY:
                    case VisualBasic6Parser::PRESERVE:
                    case VisualBasic6Parser::PRINT:
                    case VisualBasic6Parser::PRIVATE:
                    case VisualBasic6Parser::PUBLIC:
                    case VisualBasic6Parser::PUT:
                    case VisualBasic6Parser::RANDOM:
                    case VisualBasic6Parser::RANDOMIZE:
                    case VisualBasic6Parser::RAISEEVENT:
                    case VisualBasic6Parser::READ:
                    case VisualBasic6Parser::REDIM:
                    case VisualBasic6Parser::REM:
                    case VisualBasic6Parser::RESET:
                    case VisualBasic6Parser::RESUME:
                    case VisualBasic6Parser::RETURN:
                    case VisualBasic6Parser::RMDIR:
                    case VisualBasic6Parser::RSET:
                    case VisualBasic6Parser::SAVEPICTURE:
                    case VisualBasic6Parser::SAVESETTING:
                    case VisualBasic6Parser::SEEK:
                    case VisualBasic6Parser::SELECT:
                    case VisualBasic6Parser::SENDKEYS:
                    case VisualBasic6Parser::SET:
                    case VisualBasic6Parser::SETATTR:
                    case VisualBasic6Parser::SHARED:
                    case VisualBasic6Parser::SINGLE:
                    case VisualBasic6Parser::SPC:
                    case VisualBasic6Parser::STATIC:
                    case VisualBasic6Parser::STEP:
                    case VisualBasic6Parser::STOP:
                    case VisualBasic6Parser::STRING:
                    case VisualBasic6Parser::SUB:
                    case VisualBasic6Parser::TAB:
                    case VisualBasic6Parser::TEXT:
                    case VisualBasic6Parser::THEN:
                    case VisualBasic6Parser::TIME:
                    case VisualBasic6Parser::TO:
                    case VisualBasic6Parser::TRUE:
                    case VisualBasic6Parser::TYPE:
                    case VisualBasic6Parser::TYPEOF:
                    case VisualBasic6Parser::UNLOAD:
                    case VisualBasic6Parser::UNLOCK:
                    case VisualBasic6Parser::UNTIL:
                    case VisualBasic6Parser::VARIANT:
                    case VisualBasic6Parser::VERSION:
                    case VisualBasic6Parser::WEND:
                    case VisualBasic6Parser::WHILE:
                    case VisualBasic6Parser::WIDTH:
                    case VisualBasic6Parser::WITH:
                    case VisualBasic6Parser::WITHEVENTS:
                    case VisualBasic6Parser::WRITE:
                    case VisualBasic6Parser::XOR: {
                      setState(2722);
                      ambiguousKeyword();
                      break;
                    }

                  default:
                    throw NoViableAltException(this);
                  }
                  break;
                }

          default:
            throw NoViableAltException(this);
          }
          setState(2725); 
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 466, _ctx);
        } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
        break;
      }

      case VisualBasic6Parser::L_SQUARE_BRACKET: {
        enterOuterAlt(_localctx, 2);
        setState(2727);
        match(VisualBasic6Parser::L_SQUARE_BRACKET);
        setState(2730); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(2730);
          _errHandler->sync(this);
          switch (_input->LA(1)) {
            case VisualBasic6Parser::IDENTIFIER: {
              setState(2728);
              match(VisualBasic6Parser::IDENTIFIER);
              break;
            }

            case VisualBasic6Parser::ACCESS:
            case VisualBasic6Parser::ADDRESSOF:
            case VisualBasic6Parser::ALIAS:
            case VisualBasic6Parser::AND:
            case VisualBasic6Parser::ATTRIBUTE:
            case VisualBasic6Parser::APPACTIVATE:
            case VisualBasic6Parser::APPEND:
            case VisualBasic6Parser::AS:
            case VisualBasic6Parser::BEEP:
            case VisualBasic6Parser::BEGIN:
            case VisualBasic6Parser::BINARY:
            case VisualBasic6Parser::BOOLEAN:
            case VisualBasic6Parser::BYVAL:
            case VisualBasic6Parser::BYREF:
            case VisualBasic6Parser::BYTE:
            case VisualBasic6Parser::CALL:
            case VisualBasic6Parser::CASE:
            case VisualBasic6Parser::CHDIR:
            case VisualBasic6Parser::CHDRIVE:
            case VisualBasic6Parser::CLASS:
            case VisualBasic6Parser::CLOSE:
            case VisualBasic6Parser::COLLECTION:
            case VisualBasic6Parser::CONST:
            case VisualBasic6Parser::DATE:
            case VisualBasic6Parser::DECLARE:
            case VisualBasic6Parser::DEFBOOL:
            case VisualBasic6Parser::DEFBYTE:
            case VisualBasic6Parser::DEFDATE:
            case VisualBasic6Parser::DEFDBL:
            case VisualBasic6Parser::DEFDEC:
            case VisualBasic6Parser::DEFCUR:
            case VisualBasic6Parser::DEFINT:
            case VisualBasic6Parser::DEFLNG:
            case VisualBasic6Parser::DEFOBJ:
            case VisualBasic6Parser::DEFSNG:
            case VisualBasic6Parser::DEFSTR:
            case VisualBasic6Parser::DEFVAR:
            case VisualBasic6Parser::DELETESETTING:
            case VisualBasic6Parser::DIM:
            case VisualBasic6Parser::DO:
            case VisualBasic6Parser::DOUBLE:
            case VisualBasic6Parser::EACH:
            case VisualBasic6Parser::ELSE:
            case VisualBasic6Parser::ELSEIF:
            case VisualBasic6Parser::END:
            case VisualBasic6Parser::ENUM:
            case VisualBasic6Parser::EQV:
            case VisualBasic6Parser::ERASE:
            case VisualBasic6Parser::ERROR:
            case VisualBasic6Parser::EVENT:
            case VisualBasic6Parser::FALSE:
            case VisualBasic6Parser::FILECOPY:
            case VisualBasic6Parser::FRIEND:
            case VisualBasic6Parser::FOR:
            case VisualBasic6Parser::FUNCTION:
            case VisualBasic6Parser::GET:
            case VisualBasic6Parser::GLOBAL:
            case VisualBasic6Parser::GOSUB:
            case VisualBasic6Parser::GOTO:
            case VisualBasic6Parser::IF:
            case VisualBasic6Parser::IMP:
            case VisualBasic6Parser::IMPLEMENTS:
            case VisualBasic6Parser::IN:
            case VisualBasic6Parser::INPUT:
            case VisualBasic6Parser::IS:
            case VisualBasic6Parser::INTEGER:
            case VisualBasic6Parser::KILL:
            case VisualBasic6Parser::LOAD:
            case VisualBasic6Parser::LOCK:
            case VisualBasic6Parser::LONG:
            case VisualBasic6Parser::LOOP:
            case VisualBasic6Parser::LEN:
            case VisualBasic6Parser::LET:
            case VisualBasic6Parser::LIB:
            case VisualBasic6Parser::LIKE:
            case VisualBasic6Parser::LSET:
            case VisualBasic6Parser::ME:
            case VisualBasic6Parser::MID:
            case VisualBasic6Parser::MKDIR:
            case VisualBasic6Parser::MOD:
            case VisualBasic6Parser::NAME:
            case VisualBasic6Parser::NEXT:
            case VisualBasic6Parser::NEW:
            case VisualBasic6Parser::NOT:
            case VisualBasic6Parser::NOTHING:
            case VisualBasic6Parser::NULL_:
            case VisualBasic6Parser::OBJECT:
            case VisualBasic6Parser::ON:
            case VisualBasic6Parser::OPEN:
            case VisualBasic6Parser::OPTIONAL:
            case VisualBasic6Parser::OR:
            case VisualBasic6Parser::OUTPUT:
            case VisualBasic6Parser::PARAMARRAY:
            case VisualBasic6Parser::PRESERVE:
            case VisualBasic6Parser::PRINT:
            case VisualBasic6Parser::PRIVATE:
            case VisualBasic6Parser::PUBLIC:
            case VisualBasic6Parser::PUT:
            case VisualBasic6Parser::RANDOM:
            case VisualBasic6Parser::RANDOMIZE:
            case VisualBasic6Parser::RAISEEVENT:
            case VisualBasic6Parser::READ:
            case VisualBasic6Parser::REDIM:
            case VisualBasic6Parser::REM:
            case VisualBasic6Parser::RESET:
            case VisualBasic6Parser::RESUME:
            case VisualBasic6Parser::RETURN:
            case VisualBasic6Parser::RMDIR:
            case VisualBasic6Parser::RSET:
            case VisualBasic6Parser::SAVEPICTURE:
            case VisualBasic6Parser::SAVESETTING:
            case VisualBasic6Parser::SEEK:
            case VisualBasic6Parser::SELECT:
            case VisualBasic6Parser::SENDKEYS:
            case VisualBasic6Parser::SET:
            case VisualBasic6Parser::SETATTR:
            case VisualBasic6Parser::SHARED:
            case VisualBasic6Parser::SINGLE:
            case VisualBasic6Parser::SPC:
            case VisualBasic6Parser::STATIC:
            case VisualBasic6Parser::STEP:
            case VisualBasic6Parser::STOP:
            case VisualBasic6Parser::STRING:
            case VisualBasic6Parser::SUB:
            case VisualBasic6Parser::TAB:
            case VisualBasic6Parser::TEXT:
            case VisualBasic6Parser::THEN:
            case VisualBasic6Parser::TIME:
            case VisualBasic6Parser::TO:
            case VisualBasic6Parser::TRUE:
            case VisualBasic6Parser::TYPE:
            case VisualBasic6Parser::TYPEOF:
            case VisualBasic6Parser::UNLOAD:
            case VisualBasic6Parser::UNLOCK:
            case VisualBasic6Parser::UNTIL:
            case VisualBasic6Parser::VARIANT:
            case VisualBasic6Parser::VERSION:
            case VisualBasic6Parser::WEND:
            case VisualBasic6Parser::WHILE:
            case VisualBasic6Parser::WIDTH:
            case VisualBasic6Parser::WITH:
            case VisualBasic6Parser::WITHEVENTS:
            case VisualBasic6Parser::WRITE:
            case VisualBasic6Parser::XOR: {
              setState(2729);
              ambiguousKeyword();
              break;
            }

          default:
            throw NoViableAltException(this);
          }
          setState(2732); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 2251870182429423614) != 0) || ((((_la - 66) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 66)) & -8087550153692545025) != 0) || ((((_la - 130) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 130)) & 281474976710623) != 0) || _la == VisualBasic6Parser::IDENTIFIER);
        setState(2734);
        match(VisualBasic6Parser::R_SQUARE_BRACKET);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AsTypeClauseContext ------------------------------------------------------------------

VisualBasic6Parser::AsTypeClauseContext::AsTypeClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::AsTypeClauseContext::AS() {
  return getToken(VisualBasic6Parser::AS, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::AsTypeClauseContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::AsTypeClauseContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}

VisualBasic6Parser::Type_Context* VisualBasic6Parser::AsTypeClauseContext::type_() {
  return getRuleContext<VisualBasic6Parser::Type_Context>(0);
}

tree::TerminalNode* VisualBasic6Parser::AsTypeClauseContext::NEW() {
  return getToken(VisualBasic6Parser::NEW, 0);
}

VisualBasic6Parser::FieldLengthContext* VisualBasic6Parser::AsTypeClauseContext::fieldLength() {
  return getRuleContext<VisualBasic6Parser::FieldLengthContext>(0);
}


size_t VisualBasic6Parser::AsTypeClauseContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleAsTypeClause;
}

void VisualBasic6Parser::AsTypeClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAsTypeClause(this);
}

void VisualBasic6Parser::AsTypeClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAsTypeClause(this);
}

VisualBasic6Parser::AsTypeClauseContext* VisualBasic6Parser::asTypeClause() {
  AsTypeClauseContext *_localctx = _tracker.createInstance<AsTypeClauseContext>(_ctx, getState());
  enterRule(_localctx, 280, VisualBasic6Parser::RuleAsTypeClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2737);
    match(VisualBasic6Parser::AS);
    setState(2738);
    match(VisualBasic6Parser::WS);
    setState(2741);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 470, _ctx)) {
    case 1: {
      setState(2739);
      match(VisualBasic6Parser::NEW);
      setState(2740);
      match(VisualBasic6Parser::WS);
      break;
    }

    default:
      break;
    }
    setState(2743);
    type_();
    setState(2746);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 471, _ctx)) {
    case 1: {
      setState(2744);
      match(VisualBasic6Parser::WS);
      setState(2745);
      fieldLength();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BaseTypeContext ------------------------------------------------------------------

VisualBasic6Parser::BaseTypeContext::BaseTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::BaseTypeContext::BOOLEAN() {
  return getToken(VisualBasic6Parser::BOOLEAN, 0);
}

tree::TerminalNode* VisualBasic6Parser::BaseTypeContext::BYTE() {
  return getToken(VisualBasic6Parser::BYTE, 0);
}

tree::TerminalNode* VisualBasic6Parser::BaseTypeContext::COLLECTION() {
  return getToken(VisualBasic6Parser::COLLECTION, 0);
}

tree::TerminalNode* VisualBasic6Parser::BaseTypeContext::DATE() {
  return getToken(VisualBasic6Parser::DATE, 0);
}

tree::TerminalNode* VisualBasic6Parser::BaseTypeContext::DOUBLE() {
  return getToken(VisualBasic6Parser::DOUBLE, 0);
}

tree::TerminalNode* VisualBasic6Parser::BaseTypeContext::INTEGER() {
  return getToken(VisualBasic6Parser::INTEGER, 0);
}

tree::TerminalNode* VisualBasic6Parser::BaseTypeContext::LONG() {
  return getToken(VisualBasic6Parser::LONG, 0);
}

tree::TerminalNode* VisualBasic6Parser::BaseTypeContext::OBJECT() {
  return getToken(VisualBasic6Parser::OBJECT, 0);
}

tree::TerminalNode* VisualBasic6Parser::BaseTypeContext::SINGLE() {
  return getToken(VisualBasic6Parser::SINGLE, 0);
}

tree::TerminalNode* VisualBasic6Parser::BaseTypeContext::STRING() {
  return getToken(VisualBasic6Parser::STRING, 0);
}

tree::TerminalNode* VisualBasic6Parser::BaseTypeContext::VARIANT() {
  return getToken(VisualBasic6Parser::VARIANT, 0);
}


size_t VisualBasic6Parser::BaseTypeContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleBaseType;
}

void VisualBasic6Parser::BaseTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBaseType(this);
}

void VisualBasic6Parser::BaseTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBaseType(this);
}

VisualBasic6Parser::BaseTypeContext* VisualBasic6Parser::baseType() {
  BaseTypeContext *_localctx = _tracker.createInstance<BaseTypeContext>(_ctx, getState());
  enterRule(_localctx, 282, VisualBasic6Parser::RuleBaseType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2748);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 4398088527872) != 0) || ((((_la - 81) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 81)) & 536870929) != 0) || ((((_la - 151) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 151)) & 262177) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CertainIdentifierContext ------------------------------------------------------------------

VisualBasic6Parser::CertainIdentifierContext::CertainIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::CertainIdentifierContext::IDENTIFIER() {
  return getTokens(VisualBasic6Parser::IDENTIFIER);
}

tree::TerminalNode* VisualBasic6Parser::CertainIdentifierContext::IDENTIFIER(size_t i) {
  return getToken(VisualBasic6Parser::IDENTIFIER, i);
}

std::vector<VisualBasic6Parser::AmbiguousKeywordContext *> VisualBasic6Parser::CertainIdentifierContext::ambiguousKeyword() {
  return getRuleContexts<VisualBasic6Parser::AmbiguousKeywordContext>();
}

VisualBasic6Parser::AmbiguousKeywordContext* VisualBasic6Parser::CertainIdentifierContext::ambiguousKeyword(size_t i) {
  return getRuleContext<VisualBasic6Parser::AmbiguousKeywordContext>(i);
}


size_t VisualBasic6Parser::CertainIdentifierContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleCertainIdentifier;
}

void VisualBasic6Parser::CertainIdentifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCertainIdentifier(this);
}

void VisualBasic6Parser::CertainIdentifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCertainIdentifier(this);
}

VisualBasic6Parser::CertainIdentifierContext* VisualBasic6Parser::certainIdentifier() {
  CertainIdentifierContext *_localctx = _tracker.createInstance<CertainIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 284, VisualBasic6Parser::RuleCertainIdentifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(2765);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case VisualBasic6Parser::IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(2750);
        match(VisualBasic6Parser::IDENTIFIER);
        setState(2755);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 473, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(2753);
            _errHandler->sync(this);
            switch (_input->LA(1)) {
              case VisualBasic6Parser::ACCESS:
              case VisualBasic6Parser::ADDRESSOF:
              case VisualBasic6Parser::ALIAS:
              case VisualBasic6Parser::AND:
              case VisualBasic6Parser::ATTRIBUTE:
              case VisualBasic6Parser::APPACTIVATE:
              case VisualBasic6Parser::APPEND:
              case VisualBasic6Parser::AS:
              case VisualBasic6Parser::BEEP:
              case VisualBasic6Parser::BEGIN:
              case VisualBasic6Parser::BINARY:
              case VisualBasic6Parser::BOOLEAN:
              case VisualBasic6Parser::BYVAL:
              case VisualBasic6Parser::BYREF:
              case VisualBasic6Parser::BYTE:
              case VisualBasic6Parser::CALL:
              case VisualBasic6Parser::CASE:
              case VisualBasic6Parser::CHDIR:
              case VisualBasic6Parser::CHDRIVE:
              case VisualBasic6Parser::CLASS:
              case VisualBasic6Parser::CLOSE:
              case VisualBasic6Parser::COLLECTION:
              case VisualBasic6Parser::CONST:
              case VisualBasic6Parser::DATE:
              case VisualBasic6Parser::DECLARE:
              case VisualBasic6Parser::DEFBOOL:
              case VisualBasic6Parser::DEFBYTE:
              case VisualBasic6Parser::DEFDATE:
              case VisualBasic6Parser::DEFDBL:
              case VisualBasic6Parser::DEFDEC:
              case VisualBasic6Parser::DEFCUR:
              case VisualBasic6Parser::DEFINT:
              case VisualBasic6Parser::DEFLNG:
              case VisualBasic6Parser::DEFOBJ:
              case VisualBasic6Parser::DEFSNG:
              case VisualBasic6Parser::DEFSTR:
              case VisualBasic6Parser::DEFVAR:
              case VisualBasic6Parser::DELETESETTING:
              case VisualBasic6Parser::DIM:
              case VisualBasic6Parser::DO:
              case VisualBasic6Parser::DOUBLE:
              case VisualBasic6Parser::EACH:
              case VisualBasic6Parser::ELSE:
              case VisualBasic6Parser::ELSEIF:
              case VisualBasic6Parser::END:
              case VisualBasic6Parser::ENUM:
              case VisualBasic6Parser::EQV:
              case VisualBasic6Parser::ERASE:
              case VisualBasic6Parser::ERROR:
              case VisualBasic6Parser::EVENT:
              case VisualBasic6Parser::FALSE:
              case VisualBasic6Parser::FILECOPY:
              case VisualBasic6Parser::FRIEND:
              case VisualBasic6Parser::FOR:
              case VisualBasic6Parser::FUNCTION:
              case VisualBasic6Parser::GET:
              case VisualBasic6Parser::GLOBAL:
              case VisualBasic6Parser::GOSUB:
              case VisualBasic6Parser::GOTO:
              case VisualBasic6Parser::IF:
              case VisualBasic6Parser::IMP:
              case VisualBasic6Parser::IMPLEMENTS:
              case VisualBasic6Parser::IN:
              case VisualBasic6Parser::INPUT:
              case VisualBasic6Parser::IS:
              case VisualBasic6Parser::INTEGER:
              case VisualBasic6Parser::KILL:
              case VisualBasic6Parser::LOAD:
              case VisualBasic6Parser::LOCK:
              case VisualBasic6Parser::LONG:
              case VisualBasic6Parser::LOOP:
              case VisualBasic6Parser::LEN:
              case VisualBasic6Parser::LET:
              case VisualBasic6Parser::LIB:
              case VisualBasic6Parser::LIKE:
              case VisualBasic6Parser::LSET:
              case VisualBasic6Parser::ME:
              case VisualBasic6Parser::MID:
              case VisualBasic6Parser::MKDIR:
              case VisualBasic6Parser::MOD:
              case VisualBasic6Parser::NAME:
              case VisualBasic6Parser::NEXT:
              case VisualBasic6Parser::NEW:
              case VisualBasic6Parser::NOT:
              case VisualBasic6Parser::NOTHING:
              case VisualBasic6Parser::NULL_:
              case VisualBasic6Parser::OBJECT:
              case VisualBasic6Parser::ON:
              case VisualBasic6Parser::OPEN:
              case VisualBasic6Parser::OPTIONAL:
              case VisualBasic6Parser::OR:
              case VisualBasic6Parser::OUTPUT:
              case VisualBasic6Parser::PARAMARRAY:
              case VisualBasic6Parser::PRESERVE:
              case VisualBasic6Parser::PRINT:
              case VisualBasic6Parser::PRIVATE:
              case VisualBasic6Parser::PUBLIC:
              case VisualBasic6Parser::PUT:
              case VisualBasic6Parser::RANDOM:
              case VisualBasic6Parser::RANDOMIZE:
              case VisualBasic6Parser::RAISEEVENT:
              case VisualBasic6Parser::READ:
              case VisualBasic6Parser::REDIM:
              case VisualBasic6Parser::REM:
              case VisualBasic6Parser::RESET:
              case VisualBasic6Parser::RESUME:
              case VisualBasic6Parser::RETURN:
              case VisualBasic6Parser::RMDIR:
              case VisualBasic6Parser::RSET:
              case VisualBasic6Parser::SAVEPICTURE:
              case VisualBasic6Parser::SAVESETTING:
              case VisualBasic6Parser::SEEK:
              case VisualBasic6Parser::SELECT:
              case VisualBasic6Parser::SENDKEYS:
              case VisualBasic6Parser::SET:
              case VisualBasic6Parser::SETATTR:
              case VisualBasic6Parser::SHARED:
              case VisualBasic6Parser::SINGLE:
              case VisualBasic6Parser::SPC:
              case VisualBasic6Parser::STATIC:
              case VisualBasic6Parser::STEP:
              case VisualBasic6Parser::STOP:
              case VisualBasic6Parser::STRING:
              case VisualBasic6Parser::SUB:
              case VisualBasic6Parser::TAB:
              case VisualBasic6Parser::TEXT:
              case VisualBasic6Parser::THEN:
              case VisualBasic6Parser::TIME:
              case VisualBasic6Parser::TO:
              case VisualBasic6Parser::TRUE:
              case VisualBasic6Parser::TYPE:
              case VisualBasic6Parser::TYPEOF:
              case VisualBasic6Parser::UNLOAD:
              case VisualBasic6Parser::UNLOCK:
              case VisualBasic6Parser::UNTIL:
              case VisualBasic6Parser::VARIANT:
              case VisualBasic6Parser::VERSION:
              case VisualBasic6Parser::WEND:
              case VisualBasic6Parser::WHILE:
              case VisualBasic6Parser::WIDTH:
              case VisualBasic6Parser::WITH:
              case VisualBasic6Parser::WITHEVENTS:
              case VisualBasic6Parser::WRITE:
              case VisualBasic6Parser::XOR: {
                setState(2751);
                ambiguousKeyword();
                break;
              }

              case VisualBasic6Parser::IDENTIFIER: {
                setState(2752);
                match(VisualBasic6Parser::IDENTIFIER);
                break;
              }

            default:
              throw NoViableAltException(this);
            } 
          }
          setState(2757);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 473, _ctx);
        }
        break;
      }

      case VisualBasic6Parser::ACCESS:
      case VisualBasic6Parser::ADDRESSOF:
      case VisualBasic6Parser::ALIAS:
      case VisualBasic6Parser::AND:
      case VisualBasic6Parser::ATTRIBUTE:
      case VisualBasic6Parser::APPACTIVATE:
      case VisualBasic6Parser::APPEND:
      case VisualBasic6Parser::AS:
      case VisualBasic6Parser::BEEP:
      case VisualBasic6Parser::BEGIN:
      case VisualBasic6Parser::BINARY:
      case VisualBasic6Parser::BOOLEAN:
      case VisualBasic6Parser::BYVAL:
      case VisualBasic6Parser::BYREF:
      case VisualBasic6Parser::BYTE:
      case VisualBasic6Parser::CALL:
      case VisualBasic6Parser::CASE:
      case VisualBasic6Parser::CHDIR:
      case VisualBasic6Parser::CHDRIVE:
      case VisualBasic6Parser::CLASS:
      case VisualBasic6Parser::CLOSE:
      case VisualBasic6Parser::COLLECTION:
      case VisualBasic6Parser::CONST:
      case VisualBasic6Parser::DATE:
      case VisualBasic6Parser::DECLARE:
      case VisualBasic6Parser::DEFBOOL:
      case VisualBasic6Parser::DEFBYTE:
      case VisualBasic6Parser::DEFDATE:
      case VisualBasic6Parser::DEFDBL:
      case VisualBasic6Parser::DEFDEC:
      case VisualBasic6Parser::DEFCUR:
      case VisualBasic6Parser::DEFINT:
      case VisualBasic6Parser::DEFLNG:
      case VisualBasic6Parser::DEFOBJ:
      case VisualBasic6Parser::DEFSNG:
      case VisualBasic6Parser::DEFSTR:
      case VisualBasic6Parser::DEFVAR:
      case VisualBasic6Parser::DELETESETTING:
      case VisualBasic6Parser::DIM:
      case VisualBasic6Parser::DO:
      case VisualBasic6Parser::DOUBLE:
      case VisualBasic6Parser::EACH:
      case VisualBasic6Parser::ELSE:
      case VisualBasic6Parser::ELSEIF:
      case VisualBasic6Parser::END:
      case VisualBasic6Parser::ENUM:
      case VisualBasic6Parser::EQV:
      case VisualBasic6Parser::ERASE:
      case VisualBasic6Parser::ERROR:
      case VisualBasic6Parser::EVENT:
      case VisualBasic6Parser::FALSE:
      case VisualBasic6Parser::FILECOPY:
      case VisualBasic6Parser::FRIEND:
      case VisualBasic6Parser::FOR:
      case VisualBasic6Parser::FUNCTION:
      case VisualBasic6Parser::GET:
      case VisualBasic6Parser::GLOBAL:
      case VisualBasic6Parser::GOSUB:
      case VisualBasic6Parser::GOTO:
      case VisualBasic6Parser::IF:
      case VisualBasic6Parser::IMP:
      case VisualBasic6Parser::IMPLEMENTS:
      case VisualBasic6Parser::IN:
      case VisualBasic6Parser::INPUT:
      case VisualBasic6Parser::IS:
      case VisualBasic6Parser::INTEGER:
      case VisualBasic6Parser::KILL:
      case VisualBasic6Parser::LOAD:
      case VisualBasic6Parser::LOCK:
      case VisualBasic6Parser::LONG:
      case VisualBasic6Parser::LOOP:
      case VisualBasic6Parser::LEN:
      case VisualBasic6Parser::LET:
      case VisualBasic6Parser::LIB:
      case VisualBasic6Parser::LIKE:
      case VisualBasic6Parser::LSET:
      case VisualBasic6Parser::ME:
      case VisualBasic6Parser::MID:
      case VisualBasic6Parser::MKDIR:
      case VisualBasic6Parser::MOD:
      case VisualBasic6Parser::NAME:
      case VisualBasic6Parser::NEXT:
      case VisualBasic6Parser::NEW:
      case VisualBasic6Parser::NOT:
      case VisualBasic6Parser::NOTHING:
      case VisualBasic6Parser::NULL_:
      case VisualBasic6Parser::OBJECT:
      case VisualBasic6Parser::ON:
      case VisualBasic6Parser::OPEN:
      case VisualBasic6Parser::OPTIONAL:
      case VisualBasic6Parser::OR:
      case VisualBasic6Parser::OUTPUT:
      case VisualBasic6Parser::PARAMARRAY:
      case VisualBasic6Parser::PRESERVE:
      case VisualBasic6Parser::PRINT:
      case VisualBasic6Parser::PRIVATE:
      case VisualBasic6Parser::PUBLIC:
      case VisualBasic6Parser::PUT:
      case VisualBasic6Parser::RANDOM:
      case VisualBasic6Parser::RANDOMIZE:
      case VisualBasic6Parser::RAISEEVENT:
      case VisualBasic6Parser::READ:
      case VisualBasic6Parser::REDIM:
      case VisualBasic6Parser::REM:
      case VisualBasic6Parser::RESET:
      case VisualBasic6Parser::RESUME:
      case VisualBasic6Parser::RETURN:
      case VisualBasic6Parser::RMDIR:
      case VisualBasic6Parser::RSET:
      case VisualBasic6Parser::SAVEPICTURE:
      case VisualBasic6Parser::SAVESETTING:
      case VisualBasic6Parser::SEEK:
      case VisualBasic6Parser::SELECT:
      case VisualBasic6Parser::SENDKEYS:
      case VisualBasic6Parser::SET:
      case VisualBasic6Parser::SETATTR:
      case VisualBasic6Parser::SHARED:
      case VisualBasic6Parser::SINGLE:
      case VisualBasic6Parser::SPC:
      case VisualBasic6Parser::STATIC:
      case VisualBasic6Parser::STEP:
      case VisualBasic6Parser::STOP:
      case VisualBasic6Parser::STRING:
      case VisualBasic6Parser::SUB:
      case VisualBasic6Parser::TAB:
      case VisualBasic6Parser::TEXT:
      case VisualBasic6Parser::THEN:
      case VisualBasic6Parser::TIME:
      case VisualBasic6Parser::TO:
      case VisualBasic6Parser::TRUE:
      case VisualBasic6Parser::TYPE:
      case VisualBasic6Parser::TYPEOF:
      case VisualBasic6Parser::UNLOAD:
      case VisualBasic6Parser::UNLOCK:
      case VisualBasic6Parser::UNTIL:
      case VisualBasic6Parser::VARIANT:
      case VisualBasic6Parser::VERSION:
      case VisualBasic6Parser::WEND:
      case VisualBasic6Parser::WHILE:
      case VisualBasic6Parser::WIDTH:
      case VisualBasic6Parser::WITH:
      case VisualBasic6Parser::WITHEVENTS:
      case VisualBasic6Parser::WRITE:
      case VisualBasic6Parser::XOR: {
        enterOuterAlt(_localctx, 2);
        setState(2758);
        ambiguousKeyword();
        setState(2761); 
        _errHandler->sync(this);
        alt = 1;
        do {
          switch (alt) {
            case 1: {
                  setState(2761);
                  _errHandler->sync(this);
                  switch (_input->LA(1)) {
                    case VisualBasic6Parser::ACCESS:
                    case VisualBasic6Parser::ADDRESSOF:
                    case VisualBasic6Parser::ALIAS:
                    case VisualBasic6Parser::AND:
                    case VisualBasic6Parser::ATTRIBUTE:
                    case VisualBasic6Parser::APPACTIVATE:
                    case VisualBasic6Parser::APPEND:
                    case VisualBasic6Parser::AS:
                    case VisualBasic6Parser::BEEP:
                    case VisualBasic6Parser::BEGIN:
                    case VisualBasic6Parser::BINARY:
                    case VisualBasic6Parser::BOOLEAN:
                    case VisualBasic6Parser::BYVAL:
                    case VisualBasic6Parser::BYREF:
                    case VisualBasic6Parser::BYTE:
                    case VisualBasic6Parser::CALL:
                    case VisualBasic6Parser::CASE:
                    case VisualBasic6Parser::CHDIR:
                    case VisualBasic6Parser::CHDRIVE:
                    case VisualBasic6Parser::CLASS:
                    case VisualBasic6Parser::CLOSE:
                    case VisualBasic6Parser::COLLECTION:
                    case VisualBasic6Parser::CONST:
                    case VisualBasic6Parser::DATE:
                    case VisualBasic6Parser::DECLARE:
                    case VisualBasic6Parser::DEFBOOL:
                    case VisualBasic6Parser::DEFBYTE:
                    case VisualBasic6Parser::DEFDATE:
                    case VisualBasic6Parser::DEFDBL:
                    case VisualBasic6Parser::DEFDEC:
                    case VisualBasic6Parser::DEFCUR:
                    case VisualBasic6Parser::DEFINT:
                    case VisualBasic6Parser::DEFLNG:
                    case VisualBasic6Parser::DEFOBJ:
                    case VisualBasic6Parser::DEFSNG:
                    case VisualBasic6Parser::DEFSTR:
                    case VisualBasic6Parser::DEFVAR:
                    case VisualBasic6Parser::DELETESETTING:
                    case VisualBasic6Parser::DIM:
                    case VisualBasic6Parser::DO:
                    case VisualBasic6Parser::DOUBLE:
                    case VisualBasic6Parser::EACH:
                    case VisualBasic6Parser::ELSE:
                    case VisualBasic6Parser::ELSEIF:
                    case VisualBasic6Parser::END:
                    case VisualBasic6Parser::ENUM:
                    case VisualBasic6Parser::EQV:
                    case VisualBasic6Parser::ERASE:
                    case VisualBasic6Parser::ERROR:
                    case VisualBasic6Parser::EVENT:
                    case VisualBasic6Parser::FALSE:
                    case VisualBasic6Parser::FILECOPY:
                    case VisualBasic6Parser::FRIEND:
                    case VisualBasic6Parser::FOR:
                    case VisualBasic6Parser::FUNCTION:
                    case VisualBasic6Parser::GET:
                    case VisualBasic6Parser::GLOBAL:
                    case VisualBasic6Parser::GOSUB:
                    case VisualBasic6Parser::GOTO:
                    case VisualBasic6Parser::IF:
                    case VisualBasic6Parser::IMP:
                    case VisualBasic6Parser::IMPLEMENTS:
                    case VisualBasic6Parser::IN:
                    case VisualBasic6Parser::INPUT:
                    case VisualBasic6Parser::IS:
                    case VisualBasic6Parser::INTEGER:
                    case VisualBasic6Parser::KILL:
                    case VisualBasic6Parser::LOAD:
                    case VisualBasic6Parser::LOCK:
                    case VisualBasic6Parser::LONG:
                    case VisualBasic6Parser::LOOP:
                    case VisualBasic6Parser::LEN:
                    case VisualBasic6Parser::LET:
                    case VisualBasic6Parser::LIB:
                    case VisualBasic6Parser::LIKE:
                    case VisualBasic6Parser::LSET:
                    case VisualBasic6Parser::ME:
                    case VisualBasic6Parser::MID:
                    case VisualBasic6Parser::MKDIR:
                    case VisualBasic6Parser::MOD:
                    case VisualBasic6Parser::NAME:
                    case VisualBasic6Parser::NEXT:
                    case VisualBasic6Parser::NEW:
                    case VisualBasic6Parser::NOT:
                    case VisualBasic6Parser::NOTHING:
                    case VisualBasic6Parser::NULL_:
                    case VisualBasic6Parser::OBJECT:
                    case VisualBasic6Parser::ON:
                    case VisualBasic6Parser::OPEN:
                    case VisualBasic6Parser::OPTIONAL:
                    case VisualBasic6Parser::OR:
                    case VisualBasic6Parser::OUTPUT:
                    case VisualBasic6Parser::PARAMARRAY:
                    case VisualBasic6Parser::PRESERVE:
                    case VisualBasic6Parser::PRINT:
                    case VisualBasic6Parser::PRIVATE:
                    case VisualBasic6Parser::PUBLIC:
                    case VisualBasic6Parser::PUT:
                    case VisualBasic6Parser::RANDOM:
                    case VisualBasic6Parser::RANDOMIZE:
                    case VisualBasic6Parser::RAISEEVENT:
                    case VisualBasic6Parser::READ:
                    case VisualBasic6Parser::REDIM:
                    case VisualBasic6Parser::REM:
                    case VisualBasic6Parser::RESET:
                    case VisualBasic6Parser::RESUME:
                    case VisualBasic6Parser::RETURN:
                    case VisualBasic6Parser::RMDIR:
                    case VisualBasic6Parser::RSET:
                    case VisualBasic6Parser::SAVEPICTURE:
                    case VisualBasic6Parser::SAVESETTING:
                    case VisualBasic6Parser::SEEK:
                    case VisualBasic6Parser::SELECT:
                    case VisualBasic6Parser::SENDKEYS:
                    case VisualBasic6Parser::SET:
                    case VisualBasic6Parser::SETATTR:
                    case VisualBasic6Parser::SHARED:
                    case VisualBasic6Parser::SINGLE:
                    case VisualBasic6Parser::SPC:
                    case VisualBasic6Parser::STATIC:
                    case VisualBasic6Parser::STEP:
                    case VisualBasic6Parser::STOP:
                    case VisualBasic6Parser::STRING:
                    case VisualBasic6Parser::SUB:
                    case VisualBasic6Parser::TAB:
                    case VisualBasic6Parser::TEXT:
                    case VisualBasic6Parser::THEN:
                    case VisualBasic6Parser::TIME:
                    case VisualBasic6Parser::TO:
                    case VisualBasic6Parser::TRUE:
                    case VisualBasic6Parser::TYPE:
                    case VisualBasic6Parser::TYPEOF:
                    case VisualBasic6Parser::UNLOAD:
                    case VisualBasic6Parser::UNLOCK:
                    case VisualBasic6Parser::UNTIL:
                    case VisualBasic6Parser::VARIANT:
                    case VisualBasic6Parser::VERSION:
                    case VisualBasic6Parser::WEND:
                    case VisualBasic6Parser::WHILE:
                    case VisualBasic6Parser::WIDTH:
                    case VisualBasic6Parser::WITH:
                    case VisualBasic6Parser::WITHEVENTS:
                    case VisualBasic6Parser::WRITE:
                    case VisualBasic6Parser::XOR: {
                      setState(2759);
                      ambiguousKeyword();
                      break;
                    }

                    case VisualBasic6Parser::IDENTIFIER: {
                      setState(2760);
                      match(VisualBasic6Parser::IDENTIFIER);
                      break;
                    }

                  default:
                    throw NoViableAltException(this);
                  }
                  break;
                }

          default:
            throw NoViableAltException(this);
          }
          setState(2763); 
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 475, _ctx);
        } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ComparisonOperatorContext ------------------------------------------------------------------

VisualBasic6Parser::ComparisonOperatorContext::ComparisonOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::ComparisonOperatorContext::LT() {
  return getToken(VisualBasic6Parser::LT, 0);
}

tree::TerminalNode* VisualBasic6Parser::ComparisonOperatorContext::LEQ() {
  return getToken(VisualBasic6Parser::LEQ, 0);
}

tree::TerminalNode* VisualBasic6Parser::ComparisonOperatorContext::GT() {
  return getToken(VisualBasic6Parser::GT, 0);
}

tree::TerminalNode* VisualBasic6Parser::ComparisonOperatorContext::GEQ() {
  return getToken(VisualBasic6Parser::GEQ, 0);
}

tree::TerminalNode* VisualBasic6Parser::ComparisonOperatorContext::EQ() {
  return getToken(VisualBasic6Parser::EQ, 0);
}

tree::TerminalNode* VisualBasic6Parser::ComparisonOperatorContext::NEQ() {
  return getToken(VisualBasic6Parser::NEQ, 0);
}

tree::TerminalNode* VisualBasic6Parser::ComparisonOperatorContext::IS() {
  return getToken(VisualBasic6Parser::IS, 0);
}

tree::TerminalNode* VisualBasic6Parser::ComparisonOperatorContext::LIKE() {
  return getToken(VisualBasic6Parser::LIKE, 0);
}


size_t VisualBasic6Parser::ComparisonOperatorContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleComparisonOperator;
}

void VisualBasic6Parser::ComparisonOperatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComparisonOperator(this);
}

void VisualBasic6Parser::ComparisonOperatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComparisonOperator(this);
}

VisualBasic6Parser::ComparisonOperatorContext* VisualBasic6Parser::comparisonOperator() {
  ComparisonOperatorContext *_localctx = _tracker.createInstance<ComparisonOperatorContext>(_ctx, getState());
  enterRule(_localctx, 286, VisualBasic6Parser::RuleComparisonOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2767);
    _la = _input->LA(1);
    if (!(_la == VisualBasic6Parser::IS

    || _la == VisualBasic6Parser::LIKE || ((((_la - 187) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 187)) & 4397) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ComplexTypeContext ------------------------------------------------------------------

VisualBasic6Parser::ComplexTypeContext::ComplexTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<VisualBasic6Parser::AmbiguousIdentifierContext *> VisualBasic6Parser::ComplexTypeContext::ambiguousIdentifier() {
  return getRuleContexts<VisualBasic6Parser::AmbiguousIdentifierContext>();
}

VisualBasic6Parser::AmbiguousIdentifierContext* VisualBasic6Parser::ComplexTypeContext::ambiguousIdentifier(size_t i) {
  return getRuleContext<VisualBasic6Parser::AmbiguousIdentifierContext>(i);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::ComplexTypeContext::DOT() {
  return getTokens(VisualBasic6Parser::DOT);
}

tree::TerminalNode* VisualBasic6Parser::ComplexTypeContext::DOT(size_t i) {
  return getToken(VisualBasic6Parser::DOT, i);
}


size_t VisualBasic6Parser::ComplexTypeContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleComplexType;
}

void VisualBasic6Parser::ComplexTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComplexType(this);
}

void VisualBasic6Parser::ComplexTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComplexType(this);
}

VisualBasic6Parser::ComplexTypeContext* VisualBasic6Parser::complexType() {
  ComplexTypeContext *_localctx = _tracker.createInstance<ComplexTypeContext>(_ctx, getState());
  enterRule(_localctx, 288, VisualBasic6Parser::RuleComplexType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2769);
    ambiguousIdentifier();
    setState(2774);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 477, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2770);
        match(VisualBasic6Parser::DOT);
        setState(2771);
        ambiguousIdentifier(); 
      }
      setState(2776);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 477, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FieldLengthContext ------------------------------------------------------------------

VisualBasic6Parser::FieldLengthContext::FieldLengthContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::FieldLengthContext::MULT() {
  return getToken(VisualBasic6Parser::MULT, 0);
}

VisualBasic6Parser::IntegerLiteralContext* VisualBasic6Parser::FieldLengthContext::integerLiteral() {
  return getRuleContext<VisualBasic6Parser::IntegerLiteralContext>(0);
}

VisualBasic6Parser::AmbiguousIdentifierContext* VisualBasic6Parser::FieldLengthContext::ambiguousIdentifier() {
  return getRuleContext<VisualBasic6Parser::AmbiguousIdentifierContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::FieldLengthContext::WS() {
  return getToken(VisualBasic6Parser::WS, 0);
}


size_t VisualBasic6Parser::FieldLengthContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleFieldLength;
}

void VisualBasic6Parser::FieldLengthContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFieldLength(this);
}

void VisualBasic6Parser::FieldLengthContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFieldLength(this);
}

VisualBasic6Parser::FieldLengthContext* VisualBasic6Parser::fieldLength() {
  FieldLengthContext *_localctx = _tracker.createInstance<FieldLengthContext>(_ctx, getState());
  enterRule(_localctx, 290, VisualBasic6Parser::RuleFieldLength);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2777);
    match(VisualBasic6Parser::MULT);
    setState(2779);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == VisualBasic6Parser::WS) {
      setState(2778);
      match(VisualBasic6Parser::WS);
    }
    setState(2783);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case VisualBasic6Parser::MINUS:
      case VisualBasic6Parser::PLUS:
      case VisualBasic6Parser::INTEGERLITERAL: {
        setState(2781);
        integerLiteral();
        break;
      }

      case VisualBasic6Parser::ACCESS:
      case VisualBasic6Parser::ADDRESSOF:
      case VisualBasic6Parser::ALIAS:
      case VisualBasic6Parser::AND:
      case VisualBasic6Parser::ATTRIBUTE:
      case VisualBasic6Parser::APPACTIVATE:
      case VisualBasic6Parser::APPEND:
      case VisualBasic6Parser::AS:
      case VisualBasic6Parser::BEEP:
      case VisualBasic6Parser::BEGIN:
      case VisualBasic6Parser::BINARY:
      case VisualBasic6Parser::BOOLEAN:
      case VisualBasic6Parser::BYVAL:
      case VisualBasic6Parser::BYREF:
      case VisualBasic6Parser::BYTE:
      case VisualBasic6Parser::CALL:
      case VisualBasic6Parser::CASE:
      case VisualBasic6Parser::CHDIR:
      case VisualBasic6Parser::CHDRIVE:
      case VisualBasic6Parser::CLASS:
      case VisualBasic6Parser::CLOSE:
      case VisualBasic6Parser::COLLECTION:
      case VisualBasic6Parser::CONST:
      case VisualBasic6Parser::DATE:
      case VisualBasic6Parser::DECLARE:
      case VisualBasic6Parser::DEFBOOL:
      case VisualBasic6Parser::DEFBYTE:
      case VisualBasic6Parser::DEFDATE:
      case VisualBasic6Parser::DEFDBL:
      case VisualBasic6Parser::DEFDEC:
      case VisualBasic6Parser::DEFCUR:
      case VisualBasic6Parser::DEFINT:
      case VisualBasic6Parser::DEFLNG:
      case VisualBasic6Parser::DEFOBJ:
      case VisualBasic6Parser::DEFSNG:
      case VisualBasic6Parser::DEFSTR:
      case VisualBasic6Parser::DEFVAR:
      case VisualBasic6Parser::DELETESETTING:
      case VisualBasic6Parser::DIM:
      case VisualBasic6Parser::DO:
      case VisualBasic6Parser::DOUBLE:
      case VisualBasic6Parser::EACH:
      case VisualBasic6Parser::ELSE:
      case VisualBasic6Parser::ELSEIF:
      case VisualBasic6Parser::END:
      case VisualBasic6Parser::ENUM:
      case VisualBasic6Parser::EQV:
      case VisualBasic6Parser::ERASE:
      case VisualBasic6Parser::ERROR:
      case VisualBasic6Parser::EVENT:
      case VisualBasic6Parser::FALSE:
      case VisualBasic6Parser::FILECOPY:
      case VisualBasic6Parser::FRIEND:
      case VisualBasic6Parser::FOR:
      case VisualBasic6Parser::FUNCTION:
      case VisualBasic6Parser::GET:
      case VisualBasic6Parser::GLOBAL:
      case VisualBasic6Parser::GOSUB:
      case VisualBasic6Parser::GOTO:
      case VisualBasic6Parser::IF:
      case VisualBasic6Parser::IMP:
      case VisualBasic6Parser::IMPLEMENTS:
      case VisualBasic6Parser::IN:
      case VisualBasic6Parser::INPUT:
      case VisualBasic6Parser::IS:
      case VisualBasic6Parser::INTEGER:
      case VisualBasic6Parser::KILL:
      case VisualBasic6Parser::LOAD:
      case VisualBasic6Parser::LOCK:
      case VisualBasic6Parser::LONG:
      case VisualBasic6Parser::LOOP:
      case VisualBasic6Parser::LEN:
      case VisualBasic6Parser::LET:
      case VisualBasic6Parser::LIB:
      case VisualBasic6Parser::LIKE:
      case VisualBasic6Parser::LSET:
      case VisualBasic6Parser::ME:
      case VisualBasic6Parser::MID:
      case VisualBasic6Parser::MKDIR:
      case VisualBasic6Parser::MOD:
      case VisualBasic6Parser::NAME:
      case VisualBasic6Parser::NEXT:
      case VisualBasic6Parser::NEW:
      case VisualBasic6Parser::NOT:
      case VisualBasic6Parser::NOTHING:
      case VisualBasic6Parser::NULL_:
      case VisualBasic6Parser::OBJECT:
      case VisualBasic6Parser::ON:
      case VisualBasic6Parser::OPEN:
      case VisualBasic6Parser::OPTIONAL:
      case VisualBasic6Parser::OR:
      case VisualBasic6Parser::OUTPUT:
      case VisualBasic6Parser::PARAMARRAY:
      case VisualBasic6Parser::PRESERVE:
      case VisualBasic6Parser::PRINT:
      case VisualBasic6Parser::PRIVATE:
      case VisualBasic6Parser::PUBLIC:
      case VisualBasic6Parser::PUT:
      case VisualBasic6Parser::RANDOM:
      case VisualBasic6Parser::RANDOMIZE:
      case VisualBasic6Parser::RAISEEVENT:
      case VisualBasic6Parser::READ:
      case VisualBasic6Parser::REDIM:
      case VisualBasic6Parser::REM:
      case VisualBasic6Parser::RESET:
      case VisualBasic6Parser::RESUME:
      case VisualBasic6Parser::RETURN:
      case VisualBasic6Parser::RMDIR:
      case VisualBasic6Parser::RSET:
      case VisualBasic6Parser::SAVEPICTURE:
      case VisualBasic6Parser::SAVESETTING:
      case VisualBasic6Parser::SEEK:
      case VisualBasic6Parser::SELECT:
      case VisualBasic6Parser::SENDKEYS:
      case VisualBasic6Parser::SET:
      case VisualBasic6Parser::SETATTR:
      case VisualBasic6Parser::SHARED:
      case VisualBasic6Parser::SINGLE:
      case VisualBasic6Parser::SPC:
      case VisualBasic6Parser::STATIC:
      case VisualBasic6Parser::STEP:
      case VisualBasic6Parser::STOP:
      case VisualBasic6Parser::STRING:
      case VisualBasic6Parser::SUB:
      case VisualBasic6Parser::TAB:
      case VisualBasic6Parser::TEXT:
      case VisualBasic6Parser::THEN:
      case VisualBasic6Parser::TIME:
      case VisualBasic6Parser::TO:
      case VisualBasic6Parser::TRUE:
      case VisualBasic6Parser::TYPE:
      case VisualBasic6Parser::TYPEOF:
      case VisualBasic6Parser::UNLOAD:
      case VisualBasic6Parser::UNLOCK:
      case VisualBasic6Parser::UNTIL:
      case VisualBasic6Parser::VARIANT:
      case VisualBasic6Parser::VERSION:
      case VisualBasic6Parser::WEND:
      case VisualBasic6Parser::WHILE:
      case VisualBasic6Parser::WIDTH:
      case VisualBasic6Parser::WITH:
      case VisualBasic6Parser::WITHEVENTS:
      case VisualBasic6Parser::WRITE:
      case VisualBasic6Parser::XOR:
      case VisualBasic6Parser::L_SQUARE_BRACKET:
      case VisualBasic6Parser::IDENTIFIER: {
        setState(2782);
        ambiguousIdentifier();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LetterrangeContext ------------------------------------------------------------------

VisualBasic6Parser::LetterrangeContext::LetterrangeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<VisualBasic6Parser::CertainIdentifierContext *> VisualBasic6Parser::LetterrangeContext::certainIdentifier() {
  return getRuleContexts<VisualBasic6Parser::CertainIdentifierContext>();
}

VisualBasic6Parser::CertainIdentifierContext* VisualBasic6Parser::LetterrangeContext::certainIdentifier(size_t i) {
  return getRuleContext<VisualBasic6Parser::CertainIdentifierContext>(i);
}

tree::TerminalNode* VisualBasic6Parser::LetterrangeContext::MINUS() {
  return getToken(VisualBasic6Parser::MINUS, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::LetterrangeContext::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::LetterrangeContext::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}


size_t VisualBasic6Parser::LetterrangeContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleLetterrange;
}

void VisualBasic6Parser::LetterrangeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLetterrange(this);
}

void VisualBasic6Parser::LetterrangeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLetterrange(this);
}

VisualBasic6Parser::LetterrangeContext* VisualBasic6Parser::letterrange() {
  LetterrangeContext *_localctx = _tracker.createInstance<LetterrangeContext>(_ctx, getState());
  enterRule(_localctx, 292, VisualBasic6Parser::RuleLetterrange);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2785);
    certainIdentifier();
    setState(2794);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 482, _ctx)) {
    case 1: {
      setState(2787);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == VisualBasic6Parser::WS) {
        setState(2786);
        match(VisualBasic6Parser::WS);
      }
      setState(2789);
      match(VisualBasic6Parser::MINUS);
      setState(2791);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == VisualBasic6Parser::WS) {
        setState(2790);
        match(VisualBasic6Parser::WS);
      }
      setState(2793);
      certainIdentifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LineLabelContext ------------------------------------------------------------------

VisualBasic6Parser::LineLabelContext::LineLabelContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

VisualBasic6Parser::AmbiguousIdentifierContext* VisualBasic6Parser::LineLabelContext::ambiguousIdentifier() {
  return getRuleContext<VisualBasic6Parser::AmbiguousIdentifierContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::LineLabelContext::COLON() {
  return getToken(VisualBasic6Parser::COLON, 0);
}


size_t VisualBasic6Parser::LineLabelContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleLineLabel;
}

void VisualBasic6Parser::LineLabelContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLineLabel(this);
}

void VisualBasic6Parser::LineLabelContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLineLabel(this);
}

VisualBasic6Parser::LineLabelContext* VisualBasic6Parser::lineLabel() {
  LineLabelContext *_localctx = _tracker.createInstance<LineLabelContext>(_ctx, getState());
  enterRule(_localctx, 294, VisualBasic6Parser::RuleLineLabel);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2796);
    ambiguousIdentifier();
    setState(2797);
    match(VisualBasic6Parser::COLON);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LiteralContext ------------------------------------------------------------------

VisualBasic6Parser::LiteralContext::LiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::LiteralContext::COLORLITERAL() {
  return getToken(VisualBasic6Parser::COLORLITERAL, 0);
}

tree::TerminalNode* VisualBasic6Parser::LiteralContext::DATELITERAL() {
  return getToken(VisualBasic6Parser::DATELITERAL, 0);
}

VisualBasic6Parser::DoubleLiteralContext* VisualBasic6Parser::LiteralContext::doubleLiteral() {
  return getRuleContext<VisualBasic6Parser::DoubleLiteralContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::LiteralContext::FILENUMBER() {
  return getToken(VisualBasic6Parser::FILENUMBER, 0);
}

VisualBasic6Parser::IntegerLiteralContext* VisualBasic6Parser::LiteralContext::integerLiteral() {
  return getRuleContext<VisualBasic6Parser::IntegerLiteralContext>(0);
}

VisualBasic6Parser::OctalLiteralContext* VisualBasic6Parser::LiteralContext::octalLiteral() {
  return getRuleContext<VisualBasic6Parser::OctalLiteralContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::LiteralContext::STRINGLITERAL() {
  return getToken(VisualBasic6Parser::STRINGLITERAL, 0);
}

tree::TerminalNode* VisualBasic6Parser::LiteralContext::TRUE() {
  return getToken(VisualBasic6Parser::TRUE, 0);
}

tree::TerminalNode* VisualBasic6Parser::LiteralContext::FALSE() {
  return getToken(VisualBasic6Parser::FALSE, 0);
}

tree::TerminalNode* VisualBasic6Parser::LiteralContext::NOTHING() {
  return getToken(VisualBasic6Parser::NOTHING, 0);
}

tree::TerminalNode* VisualBasic6Parser::LiteralContext::NULL_() {
  return getToken(VisualBasic6Parser::NULL_, 0);
}


size_t VisualBasic6Parser::LiteralContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleLiteral;
}

void VisualBasic6Parser::LiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteral(this);
}

void VisualBasic6Parser::LiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteral(this);
}

VisualBasic6Parser::LiteralContext* VisualBasic6Parser::literal() {
  LiteralContext *_localctx = _tracker.createInstance<LiteralContext>(_ctx, getState());
  enterRule(_localctx, 296, VisualBasic6Parser::RuleLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2810);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 483, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2799);
      match(VisualBasic6Parser::COLORLITERAL);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2800);
      match(VisualBasic6Parser::DATELITERAL);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2801);
      doubleLiteral();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2802);
      match(VisualBasic6Parser::FILENUMBER);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2803);
      integerLiteral();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(2804);
      octalLiteral();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(2805);
      match(VisualBasic6Parser::STRINGLITERAL);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(2806);
      match(VisualBasic6Parser::TRUE);
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(2807);
      match(VisualBasic6Parser::FALSE);
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(2808);
      match(VisualBasic6Parser::NOTHING);
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(2809);
      match(VisualBasic6Parser::NULL_);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PublicPrivateVisibilityContext ------------------------------------------------------------------

VisualBasic6Parser::PublicPrivateVisibilityContext::PublicPrivateVisibilityContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::PublicPrivateVisibilityContext::PRIVATE() {
  return getToken(VisualBasic6Parser::PRIVATE, 0);
}

tree::TerminalNode* VisualBasic6Parser::PublicPrivateVisibilityContext::PUBLIC() {
  return getToken(VisualBasic6Parser::PUBLIC, 0);
}


size_t VisualBasic6Parser::PublicPrivateVisibilityContext::getRuleIndex() const {
  return VisualBasic6Parser::RulePublicPrivateVisibility;
}

void VisualBasic6Parser::PublicPrivateVisibilityContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPublicPrivateVisibility(this);
}

void VisualBasic6Parser::PublicPrivateVisibilityContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPublicPrivateVisibility(this);
}

VisualBasic6Parser::PublicPrivateVisibilityContext* VisualBasic6Parser::publicPrivateVisibility() {
  PublicPrivateVisibilityContext *_localctx = _tracker.createInstance<PublicPrivateVisibilityContext>(_ctx, getState());
  enterRule(_localctx, 298, VisualBasic6Parser::RulePublicPrivateVisibility);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2812);
    _la = _input->LA(1);
    if (!(_la == VisualBasic6Parser::PRIVATE

    || _la == VisualBasic6Parser::PUBLIC)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PublicPrivateGlobalVisibilityContext ------------------------------------------------------------------

VisualBasic6Parser::PublicPrivateGlobalVisibilityContext::PublicPrivateGlobalVisibilityContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::PublicPrivateGlobalVisibilityContext::PRIVATE() {
  return getToken(VisualBasic6Parser::PRIVATE, 0);
}

tree::TerminalNode* VisualBasic6Parser::PublicPrivateGlobalVisibilityContext::PUBLIC() {
  return getToken(VisualBasic6Parser::PUBLIC, 0);
}

tree::TerminalNode* VisualBasic6Parser::PublicPrivateGlobalVisibilityContext::GLOBAL() {
  return getToken(VisualBasic6Parser::GLOBAL, 0);
}


size_t VisualBasic6Parser::PublicPrivateGlobalVisibilityContext::getRuleIndex() const {
  return VisualBasic6Parser::RulePublicPrivateGlobalVisibility;
}

void VisualBasic6Parser::PublicPrivateGlobalVisibilityContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPublicPrivateGlobalVisibility(this);
}

void VisualBasic6Parser::PublicPrivateGlobalVisibilityContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPublicPrivateGlobalVisibility(this);
}

VisualBasic6Parser::PublicPrivateGlobalVisibilityContext* VisualBasic6Parser::publicPrivateGlobalVisibility() {
  PublicPrivateGlobalVisibilityContext *_localctx = _tracker.createInstance<PublicPrivateGlobalVisibilityContext>(_ctx, getState());
  enterRule(_localctx, 300, VisualBasic6Parser::RulePublicPrivateGlobalVisibility);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2814);
    _la = _input->LA(1);
    if (!(((((_la - 72) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 72)) & 153122387330596865) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_Context ------------------------------------------------------------------

VisualBasic6Parser::Type_Context::Type_Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

VisualBasic6Parser::BaseTypeContext* VisualBasic6Parser::Type_Context::baseType() {
  return getRuleContext<VisualBasic6Parser::BaseTypeContext>(0);
}

VisualBasic6Parser::ComplexTypeContext* VisualBasic6Parser::Type_Context::complexType() {
  return getRuleContext<VisualBasic6Parser::ComplexTypeContext>(0);
}

tree::TerminalNode* VisualBasic6Parser::Type_Context::LPAREN() {
  return getToken(VisualBasic6Parser::LPAREN, 0);
}

tree::TerminalNode* VisualBasic6Parser::Type_Context::RPAREN() {
  return getToken(VisualBasic6Parser::RPAREN, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::Type_Context::WS() {
  return getTokens(VisualBasic6Parser::WS);
}

tree::TerminalNode* VisualBasic6Parser::Type_Context::WS(size_t i) {
  return getToken(VisualBasic6Parser::WS, i);
}


size_t VisualBasic6Parser::Type_Context::getRuleIndex() const {
  return VisualBasic6Parser::RuleType_;
}

void VisualBasic6Parser::Type_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_(this);
}

void VisualBasic6Parser::Type_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_(this);
}

VisualBasic6Parser::Type_Context* VisualBasic6Parser::type_() {
  Type_Context *_localctx = _tracker.createInstance<Type_Context>(_ctx, getState());
  enterRule(_localctx, 302, VisualBasic6Parser::RuleType_);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2818);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 484, _ctx)) {
    case 1: {
      setState(2816);
      baseType();
      break;
    }

    case 2: {
      setState(2817);
      complexType();
      break;
    }

    default:
      break;
    }
    setState(2828);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 487, _ctx)) {
    case 1: {
      setState(2821);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == VisualBasic6Parser::WS) {
        setState(2820);
        match(VisualBasic6Parser::WS);
      }
      setState(2823);
      match(VisualBasic6Parser::LPAREN);
      setState(2825);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == VisualBasic6Parser::WS) {
        setState(2824);
        match(VisualBasic6Parser::WS);
      }
      setState(2827);
      match(VisualBasic6Parser::RPAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeHintContext ------------------------------------------------------------------

VisualBasic6Parser::TypeHintContext::TypeHintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::TypeHintContext::AMPERSAND() {
  return getToken(VisualBasic6Parser::AMPERSAND, 0);
}

tree::TerminalNode* VisualBasic6Parser::TypeHintContext::AT() {
  return getToken(VisualBasic6Parser::AT, 0);
}

tree::TerminalNode* VisualBasic6Parser::TypeHintContext::DOLLAR() {
  return getToken(VisualBasic6Parser::DOLLAR, 0);
}

tree::TerminalNode* VisualBasic6Parser::TypeHintContext::EXCLAMATIONMARK() {
  return getToken(VisualBasic6Parser::EXCLAMATIONMARK, 0);
}

tree::TerminalNode* VisualBasic6Parser::TypeHintContext::HASH() {
  return getToken(VisualBasic6Parser::HASH, 0);
}

tree::TerminalNode* VisualBasic6Parser::TypeHintContext::PERCENT() {
  return getToken(VisualBasic6Parser::PERCENT, 0);
}


size_t VisualBasic6Parser::TypeHintContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleTypeHint;
}

void VisualBasic6Parser::TypeHintContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeHint(this);
}

void VisualBasic6Parser::TypeHintContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeHint(this);
}

VisualBasic6Parser::TypeHintContext* VisualBasic6Parser::typeHint() {
  TypeHintContext *_localctx = _tracker.createInstance<TypeHintContext>(_ctx, getState());
  enterRule(_localctx, 304, VisualBasic6Parser::RuleTypeHint);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2830);
    _la = _input->LA(1);
    if (!(((((_la - 178) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 178)) & 4203653) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VisibilityContext ------------------------------------------------------------------

VisualBasic6Parser::VisibilityContext::VisibilityContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::VisibilityContext::PRIVATE() {
  return getToken(VisualBasic6Parser::PRIVATE, 0);
}

tree::TerminalNode* VisualBasic6Parser::VisibilityContext::PUBLIC() {
  return getToken(VisualBasic6Parser::PUBLIC, 0);
}

tree::TerminalNode* VisualBasic6Parser::VisibilityContext::FRIEND() {
  return getToken(VisualBasic6Parser::FRIEND, 0);
}

tree::TerminalNode* VisualBasic6Parser::VisibilityContext::GLOBAL() {
  return getToken(VisualBasic6Parser::GLOBAL, 0);
}


size_t VisualBasic6Parser::VisibilityContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleVisibility;
}

void VisualBasic6Parser::VisibilityContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVisibility(this);
}

void VisualBasic6Parser::VisibilityContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVisibility(this);
}

VisualBasic6Parser::VisibilityContext* VisualBasic6Parser::visibility() {
  VisibilityContext *_localctx = _tracker.createInstance<VisibilityContext>(_ctx, getState());
  enterRule(_localctx, 306, VisualBasic6Parser::RuleVisibility);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2832);
    _la = _input->LA(1);
    if (!(((((_la - 68) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 68)) & 2449958197289549841) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AmbiguousKeywordContext ------------------------------------------------------------------

VisualBasic6Parser::AmbiguousKeywordContext::AmbiguousKeywordContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::ACCESS() {
  return getToken(VisualBasic6Parser::ACCESS, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::ADDRESSOF() {
  return getToken(VisualBasic6Parser::ADDRESSOF, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::ALIAS() {
  return getToken(VisualBasic6Parser::ALIAS, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::AND() {
  return getToken(VisualBasic6Parser::AND, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::ATTRIBUTE() {
  return getToken(VisualBasic6Parser::ATTRIBUTE, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::APPACTIVATE() {
  return getToken(VisualBasic6Parser::APPACTIVATE, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::APPEND() {
  return getToken(VisualBasic6Parser::APPEND, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::AS() {
  return getToken(VisualBasic6Parser::AS, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::BEEP() {
  return getToken(VisualBasic6Parser::BEEP, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::BEGIN() {
  return getToken(VisualBasic6Parser::BEGIN, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::BINARY() {
  return getToken(VisualBasic6Parser::BINARY, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::BOOLEAN() {
  return getToken(VisualBasic6Parser::BOOLEAN, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::BYVAL() {
  return getToken(VisualBasic6Parser::BYVAL, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::BYREF() {
  return getToken(VisualBasic6Parser::BYREF, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::BYTE() {
  return getToken(VisualBasic6Parser::BYTE, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::CALL() {
  return getToken(VisualBasic6Parser::CALL, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::CASE() {
  return getToken(VisualBasic6Parser::CASE, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::CLASS() {
  return getToken(VisualBasic6Parser::CLASS, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::CLOSE() {
  return getToken(VisualBasic6Parser::CLOSE, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::CHDIR() {
  return getToken(VisualBasic6Parser::CHDIR, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::CHDRIVE() {
  return getToken(VisualBasic6Parser::CHDRIVE, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::COLLECTION() {
  return getToken(VisualBasic6Parser::COLLECTION, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::CONST() {
  return getToken(VisualBasic6Parser::CONST, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::DATE() {
  return getToken(VisualBasic6Parser::DATE, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::DECLARE() {
  return getToken(VisualBasic6Parser::DECLARE, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::DEFBOOL() {
  return getToken(VisualBasic6Parser::DEFBOOL, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::DEFBYTE() {
  return getToken(VisualBasic6Parser::DEFBYTE, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::DEFCUR() {
  return getToken(VisualBasic6Parser::DEFCUR, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::DEFDBL() {
  return getToken(VisualBasic6Parser::DEFDBL, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::DEFDATE() {
  return getToken(VisualBasic6Parser::DEFDATE, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::DEFDEC() {
  return getToken(VisualBasic6Parser::DEFDEC, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::DEFINT() {
  return getToken(VisualBasic6Parser::DEFINT, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::DEFLNG() {
  return getToken(VisualBasic6Parser::DEFLNG, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::DEFOBJ() {
  return getToken(VisualBasic6Parser::DEFOBJ, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::DEFSNG() {
  return getToken(VisualBasic6Parser::DEFSNG, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::DEFSTR() {
  return getToken(VisualBasic6Parser::DEFSTR, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::DEFVAR() {
  return getToken(VisualBasic6Parser::DEFVAR, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::DELETESETTING() {
  return getToken(VisualBasic6Parser::DELETESETTING, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::DIM() {
  return getToken(VisualBasic6Parser::DIM, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::DO() {
  return getToken(VisualBasic6Parser::DO, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::DOUBLE() {
  return getToken(VisualBasic6Parser::DOUBLE, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::EACH() {
  return getToken(VisualBasic6Parser::EACH, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::ELSE() {
  return getToken(VisualBasic6Parser::ELSE, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::ELSEIF() {
  return getToken(VisualBasic6Parser::ELSEIF, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::END() {
  return getToken(VisualBasic6Parser::END, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::ENUM() {
  return getToken(VisualBasic6Parser::ENUM, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::EQV() {
  return getToken(VisualBasic6Parser::EQV, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::ERASE() {
  return getToken(VisualBasic6Parser::ERASE, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::ERROR() {
  return getToken(VisualBasic6Parser::ERROR, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::EVENT() {
  return getToken(VisualBasic6Parser::EVENT, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::FALSE() {
  return getToken(VisualBasic6Parser::FALSE, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::FILECOPY() {
  return getToken(VisualBasic6Parser::FILECOPY, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::FRIEND() {
  return getToken(VisualBasic6Parser::FRIEND, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::FOR() {
  return getToken(VisualBasic6Parser::FOR, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::FUNCTION() {
  return getToken(VisualBasic6Parser::FUNCTION, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::GET() {
  return getToken(VisualBasic6Parser::GET, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::GLOBAL() {
  return getToken(VisualBasic6Parser::GLOBAL, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::GOSUB() {
  return getToken(VisualBasic6Parser::GOSUB, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::GOTO() {
  return getToken(VisualBasic6Parser::GOTO, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::IF() {
  return getToken(VisualBasic6Parser::IF, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::IMP() {
  return getToken(VisualBasic6Parser::IMP, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::IMPLEMENTS() {
  return getToken(VisualBasic6Parser::IMPLEMENTS, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::IN() {
  return getToken(VisualBasic6Parser::IN, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::INPUT() {
  return getToken(VisualBasic6Parser::INPUT, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::IS() {
  return getToken(VisualBasic6Parser::IS, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::INTEGER() {
  return getToken(VisualBasic6Parser::INTEGER, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::KILL() {
  return getToken(VisualBasic6Parser::KILL, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::LOAD() {
  return getToken(VisualBasic6Parser::LOAD, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::LOCK() {
  return getToken(VisualBasic6Parser::LOCK, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::LONG() {
  return getToken(VisualBasic6Parser::LONG, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::LOOP() {
  return getToken(VisualBasic6Parser::LOOP, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::LEN() {
  return getToken(VisualBasic6Parser::LEN, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::LET() {
  return getToken(VisualBasic6Parser::LET, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::LIB() {
  return getToken(VisualBasic6Parser::LIB, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::LIKE() {
  return getToken(VisualBasic6Parser::LIKE, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::LSET() {
  return getToken(VisualBasic6Parser::LSET, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::ME() {
  return getToken(VisualBasic6Parser::ME, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::MID() {
  return getToken(VisualBasic6Parser::MID, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::MKDIR() {
  return getToken(VisualBasic6Parser::MKDIR, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::MOD() {
  return getToken(VisualBasic6Parser::MOD, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::NAME() {
  return getToken(VisualBasic6Parser::NAME, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::NEXT() {
  return getToken(VisualBasic6Parser::NEXT, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::NEW() {
  return getToken(VisualBasic6Parser::NEW, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::NOT() {
  return getToken(VisualBasic6Parser::NOT, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::NOTHING() {
  return getToken(VisualBasic6Parser::NOTHING, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::NULL_() {
  return getToken(VisualBasic6Parser::NULL_, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::OBJECT() {
  return getToken(VisualBasic6Parser::OBJECT, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::ON() {
  return getToken(VisualBasic6Parser::ON, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::OPEN() {
  return getToken(VisualBasic6Parser::OPEN, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::OPTIONAL() {
  return getToken(VisualBasic6Parser::OPTIONAL, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::OR() {
  return getToken(VisualBasic6Parser::OR, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::OUTPUT() {
  return getToken(VisualBasic6Parser::OUTPUT, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::PARAMARRAY() {
  return getToken(VisualBasic6Parser::PARAMARRAY, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::PRESERVE() {
  return getToken(VisualBasic6Parser::PRESERVE, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::PRINT() {
  return getToken(VisualBasic6Parser::PRINT, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::PRIVATE() {
  return getToken(VisualBasic6Parser::PRIVATE, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::PUBLIC() {
  return getToken(VisualBasic6Parser::PUBLIC, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::PUT() {
  return getToken(VisualBasic6Parser::PUT, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::RANDOM() {
  return getToken(VisualBasic6Parser::RANDOM, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::RANDOMIZE() {
  return getToken(VisualBasic6Parser::RANDOMIZE, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::RAISEEVENT() {
  return getToken(VisualBasic6Parser::RAISEEVENT, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::READ() {
  return getToken(VisualBasic6Parser::READ, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::REDIM() {
  return getToken(VisualBasic6Parser::REDIM, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::REM() {
  return getToken(VisualBasic6Parser::REM, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::RESET() {
  return getToken(VisualBasic6Parser::RESET, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::RESUME() {
  return getToken(VisualBasic6Parser::RESUME, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::RETURN() {
  return getToken(VisualBasic6Parser::RETURN, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::RMDIR() {
  return getToken(VisualBasic6Parser::RMDIR, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::RSET() {
  return getToken(VisualBasic6Parser::RSET, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::SAVEPICTURE() {
  return getToken(VisualBasic6Parser::SAVEPICTURE, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::SAVESETTING() {
  return getToken(VisualBasic6Parser::SAVESETTING, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::SEEK() {
  return getToken(VisualBasic6Parser::SEEK, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::SELECT() {
  return getToken(VisualBasic6Parser::SELECT, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::SENDKEYS() {
  return getToken(VisualBasic6Parser::SENDKEYS, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::SET() {
  return getToken(VisualBasic6Parser::SET, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::SETATTR() {
  return getToken(VisualBasic6Parser::SETATTR, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::SHARED() {
  return getToken(VisualBasic6Parser::SHARED, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::SINGLE() {
  return getToken(VisualBasic6Parser::SINGLE, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::SPC() {
  return getToken(VisualBasic6Parser::SPC, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::STATIC() {
  return getToken(VisualBasic6Parser::STATIC, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::STEP() {
  return getToken(VisualBasic6Parser::STEP, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::STOP() {
  return getToken(VisualBasic6Parser::STOP, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::STRING() {
  return getToken(VisualBasic6Parser::STRING, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::SUB() {
  return getToken(VisualBasic6Parser::SUB, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::TAB() {
  return getToken(VisualBasic6Parser::TAB, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::TEXT() {
  return getToken(VisualBasic6Parser::TEXT, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::THEN() {
  return getToken(VisualBasic6Parser::THEN, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::TIME() {
  return getToken(VisualBasic6Parser::TIME, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::TO() {
  return getToken(VisualBasic6Parser::TO, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::TRUE() {
  return getToken(VisualBasic6Parser::TRUE, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::TYPE() {
  return getToken(VisualBasic6Parser::TYPE, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::TYPEOF() {
  return getToken(VisualBasic6Parser::TYPEOF, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::UNLOAD() {
  return getToken(VisualBasic6Parser::UNLOAD, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::UNLOCK() {
  return getToken(VisualBasic6Parser::UNLOCK, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::UNTIL() {
  return getToken(VisualBasic6Parser::UNTIL, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::VARIANT() {
  return getToken(VisualBasic6Parser::VARIANT, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::VERSION() {
  return getToken(VisualBasic6Parser::VERSION, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::WEND() {
  return getToken(VisualBasic6Parser::WEND, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::WHILE() {
  return getToken(VisualBasic6Parser::WHILE, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::WIDTH() {
  return getToken(VisualBasic6Parser::WIDTH, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::WITH() {
  return getToken(VisualBasic6Parser::WITH, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::WITHEVENTS() {
  return getToken(VisualBasic6Parser::WITHEVENTS, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::WRITE() {
  return getToken(VisualBasic6Parser::WRITE, 0);
}

tree::TerminalNode* VisualBasic6Parser::AmbiguousKeywordContext::XOR() {
  return getToken(VisualBasic6Parser::XOR, 0);
}


size_t VisualBasic6Parser::AmbiguousKeywordContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleAmbiguousKeyword;
}

void VisualBasic6Parser::AmbiguousKeywordContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAmbiguousKeyword(this);
}

void VisualBasic6Parser::AmbiguousKeywordContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAmbiguousKeyword(this);
}

VisualBasic6Parser::AmbiguousKeywordContext* VisualBasic6Parser::ambiguousKeyword() {
  AmbiguousKeywordContext *_localctx = _tracker.createInstance<AmbiguousKeywordContext>(_ctx, getState());
  enterRule(_localctx, 308, VisualBasic6Parser::RuleAmbiguousKeyword);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2834);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2251870182429423614) != 0) || ((((_la - 66) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 66)) & -8087550153692545025) != 0) || ((((_la - 130) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 130)) & 281474976710623) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IntegerLiteralContext ------------------------------------------------------------------

VisualBasic6Parser::IntegerLiteralContext::IntegerLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::IntegerLiteralContext::INTEGERLITERAL() {
  return getToken(VisualBasic6Parser::INTEGERLITERAL, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::IntegerLiteralContext::PLUS() {
  return getTokens(VisualBasic6Parser::PLUS);
}

tree::TerminalNode* VisualBasic6Parser::IntegerLiteralContext::PLUS(size_t i) {
  return getToken(VisualBasic6Parser::PLUS, i);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::IntegerLiteralContext::MINUS() {
  return getTokens(VisualBasic6Parser::MINUS);
}

tree::TerminalNode* VisualBasic6Parser::IntegerLiteralContext::MINUS(size_t i) {
  return getToken(VisualBasic6Parser::MINUS, i);
}


size_t VisualBasic6Parser::IntegerLiteralContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleIntegerLiteral;
}

void VisualBasic6Parser::IntegerLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIntegerLiteral(this);
}

void VisualBasic6Parser::IntegerLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIntegerLiteral(this);
}

VisualBasic6Parser::IntegerLiteralContext* VisualBasic6Parser::integerLiteral() {
  IntegerLiteralContext *_localctx = _tracker.createInstance<IntegerLiteralContext>(_ctx, getState());
  enterRule(_localctx, 310, VisualBasic6Parser::RuleIntegerLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2839);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == VisualBasic6Parser::MINUS

    || _la == VisualBasic6Parser::PLUS) {
      setState(2836);
      _la = _input->LA(1);
      if (!(_la == VisualBasic6Parser::MINUS

      || _la == VisualBasic6Parser::PLUS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(2841);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2842);
    match(VisualBasic6Parser::INTEGERLITERAL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OctalLiteralContext ------------------------------------------------------------------

VisualBasic6Parser::OctalLiteralContext::OctalLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::OctalLiteralContext::OCTALLITERAL() {
  return getToken(VisualBasic6Parser::OCTALLITERAL, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::OctalLiteralContext::PLUS() {
  return getTokens(VisualBasic6Parser::PLUS);
}

tree::TerminalNode* VisualBasic6Parser::OctalLiteralContext::PLUS(size_t i) {
  return getToken(VisualBasic6Parser::PLUS, i);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::OctalLiteralContext::MINUS() {
  return getTokens(VisualBasic6Parser::MINUS);
}

tree::TerminalNode* VisualBasic6Parser::OctalLiteralContext::MINUS(size_t i) {
  return getToken(VisualBasic6Parser::MINUS, i);
}


size_t VisualBasic6Parser::OctalLiteralContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleOctalLiteral;
}

void VisualBasic6Parser::OctalLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOctalLiteral(this);
}

void VisualBasic6Parser::OctalLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOctalLiteral(this);
}

VisualBasic6Parser::OctalLiteralContext* VisualBasic6Parser::octalLiteral() {
  OctalLiteralContext *_localctx = _tracker.createInstance<OctalLiteralContext>(_ctx, getState());
  enterRule(_localctx, 312, VisualBasic6Parser::RuleOctalLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2847);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == VisualBasic6Parser::MINUS

    || _la == VisualBasic6Parser::PLUS) {
      setState(2844);
      _la = _input->LA(1);
      if (!(_la == VisualBasic6Parser::MINUS

      || _la == VisualBasic6Parser::PLUS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(2849);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2850);
    match(VisualBasic6Parser::OCTALLITERAL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DoubleLiteralContext ------------------------------------------------------------------

VisualBasic6Parser::DoubleLiteralContext::DoubleLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* VisualBasic6Parser::DoubleLiteralContext::DOUBLELITERAL() {
  return getToken(VisualBasic6Parser::DOUBLELITERAL, 0);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::DoubleLiteralContext::PLUS() {
  return getTokens(VisualBasic6Parser::PLUS);
}

tree::TerminalNode* VisualBasic6Parser::DoubleLiteralContext::PLUS(size_t i) {
  return getToken(VisualBasic6Parser::PLUS, i);
}

std::vector<tree::TerminalNode *> VisualBasic6Parser::DoubleLiteralContext::MINUS() {
  return getTokens(VisualBasic6Parser::MINUS);
}

tree::TerminalNode* VisualBasic6Parser::DoubleLiteralContext::MINUS(size_t i) {
  return getToken(VisualBasic6Parser::MINUS, i);
}


size_t VisualBasic6Parser::DoubleLiteralContext::getRuleIndex() const {
  return VisualBasic6Parser::RuleDoubleLiteral;
}

void VisualBasic6Parser::DoubleLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDoubleLiteral(this);
}

void VisualBasic6Parser::DoubleLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<VisualBasic6ParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDoubleLiteral(this);
}

VisualBasic6Parser::DoubleLiteralContext* VisualBasic6Parser::doubleLiteral() {
  DoubleLiteralContext *_localctx = _tracker.createInstance<DoubleLiteralContext>(_ctx, getState());
  enterRule(_localctx, 314, VisualBasic6Parser::RuleDoubleLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2855);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == VisualBasic6Parser::MINUS

    || _la == VisualBasic6Parser::PLUS) {
      setState(2852);
      _la = _input->LA(1);
      if (!(_la == VisualBasic6Parser::MINUS

      || _la == VisualBasic6Parser::PLUS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(2857);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2858);
    match(VisualBasic6Parser::DOUBLELITERAL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool VisualBasic6Parser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 110: return valueStmtSempred(antlrcpp::downCast<ValueStmtContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool VisualBasic6Parser::valueStmtSempred(ValueStmtContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return precpred(_ctx, 16);
    case 1: return precpred(_ctx, 14);
    case 2: return precpred(_ctx, 13);
    case 3: return precpred(_ctx, 12);
    case 4: return precpred(_ctx, 11);
    case 5: return precpred(_ctx, 10);
    case 6: return precpred(_ctx, 9);
    case 7: return precpred(_ctx, 7);
    case 8: return precpred(_ctx, 6);
    case 9: return precpred(_ctx, 5);
    case 10: return precpred(_ctx, 4);
    case 11: return precpred(_ctx, 3);

  default:
    break;
  }
  return true;
}

void VisualBasic6Parser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  visualbasic6parserParserInitialize();
#else
  ::antlr4::internal::call_once(visualbasic6parserParserOnceFlag, visualbasic6parserParserInitialize);
#endif
}
