
// Generated from my.g4 by ANTLR 4.11.1


#include "myListener.h"

#include "myParser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct MyParserStaticData final {
  MyParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  MyParserStaticData(const MyParserStaticData&) = delete;
  MyParserStaticData(MyParserStaticData&&) = delete;
  MyParserStaticData& operator=(const MyParserStaticData&) = delete;
  MyParserStaticData& operator=(MyParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag myParserOnceFlag;
MyParserStaticData *myParserStaticData = nullptr;

void myParserInitialize() {
  assert(myParserStaticData == nullptr);
  auto staticData = std::make_unique<MyParserStaticData>(
    std::vector<std::string>{
      "primaryExpression", "genericSelection", "genericAssocList", "genericAssociation", 
      "postfixExpression", "argumentExpressionList", "unaryExpression", 
      "unaryOperator", "castExpression", "multiplicativeExpression", "additiveExpression", 
      "shiftExpression", "relationalExpression", "equalityExpression", "andExpression", 
      "exclusiveOrExpression", "inclusiveOrExpression", "logicalAndExpression", 
      "logicalOrExpression", "conditionalExpression", "assignmentExpression", 
      "assignmentOperator", "expression", "constantExpression", "declaration", 
      "declarationSpecifiers", "declarationSpecifiers2", "declarationSpecifier", 
      "initDeclaratorList", "initDeclarator", "storageClassSpecifier", "typeSpecifier", 
      "structOrUnionSpecifier", "structOrUnion", "structDeclarationList", 
      "structDeclaration", "specifierQualifierList", "structDeclaratorList", 
      "structDeclarator", "enumSpecifier", "enumeratorList", "enumerator", 
      "enumerationConstant", "atomicTypeSpecifier", "typeQualifier", "functionSpecifier", 
      "alignmentSpecifier", "declarator", "directDeclarator", "vcSpecificModifer", 
      "gccDeclaratorExtension", "gccAttributeSpecifier", "gccAttributeList", 
      "gccAttribute", "nestedParenthesesBlock", "pointer", "typeQualifierList", 
      "parameterTypeList", "parameterList", "parameterDeclaration", "identifierList", 
      "typeName", "abstractDeclarator", "directAbstractDeclarator", "typedefName", 
      "initializer", "initializerList", "designation", "designatorList", 
      "designator", "staticAssertDeclaration", "statement", "labeledStatement", 
      "compoundStatement", "blockItemList", "blockItem", "expressionStatement", 
      "selectionStatement", "iterationStatement", "forCondition", "forDeclaration", 
      "forExpression", "jumpStatement", "compilationUnit", "translationUnit", 
      "externalDeclaration", "functionDefinition", "declarationList"
    },
    std::vector<std::string>{
      "", "'__extension__'", "'__builtin_va_arg'", "'__builtin_offsetof'", 
      "'__m128'", "'__m128d'", "'__m128i'", "'__typeof__'", "'__inline__'", 
      "'__stdcall'", "'__declspec'", "'__cdecl'", "'__clrcall'", "'__fastcall'", 
      "'__thiscall'", "'__vectorcall'", "'__asm'", "'__attribute__'", "'__asm__'", 
      "'__volatile__'", "'auto'", "'break'", "'case'", "'char'", "'const'", 
      "'continue'", "'default'", "'do'", "'double'", "'else'", "'enum'", 
      "'extern'", "'float'", "'for'", "'goto'", "'if'", "'inline'", "'int'", 
      "'long'", "'register'", "'restrict'", "'return'", "'short'", "'signed'", 
      "'sizeof'", "'static'", "'struct'", "'switch'", "'typedef'", "'union'", 
      "'unsigned'", "'void'", "'volatile'", "'while'", "'_Alignas'", "'_Alignof'", 
      "'_Atomic'", "'_Bool'", "'_Complex'", "'_Generic'", "'_Imaginary'", 
      "'_Noreturn'", "'_Static_assert'", "'_Thread_local'", "'('", "')'", 
      "'['", "']'", "'{'", "'}'", "'<'", "'<='", "'>'", "'>='", "'<<'", 
      "'>>'", "'+'", "'++'", "'-'", "'--'", "'*'", "'/'", "'%'", "'&'", 
      "'|'", "'&&'", "'||'", "'^'", "'!'", "'~'", "'\\u003F'", "':'", "';'", 
      "','", "'='", "'*='", "'/='", "'%='", "'+='", "'-='", "'<<='", "'>>='", 
      "'&='", "'^='", "'|='", "'=='", "'!='", "'->'", "'.'", "'...'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "Auto", "Break", "Case", "Char", "Const", "Continue", 
      "Default", "Do", "Double", "Else", "Enum", "Extern", "Float", "For", 
      "Goto", "If", "Inline", "Int", "Long", "Register", "Restrict", "Return", 
      "Short", "Signed", "Sizeof", "Static", "Struct", "Switch", "Typedef", 
      "Union", "Unsigned", "Void", "Volatile", "While", "Alignas", "Alignof", 
      "Atomic", "Bool", "Complex", "Generic", "Imaginary", "Noreturn", "StaticAssert", 
      "ThreadLocal", "LeftParen", "RightParen", "LeftBracket", "RightBracket", 
      "LeftBrace", "RightBrace", "Less", "LessEqual", "Greater", "GreaterEqual", 
      "LeftShift", "RightShift", "Plus", "PlusPlus", "Minus", "MinusMinus", 
      "Star", "Div", "Mod", "And", "Or", "AndAnd", "OrOr", "Caret", "Not", 
      "Tilde", "Question", "Colon", "Semi", "Comma", "Assign", "StarAssign", 
      "DivAssign", "ModAssign", "PlusAssign", "MinusAssign", "LeftShiftAssign", 
      "RightShiftAssign", "AndAssign", "XorAssign", "OrAssign", "Equal", 
      "NotEqual", "Arrow", "Dot", "Ellipsis", "Identifier", "Constant", 
      "DigitSequence", "StringLiteral", "ComplexDefine", "IncludeDirective", 
      "AsmBlock", "LineAfterPreprocessing", "LineDirective", "PragmaDirective", 
      "Whitespace", "Newline", "BlockComment", "LineComment"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,123,1093,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,1,0,1,0,1,0,4,0,180,8,0,11,0,12,0,
  	181,1,0,1,0,1,0,1,0,1,0,1,0,3,0,190,8,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
  	0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,3,0,210,8,0,1,1,1,1,1,1,1,1,
  	1,1,1,1,1,1,1,2,1,2,1,2,5,2,222,8,2,10,2,12,2,225,9,2,1,3,1,3,3,3,229,
  	8,3,1,3,1,3,1,3,1,4,1,4,3,4,236,8,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,244,8,
  	4,1,4,1,4,3,4,248,8,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,256,8,4,1,4,1,4,1,4,
  	1,4,5,4,262,8,4,10,4,12,4,265,9,4,1,5,1,5,1,5,5,5,270,8,5,10,5,12,5,273,
  	9,5,1,6,5,6,276,8,6,10,6,12,6,279,9,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
  	1,6,1,6,1,6,3,6,292,8,6,1,7,1,7,1,8,3,8,297,8,8,1,8,1,8,1,8,1,8,1,8,1,
  	8,1,8,3,8,306,8,8,1,9,1,9,1,9,5,9,311,8,9,10,9,12,9,314,9,9,1,10,1,10,
  	1,10,5,10,319,8,10,10,10,12,10,322,9,10,1,11,1,11,1,11,5,11,327,8,11,
  	10,11,12,11,330,9,11,1,12,1,12,1,12,5,12,335,8,12,10,12,12,12,338,9,12,
  	1,13,1,13,1,13,5,13,343,8,13,10,13,12,13,346,9,13,1,14,1,14,1,14,5,14,
  	351,8,14,10,14,12,14,354,9,14,1,15,1,15,1,15,5,15,359,8,15,10,15,12,15,
  	362,9,15,1,16,1,16,1,16,5,16,367,8,16,10,16,12,16,370,9,16,1,17,1,17,
  	1,17,5,17,375,8,17,10,17,12,17,378,9,17,1,18,1,18,1,18,5,18,383,8,18,
  	10,18,12,18,386,9,18,1,19,1,19,1,19,1,19,1,19,1,19,3,19,394,8,19,1,20,
  	1,20,1,20,1,20,1,20,1,20,3,20,402,8,20,1,21,1,21,1,22,1,22,1,22,5,22,
  	409,8,22,10,22,12,22,412,9,22,1,23,1,23,1,24,1,24,3,24,418,8,24,1,24,
  	1,24,1,24,3,24,423,8,24,1,25,4,25,426,8,25,11,25,12,25,427,1,26,4,26,
  	431,8,26,11,26,12,26,432,1,27,1,27,1,27,1,27,1,27,3,27,440,8,27,1,28,
  	1,28,1,28,5,28,445,8,28,10,28,12,28,448,9,28,1,29,1,29,1,29,3,29,453,
  	8,29,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
  	1,31,1,31,1,31,3,31,471,8,31,1,32,1,32,3,32,475,8,32,1,32,1,32,1,32,1,
  	32,1,32,1,32,1,32,3,32,484,8,32,1,33,1,33,1,34,4,34,489,8,34,11,34,12,
  	34,490,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,501,8,35,1,36,1,36,
  	3,36,505,8,36,1,36,3,36,508,8,36,1,37,1,37,1,37,5,37,513,8,37,10,37,12,
  	37,516,9,37,1,38,1,38,3,38,520,8,38,1,38,1,38,3,38,524,8,38,1,39,1,39,
  	3,39,528,8,39,1,39,1,39,1,39,3,39,533,8,39,1,39,1,39,1,39,1,39,3,39,539,
  	8,39,1,40,1,40,1,40,5,40,544,8,40,10,40,12,40,547,9,40,1,41,1,41,1,41,
  	3,41,552,8,41,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,45,1,45,
  	1,45,1,45,1,45,1,45,3,45,569,8,45,1,46,1,46,1,46,1,46,3,46,575,8,46,1,
  	46,1,46,1,47,3,47,580,8,47,1,47,1,47,5,47,584,8,47,10,47,12,47,587,9,
  	47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,
  	48,1,48,1,48,1,48,3,48,606,8,48,1,48,1,48,1,48,3,48,611,8,48,1,48,3,48,
  	614,8,48,1,48,1,48,1,48,1,48,1,48,3,48,621,8,48,1,48,1,48,1,48,1,48,1,
  	48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,636,8,48,1,48,1,48,1,
  	48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,648,8,48,1,48,5,48,651,8,48,
  	10,48,12,48,654,9,48,1,49,1,49,1,50,1,50,1,50,4,50,661,8,50,11,50,12,
  	50,662,1,50,1,50,3,50,667,8,50,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,52,
  	3,52,677,8,52,1,52,1,52,3,52,681,8,52,5,52,683,8,52,10,52,12,52,686,9,
  	52,1,53,1,53,1,53,3,53,691,8,53,1,53,3,53,694,8,53,1,54,1,54,1,54,1,54,
  	1,54,5,54,701,8,54,10,54,12,54,704,9,54,1,55,1,55,3,55,708,8,55,4,55,
  	710,8,55,11,55,12,55,711,1,56,4,56,715,8,56,11,56,12,56,716,1,57,1,57,
  	1,57,3,57,722,8,57,1,58,1,58,1,58,5,58,727,8,58,10,58,12,58,730,9,58,
  	1,59,1,59,1,59,1,59,1,59,3,59,737,8,59,3,59,739,8,59,1,60,1,60,1,60,5,
  	60,744,8,60,10,60,12,60,747,9,60,1,61,1,61,3,61,751,8,61,1,62,1,62,3,
  	62,755,8,62,1,62,1,62,5,62,759,8,62,10,62,12,62,762,9,62,3,62,764,8,62,
  	1,63,1,63,1,63,1,63,1,63,5,63,771,8,63,10,63,12,63,774,9,63,1,63,1,63,
  	3,63,778,8,63,1,63,3,63,781,8,63,1,63,1,63,1,63,1,63,3,63,787,8,63,1,
  	63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,3,
  	63,803,8,63,1,63,1,63,5,63,807,8,63,10,63,12,63,810,9,63,3,63,812,8,63,
  	1,63,1,63,1,63,3,63,817,8,63,1,63,3,63,820,8,63,1,63,1,63,1,63,1,63,1,
  	63,3,63,827,8,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,
  	63,1,63,1,63,1,63,1,63,1,63,1,63,3,63,846,8,63,1,63,1,63,5,63,850,8,63,
  	10,63,12,63,853,9,63,5,63,855,8,63,10,63,12,63,858,9,63,1,64,1,64,1,65,
  	1,65,1,65,1,65,3,65,866,8,65,1,65,1,65,3,65,870,8,65,1,66,3,66,873,8,
  	66,1,66,1,66,1,66,3,66,878,8,66,1,66,5,66,881,8,66,10,66,12,66,884,9,
  	66,1,67,1,67,1,67,1,68,4,68,890,8,68,11,68,12,68,891,1,69,1,69,1,69,1,
  	69,1,69,1,69,3,69,900,8,69,1,70,1,70,1,70,1,70,1,70,4,70,907,8,70,11,
  	70,12,70,908,1,70,1,70,1,70,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,
  	71,1,71,1,71,1,71,5,71,926,8,71,10,71,12,71,929,9,71,3,71,931,8,71,1,
  	71,1,71,1,71,1,71,5,71,937,8,71,10,71,12,71,940,9,71,3,71,942,8,71,5,
  	71,944,8,71,10,71,12,71,947,9,71,1,71,1,71,3,71,951,8,71,1,72,1,72,1,
  	72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,3,72,964,8,72,1,73,1,73,3,
  	73,968,8,73,1,73,1,73,1,74,4,74,973,8,74,11,74,12,74,974,1,75,1,75,3,
  	75,979,8,75,1,76,3,76,982,8,76,1,76,1,76,1,77,1,77,1,77,1,77,1,77,1,77,
  	1,77,3,77,993,8,77,1,77,1,77,1,77,1,77,1,77,1,77,3,77,1001,8,77,1,78,
  	1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,
  	1,78,1,78,1,78,1,78,1,78,3,78,1023,8,78,1,79,1,79,3,79,1027,8,79,3,79,
  	1029,8,79,1,79,1,79,3,79,1033,8,79,1,79,1,79,3,79,1037,8,79,1,80,1,80,
  	3,80,1041,8,80,1,81,1,81,1,81,5,81,1046,8,81,10,81,12,81,1049,9,81,1,
  	82,1,82,1,82,1,82,1,82,3,82,1056,8,82,1,82,1,82,3,82,1060,8,82,1,82,1,
  	82,1,83,3,83,1065,8,83,1,83,1,83,1,84,4,84,1070,8,84,11,84,12,84,1071,
  	1,85,1,85,1,85,3,85,1077,8,85,1,86,3,86,1080,8,86,1,86,1,86,3,86,1084,
  	8,86,1,86,1,86,1,87,4,87,1089,8,87,11,87,12,87,1090,1,87,0,2,96,126,88,
  	0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,
  	50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,
  	96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,
  	132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,
  	168,170,172,174,0,24,1,0,107,108,2,0,77,77,79,79,3,0,44,44,77,77,79,79,
  	2,0,44,44,55,55,5,0,76,76,78,78,80,80,83,83,88,89,1,0,80,82,2,0,76,76,
  	78,78,1,0,74,75,1,0,70,73,1,0,105,106,1,0,94,104,6,0,20,20,31,31,39,39,
  	45,45,48,48,63,63,8,0,4,6,23,23,28,28,32,32,37,38,42,43,50,51,57,58,1,
  	0,4,6,2,0,46,46,49,49,4,0,24,24,40,40,52,52,56,56,3,0,8,9,36,36,61,61,
  	2,0,9,9,11,15,2,0,64,65,93,93,1,0,64,65,2,0,80,80,87,87,2,0,16,16,18,
  	18,2,0,19,19,52,52,2,0,21,21,25,25,1184,0,209,1,0,0,0,2,211,1,0,0,0,4,
  	218,1,0,0,0,6,228,1,0,0,0,8,247,1,0,0,0,10,266,1,0,0,0,12,277,1,0,0,0,
  	14,293,1,0,0,0,16,305,1,0,0,0,18,307,1,0,0,0,20,315,1,0,0,0,22,323,1,
  	0,0,0,24,331,1,0,0,0,26,339,1,0,0,0,28,347,1,0,0,0,30,355,1,0,0,0,32,
  	363,1,0,0,0,34,371,1,0,0,0,36,379,1,0,0,0,38,387,1,0,0,0,40,401,1,0,0,
  	0,42,403,1,0,0,0,44,405,1,0,0,0,46,413,1,0,0,0,48,422,1,0,0,0,50,425,
  	1,0,0,0,52,430,1,0,0,0,54,439,1,0,0,0,56,441,1,0,0,0,58,449,1,0,0,0,60,
  	454,1,0,0,0,62,470,1,0,0,0,64,483,1,0,0,0,66,485,1,0,0,0,68,488,1,0,0,
  	0,70,500,1,0,0,0,72,504,1,0,0,0,74,509,1,0,0,0,76,523,1,0,0,0,78,538,
  	1,0,0,0,80,540,1,0,0,0,82,548,1,0,0,0,84,553,1,0,0,0,86,555,1,0,0,0,88,
  	560,1,0,0,0,90,568,1,0,0,0,92,570,1,0,0,0,94,579,1,0,0,0,96,605,1,0,0,
  	0,98,655,1,0,0,0,100,666,1,0,0,0,102,668,1,0,0,0,104,676,1,0,0,0,106,
  	687,1,0,0,0,108,702,1,0,0,0,110,709,1,0,0,0,112,714,1,0,0,0,114,718,1,
  	0,0,0,116,723,1,0,0,0,118,738,1,0,0,0,120,740,1,0,0,0,122,748,1,0,0,0,
  	124,763,1,0,0,0,126,811,1,0,0,0,128,859,1,0,0,0,130,869,1,0,0,0,132,872,
  	1,0,0,0,134,885,1,0,0,0,136,889,1,0,0,0,138,899,1,0,0,0,140,901,1,0,0,
  	0,142,950,1,0,0,0,144,963,1,0,0,0,146,965,1,0,0,0,148,972,1,0,0,0,150,
  	978,1,0,0,0,152,981,1,0,0,0,154,1000,1,0,0,0,156,1022,1,0,0,0,158,1028,
  	1,0,0,0,160,1038,1,0,0,0,162,1042,1,0,0,0,164,1059,1,0,0,0,166,1064,1,
  	0,0,0,168,1069,1,0,0,0,170,1076,1,0,0,0,172,1079,1,0,0,0,174,1088,1,0,
  	0,0,176,210,5,110,0,0,177,210,5,111,0,0,178,180,5,113,0,0,179,178,1,0,
  	0,0,180,181,1,0,0,0,181,179,1,0,0,0,181,182,1,0,0,0,182,210,1,0,0,0,183,
  	184,5,64,0,0,184,185,3,44,22,0,185,186,5,65,0,0,186,210,1,0,0,0,187,210,
  	3,2,1,0,188,190,5,1,0,0,189,188,1,0,0,0,189,190,1,0,0,0,190,191,1,0,0,
  	0,191,192,5,64,0,0,192,193,3,146,73,0,193,194,5,65,0,0,194,210,1,0,0,
  	0,195,196,5,2,0,0,196,197,5,64,0,0,197,198,3,12,6,0,198,199,5,93,0,0,
  	199,200,3,122,61,0,200,201,5,65,0,0,201,210,1,0,0,0,202,203,5,3,0,0,203,
  	204,5,64,0,0,204,205,3,122,61,0,205,206,5,93,0,0,206,207,3,12,6,0,207,
  	208,5,65,0,0,208,210,1,0,0,0,209,176,1,0,0,0,209,177,1,0,0,0,209,179,
  	1,0,0,0,209,183,1,0,0,0,209,187,1,0,0,0,209,189,1,0,0,0,209,195,1,0,0,
  	0,209,202,1,0,0,0,210,1,1,0,0,0,211,212,5,59,0,0,212,213,5,64,0,0,213,
  	214,3,40,20,0,214,215,5,93,0,0,215,216,3,4,2,0,216,217,5,65,0,0,217,3,
  	1,0,0,0,218,223,3,6,3,0,219,220,5,93,0,0,220,222,3,6,3,0,221,219,1,0,
  	0,0,222,225,1,0,0,0,223,221,1,0,0,0,223,224,1,0,0,0,224,5,1,0,0,0,225,
  	223,1,0,0,0,226,229,3,122,61,0,227,229,5,26,0,0,228,226,1,0,0,0,228,227,
  	1,0,0,0,229,230,1,0,0,0,230,231,5,91,0,0,231,232,3,40,20,0,232,7,1,0,
  	0,0,233,248,3,0,0,0,234,236,5,1,0,0,235,234,1,0,0,0,235,236,1,0,0,0,236,
  	237,1,0,0,0,237,238,5,64,0,0,238,239,3,122,61,0,239,240,5,65,0,0,240,
  	241,5,68,0,0,241,243,3,132,66,0,242,244,5,93,0,0,243,242,1,0,0,0,243,
  	244,1,0,0,0,244,245,1,0,0,0,245,246,5,69,0,0,246,248,1,0,0,0,247,233,
  	1,0,0,0,247,235,1,0,0,0,248,263,1,0,0,0,249,250,5,66,0,0,250,251,3,44,
  	22,0,251,252,5,67,0,0,252,262,1,0,0,0,253,255,5,64,0,0,254,256,3,10,5,
  	0,255,254,1,0,0,0,255,256,1,0,0,0,256,257,1,0,0,0,257,262,5,65,0,0,258,
  	259,7,0,0,0,259,262,5,110,0,0,260,262,7,1,0,0,261,249,1,0,0,0,261,253,
  	1,0,0,0,261,258,1,0,0,0,261,260,1,0,0,0,262,265,1,0,0,0,263,261,1,0,0,
  	0,263,264,1,0,0,0,264,9,1,0,0,0,265,263,1,0,0,0,266,271,3,40,20,0,267,
  	268,5,93,0,0,268,270,3,40,20,0,269,267,1,0,0,0,270,273,1,0,0,0,271,269,
  	1,0,0,0,271,272,1,0,0,0,272,11,1,0,0,0,273,271,1,0,0,0,274,276,7,2,0,
  	0,275,274,1,0,0,0,276,279,1,0,0,0,277,275,1,0,0,0,277,278,1,0,0,0,278,
  	291,1,0,0,0,279,277,1,0,0,0,280,292,3,8,4,0,281,282,3,14,7,0,282,283,
  	3,16,8,0,283,292,1,0,0,0,284,285,7,3,0,0,285,286,5,64,0,0,286,287,3,122,
  	61,0,287,288,5,65,0,0,288,292,1,0,0,0,289,290,5,85,0,0,290,292,5,110,
  	0,0,291,280,1,0,0,0,291,281,1,0,0,0,291,284,1,0,0,0,291,289,1,0,0,0,292,
  	13,1,0,0,0,293,294,7,4,0,0,294,15,1,0,0,0,295,297,5,1,0,0,296,295,1,0,
  	0,0,296,297,1,0,0,0,297,298,1,0,0,0,298,299,5,64,0,0,299,300,3,122,61,
  	0,300,301,5,65,0,0,301,302,3,16,8,0,302,306,1,0,0,0,303,306,3,12,6,0,
  	304,306,5,112,0,0,305,296,1,0,0,0,305,303,1,0,0,0,305,304,1,0,0,0,306,
  	17,1,0,0,0,307,312,3,16,8,0,308,309,7,5,0,0,309,311,3,16,8,0,310,308,
  	1,0,0,0,311,314,1,0,0,0,312,310,1,0,0,0,312,313,1,0,0,0,313,19,1,0,0,
  	0,314,312,1,0,0,0,315,320,3,18,9,0,316,317,7,6,0,0,317,319,3,18,9,0,318,
  	316,1,0,0,0,319,322,1,0,0,0,320,318,1,0,0,0,320,321,1,0,0,0,321,21,1,
  	0,0,0,322,320,1,0,0,0,323,328,3,20,10,0,324,325,7,7,0,0,325,327,3,20,
  	10,0,326,324,1,0,0,0,327,330,1,0,0,0,328,326,1,0,0,0,328,329,1,0,0,0,
  	329,23,1,0,0,0,330,328,1,0,0,0,331,336,3,22,11,0,332,333,7,8,0,0,333,
  	335,3,22,11,0,334,332,1,0,0,0,335,338,1,0,0,0,336,334,1,0,0,0,336,337,
  	1,0,0,0,337,25,1,0,0,0,338,336,1,0,0,0,339,344,3,24,12,0,340,341,7,9,
  	0,0,341,343,3,24,12,0,342,340,1,0,0,0,343,346,1,0,0,0,344,342,1,0,0,0,
  	344,345,1,0,0,0,345,27,1,0,0,0,346,344,1,0,0,0,347,352,3,26,13,0,348,
  	349,5,83,0,0,349,351,3,26,13,0,350,348,1,0,0,0,351,354,1,0,0,0,352,350,
  	1,0,0,0,352,353,1,0,0,0,353,29,1,0,0,0,354,352,1,0,0,0,355,360,3,28,14,
  	0,356,357,5,87,0,0,357,359,3,28,14,0,358,356,1,0,0,0,359,362,1,0,0,0,
  	360,358,1,0,0,0,360,361,1,0,0,0,361,31,1,0,0,0,362,360,1,0,0,0,363,368,
  	3,30,15,0,364,365,5,84,0,0,365,367,3,30,15,0,366,364,1,0,0,0,367,370,
  	1,0,0,0,368,366,1,0,0,0,368,369,1,0,0,0,369,33,1,0,0,0,370,368,1,0,0,
  	0,371,376,3,32,16,0,372,373,5,85,0,0,373,375,3,32,16,0,374,372,1,0,0,
  	0,375,378,1,0,0,0,376,374,1,0,0,0,376,377,1,0,0,0,377,35,1,0,0,0,378,
  	376,1,0,0,0,379,384,3,34,17,0,380,381,5,86,0,0,381,383,3,34,17,0,382,
  	380,1,0,0,0,383,386,1,0,0,0,384,382,1,0,0,0,384,385,1,0,0,0,385,37,1,
  	0,0,0,386,384,1,0,0,0,387,393,3,36,18,0,388,389,5,90,0,0,389,390,3,44,
  	22,0,390,391,5,91,0,0,391,392,3,38,19,0,392,394,1,0,0,0,393,388,1,0,0,
  	0,393,394,1,0,0,0,394,39,1,0,0,0,395,402,3,38,19,0,396,397,3,12,6,0,397,
  	398,3,42,21,0,398,399,3,40,20,0,399,402,1,0,0,0,400,402,5,112,0,0,401,
  	395,1,0,0,0,401,396,1,0,0,0,401,400,1,0,0,0,402,41,1,0,0,0,403,404,7,
  	10,0,0,404,43,1,0,0,0,405,410,3,40,20,0,406,407,5,93,0,0,407,409,3,40,
  	20,0,408,406,1,0,0,0,409,412,1,0,0,0,410,408,1,0,0,0,410,411,1,0,0,0,
  	411,45,1,0,0,0,412,410,1,0,0,0,413,414,3,38,19,0,414,47,1,0,0,0,415,417,
  	3,50,25,0,416,418,3,56,28,0,417,416,1,0,0,0,417,418,1,0,0,0,418,419,1,
  	0,0,0,419,420,5,92,0,0,420,423,1,0,0,0,421,423,3,140,70,0,422,415,1,0,
  	0,0,422,421,1,0,0,0,423,49,1,0,0,0,424,426,3,54,27,0,425,424,1,0,0,0,
  	426,427,1,0,0,0,427,425,1,0,0,0,427,428,1,0,0,0,428,51,1,0,0,0,429,431,
  	3,54,27,0,430,429,1,0,0,0,431,432,1,0,0,0,432,430,1,0,0,0,432,433,1,0,
  	0,0,433,53,1,0,0,0,434,440,3,60,30,0,435,440,3,62,31,0,436,440,3,88,44,
  	0,437,440,3,90,45,0,438,440,3,92,46,0,439,434,1,0,0,0,439,435,1,0,0,0,
  	439,436,1,0,0,0,439,437,1,0,0,0,439,438,1,0,0,0,440,55,1,0,0,0,441,446,
  	3,58,29,0,442,443,5,93,0,0,443,445,3,58,29,0,444,442,1,0,0,0,445,448,
  	1,0,0,0,446,444,1,0,0,0,446,447,1,0,0,0,447,57,1,0,0,0,448,446,1,0,0,
  	0,449,452,3,94,47,0,450,451,5,94,0,0,451,453,3,130,65,0,452,450,1,0,0,
  	0,452,453,1,0,0,0,453,59,1,0,0,0,454,455,7,11,0,0,455,61,1,0,0,0,456,
  	471,7,12,0,0,457,458,5,1,0,0,458,459,5,64,0,0,459,460,7,13,0,0,460,471,
  	5,65,0,0,461,471,3,86,43,0,462,471,3,64,32,0,463,471,3,78,39,0,464,471,
  	3,128,64,0,465,466,5,7,0,0,466,467,5,64,0,0,467,468,3,46,23,0,468,469,
  	5,65,0,0,469,471,1,0,0,0,470,456,1,0,0,0,470,457,1,0,0,0,470,461,1,0,
  	0,0,470,462,1,0,0,0,470,463,1,0,0,0,470,464,1,0,0,0,470,465,1,0,0,0,471,
  	63,1,0,0,0,472,474,3,66,33,0,473,475,5,110,0,0,474,473,1,0,0,0,474,475,
  	1,0,0,0,475,476,1,0,0,0,476,477,5,68,0,0,477,478,3,68,34,0,478,479,5,
  	69,0,0,479,484,1,0,0,0,480,481,3,66,33,0,481,482,5,110,0,0,482,484,1,
  	0,0,0,483,472,1,0,0,0,483,480,1,0,0,0,484,65,1,0,0,0,485,486,7,14,0,0,
  	486,67,1,0,0,0,487,489,3,70,35,0,488,487,1,0,0,0,489,490,1,0,0,0,490,
  	488,1,0,0,0,490,491,1,0,0,0,491,69,1,0,0,0,492,493,3,72,36,0,493,494,
  	3,74,37,0,494,495,5,92,0,0,495,501,1,0,0,0,496,497,3,72,36,0,497,498,
  	5,92,0,0,498,501,1,0,0,0,499,501,3,140,70,0,500,492,1,0,0,0,500,496,1,
  	0,0,0,500,499,1,0,0,0,501,71,1,0,0,0,502,505,3,62,31,0,503,505,3,88,44,
  	0,504,502,1,0,0,0,504,503,1,0,0,0,505,507,1,0,0,0,506,508,3,72,36,0,507,
  	506,1,0,0,0,507,508,1,0,0,0,508,73,1,0,0,0,509,514,3,76,38,0,510,511,
  	5,93,0,0,511,513,3,76,38,0,512,510,1,0,0,0,513,516,1,0,0,0,514,512,1,
  	0,0,0,514,515,1,0,0,0,515,75,1,0,0,0,516,514,1,0,0,0,517,524,3,94,47,
  	0,518,520,3,94,47,0,519,518,1,0,0,0,519,520,1,0,0,0,520,521,1,0,0,0,521,
  	522,5,91,0,0,522,524,3,46,23,0,523,517,1,0,0,0,523,519,1,0,0,0,524,77,
  	1,0,0,0,525,527,5,30,0,0,526,528,5,110,0,0,527,526,1,0,0,0,527,528,1,
  	0,0,0,528,529,1,0,0,0,529,530,5,68,0,0,530,532,3,80,40,0,531,533,5,93,
  	0,0,532,531,1,0,0,0,532,533,1,0,0,0,533,534,1,0,0,0,534,535,5,69,0,0,
  	535,539,1,0,0,0,536,537,5,30,0,0,537,539,5,110,0,0,538,525,1,0,0,0,538,
  	536,1,0,0,0,539,79,1,0,0,0,540,545,3,82,41,0,541,542,5,93,0,0,542,544,
  	3,82,41,0,543,541,1,0,0,0,544,547,1,0,0,0,545,543,1,0,0,0,545,546,1,0,
  	0,0,546,81,1,0,0,0,547,545,1,0,0,0,548,551,3,84,42,0,549,550,5,94,0,0,
  	550,552,3,46,23,0,551,549,1,0,0,0,551,552,1,0,0,0,552,83,1,0,0,0,553,
  	554,5,110,0,0,554,85,1,0,0,0,555,556,5,56,0,0,556,557,5,64,0,0,557,558,
  	3,122,61,0,558,559,5,65,0,0,559,87,1,0,0,0,560,561,7,15,0,0,561,89,1,
  	0,0,0,562,569,7,16,0,0,563,569,3,102,51,0,564,565,5,10,0,0,565,566,5,
  	64,0,0,566,567,5,110,0,0,567,569,5,65,0,0,568,562,1,0,0,0,568,563,1,0,
  	0,0,568,564,1,0,0,0,569,91,1,0,0,0,570,571,5,54,0,0,571,574,5,64,0,0,
  	572,575,3,122,61,0,573,575,3,46,23,0,574,572,1,0,0,0,574,573,1,0,0,0,
  	575,576,1,0,0,0,576,577,5,65,0,0,577,93,1,0,0,0,578,580,3,110,55,0,579,
  	578,1,0,0,0,579,580,1,0,0,0,580,581,1,0,0,0,581,585,3,96,48,0,582,584,
  	3,100,50,0,583,582,1,0,0,0,584,587,1,0,0,0,585,583,1,0,0,0,585,586,1,
  	0,0,0,586,95,1,0,0,0,587,585,1,0,0,0,588,589,6,48,-1,0,589,606,5,110,
  	0,0,590,591,5,64,0,0,591,592,3,94,47,0,592,593,5,65,0,0,593,606,1,0,0,
  	0,594,595,5,110,0,0,595,596,5,91,0,0,596,606,5,112,0,0,597,598,3,98,49,
  	0,598,599,5,110,0,0,599,606,1,0,0,0,600,601,5,64,0,0,601,602,3,98,49,
  	0,602,603,3,94,47,0,603,604,5,65,0,0,604,606,1,0,0,0,605,588,1,0,0,0,
  	605,590,1,0,0,0,605,594,1,0,0,0,605,597,1,0,0,0,605,600,1,0,0,0,606,652,
  	1,0,0,0,607,608,10,9,0,0,608,610,5,66,0,0,609,611,3,112,56,0,610,609,
  	1,0,0,0,610,611,1,0,0,0,611,613,1,0,0,0,612,614,3,40,20,0,613,612,1,0,
  	0,0,613,614,1,0,0,0,614,615,1,0,0,0,615,651,5,67,0,0,616,617,10,8,0,0,
  	617,618,5,66,0,0,618,620,5,45,0,0,619,621,3,112,56,0,620,619,1,0,0,0,
  	620,621,1,0,0,0,621,622,1,0,0,0,622,623,3,40,20,0,623,624,5,67,0,0,624,
  	651,1,0,0,0,625,626,10,7,0,0,626,627,5,66,0,0,627,628,3,112,56,0,628,
  	629,5,45,0,0,629,630,3,40,20,0,630,631,5,67,0,0,631,651,1,0,0,0,632,633,
  	10,6,0,0,633,635,5,66,0,0,634,636,3,112,56,0,635,634,1,0,0,0,635,636,
  	1,0,0,0,636,637,1,0,0,0,637,638,5,80,0,0,638,651,5,67,0,0,639,640,10,
  	5,0,0,640,641,5,64,0,0,641,642,3,114,57,0,642,643,5,65,0,0,643,651,1,
  	0,0,0,644,645,10,4,0,0,645,647,5,64,0,0,646,648,3,120,60,0,647,646,1,
  	0,0,0,647,648,1,0,0,0,648,649,1,0,0,0,649,651,5,65,0,0,650,607,1,0,0,
  	0,650,616,1,0,0,0,650,625,1,0,0,0,650,632,1,0,0,0,650,639,1,0,0,0,650,
  	644,1,0,0,0,651,654,1,0,0,0,652,650,1,0,0,0,652,653,1,0,0,0,653,97,1,
  	0,0,0,654,652,1,0,0,0,655,656,7,17,0,0,656,99,1,0,0,0,657,658,5,16,0,
  	0,658,660,5,64,0,0,659,661,5,113,0,0,660,659,1,0,0,0,661,662,1,0,0,0,
  	662,660,1,0,0,0,662,663,1,0,0,0,663,664,1,0,0,0,664,667,5,65,0,0,665,
  	667,3,102,51,0,666,657,1,0,0,0,666,665,1,0,0,0,667,101,1,0,0,0,668,669,
  	5,17,0,0,669,670,5,64,0,0,670,671,5,64,0,0,671,672,3,104,52,0,672,673,
  	5,65,0,0,673,674,5,65,0,0,674,103,1,0,0,0,675,677,3,106,53,0,676,675,
  	1,0,0,0,676,677,1,0,0,0,677,684,1,0,0,0,678,680,5,93,0,0,679,681,3,106,
  	53,0,680,679,1,0,0,0,680,681,1,0,0,0,681,683,1,0,0,0,682,678,1,0,0,0,
  	683,686,1,0,0,0,684,682,1,0,0,0,684,685,1,0,0,0,685,105,1,0,0,0,686,684,
  	1,0,0,0,687,693,8,18,0,0,688,690,5,64,0,0,689,691,3,10,5,0,690,689,1,
  	0,0,0,690,691,1,0,0,0,691,692,1,0,0,0,692,694,5,65,0,0,693,688,1,0,0,
  	0,693,694,1,0,0,0,694,107,1,0,0,0,695,701,8,19,0,0,696,697,5,64,0,0,697,
  	698,3,108,54,0,698,699,5,65,0,0,699,701,1,0,0,0,700,695,1,0,0,0,700,696,
  	1,0,0,0,701,704,1,0,0,0,702,700,1,0,0,0,702,703,1,0,0,0,703,109,1,0,0,
  	0,704,702,1,0,0,0,705,707,7,20,0,0,706,708,3,112,56,0,707,706,1,0,0,0,
  	707,708,1,0,0,0,708,710,1,0,0,0,709,705,1,0,0,0,710,711,1,0,0,0,711,709,
  	1,0,0,0,711,712,1,0,0,0,712,111,1,0,0,0,713,715,3,88,44,0,714,713,1,0,
  	0,0,715,716,1,0,0,0,716,714,1,0,0,0,716,717,1,0,0,0,717,113,1,0,0,0,718,
  	721,3,116,58,0,719,720,5,93,0,0,720,722,5,109,0,0,721,719,1,0,0,0,721,
  	722,1,0,0,0,722,115,1,0,0,0,723,728,3,118,59,0,724,725,5,93,0,0,725,727,
  	3,118,59,0,726,724,1,0,0,0,727,730,1,0,0,0,728,726,1,0,0,0,728,729,1,
  	0,0,0,729,117,1,0,0,0,730,728,1,0,0,0,731,732,3,50,25,0,732,733,3,94,
  	47,0,733,739,1,0,0,0,734,736,3,52,26,0,735,737,3,124,62,0,736,735,1,0,
  	0,0,736,737,1,0,0,0,737,739,1,0,0,0,738,731,1,0,0,0,738,734,1,0,0,0,739,
  	119,1,0,0,0,740,745,5,110,0,0,741,742,5,93,0,0,742,744,5,110,0,0,743,
  	741,1,0,0,0,744,747,1,0,0,0,745,743,1,0,0,0,745,746,1,0,0,0,746,121,1,
  	0,0,0,747,745,1,0,0,0,748,750,3,72,36,0,749,751,3,124,62,0,750,749,1,
  	0,0,0,750,751,1,0,0,0,751,123,1,0,0,0,752,764,3,110,55,0,753,755,3,110,
  	55,0,754,753,1,0,0,0,754,755,1,0,0,0,755,756,1,0,0,0,756,760,3,126,63,
  	0,757,759,3,100,50,0,758,757,1,0,0,0,759,762,1,0,0,0,760,758,1,0,0,0,
  	760,761,1,0,0,0,761,764,1,0,0,0,762,760,1,0,0,0,763,752,1,0,0,0,763,754,
  	1,0,0,0,764,125,1,0,0,0,765,766,6,63,-1,0,766,767,5,64,0,0,767,768,3,
  	124,62,0,768,772,5,65,0,0,769,771,3,100,50,0,770,769,1,0,0,0,771,774,
  	1,0,0,0,772,770,1,0,0,0,772,773,1,0,0,0,773,812,1,0,0,0,774,772,1,0,0,
  	0,775,777,5,66,0,0,776,778,3,112,56,0,777,776,1,0,0,0,777,778,1,0,0,0,
  	778,780,1,0,0,0,779,781,3,40,20,0,780,779,1,0,0,0,780,781,1,0,0,0,781,
  	782,1,0,0,0,782,812,5,67,0,0,783,784,5,66,0,0,784,786,5,45,0,0,785,787,
  	3,112,56,0,786,785,1,0,0,0,786,787,1,0,0,0,787,788,1,0,0,0,788,789,3,
  	40,20,0,789,790,5,67,0,0,790,812,1,0,0,0,791,792,5,66,0,0,792,793,3,112,
  	56,0,793,794,5,45,0,0,794,795,3,40,20,0,795,796,5,67,0,0,796,812,1,0,
  	0,0,797,798,5,66,0,0,798,799,5,80,0,0,799,812,5,67,0,0,800,802,5,64,0,
  	0,801,803,3,114,57,0,802,801,1,0,0,0,802,803,1,0,0,0,803,804,1,0,0,0,
  	804,808,5,65,0,0,805,807,3,100,50,0,806,805,1,0,0,0,807,810,1,0,0,0,808,
  	806,1,0,0,0,808,809,1,0,0,0,809,812,1,0,0,0,810,808,1,0,0,0,811,765,1,
  	0,0,0,811,775,1,0,0,0,811,783,1,0,0,0,811,791,1,0,0,0,811,797,1,0,0,0,
  	811,800,1,0,0,0,812,856,1,0,0,0,813,814,10,5,0,0,814,816,5,66,0,0,815,
  	817,3,112,56,0,816,815,1,0,0,0,816,817,1,0,0,0,817,819,1,0,0,0,818,820,
  	3,40,20,0,819,818,1,0,0,0,819,820,1,0,0,0,820,821,1,0,0,0,821,855,5,67,
  	0,0,822,823,10,4,0,0,823,824,5,66,0,0,824,826,5,45,0,0,825,827,3,112,
  	56,0,826,825,1,0,0,0,826,827,1,0,0,0,827,828,1,0,0,0,828,829,3,40,20,
  	0,829,830,5,67,0,0,830,855,1,0,0,0,831,832,10,3,0,0,832,833,5,66,0,0,
  	833,834,3,112,56,0,834,835,5,45,0,0,835,836,3,40,20,0,836,837,5,67,0,
  	0,837,855,1,0,0,0,838,839,10,2,0,0,839,840,5,66,0,0,840,841,5,80,0,0,
  	841,855,5,67,0,0,842,843,10,1,0,0,843,845,5,64,0,0,844,846,3,114,57,0,
  	845,844,1,0,0,0,845,846,1,0,0,0,846,847,1,0,0,0,847,851,5,65,0,0,848,
  	850,3,100,50,0,849,848,1,0,0,0,850,853,1,0,0,0,851,849,1,0,0,0,851,852,
  	1,0,0,0,852,855,1,0,0,0,853,851,1,0,0,0,854,813,1,0,0,0,854,822,1,0,0,
  	0,854,831,1,0,0,0,854,838,1,0,0,0,854,842,1,0,0,0,855,858,1,0,0,0,856,
  	854,1,0,0,0,856,857,1,0,0,0,857,127,1,0,0,0,858,856,1,0,0,0,859,860,5,
  	110,0,0,860,129,1,0,0,0,861,870,3,40,20,0,862,863,5,68,0,0,863,865,3,
  	132,66,0,864,866,5,93,0,0,865,864,1,0,0,0,865,866,1,0,0,0,866,867,1,0,
  	0,0,867,868,5,69,0,0,868,870,1,0,0,0,869,861,1,0,0,0,869,862,1,0,0,0,
  	870,131,1,0,0,0,871,873,3,134,67,0,872,871,1,0,0,0,872,873,1,0,0,0,873,
  	874,1,0,0,0,874,882,3,130,65,0,875,877,5,93,0,0,876,878,3,134,67,0,877,
  	876,1,0,0,0,877,878,1,0,0,0,878,879,1,0,0,0,879,881,3,130,65,0,880,875,
  	1,0,0,0,881,884,1,0,0,0,882,880,1,0,0,0,882,883,1,0,0,0,883,133,1,0,0,
  	0,884,882,1,0,0,0,885,886,3,136,68,0,886,887,5,94,0,0,887,135,1,0,0,0,
  	888,890,3,138,69,0,889,888,1,0,0,0,890,891,1,0,0,0,891,889,1,0,0,0,891,
  	892,1,0,0,0,892,137,1,0,0,0,893,894,5,66,0,0,894,895,3,46,23,0,895,896,
  	5,67,0,0,896,900,1,0,0,0,897,898,5,108,0,0,898,900,5,110,0,0,899,893,
  	1,0,0,0,899,897,1,0,0,0,900,139,1,0,0,0,901,902,5,62,0,0,902,903,5,64,
  	0,0,903,904,3,46,23,0,904,906,5,93,0,0,905,907,5,113,0,0,906,905,1,0,
  	0,0,907,908,1,0,0,0,908,906,1,0,0,0,908,909,1,0,0,0,909,910,1,0,0,0,910,
  	911,5,65,0,0,911,912,5,92,0,0,912,141,1,0,0,0,913,951,3,144,72,0,914,
  	951,3,146,73,0,915,951,3,152,76,0,916,951,3,154,77,0,917,951,3,156,78,
  	0,918,951,3,164,82,0,919,920,7,21,0,0,920,921,7,22,0,0,921,930,5,64,0,
  	0,922,927,3,36,18,0,923,924,5,93,0,0,924,926,3,36,18,0,925,923,1,0,0,
  	0,926,929,1,0,0,0,927,925,1,0,0,0,927,928,1,0,0,0,928,931,1,0,0,0,929,
  	927,1,0,0,0,930,922,1,0,0,0,930,931,1,0,0,0,931,945,1,0,0,0,932,941,5,
  	91,0,0,933,938,3,36,18,0,934,935,5,93,0,0,935,937,3,36,18,0,936,934,1,
  	0,0,0,937,940,1,0,0,0,938,936,1,0,0,0,938,939,1,0,0,0,939,942,1,0,0,0,
  	940,938,1,0,0,0,941,933,1,0,0,0,941,942,1,0,0,0,942,944,1,0,0,0,943,932,
  	1,0,0,0,944,947,1,0,0,0,945,943,1,0,0,0,945,946,1,0,0,0,946,948,1,0,0,
  	0,947,945,1,0,0,0,948,949,5,65,0,0,949,951,5,92,0,0,950,913,1,0,0,0,950,
  	914,1,0,0,0,950,915,1,0,0,0,950,916,1,0,0,0,950,917,1,0,0,0,950,918,1,
  	0,0,0,950,919,1,0,0,0,951,143,1,0,0,0,952,953,5,110,0,0,953,954,5,91,
  	0,0,954,964,3,142,71,0,955,956,5,22,0,0,956,957,3,46,23,0,957,958,5,91,
  	0,0,958,959,3,142,71,0,959,964,1,0,0,0,960,961,5,26,0,0,961,962,5,91,
  	0,0,962,964,3,142,71,0,963,952,1,0,0,0,963,955,1,0,0,0,963,960,1,0,0,
  	0,964,145,1,0,0,0,965,967,5,68,0,0,966,968,3,148,74,0,967,966,1,0,0,0,
  	967,968,1,0,0,0,968,969,1,0,0,0,969,970,5,69,0,0,970,147,1,0,0,0,971,
  	973,3,150,75,0,972,971,1,0,0,0,973,974,1,0,0,0,974,972,1,0,0,0,974,975,
  	1,0,0,0,975,149,1,0,0,0,976,979,3,142,71,0,977,979,3,48,24,0,978,976,
  	1,0,0,0,978,977,1,0,0,0,979,151,1,0,0,0,980,982,3,44,22,0,981,980,1,0,
  	0,0,981,982,1,0,0,0,982,983,1,0,0,0,983,984,5,92,0,0,984,153,1,0,0,0,
  	985,986,5,35,0,0,986,987,5,64,0,0,987,988,3,44,22,0,988,989,5,65,0,0,
  	989,992,3,142,71,0,990,991,5,29,0,0,991,993,3,142,71,0,992,990,1,0,0,
  	0,992,993,1,0,0,0,993,1001,1,0,0,0,994,995,5,47,0,0,995,996,5,64,0,0,
  	996,997,3,44,22,0,997,998,5,65,0,0,998,999,3,142,71,0,999,1001,1,0,0,
  	0,1000,985,1,0,0,0,1000,994,1,0,0,0,1001,155,1,0,0,0,1002,1003,5,53,0,
  	0,1003,1004,5,64,0,0,1004,1005,3,44,22,0,1005,1006,5,65,0,0,1006,1007,
  	3,142,71,0,1007,1023,1,0,0,0,1008,1009,5,27,0,0,1009,1010,3,142,71,0,
  	1010,1011,5,53,0,0,1011,1012,5,64,0,0,1012,1013,3,44,22,0,1013,1014,5,
  	65,0,0,1014,1015,5,92,0,0,1015,1023,1,0,0,0,1016,1017,5,33,0,0,1017,1018,
  	5,64,0,0,1018,1019,3,158,79,0,1019,1020,5,65,0,0,1020,1021,3,142,71,0,
  	1021,1023,1,0,0,0,1022,1002,1,0,0,0,1022,1008,1,0,0,0,1022,1016,1,0,0,
  	0,1023,157,1,0,0,0,1024,1029,3,160,80,0,1025,1027,3,44,22,0,1026,1025,
  	1,0,0,0,1026,1027,1,0,0,0,1027,1029,1,0,0,0,1028,1024,1,0,0,0,1028,1026,
  	1,0,0,0,1029,1030,1,0,0,0,1030,1032,5,92,0,0,1031,1033,3,162,81,0,1032,
  	1031,1,0,0,0,1032,1033,1,0,0,0,1033,1034,1,0,0,0,1034,1036,5,92,0,0,1035,
  	1037,3,162,81,0,1036,1035,1,0,0,0,1036,1037,1,0,0,0,1037,159,1,0,0,0,
  	1038,1040,3,50,25,0,1039,1041,3,56,28,0,1040,1039,1,0,0,0,1040,1041,1,
  	0,0,0,1041,161,1,0,0,0,1042,1047,3,40,20,0,1043,1044,5,93,0,0,1044,1046,
  	3,40,20,0,1045,1043,1,0,0,0,1046,1049,1,0,0,0,1047,1045,1,0,0,0,1047,
  	1048,1,0,0,0,1048,163,1,0,0,0,1049,1047,1,0,0,0,1050,1051,5,34,0,0,1051,
  	1060,5,110,0,0,1052,1060,7,23,0,0,1053,1055,5,41,0,0,1054,1056,3,44,22,
  	0,1055,1054,1,0,0,0,1055,1056,1,0,0,0,1056,1060,1,0,0,0,1057,1058,5,34,
  	0,0,1058,1060,3,12,6,0,1059,1050,1,0,0,0,1059,1052,1,0,0,0,1059,1053,
  	1,0,0,0,1059,1057,1,0,0,0,1060,1061,1,0,0,0,1061,1062,5,92,0,0,1062,165,
  	1,0,0,0,1063,1065,3,168,84,0,1064,1063,1,0,0,0,1064,1065,1,0,0,0,1065,
  	1066,1,0,0,0,1066,1067,5,0,0,1,1067,167,1,0,0,0,1068,1070,3,170,85,0,
  	1069,1068,1,0,0,0,1070,1071,1,0,0,0,1071,1069,1,0,0,0,1071,1072,1,0,0,
  	0,1072,169,1,0,0,0,1073,1077,3,172,86,0,1074,1077,3,48,24,0,1075,1077,
  	5,92,0,0,1076,1073,1,0,0,0,1076,1074,1,0,0,0,1076,1075,1,0,0,0,1077,171,
  	1,0,0,0,1078,1080,3,50,25,0,1079,1078,1,0,0,0,1079,1080,1,0,0,0,1080,
  	1081,1,0,0,0,1081,1083,3,94,47,0,1082,1084,3,174,87,0,1083,1082,1,0,0,
  	0,1083,1084,1,0,0,0,1084,1085,1,0,0,0,1085,1086,3,146,73,0,1086,173,1,
  	0,0,0,1087,1089,3,48,24,0,1088,1087,1,0,0,0,1089,1090,1,0,0,0,1090,1088,
  	1,0,0,0,1090,1091,1,0,0,0,1091,175,1,0,0,0,134,181,189,209,223,228,235,
  	243,247,255,261,263,271,277,291,296,305,312,320,328,336,344,352,360,368,
  	376,384,393,401,410,417,422,427,432,439,446,452,470,474,483,490,500,504,
  	507,514,519,523,527,532,538,545,551,568,574,579,585,605,610,613,620,635,
  	647,650,652,662,666,676,680,684,690,693,700,702,707,711,716,721,728,736,
  	738,745,750,754,760,763,772,777,780,786,802,808,811,816,819,826,845,851,
  	854,856,865,869,872,877,882,891,899,908,927,930,938,941,945,950,963,967,
  	974,978,981,992,1000,1022,1026,1028,1032,1036,1040,1047,1055,1059,1064,
  	1071,1076,1079,1083,1090
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  myParserStaticData = staticData.release();
}

}

myParser::myParser(TokenStream *input) : myParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

myParser::myParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  myParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *myParserStaticData->atn, myParserStaticData->decisionToDFA, myParserStaticData->sharedContextCache, options);
}

myParser::~myParser() {
  delete _interpreter;
}

const atn::ATN& myParser::getATN() const {
  return *myParserStaticData->atn;
}

std::string myParser::getGrammarFileName() const {
  return "my.g4";
}

const std::vector<std::string>& myParser::getRuleNames() const {
  return myParserStaticData->ruleNames;
}

const dfa::Vocabulary& myParser::getVocabulary() const {
  return myParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView myParser::getSerializedATN() const {
  return myParserStaticData->serializedATN;
}


//----------------- PrimaryExpressionContext ------------------------------------------------------------------

myParser::PrimaryExpressionContext::PrimaryExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* myParser::PrimaryExpressionContext::Identifier() {
  return getToken(myParser::Identifier, 0);
}

tree::TerminalNode* myParser::PrimaryExpressionContext::Constant() {
  return getToken(myParser::Constant, 0);
}

std::vector<tree::TerminalNode *> myParser::PrimaryExpressionContext::StringLiteral() {
  return getTokens(myParser::StringLiteral);
}

tree::TerminalNode* myParser::PrimaryExpressionContext::StringLiteral(size_t i) {
  return getToken(myParser::StringLiteral, i);
}

tree::TerminalNode* myParser::PrimaryExpressionContext::LeftParen() {
  return getToken(myParser::LeftParen, 0);
}

myParser::ExpressionContext* myParser::PrimaryExpressionContext::expression() {
  return getRuleContext<myParser::ExpressionContext>(0);
}

tree::TerminalNode* myParser::PrimaryExpressionContext::RightParen() {
  return getToken(myParser::RightParen, 0);
}

myParser::GenericSelectionContext* myParser::PrimaryExpressionContext::genericSelection() {
  return getRuleContext<myParser::GenericSelectionContext>(0);
}

myParser::CompoundStatementContext* myParser::PrimaryExpressionContext::compoundStatement() {
  return getRuleContext<myParser::CompoundStatementContext>(0);
}

myParser::UnaryExpressionContext* myParser::PrimaryExpressionContext::unaryExpression() {
  return getRuleContext<myParser::UnaryExpressionContext>(0);
}

tree::TerminalNode* myParser::PrimaryExpressionContext::Comma() {
  return getToken(myParser::Comma, 0);
}

myParser::TypeNameContext* myParser::PrimaryExpressionContext::typeName() {
  return getRuleContext<myParser::TypeNameContext>(0);
}


size_t myParser::PrimaryExpressionContext::getRuleIndex() const {
  return myParser::RulePrimaryExpression;
}

void myParser::PrimaryExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryExpression(this);
}

void myParser::PrimaryExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryExpression(this);
}

myParser::PrimaryExpressionContext* myParser::primaryExpression() {
  PrimaryExpressionContext *_localctx = _tracker.createInstance<PrimaryExpressionContext>(_ctx, getState());
  enterRule(_localctx, 0, myParser::RulePrimaryExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(209);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(176);
      match(myParser::Identifier);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(177);
      match(myParser::Constant);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(179); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(178);
        match(myParser::StringLiteral);
        setState(181); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == myParser::StringLiteral);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(183);
      match(myParser::LeftParen);
      setState(184);
      expression();
      setState(185);
      match(myParser::RightParen);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(187);
      genericSelection();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(189);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == myParser::T__0) {
        setState(188);
        match(myParser::T__0);
      }
      setState(191);
      match(myParser::LeftParen);
      setState(192);
      compoundStatement();
      setState(193);
      match(myParser::RightParen);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(195);
      match(myParser::T__1);
      setState(196);
      match(myParser::LeftParen);
      setState(197);
      unaryExpression();
      setState(198);
      match(myParser::Comma);
      setState(199);
      typeName();
      setState(200);
      match(myParser::RightParen);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(202);
      match(myParser::T__2);
      setState(203);
      match(myParser::LeftParen);
      setState(204);
      typeName();
      setState(205);
      match(myParser::Comma);
      setState(206);
      unaryExpression();
      setState(207);
      match(myParser::RightParen);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GenericSelectionContext ------------------------------------------------------------------

myParser::GenericSelectionContext::GenericSelectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* myParser::GenericSelectionContext::Generic() {
  return getToken(myParser::Generic, 0);
}

tree::TerminalNode* myParser::GenericSelectionContext::LeftParen() {
  return getToken(myParser::LeftParen, 0);
}

myParser::AssignmentExpressionContext* myParser::GenericSelectionContext::assignmentExpression() {
  return getRuleContext<myParser::AssignmentExpressionContext>(0);
}

tree::TerminalNode* myParser::GenericSelectionContext::Comma() {
  return getToken(myParser::Comma, 0);
}

myParser::GenericAssocListContext* myParser::GenericSelectionContext::genericAssocList() {
  return getRuleContext<myParser::GenericAssocListContext>(0);
}

tree::TerminalNode* myParser::GenericSelectionContext::RightParen() {
  return getToken(myParser::RightParen, 0);
}


size_t myParser::GenericSelectionContext::getRuleIndex() const {
  return myParser::RuleGenericSelection;
}

void myParser::GenericSelectionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGenericSelection(this);
}

void myParser::GenericSelectionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGenericSelection(this);
}

myParser::GenericSelectionContext* myParser::genericSelection() {
  GenericSelectionContext *_localctx = _tracker.createInstance<GenericSelectionContext>(_ctx, getState());
  enterRule(_localctx, 2, myParser::RuleGenericSelection);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(211);
    match(myParser::Generic);
    setState(212);
    match(myParser::LeftParen);
    setState(213);
    assignmentExpression();
    setState(214);
    match(myParser::Comma);
    setState(215);
    genericAssocList();
    setState(216);
    match(myParser::RightParen);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GenericAssocListContext ------------------------------------------------------------------

myParser::GenericAssocListContext::GenericAssocListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<myParser::GenericAssociationContext *> myParser::GenericAssocListContext::genericAssociation() {
  return getRuleContexts<myParser::GenericAssociationContext>();
}

myParser::GenericAssociationContext* myParser::GenericAssocListContext::genericAssociation(size_t i) {
  return getRuleContext<myParser::GenericAssociationContext>(i);
}

std::vector<tree::TerminalNode *> myParser::GenericAssocListContext::Comma() {
  return getTokens(myParser::Comma);
}

tree::TerminalNode* myParser::GenericAssocListContext::Comma(size_t i) {
  return getToken(myParser::Comma, i);
}


size_t myParser::GenericAssocListContext::getRuleIndex() const {
  return myParser::RuleGenericAssocList;
}

void myParser::GenericAssocListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGenericAssocList(this);
}

void myParser::GenericAssocListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGenericAssocList(this);
}

myParser::GenericAssocListContext* myParser::genericAssocList() {
  GenericAssocListContext *_localctx = _tracker.createInstance<GenericAssocListContext>(_ctx, getState());
  enterRule(_localctx, 4, myParser::RuleGenericAssocList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(218);
    genericAssociation();
    setState(223);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == myParser::Comma) {
      setState(219);
      match(myParser::Comma);
      setState(220);
      genericAssociation();
      setState(225);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GenericAssociationContext ------------------------------------------------------------------

myParser::GenericAssociationContext::GenericAssociationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* myParser::GenericAssociationContext::Colon() {
  return getToken(myParser::Colon, 0);
}

myParser::AssignmentExpressionContext* myParser::GenericAssociationContext::assignmentExpression() {
  return getRuleContext<myParser::AssignmentExpressionContext>(0);
}

myParser::TypeNameContext* myParser::GenericAssociationContext::typeName() {
  return getRuleContext<myParser::TypeNameContext>(0);
}

tree::TerminalNode* myParser::GenericAssociationContext::Default() {
  return getToken(myParser::Default, 0);
}


size_t myParser::GenericAssociationContext::getRuleIndex() const {
  return myParser::RuleGenericAssociation;
}

void myParser::GenericAssociationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGenericAssociation(this);
}

void myParser::GenericAssociationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGenericAssociation(this);
}

myParser::GenericAssociationContext* myParser::genericAssociation() {
  GenericAssociationContext *_localctx = _tracker.createInstance<GenericAssociationContext>(_ctx, getState());
  enterRule(_localctx, 6, myParser::RuleGenericAssociation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(228);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case myParser::T__0:
      case myParser::T__3:
      case myParser::T__4:
      case myParser::T__5:
      case myParser::T__6:
      case myParser::Char:
      case myParser::Const:
      case myParser::Double:
      case myParser::Enum:
      case myParser::Float:
      case myParser::Int:
      case myParser::Long:
      case myParser::Restrict:
      case myParser::Short:
      case myParser::Signed:
      case myParser::Struct:
      case myParser::Union:
      case myParser::Unsigned:
      case myParser::Void:
      case myParser::Volatile:
      case myParser::Atomic:
      case myParser::Bool:
      case myParser::Complex:
      case myParser::Identifier: {
        setState(226);
        typeName();
        break;
      }

      case myParser::Default: {
        setState(227);
        match(myParser::Default);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(230);
    match(myParser::Colon);
    setState(231);
    assignmentExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PostfixExpressionContext ------------------------------------------------------------------

myParser::PostfixExpressionContext::PostfixExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

myParser::PrimaryExpressionContext* myParser::PostfixExpressionContext::primaryExpression() {
  return getRuleContext<myParser::PrimaryExpressionContext>(0);
}

std::vector<tree::TerminalNode *> myParser::PostfixExpressionContext::LeftParen() {
  return getTokens(myParser::LeftParen);
}

tree::TerminalNode* myParser::PostfixExpressionContext::LeftParen(size_t i) {
  return getToken(myParser::LeftParen, i);
}

myParser::TypeNameContext* myParser::PostfixExpressionContext::typeName() {
  return getRuleContext<myParser::TypeNameContext>(0);
}

std::vector<tree::TerminalNode *> myParser::PostfixExpressionContext::RightParen() {
  return getTokens(myParser::RightParen);
}

tree::TerminalNode* myParser::PostfixExpressionContext::RightParen(size_t i) {
  return getToken(myParser::RightParen, i);
}

tree::TerminalNode* myParser::PostfixExpressionContext::LeftBrace() {
  return getToken(myParser::LeftBrace, 0);
}

myParser::InitializerListContext* myParser::PostfixExpressionContext::initializerList() {
  return getRuleContext<myParser::InitializerListContext>(0);
}

tree::TerminalNode* myParser::PostfixExpressionContext::RightBrace() {
  return getToken(myParser::RightBrace, 0);
}

std::vector<tree::TerminalNode *> myParser::PostfixExpressionContext::LeftBracket() {
  return getTokens(myParser::LeftBracket);
}

tree::TerminalNode* myParser::PostfixExpressionContext::LeftBracket(size_t i) {
  return getToken(myParser::LeftBracket, i);
}

std::vector<myParser::ExpressionContext *> myParser::PostfixExpressionContext::expression() {
  return getRuleContexts<myParser::ExpressionContext>();
}

myParser::ExpressionContext* myParser::PostfixExpressionContext::expression(size_t i) {
  return getRuleContext<myParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> myParser::PostfixExpressionContext::RightBracket() {
  return getTokens(myParser::RightBracket);
}

tree::TerminalNode* myParser::PostfixExpressionContext::RightBracket(size_t i) {
  return getToken(myParser::RightBracket, i);
}

std::vector<tree::TerminalNode *> myParser::PostfixExpressionContext::Identifier() {
  return getTokens(myParser::Identifier);
}

tree::TerminalNode* myParser::PostfixExpressionContext::Identifier(size_t i) {
  return getToken(myParser::Identifier, i);
}

std::vector<tree::TerminalNode *> myParser::PostfixExpressionContext::Dot() {
  return getTokens(myParser::Dot);
}

tree::TerminalNode* myParser::PostfixExpressionContext::Dot(size_t i) {
  return getToken(myParser::Dot, i);
}

std::vector<tree::TerminalNode *> myParser::PostfixExpressionContext::Arrow() {
  return getTokens(myParser::Arrow);
}

tree::TerminalNode* myParser::PostfixExpressionContext::Arrow(size_t i) {
  return getToken(myParser::Arrow, i);
}

std::vector<tree::TerminalNode *> myParser::PostfixExpressionContext::PlusPlus() {
  return getTokens(myParser::PlusPlus);
}

tree::TerminalNode* myParser::PostfixExpressionContext::PlusPlus(size_t i) {
  return getToken(myParser::PlusPlus, i);
}

std::vector<tree::TerminalNode *> myParser::PostfixExpressionContext::MinusMinus() {
  return getTokens(myParser::MinusMinus);
}

tree::TerminalNode* myParser::PostfixExpressionContext::MinusMinus(size_t i) {
  return getToken(myParser::MinusMinus, i);
}

tree::TerminalNode* myParser::PostfixExpressionContext::Comma() {
  return getToken(myParser::Comma, 0);
}

std::vector<myParser::ArgumentExpressionListContext *> myParser::PostfixExpressionContext::argumentExpressionList() {
  return getRuleContexts<myParser::ArgumentExpressionListContext>();
}

myParser::ArgumentExpressionListContext* myParser::PostfixExpressionContext::argumentExpressionList(size_t i) {
  return getRuleContext<myParser::ArgumentExpressionListContext>(i);
}


size_t myParser::PostfixExpressionContext::getRuleIndex() const {
  return myParser::RulePostfixExpression;
}

void myParser::PostfixExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPostfixExpression(this);
}

void myParser::PostfixExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPostfixExpression(this);
}

myParser::PostfixExpressionContext* myParser::postfixExpression() {
  PostfixExpressionContext *_localctx = _tracker.createInstance<PostfixExpressionContext>(_ctx, getState());
  enterRule(_localctx, 8, myParser::RulePostfixExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(247);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 7, _ctx)) {
    case 1: {
      setState(233);
      primaryExpression();
      break;
    }

    case 2: {
      setState(235);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == myParser::T__0) {
        setState(234);
        match(myParser::T__0);
      }
      setState(237);
      match(myParser::LeftParen);
      setState(238);
      typeName();
      setState(239);
      match(myParser::RightParen);
      setState(240);
      match(myParser::LeftBrace);
      setState(241);
      initializerList();
      setState(243);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == myParser::Comma) {
        setState(242);
        match(myParser::Comma);
      }
      setState(245);
      match(myParser::RightBrace);
      break;
    }

    default:
      break;
    }
    setState(263);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 26388279107589) != 0) {
      setState(261);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case myParser::LeftBracket: {
          setState(249);
          match(myParser::LeftBracket);
          setState(250);
          expression();
          setState(251);
          match(myParser::RightBracket);
          break;
        }

        case myParser::LeftParen: {
          setState(253);
          match(myParser::LeftParen);
          setState(255);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 612507141508431886) != 0 || (((_la - 64) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 64)) & 1055531215745025) != 0) {
            setState(254);
            argumentExpressionList();
          }
          setState(257);
          match(myParser::RightParen);
          break;
        }

        case myParser::Arrow:
        case myParser::Dot: {
          setState(258);
          _la = _input->LA(1);
          if (!(_la == myParser::Arrow

          || _la == myParser::Dot)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(259);
          match(myParser::Identifier);
          break;
        }

        case myParser::PlusPlus:
        case myParser::MinusMinus: {
          setState(260);
          _la = _input->LA(1);
          if (!(_la == myParser::PlusPlus

          || _la == myParser::MinusMinus)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(265);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArgumentExpressionListContext ------------------------------------------------------------------

myParser::ArgumentExpressionListContext::ArgumentExpressionListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<myParser::AssignmentExpressionContext *> myParser::ArgumentExpressionListContext::assignmentExpression() {
  return getRuleContexts<myParser::AssignmentExpressionContext>();
}

myParser::AssignmentExpressionContext* myParser::ArgumentExpressionListContext::assignmentExpression(size_t i) {
  return getRuleContext<myParser::AssignmentExpressionContext>(i);
}

std::vector<tree::TerminalNode *> myParser::ArgumentExpressionListContext::Comma() {
  return getTokens(myParser::Comma);
}

tree::TerminalNode* myParser::ArgumentExpressionListContext::Comma(size_t i) {
  return getToken(myParser::Comma, i);
}


size_t myParser::ArgumentExpressionListContext::getRuleIndex() const {
  return myParser::RuleArgumentExpressionList;
}

void myParser::ArgumentExpressionListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArgumentExpressionList(this);
}

void myParser::ArgumentExpressionListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArgumentExpressionList(this);
}

myParser::ArgumentExpressionListContext* myParser::argumentExpressionList() {
  ArgumentExpressionListContext *_localctx = _tracker.createInstance<ArgumentExpressionListContext>(_ctx, getState());
  enterRule(_localctx, 10, myParser::RuleArgumentExpressionList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(266);
    assignmentExpression();
    setState(271);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == myParser::Comma) {
      setState(267);
      match(myParser::Comma);
      setState(268);
      assignmentExpression();
      setState(273);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnaryExpressionContext ------------------------------------------------------------------

myParser::UnaryExpressionContext::UnaryExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

myParser::PostfixExpressionContext* myParser::UnaryExpressionContext::postfixExpression() {
  return getRuleContext<myParser::PostfixExpressionContext>(0);
}

myParser::UnaryOperatorContext* myParser::UnaryExpressionContext::unaryOperator() {
  return getRuleContext<myParser::UnaryOperatorContext>(0);
}

myParser::CastExpressionContext* myParser::UnaryExpressionContext::castExpression() {
  return getRuleContext<myParser::CastExpressionContext>(0);
}

tree::TerminalNode* myParser::UnaryExpressionContext::LeftParen() {
  return getToken(myParser::LeftParen, 0);
}

myParser::TypeNameContext* myParser::UnaryExpressionContext::typeName() {
  return getRuleContext<myParser::TypeNameContext>(0);
}

tree::TerminalNode* myParser::UnaryExpressionContext::RightParen() {
  return getToken(myParser::RightParen, 0);
}

tree::TerminalNode* myParser::UnaryExpressionContext::AndAnd() {
  return getToken(myParser::AndAnd, 0);
}

tree::TerminalNode* myParser::UnaryExpressionContext::Identifier() {
  return getToken(myParser::Identifier, 0);
}

std::vector<tree::TerminalNode *> myParser::UnaryExpressionContext::Sizeof() {
  return getTokens(myParser::Sizeof);
}

tree::TerminalNode* myParser::UnaryExpressionContext::Sizeof(size_t i) {
  return getToken(myParser::Sizeof, i);
}

tree::TerminalNode* myParser::UnaryExpressionContext::Alignof() {
  return getToken(myParser::Alignof, 0);
}

std::vector<tree::TerminalNode *> myParser::UnaryExpressionContext::PlusPlus() {
  return getTokens(myParser::PlusPlus);
}

tree::TerminalNode* myParser::UnaryExpressionContext::PlusPlus(size_t i) {
  return getToken(myParser::PlusPlus, i);
}

std::vector<tree::TerminalNode *> myParser::UnaryExpressionContext::MinusMinus() {
  return getTokens(myParser::MinusMinus);
}

tree::TerminalNode* myParser::UnaryExpressionContext::MinusMinus(size_t i) {
  return getToken(myParser::MinusMinus, i);
}


size_t myParser::UnaryExpressionContext::getRuleIndex() const {
  return myParser::RuleUnaryExpression;
}

void myParser::UnaryExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnaryExpression(this);
}

void myParser::UnaryExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnaryExpression(this);
}

myParser::UnaryExpressionContext* myParser::unaryExpression() {
  UnaryExpressionContext *_localctx = _tracker.createInstance<UnaryExpressionContext>(_ctx, getState());
  enterRule(_localctx, 12, myParser::RuleUnaryExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(277);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 12, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(274);
        _la = _input->LA(1);
        if (!((((_la - 44) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 44)) & 42949672961) != 0)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        } 
      }
      setState(279);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 12, _ctx);
    }
    setState(291);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case myParser::T__0:
      case myParser::T__1:
      case myParser::T__2:
      case myParser::Generic:
      case myParser::LeftParen:
      case myParser::Identifier:
      case myParser::Constant:
      case myParser::StringLiteral: {
        setState(280);
        postfixExpression();
        break;
      }

      case myParser::Plus:
      case myParser::Minus:
      case myParser::Star:
      case myParser::And:
      case myParser::Not:
      case myParser::Tilde: {
        setState(281);
        unaryOperator();
        setState(282);
        castExpression();
        break;
      }

      case myParser::Sizeof:
      case myParser::Alignof: {
        setState(284);
        _la = _input->LA(1);
        if (!(_la == myParser::Sizeof

        || _la == myParser::Alignof)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(285);
        match(myParser::LeftParen);
        setState(286);
        typeName();
        setState(287);
        match(myParser::RightParen);
        break;
      }

      case myParser::AndAnd: {
        setState(289);
        match(myParser::AndAnd);
        setState(290);
        match(myParser::Identifier);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnaryOperatorContext ------------------------------------------------------------------

myParser::UnaryOperatorContext::UnaryOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* myParser::UnaryOperatorContext::And() {
  return getToken(myParser::And, 0);
}

tree::TerminalNode* myParser::UnaryOperatorContext::Star() {
  return getToken(myParser::Star, 0);
}

tree::TerminalNode* myParser::UnaryOperatorContext::Plus() {
  return getToken(myParser::Plus, 0);
}

tree::TerminalNode* myParser::UnaryOperatorContext::Minus() {
  return getToken(myParser::Minus, 0);
}

tree::TerminalNode* myParser::UnaryOperatorContext::Tilde() {
  return getToken(myParser::Tilde, 0);
}

tree::TerminalNode* myParser::UnaryOperatorContext::Not() {
  return getToken(myParser::Not, 0);
}


size_t myParser::UnaryOperatorContext::getRuleIndex() const {
  return myParser::RuleUnaryOperator;
}

void myParser::UnaryOperatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnaryOperator(this);
}

void myParser::UnaryOperatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnaryOperator(this);
}

myParser::UnaryOperatorContext* myParser::unaryOperator() {
  UnaryOperatorContext *_localctx = _tracker.createInstance<UnaryOperatorContext>(_ctx, getState());
  enterRule(_localctx, 14, myParser::RuleUnaryOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(293);
    _la = _input->LA(1);
    if (!((((_la - 76) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 76)) & 12437) != 0)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CastExpressionContext ------------------------------------------------------------------

myParser::CastExpressionContext::CastExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* myParser::CastExpressionContext::LeftParen() {
  return getToken(myParser::LeftParen, 0);
}

myParser::TypeNameContext* myParser::CastExpressionContext::typeName() {
  return getRuleContext<myParser::TypeNameContext>(0);
}

tree::TerminalNode* myParser::CastExpressionContext::RightParen() {
  return getToken(myParser::RightParen, 0);
}

myParser::CastExpressionContext* myParser::CastExpressionContext::castExpression() {
  return getRuleContext<myParser::CastExpressionContext>(0);
}

myParser::UnaryExpressionContext* myParser::CastExpressionContext::unaryExpression() {
  return getRuleContext<myParser::UnaryExpressionContext>(0);
}

tree::TerminalNode* myParser::CastExpressionContext::DigitSequence() {
  return getToken(myParser::DigitSequence, 0);
}


size_t myParser::CastExpressionContext::getRuleIndex() const {
  return myParser::RuleCastExpression;
}

void myParser::CastExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCastExpression(this);
}

void myParser::CastExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCastExpression(this);
}

myParser::CastExpressionContext* myParser::castExpression() {
  CastExpressionContext *_localctx = _tracker.createInstance<CastExpressionContext>(_ctx, getState());
  enterRule(_localctx, 16, myParser::RuleCastExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(305);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 15, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(296);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == myParser::T__0) {
        setState(295);
        match(myParser::T__0);
      }
      setState(298);
      match(myParser::LeftParen);
      setState(299);
      typeName();
      setState(300);
      match(myParser::RightParen);
      setState(301);
      castExpression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(303);
      unaryExpression();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(304);
      match(myParser::DigitSequence);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MultiplicativeExpressionContext ------------------------------------------------------------------

myParser::MultiplicativeExpressionContext::MultiplicativeExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<myParser::CastExpressionContext *> myParser::MultiplicativeExpressionContext::castExpression() {
  return getRuleContexts<myParser::CastExpressionContext>();
}

myParser::CastExpressionContext* myParser::MultiplicativeExpressionContext::castExpression(size_t i) {
  return getRuleContext<myParser::CastExpressionContext>(i);
}

std::vector<tree::TerminalNode *> myParser::MultiplicativeExpressionContext::Star() {
  return getTokens(myParser::Star);
}

tree::TerminalNode* myParser::MultiplicativeExpressionContext::Star(size_t i) {
  return getToken(myParser::Star, i);
}

std::vector<tree::TerminalNode *> myParser::MultiplicativeExpressionContext::Div() {
  return getTokens(myParser::Div);
}

tree::TerminalNode* myParser::MultiplicativeExpressionContext::Div(size_t i) {
  return getToken(myParser::Div, i);
}

std::vector<tree::TerminalNode *> myParser::MultiplicativeExpressionContext::Mod() {
  return getTokens(myParser::Mod);
}

tree::TerminalNode* myParser::MultiplicativeExpressionContext::Mod(size_t i) {
  return getToken(myParser::Mod, i);
}


size_t myParser::MultiplicativeExpressionContext::getRuleIndex() const {
  return myParser::RuleMultiplicativeExpression;
}

void myParser::MultiplicativeExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMultiplicativeExpression(this);
}

void myParser::MultiplicativeExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMultiplicativeExpression(this);
}

myParser::MultiplicativeExpressionContext* myParser::multiplicativeExpression() {
  MultiplicativeExpressionContext *_localctx = _tracker.createInstance<MultiplicativeExpressionContext>(_ctx, getState());
  enterRule(_localctx, 18, myParser::RuleMultiplicativeExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(307);
    castExpression();
    setState(312);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la - 80) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 80)) & 7) != 0) {
      setState(308);
      _la = _input->LA(1);
      if (!((((_la - 80) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 80)) & 7) != 0)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(309);
      castExpression();
      setState(314);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AdditiveExpressionContext ------------------------------------------------------------------

myParser::AdditiveExpressionContext::AdditiveExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<myParser::MultiplicativeExpressionContext *> myParser::AdditiveExpressionContext::multiplicativeExpression() {
  return getRuleContexts<myParser::MultiplicativeExpressionContext>();
}

myParser::MultiplicativeExpressionContext* myParser::AdditiveExpressionContext::multiplicativeExpression(size_t i) {
  return getRuleContext<myParser::MultiplicativeExpressionContext>(i);
}

std::vector<tree::TerminalNode *> myParser::AdditiveExpressionContext::Plus() {
  return getTokens(myParser::Plus);
}

tree::TerminalNode* myParser::AdditiveExpressionContext::Plus(size_t i) {
  return getToken(myParser::Plus, i);
}

std::vector<tree::TerminalNode *> myParser::AdditiveExpressionContext::Minus() {
  return getTokens(myParser::Minus);
}

tree::TerminalNode* myParser::AdditiveExpressionContext::Minus(size_t i) {
  return getToken(myParser::Minus, i);
}


size_t myParser::AdditiveExpressionContext::getRuleIndex() const {
  return myParser::RuleAdditiveExpression;
}

void myParser::AdditiveExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAdditiveExpression(this);
}

void myParser::AdditiveExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAdditiveExpression(this);
}

myParser::AdditiveExpressionContext* myParser::additiveExpression() {
  AdditiveExpressionContext *_localctx = _tracker.createInstance<AdditiveExpressionContext>(_ctx, getState());
  enterRule(_localctx, 20, myParser::RuleAdditiveExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(315);
    multiplicativeExpression();
    setState(320);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == myParser::Plus

    || _la == myParser::Minus) {
      setState(316);
      _la = _input->LA(1);
      if (!(_la == myParser::Plus

      || _la == myParser::Minus)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(317);
      multiplicativeExpression();
      setState(322);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ShiftExpressionContext ------------------------------------------------------------------

myParser::ShiftExpressionContext::ShiftExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<myParser::AdditiveExpressionContext *> myParser::ShiftExpressionContext::additiveExpression() {
  return getRuleContexts<myParser::AdditiveExpressionContext>();
}

myParser::AdditiveExpressionContext* myParser::ShiftExpressionContext::additiveExpression(size_t i) {
  return getRuleContext<myParser::AdditiveExpressionContext>(i);
}

std::vector<tree::TerminalNode *> myParser::ShiftExpressionContext::LeftShift() {
  return getTokens(myParser::LeftShift);
}

tree::TerminalNode* myParser::ShiftExpressionContext::LeftShift(size_t i) {
  return getToken(myParser::LeftShift, i);
}

std::vector<tree::TerminalNode *> myParser::ShiftExpressionContext::RightShift() {
  return getTokens(myParser::RightShift);
}

tree::TerminalNode* myParser::ShiftExpressionContext::RightShift(size_t i) {
  return getToken(myParser::RightShift, i);
}


size_t myParser::ShiftExpressionContext::getRuleIndex() const {
  return myParser::RuleShiftExpression;
}

void myParser::ShiftExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShiftExpression(this);
}

void myParser::ShiftExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShiftExpression(this);
}

myParser::ShiftExpressionContext* myParser::shiftExpression() {
  ShiftExpressionContext *_localctx = _tracker.createInstance<ShiftExpressionContext>(_ctx, getState());
  enterRule(_localctx, 22, myParser::RuleShiftExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(323);
    additiveExpression();
    setState(328);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == myParser::LeftShift

    || _la == myParser::RightShift) {
      setState(324);
      _la = _input->LA(1);
      if (!(_la == myParser::LeftShift

      || _la == myParser::RightShift)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(325);
      additiveExpression();
      setState(330);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RelationalExpressionContext ------------------------------------------------------------------

myParser::RelationalExpressionContext::RelationalExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<myParser::ShiftExpressionContext *> myParser::RelationalExpressionContext::shiftExpression() {
  return getRuleContexts<myParser::ShiftExpressionContext>();
}

myParser::ShiftExpressionContext* myParser::RelationalExpressionContext::shiftExpression(size_t i) {
  return getRuleContext<myParser::ShiftExpressionContext>(i);
}

std::vector<tree::TerminalNode *> myParser::RelationalExpressionContext::Less() {
  return getTokens(myParser::Less);
}

tree::TerminalNode* myParser::RelationalExpressionContext::Less(size_t i) {
  return getToken(myParser::Less, i);
}

std::vector<tree::TerminalNode *> myParser::RelationalExpressionContext::Greater() {
  return getTokens(myParser::Greater);
}

tree::TerminalNode* myParser::RelationalExpressionContext::Greater(size_t i) {
  return getToken(myParser::Greater, i);
}

std::vector<tree::TerminalNode *> myParser::RelationalExpressionContext::LessEqual() {
  return getTokens(myParser::LessEqual);
}

tree::TerminalNode* myParser::RelationalExpressionContext::LessEqual(size_t i) {
  return getToken(myParser::LessEqual, i);
}

std::vector<tree::TerminalNode *> myParser::RelationalExpressionContext::GreaterEqual() {
  return getTokens(myParser::GreaterEqual);
}

tree::TerminalNode* myParser::RelationalExpressionContext::GreaterEqual(size_t i) {
  return getToken(myParser::GreaterEqual, i);
}


size_t myParser::RelationalExpressionContext::getRuleIndex() const {
  return myParser::RuleRelationalExpression;
}

void myParser::RelationalExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRelationalExpression(this);
}

void myParser::RelationalExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRelationalExpression(this);
}

myParser::RelationalExpressionContext* myParser::relationalExpression() {
  RelationalExpressionContext *_localctx = _tracker.createInstance<RelationalExpressionContext>(_ctx, getState());
  enterRule(_localctx, 24, myParser::RuleRelationalExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(331);
    shiftExpression();
    setState(336);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la - 70) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 70)) & 15) != 0) {
      setState(332);
      _la = _input->LA(1);
      if (!((((_la - 70) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 70)) & 15) != 0)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(333);
      shiftExpression();
      setState(338);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EqualityExpressionContext ------------------------------------------------------------------

myParser::EqualityExpressionContext::EqualityExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<myParser::RelationalExpressionContext *> myParser::EqualityExpressionContext::relationalExpression() {
  return getRuleContexts<myParser::RelationalExpressionContext>();
}

myParser::RelationalExpressionContext* myParser::EqualityExpressionContext::relationalExpression(size_t i) {
  return getRuleContext<myParser::RelationalExpressionContext>(i);
}

std::vector<tree::TerminalNode *> myParser::EqualityExpressionContext::Equal() {
  return getTokens(myParser::Equal);
}

tree::TerminalNode* myParser::EqualityExpressionContext::Equal(size_t i) {
  return getToken(myParser::Equal, i);
}

std::vector<tree::TerminalNode *> myParser::EqualityExpressionContext::NotEqual() {
  return getTokens(myParser::NotEqual);
}

tree::TerminalNode* myParser::EqualityExpressionContext::NotEqual(size_t i) {
  return getToken(myParser::NotEqual, i);
}


size_t myParser::EqualityExpressionContext::getRuleIndex() const {
  return myParser::RuleEqualityExpression;
}

void myParser::EqualityExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEqualityExpression(this);
}

void myParser::EqualityExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEqualityExpression(this);
}

myParser::EqualityExpressionContext* myParser::equalityExpression() {
  EqualityExpressionContext *_localctx = _tracker.createInstance<EqualityExpressionContext>(_ctx, getState());
  enterRule(_localctx, 26, myParser::RuleEqualityExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(339);
    relationalExpression();
    setState(344);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == myParser::Equal

    || _la == myParser::NotEqual) {
      setState(340);
      _la = _input->LA(1);
      if (!(_la == myParser::Equal

      || _la == myParser::NotEqual)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(341);
      relationalExpression();
      setState(346);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AndExpressionContext ------------------------------------------------------------------

myParser::AndExpressionContext::AndExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<myParser::EqualityExpressionContext *> myParser::AndExpressionContext::equalityExpression() {
  return getRuleContexts<myParser::EqualityExpressionContext>();
}

myParser::EqualityExpressionContext* myParser::AndExpressionContext::equalityExpression(size_t i) {
  return getRuleContext<myParser::EqualityExpressionContext>(i);
}

std::vector<tree::TerminalNode *> myParser::AndExpressionContext::And() {
  return getTokens(myParser::And);
}

tree::TerminalNode* myParser::AndExpressionContext::And(size_t i) {
  return getToken(myParser::And, i);
}


size_t myParser::AndExpressionContext::getRuleIndex() const {
  return myParser::RuleAndExpression;
}

void myParser::AndExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAndExpression(this);
}

void myParser::AndExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAndExpression(this);
}

myParser::AndExpressionContext* myParser::andExpression() {
  AndExpressionContext *_localctx = _tracker.createInstance<AndExpressionContext>(_ctx, getState());
  enterRule(_localctx, 28, myParser::RuleAndExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(347);
    equalityExpression();
    setState(352);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == myParser::And) {
      setState(348);
      match(myParser::And);
      setState(349);
      equalityExpression();
      setState(354);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExclusiveOrExpressionContext ------------------------------------------------------------------

myParser::ExclusiveOrExpressionContext::ExclusiveOrExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<myParser::AndExpressionContext *> myParser::ExclusiveOrExpressionContext::andExpression() {
  return getRuleContexts<myParser::AndExpressionContext>();
}

myParser::AndExpressionContext* myParser::ExclusiveOrExpressionContext::andExpression(size_t i) {
  return getRuleContext<myParser::AndExpressionContext>(i);
}

std::vector<tree::TerminalNode *> myParser::ExclusiveOrExpressionContext::Caret() {
  return getTokens(myParser::Caret);
}

tree::TerminalNode* myParser::ExclusiveOrExpressionContext::Caret(size_t i) {
  return getToken(myParser::Caret, i);
}


size_t myParser::ExclusiveOrExpressionContext::getRuleIndex() const {
  return myParser::RuleExclusiveOrExpression;
}

void myParser::ExclusiveOrExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExclusiveOrExpression(this);
}

void myParser::ExclusiveOrExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExclusiveOrExpression(this);
}

myParser::ExclusiveOrExpressionContext* myParser::exclusiveOrExpression() {
  ExclusiveOrExpressionContext *_localctx = _tracker.createInstance<ExclusiveOrExpressionContext>(_ctx, getState());
  enterRule(_localctx, 30, myParser::RuleExclusiveOrExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(355);
    andExpression();
    setState(360);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == myParser::Caret) {
      setState(356);
      match(myParser::Caret);
      setState(357);
      andExpression();
      setState(362);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InclusiveOrExpressionContext ------------------------------------------------------------------

myParser::InclusiveOrExpressionContext::InclusiveOrExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<myParser::ExclusiveOrExpressionContext *> myParser::InclusiveOrExpressionContext::exclusiveOrExpression() {
  return getRuleContexts<myParser::ExclusiveOrExpressionContext>();
}

myParser::ExclusiveOrExpressionContext* myParser::InclusiveOrExpressionContext::exclusiveOrExpression(size_t i) {
  return getRuleContext<myParser::ExclusiveOrExpressionContext>(i);
}

std::vector<tree::TerminalNode *> myParser::InclusiveOrExpressionContext::Or() {
  return getTokens(myParser::Or);
}

tree::TerminalNode* myParser::InclusiveOrExpressionContext::Or(size_t i) {
  return getToken(myParser::Or, i);
}


size_t myParser::InclusiveOrExpressionContext::getRuleIndex() const {
  return myParser::RuleInclusiveOrExpression;
}

void myParser::InclusiveOrExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInclusiveOrExpression(this);
}

void myParser::InclusiveOrExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInclusiveOrExpression(this);
}

myParser::InclusiveOrExpressionContext* myParser::inclusiveOrExpression() {
  InclusiveOrExpressionContext *_localctx = _tracker.createInstance<InclusiveOrExpressionContext>(_ctx, getState());
  enterRule(_localctx, 32, myParser::RuleInclusiveOrExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(363);
    exclusiveOrExpression();
    setState(368);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == myParser::Or) {
      setState(364);
      match(myParser::Or);
      setState(365);
      exclusiveOrExpression();
      setState(370);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LogicalAndExpressionContext ------------------------------------------------------------------

myParser::LogicalAndExpressionContext::LogicalAndExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<myParser::InclusiveOrExpressionContext *> myParser::LogicalAndExpressionContext::inclusiveOrExpression() {
  return getRuleContexts<myParser::InclusiveOrExpressionContext>();
}

myParser::InclusiveOrExpressionContext* myParser::LogicalAndExpressionContext::inclusiveOrExpression(size_t i) {
  return getRuleContext<myParser::InclusiveOrExpressionContext>(i);
}

std::vector<tree::TerminalNode *> myParser::LogicalAndExpressionContext::AndAnd() {
  return getTokens(myParser::AndAnd);
}

tree::TerminalNode* myParser::LogicalAndExpressionContext::AndAnd(size_t i) {
  return getToken(myParser::AndAnd, i);
}


size_t myParser::LogicalAndExpressionContext::getRuleIndex() const {
  return myParser::RuleLogicalAndExpression;
}

void myParser::LogicalAndExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLogicalAndExpression(this);
}

void myParser::LogicalAndExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLogicalAndExpression(this);
}

myParser::LogicalAndExpressionContext* myParser::logicalAndExpression() {
  LogicalAndExpressionContext *_localctx = _tracker.createInstance<LogicalAndExpressionContext>(_ctx, getState());
  enterRule(_localctx, 34, myParser::RuleLogicalAndExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(371);
    inclusiveOrExpression();
    setState(376);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == myParser::AndAnd) {
      setState(372);
      match(myParser::AndAnd);
      setState(373);
      inclusiveOrExpression();
      setState(378);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LogicalOrExpressionContext ------------------------------------------------------------------

myParser::LogicalOrExpressionContext::LogicalOrExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<myParser::LogicalAndExpressionContext *> myParser::LogicalOrExpressionContext::logicalAndExpression() {
  return getRuleContexts<myParser::LogicalAndExpressionContext>();
}

myParser::LogicalAndExpressionContext* myParser::LogicalOrExpressionContext::logicalAndExpression(size_t i) {
  return getRuleContext<myParser::LogicalAndExpressionContext>(i);
}

std::vector<tree::TerminalNode *> myParser::LogicalOrExpressionContext::OrOr() {
  return getTokens(myParser::OrOr);
}

tree::TerminalNode* myParser::LogicalOrExpressionContext::OrOr(size_t i) {
  return getToken(myParser::OrOr, i);
}


size_t myParser::LogicalOrExpressionContext::getRuleIndex() const {
  return myParser::RuleLogicalOrExpression;
}

void myParser::LogicalOrExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLogicalOrExpression(this);
}

void myParser::LogicalOrExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLogicalOrExpression(this);
}

myParser::LogicalOrExpressionContext* myParser::logicalOrExpression() {
  LogicalOrExpressionContext *_localctx = _tracker.createInstance<LogicalOrExpressionContext>(_ctx, getState());
  enterRule(_localctx, 36, myParser::RuleLogicalOrExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(379);
    logicalAndExpression();
    setState(384);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == myParser::OrOr) {
      setState(380);
      match(myParser::OrOr);
      setState(381);
      logicalAndExpression();
      setState(386);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConditionalExpressionContext ------------------------------------------------------------------

myParser::ConditionalExpressionContext::ConditionalExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

myParser::LogicalOrExpressionContext* myParser::ConditionalExpressionContext::logicalOrExpression() {
  return getRuleContext<myParser::LogicalOrExpressionContext>(0);
}

tree::TerminalNode* myParser::ConditionalExpressionContext::Question() {
  return getToken(myParser::Question, 0);
}

myParser::ExpressionContext* myParser::ConditionalExpressionContext::expression() {
  return getRuleContext<myParser::ExpressionContext>(0);
}

tree::TerminalNode* myParser::ConditionalExpressionContext::Colon() {
  return getToken(myParser::Colon, 0);
}

myParser::ConditionalExpressionContext* myParser::ConditionalExpressionContext::conditionalExpression() {
  return getRuleContext<myParser::ConditionalExpressionContext>(0);
}


size_t myParser::ConditionalExpressionContext::getRuleIndex() const {
  return myParser::RuleConditionalExpression;
}

void myParser::ConditionalExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConditionalExpression(this);
}

void myParser::ConditionalExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConditionalExpression(this);
}

myParser::ConditionalExpressionContext* myParser::conditionalExpression() {
  ConditionalExpressionContext *_localctx = _tracker.createInstance<ConditionalExpressionContext>(_ctx, getState());
  enterRule(_localctx, 38, myParser::RuleConditionalExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(387);
    logicalOrExpression();
    setState(393);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == myParser::Question) {
      setState(388);
      match(myParser::Question);
      setState(389);
      expression();
      setState(390);
      match(myParser::Colon);
      setState(391);
      conditionalExpression();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssignmentExpressionContext ------------------------------------------------------------------

myParser::AssignmentExpressionContext::AssignmentExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

myParser::ConditionalExpressionContext* myParser::AssignmentExpressionContext::conditionalExpression() {
  return getRuleContext<myParser::ConditionalExpressionContext>(0);
}

myParser::UnaryExpressionContext* myParser::AssignmentExpressionContext::unaryExpression() {
  return getRuleContext<myParser::UnaryExpressionContext>(0);
}

myParser::AssignmentOperatorContext* myParser::AssignmentExpressionContext::assignmentOperator() {
  return getRuleContext<myParser::AssignmentOperatorContext>(0);
}

myParser::AssignmentExpressionContext* myParser::AssignmentExpressionContext::assignmentExpression() {
  return getRuleContext<myParser::AssignmentExpressionContext>(0);
}

tree::TerminalNode* myParser::AssignmentExpressionContext::DigitSequence() {
  return getToken(myParser::DigitSequence, 0);
}


size_t myParser::AssignmentExpressionContext::getRuleIndex() const {
  return myParser::RuleAssignmentExpression;
}

void myParser::AssignmentExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssignmentExpression(this);
}

void myParser::AssignmentExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssignmentExpression(this);
}

myParser::AssignmentExpressionContext* myParser::assignmentExpression() {
  AssignmentExpressionContext *_localctx = _tracker.createInstance<AssignmentExpressionContext>(_ctx, getState());
  enterRule(_localctx, 40, myParser::RuleAssignmentExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(401);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 27, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(395);
      conditionalExpression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(396);
      unaryExpression();
      setState(397);
      assignmentOperator();
      setState(398);
      assignmentExpression();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(400);
      match(myParser::DigitSequence);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssignmentOperatorContext ------------------------------------------------------------------

myParser::AssignmentOperatorContext::AssignmentOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* myParser::AssignmentOperatorContext::Assign() {
  return getToken(myParser::Assign, 0);
}

tree::TerminalNode* myParser::AssignmentOperatorContext::StarAssign() {
  return getToken(myParser::StarAssign, 0);
}

tree::TerminalNode* myParser::AssignmentOperatorContext::DivAssign() {
  return getToken(myParser::DivAssign, 0);
}

tree::TerminalNode* myParser::AssignmentOperatorContext::ModAssign() {
  return getToken(myParser::ModAssign, 0);
}

tree::TerminalNode* myParser::AssignmentOperatorContext::PlusAssign() {
  return getToken(myParser::PlusAssign, 0);
}

tree::TerminalNode* myParser::AssignmentOperatorContext::MinusAssign() {
  return getToken(myParser::MinusAssign, 0);
}

tree::TerminalNode* myParser::AssignmentOperatorContext::LeftShiftAssign() {
  return getToken(myParser::LeftShiftAssign, 0);
}

tree::TerminalNode* myParser::AssignmentOperatorContext::RightShiftAssign() {
  return getToken(myParser::RightShiftAssign, 0);
}

tree::TerminalNode* myParser::AssignmentOperatorContext::AndAssign() {
  return getToken(myParser::AndAssign, 0);
}

tree::TerminalNode* myParser::AssignmentOperatorContext::XorAssign() {
  return getToken(myParser::XorAssign, 0);
}

tree::TerminalNode* myParser::AssignmentOperatorContext::OrAssign() {
  return getToken(myParser::OrAssign, 0);
}


size_t myParser::AssignmentOperatorContext::getRuleIndex() const {
  return myParser::RuleAssignmentOperator;
}

void myParser::AssignmentOperatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssignmentOperator(this);
}

void myParser::AssignmentOperatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssignmentOperator(this);
}

myParser::AssignmentOperatorContext* myParser::assignmentOperator() {
  AssignmentOperatorContext *_localctx = _tracker.createInstance<AssignmentOperatorContext>(_ctx, getState());
  enterRule(_localctx, 42, myParser::RuleAssignmentOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(403);
    _la = _input->LA(1);
    if (!((((_la - 94) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 94)) & 2047) != 0)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionContext ------------------------------------------------------------------

myParser::ExpressionContext::ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<myParser::AssignmentExpressionContext *> myParser::ExpressionContext::assignmentExpression() {
  return getRuleContexts<myParser::AssignmentExpressionContext>();
}

myParser::AssignmentExpressionContext* myParser::ExpressionContext::assignmentExpression(size_t i) {
  return getRuleContext<myParser::AssignmentExpressionContext>(i);
}

std::vector<tree::TerminalNode *> myParser::ExpressionContext::Comma() {
  return getTokens(myParser::Comma);
}

tree::TerminalNode* myParser::ExpressionContext::Comma(size_t i) {
  return getToken(myParser::Comma, i);
}


size_t myParser::ExpressionContext::getRuleIndex() const {
  return myParser::RuleExpression;
}

void myParser::ExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpression(this);
}

void myParser::ExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpression(this);
}

myParser::ExpressionContext* myParser::expression() {
  ExpressionContext *_localctx = _tracker.createInstance<ExpressionContext>(_ctx, getState());
  enterRule(_localctx, 44, myParser::RuleExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(405);
    assignmentExpression();
    setState(410);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == myParser::Comma) {
      setState(406);
      match(myParser::Comma);
      setState(407);
      assignmentExpression();
      setState(412);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstantExpressionContext ------------------------------------------------------------------

myParser::ConstantExpressionContext::ConstantExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

myParser::ConditionalExpressionContext* myParser::ConstantExpressionContext::conditionalExpression() {
  return getRuleContext<myParser::ConditionalExpressionContext>(0);
}


size_t myParser::ConstantExpressionContext::getRuleIndex() const {
  return myParser::RuleConstantExpression;
}

void myParser::ConstantExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstantExpression(this);
}

void myParser::ConstantExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstantExpression(this);
}

myParser::ConstantExpressionContext* myParser::constantExpression() {
  ConstantExpressionContext *_localctx = _tracker.createInstance<ConstantExpressionContext>(_ctx, getState());
  enterRule(_localctx, 46, myParser::RuleConstantExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(413);
    conditionalExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeclarationContext ------------------------------------------------------------------

myParser::DeclarationContext::DeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

myParser::DeclarationSpecifiersContext* myParser::DeclarationContext::declarationSpecifiers() {
  return getRuleContext<myParser::DeclarationSpecifiersContext>(0);
}

tree::TerminalNode* myParser::DeclarationContext::Semi() {
  return getToken(myParser::Semi, 0);
}

myParser::InitDeclaratorListContext* myParser::DeclarationContext::initDeclaratorList() {
  return getRuleContext<myParser::InitDeclaratorListContext>(0);
}

myParser::StaticAssertDeclarationContext* myParser::DeclarationContext::staticAssertDeclaration() {
  return getRuleContext<myParser::StaticAssertDeclarationContext>(0);
}


size_t myParser::DeclarationContext::getRuleIndex() const {
  return myParser::RuleDeclaration;
}

void myParser::DeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeclaration(this);
}

void myParser::DeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeclaration(this);
}

myParser::DeclarationContext* myParser::declaration() {
  DeclarationContext *_localctx = _tracker.createInstance<DeclarationContext>(_ctx, getState());
  enterRule(_localctx, 48, myParser::RuleDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(422);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case myParser::T__0:
      case myParser::T__3:
      case myParser::T__4:
      case myParser::T__5:
      case myParser::T__6:
      case myParser::T__7:
      case myParser::T__8:
      case myParser::T__9:
      case myParser::T__16:
      case myParser::Auto:
      case myParser::Char:
      case myParser::Const:
      case myParser::Double:
      case myParser::Enum:
      case myParser::Extern:
      case myParser::Float:
      case myParser::Inline:
      case myParser::Int:
      case myParser::Long:
      case myParser::Register:
      case myParser::Restrict:
      case myParser::Short:
      case myParser::Signed:
      case myParser::Static:
      case myParser::Struct:
      case myParser::Typedef:
      case myParser::Union:
      case myParser::Unsigned:
      case myParser::Void:
      case myParser::Volatile:
      case myParser::Alignas:
      case myParser::Atomic:
      case myParser::Bool:
      case myParser::Complex:
      case myParser::Noreturn:
      case myParser::ThreadLocal:
      case myParser::Identifier: {
        enterOuterAlt(_localctx, 1);
        setState(415);
        declarationSpecifiers();
        setState(417);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 64000) != 0 || (((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & 70368752631809) != 0) {
          setState(416);
          initDeclaratorList();
        }
        setState(419);
        match(myParser::Semi);
        break;
      }

      case myParser::StaticAssert: {
        enterOuterAlt(_localctx, 2);
        setState(421);
        staticAssertDeclaration();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeclarationSpecifiersContext ------------------------------------------------------------------

myParser::DeclarationSpecifiersContext::DeclarationSpecifiersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<myParser::DeclarationSpecifierContext *> myParser::DeclarationSpecifiersContext::declarationSpecifier() {
  return getRuleContexts<myParser::DeclarationSpecifierContext>();
}

myParser::DeclarationSpecifierContext* myParser::DeclarationSpecifiersContext::declarationSpecifier(size_t i) {
  return getRuleContext<myParser::DeclarationSpecifierContext>(i);
}


size_t myParser::DeclarationSpecifiersContext::getRuleIndex() const {
  return myParser::RuleDeclarationSpecifiers;
}

void myParser::DeclarationSpecifiersContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeclarationSpecifiers(this);
}

void myParser::DeclarationSpecifiersContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeclarationSpecifiers(this);
}

myParser::DeclarationSpecifiersContext* myParser::declarationSpecifiers() {
  DeclarationSpecifiersContext *_localctx = _tracker.createInstance<DeclarationSpecifiersContext>(_ctx, getState());
  enterRule(_localctx, 50, myParser::RuleDeclarationSpecifiers);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(425); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(424);
              declarationSpecifier();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(427); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 31, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeclarationSpecifiers2Context ------------------------------------------------------------------

myParser::DeclarationSpecifiers2Context::DeclarationSpecifiers2Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<myParser::DeclarationSpecifierContext *> myParser::DeclarationSpecifiers2Context::declarationSpecifier() {
  return getRuleContexts<myParser::DeclarationSpecifierContext>();
}

myParser::DeclarationSpecifierContext* myParser::DeclarationSpecifiers2Context::declarationSpecifier(size_t i) {
  return getRuleContext<myParser::DeclarationSpecifierContext>(i);
}


size_t myParser::DeclarationSpecifiers2Context::getRuleIndex() const {
  return myParser::RuleDeclarationSpecifiers2;
}

void myParser::DeclarationSpecifiers2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeclarationSpecifiers2(this);
}

void myParser::DeclarationSpecifiers2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeclarationSpecifiers2(this);
}

myParser::DeclarationSpecifiers2Context* myParser::declarationSpecifiers2() {
  DeclarationSpecifiers2Context *_localctx = _tracker.createInstance<DeclarationSpecifiers2Context>(_ctx, getState());
  enterRule(_localctx, 52, myParser::RuleDeclarationSpecifiers2);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(430); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(429);
      declarationSpecifier();
      setState(432); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -6386264861217519630) != 0 || _la == myParser::Identifier);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeclarationSpecifierContext ------------------------------------------------------------------

myParser::DeclarationSpecifierContext::DeclarationSpecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

myParser::StorageClassSpecifierContext* myParser::DeclarationSpecifierContext::storageClassSpecifier() {
  return getRuleContext<myParser::StorageClassSpecifierContext>(0);
}

myParser::TypeSpecifierContext* myParser::DeclarationSpecifierContext::typeSpecifier() {
  return getRuleContext<myParser::TypeSpecifierContext>(0);
}

myParser::TypeQualifierContext* myParser::DeclarationSpecifierContext::typeQualifier() {
  return getRuleContext<myParser::TypeQualifierContext>(0);
}

myParser::FunctionSpecifierContext* myParser::DeclarationSpecifierContext::functionSpecifier() {
  return getRuleContext<myParser::FunctionSpecifierContext>(0);
}

myParser::AlignmentSpecifierContext* myParser::DeclarationSpecifierContext::alignmentSpecifier() {
  return getRuleContext<myParser::AlignmentSpecifierContext>(0);
}


size_t myParser::DeclarationSpecifierContext::getRuleIndex() const {
  return myParser::RuleDeclarationSpecifier;
}

void myParser::DeclarationSpecifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeclarationSpecifier(this);
}

void myParser::DeclarationSpecifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeclarationSpecifier(this);
}

myParser::DeclarationSpecifierContext* myParser::declarationSpecifier() {
  DeclarationSpecifierContext *_localctx = _tracker.createInstance<DeclarationSpecifierContext>(_ctx, getState());
  enterRule(_localctx, 54, myParser::RuleDeclarationSpecifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(439);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 33, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(434);
      storageClassSpecifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(435);
      typeSpecifier();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(436);
      typeQualifier();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(437);
      functionSpecifier();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(438);
      alignmentSpecifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InitDeclaratorListContext ------------------------------------------------------------------

myParser::InitDeclaratorListContext::InitDeclaratorListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<myParser::InitDeclaratorContext *> myParser::InitDeclaratorListContext::initDeclarator() {
  return getRuleContexts<myParser::InitDeclaratorContext>();
}

myParser::InitDeclaratorContext* myParser::InitDeclaratorListContext::initDeclarator(size_t i) {
  return getRuleContext<myParser::InitDeclaratorContext>(i);
}

std::vector<tree::TerminalNode *> myParser::InitDeclaratorListContext::Comma() {
  return getTokens(myParser::Comma);
}

tree::TerminalNode* myParser::InitDeclaratorListContext::Comma(size_t i) {
  return getToken(myParser::Comma, i);
}


size_t myParser::InitDeclaratorListContext::getRuleIndex() const {
  return myParser::RuleInitDeclaratorList;
}

void myParser::InitDeclaratorListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInitDeclaratorList(this);
}

void myParser::InitDeclaratorListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInitDeclaratorList(this);
}

myParser::InitDeclaratorListContext* myParser::initDeclaratorList() {
  InitDeclaratorListContext *_localctx = _tracker.createInstance<InitDeclaratorListContext>(_ctx, getState());
  enterRule(_localctx, 56, myParser::RuleInitDeclaratorList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(441);
    initDeclarator();
    setState(446);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == myParser::Comma) {
      setState(442);
      match(myParser::Comma);
      setState(443);
      initDeclarator();
      setState(448);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InitDeclaratorContext ------------------------------------------------------------------

myParser::InitDeclaratorContext::InitDeclaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

myParser::DeclaratorContext* myParser::InitDeclaratorContext::declarator() {
  return getRuleContext<myParser::DeclaratorContext>(0);
}

tree::TerminalNode* myParser::InitDeclaratorContext::Assign() {
  return getToken(myParser::Assign, 0);
}

myParser::InitializerContext* myParser::InitDeclaratorContext::initializer() {
  return getRuleContext<myParser::InitializerContext>(0);
}


size_t myParser::InitDeclaratorContext::getRuleIndex() const {
  return myParser::RuleInitDeclarator;
}

void myParser::InitDeclaratorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInitDeclarator(this);
}

void myParser::InitDeclaratorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInitDeclarator(this);
}

myParser::InitDeclaratorContext* myParser::initDeclarator() {
  InitDeclaratorContext *_localctx = _tracker.createInstance<InitDeclaratorContext>(_ctx, getState());
  enterRule(_localctx, 58, myParser::RuleInitDeclarator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(449);
    declarator();
    setState(452);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == myParser::Assign) {
      setState(450);
      match(myParser::Assign);
      setState(451);
      initializer();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StorageClassSpecifierContext ------------------------------------------------------------------

myParser::StorageClassSpecifierContext::StorageClassSpecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* myParser::StorageClassSpecifierContext::Typedef() {
  return getToken(myParser::Typedef, 0);
}

tree::TerminalNode* myParser::StorageClassSpecifierContext::Extern() {
  return getToken(myParser::Extern, 0);
}

tree::TerminalNode* myParser::StorageClassSpecifierContext::Static() {
  return getToken(myParser::Static, 0);
}

tree::TerminalNode* myParser::StorageClassSpecifierContext::ThreadLocal() {
  return getToken(myParser::ThreadLocal, 0);
}

tree::TerminalNode* myParser::StorageClassSpecifierContext::Auto() {
  return getToken(myParser::Auto, 0);
}

tree::TerminalNode* myParser::StorageClassSpecifierContext::Register() {
  return getToken(myParser::Register, 0);
}


size_t myParser::StorageClassSpecifierContext::getRuleIndex() const {
  return myParser::RuleStorageClassSpecifier;
}

void myParser::StorageClassSpecifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStorageClassSpecifier(this);
}

void myParser::StorageClassSpecifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStorageClassSpecifier(this);
}

myParser::StorageClassSpecifierContext* myParser::storageClassSpecifier() {
  StorageClassSpecifierContext *_localctx = _tracker.createInstance<StorageClassSpecifierContext>(_ctx, getState());
  enterRule(_localctx, 60, myParser::RuleStorageClassSpecifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(454);
    _la = _input->LA(1);
    if (!(((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -9223054825601630208) != 0)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeSpecifierContext ------------------------------------------------------------------

myParser::TypeSpecifierContext::TypeSpecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* myParser::TypeSpecifierContext::Void() {
  return getToken(myParser::Void, 0);
}

tree::TerminalNode* myParser::TypeSpecifierContext::Char() {
  return getToken(myParser::Char, 0);
}

tree::TerminalNode* myParser::TypeSpecifierContext::Short() {
  return getToken(myParser::Short, 0);
}

tree::TerminalNode* myParser::TypeSpecifierContext::Int() {
  return getToken(myParser::Int, 0);
}

tree::TerminalNode* myParser::TypeSpecifierContext::Long() {
  return getToken(myParser::Long, 0);
}

tree::TerminalNode* myParser::TypeSpecifierContext::Float() {
  return getToken(myParser::Float, 0);
}

tree::TerminalNode* myParser::TypeSpecifierContext::Double() {
  return getToken(myParser::Double, 0);
}

tree::TerminalNode* myParser::TypeSpecifierContext::Signed() {
  return getToken(myParser::Signed, 0);
}

tree::TerminalNode* myParser::TypeSpecifierContext::Unsigned() {
  return getToken(myParser::Unsigned, 0);
}

tree::TerminalNode* myParser::TypeSpecifierContext::Bool() {
  return getToken(myParser::Bool, 0);
}

tree::TerminalNode* myParser::TypeSpecifierContext::Complex() {
  return getToken(myParser::Complex, 0);
}

tree::TerminalNode* myParser::TypeSpecifierContext::LeftParen() {
  return getToken(myParser::LeftParen, 0);
}

tree::TerminalNode* myParser::TypeSpecifierContext::RightParen() {
  return getToken(myParser::RightParen, 0);
}

myParser::AtomicTypeSpecifierContext* myParser::TypeSpecifierContext::atomicTypeSpecifier() {
  return getRuleContext<myParser::AtomicTypeSpecifierContext>(0);
}

myParser::StructOrUnionSpecifierContext* myParser::TypeSpecifierContext::structOrUnionSpecifier() {
  return getRuleContext<myParser::StructOrUnionSpecifierContext>(0);
}

myParser::EnumSpecifierContext* myParser::TypeSpecifierContext::enumSpecifier() {
  return getRuleContext<myParser::EnumSpecifierContext>(0);
}

myParser::TypedefNameContext* myParser::TypeSpecifierContext::typedefName() {
  return getRuleContext<myParser::TypedefNameContext>(0);
}

myParser::ConstantExpressionContext* myParser::TypeSpecifierContext::constantExpression() {
  return getRuleContext<myParser::ConstantExpressionContext>(0);
}


size_t myParser::TypeSpecifierContext::getRuleIndex() const {
  return myParser::RuleTypeSpecifier;
}

void myParser::TypeSpecifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeSpecifier(this);
}

void myParser::TypeSpecifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeSpecifier(this);
}

myParser::TypeSpecifierContext* myParser::typeSpecifier() {
  TypeSpecifierContext *_localctx = _tracker.createInstance<TypeSpecifierContext>(_ctx, getState());
  enterRule(_localctx, 62, myParser::RuleTypeSpecifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(470);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case myParser::T__3:
      case myParser::T__4:
      case myParser::T__5:
      case myParser::Char:
      case myParser::Double:
      case myParser::Float:
      case myParser::Int:
      case myParser::Long:
      case myParser::Short:
      case myParser::Signed:
      case myParser::Unsigned:
      case myParser::Void:
      case myParser::Bool:
      case myParser::Complex: {
        enterOuterAlt(_localctx, 1);
        setState(456);
        _la = _input->LA(1);
        if (!(((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 435736874976280688) != 0)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case myParser::T__0: {
        enterOuterAlt(_localctx, 2);
        setState(457);
        match(myParser::T__0);
        setState(458);
        match(myParser::LeftParen);
        setState(459);
        _la = _input->LA(1);
        if (!(((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 112) != 0)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(460);
        match(myParser::RightParen);
        break;
      }

      case myParser::Atomic: {
        enterOuterAlt(_localctx, 3);
        setState(461);
        atomicTypeSpecifier();
        break;
      }

      case myParser::Struct:
      case myParser::Union: {
        enterOuterAlt(_localctx, 4);
        setState(462);
        structOrUnionSpecifier();
        break;
      }

      case myParser::Enum: {
        enterOuterAlt(_localctx, 5);
        setState(463);
        enumSpecifier();
        break;
      }

      case myParser::Identifier: {
        enterOuterAlt(_localctx, 6);
        setState(464);
        typedefName();
        break;
      }

      case myParser::T__6: {
        enterOuterAlt(_localctx, 7);
        setState(465);
        match(myParser::T__6);
        setState(466);
        match(myParser::LeftParen);
        setState(467);
        constantExpression();
        setState(468);
        match(myParser::RightParen);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StructOrUnionSpecifierContext ------------------------------------------------------------------

myParser::StructOrUnionSpecifierContext::StructOrUnionSpecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

myParser::StructOrUnionContext* myParser::StructOrUnionSpecifierContext::structOrUnion() {
  return getRuleContext<myParser::StructOrUnionContext>(0);
}

tree::TerminalNode* myParser::StructOrUnionSpecifierContext::LeftBrace() {
  return getToken(myParser::LeftBrace, 0);
}

myParser::StructDeclarationListContext* myParser::StructOrUnionSpecifierContext::structDeclarationList() {
  return getRuleContext<myParser::StructDeclarationListContext>(0);
}

tree::TerminalNode* myParser::StructOrUnionSpecifierContext::RightBrace() {
  return getToken(myParser::RightBrace, 0);
}

tree::TerminalNode* myParser::StructOrUnionSpecifierContext::Identifier() {
  return getToken(myParser::Identifier, 0);
}


size_t myParser::StructOrUnionSpecifierContext::getRuleIndex() const {
  return myParser::RuleStructOrUnionSpecifier;
}

void myParser::StructOrUnionSpecifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStructOrUnionSpecifier(this);
}

void myParser::StructOrUnionSpecifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStructOrUnionSpecifier(this);
}

myParser::StructOrUnionSpecifierContext* myParser::structOrUnionSpecifier() {
  StructOrUnionSpecifierContext *_localctx = _tracker.createInstance<StructOrUnionSpecifierContext>(_ctx, getState());
  enterRule(_localctx, 64, myParser::RuleStructOrUnionSpecifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(483);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 38, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(472);
      structOrUnion();
      setState(474);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == myParser::Identifier) {
        setState(473);
        match(myParser::Identifier);
      }
      setState(476);
      match(myParser::LeftBrace);
      setState(477);
      structDeclarationList();
      setState(478);
      match(myParser::RightBrace);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(480);
      structOrUnion();
      setState(481);
      match(myParser::Identifier);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StructOrUnionContext ------------------------------------------------------------------

myParser::StructOrUnionContext::StructOrUnionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* myParser::StructOrUnionContext::Struct() {
  return getToken(myParser::Struct, 0);
}

tree::TerminalNode* myParser::StructOrUnionContext::Union() {
  return getToken(myParser::Union, 0);
}


size_t myParser::StructOrUnionContext::getRuleIndex() const {
  return myParser::RuleStructOrUnion;
}

void myParser::StructOrUnionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStructOrUnion(this);
}

void myParser::StructOrUnionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStructOrUnion(this);
}

myParser::StructOrUnionContext* myParser::structOrUnion() {
  StructOrUnionContext *_localctx = _tracker.createInstance<StructOrUnionContext>(_ctx, getState());
  enterRule(_localctx, 66, myParser::RuleStructOrUnion);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(485);
    _la = _input->LA(1);
    if (!(_la == myParser::Struct

    || _la == myParser::Union)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StructDeclarationListContext ------------------------------------------------------------------

myParser::StructDeclarationListContext::StructDeclarationListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<myParser::StructDeclarationContext *> myParser::StructDeclarationListContext::structDeclaration() {
  return getRuleContexts<myParser::StructDeclarationContext>();
}

myParser::StructDeclarationContext* myParser::StructDeclarationListContext::structDeclaration(size_t i) {
  return getRuleContext<myParser::StructDeclarationContext>(i);
}


size_t myParser::StructDeclarationListContext::getRuleIndex() const {
  return myParser::RuleStructDeclarationList;
}

void myParser::StructDeclarationListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStructDeclarationList(this);
}

void myParser::StructDeclarationListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStructDeclarationList(this);
}

myParser::StructDeclarationListContext* myParser::structDeclarationList() {
  StructDeclarationListContext *_localctx = _tracker.createInstance<StructDeclarationListContext>(_ctx, getState());
  enterRule(_localctx, 68, myParser::RuleStructDeclarationList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(488); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(487);
      structDeclaration();
      setState(490); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 5124618506368712946) != 0 || _la == myParser::Identifier);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StructDeclarationContext ------------------------------------------------------------------

myParser::StructDeclarationContext::StructDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

myParser::SpecifierQualifierListContext* myParser::StructDeclarationContext::specifierQualifierList() {
  return getRuleContext<myParser::SpecifierQualifierListContext>(0);
}

myParser::StructDeclaratorListContext* myParser::StructDeclarationContext::structDeclaratorList() {
  return getRuleContext<myParser::StructDeclaratorListContext>(0);
}

tree::TerminalNode* myParser::StructDeclarationContext::Semi() {
  return getToken(myParser::Semi, 0);
}

myParser::StaticAssertDeclarationContext* myParser::StructDeclarationContext::staticAssertDeclaration() {
  return getRuleContext<myParser::StaticAssertDeclarationContext>(0);
}


size_t myParser::StructDeclarationContext::getRuleIndex() const {
  return myParser::RuleStructDeclaration;
}

void myParser::StructDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStructDeclaration(this);
}

void myParser::StructDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStructDeclaration(this);
}

myParser::StructDeclarationContext* myParser::structDeclaration() {
  StructDeclarationContext *_localctx = _tracker.createInstance<StructDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 70, myParser::RuleStructDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(500);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 40, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(492);
      specifierQualifierList();
      setState(493);
      structDeclaratorList();
      setState(494);
      match(myParser::Semi);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(496);
      specifierQualifierList();
      setState(497);
      match(myParser::Semi);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(499);
      staticAssertDeclaration();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SpecifierQualifierListContext ------------------------------------------------------------------

myParser::SpecifierQualifierListContext::SpecifierQualifierListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

myParser::TypeSpecifierContext* myParser::SpecifierQualifierListContext::typeSpecifier() {
  return getRuleContext<myParser::TypeSpecifierContext>(0);
}

myParser::TypeQualifierContext* myParser::SpecifierQualifierListContext::typeQualifier() {
  return getRuleContext<myParser::TypeQualifierContext>(0);
}

myParser::SpecifierQualifierListContext* myParser::SpecifierQualifierListContext::specifierQualifierList() {
  return getRuleContext<myParser::SpecifierQualifierListContext>(0);
}


size_t myParser::SpecifierQualifierListContext::getRuleIndex() const {
  return myParser::RuleSpecifierQualifierList;
}

void myParser::SpecifierQualifierListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSpecifierQualifierList(this);
}

void myParser::SpecifierQualifierListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSpecifierQualifierList(this);
}

myParser::SpecifierQualifierListContext* myParser::specifierQualifierList() {
  SpecifierQualifierListContext *_localctx = _tracker.createInstance<SpecifierQualifierListContext>(_ctx, getState());
  enterRule(_localctx, 72, myParser::RuleSpecifierQualifierList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(504);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 41, _ctx)) {
    case 1: {
      setState(502);
      typeSpecifier();
      break;
    }

    case 2: {
      setState(503);
      typeQualifier();
      break;
    }

    default:
      break;
    }
    setState(507);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 42, _ctx)) {
    case 1: {
      setState(506);
      specifierQualifierList();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StructDeclaratorListContext ------------------------------------------------------------------

myParser::StructDeclaratorListContext::StructDeclaratorListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<myParser::StructDeclaratorContext *> myParser::StructDeclaratorListContext::structDeclarator() {
  return getRuleContexts<myParser::StructDeclaratorContext>();
}

myParser::StructDeclaratorContext* myParser::StructDeclaratorListContext::structDeclarator(size_t i) {
  return getRuleContext<myParser::StructDeclaratorContext>(i);
}

std::vector<tree::TerminalNode *> myParser::StructDeclaratorListContext::Comma() {
  return getTokens(myParser::Comma);
}

tree::TerminalNode* myParser::StructDeclaratorListContext::Comma(size_t i) {
  return getToken(myParser::Comma, i);
}


size_t myParser::StructDeclaratorListContext::getRuleIndex() const {
  return myParser::RuleStructDeclaratorList;
}

void myParser::StructDeclaratorListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStructDeclaratorList(this);
}

void myParser::StructDeclaratorListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStructDeclaratorList(this);
}

myParser::StructDeclaratorListContext* myParser::structDeclaratorList() {
  StructDeclaratorListContext *_localctx = _tracker.createInstance<StructDeclaratorListContext>(_ctx, getState());
  enterRule(_localctx, 74, myParser::RuleStructDeclaratorList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(509);
    structDeclarator();
    setState(514);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == myParser::Comma) {
      setState(510);
      match(myParser::Comma);
      setState(511);
      structDeclarator();
      setState(516);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StructDeclaratorContext ------------------------------------------------------------------

myParser::StructDeclaratorContext::StructDeclaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

myParser::DeclaratorContext* myParser::StructDeclaratorContext::declarator() {
  return getRuleContext<myParser::DeclaratorContext>(0);
}

tree::TerminalNode* myParser::StructDeclaratorContext::Colon() {
  return getToken(myParser::Colon, 0);
}

myParser::ConstantExpressionContext* myParser::StructDeclaratorContext::constantExpression() {
  return getRuleContext<myParser::ConstantExpressionContext>(0);
}


size_t myParser::StructDeclaratorContext::getRuleIndex() const {
  return myParser::RuleStructDeclarator;
}

void myParser::StructDeclaratorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStructDeclarator(this);
}

void myParser::StructDeclaratorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStructDeclarator(this);
}

myParser::StructDeclaratorContext* myParser::structDeclarator() {
  StructDeclaratorContext *_localctx = _tracker.createInstance<StructDeclaratorContext>(_ctx, getState());
  enterRule(_localctx, 76, myParser::RuleStructDeclarator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(523);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 45, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(517);
      declarator();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(519);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 64000) != 0 || (((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 70368752631809) != 0) {
        setState(518);
        declarator();
      }
      setState(521);
      match(myParser::Colon);
      setState(522);
      constantExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumSpecifierContext ------------------------------------------------------------------

myParser::EnumSpecifierContext::EnumSpecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* myParser::EnumSpecifierContext::Enum() {
  return getToken(myParser::Enum, 0);
}

tree::TerminalNode* myParser::EnumSpecifierContext::LeftBrace() {
  return getToken(myParser::LeftBrace, 0);
}

myParser::EnumeratorListContext* myParser::EnumSpecifierContext::enumeratorList() {
  return getRuleContext<myParser::EnumeratorListContext>(0);
}

tree::TerminalNode* myParser::EnumSpecifierContext::RightBrace() {
  return getToken(myParser::RightBrace, 0);
}

tree::TerminalNode* myParser::EnumSpecifierContext::Identifier() {
  return getToken(myParser::Identifier, 0);
}

tree::TerminalNode* myParser::EnumSpecifierContext::Comma() {
  return getToken(myParser::Comma, 0);
}


size_t myParser::EnumSpecifierContext::getRuleIndex() const {
  return myParser::RuleEnumSpecifier;
}

void myParser::EnumSpecifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumSpecifier(this);
}

void myParser::EnumSpecifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumSpecifier(this);
}

myParser::EnumSpecifierContext* myParser::enumSpecifier() {
  EnumSpecifierContext *_localctx = _tracker.createInstance<EnumSpecifierContext>(_ctx, getState());
  enterRule(_localctx, 78, myParser::RuleEnumSpecifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(538);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 48, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(525);
      match(myParser::Enum);
      setState(527);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == myParser::Identifier) {
        setState(526);
        match(myParser::Identifier);
      }
      setState(529);
      match(myParser::LeftBrace);
      setState(530);
      enumeratorList();
      setState(532);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == myParser::Comma) {
        setState(531);
        match(myParser::Comma);
      }
      setState(534);
      match(myParser::RightBrace);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(536);
      match(myParser::Enum);
      setState(537);
      match(myParser::Identifier);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumeratorListContext ------------------------------------------------------------------

myParser::EnumeratorListContext::EnumeratorListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<myParser::EnumeratorContext *> myParser::EnumeratorListContext::enumerator() {
  return getRuleContexts<myParser::EnumeratorContext>();
}

myParser::EnumeratorContext* myParser::EnumeratorListContext::enumerator(size_t i) {
  return getRuleContext<myParser::EnumeratorContext>(i);
}

std::vector<tree::TerminalNode *> myParser::EnumeratorListContext::Comma() {
  return getTokens(myParser::Comma);
}

tree::TerminalNode* myParser::EnumeratorListContext::Comma(size_t i) {
  return getToken(myParser::Comma, i);
}


size_t myParser::EnumeratorListContext::getRuleIndex() const {
  return myParser::RuleEnumeratorList;
}

void myParser::EnumeratorListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumeratorList(this);
}

void myParser::EnumeratorListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumeratorList(this);
}

myParser::EnumeratorListContext* myParser::enumeratorList() {
  EnumeratorListContext *_localctx = _tracker.createInstance<EnumeratorListContext>(_ctx, getState());
  enterRule(_localctx, 80, myParser::RuleEnumeratorList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(540);
    enumerator();
    setState(545);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 49, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(541);
        match(myParser::Comma);
        setState(542);
        enumerator(); 
      }
      setState(547);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 49, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumeratorContext ------------------------------------------------------------------

myParser::EnumeratorContext::EnumeratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

myParser::EnumerationConstantContext* myParser::EnumeratorContext::enumerationConstant() {
  return getRuleContext<myParser::EnumerationConstantContext>(0);
}

tree::TerminalNode* myParser::EnumeratorContext::Assign() {
  return getToken(myParser::Assign, 0);
}

myParser::ConstantExpressionContext* myParser::EnumeratorContext::constantExpression() {
  return getRuleContext<myParser::ConstantExpressionContext>(0);
}


size_t myParser::EnumeratorContext::getRuleIndex() const {
  return myParser::RuleEnumerator;
}

void myParser::EnumeratorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumerator(this);
}

void myParser::EnumeratorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumerator(this);
}

myParser::EnumeratorContext* myParser::enumerator() {
  EnumeratorContext *_localctx = _tracker.createInstance<EnumeratorContext>(_ctx, getState());
  enterRule(_localctx, 82, myParser::RuleEnumerator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(548);
    enumerationConstant();
    setState(551);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == myParser::Assign) {
      setState(549);
      match(myParser::Assign);
      setState(550);
      constantExpression();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumerationConstantContext ------------------------------------------------------------------

myParser::EnumerationConstantContext::EnumerationConstantContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* myParser::EnumerationConstantContext::Identifier() {
  return getToken(myParser::Identifier, 0);
}


size_t myParser::EnumerationConstantContext::getRuleIndex() const {
  return myParser::RuleEnumerationConstant;
}

void myParser::EnumerationConstantContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumerationConstant(this);
}

void myParser::EnumerationConstantContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumerationConstant(this);
}

myParser::EnumerationConstantContext* myParser::enumerationConstant() {
  EnumerationConstantContext *_localctx = _tracker.createInstance<EnumerationConstantContext>(_ctx, getState());
  enterRule(_localctx, 84, myParser::RuleEnumerationConstant);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(553);
    match(myParser::Identifier);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AtomicTypeSpecifierContext ------------------------------------------------------------------

myParser::AtomicTypeSpecifierContext::AtomicTypeSpecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* myParser::AtomicTypeSpecifierContext::Atomic() {
  return getToken(myParser::Atomic, 0);
}

tree::TerminalNode* myParser::AtomicTypeSpecifierContext::LeftParen() {
  return getToken(myParser::LeftParen, 0);
}

myParser::TypeNameContext* myParser::AtomicTypeSpecifierContext::typeName() {
  return getRuleContext<myParser::TypeNameContext>(0);
}

tree::TerminalNode* myParser::AtomicTypeSpecifierContext::RightParen() {
  return getToken(myParser::RightParen, 0);
}


size_t myParser::AtomicTypeSpecifierContext::getRuleIndex() const {
  return myParser::RuleAtomicTypeSpecifier;
}

void myParser::AtomicTypeSpecifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAtomicTypeSpecifier(this);
}

void myParser::AtomicTypeSpecifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAtomicTypeSpecifier(this);
}

myParser::AtomicTypeSpecifierContext* myParser::atomicTypeSpecifier() {
  AtomicTypeSpecifierContext *_localctx = _tracker.createInstance<AtomicTypeSpecifierContext>(_ctx, getState());
  enterRule(_localctx, 86, myParser::RuleAtomicTypeSpecifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(555);
    match(myParser::Atomic);
    setState(556);
    match(myParser::LeftParen);
    setState(557);
    typeName();
    setState(558);
    match(myParser::RightParen);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeQualifierContext ------------------------------------------------------------------

myParser::TypeQualifierContext::TypeQualifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* myParser::TypeQualifierContext::Const() {
  return getToken(myParser::Const, 0);
}

tree::TerminalNode* myParser::TypeQualifierContext::Restrict() {
  return getToken(myParser::Restrict, 0);
}

tree::TerminalNode* myParser::TypeQualifierContext::Volatile() {
  return getToken(myParser::Volatile, 0);
}

tree::TerminalNode* myParser::TypeQualifierContext::Atomic() {
  return getToken(myParser::Atomic, 0);
}


size_t myParser::TypeQualifierContext::getRuleIndex() const {
  return myParser::RuleTypeQualifier;
}

void myParser::TypeQualifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeQualifier(this);
}

void myParser::TypeQualifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeQualifier(this);
}

myParser::TypeQualifierContext* myParser::typeQualifier() {
  TypeQualifierContext *_localctx = _tracker.createInstance<TypeQualifierContext>(_ctx, getState());
  enterRule(_localctx, 88, myParser::RuleTypeQualifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(560);
    _la = _input->LA(1);
    if (!(((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 76562293193703424) != 0)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionSpecifierContext ------------------------------------------------------------------

myParser::FunctionSpecifierContext::FunctionSpecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* myParser::FunctionSpecifierContext::Inline() {
  return getToken(myParser::Inline, 0);
}

tree::TerminalNode* myParser::FunctionSpecifierContext::Noreturn() {
  return getToken(myParser::Noreturn, 0);
}

myParser::GccAttributeSpecifierContext* myParser::FunctionSpecifierContext::gccAttributeSpecifier() {
  return getRuleContext<myParser::GccAttributeSpecifierContext>(0);
}

tree::TerminalNode* myParser::FunctionSpecifierContext::LeftParen() {
  return getToken(myParser::LeftParen, 0);
}

tree::TerminalNode* myParser::FunctionSpecifierContext::Identifier() {
  return getToken(myParser::Identifier, 0);
}

tree::TerminalNode* myParser::FunctionSpecifierContext::RightParen() {
  return getToken(myParser::RightParen, 0);
}


size_t myParser::FunctionSpecifierContext::getRuleIndex() const {
  return myParser::RuleFunctionSpecifier;
}

void myParser::FunctionSpecifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunctionSpecifier(this);
}

void myParser::FunctionSpecifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunctionSpecifier(this);
}

myParser::FunctionSpecifierContext* myParser::functionSpecifier() {
  FunctionSpecifierContext *_localctx = _tracker.createInstance<FunctionSpecifierContext>(_ctx, getState());
  enterRule(_localctx, 90, myParser::RuleFunctionSpecifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(568);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case myParser::T__7:
      case myParser::T__8:
      case myParser::Inline:
      case myParser::Noreturn: {
        enterOuterAlt(_localctx, 1);
        setState(562);
        _la = _input->LA(1);
        if (!(((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 2305843077933171456) != 0)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case myParser::T__16: {
        enterOuterAlt(_localctx, 2);
        setState(563);
        gccAttributeSpecifier();
        break;
      }

      case myParser::T__9: {
        enterOuterAlt(_localctx, 3);
        setState(564);
        match(myParser::T__9);
        setState(565);
        match(myParser::LeftParen);
        setState(566);
        match(myParser::Identifier);
        setState(567);
        match(myParser::RightParen);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AlignmentSpecifierContext ------------------------------------------------------------------

myParser::AlignmentSpecifierContext::AlignmentSpecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* myParser::AlignmentSpecifierContext::Alignas() {
  return getToken(myParser::Alignas, 0);
}

tree::TerminalNode* myParser::AlignmentSpecifierContext::LeftParen() {
  return getToken(myParser::LeftParen, 0);
}

tree::TerminalNode* myParser::AlignmentSpecifierContext::RightParen() {
  return getToken(myParser::RightParen, 0);
}

myParser::TypeNameContext* myParser::AlignmentSpecifierContext::typeName() {
  return getRuleContext<myParser::TypeNameContext>(0);
}

myParser::ConstantExpressionContext* myParser::AlignmentSpecifierContext::constantExpression() {
  return getRuleContext<myParser::ConstantExpressionContext>(0);
}


size_t myParser::AlignmentSpecifierContext::getRuleIndex() const {
  return myParser::RuleAlignmentSpecifier;
}

void myParser::AlignmentSpecifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlignmentSpecifier(this);
}

void myParser::AlignmentSpecifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlignmentSpecifier(this);
}

myParser::AlignmentSpecifierContext* myParser::alignmentSpecifier() {
  AlignmentSpecifierContext *_localctx = _tracker.createInstance<AlignmentSpecifierContext>(_ctx, getState());
  enterRule(_localctx, 92, myParser::RuleAlignmentSpecifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(570);
    match(myParser::Alignas);
    setState(571);
    match(myParser::LeftParen);
    setState(574);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 52, _ctx)) {
    case 1: {
      setState(572);
      typeName();
      break;
    }

    case 2: {
      setState(573);
      constantExpression();
      break;
    }

    default:
      break;
    }
    setState(576);
    match(myParser::RightParen);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeclaratorContext ------------------------------------------------------------------

myParser::DeclaratorContext::DeclaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

myParser::DirectDeclaratorContext* myParser::DeclaratorContext::directDeclarator() {
  return getRuleContext<myParser::DirectDeclaratorContext>(0);
}

myParser::PointerContext* myParser::DeclaratorContext::pointer() {
  return getRuleContext<myParser::PointerContext>(0);
}

std::vector<myParser::GccDeclaratorExtensionContext *> myParser::DeclaratorContext::gccDeclaratorExtension() {
  return getRuleContexts<myParser::GccDeclaratorExtensionContext>();
}

myParser::GccDeclaratorExtensionContext* myParser::DeclaratorContext::gccDeclaratorExtension(size_t i) {
  return getRuleContext<myParser::GccDeclaratorExtensionContext>(i);
}


size_t myParser::DeclaratorContext::getRuleIndex() const {
  return myParser::RuleDeclarator;
}

void myParser::DeclaratorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeclarator(this);
}

void myParser::DeclaratorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeclarator(this);
}

myParser::DeclaratorContext* myParser::declarator() {
  DeclaratorContext *_localctx = _tracker.createInstance<DeclaratorContext>(_ctx, getState());
  enterRule(_localctx, 94, myParser::RuleDeclarator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(579);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == myParser::Star

    || _la == myParser::Caret) {
      setState(578);
      pointer();
    }
    setState(581);
    directDeclarator(0);
    setState(585);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 54, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(582);
        gccDeclaratorExtension(); 
      }
      setState(587);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 54, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DirectDeclaratorContext ------------------------------------------------------------------

myParser::DirectDeclaratorContext::DirectDeclaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* myParser::DirectDeclaratorContext::Identifier() {
  return getToken(myParser::Identifier, 0);
}

tree::TerminalNode* myParser::DirectDeclaratorContext::LeftParen() {
  return getToken(myParser::LeftParen, 0);
}

myParser::DeclaratorContext* myParser::DirectDeclaratorContext::declarator() {
  return getRuleContext<myParser::DeclaratorContext>(0);
}

tree::TerminalNode* myParser::DirectDeclaratorContext::RightParen() {
  return getToken(myParser::RightParen, 0);
}

tree::TerminalNode* myParser::DirectDeclaratorContext::Colon() {
  return getToken(myParser::Colon, 0);
}

tree::TerminalNode* myParser::DirectDeclaratorContext::DigitSequence() {
  return getToken(myParser::DigitSequence, 0);
}

myParser::VcSpecificModiferContext* myParser::DirectDeclaratorContext::vcSpecificModifer() {
  return getRuleContext<myParser::VcSpecificModiferContext>(0);
}

myParser::DirectDeclaratorContext* myParser::DirectDeclaratorContext::directDeclarator() {
  return getRuleContext<myParser::DirectDeclaratorContext>(0);
}

tree::TerminalNode* myParser::DirectDeclaratorContext::LeftBracket() {
  return getToken(myParser::LeftBracket, 0);
}

tree::TerminalNode* myParser::DirectDeclaratorContext::RightBracket() {
  return getToken(myParser::RightBracket, 0);
}

myParser::TypeQualifierListContext* myParser::DirectDeclaratorContext::typeQualifierList() {
  return getRuleContext<myParser::TypeQualifierListContext>(0);
}

myParser::AssignmentExpressionContext* myParser::DirectDeclaratorContext::assignmentExpression() {
  return getRuleContext<myParser::AssignmentExpressionContext>(0);
}

tree::TerminalNode* myParser::DirectDeclaratorContext::Static() {
  return getToken(myParser::Static, 0);
}

tree::TerminalNode* myParser::DirectDeclaratorContext::Star() {
  return getToken(myParser::Star, 0);
}

myParser::ParameterTypeListContext* myParser::DirectDeclaratorContext::parameterTypeList() {
  return getRuleContext<myParser::ParameterTypeListContext>(0);
}

myParser::IdentifierListContext* myParser::DirectDeclaratorContext::identifierList() {
  return getRuleContext<myParser::IdentifierListContext>(0);
}


size_t myParser::DirectDeclaratorContext::getRuleIndex() const {
  return myParser::RuleDirectDeclarator;
}

void myParser::DirectDeclaratorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDirectDeclarator(this);
}

void myParser::DirectDeclaratorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDirectDeclarator(this);
}


myParser::DirectDeclaratorContext* myParser::directDeclarator() {
   return directDeclarator(0);
}

myParser::DirectDeclaratorContext* myParser::directDeclarator(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  myParser::DirectDeclaratorContext *_localctx = _tracker.createInstance<DirectDeclaratorContext>(_ctx, parentState);
  myParser::DirectDeclaratorContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 96;
  enterRecursionRule(_localctx, 96, myParser::RuleDirectDeclarator, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(605);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 55, _ctx)) {
    case 1: {
      setState(589);
      match(myParser::Identifier);
      break;
    }

    case 2: {
      setState(590);
      match(myParser::LeftParen);
      setState(591);
      declarator();
      setState(592);
      match(myParser::RightParen);
      break;
    }

    case 3: {
      setState(594);
      match(myParser::Identifier);
      setState(595);
      match(myParser::Colon);
      setState(596);
      match(myParser::DigitSequence);
      break;
    }

    case 4: {
      setState(597);
      vcSpecificModifer();
      setState(598);
      match(myParser::Identifier);
      break;
    }

    case 5: {
      setState(600);
      match(myParser::LeftParen);
      setState(601);
      vcSpecificModifer();
      setState(602);
      declarator();
      setState(603);
      match(myParser::RightParen);
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(652);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 62, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(650);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 61, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<DirectDeclaratorContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleDirectDeclarator);
          setState(607);

          if (!(precpred(_ctx, 9))) throw FailedPredicateException(this, "precpred(_ctx, 9)");
          setState(608);
          match(myParser::LeftBracket);
          setState(610);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 76562293193703424) != 0) {
            setState(609);
            typeQualifierList();
          }
          setState(613);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 612507141508431886) != 0 || (((_la - 64) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 64)) & 1055531215745025) != 0) {
            setState(612);
            assignmentExpression();
          }
          setState(615);
          match(myParser::RightBracket);
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<DirectDeclaratorContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleDirectDeclarator);
          setState(616);

          if (!(precpred(_ctx, 8))) throw FailedPredicateException(this, "precpred(_ctx, 8)");
          setState(617);
          match(myParser::LeftBracket);
          setState(618);
          match(myParser::Static);
          setState(620);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 76562293193703424) != 0) {
            setState(619);
            typeQualifierList();
          }
          setState(622);
          assignmentExpression();
          setState(623);
          match(myParser::RightBracket);
          break;
        }

        case 3: {
          _localctx = _tracker.createInstance<DirectDeclaratorContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleDirectDeclarator);
          setState(625);

          if (!(precpred(_ctx, 7))) throw FailedPredicateException(this, "precpred(_ctx, 7)");
          setState(626);
          match(myParser::LeftBracket);
          setState(627);
          typeQualifierList();
          setState(628);
          match(myParser::Static);
          setState(629);
          assignmentExpression();
          setState(630);
          match(myParser::RightBracket);
          break;
        }

        case 4: {
          _localctx = _tracker.createInstance<DirectDeclaratorContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleDirectDeclarator);
          setState(632);

          if (!(precpred(_ctx, 6))) throw FailedPredicateException(this, "precpred(_ctx, 6)");
          setState(633);
          match(myParser::LeftBracket);
          setState(635);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 76562293193703424) != 0) {
            setState(634);
            typeQualifierList();
          }
          setState(637);
          match(myParser::Star);
          setState(638);
          match(myParser::RightBracket);
          break;
        }

        case 5: {
          _localctx = _tracker.createInstance<DirectDeclaratorContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleDirectDeclarator);
          setState(639);

          if (!(precpred(_ctx, 5))) throw FailedPredicateException(this, "precpred(_ctx, 5)");
          setState(640);
          match(myParser::LeftParen);
          setState(641);
          parameterTypeList();
          setState(642);
          match(myParser::RightParen);
          break;
        }

        case 6: {
          _localctx = _tracker.createInstance<DirectDeclaratorContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleDirectDeclarator);
          setState(644);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(645);
          match(myParser::LeftParen);
          setState(647);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == myParser::Identifier) {
            setState(646);
            identifierList();
          }
          setState(649);
          match(myParser::RightParen);
          break;
        }

        default:
          break;
        } 
      }
      setState(654);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 62, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- VcSpecificModiferContext ------------------------------------------------------------------

myParser::VcSpecificModiferContext::VcSpecificModiferContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t myParser::VcSpecificModiferContext::getRuleIndex() const {
  return myParser::RuleVcSpecificModifer;
}

void myParser::VcSpecificModiferContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVcSpecificModifer(this);
}

void myParser::VcSpecificModiferContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVcSpecificModifer(this);
}

myParser::VcSpecificModiferContext* myParser::vcSpecificModifer() {
  VcSpecificModiferContext *_localctx = _tracker.createInstance<VcSpecificModiferContext>(_ctx, getState());
  enterRule(_localctx, 98, myParser::RuleVcSpecificModifer);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(655);
    _la = _input->LA(1);
    if (!(((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 64000) != 0)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GccDeclaratorExtensionContext ------------------------------------------------------------------

myParser::GccDeclaratorExtensionContext::GccDeclaratorExtensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* myParser::GccDeclaratorExtensionContext::LeftParen() {
  return getToken(myParser::LeftParen, 0);
}

tree::TerminalNode* myParser::GccDeclaratorExtensionContext::RightParen() {
  return getToken(myParser::RightParen, 0);
}

std::vector<tree::TerminalNode *> myParser::GccDeclaratorExtensionContext::StringLiteral() {
  return getTokens(myParser::StringLiteral);
}

tree::TerminalNode* myParser::GccDeclaratorExtensionContext::StringLiteral(size_t i) {
  return getToken(myParser::StringLiteral, i);
}

myParser::GccAttributeSpecifierContext* myParser::GccDeclaratorExtensionContext::gccAttributeSpecifier() {
  return getRuleContext<myParser::GccAttributeSpecifierContext>(0);
}


size_t myParser::GccDeclaratorExtensionContext::getRuleIndex() const {
  return myParser::RuleGccDeclaratorExtension;
}

void myParser::GccDeclaratorExtensionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGccDeclaratorExtension(this);
}

void myParser::GccDeclaratorExtensionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGccDeclaratorExtension(this);
}

myParser::GccDeclaratorExtensionContext* myParser::gccDeclaratorExtension() {
  GccDeclaratorExtensionContext *_localctx = _tracker.createInstance<GccDeclaratorExtensionContext>(_ctx, getState());
  enterRule(_localctx, 100, myParser::RuleGccDeclaratorExtension);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(666);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case myParser::T__15: {
        enterOuterAlt(_localctx, 1);
        setState(657);
        match(myParser::T__15);
        setState(658);
        match(myParser::LeftParen);
        setState(660); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(659);
          match(myParser::StringLiteral);
          setState(662); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (_la == myParser::StringLiteral);
        setState(664);
        match(myParser::RightParen);
        break;
      }

      case myParser::T__16: {
        enterOuterAlt(_localctx, 2);
        setState(665);
        gccAttributeSpecifier();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GccAttributeSpecifierContext ------------------------------------------------------------------

myParser::GccAttributeSpecifierContext::GccAttributeSpecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> myParser::GccAttributeSpecifierContext::LeftParen() {
  return getTokens(myParser::LeftParen);
}

tree::TerminalNode* myParser::GccAttributeSpecifierContext::LeftParen(size_t i) {
  return getToken(myParser::LeftParen, i);
}

myParser::GccAttributeListContext* myParser::GccAttributeSpecifierContext::gccAttributeList() {
  return getRuleContext<myParser::GccAttributeListContext>(0);
}

std::vector<tree::TerminalNode *> myParser::GccAttributeSpecifierContext::RightParen() {
  return getTokens(myParser::RightParen);
}

tree::TerminalNode* myParser::GccAttributeSpecifierContext::RightParen(size_t i) {
  return getToken(myParser::RightParen, i);
}


size_t myParser::GccAttributeSpecifierContext::getRuleIndex() const {
  return myParser::RuleGccAttributeSpecifier;
}

void myParser::GccAttributeSpecifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGccAttributeSpecifier(this);
}

void myParser::GccAttributeSpecifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGccAttributeSpecifier(this);
}

myParser::GccAttributeSpecifierContext* myParser::gccAttributeSpecifier() {
  GccAttributeSpecifierContext *_localctx = _tracker.createInstance<GccAttributeSpecifierContext>(_ctx, getState());
  enterRule(_localctx, 102, myParser::RuleGccAttributeSpecifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(668);
    match(myParser::T__16);
    setState(669);
    match(myParser::LeftParen);
    setState(670);
    match(myParser::LeftParen);
    setState(671);
    gccAttributeList();
    setState(672);
    match(myParser::RightParen);
    setState(673);
    match(myParser::RightParen);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GccAttributeListContext ------------------------------------------------------------------

myParser::GccAttributeListContext::GccAttributeListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<myParser::GccAttributeContext *> myParser::GccAttributeListContext::gccAttribute() {
  return getRuleContexts<myParser::GccAttributeContext>();
}

myParser::GccAttributeContext* myParser::GccAttributeListContext::gccAttribute(size_t i) {
  return getRuleContext<myParser::GccAttributeContext>(i);
}

std::vector<tree::TerminalNode *> myParser::GccAttributeListContext::Comma() {
  return getTokens(myParser::Comma);
}

tree::TerminalNode* myParser::GccAttributeListContext::Comma(size_t i) {
  return getToken(myParser::Comma, i);
}


size_t myParser::GccAttributeListContext::getRuleIndex() const {
  return myParser::RuleGccAttributeList;
}

void myParser::GccAttributeListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGccAttributeList(this);
}

void myParser::GccAttributeListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGccAttributeList(this);
}

myParser::GccAttributeListContext* myParser::gccAttributeList() {
  GccAttributeListContext *_localctx = _tracker.createInstance<GccAttributeListContext>(_ctx, getState());
  enterRule(_localctx, 104, myParser::RuleGccAttributeList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(676);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -2) != 0 || (((_la - 66) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 66)) & 288230376017494015) != 0) {
      setState(675);
      gccAttribute();
    }
    setState(684);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == myParser::Comma) {
      setState(678);
      match(myParser::Comma);
      setState(680);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -2) != 0 || (((_la - 66) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 66)) & 288230376017494015) != 0) {
        setState(679);
        gccAttribute();
      }
      setState(686);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GccAttributeContext ------------------------------------------------------------------

myParser::GccAttributeContext::GccAttributeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* myParser::GccAttributeContext::Comma() {
  return getToken(myParser::Comma, 0);
}

std::vector<tree::TerminalNode *> myParser::GccAttributeContext::LeftParen() {
  return getTokens(myParser::LeftParen);
}

tree::TerminalNode* myParser::GccAttributeContext::LeftParen(size_t i) {
  return getToken(myParser::LeftParen, i);
}

std::vector<tree::TerminalNode *> myParser::GccAttributeContext::RightParen() {
  return getTokens(myParser::RightParen);
}

tree::TerminalNode* myParser::GccAttributeContext::RightParen(size_t i) {
  return getToken(myParser::RightParen, i);
}

myParser::ArgumentExpressionListContext* myParser::GccAttributeContext::argumentExpressionList() {
  return getRuleContext<myParser::ArgumentExpressionListContext>(0);
}


size_t myParser::GccAttributeContext::getRuleIndex() const {
  return myParser::RuleGccAttribute;
}

void myParser::GccAttributeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGccAttribute(this);
}

void myParser::GccAttributeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGccAttribute(this);
}

myParser::GccAttributeContext* myParser::gccAttribute() {
  GccAttributeContext *_localctx = _tracker.createInstance<GccAttributeContext>(_ctx, getState());
  enterRule(_localctx, 106, myParser::RuleGccAttribute);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(687);
    _la = _input->LA(1);
    if (_la == 0 || _la == Token::EOF || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 536870915) != 0)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(693);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == myParser::LeftParen) {
      setState(688);
      match(myParser::LeftParen);
      setState(690);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 612507141508431886) != 0 || (((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 1055531215745025) != 0) {
        setState(689);
        argumentExpressionList();
      }
      setState(692);
      match(myParser::RightParen);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NestedParenthesesBlockContext ------------------------------------------------------------------

myParser::NestedParenthesesBlockContext::NestedParenthesesBlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> myParser::NestedParenthesesBlockContext::LeftParen() {
  return getTokens(myParser::LeftParen);
}

tree::TerminalNode* myParser::NestedParenthesesBlockContext::LeftParen(size_t i) {
  return getToken(myParser::LeftParen, i);
}

std::vector<myParser::NestedParenthesesBlockContext *> myParser::NestedParenthesesBlockContext::nestedParenthesesBlock() {
  return getRuleContexts<myParser::NestedParenthesesBlockContext>();
}

myParser::NestedParenthesesBlockContext* myParser::NestedParenthesesBlockContext::nestedParenthesesBlock(size_t i) {
  return getRuleContext<myParser::NestedParenthesesBlockContext>(i);
}

std::vector<tree::TerminalNode *> myParser::NestedParenthesesBlockContext::RightParen() {
  return getTokens(myParser::RightParen);
}

tree::TerminalNode* myParser::NestedParenthesesBlockContext::RightParen(size_t i) {
  return getToken(myParser::RightParen, i);
}


size_t myParser::NestedParenthesesBlockContext::getRuleIndex() const {
  return myParser::RuleNestedParenthesesBlock;
}

void myParser::NestedParenthesesBlockContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNestedParenthesesBlock(this);
}

void myParser::NestedParenthesesBlockContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNestedParenthesesBlock(this);
}

myParser::NestedParenthesesBlockContext* myParser::nestedParenthesesBlock() {
  NestedParenthesesBlockContext *_localctx = _tracker.createInstance<NestedParenthesesBlockContext>(_ctx, getState());
  enterRule(_localctx, 108, myParser::RuleNestedParenthesesBlock);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(702);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -2) != 0 || (((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 1152921504606846973) != 0) {
      setState(700);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case myParser::T__0:
        case myParser::T__1:
        case myParser::T__2:
        case myParser::T__3:
        case myParser::T__4:
        case myParser::T__5:
        case myParser::T__6:
        case myParser::T__7:
        case myParser::T__8:
        case myParser::T__9:
        case myParser::T__10:
        case myParser::T__11:
        case myParser::T__12:
        case myParser::T__13:
        case myParser::T__14:
        case myParser::T__15:
        case myParser::T__16:
        case myParser::T__17:
        case myParser::T__18:
        case myParser::Auto:
        case myParser::Break:
        case myParser::Case:
        case myParser::Char:
        case myParser::Const:
        case myParser::Continue:
        case myParser::Default:
        case myParser::Do:
        case myParser::Double:
        case myParser::Else:
        case myParser::Enum:
        case myParser::Extern:
        case myParser::Float:
        case myParser::For:
        case myParser::Goto:
        case myParser::If:
        case myParser::Inline:
        case myParser::Int:
        case myParser::Long:
        case myParser::Register:
        case myParser::Restrict:
        case myParser::Return:
        case myParser::Short:
        case myParser::Signed:
        case myParser::Sizeof:
        case myParser::Static:
        case myParser::Struct:
        case myParser::Switch:
        case myParser::Typedef:
        case myParser::Union:
        case myParser::Unsigned:
        case myParser::Void:
        case myParser::Volatile:
        case myParser::While:
        case myParser::Alignas:
        case myParser::Alignof:
        case myParser::Atomic:
        case myParser::Bool:
        case myParser::Complex:
        case myParser::Generic:
        case myParser::Imaginary:
        case myParser::Noreturn:
        case myParser::StaticAssert:
        case myParser::ThreadLocal:
        case myParser::LeftBracket:
        case myParser::RightBracket:
        case myParser::LeftBrace:
        case myParser::RightBrace:
        case myParser::Less:
        case myParser::LessEqual:
        case myParser::Greater:
        case myParser::GreaterEqual:
        case myParser::LeftShift:
        case myParser::RightShift:
        case myParser::Plus:
        case myParser::PlusPlus:
        case myParser::Minus:
        case myParser::MinusMinus:
        case myParser::Star:
        case myParser::Div:
        case myParser::Mod:
        case myParser::And:
        case myParser::Or:
        case myParser::AndAnd:
        case myParser::OrOr:
        case myParser::Caret:
        case myParser::Not:
        case myParser::Tilde:
        case myParser::Question:
        case myParser::Colon:
        case myParser::Semi:
        case myParser::Comma:
        case myParser::Assign:
        case myParser::StarAssign:
        case myParser::DivAssign:
        case myParser::ModAssign:
        case myParser::PlusAssign:
        case myParser::MinusAssign:
        case myParser::LeftShiftAssign:
        case myParser::RightShiftAssign:
        case myParser::AndAssign:
        case myParser::XorAssign:
        case myParser::OrAssign:
        case myParser::Equal:
        case myParser::NotEqual:
        case myParser::Arrow:
        case myParser::Dot:
        case myParser::Ellipsis:
        case myParser::Identifier:
        case myParser::Constant:
        case myParser::DigitSequence:
        case myParser::StringLiteral:
        case myParser::ComplexDefine:
        case myParser::IncludeDirective:
        case myParser::AsmBlock:
        case myParser::LineAfterPreprocessing:
        case myParser::LineDirective:
        case myParser::PragmaDirective:
        case myParser::Whitespace:
        case myParser::Newline:
        case myParser::BlockComment:
        case myParser::LineComment: {
          setState(695);
          _la = _input->LA(1);
          if (_la == 0 || _la == Token::EOF || (_la == myParser::LeftParen

          || _la == myParser::RightParen)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          break;
        }

        case myParser::LeftParen: {
          setState(696);
          match(myParser::LeftParen);
          setState(697);
          nestedParenthesesBlock();
          setState(698);
          match(myParser::RightParen);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(704);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PointerContext ------------------------------------------------------------------

myParser::PointerContext::PointerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> myParser::PointerContext::Star() {
  return getTokens(myParser::Star);
}

tree::TerminalNode* myParser::PointerContext::Star(size_t i) {
  return getToken(myParser::Star, i);
}

std::vector<tree::TerminalNode *> myParser::PointerContext::Caret() {
  return getTokens(myParser::Caret);
}

tree::TerminalNode* myParser::PointerContext::Caret(size_t i) {
  return getToken(myParser::Caret, i);
}

std::vector<myParser::TypeQualifierListContext *> myParser::PointerContext::typeQualifierList() {
  return getRuleContexts<myParser::TypeQualifierListContext>();
}

myParser::TypeQualifierListContext* myParser::PointerContext::typeQualifierList(size_t i) {
  return getRuleContext<myParser::TypeQualifierListContext>(i);
}


size_t myParser::PointerContext::getRuleIndex() const {
  return myParser::RulePointer;
}

void myParser::PointerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPointer(this);
}

void myParser::PointerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPointer(this);
}

myParser::PointerContext* myParser::pointer() {
  PointerContext *_localctx = _tracker.createInstance<PointerContext>(_ctx, getState());
  enterRule(_localctx, 110, myParser::RulePointer);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(709); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(705);
      _la = _input->LA(1);
      if (!(_la == myParser::Star

      || _la == myParser::Caret)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(707);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 76562293193703424) != 0) {
        setState(706);
        typeQualifierList();
      }
      setState(711); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == myParser::Star

    || _la == myParser::Caret);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeQualifierListContext ------------------------------------------------------------------

myParser::TypeQualifierListContext::TypeQualifierListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<myParser::TypeQualifierContext *> myParser::TypeQualifierListContext::typeQualifier() {
  return getRuleContexts<myParser::TypeQualifierContext>();
}

myParser::TypeQualifierContext* myParser::TypeQualifierListContext::typeQualifier(size_t i) {
  return getRuleContext<myParser::TypeQualifierContext>(i);
}


size_t myParser::TypeQualifierListContext::getRuleIndex() const {
  return myParser::RuleTypeQualifierList;
}

void myParser::TypeQualifierListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeQualifierList(this);
}

void myParser::TypeQualifierListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeQualifierList(this);
}

myParser::TypeQualifierListContext* myParser::typeQualifierList() {
  TypeQualifierListContext *_localctx = _tracker.createInstance<TypeQualifierListContext>(_ctx, getState());
  enterRule(_localctx, 112, myParser::RuleTypeQualifierList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(714); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(713);
      typeQualifier();
      setState(716); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 76562293193703424) != 0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParameterTypeListContext ------------------------------------------------------------------

myParser::ParameterTypeListContext::ParameterTypeListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

myParser::ParameterListContext* myParser::ParameterTypeListContext::parameterList() {
  return getRuleContext<myParser::ParameterListContext>(0);
}

tree::TerminalNode* myParser::ParameterTypeListContext::Comma() {
  return getToken(myParser::Comma, 0);
}

tree::TerminalNode* myParser::ParameterTypeListContext::Ellipsis() {
  return getToken(myParser::Ellipsis, 0);
}


size_t myParser::ParameterTypeListContext::getRuleIndex() const {
  return myParser::RuleParameterTypeList;
}

void myParser::ParameterTypeListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParameterTypeList(this);
}

void myParser::ParameterTypeListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParameterTypeList(this);
}

myParser::ParameterTypeListContext* myParser::parameterTypeList() {
  ParameterTypeListContext *_localctx = _tracker.createInstance<ParameterTypeListContext>(_ctx, getState());
  enterRule(_localctx, 114, myParser::RuleParameterTypeList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(718);
    parameterList();
    setState(721);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == myParser::Comma) {
      setState(719);
      match(myParser::Comma);
      setState(720);
      match(myParser::Ellipsis);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParameterListContext ------------------------------------------------------------------

myParser::ParameterListContext::ParameterListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<myParser::ParameterDeclarationContext *> myParser::ParameterListContext::parameterDeclaration() {
  return getRuleContexts<myParser::ParameterDeclarationContext>();
}

myParser::ParameterDeclarationContext* myParser::ParameterListContext::parameterDeclaration(size_t i) {
  return getRuleContext<myParser::ParameterDeclarationContext>(i);
}

std::vector<tree::TerminalNode *> myParser::ParameterListContext::Comma() {
  return getTokens(myParser::Comma);
}

tree::TerminalNode* myParser::ParameterListContext::Comma(size_t i) {
  return getToken(myParser::Comma, i);
}


size_t myParser::ParameterListContext::getRuleIndex() const {
  return myParser::RuleParameterList;
}

void myParser::ParameterListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParameterList(this);
}

void myParser::ParameterListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParameterList(this);
}

myParser::ParameterListContext* myParser::parameterList() {
  ParameterListContext *_localctx = _tracker.createInstance<ParameterListContext>(_ctx, getState());
  enterRule(_localctx, 116, myParser::RuleParameterList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(723);
    parameterDeclaration();
    setState(728);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 76, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(724);
        match(myParser::Comma);
        setState(725);
        parameterDeclaration(); 
      }
      setState(730);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 76, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParameterDeclarationContext ------------------------------------------------------------------

myParser::ParameterDeclarationContext::ParameterDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

myParser::DeclarationSpecifiersContext* myParser::ParameterDeclarationContext::declarationSpecifiers() {
  return getRuleContext<myParser::DeclarationSpecifiersContext>(0);
}

myParser::DeclaratorContext* myParser::ParameterDeclarationContext::declarator() {
  return getRuleContext<myParser::DeclaratorContext>(0);
}

myParser::DeclarationSpecifiers2Context* myParser::ParameterDeclarationContext::declarationSpecifiers2() {
  return getRuleContext<myParser::DeclarationSpecifiers2Context>(0);
}

myParser::AbstractDeclaratorContext* myParser::ParameterDeclarationContext::abstractDeclarator() {
  return getRuleContext<myParser::AbstractDeclaratorContext>(0);
}


size_t myParser::ParameterDeclarationContext::getRuleIndex() const {
  return myParser::RuleParameterDeclaration;
}

void myParser::ParameterDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParameterDeclaration(this);
}

void myParser::ParameterDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParameterDeclaration(this);
}

myParser::ParameterDeclarationContext* myParser::parameterDeclaration() {
  ParameterDeclarationContext *_localctx = _tracker.createInstance<ParameterDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 118, myParser::RuleParameterDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(738);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 78, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(731);
      declarationSpecifiers();
      setState(732);
      declarator();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(734);
      declarationSpecifiers2();
      setState(736);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 8454149) != 0) {
        setState(735);
        abstractDeclarator();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdentifierListContext ------------------------------------------------------------------

myParser::IdentifierListContext::IdentifierListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> myParser::IdentifierListContext::Identifier() {
  return getTokens(myParser::Identifier);
}

tree::TerminalNode* myParser::IdentifierListContext::Identifier(size_t i) {
  return getToken(myParser::Identifier, i);
}

std::vector<tree::TerminalNode *> myParser::IdentifierListContext::Comma() {
  return getTokens(myParser::Comma);
}

tree::TerminalNode* myParser::IdentifierListContext::Comma(size_t i) {
  return getToken(myParser::Comma, i);
}


size_t myParser::IdentifierListContext::getRuleIndex() const {
  return myParser::RuleIdentifierList;
}

void myParser::IdentifierListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIdentifierList(this);
}

void myParser::IdentifierListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIdentifierList(this);
}

myParser::IdentifierListContext* myParser::identifierList() {
  IdentifierListContext *_localctx = _tracker.createInstance<IdentifierListContext>(_ctx, getState());
  enterRule(_localctx, 120, myParser::RuleIdentifierList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(740);
    match(myParser::Identifier);
    setState(745);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == myParser::Comma) {
      setState(741);
      match(myParser::Comma);
      setState(742);
      match(myParser::Identifier);
      setState(747);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeNameContext ------------------------------------------------------------------

myParser::TypeNameContext::TypeNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

myParser::SpecifierQualifierListContext* myParser::TypeNameContext::specifierQualifierList() {
  return getRuleContext<myParser::SpecifierQualifierListContext>(0);
}

myParser::AbstractDeclaratorContext* myParser::TypeNameContext::abstractDeclarator() {
  return getRuleContext<myParser::AbstractDeclaratorContext>(0);
}


size_t myParser::TypeNameContext::getRuleIndex() const {
  return myParser::RuleTypeName;
}

void myParser::TypeNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeName(this);
}

void myParser::TypeNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeName(this);
}

myParser::TypeNameContext* myParser::typeName() {
  TypeNameContext *_localctx = _tracker.createInstance<TypeNameContext>(_ctx, getState());
  enterRule(_localctx, 122, myParser::RuleTypeName);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(748);
    specifierQualifierList();
    setState(750);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 8454149) != 0) {
      setState(749);
      abstractDeclarator();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AbstractDeclaratorContext ------------------------------------------------------------------

myParser::AbstractDeclaratorContext::AbstractDeclaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

myParser::PointerContext* myParser::AbstractDeclaratorContext::pointer() {
  return getRuleContext<myParser::PointerContext>(0);
}

myParser::DirectAbstractDeclaratorContext* myParser::AbstractDeclaratorContext::directAbstractDeclarator() {
  return getRuleContext<myParser::DirectAbstractDeclaratorContext>(0);
}

std::vector<myParser::GccDeclaratorExtensionContext *> myParser::AbstractDeclaratorContext::gccDeclaratorExtension() {
  return getRuleContexts<myParser::GccDeclaratorExtensionContext>();
}

myParser::GccDeclaratorExtensionContext* myParser::AbstractDeclaratorContext::gccDeclaratorExtension(size_t i) {
  return getRuleContext<myParser::GccDeclaratorExtensionContext>(i);
}


size_t myParser::AbstractDeclaratorContext::getRuleIndex() const {
  return myParser::RuleAbstractDeclarator;
}

void myParser::AbstractDeclaratorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAbstractDeclarator(this);
}

void myParser::AbstractDeclaratorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAbstractDeclarator(this);
}

myParser::AbstractDeclaratorContext* myParser::abstractDeclarator() {
  AbstractDeclaratorContext *_localctx = _tracker.createInstance<AbstractDeclaratorContext>(_ctx, getState());
  enterRule(_localctx, 124, myParser::RuleAbstractDeclarator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(763);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 83, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(752);
      pointer();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(754);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == myParser::Star

      || _la == myParser::Caret) {
        setState(753);
        pointer();
      }
      setState(756);
      directAbstractDeclarator(0);
      setState(760);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == myParser::T__15

      || _la == myParser::T__16) {
        setState(757);
        gccDeclaratorExtension();
        setState(762);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DirectAbstractDeclaratorContext ------------------------------------------------------------------

myParser::DirectAbstractDeclaratorContext::DirectAbstractDeclaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* myParser::DirectAbstractDeclaratorContext::LeftParen() {
  return getToken(myParser::LeftParen, 0);
}

myParser::AbstractDeclaratorContext* myParser::DirectAbstractDeclaratorContext::abstractDeclarator() {
  return getRuleContext<myParser::AbstractDeclaratorContext>(0);
}

tree::TerminalNode* myParser::DirectAbstractDeclaratorContext::RightParen() {
  return getToken(myParser::RightParen, 0);
}

std::vector<myParser::GccDeclaratorExtensionContext *> myParser::DirectAbstractDeclaratorContext::gccDeclaratorExtension() {
  return getRuleContexts<myParser::GccDeclaratorExtensionContext>();
}

myParser::GccDeclaratorExtensionContext* myParser::DirectAbstractDeclaratorContext::gccDeclaratorExtension(size_t i) {
  return getRuleContext<myParser::GccDeclaratorExtensionContext>(i);
}

tree::TerminalNode* myParser::DirectAbstractDeclaratorContext::LeftBracket() {
  return getToken(myParser::LeftBracket, 0);
}

tree::TerminalNode* myParser::DirectAbstractDeclaratorContext::RightBracket() {
  return getToken(myParser::RightBracket, 0);
}

myParser::TypeQualifierListContext* myParser::DirectAbstractDeclaratorContext::typeQualifierList() {
  return getRuleContext<myParser::TypeQualifierListContext>(0);
}

myParser::AssignmentExpressionContext* myParser::DirectAbstractDeclaratorContext::assignmentExpression() {
  return getRuleContext<myParser::AssignmentExpressionContext>(0);
}

tree::TerminalNode* myParser::DirectAbstractDeclaratorContext::Static() {
  return getToken(myParser::Static, 0);
}

tree::TerminalNode* myParser::DirectAbstractDeclaratorContext::Star() {
  return getToken(myParser::Star, 0);
}

myParser::ParameterTypeListContext* myParser::DirectAbstractDeclaratorContext::parameterTypeList() {
  return getRuleContext<myParser::ParameterTypeListContext>(0);
}

myParser::DirectAbstractDeclaratorContext* myParser::DirectAbstractDeclaratorContext::directAbstractDeclarator() {
  return getRuleContext<myParser::DirectAbstractDeclaratorContext>(0);
}


size_t myParser::DirectAbstractDeclaratorContext::getRuleIndex() const {
  return myParser::RuleDirectAbstractDeclarator;
}

void myParser::DirectAbstractDeclaratorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDirectAbstractDeclarator(this);
}

void myParser::DirectAbstractDeclaratorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDirectAbstractDeclarator(this);
}


myParser::DirectAbstractDeclaratorContext* myParser::directAbstractDeclarator() {
   return directAbstractDeclarator(0);
}

myParser::DirectAbstractDeclaratorContext* myParser::directAbstractDeclarator(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  myParser::DirectAbstractDeclaratorContext *_localctx = _tracker.createInstance<DirectAbstractDeclaratorContext>(_ctx, parentState);
  myParser::DirectAbstractDeclaratorContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 126;
  enterRecursionRule(_localctx, 126, myParser::RuleDirectAbstractDeclarator, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(811);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 90, _ctx)) {
    case 1: {
      setState(766);
      match(myParser::LeftParen);
      setState(767);
      abstractDeclarator();
      setState(768);
      match(myParser::RightParen);
      setState(772);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 84, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(769);
          gccDeclaratorExtension(); 
        }
        setState(774);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 84, _ctx);
      }
      break;
    }

    case 2: {
      setState(775);
      match(myParser::LeftBracket);
      setState(777);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 76562293193703424) != 0) {
        setState(776);
        typeQualifierList();
      }
      setState(780);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 612507141508431886) != 0 || (((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 1055531215745025) != 0) {
        setState(779);
        assignmentExpression();
      }
      setState(782);
      match(myParser::RightBracket);
      break;
    }

    case 3: {
      setState(783);
      match(myParser::LeftBracket);
      setState(784);
      match(myParser::Static);
      setState(786);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 76562293193703424) != 0) {
        setState(785);
        typeQualifierList();
      }
      setState(788);
      assignmentExpression();
      setState(789);
      match(myParser::RightBracket);
      break;
    }

    case 4: {
      setState(791);
      match(myParser::LeftBracket);
      setState(792);
      typeQualifierList();
      setState(793);
      match(myParser::Static);
      setState(794);
      assignmentExpression();
      setState(795);
      match(myParser::RightBracket);
      break;
    }

    case 5: {
      setState(797);
      match(myParser::LeftBracket);
      setState(798);
      match(myParser::Star);
      setState(799);
      match(myParser::RightBracket);
      break;
    }

    case 6: {
      setState(800);
      match(myParser::LeftParen);
      setState(802);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -6386264861217519630) != 0 || _la == myParser::Identifier) {
        setState(801);
        parameterTypeList();
      }
      setState(804);
      match(myParser::RightParen);
      setState(808);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 89, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(805);
          gccDeclaratorExtension(); 
        }
        setState(810);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 89, _ctx);
      }
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(856);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 97, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(854);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 96, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<DirectAbstractDeclaratorContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleDirectAbstractDeclarator);
          setState(813);

          if (!(precpred(_ctx, 5))) throw FailedPredicateException(this, "precpred(_ctx, 5)");
          setState(814);
          match(myParser::LeftBracket);
          setState(816);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 76562293193703424) != 0) {
            setState(815);
            typeQualifierList();
          }
          setState(819);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 612507141508431886) != 0 || (((_la - 64) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 64)) & 1055531215745025) != 0) {
            setState(818);
            assignmentExpression();
          }
          setState(821);
          match(myParser::RightBracket);
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<DirectAbstractDeclaratorContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleDirectAbstractDeclarator);
          setState(822);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(823);
          match(myParser::LeftBracket);
          setState(824);
          match(myParser::Static);
          setState(826);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 76562293193703424) != 0) {
            setState(825);
            typeQualifierList();
          }
          setState(828);
          assignmentExpression();
          setState(829);
          match(myParser::RightBracket);
          break;
        }

        case 3: {
          _localctx = _tracker.createInstance<DirectAbstractDeclaratorContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleDirectAbstractDeclarator);
          setState(831);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(832);
          match(myParser::LeftBracket);
          setState(833);
          typeQualifierList();
          setState(834);
          match(myParser::Static);
          setState(835);
          assignmentExpression();
          setState(836);
          match(myParser::RightBracket);
          break;
        }

        case 4: {
          _localctx = _tracker.createInstance<DirectAbstractDeclaratorContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleDirectAbstractDeclarator);
          setState(838);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(839);
          match(myParser::LeftBracket);
          setState(840);
          match(myParser::Star);
          setState(841);
          match(myParser::RightBracket);
          break;
        }

        case 5: {
          _localctx = _tracker.createInstance<DirectAbstractDeclaratorContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleDirectAbstractDeclarator);
          setState(842);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(843);
          match(myParser::LeftParen);
          setState(845);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & -6386264861217519630) != 0 || _la == myParser::Identifier) {
            setState(844);
            parameterTypeList();
          }
          setState(847);
          match(myParser::RightParen);
          setState(851);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 95, _ctx);
          while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
            if (alt == 1) {
              setState(848);
              gccDeclaratorExtension(); 
            }
            setState(853);
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 95, _ctx);
          }
          break;
        }

        default:
          break;
        } 
      }
      setState(858);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 97, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- TypedefNameContext ------------------------------------------------------------------

myParser::TypedefNameContext::TypedefNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* myParser::TypedefNameContext::Identifier() {
  return getToken(myParser::Identifier, 0);
}


size_t myParser::TypedefNameContext::getRuleIndex() const {
  return myParser::RuleTypedefName;
}

void myParser::TypedefNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypedefName(this);
}

void myParser::TypedefNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypedefName(this);
}

myParser::TypedefNameContext* myParser::typedefName() {
  TypedefNameContext *_localctx = _tracker.createInstance<TypedefNameContext>(_ctx, getState());
  enterRule(_localctx, 128, myParser::RuleTypedefName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(859);
    match(myParser::Identifier);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InitializerContext ------------------------------------------------------------------

myParser::InitializerContext::InitializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

myParser::AssignmentExpressionContext* myParser::InitializerContext::assignmentExpression() {
  return getRuleContext<myParser::AssignmentExpressionContext>(0);
}

tree::TerminalNode* myParser::InitializerContext::LeftBrace() {
  return getToken(myParser::LeftBrace, 0);
}

myParser::InitializerListContext* myParser::InitializerContext::initializerList() {
  return getRuleContext<myParser::InitializerListContext>(0);
}

tree::TerminalNode* myParser::InitializerContext::RightBrace() {
  return getToken(myParser::RightBrace, 0);
}

tree::TerminalNode* myParser::InitializerContext::Comma() {
  return getToken(myParser::Comma, 0);
}


size_t myParser::InitializerContext::getRuleIndex() const {
  return myParser::RuleInitializer;
}

void myParser::InitializerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInitializer(this);
}

void myParser::InitializerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInitializer(this);
}

myParser::InitializerContext* myParser::initializer() {
  InitializerContext *_localctx = _tracker.createInstance<InitializerContext>(_ctx, getState());
  enterRule(_localctx, 130, myParser::RuleInitializer);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(869);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case myParser::T__0:
      case myParser::T__1:
      case myParser::T__2:
      case myParser::Sizeof:
      case myParser::Alignof:
      case myParser::Generic:
      case myParser::LeftParen:
      case myParser::Plus:
      case myParser::PlusPlus:
      case myParser::Minus:
      case myParser::MinusMinus:
      case myParser::Star:
      case myParser::And:
      case myParser::AndAnd:
      case myParser::Not:
      case myParser::Tilde:
      case myParser::Identifier:
      case myParser::Constant:
      case myParser::DigitSequence:
      case myParser::StringLiteral: {
        enterOuterAlt(_localctx, 1);
        setState(861);
        assignmentExpression();
        break;
      }

      case myParser::LeftBrace: {
        enterOuterAlt(_localctx, 2);
        setState(862);
        match(myParser::LeftBrace);
        setState(863);
        initializerList();
        setState(865);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == myParser::Comma) {
          setState(864);
          match(myParser::Comma);
        }
        setState(867);
        match(myParser::RightBrace);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InitializerListContext ------------------------------------------------------------------

myParser::InitializerListContext::InitializerListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<myParser::InitializerContext *> myParser::InitializerListContext::initializer() {
  return getRuleContexts<myParser::InitializerContext>();
}

myParser::InitializerContext* myParser::InitializerListContext::initializer(size_t i) {
  return getRuleContext<myParser::InitializerContext>(i);
}

std::vector<myParser::DesignationContext *> myParser::InitializerListContext::designation() {
  return getRuleContexts<myParser::DesignationContext>();
}

myParser::DesignationContext* myParser::InitializerListContext::designation(size_t i) {
  return getRuleContext<myParser::DesignationContext>(i);
}

std::vector<tree::TerminalNode *> myParser::InitializerListContext::Comma() {
  return getTokens(myParser::Comma);
}

tree::TerminalNode* myParser::InitializerListContext::Comma(size_t i) {
  return getToken(myParser::Comma, i);
}


size_t myParser::InitializerListContext::getRuleIndex() const {
  return myParser::RuleInitializerList;
}

void myParser::InitializerListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInitializerList(this);
}

void myParser::InitializerListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInitializerList(this);
}

myParser::InitializerListContext* myParser::initializerList() {
  InitializerListContext *_localctx = _tracker.createInstance<InitializerListContext>(_ctx, getState());
  enterRule(_localctx, 132, myParser::RuleInitializerList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(872);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == myParser::LeftBracket

    || _la == myParser::Dot) {
      setState(871);
      designation();
    }
    setState(874);
    initializer();
    setState(882);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 102, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(875);
        match(myParser::Comma);
        setState(877);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == myParser::LeftBracket

        || _la == myParser::Dot) {
          setState(876);
          designation();
        }
        setState(879);
        initializer(); 
      }
      setState(884);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 102, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DesignationContext ------------------------------------------------------------------

myParser::DesignationContext::DesignationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

myParser::DesignatorListContext* myParser::DesignationContext::designatorList() {
  return getRuleContext<myParser::DesignatorListContext>(0);
}

tree::TerminalNode* myParser::DesignationContext::Assign() {
  return getToken(myParser::Assign, 0);
}


size_t myParser::DesignationContext::getRuleIndex() const {
  return myParser::RuleDesignation;
}

void myParser::DesignationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDesignation(this);
}

void myParser::DesignationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDesignation(this);
}

myParser::DesignationContext* myParser::designation() {
  DesignationContext *_localctx = _tracker.createInstance<DesignationContext>(_ctx, getState());
  enterRule(_localctx, 134, myParser::RuleDesignation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(885);
    designatorList();
    setState(886);
    match(myParser::Assign);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DesignatorListContext ------------------------------------------------------------------

myParser::DesignatorListContext::DesignatorListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<myParser::DesignatorContext *> myParser::DesignatorListContext::designator() {
  return getRuleContexts<myParser::DesignatorContext>();
}

myParser::DesignatorContext* myParser::DesignatorListContext::designator(size_t i) {
  return getRuleContext<myParser::DesignatorContext>(i);
}


size_t myParser::DesignatorListContext::getRuleIndex() const {
  return myParser::RuleDesignatorList;
}

void myParser::DesignatorListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDesignatorList(this);
}

void myParser::DesignatorListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDesignatorList(this);
}

myParser::DesignatorListContext* myParser::designatorList() {
  DesignatorListContext *_localctx = _tracker.createInstance<DesignatorListContext>(_ctx, getState());
  enterRule(_localctx, 136, myParser::RuleDesignatorList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(889); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(888);
      designator();
      setState(891); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == myParser::LeftBracket

    || _la == myParser::Dot);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DesignatorContext ------------------------------------------------------------------

myParser::DesignatorContext::DesignatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* myParser::DesignatorContext::LeftBracket() {
  return getToken(myParser::LeftBracket, 0);
}

myParser::ConstantExpressionContext* myParser::DesignatorContext::constantExpression() {
  return getRuleContext<myParser::ConstantExpressionContext>(0);
}

tree::TerminalNode* myParser::DesignatorContext::RightBracket() {
  return getToken(myParser::RightBracket, 0);
}

tree::TerminalNode* myParser::DesignatorContext::Dot() {
  return getToken(myParser::Dot, 0);
}

tree::TerminalNode* myParser::DesignatorContext::Identifier() {
  return getToken(myParser::Identifier, 0);
}


size_t myParser::DesignatorContext::getRuleIndex() const {
  return myParser::RuleDesignator;
}

void myParser::DesignatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDesignator(this);
}

void myParser::DesignatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDesignator(this);
}

myParser::DesignatorContext* myParser::designator() {
  DesignatorContext *_localctx = _tracker.createInstance<DesignatorContext>(_ctx, getState());
  enterRule(_localctx, 138, myParser::RuleDesignator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(899);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case myParser::LeftBracket: {
        enterOuterAlt(_localctx, 1);
        setState(893);
        match(myParser::LeftBracket);
        setState(894);
        constantExpression();
        setState(895);
        match(myParser::RightBracket);
        break;
      }

      case myParser::Dot: {
        enterOuterAlt(_localctx, 2);
        setState(897);
        match(myParser::Dot);
        setState(898);
        match(myParser::Identifier);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StaticAssertDeclarationContext ------------------------------------------------------------------

myParser::StaticAssertDeclarationContext::StaticAssertDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* myParser::StaticAssertDeclarationContext::StaticAssert() {
  return getToken(myParser::StaticAssert, 0);
}

tree::TerminalNode* myParser::StaticAssertDeclarationContext::LeftParen() {
  return getToken(myParser::LeftParen, 0);
}

myParser::ConstantExpressionContext* myParser::StaticAssertDeclarationContext::constantExpression() {
  return getRuleContext<myParser::ConstantExpressionContext>(0);
}

tree::TerminalNode* myParser::StaticAssertDeclarationContext::Comma() {
  return getToken(myParser::Comma, 0);
}

tree::TerminalNode* myParser::StaticAssertDeclarationContext::RightParen() {
  return getToken(myParser::RightParen, 0);
}

tree::TerminalNode* myParser::StaticAssertDeclarationContext::Semi() {
  return getToken(myParser::Semi, 0);
}

std::vector<tree::TerminalNode *> myParser::StaticAssertDeclarationContext::StringLiteral() {
  return getTokens(myParser::StringLiteral);
}

tree::TerminalNode* myParser::StaticAssertDeclarationContext::StringLiteral(size_t i) {
  return getToken(myParser::StringLiteral, i);
}


size_t myParser::StaticAssertDeclarationContext::getRuleIndex() const {
  return myParser::RuleStaticAssertDeclaration;
}

void myParser::StaticAssertDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStaticAssertDeclaration(this);
}

void myParser::StaticAssertDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStaticAssertDeclaration(this);
}

myParser::StaticAssertDeclarationContext* myParser::staticAssertDeclaration() {
  StaticAssertDeclarationContext *_localctx = _tracker.createInstance<StaticAssertDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 140, myParser::RuleStaticAssertDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(901);
    match(myParser::StaticAssert);
    setState(902);
    match(myParser::LeftParen);
    setState(903);
    constantExpression();
    setState(904);
    match(myParser::Comma);
    setState(906); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(905);
      match(myParser::StringLiteral);
      setState(908); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == myParser::StringLiteral);
    setState(910);
    match(myParser::RightParen);
    setState(911);
    match(myParser::Semi);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementContext ------------------------------------------------------------------

myParser::StatementContext::StatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

myParser::LabeledStatementContext* myParser::StatementContext::labeledStatement() {
  return getRuleContext<myParser::LabeledStatementContext>(0);
}

myParser::CompoundStatementContext* myParser::StatementContext::compoundStatement() {
  return getRuleContext<myParser::CompoundStatementContext>(0);
}

myParser::ExpressionStatementContext* myParser::StatementContext::expressionStatement() {
  return getRuleContext<myParser::ExpressionStatementContext>(0);
}

myParser::SelectionStatementContext* myParser::StatementContext::selectionStatement() {
  return getRuleContext<myParser::SelectionStatementContext>(0);
}

myParser::IterationStatementContext* myParser::StatementContext::iterationStatement() {
  return getRuleContext<myParser::IterationStatementContext>(0);
}

myParser::JumpStatementContext* myParser::StatementContext::jumpStatement() {
  return getRuleContext<myParser::JumpStatementContext>(0);
}

tree::TerminalNode* myParser::StatementContext::LeftParen() {
  return getToken(myParser::LeftParen, 0);
}

tree::TerminalNode* myParser::StatementContext::RightParen() {
  return getToken(myParser::RightParen, 0);
}

tree::TerminalNode* myParser::StatementContext::Semi() {
  return getToken(myParser::Semi, 0);
}

tree::TerminalNode* myParser::StatementContext::Volatile() {
  return getToken(myParser::Volatile, 0);
}

std::vector<myParser::LogicalOrExpressionContext *> myParser::StatementContext::logicalOrExpression() {
  return getRuleContexts<myParser::LogicalOrExpressionContext>();
}

myParser::LogicalOrExpressionContext* myParser::StatementContext::logicalOrExpression(size_t i) {
  return getRuleContext<myParser::LogicalOrExpressionContext>(i);
}

std::vector<tree::TerminalNode *> myParser::StatementContext::Colon() {
  return getTokens(myParser::Colon);
}

tree::TerminalNode* myParser::StatementContext::Colon(size_t i) {
  return getToken(myParser::Colon, i);
}

std::vector<tree::TerminalNode *> myParser::StatementContext::Comma() {
  return getTokens(myParser::Comma);
}

tree::TerminalNode* myParser::StatementContext::Comma(size_t i) {
  return getToken(myParser::Comma, i);
}


size_t myParser::StatementContext::getRuleIndex() const {
  return myParser::RuleStatement;
}

void myParser::StatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatement(this);
}

void myParser::StatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatement(this);
}

myParser::StatementContext* myParser::statement() {
  StatementContext *_localctx = _tracker.createInstance<StatementContext>(_ctx, getState());
  enterRule(_localctx, 142, myParser::RuleStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(950);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 111, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(913);
      labeledStatement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(914);
      compoundStatement();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(915);
      expressionStatement();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(916);
      selectionStatement();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(917);
      iterationStatement();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(918);
      jumpStatement();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(919);
      _la = _input->LA(1);
      if (!(_la == myParser::T__15

      || _la == myParser::T__17)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(920);
      _la = _input->LA(1);
      if (!(_la == myParser::T__18

      || _la == myParser::Volatile)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(921);
      match(myParser::LeftParen);
      setState(930);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 612507141508431886) != 0 || (((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 1055531215745025) != 0) {
        setState(922);
        logicalOrExpression();
        setState(927);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == myParser::Comma) {
          setState(923);
          match(myParser::Comma);
          setState(924);
          logicalOrExpression();
          setState(929);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
      }
      setState(945);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == myParser::Colon) {
        setState(932);
        match(myParser::Colon);
        setState(941);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 612507141508431886) != 0 || (((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & 1055531215745025) != 0) {
          setState(933);
          logicalOrExpression();
          setState(938);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == myParser::Comma) {
            setState(934);
            match(myParser::Comma);
            setState(935);
            logicalOrExpression();
            setState(940);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
        }
        setState(947);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(948);
      match(myParser::RightParen);
      setState(949);
      match(myParser::Semi);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LabeledStatementContext ------------------------------------------------------------------

myParser::LabeledStatementContext::LabeledStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* myParser::LabeledStatementContext::Identifier() {
  return getToken(myParser::Identifier, 0);
}

tree::TerminalNode* myParser::LabeledStatementContext::Colon() {
  return getToken(myParser::Colon, 0);
}

myParser::StatementContext* myParser::LabeledStatementContext::statement() {
  return getRuleContext<myParser::StatementContext>(0);
}

tree::TerminalNode* myParser::LabeledStatementContext::Case() {
  return getToken(myParser::Case, 0);
}

myParser::ConstantExpressionContext* myParser::LabeledStatementContext::constantExpression() {
  return getRuleContext<myParser::ConstantExpressionContext>(0);
}

tree::TerminalNode* myParser::LabeledStatementContext::Default() {
  return getToken(myParser::Default, 0);
}


size_t myParser::LabeledStatementContext::getRuleIndex() const {
  return myParser::RuleLabeledStatement;
}

void myParser::LabeledStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLabeledStatement(this);
}

void myParser::LabeledStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLabeledStatement(this);
}

myParser::LabeledStatementContext* myParser::labeledStatement() {
  LabeledStatementContext *_localctx = _tracker.createInstance<LabeledStatementContext>(_ctx, getState());
  enterRule(_localctx, 144, myParser::RuleLabeledStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(963);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case myParser::Identifier: {
        enterOuterAlt(_localctx, 1);
        setState(952);
        match(myParser::Identifier);
        setState(953);
        match(myParser::Colon);
        setState(954);
        statement();
        break;
      }

      case myParser::Case: {
        enterOuterAlt(_localctx, 2);
        setState(955);
        match(myParser::Case);
        setState(956);
        constantExpression();
        setState(957);
        match(myParser::Colon);
        setState(958);
        statement();
        break;
      }

      case myParser::Default: {
        enterOuterAlt(_localctx, 3);
        setState(960);
        match(myParser::Default);
        setState(961);
        match(myParser::Colon);
        setState(962);
        statement();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CompoundStatementContext ------------------------------------------------------------------

myParser::CompoundStatementContext::CompoundStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* myParser::CompoundStatementContext::LeftBrace() {
  return getToken(myParser::LeftBrace, 0);
}

tree::TerminalNode* myParser::CompoundStatementContext::RightBrace() {
  return getToken(myParser::RightBrace, 0);
}

myParser::BlockItemListContext* myParser::CompoundStatementContext::blockItemList() {
  return getRuleContext<myParser::BlockItemListContext>(0);
}


size_t myParser::CompoundStatementContext::getRuleIndex() const {
  return myParser::RuleCompoundStatement;
}

void myParser::CompoundStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCompoundStatement(this);
}

void myParser::CompoundStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCompoundStatement(this);
}

myParser::CompoundStatementContext* myParser::compoundStatement() {
  CompoundStatementContext *_localctx = _tracker.createInstance<CompoundStatementContext>(_ctx, getState());
  enterRule(_localctx, 146, myParser::RuleCompoundStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(965);
    match(myParser::LeftBrace);
    setState(967);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -1152921505144305666) != 0 || (((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 1055531484180497) != 0) {
      setState(966);
      blockItemList();
    }
    setState(969);
    match(myParser::RightBrace);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlockItemListContext ------------------------------------------------------------------

myParser::BlockItemListContext::BlockItemListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<myParser::BlockItemContext *> myParser::BlockItemListContext::blockItem() {
  return getRuleContexts<myParser::BlockItemContext>();
}

myParser::BlockItemContext* myParser::BlockItemListContext::blockItem(size_t i) {
  return getRuleContext<myParser::BlockItemContext>(i);
}


size_t myParser::BlockItemListContext::getRuleIndex() const {
  return myParser::RuleBlockItemList;
}

void myParser::BlockItemListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBlockItemList(this);
}

void myParser::BlockItemListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBlockItemList(this);
}

myParser::BlockItemListContext* myParser::blockItemList() {
  BlockItemListContext *_localctx = _tracker.createInstance<BlockItemListContext>(_ctx, getState());
  enterRule(_localctx, 148, myParser::RuleBlockItemList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(972); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(971);
      blockItem();
      setState(974); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -1152921505144305666) != 0 || (((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 1055531484180497) != 0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlockItemContext ------------------------------------------------------------------

myParser::BlockItemContext::BlockItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

myParser::StatementContext* myParser::BlockItemContext::statement() {
  return getRuleContext<myParser::StatementContext>(0);
}

myParser::DeclarationContext* myParser::BlockItemContext::declaration() {
  return getRuleContext<myParser::DeclarationContext>(0);
}


size_t myParser::BlockItemContext::getRuleIndex() const {
  return myParser::RuleBlockItem;
}

void myParser::BlockItemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBlockItem(this);
}

void myParser::BlockItemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBlockItem(this);
}

myParser::BlockItemContext* myParser::blockItem() {
  BlockItemContext *_localctx = _tracker.createInstance<BlockItemContext>(_ctx, getState());
  enterRule(_localctx, 150, myParser::RuleBlockItem);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(978);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 115, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(976);
      statement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(977);
      declaration();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionStatementContext ------------------------------------------------------------------

myParser::ExpressionStatementContext::ExpressionStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* myParser::ExpressionStatementContext::Semi() {
  return getToken(myParser::Semi, 0);
}

myParser::ExpressionContext* myParser::ExpressionStatementContext::expression() {
  return getRuleContext<myParser::ExpressionContext>(0);
}


size_t myParser::ExpressionStatementContext::getRuleIndex() const {
  return myParser::RuleExpressionStatement;
}

void myParser::ExpressionStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpressionStatement(this);
}

void myParser::ExpressionStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpressionStatement(this);
}

myParser::ExpressionStatementContext* myParser::expressionStatement() {
  ExpressionStatementContext *_localctx = _tracker.createInstance<ExpressionStatementContext>(_ctx, getState());
  enterRule(_localctx, 152, myParser::RuleExpressionStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(981);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 612507141508431886) != 0 || (((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 1055531215745025) != 0) {
      setState(980);
      expression();
    }
    setState(983);
    match(myParser::Semi);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectionStatementContext ------------------------------------------------------------------

myParser::SelectionStatementContext::SelectionStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* myParser::SelectionStatementContext::If() {
  return getToken(myParser::If, 0);
}

tree::TerminalNode* myParser::SelectionStatementContext::LeftParen() {
  return getToken(myParser::LeftParen, 0);
}

myParser::ExpressionContext* myParser::SelectionStatementContext::expression() {
  return getRuleContext<myParser::ExpressionContext>(0);
}

tree::TerminalNode* myParser::SelectionStatementContext::RightParen() {
  return getToken(myParser::RightParen, 0);
}

std::vector<myParser::StatementContext *> myParser::SelectionStatementContext::statement() {
  return getRuleContexts<myParser::StatementContext>();
}

myParser::StatementContext* myParser::SelectionStatementContext::statement(size_t i) {
  return getRuleContext<myParser::StatementContext>(i);
}

tree::TerminalNode* myParser::SelectionStatementContext::Else() {
  return getToken(myParser::Else, 0);
}

tree::TerminalNode* myParser::SelectionStatementContext::Switch() {
  return getToken(myParser::Switch, 0);
}


size_t myParser::SelectionStatementContext::getRuleIndex() const {
  return myParser::RuleSelectionStatement;
}

void myParser::SelectionStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelectionStatement(this);
}

void myParser::SelectionStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelectionStatement(this);
}

myParser::SelectionStatementContext* myParser::selectionStatement() {
  SelectionStatementContext *_localctx = _tracker.createInstance<SelectionStatementContext>(_ctx, getState());
  enterRule(_localctx, 154, myParser::RuleSelectionStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1000);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case myParser::If: {
        enterOuterAlt(_localctx, 1);
        setState(985);
        match(myParser::If);
        setState(986);
        match(myParser::LeftParen);
        setState(987);
        expression();
        setState(988);
        match(myParser::RightParen);
        setState(989);
        statement();
        setState(992);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 117, _ctx)) {
        case 1: {
          setState(990);
          match(myParser::Else);
          setState(991);
          statement();
          break;
        }

        default:
          break;
        }
        break;
      }

      case myParser::Switch: {
        enterOuterAlt(_localctx, 2);
        setState(994);
        match(myParser::Switch);
        setState(995);
        match(myParser::LeftParen);
        setState(996);
        expression();
        setState(997);
        match(myParser::RightParen);
        setState(998);
        statement();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IterationStatementContext ------------------------------------------------------------------

myParser::IterationStatementContext::IterationStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* myParser::IterationStatementContext::While() {
  return getToken(myParser::While, 0);
}

tree::TerminalNode* myParser::IterationStatementContext::LeftParen() {
  return getToken(myParser::LeftParen, 0);
}

myParser::ExpressionContext* myParser::IterationStatementContext::expression() {
  return getRuleContext<myParser::ExpressionContext>(0);
}

tree::TerminalNode* myParser::IterationStatementContext::RightParen() {
  return getToken(myParser::RightParen, 0);
}

myParser::StatementContext* myParser::IterationStatementContext::statement() {
  return getRuleContext<myParser::StatementContext>(0);
}

tree::TerminalNode* myParser::IterationStatementContext::Do() {
  return getToken(myParser::Do, 0);
}

tree::TerminalNode* myParser::IterationStatementContext::Semi() {
  return getToken(myParser::Semi, 0);
}

tree::TerminalNode* myParser::IterationStatementContext::For() {
  return getToken(myParser::For, 0);
}

myParser::ForConditionContext* myParser::IterationStatementContext::forCondition() {
  return getRuleContext<myParser::ForConditionContext>(0);
}


size_t myParser::IterationStatementContext::getRuleIndex() const {
  return myParser::RuleIterationStatement;
}

void myParser::IterationStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIterationStatement(this);
}

void myParser::IterationStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIterationStatement(this);
}

myParser::IterationStatementContext* myParser::iterationStatement() {
  IterationStatementContext *_localctx = _tracker.createInstance<IterationStatementContext>(_ctx, getState());
  enterRule(_localctx, 156, myParser::RuleIterationStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1022);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case myParser::While: {
        enterOuterAlt(_localctx, 1);
        setState(1002);
        match(myParser::While);
        setState(1003);
        match(myParser::LeftParen);
        setState(1004);
        expression();
        setState(1005);
        match(myParser::RightParen);
        setState(1006);
        statement();
        break;
      }

      case myParser::Do: {
        enterOuterAlt(_localctx, 2);
        setState(1008);
        match(myParser::Do);
        setState(1009);
        statement();
        setState(1010);
        match(myParser::While);
        setState(1011);
        match(myParser::LeftParen);
        setState(1012);
        expression();
        setState(1013);
        match(myParser::RightParen);
        setState(1014);
        match(myParser::Semi);
        break;
      }

      case myParser::For: {
        enterOuterAlt(_localctx, 3);
        setState(1016);
        match(myParser::For);
        setState(1017);
        match(myParser::LeftParen);
        setState(1018);
        forCondition();
        setState(1019);
        match(myParser::RightParen);
        setState(1020);
        statement();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForConditionContext ------------------------------------------------------------------

myParser::ForConditionContext::ForConditionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> myParser::ForConditionContext::Semi() {
  return getTokens(myParser::Semi);
}

tree::TerminalNode* myParser::ForConditionContext::Semi(size_t i) {
  return getToken(myParser::Semi, i);
}

myParser::ForDeclarationContext* myParser::ForConditionContext::forDeclaration() {
  return getRuleContext<myParser::ForDeclarationContext>(0);
}

std::vector<myParser::ForExpressionContext *> myParser::ForConditionContext::forExpression() {
  return getRuleContexts<myParser::ForExpressionContext>();
}

myParser::ForExpressionContext* myParser::ForConditionContext::forExpression(size_t i) {
  return getRuleContext<myParser::ForExpressionContext>(i);
}

myParser::ExpressionContext* myParser::ForConditionContext::expression() {
  return getRuleContext<myParser::ExpressionContext>(0);
}


size_t myParser::ForConditionContext::getRuleIndex() const {
  return myParser::RuleForCondition;
}

void myParser::ForConditionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterForCondition(this);
}

void myParser::ForConditionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitForCondition(this);
}

myParser::ForConditionContext* myParser::forCondition() {
  ForConditionContext *_localctx = _tracker.createInstance<ForConditionContext>(_ctx, getState());
  enterRule(_localctx, 158, myParser::RuleForCondition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1028);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 121, _ctx)) {
    case 1: {
      setState(1024);
      forDeclaration();
      break;
    }

    case 2: {
      setState(1026);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 612507141508431886) != 0 || (((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 1055531215745025) != 0) {
        setState(1025);
        expression();
      }
      break;
    }

    default:
      break;
    }
    setState(1030);
    match(myParser::Semi);
    setState(1032);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 612507141508431886) != 0 || (((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 1055531215745025) != 0) {
      setState(1031);
      forExpression();
    }
    setState(1034);
    match(myParser::Semi);
    setState(1036);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 612507141508431886) != 0 || (((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 1055531215745025) != 0) {
      setState(1035);
      forExpression();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForDeclarationContext ------------------------------------------------------------------

myParser::ForDeclarationContext::ForDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

myParser::DeclarationSpecifiersContext* myParser::ForDeclarationContext::declarationSpecifiers() {
  return getRuleContext<myParser::DeclarationSpecifiersContext>(0);
}

myParser::InitDeclaratorListContext* myParser::ForDeclarationContext::initDeclaratorList() {
  return getRuleContext<myParser::InitDeclaratorListContext>(0);
}


size_t myParser::ForDeclarationContext::getRuleIndex() const {
  return myParser::RuleForDeclaration;
}

void myParser::ForDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterForDeclaration(this);
}

void myParser::ForDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitForDeclaration(this);
}

myParser::ForDeclarationContext* myParser::forDeclaration() {
  ForDeclarationContext *_localctx = _tracker.createInstance<ForDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 160, myParser::RuleForDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1038);
    declarationSpecifiers();
    setState(1040);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 64000) != 0 || (((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 70368752631809) != 0) {
      setState(1039);
      initDeclaratorList();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForExpressionContext ------------------------------------------------------------------

myParser::ForExpressionContext::ForExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<myParser::AssignmentExpressionContext *> myParser::ForExpressionContext::assignmentExpression() {
  return getRuleContexts<myParser::AssignmentExpressionContext>();
}

myParser::AssignmentExpressionContext* myParser::ForExpressionContext::assignmentExpression(size_t i) {
  return getRuleContext<myParser::AssignmentExpressionContext>(i);
}

std::vector<tree::TerminalNode *> myParser::ForExpressionContext::Comma() {
  return getTokens(myParser::Comma);
}

tree::TerminalNode* myParser::ForExpressionContext::Comma(size_t i) {
  return getToken(myParser::Comma, i);
}


size_t myParser::ForExpressionContext::getRuleIndex() const {
  return myParser::RuleForExpression;
}

void myParser::ForExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterForExpression(this);
}

void myParser::ForExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitForExpression(this);
}

myParser::ForExpressionContext* myParser::forExpression() {
  ForExpressionContext *_localctx = _tracker.createInstance<ForExpressionContext>(_ctx, getState());
  enterRule(_localctx, 162, myParser::RuleForExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1042);
    assignmentExpression();
    setState(1047);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == myParser::Comma) {
      setState(1043);
      match(myParser::Comma);
      setState(1044);
      assignmentExpression();
      setState(1049);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- JumpStatementContext ------------------------------------------------------------------

myParser::JumpStatementContext::JumpStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* myParser::JumpStatementContext::Semi() {
  return getToken(myParser::Semi, 0);
}

tree::TerminalNode* myParser::JumpStatementContext::Goto() {
  return getToken(myParser::Goto, 0);
}

tree::TerminalNode* myParser::JumpStatementContext::Identifier() {
  return getToken(myParser::Identifier, 0);
}

tree::TerminalNode* myParser::JumpStatementContext::Return() {
  return getToken(myParser::Return, 0);
}

myParser::UnaryExpressionContext* myParser::JumpStatementContext::unaryExpression() {
  return getRuleContext<myParser::UnaryExpressionContext>(0);
}

tree::TerminalNode* myParser::JumpStatementContext::Continue() {
  return getToken(myParser::Continue, 0);
}

tree::TerminalNode* myParser::JumpStatementContext::Break() {
  return getToken(myParser::Break, 0);
}

myParser::ExpressionContext* myParser::JumpStatementContext::expression() {
  return getRuleContext<myParser::ExpressionContext>(0);
}


size_t myParser::JumpStatementContext::getRuleIndex() const {
  return myParser::RuleJumpStatement;
}

void myParser::JumpStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterJumpStatement(this);
}

void myParser::JumpStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitJumpStatement(this);
}

myParser::JumpStatementContext* myParser::jumpStatement() {
  JumpStatementContext *_localctx = _tracker.createInstance<JumpStatementContext>(_ctx, getState());
  enterRule(_localctx, 164, myParser::RuleJumpStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1059);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 127, _ctx)) {
    case 1: {
      setState(1050);
      match(myParser::Goto);
      setState(1051);
      match(myParser::Identifier);
      break;
    }

    case 2: {
      setState(1052);
      _la = _input->LA(1);
      if (!(_la == myParser::Break

      || _la == myParser::Continue)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 3: {
      setState(1053);
      match(myParser::Return);
      setState(1055);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 612507141508431886) != 0 || (((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 1055531215745025) != 0) {
        setState(1054);
        expression();
      }
      break;
    }

    case 4: {
      setState(1057);
      match(myParser::Goto);
      setState(1058);
      unaryExpression();
      break;
    }

    default:
      break;
    }
    setState(1061);
    match(myParser::Semi);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CompilationUnitContext ------------------------------------------------------------------

myParser::CompilationUnitContext::CompilationUnitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* myParser::CompilationUnitContext::EOF() {
  return getToken(myParser::EOF, 0);
}

myParser::TranslationUnitContext* myParser::CompilationUnitContext::translationUnit() {
  return getRuleContext<myParser::TranslationUnitContext>(0);
}


size_t myParser::CompilationUnitContext::getRuleIndex() const {
  return myParser::RuleCompilationUnit;
}

void myParser::CompilationUnitContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCompilationUnit(this);
}

void myParser::CompilationUnitContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCompilationUnit(this);
}

myParser::CompilationUnitContext* myParser::compilationUnit() {
  CompilationUnitContext *_localctx = _tracker.createInstance<CompilationUnitContext>(_ctx, getState());
  enterRule(_localctx, 166, myParser::RuleCompilationUnit);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1064);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -1774578842790068238) != 0 || (((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 70369021067265) != 0) {
      setState(1063);
      translationUnit();
    }
    setState(1066);
    match(myParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TranslationUnitContext ------------------------------------------------------------------

myParser::TranslationUnitContext::TranslationUnitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<myParser::ExternalDeclarationContext *> myParser::TranslationUnitContext::externalDeclaration() {
  return getRuleContexts<myParser::ExternalDeclarationContext>();
}

myParser::ExternalDeclarationContext* myParser::TranslationUnitContext::externalDeclaration(size_t i) {
  return getRuleContext<myParser::ExternalDeclarationContext>(i);
}


size_t myParser::TranslationUnitContext::getRuleIndex() const {
  return myParser::RuleTranslationUnit;
}

void myParser::TranslationUnitContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTranslationUnit(this);
}

void myParser::TranslationUnitContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTranslationUnit(this);
}

myParser::TranslationUnitContext* myParser::translationUnit() {
  TranslationUnitContext *_localctx = _tracker.createInstance<TranslationUnitContext>(_ctx, getState());
  enterRule(_localctx, 168, myParser::RuleTranslationUnit);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1069); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1068);
      externalDeclaration();
      setState(1071); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -1774578842790068238) != 0 || (((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 70369021067265) != 0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExternalDeclarationContext ------------------------------------------------------------------

myParser::ExternalDeclarationContext::ExternalDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

myParser::FunctionDefinitionContext* myParser::ExternalDeclarationContext::functionDefinition() {
  return getRuleContext<myParser::FunctionDefinitionContext>(0);
}

myParser::DeclarationContext* myParser::ExternalDeclarationContext::declaration() {
  return getRuleContext<myParser::DeclarationContext>(0);
}

tree::TerminalNode* myParser::ExternalDeclarationContext::Semi() {
  return getToken(myParser::Semi, 0);
}


size_t myParser::ExternalDeclarationContext::getRuleIndex() const {
  return myParser::RuleExternalDeclaration;
}

void myParser::ExternalDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExternalDeclaration(this);
}

void myParser::ExternalDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExternalDeclaration(this);
}

myParser::ExternalDeclarationContext* myParser::externalDeclaration() {
  ExternalDeclarationContext *_localctx = _tracker.createInstance<ExternalDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 170, myParser::RuleExternalDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1076);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 130, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1073);
      functionDefinition();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1074);
      declaration();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1075);
      match(myParser::Semi);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionDefinitionContext ------------------------------------------------------------------

myParser::FunctionDefinitionContext::FunctionDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

myParser::DeclaratorContext* myParser::FunctionDefinitionContext::declarator() {
  return getRuleContext<myParser::DeclaratorContext>(0);
}

myParser::CompoundStatementContext* myParser::FunctionDefinitionContext::compoundStatement() {
  return getRuleContext<myParser::CompoundStatementContext>(0);
}

myParser::DeclarationSpecifiersContext* myParser::FunctionDefinitionContext::declarationSpecifiers() {
  return getRuleContext<myParser::DeclarationSpecifiersContext>(0);
}

myParser::DeclarationListContext* myParser::FunctionDefinitionContext::declarationList() {
  return getRuleContext<myParser::DeclarationListContext>(0);
}


size_t myParser::FunctionDefinitionContext::getRuleIndex() const {
  return myParser::RuleFunctionDefinition;
}

void myParser::FunctionDefinitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunctionDefinition(this);
}

void myParser::FunctionDefinitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunctionDefinition(this);
}

myParser::FunctionDefinitionContext* myParser::functionDefinition() {
  FunctionDefinitionContext *_localctx = _tracker.createInstance<FunctionDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 172, myParser::RuleFunctionDefinition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1079);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 131, _ctx)) {
    case 1: {
      setState(1078);
      declarationSpecifiers();
      break;
    }

    default:
      break;
    }
    setState(1081);
    declarator();
    setState(1083);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -1774578842790131726) != 0 || _la == myParser::Identifier) {
      setState(1082);
      declarationList();
    }
    setState(1085);
    compoundStatement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeclarationListContext ------------------------------------------------------------------

myParser::DeclarationListContext::DeclarationListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<myParser::DeclarationContext *> myParser::DeclarationListContext::declaration() {
  return getRuleContexts<myParser::DeclarationContext>();
}

myParser::DeclarationContext* myParser::DeclarationListContext::declaration(size_t i) {
  return getRuleContext<myParser::DeclarationContext>(i);
}


size_t myParser::DeclarationListContext::getRuleIndex() const {
  return myParser::RuleDeclarationList;
}

void myParser::DeclarationListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeclarationList(this);
}

void myParser::DeclarationListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeclarationList(this);
}

myParser::DeclarationListContext* myParser::declarationList() {
  DeclarationListContext *_localctx = _tracker.createInstance<DeclarationListContext>(_ctx, getState());
  enterRule(_localctx, 174, myParser::RuleDeclarationList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1088); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1087);
      declaration();
      setState(1090); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -1774578842790131726) != 0 || _la == myParser::Identifier);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool myParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 48: return directDeclaratorSempred(antlrcpp::downCast<DirectDeclaratorContext *>(context), predicateIndex);
    case 63: return directAbstractDeclaratorSempred(antlrcpp::downCast<DirectAbstractDeclaratorContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool myParser::directDeclaratorSempred(DirectDeclaratorContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return precpred(_ctx, 9);
    case 1: return precpred(_ctx, 8);
    case 2: return precpred(_ctx, 7);
    case 3: return precpred(_ctx, 6);
    case 4: return precpred(_ctx, 5);
    case 5: return precpred(_ctx, 4);

  default:
    break;
  }
  return true;
}

bool myParser::directAbstractDeclaratorSempred(DirectAbstractDeclaratorContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 6: return precpred(_ctx, 5);
    case 7: return precpred(_ctx, 4);
    case 8: return precpred(_ctx, 3);
    case 9: return precpred(_ctx, 2);
    case 10: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

void myParser::initialize() {
  ::antlr4::internal::call_once(myParserOnceFlag, myParserInitialize);
}
