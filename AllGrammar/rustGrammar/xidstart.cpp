
// Generated from xidstart.g4 by ANTLR 4.11.1


#include "xidstart.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct XidstartStaticData final {
  XidstartStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  XidstartStaticData(const XidstartStaticData&) = delete;
  XidstartStaticData(XidstartStaticData&&) = delete;
  XidstartStaticData& operator=(const XidstartStaticData&) = delete;
  XidstartStaticData& operator=(XidstartStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag xidstartLexerOnceFlag;
XidstartStaticData *xidstartLexerStaticData = nullptr;

void xidstartLexerInitialize() {
  assert(xidstartLexerStaticData == nullptr);
  auto staticData = std::make_unique<XidstartStaticData>(
    std::vector<std::string>{
      "XID_Start"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
    },
    std::vector<std::string>{
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,0,186,6,-1,2,0,7,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
  	0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
  	1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
  	0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
  	1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
  	0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
  	1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
  	0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
  	1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
  	0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
  	1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,3,0,185,8,0,0,0,1,1,0,
  	1,0,1,285,0,65,90,95,95,97,122,170,170,181,181,186,186,192,214,216,246,
  	248,566,592,705,710,721,736,740,750,750,902,902,904,906,908,908,910,929,
  	931,974,976,1013,1015,1019,1024,1153,1162,1230,1232,1269,1272,1273,1280,
  	1295,1329,1366,1369,1369,1377,1415,1488,1514,1520,1522,1569,1594,1600,
  	1610,1646,1647,1649,1747,1749,1749,1765,1766,1774,1775,1786,1788,1791,
  	1791,1808,1808,1810,1839,1869,1871,1920,1957,1969,1969,2308,2361,2365,
  	2365,2384,2384,2392,2401,2437,2444,2447,2448,2451,2472,2474,2480,2482,
  	2482,2486,2489,2493,2493,2524,2525,2527,2529,2544,2545,2565,2570,2575,
  	2576,2579,2600,2602,2608,2610,2611,2613,2614,2616,2617,2649,2652,2654,
  	2654,2674,2676,2693,2701,2703,2705,2707,2728,2730,2736,2738,2739,2741,
  	2745,2749,2749,2768,2768,2784,2785,2821,2828,2831,2832,2835,2856,2858,
  	2864,2866,2867,2869,2873,2877,2877,2908,2909,2911,2913,2929,2929,2947,
  	2947,2949,2954,2958,2960,2962,2965,2969,2970,2972,2972,2974,2975,2979,
  	2980,2984,2986,2990,2997,2999,3001,3077,3084,3086,3088,3090,3112,3114,
  	3123,3125,3129,3168,3169,3205,3212,3214,3216,3218,3240,3242,3251,3253,
  	3257,3261,3261,3294,3294,3296,3297,3333,3340,3342,3344,3346,3368,3370,
  	3385,3424,3425,3461,3478,3482,3505,3507,3515,3517,3517,3520,3526,3585,
  	3632,3634,3634,3648,3654,3713,3714,3716,3716,3719,3720,3722,3722,3725,
  	3725,3732,3735,3737,3743,3745,3747,3749,3749,3751,3751,3754,3755,3757,
  	3760,3762,3762,3773,3773,3776,3780,3782,3782,3804,3805,3840,3840,3904,
  	3911,3913,3946,3976,3979,4096,4129,4131,4135,4137,4138,4176,4181,4256,
  	4293,4304,4344,4352,4441,4447,4514,4520,4601,4608,4614,4616,4678,4680,
  	4680,4682,4685,4688,4694,4696,4696,4698,4701,4704,4742,4744,4744,4746,
  	4749,4752,4782,4784,4784,4786,4789,4792,4798,4800,4800,4802,4805,4808,
  	4814,4816,4822,4824,4846,4848,4878,4880,4880,4882,4885,4888,4894,4896,
  	4934,4936,4954,5024,5108,5121,5740,5743,5750,5761,5786,5792,5866,5870,
  	5872,5888,5900,5902,5905,5920,5937,5952,5969,5984,5996,5998,6000,6016,
  	6067,6103,6103,6108,6108,6176,6263,6272,6312,6400,6428,6480,6509,6512,
  	6516,7424,7531,7680,7835,7840,7929,7936,7957,7960,7965,7968,8005,8008,
  	8013,8016,8023,8025,8025,8027,8027,8029,8029,8031,8061,8064,8116,8118,
  	8124,8126,8126,8130,8132,8134,8140,8144,8147,8150,8155,8160,8172,8178,
  	8180,8182,8188,8305,8305,8319,8319,8450,8450,8455,8455,8458,8467,8469,
  	8469,8472,8477,8484,8484,8486,8486,8488,8488,8490,8497,8499,8505,8509,
  	8511,8517,8521,8544,8579,12293,12295,12321,12329,12337,12341,12344,12348,
  	12353,12438,12445,12447,12449,12538,12540,12543,12549,12588,12593,12686,
  	12704,12727,12784,12799,13312,19893,19968,40869,40960,42124,44032,55203,
  	63744,64045,64048,64106,64256,64262,64275,64279,64285,64285,64287,64296,
  	64298,64310,64312,64316,64318,64318,64320,64321,64323,64324,64326,64433,
  	64467,64605,64612,64829,64848,64911,64914,64967,65008,65017,65137,65137,
  	65139,65139,65143,65143,65145,65145,65147,65147,65149,65149,65151,65276,
  	65313,65338,65345,65370,65382,65437,65440,65470,65474,65479,65482,65487,
  	65490,65495,65498,65500,274,1,184,1,0,0,0,3,185,7,0,0,0,4,5,5,55296,0,
  	0,5,185,2,56320,56330,0,6,7,5,55296,0,0,7,185,2,56333,56357,0,8,9,5,55296,
  	0,0,9,185,2,56360,56377,0,10,11,5,55296,0,0,11,185,5,56380,0,0,12,13,
  	5,55296,0,0,13,185,2,56383,56396,0,14,15,5,55296,0,0,15,185,2,56400,56412,
  	0,16,17,5,55296,0,0,17,185,2,56448,56569,0,18,19,5,55296,0,0,19,185,2,
  	57088,57117,0,20,21,5,55296,0,0,21,185,2,57136,57161,0,22,23,5,55296,
  	0,0,23,185,2,57216,57244,0,24,25,5,55297,0,0,25,185,2,57344,57500,0,26,
  	27,5,55298,0,0,27,185,2,58368,58372,0,28,29,5,55298,0,0,29,185,5,2056,
  	0,0,30,31,5,55298,0,0,31,185,2,58378,58420,0,32,33,5,55298,0,0,33,185,
  	5,58423,0,0,34,35,5,55298,0,0,35,185,5,2108,0,0,36,37,5,55298,0,0,37,
  	185,5,2111,0,0,38,39,5,55349,0,0,39,185,2,45056,45139,0,40,41,5,55349,
  	0,0,41,185,2,45142,45211,0,42,43,5,55349,0,0,43,185,5,45214,0,0,44,45,
  	5,55349,0,0,45,185,5,54434,0,0,46,47,5,55349,0,0,47,185,5,45221,0,0,48,
  	49,5,55349,0,0,49,185,2,45225,45227,0,50,51,5,55349,0,0,51,185,2,45230,
  	45240,0,52,53,5,55349,0,0,53,185,5,54459,0,0,54,55,5,55349,0,0,55,185,
  	2,45245,45250,0,56,57,5,55349,0,0,57,185,2,45253,45316,0,58,59,5,55349,
  	0,0,59,185,2,45319,45321,0,60,61,5,55349,0,0,61,185,2,45325,45331,0,62,
  	63,5,55349,0,0,63,185,2,45334,45339,0,64,65,5,55349,0,0,65,185,2,45342,
  	45368,0,66,67,5,55349,0,0,67,185,2,45371,45373,0,68,69,5,55349,0,0,69,
  	185,2,45376,45379,0,70,71,5,55349,0,0,71,185,5,54598,0,0,72,73,5,55349,
  	0,0,73,185,2,45386,45391,0,74,75,5,55349,0,0,75,185,2,45394,45730,0,76,
  	77,5,55349,0,0,77,185,2,45736,45759,0,78,79,5,55349,0,0,79,185,2,45762,
  	45785,0,80,81,5,55349,0,0,81,185,2,45788,45817,0,82,83,5,55349,0,0,83,
  	185,2,45820,45843,0,84,85,5,55349,0,0,85,185,2,45846,45875,0,86,87,5,
  	55349,0,0,87,185,2,45878,45901,0,88,89,5,55349,0,0,89,185,2,45904,45933,
  	0,90,91,5,55349,0,0,91,185,2,45936,45959,0,92,93,5,55349,0,0,93,185,2,
  	45962,45991,0,94,95,5,55349,0,0,95,185,2,45994,46017,0,96,97,5,55349,
  	0,0,97,185,2,46020,46024,0,98,99,5,55360,0,0,99,185,2,56320,57342,0,100,
  	101,5,55361,0,0,101,185,2,57344,58366,0,102,103,5,55362,0,0,103,185,2,
  	58368,59390,0,104,105,5,55363,0,0,105,185,2,59392,60414,0,106,107,5,55364,
  	0,0,107,185,2,60416,61438,0,108,109,5,55365,0,0,109,185,2,61440,62462,
  	0,110,111,5,55366,0,0,111,185,2,62464,63486,0,112,113,5,55367,0,0,113,
  	185,2,63488,64510,0,114,115,5,55368,0,0,115,185,2,64512,65534,0,116,117,
  	5,55369,0,0,117,185,2,0,1022,0,118,119,5,55370,0,0,119,185,2,1024,2046,
  	0,120,121,5,55371,0,0,121,185,2,2048,3070,0,122,123,5,55372,0,0,123,185,
  	2,3072,4094,0,124,125,5,55373,0,0,125,185,2,4096,5118,0,126,127,5,55374,
  	0,0,127,185,2,5120,6142,0,128,129,5,55375,0,0,129,185,2,6144,7166,0,130,
  	131,5,55376,0,0,131,185,2,7168,8190,0,132,133,5,55377,0,0,133,185,2,8192,
  	9214,0,134,135,5,55378,0,0,135,185,2,9216,10238,0,136,137,5,55379,0,0,
  	137,185,2,10240,11262,0,138,139,5,55380,0,0,139,185,2,11264,12286,0,140,
  	141,5,55381,0,0,141,185,2,12288,13310,0,142,143,5,55382,0,0,143,185,2,
  	13312,14334,0,144,145,5,55383,0,0,145,185,2,14336,15358,0,146,147,5,55384,
  	0,0,147,185,2,15360,16382,0,148,149,5,55385,0,0,149,185,2,16384,17406,
  	0,150,151,5,55386,0,0,151,185,2,17408,18430,0,152,153,5,55387,0,0,153,
  	185,2,18432,19454,0,154,155,5,55388,0,0,155,185,2,19456,20478,0,156,157,
  	5,55389,0,0,157,185,2,20480,21502,0,158,159,5,55390,0,0,159,185,2,21504,
  	22526,0,160,161,5,55391,0,0,161,185,2,22528,23550,0,162,163,5,55392,0,
  	0,163,185,2,23552,24574,0,164,165,5,55393,0,0,165,185,2,24576,25598,0,
  	166,167,5,55394,0,0,167,185,2,25600,26622,0,168,169,5,55395,0,0,169,185,
  	2,26624,27646,0,170,171,5,55396,0,0,171,185,2,27648,28670,0,172,173,5,
  	55397,0,0,173,185,2,28672,29694,0,174,175,5,55398,0,0,175,185,2,29696,
  	30718,0,176,177,5,55399,0,0,177,185,2,30720,31742,0,178,179,5,55400,0,
  	0,179,185,2,31744,32766,0,180,181,5,55401,0,0,181,185,2,32768,33493,0,
  	182,183,5,55422,0,0,183,185,2,54272,54812,0,184,3,1,0,0,0,184,4,1,0,0,
  	0,184,6,1,0,0,0,184,8,1,0,0,0,184,10,1,0,0,0,184,12,1,0,0,0,184,14,1,
  	0,0,0,184,16,1,0,0,0,184,18,1,0,0,0,184,20,1,0,0,0,184,22,1,0,0,0,184,
  	24,1,0,0,0,184,26,1,0,0,0,184,28,1,0,0,0,184,30,1,0,0,0,184,32,1,0,0,
  	0,184,34,1,0,0,0,184,36,1,0,0,0,184,38,1,0,0,0,184,40,1,0,0,0,184,42,
  	1,0,0,0,184,44,1,0,0,0,184,46,1,0,0,0,184,48,1,0,0,0,184,50,1,0,0,0,184,
  	52,1,0,0,0,184,54,1,0,0,0,184,56,1,0,0,0,184,58,1,0,0,0,184,60,1,0,0,
  	0,184,62,1,0,0,0,184,64,1,0,0,0,184,66,1,0,0,0,184,68,1,0,0,0,184,70,
  	1,0,0,0,184,72,1,0,0,0,184,74,1,0,0,0,184,76,1,0,0,0,184,78,1,0,0,0,184,
  	80,1,0,0,0,184,82,1,0,0,0,184,84,1,0,0,0,184,86,1,0,0,0,184,88,1,0,0,
  	0,184,90,1,0,0,0,184,92,1,0,0,0,184,94,1,0,0,0,184,96,1,0,0,0,184,98,
  	1,0,0,0,184,100,1,0,0,0,184,102,1,0,0,0,184,104,1,0,0,0,184,106,1,0,0,
  	0,184,108,1,0,0,0,184,110,1,0,0,0,184,112,1,0,0,0,184,114,1,0,0,0,184,
  	116,1,0,0,0,184,118,1,0,0,0,184,120,1,0,0,0,184,122,1,0,0,0,184,124,1,
  	0,0,0,184,126,1,0,0,0,184,128,1,0,0,0,184,130,1,0,0,0,184,132,1,0,0,0,
  	184,134,1,0,0,0,184,136,1,0,0,0,184,138,1,0,0,0,184,140,1,0,0,0,184,142,
  	1,0,0,0,184,144,1,0,0,0,184,146,1,0,0,0,184,148,1,0,0,0,184,150,1,0,0,
  	0,184,152,1,0,0,0,184,154,1,0,0,0,184,156,1,0,0,0,184,158,1,0,0,0,184,
  	160,1,0,0,0,184,162,1,0,0,0,184,164,1,0,0,0,184,166,1,0,0,0,184,168,1,
  	0,0,0,184,170,1,0,0,0,184,172,1,0,0,0,184,174,1,0,0,0,184,176,1,0,0,0,
  	184,178,1,0,0,0,184,180,1,0,0,0,184,182,1,0,0,0,185,2,1,0,0,0,2,0,184,
  	0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  xidstartLexerStaticData = staticData.release();
}

}

xidstart::xidstart(CharStream *input) : Lexer(input) {
  xidstart::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *xidstartLexerStaticData->atn, xidstartLexerStaticData->decisionToDFA, xidstartLexerStaticData->sharedContextCache);
}

xidstart::~xidstart() {
  delete _interpreter;
}

std::string xidstart::getGrammarFileName() const {
  return "xidstart.g4";
}

const std::vector<std::string>& xidstart::getRuleNames() const {
  return xidstartLexerStaticData->ruleNames;
}

const std::vector<std::string>& xidstart::getChannelNames() const {
  return xidstartLexerStaticData->channelNames;
}

const std::vector<std::string>& xidstart::getModeNames() const {
  return xidstartLexerStaticData->modeNames;
}

const dfa::Vocabulary& xidstart::getVocabulary() const {
  return xidstartLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView xidstart::getSerializedATN() const {
  return xidstartLexerStaticData->serializedATN;
}

const atn::ATN& xidstart::getATN() const {
  return *xidstartLexerStaticData->atn;
}




void xidstart::initialize() {
  ::antlr4::internal::call_once(xidstartLexerOnceFlag, xidstartLexerInitialize);
}
