
// Generated from myParser.g4 by ANTLR 4.13.0


#include "myParserListener.h"

#include "myParser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct MyParserStaticData final {
  MyParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  MyParserStaticData(const MyParserStaticData&) = delete;
  MyParserStaticData(MyParserStaticData&&) = delete;
  MyParserStaticData& operator=(const MyParserStaticData&) = delete;
  MyParserStaticData& operator=(MyParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag myparserParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
MyParserStaticData *myparserParserStaticData = nullptr;

void myparserParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (myparserParserStaticData != nullptr) {
    return;
  }
#else
  assert(myparserParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<MyParserStaticData>(
    std::vector<std::string>{
      "root", "single_input", "file_input", "eval_input", "stmt", "compound_stmt", 
      "suite", "decorator", "elif_clause", "else_clause", "finally_clause", 
      "with_item", "except_clause", "classdef", "funcdef", "typedargslist", 
      "args", "kwargs", "def_parameters", "def_parameter", "named_parameter", 
      "simple_stmt", "small_stmt", "testlist_star_expr", "star_expr", "assign_part", 
      "exprlist", "import_as_names", "import_as_name", "dotted_as_names", 
      "dotted_as_name", "test", "varargslist", "vardef_parameters", "vardef_parameter", 
      "varargs", "varkwargs", "logical_test", "comparison", "expr", "atom", 
      "dictorsetmaker", "testlist_comp", "testlist", "dotted_name", "name", 
      "number", "integer", "yield_expr", "yield_arg", "trailer", "arguments", 
      "arglist", "argument", "subscriptlist", "subscript", "sliceop", "comp_for", 
      "comp_iter"
    },
    std::vector<std::string>{
      "", "", "", "", "'def'", "'return'", "'raise'", "'from'", "'import'", 
      "'nonlocal'", "'as'", "'global'", "'assert'", "'if'", "'elif'", "'else'", 
      "'while'", "'for'", "'in'", "'try'", "'None'", "'finally'", "'with'", 
      "'except'", "'lambda'", "'or'", "'and'", "'not'", "'is'", "'class'", 
      "'yield'", "'del'", "'pass'", "'continue'", "'break'", "'async'", 
      "'await'", "'print'", "'exec'", "'True'", "'False'", "'.'", "'...'", 
      "'`'", "'*'", "','", "':'", "';'", "'**'", "'='", "'|'", "'^'", "'&'", 
      "'<<'", "'>>'", "'+'", "'-'", "'/'", "'%'", "'//'", "'~'", "'<'", 
      "'>'", "'=='", "'>='", "'<='", "'<>'", "'!='", "'@'", "'->'", "'+='", 
      "'-='", "'*='", "'@='", "'/='", "'%='", "'&='", "'|='", "'^='", "'<<='", 
      "'>>='", "'**='", "'//='", "", "", "", "", "", "", "", "'('", "')'", 
      "'{'", "'}'", "'['", "']'"
    },
    std::vector<std::string>{
      "", "INDENT", "DEDENT", "LINE_BREAK", "DEF", "RETURN", "RAISE", "FROM", 
      "IMPORT", "NONLOCAL", "AS", "GLOBAL", "ASSERT", "IF", "ELIF", "ELSE", 
      "WHILE", "FOR", "IN", "TRY", "NONE", "FINALLY", "WITH", "EXCEPT", 
      "LAMBDA", "OR", "AND", "NOT", "IS", "CLASS", "YIELD", "DEL", "PASS", 
      "CONTINUE", "BREAK", "ASYNC", "AWAIT", "PRINT", "EXEC", "TRUE", "FALSE", 
      "DOT", "ELLIPSIS", "REVERSE_QUOTE", "STAR", "COMMA", "COLON", "SEMI_COLON", 
      "POWER", "ASSIGN", "OR_OP", "XOR", "AND_OP", "LEFT_SHIFT", "RIGHT_SHIFT", 
      "ADD", "MINUS", "DIV", "MOD", "IDIV", "NOT_OP", "LESS_THAN", "GREATER_THAN", 
      "EQUALS", "GT_EQ", "LT_EQ", "NOT_EQ_1", "NOT_EQ_2", "AT", "ARROW", 
      "ADD_ASSIGN", "SUB_ASSIGN", "MULT_ASSIGN", "AT_ASSIGN", "DIV_ASSIGN", 
      "MOD_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", "LEFT_SHIFT_ASSIGN", 
      "RIGHT_SHIFT_ASSIGN", "POWER_ASSIGN", "IDIV_ASSIGN", "STRING", "DECIMAL_INTEGER", 
      "OCT_INTEGER", "HEX_INTEGER", "BIN_INTEGER", "IMAG_NUMBER", "FLOAT_NUMBER", 
      "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACE", "CLOSE_BRACE", "OPEN_BRACKET", 
      "CLOSE_BRACKET", "NAME", "LINE_JOIN", "NEWLINE", "WS", "COMMENT"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,100,970,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
  	7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,
  	14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,
  	21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,
  	28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,
  	35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,
  	42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,
  	49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,
  	56,2,57,7,57,2,58,7,58,1,0,1,0,1,0,3,0,122,8,0,1,0,1,0,1,1,1,1,1,1,1,
  	1,1,1,3,1,131,8,1,1,2,1,2,4,2,135,8,2,11,2,12,2,136,1,3,1,3,5,3,141,8,
  	3,10,3,12,3,144,9,3,1,4,1,4,3,4,148,8,4,1,5,1,5,1,5,1,5,1,5,5,5,155,8,
  	5,10,5,12,5,158,9,5,1,5,3,5,161,8,5,1,5,1,5,1,5,1,5,1,5,3,5,168,8,5,1,
  	5,3,5,171,8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,180,8,5,1,5,1,5,1,5,1,5,
  	4,5,186,8,5,11,5,12,5,187,1,5,3,5,191,8,5,1,5,3,5,194,8,5,1,5,3,5,197,
  	8,5,1,5,3,5,200,8,5,1,5,1,5,1,5,1,5,5,5,206,8,5,10,5,12,5,209,9,5,1,5,
  	1,5,1,5,1,5,5,5,215,8,5,10,5,12,5,218,9,5,1,5,1,5,3,5,222,8,5,3,5,224,
  	8,5,1,6,1,6,1,6,1,6,4,6,230,8,6,11,6,12,6,231,1,6,1,6,3,6,236,8,6,1,7,
  	1,7,1,7,1,7,3,7,242,8,7,1,7,3,7,245,8,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,
  	9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,3,11,265,8,11,1,12,1,
  	12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,279,8,12,3,
  	12,281,8,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,3,13,290,8,13,1,13,3,13,
  	293,8,13,1,13,1,13,1,13,1,14,3,14,299,8,14,1,14,1,14,1,14,1,14,3,14,305,
  	8,14,1,14,1,14,1,14,3,14,310,8,14,1,14,1,14,1,14,1,15,1,15,1,15,3,15,
  	318,8,15,1,15,1,15,1,15,3,15,323,8,15,1,15,1,15,3,15,327,8,15,1,15,3,
  	15,330,8,15,1,15,3,15,333,8,15,1,15,1,15,3,15,337,8,15,3,15,339,8,15,
  	1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,5,18,350,8,18,10,18,12,18,
  	353,9,18,1,19,1,19,1,19,3,19,358,8,19,1,19,3,19,361,8,19,1,20,1,20,1,
  	20,3,20,366,8,20,1,21,1,21,1,21,5,21,371,8,21,10,21,12,21,374,9,21,1,
  	21,3,21,377,8,21,1,21,1,21,1,22,1,22,3,22,383,8,22,1,22,1,22,1,22,1,22,
  	1,22,5,22,390,8,22,10,22,12,22,393,9,22,1,22,3,22,396,8,22,1,22,1,22,
  	1,22,1,22,4,22,402,8,22,11,22,12,22,403,1,22,3,22,407,8,22,3,22,409,8,
  	22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,420,8,22,1,22,1,
  	22,1,22,1,22,1,22,1,22,3,22,428,8,22,3,22,430,8,22,3,22,432,8,22,1,22,
  	1,22,3,22,436,8,22,1,22,1,22,1,22,1,22,1,22,5,22,443,8,22,10,22,12,22,
  	446,9,22,1,22,1,22,4,22,450,8,22,11,22,12,22,451,3,22,454,8,22,1,22,1,
  	22,1,22,1,22,1,22,1,22,1,22,3,22,463,8,22,1,22,1,22,1,22,1,22,5,22,469,
  	8,22,10,22,12,22,472,9,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,481,
  	8,22,3,22,483,8,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,491,8,22,1,22,1,
  	22,1,22,1,22,1,22,5,22,498,8,22,10,22,12,22,501,9,22,1,22,1,22,3,22,505,
  	8,22,1,23,1,23,3,23,509,8,23,1,23,1,23,4,23,513,8,23,11,23,12,23,514,
  	1,23,1,23,3,23,519,8,23,1,23,3,23,522,8,23,1,24,1,24,1,24,1,25,1,25,1,
  	25,1,25,5,25,531,8,25,10,25,12,25,534,9,25,1,25,1,25,3,25,538,8,25,1,
  	25,3,25,541,8,25,1,25,1,25,1,25,1,25,1,25,3,25,548,8,25,1,25,1,25,1,25,
  	1,25,1,25,3,25,555,8,25,3,25,557,8,25,1,26,1,26,1,26,5,26,562,8,26,10,
  	26,12,26,565,9,26,1,26,3,26,568,8,26,1,27,1,27,1,27,5,27,573,8,27,10,
  	27,12,27,576,9,27,1,27,3,27,579,8,27,1,28,1,28,1,28,3,28,584,8,28,1,29,
  	1,29,1,29,5,29,589,8,29,10,29,12,29,592,9,29,1,30,1,30,1,30,3,30,597,
  	8,30,1,31,1,31,1,31,1,31,1,31,1,31,3,31,605,8,31,1,31,1,31,3,31,609,8,
  	31,1,31,1,31,3,31,613,8,31,1,32,1,32,1,32,3,32,618,8,32,1,32,1,32,1,32,
  	3,32,623,8,32,1,32,1,32,3,32,627,8,32,1,32,3,32,630,8,32,1,32,3,32,633,
  	8,32,1,32,1,32,3,32,637,8,32,3,32,639,8,32,1,33,1,33,1,33,5,33,644,8,
  	33,10,33,12,33,647,9,33,1,34,1,34,1,34,3,34,652,8,34,1,34,3,34,655,8,
  	34,1,35,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,37,1,37,3,37,667,8,37,1,
  	37,1,37,1,37,1,37,1,37,1,37,5,37,675,8,37,10,37,12,37,678,9,37,1,38,1,
  	38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,692,8,38,1,
  	38,1,38,1,38,3,38,697,8,38,3,38,699,8,38,1,38,5,38,702,8,38,10,38,12,
  	38,705,9,38,1,39,1,39,3,39,709,8,39,1,39,1,39,5,39,713,8,39,10,39,12,
  	39,716,9,39,1,39,1,39,3,39,720,8,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,
  	1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,
  	5,39,743,8,39,10,39,12,39,746,9,39,1,40,1,40,1,40,3,40,751,8,40,1,40,
  	1,40,1,40,3,40,756,8,40,1,40,1,40,1,40,3,40,761,8,40,1,40,1,40,1,40,1,
  	40,3,40,767,8,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,776,8,40,1,40,
  	1,40,1,40,4,40,781,8,40,11,40,12,40,782,3,40,785,8,40,1,41,1,41,1,41,
  	1,41,1,41,1,41,3,41,793,8,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,3,41,
  	802,8,41,5,41,804,8,41,10,41,12,41,807,9,41,1,41,3,41,810,8,41,1,41,1,
  	41,1,41,1,41,1,41,1,41,3,41,818,8,41,1,42,1,42,3,42,822,8,42,1,42,1,42,
  	1,42,1,42,3,42,828,8,42,5,42,830,8,42,10,42,12,42,833,9,42,1,42,3,42,
  	836,8,42,3,42,838,8,42,1,43,1,43,1,43,5,43,843,8,43,10,43,12,43,846,9,
  	43,1,43,3,43,849,8,43,1,44,1,44,1,44,1,44,1,44,1,44,5,44,857,8,44,10,
  	44,12,44,860,9,44,1,45,1,45,1,46,1,46,1,46,3,46,867,8,46,1,47,1,47,1,
  	48,1,48,3,48,873,8,48,1,49,1,49,1,49,3,49,878,8,49,1,50,1,50,1,50,3,50,
  	883,8,50,1,50,3,50,886,8,50,1,51,1,51,3,51,890,8,51,1,51,1,51,1,51,1,
  	51,1,51,3,51,897,8,51,1,52,1,52,1,52,5,52,902,8,52,10,52,12,52,905,9,
  	52,1,52,3,52,908,8,52,1,53,1,53,1,53,1,53,3,53,914,8,53,1,53,1,53,3,53,
  	918,8,53,1,54,1,54,1,54,5,54,923,8,54,10,54,12,54,926,9,54,1,54,3,54,
  	929,8,54,1,55,1,55,1,55,1,55,3,55,935,8,55,1,55,3,55,938,8,55,3,55,940,
  	8,55,1,55,1,55,3,55,944,8,55,1,55,3,55,947,8,55,3,55,949,8,55,1,56,1,
  	56,3,56,953,8,56,1,57,1,57,1,57,1,57,1,57,3,57,960,8,57,1,58,1,58,1,58,
  	1,58,3,58,966,8,58,3,58,968,8,58,1,58,0,4,74,76,78,88,59,0,2,4,6,8,10,
  	12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,
  	58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,
  	104,106,108,110,112,114,116,0,10,1,1,3,3,1,0,41,42,1,0,70,82,2,0,55,56,
  	60,60,3,0,44,44,57,59,68,68,1,0,55,56,1,0,53,54,2,0,39,40,96,96,1,0,84,
  	87,2,0,44,44,48,48,1111,0,121,1,0,0,0,2,130,1,0,0,0,4,134,1,0,0,0,6,138,
  	1,0,0,0,8,147,1,0,0,0,10,223,1,0,0,0,12,235,1,0,0,0,14,237,1,0,0,0,16,
  	248,1,0,0,0,18,253,1,0,0,0,20,257,1,0,0,0,22,261,1,0,0,0,24,266,1,0,0,
  	0,26,285,1,0,0,0,28,298,1,0,0,0,30,338,1,0,0,0,32,340,1,0,0,0,34,343,
  	1,0,0,0,36,346,1,0,0,0,38,360,1,0,0,0,40,362,1,0,0,0,42,367,1,0,0,0,44,
  	504,1,0,0,0,46,521,1,0,0,0,48,523,1,0,0,0,50,556,1,0,0,0,52,558,1,0,0,
  	0,54,569,1,0,0,0,56,580,1,0,0,0,58,585,1,0,0,0,60,593,1,0,0,0,62,612,
  	1,0,0,0,64,638,1,0,0,0,66,640,1,0,0,0,68,654,1,0,0,0,70,656,1,0,0,0,72,
  	659,1,0,0,0,74,666,1,0,0,0,76,679,1,0,0,0,78,719,1,0,0,0,80,784,1,0,0,
  	0,82,817,1,0,0,0,84,821,1,0,0,0,86,839,1,0,0,0,88,850,1,0,0,0,90,861,
  	1,0,0,0,92,866,1,0,0,0,94,868,1,0,0,0,96,870,1,0,0,0,98,877,1,0,0,0,100,
  	885,1,0,0,0,102,896,1,0,0,0,104,898,1,0,0,0,106,917,1,0,0,0,108,919,1,
  	0,0,0,110,948,1,0,0,0,112,950,1,0,0,0,114,954,1,0,0,0,116,967,1,0,0,0,
  	118,122,3,2,1,0,119,122,3,4,2,0,120,122,3,6,3,0,121,118,1,0,0,0,121,119,
  	1,0,0,0,121,120,1,0,0,0,121,122,1,0,0,0,122,123,1,0,0,0,123,124,5,0,0,
  	1,124,1,1,0,0,0,125,131,5,3,0,0,126,131,3,42,21,0,127,128,3,10,5,0,128,
  	129,5,3,0,0,129,131,1,0,0,0,130,125,1,0,0,0,130,126,1,0,0,0,130,127,1,
  	0,0,0,131,3,1,0,0,0,132,135,5,3,0,0,133,135,3,8,4,0,134,132,1,0,0,0,134,
  	133,1,0,0,0,135,136,1,0,0,0,136,134,1,0,0,0,136,137,1,0,0,0,137,5,1,0,
  	0,0,138,142,3,86,43,0,139,141,5,3,0,0,140,139,1,0,0,0,141,144,1,0,0,0,
  	142,140,1,0,0,0,142,143,1,0,0,0,143,7,1,0,0,0,144,142,1,0,0,0,145,148,
  	3,42,21,0,146,148,3,10,5,0,147,145,1,0,0,0,147,146,1,0,0,0,148,9,1,0,
  	0,0,149,150,5,13,0,0,150,151,3,62,31,0,151,152,5,46,0,0,152,156,3,12,
  	6,0,153,155,3,16,8,0,154,153,1,0,0,0,155,158,1,0,0,0,156,154,1,0,0,0,
  	156,157,1,0,0,0,157,160,1,0,0,0,158,156,1,0,0,0,159,161,3,18,9,0,160,
  	159,1,0,0,0,160,161,1,0,0,0,161,224,1,0,0,0,162,163,5,16,0,0,163,164,
  	3,62,31,0,164,165,5,46,0,0,165,167,3,12,6,0,166,168,3,18,9,0,167,166,
  	1,0,0,0,167,168,1,0,0,0,168,224,1,0,0,0,169,171,5,35,0,0,170,169,1,0,
  	0,0,170,171,1,0,0,0,171,172,1,0,0,0,172,173,5,17,0,0,173,174,3,52,26,
  	0,174,175,5,18,0,0,175,176,3,86,43,0,176,177,5,46,0,0,177,179,3,12,6,
  	0,178,180,3,18,9,0,179,178,1,0,0,0,179,180,1,0,0,0,180,224,1,0,0,0,181,
  	182,5,19,0,0,182,183,5,46,0,0,183,196,3,12,6,0,184,186,3,24,12,0,185,
  	184,1,0,0,0,186,187,1,0,0,0,187,185,1,0,0,0,187,188,1,0,0,0,188,190,1,
  	0,0,0,189,191,3,18,9,0,190,189,1,0,0,0,190,191,1,0,0,0,191,193,1,0,0,
  	0,192,194,3,20,10,0,193,192,1,0,0,0,193,194,1,0,0,0,194,197,1,0,0,0,195,
  	197,3,20,10,0,196,185,1,0,0,0,196,195,1,0,0,0,197,224,1,0,0,0,198,200,
  	5,35,0,0,199,198,1,0,0,0,199,200,1,0,0,0,200,201,1,0,0,0,201,202,5,22,
  	0,0,202,207,3,22,11,0,203,204,5,45,0,0,204,206,3,22,11,0,205,203,1,0,
  	0,0,206,209,1,0,0,0,207,205,1,0,0,0,207,208,1,0,0,0,208,210,1,0,0,0,209,
  	207,1,0,0,0,210,211,5,46,0,0,211,212,3,12,6,0,212,224,1,0,0,0,213,215,
  	3,14,7,0,214,213,1,0,0,0,215,218,1,0,0,0,216,214,1,0,0,0,216,217,1,0,
  	0,0,217,221,1,0,0,0,218,216,1,0,0,0,219,222,3,26,13,0,220,222,3,28,14,
  	0,221,219,1,0,0,0,221,220,1,0,0,0,222,224,1,0,0,0,223,149,1,0,0,0,223,
  	162,1,0,0,0,223,170,1,0,0,0,223,181,1,0,0,0,223,199,1,0,0,0,223,216,1,
  	0,0,0,224,11,1,0,0,0,225,236,3,42,21,0,226,227,5,3,0,0,227,229,5,1,0,
  	0,228,230,3,8,4,0,229,228,1,0,0,0,230,231,1,0,0,0,231,229,1,0,0,0,231,
  	232,1,0,0,0,232,233,1,0,0,0,233,234,5,2,0,0,234,236,1,0,0,0,235,225,1,
  	0,0,0,235,226,1,0,0,0,236,13,1,0,0,0,237,238,5,68,0,0,238,244,3,88,44,
  	0,239,241,5,90,0,0,240,242,3,104,52,0,241,240,1,0,0,0,241,242,1,0,0,0,
  	242,243,1,0,0,0,243,245,5,91,0,0,244,239,1,0,0,0,244,245,1,0,0,0,245,
  	246,1,0,0,0,246,247,5,3,0,0,247,15,1,0,0,0,248,249,5,14,0,0,249,250,3,
  	62,31,0,250,251,5,46,0,0,251,252,3,12,6,0,252,17,1,0,0,0,253,254,5,15,
  	0,0,254,255,5,46,0,0,255,256,3,12,6,0,256,19,1,0,0,0,257,258,5,21,0,0,
  	258,259,5,46,0,0,259,260,3,12,6,0,260,21,1,0,0,0,261,264,3,62,31,0,262,
  	263,5,10,0,0,263,265,3,78,39,0,264,262,1,0,0,0,264,265,1,0,0,0,265,23,
  	1,0,0,0,266,280,5,23,0,0,267,278,3,62,31,0,268,269,4,12,0,0,269,270,5,
  	45,0,0,270,271,3,90,45,0,271,272,6,12,-1,0,272,279,1,0,0,0,273,274,4,
  	12,1,0,274,275,5,10,0,0,275,276,3,90,45,0,276,277,6,12,-1,0,277,279,1,
  	0,0,0,278,268,1,0,0,0,278,273,1,0,0,0,278,279,1,0,0,0,279,281,1,0,0,0,
  	280,267,1,0,0,0,280,281,1,0,0,0,281,282,1,0,0,0,282,283,5,46,0,0,283,
  	284,3,12,6,0,284,25,1,0,0,0,285,286,5,29,0,0,286,292,3,90,45,0,287,289,
  	5,90,0,0,288,290,3,104,52,0,289,288,1,0,0,0,289,290,1,0,0,0,290,291,1,
  	0,0,0,291,293,5,91,0,0,292,287,1,0,0,0,292,293,1,0,0,0,293,294,1,0,0,
  	0,294,295,5,46,0,0,295,296,3,12,6,0,296,27,1,0,0,0,297,299,5,35,0,0,298,
  	297,1,0,0,0,298,299,1,0,0,0,299,300,1,0,0,0,300,301,5,4,0,0,301,302,3,
  	90,45,0,302,304,5,90,0,0,303,305,3,30,15,0,304,303,1,0,0,0,304,305,1,
  	0,0,0,305,306,1,0,0,0,306,309,5,91,0,0,307,308,5,69,0,0,308,310,3,62,
  	31,0,309,307,1,0,0,0,309,310,1,0,0,0,310,311,1,0,0,0,311,312,5,46,0,0,
  	312,313,3,12,6,0,313,29,1,0,0,0,314,315,3,36,18,0,315,316,5,45,0,0,316,
  	318,1,0,0,0,317,314,1,0,0,0,317,318,1,0,0,0,318,329,1,0,0,0,319,322,3,
  	32,16,0,320,321,5,45,0,0,321,323,3,36,18,0,322,320,1,0,0,0,322,323,1,
  	0,0,0,323,326,1,0,0,0,324,325,5,45,0,0,325,327,3,34,17,0,326,324,1,0,
  	0,0,326,327,1,0,0,0,327,330,1,0,0,0,328,330,3,34,17,0,329,319,1,0,0,0,
  	329,328,1,0,0,0,330,332,1,0,0,0,331,333,5,45,0,0,332,331,1,0,0,0,332,
  	333,1,0,0,0,333,339,1,0,0,0,334,336,3,36,18,0,335,337,5,45,0,0,336,335,
  	1,0,0,0,336,337,1,0,0,0,337,339,1,0,0,0,338,317,1,0,0,0,338,334,1,0,0,
  	0,339,31,1,0,0,0,340,341,5,44,0,0,341,342,3,40,20,0,342,33,1,0,0,0,343,
  	344,5,48,0,0,344,345,3,40,20,0,345,35,1,0,0,0,346,351,3,38,19,0,347,348,
  	5,45,0,0,348,350,3,38,19,0,349,347,1,0,0,0,350,353,1,0,0,0,351,349,1,
  	0,0,0,351,352,1,0,0,0,352,37,1,0,0,0,353,351,1,0,0,0,354,357,3,40,20,
  	0,355,356,5,49,0,0,356,358,3,62,31,0,357,355,1,0,0,0,357,358,1,0,0,0,
  	358,361,1,0,0,0,359,361,5,44,0,0,360,354,1,0,0,0,360,359,1,0,0,0,361,
  	39,1,0,0,0,362,365,3,90,45,0,363,364,5,46,0,0,364,366,3,62,31,0,365,363,
  	1,0,0,0,365,366,1,0,0,0,366,41,1,0,0,0,367,372,3,44,22,0,368,369,5,47,
  	0,0,369,371,3,44,22,0,370,368,1,0,0,0,371,374,1,0,0,0,372,370,1,0,0,0,
  	372,373,1,0,0,0,373,376,1,0,0,0,374,372,1,0,0,0,375,377,5,47,0,0,376,
  	375,1,0,0,0,376,377,1,0,0,0,377,378,1,0,0,0,378,379,7,0,0,0,379,43,1,
  	0,0,0,380,382,3,46,23,0,381,383,3,50,25,0,382,381,1,0,0,0,382,383,1,0,
  	0,0,383,505,1,0,0,0,384,385,4,22,2,0,385,408,5,37,0,0,386,391,3,62,31,
  	0,387,388,5,45,0,0,388,390,3,62,31,0,389,387,1,0,0,0,390,393,1,0,0,0,
  	391,389,1,0,0,0,391,392,1,0,0,0,392,395,1,0,0,0,393,391,1,0,0,0,394,396,
  	5,45,0,0,395,394,1,0,0,0,395,396,1,0,0,0,396,409,1,0,0,0,397,398,5,54,
  	0,0,398,401,3,62,31,0,399,400,5,45,0,0,400,402,3,62,31,0,401,399,1,0,
  	0,0,402,403,1,0,0,0,403,401,1,0,0,0,403,404,1,0,0,0,404,406,1,0,0,0,405,
  	407,5,45,0,0,406,405,1,0,0,0,406,407,1,0,0,0,407,409,1,0,0,0,408,386,
  	1,0,0,0,408,397,1,0,0,0,409,410,1,0,0,0,410,411,6,22,-1,0,411,505,1,0,
  	0,0,412,413,5,31,0,0,413,505,3,52,26,0,414,505,5,32,0,0,415,505,5,34,
  	0,0,416,505,5,33,0,0,417,419,5,5,0,0,418,420,3,86,43,0,419,418,1,0,0,
  	0,419,420,1,0,0,0,420,505,1,0,0,0,421,431,5,6,0,0,422,429,3,62,31,0,423,
  	424,5,45,0,0,424,427,3,62,31,0,425,426,5,45,0,0,426,428,3,62,31,0,427,
  	425,1,0,0,0,427,428,1,0,0,0,428,430,1,0,0,0,429,423,1,0,0,0,429,430,1,
  	0,0,0,430,432,1,0,0,0,431,422,1,0,0,0,431,432,1,0,0,0,432,435,1,0,0,0,
  	433,434,5,7,0,0,434,436,3,62,31,0,435,433,1,0,0,0,435,436,1,0,0,0,436,
  	505,1,0,0,0,437,505,3,96,48,0,438,439,5,8,0,0,439,505,3,58,29,0,440,453,
  	5,7,0,0,441,443,7,1,0,0,442,441,1,0,0,0,443,446,1,0,0,0,444,442,1,0,0,
  	0,444,445,1,0,0,0,445,447,1,0,0,0,446,444,1,0,0,0,447,454,3,88,44,0,448,
  	450,7,1,0,0,449,448,1,0,0,0,450,451,1,0,0,0,451,449,1,0,0,0,451,452,1,
  	0,0,0,452,454,1,0,0,0,453,444,1,0,0,0,453,449,1,0,0,0,454,455,1,0,0,0,
  	455,462,5,8,0,0,456,463,5,44,0,0,457,458,5,90,0,0,458,459,3,54,27,0,459,
  	460,5,91,0,0,460,463,1,0,0,0,461,463,3,54,27,0,462,456,1,0,0,0,462,457,
  	1,0,0,0,462,461,1,0,0,0,463,505,1,0,0,0,464,465,5,11,0,0,465,470,3,90,
  	45,0,466,467,5,45,0,0,467,469,3,90,45,0,468,466,1,0,0,0,469,472,1,0,0,
  	0,470,468,1,0,0,0,470,471,1,0,0,0,471,505,1,0,0,0,472,470,1,0,0,0,473,
  	474,4,22,3,0,474,475,5,38,0,0,475,482,3,78,39,0,476,477,5,18,0,0,477,
  	480,3,62,31,0,478,479,5,45,0,0,479,481,3,62,31,0,480,478,1,0,0,0,480,
  	481,1,0,0,0,481,483,1,0,0,0,482,476,1,0,0,0,482,483,1,0,0,0,483,484,1,
  	0,0,0,484,485,6,22,-1,0,485,505,1,0,0,0,486,487,5,12,0,0,487,490,3,62,
  	31,0,488,489,5,45,0,0,489,491,3,62,31,0,490,488,1,0,0,0,490,491,1,0,0,
  	0,491,505,1,0,0,0,492,493,4,22,4,0,493,494,5,9,0,0,494,499,3,90,45,0,
  	495,496,5,45,0,0,496,498,3,90,45,0,497,495,1,0,0,0,498,501,1,0,0,0,499,
  	497,1,0,0,0,499,500,1,0,0,0,500,502,1,0,0,0,501,499,1,0,0,0,502,503,6,
  	22,-1,0,503,505,1,0,0,0,504,380,1,0,0,0,504,384,1,0,0,0,504,412,1,0,0,
  	0,504,414,1,0,0,0,504,415,1,0,0,0,504,416,1,0,0,0,504,417,1,0,0,0,504,
  	421,1,0,0,0,504,437,1,0,0,0,504,438,1,0,0,0,504,440,1,0,0,0,504,464,1,
  	0,0,0,504,473,1,0,0,0,504,486,1,0,0,0,504,492,1,0,0,0,505,45,1,0,0,0,
  	506,509,3,62,31,0,507,509,3,48,24,0,508,506,1,0,0,0,508,507,1,0,0,0,509,
  	510,1,0,0,0,510,511,5,45,0,0,511,513,1,0,0,0,512,508,1,0,0,0,513,514,
  	1,0,0,0,514,512,1,0,0,0,514,515,1,0,0,0,515,518,1,0,0,0,516,519,3,62,
  	31,0,517,519,3,48,24,0,518,516,1,0,0,0,518,517,1,0,0,0,518,519,1,0,0,
  	0,519,522,1,0,0,0,520,522,3,86,43,0,521,512,1,0,0,0,521,520,1,0,0,0,522,
  	47,1,0,0,0,523,524,5,44,0,0,524,525,3,78,39,0,525,49,1,0,0,0,526,540,
  	5,49,0,0,527,532,3,46,23,0,528,529,5,49,0,0,529,531,3,46,23,0,530,528,
  	1,0,0,0,531,534,1,0,0,0,532,530,1,0,0,0,532,533,1,0,0,0,533,537,1,0,0,
  	0,534,532,1,0,0,0,535,536,5,49,0,0,536,538,3,96,48,0,537,535,1,0,0,0,
  	537,538,1,0,0,0,538,541,1,0,0,0,539,541,3,96,48,0,540,527,1,0,0,0,540,
  	539,1,0,0,0,541,557,1,0,0,0,542,543,4,25,5,0,543,544,5,46,0,0,544,547,
  	3,62,31,0,545,546,5,49,0,0,546,548,3,86,43,0,547,545,1,0,0,0,547,548,
  	1,0,0,0,548,549,1,0,0,0,549,550,6,25,-1,0,550,557,1,0,0,0,551,554,7,2,
  	0,0,552,555,3,96,48,0,553,555,3,86,43,0,554,552,1,0,0,0,554,553,1,0,0,
  	0,555,557,1,0,0,0,556,526,1,0,0,0,556,542,1,0,0,0,556,551,1,0,0,0,557,
  	51,1,0,0,0,558,563,3,78,39,0,559,560,5,45,0,0,560,562,3,78,39,0,561,559,
  	1,0,0,0,562,565,1,0,0,0,563,561,1,0,0,0,563,564,1,0,0,0,564,567,1,0,0,
  	0,565,563,1,0,0,0,566,568,5,45,0,0,567,566,1,0,0,0,567,568,1,0,0,0,568,
  	53,1,0,0,0,569,574,3,56,28,0,570,571,5,45,0,0,571,573,3,56,28,0,572,570,
  	1,0,0,0,573,576,1,0,0,0,574,572,1,0,0,0,574,575,1,0,0,0,575,578,1,0,0,
  	0,576,574,1,0,0,0,577,579,5,45,0,0,578,577,1,0,0,0,578,579,1,0,0,0,579,
  	55,1,0,0,0,580,583,3,90,45,0,581,582,5,10,0,0,582,584,3,90,45,0,583,581,
  	1,0,0,0,583,584,1,0,0,0,584,57,1,0,0,0,585,590,3,60,30,0,586,587,5,45,
  	0,0,587,589,3,60,30,0,588,586,1,0,0,0,589,592,1,0,0,0,590,588,1,0,0,0,
  	590,591,1,0,0,0,591,59,1,0,0,0,592,590,1,0,0,0,593,596,3,88,44,0,594,
  	595,5,10,0,0,595,597,3,90,45,0,596,594,1,0,0,0,596,597,1,0,0,0,597,61,
  	1,0,0,0,598,604,3,74,37,0,599,600,5,13,0,0,600,601,3,74,37,0,601,602,
  	5,15,0,0,602,603,3,62,31,0,603,605,1,0,0,0,604,599,1,0,0,0,604,605,1,
  	0,0,0,605,613,1,0,0,0,606,608,5,24,0,0,607,609,3,64,32,0,608,607,1,0,
  	0,0,608,609,1,0,0,0,609,610,1,0,0,0,610,611,5,46,0,0,611,613,3,62,31,
  	0,612,598,1,0,0,0,612,606,1,0,0,0,613,63,1,0,0,0,614,615,3,66,33,0,615,
  	616,5,45,0,0,616,618,1,0,0,0,617,614,1,0,0,0,617,618,1,0,0,0,618,629,
  	1,0,0,0,619,622,3,70,35,0,620,621,5,45,0,0,621,623,3,66,33,0,622,620,
  	1,0,0,0,622,623,1,0,0,0,623,626,1,0,0,0,624,625,5,45,0,0,625,627,3,72,
  	36,0,626,624,1,0,0,0,626,627,1,0,0,0,627,630,1,0,0,0,628,630,3,72,36,
  	0,629,619,1,0,0,0,629,628,1,0,0,0,630,632,1,0,0,0,631,633,5,45,0,0,632,
  	631,1,0,0,0,632,633,1,0,0,0,633,639,1,0,0,0,634,636,3,66,33,0,635,637,
  	5,45,0,0,636,635,1,0,0,0,636,637,1,0,0,0,637,639,1,0,0,0,638,617,1,0,
  	0,0,638,634,1,0,0,0,639,65,1,0,0,0,640,645,3,68,34,0,641,642,5,45,0,0,
  	642,644,3,68,34,0,643,641,1,0,0,0,644,647,1,0,0,0,645,643,1,0,0,0,645,
  	646,1,0,0,0,646,67,1,0,0,0,647,645,1,0,0,0,648,651,3,90,45,0,649,650,
  	5,49,0,0,650,652,3,62,31,0,651,649,1,0,0,0,651,652,1,0,0,0,652,655,1,
  	0,0,0,653,655,5,44,0,0,654,648,1,0,0,0,654,653,1,0,0,0,655,69,1,0,0,0,
  	656,657,5,44,0,0,657,658,3,90,45,0,658,71,1,0,0,0,659,660,5,48,0,0,660,
  	661,3,90,45,0,661,73,1,0,0,0,662,663,6,37,-1,0,663,667,3,76,38,0,664,
  	665,5,27,0,0,665,667,3,74,37,3,666,662,1,0,0,0,666,664,1,0,0,0,667,676,
  	1,0,0,0,668,669,10,2,0,0,669,670,5,26,0,0,670,675,3,74,37,3,671,672,10,
  	1,0,0,672,673,5,25,0,0,673,675,3,74,37,2,674,668,1,0,0,0,674,671,1,0,
  	0,0,675,678,1,0,0,0,676,674,1,0,0,0,676,677,1,0,0,0,677,75,1,0,0,0,678,
  	676,1,0,0,0,679,680,6,38,-1,0,680,681,3,78,39,0,681,703,1,0,0,0,682,698,
  	10,2,0,0,683,699,5,61,0,0,684,699,5,62,0,0,685,699,5,63,0,0,686,699,5,
  	64,0,0,687,699,5,65,0,0,688,699,5,66,0,0,689,699,5,67,0,0,690,692,5,27,
  	0,0,691,690,1,0,0,0,691,692,1,0,0,0,692,693,1,0,0,0,693,699,5,18,0,0,
  	694,696,5,28,0,0,695,697,5,27,0,0,696,695,1,0,0,0,696,697,1,0,0,0,697,
  	699,1,0,0,0,698,683,1,0,0,0,698,684,1,0,0,0,698,685,1,0,0,0,698,686,1,
  	0,0,0,698,687,1,0,0,0,698,688,1,0,0,0,698,689,1,0,0,0,698,691,1,0,0,0,
  	698,694,1,0,0,0,699,700,1,0,0,0,700,702,3,76,38,3,701,682,1,0,0,0,702,
  	705,1,0,0,0,703,701,1,0,0,0,703,704,1,0,0,0,704,77,1,0,0,0,705,703,1,
  	0,0,0,706,708,6,39,-1,0,707,709,5,36,0,0,708,707,1,0,0,0,708,709,1,0,
  	0,0,709,710,1,0,0,0,710,714,3,80,40,0,711,713,3,100,50,0,712,711,1,0,
  	0,0,713,716,1,0,0,0,714,712,1,0,0,0,714,715,1,0,0,0,715,720,1,0,0,0,716,
  	714,1,0,0,0,717,718,7,3,0,0,718,720,3,78,39,7,719,706,1,0,0,0,719,717,
  	1,0,0,0,720,744,1,0,0,0,721,722,10,8,0,0,722,723,5,48,0,0,723,743,3,78,
  	39,8,724,725,10,6,0,0,725,726,7,4,0,0,726,743,3,78,39,7,727,728,10,5,
  	0,0,728,729,7,5,0,0,729,743,3,78,39,6,730,731,10,4,0,0,731,732,7,6,0,
  	0,732,743,3,78,39,5,733,734,10,3,0,0,734,735,5,52,0,0,735,743,3,78,39,
  	4,736,737,10,2,0,0,737,738,5,51,0,0,738,743,3,78,39,3,739,740,10,1,0,
  	0,740,741,5,50,0,0,741,743,3,78,39,2,742,721,1,0,0,0,742,724,1,0,0,0,
  	742,727,1,0,0,0,742,730,1,0,0,0,742,733,1,0,0,0,742,736,1,0,0,0,742,739,
  	1,0,0,0,743,746,1,0,0,0,744,742,1,0,0,0,744,745,1,0,0,0,745,79,1,0,0,
  	0,746,744,1,0,0,0,747,750,5,90,0,0,748,751,3,96,48,0,749,751,3,84,42,
  	0,750,748,1,0,0,0,750,749,1,0,0,0,750,751,1,0,0,0,751,752,1,0,0,0,752,
  	785,5,91,0,0,753,755,5,94,0,0,754,756,3,84,42,0,755,754,1,0,0,0,755,756,
  	1,0,0,0,756,757,1,0,0,0,757,785,5,95,0,0,758,760,5,92,0,0,759,761,3,82,
  	41,0,760,759,1,0,0,0,760,761,1,0,0,0,761,762,1,0,0,0,762,785,5,93,0,0,
  	763,764,5,43,0,0,764,766,3,86,43,0,765,767,5,45,0,0,766,765,1,0,0,0,766,
  	767,1,0,0,0,767,768,1,0,0,0,768,769,5,43,0,0,769,785,1,0,0,0,770,785,
  	5,42,0,0,771,785,3,90,45,0,772,785,5,37,0,0,773,785,5,38,0,0,774,776,
  	5,56,0,0,775,774,1,0,0,0,775,776,1,0,0,0,776,777,1,0,0,0,777,785,3,92,
  	46,0,778,785,5,20,0,0,779,781,5,83,0,0,780,779,1,0,0,0,781,782,1,0,0,
  	0,782,780,1,0,0,0,782,783,1,0,0,0,783,785,1,0,0,0,784,747,1,0,0,0,784,
  	753,1,0,0,0,784,758,1,0,0,0,784,763,1,0,0,0,784,770,1,0,0,0,784,771,1,
  	0,0,0,784,772,1,0,0,0,784,773,1,0,0,0,784,775,1,0,0,0,784,778,1,0,0,0,
  	784,780,1,0,0,0,785,81,1,0,0,0,786,787,3,62,31,0,787,788,5,46,0,0,788,
  	789,3,62,31,0,789,793,1,0,0,0,790,791,5,48,0,0,791,793,3,78,39,0,792,
  	786,1,0,0,0,792,790,1,0,0,0,793,805,1,0,0,0,794,801,5,45,0,0,795,796,
  	3,62,31,0,796,797,5,46,0,0,797,798,3,62,31,0,798,802,1,0,0,0,799,800,
  	5,48,0,0,800,802,3,78,39,0,801,795,1,0,0,0,801,799,1,0,0,0,802,804,1,
  	0,0,0,803,794,1,0,0,0,804,807,1,0,0,0,805,803,1,0,0,0,805,806,1,0,0,0,
  	806,809,1,0,0,0,807,805,1,0,0,0,808,810,5,45,0,0,809,808,1,0,0,0,809,
  	810,1,0,0,0,810,818,1,0,0,0,811,812,3,62,31,0,812,813,5,46,0,0,813,814,
  	3,62,31,0,814,815,3,114,57,0,815,818,1,0,0,0,816,818,3,84,42,0,817,792,
  	1,0,0,0,817,811,1,0,0,0,817,816,1,0,0,0,818,83,1,0,0,0,819,822,3,62,31,
  	0,820,822,3,48,24,0,821,819,1,0,0,0,821,820,1,0,0,0,822,837,1,0,0,0,823,
  	838,3,114,57,0,824,827,5,45,0,0,825,828,3,62,31,0,826,828,3,48,24,0,827,
  	825,1,0,0,0,827,826,1,0,0,0,828,830,1,0,0,0,829,824,1,0,0,0,830,833,1,
  	0,0,0,831,829,1,0,0,0,831,832,1,0,0,0,832,835,1,0,0,0,833,831,1,0,0,0,
  	834,836,5,45,0,0,835,834,1,0,0,0,835,836,1,0,0,0,836,838,1,0,0,0,837,
  	823,1,0,0,0,837,831,1,0,0,0,838,85,1,0,0,0,839,844,3,62,31,0,840,841,
  	5,45,0,0,841,843,3,62,31,0,842,840,1,0,0,0,843,846,1,0,0,0,844,842,1,
  	0,0,0,844,845,1,0,0,0,845,848,1,0,0,0,846,844,1,0,0,0,847,849,5,45,0,
  	0,848,847,1,0,0,0,848,849,1,0,0,0,849,87,1,0,0,0,850,851,6,44,-1,0,851,
  	852,3,90,45,0,852,858,1,0,0,0,853,854,10,2,0,0,854,855,5,41,0,0,855,857,
  	3,90,45,0,856,853,1,0,0,0,857,860,1,0,0,0,858,856,1,0,0,0,858,859,1,0,
  	0,0,859,89,1,0,0,0,860,858,1,0,0,0,861,862,7,7,0,0,862,91,1,0,0,0,863,
  	867,3,94,47,0,864,867,5,88,0,0,865,867,5,89,0,0,866,863,1,0,0,0,866,864,
  	1,0,0,0,866,865,1,0,0,0,867,93,1,0,0,0,868,869,7,8,0,0,869,95,1,0,0,0,
  	870,872,5,30,0,0,871,873,3,98,49,0,872,871,1,0,0,0,872,873,1,0,0,0,873,
  	97,1,0,0,0,874,875,5,7,0,0,875,878,3,62,31,0,876,878,3,86,43,0,877,874,
  	1,0,0,0,877,876,1,0,0,0,878,99,1,0,0,0,879,880,5,41,0,0,880,882,3,90,
  	45,0,881,883,3,102,51,0,882,881,1,0,0,0,882,883,1,0,0,0,883,886,1,0,0,
  	0,884,886,3,102,51,0,885,879,1,0,0,0,885,884,1,0,0,0,886,101,1,0,0,0,
  	887,889,5,90,0,0,888,890,3,104,52,0,889,888,1,0,0,0,889,890,1,0,0,0,890,
  	891,1,0,0,0,891,897,5,91,0,0,892,893,5,94,0,0,893,894,3,108,54,0,894,
  	895,5,95,0,0,895,897,1,0,0,0,896,887,1,0,0,0,896,892,1,0,0,0,897,103,
  	1,0,0,0,898,903,3,106,53,0,899,900,5,45,0,0,900,902,3,106,53,0,901,899,
  	1,0,0,0,902,905,1,0,0,0,903,901,1,0,0,0,903,904,1,0,0,0,904,907,1,0,0,
  	0,905,903,1,0,0,0,906,908,5,45,0,0,907,906,1,0,0,0,907,908,1,0,0,0,908,
  	105,1,0,0,0,909,913,3,62,31,0,910,914,3,114,57,0,911,912,5,49,0,0,912,
  	914,3,62,31,0,913,910,1,0,0,0,913,911,1,0,0,0,913,914,1,0,0,0,914,918,
  	1,0,0,0,915,916,7,9,0,0,916,918,3,62,31,0,917,909,1,0,0,0,917,915,1,0,
  	0,0,918,107,1,0,0,0,919,924,3,110,55,0,920,921,5,45,0,0,921,923,3,110,
  	55,0,922,920,1,0,0,0,923,926,1,0,0,0,924,922,1,0,0,0,924,925,1,0,0,0,
  	925,928,1,0,0,0,926,924,1,0,0,0,927,929,5,45,0,0,928,927,1,0,0,0,928,
  	929,1,0,0,0,929,109,1,0,0,0,930,949,5,42,0,0,931,939,3,62,31,0,932,934,
  	5,46,0,0,933,935,3,62,31,0,934,933,1,0,0,0,934,935,1,0,0,0,935,937,1,
  	0,0,0,936,938,3,112,56,0,937,936,1,0,0,0,937,938,1,0,0,0,938,940,1,0,
  	0,0,939,932,1,0,0,0,939,940,1,0,0,0,940,949,1,0,0,0,941,943,5,46,0,0,
  	942,944,3,62,31,0,943,942,1,0,0,0,943,944,1,0,0,0,944,946,1,0,0,0,945,
  	947,3,112,56,0,946,945,1,0,0,0,946,947,1,0,0,0,947,949,1,0,0,0,948,930,
  	1,0,0,0,948,931,1,0,0,0,948,941,1,0,0,0,949,111,1,0,0,0,950,952,5,46,
  	0,0,951,953,3,62,31,0,952,951,1,0,0,0,952,953,1,0,0,0,953,113,1,0,0,0,
  	954,955,5,17,0,0,955,956,3,52,26,0,956,957,5,18,0,0,957,959,3,74,37,0,
  	958,960,3,116,58,0,959,958,1,0,0,0,959,960,1,0,0,0,960,115,1,0,0,0,961,
  	968,3,114,57,0,962,963,5,13,0,0,963,965,3,62,31,0,964,966,3,116,58,0,
  	965,964,1,0,0,0,965,966,1,0,0,0,966,968,1,0,0,0,967,961,1,0,0,0,967,962,
  	1,0,0,0,968,117,1,0,0,0,151,121,130,134,136,142,147,156,160,167,170,179,
  	187,190,193,196,199,207,216,221,223,231,235,241,244,264,278,280,289,292,
  	298,304,309,317,322,326,329,332,336,338,351,357,360,365,372,376,382,391,
  	395,403,406,408,419,427,429,431,435,444,451,453,462,470,480,482,490,499,
  	504,508,514,518,521,532,537,540,547,554,556,563,567,574,578,583,590,596,
  	604,608,612,617,622,626,629,632,636,638,645,651,654,666,674,676,691,696,
  	698,703,708,714,719,742,744,750,755,760,766,775,782,784,792,801,805,809,
  	817,821,827,831,835,837,844,848,858,866,872,877,882,885,889,896,903,907,
  	913,917,924,928,934,937,939,943,946,948,952,959,965,967
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  myparserParserStaticData = staticData.release();
}

}

myParser::myParser(TokenStream *input) : myParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

myParser::myParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : myParserBase(input) {
  myParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *myparserParserStaticData->atn, myparserParserStaticData->decisionToDFA, myparserParserStaticData->sharedContextCache, options);
}

myParser::~myParser() {
  delete _interpreter;
}

const atn::ATN& myParser::getATN() const {
  return *myparserParserStaticData->atn;
}

std::string myParser::getGrammarFileName() const {
  return "myParser.g4";
}

const std::vector<std::string>& myParser::getRuleNames() const {
  return myparserParserStaticData->ruleNames;
}

const dfa::Vocabulary& myParser::getVocabulary() const {
  return myparserParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView myParser::getSerializedATN() const {
  return myparserParserStaticData->serializedATN;
}


//----------------- RootContext ------------------------------------------------------------------

myParser::RootContext::RootContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* myParser::RootContext::EOF() {
  return getToken(myParser::EOF, 0);
}

myParser::Single_inputContext* myParser::RootContext::single_input() {
  return getRuleContext<myParser::Single_inputContext>(0);
}

myParser::File_inputContext* myParser::RootContext::file_input() {
  return getRuleContext<myParser::File_inputContext>(0);
}

myParser::Eval_inputContext* myParser::RootContext::eval_input() {
  return getRuleContext<myParser::Eval_inputContext>(0);
}


size_t myParser::RootContext::getRuleIndex() const {
  return myParser::RuleRoot;
}

void myParser::RootContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRoot(this);
}

void myParser::RootContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRoot(this);
}

myParser::RootContext* myParser::root() {
  RootContext *_localctx = _tracker.createInstance<RootContext>(_ctx, getState());
  enterRule(_localctx, 0, myParser::RuleRoot);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(121);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 0, _ctx)) {
    case 1: {
      setState(118);
      single_input();
      break;
    }

    case 2: {
      setState(119);
      file_input();
      break;
    }

    case 3: {
      setState(120);
      eval_input();
      break;
    }

    default:
      break;
    }
    setState(123);
    match(myParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Single_inputContext ------------------------------------------------------------------

myParser::Single_inputContext::Single_inputContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* myParser::Single_inputContext::LINE_BREAK() {
  return getToken(myParser::LINE_BREAK, 0);
}

myParser::Simple_stmtContext* myParser::Single_inputContext::simple_stmt() {
  return getRuleContext<myParser::Simple_stmtContext>(0);
}

myParser::Compound_stmtContext* myParser::Single_inputContext::compound_stmt() {
  return getRuleContext<myParser::Compound_stmtContext>(0);
}


size_t myParser::Single_inputContext::getRuleIndex() const {
  return myParser::RuleSingle_input;
}

void myParser::Single_inputContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSingle_input(this);
}

void myParser::Single_inputContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSingle_input(this);
}

myParser::Single_inputContext* myParser::single_input() {
  Single_inputContext *_localctx = _tracker.createInstance<Single_inputContext>(_ctx, getState());
  enterRule(_localctx, 2, myParser::RuleSingle_input);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(130);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 1, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(125);
      match(myParser::LINE_BREAK);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(126);
      simple_stmt();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(127);
      compound_stmt();
      setState(128);
      match(myParser::LINE_BREAK);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- File_inputContext ------------------------------------------------------------------

myParser::File_inputContext::File_inputContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> myParser::File_inputContext::LINE_BREAK() {
  return getTokens(myParser::LINE_BREAK);
}

tree::TerminalNode* myParser::File_inputContext::LINE_BREAK(size_t i) {
  return getToken(myParser::LINE_BREAK, i);
}

std::vector<myParser::StmtContext *> myParser::File_inputContext::stmt() {
  return getRuleContexts<myParser::StmtContext>();
}

myParser::StmtContext* myParser::File_inputContext::stmt(size_t i) {
  return getRuleContext<myParser::StmtContext>(i);
}


size_t myParser::File_inputContext::getRuleIndex() const {
  return myParser::RuleFile_input;
}

void myParser::File_inputContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFile_input(this);
}

void myParser::File_inputContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFile_input(this);
}

myParser::File_inputContext* myParser::file_input() {
  File_inputContext *_localctx = _tracker.createInstance<File_inputContext>(_ctx, getState());
  enterRule(_localctx, 4, myParser::RuleFile_input);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(134); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(134);
              _errHandler->sync(this);
              switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx)) {
              case 1: {
                setState(132);
                match(myParser::LINE_BREAK);
                break;
              }

              case 2: {
                setState(133);
                stmt();
                break;
              }

              default:
                break;
              }
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(136); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 3, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Eval_inputContext ------------------------------------------------------------------

myParser::Eval_inputContext::Eval_inputContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

myParser::TestlistContext* myParser::Eval_inputContext::testlist() {
  return getRuleContext<myParser::TestlistContext>(0);
}

std::vector<tree::TerminalNode *> myParser::Eval_inputContext::LINE_BREAK() {
  return getTokens(myParser::LINE_BREAK);
}

tree::TerminalNode* myParser::Eval_inputContext::LINE_BREAK(size_t i) {
  return getToken(myParser::LINE_BREAK, i);
}


size_t myParser::Eval_inputContext::getRuleIndex() const {
  return myParser::RuleEval_input;
}

void myParser::Eval_inputContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEval_input(this);
}

void myParser::Eval_inputContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEval_input(this);
}

myParser::Eval_inputContext* myParser::eval_input() {
  Eval_inputContext *_localctx = _tracker.createInstance<Eval_inputContext>(_ctx, getState());
  enterRule(_localctx, 6, myParser::RuleEval_input);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(138);
    testlist();
    setState(142);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == myParser::LINE_BREAK) {
      setState(139);
      match(myParser::LINE_BREAK);
      setState(144);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StmtContext ------------------------------------------------------------------

myParser::StmtContext::StmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

myParser::Simple_stmtContext* myParser::StmtContext::simple_stmt() {
  return getRuleContext<myParser::Simple_stmtContext>(0);
}

myParser::Compound_stmtContext* myParser::StmtContext::compound_stmt() {
  return getRuleContext<myParser::Compound_stmtContext>(0);
}


size_t myParser::StmtContext::getRuleIndex() const {
  return myParser::RuleStmt;
}

void myParser::StmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStmt(this);
}

void myParser::StmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStmt(this);
}

myParser::StmtContext* myParser::stmt() {
  StmtContext *_localctx = _tracker.createInstance<StmtContext>(_ctx, getState());
  enterRule(_localctx, 8, myParser::RuleStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(147);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 5, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(145);
      simple_stmt();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(146);
      compound_stmt();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Compound_stmtContext ------------------------------------------------------------------

myParser::Compound_stmtContext::Compound_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t myParser::Compound_stmtContext::getRuleIndex() const {
  return myParser::RuleCompound_stmt;
}

void myParser::Compound_stmtContext::copyFrom(Compound_stmtContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- While_stmtContext ------------------------------------------------------------------

tree::TerminalNode* myParser::While_stmtContext::WHILE() {
  return getToken(myParser::WHILE, 0);
}

myParser::TestContext* myParser::While_stmtContext::test() {
  return getRuleContext<myParser::TestContext>(0);
}

tree::TerminalNode* myParser::While_stmtContext::COLON() {
  return getToken(myParser::COLON, 0);
}

myParser::SuiteContext* myParser::While_stmtContext::suite() {
  return getRuleContext<myParser::SuiteContext>(0);
}

myParser::Else_clauseContext* myParser::While_stmtContext::else_clause() {
  return getRuleContext<myParser::Else_clauseContext>(0);
}

myParser::While_stmtContext::While_stmtContext(Compound_stmtContext *ctx) { copyFrom(ctx); }

void myParser::While_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWhile_stmt(this);
}
void myParser::While_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWhile_stmt(this);
}
//----------------- Try_stmtContext ------------------------------------------------------------------

tree::TerminalNode* myParser::Try_stmtContext::TRY() {
  return getToken(myParser::TRY, 0);
}

tree::TerminalNode* myParser::Try_stmtContext::COLON() {
  return getToken(myParser::COLON, 0);
}

myParser::SuiteContext* myParser::Try_stmtContext::suite() {
  return getRuleContext<myParser::SuiteContext>(0);
}

myParser::Finally_clauseContext* myParser::Try_stmtContext::finally_clause() {
  return getRuleContext<myParser::Finally_clauseContext>(0);
}

std::vector<myParser::Except_clauseContext *> myParser::Try_stmtContext::except_clause() {
  return getRuleContexts<myParser::Except_clauseContext>();
}

myParser::Except_clauseContext* myParser::Try_stmtContext::except_clause(size_t i) {
  return getRuleContext<myParser::Except_clauseContext>(i);
}

myParser::Else_clauseContext* myParser::Try_stmtContext::else_clause() {
  return getRuleContext<myParser::Else_clauseContext>(0);
}

myParser::Try_stmtContext::Try_stmtContext(Compound_stmtContext *ctx) { copyFrom(ctx); }

void myParser::Try_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTry_stmt(this);
}
void myParser::Try_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTry_stmt(this);
}
//----------------- If_stmtContext ------------------------------------------------------------------

tree::TerminalNode* myParser::If_stmtContext::IF() {
  return getToken(myParser::IF, 0);
}

tree::TerminalNode* myParser::If_stmtContext::COLON() {
  return getToken(myParser::COLON, 0);
}

myParser::SuiteContext* myParser::If_stmtContext::suite() {
  return getRuleContext<myParser::SuiteContext>(0);
}

myParser::TestContext* myParser::If_stmtContext::test() {
  return getRuleContext<myParser::TestContext>(0);
}

std::vector<myParser::Elif_clauseContext *> myParser::If_stmtContext::elif_clause() {
  return getRuleContexts<myParser::Elif_clauseContext>();
}

myParser::Elif_clauseContext* myParser::If_stmtContext::elif_clause(size_t i) {
  return getRuleContext<myParser::Elif_clauseContext>(i);
}

myParser::Else_clauseContext* myParser::If_stmtContext::else_clause() {
  return getRuleContext<myParser::Else_clauseContext>(0);
}

myParser::If_stmtContext::If_stmtContext(Compound_stmtContext *ctx) { copyFrom(ctx); }

void myParser::If_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIf_stmt(this);
}
void myParser::If_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIf_stmt(this);
}
//----------------- With_stmtContext ------------------------------------------------------------------

tree::TerminalNode* myParser::With_stmtContext::WITH() {
  return getToken(myParser::WITH, 0);
}

std::vector<myParser::With_itemContext *> myParser::With_stmtContext::with_item() {
  return getRuleContexts<myParser::With_itemContext>();
}

myParser::With_itemContext* myParser::With_stmtContext::with_item(size_t i) {
  return getRuleContext<myParser::With_itemContext>(i);
}

tree::TerminalNode* myParser::With_stmtContext::COLON() {
  return getToken(myParser::COLON, 0);
}

myParser::SuiteContext* myParser::With_stmtContext::suite() {
  return getRuleContext<myParser::SuiteContext>(0);
}

tree::TerminalNode* myParser::With_stmtContext::ASYNC() {
  return getToken(myParser::ASYNC, 0);
}

std::vector<tree::TerminalNode *> myParser::With_stmtContext::COMMA() {
  return getTokens(myParser::COMMA);
}

tree::TerminalNode* myParser::With_stmtContext::COMMA(size_t i) {
  return getToken(myParser::COMMA, i);
}

myParser::With_stmtContext::With_stmtContext(Compound_stmtContext *ctx) { copyFrom(ctx); }

void myParser::With_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWith_stmt(this);
}
void myParser::With_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWith_stmt(this);
}
//----------------- Class_or_func_def_stmtContext ------------------------------------------------------------------

myParser::ClassdefContext* myParser::Class_or_func_def_stmtContext::classdef() {
  return getRuleContext<myParser::ClassdefContext>(0);
}

myParser::FuncdefContext* myParser::Class_or_func_def_stmtContext::funcdef() {
  return getRuleContext<myParser::FuncdefContext>(0);
}

std::vector<myParser::DecoratorContext *> myParser::Class_or_func_def_stmtContext::decorator() {
  return getRuleContexts<myParser::DecoratorContext>();
}

myParser::DecoratorContext* myParser::Class_or_func_def_stmtContext::decorator(size_t i) {
  return getRuleContext<myParser::DecoratorContext>(i);
}

myParser::Class_or_func_def_stmtContext::Class_or_func_def_stmtContext(Compound_stmtContext *ctx) { copyFrom(ctx); }

void myParser::Class_or_func_def_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClass_or_func_def_stmt(this);
}
void myParser::Class_or_func_def_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClass_or_func_def_stmt(this);
}
//----------------- For_stmtContext ------------------------------------------------------------------

tree::TerminalNode* myParser::For_stmtContext::FOR() {
  return getToken(myParser::FOR, 0);
}

myParser::ExprlistContext* myParser::For_stmtContext::exprlist() {
  return getRuleContext<myParser::ExprlistContext>(0);
}

tree::TerminalNode* myParser::For_stmtContext::IN() {
  return getToken(myParser::IN, 0);
}

myParser::TestlistContext* myParser::For_stmtContext::testlist() {
  return getRuleContext<myParser::TestlistContext>(0);
}

tree::TerminalNode* myParser::For_stmtContext::COLON() {
  return getToken(myParser::COLON, 0);
}

myParser::SuiteContext* myParser::For_stmtContext::suite() {
  return getRuleContext<myParser::SuiteContext>(0);
}

tree::TerminalNode* myParser::For_stmtContext::ASYNC() {
  return getToken(myParser::ASYNC, 0);
}

myParser::Else_clauseContext* myParser::For_stmtContext::else_clause() {
  return getRuleContext<myParser::Else_clauseContext>(0);
}

myParser::For_stmtContext::For_stmtContext(Compound_stmtContext *ctx) { copyFrom(ctx); }

void myParser::For_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFor_stmt(this);
}
void myParser::For_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFor_stmt(this);
}
myParser::Compound_stmtContext* myParser::compound_stmt() {
  Compound_stmtContext *_localctx = _tracker.createInstance<Compound_stmtContext>(_ctx, getState());
  enterRule(_localctx, 10, myParser::RuleCompound_stmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(223);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 19, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<myParser::If_stmtContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(149);
      match(myParser::IF);
      setState(150);
      antlrcpp::downCast<If_stmtContext *>(_localctx)->cond = test();
      setState(151);
      match(myParser::COLON);
      setState(152);
      suite();
      setState(156);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 6, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(153);
          elif_clause(); 
        }
        setState(158);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 6, _ctx);
      }
      setState(160);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 7, _ctx)) {
      case 1: {
        setState(159);
        else_clause();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<myParser::While_stmtContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(162);
      match(myParser::WHILE);
      setState(163);
      test();
      setState(164);
      match(myParser::COLON);
      setState(165);
      suite();
      setState(167);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 8, _ctx)) {
      case 1: {
        setState(166);
        else_clause();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<myParser::For_stmtContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(170);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == myParser::ASYNC) {
        setState(169);
        match(myParser::ASYNC);
      }
      setState(172);
      match(myParser::FOR);
      setState(173);
      exprlist();
      setState(174);
      match(myParser::IN);
      setState(175);
      testlist();
      setState(176);
      match(myParser::COLON);
      setState(177);
      suite();
      setState(179);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 10, _ctx)) {
      case 1: {
        setState(178);
        else_clause();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<myParser::Try_stmtContext>(_localctx);
      enterOuterAlt(_localctx, 4);
      setState(181);
      match(myParser::TRY);
      setState(182);
      match(myParser::COLON);
      setState(183);
      suite();
      setState(196);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case myParser::EXCEPT: {
          setState(185); 
          _errHandler->sync(this);
          alt = 1;
          do {
            switch (alt) {
              case 1: {
                    setState(184);
                    except_clause();
                    break;
                  }

            default:
              throw NoViableAltException(this);
            }
            setState(187); 
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 11, _ctx);
          } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
          setState(190);
          _errHandler->sync(this);

          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 12, _ctx)) {
          case 1: {
            setState(189);
            else_clause();
            break;
          }

          default:
            break;
          }
          setState(193);
          _errHandler->sync(this);

          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 13, _ctx)) {
          case 1: {
            setState(192);
            finally_clause();
            break;
          }

          default:
            break;
          }
          break;
        }

        case myParser::FINALLY: {
          setState(195);
          finally_clause();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<myParser::With_stmtContext>(_localctx);
      enterOuterAlt(_localctx, 5);
      setState(199);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == myParser::ASYNC) {
        setState(198);
        match(myParser::ASYNC);
      }
      setState(201);
      match(myParser::WITH);
      setState(202);
      with_item();
      setState(207);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == myParser::COMMA) {
        setState(203);
        match(myParser::COMMA);
        setState(204);
        with_item();
        setState(209);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(210);
      match(myParser::COLON);
      setState(211);
      suite();
      break;
    }

    case 6: {
      _localctx = _tracker.createInstance<myParser::Class_or_func_def_stmtContext>(_localctx);
      enterOuterAlt(_localctx, 6);
      setState(216);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == myParser::AT) {
        setState(213);
        decorator();
        setState(218);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(221);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case myParser::CLASS: {
          setState(219);
          classdef();
          break;
        }

        case myParser::DEF:
        case myParser::ASYNC: {
          setState(220);
          funcdef();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SuiteContext ------------------------------------------------------------------

myParser::SuiteContext::SuiteContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

myParser::Simple_stmtContext* myParser::SuiteContext::simple_stmt() {
  return getRuleContext<myParser::Simple_stmtContext>(0);
}

tree::TerminalNode* myParser::SuiteContext::LINE_BREAK() {
  return getToken(myParser::LINE_BREAK, 0);
}

tree::TerminalNode* myParser::SuiteContext::INDENT() {
  return getToken(myParser::INDENT, 0);
}

tree::TerminalNode* myParser::SuiteContext::DEDENT() {
  return getToken(myParser::DEDENT, 0);
}

std::vector<myParser::StmtContext *> myParser::SuiteContext::stmt() {
  return getRuleContexts<myParser::StmtContext>();
}

myParser::StmtContext* myParser::SuiteContext::stmt(size_t i) {
  return getRuleContext<myParser::StmtContext>(i);
}


size_t myParser::SuiteContext::getRuleIndex() const {
  return myParser::RuleSuite;
}

void myParser::SuiteContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSuite(this);
}

void myParser::SuiteContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSuite(this);
}

myParser::SuiteContext* myParser::suite() {
  SuiteContext *_localctx = _tracker.createInstance<SuiteContext>(_ctx, getState());
  enterRule(_localctx, 12, myParser::RuleSuite);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(235);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 21, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(225);
      simple_stmt();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(226);
      match(myParser::LINE_BREAK);
      setState(227);
      match(myParser::INDENT);
      setState(229); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(228);
                stmt();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(231); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 20, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      setState(233);
      match(myParser::DEDENT);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DecoratorContext ------------------------------------------------------------------

myParser::DecoratorContext::DecoratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* myParser::DecoratorContext::AT() {
  return getToken(myParser::AT, 0);
}

myParser::Dotted_nameContext* myParser::DecoratorContext::dotted_name() {
  return getRuleContext<myParser::Dotted_nameContext>(0);
}

tree::TerminalNode* myParser::DecoratorContext::LINE_BREAK() {
  return getToken(myParser::LINE_BREAK, 0);
}

tree::TerminalNode* myParser::DecoratorContext::OPEN_PAREN() {
  return getToken(myParser::OPEN_PAREN, 0);
}

tree::TerminalNode* myParser::DecoratorContext::CLOSE_PAREN() {
  return getToken(myParser::CLOSE_PAREN, 0);
}

myParser::ArglistContext* myParser::DecoratorContext::arglist() {
  return getRuleContext<myParser::ArglistContext>(0);
}


size_t myParser::DecoratorContext::getRuleIndex() const {
  return myParser::RuleDecorator;
}

void myParser::DecoratorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDecorator(this);
}

void myParser::DecoratorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDecorator(this);
}

myParser::DecoratorContext* myParser::decorator() {
  DecoratorContext *_localctx = _tracker.createInstance<DecoratorContext>(_ctx, getState());
  enterRule(_localctx, 14, myParser::RuleDecorator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(237);
    match(myParser::AT);
    setState(238);
    dotted_name(0);
    setState(244);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == myParser::OPEN_PAREN) {
      setState(239);
      match(myParser::OPEN_PAREN);
      setState(241);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 1261322287421849600) != 0) || ((((_la - 83) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 83)) & 11007) != 0)) {
        setState(240);
        arglist();
      }
      setState(243);
      match(myParser::CLOSE_PAREN);
    }
    setState(246);
    match(myParser::LINE_BREAK);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Elif_clauseContext ------------------------------------------------------------------

myParser::Elif_clauseContext::Elif_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* myParser::Elif_clauseContext::ELIF() {
  return getToken(myParser::ELIF, 0);
}

myParser::TestContext* myParser::Elif_clauseContext::test() {
  return getRuleContext<myParser::TestContext>(0);
}

tree::TerminalNode* myParser::Elif_clauseContext::COLON() {
  return getToken(myParser::COLON, 0);
}

myParser::SuiteContext* myParser::Elif_clauseContext::suite() {
  return getRuleContext<myParser::SuiteContext>(0);
}


size_t myParser::Elif_clauseContext::getRuleIndex() const {
  return myParser::RuleElif_clause;
}

void myParser::Elif_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElif_clause(this);
}

void myParser::Elif_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElif_clause(this);
}

myParser::Elif_clauseContext* myParser::elif_clause() {
  Elif_clauseContext *_localctx = _tracker.createInstance<Elif_clauseContext>(_ctx, getState());
  enterRule(_localctx, 16, myParser::RuleElif_clause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(248);
    match(myParser::ELIF);
    setState(249);
    test();
    setState(250);
    match(myParser::COLON);
    setState(251);
    suite();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Else_clauseContext ------------------------------------------------------------------

myParser::Else_clauseContext::Else_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* myParser::Else_clauseContext::ELSE() {
  return getToken(myParser::ELSE, 0);
}

tree::TerminalNode* myParser::Else_clauseContext::COLON() {
  return getToken(myParser::COLON, 0);
}

myParser::SuiteContext* myParser::Else_clauseContext::suite() {
  return getRuleContext<myParser::SuiteContext>(0);
}


size_t myParser::Else_clauseContext::getRuleIndex() const {
  return myParser::RuleElse_clause;
}

void myParser::Else_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElse_clause(this);
}

void myParser::Else_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElse_clause(this);
}

myParser::Else_clauseContext* myParser::else_clause() {
  Else_clauseContext *_localctx = _tracker.createInstance<Else_clauseContext>(_ctx, getState());
  enterRule(_localctx, 18, myParser::RuleElse_clause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(253);
    match(myParser::ELSE);
    setState(254);
    match(myParser::COLON);
    setState(255);
    suite();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Finally_clauseContext ------------------------------------------------------------------

myParser::Finally_clauseContext::Finally_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* myParser::Finally_clauseContext::FINALLY() {
  return getToken(myParser::FINALLY, 0);
}

tree::TerminalNode* myParser::Finally_clauseContext::COLON() {
  return getToken(myParser::COLON, 0);
}

myParser::SuiteContext* myParser::Finally_clauseContext::suite() {
  return getRuleContext<myParser::SuiteContext>(0);
}


size_t myParser::Finally_clauseContext::getRuleIndex() const {
  return myParser::RuleFinally_clause;
}

void myParser::Finally_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFinally_clause(this);
}

void myParser::Finally_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFinally_clause(this);
}

myParser::Finally_clauseContext* myParser::finally_clause() {
  Finally_clauseContext *_localctx = _tracker.createInstance<Finally_clauseContext>(_ctx, getState());
  enterRule(_localctx, 20, myParser::RuleFinally_clause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(257);
    match(myParser::FINALLY);
    setState(258);
    match(myParser::COLON);
    setState(259);
    suite();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- With_itemContext ------------------------------------------------------------------

myParser::With_itemContext::With_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

myParser::TestContext* myParser::With_itemContext::test() {
  return getRuleContext<myParser::TestContext>(0);
}

tree::TerminalNode* myParser::With_itemContext::AS() {
  return getToken(myParser::AS, 0);
}

myParser::ExprContext* myParser::With_itemContext::expr() {
  return getRuleContext<myParser::ExprContext>(0);
}


size_t myParser::With_itemContext::getRuleIndex() const {
  return myParser::RuleWith_item;
}

void myParser::With_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWith_item(this);
}

void myParser::With_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWith_item(this);
}

myParser::With_itemContext* myParser::with_item() {
  With_itemContext *_localctx = _tracker.createInstance<With_itemContext>(_ctx, getState());
  enterRule(_localctx, 22, myParser::RuleWith_item);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(261);
    test();
    setState(264);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == myParser::AS) {
      setState(262);
      match(myParser::AS);
      setState(263);
      expr(0);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Except_clauseContext ------------------------------------------------------------------

myParser::Except_clauseContext::Except_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* myParser::Except_clauseContext::EXCEPT() {
  return getToken(myParser::EXCEPT, 0);
}

tree::TerminalNode* myParser::Except_clauseContext::COLON() {
  return getToken(myParser::COLON, 0);
}

myParser::SuiteContext* myParser::Except_clauseContext::suite() {
  return getRuleContext<myParser::SuiteContext>(0);
}

myParser::TestContext* myParser::Except_clauseContext::test() {
  return getRuleContext<myParser::TestContext>(0);
}

tree::TerminalNode* myParser::Except_clauseContext::COMMA() {
  return getToken(myParser::COMMA, 0);
}

myParser::NameContext* myParser::Except_clauseContext::name() {
  return getRuleContext<myParser::NameContext>(0);
}

tree::TerminalNode* myParser::Except_clauseContext::AS() {
  return getToken(myParser::AS, 0);
}


size_t myParser::Except_clauseContext::getRuleIndex() const {
  return myParser::RuleExcept_clause;
}

void myParser::Except_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExcept_clause(this);
}

void myParser::Except_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExcept_clause(this);
}

myParser::Except_clauseContext* myParser::except_clause() {
  Except_clauseContext *_localctx = _tracker.createInstance<Except_clauseContext>(_ctx, getState());
  enterRule(_localctx, 24, myParser::RuleExcept_clause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(266);
    match(myParser::EXCEPT);
    setState(280);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 1261023220259094528) != 0) || ((((_la - 83) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 83)) & 11007) != 0)) {
      setState(267);
      test();
      setState(278);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 25, _ctx)) {
      case 1: {
        setState(268);

        if (!(this.CheckVersion(2))) throw FailedPredicateException(this, "this.CheckVersion(2)");
        setState(269);
        match(myParser::COMMA);
        setState(270);
        name();
        this.SetVersion(2);
        break;
      }

      case 2: {
        setState(273);

        if (!(this.CheckVersion(3))) throw FailedPredicateException(this, "this.CheckVersion(3)");
        setState(274);
        match(myParser::AS);
        setState(275);
        name();
        this.SetVersion(3);
        break;
      }

      default:
        break;
      }
    }
    setState(282);
    match(myParser::COLON);
    setState(283);
    suite();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassdefContext ------------------------------------------------------------------

myParser::ClassdefContext::ClassdefContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* myParser::ClassdefContext::CLASS() {
  return getToken(myParser::CLASS, 0);
}

myParser::NameContext* myParser::ClassdefContext::name() {
  return getRuleContext<myParser::NameContext>(0);
}

tree::TerminalNode* myParser::ClassdefContext::COLON() {
  return getToken(myParser::COLON, 0);
}

myParser::SuiteContext* myParser::ClassdefContext::suite() {
  return getRuleContext<myParser::SuiteContext>(0);
}

tree::TerminalNode* myParser::ClassdefContext::OPEN_PAREN() {
  return getToken(myParser::OPEN_PAREN, 0);
}

tree::TerminalNode* myParser::ClassdefContext::CLOSE_PAREN() {
  return getToken(myParser::CLOSE_PAREN, 0);
}

myParser::ArglistContext* myParser::ClassdefContext::arglist() {
  return getRuleContext<myParser::ArglistContext>(0);
}


size_t myParser::ClassdefContext::getRuleIndex() const {
  return myParser::RuleClassdef;
}

void myParser::ClassdefContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassdef(this);
}

void myParser::ClassdefContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassdef(this);
}

myParser::ClassdefContext* myParser::classdef() {
  ClassdefContext *_localctx = _tracker.createInstance<ClassdefContext>(_ctx, getState());
  enterRule(_localctx, 26, myParser::RuleClassdef);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(285);
    match(myParser::CLASS);
    setState(286);
    name();
    setState(292);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == myParser::OPEN_PAREN) {
      setState(287);
      match(myParser::OPEN_PAREN);
      setState(289);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 1261322287421849600) != 0) || ((((_la - 83) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 83)) & 11007) != 0)) {
        setState(288);
        arglist();
      }
      setState(291);
      match(myParser::CLOSE_PAREN);
    }
    setState(294);
    match(myParser::COLON);
    setState(295);
    suite();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FuncdefContext ------------------------------------------------------------------

myParser::FuncdefContext::FuncdefContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* myParser::FuncdefContext::DEF() {
  return getToken(myParser::DEF, 0);
}

myParser::NameContext* myParser::FuncdefContext::name() {
  return getRuleContext<myParser::NameContext>(0);
}

tree::TerminalNode* myParser::FuncdefContext::OPEN_PAREN() {
  return getToken(myParser::OPEN_PAREN, 0);
}

tree::TerminalNode* myParser::FuncdefContext::CLOSE_PAREN() {
  return getToken(myParser::CLOSE_PAREN, 0);
}

tree::TerminalNode* myParser::FuncdefContext::COLON() {
  return getToken(myParser::COLON, 0);
}

myParser::SuiteContext* myParser::FuncdefContext::suite() {
  return getRuleContext<myParser::SuiteContext>(0);
}

tree::TerminalNode* myParser::FuncdefContext::ASYNC() {
  return getToken(myParser::ASYNC, 0);
}

myParser::TypedargslistContext* myParser::FuncdefContext::typedargslist() {
  return getRuleContext<myParser::TypedargslistContext>(0);
}

tree::TerminalNode* myParser::FuncdefContext::ARROW() {
  return getToken(myParser::ARROW, 0);
}

myParser::TestContext* myParser::FuncdefContext::test() {
  return getRuleContext<myParser::TestContext>(0);
}


size_t myParser::FuncdefContext::getRuleIndex() const {
  return myParser::RuleFuncdef;
}

void myParser::FuncdefContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFuncdef(this);
}

void myParser::FuncdefContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFuncdef(this);
}

myParser::FuncdefContext* myParser::funcdef() {
  FuncdefContext *_localctx = _tracker.createInstance<FuncdefContext>(_ctx, getState());
  enterRule(_localctx, 28, myParser::RuleFuncdef);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(298);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == myParser::ASYNC) {
      setState(297);
      match(myParser::ASYNC);
    }
    setState(300);
    match(myParser::DEF);
    setState(301);
    name();
    setState(302);
    match(myParser::OPEN_PAREN);
    setState(304);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 39) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 39)) & 144115188075856419) != 0)) {
      setState(303);
      typedargslist();
    }
    setState(306);
    match(myParser::CLOSE_PAREN);
    setState(309);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == myParser::ARROW) {
      setState(307);
      match(myParser::ARROW);
      setState(308);
      test();
    }
    setState(311);
    match(myParser::COLON);
    setState(312);
    suite();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypedargslistContext ------------------------------------------------------------------

myParser::TypedargslistContext::TypedargslistContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

myParser::ArgsContext* myParser::TypedargslistContext::args() {
  return getRuleContext<myParser::ArgsContext>(0);
}

myParser::KwargsContext* myParser::TypedargslistContext::kwargs() {
  return getRuleContext<myParser::KwargsContext>(0);
}

std::vector<myParser::Def_parametersContext *> myParser::TypedargslistContext::def_parameters() {
  return getRuleContexts<myParser::Def_parametersContext>();
}

myParser::Def_parametersContext* myParser::TypedargslistContext::def_parameters(size_t i) {
  return getRuleContext<myParser::Def_parametersContext>(i);
}

std::vector<tree::TerminalNode *> myParser::TypedargslistContext::COMMA() {
  return getTokens(myParser::COMMA);
}

tree::TerminalNode* myParser::TypedargslistContext::COMMA(size_t i) {
  return getToken(myParser::COMMA, i);
}


size_t myParser::TypedargslistContext::getRuleIndex() const {
  return myParser::RuleTypedargslist;
}

void myParser::TypedargslistContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypedargslist(this);
}

void myParser::TypedargslistContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypedargslist(this);
}

myParser::TypedargslistContext* myParser::typedargslist() {
  TypedargslistContext *_localctx = _tracker.createInstance<TypedargslistContext>(_ctx, getState());
  enterRule(_localctx, 30, myParser::RuleTypedargslist);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(338);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 38, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(317);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 32, _ctx)) {
      case 1: {
        setState(314);
        def_parameters();
        setState(315);
        match(myParser::COMMA);
        break;
      }

      default:
        break;
      }
      setState(329);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case myParser::STAR: {
          setState(319);
          args();
          setState(322);
          _errHandler->sync(this);

          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 33, _ctx)) {
          case 1: {
            setState(320);
            match(myParser::COMMA);
            setState(321);
            def_parameters();
            break;
          }

          default:
            break;
          }
          setState(326);
          _errHandler->sync(this);

          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 34, _ctx)) {
          case 1: {
            setState(324);
            match(myParser::COMMA);
            setState(325);
            kwargs();
            break;
          }

          default:
            break;
          }
          break;
        }

        case myParser::POWER: {
          setState(328);
          kwargs();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(332);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == myParser::COMMA) {
        setState(331);
        match(myParser::COMMA);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(334);
      def_parameters();
      setState(336);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == myParser::COMMA) {
        setState(335);
        match(myParser::COMMA);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArgsContext ------------------------------------------------------------------

myParser::ArgsContext::ArgsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* myParser::ArgsContext::STAR() {
  return getToken(myParser::STAR, 0);
}

myParser::Named_parameterContext* myParser::ArgsContext::named_parameter() {
  return getRuleContext<myParser::Named_parameterContext>(0);
}


size_t myParser::ArgsContext::getRuleIndex() const {
  return myParser::RuleArgs;
}

void myParser::ArgsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArgs(this);
}

void myParser::ArgsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArgs(this);
}

myParser::ArgsContext* myParser::args() {
  ArgsContext *_localctx = _tracker.createInstance<ArgsContext>(_ctx, getState());
  enterRule(_localctx, 32, myParser::RuleArgs);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(340);
    match(myParser::STAR);
    setState(341);
    named_parameter();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KwargsContext ------------------------------------------------------------------

myParser::KwargsContext::KwargsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* myParser::KwargsContext::POWER() {
  return getToken(myParser::POWER, 0);
}

myParser::Named_parameterContext* myParser::KwargsContext::named_parameter() {
  return getRuleContext<myParser::Named_parameterContext>(0);
}


size_t myParser::KwargsContext::getRuleIndex() const {
  return myParser::RuleKwargs;
}

void myParser::KwargsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterKwargs(this);
}

void myParser::KwargsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitKwargs(this);
}

myParser::KwargsContext* myParser::kwargs() {
  KwargsContext *_localctx = _tracker.createInstance<KwargsContext>(_ctx, getState());
  enterRule(_localctx, 34, myParser::RuleKwargs);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(343);
    match(myParser::POWER);
    setState(344);
    named_parameter();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Def_parametersContext ------------------------------------------------------------------

myParser::Def_parametersContext::Def_parametersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<myParser::Def_parameterContext *> myParser::Def_parametersContext::def_parameter() {
  return getRuleContexts<myParser::Def_parameterContext>();
}

myParser::Def_parameterContext* myParser::Def_parametersContext::def_parameter(size_t i) {
  return getRuleContext<myParser::Def_parameterContext>(i);
}

std::vector<tree::TerminalNode *> myParser::Def_parametersContext::COMMA() {
  return getTokens(myParser::COMMA);
}

tree::TerminalNode* myParser::Def_parametersContext::COMMA(size_t i) {
  return getToken(myParser::COMMA, i);
}


size_t myParser::Def_parametersContext::getRuleIndex() const {
  return myParser::RuleDef_parameters;
}

void myParser::Def_parametersContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDef_parameters(this);
}

void myParser::Def_parametersContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDef_parameters(this);
}

myParser::Def_parametersContext* myParser::def_parameters() {
  Def_parametersContext *_localctx = _tracker.createInstance<Def_parametersContext>(_ctx, getState());
  enterRule(_localctx, 36, myParser::RuleDef_parameters);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(346);
    def_parameter();
    setState(351);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 39, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(347);
        match(myParser::COMMA);
        setState(348);
        def_parameter(); 
      }
      setState(353);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 39, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Def_parameterContext ------------------------------------------------------------------

myParser::Def_parameterContext::Def_parameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

myParser::Named_parameterContext* myParser::Def_parameterContext::named_parameter() {
  return getRuleContext<myParser::Named_parameterContext>(0);
}

tree::TerminalNode* myParser::Def_parameterContext::ASSIGN() {
  return getToken(myParser::ASSIGN, 0);
}

myParser::TestContext* myParser::Def_parameterContext::test() {
  return getRuleContext<myParser::TestContext>(0);
}

tree::TerminalNode* myParser::Def_parameterContext::STAR() {
  return getToken(myParser::STAR, 0);
}


size_t myParser::Def_parameterContext::getRuleIndex() const {
  return myParser::RuleDef_parameter;
}

void myParser::Def_parameterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDef_parameter(this);
}

void myParser::Def_parameterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDef_parameter(this);
}

myParser::Def_parameterContext* myParser::def_parameter() {
  Def_parameterContext *_localctx = _tracker.createInstance<Def_parameterContext>(_ctx, getState());
  enterRule(_localctx, 38, myParser::RuleDef_parameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(360);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case myParser::TRUE:
      case myParser::FALSE:
      case myParser::NAME: {
        enterOuterAlt(_localctx, 1);
        setState(354);
        named_parameter();
        setState(357);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == myParser::ASSIGN) {
          setState(355);
          match(myParser::ASSIGN);
          setState(356);
          test();
        }
        break;
      }

      case myParser::STAR: {
        enterOuterAlt(_localctx, 2);
        setState(359);
        match(myParser::STAR);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Named_parameterContext ------------------------------------------------------------------

myParser::Named_parameterContext::Named_parameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

myParser::NameContext* myParser::Named_parameterContext::name() {
  return getRuleContext<myParser::NameContext>(0);
}

tree::TerminalNode* myParser::Named_parameterContext::COLON() {
  return getToken(myParser::COLON, 0);
}

myParser::TestContext* myParser::Named_parameterContext::test() {
  return getRuleContext<myParser::TestContext>(0);
}


size_t myParser::Named_parameterContext::getRuleIndex() const {
  return myParser::RuleNamed_parameter;
}

void myParser::Named_parameterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamed_parameter(this);
}

void myParser::Named_parameterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamed_parameter(this);
}

myParser::Named_parameterContext* myParser::named_parameter() {
  Named_parameterContext *_localctx = _tracker.createInstance<Named_parameterContext>(_ctx, getState());
  enterRule(_localctx, 40, myParser::RuleNamed_parameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(362);
    name();
    setState(365);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == myParser::COLON) {
      setState(363);
      match(myParser::COLON);
      setState(364);
      test();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Simple_stmtContext ------------------------------------------------------------------

myParser::Simple_stmtContext::Simple_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<myParser::Small_stmtContext *> myParser::Simple_stmtContext::small_stmt() {
  return getRuleContexts<myParser::Small_stmtContext>();
}

myParser::Small_stmtContext* myParser::Simple_stmtContext::small_stmt(size_t i) {
  return getRuleContext<myParser::Small_stmtContext>(i);
}

tree::TerminalNode* myParser::Simple_stmtContext::LINE_BREAK() {
  return getToken(myParser::LINE_BREAK, 0);
}

tree::TerminalNode* myParser::Simple_stmtContext::EOF() {
  return getToken(myParser::EOF, 0);
}

std::vector<tree::TerminalNode *> myParser::Simple_stmtContext::SEMI_COLON() {
  return getTokens(myParser::SEMI_COLON);
}

tree::TerminalNode* myParser::Simple_stmtContext::SEMI_COLON(size_t i) {
  return getToken(myParser::SEMI_COLON, i);
}


size_t myParser::Simple_stmtContext::getRuleIndex() const {
  return myParser::RuleSimple_stmt;
}

void myParser::Simple_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimple_stmt(this);
}

void myParser::Simple_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimple_stmt(this);
}

myParser::Simple_stmtContext* myParser::simple_stmt() {
  Simple_stmtContext *_localctx = _tracker.createInstance<Simple_stmtContext>(_ctx, getState());
  enterRule(_localctx, 42, myParser::RuleSimple_stmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(367);
    small_stmt();
    setState(372);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 43, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(368);
        match(myParser::SEMI_COLON);
        setState(369);
        small_stmt(); 
      }
      setState(374);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 43, _ctx);
    }
    setState(376);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == myParser::SEMI_COLON) {
      setState(375);
      match(myParser::SEMI_COLON);
    }
    setState(378);
    _la = _input->LA(1);
    if (!(_la == myParser::EOF

    || _la == myParser::LINE_BREAK)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Small_stmtContext ------------------------------------------------------------------

myParser::Small_stmtContext::Small_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t myParser::Small_stmtContext::getRuleIndex() const {
  return myParser::RuleSmall_stmt;
}

void myParser::Small_stmtContext::copyFrom(Small_stmtContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- Assert_stmtContext ------------------------------------------------------------------

tree::TerminalNode* myParser::Assert_stmtContext::ASSERT() {
  return getToken(myParser::ASSERT, 0);
}

std::vector<myParser::TestContext *> myParser::Assert_stmtContext::test() {
  return getRuleContexts<myParser::TestContext>();
}

myParser::TestContext* myParser::Assert_stmtContext::test(size_t i) {
  return getRuleContext<myParser::TestContext>(i);
}

tree::TerminalNode* myParser::Assert_stmtContext::COMMA() {
  return getToken(myParser::COMMA, 0);
}

myParser::Assert_stmtContext::Assert_stmtContext(Small_stmtContext *ctx) { copyFrom(ctx); }

void myParser::Assert_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssert_stmt(this);
}
void myParser::Assert_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssert_stmt(this);
}
//----------------- Nonlocal_stmtContext ------------------------------------------------------------------

tree::TerminalNode* myParser::Nonlocal_stmtContext::NONLOCAL() {
  return getToken(myParser::NONLOCAL, 0);
}

std::vector<myParser::NameContext *> myParser::Nonlocal_stmtContext::name() {
  return getRuleContexts<myParser::NameContext>();
}

myParser::NameContext* myParser::Nonlocal_stmtContext::name(size_t i) {
  return getRuleContext<myParser::NameContext>(i);
}

std::vector<tree::TerminalNode *> myParser::Nonlocal_stmtContext::COMMA() {
  return getTokens(myParser::COMMA);
}

tree::TerminalNode* myParser::Nonlocal_stmtContext::COMMA(size_t i) {
  return getToken(myParser::COMMA, i);
}

myParser::Nonlocal_stmtContext::Nonlocal_stmtContext(Small_stmtContext *ctx) { copyFrom(ctx); }

void myParser::Nonlocal_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNonlocal_stmt(this);
}
void myParser::Nonlocal_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNonlocal_stmt(this);
}
//----------------- Pass_stmtContext ------------------------------------------------------------------

tree::TerminalNode* myParser::Pass_stmtContext::PASS() {
  return getToken(myParser::PASS, 0);
}

myParser::Pass_stmtContext::Pass_stmtContext(Small_stmtContext *ctx) { copyFrom(ctx); }

void myParser::Pass_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPass_stmt(this);
}
void myParser::Pass_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPass_stmt(this);
}
//----------------- Import_stmtContext ------------------------------------------------------------------

tree::TerminalNode* myParser::Import_stmtContext::IMPORT() {
  return getToken(myParser::IMPORT, 0);
}

myParser::Dotted_as_namesContext* myParser::Import_stmtContext::dotted_as_names() {
  return getRuleContext<myParser::Dotted_as_namesContext>(0);
}

myParser::Import_stmtContext::Import_stmtContext(Small_stmtContext *ctx) { copyFrom(ctx); }

void myParser::Import_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImport_stmt(this);
}
void myParser::Import_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImport_stmt(this);
}
//----------------- Expr_stmtContext ------------------------------------------------------------------

myParser::Testlist_star_exprContext* myParser::Expr_stmtContext::testlist_star_expr() {
  return getRuleContext<myParser::Testlist_star_exprContext>(0);
}

myParser::Assign_partContext* myParser::Expr_stmtContext::assign_part() {
  return getRuleContext<myParser::Assign_partContext>(0);
}

myParser::Expr_stmtContext::Expr_stmtContext(Small_stmtContext *ctx) { copyFrom(ctx); }

void myParser::Expr_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_stmt(this);
}
void myParser::Expr_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_stmt(this);
}
//----------------- Raise_stmtContext ------------------------------------------------------------------

tree::TerminalNode* myParser::Raise_stmtContext::RAISE() {
  return getToken(myParser::RAISE, 0);
}

std::vector<myParser::TestContext *> myParser::Raise_stmtContext::test() {
  return getRuleContexts<myParser::TestContext>();
}

myParser::TestContext* myParser::Raise_stmtContext::test(size_t i) {
  return getRuleContext<myParser::TestContext>(i);
}

tree::TerminalNode* myParser::Raise_stmtContext::FROM() {
  return getToken(myParser::FROM, 0);
}

std::vector<tree::TerminalNode *> myParser::Raise_stmtContext::COMMA() {
  return getTokens(myParser::COMMA);
}

tree::TerminalNode* myParser::Raise_stmtContext::COMMA(size_t i) {
  return getToken(myParser::COMMA, i);
}

myParser::Raise_stmtContext::Raise_stmtContext(Small_stmtContext *ctx) { copyFrom(ctx); }

void myParser::Raise_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRaise_stmt(this);
}
void myParser::Raise_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRaise_stmt(this);
}
//----------------- Yield_stmtContext ------------------------------------------------------------------

myParser::Yield_exprContext* myParser::Yield_stmtContext::yield_expr() {
  return getRuleContext<myParser::Yield_exprContext>(0);
}

myParser::Yield_stmtContext::Yield_stmtContext(Small_stmtContext *ctx) { copyFrom(ctx); }

void myParser::Yield_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterYield_stmt(this);
}
void myParser::Yield_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitYield_stmt(this);
}
//----------------- From_stmtContext ------------------------------------------------------------------

tree::TerminalNode* myParser::From_stmtContext::FROM() {
  return getToken(myParser::FROM, 0);
}

tree::TerminalNode* myParser::From_stmtContext::IMPORT() {
  return getToken(myParser::IMPORT, 0);
}

myParser::Dotted_nameContext* myParser::From_stmtContext::dotted_name() {
  return getRuleContext<myParser::Dotted_nameContext>(0);
}

tree::TerminalNode* myParser::From_stmtContext::STAR() {
  return getToken(myParser::STAR, 0);
}

tree::TerminalNode* myParser::From_stmtContext::OPEN_PAREN() {
  return getToken(myParser::OPEN_PAREN, 0);
}

myParser::Import_as_namesContext* myParser::From_stmtContext::import_as_names() {
  return getRuleContext<myParser::Import_as_namesContext>(0);
}

tree::TerminalNode* myParser::From_stmtContext::CLOSE_PAREN() {
  return getToken(myParser::CLOSE_PAREN, 0);
}

std::vector<tree::TerminalNode *> myParser::From_stmtContext::DOT() {
  return getTokens(myParser::DOT);
}

tree::TerminalNode* myParser::From_stmtContext::DOT(size_t i) {
  return getToken(myParser::DOT, i);
}

std::vector<tree::TerminalNode *> myParser::From_stmtContext::ELLIPSIS() {
  return getTokens(myParser::ELLIPSIS);
}

tree::TerminalNode* myParser::From_stmtContext::ELLIPSIS(size_t i) {
  return getToken(myParser::ELLIPSIS, i);
}

myParser::From_stmtContext::From_stmtContext(Small_stmtContext *ctx) { copyFrom(ctx); }

void myParser::From_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFrom_stmt(this);
}
void myParser::From_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFrom_stmt(this);
}
//----------------- Global_stmtContext ------------------------------------------------------------------

tree::TerminalNode* myParser::Global_stmtContext::GLOBAL() {
  return getToken(myParser::GLOBAL, 0);
}

std::vector<myParser::NameContext *> myParser::Global_stmtContext::name() {
  return getRuleContexts<myParser::NameContext>();
}

myParser::NameContext* myParser::Global_stmtContext::name(size_t i) {
  return getRuleContext<myParser::NameContext>(i);
}

std::vector<tree::TerminalNode *> myParser::Global_stmtContext::COMMA() {
  return getTokens(myParser::COMMA);
}

tree::TerminalNode* myParser::Global_stmtContext::COMMA(size_t i) {
  return getToken(myParser::COMMA, i);
}

myParser::Global_stmtContext::Global_stmtContext(Small_stmtContext *ctx) { copyFrom(ctx); }

void myParser::Global_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGlobal_stmt(this);
}
void myParser::Global_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGlobal_stmt(this);
}
//----------------- Continue_stmtContext ------------------------------------------------------------------

tree::TerminalNode* myParser::Continue_stmtContext::CONTINUE() {
  return getToken(myParser::CONTINUE, 0);
}

myParser::Continue_stmtContext::Continue_stmtContext(Small_stmtContext *ctx) { copyFrom(ctx); }

void myParser::Continue_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterContinue_stmt(this);
}
void myParser::Continue_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitContinue_stmt(this);
}
//----------------- Exec_stmtContext ------------------------------------------------------------------

tree::TerminalNode* myParser::Exec_stmtContext::EXEC() {
  return getToken(myParser::EXEC, 0);
}

myParser::ExprContext* myParser::Exec_stmtContext::expr() {
  return getRuleContext<myParser::ExprContext>(0);
}

tree::TerminalNode* myParser::Exec_stmtContext::IN() {
  return getToken(myParser::IN, 0);
}

std::vector<myParser::TestContext *> myParser::Exec_stmtContext::test() {
  return getRuleContexts<myParser::TestContext>();
}

myParser::TestContext* myParser::Exec_stmtContext::test(size_t i) {
  return getRuleContext<myParser::TestContext>(i);
}

tree::TerminalNode* myParser::Exec_stmtContext::COMMA() {
  return getToken(myParser::COMMA, 0);
}

myParser::Exec_stmtContext::Exec_stmtContext(Small_stmtContext *ctx) { copyFrom(ctx); }

void myParser::Exec_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExec_stmt(this);
}
void myParser::Exec_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExec_stmt(this);
}
//----------------- Break_stmtContext ------------------------------------------------------------------

tree::TerminalNode* myParser::Break_stmtContext::BREAK() {
  return getToken(myParser::BREAK, 0);
}

myParser::Break_stmtContext::Break_stmtContext(Small_stmtContext *ctx) { copyFrom(ctx); }

void myParser::Break_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBreak_stmt(this);
}
void myParser::Break_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBreak_stmt(this);
}
//----------------- Del_stmtContext ------------------------------------------------------------------

tree::TerminalNode* myParser::Del_stmtContext::DEL() {
  return getToken(myParser::DEL, 0);
}

myParser::ExprlistContext* myParser::Del_stmtContext::exprlist() {
  return getRuleContext<myParser::ExprlistContext>(0);
}

myParser::Del_stmtContext::Del_stmtContext(Small_stmtContext *ctx) { copyFrom(ctx); }

void myParser::Del_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDel_stmt(this);
}
void myParser::Del_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDel_stmt(this);
}
//----------------- Print_stmtContext ------------------------------------------------------------------

tree::TerminalNode* myParser::Print_stmtContext::PRINT() {
  return getToken(myParser::PRINT, 0);
}

tree::TerminalNode* myParser::Print_stmtContext::RIGHT_SHIFT() {
  return getToken(myParser::RIGHT_SHIFT, 0);
}

std::vector<myParser::TestContext *> myParser::Print_stmtContext::test() {
  return getRuleContexts<myParser::TestContext>();
}

myParser::TestContext* myParser::Print_stmtContext::test(size_t i) {
  return getRuleContext<myParser::TestContext>(i);
}

std::vector<tree::TerminalNode *> myParser::Print_stmtContext::COMMA() {
  return getTokens(myParser::COMMA);
}

tree::TerminalNode* myParser::Print_stmtContext::COMMA(size_t i) {
  return getToken(myParser::COMMA, i);
}

myParser::Print_stmtContext::Print_stmtContext(Small_stmtContext *ctx) { copyFrom(ctx); }

void myParser::Print_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrint_stmt(this);
}
void myParser::Print_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrint_stmt(this);
}
//----------------- Return_stmtContext ------------------------------------------------------------------

tree::TerminalNode* myParser::Return_stmtContext::RETURN() {
  return getToken(myParser::RETURN, 0);
}

myParser::TestlistContext* myParser::Return_stmtContext::testlist() {
  return getRuleContext<myParser::TestlistContext>(0);
}

myParser::Return_stmtContext::Return_stmtContext(Small_stmtContext *ctx) { copyFrom(ctx); }

void myParser::Return_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReturn_stmt(this);
}
void myParser::Return_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReturn_stmt(this);
}
myParser::Small_stmtContext* myParser::small_stmt() {
  Small_stmtContext *_localctx = _tracker.createInstance<Small_stmtContext>(_ctx, getState());
  enterRule(_localctx, 44, myParser::RuleSmall_stmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(504);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 65, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<myParser::Expr_stmtContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(380);
      testlist_star_expr();
      setState(382);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 45, _ctx)) {
      case 1: {
        setState(381);
        assign_part();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<myParser::Print_stmtContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(384);

      if (!(this.CheckVersion(2))) throw FailedPredicateException(this, "this.CheckVersion(2)");
      setState(385);
      match(myParser::PRINT);
      setState(408);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case myParser::NONE:
        case myParser::LAMBDA:
        case myParser::NOT:
        case myParser::AWAIT:
        case myParser::PRINT:
        case myParser::EXEC:
        case myParser::TRUE:
        case myParser::FALSE:
        case myParser::ELLIPSIS:
        case myParser::REVERSE_QUOTE:
        case myParser::ADD:
        case myParser::MINUS:
        case myParser::NOT_OP:
        case myParser::STRING:
        case myParser::DECIMAL_INTEGER:
        case myParser::OCT_INTEGER:
        case myParser::HEX_INTEGER:
        case myParser::BIN_INTEGER:
        case myParser::IMAG_NUMBER:
        case myParser::FLOAT_NUMBER:
        case myParser::OPEN_PAREN:
        case myParser::OPEN_BRACE:
        case myParser::OPEN_BRACKET:
        case myParser::NAME: {
          setState(386);
          test();
          setState(391);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 46, _ctx);
          while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
            if (alt == 1) {
              setState(387);
              match(myParser::COMMA);
              setState(388);
              test(); 
            }
            setState(393);
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 46, _ctx);
          }
          setState(395);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == myParser::COMMA) {
            setState(394);
            match(myParser::COMMA);
          }
          break;
        }

        case myParser::RIGHT_SHIFT: {
          setState(397);
          match(myParser::RIGHT_SHIFT);
          setState(398);
          test();

          setState(401); 
          _errHandler->sync(this);
          alt = 1;
          do {
            switch (alt) {
              case 1: {
                    setState(399);
                    match(myParser::COMMA);
                    setState(400);
                    test();
                    break;
                  }

            default:
              throw NoViableAltException(this);
            }
            setState(403); 
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 48, _ctx);
          } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
          setState(406);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == myParser::COMMA) {
            setState(405);
            match(myParser::COMMA);
          }
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      this.SetVersion(2);
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<myParser::Del_stmtContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(412);
      match(myParser::DEL);
      setState(413);
      exprlist();
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<myParser::Pass_stmtContext>(_localctx);
      enterOuterAlt(_localctx, 4);
      setState(414);
      match(myParser::PASS);
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<myParser::Break_stmtContext>(_localctx);
      enterOuterAlt(_localctx, 5);
      setState(415);
      match(myParser::BREAK);
      break;
    }

    case 6: {
      _localctx = _tracker.createInstance<myParser::Continue_stmtContext>(_localctx);
      enterOuterAlt(_localctx, 6);
      setState(416);
      match(myParser::CONTINUE);
      break;
    }

    case 7: {
      _localctx = _tracker.createInstance<myParser::Return_stmtContext>(_localctx);
      enterOuterAlt(_localctx, 7);
      setState(417);
      match(myParser::RETURN);
      setState(419);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 1261023220259094528) != 0) || ((((_la - 83) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 83)) & 11007) != 0)) {
        setState(418);
        testlist();
      }
      break;
    }

    case 8: {
      _localctx = _tracker.createInstance<myParser::Raise_stmtContext>(_localctx);
      enterOuterAlt(_localctx, 8);
      setState(421);
      match(myParser::RAISE);
      setState(431);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 1261023220259094528) != 0) || ((((_la - 83) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 83)) & 11007) != 0)) {
        setState(422);
        test();
        setState(429);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == myParser::COMMA) {
          setState(423);
          match(myParser::COMMA);
          setState(424);
          test();
          setState(427);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == myParser::COMMA) {
            setState(425);
            match(myParser::COMMA);
            setState(426);
            test();
          }
        }
      }
      setState(435);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == myParser::FROM) {
        setState(433);
        match(myParser::FROM);
        setState(434);
        test();
      }
      break;
    }

    case 9: {
      _localctx = _tracker.createInstance<myParser::Yield_stmtContext>(_localctx);
      enterOuterAlt(_localctx, 9);
      setState(437);
      yield_expr();
      break;
    }

    case 10: {
      _localctx = _tracker.createInstance<myParser::Import_stmtContext>(_localctx);
      enterOuterAlt(_localctx, 10);
      setState(438);
      match(myParser::IMPORT);
      setState(439);
      dotted_as_names();
      break;
    }

    case 11: {
      _localctx = _tracker.createInstance<myParser::From_stmtContext>(_localctx);
      enterOuterAlt(_localctx, 11);
      setState(440);
      match(myParser::FROM);
      setState(453);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 58, _ctx)) {
      case 1: {
        setState(444);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == myParser::DOT

        || _la == myParser::ELLIPSIS) {
          setState(441);
          _la = _input->LA(1);
          if (!(_la == myParser::DOT

          || _la == myParser::ELLIPSIS)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(446);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(447);
        dotted_name(0);
        break;
      }

      case 2: {
        setState(449); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(448);
          _la = _input->LA(1);
          if (!(_la == myParser::DOT

          || _la == myParser::ELLIPSIS)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(451); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (_la == myParser::DOT

        || _la == myParser::ELLIPSIS);
        break;
      }

      default:
        break;
      }
      setState(455);
      match(myParser::IMPORT);
      setState(462);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case myParser::STAR: {
          setState(456);
          match(myParser::STAR);
          break;
        }

        case myParser::OPEN_PAREN: {
          setState(457);
          match(myParser::OPEN_PAREN);
          setState(458);
          import_as_names();
          setState(459);
          match(myParser::CLOSE_PAREN);
          break;
        }

        case myParser::TRUE:
        case myParser::FALSE:
        case myParser::NAME: {
          setState(461);
          import_as_names();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 12: {
      _localctx = _tracker.createInstance<myParser::Global_stmtContext>(_localctx);
      enterOuterAlt(_localctx, 12);
      setState(464);
      match(myParser::GLOBAL);
      setState(465);
      name();
      setState(470);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == myParser::COMMA) {
        setState(466);
        match(myParser::COMMA);
        setState(467);
        name();
        setState(472);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 13: {
      _localctx = _tracker.createInstance<myParser::Exec_stmtContext>(_localctx);
      enterOuterAlt(_localctx, 13);
      setState(473);

      if (!(this.CheckVersion(2))) throw FailedPredicateException(this, "this.CheckVersion(2)");
      setState(474);
      match(myParser::EXEC);
      setState(475);
      expr(0);
      setState(482);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == myParser::IN) {
        setState(476);
        match(myParser::IN);
        setState(477);
        test();
        setState(480);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == myParser::COMMA) {
          setState(478);
          match(myParser::COMMA);
          setState(479);
          test();
        }
      }
      this.SetVersion(2);
      break;
    }

    case 14: {
      _localctx = _tracker.createInstance<myParser::Assert_stmtContext>(_localctx);
      enterOuterAlt(_localctx, 14);
      setState(486);
      match(myParser::ASSERT);
      setState(487);
      test();
      setState(490);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == myParser::COMMA) {
        setState(488);
        match(myParser::COMMA);
        setState(489);
        test();
      }
      break;
    }

    case 15: {
      _localctx = _tracker.createInstance<myParser::Nonlocal_stmtContext>(_localctx);
      enterOuterAlt(_localctx, 15);
      setState(492);

      if (!(this.CheckVersion(3))) throw FailedPredicateException(this, "this.CheckVersion(3)");
      setState(493);
      match(myParser::NONLOCAL);
      setState(494);
      name();
      setState(499);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == myParser::COMMA) {
        setState(495);
        match(myParser::COMMA);
        setState(496);
        name();
        setState(501);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      this.SetVersion(3);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Testlist_star_exprContext ------------------------------------------------------------------

myParser::Testlist_star_exprContext::Testlist_star_exprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> myParser::Testlist_star_exprContext::COMMA() {
  return getTokens(myParser::COMMA);
}

tree::TerminalNode* myParser::Testlist_star_exprContext::COMMA(size_t i) {
  return getToken(myParser::COMMA, i);
}

std::vector<myParser::TestContext *> myParser::Testlist_star_exprContext::test() {
  return getRuleContexts<myParser::TestContext>();
}

myParser::TestContext* myParser::Testlist_star_exprContext::test(size_t i) {
  return getRuleContext<myParser::TestContext>(i);
}

std::vector<myParser::Star_exprContext *> myParser::Testlist_star_exprContext::star_expr() {
  return getRuleContexts<myParser::Star_exprContext>();
}

myParser::Star_exprContext* myParser::Testlist_star_exprContext::star_expr(size_t i) {
  return getRuleContext<myParser::Star_exprContext>(i);
}

myParser::TestlistContext* myParser::Testlist_star_exprContext::testlist() {
  return getRuleContext<myParser::TestlistContext>(0);
}


size_t myParser::Testlist_star_exprContext::getRuleIndex() const {
  return myParser::RuleTestlist_star_expr;
}

void myParser::Testlist_star_exprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTestlist_star_expr(this);
}

void myParser::Testlist_star_exprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTestlist_star_expr(this);
}

myParser::Testlist_star_exprContext* myParser::testlist_star_expr() {
  Testlist_star_exprContext *_localctx = _tracker.createInstance<Testlist_star_exprContext>(_ctx, getState());
  enterRule(_localctx, 46, myParser::RuleTestlist_star_expr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(521);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 69, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(512); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(508);
                _errHandler->sync(this);
                switch (_input->LA(1)) {
                  case myParser::NONE:
                  case myParser::LAMBDA:
                  case myParser::NOT:
                  case myParser::AWAIT:
                  case myParser::PRINT:
                  case myParser::EXEC:
                  case myParser::TRUE:
                  case myParser::FALSE:
                  case myParser::ELLIPSIS:
                  case myParser::REVERSE_QUOTE:
                  case myParser::ADD:
                  case myParser::MINUS:
                  case myParser::NOT_OP:
                  case myParser::STRING:
                  case myParser::DECIMAL_INTEGER:
                  case myParser::OCT_INTEGER:
                  case myParser::HEX_INTEGER:
                  case myParser::BIN_INTEGER:
                  case myParser::IMAG_NUMBER:
                  case myParser::FLOAT_NUMBER:
                  case myParser::OPEN_PAREN:
                  case myParser::OPEN_BRACE:
                  case myParser::OPEN_BRACKET:
                  case myParser::NAME: {
                    setState(506);
                    test();
                    break;
                  }

                  case myParser::STAR: {
                    setState(507);
                    star_expr();
                    break;
                  }

                default:
                  throw NoViableAltException(this);
                }
                setState(510);
                match(myParser::COMMA);
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(514); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 67, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      setState(518);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 68, _ctx)) {
      case 1: {
        setState(516);
        test();
        break;
      }

      case 2: {
        setState(517);
        star_expr();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(520);
      testlist();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Star_exprContext ------------------------------------------------------------------

myParser::Star_exprContext::Star_exprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* myParser::Star_exprContext::STAR() {
  return getToken(myParser::STAR, 0);
}

myParser::ExprContext* myParser::Star_exprContext::expr() {
  return getRuleContext<myParser::ExprContext>(0);
}


size_t myParser::Star_exprContext::getRuleIndex() const {
  return myParser::RuleStar_expr;
}

void myParser::Star_exprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStar_expr(this);
}

void myParser::Star_exprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStar_expr(this);
}

myParser::Star_exprContext* myParser::star_expr() {
  Star_exprContext *_localctx = _tracker.createInstance<Star_exprContext>(_ctx, getState());
  enterRule(_localctx, 48, myParser::RuleStar_expr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(523);
    match(myParser::STAR);
    setState(524);
    expr(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Assign_partContext ------------------------------------------------------------------

myParser::Assign_partContext::Assign_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> myParser::Assign_partContext::ASSIGN() {
  return getTokens(myParser::ASSIGN);
}

tree::TerminalNode* myParser::Assign_partContext::ASSIGN(size_t i) {
  return getToken(myParser::ASSIGN, i);
}

std::vector<myParser::Testlist_star_exprContext *> myParser::Assign_partContext::testlist_star_expr() {
  return getRuleContexts<myParser::Testlist_star_exprContext>();
}

myParser::Testlist_star_exprContext* myParser::Assign_partContext::testlist_star_expr(size_t i) {
  return getRuleContext<myParser::Testlist_star_exprContext>(i);
}

myParser::Yield_exprContext* myParser::Assign_partContext::yield_expr() {
  return getRuleContext<myParser::Yield_exprContext>(0);
}

tree::TerminalNode* myParser::Assign_partContext::COLON() {
  return getToken(myParser::COLON, 0);
}

myParser::TestContext* myParser::Assign_partContext::test() {
  return getRuleContext<myParser::TestContext>(0);
}

myParser::TestlistContext* myParser::Assign_partContext::testlist() {
  return getRuleContext<myParser::TestlistContext>(0);
}

tree::TerminalNode* myParser::Assign_partContext::ADD_ASSIGN() {
  return getToken(myParser::ADD_ASSIGN, 0);
}

tree::TerminalNode* myParser::Assign_partContext::SUB_ASSIGN() {
  return getToken(myParser::SUB_ASSIGN, 0);
}

tree::TerminalNode* myParser::Assign_partContext::MULT_ASSIGN() {
  return getToken(myParser::MULT_ASSIGN, 0);
}

tree::TerminalNode* myParser::Assign_partContext::AT_ASSIGN() {
  return getToken(myParser::AT_ASSIGN, 0);
}

tree::TerminalNode* myParser::Assign_partContext::DIV_ASSIGN() {
  return getToken(myParser::DIV_ASSIGN, 0);
}

tree::TerminalNode* myParser::Assign_partContext::MOD_ASSIGN() {
  return getToken(myParser::MOD_ASSIGN, 0);
}

tree::TerminalNode* myParser::Assign_partContext::AND_ASSIGN() {
  return getToken(myParser::AND_ASSIGN, 0);
}

tree::TerminalNode* myParser::Assign_partContext::OR_ASSIGN() {
  return getToken(myParser::OR_ASSIGN, 0);
}

tree::TerminalNode* myParser::Assign_partContext::XOR_ASSIGN() {
  return getToken(myParser::XOR_ASSIGN, 0);
}

tree::TerminalNode* myParser::Assign_partContext::LEFT_SHIFT_ASSIGN() {
  return getToken(myParser::LEFT_SHIFT_ASSIGN, 0);
}

tree::TerminalNode* myParser::Assign_partContext::RIGHT_SHIFT_ASSIGN() {
  return getToken(myParser::RIGHT_SHIFT_ASSIGN, 0);
}

tree::TerminalNode* myParser::Assign_partContext::POWER_ASSIGN() {
  return getToken(myParser::POWER_ASSIGN, 0);
}

tree::TerminalNode* myParser::Assign_partContext::IDIV_ASSIGN() {
  return getToken(myParser::IDIV_ASSIGN, 0);
}


size_t myParser::Assign_partContext::getRuleIndex() const {
  return myParser::RuleAssign_part;
}

void myParser::Assign_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssign_part(this);
}

void myParser::Assign_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssign_part(this);
}

myParser::Assign_partContext* myParser::assign_part() {
  Assign_partContext *_localctx = _tracker.createInstance<Assign_partContext>(_ctx, getState());
  enterRule(_localctx, 50, myParser::RuleAssign_part);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(556);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 75, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(526);
      match(myParser::ASSIGN);
      setState(540);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case myParser::NONE:
        case myParser::LAMBDA:
        case myParser::NOT:
        case myParser::AWAIT:
        case myParser::PRINT:
        case myParser::EXEC:
        case myParser::TRUE:
        case myParser::FALSE:
        case myParser::ELLIPSIS:
        case myParser::REVERSE_QUOTE:
        case myParser::STAR:
        case myParser::ADD:
        case myParser::MINUS:
        case myParser::NOT_OP:
        case myParser::STRING:
        case myParser::DECIMAL_INTEGER:
        case myParser::OCT_INTEGER:
        case myParser::HEX_INTEGER:
        case myParser::BIN_INTEGER:
        case myParser::IMAG_NUMBER:
        case myParser::FLOAT_NUMBER:
        case myParser::OPEN_PAREN:
        case myParser::OPEN_BRACE:
        case myParser::OPEN_BRACKET:
        case myParser::NAME: {
          setState(527);
          testlist_star_expr();
          setState(532);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 70, _ctx);
          while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
            if (alt == 1) {
              setState(528);
              match(myParser::ASSIGN);
              setState(529);
              testlist_star_expr(); 
            }
            setState(534);
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 70, _ctx);
          }
          setState(537);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == myParser::ASSIGN) {
            setState(535);
            match(myParser::ASSIGN);
            setState(536);
            yield_expr();
          }
          break;
        }

        case myParser::YIELD: {
          setState(539);
          yield_expr();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(542);

      if (!(this.CheckVersion(3))) throw FailedPredicateException(this, "this.CheckVersion(3)");
      setState(543);
      match(myParser::COLON);
      setState(544);
      test();
      setState(547);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == myParser::ASSIGN) {
        setState(545);
        match(myParser::ASSIGN);
        setState(546);
        testlist();
      }
      this.SetVersion(3);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(551);
      antlrcpp::downCast<Assign_partContext *>(_localctx)->op = _input->LT(1);
      _la = _input->LA(1);
      if (!(((((_la - 70) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 70)) & 8191) != 0))) {
        antlrcpp::downCast<Assign_partContext *>(_localctx)->op = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(554);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case myParser::YIELD: {
          setState(552);
          yield_expr();
          break;
        }

        case myParser::NONE:
        case myParser::LAMBDA:
        case myParser::NOT:
        case myParser::AWAIT:
        case myParser::PRINT:
        case myParser::EXEC:
        case myParser::TRUE:
        case myParser::FALSE:
        case myParser::ELLIPSIS:
        case myParser::REVERSE_QUOTE:
        case myParser::ADD:
        case myParser::MINUS:
        case myParser::NOT_OP:
        case myParser::STRING:
        case myParser::DECIMAL_INTEGER:
        case myParser::OCT_INTEGER:
        case myParser::HEX_INTEGER:
        case myParser::BIN_INTEGER:
        case myParser::IMAG_NUMBER:
        case myParser::FLOAT_NUMBER:
        case myParser::OPEN_PAREN:
        case myParser::OPEN_BRACE:
        case myParser::OPEN_BRACKET:
        case myParser::NAME: {
          setState(553);
          testlist();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExprlistContext ------------------------------------------------------------------

myParser::ExprlistContext::ExprlistContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<myParser::ExprContext *> myParser::ExprlistContext::expr() {
  return getRuleContexts<myParser::ExprContext>();
}

myParser::ExprContext* myParser::ExprlistContext::expr(size_t i) {
  return getRuleContext<myParser::ExprContext>(i);
}

std::vector<tree::TerminalNode *> myParser::ExprlistContext::COMMA() {
  return getTokens(myParser::COMMA);
}

tree::TerminalNode* myParser::ExprlistContext::COMMA(size_t i) {
  return getToken(myParser::COMMA, i);
}


size_t myParser::ExprlistContext::getRuleIndex() const {
  return myParser::RuleExprlist;
}

void myParser::ExprlistContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExprlist(this);
}

void myParser::ExprlistContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExprlist(this);
}

myParser::ExprlistContext* myParser::exprlist() {
  ExprlistContext *_localctx = _tracker.createInstance<ExprlistContext>(_ctx, getState());
  enterRule(_localctx, 52, myParser::RuleExprlist);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(558);
    expr(0);
    setState(563);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 76, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(559);
        match(myParser::COMMA);
        setState(560);
        expr(0); 
      }
      setState(565);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 76, _ctx);
    }
    setState(567);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == myParser::COMMA) {
      setState(566);
      match(myParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Import_as_namesContext ------------------------------------------------------------------

myParser::Import_as_namesContext::Import_as_namesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<myParser::Import_as_nameContext *> myParser::Import_as_namesContext::import_as_name() {
  return getRuleContexts<myParser::Import_as_nameContext>();
}

myParser::Import_as_nameContext* myParser::Import_as_namesContext::import_as_name(size_t i) {
  return getRuleContext<myParser::Import_as_nameContext>(i);
}

std::vector<tree::TerminalNode *> myParser::Import_as_namesContext::COMMA() {
  return getTokens(myParser::COMMA);
}

tree::TerminalNode* myParser::Import_as_namesContext::COMMA(size_t i) {
  return getToken(myParser::COMMA, i);
}


size_t myParser::Import_as_namesContext::getRuleIndex() const {
  return myParser::RuleImport_as_names;
}

void myParser::Import_as_namesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImport_as_names(this);
}

void myParser::Import_as_namesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImport_as_names(this);
}

myParser::Import_as_namesContext* myParser::import_as_names() {
  Import_as_namesContext *_localctx = _tracker.createInstance<Import_as_namesContext>(_ctx, getState());
  enterRule(_localctx, 54, myParser::RuleImport_as_names);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(569);
    import_as_name();
    setState(574);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 78, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(570);
        match(myParser::COMMA);
        setState(571);
        import_as_name(); 
      }
      setState(576);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 78, _ctx);
    }
    setState(578);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == myParser::COMMA) {
      setState(577);
      match(myParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Import_as_nameContext ------------------------------------------------------------------

myParser::Import_as_nameContext::Import_as_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<myParser::NameContext *> myParser::Import_as_nameContext::name() {
  return getRuleContexts<myParser::NameContext>();
}

myParser::NameContext* myParser::Import_as_nameContext::name(size_t i) {
  return getRuleContext<myParser::NameContext>(i);
}

tree::TerminalNode* myParser::Import_as_nameContext::AS() {
  return getToken(myParser::AS, 0);
}


size_t myParser::Import_as_nameContext::getRuleIndex() const {
  return myParser::RuleImport_as_name;
}

void myParser::Import_as_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImport_as_name(this);
}

void myParser::Import_as_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImport_as_name(this);
}

myParser::Import_as_nameContext* myParser::import_as_name() {
  Import_as_nameContext *_localctx = _tracker.createInstance<Import_as_nameContext>(_ctx, getState());
  enterRule(_localctx, 56, myParser::RuleImport_as_name);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(580);
    name();
    setState(583);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == myParser::AS) {
      setState(581);
      match(myParser::AS);
      setState(582);
      name();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Dotted_as_namesContext ------------------------------------------------------------------

myParser::Dotted_as_namesContext::Dotted_as_namesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<myParser::Dotted_as_nameContext *> myParser::Dotted_as_namesContext::dotted_as_name() {
  return getRuleContexts<myParser::Dotted_as_nameContext>();
}

myParser::Dotted_as_nameContext* myParser::Dotted_as_namesContext::dotted_as_name(size_t i) {
  return getRuleContext<myParser::Dotted_as_nameContext>(i);
}

std::vector<tree::TerminalNode *> myParser::Dotted_as_namesContext::COMMA() {
  return getTokens(myParser::COMMA);
}

tree::TerminalNode* myParser::Dotted_as_namesContext::COMMA(size_t i) {
  return getToken(myParser::COMMA, i);
}


size_t myParser::Dotted_as_namesContext::getRuleIndex() const {
  return myParser::RuleDotted_as_names;
}

void myParser::Dotted_as_namesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDotted_as_names(this);
}

void myParser::Dotted_as_namesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDotted_as_names(this);
}

myParser::Dotted_as_namesContext* myParser::dotted_as_names() {
  Dotted_as_namesContext *_localctx = _tracker.createInstance<Dotted_as_namesContext>(_ctx, getState());
  enterRule(_localctx, 58, myParser::RuleDotted_as_names);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(585);
    dotted_as_name();
    setState(590);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == myParser::COMMA) {
      setState(586);
      match(myParser::COMMA);
      setState(587);
      dotted_as_name();
      setState(592);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Dotted_as_nameContext ------------------------------------------------------------------

myParser::Dotted_as_nameContext::Dotted_as_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

myParser::Dotted_nameContext* myParser::Dotted_as_nameContext::dotted_name() {
  return getRuleContext<myParser::Dotted_nameContext>(0);
}

tree::TerminalNode* myParser::Dotted_as_nameContext::AS() {
  return getToken(myParser::AS, 0);
}

myParser::NameContext* myParser::Dotted_as_nameContext::name() {
  return getRuleContext<myParser::NameContext>(0);
}


size_t myParser::Dotted_as_nameContext::getRuleIndex() const {
  return myParser::RuleDotted_as_name;
}

void myParser::Dotted_as_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDotted_as_name(this);
}

void myParser::Dotted_as_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDotted_as_name(this);
}

myParser::Dotted_as_nameContext* myParser::dotted_as_name() {
  Dotted_as_nameContext *_localctx = _tracker.createInstance<Dotted_as_nameContext>(_ctx, getState());
  enterRule(_localctx, 60, myParser::RuleDotted_as_name);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(593);
    dotted_name(0);
    setState(596);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == myParser::AS) {
      setState(594);
      match(myParser::AS);
      setState(595);
      name();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TestContext ------------------------------------------------------------------

myParser::TestContext::TestContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<myParser::Logical_testContext *> myParser::TestContext::logical_test() {
  return getRuleContexts<myParser::Logical_testContext>();
}

myParser::Logical_testContext* myParser::TestContext::logical_test(size_t i) {
  return getRuleContext<myParser::Logical_testContext>(i);
}

tree::TerminalNode* myParser::TestContext::IF() {
  return getToken(myParser::IF, 0);
}

tree::TerminalNode* myParser::TestContext::ELSE() {
  return getToken(myParser::ELSE, 0);
}

myParser::TestContext* myParser::TestContext::test() {
  return getRuleContext<myParser::TestContext>(0);
}

tree::TerminalNode* myParser::TestContext::LAMBDA() {
  return getToken(myParser::LAMBDA, 0);
}

tree::TerminalNode* myParser::TestContext::COLON() {
  return getToken(myParser::COLON, 0);
}

myParser::VarargslistContext* myParser::TestContext::varargslist() {
  return getRuleContext<myParser::VarargslistContext>(0);
}


size_t myParser::TestContext::getRuleIndex() const {
  return myParser::RuleTest;
}

void myParser::TestContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTest(this);
}

void myParser::TestContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTest(this);
}

myParser::TestContext* myParser::test() {
  TestContext *_localctx = _tracker.createInstance<TestContext>(_ctx, getState());
  enterRule(_localctx, 62, myParser::RuleTest);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(612);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case myParser::NONE:
      case myParser::NOT:
      case myParser::AWAIT:
      case myParser::PRINT:
      case myParser::EXEC:
      case myParser::TRUE:
      case myParser::FALSE:
      case myParser::ELLIPSIS:
      case myParser::REVERSE_QUOTE:
      case myParser::ADD:
      case myParser::MINUS:
      case myParser::NOT_OP:
      case myParser::STRING:
      case myParser::DECIMAL_INTEGER:
      case myParser::OCT_INTEGER:
      case myParser::HEX_INTEGER:
      case myParser::BIN_INTEGER:
      case myParser::IMAG_NUMBER:
      case myParser::FLOAT_NUMBER:
      case myParser::OPEN_PAREN:
      case myParser::OPEN_BRACE:
      case myParser::OPEN_BRACKET:
      case myParser::NAME: {
        enterOuterAlt(_localctx, 1);
        setState(598);
        logical_test(0);
        setState(604);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 83, _ctx)) {
        case 1: {
          setState(599);
          match(myParser::IF);
          setState(600);
          logical_test(0);
          setState(601);
          match(myParser::ELSE);
          setState(602);
          test();
          break;
        }

        default:
          break;
        }
        break;
      }

      case myParser::LAMBDA: {
        enterOuterAlt(_localctx, 2);
        setState(606);
        match(myParser::LAMBDA);
        setState(608);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 39) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 39)) & 144115188075856419) != 0)) {
          setState(607);
          varargslist();
        }
        setState(610);
        match(myParser::COLON);
        setState(611);
        test();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VarargslistContext ------------------------------------------------------------------

myParser::VarargslistContext::VarargslistContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

myParser::VarargsContext* myParser::VarargslistContext::varargs() {
  return getRuleContext<myParser::VarargsContext>(0);
}

myParser::VarkwargsContext* myParser::VarargslistContext::varkwargs() {
  return getRuleContext<myParser::VarkwargsContext>(0);
}

std::vector<myParser::Vardef_parametersContext *> myParser::VarargslistContext::vardef_parameters() {
  return getRuleContexts<myParser::Vardef_parametersContext>();
}

myParser::Vardef_parametersContext* myParser::VarargslistContext::vardef_parameters(size_t i) {
  return getRuleContext<myParser::Vardef_parametersContext>(i);
}

std::vector<tree::TerminalNode *> myParser::VarargslistContext::COMMA() {
  return getTokens(myParser::COMMA);
}

tree::TerminalNode* myParser::VarargslistContext::COMMA(size_t i) {
  return getToken(myParser::COMMA, i);
}


size_t myParser::VarargslistContext::getRuleIndex() const {
  return myParser::RuleVarargslist;
}

void myParser::VarargslistContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVarargslist(this);
}

void myParser::VarargslistContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVarargslist(this);
}

myParser::VarargslistContext* myParser::varargslist() {
  VarargslistContext *_localctx = _tracker.createInstance<VarargslistContext>(_ctx, getState());
  enterRule(_localctx, 64, myParser::RuleVarargslist);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(638);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 92, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(617);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 86, _ctx)) {
      case 1: {
        setState(614);
        vardef_parameters();
        setState(615);
        match(myParser::COMMA);
        break;
      }

      default:
        break;
      }
      setState(629);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case myParser::STAR: {
          setState(619);
          varargs();
          setState(622);
          _errHandler->sync(this);

          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 87, _ctx)) {
          case 1: {
            setState(620);
            match(myParser::COMMA);
            setState(621);
            vardef_parameters();
            break;
          }

          default:
            break;
          }
          setState(626);
          _errHandler->sync(this);

          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 88, _ctx)) {
          case 1: {
            setState(624);
            match(myParser::COMMA);
            setState(625);
            varkwargs();
            break;
          }

          default:
            break;
          }
          break;
        }

        case myParser::POWER: {
          setState(628);
          varkwargs();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(632);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == myParser::COMMA) {
        setState(631);
        match(myParser::COMMA);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(634);
      vardef_parameters();
      setState(636);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == myParser::COMMA) {
        setState(635);
        match(myParser::COMMA);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Vardef_parametersContext ------------------------------------------------------------------

myParser::Vardef_parametersContext::Vardef_parametersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<myParser::Vardef_parameterContext *> myParser::Vardef_parametersContext::vardef_parameter() {
  return getRuleContexts<myParser::Vardef_parameterContext>();
}

myParser::Vardef_parameterContext* myParser::Vardef_parametersContext::vardef_parameter(size_t i) {
  return getRuleContext<myParser::Vardef_parameterContext>(i);
}

std::vector<tree::TerminalNode *> myParser::Vardef_parametersContext::COMMA() {
  return getTokens(myParser::COMMA);
}

tree::TerminalNode* myParser::Vardef_parametersContext::COMMA(size_t i) {
  return getToken(myParser::COMMA, i);
}


size_t myParser::Vardef_parametersContext::getRuleIndex() const {
  return myParser::RuleVardef_parameters;
}

void myParser::Vardef_parametersContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVardef_parameters(this);
}

void myParser::Vardef_parametersContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVardef_parameters(this);
}

myParser::Vardef_parametersContext* myParser::vardef_parameters() {
  Vardef_parametersContext *_localctx = _tracker.createInstance<Vardef_parametersContext>(_ctx, getState());
  enterRule(_localctx, 66, myParser::RuleVardef_parameters);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(640);
    vardef_parameter();
    setState(645);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 93, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(641);
        match(myParser::COMMA);
        setState(642);
        vardef_parameter(); 
      }
      setState(647);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 93, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Vardef_parameterContext ------------------------------------------------------------------

myParser::Vardef_parameterContext::Vardef_parameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

myParser::NameContext* myParser::Vardef_parameterContext::name() {
  return getRuleContext<myParser::NameContext>(0);
}

tree::TerminalNode* myParser::Vardef_parameterContext::ASSIGN() {
  return getToken(myParser::ASSIGN, 0);
}

myParser::TestContext* myParser::Vardef_parameterContext::test() {
  return getRuleContext<myParser::TestContext>(0);
}

tree::TerminalNode* myParser::Vardef_parameterContext::STAR() {
  return getToken(myParser::STAR, 0);
}


size_t myParser::Vardef_parameterContext::getRuleIndex() const {
  return myParser::RuleVardef_parameter;
}

void myParser::Vardef_parameterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVardef_parameter(this);
}

void myParser::Vardef_parameterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVardef_parameter(this);
}

myParser::Vardef_parameterContext* myParser::vardef_parameter() {
  Vardef_parameterContext *_localctx = _tracker.createInstance<Vardef_parameterContext>(_ctx, getState());
  enterRule(_localctx, 68, myParser::RuleVardef_parameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(654);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case myParser::TRUE:
      case myParser::FALSE:
      case myParser::NAME: {
        enterOuterAlt(_localctx, 1);
        setState(648);
        name();
        setState(651);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == myParser::ASSIGN) {
          setState(649);
          match(myParser::ASSIGN);
          setState(650);
          test();
        }
        break;
      }

      case myParser::STAR: {
        enterOuterAlt(_localctx, 2);
        setState(653);
        match(myParser::STAR);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VarargsContext ------------------------------------------------------------------

myParser::VarargsContext::VarargsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* myParser::VarargsContext::STAR() {
  return getToken(myParser::STAR, 0);
}

myParser::NameContext* myParser::VarargsContext::name() {
  return getRuleContext<myParser::NameContext>(0);
}


size_t myParser::VarargsContext::getRuleIndex() const {
  return myParser::RuleVarargs;
}

void myParser::VarargsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVarargs(this);
}

void myParser::VarargsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVarargs(this);
}

myParser::VarargsContext* myParser::varargs() {
  VarargsContext *_localctx = _tracker.createInstance<VarargsContext>(_ctx, getState());
  enterRule(_localctx, 70, myParser::RuleVarargs);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(656);
    match(myParser::STAR);
    setState(657);
    name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VarkwargsContext ------------------------------------------------------------------

myParser::VarkwargsContext::VarkwargsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* myParser::VarkwargsContext::POWER() {
  return getToken(myParser::POWER, 0);
}

myParser::NameContext* myParser::VarkwargsContext::name() {
  return getRuleContext<myParser::NameContext>(0);
}


size_t myParser::VarkwargsContext::getRuleIndex() const {
  return myParser::RuleVarkwargs;
}

void myParser::VarkwargsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVarkwargs(this);
}

void myParser::VarkwargsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVarkwargs(this);
}

myParser::VarkwargsContext* myParser::varkwargs() {
  VarkwargsContext *_localctx = _tracker.createInstance<VarkwargsContext>(_ctx, getState());
  enterRule(_localctx, 72, myParser::RuleVarkwargs);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(659);
    match(myParser::POWER);
    setState(660);
    name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Logical_testContext ------------------------------------------------------------------

myParser::Logical_testContext::Logical_testContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

myParser::ComparisonContext* myParser::Logical_testContext::comparison() {
  return getRuleContext<myParser::ComparisonContext>(0);
}

tree::TerminalNode* myParser::Logical_testContext::NOT() {
  return getToken(myParser::NOT, 0);
}

std::vector<myParser::Logical_testContext *> myParser::Logical_testContext::logical_test() {
  return getRuleContexts<myParser::Logical_testContext>();
}

myParser::Logical_testContext* myParser::Logical_testContext::logical_test(size_t i) {
  return getRuleContext<myParser::Logical_testContext>(i);
}

tree::TerminalNode* myParser::Logical_testContext::AND() {
  return getToken(myParser::AND, 0);
}

tree::TerminalNode* myParser::Logical_testContext::OR() {
  return getToken(myParser::OR, 0);
}


size_t myParser::Logical_testContext::getRuleIndex() const {
  return myParser::RuleLogical_test;
}

void myParser::Logical_testContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLogical_test(this);
}

void myParser::Logical_testContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLogical_test(this);
}


myParser::Logical_testContext* myParser::logical_test() {
   return logical_test(0);
}

myParser::Logical_testContext* myParser::logical_test(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  myParser::Logical_testContext *_localctx = _tracker.createInstance<Logical_testContext>(_ctx, parentState);
  myParser::Logical_testContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 74;
  enterRecursionRule(_localctx, 74, myParser::RuleLogical_test, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(666);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case myParser::NONE:
      case myParser::AWAIT:
      case myParser::PRINT:
      case myParser::EXEC:
      case myParser::TRUE:
      case myParser::FALSE:
      case myParser::ELLIPSIS:
      case myParser::REVERSE_QUOTE:
      case myParser::ADD:
      case myParser::MINUS:
      case myParser::NOT_OP:
      case myParser::STRING:
      case myParser::DECIMAL_INTEGER:
      case myParser::OCT_INTEGER:
      case myParser::HEX_INTEGER:
      case myParser::BIN_INTEGER:
      case myParser::IMAG_NUMBER:
      case myParser::FLOAT_NUMBER:
      case myParser::OPEN_PAREN:
      case myParser::OPEN_BRACE:
      case myParser::OPEN_BRACKET:
      case myParser::NAME: {
        setState(663);
        comparison(0);
        break;
      }

      case myParser::NOT: {
        setState(664);
        match(myParser::NOT);
        setState(665);
        logical_test(3);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    _ctx->stop = _input->LT(-1);
    setState(676);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 98, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(674);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 97, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<Logical_testContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleLogical_test);
          setState(668);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(669);
          antlrcpp::downCast<Logical_testContext *>(_localctx)->op = match(myParser::AND);
          setState(670);
          logical_test(3);
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<Logical_testContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleLogical_test);
          setState(671);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(672);
          antlrcpp::downCast<Logical_testContext *>(_localctx)->op = match(myParser::OR);
          setState(673);
          logical_test(2);
          break;
        }

        default:
          break;
        } 
      }
      setState(678);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 98, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- ComparisonContext ------------------------------------------------------------------

myParser::ComparisonContext::ComparisonContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

myParser::ExprContext* myParser::ComparisonContext::expr() {
  return getRuleContext<myParser::ExprContext>(0);
}

std::vector<myParser::ComparisonContext *> myParser::ComparisonContext::comparison() {
  return getRuleContexts<myParser::ComparisonContext>();
}

myParser::ComparisonContext* myParser::ComparisonContext::comparison(size_t i) {
  return getRuleContext<myParser::ComparisonContext>(i);
}

tree::TerminalNode* myParser::ComparisonContext::LESS_THAN() {
  return getToken(myParser::LESS_THAN, 0);
}

tree::TerminalNode* myParser::ComparisonContext::GREATER_THAN() {
  return getToken(myParser::GREATER_THAN, 0);
}

tree::TerminalNode* myParser::ComparisonContext::EQUALS() {
  return getToken(myParser::EQUALS, 0);
}

tree::TerminalNode* myParser::ComparisonContext::GT_EQ() {
  return getToken(myParser::GT_EQ, 0);
}

tree::TerminalNode* myParser::ComparisonContext::LT_EQ() {
  return getToken(myParser::LT_EQ, 0);
}

tree::TerminalNode* myParser::ComparisonContext::NOT_EQ_1() {
  return getToken(myParser::NOT_EQ_1, 0);
}

tree::TerminalNode* myParser::ComparisonContext::NOT_EQ_2() {
  return getToken(myParser::NOT_EQ_2, 0);
}

tree::TerminalNode* myParser::ComparisonContext::IN() {
  return getToken(myParser::IN, 0);
}

tree::TerminalNode* myParser::ComparisonContext::IS() {
  return getToken(myParser::IS, 0);
}

tree::TerminalNode* myParser::ComparisonContext::NOT() {
  return getToken(myParser::NOT, 0);
}


size_t myParser::ComparisonContext::getRuleIndex() const {
  return myParser::RuleComparison;
}

void myParser::ComparisonContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComparison(this);
}

void myParser::ComparisonContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComparison(this);
}


myParser::ComparisonContext* myParser::comparison() {
   return comparison(0);
}

myParser::ComparisonContext* myParser::comparison(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  myParser::ComparisonContext *_localctx = _tracker.createInstance<ComparisonContext>(_ctx, parentState);
  myParser::ComparisonContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 76;
  enterRecursionRule(_localctx, 76, myParser::RuleComparison, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(680);
    expr(0);
    _ctx->stop = _input->LT(-1);
    setState(703);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 102, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<ComparisonContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleComparison);
        setState(682);

        if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
        setState(698);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case myParser::LESS_THAN: {
            setState(683);
            match(myParser::LESS_THAN);
            break;
          }

          case myParser::GREATER_THAN: {
            setState(684);
            match(myParser::GREATER_THAN);
            break;
          }

          case myParser::EQUALS: {
            setState(685);
            match(myParser::EQUALS);
            break;
          }

          case myParser::GT_EQ: {
            setState(686);
            match(myParser::GT_EQ);
            break;
          }

          case myParser::LT_EQ: {
            setState(687);
            match(myParser::LT_EQ);
            break;
          }

          case myParser::NOT_EQ_1: {
            setState(688);
            match(myParser::NOT_EQ_1);
            break;
          }

          case myParser::NOT_EQ_2: {
            setState(689);
            match(myParser::NOT_EQ_2);
            break;
          }

          case myParser::IN:
          case myParser::NOT: {
            setState(691);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == myParser::NOT) {
              setState(690);
              antlrcpp::downCast<ComparisonContext *>(_localctx)->optional = match(myParser::NOT);
            }
            setState(693);
            match(myParser::IN);
            break;
          }

          case myParser::IS: {
            setState(694);
            match(myParser::IS);
            setState(696);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == myParser::NOT) {
              setState(695);
              antlrcpp::downCast<ComparisonContext *>(_localctx)->optional = match(myParser::NOT);
            }
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(700);
        comparison(3); 
      }
      setState(705);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 102, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- ExprContext ------------------------------------------------------------------

myParser::ExprContext::ExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

myParser::AtomContext* myParser::ExprContext::atom() {
  return getRuleContext<myParser::AtomContext>(0);
}

tree::TerminalNode* myParser::ExprContext::AWAIT() {
  return getToken(myParser::AWAIT, 0);
}

std::vector<myParser::TrailerContext *> myParser::ExprContext::trailer() {
  return getRuleContexts<myParser::TrailerContext>();
}

myParser::TrailerContext* myParser::ExprContext::trailer(size_t i) {
  return getRuleContext<myParser::TrailerContext>(i);
}

std::vector<myParser::ExprContext *> myParser::ExprContext::expr() {
  return getRuleContexts<myParser::ExprContext>();
}

myParser::ExprContext* myParser::ExprContext::expr(size_t i) {
  return getRuleContext<myParser::ExprContext>(i);
}

tree::TerminalNode* myParser::ExprContext::ADD() {
  return getToken(myParser::ADD, 0);
}

tree::TerminalNode* myParser::ExprContext::MINUS() {
  return getToken(myParser::MINUS, 0);
}

tree::TerminalNode* myParser::ExprContext::NOT_OP() {
  return getToken(myParser::NOT_OP, 0);
}

tree::TerminalNode* myParser::ExprContext::POWER() {
  return getToken(myParser::POWER, 0);
}

tree::TerminalNode* myParser::ExprContext::STAR() {
  return getToken(myParser::STAR, 0);
}

tree::TerminalNode* myParser::ExprContext::DIV() {
  return getToken(myParser::DIV, 0);
}

tree::TerminalNode* myParser::ExprContext::MOD() {
  return getToken(myParser::MOD, 0);
}

tree::TerminalNode* myParser::ExprContext::IDIV() {
  return getToken(myParser::IDIV, 0);
}

tree::TerminalNode* myParser::ExprContext::AT() {
  return getToken(myParser::AT, 0);
}

tree::TerminalNode* myParser::ExprContext::LEFT_SHIFT() {
  return getToken(myParser::LEFT_SHIFT, 0);
}

tree::TerminalNode* myParser::ExprContext::RIGHT_SHIFT() {
  return getToken(myParser::RIGHT_SHIFT, 0);
}

tree::TerminalNode* myParser::ExprContext::AND_OP() {
  return getToken(myParser::AND_OP, 0);
}

tree::TerminalNode* myParser::ExprContext::XOR() {
  return getToken(myParser::XOR, 0);
}

tree::TerminalNode* myParser::ExprContext::OR_OP() {
  return getToken(myParser::OR_OP, 0);
}


size_t myParser::ExprContext::getRuleIndex() const {
  return myParser::RuleExpr;
}

void myParser::ExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr(this);
}

void myParser::ExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr(this);
}


myParser::ExprContext* myParser::expr() {
   return expr(0);
}

myParser::ExprContext* myParser::expr(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  myParser::ExprContext *_localctx = _tracker.createInstance<ExprContext>(_ctx, parentState);
  myParser::ExprContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 78;
  enterRecursionRule(_localctx, 78, myParser::RuleExpr, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(719);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 105, _ctx)) {
    case 1: {
      setState(708);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == myParser::AWAIT) {
        setState(707);
        match(myParser::AWAIT);
      }
      setState(710);
      atom();
      setState(714);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 104, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(711);
          trailer(); 
        }
        setState(716);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 104, _ctx);
      }
      break;
    }

    case 2: {
      setState(717);
      antlrcpp::downCast<ExprContext *>(_localctx)->op = _input->LT(1);
      _la = _input->LA(1);
      if (!((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 1261007895663738880) != 0))) {
        antlrcpp::downCast<ExprContext *>(_localctx)->op = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(718);
      expr(7);
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(744);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 107, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(742);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 106, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<ExprContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpr);
          setState(721);

          if (!(precpred(_ctx, 8))) throw FailedPredicateException(this, "precpred(_ctx, 8)");
          setState(722);
          antlrcpp::downCast<ExprContext *>(_localctx)->op = match(myParser::POWER);
          setState(723);
          expr(8);
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<ExprContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpr);
          setState(724);

          if (!(precpred(_ctx, 6))) throw FailedPredicateException(this, "precpred(_ctx, 6)");
          setState(725);
          antlrcpp::downCast<ExprContext *>(_localctx)->op = _input->LT(1);
          _la = _input->LA(1);
          if (!(((((_la - 44) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 44)) & 16834561) != 0))) {
            antlrcpp::downCast<ExprContext *>(_localctx)->op = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(726);
          expr(7);
          break;
        }

        case 3: {
          _localctx = _tracker.createInstance<ExprContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpr);
          setState(727);

          if (!(precpred(_ctx, 5))) throw FailedPredicateException(this, "precpred(_ctx, 5)");
          setState(728);
          antlrcpp::downCast<ExprContext *>(_localctx)->op = _input->LT(1);
          _la = _input->LA(1);
          if (!(_la == myParser::ADD

          || _la == myParser::MINUS)) {
            antlrcpp::downCast<ExprContext *>(_localctx)->op = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(729);
          expr(6);
          break;
        }

        case 4: {
          _localctx = _tracker.createInstance<ExprContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpr);
          setState(730);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(731);
          antlrcpp::downCast<ExprContext *>(_localctx)->op = _input->LT(1);
          _la = _input->LA(1);
          if (!(_la == myParser::LEFT_SHIFT

          || _la == myParser::RIGHT_SHIFT)) {
            antlrcpp::downCast<ExprContext *>(_localctx)->op = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(732);
          expr(5);
          break;
        }

        case 5: {
          _localctx = _tracker.createInstance<ExprContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpr);
          setState(733);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(734);
          antlrcpp::downCast<ExprContext *>(_localctx)->op = match(myParser::AND_OP);
          setState(735);
          expr(4);
          break;
        }

        case 6: {
          _localctx = _tracker.createInstance<ExprContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpr);
          setState(736);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(737);
          antlrcpp::downCast<ExprContext *>(_localctx)->op = match(myParser::XOR);
          setState(738);
          expr(3);
          break;
        }

        case 7: {
          _localctx = _tracker.createInstance<ExprContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpr);
          setState(739);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(740);
          antlrcpp::downCast<ExprContext *>(_localctx)->op = match(myParser::OR_OP);
          setState(741);
          expr(2);
          break;
        }

        default:
          break;
        } 
      }
      setState(746);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 107, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- AtomContext ------------------------------------------------------------------

myParser::AtomContext::AtomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* myParser::AtomContext::OPEN_PAREN() {
  return getToken(myParser::OPEN_PAREN, 0);
}

tree::TerminalNode* myParser::AtomContext::CLOSE_PAREN() {
  return getToken(myParser::CLOSE_PAREN, 0);
}

myParser::Yield_exprContext* myParser::AtomContext::yield_expr() {
  return getRuleContext<myParser::Yield_exprContext>(0);
}

myParser::Testlist_compContext* myParser::AtomContext::testlist_comp() {
  return getRuleContext<myParser::Testlist_compContext>(0);
}

tree::TerminalNode* myParser::AtomContext::OPEN_BRACKET() {
  return getToken(myParser::OPEN_BRACKET, 0);
}

tree::TerminalNode* myParser::AtomContext::CLOSE_BRACKET() {
  return getToken(myParser::CLOSE_BRACKET, 0);
}

tree::TerminalNode* myParser::AtomContext::OPEN_BRACE() {
  return getToken(myParser::OPEN_BRACE, 0);
}

tree::TerminalNode* myParser::AtomContext::CLOSE_BRACE() {
  return getToken(myParser::CLOSE_BRACE, 0);
}

myParser::DictorsetmakerContext* myParser::AtomContext::dictorsetmaker() {
  return getRuleContext<myParser::DictorsetmakerContext>(0);
}

std::vector<tree::TerminalNode *> myParser::AtomContext::REVERSE_QUOTE() {
  return getTokens(myParser::REVERSE_QUOTE);
}

tree::TerminalNode* myParser::AtomContext::REVERSE_QUOTE(size_t i) {
  return getToken(myParser::REVERSE_QUOTE, i);
}

myParser::TestlistContext* myParser::AtomContext::testlist() {
  return getRuleContext<myParser::TestlistContext>(0);
}

tree::TerminalNode* myParser::AtomContext::COMMA() {
  return getToken(myParser::COMMA, 0);
}

tree::TerminalNode* myParser::AtomContext::ELLIPSIS() {
  return getToken(myParser::ELLIPSIS, 0);
}

myParser::NameContext* myParser::AtomContext::name() {
  return getRuleContext<myParser::NameContext>(0);
}

tree::TerminalNode* myParser::AtomContext::PRINT() {
  return getToken(myParser::PRINT, 0);
}

tree::TerminalNode* myParser::AtomContext::EXEC() {
  return getToken(myParser::EXEC, 0);
}

myParser::NumberContext* myParser::AtomContext::number() {
  return getRuleContext<myParser::NumberContext>(0);
}

tree::TerminalNode* myParser::AtomContext::MINUS() {
  return getToken(myParser::MINUS, 0);
}

tree::TerminalNode* myParser::AtomContext::NONE() {
  return getToken(myParser::NONE, 0);
}

std::vector<tree::TerminalNode *> myParser::AtomContext::STRING() {
  return getTokens(myParser::STRING);
}

tree::TerminalNode* myParser::AtomContext::STRING(size_t i) {
  return getToken(myParser::STRING, i);
}


size_t myParser::AtomContext::getRuleIndex() const {
  return myParser::RuleAtom;
}

void myParser::AtomContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAtom(this);
}

void myParser::AtomContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAtom(this);
}

myParser::AtomContext* myParser::atom() {
  AtomContext *_localctx = _tracker.createInstance<AtomContext>(_ctx, getState());
  enterRule(_localctx, 80, myParser::RuleAtom);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(784);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case myParser::OPEN_PAREN: {
        enterOuterAlt(_localctx, 1);
        setState(747);
        match(myParser::OPEN_PAREN);
        setState(750);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case myParser::YIELD: {
            setState(748);
            yield_expr();
            break;
          }

          case myParser::NONE:
          case myParser::LAMBDA:
          case myParser::NOT:
          case myParser::AWAIT:
          case myParser::PRINT:
          case myParser::EXEC:
          case myParser::TRUE:
          case myParser::FALSE:
          case myParser::ELLIPSIS:
          case myParser::REVERSE_QUOTE:
          case myParser::STAR:
          case myParser::ADD:
          case myParser::MINUS:
          case myParser::NOT_OP:
          case myParser::STRING:
          case myParser::DECIMAL_INTEGER:
          case myParser::OCT_INTEGER:
          case myParser::HEX_INTEGER:
          case myParser::BIN_INTEGER:
          case myParser::IMAG_NUMBER:
          case myParser::FLOAT_NUMBER:
          case myParser::OPEN_PAREN:
          case myParser::OPEN_BRACE:
          case myParser::OPEN_BRACKET:
          case myParser::NAME: {
            setState(749);
            testlist_comp();
            break;
          }

          case myParser::CLOSE_PAREN: {
            break;
          }

        default:
          break;
        }
        setState(752);
        match(myParser::CLOSE_PAREN);
        break;
      }

      case myParser::OPEN_BRACKET: {
        enterOuterAlt(_localctx, 2);
        setState(753);
        match(myParser::OPEN_BRACKET);
        setState(755);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 1261040812445138944) != 0) || ((((_la - 83) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 83)) & 11007) != 0)) {
          setState(754);
          testlist_comp();
        }
        setState(757);
        match(myParser::CLOSE_BRACKET);
        break;
      }

      case myParser::OPEN_BRACE: {
        enterOuterAlt(_localctx, 3);
        setState(758);
        match(myParser::OPEN_BRACE);
        setState(760);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 1261322287421849600) != 0) || ((((_la - 83) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 83)) & 11007) != 0)) {
          setState(759);
          dictorsetmaker();
        }
        setState(762);
        match(myParser::CLOSE_BRACE);
        break;
      }

      case myParser::REVERSE_QUOTE: {
        enterOuterAlt(_localctx, 4);
        setState(763);
        match(myParser::REVERSE_QUOTE);
        setState(764);
        testlist();
        setState(766);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == myParser::COMMA) {
          setState(765);
          match(myParser::COMMA);
        }
        setState(768);
        match(myParser::REVERSE_QUOTE);
        break;
      }

      case myParser::ELLIPSIS: {
        enterOuterAlt(_localctx, 5);
        setState(770);
        match(myParser::ELLIPSIS);
        break;
      }

      case myParser::TRUE:
      case myParser::FALSE:
      case myParser::NAME: {
        enterOuterAlt(_localctx, 6);
        setState(771);
        name();
        break;
      }

      case myParser::PRINT: {
        enterOuterAlt(_localctx, 7);
        setState(772);
        match(myParser::PRINT);
        break;
      }

      case myParser::EXEC: {
        enterOuterAlt(_localctx, 8);
        setState(773);
        match(myParser::EXEC);
        break;
      }

      case myParser::MINUS:
      case myParser::DECIMAL_INTEGER:
      case myParser::OCT_INTEGER:
      case myParser::HEX_INTEGER:
      case myParser::BIN_INTEGER:
      case myParser::IMAG_NUMBER:
      case myParser::FLOAT_NUMBER: {
        enterOuterAlt(_localctx, 9);
        setState(775);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == myParser::MINUS) {
          setState(774);
          match(myParser::MINUS);
        }
        setState(777);
        number();
        break;
      }

      case myParser::NONE: {
        enterOuterAlt(_localctx, 10);
        setState(778);
        match(myParser::NONE);
        break;
      }

      case myParser::STRING: {
        enterOuterAlt(_localctx, 11);
        setState(780); 
        _errHandler->sync(this);
        alt = 1;
        do {
          switch (alt) {
            case 1: {
                  setState(779);
                  match(myParser::STRING);
                  break;
                }

          default:
            throw NoViableAltException(this);
          }
          setState(782); 
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 113, _ctx);
        } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DictorsetmakerContext ------------------------------------------------------------------

myParser::DictorsetmakerContext::DictorsetmakerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<myParser::TestContext *> myParser::DictorsetmakerContext::test() {
  return getRuleContexts<myParser::TestContext>();
}

myParser::TestContext* myParser::DictorsetmakerContext::test(size_t i) {
  return getRuleContext<myParser::TestContext>(i);
}

std::vector<tree::TerminalNode *> myParser::DictorsetmakerContext::COLON() {
  return getTokens(myParser::COLON);
}

tree::TerminalNode* myParser::DictorsetmakerContext::COLON(size_t i) {
  return getToken(myParser::COLON, i);
}

std::vector<tree::TerminalNode *> myParser::DictorsetmakerContext::POWER() {
  return getTokens(myParser::POWER);
}

tree::TerminalNode* myParser::DictorsetmakerContext::POWER(size_t i) {
  return getToken(myParser::POWER, i);
}

std::vector<myParser::ExprContext *> myParser::DictorsetmakerContext::expr() {
  return getRuleContexts<myParser::ExprContext>();
}

myParser::ExprContext* myParser::DictorsetmakerContext::expr(size_t i) {
  return getRuleContext<myParser::ExprContext>(i);
}

std::vector<tree::TerminalNode *> myParser::DictorsetmakerContext::COMMA() {
  return getTokens(myParser::COMMA);
}

tree::TerminalNode* myParser::DictorsetmakerContext::COMMA(size_t i) {
  return getToken(myParser::COMMA, i);
}

myParser::Comp_forContext* myParser::DictorsetmakerContext::comp_for() {
  return getRuleContext<myParser::Comp_forContext>(0);
}

myParser::Testlist_compContext* myParser::DictorsetmakerContext::testlist_comp() {
  return getRuleContext<myParser::Testlist_compContext>(0);
}


size_t myParser::DictorsetmakerContext::getRuleIndex() const {
  return myParser::RuleDictorsetmaker;
}

void myParser::DictorsetmakerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDictorsetmaker(this);
}

void myParser::DictorsetmakerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDictorsetmaker(this);
}

myParser::DictorsetmakerContext* myParser::dictorsetmaker() {
  DictorsetmakerContext *_localctx = _tracker.createInstance<DictorsetmakerContext>(_ctx, getState());
  enterRule(_localctx, 82, myParser::RuleDictorsetmaker);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(817);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 119, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(792);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case myParser::NONE:
        case myParser::LAMBDA:
        case myParser::NOT:
        case myParser::AWAIT:
        case myParser::PRINT:
        case myParser::EXEC:
        case myParser::TRUE:
        case myParser::FALSE:
        case myParser::ELLIPSIS:
        case myParser::REVERSE_QUOTE:
        case myParser::ADD:
        case myParser::MINUS:
        case myParser::NOT_OP:
        case myParser::STRING:
        case myParser::DECIMAL_INTEGER:
        case myParser::OCT_INTEGER:
        case myParser::HEX_INTEGER:
        case myParser::BIN_INTEGER:
        case myParser::IMAG_NUMBER:
        case myParser::FLOAT_NUMBER:
        case myParser::OPEN_PAREN:
        case myParser::OPEN_BRACE:
        case myParser::OPEN_BRACKET:
        case myParser::NAME: {
          setState(786);
          test();
          setState(787);
          match(myParser::COLON);
          setState(788);
          test();
          break;
        }

        case myParser::POWER: {
          setState(790);
          match(myParser::POWER);
          setState(791);
          expr(0);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(805);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 117, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(794);
          match(myParser::COMMA);
          setState(801);
          _errHandler->sync(this);
          switch (_input->LA(1)) {
            case myParser::NONE:
            case myParser::LAMBDA:
            case myParser::NOT:
            case myParser::AWAIT:
            case myParser::PRINT:
            case myParser::EXEC:
            case myParser::TRUE:
            case myParser::FALSE:
            case myParser::ELLIPSIS:
            case myParser::REVERSE_QUOTE:
            case myParser::ADD:
            case myParser::MINUS:
            case myParser::NOT_OP:
            case myParser::STRING:
            case myParser::DECIMAL_INTEGER:
            case myParser::OCT_INTEGER:
            case myParser::HEX_INTEGER:
            case myParser::BIN_INTEGER:
            case myParser::IMAG_NUMBER:
            case myParser::FLOAT_NUMBER:
            case myParser::OPEN_PAREN:
            case myParser::OPEN_BRACE:
            case myParser::OPEN_BRACKET:
            case myParser::NAME: {
              setState(795);
              test();
              setState(796);
              match(myParser::COLON);
              setState(797);
              test();
              break;
            }

            case myParser::POWER: {
              setState(799);
              match(myParser::POWER);
              setState(800);
              expr(0);
              break;
            }

          default:
            throw NoViableAltException(this);
          } 
        }
        setState(807);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 117, _ctx);
      }
      setState(809);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == myParser::COMMA) {
        setState(808);
        match(myParser::COMMA);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(811);
      test();
      setState(812);
      match(myParser::COLON);
      setState(813);
      test();
      setState(814);
      comp_for();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(816);
      testlist_comp();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Testlist_compContext ------------------------------------------------------------------

myParser::Testlist_compContext::Testlist_compContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<myParser::TestContext *> myParser::Testlist_compContext::test() {
  return getRuleContexts<myParser::TestContext>();
}

myParser::TestContext* myParser::Testlist_compContext::test(size_t i) {
  return getRuleContext<myParser::TestContext>(i);
}

std::vector<myParser::Star_exprContext *> myParser::Testlist_compContext::star_expr() {
  return getRuleContexts<myParser::Star_exprContext>();
}

myParser::Star_exprContext* myParser::Testlist_compContext::star_expr(size_t i) {
  return getRuleContext<myParser::Star_exprContext>(i);
}

myParser::Comp_forContext* myParser::Testlist_compContext::comp_for() {
  return getRuleContext<myParser::Comp_forContext>(0);
}

std::vector<tree::TerminalNode *> myParser::Testlist_compContext::COMMA() {
  return getTokens(myParser::COMMA);
}

tree::TerminalNode* myParser::Testlist_compContext::COMMA(size_t i) {
  return getToken(myParser::COMMA, i);
}


size_t myParser::Testlist_compContext::getRuleIndex() const {
  return myParser::RuleTestlist_comp;
}

void myParser::Testlist_compContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTestlist_comp(this);
}

void myParser::Testlist_compContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTestlist_comp(this);
}

myParser::Testlist_compContext* myParser::testlist_comp() {
  Testlist_compContext *_localctx = _tracker.createInstance<Testlist_compContext>(_ctx, getState());
  enterRule(_localctx, 84, myParser::RuleTestlist_comp);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(821);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case myParser::NONE:
      case myParser::LAMBDA:
      case myParser::NOT:
      case myParser::AWAIT:
      case myParser::PRINT:
      case myParser::EXEC:
      case myParser::TRUE:
      case myParser::FALSE:
      case myParser::ELLIPSIS:
      case myParser::REVERSE_QUOTE:
      case myParser::ADD:
      case myParser::MINUS:
      case myParser::NOT_OP:
      case myParser::STRING:
      case myParser::DECIMAL_INTEGER:
      case myParser::OCT_INTEGER:
      case myParser::HEX_INTEGER:
      case myParser::BIN_INTEGER:
      case myParser::IMAG_NUMBER:
      case myParser::FLOAT_NUMBER:
      case myParser::OPEN_PAREN:
      case myParser::OPEN_BRACE:
      case myParser::OPEN_BRACKET:
      case myParser::NAME: {
        setState(819);
        test();
        break;
      }

      case myParser::STAR: {
        setState(820);
        star_expr();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(837);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case myParser::FOR: {
        setState(823);
        comp_for();
        break;
      }

      case myParser::COMMA:
      case myParser::CLOSE_PAREN:
      case myParser::CLOSE_BRACE:
      case myParser::CLOSE_BRACKET: {
        setState(831);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 122, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(824);
            match(myParser::COMMA);
            setState(827);
            _errHandler->sync(this);
            switch (_input->LA(1)) {
              case myParser::NONE:
              case myParser::LAMBDA:
              case myParser::NOT:
              case myParser::AWAIT:
              case myParser::PRINT:
              case myParser::EXEC:
              case myParser::TRUE:
              case myParser::FALSE:
              case myParser::ELLIPSIS:
              case myParser::REVERSE_QUOTE:
              case myParser::ADD:
              case myParser::MINUS:
              case myParser::NOT_OP:
              case myParser::STRING:
              case myParser::DECIMAL_INTEGER:
              case myParser::OCT_INTEGER:
              case myParser::HEX_INTEGER:
              case myParser::BIN_INTEGER:
              case myParser::IMAG_NUMBER:
              case myParser::FLOAT_NUMBER:
              case myParser::OPEN_PAREN:
              case myParser::OPEN_BRACE:
              case myParser::OPEN_BRACKET:
              case myParser::NAME: {
                setState(825);
                test();
                break;
              }

              case myParser::STAR: {
                setState(826);
                star_expr();
                break;
              }

            default:
              throw NoViableAltException(this);
            } 
          }
          setState(833);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 122, _ctx);
        }
        setState(835);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == myParser::COMMA) {
          setState(834);
          match(myParser::COMMA);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TestlistContext ------------------------------------------------------------------

myParser::TestlistContext::TestlistContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<myParser::TestContext *> myParser::TestlistContext::test() {
  return getRuleContexts<myParser::TestContext>();
}

myParser::TestContext* myParser::TestlistContext::test(size_t i) {
  return getRuleContext<myParser::TestContext>(i);
}

std::vector<tree::TerminalNode *> myParser::TestlistContext::COMMA() {
  return getTokens(myParser::COMMA);
}

tree::TerminalNode* myParser::TestlistContext::COMMA(size_t i) {
  return getToken(myParser::COMMA, i);
}


size_t myParser::TestlistContext::getRuleIndex() const {
  return myParser::RuleTestlist;
}

void myParser::TestlistContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTestlist(this);
}

void myParser::TestlistContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTestlist(this);
}

myParser::TestlistContext* myParser::testlist() {
  TestlistContext *_localctx = _tracker.createInstance<TestlistContext>(_ctx, getState());
  enterRule(_localctx, 86, myParser::RuleTestlist);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(839);
    test();
    setState(844);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 125, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(840);
        match(myParser::COMMA);
        setState(841);
        test(); 
      }
      setState(846);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 125, _ctx);
    }
    setState(848);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 126, _ctx)) {
    case 1: {
      setState(847);
      match(myParser::COMMA);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Dotted_nameContext ------------------------------------------------------------------

myParser::Dotted_nameContext::Dotted_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

myParser::NameContext* myParser::Dotted_nameContext::name() {
  return getRuleContext<myParser::NameContext>(0);
}

myParser::Dotted_nameContext* myParser::Dotted_nameContext::dotted_name() {
  return getRuleContext<myParser::Dotted_nameContext>(0);
}

tree::TerminalNode* myParser::Dotted_nameContext::DOT() {
  return getToken(myParser::DOT, 0);
}


size_t myParser::Dotted_nameContext::getRuleIndex() const {
  return myParser::RuleDotted_name;
}

void myParser::Dotted_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDotted_name(this);
}

void myParser::Dotted_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDotted_name(this);
}


myParser::Dotted_nameContext* myParser::dotted_name() {
   return dotted_name(0);
}

myParser::Dotted_nameContext* myParser::dotted_name(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  myParser::Dotted_nameContext *_localctx = _tracker.createInstance<Dotted_nameContext>(_ctx, parentState);
  myParser::Dotted_nameContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 88;
  enterRecursionRule(_localctx, 88, myParser::RuleDotted_name, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(851);
    name();
    _ctx->stop = _input->LT(-1);
    setState(858);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 127, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<Dotted_nameContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleDotted_name);
        setState(853);

        if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
        setState(854);
        match(myParser::DOT);
        setState(855);
        name(); 
      }
      setState(860);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 127, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- NameContext ------------------------------------------------------------------

myParser::NameContext::NameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* myParser::NameContext::NAME() {
  return getToken(myParser::NAME, 0);
}

tree::TerminalNode* myParser::NameContext::TRUE() {
  return getToken(myParser::TRUE, 0);
}

tree::TerminalNode* myParser::NameContext::FALSE() {
  return getToken(myParser::FALSE, 0);
}


size_t myParser::NameContext::getRuleIndex() const {
  return myParser::RuleName;
}

void myParser::NameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterName(this);
}

void myParser::NameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitName(this);
}

myParser::NameContext* myParser::name() {
  NameContext *_localctx = _tracker.createInstance<NameContext>(_ctx, getState());
  enterRule(_localctx, 90, myParser::RuleName);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(861);
    _la = _input->LA(1);
    if (!(((((_la - 39) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 39)) & 144115188075855875) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NumberContext ------------------------------------------------------------------

myParser::NumberContext::NumberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

myParser::IntegerContext* myParser::NumberContext::integer() {
  return getRuleContext<myParser::IntegerContext>(0);
}

tree::TerminalNode* myParser::NumberContext::IMAG_NUMBER() {
  return getToken(myParser::IMAG_NUMBER, 0);
}

tree::TerminalNode* myParser::NumberContext::FLOAT_NUMBER() {
  return getToken(myParser::FLOAT_NUMBER, 0);
}


size_t myParser::NumberContext::getRuleIndex() const {
  return myParser::RuleNumber;
}

void myParser::NumberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNumber(this);
}

void myParser::NumberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNumber(this);
}

myParser::NumberContext* myParser::number() {
  NumberContext *_localctx = _tracker.createInstance<NumberContext>(_ctx, getState());
  enterRule(_localctx, 92, myParser::RuleNumber);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(866);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case myParser::DECIMAL_INTEGER:
      case myParser::OCT_INTEGER:
      case myParser::HEX_INTEGER:
      case myParser::BIN_INTEGER: {
        enterOuterAlt(_localctx, 1);
        setState(863);
        integer();
        break;
      }

      case myParser::IMAG_NUMBER: {
        enterOuterAlt(_localctx, 2);
        setState(864);
        match(myParser::IMAG_NUMBER);
        break;
      }

      case myParser::FLOAT_NUMBER: {
        enterOuterAlt(_localctx, 3);
        setState(865);
        match(myParser::FLOAT_NUMBER);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IntegerContext ------------------------------------------------------------------

myParser::IntegerContext::IntegerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* myParser::IntegerContext::DECIMAL_INTEGER() {
  return getToken(myParser::DECIMAL_INTEGER, 0);
}

tree::TerminalNode* myParser::IntegerContext::OCT_INTEGER() {
  return getToken(myParser::OCT_INTEGER, 0);
}

tree::TerminalNode* myParser::IntegerContext::HEX_INTEGER() {
  return getToken(myParser::HEX_INTEGER, 0);
}

tree::TerminalNode* myParser::IntegerContext::BIN_INTEGER() {
  return getToken(myParser::BIN_INTEGER, 0);
}


size_t myParser::IntegerContext::getRuleIndex() const {
  return myParser::RuleInteger;
}

void myParser::IntegerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInteger(this);
}

void myParser::IntegerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInteger(this);
}

myParser::IntegerContext* myParser::integer() {
  IntegerContext *_localctx = _tracker.createInstance<IntegerContext>(_ctx, getState());
  enterRule(_localctx, 94, myParser::RuleInteger);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(868);
    _la = _input->LA(1);
    if (!(((((_la - 84) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 84)) & 15) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Yield_exprContext ------------------------------------------------------------------

myParser::Yield_exprContext::Yield_exprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* myParser::Yield_exprContext::YIELD() {
  return getToken(myParser::YIELD, 0);
}

myParser::Yield_argContext* myParser::Yield_exprContext::yield_arg() {
  return getRuleContext<myParser::Yield_argContext>(0);
}


size_t myParser::Yield_exprContext::getRuleIndex() const {
  return myParser::RuleYield_expr;
}

void myParser::Yield_exprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterYield_expr(this);
}

void myParser::Yield_exprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitYield_expr(this);
}

myParser::Yield_exprContext* myParser::yield_expr() {
  Yield_exprContext *_localctx = _tracker.createInstance<Yield_exprContext>(_ctx, getState());
  enterRule(_localctx, 96, myParser::RuleYield_expr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(870);
    match(myParser::YIELD);
    setState(872);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 1261023220259094656) != 0) || ((((_la - 83) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 83)) & 11007) != 0)) {
      setState(871);
      yield_arg();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Yield_argContext ------------------------------------------------------------------

myParser::Yield_argContext::Yield_argContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* myParser::Yield_argContext::FROM() {
  return getToken(myParser::FROM, 0);
}

myParser::TestContext* myParser::Yield_argContext::test() {
  return getRuleContext<myParser::TestContext>(0);
}

myParser::TestlistContext* myParser::Yield_argContext::testlist() {
  return getRuleContext<myParser::TestlistContext>(0);
}


size_t myParser::Yield_argContext::getRuleIndex() const {
  return myParser::RuleYield_arg;
}

void myParser::Yield_argContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterYield_arg(this);
}

void myParser::Yield_argContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitYield_arg(this);
}

myParser::Yield_argContext* myParser::yield_arg() {
  Yield_argContext *_localctx = _tracker.createInstance<Yield_argContext>(_ctx, getState());
  enterRule(_localctx, 98, myParser::RuleYield_arg);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(877);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case myParser::FROM: {
        enterOuterAlt(_localctx, 1);
        setState(874);
        match(myParser::FROM);
        setState(875);
        test();
        break;
      }

      case myParser::NONE:
      case myParser::LAMBDA:
      case myParser::NOT:
      case myParser::AWAIT:
      case myParser::PRINT:
      case myParser::EXEC:
      case myParser::TRUE:
      case myParser::FALSE:
      case myParser::ELLIPSIS:
      case myParser::REVERSE_QUOTE:
      case myParser::ADD:
      case myParser::MINUS:
      case myParser::NOT_OP:
      case myParser::STRING:
      case myParser::DECIMAL_INTEGER:
      case myParser::OCT_INTEGER:
      case myParser::HEX_INTEGER:
      case myParser::BIN_INTEGER:
      case myParser::IMAG_NUMBER:
      case myParser::FLOAT_NUMBER:
      case myParser::OPEN_PAREN:
      case myParser::OPEN_BRACE:
      case myParser::OPEN_BRACKET:
      case myParser::NAME: {
        enterOuterAlt(_localctx, 2);
        setState(876);
        testlist();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TrailerContext ------------------------------------------------------------------

myParser::TrailerContext::TrailerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* myParser::TrailerContext::DOT() {
  return getToken(myParser::DOT, 0);
}

myParser::NameContext* myParser::TrailerContext::name() {
  return getRuleContext<myParser::NameContext>(0);
}

myParser::ArgumentsContext* myParser::TrailerContext::arguments() {
  return getRuleContext<myParser::ArgumentsContext>(0);
}


size_t myParser::TrailerContext::getRuleIndex() const {
  return myParser::RuleTrailer;
}

void myParser::TrailerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTrailer(this);
}

void myParser::TrailerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTrailer(this);
}

myParser::TrailerContext* myParser::trailer() {
  TrailerContext *_localctx = _tracker.createInstance<TrailerContext>(_ctx, getState());
  enterRule(_localctx, 100, myParser::RuleTrailer);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(885);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case myParser::DOT: {
        enterOuterAlt(_localctx, 1);
        setState(879);
        match(myParser::DOT);
        setState(880);
        name();
        setState(882);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 131, _ctx)) {
        case 1: {
          setState(881);
          arguments();
          break;
        }

        default:
          break;
        }
        break;
      }

      case myParser::OPEN_PAREN:
      case myParser::OPEN_BRACKET: {
        enterOuterAlt(_localctx, 2);
        setState(884);
        arguments();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArgumentsContext ------------------------------------------------------------------

myParser::ArgumentsContext::ArgumentsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* myParser::ArgumentsContext::OPEN_PAREN() {
  return getToken(myParser::OPEN_PAREN, 0);
}

tree::TerminalNode* myParser::ArgumentsContext::CLOSE_PAREN() {
  return getToken(myParser::CLOSE_PAREN, 0);
}

myParser::ArglistContext* myParser::ArgumentsContext::arglist() {
  return getRuleContext<myParser::ArglistContext>(0);
}

tree::TerminalNode* myParser::ArgumentsContext::OPEN_BRACKET() {
  return getToken(myParser::OPEN_BRACKET, 0);
}

myParser::SubscriptlistContext* myParser::ArgumentsContext::subscriptlist() {
  return getRuleContext<myParser::SubscriptlistContext>(0);
}

tree::TerminalNode* myParser::ArgumentsContext::CLOSE_BRACKET() {
  return getToken(myParser::CLOSE_BRACKET, 0);
}


size_t myParser::ArgumentsContext::getRuleIndex() const {
  return myParser::RuleArguments;
}

void myParser::ArgumentsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArguments(this);
}

void myParser::ArgumentsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArguments(this);
}

myParser::ArgumentsContext* myParser::arguments() {
  ArgumentsContext *_localctx = _tracker.createInstance<ArgumentsContext>(_ctx, getState());
  enterRule(_localctx, 102, myParser::RuleArguments);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(896);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case myParser::OPEN_PAREN: {
        enterOuterAlt(_localctx, 1);
        setState(887);
        match(myParser::OPEN_PAREN);
        setState(889);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 1261322287421849600) != 0) || ((((_la - 83) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 83)) & 11007) != 0)) {
          setState(888);
          arglist();
        }
        setState(891);
        match(myParser::CLOSE_PAREN);
        break;
      }

      case myParser::OPEN_BRACKET: {
        enterOuterAlt(_localctx, 2);
        setState(892);
        match(myParser::OPEN_BRACKET);
        setState(893);
        subscriptlist();
        setState(894);
        match(myParser::CLOSE_BRACKET);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArglistContext ------------------------------------------------------------------

myParser::ArglistContext::ArglistContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<myParser::ArgumentContext *> myParser::ArglistContext::argument() {
  return getRuleContexts<myParser::ArgumentContext>();
}

myParser::ArgumentContext* myParser::ArglistContext::argument(size_t i) {
  return getRuleContext<myParser::ArgumentContext>(i);
}

std::vector<tree::TerminalNode *> myParser::ArglistContext::COMMA() {
  return getTokens(myParser::COMMA);
}

tree::TerminalNode* myParser::ArglistContext::COMMA(size_t i) {
  return getToken(myParser::COMMA, i);
}


size_t myParser::ArglistContext::getRuleIndex() const {
  return myParser::RuleArglist;
}

void myParser::ArglistContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArglist(this);
}

void myParser::ArglistContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArglist(this);
}

myParser::ArglistContext* myParser::arglist() {
  ArglistContext *_localctx = _tracker.createInstance<ArglistContext>(_ctx, getState());
  enterRule(_localctx, 104, myParser::RuleArglist);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(898);
    argument();
    setState(903);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 135, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(899);
        match(myParser::COMMA);
        setState(900);
        argument(); 
      }
      setState(905);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 135, _ctx);
    }
    setState(907);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == myParser::COMMA) {
      setState(906);
      match(myParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArgumentContext ------------------------------------------------------------------

myParser::ArgumentContext::ArgumentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<myParser::TestContext *> myParser::ArgumentContext::test() {
  return getRuleContexts<myParser::TestContext>();
}

myParser::TestContext* myParser::ArgumentContext::test(size_t i) {
  return getRuleContext<myParser::TestContext>(i);
}

myParser::Comp_forContext* myParser::ArgumentContext::comp_for() {
  return getRuleContext<myParser::Comp_forContext>(0);
}

tree::TerminalNode* myParser::ArgumentContext::ASSIGN() {
  return getToken(myParser::ASSIGN, 0);
}

tree::TerminalNode* myParser::ArgumentContext::POWER() {
  return getToken(myParser::POWER, 0);
}

tree::TerminalNode* myParser::ArgumentContext::STAR() {
  return getToken(myParser::STAR, 0);
}


size_t myParser::ArgumentContext::getRuleIndex() const {
  return myParser::RuleArgument;
}

void myParser::ArgumentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArgument(this);
}

void myParser::ArgumentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArgument(this);
}

myParser::ArgumentContext* myParser::argument() {
  ArgumentContext *_localctx = _tracker.createInstance<ArgumentContext>(_ctx, getState());
  enterRule(_localctx, 106, myParser::RuleArgument);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(917);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case myParser::NONE:
      case myParser::LAMBDA:
      case myParser::NOT:
      case myParser::AWAIT:
      case myParser::PRINT:
      case myParser::EXEC:
      case myParser::TRUE:
      case myParser::FALSE:
      case myParser::ELLIPSIS:
      case myParser::REVERSE_QUOTE:
      case myParser::ADD:
      case myParser::MINUS:
      case myParser::NOT_OP:
      case myParser::STRING:
      case myParser::DECIMAL_INTEGER:
      case myParser::OCT_INTEGER:
      case myParser::HEX_INTEGER:
      case myParser::BIN_INTEGER:
      case myParser::IMAG_NUMBER:
      case myParser::FLOAT_NUMBER:
      case myParser::OPEN_PAREN:
      case myParser::OPEN_BRACE:
      case myParser::OPEN_BRACKET:
      case myParser::NAME: {
        enterOuterAlt(_localctx, 1);
        setState(909);
        test();
        setState(913);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case myParser::FOR: {
            setState(910);
            comp_for();
            break;
          }

          case myParser::ASSIGN: {
            setState(911);
            match(myParser::ASSIGN);
            setState(912);
            test();
            break;
          }

          case myParser::COMMA:
          case myParser::CLOSE_PAREN: {
            break;
          }

        default:
          break;
        }
        break;
      }

      case myParser::STAR:
      case myParser::POWER: {
        enterOuterAlt(_localctx, 2);
        setState(915);
        _la = _input->LA(1);
        if (!(_la == myParser::STAR

        || _la == myParser::POWER)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(916);
        test();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubscriptlistContext ------------------------------------------------------------------

myParser::SubscriptlistContext::SubscriptlistContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<myParser::SubscriptContext *> myParser::SubscriptlistContext::subscript() {
  return getRuleContexts<myParser::SubscriptContext>();
}

myParser::SubscriptContext* myParser::SubscriptlistContext::subscript(size_t i) {
  return getRuleContext<myParser::SubscriptContext>(i);
}

std::vector<tree::TerminalNode *> myParser::SubscriptlistContext::COMMA() {
  return getTokens(myParser::COMMA);
}

tree::TerminalNode* myParser::SubscriptlistContext::COMMA(size_t i) {
  return getToken(myParser::COMMA, i);
}


size_t myParser::SubscriptlistContext::getRuleIndex() const {
  return myParser::RuleSubscriptlist;
}

void myParser::SubscriptlistContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubscriptlist(this);
}

void myParser::SubscriptlistContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubscriptlist(this);
}

myParser::SubscriptlistContext* myParser::subscriptlist() {
  SubscriptlistContext *_localctx = _tracker.createInstance<SubscriptlistContext>(_ctx, getState());
  enterRule(_localctx, 108, myParser::RuleSubscriptlist);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(919);
    subscript();
    setState(924);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 139, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(920);
        match(myParser::COMMA);
        setState(921);
        subscript(); 
      }
      setState(926);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 139, _ctx);
    }
    setState(928);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == myParser::COMMA) {
      setState(927);
      match(myParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubscriptContext ------------------------------------------------------------------

myParser::SubscriptContext::SubscriptContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* myParser::SubscriptContext::ELLIPSIS() {
  return getToken(myParser::ELLIPSIS, 0);
}

std::vector<myParser::TestContext *> myParser::SubscriptContext::test() {
  return getRuleContexts<myParser::TestContext>();
}

myParser::TestContext* myParser::SubscriptContext::test(size_t i) {
  return getRuleContext<myParser::TestContext>(i);
}

tree::TerminalNode* myParser::SubscriptContext::COLON() {
  return getToken(myParser::COLON, 0);
}

myParser::SliceopContext* myParser::SubscriptContext::sliceop() {
  return getRuleContext<myParser::SliceopContext>(0);
}


size_t myParser::SubscriptContext::getRuleIndex() const {
  return myParser::RuleSubscript;
}

void myParser::SubscriptContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubscript(this);
}

void myParser::SubscriptContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubscript(this);
}

myParser::SubscriptContext* myParser::subscript() {
  SubscriptContext *_localctx = _tracker.createInstance<SubscriptContext>(_ctx, getState());
  enterRule(_localctx, 110, myParser::RuleSubscript);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(948);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 146, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(930);
      match(myParser::ELLIPSIS);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(931);
      test();
      setState(939);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == myParser::COLON) {
        setState(932);
        match(myParser::COLON);
        setState(934);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 1261023220259094528) != 0) || ((((_la - 83) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 83)) & 11007) != 0)) {
          setState(933);
          test();
        }
        setState(937);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == myParser::COLON) {
          setState(936);
          sliceop();
        }
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(941);
      match(myParser::COLON);
      setState(943);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 1261023220259094528) != 0) || ((((_la - 83) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 83)) & 11007) != 0)) {
        setState(942);
        test();
      }
      setState(946);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == myParser::COLON) {
        setState(945);
        sliceop();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SliceopContext ------------------------------------------------------------------

myParser::SliceopContext::SliceopContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* myParser::SliceopContext::COLON() {
  return getToken(myParser::COLON, 0);
}

myParser::TestContext* myParser::SliceopContext::test() {
  return getRuleContext<myParser::TestContext>(0);
}


size_t myParser::SliceopContext::getRuleIndex() const {
  return myParser::RuleSliceop;
}

void myParser::SliceopContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSliceop(this);
}

void myParser::SliceopContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSliceop(this);
}

myParser::SliceopContext* myParser::sliceop() {
  SliceopContext *_localctx = _tracker.createInstance<SliceopContext>(_ctx, getState());
  enterRule(_localctx, 112, myParser::RuleSliceop);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(950);
    match(myParser::COLON);
    setState(952);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 1261023220259094528) != 0) || ((((_la - 83) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 83)) & 11007) != 0)) {
      setState(951);
      test();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Comp_forContext ------------------------------------------------------------------

myParser::Comp_forContext::Comp_forContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* myParser::Comp_forContext::FOR() {
  return getToken(myParser::FOR, 0);
}

myParser::ExprlistContext* myParser::Comp_forContext::exprlist() {
  return getRuleContext<myParser::ExprlistContext>(0);
}

tree::TerminalNode* myParser::Comp_forContext::IN() {
  return getToken(myParser::IN, 0);
}

myParser::Logical_testContext* myParser::Comp_forContext::logical_test() {
  return getRuleContext<myParser::Logical_testContext>(0);
}

myParser::Comp_iterContext* myParser::Comp_forContext::comp_iter() {
  return getRuleContext<myParser::Comp_iterContext>(0);
}


size_t myParser::Comp_forContext::getRuleIndex() const {
  return myParser::RuleComp_for;
}

void myParser::Comp_forContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComp_for(this);
}

void myParser::Comp_forContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComp_for(this);
}

myParser::Comp_forContext* myParser::comp_for() {
  Comp_forContext *_localctx = _tracker.createInstance<Comp_forContext>(_ctx, getState());
  enterRule(_localctx, 114, myParser::RuleComp_for);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(954);
    match(myParser::FOR);
    setState(955);
    exprlist();
    setState(956);
    match(myParser::IN);
    setState(957);
    logical_test(0);
    setState(959);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == myParser::IF

    || _la == myParser::FOR) {
      setState(958);
      comp_iter();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Comp_iterContext ------------------------------------------------------------------

myParser::Comp_iterContext::Comp_iterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

myParser::Comp_forContext* myParser::Comp_iterContext::comp_for() {
  return getRuleContext<myParser::Comp_forContext>(0);
}

tree::TerminalNode* myParser::Comp_iterContext::IF() {
  return getToken(myParser::IF, 0);
}

myParser::TestContext* myParser::Comp_iterContext::test() {
  return getRuleContext<myParser::TestContext>(0);
}

myParser::Comp_iterContext* myParser::Comp_iterContext::comp_iter() {
  return getRuleContext<myParser::Comp_iterContext>(0);
}


size_t myParser::Comp_iterContext::getRuleIndex() const {
  return myParser::RuleComp_iter;
}

void myParser::Comp_iterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComp_iter(this);
}

void myParser::Comp_iterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<myParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComp_iter(this);
}

myParser::Comp_iterContext* myParser::comp_iter() {
  Comp_iterContext *_localctx = _tracker.createInstance<Comp_iterContext>(_ctx, getState());
  enterRule(_localctx, 116, myParser::RuleComp_iter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(967);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case myParser::FOR: {
        enterOuterAlt(_localctx, 1);
        setState(961);
        comp_for();
        break;
      }

      case myParser::IF: {
        enterOuterAlt(_localctx, 2);
        setState(962);
        match(myParser::IF);
        setState(963);
        test();
        setState(965);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == myParser::IF

        || _la == myParser::FOR) {
          setState(964);
          comp_iter();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool myParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 12: return except_clauseSempred(antlrcpp::downCast<Except_clauseContext *>(context), predicateIndex);
    case 22: return small_stmtSempred(antlrcpp::downCast<Small_stmtContext *>(context), predicateIndex);
    case 25: return assign_partSempred(antlrcpp::downCast<Assign_partContext *>(context), predicateIndex);
    case 37: return logical_testSempred(antlrcpp::downCast<Logical_testContext *>(context), predicateIndex);
    case 38: return comparisonSempred(antlrcpp::downCast<ComparisonContext *>(context), predicateIndex);
    case 39: return exprSempred(antlrcpp::downCast<ExprContext *>(context), predicateIndex);
    case 44: return dotted_nameSempred(antlrcpp::downCast<Dotted_nameContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool myParser::except_clauseSempred(Except_clauseContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return this.CheckVersion(2);
    case 1: return this.CheckVersion(3);

  default:
    break;
  }
  return true;
}

bool myParser::small_stmtSempred(Small_stmtContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 2: return this.CheckVersion(2);
    case 3: return this.CheckVersion(2);
    case 4: return this.CheckVersion(3);

  default:
    break;
  }
  return true;
}

bool myParser::assign_partSempred(Assign_partContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 5: return this.CheckVersion(3);

  default:
    break;
  }
  return true;
}

bool myParser::logical_testSempred(Logical_testContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 6: return precpred(_ctx, 2);
    case 7: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool myParser::comparisonSempred(ComparisonContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 8: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

bool myParser::exprSempred(ExprContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 9: return precpred(_ctx, 8);
    case 10: return precpred(_ctx, 6);
    case 11: return precpred(_ctx, 5);
    case 12: return precpred(_ctx, 4);
    case 13: return precpred(_ctx, 3);
    case 14: return precpred(_ctx, 2);
    case 15: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool myParser::dotted_nameSempred(Dotted_nameContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 16: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

void myParser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  myparserParserInitialize();
#else
  ::antlr4::internal::call_once(myparserParserOnceFlag, myparserParserInitialize);
#endif
}
