
// Generated from Python2.g4 by ANTLR 4.11.1


#include "Python2Listener.h"

#include "Python2Parser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct Python2ParserStaticData final {
  Python2ParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  Python2ParserStaticData(const Python2ParserStaticData&) = delete;
  Python2ParserStaticData(Python2ParserStaticData&&) = delete;
  Python2ParserStaticData& operator=(const Python2ParserStaticData&) = delete;
  Python2ParserStaticData& operator=(Python2ParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag python2ParserOnceFlag;
Python2ParserStaticData *python2ParserStaticData = nullptr;

void python2ParserInitialize() {
  assert(python2ParserStaticData == nullptr);
  auto staticData = std::make_unique<Python2ParserStaticData>(
    std::vector<std::string>{
      "single_input", "file_input", "eval_input", "decorator", "decorators", 
      "decorated", "funcdef", "parameters", "varargslist", "fpdef", "fplist", 
      "stmt", "simple_stmt", "small_stmt", "expr_stmt", "augassign", "print_stmt", 
      "del_stmt", "pass_stmt", "flow_stmt", "break_stmt", "continue_stmt", 
      "return_stmt", "yield_stmt", "raise_stmt", "import_stmt", "import_name", 
      "import_from", "import_as_name", "dotted_as_name", "import_as_names", 
      "dotted_as_names", "dotted_name", "global_stmt", "exec_stmt", "assert_stmt", 
      "compound_stmt", "if_stmt", "while_stmt", "for_stmt", "try_stmt", 
      "with_stmt", "with_item", "except_clause", "suite", "testlist_safe", 
      "old_test", "old_lambdef", "test", "or_test", "and_test", "not_test", 
      "comparison", "comp_op", "expr", "xor_expr", "and_expr", "shift_expr", 
      "arith_expr", "term", "factor", "power", "atom", "listmaker", "testlist_comp", 
      "lambdef", "trailer", "subscriptlist", "subscript", "sliceop", "exprlist", 
      "testlist", "dictorsetmaker", "classdef", "arglist", "argument", "list_iter", 
      "list_for", "list_if", "comp_iter", "comp_for", "comp_if", "testlist1", 
      "encoding_decl", "yield_expr"
    },
    std::vector<std::string>{
      "", "'@'", "'def'", "':'", "'='", "','", "'*'", "'**'", "';'", "'+='", 
      "'-='", "'*='", "'/='", "'%='", "'&='", "'|='", "'^='", "'<<='", "'>>='", 
      "'**='", "'//='", "'>>'", "'del'", "'pass'", "'break'", "'continue'", 
      "'return'", "'raise'", "'import'", "'from'", "'.'", "'as'", "'global'", 
      "'exec'", "'in'", "'assert'", "'if'", "'elif'", "'else'", "'while'", 
      "'for'", "'try'", "'finally'", "'with'", "'except'", "'lambda'", "'or'", 
      "'and'", "'not'", "'<'", "'>'", "'=='", "'>='", "'<='", "'<>'", "'!='", 
      "'is'", "'|'", "'^'", "'&'", "'<<'", "'+'", "'-'", "'/'", "'%'", "'//'", 
      "'~'", "'`'", "'class'", "'yield'", "", "", "", "", "", "", "'('", 
      "')'", "'{'", "'}'", "'['", "']'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "NAME", "NUMBER", "STRING", "LINENDING", "WHITESPACE", "COMMENT", 
      "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACE", "CLOSE_BRACE", "OPEN_BRACKET", 
      "CLOSE_BRACKET", "UNKNOWN", "INDENT", "DEDENT", "NEWLINE", "ENDMARKER"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,86,1020,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
  	7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,
  	14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,
  	21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,
  	28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,
  	35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,
  	42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,
  	49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,
  	56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
  	63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,
  	70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,
  	77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,
  	84,1,0,1,0,1,0,1,0,1,0,3,0,176,8,0,1,1,1,1,5,1,180,8,1,10,1,12,1,183,
  	9,1,1,1,1,1,1,2,1,2,5,2,189,8,2,10,2,12,2,192,9,2,1,2,1,2,1,3,1,3,1,3,
  	1,3,3,3,200,8,3,1,3,3,3,203,8,3,1,3,1,3,1,4,4,4,208,8,4,11,4,12,4,209,
  	1,5,1,5,1,5,3,5,215,8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,3,7,225,8,7,1,
  	7,1,7,1,8,1,8,1,8,3,8,232,8,8,1,8,1,8,5,8,236,8,8,10,8,12,8,239,9,8,1,
  	8,1,8,1,8,1,8,1,8,3,8,246,8,8,1,8,1,8,3,8,250,8,8,1,8,1,8,1,8,3,8,255,
  	8,8,1,8,1,8,1,8,1,8,3,8,261,8,8,5,8,263,8,8,10,8,12,8,266,9,8,1,8,3,8,
  	269,8,8,3,8,271,8,8,1,9,1,9,1,9,1,9,1,9,3,9,278,8,9,1,10,1,10,1,10,5,
  	10,283,8,10,10,10,12,10,286,9,10,1,10,3,10,289,8,10,1,11,1,11,3,11,293,
  	8,11,1,12,1,12,1,12,5,12,298,8,12,10,12,12,12,301,9,12,1,12,3,12,304,
  	8,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,317,
  	8,13,1,14,1,14,1,14,1,14,3,14,323,8,14,1,14,1,14,1,14,3,14,328,8,14,5,
  	14,330,8,14,10,14,12,14,333,9,14,3,14,335,8,14,1,15,1,15,1,16,1,16,1,
  	16,1,16,1,16,5,16,344,8,16,10,16,12,16,347,9,16,1,16,3,16,350,8,16,3,
  	16,352,8,16,1,16,1,16,1,16,1,16,4,16,358,8,16,11,16,12,16,359,1,16,3,
  	16,363,8,16,3,16,365,8,16,3,16,367,8,16,1,17,1,17,1,17,1,18,1,18,1,19,
  	1,19,1,19,1,19,1,19,3,19,379,8,19,1,20,1,20,1,21,1,21,1,22,1,22,3,22,
  	387,8,22,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,3,24,397,8,24,3,24,399,
  	8,24,3,24,401,8,24,1,25,1,25,3,25,405,8,25,1,26,1,26,1,26,1,27,1,27,5,
  	27,412,8,27,10,27,12,27,415,9,27,1,27,1,27,4,27,419,8,27,11,27,12,27,
  	420,3,27,423,8,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,432,8,27,1,
  	28,1,28,1,28,3,28,437,8,28,1,29,1,29,1,29,3,29,442,8,29,1,30,1,30,1,30,
  	5,30,447,8,30,10,30,12,30,450,9,30,1,30,3,30,453,8,30,1,31,1,31,1,31,
  	5,31,458,8,31,10,31,12,31,461,9,31,1,32,1,32,1,32,5,32,466,8,32,10,32,
  	12,32,469,9,32,1,33,1,33,1,33,1,33,5,33,475,8,33,10,33,12,33,478,9,33,
  	1,34,1,34,1,34,1,34,1,34,1,34,3,34,486,8,34,3,34,488,8,34,1,35,1,35,1,
  	35,1,35,3,35,494,8,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,504,
  	8,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,5,37,515,8,37,10,37,
  	12,37,518,9,37,1,37,1,37,1,37,3,37,523,8,37,1,38,1,38,1,38,1,38,1,38,
  	1,38,1,38,3,38,532,8,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,
  	3,39,543,8,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,4,40,552,8,40,11,40,
  	12,40,553,1,40,1,40,1,40,3,40,559,8,40,1,40,1,40,1,40,3,40,564,8,40,1,
  	40,1,40,1,40,3,40,569,8,40,1,41,1,41,1,41,1,41,5,41,575,8,41,10,41,12,
  	41,578,9,41,1,41,1,41,1,41,1,42,1,42,1,42,3,42,586,8,42,1,43,1,43,1,43,
  	1,43,3,43,592,8,43,3,43,594,8,43,1,44,1,44,1,44,1,44,4,44,600,8,44,11,
  	44,12,44,601,1,44,1,44,3,44,606,8,44,1,45,1,45,1,45,4,45,611,8,45,11,
  	45,12,45,612,1,45,3,45,616,8,45,3,45,618,8,45,1,46,1,46,3,46,622,8,46,
  	1,47,1,47,3,47,626,8,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,
  	3,48,637,8,48,1,48,3,48,640,8,48,1,49,1,49,1,49,5,49,645,8,49,10,49,12,
  	49,648,9,49,1,50,1,50,1,50,5,50,653,8,50,10,50,12,50,656,9,50,1,51,1,
  	51,1,51,3,51,661,8,51,1,52,1,52,1,52,1,52,5,52,667,8,52,10,52,12,52,670,
  	9,52,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,
  	3,53,685,8,53,1,54,1,54,1,54,5,54,690,8,54,10,54,12,54,693,9,54,1,55,
  	1,55,1,55,5,55,698,8,55,10,55,12,55,701,9,55,1,56,1,56,1,56,5,56,706,
  	8,56,10,56,12,56,709,9,56,1,57,1,57,1,57,5,57,714,8,57,10,57,12,57,717,
  	9,57,1,58,1,58,1,58,5,58,722,8,58,10,58,12,58,725,9,58,1,59,1,59,1,59,
  	5,59,730,8,59,10,59,12,59,733,9,59,1,60,1,60,1,60,3,60,738,8,60,1,61,
  	1,61,5,61,742,8,61,10,61,12,61,745,9,61,1,61,1,61,3,61,749,8,61,1,62,
  	1,62,1,62,3,62,754,8,62,1,62,1,62,1,62,3,62,759,8,62,1,62,1,62,1,62,3,
  	62,764,8,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,4,
  	62,777,8,62,11,62,12,62,778,3,62,781,8,62,1,63,1,63,1,63,1,63,5,63,787,
  	8,63,10,63,12,63,790,9,63,1,63,3,63,793,8,63,3,63,795,8,63,1,64,1,64,
  	1,64,1,64,5,64,801,8,64,10,64,12,64,804,9,64,1,64,3,64,807,8,64,3,64,
  	809,8,64,1,65,1,65,3,65,813,8,65,1,65,1,65,1,65,1,66,1,66,3,66,820,8,
  	66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,3,66,829,8,66,1,67,1,67,1,67,5,
  	67,834,8,67,10,67,12,67,837,9,67,1,67,3,67,840,8,67,1,68,1,68,1,68,1,
  	68,1,68,3,68,847,8,68,1,68,1,68,3,68,851,8,68,1,68,3,68,854,8,68,3,68,
  	856,8,68,1,69,1,69,3,69,860,8,69,1,70,1,70,1,70,5,70,865,8,70,10,70,12,
  	70,868,9,70,1,70,3,70,871,8,70,1,71,1,71,1,71,5,71,876,8,71,10,71,12,
  	71,879,9,71,1,71,3,71,882,8,71,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,
  	1,72,5,72,893,8,72,10,72,12,72,896,9,72,1,72,3,72,899,8,72,3,72,901,8,
  	72,1,72,1,72,1,72,1,72,5,72,907,8,72,10,72,12,72,910,9,72,1,72,3,72,913,
  	8,72,3,72,915,8,72,3,72,917,8,72,1,73,1,73,1,73,1,73,3,73,923,8,73,1,
  	73,3,73,926,8,73,1,73,1,73,1,73,1,74,1,74,1,74,5,74,934,8,74,10,74,12,
  	74,937,9,74,1,74,1,74,3,74,941,8,74,1,74,1,74,1,74,1,74,5,74,947,8,74,
  	10,74,12,74,950,9,74,1,74,1,74,1,74,3,74,955,8,74,1,74,1,74,3,74,959,
  	8,74,1,75,1,75,3,75,963,8,75,1,75,1,75,1,75,1,75,3,75,969,8,75,1,76,1,
  	76,3,76,973,8,76,1,77,1,77,1,77,1,77,1,77,3,77,980,8,77,1,78,1,78,1,78,
  	3,78,985,8,78,1,79,1,79,3,79,989,8,79,1,80,1,80,1,80,1,80,1,80,3,80,996,
  	8,80,1,81,1,81,1,81,3,81,1001,8,81,1,82,1,82,1,82,5,82,1006,8,82,10,82,
  	12,82,1009,9,82,1,83,1,83,1,84,1,84,3,84,1015,8,84,1,84,3,84,1018,8,84,
  	1,84,0,0,85,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,
  	42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,
  	88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,
  	126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,
  	162,164,166,168,0,6,1,0,9,20,2,0,5,5,31,31,2,0,21,21,60,60,1,0,61,62,
  	2,0,6,6,63,65,2,0,61,62,66,66,1113,0,175,1,0,0,0,2,181,1,0,0,0,4,186,
  	1,0,0,0,6,195,1,0,0,0,8,207,1,0,0,0,10,211,1,0,0,0,12,216,1,0,0,0,14,
  	222,1,0,0,0,16,270,1,0,0,0,18,277,1,0,0,0,20,279,1,0,0,0,22,292,1,0,0,
  	0,24,294,1,0,0,0,26,316,1,0,0,0,28,318,1,0,0,0,30,336,1,0,0,0,32,338,
  	1,0,0,0,34,368,1,0,0,0,36,371,1,0,0,0,38,378,1,0,0,0,40,380,1,0,0,0,42,
  	382,1,0,0,0,44,384,1,0,0,0,46,388,1,0,0,0,48,390,1,0,0,0,50,404,1,0,0,
  	0,52,406,1,0,0,0,54,409,1,0,0,0,56,433,1,0,0,0,58,438,1,0,0,0,60,443,
  	1,0,0,0,62,454,1,0,0,0,64,462,1,0,0,0,66,470,1,0,0,0,68,479,1,0,0,0,70,
  	489,1,0,0,0,72,503,1,0,0,0,74,505,1,0,0,0,76,524,1,0,0,0,78,533,1,0,0,
  	0,80,544,1,0,0,0,82,570,1,0,0,0,84,582,1,0,0,0,86,587,1,0,0,0,88,605,
  	1,0,0,0,90,607,1,0,0,0,92,621,1,0,0,0,94,623,1,0,0,0,96,639,1,0,0,0,98,
  	641,1,0,0,0,100,649,1,0,0,0,102,660,1,0,0,0,104,662,1,0,0,0,106,684,1,
  	0,0,0,108,686,1,0,0,0,110,694,1,0,0,0,112,702,1,0,0,0,114,710,1,0,0,0,
  	116,718,1,0,0,0,118,726,1,0,0,0,120,737,1,0,0,0,122,739,1,0,0,0,124,780,
  	1,0,0,0,126,782,1,0,0,0,128,796,1,0,0,0,130,810,1,0,0,0,132,828,1,0,0,
  	0,134,830,1,0,0,0,136,855,1,0,0,0,138,857,1,0,0,0,140,861,1,0,0,0,142,
  	872,1,0,0,0,144,916,1,0,0,0,146,918,1,0,0,0,148,935,1,0,0,0,150,968,1,
  	0,0,0,152,972,1,0,0,0,154,974,1,0,0,0,156,981,1,0,0,0,158,988,1,0,0,0,
  	160,990,1,0,0,0,162,997,1,0,0,0,164,1002,1,0,0,0,166,1010,1,0,0,0,168,
  	1012,1,0,0,0,170,176,5,85,0,0,171,176,3,24,12,0,172,173,3,72,36,0,173,
  	174,5,85,0,0,174,176,1,0,0,0,175,170,1,0,0,0,175,171,1,0,0,0,175,172,
  	1,0,0,0,176,1,1,0,0,0,177,180,5,85,0,0,178,180,3,22,11,0,179,177,1,0,
  	0,0,179,178,1,0,0,0,180,183,1,0,0,0,181,179,1,0,0,0,181,182,1,0,0,0,182,
  	184,1,0,0,0,183,181,1,0,0,0,184,185,5,86,0,0,185,3,1,0,0,0,186,190,3,
  	142,71,0,187,189,5,85,0,0,188,187,1,0,0,0,189,192,1,0,0,0,190,188,1,0,
  	0,0,190,191,1,0,0,0,191,193,1,0,0,0,192,190,1,0,0,0,193,194,5,86,0,0,
  	194,5,1,0,0,0,195,196,5,1,0,0,196,202,3,64,32,0,197,199,5,76,0,0,198,
  	200,3,148,74,0,199,198,1,0,0,0,199,200,1,0,0,0,200,201,1,0,0,0,201,203,
  	5,77,0,0,202,197,1,0,0,0,202,203,1,0,0,0,203,204,1,0,0,0,204,205,5,85,
  	0,0,205,7,1,0,0,0,206,208,3,6,3,0,207,206,1,0,0,0,208,209,1,0,0,0,209,
  	207,1,0,0,0,209,210,1,0,0,0,210,9,1,0,0,0,211,214,3,8,4,0,212,215,3,146,
  	73,0,213,215,3,12,6,0,214,212,1,0,0,0,214,213,1,0,0,0,215,11,1,0,0,0,
  	216,217,5,2,0,0,217,218,5,70,0,0,218,219,3,14,7,0,219,220,5,3,0,0,220,
  	221,3,88,44,0,221,13,1,0,0,0,222,224,5,76,0,0,223,225,3,16,8,0,224,223,
  	1,0,0,0,224,225,1,0,0,0,225,226,1,0,0,0,226,227,5,77,0,0,227,15,1,0,0,
  	0,228,231,3,18,9,0,229,230,5,4,0,0,230,232,3,96,48,0,231,229,1,0,0,0,
  	231,232,1,0,0,0,232,233,1,0,0,0,233,234,5,5,0,0,234,236,1,0,0,0,235,228,
  	1,0,0,0,236,239,1,0,0,0,237,235,1,0,0,0,237,238,1,0,0,0,238,249,1,0,0,
  	0,239,237,1,0,0,0,240,241,5,6,0,0,241,245,5,70,0,0,242,243,5,5,0,0,243,
  	244,5,7,0,0,244,246,5,70,0,0,245,242,1,0,0,0,245,246,1,0,0,0,246,250,
  	1,0,0,0,247,248,5,7,0,0,248,250,5,70,0,0,249,240,1,0,0,0,249,247,1,0,
  	0,0,250,271,1,0,0,0,251,254,3,18,9,0,252,253,5,4,0,0,253,255,3,96,48,
  	0,254,252,1,0,0,0,254,255,1,0,0,0,255,264,1,0,0,0,256,257,5,5,0,0,257,
  	260,3,18,9,0,258,259,5,4,0,0,259,261,3,96,48,0,260,258,1,0,0,0,260,261,
  	1,0,0,0,261,263,1,0,0,0,262,256,1,0,0,0,263,266,1,0,0,0,264,262,1,0,0,
  	0,264,265,1,0,0,0,265,268,1,0,0,0,266,264,1,0,0,0,267,269,5,5,0,0,268,
  	267,1,0,0,0,268,269,1,0,0,0,269,271,1,0,0,0,270,237,1,0,0,0,270,251,1,
  	0,0,0,271,17,1,0,0,0,272,278,5,70,0,0,273,274,5,76,0,0,274,275,3,20,10,
  	0,275,276,5,77,0,0,276,278,1,0,0,0,277,272,1,0,0,0,277,273,1,0,0,0,278,
  	19,1,0,0,0,279,284,3,18,9,0,280,281,5,5,0,0,281,283,3,18,9,0,282,280,
  	1,0,0,0,283,286,1,0,0,0,284,282,1,0,0,0,284,285,1,0,0,0,285,288,1,0,0,
  	0,286,284,1,0,0,0,287,289,5,5,0,0,288,287,1,0,0,0,288,289,1,0,0,0,289,
  	21,1,0,0,0,290,293,3,24,12,0,291,293,3,72,36,0,292,290,1,0,0,0,292,291,
  	1,0,0,0,293,23,1,0,0,0,294,299,3,26,13,0,295,296,5,8,0,0,296,298,3,26,
  	13,0,297,295,1,0,0,0,298,301,1,0,0,0,299,297,1,0,0,0,299,300,1,0,0,0,
  	300,303,1,0,0,0,301,299,1,0,0,0,302,304,5,8,0,0,303,302,1,0,0,0,303,304,
  	1,0,0,0,304,305,1,0,0,0,305,306,5,85,0,0,306,25,1,0,0,0,307,317,3,28,
  	14,0,308,317,3,32,16,0,309,317,3,34,17,0,310,317,3,36,18,0,311,317,3,
  	38,19,0,312,317,3,50,25,0,313,317,3,66,33,0,314,317,3,68,34,0,315,317,
  	3,70,35,0,316,307,1,0,0,0,316,308,1,0,0,0,316,309,1,0,0,0,316,310,1,0,
  	0,0,316,311,1,0,0,0,316,312,1,0,0,0,316,313,1,0,0,0,316,314,1,0,0,0,316,
  	315,1,0,0,0,317,27,1,0,0,0,318,334,3,142,71,0,319,322,3,30,15,0,320,323,
  	3,168,84,0,321,323,3,142,71,0,322,320,1,0,0,0,322,321,1,0,0,0,323,335,
  	1,0,0,0,324,327,5,4,0,0,325,328,3,168,84,0,326,328,3,142,71,0,327,325,
  	1,0,0,0,327,326,1,0,0,0,328,330,1,0,0,0,329,324,1,0,0,0,330,333,1,0,0,
  	0,331,329,1,0,0,0,331,332,1,0,0,0,332,335,1,0,0,0,333,331,1,0,0,0,334,
  	319,1,0,0,0,334,331,1,0,0,0,335,29,1,0,0,0,336,337,7,0,0,0,337,31,1,0,
  	0,0,338,339,4,16,0,0,339,366,5,70,0,0,340,345,3,96,48,0,341,342,5,5,0,
  	0,342,344,3,96,48,0,343,341,1,0,0,0,344,347,1,0,0,0,345,343,1,0,0,0,345,
  	346,1,0,0,0,346,349,1,0,0,0,347,345,1,0,0,0,348,350,5,5,0,0,349,348,1,
  	0,0,0,349,350,1,0,0,0,350,352,1,0,0,0,351,340,1,0,0,0,351,352,1,0,0,0,
  	352,367,1,0,0,0,353,354,5,21,0,0,354,364,3,96,48,0,355,356,5,5,0,0,356,
  	358,3,96,48,0,357,355,1,0,0,0,358,359,1,0,0,0,359,357,1,0,0,0,359,360,
  	1,0,0,0,360,362,1,0,0,0,361,363,5,5,0,0,362,361,1,0,0,0,362,363,1,0,0,
  	0,363,365,1,0,0,0,364,357,1,0,0,0,364,365,1,0,0,0,365,367,1,0,0,0,366,
  	351,1,0,0,0,366,353,1,0,0,0,367,33,1,0,0,0,368,369,5,22,0,0,369,370,3,
  	140,70,0,370,35,1,0,0,0,371,372,5,23,0,0,372,37,1,0,0,0,373,379,3,40,
  	20,0,374,379,3,42,21,0,375,379,3,44,22,0,376,379,3,48,24,0,377,379,3,
  	46,23,0,378,373,1,0,0,0,378,374,1,0,0,0,378,375,1,0,0,0,378,376,1,0,0,
  	0,378,377,1,0,0,0,379,39,1,0,0,0,380,381,5,24,0,0,381,41,1,0,0,0,382,
  	383,5,25,0,0,383,43,1,0,0,0,384,386,5,26,0,0,385,387,3,142,71,0,386,385,
  	1,0,0,0,386,387,1,0,0,0,387,45,1,0,0,0,388,389,3,168,84,0,389,47,1,0,
  	0,0,390,400,5,27,0,0,391,398,3,96,48,0,392,393,5,5,0,0,393,396,3,96,48,
  	0,394,395,5,5,0,0,395,397,3,96,48,0,396,394,1,0,0,0,396,397,1,0,0,0,397,
  	399,1,0,0,0,398,392,1,0,0,0,398,399,1,0,0,0,399,401,1,0,0,0,400,391,1,
  	0,0,0,400,401,1,0,0,0,401,49,1,0,0,0,402,405,3,52,26,0,403,405,3,54,27,
  	0,404,402,1,0,0,0,404,403,1,0,0,0,405,51,1,0,0,0,406,407,5,28,0,0,407,
  	408,3,62,31,0,408,53,1,0,0,0,409,422,5,29,0,0,410,412,5,30,0,0,411,410,
  	1,0,0,0,412,415,1,0,0,0,413,411,1,0,0,0,413,414,1,0,0,0,414,416,1,0,0,
  	0,415,413,1,0,0,0,416,423,3,64,32,0,417,419,5,30,0,0,418,417,1,0,0,0,
  	419,420,1,0,0,0,420,418,1,0,0,0,420,421,1,0,0,0,421,423,1,0,0,0,422,413,
  	1,0,0,0,422,418,1,0,0,0,423,424,1,0,0,0,424,431,5,28,0,0,425,432,5,6,
  	0,0,426,427,5,76,0,0,427,428,3,60,30,0,428,429,5,77,0,0,429,432,1,0,0,
  	0,430,432,3,60,30,0,431,425,1,0,0,0,431,426,1,0,0,0,431,430,1,0,0,0,432,
  	55,1,0,0,0,433,436,5,70,0,0,434,435,5,31,0,0,435,437,5,70,0,0,436,434,
  	1,0,0,0,436,437,1,0,0,0,437,57,1,0,0,0,438,441,3,64,32,0,439,440,5,31,
  	0,0,440,442,5,70,0,0,441,439,1,0,0,0,441,442,1,0,0,0,442,59,1,0,0,0,443,
  	448,3,56,28,0,444,445,5,5,0,0,445,447,3,56,28,0,446,444,1,0,0,0,447,450,
  	1,0,0,0,448,446,1,0,0,0,448,449,1,0,0,0,449,452,1,0,0,0,450,448,1,0,0,
  	0,451,453,5,5,0,0,452,451,1,0,0,0,452,453,1,0,0,0,453,61,1,0,0,0,454,
  	459,3,58,29,0,455,456,5,5,0,0,456,458,3,58,29,0,457,455,1,0,0,0,458,461,
  	1,0,0,0,459,457,1,0,0,0,459,460,1,0,0,0,460,63,1,0,0,0,461,459,1,0,0,
  	0,462,467,5,70,0,0,463,464,5,30,0,0,464,466,5,70,0,0,465,463,1,0,0,0,
  	466,469,1,0,0,0,467,465,1,0,0,0,467,468,1,0,0,0,468,65,1,0,0,0,469,467,
  	1,0,0,0,470,471,5,32,0,0,471,476,5,70,0,0,472,473,5,5,0,0,473,475,5,70,
  	0,0,474,472,1,0,0,0,475,478,1,0,0,0,476,474,1,0,0,0,476,477,1,0,0,0,477,
  	67,1,0,0,0,478,476,1,0,0,0,479,480,5,33,0,0,480,487,3,108,54,0,481,482,
  	5,34,0,0,482,485,3,96,48,0,483,484,5,5,0,0,484,486,3,96,48,0,485,483,
  	1,0,0,0,485,486,1,0,0,0,486,488,1,0,0,0,487,481,1,0,0,0,487,488,1,0,0,
  	0,488,69,1,0,0,0,489,490,5,35,0,0,490,493,3,96,48,0,491,492,5,5,0,0,492,
  	494,3,96,48,0,493,491,1,0,0,0,493,494,1,0,0,0,494,71,1,0,0,0,495,504,
  	3,74,37,0,496,504,3,76,38,0,497,504,3,78,39,0,498,504,3,80,40,0,499,504,
  	3,82,41,0,500,504,3,12,6,0,501,504,3,146,73,0,502,504,3,10,5,0,503,495,
  	1,0,0,0,503,496,1,0,0,0,503,497,1,0,0,0,503,498,1,0,0,0,503,499,1,0,0,
  	0,503,500,1,0,0,0,503,501,1,0,0,0,503,502,1,0,0,0,504,73,1,0,0,0,505,
  	506,5,36,0,0,506,507,3,96,48,0,507,508,5,3,0,0,508,516,3,88,44,0,509,
  	510,5,37,0,0,510,511,3,96,48,0,511,512,5,3,0,0,512,513,3,88,44,0,513,
  	515,1,0,0,0,514,509,1,0,0,0,515,518,1,0,0,0,516,514,1,0,0,0,516,517,1,
  	0,0,0,517,522,1,0,0,0,518,516,1,0,0,0,519,520,5,38,0,0,520,521,5,3,0,
  	0,521,523,3,88,44,0,522,519,1,0,0,0,522,523,1,0,0,0,523,75,1,0,0,0,524,
  	525,5,39,0,0,525,526,3,96,48,0,526,527,5,3,0,0,527,531,3,88,44,0,528,
  	529,5,38,0,0,529,530,5,3,0,0,530,532,3,88,44,0,531,528,1,0,0,0,531,532,
  	1,0,0,0,532,77,1,0,0,0,533,534,5,40,0,0,534,535,3,140,70,0,535,536,5,
  	34,0,0,536,537,3,142,71,0,537,538,5,3,0,0,538,542,3,88,44,0,539,540,5,
  	38,0,0,540,541,5,3,0,0,541,543,3,88,44,0,542,539,1,0,0,0,542,543,1,0,
  	0,0,543,79,1,0,0,0,544,545,5,41,0,0,545,546,5,3,0,0,546,568,3,88,44,0,
  	547,548,3,86,43,0,548,549,5,3,0,0,549,550,3,88,44,0,550,552,1,0,0,0,551,
  	547,1,0,0,0,552,553,1,0,0,0,553,551,1,0,0,0,553,554,1,0,0,0,554,558,1,
  	0,0,0,555,556,5,38,0,0,556,557,5,3,0,0,557,559,3,88,44,0,558,555,1,0,
  	0,0,558,559,1,0,0,0,559,563,1,0,0,0,560,561,5,42,0,0,561,562,5,3,0,0,
  	562,564,3,88,44,0,563,560,1,0,0,0,563,564,1,0,0,0,564,569,1,0,0,0,565,
  	566,5,42,0,0,566,567,5,3,0,0,567,569,3,88,44,0,568,551,1,0,0,0,568,565,
  	1,0,0,0,569,81,1,0,0,0,570,571,5,43,0,0,571,576,3,84,42,0,572,573,5,5,
  	0,0,573,575,3,84,42,0,574,572,1,0,0,0,575,578,1,0,0,0,576,574,1,0,0,0,
  	576,577,1,0,0,0,577,579,1,0,0,0,578,576,1,0,0,0,579,580,5,3,0,0,580,581,
  	3,88,44,0,581,83,1,0,0,0,582,585,3,96,48,0,583,584,5,31,0,0,584,586,3,
  	108,54,0,585,583,1,0,0,0,585,586,1,0,0,0,586,85,1,0,0,0,587,593,5,44,
  	0,0,588,591,3,96,48,0,589,590,7,1,0,0,590,592,3,96,48,0,591,589,1,0,0,
  	0,591,592,1,0,0,0,592,594,1,0,0,0,593,588,1,0,0,0,593,594,1,0,0,0,594,
  	87,1,0,0,0,595,606,3,24,12,0,596,597,5,85,0,0,597,599,5,83,0,0,598,600,
  	3,22,11,0,599,598,1,0,0,0,600,601,1,0,0,0,601,599,1,0,0,0,601,602,1,0,
  	0,0,602,603,1,0,0,0,603,604,5,84,0,0,604,606,1,0,0,0,605,595,1,0,0,0,
  	605,596,1,0,0,0,606,89,1,0,0,0,607,617,3,92,46,0,608,609,5,5,0,0,609,
  	611,3,92,46,0,610,608,1,0,0,0,611,612,1,0,0,0,612,610,1,0,0,0,612,613,
  	1,0,0,0,613,615,1,0,0,0,614,616,5,5,0,0,615,614,1,0,0,0,615,616,1,0,0,
  	0,616,618,1,0,0,0,617,610,1,0,0,0,617,618,1,0,0,0,618,91,1,0,0,0,619,
  	622,3,98,49,0,620,622,3,94,47,0,621,619,1,0,0,0,621,620,1,0,0,0,622,93,
  	1,0,0,0,623,625,5,45,0,0,624,626,3,16,8,0,625,624,1,0,0,0,625,626,1,0,
  	0,0,626,627,1,0,0,0,627,628,5,3,0,0,628,629,3,92,46,0,629,95,1,0,0,0,
  	630,636,3,98,49,0,631,632,5,36,0,0,632,633,3,98,49,0,633,634,5,38,0,0,
  	634,635,3,96,48,0,635,637,1,0,0,0,636,631,1,0,0,0,636,637,1,0,0,0,637,
  	640,1,0,0,0,638,640,3,130,65,0,639,630,1,0,0,0,639,638,1,0,0,0,640,97,
  	1,0,0,0,641,646,3,100,50,0,642,643,5,46,0,0,643,645,3,100,50,0,644,642,
  	1,0,0,0,645,648,1,0,0,0,646,644,1,0,0,0,646,647,1,0,0,0,647,99,1,0,0,
  	0,648,646,1,0,0,0,649,654,3,102,51,0,650,651,5,47,0,0,651,653,3,102,51,
  	0,652,650,1,0,0,0,653,656,1,0,0,0,654,652,1,0,0,0,654,655,1,0,0,0,655,
  	101,1,0,0,0,656,654,1,0,0,0,657,658,5,48,0,0,658,661,3,102,51,0,659,661,
  	3,104,52,0,660,657,1,0,0,0,660,659,1,0,0,0,661,103,1,0,0,0,662,668,3,
  	108,54,0,663,664,3,106,53,0,664,665,3,108,54,0,665,667,1,0,0,0,666,663,
  	1,0,0,0,667,670,1,0,0,0,668,666,1,0,0,0,668,669,1,0,0,0,669,105,1,0,0,
  	0,670,668,1,0,0,0,671,685,5,49,0,0,672,685,5,50,0,0,673,685,5,51,0,0,
  	674,685,5,52,0,0,675,685,5,53,0,0,676,685,5,54,0,0,677,685,5,55,0,0,678,
  	685,5,34,0,0,679,680,5,48,0,0,680,685,5,34,0,0,681,685,5,56,0,0,682,683,
  	5,56,0,0,683,685,5,48,0,0,684,671,1,0,0,0,684,672,1,0,0,0,684,673,1,0,
  	0,0,684,674,1,0,0,0,684,675,1,0,0,0,684,676,1,0,0,0,684,677,1,0,0,0,684,
  	678,1,0,0,0,684,679,1,0,0,0,684,681,1,0,0,0,684,682,1,0,0,0,685,107,1,
  	0,0,0,686,691,3,110,55,0,687,688,5,57,0,0,688,690,3,110,55,0,689,687,
  	1,0,0,0,690,693,1,0,0,0,691,689,1,0,0,0,691,692,1,0,0,0,692,109,1,0,0,
  	0,693,691,1,0,0,0,694,699,3,112,56,0,695,696,5,58,0,0,696,698,3,112,56,
  	0,697,695,1,0,0,0,698,701,1,0,0,0,699,697,1,0,0,0,699,700,1,0,0,0,700,
  	111,1,0,0,0,701,699,1,0,0,0,702,707,3,114,57,0,703,704,5,59,0,0,704,706,
  	3,114,57,0,705,703,1,0,0,0,706,709,1,0,0,0,707,705,1,0,0,0,707,708,1,
  	0,0,0,708,113,1,0,0,0,709,707,1,0,0,0,710,715,3,116,58,0,711,712,7,2,
  	0,0,712,714,3,116,58,0,713,711,1,0,0,0,714,717,1,0,0,0,715,713,1,0,0,
  	0,715,716,1,0,0,0,716,115,1,0,0,0,717,715,1,0,0,0,718,723,3,118,59,0,
  	719,720,7,3,0,0,720,722,3,118,59,0,721,719,1,0,0,0,722,725,1,0,0,0,723,
  	721,1,0,0,0,723,724,1,0,0,0,724,117,1,0,0,0,725,723,1,0,0,0,726,731,3,
  	120,60,0,727,728,7,4,0,0,728,730,3,120,60,0,729,727,1,0,0,0,730,733,1,
  	0,0,0,731,729,1,0,0,0,731,732,1,0,0,0,732,119,1,0,0,0,733,731,1,0,0,0,
  	734,735,7,5,0,0,735,738,3,120,60,0,736,738,3,122,61,0,737,734,1,0,0,0,
  	737,736,1,0,0,0,738,121,1,0,0,0,739,743,3,124,62,0,740,742,3,132,66,0,
  	741,740,1,0,0,0,742,745,1,0,0,0,743,741,1,0,0,0,743,744,1,0,0,0,744,748,
  	1,0,0,0,745,743,1,0,0,0,746,747,5,7,0,0,747,749,3,120,60,0,748,746,1,
  	0,0,0,748,749,1,0,0,0,749,123,1,0,0,0,750,753,5,76,0,0,751,754,3,168,
  	84,0,752,754,3,128,64,0,753,751,1,0,0,0,753,752,1,0,0,0,753,754,1,0,0,
  	0,754,755,1,0,0,0,755,781,5,77,0,0,756,758,5,80,0,0,757,759,3,126,63,
  	0,758,757,1,0,0,0,758,759,1,0,0,0,759,760,1,0,0,0,760,781,5,81,0,0,761,
  	763,5,78,0,0,762,764,3,144,72,0,763,762,1,0,0,0,763,764,1,0,0,0,764,765,
  	1,0,0,0,765,781,5,79,0,0,766,767,5,67,0,0,767,768,3,164,82,0,768,769,
  	5,67,0,0,769,781,1,0,0,0,770,771,5,30,0,0,771,772,5,30,0,0,772,781,5,
  	30,0,0,773,781,5,70,0,0,774,781,5,71,0,0,775,777,5,72,0,0,776,775,1,0,
  	0,0,777,778,1,0,0,0,778,776,1,0,0,0,778,779,1,0,0,0,779,781,1,0,0,0,780,
  	750,1,0,0,0,780,756,1,0,0,0,780,761,1,0,0,0,780,766,1,0,0,0,780,770,1,
  	0,0,0,780,773,1,0,0,0,780,774,1,0,0,0,780,776,1,0,0,0,781,125,1,0,0,0,
  	782,794,3,96,48,0,783,795,3,154,77,0,784,785,5,5,0,0,785,787,3,96,48,
  	0,786,784,1,0,0,0,787,790,1,0,0,0,788,786,1,0,0,0,788,789,1,0,0,0,789,
  	792,1,0,0,0,790,788,1,0,0,0,791,793,5,5,0,0,792,791,1,0,0,0,792,793,1,
  	0,0,0,793,795,1,0,0,0,794,783,1,0,0,0,794,788,1,0,0,0,795,127,1,0,0,0,
  	796,808,3,96,48,0,797,809,3,160,80,0,798,799,5,5,0,0,799,801,3,96,48,
  	0,800,798,1,0,0,0,801,804,1,0,0,0,802,800,1,0,0,0,802,803,1,0,0,0,803,
  	806,1,0,0,0,804,802,1,0,0,0,805,807,5,5,0,0,806,805,1,0,0,0,806,807,1,
  	0,0,0,807,809,1,0,0,0,808,797,1,0,0,0,808,802,1,0,0,0,809,129,1,0,0,0,
  	810,812,5,45,0,0,811,813,3,16,8,0,812,811,1,0,0,0,812,813,1,0,0,0,813,
  	814,1,0,0,0,814,815,5,3,0,0,815,816,3,96,48,0,816,131,1,0,0,0,817,819,
  	5,76,0,0,818,820,3,148,74,0,819,818,1,0,0,0,819,820,1,0,0,0,820,821,1,
  	0,0,0,821,829,5,77,0,0,822,823,5,80,0,0,823,824,3,134,67,0,824,825,5,
  	81,0,0,825,829,1,0,0,0,826,827,5,30,0,0,827,829,5,70,0,0,828,817,1,0,
  	0,0,828,822,1,0,0,0,828,826,1,0,0,0,829,133,1,0,0,0,830,835,3,136,68,
  	0,831,832,5,5,0,0,832,834,3,136,68,0,833,831,1,0,0,0,834,837,1,0,0,0,
  	835,833,1,0,0,0,835,836,1,0,0,0,836,839,1,0,0,0,837,835,1,0,0,0,838,840,
  	5,5,0,0,839,838,1,0,0,0,839,840,1,0,0,0,840,135,1,0,0,0,841,842,5,30,
  	0,0,842,843,5,30,0,0,843,856,5,30,0,0,844,856,3,96,48,0,845,847,3,96,
  	48,0,846,845,1,0,0,0,846,847,1,0,0,0,847,848,1,0,0,0,848,850,5,3,0,0,
  	849,851,3,96,48,0,850,849,1,0,0,0,850,851,1,0,0,0,851,853,1,0,0,0,852,
  	854,3,138,69,0,853,852,1,0,0,0,853,854,1,0,0,0,854,856,1,0,0,0,855,841,
  	1,0,0,0,855,844,1,0,0,0,855,846,1,0,0,0,856,137,1,0,0,0,857,859,5,3,0,
  	0,858,860,3,96,48,0,859,858,1,0,0,0,859,860,1,0,0,0,860,139,1,0,0,0,861,
  	866,3,108,54,0,862,863,5,5,0,0,863,865,3,108,54,0,864,862,1,0,0,0,865,
  	868,1,0,0,0,866,864,1,0,0,0,866,867,1,0,0,0,867,870,1,0,0,0,868,866,1,
  	0,0,0,869,871,5,5,0,0,870,869,1,0,0,0,870,871,1,0,0,0,871,141,1,0,0,0,
  	872,877,3,96,48,0,873,874,5,5,0,0,874,876,3,96,48,0,875,873,1,0,0,0,876,
  	879,1,0,0,0,877,875,1,0,0,0,877,878,1,0,0,0,878,881,1,0,0,0,879,877,1,
  	0,0,0,880,882,5,5,0,0,881,880,1,0,0,0,881,882,1,0,0,0,882,143,1,0,0,0,
  	883,884,3,96,48,0,884,885,5,3,0,0,885,900,3,96,48,0,886,901,3,160,80,
  	0,887,888,5,5,0,0,888,889,3,96,48,0,889,890,5,3,0,0,890,891,3,96,48,0,
  	891,893,1,0,0,0,892,887,1,0,0,0,893,896,1,0,0,0,894,892,1,0,0,0,894,895,
  	1,0,0,0,895,898,1,0,0,0,896,894,1,0,0,0,897,899,5,5,0,0,898,897,1,0,0,
  	0,898,899,1,0,0,0,899,901,1,0,0,0,900,886,1,0,0,0,900,894,1,0,0,0,901,
  	917,1,0,0,0,902,914,3,96,48,0,903,915,3,160,80,0,904,905,5,5,0,0,905,
  	907,3,96,48,0,906,904,1,0,0,0,907,910,1,0,0,0,908,906,1,0,0,0,908,909,
  	1,0,0,0,909,912,1,0,0,0,910,908,1,0,0,0,911,913,5,5,0,0,912,911,1,0,0,
  	0,912,913,1,0,0,0,913,915,1,0,0,0,914,903,1,0,0,0,914,908,1,0,0,0,915,
  	917,1,0,0,0,916,883,1,0,0,0,916,902,1,0,0,0,917,145,1,0,0,0,918,919,5,
  	68,0,0,919,925,5,70,0,0,920,922,5,76,0,0,921,923,3,142,71,0,922,921,1,
  	0,0,0,922,923,1,0,0,0,923,924,1,0,0,0,924,926,5,77,0,0,925,920,1,0,0,
  	0,925,926,1,0,0,0,926,927,1,0,0,0,927,928,5,3,0,0,928,929,3,88,44,0,929,
  	147,1,0,0,0,930,931,3,150,75,0,931,932,5,5,0,0,932,934,1,0,0,0,933,930,
  	1,0,0,0,934,937,1,0,0,0,935,933,1,0,0,0,935,936,1,0,0,0,936,958,1,0,0,
  	0,937,935,1,0,0,0,938,940,3,150,75,0,939,941,5,5,0,0,940,939,1,0,0,0,
  	940,941,1,0,0,0,941,959,1,0,0,0,942,943,5,6,0,0,943,948,3,96,48,0,944,
  	945,5,5,0,0,945,947,3,150,75,0,946,944,1,0,0,0,947,950,1,0,0,0,948,946,
  	1,0,0,0,948,949,1,0,0,0,949,954,1,0,0,0,950,948,1,0,0,0,951,952,5,5,0,
  	0,952,953,5,7,0,0,953,955,3,96,48,0,954,951,1,0,0,0,954,955,1,0,0,0,955,
  	959,1,0,0,0,956,957,5,7,0,0,957,959,3,96,48,0,958,938,1,0,0,0,958,942,
  	1,0,0,0,958,956,1,0,0,0,959,149,1,0,0,0,960,962,3,96,48,0,961,963,3,160,
  	80,0,962,961,1,0,0,0,962,963,1,0,0,0,963,969,1,0,0,0,964,965,3,96,48,
  	0,965,966,5,4,0,0,966,967,3,96,48,0,967,969,1,0,0,0,968,960,1,0,0,0,968,
  	964,1,0,0,0,969,151,1,0,0,0,970,973,3,154,77,0,971,973,3,156,78,0,972,
  	970,1,0,0,0,972,971,1,0,0,0,973,153,1,0,0,0,974,975,5,40,0,0,975,976,
  	3,140,70,0,976,977,5,34,0,0,977,979,3,90,45,0,978,980,3,152,76,0,979,
  	978,1,0,0,0,979,980,1,0,0,0,980,155,1,0,0,0,981,982,5,36,0,0,982,984,
  	3,92,46,0,983,985,3,152,76,0,984,983,1,0,0,0,984,985,1,0,0,0,985,157,
  	1,0,0,0,986,989,3,160,80,0,987,989,3,162,81,0,988,986,1,0,0,0,988,987,
  	1,0,0,0,989,159,1,0,0,0,990,991,5,40,0,0,991,992,3,140,70,0,992,993,5,
  	34,0,0,993,995,3,98,49,0,994,996,3,158,79,0,995,994,1,0,0,0,995,996,1,
  	0,0,0,996,161,1,0,0,0,997,998,5,36,0,0,998,1000,3,92,46,0,999,1001,3,
  	158,79,0,1000,999,1,0,0,0,1000,1001,1,0,0,0,1001,163,1,0,0,0,1002,1007,
  	3,96,48,0,1003,1004,5,5,0,0,1004,1006,3,96,48,0,1005,1003,1,0,0,0,1006,
  	1009,1,0,0,0,1007,1005,1,0,0,0,1007,1008,1,0,0,0,1008,165,1,0,0,0,1009,
  	1007,1,0,0,0,1010,1011,5,70,0,0,1011,167,1,0,0,0,1012,1014,5,69,0,0,1013,
  	1015,5,29,0,0,1014,1013,1,0,0,0,1014,1015,1,0,0,0,1015,1017,1,0,0,0,1016,
  	1018,3,142,71,0,1017,1016,1,0,0,0,1017,1018,1,0,0,0,1018,169,1,0,0,0,
  	142,175,179,181,190,199,202,209,214,224,231,237,245,249,254,260,264,268,
  	270,277,284,288,292,299,303,316,322,327,331,334,345,349,351,359,362,364,
  	366,378,386,396,398,400,404,413,420,422,431,436,441,448,452,459,467,476,
  	485,487,493,503,516,522,531,542,553,558,563,568,576,585,591,593,601,605,
  	612,615,617,621,625,636,639,646,654,660,668,684,691,699,707,715,723,731,
  	737,743,748,753,758,763,778,780,788,792,794,802,806,808,812,819,828,835,
  	839,846,850,853,855,859,866,870,877,881,894,898,900,908,912,914,916,922,
  	925,935,940,948,954,958,962,968,972,979,984,988,995,1000,1007,1014,1017
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  python2ParserStaticData = staticData.release();
}

}

Python2Parser::Python2Parser(TokenStream *input) : Python2Parser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

Python2Parser::Python2Parser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  Python2Parser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *python2ParserStaticData->atn, python2ParserStaticData->decisionToDFA, python2ParserStaticData->sharedContextCache, options);
}

Python2Parser::~Python2Parser() {
  delete _interpreter;
}

const atn::ATN& Python2Parser::getATN() const {
  return *python2ParserStaticData->atn;
}

std::string Python2Parser::getGrammarFileName() const {
  return "Python2.g4";
}

const std::vector<std::string>& Python2Parser::getRuleNames() const {
  return python2ParserStaticData->ruleNames;
}

const dfa::Vocabulary& Python2Parser::getVocabulary() const {
  return python2ParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView Python2Parser::getSerializedATN() const {
  return python2ParserStaticData->serializedATN;
}


//----------------- Single_inputContext ------------------------------------------------------------------

Python2Parser::Single_inputContext::Single_inputContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Python2Parser::Single_inputContext::NEWLINE() {
  return getToken(Python2Parser::NEWLINE, 0);
}

Python2Parser::Simple_stmtContext* Python2Parser::Single_inputContext::simple_stmt() {
  return getRuleContext<Python2Parser::Simple_stmtContext>(0);
}

Python2Parser::Compound_stmtContext* Python2Parser::Single_inputContext::compound_stmt() {
  return getRuleContext<Python2Parser::Compound_stmtContext>(0);
}


size_t Python2Parser::Single_inputContext::getRuleIndex() const {
  return Python2Parser::RuleSingle_input;
}

void Python2Parser::Single_inputContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSingle_input(this);
}

void Python2Parser::Single_inputContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSingle_input(this);
}

Python2Parser::Single_inputContext* Python2Parser::single_input() {
  Single_inputContext *_localctx = _tracker.createInstance<Single_inputContext>(_ctx, getState());
  enterRule(_localctx, 0, Python2Parser::RuleSingle_input);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(175);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 0, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(170);
      match(Python2Parser::NEWLINE);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(171);
      simple_stmt();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(172);
      compound_stmt();
      setState(173);
      match(Python2Parser::NEWLINE);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- File_inputContext ------------------------------------------------------------------

Python2Parser::File_inputContext::File_inputContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Python2Parser::File_inputContext::ENDMARKER() {
  return getToken(Python2Parser::ENDMARKER, 0);
}

std::vector<tree::TerminalNode *> Python2Parser::File_inputContext::NEWLINE() {
  return getTokens(Python2Parser::NEWLINE);
}

tree::TerminalNode* Python2Parser::File_inputContext::NEWLINE(size_t i) {
  return getToken(Python2Parser::NEWLINE, i);
}

std::vector<Python2Parser::StmtContext *> Python2Parser::File_inputContext::stmt() {
  return getRuleContexts<Python2Parser::StmtContext>();
}

Python2Parser::StmtContext* Python2Parser::File_inputContext::stmt(size_t i) {
  return getRuleContext<Python2Parser::StmtContext>(i);
}


size_t Python2Parser::File_inputContext::getRuleIndex() const {
  return Python2Parser::RuleFile_input;
}

void Python2Parser::File_inputContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFile_input(this);
}

void Python2Parser::File_inputContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFile_input(this);
}

Python2Parser::File_inputContext* Python2Parser::file_input() {
  File_inputContext *_localctx = _tracker.createInstance<File_inputContext>(_ctx, getState());
  enterRule(_localctx, 2, Python2Parser::RuleFile_input);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(181);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(179);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 1, _ctx)) {
        case 1: {
          setState(177);
          match(Python2Parser::NEWLINE);
          break;
        }

        case 2: {
          setState(178);
          stmt();
          break;
        }

        default:
          break;
        } 
      }
      setState(183);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx);
    }
    setState(184);
    match(Python2Parser::ENDMARKER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Eval_inputContext ------------------------------------------------------------------

Python2Parser::Eval_inputContext::Eval_inputContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Python2Parser::TestlistContext* Python2Parser::Eval_inputContext::testlist() {
  return getRuleContext<Python2Parser::TestlistContext>(0);
}

tree::TerminalNode* Python2Parser::Eval_inputContext::ENDMARKER() {
  return getToken(Python2Parser::ENDMARKER, 0);
}

std::vector<tree::TerminalNode *> Python2Parser::Eval_inputContext::NEWLINE() {
  return getTokens(Python2Parser::NEWLINE);
}

tree::TerminalNode* Python2Parser::Eval_inputContext::NEWLINE(size_t i) {
  return getToken(Python2Parser::NEWLINE, i);
}


size_t Python2Parser::Eval_inputContext::getRuleIndex() const {
  return Python2Parser::RuleEval_input;
}

void Python2Parser::Eval_inputContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEval_input(this);
}

void Python2Parser::Eval_inputContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEval_input(this);
}

Python2Parser::Eval_inputContext* Python2Parser::eval_input() {
  Eval_inputContext *_localctx = _tracker.createInstance<Eval_inputContext>(_ctx, getState());
  enterRule(_localctx, 4, Python2Parser::RuleEval_input);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(186);
    testlist();
    setState(190);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Python2Parser::NEWLINE) {
      setState(187);
      match(Python2Parser::NEWLINE);
      setState(192);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(193);
    match(Python2Parser::ENDMARKER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DecoratorContext ------------------------------------------------------------------

Python2Parser::DecoratorContext::DecoratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Python2Parser::Dotted_nameContext* Python2Parser::DecoratorContext::dotted_name() {
  return getRuleContext<Python2Parser::Dotted_nameContext>(0);
}

tree::TerminalNode* Python2Parser::DecoratorContext::NEWLINE() {
  return getToken(Python2Parser::NEWLINE, 0);
}

tree::TerminalNode* Python2Parser::DecoratorContext::OPEN_PAREN() {
  return getToken(Python2Parser::OPEN_PAREN, 0);
}

tree::TerminalNode* Python2Parser::DecoratorContext::CLOSE_PAREN() {
  return getToken(Python2Parser::CLOSE_PAREN, 0);
}

Python2Parser::ArglistContext* Python2Parser::DecoratorContext::arglist() {
  return getRuleContext<Python2Parser::ArglistContext>(0);
}


size_t Python2Parser::DecoratorContext::getRuleIndex() const {
  return Python2Parser::RuleDecorator;
}

void Python2Parser::DecoratorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDecorator(this);
}

void Python2Parser::DecoratorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDecorator(this);
}

Python2Parser::DecoratorContext* Python2Parser::decorator() {
  DecoratorContext *_localctx = _tracker.createInstance<DecoratorContext>(_ctx, getState());
  enterRule(_localctx, 6, Python2Parser::RuleDecorator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(195);
    match(Python2Parser::T__0);
    setState(196);
    dotted_name();
    setState(202);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Python2Parser::OPEN_PAREN) {
      setState(197);
      match(Python2Parser::OPEN_PAREN);
      setState(199);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 6917845688063623360) != 0 || (((_la - 66) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 66)) & 21619) != 0) {
        setState(198);
        arglist();
      }
      setState(201);
      match(Python2Parser::CLOSE_PAREN);
    }
    setState(204);
    match(Python2Parser::NEWLINE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DecoratorsContext ------------------------------------------------------------------

Python2Parser::DecoratorsContext::DecoratorsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Python2Parser::DecoratorContext *> Python2Parser::DecoratorsContext::decorator() {
  return getRuleContexts<Python2Parser::DecoratorContext>();
}

Python2Parser::DecoratorContext* Python2Parser::DecoratorsContext::decorator(size_t i) {
  return getRuleContext<Python2Parser::DecoratorContext>(i);
}


size_t Python2Parser::DecoratorsContext::getRuleIndex() const {
  return Python2Parser::RuleDecorators;
}

void Python2Parser::DecoratorsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDecorators(this);
}

void Python2Parser::DecoratorsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDecorators(this);
}

Python2Parser::DecoratorsContext* Python2Parser::decorators() {
  DecoratorsContext *_localctx = _tracker.createInstance<DecoratorsContext>(_ctx, getState());
  enterRule(_localctx, 8, Python2Parser::RuleDecorators);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(207); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(206);
      decorator();
      setState(209); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == Python2Parser::T__0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DecoratedContext ------------------------------------------------------------------

Python2Parser::DecoratedContext::DecoratedContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Python2Parser::DecoratorsContext* Python2Parser::DecoratedContext::decorators() {
  return getRuleContext<Python2Parser::DecoratorsContext>(0);
}

Python2Parser::ClassdefContext* Python2Parser::DecoratedContext::classdef() {
  return getRuleContext<Python2Parser::ClassdefContext>(0);
}

Python2Parser::FuncdefContext* Python2Parser::DecoratedContext::funcdef() {
  return getRuleContext<Python2Parser::FuncdefContext>(0);
}


size_t Python2Parser::DecoratedContext::getRuleIndex() const {
  return Python2Parser::RuleDecorated;
}

void Python2Parser::DecoratedContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDecorated(this);
}

void Python2Parser::DecoratedContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDecorated(this);
}

Python2Parser::DecoratedContext* Python2Parser::decorated() {
  DecoratedContext *_localctx = _tracker.createInstance<DecoratedContext>(_ctx, getState());
  enterRule(_localctx, 10, Python2Parser::RuleDecorated);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(211);
    decorators();
    setState(214);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Python2Parser::T__67: {
        setState(212);
        classdef();
        break;
      }

      case Python2Parser::T__1: {
        setState(213);
        funcdef();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FuncdefContext ------------------------------------------------------------------

Python2Parser::FuncdefContext::FuncdefContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Python2Parser::FuncdefContext::NAME() {
  return getToken(Python2Parser::NAME, 0);
}

Python2Parser::ParametersContext* Python2Parser::FuncdefContext::parameters() {
  return getRuleContext<Python2Parser::ParametersContext>(0);
}

Python2Parser::SuiteContext* Python2Parser::FuncdefContext::suite() {
  return getRuleContext<Python2Parser::SuiteContext>(0);
}


size_t Python2Parser::FuncdefContext::getRuleIndex() const {
  return Python2Parser::RuleFuncdef;
}

void Python2Parser::FuncdefContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFuncdef(this);
}

void Python2Parser::FuncdefContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFuncdef(this);
}

Python2Parser::FuncdefContext* Python2Parser::funcdef() {
  FuncdefContext *_localctx = _tracker.createInstance<FuncdefContext>(_ctx, getState());
  enterRule(_localctx, 12, Python2Parser::RuleFuncdef);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(216);
    match(Python2Parser::T__1);
    setState(217);
    match(Python2Parser::NAME);
    setState(218);
    parameters();
    setState(219);
    match(Python2Parser::T__2);
    setState(220);
    suite();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParametersContext ------------------------------------------------------------------

Python2Parser::ParametersContext::ParametersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Python2Parser::ParametersContext::OPEN_PAREN() {
  return getToken(Python2Parser::OPEN_PAREN, 0);
}

tree::TerminalNode* Python2Parser::ParametersContext::CLOSE_PAREN() {
  return getToken(Python2Parser::CLOSE_PAREN, 0);
}

Python2Parser::VarargslistContext* Python2Parser::ParametersContext::varargslist() {
  return getRuleContext<Python2Parser::VarargslistContext>(0);
}


size_t Python2Parser::ParametersContext::getRuleIndex() const {
  return Python2Parser::RuleParameters;
}

void Python2Parser::ParametersContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParameters(this);
}

void Python2Parser::ParametersContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParameters(this);
}

Python2Parser::ParametersContext* Python2Parser::parameters() {
  ParametersContext *_localctx = _tracker.createInstance<ParametersContext>(_ctx, getState());
  enterRule(_localctx, 14, Python2Parser::RuleParameters);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(222);
    match(Python2Parser::OPEN_PAREN);
    setState(224);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Python2Parser::T__5

    || _la == Python2Parser::T__6 || _la == Python2Parser::NAME

    || _la == Python2Parser::OPEN_PAREN) {
      setState(223);
      varargslist();
    }
    setState(226);
    match(Python2Parser::CLOSE_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VarargslistContext ------------------------------------------------------------------

Python2Parser::VarargslistContext::VarargslistContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Python2Parser::FpdefContext *> Python2Parser::VarargslistContext::fpdef() {
  return getRuleContexts<Python2Parser::FpdefContext>();
}

Python2Parser::FpdefContext* Python2Parser::VarargslistContext::fpdef(size_t i) {
  return getRuleContext<Python2Parser::FpdefContext>(i);
}

std::vector<tree::TerminalNode *> Python2Parser::VarargslistContext::NAME() {
  return getTokens(Python2Parser::NAME);
}

tree::TerminalNode* Python2Parser::VarargslistContext::NAME(size_t i) {
  return getToken(Python2Parser::NAME, i);
}

std::vector<Python2Parser::TestContext *> Python2Parser::VarargslistContext::test() {
  return getRuleContexts<Python2Parser::TestContext>();
}

Python2Parser::TestContext* Python2Parser::VarargslistContext::test(size_t i) {
  return getRuleContext<Python2Parser::TestContext>(i);
}


size_t Python2Parser::VarargslistContext::getRuleIndex() const {
  return Python2Parser::RuleVarargslist;
}

void Python2Parser::VarargslistContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVarargslist(this);
}

void Python2Parser::VarargslistContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVarargslist(this);
}

Python2Parser::VarargslistContext* Python2Parser::varargslist() {
  VarargslistContext *_localctx = _tracker.createInstance<VarargslistContext>(_ctx, getState());
  enterRule(_localctx, 16, Python2Parser::RuleVarargslist);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(270);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 17, _ctx)) {
    case 1: {
      setState(237);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == Python2Parser::NAME

      || _la == Python2Parser::OPEN_PAREN) {
        setState(228);
        fpdef();
        setState(231);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Python2Parser::T__3) {
          setState(229);
          match(Python2Parser::T__3);
          setState(230);
          test();
        }
        setState(233);
        match(Python2Parser::T__4);
        setState(239);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(249);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case Python2Parser::T__5: {
          setState(240);
          match(Python2Parser::T__5);
          setState(241);
          match(Python2Parser::NAME);
          setState(245);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == Python2Parser::T__4) {
            setState(242);
            match(Python2Parser::T__4);
            setState(243);
            match(Python2Parser::T__6);
            setState(244);
            match(Python2Parser::NAME);
          }
          break;
        }

        case Python2Parser::T__6: {
          setState(247);
          match(Python2Parser::T__6);
          setState(248);
          match(Python2Parser::NAME);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 2: {
      setState(251);
      fpdef();
      setState(254);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Python2Parser::T__3) {
        setState(252);
        match(Python2Parser::T__3);
        setState(253);
        test();
      }
      setState(264);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 15, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(256);
          match(Python2Parser::T__4);
          setState(257);
          fpdef();
          setState(260);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == Python2Parser::T__3) {
            setState(258);
            match(Python2Parser::T__3);
            setState(259);
            test();
          } 
        }
        setState(266);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 15, _ctx);
      }
      setState(268);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Python2Parser::T__4) {
        setState(267);
        match(Python2Parser::T__4);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FpdefContext ------------------------------------------------------------------

Python2Parser::FpdefContext::FpdefContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Python2Parser::FpdefContext::NAME() {
  return getToken(Python2Parser::NAME, 0);
}

tree::TerminalNode* Python2Parser::FpdefContext::OPEN_PAREN() {
  return getToken(Python2Parser::OPEN_PAREN, 0);
}

Python2Parser::FplistContext* Python2Parser::FpdefContext::fplist() {
  return getRuleContext<Python2Parser::FplistContext>(0);
}

tree::TerminalNode* Python2Parser::FpdefContext::CLOSE_PAREN() {
  return getToken(Python2Parser::CLOSE_PAREN, 0);
}


size_t Python2Parser::FpdefContext::getRuleIndex() const {
  return Python2Parser::RuleFpdef;
}

void Python2Parser::FpdefContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFpdef(this);
}

void Python2Parser::FpdefContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFpdef(this);
}

Python2Parser::FpdefContext* Python2Parser::fpdef() {
  FpdefContext *_localctx = _tracker.createInstance<FpdefContext>(_ctx, getState());
  enterRule(_localctx, 18, Python2Parser::RuleFpdef);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(277);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Python2Parser::NAME: {
        enterOuterAlt(_localctx, 1);
        setState(272);
        match(Python2Parser::NAME);
        break;
      }

      case Python2Parser::OPEN_PAREN: {
        enterOuterAlt(_localctx, 2);
        setState(273);
        match(Python2Parser::OPEN_PAREN);
        setState(274);
        fplist();
        setState(275);
        match(Python2Parser::CLOSE_PAREN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FplistContext ------------------------------------------------------------------

Python2Parser::FplistContext::FplistContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Python2Parser::FpdefContext *> Python2Parser::FplistContext::fpdef() {
  return getRuleContexts<Python2Parser::FpdefContext>();
}

Python2Parser::FpdefContext* Python2Parser::FplistContext::fpdef(size_t i) {
  return getRuleContext<Python2Parser::FpdefContext>(i);
}


size_t Python2Parser::FplistContext::getRuleIndex() const {
  return Python2Parser::RuleFplist;
}

void Python2Parser::FplistContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFplist(this);
}

void Python2Parser::FplistContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFplist(this);
}

Python2Parser::FplistContext* Python2Parser::fplist() {
  FplistContext *_localctx = _tracker.createInstance<FplistContext>(_ctx, getState());
  enterRule(_localctx, 20, Python2Parser::RuleFplist);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(279);
    fpdef();
    setState(284);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 19, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(280);
        match(Python2Parser::T__4);
        setState(281);
        fpdef(); 
      }
      setState(286);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 19, _ctx);
    }
    setState(288);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Python2Parser::T__4) {
      setState(287);
      match(Python2Parser::T__4);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StmtContext ------------------------------------------------------------------

Python2Parser::StmtContext::StmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Python2Parser::Simple_stmtContext* Python2Parser::StmtContext::simple_stmt() {
  return getRuleContext<Python2Parser::Simple_stmtContext>(0);
}

Python2Parser::Compound_stmtContext* Python2Parser::StmtContext::compound_stmt() {
  return getRuleContext<Python2Parser::Compound_stmtContext>(0);
}


size_t Python2Parser::StmtContext::getRuleIndex() const {
  return Python2Parser::RuleStmt;
}

void Python2Parser::StmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStmt(this);
}

void Python2Parser::StmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStmt(this);
}

Python2Parser::StmtContext* Python2Parser::stmt() {
  StmtContext *_localctx = _tracker.createInstance<StmtContext>(_ctx, getState());
  enterRule(_localctx, 22, Python2Parser::RuleStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(292);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 21, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(290);
      simple_stmt();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(291);
      compound_stmt();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Simple_stmtContext ------------------------------------------------------------------

Python2Parser::Simple_stmtContext::Simple_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Python2Parser::Small_stmtContext *> Python2Parser::Simple_stmtContext::small_stmt() {
  return getRuleContexts<Python2Parser::Small_stmtContext>();
}

Python2Parser::Small_stmtContext* Python2Parser::Simple_stmtContext::small_stmt(size_t i) {
  return getRuleContext<Python2Parser::Small_stmtContext>(i);
}

tree::TerminalNode* Python2Parser::Simple_stmtContext::NEWLINE() {
  return getToken(Python2Parser::NEWLINE, 0);
}


size_t Python2Parser::Simple_stmtContext::getRuleIndex() const {
  return Python2Parser::RuleSimple_stmt;
}

void Python2Parser::Simple_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimple_stmt(this);
}

void Python2Parser::Simple_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimple_stmt(this);
}

Python2Parser::Simple_stmtContext* Python2Parser::simple_stmt() {
  Simple_stmtContext *_localctx = _tracker.createInstance<Simple_stmtContext>(_ctx, getState());
  enterRule(_localctx, 24, Python2Parser::RuleSimple_stmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(294);
    small_stmt();
    setState(299);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 22, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(295);
        match(Python2Parser::T__7);
        setState(296);
        small_stmt(); 
      }
      setState(301);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 22, _ctx);
    }
    setState(303);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Python2Parser::T__7) {
      setState(302);
      match(Python2Parser::T__7);
    }
    setState(305);
    match(Python2Parser::NEWLINE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Small_stmtContext ------------------------------------------------------------------

Python2Parser::Small_stmtContext::Small_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Python2Parser::Expr_stmtContext* Python2Parser::Small_stmtContext::expr_stmt() {
  return getRuleContext<Python2Parser::Expr_stmtContext>(0);
}

Python2Parser::Print_stmtContext* Python2Parser::Small_stmtContext::print_stmt() {
  return getRuleContext<Python2Parser::Print_stmtContext>(0);
}

Python2Parser::Del_stmtContext* Python2Parser::Small_stmtContext::del_stmt() {
  return getRuleContext<Python2Parser::Del_stmtContext>(0);
}

Python2Parser::Pass_stmtContext* Python2Parser::Small_stmtContext::pass_stmt() {
  return getRuleContext<Python2Parser::Pass_stmtContext>(0);
}

Python2Parser::Flow_stmtContext* Python2Parser::Small_stmtContext::flow_stmt() {
  return getRuleContext<Python2Parser::Flow_stmtContext>(0);
}

Python2Parser::Import_stmtContext* Python2Parser::Small_stmtContext::import_stmt() {
  return getRuleContext<Python2Parser::Import_stmtContext>(0);
}

Python2Parser::Global_stmtContext* Python2Parser::Small_stmtContext::global_stmt() {
  return getRuleContext<Python2Parser::Global_stmtContext>(0);
}

Python2Parser::Exec_stmtContext* Python2Parser::Small_stmtContext::exec_stmt() {
  return getRuleContext<Python2Parser::Exec_stmtContext>(0);
}

Python2Parser::Assert_stmtContext* Python2Parser::Small_stmtContext::assert_stmt() {
  return getRuleContext<Python2Parser::Assert_stmtContext>(0);
}


size_t Python2Parser::Small_stmtContext::getRuleIndex() const {
  return Python2Parser::RuleSmall_stmt;
}

void Python2Parser::Small_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSmall_stmt(this);
}

void Python2Parser::Small_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSmall_stmt(this);
}

Python2Parser::Small_stmtContext* Python2Parser::small_stmt() {
  Small_stmtContext *_localctx = _tracker.createInstance<Small_stmtContext>(_ctx, getState());
  enterRule(_localctx, 26, Python2Parser::RuleSmall_stmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(316);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 24, _ctx)) {
    case 1: {
      setState(307);
      expr_stmt();
      break;
    }

    case 2: {
      setState(308);
      print_stmt();
      break;
    }

    case 3: {
      setState(309);
      del_stmt();
      break;
    }

    case 4: {
      setState(310);
      pass_stmt();
      break;
    }

    case 5: {
      setState(311);
      flow_stmt();
      break;
    }

    case 6: {
      setState(312);
      import_stmt();
      break;
    }

    case 7: {
      setState(313);
      global_stmt();
      break;
    }

    case 8: {
      setState(314);
      exec_stmt();
      break;
    }

    case 9: {
      setState(315);
      assert_stmt();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr_stmtContext ------------------------------------------------------------------

Python2Parser::Expr_stmtContext::Expr_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Python2Parser::TestlistContext *> Python2Parser::Expr_stmtContext::testlist() {
  return getRuleContexts<Python2Parser::TestlistContext>();
}

Python2Parser::TestlistContext* Python2Parser::Expr_stmtContext::testlist(size_t i) {
  return getRuleContext<Python2Parser::TestlistContext>(i);
}

Python2Parser::AugassignContext* Python2Parser::Expr_stmtContext::augassign() {
  return getRuleContext<Python2Parser::AugassignContext>(0);
}

std::vector<Python2Parser::Yield_exprContext *> Python2Parser::Expr_stmtContext::yield_expr() {
  return getRuleContexts<Python2Parser::Yield_exprContext>();
}

Python2Parser::Yield_exprContext* Python2Parser::Expr_stmtContext::yield_expr(size_t i) {
  return getRuleContext<Python2Parser::Yield_exprContext>(i);
}


size_t Python2Parser::Expr_stmtContext::getRuleIndex() const {
  return Python2Parser::RuleExpr_stmt;
}

void Python2Parser::Expr_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_stmt(this);
}

void Python2Parser::Expr_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_stmt(this);
}

Python2Parser::Expr_stmtContext* Python2Parser::expr_stmt() {
  Expr_stmtContext *_localctx = _tracker.createInstance<Expr_stmtContext>(_ctx, getState());
  enterRule(_localctx, 28, Python2Parser::RuleExpr_stmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(318);
    testlist();
    setState(334);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Python2Parser::T__8:
      case Python2Parser::T__9:
      case Python2Parser::T__10:
      case Python2Parser::T__11:
      case Python2Parser::T__12:
      case Python2Parser::T__13:
      case Python2Parser::T__14:
      case Python2Parser::T__15:
      case Python2Parser::T__16:
      case Python2Parser::T__17:
      case Python2Parser::T__18:
      case Python2Parser::T__19: {
        setState(319);
        augassign();
        setState(322);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case Python2Parser::T__68: {
            setState(320);
            yield_expr();
            break;
          }

          case Python2Parser::T__29:
          case Python2Parser::T__44:
          case Python2Parser::T__47:
          case Python2Parser::T__60:
          case Python2Parser::T__61:
          case Python2Parser::T__65:
          case Python2Parser::T__66:
          case Python2Parser::NAME:
          case Python2Parser::NUMBER:
          case Python2Parser::STRING:
          case Python2Parser::OPEN_PAREN:
          case Python2Parser::OPEN_BRACE:
          case Python2Parser::OPEN_BRACKET: {
            setState(321);
            testlist();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        break;
      }

      case Python2Parser::T__3:
      case Python2Parser::T__7:
      case Python2Parser::NEWLINE: {
        setState(331);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == Python2Parser::T__3) {
          setState(324);
          match(Python2Parser::T__3);
          setState(327);
          _errHandler->sync(this);
          switch (_input->LA(1)) {
            case Python2Parser::T__68: {
              setState(325);
              yield_expr();
              break;
            }

            case Python2Parser::T__29:
            case Python2Parser::T__44:
            case Python2Parser::T__47:
            case Python2Parser::T__60:
            case Python2Parser::T__61:
            case Python2Parser::T__65:
            case Python2Parser::T__66:
            case Python2Parser::NAME:
            case Python2Parser::NUMBER:
            case Python2Parser::STRING:
            case Python2Parser::OPEN_PAREN:
            case Python2Parser::OPEN_BRACE:
            case Python2Parser::OPEN_BRACKET: {
              setState(326);
              testlist();
              break;
            }

          default:
            throw NoViableAltException(this);
          }
          setState(333);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AugassignContext ------------------------------------------------------------------

Python2Parser::AugassignContext::AugassignContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Python2Parser::AugassignContext::getRuleIndex() const {
  return Python2Parser::RuleAugassign;
}

void Python2Parser::AugassignContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAugassign(this);
}

void Python2Parser::AugassignContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAugassign(this);
}

Python2Parser::AugassignContext* Python2Parser::augassign() {
  AugassignContext *_localctx = _tracker.createInstance<AugassignContext>(_ctx, getState());
  enterRule(_localctx, 30, Python2Parser::RuleAugassign);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(336);
    _la = _input->LA(1);
    if (!(((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2096640) != 0)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Print_stmtContext ------------------------------------------------------------------

Python2Parser::Print_stmtContext::Print_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Python2Parser::Print_stmtContext::NAME() {
  return getToken(Python2Parser::NAME, 0);
}

std::vector<Python2Parser::TestContext *> Python2Parser::Print_stmtContext::test() {
  return getRuleContexts<Python2Parser::TestContext>();
}

Python2Parser::TestContext* Python2Parser::Print_stmtContext::test(size_t i) {
  return getRuleContext<Python2Parser::TestContext>(i);
}


size_t Python2Parser::Print_stmtContext::getRuleIndex() const {
  return Python2Parser::RulePrint_stmt;
}

void Python2Parser::Print_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrint_stmt(this);
}

void Python2Parser::Print_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrint_stmt(this);
}

Python2Parser::Print_stmtContext* Python2Parser::print_stmt() {
  Print_stmtContext *_localctx = _tracker.createInstance<Print_stmtContext>(_ctx, getState());
  enterRule(_localctx, 32, Python2Parser::RulePrint_stmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(338);

    if (!(self._input.LT(1).text=='print')) throw FailedPredicateException(this, "self._input.LT(1).text=='print'");
    setState(339);
    match(Python2Parser::NAME);
    setState(366);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Python2Parser::T__7:
      case Python2Parser::T__29:
      case Python2Parser::T__44:
      case Python2Parser::T__47:
      case Python2Parser::T__60:
      case Python2Parser::T__61:
      case Python2Parser::T__65:
      case Python2Parser::T__66:
      case Python2Parser::NAME:
      case Python2Parser::NUMBER:
      case Python2Parser::STRING:
      case Python2Parser::OPEN_PAREN:
      case Python2Parser::OPEN_BRACE:
      case Python2Parser::OPEN_BRACKET:
      case Python2Parser::NEWLINE: {
        setState(351);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la - 30) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 30)) & 1485652810301441) != 0) {
          setState(340);
          test();
          setState(345);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 29, _ctx);
          while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
            if (alt == 1) {
              setState(341);
              match(Python2Parser::T__4);
              setState(342);
              test(); 
            }
            setState(347);
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 29, _ctx);
          }
          setState(349);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == Python2Parser::T__4) {
            setState(348);
            match(Python2Parser::T__4);
          }
        }
        break;
      }

      case Python2Parser::T__20: {
        setState(353);
        match(Python2Parser::T__20);
        setState(354);
        test();
        setState(364);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Python2Parser::T__4) {
          setState(357); 
          _errHandler->sync(this);
          alt = 1;
          do {
            switch (alt) {
              case 1: {
                    setState(355);
                    match(Python2Parser::T__4);
                    setState(356);
                    test();
                    break;
                  }

            default:
              throw NoViableAltException(this);
            }
            setState(359); 
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 32, _ctx);
          } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
          setState(362);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == Python2Parser::T__4) {
            setState(361);
            match(Python2Parser::T__4);
          }
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Del_stmtContext ------------------------------------------------------------------

Python2Parser::Del_stmtContext::Del_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Python2Parser::ExprlistContext* Python2Parser::Del_stmtContext::exprlist() {
  return getRuleContext<Python2Parser::ExprlistContext>(0);
}


size_t Python2Parser::Del_stmtContext::getRuleIndex() const {
  return Python2Parser::RuleDel_stmt;
}

void Python2Parser::Del_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDel_stmt(this);
}

void Python2Parser::Del_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDel_stmt(this);
}

Python2Parser::Del_stmtContext* Python2Parser::del_stmt() {
  Del_stmtContext *_localctx = _tracker.createInstance<Del_stmtContext>(_ctx, getState());
  enterRule(_localctx, 34, Python2Parser::RuleDel_stmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(368);
    match(Python2Parser::T__21);
    setState(369);
    exprlist();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Pass_stmtContext ------------------------------------------------------------------

Python2Parser::Pass_stmtContext::Pass_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Python2Parser::Pass_stmtContext::getRuleIndex() const {
  return Python2Parser::RulePass_stmt;
}

void Python2Parser::Pass_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPass_stmt(this);
}

void Python2Parser::Pass_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPass_stmt(this);
}

Python2Parser::Pass_stmtContext* Python2Parser::pass_stmt() {
  Pass_stmtContext *_localctx = _tracker.createInstance<Pass_stmtContext>(_ctx, getState());
  enterRule(_localctx, 36, Python2Parser::RulePass_stmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(371);
    match(Python2Parser::T__22);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Flow_stmtContext ------------------------------------------------------------------

Python2Parser::Flow_stmtContext::Flow_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Python2Parser::Break_stmtContext* Python2Parser::Flow_stmtContext::break_stmt() {
  return getRuleContext<Python2Parser::Break_stmtContext>(0);
}

Python2Parser::Continue_stmtContext* Python2Parser::Flow_stmtContext::continue_stmt() {
  return getRuleContext<Python2Parser::Continue_stmtContext>(0);
}

Python2Parser::Return_stmtContext* Python2Parser::Flow_stmtContext::return_stmt() {
  return getRuleContext<Python2Parser::Return_stmtContext>(0);
}

Python2Parser::Raise_stmtContext* Python2Parser::Flow_stmtContext::raise_stmt() {
  return getRuleContext<Python2Parser::Raise_stmtContext>(0);
}

Python2Parser::Yield_stmtContext* Python2Parser::Flow_stmtContext::yield_stmt() {
  return getRuleContext<Python2Parser::Yield_stmtContext>(0);
}


size_t Python2Parser::Flow_stmtContext::getRuleIndex() const {
  return Python2Parser::RuleFlow_stmt;
}

void Python2Parser::Flow_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFlow_stmt(this);
}

void Python2Parser::Flow_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFlow_stmt(this);
}

Python2Parser::Flow_stmtContext* Python2Parser::flow_stmt() {
  Flow_stmtContext *_localctx = _tracker.createInstance<Flow_stmtContext>(_ctx, getState());
  enterRule(_localctx, 38, Python2Parser::RuleFlow_stmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(378);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Python2Parser::T__23: {
        enterOuterAlt(_localctx, 1);
        setState(373);
        break_stmt();
        break;
      }

      case Python2Parser::T__24: {
        enterOuterAlt(_localctx, 2);
        setState(374);
        continue_stmt();
        break;
      }

      case Python2Parser::T__25: {
        enterOuterAlt(_localctx, 3);
        setState(375);
        return_stmt();
        break;
      }

      case Python2Parser::T__26: {
        enterOuterAlt(_localctx, 4);
        setState(376);
        raise_stmt();
        break;
      }

      case Python2Parser::T__68: {
        enterOuterAlt(_localctx, 5);
        setState(377);
        yield_stmt();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Break_stmtContext ------------------------------------------------------------------

Python2Parser::Break_stmtContext::Break_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Python2Parser::Break_stmtContext::getRuleIndex() const {
  return Python2Parser::RuleBreak_stmt;
}

void Python2Parser::Break_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBreak_stmt(this);
}

void Python2Parser::Break_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBreak_stmt(this);
}

Python2Parser::Break_stmtContext* Python2Parser::break_stmt() {
  Break_stmtContext *_localctx = _tracker.createInstance<Break_stmtContext>(_ctx, getState());
  enterRule(_localctx, 40, Python2Parser::RuleBreak_stmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(380);
    match(Python2Parser::T__23);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Continue_stmtContext ------------------------------------------------------------------

Python2Parser::Continue_stmtContext::Continue_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Python2Parser::Continue_stmtContext::getRuleIndex() const {
  return Python2Parser::RuleContinue_stmt;
}

void Python2Parser::Continue_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterContinue_stmt(this);
}

void Python2Parser::Continue_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitContinue_stmt(this);
}

Python2Parser::Continue_stmtContext* Python2Parser::continue_stmt() {
  Continue_stmtContext *_localctx = _tracker.createInstance<Continue_stmtContext>(_ctx, getState());
  enterRule(_localctx, 42, Python2Parser::RuleContinue_stmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(382);
    match(Python2Parser::T__24);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Return_stmtContext ------------------------------------------------------------------

Python2Parser::Return_stmtContext::Return_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Python2Parser::TestlistContext* Python2Parser::Return_stmtContext::testlist() {
  return getRuleContext<Python2Parser::TestlistContext>(0);
}


size_t Python2Parser::Return_stmtContext::getRuleIndex() const {
  return Python2Parser::RuleReturn_stmt;
}

void Python2Parser::Return_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReturn_stmt(this);
}

void Python2Parser::Return_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReturn_stmt(this);
}

Python2Parser::Return_stmtContext* Python2Parser::return_stmt() {
  Return_stmtContext *_localctx = _tracker.createInstance<Return_stmtContext>(_ctx, getState());
  enterRule(_localctx, 44, Python2Parser::RuleReturn_stmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(384);
    match(Python2Parser::T__25);
    setState(386);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la - 30) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 30)) & 1485652810301441) != 0) {
      setState(385);
      testlist();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Yield_stmtContext ------------------------------------------------------------------

Python2Parser::Yield_stmtContext::Yield_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Python2Parser::Yield_exprContext* Python2Parser::Yield_stmtContext::yield_expr() {
  return getRuleContext<Python2Parser::Yield_exprContext>(0);
}


size_t Python2Parser::Yield_stmtContext::getRuleIndex() const {
  return Python2Parser::RuleYield_stmt;
}

void Python2Parser::Yield_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterYield_stmt(this);
}

void Python2Parser::Yield_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitYield_stmt(this);
}

Python2Parser::Yield_stmtContext* Python2Parser::yield_stmt() {
  Yield_stmtContext *_localctx = _tracker.createInstance<Yield_stmtContext>(_ctx, getState());
  enterRule(_localctx, 46, Python2Parser::RuleYield_stmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(388);
    yield_expr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Raise_stmtContext ------------------------------------------------------------------

Python2Parser::Raise_stmtContext::Raise_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Python2Parser::TestContext *> Python2Parser::Raise_stmtContext::test() {
  return getRuleContexts<Python2Parser::TestContext>();
}

Python2Parser::TestContext* Python2Parser::Raise_stmtContext::test(size_t i) {
  return getRuleContext<Python2Parser::TestContext>(i);
}


size_t Python2Parser::Raise_stmtContext::getRuleIndex() const {
  return Python2Parser::RuleRaise_stmt;
}

void Python2Parser::Raise_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRaise_stmt(this);
}

void Python2Parser::Raise_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRaise_stmt(this);
}

Python2Parser::Raise_stmtContext* Python2Parser::raise_stmt() {
  Raise_stmtContext *_localctx = _tracker.createInstance<Raise_stmtContext>(_ctx, getState());
  enterRule(_localctx, 48, Python2Parser::RuleRaise_stmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(390);
    match(Python2Parser::T__26);
    setState(400);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la - 30) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 30)) & 1485652810301441) != 0) {
      setState(391);
      test();
      setState(398);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Python2Parser::T__4) {
        setState(392);
        match(Python2Parser::T__4);
        setState(393);
        test();
        setState(396);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Python2Parser::T__4) {
          setState(394);
          match(Python2Parser::T__4);
          setState(395);
          test();
        }
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Import_stmtContext ------------------------------------------------------------------

Python2Parser::Import_stmtContext::Import_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Python2Parser::Import_nameContext* Python2Parser::Import_stmtContext::import_name() {
  return getRuleContext<Python2Parser::Import_nameContext>(0);
}

Python2Parser::Import_fromContext* Python2Parser::Import_stmtContext::import_from() {
  return getRuleContext<Python2Parser::Import_fromContext>(0);
}


size_t Python2Parser::Import_stmtContext::getRuleIndex() const {
  return Python2Parser::RuleImport_stmt;
}

void Python2Parser::Import_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImport_stmt(this);
}

void Python2Parser::Import_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImport_stmt(this);
}

Python2Parser::Import_stmtContext* Python2Parser::import_stmt() {
  Import_stmtContext *_localctx = _tracker.createInstance<Import_stmtContext>(_ctx, getState());
  enterRule(_localctx, 50, Python2Parser::RuleImport_stmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(404);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Python2Parser::T__27: {
        enterOuterAlt(_localctx, 1);
        setState(402);
        import_name();
        break;
      }

      case Python2Parser::T__28: {
        enterOuterAlt(_localctx, 2);
        setState(403);
        import_from();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Import_nameContext ------------------------------------------------------------------

Python2Parser::Import_nameContext::Import_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Python2Parser::Dotted_as_namesContext* Python2Parser::Import_nameContext::dotted_as_names() {
  return getRuleContext<Python2Parser::Dotted_as_namesContext>(0);
}


size_t Python2Parser::Import_nameContext::getRuleIndex() const {
  return Python2Parser::RuleImport_name;
}

void Python2Parser::Import_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImport_name(this);
}

void Python2Parser::Import_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImport_name(this);
}

Python2Parser::Import_nameContext* Python2Parser::import_name() {
  Import_nameContext *_localctx = _tracker.createInstance<Import_nameContext>(_ctx, getState());
  enterRule(_localctx, 52, Python2Parser::RuleImport_name);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(406);
    match(Python2Parser::T__27);
    setState(407);
    dotted_as_names();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Import_fromContext ------------------------------------------------------------------

Python2Parser::Import_fromContext::Import_fromContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Python2Parser::Dotted_nameContext* Python2Parser::Import_fromContext::dotted_name() {
  return getRuleContext<Python2Parser::Dotted_nameContext>(0);
}

tree::TerminalNode* Python2Parser::Import_fromContext::OPEN_PAREN() {
  return getToken(Python2Parser::OPEN_PAREN, 0);
}

Python2Parser::Import_as_namesContext* Python2Parser::Import_fromContext::import_as_names() {
  return getRuleContext<Python2Parser::Import_as_namesContext>(0);
}

tree::TerminalNode* Python2Parser::Import_fromContext::CLOSE_PAREN() {
  return getToken(Python2Parser::CLOSE_PAREN, 0);
}


size_t Python2Parser::Import_fromContext::getRuleIndex() const {
  return Python2Parser::RuleImport_from;
}

void Python2Parser::Import_fromContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImport_from(this);
}

void Python2Parser::Import_fromContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImport_from(this);
}

Python2Parser::Import_fromContext* Python2Parser::import_from() {
  Import_fromContext *_localctx = _tracker.createInstance<Import_fromContext>(_ctx, getState());
  enterRule(_localctx, 54, Python2Parser::RuleImport_from);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(409);
    match(Python2Parser::T__28);
    setState(422);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 44, _ctx)) {
    case 1: {
      setState(413);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == Python2Parser::T__29) {
        setState(410);
        match(Python2Parser::T__29);
        setState(415);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(416);
      dotted_name();
      break;
    }

    case 2: {
      setState(418); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(417);
        match(Python2Parser::T__29);
        setState(420); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == Python2Parser::T__29);
      break;
    }

    default:
      break;
    }
    setState(424);
    match(Python2Parser::T__27);
    setState(431);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Python2Parser::T__5: {
        setState(425);
        match(Python2Parser::T__5);
        break;
      }

      case Python2Parser::OPEN_PAREN: {
        setState(426);
        match(Python2Parser::OPEN_PAREN);
        setState(427);
        import_as_names();
        setState(428);
        match(Python2Parser::CLOSE_PAREN);
        break;
      }

      case Python2Parser::NAME: {
        setState(430);
        import_as_names();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Import_as_nameContext ------------------------------------------------------------------

Python2Parser::Import_as_nameContext::Import_as_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> Python2Parser::Import_as_nameContext::NAME() {
  return getTokens(Python2Parser::NAME);
}

tree::TerminalNode* Python2Parser::Import_as_nameContext::NAME(size_t i) {
  return getToken(Python2Parser::NAME, i);
}


size_t Python2Parser::Import_as_nameContext::getRuleIndex() const {
  return Python2Parser::RuleImport_as_name;
}

void Python2Parser::Import_as_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImport_as_name(this);
}

void Python2Parser::Import_as_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImport_as_name(this);
}

Python2Parser::Import_as_nameContext* Python2Parser::import_as_name() {
  Import_as_nameContext *_localctx = _tracker.createInstance<Import_as_nameContext>(_ctx, getState());
  enterRule(_localctx, 56, Python2Parser::RuleImport_as_name);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(433);
    match(Python2Parser::NAME);
    setState(436);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Python2Parser::T__30) {
      setState(434);
      match(Python2Parser::T__30);
      setState(435);
      match(Python2Parser::NAME);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Dotted_as_nameContext ------------------------------------------------------------------

Python2Parser::Dotted_as_nameContext::Dotted_as_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Python2Parser::Dotted_nameContext* Python2Parser::Dotted_as_nameContext::dotted_name() {
  return getRuleContext<Python2Parser::Dotted_nameContext>(0);
}

tree::TerminalNode* Python2Parser::Dotted_as_nameContext::NAME() {
  return getToken(Python2Parser::NAME, 0);
}


size_t Python2Parser::Dotted_as_nameContext::getRuleIndex() const {
  return Python2Parser::RuleDotted_as_name;
}

void Python2Parser::Dotted_as_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDotted_as_name(this);
}

void Python2Parser::Dotted_as_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDotted_as_name(this);
}

Python2Parser::Dotted_as_nameContext* Python2Parser::dotted_as_name() {
  Dotted_as_nameContext *_localctx = _tracker.createInstance<Dotted_as_nameContext>(_ctx, getState());
  enterRule(_localctx, 58, Python2Parser::RuleDotted_as_name);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(438);
    dotted_name();
    setState(441);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Python2Parser::T__30) {
      setState(439);
      match(Python2Parser::T__30);
      setState(440);
      match(Python2Parser::NAME);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Import_as_namesContext ------------------------------------------------------------------

Python2Parser::Import_as_namesContext::Import_as_namesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Python2Parser::Import_as_nameContext *> Python2Parser::Import_as_namesContext::import_as_name() {
  return getRuleContexts<Python2Parser::Import_as_nameContext>();
}

Python2Parser::Import_as_nameContext* Python2Parser::Import_as_namesContext::import_as_name(size_t i) {
  return getRuleContext<Python2Parser::Import_as_nameContext>(i);
}


size_t Python2Parser::Import_as_namesContext::getRuleIndex() const {
  return Python2Parser::RuleImport_as_names;
}

void Python2Parser::Import_as_namesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImport_as_names(this);
}

void Python2Parser::Import_as_namesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImport_as_names(this);
}

Python2Parser::Import_as_namesContext* Python2Parser::import_as_names() {
  Import_as_namesContext *_localctx = _tracker.createInstance<Import_as_namesContext>(_ctx, getState());
  enterRule(_localctx, 60, Python2Parser::RuleImport_as_names);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(443);
    import_as_name();
    setState(448);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 48, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(444);
        match(Python2Parser::T__4);
        setState(445);
        import_as_name(); 
      }
      setState(450);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 48, _ctx);
    }
    setState(452);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Python2Parser::T__4) {
      setState(451);
      match(Python2Parser::T__4);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Dotted_as_namesContext ------------------------------------------------------------------

Python2Parser::Dotted_as_namesContext::Dotted_as_namesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Python2Parser::Dotted_as_nameContext *> Python2Parser::Dotted_as_namesContext::dotted_as_name() {
  return getRuleContexts<Python2Parser::Dotted_as_nameContext>();
}

Python2Parser::Dotted_as_nameContext* Python2Parser::Dotted_as_namesContext::dotted_as_name(size_t i) {
  return getRuleContext<Python2Parser::Dotted_as_nameContext>(i);
}


size_t Python2Parser::Dotted_as_namesContext::getRuleIndex() const {
  return Python2Parser::RuleDotted_as_names;
}

void Python2Parser::Dotted_as_namesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDotted_as_names(this);
}

void Python2Parser::Dotted_as_namesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDotted_as_names(this);
}

Python2Parser::Dotted_as_namesContext* Python2Parser::dotted_as_names() {
  Dotted_as_namesContext *_localctx = _tracker.createInstance<Dotted_as_namesContext>(_ctx, getState());
  enterRule(_localctx, 62, Python2Parser::RuleDotted_as_names);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(454);
    dotted_as_name();
    setState(459);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Python2Parser::T__4) {
      setState(455);
      match(Python2Parser::T__4);
      setState(456);
      dotted_as_name();
      setState(461);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Dotted_nameContext ------------------------------------------------------------------

Python2Parser::Dotted_nameContext::Dotted_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> Python2Parser::Dotted_nameContext::NAME() {
  return getTokens(Python2Parser::NAME);
}

tree::TerminalNode* Python2Parser::Dotted_nameContext::NAME(size_t i) {
  return getToken(Python2Parser::NAME, i);
}


size_t Python2Parser::Dotted_nameContext::getRuleIndex() const {
  return Python2Parser::RuleDotted_name;
}

void Python2Parser::Dotted_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDotted_name(this);
}

void Python2Parser::Dotted_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDotted_name(this);
}

Python2Parser::Dotted_nameContext* Python2Parser::dotted_name() {
  Dotted_nameContext *_localctx = _tracker.createInstance<Dotted_nameContext>(_ctx, getState());
  enterRule(_localctx, 64, Python2Parser::RuleDotted_name);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(462);
    match(Python2Parser::NAME);
    setState(467);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Python2Parser::T__29) {
      setState(463);
      match(Python2Parser::T__29);
      setState(464);
      match(Python2Parser::NAME);
      setState(469);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Global_stmtContext ------------------------------------------------------------------

Python2Parser::Global_stmtContext::Global_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> Python2Parser::Global_stmtContext::NAME() {
  return getTokens(Python2Parser::NAME);
}

tree::TerminalNode* Python2Parser::Global_stmtContext::NAME(size_t i) {
  return getToken(Python2Parser::NAME, i);
}


size_t Python2Parser::Global_stmtContext::getRuleIndex() const {
  return Python2Parser::RuleGlobal_stmt;
}

void Python2Parser::Global_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGlobal_stmt(this);
}

void Python2Parser::Global_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGlobal_stmt(this);
}

Python2Parser::Global_stmtContext* Python2Parser::global_stmt() {
  Global_stmtContext *_localctx = _tracker.createInstance<Global_stmtContext>(_ctx, getState());
  enterRule(_localctx, 66, Python2Parser::RuleGlobal_stmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(470);
    match(Python2Parser::T__31);
    setState(471);
    match(Python2Parser::NAME);
    setState(476);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Python2Parser::T__4) {
      setState(472);
      match(Python2Parser::T__4);
      setState(473);
      match(Python2Parser::NAME);
      setState(478);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Exec_stmtContext ------------------------------------------------------------------

Python2Parser::Exec_stmtContext::Exec_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Python2Parser::ExprContext* Python2Parser::Exec_stmtContext::expr() {
  return getRuleContext<Python2Parser::ExprContext>(0);
}

std::vector<Python2Parser::TestContext *> Python2Parser::Exec_stmtContext::test() {
  return getRuleContexts<Python2Parser::TestContext>();
}

Python2Parser::TestContext* Python2Parser::Exec_stmtContext::test(size_t i) {
  return getRuleContext<Python2Parser::TestContext>(i);
}


size_t Python2Parser::Exec_stmtContext::getRuleIndex() const {
  return Python2Parser::RuleExec_stmt;
}

void Python2Parser::Exec_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExec_stmt(this);
}

void Python2Parser::Exec_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExec_stmt(this);
}

Python2Parser::Exec_stmtContext* Python2Parser::exec_stmt() {
  Exec_stmtContext *_localctx = _tracker.createInstance<Exec_stmtContext>(_ctx, getState());
  enterRule(_localctx, 68, Python2Parser::RuleExec_stmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(479);
    match(Python2Parser::T__32);
    setState(480);
    expr();
    setState(487);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Python2Parser::T__33) {
      setState(481);
      match(Python2Parser::T__33);
      setState(482);
      test();
      setState(485);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Python2Parser::T__4) {
        setState(483);
        match(Python2Parser::T__4);
        setState(484);
        test();
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Assert_stmtContext ------------------------------------------------------------------

Python2Parser::Assert_stmtContext::Assert_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Python2Parser::TestContext *> Python2Parser::Assert_stmtContext::test() {
  return getRuleContexts<Python2Parser::TestContext>();
}

Python2Parser::TestContext* Python2Parser::Assert_stmtContext::test(size_t i) {
  return getRuleContext<Python2Parser::TestContext>(i);
}


size_t Python2Parser::Assert_stmtContext::getRuleIndex() const {
  return Python2Parser::RuleAssert_stmt;
}

void Python2Parser::Assert_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssert_stmt(this);
}

void Python2Parser::Assert_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssert_stmt(this);
}

Python2Parser::Assert_stmtContext* Python2Parser::assert_stmt() {
  Assert_stmtContext *_localctx = _tracker.createInstance<Assert_stmtContext>(_ctx, getState());
  enterRule(_localctx, 70, Python2Parser::RuleAssert_stmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(489);
    match(Python2Parser::T__34);
    setState(490);
    test();
    setState(493);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Python2Parser::T__4) {
      setState(491);
      match(Python2Parser::T__4);
      setState(492);
      test();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Compound_stmtContext ------------------------------------------------------------------

Python2Parser::Compound_stmtContext::Compound_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Python2Parser::If_stmtContext* Python2Parser::Compound_stmtContext::if_stmt() {
  return getRuleContext<Python2Parser::If_stmtContext>(0);
}

Python2Parser::While_stmtContext* Python2Parser::Compound_stmtContext::while_stmt() {
  return getRuleContext<Python2Parser::While_stmtContext>(0);
}

Python2Parser::For_stmtContext* Python2Parser::Compound_stmtContext::for_stmt() {
  return getRuleContext<Python2Parser::For_stmtContext>(0);
}

Python2Parser::Try_stmtContext* Python2Parser::Compound_stmtContext::try_stmt() {
  return getRuleContext<Python2Parser::Try_stmtContext>(0);
}

Python2Parser::With_stmtContext* Python2Parser::Compound_stmtContext::with_stmt() {
  return getRuleContext<Python2Parser::With_stmtContext>(0);
}

Python2Parser::FuncdefContext* Python2Parser::Compound_stmtContext::funcdef() {
  return getRuleContext<Python2Parser::FuncdefContext>(0);
}

Python2Parser::ClassdefContext* Python2Parser::Compound_stmtContext::classdef() {
  return getRuleContext<Python2Parser::ClassdefContext>(0);
}

Python2Parser::DecoratedContext* Python2Parser::Compound_stmtContext::decorated() {
  return getRuleContext<Python2Parser::DecoratedContext>(0);
}


size_t Python2Parser::Compound_stmtContext::getRuleIndex() const {
  return Python2Parser::RuleCompound_stmt;
}

void Python2Parser::Compound_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCompound_stmt(this);
}

void Python2Parser::Compound_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCompound_stmt(this);
}

Python2Parser::Compound_stmtContext* Python2Parser::compound_stmt() {
  Compound_stmtContext *_localctx = _tracker.createInstance<Compound_stmtContext>(_ctx, getState());
  enterRule(_localctx, 72, Python2Parser::RuleCompound_stmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(503);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Python2Parser::T__35: {
        enterOuterAlt(_localctx, 1);
        setState(495);
        if_stmt();
        break;
      }

      case Python2Parser::T__38: {
        enterOuterAlt(_localctx, 2);
        setState(496);
        while_stmt();
        break;
      }

      case Python2Parser::T__39: {
        enterOuterAlt(_localctx, 3);
        setState(497);
        for_stmt();
        break;
      }

      case Python2Parser::T__40: {
        enterOuterAlt(_localctx, 4);
        setState(498);
        try_stmt();
        break;
      }

      case Python2Parser::T__42: {
        enterOuterAlt(_localctx, 5);
        setState(499);
        with_stmt();
        break;
      }

      case Python2Parser::T__1: {
        enterOuterAlt(_localctx, 6);
        setState(500);
        funcdef();
        break;
      }

      case Python2Parser::T__67: {
        enterOuterAlt(_localctx, 7);
        setState(501);
        classdef();
        break;
      }

      case Python2Parser::T__0: {
        enterOuterAlt(_localctx, 8);
        setState(502);
        decorated();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- If_stmtContext ------------------------------------------------------------------

Python2Parser::If_stmtContext::If_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Python2Parser::TestContext *> Python2Parser::If_stmtContext::test() {
  return getRuleContexts<Python2Parser::TestContext>();
}

Python2Parser::TestContext* Python2Parser::If_stmtContext::test(size_t i) {
  return getRuleContext<Python2Parser::TestContext>(i);
}

std::vector<Python2Parser::SuiteContext *> Python2Parser::If_stmtContext::suite() {
  return getRuleContexts<Python2Parser::SuiteContext>();
}

Python2Parser::SuiteContext* Python2Parser::If_stmtContext::suite(size_t i) {
  return getRuleContext<Python2Parser::SuiteContext>(i);
}


size_t Python2Parser::If_stmtContext::getRuleIndex() const {
  return Python2Parser::RuleIf_stmt;
}

void Python2Parser::If_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIf_stmt(this);
}

void Python2Parser::If_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIf_stmt(this);
}

Python2Parser::If_stmtContext* Python2Parser::if_stmt() {
  If_stmtContext *_localctx = _tracker.createInstance<If_stmtContext>(_ctx, getState());
  enterRule(_localctx, 74, Python2Parser::RuleIf_stmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(505);
    match(Python2Parser::T__35);
    setState(506);
    test();
    setState(507);
    match(Python2Parser::T__2);
    setState(508);
    suite();
    setState(516);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 57, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(509);
        match(Python2Parser::T__36);
        setState(510);
        test();
        setState(511);
        match(Python2Parser::T__2);
        setState(512);
        suite(); 
      }
      setState(518);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 57, _ctx);
    }
    setState(522);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 58, _ctx)) {
    case 1: {
      setState(519);
      match(Python2Parser::T__37);
      setState(520);
      match(Python2Parser::T__2);
      setState(521);
      suite();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- While_stmtContext ------------------------------------------------------------------

Python2Parser::While_stmtContext::While_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Python2Parser::TestContext* Python2Parser::While_stmtContext::test() {
  return getRuleContext<Python2Parser::TestContext>(0);
}

std::vector<Python2Parser::SuiteContext *> Python2Parser::While_stmtContext::suite() {
  return getRuleContexts<Python2Parser::SuiteContext>();
}

Python2Parser::SuiteContext* Python2Parser::While_stmtContext::suite(size_t i) {
  return getRuleContext<Python2Parser::SuiteContext>(i);
}


size_t Python2Parser::While_stmtContext::getRuleIndex() const {
  return Python2Parser::RuleWhile_stmt;
}

void Python2Parser::While_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWhile_stmt(this);
}

void Python2Parser::While_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWhile_stmt(this);
}

Python2Parser::While_stmtContext* Python2Parser::while_stmt() {
  While_stmtContext *_localctx = _tracker.createInstance<While_stmtContext>(_ctx, getState());
  enterRule(_localctx, 76, Python2Parser::RuleWhile_stmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(524);
    match(Python2Parser::T__38);
    setState(525);
    test();
    setState(526);
    match(Python2Parser::T__2);
    setState(527);
    suite();
    setState(531);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 59, _ctx)) {
    case 1: {
      setState(528);
      match(Python2Parser::T__37);
      setState(529);
      match(Python2Parser::T__2);
      setState(530);
      suite();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- For_stmtContext ------------------------------------------------------------------

Python2Parser::For_stmtContext::For_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Python2Parser::ExprlistContext* Python2Parser::For_stmtContext::exprlist() {
  return getRuleContext<Python2Parser::ExprlistContext>(0);
}

Python2Parser::TestlistContext* Python2Parser::For_stmtContext::testlist() {
  return getRuleContext<Python2Parser::TestlistContext>(0);
}

std::vector<Python2Parser::SuiteContext *> Python2Parser::For_stmtContext::suite() {
  return getRuleContexts<Python2Parser::SuiteContext>();
}

Python2Parser::SuiteContext* Python2Parser::For_stmtContext::suite(size_t i) {
  return getRuleContext<Python2Parser::SuiteContext>(i);
}


size_t Python2Parser::For_stmtContext::getRuleIndex() const {
  return Python2Parser::RuleFor_stmt;
}

void Python2Parser::For_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFor_stmt(this);
}

void Python2Parser::For_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFor_stmt(this);
}

Python2Parser::For_stmtContext* Python2Parser::for_stmt() {
  For_stmtContext *_localctx = _tracker.createInstance<For_stmtContext>(_ctx, getState());
  enterRule(_localctx, 78, Python2Parser::RuleFor_stmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(533);
    match(Python2Parser::T__39);
    setState(534);
    exprlist();
    setState(535);
    match(Python2Parser::T__33);
    setState(536);
    testlist();
    setState(537);
    match(Python2Parser::T__2);
    setState(538);
    suite();
    setState(542);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 60, _ctx)) {
    case 1: {
      setState(539);
      match(Python2Parser::T__37);
      setState(540);
      match(Python2Parser::T__2);
      setState(541);
      suite();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Try_stmtContext ------------------------------------------------------------------

Python2Parser::Try_stmtContext::Try_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Python2Parser::SuiteContext *> Python2Parser::Try_stmtContext::suite() {
  return getRuleContexts<Python2Parser::SuiteContext>();
}

Python2Parser::SuiteContext* Python2Parser::Try_stmtContext::suite(size_t i) {
  return getRuleContext<Python2Parser::SuiteContext>(i);
}

std::vector<Python2Parser::Except_clauseContext *> Python2Parser::Try_stmtContext::except_clause() {
  return getRuleContexts<Python2Parser::Except_clauseContext>();
}

Python2Parser::Except_clauseContext* Python2Parser::Try_stmtContext::except_clause(size_t i) {
  return getRuleContext<Python2Parser::Except_clauseContext>(i);
}


size_t Python2Parser::Try_stmtContext::getRuleIndex() const {
  return Python2Parser::RuleTry_stmt;
}

void Python2Parser::Try_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTry_stmt(this);
}

void Python2Parser::Try_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTry_stmt(this);
}

Python2Parser::Try_stmtContext* Python2Parser::try_stmt() {
  Try_stmtContext *_localctx = _tracker.createInstance<Try_stmtContext>(_ctx, getState());
  enterRule(_localctx, 80, Python2Parser::RuleTry_stmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(544);
    match(Python2Parser::T__40);
    setState(545);
    match(Python2Parser::T__2);
    setState(546);
    suite();
    setState(568);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Python2Parser::T__43: {
        setState(551); 
        _errHandler->sync(this);
        alt = 1;
        do {
          switch (alt) {
            case 1: {
                  setState(547);
                  except_clause();
                  setState(548);
                  match(Python2Parser::T__2);
                  setState(549);
                  suite();
                  break;
                }

          default:
            throw NoViableAltException(this);
          }
          setState(553); 
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 61, _ctx);
        } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
        setState(558);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 62, _ctx)) {
        case 1: {
          setState(555);
          match(Python2Parser::T__37);
          setState(556);
          match(Python2Parser::T__2);
          setState(557);
          suite();
          break;
        }

        default:
          break;
        }
        setState(563);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 63, _ctx)) {
        case 1: {
          setState(560);
          match(Python2Parser::T__41);
          setState(561);
          match(Python2Parser::T__2);
          setState(562);
          suite();
          break;
        }

        default:
          break;
        }
        break;
      }

      case Python2Parser::T__41: {
        setState(565);
        match(Python2Parser::T__41);
        setState(566);
        match(Python2Parser::T__2);
        setState(567);
        suite();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- With_stmtContext ------------------------------------------------------------------

Python2Parser::With_stmtContext::With_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Python2Parser::With_itemContext *> Python2Parser::With_stmtContext::with_item() {
  return getRuleContexts<Python2Parser::With_itemContext>();
}

Python2Parser::With_itemContext* Python2Parser::With_stmtContext::with_item(size_t i) {
  return getRuleContext<Python2Parser::With_itemContext>(i);
}

Python2Parser::SuiteContext* Python2Parser::With_stmtContext::suite() {
  return getRuleContext<Python2Parser::SuiteContext>(0);
}


size_t Python2Parser::With_stmtContext::getRuleIndex() const {
  return Python2Parser::RuleWith_stmt;
}

void Python2Parser::With_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWith_stmt(this);
}

void Python2Parser::With_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWith_stmt(this);
}

Python2Parser::With_stmtContext* Python2Parser::with_stmt() {
  With_stmtContext *_localctx = _tracker.createInstance<With_stmtContext>(_ctx, getState());
  enterRule(_localctx, 82, Python2Parser::RuleWith_stmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(570);
    match(Python2Parser::T__42);
    setState(571);
    with_item();
    setState(576);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Python2Parser::T__4) {
      setState(572);
      match(Python2Parser::T__4);
      setState(573);
      with_item();
      setState(578);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(579);
    match(Python2Parser::T__2);
    setState(580);
    suite();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- With_itemContext ------------------------------------------------------------------

Python2Parser::With_itemContext::With_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Python2Parser::TestContext* Python2Parser::With_itemContext::test() {
  return getRuleContext<Python2Parser::TestContext>(0);
}

Python2Parser::ExprContext* Python2Parser::With_itemContext::expr() {
  return getRuleContext<Python2Parser::ExprContext>(0);
}


size_t Python2Parser::With_itemContext::getRuleIndex() const {
  return Python2Parser::RuleWith_item;
}

void Python2Parser::With_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWith_item(this);
}

void Python2Parser::With_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWith_item(this);
}

Python2Parser::With_itemContext* Python2Parser::with_item() {
  With_itemContext *_localctx = _tracker.createInstance<With_itemContext>(_ctx, getState());
  enterRule(_localctx, 84, Python2Parser::RuleWith_item);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(582);
    test();
    setState(585);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Python2Parser::T__30) {
      setState(583);
      match(Python2Parser::T__30);
      setState(584);
      expr();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Except_clauseContext ------------------------------------------------------------------

Python2Parser::Except_clauseContext::Except_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Python2Parser::TestContext *> Python2Parser::Except_clauseContext::test() {
  return getRuleContexts<Python2Parser::TestContext>();
}

Python2Parser::TestContext* Python2Parser::Except_clauseContext::test(size_t i) {
  return getRuleContext<Python2Parser::TestContext>(i);
}


size_t Python2Parser::Except_clauseContext::getRuleIndex() const {
  return Python2Parser::RuleExcept_clause;
}

void Python2Parser::Except_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExcept_clause(this);
}

void Python2Parser::Except_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExcept_clause(this);
}

Python2Parser::Except_clauseContext* Python2Parser::except_clause() {
  Except_clauseContext *_localctx = _tracker.createInstance<Except_clauseContext>(_ctx, getState());
  enterRule(_localctx, 86, Python2Parser::RuleExcept_clause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(587);
    match(Python2Parser::T__43);
    setState(593);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la - 30) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 30)) & 1485652810301441) != 0) {
      setState(588);
      test();
      setState(591);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Python2Parser::T__4

      || _la == Python2Parser::T__30) {
        setState(589);
        _la = _input->LA(1);
        if (!(_la == Python2Parser::T__4

        || _la == Python2Parser::T__30)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(590);
        test();
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SuiteContext ------------------------------------------------------------------

Python2Parser::SuiteContext::SuiteContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Python2Parser::Simple_stmtContext* Python2Parser::SuiteContext::simple_stmt() {
  return getRuleContext<Python2Parser::Simple_stmtContext>(0);
}

tree::TerminalNode* Python2Parser::SuiteContext::NEWLINE() {
  return getToken(Python2Parser::NEWLINE, 0);
}

tree::TerminalNode* Python2Parser::SuiteContext::INDENT() {
  return getToken(Python2Parser::INDENT, 0);
}

tree::TerminalNode* Python2Parser::SuiteContext::DEDENT() {
  return getToken(Python2Parser::DEDENT, 0);
}

std::vector<Python2Parser::StmtContext *> Python2Parser::SuiteContext::stmt() {
  return getRuleContexts<Python2Parser::StmtContext>();
}

Python2Parser::StmtContext* Python2Parser::SuiteContext::stmt(size_t i) {
  return getRuleContext<Python2Parser::StmtContext>(i);
}


size_t Python2Parser::SuiteContext::getRuleIndex() const {
  return Python2Parser::RuleSuite;
}

void Python2Parser::SuiteContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSuite(this);
}

void Python2Parser::SuiteContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSuite(this);
}

Python2Parser::SuiteContext* Python2Parser::suite() {
  SuiteContext *_localctx = _tracker.createInstance<SuiteContext>(_ctx, getState());
  enterRule(_localctx, 88, Python2Parser::RuleSuite);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(605);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 70, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(595);
      simple_stmt();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(596);
      match(Python2Parser::NEWLINE);
      setState(597);
      match(Python2Parser::INDENT);
      setState(599); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(598);
                stmt();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(601); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 69, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      setState(603);
      match(Python2Parser::DEDENT);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Testlist_safeContext ------------------------------------------------------------------

Python2Parser::Testlist_safeContext::Testlist_safeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Python2Parser::Old_testContext *> Python2Parser::Testlist_safeContext::old_test() {
  return getRuleContexts<Python2Parser::Old_testContext>();
}

Python2Parser::Old_testContext* Python2Parser::Testlist_safeContext::old_test(size_t i) {
  return getRuleContext<Python2Parser::Old_testContext>(i);
}


size_t Python2Parser::Testlist_safeContext::getRuleIndex() const {
  return Python2Parser::RuleTestlist_safe;
}

void Python2Parser::Testlist_safeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTestlist_safe(this);
}

void Python2Parser::Testlist_safeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTestlist_safe(this);
}

Python2Parser::Testlist_safeContext* Python2Parser::testlist_safe() {
  Testlist_safeContext *_localctx = _tracker.createInstance<Testlist_safeContext>(_ctx, getState());
  enterRule(_localctx, 90, Python2Parser::RuleTestlist_safe);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(607);
    old_test();
    setState(617);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Python2Parser::T__4) {
      setState(610); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(608);
                match(Python2Parser::T__4);
                setState(609);
                old_test();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(612); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 71, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      setState(615);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Python2Parser::T__4) {
        setState(614);
        match(Python2Parser::T__4);
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Old_testContext ------------------------------------------------------------------

Python2Parser::Old_testContext::Old_testContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Python2Parser::Or_testContext* Python2Parser::Old_testContext::or_test() {
  return getRuleContext<Python2Parser::Or_testContext>(0);
}

Python2Parser::Old_lambdefContext* Python2Parser::Old_testContext::old_lambdef() {
  return getRuleContext<Python2Parser::Old_lambdefContext>(0);
}


size_t Python2Parser::Old_testContext::getRuleIndex() const {
  return Python2Parser::RuleOld_test;
}

void Python2Parser::Old_testContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOld_test(this);
}

void Python2Parser::Old_testContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOld_test(this);
}

Python2Parser::Old_testContext* Python2Parser::old_test() {
  Old_testContext *_localctx = _tracker.createInstance<Old_testContext>(_ctx, getState());
  enterRule(_localctx, 92, Python2Parser::RuleOld_test);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(621);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Python2Parser::T__29:
      case Python2Parser::T__47:
      case Python2Parser::T__60:
      case Python2Parser::T__61:
      case Python2Parser::T__65:
      case Python2Parser::T__66:
      case Python2Parser::NAME:
      case Python2Parser::NUMBER:
      case Python2Parser::STRING:
      case Python2Parser::OPEN_PAREN:
      case Python2Parser::OPEN_BRACE:
      case Python2Parser::OPEN_BRACKET: {
        enterOuterAlt(_localctx, 1);
        setState(619);
        or_test();
        break;
      }

      case Python2Parser::T__44: {
        enterOuterAlt(_localctx, 2);
        setState(620);
        old_lambdef();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Old_lambdefContext ------------------------------------------------------------------

Python2Parser::Old_lambdefContext::Old_lambdefContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Python2Parser::Old_testContext* Python2Parser::Old_lambdefContext::old_test() {
  return getRuleContext<Python2Parser::Old_testContext>(0);
}

Python2Parser::VarargslistContext* Python2Parser::Old_lambdefContext::varargslist() {
  return getRuleContext<Python2Parser::VarargslistContext>(0);
}


size_t Python2Parser::Old_lambdefContext::getRuleIndex() const {
  return Python2Parser::RuleOld_lambdef;
}

void Python2Parser::Old_lambdefContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOld_lambdef(this);
}

void Python2Parser::Old_lambdefContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOld_lambdef(this);
}

Python2Parser::Old_lambdefContext* Python2Parser::old_lambdef() {
  Old_lambdefContext *_localctx = _tracker.createInstance<Old_lambdefContext>(_ctx, getState());
  enterRule(_localctx, 94, Python2Parser::RuleOld_lambdef);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(623);
    match(Python2Parser::T__44);
    setState(625);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Python2Parser::T__5

    || _la == Python2Parser::T__6 || _la == Python2Parser::NAME

    || _la == Python2Parser::OPEN_PAREN) {
      setState(624);
      varargslist();
    }
    setState(627);
    match(Python2Parser::T__2);
    setState(628);
    old_test();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TestContext ------------------------------------------------------------------

Python2Parser::TestContext::TestContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Python2Parser::Or_testContext *> Python2Parser::TestContext::or_test() {
  return getRuleContexts<Python2Parser::Or_testContext>();
}

Python2Parser::Or_testContext* Python2Parser::TestContext::or_test(size_t i) {
  return getRuleContext<Python2Parser::Or_testContext>(i);
}

Python2Parser::TestContext* Python2Parser::TestContext::test() {
  return getRuleContext<Python2Parser::TestContext>(0);
}

Python2Parser::LambdefContext* Python2Parser::TestContext::lambdef() {
  return getRuleContext<Python2Parser::LambdefContext>(0);
}


size_t Python2Parser::TestContext::getRuleIndex() const {
  return Python2Parser::RuleTest;
}

void Python2Parser::TestContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTest(this);
}

void Python2Parser::TestContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTest(this);
}

Python2Parser::TestContext* Python2Parser::test() {
  TestContext *_localctx = _tracker.createInstance<TestContext>(_ctx, getState());
  enterRule(_localctx, 96, Python2Parser::RuleTest);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(639);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Python2Parser::T__29:
      case Python2Parser::T__47:
      case Python2Parser::T__60:
      case Python2Parser::T__61:
      case Python2Parser::T__65:
      case Python2Parser::T__66:
      case Python2Parser::NAME:
      case Python2Parser::NUMBER:
      case Python2Parser::STRING:
      case Python2Parser::OPEN_PAREN:
      case Python2Parser::OPEN_BRACE:
      case Python2Parser::OPEN_BRACKET: {
        enterOuterAlt(_localctx, 1);
        setState(630);
        or_test();
        setState(636);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Python2Parser::T__35) {
          setState(631);
          match(Python2Parser::T__35);
          setState(632);
          or_test();
          setState(633);
          match(Python2Parser::T__37);
          setState(634);
          test();
        }
        break;
      }

      case Python2Parser::T__44: {
        enterOuterAlt(_localctx, 2);
        setState(638);
        lambdef();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Or_testContext ------------------------------------------------------------------

Python2Parser::Or_testContext::Or_testContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Python2Parser::And_testContext *> Python2Parser::Or_testContext::and_test() {
  return getRuleContexts<Python2Parser::And_testContext>();
}

Python2Parser::And_testContext* Python2Parser::Or_testContext::and_test(size_t i) {
  return getRuleContext<Python2Parser::And_testContext>(i);
}


size_t Python2Parser::Or_testContext::getRuleIndex() const {
  return Python2Parser::RuleOr_test;
}

void Python2Parser::Or_testContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOr_test(this);
}

void Python2Parser::Or_testContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOr_test(this);
}

Python2Parser::Or_testContext* Python2Parser::or_test() {
  Or_testContext *_localctx = _tracker.createInstance<Or_testContext>(_ctx, getState());
  enterRule(_localctx, 98, Python2Parser::RuleOr_test);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(641);
    and_test();
    setState(646);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Python2Parser::T__45) {
      setState(642);
      match(Python2Parser::T__45);
      setState(643);
      and_test();
      setState(648);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- And_testContext ------------------------------------------------------------------

Python2Parser::And_testContext::And_testContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Python2Parser::Not_testContext *> Python2Parser::And_testContext::not_test() {
  return getRuleContexts<Python2Parser::Not_testContext>();
}

Python2Parser::Not_testContext* Python2Parser::And_testContext::not_test(size_t i) {
  return getRuleContext<Python2Parser::Not_testContext>(i);
}


size_t Python2Parser::And_testContext::getRuleIndex() const {
  return Python2Parser::RuleAnd_test;
}

void Python2Parser::And_testContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnd_test(this);
}

void Python2Parser::And_testContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnd_test(this);
}

Python2Parser::And_testContext* Python2Parser::and_test() {
  And_testContext *_localctx = _tracker.createInstance<And_testContext>(_ctx, getState());
  enterRule(_localctx, 100, Python2Parser::RuleAnd_test);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(649);
    not_test();
    setState(654);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Python2Parser::T__46) {
      setState(650);
      match(Python2Parser::T__46);
      setState(651);
      not_test();
      setState(656);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Not_testContext ------------------------------------------------------------------

Python2Parser::Not_testContext::Not_testContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Python2Parser::Not_testContext* Python2Parser::Not_testContext::not_test() {
  return getRuleContext<Python2Parser::Not_testContext>(0);
}

Python2Parser::ComparisonContext* Python2Parser::Not_testContext::comparison() {
  return getRuleContext<Python2Parser::ComparisonContext>(0);
}


size_t Python2Parser::Not_testContext::getRuleIndex() const {
  return Python2Parser::RuleNot_test;
}

void Python2Parser::Not_testContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNot_test(this);
}

void Python2Parser::Not_testContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNot_test(this);
}

Python2Parser::Not_testContext* Python2Parser::not_test() {
  Not_testContext *_localctx = _tracker.createInstance<Not_testContext>(_ctx, getState());
  enterRule(_localctx, 102, Python2Parser::RuleNot_test);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(660);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Python2Parser::T__47: {
        enterOuterAlt(_localctx, 1);
        setState(657);
        match(Python2Parser::T__47);
        setState(658);
        not_test();
        break;
      }

      case Python2Parser::T__29:
      case Python2Parser::T__60:
      case Python2Parser::T__61:
      case Python2Parser::T__65:
      case Python2Parser::T__66:
      case Python2Parser::NAME:
      case Python2Parser::NUMBER:
      case Python2Parser::STRING:
      case Python2Parser::OPEN_PAREN:
      case Python2Parser::OPEN_BRACE:
      case Python2Parser::OPEN_BRACKET: {
        enterOuterAlt(_localctx, 2);
        setState(659);
        comparison();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ComparisonContext ------------------------------------------------------------------

Python2Parser::ComparisonContext::ComparisonContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Python2Parser::ExprContext *> Python2Parser::ComparisonContext::expr() {
  return getRuleContexts<Python2Parser::ExprContext>();
}

Python2Parser::ExprContext* Python2Parser::ComparisonContext::expr(size_t i) {
  return getRuleContext<Python2Parser::ExprContext>(i);
}

std::vector<Python2Parser::Comp_opContext *> Python2Parser::ComparisonContext::comp_op() {
  return getRuleContexts<Python2Parser::Comp_opContext>();
}

Python2Parser::Comp_opContext* Python2Parser::ComparisonContext::comp_op(size_t i) {
  return getRuleContext<Python2Parser::Comp_opContext>(i);
}


size_t Python2Parser::ComparisonContext::getRuleIndex() const {
  return Python2Parser::RuleComparison;
}

void Python2Parser::ComparisonContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComparison(this);
}

void Python2Parser::ComparisonContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComparison(this);
}

Python2Parser::ComparisonContext* Python2Parser::comparison() {
  ComparisonContext *_localctx = _tracker.createInstance<ComparisonContext>(_ctx, getState());
  enterRule(_localctx, 104, Python2Parser::RuleComparison);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(662);
    expr();
    setState(668);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 143833730279014400) != 0) {
      setState(663);
      comp_op();
      setState(664);
      expr();
      setState(670);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Comp_opContext ------------------------------------------------------------------

Python2Parser::Comp_opContext::Comp_opContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t Python2Parser::Comp_opContext::getRuleIndex() const {
  return Python2Parser::RuleComp_op;
}

void Python2Parser::Comp_opContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComp_op(this);
}

void Python2Parser::Comp_opContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComp_op(this);
}

Python2Parser::Comp_opContext* Python2Parser::comp_op() {
  Comp_opContext *_localctx = _tracker.createInstance<Comp_opContext>(_ctx, getState());
  enterRule(_localctx, 106, Python2Parser::RuleComp_op);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(684);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 82, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(671);
      match(Python2Parser::T__48);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(672);
      match(Python2Parser::T__49);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(673);
      match(Python2Parser::T__50);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(674);
      match(Python2Parser::T__51);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(675);
      match(Python2Parser::T__52);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(676);
      match(Python2Parser::T__53);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(677);
      match(Python2Parser::T__54);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(678);
      match(Python2Parser::T__33);
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(679);
      match(Python2Parser::T__47);
      setState(680);
      match(Python2Parser::T__33);
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(681);
      match(Python2Parser::T__55);
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(682);
      match(Python2Parser::T__55);
      setState(683);
      match(Python2Parser::T__47);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExprContext ------------------------------------------------------------------

Python2Parser::ExprContext::ExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Python2Parser::Xor_exprContext *> Python2Parser::ExprContext::xor_expr() {
  return getRuleContexts<Python2Parser::Xor_exprContext>();
}

Python2Parser::Xor_exprContext* Python2Parser::ExprContext::xor_expr(size_t i) {
  return getRuleContext<Python2Parser::Xor_exprContext>(i);
}


size_t Python2Parser::ExprContext::getRuleIndex() const {
  return Python2Parser::RuleExpr;
}

void Python2Parser::ExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr(this);
}

void Python2Parser::ExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr(this);
}

Python2Parser::ExprContext* Python2Parser::expr() {
  ExprContext *_localctx = _tracker.createInstance<ExprContext>(_ctx, getState());
  enterRule(_localctx, 108, Python2Parser::RuleExpr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(686);
    xor_expr();
    setState(691);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Python2Parser::T__56) {
      setState(687);
      match(Python2Parser::T__56);
      setState(688);
      xor_expr();
      setState(693);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Xor_exprContext ------------------------------------------------------------------

Python2Parser::Xor_exprContext::Xor_exprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Python2Parser::And_exprContext *> Python2Parser::Xor_exprContext::and_expr() {
  return getRuleContexts<Python2Parser::And_exprContext>();
}

Python2Parser::And_exprContext* Python2Parser::Xor_exprContext::and_expr(size_t i) {
  return getRuleContext<Python2Parser::And_exprContext>(i);
}


size_t Python2Parser::Xor_exprContext::getRuleIndex() const {
  return Python2Parser::RuleXor_expr;
}

void Python2Parser::Xor_exprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterXor_expr(this);
}

void Python2Parser::Xor_exprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitXor_expr(this);
}

Python2Parser::Xor_exprContext* Python2Parser::xor_expr() {
  Xor_exprContext *_localctx = _tracker.createInstance<Xor_exprContext>(_ctx, getState());
  enterRule(_localctx, 110, Python2Parser::RuleXor_expr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(694);
    and_expr();
    setState(699);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Python2Parser::T__57) {
      setState(695);
      match(Python2Parser::T__57);
      setState(696);
      and_expr();
      setState(701);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- And_exprContext ------------------------------------------------------------------

Python2Parser::And_exprContext::And_exprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Python2Parser::Shift_exprContext *> Python2Parser::And_exprContext::shift_expr() {
  return getRuleContexts<Python2Parser::Shift_exprContext>();
}

Python2Parser::Shift_exprContext* Python2Parser::And_exprContext::shift_expr(size_t i) {
  return getRuleContext<Python2Parser::Shift_exprContext>(i);
}


size_t Python2Parser::And_exprContext::getRuleIndex() const {
  return Python2Parser::RuleAnd_expr;
}

void Python2Parser::And_exprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnd_expr(this);
}

void Python2Parser::And_exprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnd_expr(this);
}

Python2Parser::And_exprContext* Python2Parser::and_expr() {
  And_exprContext *_localctx = _tracker.createInstance<And_exprContext>(_ctx, getState());
  enterRule(_localctx, 112, Python2Parser::RuleAnd_expr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(702);
    shift_expr();
    setState(707);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Python2Parser::T__58) {
      setState(703);
      match(Python2Parser::T__58);
      setState(704);
      shift_expr();
      setState(709);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Shift_exprContext ------------------------------------------------------------------

Python2Parser::Shift_exprContext::Shift_exprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Python2Parser::Arith_exprContext *> Python2Parser::Shift_exprContext::arith_expr() {
  return getRuleContexts<Python2Parser::Arith_exprContext>();
}

Python2Parser::Arith_exprContext* Python2Parser::Shift_exprContext::arith_expr(size_t i) {
  return getRuleContext<Python2Parser::Arith_exprContext>(i);
}


size_t Python2Parser::Shift_exprContext::getRuleIndex() const {
  return Python2Parser::RuleShift_expr;
}

void Python2Parser::Shift_exprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShift_expr(this);
}

void Python2Parser::Shift_exprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShift_expr(this);
}

Python2Parser::Shift_exprContext* Python2Parser::shift_expr() {
  Shift_exprContext *_localctx = _tracker.createInstance<Shift_exprContext>(_ctx, getState());
  enterRule(_localctx, 114, Python2Parser::RuleShift_expr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(710);
    arith_expr();
    setState(715);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Python2Parser::T__20

    || _la == Python2Parser::T__59) {
      setState(711);
      _la = _input->LA(1);
      if (!(_la == Python2Parser::T__20

      || _la == Python2Parser::T__59)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(712);
      arith_expr();
      setState(717);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Arith_exprContext ------------------------------------------------------------------

Python2Parser::Arith_exprContext::Arith_exprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Python2Parser::TermContext *> Python2Parser::Arith_exprContext::term() {
  return getRuleContexts<Python2Parser::TermContext>();
}

Python2Parser::TermContext* Python2Parser::Arith_exprContext::term(size_t i) {
  return getRuleContext<Python2Parser::TermContext>(i);
}


size_t Python2Parser::Arith_exprContext::getRuleIndex() const {
  return Python2Parser::RuleArith_expr;
}

void Python2Parser::Arith_exprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArith_expr(this);
}

void Python2Parser::Arith_exprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArith_expr(this);
}

Python2Parser::Arith_exprContext* Python2Parser::arith_expr() {
  Arith_exprContext *_localctx = _tracker.createInstance<Arith_exprContext>(_ctx, getState());
  enterRule(_localctx, 116, Python2Parser::RuleArith_expr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(718);
    term();
    setState(723);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Python2Parser::T__60

    || _la == Python2Parser::T__61) {
      setState(719);
      _la = _input->LA(1);
      if (!(_la == Python2Parser::T__60

      || _la == Python2Parser::T__61)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(720);
      term();
      setState(725);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TermContext ------------------------------------------------------------------

Python2Parser::TermContext::TermContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Python2Parser::FactorContext *> Python2Parser::TermContext::factor() {
  return getRuleContexts<Python2Parser::FactorContext>();
}

Python2Parser::FactorContext* Python2Parser::TermContext::factor(size_t i) {
  return getRuleContext<Python2Parser::FactorContext>(i);
}


size_t Python2Parser::TermContext::getRuleIndex() const {
  return Python2Parser::RuleTerm;
}

void Python2Parser::TermContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTerm(this);
}

void Python2Parser::TermContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTerm(this);
}

Python2Parser::TermContext* Python2Parser::term() {
  TermContext *_localctx = _tracker.createInstance<TermContext>(_ctx, getState());
  enterRule(_localctx, 118, Python2Parser::RuleTerm);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(726);
    factor();
    setState(731);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la - 6) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 6)) & 1008806316530991105) != 0) {
      setState(727);
      _la = _input->LA(1);
      if (!((((_la - 6) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 6)) & 1008806316530991105) != 0)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(728);
      factor();
      setState(733);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FactorContext ------------------------------------------------------------------

Python2Parser::FactorContext::FactorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Python2Parser::FactorContext* Python2Parser::FactorContext::factor() {
  return getRuleContext<Python2Parser::FactorContext>(0);
}

Python2Parser::PowerContext* Python2Parser::FactorContext::power() {
  return getRuleContext<Python2Parser::PowerContext>(0);
}


size_t Python2Parser::FactorContext::getRuleIndex() const {
  return Python2Parser::RuleFactor;
}

void Python2Parser::FactorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFactor(this);
}

void Python2Parser::FactorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFactor(this);
}

Python2Parser::FactorContext* Python2Parser::factor() {
  FactorContext *_localctx = _tracker.createInstance<FactorContext>(_ctx, getState());
  enterRule(_localctx, 120, Python2Parser::RuleFactor);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(737);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Python2Parser::T__60:
      case Python2Parser::T__61:
      case Python2Parser::T__65: {
        enterOuterAlt(_localctx, 1);
        setState(734);
        _la = _input->LA(1);
        if (!((((_la - 61) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 61)) & 35) != 0)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(735);
        factor();
        break;
      }

      case Python2Parser::T__29:
      case Python2Parser::T__66:
      case Python2Parser::NAME:
      case Python2Parser::NUMBER:
      case Python2Parser::STRING:
      case Python2Parser::OPEN_PAREN:
      case Python2Parser::OPEN_BRACE:
      case Python2Parser::OPEN_BRACKET: {
        enterOuterAlt(_localctx, 2);
        setState(736);
        power();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PowerContext ------------------------------------------------------------------

Python2Parser::PowerContext::PowerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Python2Parser::AtomContext* Python2Parser::PowerContext::atom() {
  return getRuleContext<Python2Parser::AtomContext>(0);
}

std::vector<Python2Parser::TrailerContext *> Python2Parser::PowerContext::trailer() {
  return getRuleContexts<Python2Parser::TrailerContext>();
}

Python2Parser::TrailerContext* Python2Parser::PowerContext::trailer(size_t i) {
  return getRuleContext<Python2Parser::TrailerContext>(i);
}

Python2Parser::FactorContext* Python2Parser::PowerContext::factor() {
  return getRuleContext<Python2Parser::FactorContext>(0);
}


size_t Python2Parser::PowerContext::getRuleIndex() const {
  return Python2Parser::RulePower;
}

void Python2Parser::PowerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPower(this);
}

void Python2Parser::PowerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPower(this);
}

Python2Parser::PowerContext* Python2Parser::power() {
  PowerContext *_localctx = _tracker.createInstance<PowerContext>(_ctx, getState());
  enterRule(_localctx, 122, Python2Parser::RulePower);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(739);
    atom();
    setState(743);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la - 30) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 30)) & 1196268651020289) != 0) {
      setState(740);
      trailer();
      setState(745);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(748);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Python2Parser::T__6) {
      setState(746);
      match(Python2Parser::T__6);
      setState(747);
      factor();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AtomContext ------------------------------------------------------------------

Python2Parser::AtomContext::AtomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Python2Parser::AtomContext::OPEN_PAREN() {
  return getToken(Python2Parser::OPEN_PAREN, 0);
}

tree::TerminalNode* Python2Parser::AtomContext::CLOSE_PAREN() {
  return getToken(Python2Parser::CLOSE_PAREN, 0);
}

tree::TerminalNode* Python2Parser::AtomContext::OPEN_BRACKET() {
  return getToken(Python2Parser::OPEN_BRACKET, 0);
}

tree::TerminalNode* Python2Parser::AtomContext::CLOSE_BRACKET() {
  return getToken(Python2Parser::CLOSE_BRACKET, 0);
}

tree::TerminalNode* Python2Parser::AtomContext::OPEN_BRACE() {
  return getToken(Python2Parser::OPEN_BRACE, 0);
}

tree::TerminalNode* Python2Parser::AtomContext::CLOSE_BRACE() {
  return getToken(Python2Parser::CLOSE_BRACE, 0);
}

Python2Parser::Testlist1Context* Python2Parser::AtomContext::testlist1() {
  return getRuleContext<Python2Parser::Testlist1Context>(0);
}

tree::TerminalNode* Python2Parser::AtomContext::NAME() {
  return getToken(Python2Parser::NAME, 0);
}

tree::TerminalNode* Python2Parser::AtomContext::NUMBER() {
  return getToken(Python2Parser::NUMBER, 0);
}

Python2Parser::Yield_exprContext* Python2Parser::AtomContext::yield_expr() {
  return getRuleContext<Python2Parser::Yield_exprContext>(0);
}

Python2Parser::Testlist_compContext* Python2Parser::AtomContext::testlist_comp() {
  return getRuleContext<Python2Parser::Testlist_compContext>(0);
}

Python2Parser::ListmakerContext* Python2Parser::AtomContext::listmaker() {
  return getRuleContext<Python2Parser::ListmakerContext>(0);
}

Python2Parser::DictorsetmakerContext* Python2Parser::AtomContext::dictorsetmaker() {
  return getRuleContext<Python2Parser::DictorsetmakerContext>(0);
}

std::vector<tree::TerminalNode *> Python2Parser::AtomContext::STRING() {
  return getTokens(Python2Parser::STRING);
}

tree::TerminalNode* Python2Parser::AtomContext::STRING(size_t i) {
  return getToken(Python2Parser::STRING, i);
}


size_t Python2Parser::AtomContext::getRuleIndex() const {
  return Python2Parser::RuleAtom;
}

void Python2Parser::AtomContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAtom(this);
}

void Python2Parser::AtomContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAtom(this);
}

Python2Parser::AtomContext* Python2Parser::atom() {
  AtomContext *_localctx = _tracker.createInstance<AtomContext>(_ctx, getState());
  enterRule(_localctx, 124, Python2Parser::RuleAtom);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(780);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Python2Parser::OPEN_PAREN: {
        setState(750);
        match(Python2Parser::OPEN_PAREN);
        setState(753);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case Python2Parser::T__68: {
            setState(751);
            yield_expr();
            break;
          }

          case Python2Parser::T__29:
          case Python2Parser::T__44:
          case Python2Parser::T__47:
          case Python2Parser::T__60:
          case Python2Parser::T__61:
          case Python2Parser::T__65:
          case Python2Parser::T__66:
          case Python2Parser::NAME:
          case Python2Parser::NUMBER:
          case Python2Parser::STRING:
          case Python2Parser::OPEN_PAREN:
          case Python2Parser::OPEN_BRACE:
          case Python2Parser::OPEN_BRACKET: {
            setState(752);
            testlist_comp();
            break;
          }

          case Python2Parser::CLOSE_PAREN: {
            break;
          }

        default:
          break;
        }
        setState(755);
        match(Python2Parser::CLOSE_PAREN);
        break;
      }

      case Python2Parser::OPEN_BRACKET: {
        setState(756);
        match(Python2Parser::OPEN_BRACKET);
        setState(758);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la - 30) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 30)) & 1485652810301441) != 0) {
          setState(757);
          listmaker();
        }
        setState(760);
        match(Python2Parser::CLOSE_BRACKET);
        break;
      }

      case Python2Parser::OPEN_BRACE: {
        setState(761);
        match(Python2Parser::OPEN_BRACE);
        setState(763);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la - 30) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 30)) & 1485652810301441) != 0) {
          setState(762);
          dictorsetmaker();
        }
        setState(765);
        match(Python2Parser::CLOSE_BRACE);
        break;
      }

      case Python2Parser::T__66: {
        setState(766);
        match(Python2Parser::T__66);
        setState(767);
        testlist1();
        setState(768);
        match(Python2Parser::T__66);
        break;
      }

      case Python2Parser::T__29: {
        setState(770);
        match(Python2Parser::T__29);
        setState(771);
        match(Python2Parser::T__29);
        setState(772);
        match(Python2Parser::T__29);
        break;
      }

      case Python2Parser::NAME: {
        setState(773);
        match(Python2Parser::NAME);
        break;
      }

      case Python2Parser::NUMBER: {
        setState(774);
        match(Python2Parser::NUMBER);
        break;
      }

      case Python2Parser::STRING: {
        setState(776); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(775);
          match(Python2Parser::STRING);
          setState(778); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (_la == Python2Parser::STRING);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ListmakerContext ------------------------------------------------------------------

Python2Parser::ListmakerContext::ListmakerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Python2Parser::TestContext *> Python2Parser::ListmakerContext::test() {
  return getRuleContexts<Python2Parser::TestContext>();
}

Python2Parser::TestContext* Python2Parser::ListmakerContext::test(size_t i) {
  return getRuleContext<Python2Parser::TestContext>(i);
}

Python2Parser::List_forContext* Python2Parser::ListmakerContext::list_for() {
  return getRuleContext<Python2Parser::List_forContext>(0);
}


size_t Python2Parser::ListmakerContext::getRuleIndex() const {
  return Python2Parser::RuleListmaker;
}

void Python2Parser::ListmakerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterListmaker(this);
}

void Python2Parser::ListmakerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitListmaker(this);
}

Python2Parser::ListmakerContext* Python2Parser::listmaker() {
  ListmakerContext *_localctx = _tracker.createInstance<ListmakerContext>(_ctx, getState());
  enterRule(_localctx, 126, Python2Parser::RuleListmaker);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(782);
    test();
    setState(794);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Python2Parser::T__39: {
        setState(783);
        list_for();
        break;
      }

      case Python2Parser::T__4:
      case Python2Parser::CLOSE_BRACKET: {
        setState(788);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 97, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(784);
            match(Python2Parser::T__4);
            setState(785);
            test(); 
          }
          setState(790);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 97, _ctx);
        }
        setState(792);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Python2Parser::T__4) {
          setState(791);
          match(Python2Parser::T__4);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Testlist_compContext ------------------------------------------------------------------

Python2Parser::Testlist_compContext::Testlist_compContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Python2Parser::TestContext *> Python2Parser::Testlist_compContext::test() {
  return getRuleContexts<Python2Parser::TestContext>();
}

Python2Parser::TestContext* Python2Parser::Testlist_compContext::test(size_t i) {
  return getRuleContext<Python2Parser::TestContext>(i);
}

Python2Parser::Comp_forContext* Python2Parser::Testlist_compContext::comp_for() {
  return getRuleContext<Python2Parser::Comp_forContext>(0);
}


size_t Python2Parser::Testlist_compContext::getRuleIndex() const {
  return Python2Parser::RuleTestlist_comp;
}

void Python2Parser::Testlist_compContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTestlist_comp(this);
}

void Python2Parser::Testlist_compContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTestlist_comp(this);
}

Python2Parser::Testlist_compContext* Python2Parser::testlist_comp() {
  Testlist_compContext *_localctx = _tracker.createInstance<Testlist_compContext>(_ctx, getState());
  enterRule(_localctx, 128, Python2Parser::RuleTestlist_comp);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(796);
    test();
    setState(808);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Python2Parser::T__39: {
        setState(797);
        comp_for();
        break;
      }

      case Python2Parser::T__4:
      case Python2Parser::CLOSE_PAREN: {
        setState(802);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 100, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(798);
            match(Python2Parser::T__4);
            setState(799);
            test(); 
          }
          setState(804);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 100, _ctx);
        }
        setState(806);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Python2Parser::T__4) {
          setState(805);
          match(Python2Parser::T__4);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LambdefContext ------------------------------------------------------------------

Python2Parser::LambdefContext::LambdefContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Python2Parser::TestContext* Python2Parser::LambdefContext::test() {
  return getRuleContext<Python2Parser::TestContext>(0);
}

Python2Parser::VarargslistContext* Python2Parser::LambdefContext::varargslist() {
  return getRuleContext<Python2Parser::VarargslistContext>(0);
}


size_t Python2Parser::LambdefContext::getRuleIndex() const {
  return Python2Parser::RuleLambdef;
}

void Python2Parser::LambdefContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLambdef(this);
}

void Python2Parser::LambdefContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLambdef(this);
}

Python2Parser::LambdefContext* Python2Parser::lambdef() {
  LambdefContext *_localctx = _tracker.createInstance<LambdefContext>(_ctx, getState());
  enterRule(_localctx, 130, Python2Parser::RuleLambdef);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(810);
    match(Python2Parser::T__44);
    setState(812);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Python2Parser::T__5

    || _la == Python2Parser::T__6 || _la == Python2Parser::NAME

    || _la == Python2Parser::OPEN_PAREN) {
      setState(811);
      varargslist();
    }
    setState(814);
    match(Python2Parser::T__2);
    setState(815);
    test();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TrailerContext ------------------------------------------------------------------

Python2Parser::TrailerContext::TrailerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Python2Parser::TrailerContext::OPEN_PAREN() {
  return getToken(Python2Parser::OPEN_PAREN, 0);
}

tree::TerminalNode* Python2Parser::TrailerContext::CLOSE_PAREN() {
  return getToken(Python2Parser::CLOSE_PAREN, 0);
}

Python2Parser::ArglistContext* Python2Parser::TrailerContext::arglist() {
  return getRuleContext<Python2Parser::ArglistContext>(0);
}

tree::TerminalNode* Python2Parser::TrailerContext::OPEN_BRACKET() {
  return getToken(Python2Parser::OPEN_BRACKET, 0);
}

Python2Parser::SubscriptlistContext* Python2Parser::TrailerContext::subscriptlist() {
  return getRuleContext<Python2Parser::SubscriptlistContext>(0);
}

tree::TerminalNode* Python2Parser::TrailerContext::CLOSE_BRACKET() {
  return getToken(Python2Parser::CLOSE_BRACKET, 0);
}

tree::TerminalNode* Python2Parser::TrailerContext::NAME() {
  return getToken(Python2Parser::NAME, 0);
}


size_t Python2Parser::TrailerContext::getRuleIndex() const {
  return Python2Parser::RuleTrailer;
}

void Python2Parser::TrailerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTrailer(this);
}

void Python2Parser::TrailerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTrailer(this);
}

Python2Parser::TrailerContext* Python2Parser::trailer() {
  TrailerContext *_localctx = _tracker.createInstance<TrailerContext>(_ctx, getState());
  enterRule(_localctx, 132, Python2Parser::RuleTrailer);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(828);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Python2Parser::OPEN_PAREN: {
        enterOuterAlt(_localctx, 1);
        setState(817);
        match(Python2Parser::OPEN_PAREN);
        setState(819);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 6917845688063623360) != 0 || (((_la - 66) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 66)) & 21619) != 0) {
          setState(818);
          arglist();
        }
        setState(821);
        match(Python2Parser::CLOSE_PAREN);
        break;
      }

      case Python2Parser::OPEN_BRACKET: {
        enterOuterAlt(_localctx, 2);
        setState(822);
        match(Python2Parser::OPEN_BRACKET);
        setState(823);
        subscriptlist();
        setState(824);
        match(Python2Parser::CLOSE_BRACKET);
        break;
      }

      case Python2Parser::T__29: {
        enterOuterAlt(_localctx, 3);
        setState(826);
        match(Python2Parser::T__29);
        setState(827);
        match(Python2Parser::NAME);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubscriptlistContext ------------------------------------------------------------------

Python2Parser::SubscriptlistContext::SubscriptlistContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Python2Parser::SubscriptContext *> Python2Parser::SubscriptlistContext::subscript() {
  return getRuleContexts<Python2Parser::SubscriptContext>();
}

Python2Parser::SubscriptContext* Python2Parser::SubscriptlistContext::subscript(size_t i) {
  return getRuleContext<Python2Parser::SubscriptContext>(i);
}


size_t Python2Parser::SubscriptlistContext::getRuleIndex() const {
  return Python2Parser::RuleSubscriptlist;
}

void Python2Parser::SubscriptlistContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubscriptlist(this);
}

void Python2Parser::SubscriptlistContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubscriptlist(this);
}

Python2Parser::SubscriptlistContext* Python2Parser::subscriptlist() {
  SubscriptlistContext *_localctx = _tracker.createInstance<SubscriptlistContext>(_ctx, getState());
  enterRule(_localctx, 134, Python2Parser::RuleSubscriptlist);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(830);
    subscript();
    setState(835);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 106, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(831);
        match(Python2Parser::T__4);
        setState(832);
        subscript(); 
      }
      setState(837);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 106, _ctx);
    }
    setState(839);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Python2Parser::T__4) {
      setState(838);
      match(Python2Parser::T__4);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubscriptContext ------------------------------------------------------------------

Python2Parser::SubscriptContext::SubscriptContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Python2Parser::TestContext *> Python2Parser::SubscriptContext::test() {
  return getRuleContexts<Python2Parser::TestContext>();
}

Python2Parser::TestContext* Python2Parser::SubscriptContext::test(size_t i) {
  return getRuleContext<Python2Parser::TestContext>(i);
}

Python2Parser::SliceopContext* Python2Parser::SubscriptContext::sliceop() {
  return getRuleContext<Python2Parser::SliceopContext>(0);
}


size_t Python2Parser::SubscriptContext::getRuleIndex() const {
  return Python2Parser::RuleSubscript;
}

void Python2Parser::SubscriptContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubscript(this);
}

void Python2Parser::SubscriptContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubscript(this);
}

Python2Parser::SubscriptContext* Python2Parser::subscript() {
  SubscriptContext *_localctx = _tracker.createInstance<SubscriptContext>(_ctx, getState());
  enterRule(_localctx, 136, Python2Parser::RuleSubscript);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(855);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 111, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(841);
      match(Python2Parser::T__29);
      setState(842);
      match(Python2Parser::T__29);
      setState(843);
      match(Python2Parser::T__29);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(844);
      test();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(846);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la - 30) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 30)) & 1485652810301441) != 0) {
        setState(845);
        test();
      }
      setState(848);
      match(Python2Parser::T__2);
      setState(850);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la - 30) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 30)) & 1485652810301441) != 0) {
        setState(849);
        test();
      }
      setState(853);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Python2Parser::T__2) {
        setState(852);
        sliceop();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SliceopContext ------------------------------------------------------------------

Python2Parser::SliceopContext::SliceopContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Python2Parser::TestContext* Python2Parser::SliceopContext::test() {
  return getRuleContext<Python2Parser::TestContext>(0);
}


size_t Python2Parser::SliceopContext::getRuleIndex() const {
  return Python2Parser::RuleSliceop;
}

void Python2Parser::SliceopContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSliceop(this);
}

void Python2Parser::SliceopContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSliceop(this);
}

Python2Parser::SliceopContext* Python2Parser::sliceop() {
  SliceopContext *_localctx = _tracker.createInstance<SliceopContext>(_ctx, getState());
  enterRule(_localctx, 138, Python2Parser::RuleSliceop);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(857);
    match(Python2Parser::T__2);
    setState(859);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la - 30) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 30)) & 1485652810301441) != 0) {
      setState(858);
      test();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExprlistContext ------------------------------------------------------------------

Python2Parser::ExprlistContext::ExprlistContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Python2Parser::ExprContext *> Python2Parser::ExprlistContext::expr() {
  return getRuleContexts<Python2Parser::ExprContext>();
}

Python2Parser::ExprContext* Python2Parser::ExprlistContext::expr(size_t i) {
  return getRuleContext<Python2Parser::ExprContext>(i);
}


size_t Python2Parser::ExprlistContext::getRuleIndex() const {
  return Python2Parser::RuleExprlist;
}

void Python2Parser::ExprlistContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExprlist(this);
}

void Python2Parser::ExprlistContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExprlist(this);
}

Python2Parser::ExprlistContext* Python2Parser::exprlist() {
  ExprlistContext *_localctx = _tracker.createInstance<ExprlistContext>(_ctx, getState());
  enterRule(_localctx, 140, Python2Parser::RuleExprlist);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(861);
    expr();
    setState(866);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 113, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(862);
        match(Python2Parser::T__4);
        setState(863);
        expr(); 
      }
      setState(868);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 113, _ctx);
    }
    setState(870);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Python2Parser::T__4) {
      setState(869);
      match(Python2Parser::T__4);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TestlistContext ------------------------------------------------------------------

Python2Parser::TestlistContext::TestlistContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Python2Parser::TestContext *> Python2Parser::TestlistContext::test() {
  return getRuleContexts<Python2Parser::TestContext>();
}

Python2Parser::TestContext* Python2Parser::TestlistContext::test(size_t i) {
  return getRuleContext<Python2Parser::TestContext>(i);
}


size_t Python2Parser::TestlistContext::getRuleIndex() const {
  return Python2Parser::RuleTestlist;
}

void Python2Parser::TestlistContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTestlist(this);
}

void Python2Parser::TestlistContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTestlist(this);
}

Python2Parser::TestlistContext* Python2Parser::testlist() {
  TestlistContext *_localctx = _tracker.createInstance<TestlistContext>(_ctx, getState());
  enterRule(_localctx, 142, Python2Parser::RuleTestlist);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(872);
    test();
    setState(877);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 115, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(873);
        match(Python2Parser::T__4);
        setState(874);
        test(); 
      }
      setState(879);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 115, _ctx);
    }
    setState(881);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Python2Parser::T__4) {
      setState(880);
      match(Python2Parser::T__4);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DictorsetmakerContext ------------------------------------------------------------------

Python2Parser::DictorsetmakerContext::DictorsetmakerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Python2Parser::TestContext *> Python2Parser::DictorsetmakerContext::test() {
  return getRuleContexts<Python2Parser::TestContext>();
}

Python2Parser::TestContext* Python2Parser::DictorsetmakerContext::test(size_t i) {
  return getRuleContext<Python2Parser::TestContext>(i);
}

Python2Parser::Comp_forContext* Python2Parser::DictorsetmakerContext::comp_for() {
  return getRuleContext<Python2Parser::Comp_forContext>(0);
}


size_t Python2Parser::DictorsetmakerContext::getRuleIndex() const {
  return Python2Parser::RuleDictorsetmaker;
}

void Python2Parser::DictorsetmakerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDictorsetmaker(this);
}

void Python2Parser::DictorsetmakerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDictorsetmaker(this);
}

Python2Parser::DictorsetmakerContext* Python2Parser::dictorsetmaker() {
  DictorsetmakerContext *_localctx = _tracker.createInstance<DictorsetmakerContext>(_ctx, getState());
  enterRule(_localctx, 144, Python2Parser::RuleDictorsetmaker);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(916);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 123, _ctx)) {
    case 1: {
      setState(883);
      test();
      setState(884);
      match(Python2Parser::T__2);
      setState(885);
      test();
      setState(900);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case Python2Parser::T__39: {
          setState(886);
          comp_for();
          break;
        }

        case Python2Parser::T__4:
        case Python2Parser::CLOSE_BRACE: {
          setState(894);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 117, _ctx);
          while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
            if (alt == 1) {
              setState(887);
              match(Python2Parser::T__4);
              setState(888);
              test();
              setState(889);
              match(Python2Parser::T__2);
              setState(890);
              test(); 
            }
            setState(896);
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 117, _ctx);
          }
          setState(898);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == Python2Parser::T__4) {
            setState(897);
            match(Python2Parser::T__4);
          }
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 2: {
      setState(902);
      test();
      setState(914);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case Python2Parser::T__39: {
          setState(903);
          comp_for();
          break;
        }

        case Python2Parser::T__4:
        case Python2Parser::CLOSE_BRACE: {
          setState(908);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 120, _ctx);
          while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
            if (alt == 1) {
              setState(904);
              match(Python2Parser::T__4);
              setState(905);
              test(); 
            }
            setState(910);
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 120, _ctx);
          }
          setState(912);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == Python2Parser::T__4) {
            setState(911);
            match(Python2Parser::T__4);
          }
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassdefContext ------------------------------------------------------------------

Python2Parser::ClassdefContext::ClassdefContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Python2Parser::ClassdefContext::NAME() {
  return getToken(Python2Parser::NAME, 0);
}

Python2Parser::SuiteContext* Python2Parser::ClassdefContext::suite() {
  return getRuleContext<Python2Parser::SuiteContext>(0);
}

tree::TerminalNode* Python2Parser::ClassdefContext::OPEN_PAREN() {
  return getToken(Python2Parser::OPEN_PAREN, 0);
}

tree::TerminalNode* Python2Parser::ClassdefContext::CLOSE_PAREN() {
  return getToken(Python2Parser::CLOSE_PAREN, 0);
}

Python2Parser::TestlistContext* Python2Parser::ClassdefContext::testlist() {
  return getRuleContext<Python2Parser::TestlistContext>(0);
}


size_t Python2Parser::ClassdefContext::getRuleIndex() const {
  return Python2Parser::RuleClassdef;
}

void Python2Parser::ClassdefContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassdef(this);
}

void Python2Parser::ClassdefContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassdef(this);
}

Python2Parser::ClassdefContext* Python2Parser::classdef() {
  ClassdefContext *_localctx = _tracker.createInstance<ClassdefContext>(_ctx, getState());
  enterRule(_localctx, 146, Python2Parser::RuleClassdef);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(918);
    match(Python2Parser::T__67);
    setState(919);
    match(Python2Parser::NAME);
    setState(925);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Python2Parser::OPEN_PAREN) {
      setState(920);
      match(Python2Parser::OPEN_PAREN);
      setState(922);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la - 30) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 30)) & 1485652810301441) != 0) {
        setState(921);
        testlist();
      }
      setState(924);
      match(Python2Parser::CLOSE_PAREN);
    }
    setState(927);
    match(Python2Parser::T__2);
    setState(928);
    suite();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArglistContext ------------------------------------------------------------------

Python2Parser::ArglistContext::ArglistContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Python2Parser::ArgumentContext *> Python2Parser::ArglistContext::argument() {
  return getRuleContexts<Python2Parser::ArgumentContext>();
}

Python2Parser::ArgumentContext* Python2Parser::ArglistContext::argument(size_t i) {
  return getRuleContext<Python2Parser::ArgumentContext>(i);
}

std::vector<Python2Parser::TestContext *> Python2Parser::ArglistContext::test() {
  return getRuleContexts<Python2Parser::TestContext>();
}

Python2Parser::TestContext* Python2Parser::ArglistContext::test(size_t i) {
  return getRuleContext<Python2Parser::TestContext>(i);
}


size_t Python2Parser::ArglistContext::getRuleIndex() const {
  return Python2Parser::RuleArglist;
}

void Python2Parser::ArglistContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArglist(this);
}

void Python2Parser::ArglistContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArglist(this);
}

Python2Parser::ArglistContext* Python2Parser::arglist() {
  ArglistContext *_localctx = _tracker.createInstance<ArglistContext>(_ctx, getState());
  enterRule(_localctx, 148, Python2Parser::RuleArglist);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(935);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 126, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(930);
        argument();
        setState(931);
        match(Python2Parser::T__4); 
      }
      setState(937);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 126, _ctx);
    }
    setState(958);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Python2Parser::T__29:
      case Python2Parser::T__44:
      case Python2Parser::T__47:
      case Python2Parser::T__60:
      case Python2Parser::T__61:
      case Python2Parser::T__65:
      case Python2Parser::T__66:
      case Python2Parser::NAME:
      case Python2Parser::NUMBER:
      case Python2Parser::STRING:
      case Python2Parser::OPEN_PAREN:
      case Python2Parser::OPEN_BRACE:
      case Python2Parser::OPEN_BRACKET: {
        setState(938);
        argument();
        setState(940);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Python2Parser::T__4) {
          setState(939);
          match(Python2Parser::T__4);
        }
        break;
      }

      case Python2Parser::T__5: {
        setState(942);
        match(Python2Parser::T__5);
        setState(943);
        test();
        setState(948);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 128, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(944);
            match(Python2Parser::T__4);
            setState(945);
            argument(); 
          }
          setState(950);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 128, _ctx);
        }
        setState(954);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == Python2Parser::T__4) {
          setState(951);
          match(Python2Parser::T__4);
          setState(952);
          match(Python2Parser::T__6);
          setState(953);
          test();
        }
        break;
      }

      case Python2Parser::T__6: {
        setState(956);
        match(Python2Parser::T__6);
        setState(957);
        test();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArgumentContext ------------------------------------------------------------------

Python2Parser::ArgumentContext::ArgumentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Python2Parser::TestContext *> Python2Parser::ArgumentContext::test() {
  return getRuleContexts<Python2Parser::TestContext>();
}

Python2Parser::TestContext* Python2Parser::ArgumentContext::test(size_t i) {
  return getRuleContext<Python2Parser::TestContext>(i);
}

Python2Parser::Comp_forContext* Python2Parser::ArgumentContext::comp_for() {
  return getRuleContext<Python2Parser::Comp_forContext>(0);
}


size_t Python2Parser::ArgumentContext::getRuleIndex() const {
  return Python2Parser::RuleArgument;
}

void Python2Parser::ArgumentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArgument(this);
}

void Python2Parser::ArgumentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArgument(this);
}

Python2Parser::ArgumentContext* Python2Parser::argument() {
  ArgumentContext *_localctx = _tracker.createInstance<ArgumentContext>(_ctx, getState());
  enterRule(_localctx, 150, Python2Parser::RuleArgument);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(968);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 132, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(960);
      test();
      setState(962);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == Python2Parser::T__39) {
        setState(961);
        comp_for();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(964);
      test();
      setState(965);
      match(Python2Parser::T__3);
      setState(966);
      test();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- List_iterContext ------------------------------------------------------------------

Python2Parser::List_iterContext::List_iterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Python2Parser::List_forContext* Python2Parser::List_iterContext::list_for() {
  return getRuleContext<Python2Parser::List_forContext>(0);
}

Python2Parser::List_ifContext* Python2Parser::List_iterContext::list_if() {
  return getRuleContext<Python2Parser::List_ifContext>(0);
}


size_t Python2Parser::List_iterContext::getRuleIndex() const {
  return Python2Parser::RuleList_iter;
}

void Python2Parser::List_iterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterList_iter(this);
}

void Python2Parser::List_iterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitList_iter(this);
}

Python2Parser::List_iterContext* Python2Parser::list_iter() {
  List_iterContext *_localctx = _tracker.createInstance<List_iterContext>(_ctx, getState());
  enterRule(_localctx, 152, Python2Parser::RuleList_iter);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(972);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Python2Parser::T__39: {
        enterOuterAlt(_localctx, 1);
        setState(970);
        list_for();
        break;
      }

      case Python2Parser::T__35: {
        enterOuterAlt(_localctx, 2);
        setState(971);
        list_if();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- List_forContext ------------------------------------------------------------------

Python2Parser::List_forContext::List_forContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Python2Parser::ExprlistContext* Python2Parser::List_forContext::exprlist() {
  return getRuleContext<Python2Parser::ExprlistContext>(0);
}

Python2Parser::Testlist_safeContext* Python2Parser::List_forContext::testlist_safe() {
  return getRuleContext<Python2Parser::Testlist_safeContext>(0);
}

Python2Parser::List_iterContext* Python2Parser::List_forContext::list_iter() {
  return getRuleContext<Python2Parser::List_iterContext>(0);
}


size_t Python2Parser::List_forContext::getRuleIndex() const {
  return Python2Parser::RuleList_for;
}

void Python2Parser::List_forContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterList_for(this);
}

void Python2Parser::List_forContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitList_for(this);
}

Python2Parser::List_forContext* Python2Parser::list_for() {
  List_forContext *_localctx = _tracker.createInstance<List_forContext>(_ctx, getState());
  enterRule(_localctx, 154, Python2Parser::RuleList_for);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(974);
    match(Python2Parser::T__39);
    setState(975);
    exprlist();
    setState(976);
    match(Python2Parser::T__33);
    setState(977);
    testlist_safe();
    setState(979);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Python2Parser::T__35

    || _la == Python2Parser::T__39) {
      setState(978);
      list_iter();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- List_ifContext ------------------------------------------------------------------

Python2Parser::List_ifContext::List_ifContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Python2Parser::Old_testContext* Python2Parser::List_ifContext::old_test() {
  return getRuleContext<Python2Parser::Old_testContext>(0);
}

Python2Parser::List_iterContext* Python2Parser::List_ifContext::list_iter() {
  return getRuleContext<Python2Parser::List_iterContext>(0);
}


size_t Python2Parser::List_ifContext::getRuleIndex() const {
  return Python2Parser::RuleList_if;
}

void Python2Parser::List_ifContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterList_if(this);
}

void Python2Parser::List_ifContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitList_if(this);
}

Python2Parser::List_ifContext* Python2Parser::list_if() {
  List_ifContext *_localctx = _tracker.createInstance<List_ifContext>(_ctx, getState());
  enterRule(_localctx, 156, Python2Parser::RuleList_if);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(981);
    match(Python2Parser::T__35);
    setState(982);
    old_test();
    setState(984);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Python2Parser::T__35

    || _la == Python2Parser::T__39) {
      setState(983);
      list_iter();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Comp_iterContext ------------------------------------------------------------------

Python2Parser::Comp_iterContext::Comp_iterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Python2Parser::Comp_forContext* Python2Parser::Comp_iterContext::comp_for() {
  return getRuleContext<Python2Parser::Comp_forContext>(0);
}

Python2Parser::Comp_ifContext* Python2Parser::Comp_iterContext::comp_if() {
  return getRuleContext<Python2Parser::Comp_ifContext>(0);
}


size_t Python2Parser::Comp_iterContext::getRuleIndex() const {
  return Python2Parser::RuleComp_iter;
}

void Python2Parser::Comp_iterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComp_iter(this);
}

void Python2Parser::Comp_iterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComp_iter(this);
}

Python2Parser::Comp_iterContext* Python2Parser::comp_iter() {
  Comp_iterContext *_localctx = _tracker.createInstance<Comp_iterContext>(_ctx, getState());
  enterRule(_localctx, 158, Python2Parser::RuleComp_iter);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(988);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case Python2Parser::T__39: {
        enterOuterAlt(_localctx, 1);
        setState(986);
        comp_for();
        break;
      }

      case Python2Parser::T__35: {
        enterOuterAlt(_localctx, 2);
        setState(987);
        comp_if();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Comp_forContext ------------------------------------------------------------------

Python2Parser::Comp_forContext::Comp_forContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Python2Parser::ExprlistContext* Python2Parser::Comp_forContext::exprlist() {
  return getRuleContext<Python2Parser::ExprlistContext>(0);
}

Python2Parser::Or_testContext* Python2Parser::Comp_forContext::or_test() {
  return getRuleContext<Python2Parser::Or_testContext>(0);
}

Python2Parser::Comp_iterContext* Python2Parser::Comp_forContext::comp_iter() {
  return getRuleContext<Python2Parser::Comp_iterContext>(0);
}


size_t Python2Parser::Comp_forContext::getRuleIndex() const {
  return Python2Parser::RuleComp_for;
}

void Python2Parser::Comp_forContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComp_for(this);
}

void Python2Parser::Comp_forContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComp_for(this);
}

Python2Parser::Comp_forContext* Python2Parser::comp_for() {
  Comp_forContext *_localctx = _tracker.createInstance<Comp_forContext>(_ctx, getState());
  enterRule(_localctx, 160, Python2Parser::RuleComp_for);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(990);
    match(Python2Parser::T__39);
    setState(991);
    exprlist();
    setState(992);
    match(Python2Parser::T__33);
    setState(993);
    or_test();
    setState(995);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Python2Parser::T__35

    || _la == Python2Parser::T__39) {
      setState(994);
      comp_iter();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Comp_ifContext ------------------------------------------------------------------

Python2Parser::Comp_ifContext::Comp_ifContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Python2Parser::Old_testContext* Python2Parser::Comp_ifContext::old_test() {
  return getRuleContext<Python2Parser::Old_testContext>(0);
}

Python2Parser::Comp_iterContext* Python2Parser::Comp_ifContext::comp_iter() {
  return getRuleContext<Python2Parser::Comp_iterContext>(0);
}


size_t Python2Parser::Comp_ifContext::getRuleIndex() const {
  return Python2Parser::RuleComp_if;
}

void Python2Parser::Comp_ifContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComp_if(this);
}

void Python2Parser::Comp_ifContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComp_if(this);
}

Python2Parser::Comp_ifContext* Python2Parser::comp_if() {
  Comp_ifContext *_localctx = _tracker.createInstance<Comp_ifContext>(_ctx, getState());
  enterRule(_localctx, 162, Python2Parser::RuleComp_if);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(997);
    match(Python2Parser::T__35);
    setState(998);
    old_test();
    setState(1000);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Python2Parser::T__35

    || _la == Python2Parser::T__39) {
      setState(999);
      comp_iter();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Testlist1Context ------------------------------------------------------------------

Python2Parser::Testlist1Context::Testlist1Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<Python2Parser::TestContext *> Python2Parser::Testlist1Context::test() {
  return getRuleContexts<Python2Parser::TestContext>();
}

Python2Parser::TestContext* Python2Parser::Testlist1Context::test(size_t i) {
  return getRuleContext<Python2Parser::TestContext>(i);
}


size_t Python2Parser::Testlist1Context::getRuleIndex() const {
  return Python2Parser::RuleTestlist1;
}

void Python2Parser::Testlist1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTestlist1(this);
}

void Python2Parser::Testlist1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTestlist1(this);
}

Python2Parser::Testlist1Context* Python2Parser::testlist1() {
  Testlist1Context *_localctx = _tracker.createInstance<Testlist1Context>(_ctx, getState());
  enterRule(_localctx, 164, Python2Parser::RuleTestlist1);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1002);
    test();
    setState(1007);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == Python2Parser::T__4) {
      setState(1003);
      match(Python2Parser::T__4);
      setState(1004);
      test();
      setState(1009);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Encoding_declContext ------------------------------------------------------------------

Python2Parser::Encoding_declContext::Encoding_declContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* Python2Parser::Encoding_declContext::NAME() {
  return getToken(Python2Parser::NAME, 0);
}


size_t Python2Parser::Encoding_declContext::getRuleIndex() const {
  return Python2Parser::RuleEncoding_decl;
}

void Python2Parser::Encoding_declContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEncoding_decl(this);
}

void Python2Parser::Encoding_declContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEncoding_decl(this);
}

Python2Parser::Encoding_declContext* Python2Parser::encoding_decl() {
  Encoding_declContext *_localctx = _tracker.createInstance<Encoding_declContext>(_ctx, getState());
  enterRule(_localctx, 166, Python2Parser::RuleEncoding_decl);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1010);
    match(Python2Parser::NAME);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Yield_exprContext ------------------------------------------------------------------

Python2Parser::Yield_exprContext::Yield_exprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

Python2Parser::TestlistContext* Python2Parser::Yield_exprContext::testlist() {
  return getRuleContext<Python2Parser::TestlistContext>(0);
}


size_t Python2Parser::Yield_exprContext::getRuleIndex() const {
  return Python2Parser::RuleYield_expr;
}

void Python2Parser::Yield_exprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterYield_expr(this);
}

void Python2Parser::Yield_exprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<Python2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitYield_expr(this);
}

Python2Parser::Yield_exprContext* Python2Parser::yield_expr() {
  Yield_exprContext *_localctx = _tracker.createInstance<Yield_exprContext>(_ctx, getState());
  enterRule(_localctx, 168, Python2Parser::RuleYield_expr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1012);
    match(Python2Parser::T__68);
    setState(1014);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == Python2Parser::T__28) {
      setState(1013);
      match(Python2Parser::T__28);
    }
    setState(1017);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la - 30) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 30)) & 1485652810301441) != 0) {
      setState(1016);
      testlist();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool Python2Parser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 16: return print_stmtSempred(antlrcpp::downCast<Print_stmtContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool Python2Parser::print_stmtSempred(Print_stmtContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return self._input.LT(1).text=='print';

  default:
    break;
  }
  return true;
}

void Python2Parser::initialize() {
  ::antlr4::internal::call_once(python2ParserOnceFlag, python2ParserInitialize);
}
