
// Generated from AdaParser.g4 by ANTLR 4.13.0


#include "AdaParserListener.h"

#include "AdaParser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct AdaParserStaticData final {
  AdaParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  AdaParserStaticData(const AdaParserStaticData&) = delete;
  AdaParserStaticData(AdaParserStaticData&&) = delete;
  AdaParserStaticData& operator=(const AdaParserStaticData&) = delete;
  AdaParserStaticData& operator=(AdaParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag adaparserParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
AdaParserStaticData *adaparserParserStaticData = nullptr;

void adaparserParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (adaparserParserStaticData != nullptr) {
    return;
  }
#else
  assert(adaparserParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<AdaParserStaticData>(
    std::vector<std::string>{
      "identifier", "numeric_literal", "character_literal", "string_literal", 
      "basic_declaration", "defining_identifier", "type_declaration", "full_type_declaration", 
      "type_definition", "subtype_declaration", "subtype_indication", "subtype_mark", 
      "constraint", "scalar_constraint", "composite_constraint", "object_declaration", 
      "defining_identifier_list", "number_declaration", "derived_type_definition", 
      "range_constraint", "range", "enumeration_type_definition", "enumeration_literal_specification", 
      "integer_type_definition", "signed_integer_type_definition", "modular_type_definition", 
      "real_type_definition", "floating_point_definition", "real_range_specification", 
      "fixed_point_definition", "ordinary_fixed_point_definition", "decimal_fixed_point_definition", 
      "digits_constraint", "array_type_definition", "unconstrained_array_definition", 
      "index_subtype_definition", "constrained_array_definition", "discrete_subtype_definition", 
      "component_definition", "index_constraint", "discrete_range", "discriminant_part", 
      "unknown_discriminant_part", "known_discriminant_part", "discriminant_specification", 
      "default_expression", "discriminant_constraint", "discriminant_association", 
      "record_type_definition", "record_definition", "component_list", "component_item", 
      "component_declaration", "variant_part", "variant", "discrete_choice_list", 
      "discrete_choice", "record_extension_part", "abstract_subprogram_declaration", 
      "interface_type_definition", "interface_list", "access_type_definition", 
      "access_to_object_definition", "general_access_modifier", "access_to_subprogram_definition", 
      "null_exclusion", "access_definition", "incomplete_type_declaration", 
      "declarative_part", "declarative_item", "basic_declarative_item", 
      "body", "proper_body", "name", "direct_name", "selector_name", "attribute_designator", 
      "range_attribute_reference", "range_attribute_designator", "aggregate", 
      "record_aggregate", "record_component_association_list", "record_component_association", 
      "component_choice_list", "extension_aggregate", "ancestor_part", "array_aggregate", 
      "positional_array_aggregate", "named_array_aggregate", "array_component_association", 
      "expression", "choice_expression", "choice_relation", "relation", 
      "membership_choice_list", "membership_choice", "simple_expression", 
      "term", "factor", "primary", "logical_operator", "relational_operator", 
      "binary_adding_operator", "unary_adding_operator", "multiplying_operator", 
      "highest_precedence_operator", "conditional_expression", "if_expression", 
      "condition", "case_expression", "case_expression_alternative", "quantified_expression", 
      "quantifier", "predicate", "type_conversion", "qualified_expression", 
      "allocator", "subpool_specification", "sequence_of_statements", "statement", 
      "simple_statement", "compound_statement", "null_statement", "label", 
      "assignment_statement", "if_statement", "case_statement", "case_statement_alternative", 
      "loop_statement", "iteration_scheme", "loop_parameter_specification", 
      "iterator_specification", "block_statement", "exit_statement", "goto_statement", 
      "subprogram_declaration", "subprogram_specification", "procedure_specification", 
      "function_specification", "designator", "defining_designator", "defining_program_unit_name", 
      "operator_symbol", "defining_operator_symbol", "parameter_and_result_profile", 
      "formal_part", "parameter_specification", "mode_", "subprogram_body", 
      "procedure_call_statement", "actual_parameter_part", "parameter_association", 
      "explicit_actual_parameter", "simple_return_statement", "extended_return_object_declaration", 
      "extended_return_statement", "return_subtype_indication", "null_procedure_declaration", 
      "expression_function_declaration", "package_declaration", "package_specification", 
      "package_body", "private_type_declaration", "private_extension_declaration", 
      "overriding_indicator", "use_clause", "use_package_clause", "use_type_clause", 
      "renaming_declaration", "object_renaming_declaration", "exception_renaming_declaration", 
      "package_renaming_declaration", "subprogram_renaming_declaration", 
      "generic_renaming_declaration", "task_type_declaration", "single_task_declaration", 
      "task_definition", "task_item", "task_body", "protected_type_declaration", 
      "single_protected_declaration", "protected_definition", "protected_operation_declaration", 
      "protected_element_declaration", "protected_body", "protected_operation_item", 
      "entry_declaration", "accept_statement", "entry_direct_name", "entry_index", 
      "entry_body", "entry_identifier", "entry_body_formal_part", "entry_barrier", 
      "entry_index_specification", "entry_call_statement", "requeue_statement", 
      "delay_statement", "delay_until_statement", "delay_relative_statement", 
      "delay_expression", "select_statement", "selective_accept", "guard", 
      "select_alternative", "accept_alternative", "delay_alternative", "terminate_alternative", 
      "timed_entry_call", "entry_call_alternative", "procedure_or_entry_call", 
      "conditional_entry_call", "asynchronous_select", "triggering_alternative", 
      "triggering_statement", "abortable_part", "abort_statement", "compilation", 
      "compilation_unit", "library_item", "library_unit_declaration", "library_unit_renaming_declaration", 
      "library_unit_body", "context_item", "with_clause", "limited_with_clause", 
      "nonlimited_with_clause", "body_stub", "subprogram_body_stub", "package_body_stub", 
      "task_body_stub", "protected_body_stub", "subunit", "exception_declaration", 
      "handled_sequence_of_statements", "exception_handler", "choice_parameter_specification", 
      "exception_choice", "raise_statement", "generic_declaration", "generic_subprogram_declaration", 
      "generic_package_declaration", "generic_formal_part", "generic_formal_parameter_declaration", 
      "generic_instantiation", "generic_actual_part", "generic_association", 
      "explicit_generic_actual_parameter", "formal_object_declaration", 
      "formal_type_declaration", "formal_complete_type_declaration", "formal_incomplete_type_declaration", 
      "formal_type_definition", "formal_private_type_definition", "formal_derived_type_definition", 
      "formal_discrete_type_definition", "formal_signed_integer_type_definition", 
      "formal_modular_type_definition", "formal_floating_point_type_definition", 
      "formal_ordinary_fixed_point_type_definition", "formal_decimal_fixed_point_type_definition", 
      "formal_array_type_definition", "formal_access_type_definition", "formal_interface_type_definition", 
      "formal_subprogram_declaration", "formal_concrete_subprogram_declaration", 
      "formal_abstract_subprogram_declaration", "subprogram_default", "formal_package_declaration", 
      "formal_package_actual_part", "formal_package_association", "aspect_clause", 
      "local_name", "aspect_specification", "aspect_mark", "aspect_identifier", 
      "aspect_definition", "attribute_definition_clause", "enumeration_representation_clause", 
      "enumeration_aggregate", "record_representation_clause", "component_clause", 
      "component_local_name", "position", "first_bit", "last_bit", "delta_constraint", 
      "at_clause", "mod_clause"
    },
    std::vector<std::string>{
      "", "'abort'", "'abs'", "'abstract'", "'accept'", "'access'", "'aliased'", 
      "'all'", "'and'", "'array'", "'at'", "'begin'", "'body'", "'case'", 
      "'constant'", "'declare'", "'delay'", "'delta'", "'digits'", "'do'", 
      "'else'", "'elsif'", "'end'", "'entry'", "'exception'", "'exit'", 
      "'for'", "'function'", "'generic'", "'goto'", "'if'", "'in'", "'interface'", 
      "'is'", "'limited'", "'loop'", "'mod'", "'new'", "'not'", "'null'", 
      "'of'", "'or'", "'others'", "'out'", "'overriding'", "'package'", 
      "'pragma'", "'private'", "'procedure'", "'protected'", "'raise'", 
      "'range'", "'record'", "'rem'", "'renames'", "'requeue'", "'return'", 
      "'reverse'", "'select'", "'separate'", "'some'", "'subtype'", "'synchronized'", 
      "'tagged'", "'task'", "'terminate'", "'then'", "'type'", "'until'", 
      "'use'", "'when'", "'while'", "'with'", "'xor'", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "'#'", "'&'", 
      "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "':'", "';'", "'<'", 
      "'='", "'>'", "'_'", "'|'", "'/'", "'!'", "'%'", "'=>'", "'..'", "'**'", 
      "':='", "'/='", "'>='", "'<='", "'<<'", "'>>'", "'<>'", "'''"
    },
    std::vector<std::string>{
      "", "ABORT", "ABS", "ABSTRACT", "ACCEPT_", "ACCESS", "ALIASED", "ALL", 
      "AND", "ARRAY", "AT", "BEGIN", "BODY_", "CASE", "CONSTANT", "DECLARE", 
      "DELAY", "DELTA", "DIGITS", "DO", "ELSE", "ELSIF", "END", "ENTRY", 
      "EXCEPTION", "EXIT", "FOR", "FUNCTION", "GENERIC", "GOTO", "IF", "IN", 
      "INTERFACE", "IS", "LIMITED", "LOOP", "MOD", "NEW", "NOT", "NULL_", 
      "OF", "OR", "OTHERS", "OUT", "OVERRIDING", "PACKAGE", "PRAGMA", "PRIVATE", 
      "PROCEDURE", "PROTECTED", "RAISE", "RANGE_", "RECORD", "REM", "RENAMES", 
      "REQUEUE", "RETURN", "REVERSE", "SELECT", "SEPARATE", "SOME", "SUBTYPE", 
      "SYNCHRONIZED", "TAGGED", "TASK", "TERMINATE", "THEN", "TYPE", "UNTIL", 
      "USE", "WHEN", "WHILE", "WITH", "XOR", "CLASS__", "ACCESS__", "DELTA__", 
      "DIGITS__", "MOD__", "WHITESPACE", "LINE_COMMENT", "IDENTIFIER_", 
      "NUMERIC_LITERAL_", "DECIMAL_LITERAL_", "NUMERAL", "EXPONENT", "BASED_LITERAL", 
      "BASED_NUMERAL", "EXTENDED_DIGIT", "BASE", "CHARACTER_LITERAL_", "STRING_LITERAL_", 
      "HASH", "AMPERSAND", "LP", "RP", "MULT", "PLUS", "COMMA", "MINUS", 
      "DOT", "COLON", "SEMI", "LT", "EQ", "GT", "US", "VL", "DIV", "EP", 
      "PS", "ARROW", "DOTDOT", "EXPON", "ASSIGN", "NE", "GE", "LE", "LLB", 
      "RLB", "BOX", "SQ"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,121,3239,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,
  	7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,
  	7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,
  	7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,
  	7,122,2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,
  	7,128,2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,
  	7,134,2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,
  	7,140,2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,
  	7,146,2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,
  	7,152,2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,
  	7,158,2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
  	7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,
  	7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,
  	7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,
  	7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,
  	7,188,2,189,7,189,2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,
  	7,194,2,195,7,195,2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,
  	7,200,2,201,7,201,2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,
  	7,206,2,207,7,207,2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,
  	7,212,2,213,7,213,2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,
  	7,218,2,219,7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,
  	7,224,2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,
  	7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,2,236,
  	7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,7,241,2,242,
  	7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,2,247,7,247,2,248,
  	7,248,2,249,7,249,2,250,7,250,2,251,7,251,2,252,7,252,2,253,7,253,2,254,
  	7,254,2,255,7,255,2,256,7,256,2,257,7,257,2,258,7,258,2,259,7,259,2,260,
  	7,260,2,261,7,261,2,262,7,262,2,263,7,263,2,264,7,264,2,265,7,265,2,266,
  	7,266,2,267,7,267,2,268,7,268,2,269,7,269,2,270,7,270,2,271,7,271,2,272,
  	7,272,2,273,7,273,2,274,7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,
  	7,278,2,279,7,279,2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,
  	7,284,2,285,7,285,2,286,7,286,2,287,7,287,2,288,7,288,1,0,1,0,1,1,1,1,
  	1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,
  	4,600,8,4,1,5,1,5,1,6,1,6,1,6,1,6,3,6,608,8,6,1,7,1,7,1,7,3,7,613,8,7,
  	1,7,1,7,1,7,3,7,618,8,7,1,7,1,7,1,7,1,7,3,7,624,8,7,1,8,1,8,1,8,1,8,1,
  	8,1,8,1,8,1,8,3,8,634,8,8,1,9,1,9,1,9,1,9,1,9,3,9,641,8,9,1,10,3,10,644,
  	8,10,1,10,1,10,3,10,648,8,10,1,11,1,11,1,12,1,12,3,12,654,8,12,1,13,1,
  	13,1,13,3,13,659,8,13,1,14,1,14,3,14,663,8,14,1,15,1,15,1,15,3,15,668,
  	8,15,1,15,3,15,671,8,15,1,15,1,15,1,15,3,15,676,8,15,1,15,3,15,679,8,
  	15,1,15,1,15,1,15,1,15,1,15,3,15,686,8,15,1,15,3,15,689,8,15,1,15,1,15,
  	1,15,3,15,694,8,15,1,15,3,15,697,8,15,1,15,1,15,1,15,1,15,1,15,3,15,704,
  	8,15,1,15,3,15,707,8,15,1,15,1,15,1,15,3,15,712,8,15,1,15,3,15,715,8,
  	15,1,15,1,15,1,15,1,15,3,15,721,8,15,1,16,1,16,1,16,5,16,726,8,16,10,
  	16,12,16,729,9,16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,3,18,738,8,18,1,
  	18,3,18,741,8,18,1,18,1,18,1,18,1,18,3,18,747,8,18,1,18,3,18,750,8,18,
  	1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,3,20,760,8,20,1,21,1,21,1,21,
  	1,21,5,21,766,8,21,10,21,12,21,769,9,21,1,21,1,21,1,22,1,22,3,22,775,
  	8,22,1,23,1,23,3,23,779,8,23,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,
  	1,26,1,26,3,26,791,8,26,1,27,1,27,1,27,3,27,796,8,27,1,28,1,28,1,28,1,
  	28,1,28,1,29,1,29,3,29,805,8,29,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,
  	31,1,31,3,31,816,8,31,1,32,1,32,1,32,3,32,821,8,32,1,33,1,33,3,33,825,
  	8,33,1,34,1,34,1,34,1,34,1,34,5,34,832,8,34,10,34,12,34,835,9,34,1,34,
  	1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,5,36,850,
  	8,36,10,36,12,36,853,9,36,1,36,1,36,1,36,1,36,1,37,1,37,3,37,861,8,37,
  	1,38,3,38,864,8,38,1,38,1,38,3,38,868,8,38,1,38,3,38,871,8,38,1,39,1,
  	39,1,39,1,39,5,39,877,8,39,10,39,12,39,880,9,39,1,39,1,39,1,40,1,40,3,
  	40,886,8,40,1,41,1,41,3,41,890,8,41,1,42,1,42,1,42,1,42,1,43,1,43,1,43,
  	1,43,5,43,900,8,43,10,43,12,43,903,9,43,1,43,1,43,1,44,1,44,1,44,3,44,
  	910,8,44,1,44,1,44,1,44,3,44,915,8,44,1,44,1,44,1,44,1,44,1,44,3,44,922,
  	8,44,3,44,924,8,44,1,45,1,45,1,46,1,46,1,46,1,46,5,46,932,8,46,10,46,
  	12,46,935,9,46,1,46,1,46,1,47,1,47,1,47,5,47,942,8,47,10,47,12,47,945,
  	9,47,1,47,1,47,3,47,949,8,47,1,47,1,47,1,48,3,48,954,8,48,1,48,3,48,957,
  	8,48,1,48,3,48,960,8,48,1,48,1,48,1,49,1,49,1,49,1,49,1,49,1,49,1,49,
  	3,49,971,8,49,1,50,4,50,974,8,50,11,50,12,50,975,1,50,5,50,979,8,50,10,
  	50,12,50,982,9,50,1,50,1,50,1,50,3,50,987,8,50,1,51,1,51,3,51,991,8,51,
  	1,52,1,52,1,52,1,52,1,52,3,52,998,8,52,1,52,3,52,1001,8,52,1,52,1,52,
  	1,53,1,53,1,53,1,53,4,53,1009,8,53,11,53,12,53,1010,1,53,1,53,1,53,1,
  	53,1,54,1,54,1,54,1,54,1,54,1,55,1,55,1,55,5,55,1025,8,55,10,55,12,55,
  	1028,9,55,1,56,1,56,1,56,1,56,3,56,1034,8,56,1,57,1,57,1,57,1,58,3,58,
  	1040,8,58,1,58,1,58,1,58,1,58,3,58,1046,8,58,1,59,3,59,1049,8,59,1,59,
  	1,59,1,59,3,59,1054,8,59,1,60,1,60,1,60,5,60,1059,8,60,10,60,12,60,1062,
  	9,60,1,61,3,61,1065,8,61,1,61,1,61,3,61,1069,8,61,1,61,3,61,1072,8,61,
  	1,62,1,62,3,62,1076,8,62,1,62,1,62,1,63,1,63,1,64,1,64,3,64,1084,8,64,
  	1,64,1,64,3,64,1088,8,64,1,64,1,64,3,64,1092,8,64,1,64,1,64,3,64,1096,
  	8,64,1,65,1,65,1,65,1,66,3,66,1102,8,66,1,66,1,66,3,66,1106,8,66,1,66,
  	1,66,3,66,1110,8,66,1,66,1,66,3,66,1114,8,66,1,66,1,66,3,66,1118,8,66,
  	1,66,3,66,1121,8,66,1,66,1,66,3,66,1125,8,66,1,66,1,66,3,66,1129,8,66,
  	1,67,1,67,1,67,3,67,1134,8,67,1,67,1,67,3,67,1138,8,67,1,67,1,67,1,68,
  	5,68,1143,8,68,10,68,12,68,1146,9,68,1,69,1,69,3,69,1150,8,69,1,70,1,
  	70,1,70,3,70,1155,8,70,1,71,1,71,3,71,1159,8,71,1,72,1,72,1,72,1,72,3,
  	72,1165,8,72,1,73,1,73,1,73,1,73,1,73,3,73,1172,8,73,1,73,1,73,1,73,1,
  	73,1,73,1,73,1,73,1,73,5,73,1182,8,73,10,73,12,73,1185,9,73,1,73,1,73,
  	1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,
  	1,73,5,73,1204,8,73,10,73,12,73,1207,9,73,1,74,1,74,3,74,1211,8,74,1,
  	75,1,75,1,75,3,75,1216,8,75,1,76,1,76,1,76,1,76,1,76,3,76,1223,8,76,1,
  	76,1,76,1,76,1,76,3,76,1229,8,76,1,77,1,77,1,77,1,77,1,78,1,78,1,78,1,
  	78,1,78,3,78,1240,8,78,1,79,1,79,1,79,3,79,1245,8,79,1,80,1,80,1,80,1,
  	80,1,81,1,81,1,81,5,81,1254,8,81,10,81,12,81,1257,9,81,1,81,1,81,3,81,
  	1261,8,81,1,82,1,82,1,82,3,82,1266,8,82,1,82,1,82,1,82,1,82,1,82,3,82,
  	1273,8,82,1,83,1,83,1,83,5,83,1278,8,83,10,83,12,83,1281,9,83,1,83,3,
  	83,1284,8,83,1,84,1,84,1,84,1,84,1,84,1,84,1,85,1,85,3,85,1294,8,85,1,
  	86,1,86,3,86,1298,8,86,1,87,1,87,1,87,1,87,1,87,1,87,5,87,1306,8,87,10,
  	87,12,87,1309,9,87,1,87,1,87,1,87,1,87,1,87,1,87,5,87,1317,8,87,10,87,
  	12,87,1320,9,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,5,87,
  	1332,8,87,10,87,12,87,1335,9,87,1,87,1,87,1,87,1,87,1,87,1,87,3,87,1343,
  	8,87,1,88,1,88,1,88,1,88,5,88,1349,8,88,10,88,12,88,1352,9,88,1,88,1,
  	88,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,3,89,1364,8,89,1,90,1,90,1,
  	90,5,90,1369,8,90,10,90,12,90,1372,9,90,1,90,1,90,1,90,1,90,5,90,1378,
  	8,90,10,90,12,90,1381,9,90,1,90,1,90,1,90,5,90,1386,8,90,10,90,12,90,
  	1389,9,90,1,90,1,90,1,90,1,90,5,90,1395,8,90,10,90,12,90,1398,9,90,1,
  	90,1,90,1,90,5,90,1403,8,90,10,90,12,90,1406,9,90,3,90,1408,8,90,1,91,
  	1,91,1,91,5,91,1413,8,91,10,91,12,91,1416,9,91,1,91,1,91,1,91,5,91,1421,
  	8,91,10,91,12,91,1424,9,91,1,91,1,91,1,91,5,91,1429,8,91,10,91,12,91,
  	1432,9,91,1,91,1,91,1,91,1,91,5,91,1438,8,91,10,91,12,91,1441,9,91,1,
  	91,1,91,1,91,1,91,5,91,1447,8,91,10,91,12,91,1450,9,91,3,91,1452,8,91,
  	1,92,1,92,1,92,1,92,3,92,1458,8,92,1,93,1,93,1,93,1,93,3,93,1464,8,93,
  	1,93,1,93,3,93,1468,8,93,1,93,1,93,1,93,3,93,1473,8,93,1,94,1,94,1,94,
  	5,94,1478,8,94,10,94,12,94,1481,9,94,1,95,1,95,1,95,3,95,1486,8,95,1,
  	96,3,96,1489,8,96,1,96,1,96,1,96,1,96,5,96,1495,8,96,10,96,12,96,1498,
  	9,96,1,97,1,97,1,97,1,97,5,97,1504,8,97,10,97,12,97,1507,9,97,1,98,1,
  	98,1,98,3,98,1512,8,98,1,98,1,98,1,98,1,98,3,98,1518,8,98,1,99,1,99,1,
  	99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,
  	99,1,99,3,99,1538,8,99,1,100,1,100,1,101,1,101,1,102,1,102,1,103,1,103,
  	1,104,1,104,1,105,1,105,1,106,1,106,3,106,1554,8,106,1,107,1,107,1,107,
  	1,107,1,107,1,107,1,107,1,107,1,107,5,107,1565,8,107,10,107,12,107,1568,
  	9,107,1,107,1,107,3,107,1572,8,107,1,108,1,108,1,109,1,109,1,109,1,109,
  	1,109,1,109,5,109,1582,8,109,10,109,12,109,1585,9,109,1,110,1,110,1,110,
  	1,110,1,110,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,
  	1,111,1,111,3,111,1604,8,111,1,112,1,112,1,113,1,113,1,114,1,114,1,114,
  	1,114,1,114,1,114,1,114,1,114,1,114,1,114,3,114,1620,8,114,1,115,1,115,
  	1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,3,115,1634,
  	8,115,1,116,1,116,3,116,1638,8,116,1,116,1,116,1,116,3,116,1643,8,116,
  	1,116,3,116,1646,8,116,1,117,1,117,1,117,1,117,1,118,4,118,1653,8,118,
  	11,118,12,118,1654,1,118,5,118,1658,8,118,10,118,12,118,1661,9,118,1,
  	119,5,119,1664,8,119,10,119,12,119,1667,9,119,1,119,1,119,5,119,1671,
  	8,119,10,119,12,119,1674,9,119,1,119,3,119,1677,8,119,1,120,1,120,1,120,
  	1,120,1,120,1,120,1,120,1,120,1,120,1,120,1,120,1,120,3,120,1691,8,120,
  	1,121,1,121,1,121,1,121,1,121,1,121,1,121,3,121,1700,8,121,1,122,1,122,
  	1,122,1,123,1,123,1,124,1,124,1,124,1,124,1,124,1,125,1,125,1,125,1,125,
  	1,125,1,125,1,125,1,125,1,125,5,125,1721,8,125,10,125,12,125,1724,9,125,
  	1,125,1,125,3,125,1728,8,125,1,125,1,125,1,125,1,125,1,126,1,126,1,126,
  	1,126,1,126,5,126,1739,8,126,10,126,12,126,1742,9,126,1,126,1,126,1,126,
  	1,126,1,127,1,127,1,127,1,127,1,127,1,128,1,128,1,128,3,128,1756,8,128,
  	1,128,3,128,1759,8,128,1,128,1,128,1,128,1,128,1,128,3,128,1766,8,128,
  	1,128,1,128,1,129,1,129,1,129,1,129,1,129,1,129,3,129,1776,8,129,1,130,
  	1,130,1,130,3,130,1781,8,130,1,130,1,130,1,131,1,131,1,131,3,131,1788,
  	8,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,3,131,1797,8,131,1,131,
  	1,131,3,131,1801,8,131,1,132,1,132,1,132,3,132,1806,8,132,1,132,1,132,
  	3,132,1810,8,132,1,132,1,132,1,132,1,132,3,132,1816,8,132,1,132,1,132,
  	1,133,1,133,3,133,1822,8,133,1,133,1,133,3,133,1826,8,133,1,133,1,133,
  	1,134,1,134,1,134,1,135,3,135,1834,8,135,1,135,1,135,3,135,1838,8,135,
  	1,135,1,135,1,136,1,136,3,136,1844,8,136,1,137,1,137,1,137,3,137,1849,
  	8,137,1,138,1,138,1,138,1,138,1,139,1,139,1,139,3,139,1858,8,139,1,139,
  	1,139,3,139,1862,8,139,1,140,1,140,3,140,1866,8,140,1,141,1,141,1,141,
  	3,141,1871,8,141,1,141,1,141,1,142,1,142,1,143,1,143,1,144,3,144,1880,
  	8,144,1,144,1,144,3,144,1884,8,144,1,144,1,144,3,144,1888,8,144,1,144,
  	1,144,3,144,1892,8,144,1,145,1,145,1,145,1,145,5,145,1898,8,145,10,145,
  	12,145,1901,9,145,1,145,1,145,1,146,1,146,1,146,3,146,1908,8,146,1,146,
  	1,146,3,146,1912,8,146,1,146,1,146,1,146,3,146,1917,8,146,1,146,1,146,
  	1,146,1,146,1,146,3,146,1924,8,146,3,146,1926,8,146,1,147,3,147,1929,
  	8,147,1,147,3,147,1932,8,147,1,148,3,148,1935,8,148,1,148,1,148,3,148,
  	1939,8,148,1,148,1,148,1,148,1,148,1,148,1,148,3,148,1947,8,148,1,148,
  	1,148,1,149,1,149,1,149,1,149,1,149,3,149,1956,8,149,1,150,1,150,1,150,
  	1,150,5,150,1962,8,150,10,150,12,150,1965,9,150,1,150,1,150,1,151,1,151,
  	1,151,3,151,1972,8,151,1,151,1,151,1,152,1,152,3,152,1978,8,152,1,153,
  	1,153,3,153,1982,8,153,1,153,1,153,1,154,1,154,1,154,3,154,1989,8,154,
  	1,154,3,154,1992,8,154,1,154,1,154,1,154,3,154,1997,8,154,1,155,1,155,
  	1,155,1,155,1,155,1,155,1,155,3,155,2006,8,155,1,155,1,155,1,156,1,156,
  	3,156,2012,8,156,1,157,3,157,2015,8,157,1,157,1,157,1,157,1,157,3,157,
  	2021,8,157,1,157,1,157,1,158,3,158,2026,8,158,1,158,1,158,1,158,1,158,
  	1,158,1,158,3,158,2034,8,158,1,158,1,158,1,159,1,159,1,159,1,160,1,160,
  	1,160,3,160,2044,8,160,1,160,1,160,5,160,2048,8,160,10,160,12,160,2051,
  	9,160,1,160,1,160,5,160,2055,8,160,10,160,12,160,2058,9,160,3,160,2060,
  	8,160,1,160,1,160,1,160,1,160,3,160,2066,8,160,1,160,3,160,2069,8,160,
  	1,161,1,161,1,161,1,161,3,161,2075,8,161,1,161,1,161,1,161,1,161,3,161,
  	2081,8,161,1,161,1,161,1,161,1,161,3,161,2087,8,161,1,161,3,161,2090,
  	8,161,1,161,1,161,1,162,1,162,1,162,3,162,2097,8,162,1,162,1,162,3,162,
  	2101,8,162,1,162,3,162,2104,8,162,1,162,3,162,2107,8,162,1,162,1,162,
  	3,162,2111,8,162,1,162,1,162,1,163,1,163,1,163,3,163,2118,8,163,1,163,
  	1,163,3,163,2122,8,163,1,163,1,163,1,163,1,163,1,163,3,163,2129,8,163,
  	1,163,1,163,1,163,3,163,2134,8,163,1,163,1,163,1,164,3,164,2139,8,164,
  	1,164,1,164,1,165,1,165,3,165,2145,8,165,1,166,1,166,1,166,1,166,5,166,
  	2151,8,166,10,166,12,166,2154,9,166,1,166,1,166,1,167,1,167,3,167,2160,
  	8,167,1,167,1,167,1,167,1,167,5,167,2166,8,167,10,167,12,167,2169,9,167,
  	1,167,1,167,1,168,1,168,1,168,1,168,1,168,3,168,2178,8,168,1,169,1,169,
  	1,169,3,169,2183,8,169,1,169,1,169,1,169,1,169,3,169,2189,8,169,1,169,
  	1,169,1,169,1,169,1,169,1,169,1,169,1,169,3,169,2199,8,169,1,169,1,169,
  	3,169,2203,8,169,1,170,1,170,1,170,1,170,1,170,1,170,3,170,2211,8,170,
  	1,170,1,170,1,171,1,171,1,171,1,171,1,171,3,171,2220,8,171,1,171,1,171,
  	1,172,3,172,2225,8,172,1,172,1,172,1,172,1,172,3,172,2231,8,172,1,172,
  	1,172,1,173,1,173,1,173,1,173,1,173,1,173,3,173,2241,8,173,1,173,1,173,
  	1,173,1,173,1,173,1,173,1,173,1,173,3,173,2251,8,173,1,173,1,173,1,173,
  	1,173,1,173,1,173,1,173,1,173,3,173,2261,8,173,1,173,1,173,3,173,2265,
  	8,173,1,174,1,174,1,174,1,174,3,174,2271,8,174,1,174,3,174,2274,8,174,
  	1,174,1,174,1,174,1,174,1,174,3,174,2281,8,174,1,174,3,174,2284,8,174,
  	1,174,1,174,1,175,1,175,1,175,3,175,2291,8,175,1,175,1,175,1,175,1,175,
  	1,175,3,175,2298,8,175,1,175,3,175,2301,8,175,1,175,1,175,1,176,5,176,
  	2306,8,176,10,176,12,176,2309,9,176,1,176,1,176,5,176,2313,8,176,10,176,
  	12,176,2316,9,176,3,176,2318,8,176,1,176,1,176,3,176,2322,8,176,1,177,
  	1,177,3,177,2326,8,177,1,178,1,178,1,178,1,178,3,178,2332,8,178,1,178,
  	1,178,1,178,1,178,1,178,1,178,3,178,2340,8,178,1,178,1,178,1,179,1,179,
  	1,179,1,179,3,179,2348,8,179,1,179,3,179,2351,8,179,1,179,1,179,1,179,
  	1,179,1,179,3,179,2358,8,179,1,179,1,179,1,179,1,180,1,180,1,180,3,180,
  	2366,8,180,1,180,1,180,1,180,1,180,1,180,3,180,2373,8,180,1,180,1,180,
  	1,180,1,181,5,181,2379,8,181,10,181,12,181,2382,9,181,1,181,1,181,5,181,
  	2386,8,181,10,181,12,181,2389,9,181,3,181,2391,8,181,1,181,1,181,3,181,
  	2395,8,181,1,182,1,182,1,182,3,182,2400,8,182,1,183,1,183,3,183,2404,
  	8,183,1,184,1,184,1,184,1,184,3,184,2410,8,184,1,184,1,184,5,184,2414,
  	8,184,10,184,12,184,2417,9,184,1,184,1,184,3,184,2421,8,184,1,184,1,184,
  	1,185,1,185,1,185,1,185,3,185,2429,8,185,1,186,3,186,2432,8,186,1,186,
  	1,186,1,186,1,186,1,186,1,186,3,186,2440,8,186,1,186,3,186,2443,8,186,
  	1,186,3,186,2446,8,186,1,186,1,186,1,187,1,187,1,187,1,187,1,187,1,187,
  	3,187,2456,8,187,1,187,3,187,2459,8,187,1,187,1,187,1,187,1,187,3,187,
  	2465,8,187,3,187,2467,8,187,1,187,1,187,1,188,1,188,1,189,1,189,1,190,
  	1,190,1,190,1,190,1,190,1,190,1,190,1,190,1,190,1,190,3,190,2485,8,190,
  	1,190,1,190,1,191,1,191,1,192,1,192,1,192,1,192,3,192,2495,8,192,1,192,
  	3,192,2498,8,192,1,193,1,193,1,193,1,194,1,194,1,194,1,194,1,194,1,195,
  	1,195,3,195,2510,8,195,1,195,1,195,1,196,1,196,1,196,1,196,3,196,2518,
  	8,196,1,196,1,196,1,197,1,197,3,197,2524,8,197,1,198,1,198,1,198,1,198,
  	1,199,1,199,1,199,1,200,1,200,1,201,1,201,1,201,1,201,3,201,2539,8,201,
  	1,202,1,202,3,202,2543,8,202,1,202,1,202,1,202,3,202,2548,8,202,1,202,
  	5,202,2551,8,202,10,202,12,202,2554,9,202,1,202,1,202,3,202,2558,8,202,
  	1,202,1,202,1,202,1,202,1,203,1,203,1,203,1,203,1,204,1,204,1,204,3,204,
  	2571,8,204,1,205,1,205,3,205,2575,8,205,1,206,1,206,3,206,2579,8,206,
  	1,207,1,207,1,207,1,208,1,208,1,208,1,208,1,208,1,208,1,208,1,208,1,209,
  	1,209,3,209,2594,8,209,1,210,1,210,3,210,2598,8,210,1,211,1,211,1,211,
  	1,211,1,211,1,211,1,211,1,211,1,212,1,212,1,212,1,212,1,212,1,212,1,212,
  	1,212,1,212,1,213,1,213,3,213,2619,8,213,1,214,1,214,3,214,2623,8,214,
  	1,215,1,215,1,216,1,216,1,216,1,216,5,216,2631,8,216,10,216,12,216,2634,
  	9,216,1,217,5,217,2637,8,217,10,217,12,217,2640,9,217,1,217,1,217,1,218,
  	5,218,2645,8,218,10,218,12,218,2648,9,218,1,218,1,218,3,218,2652,8,218,
  	1,219,3,219,2655,8,219,1,219,1,219,1,219,3,219,2660,8,219,1,219,3,219,
  	2663,8,219,1,220,1,220,1,220,1,220,3,220,2669,8,220,1,221,1,221,1,221,
  	3,221,2674,8,221,1,222,1,222,3,222,2678,8,222,1,223,1,223,3,223,2682,
  	8,223,1,224,1,224,3,224,2686,8,224,1,225,1,225,3,225,2690,8,225,1,225,
  	1,225,1,225,1,225,5,225,2696,8,225,10,225,12,225,2699,9,225,1,225,1,225,
  	1,226,3,226,2704,8,226,1,226,1,226,1,226,1,226,5,226,2710,8,226,10,226,
  	12,226,2713,9,226,1,226,1,226,1,227,1,227,1,227,1,227,3,227,2721,8,227,
  	1,228,3,228,2724,8,228,1,228,1,228,1,228,1,228,3,228,2730,8,228,1,228,
  	1,228,1,229,1,229,1,229,1,229,1,229,1,229,3,229,2740,8,229,1,229,1,229,
  	1,230,1,230,1,230,1,230,1,230,1,230,3,230,2750,8,230,1,230,1,230,1,231,
  	1,231,1,231,1,231,1,231,1,231,3,231,2760,8,231,1,231,1,231,1,232,1,232,
  	1,232,1,232,1,232,1,232,1,233,1,233,1,233,1,233,3,233,2774,8,233,1,233,
  	1,233,1,234,1,234,1,234,4,234,2781,8,234,11,234,12,234,2782,3,234,2785,
  	8,234,1,235,1,235,1,235,1,235,3,235,2791,8,235,1,235,1,235,1,235,5,235,
  	2796,8,235,10,235,12,235,2799,9,235,1,235,1,235,1,235,1,236,1,236,1,237,
  	1,237,3,237,2808,8,237,1,238,1,238,1,238,1,238,1,238,1,238,3,238,2816,
  	8,238,1,238,1,238,3,238,2820,8,238,1,239,1,239,3,239,2824,8,239,1,240,
  	1,240,1,240,3,240,2829,8,240,1,240,1,240,1,241,1,241,1,241,1,241,1,242,
  	1,242,1,242,5,242,2840,8,242,10,242,12,242,2843,9,242,1,243,1,243,1,243,
  	1,243,3,243,2849,8,243,1,244,1,244,1,244,1,244,1,244,1,244,3,244,2857,
  	8,244,1,244,3,244,2860,8,244,1,244,3,244,2863,8,244,1,244,1,244,1,244,
  	1,244,1,244,1,244,3,244,2871,8,244,1,244,3,244,2874,8,244,1,244,3,244,
  	2877,8,244,1,244,1,244,1,244,1,244,1,244,1,244,3,244,2885,8,244,1,244,
  	3,244,2888,8,244,3,244,2890,8,244,1,245,1,245,1,245,1,245,5,245,2896,
  	8,245,10,245,12,245,2899,9,245,1,245,1,245,1,246,1,246,1,246,3,246,2906,
  	8,246,1,246,1,246,1,247,1,247,1,247,3,247,2913,8,247,1,248,1,248,1,248,
  	1,248,3,248,2919,8,248,1,248,1,248,1,248,3,248,2924,8,248,1,248,3,248,
  	2927,8,248,1,248,1,248,1,248,1,248,1,248,1,248,1,248,1,248,3,248,2937,
  	8,248,1,248,3,248,2940,8,248,3,248,2942,8,248,1,249,1,249,3,249,2946,
  	8,249,1,250,1,250,1,250,3,250,2951,8,250,1,250,1,250,1,250,3,250,2956,
  	8,250,1,250,1,250,1,251,1,251,1,251,3,251,2963,8,251,1,251,1,251,3,251,
  	2967,8,251,1,251,1,251,1,252,1,252,1,252,1,252,1,252,1,252,1,252,1,252,
  	1,252,1,252,1,252,3,252,2982,8,252,1,253,3,253,2985,8,253,1,253,3,253,
  	2988,8,253,1,253,3,253,2991,8,253,1,253,1,253,1,254,3,254,2996,8,254,
  	1,254,3,254,2999,8,254,1,254,1,254,1,254,1,254,1,254,3,254,3006,8,254,
  	1,254,1,254,3,254,3010,8,254,1,255,1,255,1,255,1,255,1,256,1,256,1,256,
  	1,257,1,257,1,257,1,258,1,258,1,258,1,259,1,259,1,259,1,260,1,260,1,260,
  	1,260,1,260,1,261,1,261,1,262,1,262,1,263,1,263,1,264,1,264,3,264,3041,
  	8,264,1,265,1,265,1,265,1,265,3,265,3047,8,265,1,265,3,265,3050,8,265,
  	1,265,1,265,1,266,1,266,1,266,1,266,1,266,3,266,3059,8,266,1,266,3,266,
  	3062,8,266,1,266,1,266,1,267,1,267,1,267,3,267,3069,8,267,1,268,1,268,
  	1,268,1,268,1,268,1,268,1,268,1,268,3,268,3079,8,268,1,268,1,268,1,269,
  	1,269,1,269,3,269,3086,8,269,1,269,1,269,1,269,3,269,3091,8,269,1,269,
  	1,269,1,269,1,269,5,269,3097,8,269,10,269,12,269,3100,9,269,1,269,1,269,
  	1,269,1,269,3,269,3106,8,269,1,269,1,269,3,269,3110,8,269,1,270,1,270,
  	1,270,1,270,1,270,3,270,3117,8,270,1,271,1,271,1,271,1,271,3,271,3123,
  	8,271,1,272,1,272,1,272,1,272,1,272,1,272,3,272,3131,8,272,1,273,1,273,
  	1,273,1,273,3,273,3137,8,273,1,273,1,273,1,273,1,273,3,273,3143,8,273,
  	5,273,3145,8,273,10,273,12,273,3148,9,273,1,274,1,274,1,274,3,274,3153,
  	8,274,1,275,1,275,1,276,1,276,1,276,3,276,3160,8,276,1,277,1,277,1,277,
  	1,277,1,277,1,277,1,277,1,277,1,277,1,277,1,277,1,277,1,277,1,277,1,277,
  	1,277,3,277,3178,8,277,1,278,1,278,1,278,1,278,1,278,1,278,1,279,1,279,
  	1,280,1,280,1,280,1,280,1,280,3,280,3193,8,280,1,280,5,280,3196,8,280,
  	10,280,12,280,3199,9,280,1,280,1,280,3,280,3203,8,280,1,281,1,281,1,281,
  	1,281,1,281,1,281,1,281,1,281,1,281,1,282,1,282,1,283,1,283,1,284,1,284,
  	1,285,1,285,1,286,1,286,1,286,3,286,3225,8,286,1,287,1,287,1,287,1,287,
  	1,287,1,287,1,287,1,288,1,288,1,288,1,288,1,288,1,288,0,1,146,289,0,2,
  	4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,
  	52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,
  	98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,
  	134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,
  	170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,
  	206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,
  	242,244,246,248,250,252,254,256,258,260,262,264,266,268,270,272,274,276,
  	278,280,282,284,286,288,290,292,294,296,298,300,302,304,306,308,310,312,
  	314,316,318,320,322,324,326,328,330,332,334,336,338,340,342,344,346,348,
  	350,352,354,356,358,360,362,364,366,368,370,372,374,376,378,380,382,384,
  	386,388,390,392,394,396,398,400,402,404,406,408,410,412,414,416,418,420,
  	422,424,426,428,430,432,434,436,438,440,442,444,446,448,450,452,454,456,
  	458,460,462,464,466,468,470,472,474,476,478,480,482,484,486,488,490,492,
  	494,496,498,500,502,504,506,508,510,512,514,516,518,520,522,524,526,528,
  	530,532,534,536,538,540,542,544,546,548,550,552,554,556,558,560,562,564,
  	566,568,570,572,574,576,0,10,4,0,34,34,49,49,62,62,64,64,2,0,7,7,14,14,
  	3,0,8,8,41,41,73,73,2,0,104,105,115,117,3,0,93,93,97,97,99,99,2,0,97,
  	97,99,99,4,0,36,36,53,53,96,96,108,108,3,0,2,2,38,38,113,113,2,0,7,7,
  	60,60,2,0,34,34,62,62,3458,0,578,1,0,0,0,2,580,1,0,0,0,4,582,1,0,0,0,
  	6,584,1,0,0,0,8,599,1,0,0,0,10,601,1,0,0,0,12,607,1,0,0,0,14,623,1,0,
  	0,0,16,633,1,0,0,0,18,635,1,0,0,0,20,643,1,0,0,0,22,649,1,0,0,0,24,653,
  	1,0,0,0,26,658,1,0,0,0,28,662,1,0,0,0,30,720,1,0,0,0,32,722,1,0,0,0,34,
  	730,1,0,0,0,36,737,1,0,0,0,38,751,1,0,0,0,40,759,1,0,0,0,42,761,1,0,0,
  	0,44,774,1,0,0,0,46,778,1,0,0,0,48,780,1,0,0,0,50,785,1,0,0,0,52,790,
  	1,0,0,0,54,792,1,0,0,0,56,797,1,0,0,0,58,804,1,0,0,0,60,806,1,0,0,0,62,
  	810,1,0,0,0,64,817,1,0,0,0,66,824,1,0,0,0,68,826,1,0,0,0,70,840,1,0,0,
  	0,72,844,1,0,0,0,74,860,1,0,0,0,76,870,1,0,0,0,78,872,1,0,0,0,80,885,
  	1,0,0,0,82,889,1,0,0,0,84,891,1,0,0,0,86,895,1,0,0,0,88,923,1,0,0,0,90,
  	925,1,0,0,0,92,927,1,0,0,0,94,948,1,0,0,0,96,956,1,0,0,0,98,970,1,0,0,
  	0,100,986,1,0,0,0,102,990,1,0,0,0,104,992,1,0,0,0,106,1004,1,0,0,0,108,
  	1016,1,0,0,0,110,1021,1,0,0,0,112,1033,1,0,0,0,114,1035,1,0,0,0,116,1039,
  	1,0,0,0,118,1048,1,0,0,0,120,1055,1,0,0,0,122,1071,1,0,0,0,124,1073,1,
  	0,0,0,126,1079,1,0,0,0,128,1095,1,0,0,0,130,1097,1,0,0,0,132,1128,1,0,
  	0,0,134,1130,1,0,0,0,136,1144,1,0,0,0,138,1149,1,0,0,0,140,1154,1,0,0,
  	0,142,1158,1,0,0,0,144,1164,1,0,0,0,146,1171,1,0,0,0,148,1210,1,0,0,0,
  	150,1215,1,0,0,0,152,1228,1,0,0,0,154,1230,1,0,0,0,156,1234,1,0,0,0,158,
  	1244,1,0,0,0,160,1246,1,0,0,0,162,1260,1,0,0,0,164,1272,1,0,0,0,166,1283,
  	1,0,0,0,168,1285,1,0,0,0,170,1293,1,0,0,0,172,1297,1,0,0,0,174,1342,1,
  	0,0,0,176,1344,1,0,0,0,178,1363,1,0,0,0,180,1407,1,0,0,0,182,1451,1,0,
  	0,0,184,1453,1,0,0,0,186,1472,1,0,0,0,188,1474,1,0,0,0,190,1485,1,0,0,
  	0,192,1488,1,0,0,0,194,1499,1,0,0,0,196,1517,1,0,0,0,198,1537,1,0,0,0,
  	200,1539,1,0,0,0,202,1541,1,0,0,0,204,1543,1,0,0,0,206,1545,1,0,0,0,208,
  	1547,1,0,0,0,210,1549,1,0,0,0,212,1553,1,0,0,0,214,1555,1,0,0,0,216,1573,
  	1,0,0,0,218,1575,1,0,0,0,220,1586,1,0,0,0,222,1603,1,0,0,0,224,1605,1,
  	0,0,0,226,1607,1,0,0,0,228,1619,1,0,0,0,230,1633,1,0,0,0,232,1645,1,0,
  	0,0,234,1647,1,0,0,0,236,1652,1,0,0,0,238,1676,1,0,0,0,240,1690,1,0,0,
  	0,242,1699,1,0,0,0,244,1701,1,0,0,0,246,1704,1,0,0,0,248,1706,1,0,0,0,
  	250,1711,1,0,0,0,252,1733,1,0,0,0,254,1747,1,0,0,0,256,1755,1,0,0,0,258,
  	1775,1,0,0,0,260,1777,1,0,0,0,262,1800,1,0,0,0,264,1805,1,0,0,0,266,1819,
  	1,0,0,0,268,1829,1,0,0,0,270,1833,1,0,0,0,272,1843,1,0,0,0,274,1845,1,
  	0,0,0,276,1850,1,0,0,0,278,1861,1,0,0,0,280,1865,1,0,0,0,282,1870,1,0,
  	0,0,284,1874,1,0,0,0,286,1876,1,0,0,0,288,1891,1,0,0,0,290,1893,1,0,0,
  	0,292,1925,1,0,0,0,294,1928,1,0,0,0,296,1934,1,0,0,0,298,1955,1,0,0,0,
  	300,1957,1,0,0,0,302,1971,1,0,0,0,304,1977,1,0,0,0,306,1979,1,0,0,0,308,
  	1985,1,0,0,0,310,1998,1,0,0,0,312,2011,1,0,0,0,314,2014,1,0,0,0,316,2025,
  	1,0,0,0,318,2037,1,0,0,0,320,2040,1,0,0,0,322,2070,1,0,0,0,324,2093,1,
  	0,0,0,326,2114,1,0,0,0,328,2138,1,0,0,0,330,2144,1,0,0,0,332,2146,1,0,
  	0,0,334,2157,1,0,0,0,336,2177,1,0,0,0,338,2202,1,0,0,0,340,2204,1,0,0,
  	0,342,2214,1,0,0,0,344,2224,1,0,0,0,346,2264,1,0,0,0,348,2266,1,0,0,0,
  	350,2287,1,0,0,0,352,2307,1,0,0,0,354,2325,1,0,0,0,356,2327,1,0,0,0,358,
  	2343,1,0,0,0,360,2362,1,0,0,0,362,2380,1,0,0,0,364,2399,1,0,0,0,366,2403,
  	1,0,0,0,368,2405,1,0,0,0,370,2428,1,0,0,0,372,2431,1,0,0,0,374,2449,1,
  	0,0,0,376,2470,1,0,0,0,378,2472,1,0,0,0,380,2474,1,0,0,0,382,2488,1,0,
  	0,0,384,2494,1,0,0,0,386,2499,1,0,0,0,388,2502,1,0,0,0,390,2507,1,0,0,
  	0,392,2513,1,0,0,0,394,2523,1,0,0,0,396,2525,1,0,0,0,398,2529,1,0,0,0,
  	400,2532,1,0,0,0,402,2538,1,0,0,0,404,2540,1,0,0,0,406,2563,1,0,0,0,408,
  	2570,1,0,0,0,410,2572,1,0,0,0,412,2576,1,0,0,0,414,2580,1,0,0,0,416,2583,
  	1,0,0,0,418,2591,1,0,0,0,420,2597,1,0,0,0,422,2599,1,0,0,0,424,2607,1,
  	0,0,0,426,2616,1,0,0,0,428,2622,1,0,0,0,430,2624,1,0,0,0,432,2626,1,0,
  	0,0,434,2638,1,0,0,0,436,2646,1,0,0,0,438,2662,1,0,0,0,440,2668,1,0,0,
  	0,442,2673,1,0,0,0,444,2677,1,0,0,0,446,2681,1,0,0,0,448,2685,1,0,0,0,
  	450,2687,1,0,0,0,452,2703,1,0,0,0,454,2720,1,0,0,0,456,2723,1,0,0,0,458,
  	2733,1,0,0,0,460,2743,1,0,0,0,462,2753,1,0,0,0,464,2763,1,0,0,0,466,2769,
  	1,0,0,0,468,2777,1,0,0,0,470,2786,1,0,0,0,472,2803,1,0,0,0,474,2807,1,
  	0,0,0,476,2819,1,0,0,0,478,2823,1,0,0,0,480,2825,1,0,0,0,482,2832,1,0,
  	0,0,484,2836,1,0,0,0,486,2848,1,0,0,0,488,2889,1,0,0,0,490,2891,1,0,0,
  	0,492,2905,1,0,0,0,494,2912,1,0,0,0,496,2941,1,0,0,0,498,2945,1,0,0,0,
  	500,2947,1,0,0,0,502,2959,1,0,0,0,504,2981,1,0,0,0,506,2987,1,0,0,0,508,
  	2995,1,0,0,0,510,3011,1,0,0,0,512,3015,1,0,0,0,514,3018,1,0,0,0,516,3021,
  	1,0,0,0,518,3024,1,0,0,0,520,3027,1,0,0,0,522,3032,1,0,0,0,524,3034,1,
  	0,0,0,526,3036,1,0,0,0,528,3040,1,0,0,0,530,3042,1,0,0,0,532,3053,1,0,
  	0,0,534,3068,1,0,0,0,536,3070,1,0,0,0,538,3109,1,0,0,0,540,3116,1,0,0,
  	0,542,3122,1,0,0,0,544,3130,1,0,0,0,546,3132,1,0,0,0,548,3149,1,0,0,0,
  	550,3154,1,0,0,0,552,3159,1,0,0,0,554,3177,1,0,0,0,556,3179,1,0,0,0,558,
  	3185,1,0,0,0,560,3187,1,0,0,0,562,3204,1,0,0,0,564,3213,1,0,0,0,566,3215,
  	1,0,0,0,568,3217,1,0,0,0,570,3219,1,0,0,0,572,3221,1,0,0,0,574,3226,1,
  	0,0,0,576,3233,1,0,0,0,578,579,5,81,0,0,579,1,1,0,0,0,580,581,5,82,0,
  	0,581,3,1,0,0,0,582,583,5,90,0,0,583,5,1,0,0,0,584,585,5,91,0,0,585,7,
  	1,0,0,0,586,600,3,12,6,0,587,600,3,18,9,0,588,600,3,30,15,0,589,600,3,
  	34,17,0,590,600,3,270,135,0,591,600,3,116,58,0,592,600,3,314,157,0,593,
  	600,3,316,158,0,594,600,3,318,159,0,595,600,3,336,168,0,596,600,3,466,
  	233,0,597,600,3,478,239,0,598,600,3,488,244,0,599,586,1,0,0,0,599,587,
  	1,0,0,0,599,588,1,0,0,0,599,589,1,0,0,0,599,590,1,0,0,0,599,591,1,0,0,
  	0,599,592,1,0,0,0,599,593,1,0,0,0,599,594,1,0,0,0,599,595,1,0,0,0,599,
  	596,1,0,0,0,599,597,1,0,0,0,599,598,1,0,0,0,600,9,1,0,0,0,601,602,3,0,
  	0,0,602,11,1,0,0,0,603,608,3,14,7,0,604,608,3,134,67,0,605,608,3,324,
  	162,0,606,608,3,326,163,0,607,603,1,0,0,0,607,604,1,0,0,0,607,605,1,0,
  	0,0,607,606,1,0,0,0,608,13,1,0,0,0,609,610,5,67,0,0,610,612,3,10,5,0,
  	611,613,3,86,43,0,612,611,1,0,0,0,612,613,1,0,0,0,613,614,1,0,0,0,614,
  	615,5,33,0,0,615,617,3,16,8,0,616,618,3,546,273,0,617,616,1,0,0,0,617,
  	618,1,0,0,0,618,619,1,0,0,0,619,620,5,102,0,0,620,624,1,0,0,0,621,624,
  	3,348,174,0,622,624,3,358,179,0,623,609,1,0,0,0,623,621,1,0,0,0,623,622,
  	1,0,0,0,624,15,1,0,0,0,625,634,3,42,21,0,626,634,3,46,23,0,627,634,3,
  	52,26,0,628,634,3,66,33,0,629,634,3,96,48,0,630,634,3,122,61,0,631,634,
  	3,36,18,0,632,634,3,118,59,0,633,625,1,0,0,0,633,626,1,0,0,0,633,627,
  	1,0,0,0,633,628,1,0,0,0,633,629,1,0,0,0,633,630,1,0,0,0,633,631,1,0,0,
  	0,633,632,1,0,0,0,634,17,1,0,0,0,635,636,5,61,0,0,636,637,3,10,5,0,637,
  	638,5,33,0,0,638,640,3,20,10,0,639,641,3,546,273,0,640,639,1,0,0,0,640,
  	641,1,0,0,0,641,19,1,0,0,0,642,644,3,130,65,0,643,642,1,0,0,0,643,644,
  	1,0,0,0,644,645,1,0,0,0,645,647,3,22,11,0,646,648,3,24,12,0,647,646,1,
  	0,0,0,647,648,1,0,0,0,648,21,1,0,0,0,649,650,3,0,0,0,650,23,1,0,0,0,651,
  	654,3,26,13,0,652,654,3,28,14,0,653,651,1,0,0,0,653,652,1,0,0,0,654,25,
  	1,0,0,0,655,659,3,38,19,0,656,659,3,64,32,0,657,659,3,572,286,0,658,655,
  	1,0,0,0,658,656,1,0,0,0,658,657,1,0,0,0,659,27,1,0,0,0,660,663,3,78,39,
  	0,661,663,3,92,46,0,662,660,1,0,0,0,662,661,1,0,0,0,663,29,1,0,0,0,664,
  	665,3,32,16,0,665,667,5,101,0,0,666,668,5,6,0,0,667,666,1,0,0,0,667,668,
  	1,0,0,0,668,670,1,0,0,0,669,671,5,14,0,0,670,669,1,0,0,0,670,671,1,0,
  	0,0,671,672,1,0,0,0,672,675,3,20,10,0,673,674,5,114,0,0,674,676,3,180,
  	90,0,675,673,1,0,0,0,675,676,1,0,0,0,676,678,1,0,0,0,677,679,3,546,273,
  	0,678,677,1,0,0,0,678,679,1,0,0,0,679,680,1,0,0,0,680,681,5,102,0,0,681,
  	721,1,0,0,0,682,683,3,32,16,0,683,685,5,101,0,0,684,686,5,6,0,0,685,684,
  	1,0,0,0,685,686,1,0,0,0,686,688,1,0,0,0,687,689,5,14,0,0,688,687,1,0,
  	0,0,688,689,1,0,0,0,689,690,1,0,0,0,690,693,3,132,66,0,691,692,5,114,
  	0,0,692,694,3,180,90,0,693,691,1,0,0,0,693,694,1,0,0,0,694,696,1,0,0,
  	0,695,697,3,546,273,0,696,695,1,0,0,0,696,697,1,0,0,0,697,698,1,0,0,0,
  	698,699,5,102,0,0,699,721,1,0,0,0,700,701,3,32,16,0,701,703,5,101,0,0,
  	702,704,5,6,0,0,703,702,1,0,0,0,703,704,1,0,0,0,704,706,1,0,0,0,705,707,
  	5,14,0,0,706,705,1,0,0,0,706,707,1,0,0,0,707,708,1,0,0,0,708,711,3,66,
  	33,0,709,710,5,114,0,0,710,712,3,180,90,0,711,709,1,0,0,0,711,712,1,0,
  	0,0,712,714,1,0,0,0,713,715,3,546,273,0,714,713,1,0,0,0,714,715,1,0,0,
  	0,715,716,1,0,0,0,716,717,5,102,0,0,717,721,1,0,0,0,718,721,3,350,175,
  	0,719,721,3,360,180,0,720,664,1,0,0,0,720,682,1,0,0,0,720,700,1,0,0,0,
  	720,718,1,0,0,0,720,719,1,0,0,0,721,31,1,0,0,0,722,727,3,10,5,0,723,724,
  	5,98,0,0,724,726,3,10,5,0,725,723,1,0,0,0,726,729,1,0,0,0,727,725,1,0,
  	0,0,727,728,1,0,0,0,728,33,1,0,0,0,729,727,1,0,0,0,730,731,3,32,16,0,
  	731,732,5,101,0,0,732,733,5,14,0,0,733,734,5,114,0,0,734,735,3,180,90,
  	0,735,35,1,0,0,0,736,738,5,3,0,0,737,736,1,0,0,0,737,738,1,0,0,0,738,
  	740,1,0,0,0,739,741,5,34,0,0,740,739,1,0,0,0,740,741,1,0,0,0,741,742,
  	1,0,0,0,742,743,5,37,0,0,743,749,3,20,10,0,744,745,5,8,0,0,745,747,3,
  	120,60,0,746,744,1,0,0,0,746,747,1,0,0,0,747,748,1,0,0,0,748,750,3,114,
  	57,0,749,746,1,0,0,0,749,750,1,0,0,0,750,37,1,0,0,0,751,752,5,51,0,0,
  	752,753,3,40,20,0,753,39,1,0,0,0,754,760,3,154,77,0,755,756,3,192,96,
  	0,756,757,5,112,0,0,757,758,3,192,96,0,758,760,1,0,0,0,759,754,1,0,0,
  	0,759,755,1,0,0,0,760,41,1,0,0,0,761,762,5,94,0,0,762,767,3,44,22,0,763,
  	764,5,98,0,0,764,766,3,44,22,0,765,763,1,0,0,0,766,769,1,0,0,0,767,765,
  	1,0,0,0,767,768,1,0,0,0,768,770,1,0,0,0,769,767,1,0,0,0,770,771,5,95,
  	0,0,771,43,1,0,0,0,772,775,3,10,5,0,773,775,3,4,2,0,774,772,1,0,0,0,774,
  	773,1,0,0,0,775,45,1,0,0,0,776,779,3,48,24,0,777,779,3,50,25,0,778,776,
  	1,0,0,0,778,777,1,0,0,0,779,47,1,0,0,0,780,781,5,51,0,0,781,782,3,180,
  	90,0,782,783,5,112,0,0,783,784,3,180,90,0,784,49,1,0,0,0,785,786,5,36,
  	0,0,786,787,3,180,90,0,787,51,1,0,0,0,788,791,3,54,27,0,789,791,3,58,
  	29,0,790,788,1,0,0,0,790,789,1,0,0,0,791,53,1,0,0,0,792,793,5,18,0,0,
  	793,795,3,180,90,0,794,796,3,56,28,0,795,794,1,0,0,0,795,796,1,0,0,0,
  	796,55,1,0,0,0,797,798,5,51,0,0,798,799,3,180,90,0,799,800,5,112,0,0,
  	800,801,3,180,90,0,801,57,1,0,0,0,802,805,3,60,30,0,803,805,3,62,31,0,
  	804,802,1,0,0,0,804,803,1,0,0,0,805,59,1,0,0,0,806,807,5,17,0,0,807,808,
  	3,180,90,0,808,809,3,56,28,0,809,61,1,0,0,0,810,811,5,17,0,0,811,812,
  	3,180,90,0,812,813,5,18,0,0,813,815,3,180,90,0,814,816,3,56,28,0,815,
  	814,1,0,0,0,815,816,1,0,0,0,816,63,1,0,0,0,817,818,5,18,0,0,818,820,3,
  	180,90,0,819,821,3,38,19,0,820,819,1,0,0,0,820,821,1,0,0,0,821,65,1,0,
  	0,0,822,825,3,68,34,0,823,825,3,72,36,0,824,822,1,0,0,0,824,823,1,0,0,
  	0,825,67,1,0,0,0,826,827,5,9,0,0,827,828,5,94,0,0,828,833,3,70,35,0,829,
  	830,5,98,0,0,830,832,3,70,35,0,831,829,1,0,0,0,832,835,1,0,0,0,833,831,
  	1,0,0,0,833,834,1,0,0,0,834,836,1,0,0,0,835,833,1,0,0,0,836,837,5,95,
  	0,0,837,838,5,40,0,0,838,839,3,76,38,0,839,69,1,0,0,0,840,841,3,22,11,
  	0,841,842,5,51,0,0,842,843,5,120,0,0,843,71,1,0,0,0,844,845,5,9,0,0,845,
  	846,5,94,0,0,846,851,3,74,37,0,847,848,5,98,0,0,848,850,3,74,37,0,849,
  	847,1,0,0,0,850,853,1,0,0,0,851,849,1,0,0,0,851,852,1,0,0,0,852,854,1,
  	0,0,0,853,851,1,0,0,0,854,855,5,95,0,0,855,856,5,40,0,0,856,857,3,76,
  	38,0,857,73,1,0,0,0,858,861,3,20,10,0,859,861,3,40,20,0,860,858,1,0,0,
  	0,860,859,1,0,0,0,861,75,1,0,0,0,862,864,5,6,0,0,863,862,1,0,0,0,863,
  	864,1,0,0,0,864,865,1,0,0,0,865,871,3,20,10,0,866,868,5,6,0,0,867,866,
  	1,0,0,0,867,868,1,0,0,0,868,869,1,0,0,0,869,871,3,132,66,0,870,863,1,
  	0,0,0,870,867,1,0,0,0,871,77,1,0,0,0,872,873,5,94,0,0,873,878,3,80,40,
  	0,874,875,5,98,0,0,875,877,3,80,40,0,876,874,1,0,0,0,877,880,1,0,0,0,
  	878,876,1,0,0,0,878,879,1,0,0,0,879,881,1,0,0,0,880,878,1,0,0,0,881,882,
  	5,95,0,0,882,79,1,0,0,0,883,886,3,20,10,0,884,886,3,40,20,0,885,883,1,
  	0,0,0,885,884,1,0,0,0,886,81,1,0,0,0,887,890,3,84,42,0,888,890,3,86,43,
  	0,889,887,1,0,0,0,889,888,1,0,0,0,890,83,1,0,0,0,891,892,5,94,0,0,892,
  	893,5,120,0,0,893,894,5,95,0,0,894,85,1,0,0,0,895,896,5,94,0,0,896,901,
  	3,88,44,0,897,898,5,102,0,0,898,900,3,88,44,0,899,897,1,0,0,0,900,903,
  	1,0,0,0,901,899,1,0,0,0,901,902,1,0,0,0,902,904,1,0,0,0,903,901,1,0,0,
  	0,904,905,5,95,0,0,905,87,1,0,0,0,906,907,3,32,16,0,907,909,5,101,0,0,
  	908,910,3,130,65,0,909,908,1,0,0,0,909,910,1,0,0,0,910,911,1,0,0,0,911,
  	914,3,22,11,0,912,913,5,114,0,0,913,915,3,180,90,0,914,912,1,0,0,0,914,
  	915,1,0,0,0,915,924,1,0,0,0,916,917,3,32,16,0,917,918,5,101,0,0,918,921,
  	3,132,66,0,919,920,5,114,0,0,920,922,3,180,90,0,921,919,1,0,0,0,921,922,
  	1,0,0,0,922,924,1,0,0,0,923,906,1,0,0,0,923,916,1,0,0,0,924,89,1,0,0,
  	0,925,926,3,180,90,0,926,91,1,0,0,0,927,928,5,94,0,0,928,933,3,94,47,
  	0,929,930,5,98,0,0,930,932,3,94,47,0,931,929,1,0,0,0,932,935,1,0,0,0,
  	933,931,1,0,0,0,933,934,1,0,0,0,934,936,1,0,0,0,935,933,1,0,0,0,936,937,
  	5,95,0,0,937,93,1,0,0,0,938,943,3,150,75,0,939,940,5,107,0,0,940,942,
  	3,150,75,0,941,939,1,0,0,0,942,945,1,0,0,0,943,941,1,0,0,0,943,944,1,
  	0,0,0,944,946,1,0,0,0,945,943,1,0,0,0,946,947,5,111,0,0,947,949,1,0,0,
  	0,948,938,1,0,0,0,948,949,1,0,0,0,949,950,1,0,0,0,950,951,3,180,90,0,
  	951,95,1,0,0,0,952,954,5,3,0,0,953,952,1,0,0,0,953,954,1,0,0,0,954,955,
  	1,0,0,0,955,957,5,63,0,0,956,953,1,0,0,0,956,957,1,0,0,0,957,959,1,0,
  	0,0,958,960,5,34,0,0,959,958,1,0,0,0,959,960,1,0,0,0,960,961,1,0,0,0,
  	961,962,3,98,49,0,962,97,1,0,0,0,963,964,5,52,0,0,964,965,3,100,50,0,
  	965,966,5,22,0,0,966,967,5,52,0,0,967,971,1,0,0,0,968,969,5,39,0,0,969,
  	971,5,52,0,0,970,963,1,0,0,0,970,968,1,0,0,0,971,99,1,0,0,0,972,974,3,
  	102,51,0,973,972,1,0,0,0,974,975,1,0,0,0,975,973,1,0,0,0,975,976,1,0,
  	0,0,976,987,1,0,0,0,977,979,3,102,51,0,978,977,1,0,0,0,979,982,1,0,0,
  	0,980,978,1,0,0,0,980,981,1,0,0,0,981,983,1,0,0,0,982,980,1,0,0,0,983,
  	987,3,106,53,0,984,985,5,39,0,0,985,987,5,102,0,0,986,973,1,0,0,0,986,
  	980,1,0,0,0,986,984,1,0,0,0,987,101,1,0,0,0,988,991,3,104,52,0,989,991,
  	3,542,271,0,990,988,1,0,0,0,990,989,1,0,0,0,991,103,1,0,0,0,992,993,3,
  	32,16,0,993,994,5,101,0,0,994,997,3,76,38,0,995,996,5,114,0,0,996,998,
  	3,90,45,0,997,995,1,0,0,0,997,998,1,0,0,0,998,1000,1,0,0,0,999,1001,3,
  	546,273,0,1000,999,1,0,0,0,1000,1001,1,0,0,0,1001,1002,1,0,0,0,1002,1003,
  	5,102,0,0,1003,105,1,0,0,0,1004,1005,5,13,0,0,1005,1006,3,148,74,0,1006,
  	1008,5,33,0,0,1007,1009,3,108,54,0,1008,1007,1,0,0,0,1009,1010,1,0,0,
  	0,1010,1008,1,0,0,0,1010,1011,1,0,0,0,1011,1012,1,0,0,0,1012,1013,5,22,
  	0,0,1013,1014,5,13,0,0,1014,1015,5,102,0,0,1015,107,1,0,0,0,1016,1017,
  	5,70,0,0,1017,1018,3,110,55,0,1018,1019,5,111,0,0,1019,1020,3,100,50,
  	0,1020,109,1,0,0,0,1021,1026,3,112,56,0,1022,1023,5,107,0,0,1023,1025,
  	3,112,56,0,1024,1022,1,0,0,0,1025,1028,1,0,0,0,1026,1024,1,0,0,0,1026,
  	1027,1,0,0,0,1027,111,1,0,0,0,1028,1026,1,0,0,0,1029,1034,3,182,91,0,
  	1030,1034,3,20,10,0,1031,1034,3,40,20,0,1032,1034,5,42,0,0,1033,1029,
  	1,0,0,0,1033,1030,1,0,0,0,1033,1031,1,0,0,0,1033,1032,1,0,0,0,1034,113,
  	1,0,0,0,1035,1036,5,72,0,0,1036,1037,3,98,49,0,1037,115,1,0,0,0,1038,
  	1040,3,328,164,0,1039,1038,1,0,0,0,1039,1040,1,0,0,0,1040,1041,1,0,0,
  	0,1041,1042,3,272,136,0,1042,1043,5,33,0,0,1043,1045,5,3,0,0,1044,1046,
  	3,546,273,0,1045,1044,1,0,0,0,1045,1046,1,0,0,0,1046,117,1,0,0,0,1047,
  	1049,7,0,0,0,1048,1047,1,0,0,0,1048,1049,1,0,0,0,1049,1050,1,0,0,0,1050,
  	1053,5,32,0,0,1051,1052,5,8,0,0,1052,1054,3,120,60,0,1053,1051,1,0,0,
  	0,1053,1054,1,0,0,0,1054,119,1,0,0,0,1055,1060,3,22,11,0,1056,1057,5,
  	8,0,0,1057,1059,3,22,11,0,1058,1056,1,0,0,0,1059,1062,1,0,0,0,1060,1058,
  	1,0,0,0,1060,1061,1,0,0,0,1061,121,1,0,0,0,1062,1060,1,0,0,0,1063,1065,
  	3,130,65,0,1064,1063,1,0,0,0,1064,1065,1,0,0,0,1065,1066,1,0,0,0,1066,
  	1072,3,124,62,0,1067,1069,3,130,65,0,1068,1067,1,0,0,0,1068,1069,1,0,
  	0,0,1069,1070,1,0,0,0,1070,1072,3,128,64,0,1071,1064,1,0,0,0,1071,1068,
  	1,0,0,0,1072,123,1,0,0,0,1073,1075,5,5,0,0,1074,1076,3,126,63,0,1075,
  	1074,1,0,0,0,1075,1076,1,0,0,0,1076,1077,1,0,0,0,1077,1078,3,20,10,0,
  	1078,125,1,0,0,0,1079,1080,7,1,0,0,1080,127,1,0,0,0,1081,1083,5,5,0,0,
  	1082,1084,5,49,0,0,1083,1082,1,0,0,0,1083,1084,1,0,0,0,1084,1085,1,0,
  	0,0,1085,1087,5,48,0,0,1086,1088,3,290,145,0,1087,1086,1,0,0,0,1087,1088,
  	1,0,0,0,1088,1096,1,0,0,0,1089,1091,5,5,0,0,1090,1092,5,49,0,0,1091,1090,
  	1,0,0,0,1091,1092,1,0,0,0,1092,1093,1,0,0,0,1093,1094,5,27,0,0,1094,1096,
  	3,288,144,0,1095,1081,1,0,0,0,1095,1089,1,0,0,0,1096,129,1,0,0,0,1097,
  	1098,5,38,0,0,1098,1099,5,39,0,0,1099,131,1,0,0,0,1100,1102,3,130,65,
  	0,1101,1100,1,0,0,0,1101,1102,1,0,0,0,1102,1103,1,0,0,0,1103,1105,5,5,
  	0,0,1104,1106,5,14,0,0,1105,1104,1,0,0,0,1105,1106,1,0,0,0,1106,1107,
  	1,0,0,0,1107,1129,3,22,11,0,1108,1110,3,130,65,0,1109,1108,1,0,0,0,1109,
  	1110,1,0,0,0,1110,1111,1,0,0,0,1111,1113,5,5,0,0,1112,1114,5,49,0,0,1113,
  	1112,1,0,0,0,1113,1114,1,0,0,0,1114,1115,1,0,0,0,1115,1117,5,48,0,0,1116,
  	1118,3,290,145,0,1117,1116,1,0,0,0,1117,1118,1,0,0,0,1118,1129,1,0,0,
  	0,1119,1121,3,130,65,0,1120,1119,1,0,0,0,1120,1121,1,0,0,0,1121,1122,
  	1,0,0,0,1122,1124,5,5,0,0,1123,1125,5,49,0,0,1124,1123,1,0,0,0,1124,1125,
  	1,0,0,0,1125,1126,1,0,0,0,1126,1127,5,27,0,0,1127,1129,3,288,144,0,1128,
  	1101,1,0,0,0,1128,1109,1,0,0,0,1128,1120,1,0,0,0,1129,133,1,0,0,0,1130,
  	1131,5,67,0,0,1131,1133,3,10,5,0,1132,1134,3,82,41,0,1133,1132,1,0,0,
  	0,1133,1134,1,0,0,0,1134,1137,1,0,0,0,1135,1136,5,33,0,0,1136,1138,5,
  	63,0,0,1137,1135,1,0,0,0,1137,1138,1,0,0,0,1138,1139,1,0,0,0,1139,1140,
  	5,102,0,0,1140,135,1,0,0,0,1141,1143,3,138,69,0,1142,1141,1,0,0,0,1143,
  	1146,1,0,0,0,1144,1142,1,0,0,0,1144,1145,1,0,0,0,1145,137,1,0,0,0,1146,
  	1144,1,0,0,0,1147,1150,3,140,70,0,1148,1150,3,142,71,0,1149,1147,1,0,
  	0,0,1149,1148,1,0,0,0,1150,139,1,0,0,0,1151,1155,3,8,4,0,1152,1155,3,
  	542,271,0,1153,1155,3,330,165,0,1154,1151,1,0,0,0,1154,1152,1,0,0,0,1154,
  	1153,1,0,0,0,1155,141,1,0,0,0,1156,1159,3,144,72,0,1157,1159,3,454,227,
  	0,1158,1156,1,0,0,0,1158,1157,1,0,0,0,1159,143,1,0,0,0,1160,1165,3,296,
  	148,0,1161,1165,3,322,161,0,1162,1165,3,356,178,0,1163,1165,3,368,184,
  	0,1164,1160,1,0,0,0,1164,1161,1,0,0,0,1164,1162,1,0,0,0,1164,1163,1,0,
  	0,0,1165,145,1,0,0,0,1166,1167,6,73,-1,0,1167,1172,3,148,74,0,1168,1172,
  	3,228,114,0,1169,1172,3,4,2,0,1170,1172,3,230,115,0,1171,1166,1,0,0,0,
  	1171,1168,1,0,0,0,1171,1169,1,0,0,0,1171,1170,1,0,0,0,1172,1205,1,0,0,
  	0,1173,1174,10,10,0,0,1174,1175,5,100,0,0,1175,1204,5,7,0,0,1176,1177,
  	10,9,0,0,1177,1178,5,94,0,0,1178,1183,3,180,90,0,1179,1180,5,98,0,0,1180,
  	1182,3,180,90,0,1181,1179,1,0,0,0,1182,1185,1,0,0,0,1183,1181,1,0,0,0,
  	1183,1184,1,0,0,0,1184,1186,1,0,0,0,1185,1183,1,0,0,0,1186,1187,5,95,
  	0,0,1187,1204,1,0,0,0,1188,1189,10,8,0,0,1189,1190,5,94,0,0,1190,1191,
  	3,80,40,0,1191,1192,5,95,0,0,1192,1204,1,0,0,0,1193,1194,10,7,0,0,1194,
  	1195,5,100,0,0,1195,1204,3,150,75,0,1196,1197,10,6,0,0,1197,1198,5,121,
  	0,0,1198,1204,3,152,76,0,1199,1200,10,4,0,0,1200,1204,3,300,150,0,1201,
  	1202,10,1,0,0,1202,1204,3,300,150,0,1203,1173,1,0,0,0,1203,1176,1,0,0,
  	0,1203,1188,1,0,0,0,1203,1193,1,0,0,0,1203,1196,1,0,0,0,1203,1199,1,0,
  	0,0,1203,1201,1,0,0,0,1204,1207,1,0,0,0,1205,1203,1,0,0,0,1205,1206,1,
  	0,0,0,1206,147,1,0,0,0,1207,1205,1,0,0,0,1208,1211,3,0,0,0,1209,1211,
  	3,284,142,0,1210,1208,1,0,0,0,1210,1209,1,0,0,0,1211,149,1,0,0,0,1212,
  	1216,3,0,0,0,1213,1216,3,4,2,0,1214,1216,3,284,142,0,1215,1212,1,0,0,
  	0,1215,1213,1,0,0,0,1215,1214,1,0,0,0,1216,151,1,0,0,0,1217,1222,3,0,
  	0,0,1218,1219,5,94,0,0,1219,1220,3,180,90,0,1220,1221,5,95,0,0,1221,1223,
  	1,0,0,0,1222,1218,1,0,0,0,1222,1223,1,0,0,0,1223,1229,1,0,0,0,1224,1229,
  	5,75,0,0,1225,1229,5,76,0,0,1226,1229,5,77,0,0,1227,1229,5,78,0,0,1228,
  	1217,1,0,0,0,1228,1224,1,0,0,0,1228,1225,1,0,0,0,1228,1226,1,0,0,0,1228,
  	1227,1,0,0,0,1229,153,1,0,0,0,1230,1231,3,146,73,0,1231,1232,5,121,0,
  	0,1232,1233,3,156,78,0,1233,155,1,0,0,0,1234,1239,5,51,0,0,1235,1236,
  	5,94,0,0,1236,1237,3,180,90,0,1237,1238,5,95,0,0,1238,1240,1,0,0,0,1239,
  	1235,1,0,0,0,1239,1240,1,0,0,0,1240,157,1,0,0,0,1241,1245,3,160,80,0,
  	1242,1245,3,168,84,0,1243,1245,3,172,86,0,1244,1241,1,0,0,0,1244,1242,
  	1,0,0,0,1244,1243,1,0,0,0,1245,159,1,0,0,0,1246,1247,5,94,0,0,1247,1248,
  	3,162,81,0,1248,1249,5,95,0,0,1249,161,1,0,0,0,1250,1255,3,164,82,0,1251,
  	1252,5,98,0,0,1252,1254,3,164,82,0,1253,1251,1,0,0,0,1254,1257,1,0,0,
  	0,1255,1253,1,0,0,0,1255,1256,1,0,0,0,1256,1261,1,0,0,0,1257,1255,1,0,
  	0,0,1258,1259,5,39,0,0,1259,1261,5,52,0,0,1260,1250,1,0,0,0,1260,1258,
  	1,0,0,0,1261,163,1,0,0,0,1262,1263,3,166,83,0,1263,1264,5,111,0,0,1264,
  	1266,1,0,0,0,1265,1262,1,0,0,0,1265,1266,1,0,0,0,1266,1267,1,0,0,0,1267,
  	1273,3,180,90,0,1268,1269,3,166,83,0,1269,1270,5,111,0,0,1270,1271,5,
  	120,0,0,1271,1273,1,0,0,0,1272,1265,1,0,0,0,1272,1268,1,0,0,0,1273,165,
  	1,0,0,0,1274,1279,3,150,75,0,1275,1276,5,107,0,0,1276,1278,3,150,75,0,
  	1277,1275,1,0,0,0,1278,1281,1,0,0,0,1279,1277,1,0,0,0,1279,1280,1,0,0,
  	0,1280,1284,1,0,0,0,1281,1279,1,0,0,0,1282,1284,5,42,0,0,1283,1274,1,
  	0,0,0,1283,1282,1,0,0,0,1284,167,1,0,0,0,1285,1286,5,94,0,0,1286,1287,
  	3,170,85,0,1287,1288,5,72,0,0,1288,1289,3,162,81,0,1289,1290,5,95,0,0,
  	1290,169,1,0,0,0,1291,1294,3,180,90,0,1292,1294,3,22,11,0,1293,1291,1,
  	0,0,0,1293,1292,1,0,0,0,1294,171,1,0,0,0,1295,1298,3,174,87,0,1296,1298,
  	3,176,88,0,1297,1295,1,0,0,0,1297,1296,1,0,0,0,1298,173,1,0,0,0,1299,
  	1300,5,94,0,0,1300,1301,3,180,90,0,1301,1302,5,98,0,0,1302,1307,3,180,
  	90,0,1303,1304,5,98,0,0,1304,1306,3,180,90,0,1305,1303,1,0,0,0,1306,1309,
  	1,0,0,0,1307,1305,1,0,0,0,1307,1308,1,0,0,0,1308,1310,1,0,0,0,1309,1307,
  	1,0,0,0,1310,1311,5,95,0,0,1311,1343,1,0,0,0,1312,1313,5,94,0,0,1313,
  	1318,3,180,90,0,1314,1315,5,98,0,0,1315,1317,3,180,90,0,1316,1314,1,0,
  	0,0,1317,1320,1,0,0,0,1318,1316,1,0,0,0,1318,1319,1,0,0,0,1319,1321,1,
  	0,0,0,1320,1318,1,0,0,0,1321,1322,5,98,0,0,1322,1323,5,42,0,0,1323,1324,
  	5,111,0,0,1324,1325,3,180,90,0,1325,1326,5,95,0,0,1326,1343,1,0,0,0,1327,
  	1328,5,94,0,0,1328,1333,3,180,90,0,1329,1330,5,98,0,0,1330,1332,3,180,
  	90,0,1331,1329,1,0,0,0,1332,1335,1,0,0,0,1333,1331,1,0,0,0,1333,1334,
  	1,0,0,0,1334,1336,1,0,0,0,1335,1333,1,0,0,0,1336,1337,5,98,0,0,1337,1338,
  	5,42,0,0,1338,1339,5,111,0,0,1339,1340,5,120,0,0,1340,1341,5,95,0,0,1341,
  	1343,1,0,0,0,1342,1299,1,0,0,0,1342,1312,1,0,0,0,1342,1327,1,0,0,0,1343,
  	175,1,0,0,0,1344,1345,5,94,0,0,1345,1350,3,178,89,0,1346,1347,5,98,0,
  	0,1347,1349,3,178,89,0,1348,1346,1,0,0,0,1349,1352,1,0,0,0,1350,1348,
  	1,0,0,0,1350,1351,1,0,0,0,1351,1353,1,0,0,0,1352,1350,1,0,0,0,1353,1354,
  	5,95,0,0,1354,177,1,0,0,0,1355,1356,3,110,55,0,1356,1357,5,111,0,0,1357,
  	1358,3,180,90,0,1358,1364,1,0,0,0,1359,1360,3,110,55,0,1360,1361,5,111,
  	0,0,1361,1362,5,120,0,0,1362,1364,1,0,0,0,1363,1355,1,0,0,0,1363,1359,
  	1,0,0,0,1364,179,1,0,0,0,1365,1370,3,186,93,0,1366,1367,5,8,0,0,1367,
  	1369,3,186,93,0,1368,1366,1,0,0,0,1369,1372,1,0,0,0,1370,1368,1,0,0,0,
  	1370,1371,1,0,0,0,1371,1408,1,0,0,0,1372,1370,1,0,0,0,1373,1379,3,186,
  	93,0,1374,1375,5,8,0,0,1375,1376,5,66,0,0,1376,1378,3,186,93,0,1377,1374,
  	1,0,0,0,1378,1381,1,0,0,0,1379,1377,1,0,0,0,1379,1380,1,0,0,0,1380,1408,
  	1,0,0,0,1381,1379,1,0,0,0,1382,1387,3,186,93,0,1383,1384,5,41,0,0,1384,
  	1386,3,186,93,0,1385,1383,1,0,0,0,1386,1389,1,0,0,0,1387,1385,1,0,0,0,
  	1387,1388,1,0,0,0,1388,1408,1,0,0,0,1389,1387,1,0,0,0,1390,1396,3,186,
  	93,0,1391,1392,5,41,0,0,1392,1393,5,20,0,0,1393,1395,3,186,93,0,1394,
  	1391,1,0,0,0,1395,1398,1,0,0,0,1396,1394,1,0,0,0,1396,1397,1,0,0,0,1397,
  	1408,1,0,0,0,1398,1396,1,0,0,0,1399,1404,3,186,93,0,1400,1401,5,73,0,
  	0,1401,1403,3,186,93,0,1402,1400,1,0,0,0,1403,1406,1,0,0,0,1404,1402,
  	1,0,0,0,1404,1405,1,0,0,0,1405,1408,1,0,0,0,1406,1404,1,0,0,0,1407,1365,
  	1,0,0,0,1407,1373,1,0,0,0,1407,1382,1,0,0,0,1407,1390,1,0,0,0,1407,1399,
  	1,0,0,0,1408,181,1,0,0,0,1409,1414,3,184,92,0,1410,1411,5,8,0,0,1411,
  	1413,3,184,92,0,1412,1410,1,0,0,0,1413,1416,1,0,0,0,1414,1412,1,0,0,0,
  	1414,1415,1,0,0,0,1415,1452,1,0,0,0,1416,1414,1,0,0,0,1417,1422,3,184,
  	92,0,1418,1419,5,41,0,0,1419,1421,3,184,92,0,1420,1418,1,0,0,0,1421,1424,
  	1,0,0,0,1422,1420,1,0,0,0,1422,1423,1,0,0,0,1423,1452,1,0,0,0,1424,1422,
  	1,0,0,0,1425,1430,3,184,92,0,1426,1427,5,73,0,0,1427,1429,3,184,92,0,
  	1428,1426,1,0,0,0,1429,1432,1,0,0,0,1430,1428,1,0,0,0,1430,1431,1,0,0,
  	0,1431,1452,1,0,0,0,1432,1430,1,0,0,0,1433,1439,3,184,92,0,1434,1435,
  	5,8,0,0,1435,1436,5,66,0,0,1436,1438,3,184,92,0,1437,1434,1,0,0,0,1438,
  	1441,1,0,0,0,1439,1437,1,0,0,0,1439,1440,1,0,0,0,1440,1452,1,0,0,0,1441,
  	1439,1,0,0,0,1442,1448,3,184,92,0,1443,1444,5,41,0,0,1444,1445,5,20,0,
  	0,1445,1447,3,184,92,0,1446,1443,1,0,0,0,1447,1450,1,0,0,0,1448,1446,
  	1,0,0,0,1448,1449,1,0,0,0,1449,1452,1,0,0,0,1450,1448,1,0,0,0,1451,1409,
  	1,0,0,0,1451,1417,1,0,0,0,1451,1425,1,0,0,0,1451,1433,1,0,0,0,1451,1442,
  	1,0,0,0,1452,183,1,0,0,0,1453,1457,3,192,96,0,1454,1455,3,202,101,0,1455,
  	1456,3,192,96,0,1456,1458,1,0,0,0,1457,1454,1,0,0,0,1457,1458,1,0,0,0,
  	1458,185,1,0,0,0,1459,1463,3,192,96,0,1460,1461,3,202,101,0,1461,1462,
  	3,192,96,0,1462,1464,1,0,0,0,1463,1460,1,0,0,0,1463,1464,1,0,0,0,1464,
  	1473,1,0,0,0,1465,1467,3,192,96,0,1466,1468,5,38,0,0,1467,1466,1,0,0,
  	0,1467,1468,1,0,0,0,1468,1469,1,0,0,0,1469,1470,5,31,0,0,1470,1471,3,
  	188,94,0,1471,1473,1,0,0,0,1472,1459,1,0,0,0,1472,1465,1,0,0,0,1473,187,
  	1,0,0,0,1474,1479,3,190,95,0,1475,1476,5,107,0,0,1476,1478,3,190,95,0,
  	1477,1475,1,0,0,0,1478,1481,1,0,0,0,1479,1477,1,0,0,0,1479,1480,1,0,0,
  	0,1480,189,1,0,0,0,1481,1479,1,0,0,0,1482,1486,3,182,91,0,1483,1486,3,
  	40,20,0,1484,1486,3,22,11,0,1485,1482,1,0,0,0,1485,1483,1,0,0,0,1485,
  	1484,1,0,0,0,1486,191,1,0,0,0,1487,1489,3,206,103,0,1488,1487,1,0,0,0,
  	1488,1489,1,0,0,0,1489,1490,1,0,0,0,1490,1496,3,194,97,0,1491,1492,3,
  	204,102,0,1492,1493,3,194,97,0,1493,1495,1,0,0,0,1494,1491,1,0,0,0,1495,
  	1498,1,0,0,0,1496,1494,1,0,0,0,1496,1497,1,0,0,0,1497,193,1,0,0,0,1498,
  	1496,1,0,0,0,1499,1505,3,196,98,0,1500,1501,3,208,104,0,1501,1502,3,196,
  	98,0,1502,1504,1,0,0,0,1503,1500,1,0,0,0,1504,1507,1,0,0,0,1505,1503,
  	1,0,0,0,1505,1506,1,0,0,0,1506,195,1,0,0,0,1507,1505,1,0,0,0,1508,1511,
  	3,198,99,0,1509,1510,5,113,0,0,1510,1512,3,198,99,0,1511,1509,1,0,0,0,
  	1511,1512,1,0,0,0,1512,1518,1,0,0,0,1513,1514,5,2,0,0,1514,1518,3,198,
  	99,0,1515,1516,5,38,0,0,1516,1518,3,198,99,0,1517,1508,1,0,0,0,1517,1513,
  	1,0,0,0,1517,1515,1,0,0,0,1518,197,1,0,0,0,1519,1538,3,2,1,0,1520,1538,
  	5,39,0,0,1521,1538,3,6,3,0,1522,1538,3,158,79,0,1523,1538,3,146,73,0,
  	1524,1538,3,232,116,0,1525,1526,5,94,0,0,1526,1527,3,180,90,0,1527,1528,
  	5,95,0,0,1528,1538,1,0,0,0,1529,1530,5,94,0,0,1530,1531,3,212,106,0,1531,
  	1532,5,95,0,0,1532,1538,1,0,0,0,1533,1534,5,94,0,0,1534,1535,3,230,115,
  	0,1535,1536,5,95,0,0,1536,1538,1,0,0,0,1537,1519,1,0,0,0,1537,1520,1,
  	0,0,0,1537,1521,1,0,0,0,1537,1522,1,0,0,0,1537,1523,1,0,0,0,1537,1524,
  	1,0,0,0,1537,1525,1,0,0,0,1537,1529,1,0,0,0,1537,1533,1,0,0,0,1538,199,
  	1,0,0,0,1539,1540,7,2,0,0,1540,201,1,0,0,0,1541,1542,7,3,0,0,1542,203,
  	1,0,0,0,1543,1544,7,4,0,0,1544,205,1,0,0,0,1545,1546,7,5,0,0,1546,207,
  	1,0,0,0,1547,1548,7,6,0,0,1548,209,1,0,0,0,1549,1550,7,7,0,0,1550,211,
  	1,0,0,0,1551,1554,3,214,107,0,1552,1554,3,218,109,0,1553,1551,1,0,0,0,
  	1553,1552,1,0,0,0,1554,213,1,0,0,0,1555,1556,5,30,0,0,1556,1557,3,216,
  	108,0,1557,1558,5,66,0,0,1558,1566,3,180,90,0,1559,1560,5,21,0,0,1560,
  	1561,3,216,108,0,1561,1562,5,66,0,0,1562,1563,3,180,90,0,1563,1565,1,
  	0,0,0,1564,1559,1,0,0,0,1565,1568,1,0,0,0,1566,1564,1,0,0,0,1566,1567,
  	1,0,0,0,1567,1571,1,0,0,0,1568,1566,1,0,0,0,1569,1570,5,20,0,0,1570,1572,
  	3,180,90,0,1571,1569,1,0,0,0,1571,1572,1,0,0,0,1572,215,1,0,0,0,1573,
  	1574,3,180,90,0,1574,217,1,0,0,0,1575,1576,5,13,0,0,1576,1577,3,180,90,
  	0,1577,1578,5,33,0,0,1578,1583,3,220,110,0,1579,1580,5,98,0,0,1580,1582,
  	3,220,110,0,1581,1579,1,0,0,0,1582,1585,1,0,0,0,1583,1581,1,0,0,0,1583,
  	1584,1,0,0,0,1584,219,1,0,0,0,1585,1583,1,0,0,0,1586,1587,5,70,0,0,1587,
  	1588,3,110,55,0,1588,1589,5,111,0,0,1589,1590,3,180,90,0,1590,221,1,0,
  	0,0,1591,1592,5,26,0,0,1592,1593,3,224,112,0,1593,1594,3,260,130,0,1594,
  	1595,5,111,0,0,1595,1596,3,226,113,0,1596,1604,1,0,0,0,1597,1598,5,26,
  	0,0,1598,1599,3,224,112,0,1599,1600,3,262,131,0,1600,1601,5,111,0,0,1601,
  	1602,3,226,113,0,1602,1604,1,0,0,0,1603,1591,1,0,0,0,1603,1597,1,0,0,
  	0,1604,223,1,0,0,0,1605,1606,7,8,0,0,1606,225,1,0,0,0,1607,1608,3,180,
  	90,0,1608,227,1,0,0,0,1609,1610,3,22,11,0,1610,1611,5,94,0,0,1611,1612,
  	3,180,90,0,1612,1613,5,95,0,0,1613,1620,1,0,0,0,1614,1615,3,22,11,0,1615,
  	1616,5,94,0,0,1616,1617,3,146,73,0,1617,1618,5,95,0,0,1618,1620,1,0,0,
  	0,1619,1609,1,0,0,0,1619,1614,1,0,0,0,1620,229,1,0,0,0,1621,1622,3,22,
  	11,0,1622,1623,5,121,0,0,1623,1624,5,94,0,0,1624,1625,3,180,90,0,1625,
  	1626,5,95,0,0,1626,1634,1,0,0,0,1627,1628,3,22,11,0,1628,1629,5,121,0,
  	0,1629,1630,5,94,0,0,1630,1631,3,158,79,0,1631,1632,5,95,0,0,1632,1634,
  	1,0,0,0,1633,1621,1,0,0,0,1633,1627,1,0,0,0,1634,231,1,0,0,0,1635,1637,
  	5,37,0,0,1636,1638,3,234,117,0,1637,1636,1,0,0,0,1637,1638,1,0,0,0,1638,
  	1639,1,0,0,0,1639,1646,3,20,10,0,1640,1642,5,37,0,0,1641,1643,3,234,117,
  	0,1642,1641,1,0,0,0,1642,1643,1,0,0,0,1643,1644,1,0,0,0,1644,1646,3,230,
  	115,0,1645,1635,1,0,0,0,1645,1640,1,0,0,0,1646,233,1,0,0,0,1647,1648,
  	5,94,0,0,1648,1649,3,146,73,0,1649,1650,5,95,0,0,1650,235,1,0,0,0,1651,
  	1653,3,238,119,0,1652,1651,1,0,0,0,1653,1654,1,0,0,0,1654,1652,1,0,0,
  	0,1654,1655,1,0,0,0,1655,1659,1,0,0,0,1656,1658,3,246,123,0,1657,1656,
  	1,0,0,0,1658,1661,1,0,0,0,1659,1657,1,0,0,0,1659,1660,1,0,0,0,1660,237,
  	1,0,0,0,1661,1659,1,0,0,0,1662,1664,3,246,123,0,1663,1662,1,0,0,0,1664,
  	1667,1,0,0,0,1665,1663,1,0,0,0,1665,1666,1,0,0,0,1666,1668,1,0,0,0,1667,
  	1665,1,0,0,0,1668,1677,3,240,120,0,1669,1671,3,246,123,0,1670,1669,1,
  	0,0,0,1671,1674,1,0,0,0,1672,1670,1,0,0,0,1672,1673,1,0,0,0,1673,1675,
  	1,0,0,0,1674,1672,1,0,0,0,1675,1677,3,242,121,0,1676,1665,1,0,0,0,1676,
  	1672,1,0,0,0,1677,239,1,0,0,0,1678,1691,3,244,122,0,1679,1691,3,248,124,
  	0,1680,1691,3,266,133,0,1681,1691,3,268,134,0,1682,1691,3,298,149,0,1683,
  	1691,3,306,153,0,1684,1691,3,390,195,0,1685,1691,3,392,196,0,1686,1691,
  	3,394,197,0,1687,1691,3,432,216,0,1688,1691,3,476,238,0,1689,1691,3,230,
  	115,0,1690,1678,1,0,0,0,1690,1679,1,0,0,0,1690,1680,1,0,0,0,1690,1681,
  	1,0,0,0,1690,1682,1,0,0,0,1690,1683,1,0,0,0,1690,1684,1,0,0,0,1690,1685,
  	1,0,0,0,1690,1686,1,0,0,0,1690,1687,1,0,0,0,1690,1688,1,0,0,0,1690,1689,
  	1,0,0,0,1691,241,1,0,0,0,1692,1700,3,250,125,0,1693,1700,3,252,126,0,
  	1694,1700,3,256,128,0,1695,1700,3,264,132,0,1696,1700,3,310,155,0,1697,
  	1700,3,374,187,0,1698,1700,3,402,201,0,1699,1692,1,0,0,0,1699,1693,1,
  	0,0,0,1699,1694,1,0,0,0,1699,1695,1,0,0,0,1699,1696,1,0,0,0,1699,1697,
  	1,0,0,0,1699,1698,1,0,0,0,1700,243,1,0,0,0,1701,1702,5,39,0,0,1702,1703,
  	5,102,0,0,1703,245,1,0,0,0,1704,1705,3,148,74,0,1705,247,1,0,0,0,1706,
  	1707,3,146,73,0,1707,1708,5,114,0,0,1708,1709,3,180,90,0,1709,1710,5,
  	102,0,0,1710,249,1,0,0,0,1711,1712,5,30,0,0,1712,1713,3,216,108,0,1713,
  	1714,5,66,0,0,1714,1722,3,236,118,0,1715,1716,5,21,0,0,1716,1717,3,216,
  	108,0,1717,1718,5,66,0,0,1718,1719,3,236,118,0,1719,1721,1,0,0,0,1720,
  	1715,1,0,0,0,1721,1724,1,0,0,0,1722,1720,1,0,0,0,1722,1723,1,0,0,0,1723,
  	1727,1,0,0,0,1724,1722,1,0,0,0,1725,1726,5,20,0,0,1726,1728,3,236,118,
  	0,1727,1725,1,0,0,0,1727,1728,1,0,0,0,1728,1729,1,0,0,0,1729,1730,5,22,
  	0,0,1730,1731,5,30,0,0,1731,1732,5,102,0,0,1732,251,1,0,0,0,1733,1734,
  	5,13,0,0,1734,1735,3,180,90,0,1735,1736,5,33,0,0,1736,1740,3,254,127,
  	0,1737,1739,3,254,127,0,1738,1737,1,0,0,0,1739,1742,1,0,0,0,1740,1738,
  	1,0,0,0,1740,1741,1,0,0,0,1741,1743,1,0,0,0,1742,1740,1,0,0,0,1743,1744,
  	5,22,0,0,1744,1745,5,13,0,0,1745,1746,5,102,0,0,1746,253,1,0,0,0,1747,
  	1748,5,70,0,0,1748,1749,3,110,55,0,1749,1750,5,111,0,0,1750,1751,3,236,
  	118,0,1751,255,1,0,0,0,1752,1753,3,148,74,0,1753,1754,5,101,0,0,1754,
  	1756,1,0,0,0,1755,1752,1,0,0,0,1755,1756,1,0,0,0,1756,1758,1,0,0,0,1757,
  	1759,3,258,129,0,1758,1757,1,0,0,0,1758,1759,1,0,0,0,1759,1760,1,0,0,
  	0,1760,1761,5,35,0,0,1761,1762,3,236,118,0,1762,1763,5,22,0,0,1763,1765,
  	5,35,0,0,1764,1766,3,0,0,0,1765,1764,1,0,0,0,1765,1766,1,0,0,0,1766,1767,
  	1,0,0,0,1767,1768,5,102,0,0,1768,257,1,0,0,0,1769,1770,5,71,0,0,1770,
  	1776,3,216,108,0,1771,1772,5,26,0,0,1772,1776,3,260,130,0,1773,1774,5,
  	26,0,0,1774,1776,3,262,131,0,1775,1769,1,0,0,0,1775,1771,1,0,0,0,1775,
  	1773,1,0,0,0,1776,259,1,0,0,0,1777,1778,3,10,5,0,1778,1780,5,31,0,0,1779,
  	1781,5,57,0,0,1780,1779,1,0,0,0,1780,1781,1,0,0,0,1781,1782,1,0,0,0,1782,
  	1783,3,74,37,0,1783,261,1,0,0,0,1784,1785,3,10,5,0,1785,1787,5,31,0,0,
  	1786,1788,5,57,0,0,1787,1786,1,0,0,0,1787,1788,1,0,0,0,1788,1789,1,0,
  	0,0,1789,1790,3,146,73,0,1790,1801,1,0,0,0,1791,1792,3,10,5,0,1792,1793,
  	5,101,0,0,1793,1794,3,20,10,0,1794,1796,5,40,0,0,1795,1797,5,57,0,0,1796,
  	1795,1,0,0,0,1796,1797,1,0,0,0,1797,1798,1,0,0,0,1798,1799,3,146,73,0,
  	1799,1801,1,0,0,0,1800,1784,1,0,0,0,1800,1791,1,0,0,0,1801,263,1,0,0,
  	0,1802,1803,3,148,74,0,1803,1804,5,101,0,0,1804,1806,1,0,0,0,1805,1802,
  	1,0,0,0,1805,1806,1,0,0,0,1806,1809,1,0,0,0,1807,1808,5,15,0,0,1808,1810,
  	3,136,68,0,1809,1807,1,0,0,0,1809,1810,1,0,0,0,1810,1811,1,0,0,0,1811,
  	1812,5,11,0,0,1812,1813,3,468,234,0,1813,1815,5,22,0,0,1814,1816,3,0,
  	0,0,1815,1814,1,0,0,0,1815,1816,1,0,0,0,1816,1817,1,0,0,0,1817,1818,5,
  	102,0,0,1818,265,1,0,0,0,1819,1821,5,25,0,0,1820,1822,3,146,73,0,1821,
  	1820,1,0,0,0,1821,1822,1,0,0,0,1822,1825,1,0,0,0,1823,1824,5,70,0,0,1824,
  	1826,3,216,108,0,1825,1823,1,0,0,0,1825,1826,1,0,0,0,1826,1827,1,0,0,
  	0,1827,1828,5,102,0,0,1828,267,1,0,0,0,1829,1830,5,29,0,0,1830,1831,3,
  	146,73,0,1831,269,1,0,0,0,1832,1834,3,328,164,0,1833,1832,1,0,0,0,1833,
  	1834,1,0,0,0,1834,1835,1,0,0,0,1835,1837,3,272,136,0,1836,1838,3,546,
  	273,0,1837,1836,1,0,0,0,1837,1838,1,0,0,0,1838,1839,1,0,0,0,1839,1840,
  	5,102,0,0,1840,271,1,0,0,0,1841,1844,3,274,137,0,1842,1844,3,276,138,
  	0,1843,1841,1,0,0,0,1843,1842,1,0,0,0,1844,273,1,0,0,0,1845,1846,5,48,
  	0,0,1846,1848,3,282,141,0,1847,1849,3,290,145,0,1848,1847,1,0,0,0,1848,
  	1849,1,0,0,0,1849,275,1,0,0,0,1850,1851,5,27,0,0,1851,1852,3,280,140,
  	0,1852,1853,3,288,144,0,1853,277,1,0,0,0,1854,1855,3,146,73,0,1855,1856,
  	5,100,0,0,1856,1858,1,0,0,0,1857,1854,1,0,0,0,1857,1858,1,0,0,0,1858,
  	1859,1,0,0,0,1859,1862,3,0,0,0,1860,1862,3,284,142,0,1861,1857,1,0,0,
  	0,1861,1860,1,0,0,0,1862,279,1,0,0,0,1863,1866,3,282,141,0,1864,1866,
  	3,286,143,0,1865,1863,1,0,0,0,1865,1864,1,0,0,0,1866,281,1,0,0,0,1867,
  	1868,3,146,73,0,1868,1869,5,100,0,0,1869,1871,1,0,0,0,1870,1867,1,0,0,
  	0,1870,1871,1,0,0,0,1871,1872,1,0,0,0,1872,1873,3,10,5,0,1873,283,1,0,
  	0,0,1874,1875,3,6,3,0,1875,285,1,0,0,0,1876,1877,3,284,142,0,1877,287,
  	1,0,0,0,1878,1880,3,290,145,0,1879,1878,1,0,0,0,1879,1880,1,0,0,0,1880,
  	1881,1,0,0,0,1881,1883,5,56,0,0,1882,1884,3,130,65,0,1883,1882,1,0,0,
  	0,1883,1884,1,0,0,0,1884,1885,1,0,0,0,1885,1892,3,22,11,0,1886,1888,3,
  	290,145,0,1887,1886,1,0,0,0,1887,1888,1,0,0,0,1888,1889,1,0,0,0,1889,
  	1890,5,56,0,0,1890,1892,3,132,66,0,1891,1879,1,0,0,0,1891,1887,1,0,0,
  	0,1892,289,1,0,0,0,1893,1894,5,94,0,0,1894,1899,3,292,146,0,1895,1896,
  	5,102,0,0,1896,1898,3,292,146,0,1897,1895,1,0,0,0,1898,1901,1,0,0,0,1899,
  	1897,1,0,0,0,1899,1900,1,0,0,0,1900,1902,1,0,0,0,1901,1899,1,0,0,0,1902,
  	1903,5,95,0,0,1903,291,1,0,0,0,1904,1905,3,32,16,0,1905,1907,5,101,0,
  	0,1906,1908,5,6,0,0,1907,1906,1,0,0,0,1907,1908,1,0,0,0,1908,1909,1,0,
  	0,0,1909,1911,3,294,147,0,1910,1912,3,130,65,0,1911,1910,1,0,0,0,1911,
  	1912,1,0,0,0,1912,1913,1,0,0,0,1913,1916,3,22,11,0,1914,1915,5,114,0,
  	0,1915,1917,3,90,45,0,1916,1914,1,0,0,0,1916,1917,1,0,0,0,1917,1926,1,
  	0,0,0,1918,1919,3,32,16,0,1919,1920,5,101,0,0,1920,1923,3,132,66,0,1921,
  	1922,5,114,0,0,1922,1924,3,90,45,0,1923,1921,1,0,0,0,1923,1924,1,0,0,
  	0,1924,1926,1,0,0,0,1925,1904,1,0,0,0,1925,1918,1,0,0,0,1926,293,1,0,
  	0,0,1927,1929,5,31,0,0,1928,1927,1,0,0,0,1928,1929,1,0,0,0,1929,1931,
  	1,0,0,0,1930,1932,5,43,0,0,1931,1930,1,0,0,0,1931,1932,1,0,0,0,1932,295,
  	1,0,0,0,1933,1935,3,328,164,0,1934,1933,1,0,0,0,1934,1935,1,0,0,0,1935,
  	1936,1,0,0,0,1936,1938,3,272,136,0,1937,1939,3,546,273,0,1938,1937,1,
  	0,0,0,1938,1939,1,0,0,0,1939,1940,1,0,0,0,1940,1941,5,33,0,0,1941,1942,
  	3,136,68,0,1942,1943,5,11,0,0,1943,1944,3,468,234,0,1944,1946,5,22,0,
  	0,1945,1947,3,278,139,0,1946,1945,1,0,0,0,1946,1947,1,0,0,0,1947,1948,
  	1,0,0,0,1948,1949,5,102,0,0,1949,297,1,0,0,0,1950,1956,3,146,73,0,1951,
  	1952,3,146,73,0,1952,1953,3,300,150,0,1953,1954,5,102,0,0,1954,1956,1,
  	0,0,0,1955,1950,1,0,0,0,1955,1951,1,0,0,0,1956,299,1,0,0,0,1957,1958,
  	5,94,0,0,1958,1963,3,302,151,0,1959,1960,5,98,0,0,1960,1962,3,302,151,
  	0,1961,1959,1,0,0,0,1962,1965,1,0,0,0,1963,1961,1,0,0,0,1963,1964,1,0,
  	0,0,1964,1966,1,0,0,0,1965,1963,1,0,0,0,1966,1967,5,95,0,0,1967,301,1,
  	0,0,0,1968,1969,3,150,75,0,1969,1970,5,111,0,0,1970,1972,1,0,0,0,1971,
  	1968,1,0,0,0,1971,1972,1,0,0,0,1972,1973,1,0,0,0,1973,1974,3,304,152,
  	0,1974,303,1,0,0,0,1975,1978,3,180,90,0,1976,1978,3,146,73,0,1977,1975,
  	1,0,0,0,1977,1976,1,0,0,0,1978,305,1,0,0,0,1979,1981,5,56,0,0,1980,1982,
  	3,180,90,0,1981,1980,1,0,0,0,1981,1982,1,0,0,0,1982,1983,1,0,0,0,1983,
  	1984,5,102,0,0,1984,307,1,0,0,0,1985,1986,3,10,5,0,1986,1988,5,101,0,
  	0,1987,1989,5,6,0,0,1988,1987,1,0,0,0,1988,1989,1,0,0,0,1989,1991,1,0,
  	0,0,1990,1992,5,14,0,0,1991,1990,1,0,0,0,1991,1992,1,0,0,0,1992,1993,
  	1,0,0,0,1993,1996,3,312,156,0,1994,1995,5,114,0,0,1995,1997,3,180,90,
  	0,1996,1994,1,0,0,0,1996,1997,1,0,0,0,1997,309,1,0,0,0,1998,1999,5,56,
  	0,0,1999,2005,3,308,154,0,2000,2001,5,19,0,0,2001,2002,3,468,234,0,2002,
  	2003,5,22,0,0,2003,2004,5,56,0,0,2004,2006,1,0,0,0,2005,2000,1,0,0,0,
  	2005,2006,1,0,0,0,2006,2007,1,0,0,0,2007,2008,5,102,0,0,2008,311,1,0,
  	0,0,2009,2012,3,20,10,0,2010,2012,3,132,66,0,2011,2009,1,0,0,0,2011,2010,
  	1,0,0,0,2012,313,1,0,0,0,2013,2015,3,328,164,0,2014,2013,1,0,0,0,2014,
  	2015,1,0,0,0,2015,2016,1,0,0,0,2016,2017,3,274,137,0,2017,2018,5,33,0,
  	0,2018,2020,5,39,0,0,2019,2021,3,546,273,0,2020,2019,1,0,0,0,2020,2021,
  	1,0,0,0,2021,2022,1,0,0,0,2022,2023,5,102,0,0,2023,315,1,0,0,0,2024,2026,
  	3,328,164,0,2025,2024,1,0,0,0,2025,2026,1,0,0,0,2026,2027,1,0,0,0,2027,
  	2028,3,276,138,0,2028,2029,5,33,0,0,2029,2030,5,94,0,0,2030,2031,3,180,
  	90,0,2031,2033,5,95,0,0,2032,2034,3,546,273,0,2033,2032,1,0,0,0,2033,
  	2034,1,0,0,0,2034,2035,1,0,0,0,2035,2036,5,102,0,0,2036,317,1,0,0,0,2037,
  	2038,3,320,160,0,2038,2039,5,102,0,0,2039,319,1,0,0,0,2040,2041,5,45,
  	0,0,2041,2043,3,282,141,0,2042,2044,3,546,273,0,2043,2042,1,0,0,0,2043,
  	2044,1,0,0,0,2044,2045,1,0,0,0,2045,2049,5,33,0,0,2046,2048,3,140,70,
  	0,2047,2046,1,0,0,0,2048,2051,1,0,0,0,2049,2047,1,0,0,0,2049,2050,1,0,
  	0,0,2050,2059,1,0,0,0,2051,2049,1,0,0,0,2052,2056,5,47,0,0,2053,2055,
  	3,140,70,0,2054,2053,1,0,0,0,2055,2058,1,0,0,0,2056,2054,1,0,0,0,2056,
  	2057,1,0,0,0,2057,2060,1,0,0,0,2058,2056,1,0,0,0,2059,2052,1,0,0,0,2059,
  	2060,1,0,0,0,2060,2061,1,0,0,0,2061,2068,5,22,0,0,2062,2063,3,146,73,
  	0,2063,2064,5,100,0,0,2064,2066,1,0,0,0,2065,2062,1,0,0,0,2065,2066,1,
  	0,0,0,2066,2067,1,0,0,0,2067,2069,3,0,0,0,2068,2065,1,0,0,0,2068,2069,
  	1,0,0,0,2069,321,1,0,0,0,2070,2071,5,45,0,0,2071,2072,5,12,0,0,2072,2074,
  	3,282,141,0,2073,2075,3,546,273,0,2074,2073,1,0,0,0,2074,2075,1,0,0,0,
  	2075,2076,1,0,0,0,2076,2077,5,33,0,0,2077,2080,3,136,68,0,2078,2079,5,
  	11,0,0,2079,2081,3,468,234,0,2080,2078,1,0,0,0,2080,2081,1,0,0,0,2081,
  	2082,1,0,0,0,2082,2089,5,22,0,0,2083,2084,3,146,73,0,2084,2085,5,100,
  	0,0,2085,2087,1,0,0,0,2086,2083,1,0,0,0,2086,2087,1,0,0,0,2087,2088,1,
  	0,0,0,2088,2090,3,0,0,0,2089,2086,1,0,0,0,2089,2090,1,0,0,0,2090,2091,
  	1,0,0,0,2091,2092,5,102,0,0,2092,323,1,0,0,0,2093,2094,5,67,0,0,2094,
  	2096,3,10,5,0,2095,2097,3,82,41,0,2096,2095,1,0,0,0,2096,2097,1,0,0,0,
  	2097,2098,1,0,0,0,2098,2103,5,33,0,0,2099,2101,5,3,0,0,2100,2099,1,0,
  	0,0,2100,2101,1,0,0,0,2101,2102,1,0,0,0,2102,2104,5,63,0,0,2103,2100,
  	1,0,0,0,2103,2104,1,0,0,0,2104,2106,1,0,0,0,2105,2107,5,34,0,0,2106,2105,
  	1,0,0,0,2106,2107,1,0,0,0,2107,2108,1,0,0,0,2108,2110,5,47,0,0,2109,2111,
  	3,546,273,0,2110,2109,1,0,0,0,2110,2111,1,0,0,0,2111,2112,1,0,0,0,2112,
  	2113,5,102,0,0,2113,325,1,0,0,0,2114,2115,5,67,0,0,2115,2117,3,10,5,0,
  	2116,2118,3,82,41,0,2117,2116,1,0,0,0,2117,2118,1,0,0,0,2118,2119,1,0,
  	0,0,2119,2121,5,33,0,0,2120,2122,5,3,0,0,2121,2120,1,0,0,0,2121,2122,
  	1,0,0,0,2122,2123,1,0,0,0,2123,2124,7,9,0,0,2124,2125,5,37,0,0,2125,2128,
  	3,20,10,0,2126,2127,5,8,0,0,2127,2129,3,120,60,0,2128,2126,1,0,0,0,2128,
  	2129,1,0,0,0,2129,2130,1,0,0,0,2130,2131,5,72,0,0,2131,2133,5,47,0,0,
  	2132,2134,3,546,273,0,2133,2132,1,0,0,0,2133,2134,1,0,0,0,2134,2135,1,
  	0,0,0,2135,2136,5,102,0,0,2136,327,1,0,0,0,2137,2139,5,38,0,0,2138,2137,
  	1,0,0,0,2138,2139,1,0,0,0,2139,2140,1,0,0,0,2140,2141,5,44,0,0,2141,329,
  	1,0,0,0,2142,2145,3,332,166,0,2143,2145,3,334,167,0,2144,2142,1,0,0,0,
  	2144,2143,1,0,0,0,2145,331,1,0,0,0,2146,2147,5,69,0,0,2147,2152,3,146,
  	73,0,2148,2149,5,98,0,0,2149,2151,3,146,73,0,2150,2148,1,0,0,0,2151,2154,
  	1,0,0,0,2152,2150,1,0,0,0,2152,2153,1,0,0,0,2153,2155,1,0,0,0,2154,2152,
  	1,0,0,0,2155,2156,5,102,0,0,2156,333,1,0,0,0,2157,2159,5,69,0,0,2158,
  	2160,5,7,0,0,2159,2158,1,0,0,0,2159,2160,1,0,0,0,2160,2161,1,0,0,0,2161,
  	2162,5,67,0,0,2162,2167,3,22,11,0,2163,2164,5,98,0,0,2164,2166,3,22,11,
  	0,2165,2163,1,0,0,0,2166,2169,1,0,0,0,2167,2165,1,0,0,0,2167,2168,1,0,
  	0,0,2168,2170,1,0,0,0,2169,2167,1,0,0,0,2170,2171,5,102,0,0,2171,335,
  	1,0,0,0,2172,2178,3,338,169,0,2173,2178,3,340,170,0,2174,2178,3,342,171,
  	0,2175,2178,3,344,172,0,2176,2178,3,346,173,0,2177,2172,1,0,0,0,2177,
  	2173,1,0,0,0,2177,2174,1,0,0,0,2177,2175,1,0,0,0,2177,2176,1,0,0,0,2178,
  	337,1,0,0,0,2179,2180,3,10,5,0,2180,2182,5,101,0,0,2181,2183,3,130,65,
  	0,2182,2181,1,0,0,0,2182,2183,1,0,0,0,2183,2184,1,0,0,0,2184,2185,3,22,
  	11,0,2185,2186,5,54,0,0,2186,2188,3,146,73,0,2187,2189,3,546,273,0,2188,
  	2187,1,0,0,0,2188,2189,1,0,0,0,2189,2190,1,0,0,0,2190,2191,5,102,0,0,
  	2191,2203,1,0,0,0,2192,2193,3,10,5,0,2193,2194,5,101,0,0,2194,2195,3,
  	132,66,0,2195,2196,5,54,0,0,2196,2198,3,146,73,0,2197,2199,3,546,273,
  	0,2198,2197,1,0,0,0,2198,2199,1,0,0,0,2199,2200,1,0,0,0,2200,2201,5,102,
  	0,0,2201,2203,1,0,0,0,2202,2179,1,0,0,0,2202,2192,1,0,0,0,2203,339,1,
  	0,0,0,2204,2205,3,10,5,0,2205,2206,5,101,0,0,2206,2207,5,24,0,0,2207,
  	2208,5,54,0,0,2208,2210,3,146,73,0,2209,2211,3,546,273,0,2210,2209,1,
  	0,0,0,2210,2211,1,0,0,0,2211,2212,1,0,0,0,2212,2213,5,102,0,0,2213,341,
  	1,0,0,0,2214,2215,5,45,0,0,2215,2216,3,282,141,0,2216,2217,5,54,0,0,2217,
  	2219,3,146,73,0,2218,2220,3,546,273,0,2219,2218,1,0,0,0,2219,2220,1,0,
  	0,0,2220,2221,1,0,0,0,2221,2222,5,102,0,0,2222,343,1,0,0,0,2223,2225,
  	3,328,164,0,2224,2223,1,0,0,0,2224,2225,1,0,0,0,2225,2226,1,0,0,0,2226,
  	2227,3,272,136,0,2227,2228,5,54,0,0,2228,2230,3,146,73,0,2229,2231,3,
  	546,273,0,2230,2229,1,0,0,0,2230,2231,1,0,0,0,2231,2232,1,0,0,0,2232,
  	2233,5,102,0,0,2233,345,1,0,0,0,2234,2235,5,28,0,0,2235,2236,5,45,0,0,
  	2236,2237,3,282,141,0,2237,2238,5,54,0,0,2238,2240,3,146,73,0,2239,2241,
  	3,546,273,0,2240,2239,1,0,0,0,2240,2241,1,0,0,0,2241,2242,1,0,0,0,2242,
  	2243,5,102,0,0,2243,2265,1,0,0,0,2244,2245,5,28,0,0,2245,2246,5,48,0,
  	0,2246,2247,3,282,141,0,2247,2248,5,54,0,0,2248,2250,3,146,73,0,2249,
  	2251,3,546,273,0,2250,2249,1,0,0,0,2250,2251,1,0,0,0,2251,2252,1,0,0,
  	0,2252,2253,5,102,0,0,2253,2265,1,0,0,0,2254,2255,5,28,0,0,2255,2256,
  	5,27,0,0,2256,2257,3,282,141,0,2257,2258,5,54,0,0,2258,2260,3,146,73,
  	0,2259,2261,3,546,273,0,2260,2259,1,0,0,0,2260,2261,1,0,0,0,2261,2262,
  	1,0,0,0,2262,2263,5,102,0,0,2263,2265,1,0,0,0,2264,2234,1,0,0,0,2264,
  	2244,1,0,0,0,2264,2254,1,0,0,0,2265,347,1,0,0,0,2266,2267,5,64,0,0,2267,
  	2268,5,67,0,0,2268,2270,3,10,5,0,2269,2271,3,86,43,0,2270,2269,1,0,0,
  	0,2270,2271,1,0,0,0,2271,2273,1,0,0,0,2272,2274,3,546,273,0,2273,2272,
  	1,0,0,0,2273,2274,1,0,0,0,2274,2283,1,0,0,0,2275,2280,5,33,0,0,2276,2277,
  	5,37,0,0,2277,2278,3,120,60,0,2278,2279,5,72,0,0,2279,2281,1,0,0,0,2280,
  	2276,1,0,0,0,2280,2281,1,0,0,0,2281,2282,1,0,0,0,2282,2284,3,352,176,
  	0,2283,2275,1,0,0,0,2283,2284,1,0,0,0,2284,2285,1,0,0,0,2285,2286,5,102,
  	0,0,2286,349,1,0,0,0,2287,2288,5,64,0,0,2288,2290,3,10,5,0,2289,2291,
  	3,546,273,0,2290,2289,1,0,0,0,2290,2291,1,0,0,0,2291,2300,1,0,0,0,2292,
  	2297,5,33,0,0,2293,2294,5,37,0,0,2294,2295,3,120,60,0,2295,2296,5,72,
  	0,0,2296,2298,1,0,0,0,2297,2293,1,0,0,0,2297,2298,1,0,0,0,2298,2299,1,
  	0,0,0,2299,2301,3,352,176,0,2300,2292,1,0,0,0,2300,2301,1,0,0,0,2301,
  	2302,1,0,0,0,2302,2303,5,102,0,0,2303,351,1,0,0,0,2304,2306,3,354,177,
  	0,2305,2304,1,0,0,0,2306,2309,1,0,0,0,2307,2305,1,0,0,0,2307,2308,1,0,
  	0,0,2308,2317,1,0,0,0,2309,2307,1,0,0,0,2310,2314,5,47,0,0,2311,2313,
  	3,354,177,0,2312,2311,1,0,0,0,2313,2316,1,0,0,0,2314,2312,1,0,0,0,2314,
  	2315,1,0,0,0,2315,2318,1,0,0,0,2316,2314,1,0,0,0,2317,2310,1,0,0,0,2317,
  	2318,1,0,0,0,2318,2319,1,0,0,0,2319,2321,5,22,0,0,2320,2322,3,0,0,0,2321,
  	2320,1,0,0,0,2321,2322,1,0,0,0,2322,353,1,0,0,0,2323,2326,3,372,186,0,
  	2324,2326,3,542,271,0,2325,2323,1,0,0,0,2325,2324,1,0,0,0,2326,355,1,
  	0,0,0,2327,2328,5,64,0,0,2328,2329,5,12,0,0,2329,2331,3,10,5,0,2330,2332,
  	3,546,273,0,2331,2330,1,0,0,0,2331,2332,1,0,0,0,2332,2333,1,0,0,0,2333,
  	2334,5,33,0,0,2334,2335,3,136,68,0,2335,2336,5,11,0,0,2336,2337,3,468,
  	234,0,2337,2339,5,22,0,0,2338,2340,3,0,0,0,2339,2338,1,0,0,0,2339,2340,
  	1,0,0,0,2340,2341,1,0,0,0,2341,2342,5,102,0,0,2342,357,1,0,0,0,2343,2344,
  	5,49,0,0,2344,2345,5,67,0,0,2345,2347,3,10,5,0,2346,2348,3,86,43,0,2347,
  	2346,1,0,0,0,2347,2348,1,0,0,0,2348,2350,1,0,0,0,2349,2351,3,546,273,
  	0,2350,2349,1,0,0,0,2350,2351,1,0,0,0,2351,2352,1,0,0,0,2352,2357,5,33,
  	0,0,2353,2354,5,37,0,0,2354,2355,3,120,60,0,2355,2356,5,72,0,0,2356,2358,
  	1,0,0,0,2357,2353,1,0,0,0,2357,2358,1,0,0,0,2358,2359,1,0,0,0,2359,2360,
  	3,362,181,0,2360,2361,5,102,0,0,2361,359,1,0,0,0,2362,2363,5,49,0,0,2363,
  	2365,3,10,5,0,2364,2366,3,546,273,0,2365,2364,1,0,0,0,2365,2366,1,0,0,
  	0,2366,2367,1,0,0,0,2367,2372,5,33,0,0,2368,2369,5,37,0,0,2369,2370,3,
  	120,60,0,2370,2371,5,72,0,0,2371,2373,1,0,0,0,2372,2368,1,0,0,0,2372,
  	2373,1,0,0,0,2373,2374,1,0,0,0,2374,2375,3,362,181,0,2375,2376,5,102,
  	0,0,2376,361,1,0,0,0,2377,2379,3,364,182,0,2378,2377,1,0,0,0,2379,2382,
  	1,0,0,0,2380,2378,1,0,0,0,2380,2381,1,0,0,0,2381,2390,1,0,0,0,2382,2380,
  	1,0,0,0,2383,2387,5,47,0,0,2384,2386,3,366,183,0,2385,2384,1,0,0,0,2386,
  	2389,1,0,0,0,2387,2385,1,0,0,0,2387,2388,1,0,0,0,2388,2391,1,0,0,0,2389,
  	2387,1,0,0,0,2390,2383,1,0,0,0,2390,2391,1,0,0,0,2391,2392,1,0,0,0,2392,
  	2394,5,22,0,0,2393,2395,3,0,0,0,2394,2393,1,0,0,0,2394,2395,1,0,0,0,2395,
  	363,1,0,0,0,2396,2400,3,270,135,0,2397,2400,3,372,186,0,2398,2400,3,542,
  	271,0,2399,2396,1,0,0,0,2399,2397,1,0,0,0,2399,2398,1,0,0,0,2400,365,
  	1,0,0,0,2401,2404,3,364,182,0,2402,2404,3,104,52,0,2403,2401,1,0,0,0,
  	2403,2402,1,0,0,0,2404,367,1,0,0,0,2405,2406,5,49,0,0,2406,2407,5,12,
  	0,0,2407,2409,3,10,5,0,2408,2410,3,546,273,0,2409,2408,1,0,0,0,2409,2410,
  	1,0,0,0,2410,2411,1,0,0,0,2411,2415,5,33,0,0,2412,2414,3,370,185,0,2413,
  	2412,1,0,0,0,2414,2417,1,0,0,0,2415,2413,1,0,0,0,2415,2416,1,0,0,0,2416,
  	2418,1,0,0,0,2417,2415,1,0,0,0,2418,2420,5,22,0,0,2419,2421,3,0,0,0,2420,
  	2419,1,0,0,0,2420,2421,1,0,0,0,2421,2422,1,0,0,0,2422,2423,5,102,0,0,
  	2423,369,1,0,0,0,2424,2429,3,270,135,0,2425,2429,3,296,148,0,2426,2429,
  	3,380,190,0,2427,2429,3,542,271,0,2428,2424,1,0,0,0,2428,2425,1,0,0,0,
  	2428,2426,1,0,0,0,2428,2427,1,0,0,0,2429,371,1,0,0,0,2430,2432,3,328,
  	164,0,2431,2430,1,0,0,0,2431,2432,1,0,0,0,2432,2433,1,0,0,0,2433,2434,
  	5,23,0,0,2434,2439,3,10,5,0,2435,2436,5,94,0,0,2436,2437,3,74,37,0,2437,
  	2438,5,95,0,0,2438,2440,1,0,0,0,2439,2435,1,0,0,0,2439,2440,1,0,0,0,2440,
  	2442,1,0,0,0,2441,2443,3,290,145,0,2442,2441,1,0,0,0,2442,2443,1,0,0,
  	0,2443,2445,1,0,0,0,2444,2446,3,546,273,0,2445,2444,1,0,0,0,2445,2446,
  	1,0,0,0,2446,2447,1,0,0,0,2447,2448,5,102,0,0,2448,373,1,0,0,0,2449,2450,
  	5,4,0,0,2450,2455,3,376,188,0,2451,2452,5,94,0,0,2452,2453,3,378,189,
  	0,2453,2454,5,95,0,0,2454,2456,1,0,0,0,2455,2451,1,0,0,0,2455,2456,1,
  	0,0,0,2456,2458,1,0,0,0,2457,2459,3,290,145,0,2458,2457,1,0,0,0,2458,
  	2459,1,0,0,0,2459,2466,1,0,0,0,2460,2461,5,19,0,0,2461,2462,3,468,234,
  	0,2462,2464,5,22,0,0,2463,2465,3,382,191,0,2464,2463,1,0,0,0,2464,2465,
  	1,0,0,0,2465,2467,1,0,0,0,2466,2460,1,0,0,0,2466,2467,1,0,0,0,2467,2468,
  	1,0,0,0,2468,2469,5,102,0,0,2469,375,1,0,0,0,2470,2471,3,148,74,0,2471,
  	377,1,0,0,0,2472,2473,3,180,90,0,2473,379,1,0,0,0,2474,2475,5,23,0,0,
  	2475,2476,3,10,5,0,2476,2477,3,384,192,0,2477,2478,3,386,193,0,2478,2479,
  	5,33,0,0,2479,2480,3,136,68,0,2480,2481,5,11,0,0,2481,2482,3,468,234,
  	0,2482,2484,5,22,0,0,2483,2485,3,382,191,0,2484,2483,1,0,0,0,2484,2485,
  	1,0,0,0,2485,2486,1,0,0,0,2486,2487,5,102,0,0,2487,381,1,0,0,0,2488,2489,
  	3,0,0,0,2489,383,1,0,0,0,2490,2491,5,94,0,0,2491,2492,3,388,194,0,2492,
  	2493,5,95,0,0,2493,2495,1,0,0,0,2494,2490,1,0,0,0,2494,2495,1,0,0,0,2495,
  	2497,1,0,0,0,2496,2498,3,290,145,0,2497,2496,1,0,0,0,2497,2498,1,0,0,
  	0,2498,385,1,0,0,0,2499,2500,5,70,0,0,2500,2501,3,216,108,0,2501,387,
  	1,0,0,0,2502,2503,5,26,0,0,2503,2504,3,10,5,0,2504,2505,5,31,0,0,2505,
  	2506,3,74,37,0,2506,389,1,0,0,0,2507,2509,3,146,73,0,2508,2510,3,300,
  	150,0,2509,2508,1,0,0,0,2509,2510,1,0,0,0,2510,2511,1,0,0,0,2511,2512,
  	5,102,0,0,2512,391,1,0,0,0,2513,2514,5,55,0,0,2514,2517,3,146,73,0,2515,
  	2516,5,72,0,0,2516,2518,5,1,0,0,2517,2515,1,0,0,0,2517,2518,1,0,0,0,2518,
  	2519,1,0,0,0,2519,2520,5,102,0,0,2520,393,1,0,0,0,2521,2524,3,396,198,
  	0,2522,2524,3,398,199,0,2523,2521,1,0,0,0,2523,2522,1,0,0,0,2524,395,
  	1,0,0,0,2525,2526,5,16,0,0,2526,2527,5,68,0,0,2527,2528,3,400,200,0,2528,
  	397,1,0,0,0,2529,2530,5,16,0,0,2530,2531,3,400,200,0,2531,399,1,0,0,0,
  	2532,2533,3,180,90,0,2533,401,1,0,0,0,2534,2539,3,404,202,0,2535,2539,
  	3,416,208,0,2536,2539,3,422,211,0,2537,2539,3,424,212,0,2538,2534,1,0,
  	0,0,2538,2535,1,0,0,0,2538,2536,1,0,0,0,2538,2537,1,0,0,0,2539,403,1,
  	0,0,0,2540,2542,5,58,0,0,2541,2543,3,406,203,0,2542,2541,1,0,0,0,2542,
  	2543,1,0,0,0,2543,2544,1,0,0,0,2544,2552,3,408,204,0,2545,2547,5,41,0,
  	0,2546,2548,3,406,203,0,2547,2546,1,0,0,0,2547,2548,1,0,0,0,2548,2549,
  	1,0,0,0,2549,2551,3,408,204,0,2550,2545,1,0,0,0,2551,2554,1,0,0,0,2552,
  	2550,1,0,0,0,2552,2553,1,0,0,0,2553,2557,1,0,0,0,2554,2552,1,0,0,0,2555,
  	2556,5,20,0,0,2556,2558,3,236,118,0,2557,2555,1,0,0,0,2557,2558,1,0,0,
  	0,2558,2559,1,0,0,0,2559,2560,5,22,0,0,2560,2561,5,58,0,0,2561,2562,5,
  	102,0,0,2562,405,1,0,0,0,2563,2564,5,70,0,0,2564,2565,3,216,108,0,2565,
  	2566,5,111,0,0,2566,407,1,0,0,0,2567,2571,3,410,205,0,2568,2571,3,412,
  	206,0,2569,2571,3,414,207,0,2570,2567,1,0,0,0,2570,2568,1,0,0,0,2570,
  	2569,1,0,0,0,2571,409,1,0,0,0,2572,2574,3,374,187,0,2573,2575,3,236,118,
  	0,2574,2573,1,0,0,0,2574,2575,1,0,0,0,2575,411,1,0,0,0,2576,2578,3,394,
  	197,0,2577,2579,3,236,118,0,2578,2577,1,0,0,0,2578,2579,1,0,0,0,2579,
  	413,1,0,0,0,2580,2581,5,65,0,0,2581,2582,5,102,0,0,2582,415,1,0,0,0,2583,
  	2584,5,58,0,0,2584,2585,3,418,209,0,2585,2586,5,41,0,0,2586,2587,3,412,
  	206,0,2587,2588,5,22,0,0,2588,2589,5,58,0,0,2589,2590,5,102,0,0,2590,
  	417,1,0,0,0,2591,2593,3,420,210,0,2592,2594,3,236,118,0,2593,2592,1,0,
  	0,0,2593,2594,1,0,0,0,2594,419,1,0,0,0,2595,2598,3,298,149,0,2596,2598,
  	3,390,195,0,2597,2595,1,0,0,0,2597,2596,1,0,0,0,2598,421,1,0,0,0,2599,
  	2600,5,58,0,0,2600,2601,3,418,209,0,2601,2602,5,20,0,0,2602,2603,3,236,
  	118,0,2603,2604,5,22,0,0,2604,2605,5,58,0,0,2605,2606,5,102,0,0,2606,
  	423,1,0,0,0,2607,2608,5,58,0,0,2608,2609,3,426,213,0,2609,2610,5,66,0,
  	0,2610,2611,5,1,0,0,2611,2612,3,430,215,0,2612,2613,5,22,0,0,2613,2614,
  	5,58,0,0,2614,2615,5,102,0,0,2615,425,1,0,0,0,2616,2618,3,428,214,0,2617,
  	2619,3,236,118,0,2618,2617,1,0,0,0,2618,2619,1,0,0,0,2619,427,1,0,0,0,
  	2620,2623,3,420,210,0,2621,2623,3,394,197,0,2622,2620,1,0,0,0,2622,2621,
  	1,0,0,0,2623,429,1,0,0,0,2624,2625,3,236,118,0,2625,431,1,0,0,0,2626,
  	2627,5,1,0,0,2627,2632,3,146,73,0,2628,2629,5,98,0,0,2629,2631,3,146,
  	73,0,2630,2628,1,0,0,0,2631,2634,1,0,0,0,2632,2630,1,0,0,0,2632,2633,
  	1,0,0,0,2633,433,1,0,0,0,2634,2632,1,0,0,0,2635,2637,3,436,218,0,2636,
  	2635,1,0,0,0,2637,2640,1,0,0,0,2638,2636,1,0,0,0,2638,2639,1,0,0,0,2639,
  	2641,1,0,0,0,2640,2638,1,0,0,0,2641,2642,5,0,0,1,2642,435,1,0,0,0,2643,
  	2645,3,446,223,0,2644,2643,1,0,0,0,2645,2648,1,0,0,0,2646,2644,1,0,0,
  	0,2646,2647,1,0,0,0,2647,2651,1,0,0,0,2648,2646,1,0,0,0,2649,2652,3,438,
  	219,0,2650,2652,3,464,232,0,2651,2649,1,0,0,0,2651,2650,1,0,0,0,2652,
  	437,1,0,0,0,2653,2655,5,47,0,0,2654,2653,1,0,0,0,2654,2655,1,0,0,0,2655,
  	2656,1,0,0,0,2656,2663,3,440,220,0,2657,2663,3,444,222,0,2658,2660,5,
  	47,0,0,2659,2658,1,0,0,0,2659,2660,1,0,0,0,2660,2661,1,0,0,0,2661,2663,
  	3,442,221,0,2662,2654,1,0,0,0,2662,2657,1,0,0,0,2662,2659,1,0,0,0,2663,
  	439,1,0,0,0,2664,2669,3,270,135,0,2665,2669,3,318,159,0,2666,2669,3,478,
  	239,0,2667,2669,3,488,244,0,2668,2664,1,0,0,0,2668,2665,1,0,0,0,2668,
  	2666,1,0,0,0,2668,2667,1,0,0,0,2669,441,1,0,0,0,2670,2674,3,342,171,0,
  	2671,2674,3,346,173,0,2672,2674,3,344,172,0,2673,2670,1,0,0,0,2673,2671,
  	1,0,0,0,2673,2672,1,0,0,0,2674,443,1,0,0,0,2675,2678,3,296,148,0,2676,
  	2678,3,322,161,0,2677,2675,1,0,0,0,2677,2676,1,0,0,0,2678,445,1,0,0,0,
  	2679,2682,3,448,224,0,2680,2682,3,330,165,0,2681,2679,1,0,0,0,2681,2680,
  	1,0,0,0,2682,447,1,0,0,0,2683,2686,3,450,225,0,2684,2686,3,452,226,0,
  	2685,2683,1,0,0,0,2685,2684,1,0,0,0,2686,449,1,0,0,0,2687,2689,5,34,0,
  	0,2688,2690,5,47,0,0,2689,2688,1,0,0,0,2689,2690,1,0,0,0,2690,2691,1,
  	0,0,0,2691,2692,5,72,0,0,2692,2697,3,146,73,0,2693,2694,5,98,0,0,2694,
  	2696,3,146,73,0,2695,2693,1,0,0,0,2696,2699,1,0,0,0,2697,2695,1,0,0,0,
  	2697,2698,1,0,0,0,2698,2700,1,0,0,0,2699,2697,1,0,0,0,2700,2701,5,102,
  	0,0,2701,451,1,0,0,0,2702,2704,5,47,0,0,2703,2702,1,0,0,0,2703,2704,1,
  	0,0,0,2704,2705,1,0,0,0,2705,2706,5,72,0,0,2706,2711,3,146,73,0,2707,
  	2708,5,98,0,0,2708,2710,3,146,73,0,2709,2707,1,0,0,0,2710,2713,1,0,0,
  	0,2711,2709,1,0,0,0,2711,2712,1,0,0,0,2712,2714,1,0,0,0,2713,2711,1,0,
  	0,0,2714,2715,5,102,0,0,2715,453,1,0,0,0,2716,2721,3,456,228,0,2717,2721,
  	3,458,229,0,2718,2721,3,460,230,0,2719,2721,3,462,231,0,2720,2716,1,0,
  	0,0,2720,2717,1,0,0,0,2720,2718,1,0,0,0,2720,2719,1,0,0,0,2721,455,1,
  	0,0,0,2722,2724,3,328,164,0,2723,2722,1,0,0,0,2723,2724,1,0,0,0,2724,
  	2725,1,0,0,0,2725,2726,3,272,136,0,2726,2727,5,33,0,0,2727,2729,5,59,
  	0,0,2728,2730,3,546,273,0,2729,2728,1,0,0,0,2729,2730,1,0,0,0,2730,2731,
  	1,0,0,0,2731,2732,5,102,0,0,2732,457,1,0,0,0,2733,2734,5,45,0,0,2734,
  	2735,5,12,0,0,2735,2736,3,10,5,0,2736,2737,5,33,0,0,2737,2739,5,59,0,
  	0,2738,2740,3,546,273,0,2739,2738,1,0,0,0,2739,2740,1,0,0,0,2740,2741,
  	1,0,0,0,2741,2742,5,102,0,0,2742,459,1,0,0,0,2743,2744,5,64,0,0,2744,
  	2745,5,12,0,0,2745,2746,3,10,5,0,2746,2747,5,33,0,0,2747,2749,5,59,0,
  	0,2748,2750,3,546,273,0,2749,2748,1,0,0,0,2749,2750,1,0,0,0,2750,2751,
  	1,0,0,0,2751,2752,5,102,0,0,2752,461,1,0,0,0,2753,2754,5,49,0,0,2754,
  	2755,5,12,0,0,2755,2756,3,10,5,0,2756,2757,5,33,0,0,2757,2759,5,59,0,
  	0,2758,2760,3,546,273,0,2759,2758,1,0,0,0,2759,2760,1,0,0,0,2760,2761,
  	1,0,0,0,2761,2762,5,102,0,0,2762,463,1,0,0,0,2763,2764,5,59,0,0,2764,
  	2765,5,94,0,0,2765,2766,3,146,73,0,2766,2767,5,95,0,0,2767,2768,3,144,
  	72,0,2768,465,1,0,0,0,2769,2770,3,32,16,0,2770,2771,5,101,0,0,2771,2773,
  	5,24,0,0,2772,2774,3,546,273,0,2773,2772,1,0,0,0,2773,2774,1,0,0,0,2774,
  	2775,1,0,0,0,2775,2776,5,102,0,0,2776,467,1,0,0,0,2777,2784,3,236,118,
  	0,2778,2780,5,24,0,0,2779,2781,3,470,235,0,2780,2779,1,0,0,0,2781,2782,
  	1,0,0,0,2782,2780,1,0,0,0,2782,2783,1,0,0,0,2783,2785,1,0,0,0,2784,2778,
  	1,0,0,0,2784,2785,1,0,0,0,2785,469,1,0,0,0,2786,2790,5,70,0,0,2787,2788,
  	3,472,236,0,2788,2789,5,101,0,0,2789,2791,1,0,0,0,2790,2787,1,0,0,0,2790,
  	2791,1,0,0,0,2791,2792,1,0,0,0,2792,2797,3,474,237,0,2793,2794,5,107,
  	0,0,2794,2796,3,474,237,0,2795,2793,1,0,0,0,2796,2799,1,0,0,0,2797,2795,
  	1,0,0,0,2797,2798,1,0,0,0,2798,2800,1,0,0,0,2799,2797,1,0,0,0,2800,2801,
  	5,111,0,0,2801,2802,3,236,118,0,2802,471,1,0,0,0,2803,2804,3,10,5,0,2804,
  	473,1,0,0,0,2805,2808,3,146,73,0,2806,2808,5,42,0,0,2807,2805,1,0,0,0,
  	2807,2806,1,0,0,0,2808,475,1,0,0,0,2809,2810,5,50,0,0,2810,2820,5,102,
  	0,0,2811,2812,5,50,0,0,2812,2815,3,146,73,0,2813,2814,5,72,0,0,2814,2816,
  	3,180,90,0,2815,2813,1,0,0,0,2815,2816,1,0,0,0,2816,2817,1,0,0,0,2817,
  	2818,5,102,0,0,2818,2820,1,0,0,0,2819,2809,1,0,0,0,2819,2811,1,0,0,0,
  	2820,477,1,0,0,0,2821,2824,3,480,240,0,2822,2824,3,482,241,0,2823,2821,
  	1,0,0,0,2823,2822,1,0,0,0,2824,479,1,0,0,0,2825,2826,3,484,242,0,2826,
  	2828,3,272,136,0,2827,2829,3,546,273,0,2828,2827,1,0,0,0,2828,2829,1,
  	0,0,0,2829,2830,1,0,0,0,2830,2831,5,102,0,0,2831,481,1,0,0,0,2832,2833,
  	3,484,242,0,2833,2834,3,320,160,0,2834,2835,5,102,0,0,2835,483,1,0,0,
  	0,2836,2841,5,28,0,0,2837,2840,3,486,243,0,2838,2840,3,330,165,0,2839,
  	2837,1,0,0,0,2839,2838,1,0,0,0,2840,2843,1,0,0,0,2841,2839,1,0,0,0,2841,
  	2842,1,0,0,0,2842,485,1,0,0,0,2843,2841,1,0,0,0,2844,2849,3,496,248,0,
  	2845,2849,3,498,249,0,2846,2849,3,528,264,0,2847,2849,3,536,268,0,2848,
  	2844,1,0,0,0,2848,2845,1,0,0,0,2848,2846,1,0,0,0,2848,2847,1,0,0,0,2849,
  	487,1,0,0,0,2850,2851,5,45,0,0,2851,2852,3,282,141,0,2852,2853,5,33,0,
  	0,2853,2854,5,37,0,0,2854,2856,3,146,73,0,2855,2857,3,490,245,0,2856,
  	2855,1,0,0,0,2856,2857,1,0,0,0,2857,2859,1,0,0,0,2858,2860,3,546,273,
  	0,2859,2858,1,0,0,0,2859,2860,1,0,0,0,2860,2890,1,0,0,0,2861,2863,3,328,
  	164,0,2862,2861,1,0,0,0,2862,2863,1,0,0,0,2863,2864,1,0,0,0,2864,2865,
  	5,48,0,0,2865,2866,3,282,141,0,2866,2867,5,33,0,0,2867,2868,5,37,0,0,
  	2868,2870,3,146,73,0,2869,2871,3,490,245,0,2870,2869,1,0,0,0,2870,2871,
  	1,0,0,0,2871,2873,1,0,0,0,2872,2874,3,546,273,0,2873,2872,1,0,0,0,2873,
  	2874,1,0,0,0,2874,2890,1,0,0,0,2875,2877,3,328,164,0,2876,2875,1,0,0,
  	0,2876,2877,1,0,0,0,2877,2878,1,0,0,0,2878,2879,5,27,0,0,2879,2880,3,
  	280,140,0,2880,2881,5,33,0,0,2881,2882,5,37,0,0,2882,2884,3,146,73,0,
  	2883,2885,3,490,245,0,2884,2883,1,0,0,0,2884,2885,1,0,0,0,2885,2887,1,
  	0,0,0,2886,2888,3,546,273,0,2887,2886,1,0,0,0,2887,2888,1,0,0,0,2888,
  	2890,1,0,0,0,2889,2850,1,0,0,0,2889,2862,1,0,0,0,2889,2876,1,0,0,0,2890,
  	489,1,0,0,0,2891,2892,5,94,0,0,2892,2897,3,492,246,0,2893,2894,5,98,0,
  	0,2894,2896,3,492,246,0,2895,2893,1,0,0,0,2896,2899,1,0,0,0,2897,2895,
  	1,0,0,0,2897,2898,1,0,0,0,2898,2900,1,0,0,0,2899,2897,1,0,0,0,2900,2901,
  	5,95,0,0,2901,491,1,0,0,0,2902,2903,3,150,75,0,2903,2904,5,111,0,0,2904,
  	2906,1,0,0,0,2905,2902,1,0,0,0,2905,2906,1,0,0,0,2906,2907,1,0,0,0,2907,
  	2908,3,494,247,0,2908,493,1,0,0,0,2909,2913,3,180,90,0,2910,2913,3,146,
  	73,0,2911,2913,3,22,11,0,2912,2909,1,0,0,0,2912,2910,1,0,0,0,2912,2911,
  	1,0,0,0,2913,495,1,0,0,0,2914,2915,3,32,16,0,2915,2916,5,101,0,0,2916,
  	2918,3,294,147,0,2917,2919,3,130,65,0,2918,2917,1,0,0,0,2918,2919,1,0,
  	0,0,2919,2920,1,0,0,0,2920,2923,3,22,11,0,2921,2922,5,114,0,0,2922,2924,
  	3,90,45,0,2923,2921,1,0,0,0,2923,2924,1,0,0,0,2924,2926,1,0,0,0,2925,
  	2927,3,546,273,0,2926,2925,1,0,0,0,2926,2927,1,0,0,0,2927,2928,1,0,0,
  	0,2928,2929,5,102,0,0,2929,2942,1,0,0,0,2930,2931,3,32,16,0,2931,2932,
  	5,101,0,0,2932,2933,3,294,147,0,2933,2936,3,132,66,0,2934,2935,5,114,
  	0,0,2935,2937,3,90,45,0,2936,2934,1,0,0,0,2936,2937,1,0,0,0,2937,2939,
  	1,0,0,0,2938,2940,3,546,273,0,2939,2938,1,0,0,0,2939,2940,1,0,0,0,2940,
  	2942,1,0,0,0,2941,2914,1,0,0,0,2941,2930,1,0,0,0,2942,497,1,0,0,0,2943,
  	2946,3,500,250,0,2944,2946,3,502,251,0,2945,2943,1,0,0,0,2945,2944,1,
  	0,0,0,2946,499,1,0,0,0,2947,2948,5,67,0,0,2948,2950,3,10,5,0,2949,2951,
  	3,82,41,0,2950,2949,1,0,0,0,2950,2951,1,0,0,0,2951,2952,1,0,0,0,2952,
  	2953,5,33,0,0,2953,2955,3,504,252,0,2954,2956,3,546,273,0,2955,2954,1,
  	0,0,0,2955,2956,1,0,0,0,2956,2957,1,0,0,0,2957,2958,5,102,0,0,2958,501,
  	1,0,0,0,2959,2960,5,67,0,0,2960,2962,3,10,5,0,2961,2963,3,82,41,0,2962,
  	2961,1,0,0,0,2962,2963,1,0,0,0,2963,2966,1,0,0,0,2964,2965,5,33,0,0,2965,
  	2967,5,63,0,0,2966,2964,1,0,0,0,2966,2967,1,0,0,0,2967,2968,1,0,0,0,2968,
  	2969,5,102,0,0,2969,503,1,0,0,0,2970,2982,3,506,253,0,2971,2982,3,508,
  	254,0,2972,2982,3,510,255,0,2973,2982,3,512,256,0,2974,2982,3,514,257,
  	0,2975,2982,3,516,258,0,2976,2982,3,518,259,0,2977,2982,3,520,260,0,2978,
  	2982,3,522,261,0,2979,2982,3,524,262,0,2980,2982,3,526,263,0,2981,2970,
  	1,0,0,0,2981,2971,1,0,0,0,2981,2972,1,0,0,0,2981,2973,1,0,0,0,2981,2974,
  	1,0,0,0,2981,2975,1,0,0,0,2981,2976,1,0,0,0,2981,2977,1,0,0,0,2981,2978,
  	1,0,0,0,2981,2979,1,0,0,0,2981,2980,1,0,0,0,2982,505,1,0,0,0,2983,2985,
  	5,3,0,0,2984,2983,1,0,0,0,2984,2985,1,0,0,0,2985,2986,1,0,0,0,2986,2988,
  	5,63,0,0,2987,2984,1,0,0,0,2987,2988,1,0,0,0,2988,2990,1,0,0,0,2989,2991,
  	5,34,0,0,2990,2989,1,0,0,0,2990,2991,1,0,0,0,2991,2992,1,0,0,0,2992,2993,
  	5,47,0,0,2993,507,1,0,0,0,2994,2996,5,3,0,0,2995,2994,1,0,0,0,2995,2996,
  	1,0,0,0,2996,2998,1,0,0,0,2997,2999,5,34,0,0,2998,2997,1,0,0,0,2998,2999,
  	1,0,0,0,2999,3000,1,0,0,0,3000,3001,5,62,0,0,3001,3002,5,37,0,0,3002,
  	3009,3,22,11,0,3003,3004,5,8,0,0,3004,3006,3,120,60,0,3005,3003,1,0,0,
  	0,3005,3006,1,0,0,0,3006,3007,1,0,0,0,3007,3008,5,72,0,0,3008,3010,5,
  	47,0,0,3009,3005,1,0,0,0,3009,3010,1,0,0,0,3010,509,1,0,0,0,3011,3012,
  	5,94,0,0,3012,3013,5,120,0,0,3013,3014,5,95,0,0,3014,511,1,0,0,0,3015,
  	3016,3,40,20,0,3016,3017,5,120,0,0,3017,513,1,0,0,0,3018,3019,5,36,0,
  	0,3019,3020,5,120,0,0,3020,515,1,0,0,0,3021,3022,5,18,0,0,3022,3023,5,
  	120,0,0,3023,517,1,0,0,0,3024,3025,5,17,0,0,3025,3026,5,120,0,0,3026,
  	519,1,0,0,0,3027,3028,5,17,0,0,3028,3029,5,120,0,0,3029,3030,5,18,0,0,
  	3030,3031,5,120,0,0,3031,521,1,0,0,0,3032,3033,3,66,33,0,3033,523,1,0,
  	0,0,3034,3035,3,122,61,0,3035,525,1,0,0,0,3036,3037,3,118,59,0,3037,527,
  	1,0,0,0,3038,3041,3,530,265,0,3039,3041,3,532,266,0,3040,3038,1,0,0,0,
  	3040,3039,1,0,0,0,3041,529,1,0,0,0,3042,3043,5,72,0,0,3043,3046,3,272,
  	136,0,3044,3045,5,33,0,0,3045,3047,3,534,267,0,3046,3044,1,0,0,0,3046,
  	3047,1,0,0,0,3047,3049,1,0,0,0,3048,3050,3,546,273,0,3049,3048,1,0,0,
  	0,3049,3050,1,0,0,0,3050,3051,1,0,0,0,3051,3052,5,102,0,0,3052,531,1,
  	0,0,0,3053,3054,5,72,0,0,3054,3055,3,272,136,0,3055,3056,5,33,0,0,3056,
  	3058,5,3,0,0,3057,3059,3,534,267,0,3058,3057,1,0,0,0,3058,3059,1,0,0,
  	0,3059,3061,1,0,0,0,3060,3062,3,546,273,0,3061,3060,1,0,0,0,3061,3062,
  	1,0,0,0,3062,3063,1,0,0,0,3063,3064,5,102,0,0,3064,533,1,0,0,0,3065,3069,
  	3,146,73,0,3066,3069,5,120,0,0,3067,3069,5,39,0,0,3068,3065,1,0,0,0,3068,
  	3066,1,0,0,0,3068,3067,1,0,0,0,3069,535,1,0,0,0,3070,3071,5,72,0,0,3071,
  	3072,5,45,0,0,3072,3073,3,10,5,0,3073,3074,5,33,0,0,3074,3075,5,37,0,
  	0,3075,3076,3,146,73,0,3076,3078,3,538,269,0,3077,3079,3,546,273,0,3078,
  	3077,1,0,0,0,3078,3079,1,0,0,0,3079,3080,1,0,0,0,3080,3081,5,102,0,0,
  	3081,537,1,0,0,0,3082,3085,5,94,0,0,3083,3084,5,42,0,0,3084,3086,5,111,
  	0,0,3085,3083,1,0,0,0,3085,3086,1,0,0,0,3086,3087,1,0,0,0,3087,3088,5,
  	120,0,0,3088,3110,5,95,0,0,3089,3091,3,490,245,0,3090,3089,1,0,0,0,3090,
  	3091,1,0,0,0,3091,3110,1,0,0,0,3092,3093,5,94,0,0,3093,3098,3,540,270,
  	0,3094,3095,5,98,0,0,3095,3097,3,540,270,0,3096,3094,1,0,0,0,3097,3100,
  	1,0,0,0,3098,3096,1,0,0,0,3098,3099,1,0,0,0,3099,3105,1,0,0,0,3100,3098,
  	1,0,0,0,3101,3102,5,98,0,0,3102,3103,5,42,0,0,3103,3104,5,111,0,0,3104,
  	3106,5,120,0,0,3105,3101,1,0,0,0,3105,3106,1,0,0,0,3106,3107,1,0,0,0,
  	3107,3108,5,95,0,0,3108,3110,1,0,0,0,3109,3082,1,0,0,0,3109,3090,1,0,
  	0,0,3109,3092,1,0,0,0,3110,539,1,0,0,0,3111,3117,3,492,246,0,3112,3113,
  	3,150,75,0,3113,3114,5,111,0,0,3114,3115,5,120,0,0,3115,3117,1,0,0,0,
  	3116,3111,1,0,0,0,3116,3112,1,0,0,0,3117,541,1,0,0,0,3118,3123,3,554,
  	277,0,3119,3123,3,556,278,0,3120,3123,3,560,280,0,3121,3123,3,574,287,
  	0,3122,3118,1,0,0,0,3122,3119,1,0,0,0,3122,3120,1,0,0,0,3122,3121,1,0,
  	0,0,3123,543,1,0,0,0,3124,3131,3,148,74,0,3125,3126,3,148,74,0,3126,3127,
  	5,121,0,0,3127,3128,3,152,76,0,3128,3131,1,0,0,0,3129,3131,3,146,73,0,
  	3130,3124,1,0,0,0,3130,3125,1,0,0,0,3130,3129,1,0,0,0,3131,545,1,0,0,
  	0,3132,3133,5,72,0,0,3133,3136,3,548,274,0,3134,3135,5,111,0,0,3135,3137,
  	3,552,276,0,3136,3134,1,0,0,0,3136,3137,1,0,0,0,3137,3146,1,0,0,0,3138,
  	3139,5,98,0,0,3139,3142,3,548,274,0,3140,3141,5,111,0,0,3141,3143,3,552,
  	276,0,3142,3140,1,0,0,0,3142,3143,1,0,0,0,3143,3145,1,0,0,0,3144,3138,
  	1,0,0,0,3145,3148,1,0,0,0,3146,3144,1,0,0,0,3146,3147,1,0,0,0,3147,547,
  	1,0,0,0,3148,3146,1,0,0,0,3149,3152,3,550,275,0,3150,3151,5,121,0,0,3151,
  	3153,5,74,0,0,3152,3150,1,0,0,0,3152,3153,1,0,0,0,3153,549,1,0,0,0,3154,
  	3155,3,0,0,0,3155,551,1,0,0,0,3156,3160,3,146,73,0,3157,3160,3,180,90,
  	0,3158,3160,3,0,0,0,3159,3156,1,0,0,0,3159,3157,1,0,0,0,3159,3158,1,0,
  	0,0,3160,553,1,0,0,0,3161,3162,5,26,0,0,3162,3163,3,544,272,0,3163,3164,
  	5,121,0,0,3164,3165,3,152,76,0,3165,3166,5,69,0,0,3166,3167,3,180,90,
  	0,3167,3168,5,102,0,0,3168,3178,1,0,0,0,3169,3170,5,26,0,0,3170,3171,
  	3,544,272,0,3171,3172,5,121,0,0,3172,3173,3,152,76,0,3173,3174,5,69,0,
  	0,3174,3175,3,146,73,0,3175,3176,5,102,0,0,3176,3178,1,0,0,0,3177,3161,
  	1,0,0,0,3177,3169,1,0,0,0,3178,555,1,0,0,0,3179,3180,5,26,0,0,3180,3181,
  	3,544,272,0,3181,3182,5,69,0,0,3182,3183,3,558,279,0,3183,3184,5,102,
  	0,0,3184,557,1,0,0,0,3185,3186,3,172,86,0,3186,559,1,0,0,0,3187,3188,
  	5,26,0,0,3188,3189,3,544,272,0,3189,3190,5,69,0,0,3190,3192,5,52,0,0,
  	3191,3193,3,576,288,0,3192,3191,1,0,0,0,3192,3193,1,0,0,0,3193,3197,1,
  	0,0,0,3194,3196,3,562,281,0,3195,3194,1,0,0,0,3196,3199,1,0,0,0,3197,
  	3195,1,0,0,0,3197,3198,1,0,0,0,3198,3200,1,0,0,0,3199,3197,1,0,0,0,3200,
  	3202,5,22,0,0,3201,3203,5,52,0,0,3202,3201,1,0,0,0,3202,3203,1,0,0,0,
  	3203,561,1,0,0,0,3204,3205,3,564,282,0,3205,3206,5,10,0,0,3206,3207,3,
  	566,283,0,3207,3208,5,51,0,0,3208,3209,3,568,284,0,3209,3210,5,112,0,
  	0,3210,3211,3,570,285,0,3211,3212,5,102,0,0,3212,563,1,0,0,0,3213,3214,
  	3,544,272,0,3214,565,1,0,0,0,3215,3216,3,180,90,0,3216,567,1,0,0,0,3217,
  	3218,3,180,90,0,3218,569,1,0,0,0,3219,3220,3,180,90,0,3220,571,1,0,0,
  	0,3221,3222,5,17,0,0,3222,3224,3,180,90,0,3223,3225,3,38,19,0,3224,3223,
  	1,0,0,0,3224,3225,1,0,0,0,3225,573,1,0,0,0,3226,3227,5,26,0,0,3227,3228,
  	3,148,74,0,3228,3229,5,69,0,0,3229,3230,5,10,0,0,3230,3231,3,180,90,0,
  	3231,3232,5,102,0,0,3232,575,1,0,0,0,3233,3234,5,10,0,0,3234,3235,5,36,
  	0,0,3235,3236,3,180,90,0,3236,3237,5,102,0,0,3237,577,1,0,0,0,399,599,
  	607,612,617,623,633,640,643,647,653,658,662,667,670,675,678,685,688,693,
  	696,703,706,711,714,720,727,737,740,746,749,759,767,774,778,790,795,804,
  	815,820,824,833,851,860,863,867,870,878,885,889,901,909,914,921,923,933,
  	943,948,953,956,959,970,975,980,986,990,997,1000,1010,1026,1033,1039,
  	1045,1048,1053,1060,1064,1068,1071,1075,1083,1087,1091,1095,1101,1105,
  	1109,1113,1117,1120,1124,1128,1133,1137,1144,1149,1154,1158,1164,1171,
  	1183,1203,1205,1210,1215,1222,1228,1239,1244,1255,1260,1265,1272,1279,
  	1283,1293,1297,1307,1318,1333,1342,1350,1363,1370,1379,1387,1396,1404,
  	1407,1414,1422,1430,1439,1448,1451,1457,1463,1467,1472,1479,1485,1488,
  	1496,1505,1511,1517,1537,1553,1566,1571,1583,1603,1619,1633,1637,1642,
  	1645,1654,1659,1665,1672,1676,1690,1699,1722,1727,1740,1755,1758,1765,
  	1775,1780,1787,1796,1800,1805,1809,1815,1821,1825,1833,1837,1843,1848,
  	1857,1861,1865,1870,1879,1883,1887,1891,1899,1907,1911,1916,1923,1925,
  	1928,1931,1934,1938,1946,1955,1963,1971,1977,1981,1988,1991,1996,2005,
  	2011,2014,2020,2025,2033,2043,2049,2056,2059,2065,2068,2074,2080,2086,
  	2089,2096,2100,2103,2106,2110,2117,2121,2128,2133,2138,2144,2152,2159,
  	2167,2177,2182,2188,2198,2202,2210,2219,2224,2230,2240,2250,2260,2264,
  	2270,2273,2280,2283,2290,2297,2300,2307,2314,2317,2321,2325,2331,2339,
  	2347,2350,2357,2365,2372,2380,2387,2390,2394,2399,2403,2409,2415,2420,
  	2428,2431,2439,2442,2445,2455,2458,2464,2466,2484,2494,2497,2509,2517,
  	2523,2538,2542,2547,2552,2557,2570,2574,2578,2593,2597,2618,2622,2632,
  	2638,2646,2651,2654,2659,2662,2668,2673,2677,2681,2685,2689,2697,2703,
  	2711,2720,2723,2729,2739,2749,2759,2773,2782,2784,2790,2797,2807,2815,
  	2819,2823,2828,2839,2841,2848,2856,2859,2862,2870,2873,2876,2884,2887,
  	2889,2897,2905,2912,2918,2923,2926,2936,2939,2941,2945,2950,2955,2962,
  	2966,2981,2984,2987,2990,2995,2998,3005,3009,3040,3046,3049,3058,3061,
  	3068,3078,3085,3090,3098,3105,3109,3116,3122,3130,3136,3142,3146,3152,
  	3159,3177,3192,3197,3202,3224
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  adaparserParserStaticData = staticData.release();
}

}

AdaParser::AdaParser(TokenStream *input) : AdaParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

AdaParser::AdaParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  AdaParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *adaparserParserStaticData->atn, adaparserParserStaticData->decisionToDFA, adaparserParserStaticData->sharedContextCache, options);
}

AdaParser::~AdaParser() {
  delete _interpreter;
}

const atn::ATN& AdaParser::getATN() const {
  return *adaparserParserStaticData->atn;
}

std::string AdaParser::getGrammarFileName() const {
  return "AdaParser.g4";
}

const std::vector<std::string>& AdaParser::getRuleNames() const {
  return adaparserParserStaticData->ruleNames;
}

const dfa::Vocabulary& AdaParser::getVocabulary() const {
  return adaparserParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView AdaParser::getSerializedATN() const {
  return adaparserParserStaticData->serializedATN;
}


//----------------- IdentifierContext ------------------------------------------------------------------

AdaParser::IdentifierContext::IdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::IdentifierContext::IDENTIFIER_() {
  return getToken(AdaParser::IDENTIFIER_, 0);
}


size_t AdaParser::IdentifierContext::getRuleIndex() const {
  return AdaParser::RuleIdentifier;
}

void AdaParser::IdentifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIdentifier(this);
}

void AdaParser::IdentifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIdentifier(this);
}

AdaParser::IdentifierContext* AdaParser::identifier() {
  IdentifierContext *_localctx = _tracker.createInstance<IdentifierContext>(_ctx, getState());
  enterRule(_localctx, 0, AdaParser::RuleIdentifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(578);
    match(AdaParser::IDENTIFIER_);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Numeric_literalContext ------------------------------------------------------------------

AdaParser::Numeric_literalContext::Numeric_literalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Numeric_literalContext::NUMERIC_LITERAL_() {
  return getToken(AdaParser::NUMERIC_LITERAL_, 0);
}


size_t AdaParser::Numeric_literalContext::getRuleIndex() const {
  return AdaParser::RuleNumeric_literal;
}

void AdaParser::Numeric_literalContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNumeric_literal(this);
}

void AdaParser::Numeric_literalContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNumeric_literal(this);
}

AdaParser::Numeric_literalContext* AdaParser::numeric_literal() {
  Numeric_literalContext *_localctx = _tracker.createInstance<Numeric_literalContext>(_ctx, getState());
  enterRule(_localctx, 2, AdaParser::RuleNumeric_literal);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(580);
    match(AdaParser::NUMERIC_LITERAL_);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Character_literalContext ------------------------------------------------------------------

AdaParser::Character_literalContext::Character_literalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Character_literalContext::CHARACTER_LITERAL_() {
  return getToken(AdaParser::CHARACTER_LITERAL_, 0);
}


size_t AdaParser::Character_literalContext::getRuleIndex() const {
  return AdaParser::RuleCharacter_literal;
}

void AdaParser::Character_literalContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCharacter_literal(this);
}

void AdaParser::Character_literalContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCharacter_literal(this);
}

AdaParser::Character_literalContext* AdaParser::character_literal() {
  Character_literalContext *_localctx = _tracker.createInstance<Character_literalContext>(_ctx, getState());
  enterRule(_localctx, 4, AdaParser::RuleCharacter_literal);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(582);
    match(AdaParser::CHARACTER_LITERAL_);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- String_literalContext ------------------------------------------------------------------

AdaParser::String_literalContext::String_literalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::String_literalContext::STRING_LITERAL_() {
  return getToken(AdaParser::STRING_LITERAL_, 0);
}


size_t AdaParser::String_literalContext::getRuleIndex() const {
  return AdaParser::RuleString_literal;
}

void AdaParser::String_literalContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterString_literal(this);
}

void AdaParser::String_literalContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitString_literal(this);
}

AdaParser::String_literalContext* AdaParser::string_literal() {
  String_literalContext *_localctx = _tracker.createInstance<String_literalContext>(_ctx, getState());
  enterRule(_localctx, 6, AdaParser::RuleString_literal);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(584);
    match(AdaParser::STRING_LITERAL_);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Basic_declarationContext ------------------------------------------------------------------

AdaParser::Basic_declarationContext::Basic_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Type_declarationContext* AdaParser::Basic_declarationContext::type_declaration() {
  return getRuleContext<AdaParser::Type_declarationContext>(0);
}

AdaParser::Subtype_declarationContext* AdaParser::Basic_declarationContext::subtype_declaration() {
  return getRuleContext<AdaParser::Subtype_declarationContext>(0);
}

AdaParser::Object_declarationContext* AdaParser::Basic_declarationContext::object_declaration() {
  return getRuleContext<AdaParser::Object_declarationContext>(0);
}

AdaParser::Number_declarationContext* AdaParser::Basic_declarationContext::number_declaration() {
  return getRuleContext<AdaParser::Number_declarationContext>(0);
}

AdaParser::Subprogram_declarationContext* AdaParser::Basic_declarationContext::subprogram_declaration() {
  return getRuleContext<AdaParser::Subprogram_declarationContext>(0);
}

AdaParser::Abstract_subprogram_declarationContext* AdaParser::Basic_declarationContext::abstract_subprogram_declaration() {
  return getRuleContext<AdaParser::Abstract_subprogram_declarationContext>(0);
}

AdaParser::Null_procedure_declarationContext* AdaParser::Basic_declarationContext::null_procedure_declaration() {
  return getRuleContext<AdaParser::Null_procedure_declarationContext>(0);
}

AdaParser::Expression_function_declarationContext* AdaParser::Basic_declarationContext::expression_function_declaration() {
  return getRuleContext<AdaParser::Expression_function_declarationContext>(0);
}

AdaParser::Package_declarationContext* AdaParser::Basic_declarationContext::package_declaration() {
  return getRuleContext<AdaParser::Package_declarationContext>(0);
}

AdaParser::Renaming_declarationContext* AdaParser::Basic_declarationContext::renaming_declaration() {
  return getRuleContext<AdaParser::Renaming_declarationContext>(0);
}

AdaParser::Exception_declarationContext* AdaParser::Basic_declarationContext::exception_declaration() {
  return getRuleContext<AdaParser::Exception_declarationContext>(0);
}

AdaParser::Generic_declarationContext* AdaParser::Basic_declarationContext::generic_declaration() {
  return getRuleContext<AdaParser::Generic_declarationContext>(0);
}

AdaParser::Generic_instantiationContext* AdaParser::Basic_declarationContext::generic_instantiation() {
  return getRuleContext<AdaParser::Generic_instantiationContext>(0);
}


size_t AdaParser::Basic_declarationContext::getRuleIndex() const {
  return AdaParser::RuleBasic_declaration;
}

void AdaParser::Basic_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBasic_declaration(this);
}

void AdaParser::Basic_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBasic_declaration(this);
}

AdaParser::Basic_declarationContext* AdaParser::basic_declaration() {
  Basic_declarationContext *_localctx = _tracker.createInstance<Basic_declarationContext>(_ctx, getState());
  enterRule(_localctx, 8, AdaParser::RuleBasic_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(599);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 0, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(586);
      type_declaration();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(587);
      subtype_declaration();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(588);
      object_declaration();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(589);
      number_declaration();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(590);
      subprogram_declaration();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(591);
      abstract_subprogram_declaration();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(592);
      null_procedure_declaration();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(593);
      expression_function_declaration();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(594);
      package_declaration();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(595);
      renaming_declaration();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(596);
      exception_declaration();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(597);
      generic_declaration();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(598);
      generic_instantiation();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Defining_identifierContext ------------------------------------------------------------------

AdaParser::Defining_identifierContext::Defining_identifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::IdentifierContext* AdaParser::Defining_identifierContext::identifier() {
  return getRuleContext<AdaParser::IdentifierContext>(0);
}


size_t AdaParser::Defining_identifierContext::getRuleIndex() const {
  return AdaParser::RuleDefining_identifier;
}

void AdaParser::Defining_identifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDefining_identifier(this);
}

void AdaParser::Defining_identifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDefining_identifier(this);
}

AdaParser::Defining_identifierContext* AdaParser::defining_identifier() {
  Defining_identifierContext *_localctx = _tracker.createInstance<Defining_identifierContext>(_ctx, getState());
  enterRule(_localctx, 10, AdaParser::RuleDefining_identifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(601);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_declarationContext ------------------------------------------------------------------

AdaParser::Type_declarationContext::Type_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Full_type_declarationContext* AdaParser::Type_declarationContext::full_type_declaration() {
  return getRuleContext<AdaParser::Full_type_declarationContext>(0);
}

AdaParser::Incomplete_type_declarationContext* AdaParser::Type_declarationContext::incomplete_type_declaration() {
  return getRuleContext<AdaParser::Incomplete_type_declarationContext>(0);
}

AdaParser::Private_type_declarationContext* AdaParser::Type_declarationContext::private_type_declaration() {
  return getRuleContext<AdaParser::Private_type_declarationContext>(0);
}

AdaParser::Private_extension_declarationContext* AdaParser::Type_declarationContext::private_extension_declaration() {
  return getRuleContext<AdaParser::Private_extension_declarationContext>(0);
}


size_t AdaParser::Type_declarationContext::getRuleIndex() const {
  return AdaParser::RuleType_declaration;
}

void AdaParser::Type_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_declaration(this);
}

void AdaParser::Type_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_declaration(this);
}

AdaParser::Type_declarationContext* AdaParser::type_declaration() {
  Type_declarationContext *_localctx = _tracker.createInstance<Type_declarationContext>(_ctx, getState());
  enterRule(_localctx, 12, AdaParser::RuleType_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(607);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 1, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(603);
      full_type_declaration();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(604);
      incomplete_type_declaration();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(605);
      private_type_declaration();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(606);
      private_extension_declaration();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Full_type_declarationContext ------------------------------------------------------------------

AdaParser::Full_type_declarationContext::Full_type_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Full_type_declarationContext::TYPE() {
  return getToken(AdaParser::TYPE, 0);
}

AdaParser::Defining_identifierContext* AdaParser::Full_type_declarationContext::defining_identifier() {
  return getRuleContext<AdaParser::Defining_identifierContext>(0);
}

tree::TerminalNode* AdaParser::Full_type_declarationContext::IS() {
  return getToken(AdaParser::IS, 0);
}

AdaParser::Type_definitionContext* AdaParser::Full_type_declarationContext::type_definition() {
  return getRuleContext<AdaParser::Type_definitionContext>(0);
}

tree::TerminalNode* AdaParser::Full_type_declarationContext::SEMI() {
  return getToken(AdaParser::SEMI, 0);
}

AdaParser::Known_discriminant_partContext* AdaParser::Full_type_declarationContext::known_discriminant_part() {
  return getRuleContext<AdaParser::Known_discriminant_partContext>(0);
}

AdaParser::Aspect_specificationContext* AdaParser::Full_type_declarationContext::aspect_specification() {
  return getRuleContext<AdaParser::Aspect_specificationContext>(0);
}

AdaParser::Task_type_declarationContext* AdaParser::Full_type_declarationContext::task_type_declaration() {
  return getRuleContext<AdaParser::Task_type_declarationContext>(0);
}

AdaParser::Protected_type_declarationContext* AdaParser::Full_type_declarationContext::protected_type_declaration() {
  return getRuleContext<AdaParser::Protected_type_declarationContext>(0);
}


size_t AdaParser::Full_type_declarationContext::getRuleIndex() const {
  return AdaParser::RuleFull_type_declaration;
}

void AdaParser::Full_type_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFull_type_declaration(this);
}

void AdaParser::Full_type_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFull_type_declaration(this);
}

AdaParser::Full_type_declarationContext* AdaParser::full_type_declaration() {
  Full_type_declarationContext *_localctx = _tracker.createInstance<Full_type_declarationContext>(_ctx, getState());
  enterRule(_localctx, 14, AdaParser::RuleFull_type_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(623);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AdaParser::TYPE: {
        enterOuterAlt(_localctx, 1);
        setState(609);
        match(AdaParser::TYPE);
        setState(610);
        defining_identifier();
        setState(612);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == AdaParser::LP) {
          setState(611);
          known_discriminant_part();
        }
        setState(614);
        match(AdaParser::IS);
        setState(615);
        type_definition();
        setState(617);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == AdaParser::WITH) {
          setState(616);
          aspect_specification();
        }
        setState(619);
        match(AdaParser::SEMI);
        break;
      }

      case AdaParser::TASK: {
        enterOuterAlt(_localctx, 2);
        setState(621);
        task_type_declaration();
        break;
      }

      case AdaParser::PROTECTED: {
        enterOuterAlt(_localctx, 3);
        setState(622);
        protected_type_declaration();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_definitionContext ------------------------------------------------------------------

AdaParser::Type_definitionContext::Type_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Enumeration_type_definitionContext* AdaParser::Type_definitionContext::enumeration_type_definition() {
  return getRuleContext<AdaParser::Enumeration_type_definitionContext>(0);
}

AdaParser::Integer_type_definitionContext* AdaParser::Type_definitionContext::integer_type_definition() {
  return getRuleContext<AdaParser::Integer_type_definitionContext>(0);
}

AdaParser::Real_type_definitionContext* AdaParser::Type_definitionContext::real_type_definition() {
  return getRuleContext<AdaParser::Real_type_definitionContext>(0);
}

AdaParser::Array_type_definitionContext* AdaParser::Type_definitionContext::array_type_definition() {
  return getRuleContext<AdaParser::Array_type_definitionContext>(0);
}

AdaParser::Record_type_definitionContext* AdaParser::Type_definitionContext::record_type_definition() {
  return getRuleContext<AdaParser::Record_type_definitionContext>(0);
}

AdaParser::Access_type_definitionContext* AdaParser::Type_definitionContext::access_type_definition() {
  return getRuleContext<AdaParser::Access_type_definitionContext>(0);
}

AdaParser::Derived_type_definitionContext* AdaParser::Type_definitionContext::derived_type_definition() {
  return getRuleContext<AdaParser::Derived_type_definitionContext>(0);
}

AdaParser::Interface_type_definitionContext* AdaParser::Type_definitionContext::interface_type_definition() {
  return getRuleContext<AdaParser::Interface_type_definitionContext>(0);
}


size_t AdaParser::Type_definitionContext::getRuleIndex() const {
  return AdaParser::RuleType_definition;
}

void AdaParser::Type_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_definition(this);
}

void AdaParser::Type_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_definition(this);
}

AdaParser::Type_definitionContext* AdaParser::type_definition() {
  Type_definitionContext *_localctx = _tracker.createInstance<Type_definitionContext>(_ctx, getState());
  enterRule(_localctx, 16, AdaParser::RuleType_definition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(633);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 5, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(625);
      enumeration_type_definition();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(626);
      integer_type_definition();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(627);
      real_type_definition();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(628);
      array_type_definition();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(629);
      record_type_definition();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(630);
      access_type_definition();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(631);
      derived_type_definition();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(632);
      interface_type_definition();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Subtype_declarationContext ------------------------------------------------------------------

AdaParser::Subtype_declarationContext::Subtype_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Subtype_declarationContext::SUBTYPE() {
  return getToken(AdaParser::SUBTYPE, 0);
}

AdaParser::Defining_identifierContext* AdaParser::Subtype_declarationContext::defining_identifier() {
  return getRuleContext<AdaParser::Defining_identifierContext>(0);
}

tree::TerminalNode* AdaParser::Subtype_declarationContext::IS() {
  return getToken(AdaParser::IS, 0);
}

AdaParser::Subtype_indicationContext* AdaParser::Subtype_declarationContext::subtype_indication() {
  return getRuleContext<AdaParser::Subtype_indicationContext>(0);
}

AdaParser::Aspect_specificationContext* AdaParser::Subtype_declarationContext::aspect_specification() {
  return getRuleContext<AdaParser::Aspect_specificationContext>(0);
}


size_t AdaParser::Subtype_declarationContext::getRuleIndex() const {
  return AdaParser::RuleSubtype_declaration;
}

void AdaParser::Subtype_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubtype_declaration(this);
}

void AdaParser::Subtype_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubtype_declaration(this);
}

AdaParser::Subtype_declarationContext* AdaParser::subtype_declaration() {
  Subtype_declarationContext *_localctx = _tracker.createInstance<Subtype_declarationContext>(_ctx, getState());
  enterRule(_localctx, 18, AdaParser::RuleSubtype_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(635);
    match(AdaParser::SUBTYPE);
    setState(636);
    defining_identifier();
    setState(637);
    match(AdaParser::IS);
    setState(638);
    subtype_indication();
    setState(640);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::WITH) {
      setState(639);
      aspect_specification();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Subtype_indicationContext ------------------------------------------------------------------

AdaParser::Subtype_indicationContext::Subtype_indicationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Subtype_markContext* AdaParser::Subtype_indicationContext::subtype_mark() {
  return getRuleContext<AdaParser::Subtype_markContext>(0);
}

AdaParser::Null_exclusionContext* AdaParser::Subtype_indicationContext::null_exclusion() {
  return getRuleContext<AdaParser::Null_exclusionContext>(0);
}

AdaParser::ConstraintContext* AdaParser::Subtype_indicationContext::constraint() {
  return getRuleContext<AdaParser::ConstraintContext>(0);
}


size_t AdaParser::Subtype_indicationContext::getRuleIndex() const {
  return AdaParser::RuleSubtype_indication;
}

void AdaParser::Subtype_indicationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubtype_indication(this);
}

void AdaParser::Subtype_indicationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubtype_indication(this);
}

AdaParser::Subtype_indicationContext* AdaParser::subtype_indication() {
  Subtype_indicationContext *_localctx = _tracker.createInstance<Subtype_indicationContext>(_ctx, getState());
  enterRule(_localctx, 20, AdaParser::RuleSubtype_indication);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(643);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::NOT) {
      setState(642);
      null_exclusion();
    }
    setState(645);
    subtype_mark();
    setState(647);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 8, _ctx)) {
    case 1: {
      setState(646);
      constraint();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Subtype_markContext ------------------------------------------------------------------

AdaParser::Subtype_markContext::Subtype_markContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::IdentifierContext* AdaParser::Subtype_markContext::identifier() {
  return getRuleContext<AdaParser::IdentifierContext>(0);
}


size_t AdaParser::Subtype_markContext::getRuleIndex() const {
  return AdaParser::RuleSubtype_mark;
}

void AdaParser::Subtype_markContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubtype_mark(this);
}

void AdaParser::Subtype_markContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubtype_mark(this);
}

AdaParser::Subtype_markContext* AdaParser::subtype_mark() {
  Subtype_markContext *_localctx = _tracker.createInstance<Subtype_markContext>(_ctx, getState());
  enterRule(_localctx, 22, AdaParser::RuleSubtype_mark);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(649);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstraintContext ------------------------------------------------------------------

AdaParser::ConstraintContext::ConstraintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Scalar_constraintContext* AdaParser::ConstraintContext::scalar_constraint() {
  return getRuleContext<AdaParser::Scalar_constraintContext>(0);
}

AdaParser::Composite_constraintContext* AdaParser::ConstraintContext::composite_constraint() {
  return getRuleContext<AdaParser::Composite_constraintContext>(0);
}


size_t AdaParser::ConstraintContext::getRuleIndex() const {
  return AdaParser::RuleConstraint;
}

void AdaParser::ConstraintContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstraint(this);
}

void AdaParser::ConstraintContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstraint(this);
}

AdaParser::ConstraintContext* AdaParser::constraint() {
  ConstraintContext *_localctx = _tracker.createInstance<ConstraintContext>(_ctx, getState());
  enterRule(_localctx, 24, AdaParser::RuleConstraint);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(653);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AdaParser::DELTA:
      case AdaParser::DIGITS:
      case AdaParser::RANGE_: {
        enterOuterAlt(_localctx, 1);
        setState(651);
        scalar_constraint();
        break;
      }

      case AdaParser::LP: {
        enterOuterAlt(_localctx, 2);
        setState(652);
        composite_constraint();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Scalar_constraintContext ------------------------------------------------------------------

AdaParser::Scalar_constraintContext::Scalar_constraintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Range_constraintContext* AdaParser::Scalar_constraintContext::range_constraint() {
  return getRuleContext<AdaParser::Range_constraintContext>(0);
}

AdaParser::Digits_constraintContext* AdaParser::Scalar_constraintContext::digits_constraint() {
  return getRuleContext<AdaParser::Digits_constraintContext>(0);
}

AdaParser::Delta_constraintContext* AdaParser::Scalar_constraintContext::delta_constraint() {
  return getRuleContext<AdaParser::Delta_constraintContext>(0);
}


size_t AdaParser::Scalar_constraintContext::getRuleIndex() const {
  return AdaParser::RuleScalar_constraint;
}

void AdaParser::Scalar_constraintContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterScalar_constraint(this);
}

void AdaParser::Scalar_constraintContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitScalar_constraint(this);
}

AdaParser::Scalar_constraintContext* AdaParser::scalar_constraint() {
  Scalar_constraintContext *_localctx = _tracker.createInstance<Scalar_constraintContext>(_ctx, getState());
  enterRule(_localctx, 26, AdaParser::RuleScalar_constraint);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(658);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AdaParser::RANGE_: {
        enterOuterAlt(_localctx, 1);
        setState(655);
        range_constraint();
        break;
      }

      case AdaParser::DIGITS: {
        enterOuterAlt(_localctx, 2);
        setState(656);
        digits_constraint();
        break;
      }

      case AdaParser::DELTA: {
        enterOuterAlt(_localctx, 3);
        setState(657);
        delta_constraint();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Composite_constraintContext ------------------------------------------------------------------

AdaParser::Composite_constraintContext::Composite_constraintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Index_constraintContext* AdaParser::Composite_constraintContext::index_constraint() {
  return getRuleContext<AdaParser::Index_constraintContext>(0);
}

AdaParser::Discriminant_constraintContext* AdaParser::Composite_constraintContext::discriminant_constraint() {
  return getRuleContext<AdaParser::Discriminant_constraintContext>(0);
}


size_t AdaParser::Composite_constraintContext::getRuleIndex() const {
  return AdaParser::RuleComposite_constraint;
}

void AdaParser::Composite_constraintContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComposite_constraint(this);
}

void AdaParser::Composite_constraintContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComposite_constraint(this);
}

AdaParser::Composite_constraintContext* AdaParser::composite_constraint() {
  Composite_constraintContext *_localctx = _tracker.createInstance<Composite_constraintContext>(_ctx, getState());
  enterRule(_localctx, 28, AdaParser::RuleComposite_constraint);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(662);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 11, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(660);
      index_constraint();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(661);
      discriminant_constraint();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Object_declarationContext ------------------------------------------------------------------

AdaParser::Object_declarationContext::Object_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Defining_identifier_listContext* AdaParser::Object_declarationContext::defining_identifier_list() {
  return getRuleContext<AdaParser::Defining_identifier_listContext>(0);
}

tree::TerminalNode* AdaParser::Object_declarationContext::COLON() {
  return getToken(AdaParser::COLON, 0);
}

AdaParser::Subtype_indicationContext* AdaParser::Object_declarationContext::subtype_indication() {
  return getRuleContext<AdaParser::Subtype_indicationContext>(0);
}

tree::TerminalNode* AdaParser::Object_declarationContext::SEMI() {
  return getToken(AdaParser::SEMI, 0);
}

tree::TerminalNode* AdaParser::Object_declarationContext::ALIASED() {
  return getToken(AdaParser::ALIASED, 0);
}

tree::TerminalNode* AdaParser::Object_declarationContext::CONSTANT() {
  return getToken(AdaParser::CONSTANT, 0);
}

tree::TerminalNode* AdaParser::Object_declarationContext::ASSIGN() {
  return getToken(AdaParser::ASSIGN, 0);
}

AdaParser::ExpressionContext* AdaParser::Object_declarationContext::expression() {
  return getRuleContext<AdaParser::ExpressionContext>(0);
}

AdaParser::Aspect_specificationContext* AdaParser::Object_declarationContext::aspect_specification() {
  return getRuleContext<AdaParser::Aspect_specificationContext>(0);
}

AdaParser::Access_definitionContext* AdaParser::Object_declarationContext::access_definition() {
  return getRuleContext<AdaParser::Access_definitionContext>(0);
}

AdaParser::Array_type_definitionContext* AdaParser::Object_declarationContext::array_type_definition() {
  return getRuleContext<AdaParser::Array_type_definitionContext>(0);
}

AdaParser::Single_task_declarationContext* AdaParser::Object_declarationContext::single_task_declaration() {
  return getRuleContext<AdaParser::Single_task_declarationContext>(0);
}

AdaParser::Single_protected_declarationContext* AdaParser::Object_declarationContext::single_protected_declaration() {
  return getRuleContext<AdaParser::Single_protected_declarationContext>(0);
}


size_t AdaParser::Object_declarationContext::getRuleIndex() const {
  return AdaParser::RuleObject_declaration;
}

void AdaParser::Object_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterObject_declaration(this);
}

void AdaParser::Object_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitObject_declaration(this);
}

AdaParser::Object_declarationContext* AdaParser::object_declaration() {
  Object_declarationContext *_localctx = _tracker.createInstance<Object_declarationContext>(_ctx, getState());
  enterRule(_localctx, 30, AdaParser::RuleObject_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(720);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 24, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(664);
      defining_identifier_list();
      setState(665);
      match(AdaParser::COLON);
      setState(667);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::ALIASED) {
        setState(666);
        match(AdaParser::ALIASED);
      }
      setState(670);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::CONSTANT) {
        setState(669);
        match(AdaParser::CONSTANT);
      }
      setState(672);
      subtype_indication();
      setState(675);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::ASSIGN) {
        setState(673);
        match(AdaParser::ASSIGN);
        setState(674);
        expression();
      }
      setState(678);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::WITH) {
        setState(677);
        aspect_specification();
      }
      setState(680);
      match(AdaParser::SEMI);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(682);
      defining_identifier_list();
      setState(683);
      match(AdaParser::COLON);
      setState(685);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::ALIASED) {
        setState(684);
        match(AdaParser::ALIASED);
      }
      setState(688);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::CONSTANT) {
        setState(687);
        match(AdaParser::CONSTANT);
      }
      setState(690);
      access_definition();
      setState(693);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::ASSIGN) {
        setState(691);
        match(AdaParser::ASSIGN);
        setState(692);
        expression();
      }
      setState(696);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::WITH) {
        setState(695);
        aspect_specification();
      }
      setState(698);
      match(AdaParser::SEMI);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(700);
      defining_identifier_list();
      setState(701);
      match(AdaParser::COLON);
      setState(703);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::ALIASED) {
        setState(702);
        match(AdaParser::ALIASED);
      }
      setState(706);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::CONSTANT) {
        setState(705);
        match(AdaParser::CONSTANT);
      }
      setState(708);
      array_type_definition();
      setState(711);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::ASSIGN) {
        setState(709);
        match(AdaParser::ASSIGN);
        setState(710);
        expression();
      }
      setState(714);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::WITH) {
        setState(713);
        aspect_specification();
      }
      setState(716);
      match(AdaParser::SEMI);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(718);
      single_task_declaration();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(719);
      single_protected_declaration();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Defining_identifier_listContext ------------------------------------------------------------------

AdaParser::Defining_identifier_listContext::Defining_identifier_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AdaParser::Defining_identifierContext *> AdaParser::Defining_identifier_listContext::defining_identifier() {
  return getRuleContexts<AdaParser::Defining_identifierContext>();
}

AdaParser::Defining_identifierContext* AdaParser::Defining_identifier_listContext::defining_identifier(size_t i) {
  return getRuleContext<AdaParser::Defining_identifierContext>(i);
}

std::vector<tree::TerminalNode *> AdaParser::Defining_identifier_listContext::COMMA() {
  return getTokens(AdaParser::COMMA);
}

tree::TerminalNode* AdaParser::Defining_identifier_listContext::COMMA(size_t i) {
  return getToken(AdaParser::COMMA, i);
}


size_t AdaParser::Defining_identifier_listContext::getRuleIndex() const {
  return AdaParser::RuleDefining_identifier_list;
}

void AdaParser::Defining_identifier_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDefining_identifier_list(this);
}

void AdaParser::Defining_identifier_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDefining_identifier_list(this);
}

AdaParser::Defining_identifier_listContext* AdaParser::defining_identifier_list() {
  Defining_identifier_listContext *_localctx = _tracker.createInstance<Defining_identifier_listContext>(_ctx, getState());
  enterRule(_localctx, 32, AdaParser::RuleDefining_identifier_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(722);
    defining_identifier();
    setState(727);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == AdaParser::COMMA) {
      setState(723);
      match(AdaParser::COMMA);
      setState(724);
      defining_identifier();
      setState(729);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Number_declarationContext ------------------------------------------------------------------

AdaParser::Number_declarationContext::Number_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Defining_identifier_listContext* AdaParser::Number_declarationContext::defining_identifier_list() {
  return getRuleContext<AdaParser::Defining_identifier_listContext>(0);
}

tree::TerminalNode* AdaParser::Number_declarationContext::COLON() {
  return getToken(AdaParser::COLON, 0);
}

tree::TerminalNode* AdaParser::Number_declarationContext::CONSTANT() {
  return getToken(AdaParser::CONSTANT, 0);
}

tree::TerminalNode* AdaParser::Number_declarationContext::ASSIGN() {
  return getToken(AdaParser::ASSIGN, 0);
}

AdaParser::ExpressionContext* AdaParser::Number_declarationContext::expression() {
  return getRuleContext<AdaParser::ExpressionContext>(0);
}


size_t AdaParser::Number_declarationContext::getRuleIndex() const {
  return AdaParser::RuleNumber_declaration;
}

void AdaParser::Number_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNumber_declaration(this);
}

void AdaParser::Number_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNumber_declaration(this);
}

AdaParser::Number_declarationContext* AdaParser::number_declaration() {
  Number_declarationContext *_localctx = _tracker.createInstance<Number_declarationContext>(_ctx, getState());
  enterRule(_localctx, 34, AdaParser::RuleNumber_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(730);
    defining_identifier_list();
    setState(731);
    match(AdaParser::COLON);
    setState(732);
    match(AdaParser::CONSTANT);
    setState(733);
    match(AdaParser::ASSIGN);
    setState(734);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Derived_type_definitionContext ------------------------------------------------------------------

AdaParser::Derived_type_definitionContext::Derived_type_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Derived_type_definitionContext::NEW() {
  return getToken(AdaParser::NEW, 0);
}

AdaParser::Subtype_indicationContext* AdaParser::Derived_type_definitionContext::subtype_indication() {
  return getRuleContext<AdaParser::Subtype_indicationContext>(0);
}

tree::TerminalNode* AdaParser::Derived_type_definitionContext::ABSTRACT() {
  return getToken(AdaParser::ABSTRACT, 0);
}

tree::TerminalNode* AdaParser::Derived_type_definitionContext::LIMITED() {
  return getToken(AdaParser::LIMITED, 0);
}

AdaParser::Record_extension_partContext* AdaParser::Derived_type_definitionContext::record_extension_part() {
  return getRuleContext<AdaParser::Record_extension_partContext>(0);
}

tree::TerminalNode* AdaParser::Derived_type_definitionContext::AND() {
  return getToken(AdaParser::AND, 0);
}

AdaParser::Interface_listContext* AdaParser::Derived_type_definitionContext::interface_list() {
  return getRuleContext<AdaParser::Interface_listContext>(0);
}


size_t AdaParser::Derived_type_definitionContext::getRuleIndex() const {
  return AdaParser::RuleDerived_type_definition;
}

void AdaParser::Derived_type_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDerived_type_definition(this);
}

void AdaParser::Derived_type_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDerived_type_definition(this);
}

AdaParser::Derived_type_definitionContext* AdaParser::derived_type_definition() {
  Derived_type_definitionContext *_localctx = _tracker.createInstance<Derived_type_definitionContext>(_ctx, getState());
  enterRule(_localctx, 36, AdaParser::RuleDerived_type_definition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(737);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::ABSTRACT) {
      setState(736);
      match(AdaParser::ABSTRACT);
    }
    setState(740);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::LIMITED) {
      setState(739);
      match(AdaParser::LIMITED);
    }
    setState(742);
    match(AdaParser::NEW);
    setState(743);
    subtype_indication();
    setState(749);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 29, _ctx)) {
    case 1: {
      setState(746);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::AND) {
        setState(744);
        match(AdaParser::AND);
        setState(745);
        interface_list();
      }
      setState(748);
      record_extension_part();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Range_constraintContext ------------------------------------------------------------------

AdaParser::Range_constraintContext::Range_constraintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Range_constraintContext::RANGE_() {
  return getToken(AdaParser::RANGE_, 0);
}

AdaParser::RangeContext* AdaParser::Range_constraintContext::range() {
  return getRuleContext<AdaParser::RangeContext>(0);
}


size_t AdaParser::Range_constraintContext::getRuleIndex() const {
  return AdaParser::RuleRange_constraint;
}

void AdaParser::Range_constraintContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRange_constraint(this);
}

void AdaParser::Range_constraintContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRange_constraint(this);
}

AdaParser::Range_constraintContext* AdaParser::range_constraint() {
  Range_constraintContext *_localctx = _tracker.createInstance<Range_constraintContext>(_ctx, getState());
  enterRule(_localctx, 38, AdaParser::RuleRange_constraint);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(751);
    match(AdaParser::RANGE_);
    setState(752);
    range();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RangeContext ------------------------------------------------------------------

AdaParser::RangeContext::RangeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Range_attribute_referenceContext* AdaParser::RangeContext::range_attribute_reference() {
  return getRuleContext<AdaParser::Range_attribute_referenceContext>(0);
}

std::vector<AdaParser::Simple_expressionContext *> AdaParser::RangeContext::simple_expression() {
  return getRuleContexts<AdaParser::Simple_expressionContext>();
}

AdaParser::Simple_expressionContext* AdaParser::RangeContext::simple_expression(size_t i) {
  return getRuleContext<AdaParser::Simple_expressionContext>(i);
}

tree::TerminalNode* AdaParser::RangeContext::DOTDOT() {
  return getToken(AdaParser::DOTDOT, 0);
}


size_t AdaParser::RangeContext::getRuleIndex() const {
  return AdaParser::RuleRange;
}

void AdaParser::RangeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRange(this);
}

void AdaParser::RangeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRange(this);
}

AdaParser::RangeContext* AdaParser::range() {
  RangeContext *_localctx = _tracker.createInstance<RangeContext>(_ctx, getState());
  enterRule(_localctx, 40, AdaParser::RuleRange);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(759);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 30, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(754);
      range_attribute_reference();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(755);
      simple_expression();
      setState(756);
      match(AdaParser::DOTDOT);
      setState(757);
      simple_expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Enumeration_type_definitionContext ------------------------------------------------------------------

AdaParser::Enumeration_type_definitionContext::Enumeration_type_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Enumeration_type_definitionContext::LP() {
  return getToken(AdaParser::LP, 0);
}

std::vector<AdaParser::Enumeration_literal_specificationContext *> AdaParser::Enumeration_type_definitionContext::enumeration_literal_specification() {
  return getRuleContexts<AdaParser::Enumeration_literal_specificationContext>();
}

AdaParser::Enumeration_literal_specificationContext* AdaParser::Enumeration_type_definitionContext::enumeration_literal_specification(size_t i) {
  return getRuleContext<AdaParser::Enumeration_literal_specificationContext>(i);
}

tree::TerminalNode* AdaParser::Enumeration_type_definitionContext::RP() {
  return getToken(AdaParser::RP, 0);
}

std::vector<tree::TerminalNode *> AdaParser::Enumeration_type_definitionContext::COMMA() {
  return getTokens(AdaParser::COMMA);
}

tree::TerminalNode* AdaParser::Enumeration_type_definitionContext::COMMA(size_t i) {
  return getToken(AdaParser::COMMA, i);
}


size_t AdaParser::Enumeration_type_definitionContext::getRuleIndex() const {
  return AdaParser::RuleEnumeration_type_definition;
}

void AdaParser::Enumeration_type_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumeration_type_definition(this);
}

void AdaParser::Enumeration_type_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumeration_type_definition(this);
}

AdaParser::Enumeration_type_definitionContext* AdaParser::enumeration_type_definition() {
  Enumeration_type_definitionContext *_localctx = _tracker.createInstance<Enumeration_type_definitionContext>(_ctx, getState());
  enterRule(_localctx, 42, AdaParser::RuleEnumeration_type_definition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(761);
    match(AdaParser::LP);
    setState(762);
    enumeration_literal_specification();
    setState(767);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == AdaParser::COMMA) {
      setState(763);
      match(AdaParser::COMMA);
      setState(764);
      enumeration_literal_specification();
      setState(769);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(770);
    match(AdaParser::RP);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Enumeration_literal_specificationContext ------------------------------------------------------------------

AdaParser::Enumeration_literal_specificationContext::Enumeration_literal_specificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Defining_identifierContext* AdaParser::Enumeration_literal_specificationContext::defining_identifier() {
  return getRuleContext<AdaParser::Defining_identifierContext>(0);
}

AdaParser::Character_literalContext* AdaParser::Enumeration_literal_specificationContext::character_literal() {
  return getRuleContext<AdaParser::Character_literalContext>(0);
}


size_t AdaParser::Enumeration_literal_specificationContext::getRuleIndex() const {
  return AdaParser::RuleEnumeration_literal_specification;
}

void AdaParser::Enumeration_literal_specificationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumeration_literal_specification(this);
}

void AdaParser::Enumeration_literal_specificationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumeration_literal_specification(this);
}

AdaParser::Enumeration_literal_specificationContext* AdaParser::enumeration_literal_specification() {
  Enumeration_literal_specificationContext *_localctx = _tracker.createInstance<Enumeration_literal_specificationContext>(_ctx, getState());
  enterRule(_localctx, 44, AdaParser::RuleEnumeration_literal_specification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(774);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AdaParser::IDENTIFIER_: {
        enterOuterAlt(_localctx, 1);
        setState(772);
        defining_identifier();
        break;
      }

      case AdaParser::CHARACTER_LITERAL_: {
        enterOuterAlt(_localctx, 2);
        setState(773);
        character_literal();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Integer_type_definitionContext ------------------------------------------------------------------

AdaParser::Integer_type_definitionContext::Integer_type_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Signed_integer_type_definitionContext* AdaParser::Integer_type_definitionContext::signed_integer_type_definition() {
  return getRuleContext<AdaParser::Signed_integer_type_definitionContext>(0);
}

AdaParser::Modular_type_definitionContext* AdaParser::Integer_type_definitionContext::modular_type_definition() {
  return getRuleContext<AdaParser::Modular_type_definitionContext>(0);
}


size_t AdaParser::Integer_type_definitionContext::getRuleIndex() const {
  return AdaParser::RuleInteger_type_definition;
}

void AdaParser::Integer_type_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInteger_type_definition(this);
}

void AdaParser::Integer_type_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInteger_type_definition(this);
}

AdaParser::Integer_type_definitionContext* AdaParser::integer_type_definition() {
  Integer_type_definitionContext *_localctx = _tracker.createInstance<Integer_type_definitionContext>(_ctx, getState());
  enterRule(_localctx, 46, AdaParser::RuleInteger_type_definition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(778);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AdaParser::RANGE_: {
        enterOuterAlt(_localctx, 1);
        setState(776);
        signed_integer_type_definition();
        break;
      }

      case AdaParser::MOD: {
        enterOuterAlt(_localctx, 2);
        setState(777);
        modular_type_definition();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Signed_integer_type_definitionContext ------------------------------------------------------------------

AdaParser::Signed_integer_type_definitionContext::Signed_integer_type_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Signed_integer_type_definitionContext::RANGE_() {
  return getToken(AdaParser::RANGE_, 0);
}

std::vector<AdaParser::ExpressionContext *> AdaParser::Signed_integer_type_definitionContext::expression() {
  return getRuleContexts<AdaParser::ExpressionContext>();
}

AdaParser::ExpressionContext* AdaParser::Signed_integer_type_definitionContext::expression(size_t i) {
  return getRuleContext<AdaParser::ExpressionContext>(i);
}

tree::TerminalNode* AdaParser::Signed_integer_type_definitionContext::DOTDOT() {
  return getToken(AdaParser::DOTDOT, 0);
}


size_t AdaParser::Signed_integer_type_definitionContext::getRuleIndex() const {
  return AdaParser::RuleSigned_integer_type_definition;
}

void AdaParser::Signed_integer_type_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSigned_integer_type_definition(this);
}

void AdaParser::Signed_integer_type_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSigned_integer_type_definition(this);
}

AdaParser::Signed_integer_type_definitionContext* AdaParser::signed_integer_type_definition() {
  Signed_integer_type_definitionContext *_localctx = _tracker.createInstance<Signed_integer_type_definitionContext>(_ctx, getState());
  enterRule(_localctx, 48, AdaParser::RuleSigned_integer_type_definition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(780);
    match(AdaParser::RANGE_);
    setState(781);
    expression();
    setState(782);
    match(AdaParser::DOTDOT);
    setState(783);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Modular_type_definitionContext ------------------------------------------------------------------

AdaParser::Modular_type_definitionContext::Modular_type_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Modular_type_definitionContext::MOD() {
  return getToken(AdaParser::MOD, 0);
}

AdaParser::ExpressionContext* AdaParser::Modular_type_definitionContext::expression() {
  return getRuleContext<AdaParser::ExpressionContext>(0);
}


size_t AdaParser::Modular_type_definitionContext::getRuleIndex() const {
  return AdaParser::RuleModular_type_definition;
}

void AdaParser::Modular_type_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModular_type_definition(this);
}

void AdaParser::Modular_type_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModular_type_definition(this);
}

AdaParser::Modular_type_definitionContext* AdaParser::modular_type_definition() {
  Modular_type_definitionContext *_localctx = _tracker.createInstance<Modular_type_definitionContext>(_ctx, getState());
  enterRule(_localctx, 50, AdaParser::RuleModular_type_definition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(785);
    match(AdaParser::MOD);
    setState(786);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Real_type_definitionContext ------------------------------------------------------------------

AdaParser::Real_type_definitionContext::Real_type_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Floating_point_definitionContext* AdaParser::Real_type_definitionContext::floating_point_definition() {
  return getRuleContext<AdaParser::Floating_point_definitionContext>(0);
}

AdaParser::Fixed_point_definitionContext* AdaParser::Real_type_definitionContext::fixed_point_definition() {
  return getRuleContext<AdaParser::Fixed_point_definitionContext>(0);
}


size_t AdaParser::Real_type_definitionContext::getRuleIndex() const {
  return AdaParser::RuleReal_type_definition;
}

void AdaParser::Real_type_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReal_type_definition(this);
}

void AdaParser::Real_type_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReal_type_definition(this);
}

AdaParser::Real_type_definitionContext* AdaParser::real_type_definition() {
  Real_type_definitionContext *_localctx = _tracker.createInstance<Real_type_definitionContext>(_ctx, getState());
  enterRule(_localctx, 52, AdaParser::RuleReal_type_definition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(790);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AdaParser::DIGITS: {
        enterOuterAlt(_localctx, 1);
        setState(788);
        floating_point_definition();
        break;
      }

      case AdaParser::DELTA: {
        enterOuterAlt(_localctx, 2);
        setState(789);
        fixed_point_definition();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Floating_point_definitionContext ------------------------------------------------------------------

AdaParser::Floating_point_definitionContext::Floating_point_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Floating_point_definitionContext::DIGITS() {
  return getToken(AdaParser::DIGITS, 0);
}

AdaParser::ExpressionContext* AdaParser::Floating_point_definitionContext::expression() {
  return getRuleContext<AdaParser::ExpressionContext>(0);
}

AdaParser::Real_range_specificationContext* AdaParser::Floating_point_definitionContext::real_range_specification() {
  return getRuleContext<AdaParser::Real_range_specificationContext>(0);
}


size_t AdaParser::Floating_point_definitionContext::getRuleIndex() const {
  return AdaParser::RuleFloating_point_definition;
}

void AdaParser::Floating_point_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFloating_point_definition(this);
}

void AdaParser::Floating_point_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFloating_point_definition(this);
}

AdaParser::Floating_point_definitionContext* AdaParser::floating_point_definition() {
  Floating_point_definitionContext *_localctx = _tracker.createInstance<Floating_point_definitionContext>(_ctx, getState());
  enterRule(_localctx, 54, AdaParser::RuleFloating_point_definition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(792);
    match(AdaParser::DIGITS);
    setState(793);
    expression();
    setState(795);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::RANGE_) {
      setState(794);
      real_range_specification();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Real_range_specificationContext ------------------------------------------------------------------

AdaParser::Real_range_specificationContext::Real_range_specificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Real_range_specificationContext::RANGE_() {
  return getToken(AdaParser::RANGE_, 0);
}

std::vector<AdaParser::ExpressionContext *> AdaParser::Real_range_specificationContext::expression() {
  return getRuleContexts<AdaParser::ExpressionContext>();
}

AdaParser::ExpressionContext* AdaParser::Real_range_specificationContext::expression(size_t i) {
  return getRuleContext<AdaParser::ExpressionContext>(i);
}

tree::TerminalNode* AdaParser::Real_range_specificationContext::DOTDOT() {
  return getToken(AdaParser::DOTDOT, 0);
}


size_t AdaParser::Real_range_specificationContext::getRuleIndex() const {
  return AdaParser::RuleReal_range_specification;
}

void AdaParser::Real_range_specificationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReal_range_specification(this);
}

void AdaParser::Real_range_specificationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReal_range_specification(this);
}

AdaParser::Real_range_specificationContext* AdaParser::real_range_specification() {
  Real_range_specificationContext *_localctx = _tracker.createInstance<Real_range_specificationContext>(_ctx, getState());
  enterRule(_localctx, 56, AdaParser::RuleReal_range_specification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(797);
    match(AdaParser::RANGE_);
    setState(798);
    expression();
    setState(799);
    match(AdaParser::DOTDOT);
    setState(800);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fixed_point_definitionContext ------------------------------------------------------------------

AdaParser::Fixed_point_definitionContext::Fixed_point_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Ordinary_fixed_point_definitionContext* AdaParser::Fixed_point_definitionContext::ordinary_fixed_point_definition() {
  return getRuleContext<AdaParser::Ordinary_fixed_point_definitionContext>(0);
}

AdaParser::Decimal_fixed_point_definitionContext* AdaParser::Fixed_point_definitionContext::decimal_fixed_point_definition() {
  return getRuleContext<AdaParser::Decimal_fixed_point_definitionContext>(0);
}


size_t AdaParser::Fixed_point_definitionContext::getRuleIndex() const {
  return AdaParser::RuleFixed_point_definition;
}

void AdaParser::Fixed_point_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFixed_point_definition(this);
}

void AdaParser::Fixed_point_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFixed_point_definition(this);
}

AdaParser::Fixed_point_definitionContext* AdaParser::fixed_point_definition() {
  Fixed_point_definitionContext *_localctx = _tracker.createInstance<Fixed_point_definitionContext>(_ctx, getState());
  enterRule(_localctx, 58, AdaParser::RuleFixed_point_definition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(804);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 36, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(802);
      ordinary_fixed_point_definition();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(803);
      decimal_fixed_point_definition();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Ordinary_fixed_point_definitionContext ------------------------------------------------------------------

AdaParser::Ordinary_fixed_point_definitionContext::Ordinary_fixed_point_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Ordinary_fixed_point_definitionContext::DELTA() {
  return getToken(AdaParser::DELTA, 0);
}

AdaParser::ExpressionContext* AdaParser::Ordinary_fixed_point_definitionContext::expression() {
  return getRuleContext<AdaParser::ExpressionContext>(0);
}

AdaParser::Real_range_specificationContext* AdaParser::Ordinary_fixed_point_definitionContext::real_range_specification() {
  return getRuleContext<AdaParser::Real_range_specificationContext>(0);
}


size_t AdaParser::Ordinary_fixed_point_definitionContext::getRuleIndex() const {
  return AdaParser::RuleOrdinary_fixed_point_definition;
}

void AdaParser::Ordinary_fixed_point_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOrdinary_fixed_point_definition(this);
}

void AdaParser::Ordinary_fixed_point_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOrdinary_fixed_point_definition(this);
}

AdaParser::Ordinary_fixed_point_definitionContext* AdaParser::ordinary_fixed_point_definition() {
  Ordinary_fixed_point_definitionContext *_localctx = _tracker.createInstance<Ordinary_fixed_point_definitionContext>(_ctx, getState());
  enterRule(_localctx, 60, AdaParser::RuleOrdinary_fixed_point_definition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(806);
    match(AdaParser::DELTA);
    setState(807);
    expression();
    setState(808);
    real_range_specification();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Decimal_fixed_point_definitionContext ------------------------------------------------------------------

AdaParser::Decimal_fixed_point_definitionContext::Decimal_fixed_point_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Decimal_fixed_point_definitionContext::DELTA() {
  return getToken(AdaParser::DELTA, 0);
}

std::vector<AdaParser::ExpressionContext *> AdaParser::Decimal_fixed_point_definitionContext::expression() {
  return getRuleContexts<AdaParser::ExpressionContext>();
}

AdaParser::ExpressionContext* AdaParser::Decimal_fixed_point_definitionContext::expression(size_t i) {
  return getRuleContext<AdaParser::ExpressionContext>(i);
}

tree::TerminalNode* AdaParser::Decimal_fixed_point_definitionContext::DIGITS() {
  return getToken(AdaParser::DIGITS, 0);
}

AdaParser::Real_range_specificationContext* AdaParser::Decimal_fixed_point_definitionContext::real_range_specification() {
  return getRuleContext<AdaParser::Real_range_specificationContext>(0);
}


size_t AdaParser::Decimal_fixed_point_definitionContext::getRuleIndex() const {
  return AdaParser::RuleDecimal_fixed_point_definition;
}

void AdaParser::Decimal_fixed_point_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDecimal_fixed_point_definition(this);
}

void AdaParser::Decimal_fixed_point_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDecimal_fixed_point_definition(this);
}

AdaParser::Decimal_fixed_point_definitionContext* AdaParser::decimal_fixed_point_definition() {
  Decimal_fixed_point_definitionContext *_localctx = _tracker.createInstance<Decimal_fixed_point_definitionContext>(_ctx, getState());
  enterRule(_localctx, 62, AdaParser::RuleDecimal_fixed_point_definition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(810);
    match(AdaParser::DELTA);
    setState(811);
    expression();
    setState(812);
    match(AdaParser::DIGITS);
    setState(813);
    expression();
    setState(815);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::RANGE_) {
      setState(814);
      real_range_specification();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Digits_constraintContext ------------------------------------------------------------------

AdaParser::Digits_constraintContext::Digits_constraintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Digits_constraintContext::DIGITS() {
  return getToken(AdaParser::DIGITS, 0);
}

AdaParser::ExpressionContext* AdaParser::Digits_constraintContext::expression() {
  return getRuleContext<AdaParser::ExpressionContext>(0);
}

AdaParser::Range_constraintContext* AdaParser::Digits_constraintContext::range_constraint() {
  return getRuleContext<AdaParser::Range_constraintContext>(0);
}


size_t AdaParser::Digits_constraintContext::getRuleIndex() const {
  return AdaParser::RuleDigits_constraint;
}

void AdaParser::Digits_constraintContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDigits_constraint(this);
}

void AdaParser::Digits_constraintContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDigits_constraint(this);
}

AdaParser::Digits_constraintContext* AdaParser::digits_constraint() {
  Digits_constraintContext *_localctx = _tracker.createInstance<Digits_constraintContext>(_ctx, getState());
  enterRule(_localctx, 64, AdaParser::RuleDigits_constraint);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(817);
    match(AdaParser::DIGITS);
    setState(818);
    expression();
    setState(820);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 38, _ctx)) {
    case 1: {
      setState(819);
      range_constraint();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Array_type_definitionContext ------------------------------------------------------------------

AdaParser::Array_type_definitionContext::Array_type_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Unconstrained_array_definitionContext* AdaParser::Array_type_definitionContext::unconstrained_array_definition() {
  return getRuleContext<AdaParser::Unconstrained_array_definitionContext>(0);
}

AdaParser::Constrained_array_definitionContext* AdaParser::Array_type_definitionContext::constrained_array_definition() {
  return getRuleContext<AdaParser::Constrained_array_definitionContext>(0);
}


size_t AdaParser::Array_type_definitionContext::getRuleIndex() const {
  return AdaParser::RuleArray_type_definition;
}

void AdaParser::Array_type_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArray_type_definition(this);
}

void AdaParser::Array_type_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArray_type_definition(this);
}

AdaParser::Array_type_definitionContext* AdaParser::array_type_definition() {
  Array_type_definitionContext *_localctx = _tracker.createInstance<Array_type_definitionContext>(_ctx, getState());
  enterRule(_localctx, 66, AdaParser::RuleArray_type_definition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(824);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 39, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(822);
      unconstrained_array_definition();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(823);
      constrained_array_definition();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Unconstrained_array_definitionContext ------------------------------------------------------------------

AdaParser::Unconstrained_array_definitionContext::Unconstrained_array_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Unconstrained_array_definitionContext::ARRAY() {
  return getToken(AdaParser::ARRAY, 0);
}

tree::TerminalNode* AdaParser::Unconstrained_array_definitionContext::LP() {
  return getToken(AdaParser::LP, 0);
}

std::vector<AdaParser::Index_subtype_definitionContext *> AdaParser::Unconstrained_array_definitionContext::index_subtype_definition() {
  return getRuleContexts<AdaParser::Index_subtype_definitionContext>();
}

AdaParser::Index_subtype_definitionContext* AdaParser::Unconstrained_array_definitionContext::index_subtype_definition(size_t i) {
  return getRuleContext<AdaParser::Index_subtype_definitionContext>(i);
}

tree::TerminalNode* AdaParser::Unconstrained_array_definitionContext::RP() {
  return getToken(AdaParser::RP, 0);
}

tree::TerminalNode* AdaParser::Unconstrained_array_definitionContext::OF() {
  return getToken(AdaParser::OF, 0);
}

AdaParser::Component_definitionContext* AdaParser::Unconstrained_array_definitionContext::component_definition() {
  return getRuleContext<AdaParser::Component_definitionContext>(0);
}

std::vector<tree::TerminalNode *> AdaParser::Unconstrained_array_definitionContext::COMMA() {
  return getTokens(AdaParser::COMMA);
}

tree::TerminalNode* AdaParser::Unconstrained_array_definitionContext::COMMA(size_t i) {
  return getToken(AdaParser::COMMA, i);
}


size_t AdaParser::Unconstrained_array_definitionContext::getRuleIndex() const {
  return AdaParser::RuleUnconstrained_array_definition;
}

void AdaParser::Unconstrained_array_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnconstrained_array_definition(this);
}

void AdaParser::Unconstrained_array_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnconstrained_array_definition(this);
}

AdaParser::Unconstrained_array_definitionContext* AdaParser::unconstrained_array_definition() {
  Unconstrained_array_definitionContext *_localctx = _tracker.createInstance<Unconstrained_array_definitionContext>(_ctx, getState());
  enterRule(_localctx, 68, AdaParser::RuleUnconstrained_array_definition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(826);
    match(AdaParser::ARRAY);
    setState(827);
    match(AdaParser::LP);
    setState(828);
    index_subtype_definition();
    setState(833);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == AdaParser::COMMA) {
      setState(829);
      match(AdaParser::COMMA);
      setState(830);
      index_subtype_definition();
      setState(835);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(836);
    match(AdaParser::RP);
    setState(837);
    match(AdaParser::OF);
    setState(838);
    component_definition();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Index_subtype_definitionContext ------------------------------------------------------------------

AdaParser::Index_subtype_definitionContext::Index_subtype_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Subtype_markContext* AdaParser::Index_subtype_definitionContext::subtype_mark() {
  return getRuleContext<AdaParser::Subtype_markContext>(0);
}

tree::TerminalNode* AdaParser::Index_subtype_definitionContext::RANGE_() {
  return getToken(AdaParser::RANGE_, 0);
}

tree::TerminalNode* AdaParser::Index_subtype_definitionContext::BOX() {
  return getToken(AdaParser::BOX, 0);
}


size_t AdaParser::Index_subtype_definitionContext::getRuleIndex() const {
  return AdaParser::RuleIndex_subtype_definition;
}

void AdaParser::Index_subtype_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIndex_subtype_definition(this);
}

void AdaParser::Index_subtype_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIndex_subtype_definition(this);
}

AdaParser::Index_subtype_definitionContext* AdaParser::index_subtype_definition() {
  Index_subtype_definitionContext *_localctx = _tracker.createInstance<Index_subtype_definitionContext>(_ctx, getState());
  enterRule(_localctx, 70, AdaParser::RuleIndex_subtype_definition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(840);
    subtype_mark();
    setState(841);
    match(AdaParser::RANGE_);
    setState(842);
    match(AdaParser::BOX);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Constrained_array_definitionContext ------------------------------------------------------------------

AdaParser::Constrained_array_definitionContext::Constrained_array_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Constrained_array_definitionContext::ARRAY() {
  return getToken(AdaParser::ARRAY, 0);
}

tree::TerminalNode* AdaParser::Constrained_array_definitionContext::LP() {
  return getToken(AdaParser::LP, 0);
}

std::vector<AdaParser::Discrete_subtype_definitionContext *> AdaParser::Constrained_array_definitionContext::discrete_subtype_definition() {
  return getRuleContexts<AdaParser::Discrete_subtype_definitionContext>();
}

AdaParser::Discrete_subtype_definitionContext* AdaParser::Constrained_array_definitionContext::discrete_subtype_definition(size_t i) {
  return getRuleContext<AdaParser::Discrete_subtype_definitionContext>(i);
}

tree::TerminalNode* AdaParser::Constrained_array_definitionContext::RP() {
  return getToken(AdaParser::RP, 0);
}

tree::TerminalNode* AdaParser::Constrained_array_definitionContext::OF() {
  return getToken(AdaParser::OF, 0);
}

AdaParser::Component_definitionContext* AdaParser::Constrained_array_definitionContext::component_definition() {
  return getRuleContext<AdaParser::Component_definitionContext>(0);
}

std::vector<tree::TerminalNode *> AdaParser::Constrained_array_definitionContext::COMMA() {
  return getTokens(AdaParser::COMMA);
}

tree::TerminalNode* AdaParser::Constrained_array_definitionContext::COMMA(size_t i) {
  return getToken(AdaParser::COMMA, i);
}


size_t AdaParser::Constrained_array_definitionContext::getRuleIndex() const {
  return AdaParser::RuleConstrained_array_definition;
}

void AdaParser::Constrained_array_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstrained_array_definition(this);
}

void AdaParser::Constrained_array_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstrained_array_definition(this);
}

AdaParser::Constrained_array_definitionContext* AdaParser::constrained_array_definition() {
  Constrained_array_definitionContext *_localctx = _tracker.createInstance<Constrained_array_definitionContext>(_ctx, getState());
  enterRule(_localctx, 72, AdaParser::RuleConstrained_array_definition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(844);
    match(AdaParser::ARRAY);
    setState(845);
    match(AdaParser::LP);
    setState(846);
    discrete_subtype_definition();
    setState(851);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == AdaParser::COMMA) {
      setState(847);
      match(AdaParser::COMMA);
      setState(848);
      discrete_subtype_definition();
      setState(853);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(854);
    match(AdaParser::RP);
    setState(855);
    match(AdaParser::OF);
    setState(856);
    component_definition();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Discrete_subtype_definitionContext ------------------------------------------------------------------

AdaParser::Discrete_subtype_definitionContext::Discrete_subtype_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Subtype_indicationContext* AdaParser::Discrete_subtype_definitionContext::subtype_indication() {
  return getRuleContext<AdaParser::Subtype_indicationContext>(0);
}

AdaParser::RangeContext* AdaParser::Discrete_subtype_definitionContext::range() {
  return getRuleContext<AdaParser::RangeContext>(0);
}


size_t AdaParser::Discrete_subtype_definitionContext::getRuleIndex() const {
  return AdaParser::RuleDiscrete_subtype_definition;
}

void AdaParser::Discrete_subtype_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDiscrete_subtype_definition(this);
}

void AdaParser::Discrete_subtype_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDiscrete_subtype_definition(this);
}

AdaParser::Discrete_subtype_definitionContext* AdaParser::discrete_subtype_definition() {
  Discrete_subtype_definitionContext *_localctx = _tracker.createInstance<Discrete_subtype_definitionContext>(_ctx, getState());
  enterRule(_localctx, 74, AdaParser::RuleDiscrete_subtype_definition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(860);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 42, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(858);
      subtype_indication();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(859);
      range();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Component_definitionContext ------------------------------------------------------------------

AdaParser::Component_definitionContext::Component_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Subtype_indicationContext* AdaParser::Component_definitionContext::subtype_indication() {
  return getRuleContext<AdaParser::Subtype_indicationContext>(0);
}

tree::TerminalNode* AdaParser::Component_definitionContext::ALIASED() {
  return getToken(AdaParser::ALIASED, 0);
}

AdaParser::Access_definitionContext* AdaParser::Component_definitionContext::access_definition() {
  return getRuleContext<AdaParser::Access_definitionContext>(0);
}


size_t AdaParser::Component_definitionContext::getRuleIndex() const {
  return AdaParser::RuleComponent_definition;
}

void AdaParser::Component_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComponent_definition(this);
}

void AdaParser::Component_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComponent_definition(this);
}

AdaParser::Component_definitionContext* AdaParser::component_definition() {
  Component_definitionContext *_localctx = _tracker.createInstance<Component_definitionContext>(_ctx, getState());
  enterRule(_localctx, 76, AdaParser::RuleComponent_definition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(870);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 45, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(863);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::ALIASED) {
        setState(862);
        match(AdaParser::ALIASED);
      }
      setState(865);
      subtype_indication();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(867);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::ALIASED) {
        setState(866);
        match(AdaParser::ALIASED);
      }
      setState(869);
      access_definition();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Index_constraintContext ------------------------------------------------------------------

AdaParser::Index_constraintContext::Index_constraintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Index_constraintContext::LP() {
  return getToken(AdaParser::LP, 0);
}

std::vector<AdaParser::Discrete_rangeContext *> AdaParser::Index_constraintContext::discrete_range() {
  return getRuleContexts<AdaParser::Discrete_rangeContext>();
}

AdaParser::Discrete_rangeContext* AdaParser::Index_constraintContext::discrete_range(size_t i) {
  return getRuleContext<AdaParser::Discrete_rangeContext>(i);
}

tree::TerminalNode* AdaParser::Index_constraintContext::RP() {
  return getToken(AdaParser::RP, 0);
}

std::vector<tree::TerminalNode *> AdaParser::Index_constraintContext::COMMA() {
  return getTokens(AdaParser::COMMA);
}

tree::TerminalNode* AdaParser::Index_constraintContext::COMMA(size_t i) {
  return getToken(AdaParser::COMMA, i);
}


size_t AdaParser::Index_constraintContext::getRuleIndex() const {
  return AdaParser::RuleIndex_constraint;
}

void AdaParser::Index_constraintContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIndex_constraint(this);
}

void AdaParser::Index_constraintContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIndex_constraint(this);
}

AdaParser::Index_constraintContext* AdaParser::index_constraint() {
  Index_constraintContext *_localctx = _tracker.createInstance<Index_constraintContext>(_ctx, getState());
  enterRule(_localctx, 78, AdaParser::RuleIndex_constraint);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(872);
    match(AdaParser::LP);
    setState(873);
    discrete_range();
    setState(878);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == AdaParser::COMMA) {
      setState(874);
      match(AdaParser::COMMA);
      setState(875);
      discrete_range();
      setState(880);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(881);
    match(AdaParser::RP);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Discrete_rangeContext ------------------------------------------------------------------

AdaParser::Discrete_rangeContext::Discrete_rangeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Subtype_indicationContext* AdaParser::Discrete_rangeContext::subtype_indication() {
  return getRuleContext<AdaParser::Subtype_indicationContext>(0);
}

AdaParser::RangeContext* AdaParser::Discrete_rangeContext::range() {
  return getRuleContext<AdaParser::RangeContext>(0);
}


size_t AdaParser::Discrete_rangeContext::getRuleIndex() const {
  return AdaParser::RuleDiscrete_range;
}

void AdaParser::Discrete_rangeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDiscrete_range(this);
}

void AdaParser::Discrete_rangeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDiscrete_range(this);
}

AdaParser::Discrete_rangeContext* AdaParser::discrete_range() {
  Discrete_rangeContext *_localctx = _tracker.createInstance<Discrete_rangeContext>(_ctx, getState());
  enterRule(_localctx, 80, AdaParser::RuleDiscrete_range);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(885);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 47, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(883);
      subtype_indication();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(884);
      range();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Discriminant_partContext ------------------------------------------------------------------

AdaParser::Discriminant_partContext::Discriminant_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Unknown_discriminant_partContext* AdaParser::Discriminant_partContext::unknown_discriminant_part() {
  return getRuleContext<AdaParser::Unknown_discriminant_partContext>(0);
}

AdaParser::Known_discriminant_partContext* AdaParser::Discriminant_partContext::known_discriminant_part() {
  return getRuleContext<AdaParser::Known_discriminant_partContext>(0);
}


size_t AdaParser::Discriminant_partContext::getRuleIndex() const {
  return AdaParser::RuleDiscriminant_part;
}

void AdaParser::Discriminant_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDiscriminant_part(this);
}

void AdaParser::Discriminant_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDiscriminant_part(this);
}

AdaParser::Discriminant_partContext* AdaParser::discriminant_part() {
  Discriminant_partContext *_localctx = _tracker.createInstance<Discriminant_partContext>(_ctx, getState());
  enterRule(_localctx, 82, AdaParser::RuleDiscriminant_part);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(889);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 48, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(887);
      unknown_discriminant_part();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(888);
      known_discriminant_part();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Unknown_discriminant_partContext ------------------------------------------------------------------

AdaParser::Unknown_discriminant_partContext::Unknown_discriminant_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Unknown_discriminant_partContext::LP() {
  return getToken(AdaParser::LP, 0);
}

tree::TerminalNode* AdaParser::Unknown_discriminant_partContext::BOX() {
  return getToken(AdaParser::BOX, 0);
}

tree::TerminalNode* AdaParser::Unknown_discriminant_partContext::RP() {
  return getToken(AdaParser::RP, 0);
}


size_t AdaParser::Unknown_discriminant_partContext::getRuleIndex() const {
  return AdaParser::RuleUnknown_discriminant_part;
}

void AdaParser::Unknown_discriminant_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnknown_discriminant_part(this);
}

void AdaParser::Unknown_discriminant_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnknown_discriminant_part(this);
}

AdaParser::Unknown_discriminant_partContext* AdaParser::unknown_discriminant_part() {
  Unknown_discriminant_partContext *_localctx = _tracker.createInstance<Unknown_discriminant_partContext>(_ctx, getState());
  enterRule(_localctx, 84, AdaParser::RuleUnknown_discriminant_part);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(891);
    match(AdaParser::LP);
    setState(892);
    match(AdaParser::BOX);
    setState(893);
    match(AdaParser::RP);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Known_discriminant_partContext ------------------------------------------------------------------

AdaParser::Known_discriminant_partContext::Known_discriminant_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Known_discriminant_partContext::LP() {
  return getToken(AdaParser::LP, 0);
}

std::vector<AdaParser::Discriminant_specificationContext *> AdaParser::Known_discriminant_partContext::discriminant_specification() {
  return getRuleContexts<AdaParser::Discriminant_specificationContext>();
}

AdaParser::Discriminant_specificationContext* AdaParser::Known_discriminant_partContext::discriminant_specification(size_t i) {
  return getRuleContext<AdaParser::Discriminant_specificationContext>(i);
}

tree::TerminalNode* AdaParser::Known_discriminant_partContext::RP() {
  return getToken(AdaParser::RP, 0);
}

std::vector<tree::TerminalNode *> AdaParser::Known_discriminant_partContext::SEMI() {
  return getTokens(AdaParser::SEMI);
}

tree::TerminalNode* AdaParser::Known_discriminant_partContext::SEMI(size_t i) {
  return getToken(AdaParser::SEMI, i);
}


size_t AdaParser::Known_discriminant_partContext::getRuleIndex() const {
  return AdaParser::RuleKnown_discriminant_part;
}

void AdaParser::Known_discriminant_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterKnown_discriminant_part(this);
}

void AdaParser::Known_discriminant_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitKnown_discriminant_part(this);
}

AdaParser::Known_discriminant_partContext* AdaParser::known_discriminant_part() {
  Known_discriminant_partContext *_localctx = _tracker.createInstance<Known_discriminant_partContext>(_ctx, getState());
  enterRule(_localctx, 86, AdaParser::RuleKnown_discriminant_part);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(895);
    match(AdaParser::LP);
    setState(896);
    discriminant_specification();
    setState(901);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == AdaParser::SEMI) {
      setState(897);
      match(AdaParser::SEMI);
      setState(898);
      discriminant_specification();
      setState(903);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(904);
    match(AdaParser::RP);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Discriminant_specificationContext ------------------------------------------------------------------

AdaParser::Discriminant_specificationContext::Discriminant_specificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Defining_identifier_listContext* AdaParser::Discriminant_specificationContext::defining_identifier_list() {
  return getRuleContext<AdaParser::Defining_identifier_listContext>(0);
}

tree::TerminalNode* AdaParser::Discriminant_specificationContext::COLON() {
  return getToken(AdaParser::COLON, 0);
}

AdaParser::Subtype_markContext* AdaParser::Discriminant_specificationContext::subtype_mark() {
  return getRuleContext<AdaParser::Subtype_markContext>(0);
}

AdaParser::Null_exclusionContext* AdaParser::Discriminant_specificationContext::null_exclusion() {
  return getRuleContext<AdaParser::Null_exclusionContext>(0);
}

tree::TerminalNode* AdaParser::Discriminant_specificationContext::ASSIGN() {
  return getToken(AdaParser::ASSIGN, 0);
}

AdaParser::ExpressionContext* AdaParser::Discriminant_specificationContext::expression() {
  return getRuleContext<AdaParser::ExpressionContext>(0);
}

AdaParser::Access_definitionContext* AdaParser::Discriminant_specificationContext::access_definition() {
  return getRuleContext<AdaParser::Access_definitionContext>(0);
}


size_t AdaParser::Discriminant_specificationContext::getRuleIndex() const {
  return AdaParser::RuleDiscriminant_specification;
}

void AdaParser::Discriminant_specificationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDiscriminant_specification(this);
}

void AdaParser::Discriminant_specificationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDiscriminant_specification(this);
}

AdaParser::Discriminant_specificationContext* AdaParser::discriminant_specification() {
  Discriminant_specificationContext *_localctx = _tracker.createInstance<Discriminant_specificationContext>(_ctx, getState());
  enterRule(_localctx, 88, AdaParser::RuleDiscriminant_specification);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(923);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 53, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(906);
      defining_identifier_list();
      setState(907);
      match(AdaParser::COLON);
      setState(909);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::NOT) {
        setState(908);
        null_exclusion();
      }
      setState(911);
      subtype_mark();
      setState(914);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::ASSIGN) {
        setState(912);
        match(AdaParser::ASSIGN);
        setState(913);
        expression();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(916);
      defining_identifier_list();
      setState(917);
      match(AdaParser::COLON);
      setState(918);
      access_definition();
      setState(921);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::ASSIGN) {
        setState(919);
        match(AdaParser::ASSIGN);
        setState(920);
        expression();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Default_expressionContext ------------------------------------------------------------------

AdaParser::Default_expressionContext::Default_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::ExpressionContext* AdaParser::Default_expressionContext::expression() {
  return getRuleContext<AdaParser::ExpressionContext>(0);
}


size_t AdaParser::Default_expressionContext::getRuleIndex() const {
  return AdaParser::RuleDefault_expression;
}

void AdaParser::Default_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDefault_expression(this);
}

void AdaParser::Default_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDefault_expression(this);
}

AdaParser::Default_expressionContext* AdaParser::default_expression() {
  Default_expressionContext *_localctx = _tracker.createInstance<Default_expressionContext>(_ctx, getState());
  enterRule(_localctx, 90, AdaParser::RuleDefault_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(925);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Discriminant_constraintContext ------------------------------------------------------------------

AdaParser::Discriminant_constraintContext::Discriminant_constraintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Discriminant_constraintContext::LP() {
  return getToken(AdaParser::LP, 0);
}

std::vector<AdaParser::Discriminant_associationContext *> AdaParser::Discriminant_constraintContext::discriminant_association() {
  return getRuleContexts<AdaParser::Discriminant_associationContext>();
}

AdaParser::Discriminant_associationContext* AdaParser::Discriminant_constraintContext::discriminant_association(size_t i) {
  return getRuleContext<AdaParser::Discriminant_associationContext>(i);
}

tree::TerminalNode* AdaParser::Discriminant_constraintContext::RP() {
  return getToken(AdaParser::RP, 0);
}

std::vector<tree::TerminalNode *> AdaParser::Discriminant_constraintContext::COMMA() {
  return getTokens(AdaParser::COMMA);
}

tree::TerminalNode* AdaParser::Discriminant_constraintContext::COMMA(size_t i) {
  return getToken(AdaParser::COMMA, i);
}


size_t AdaParser::Discriminant_constraintContext::getRuleIndex() const {
  return AdaParser::RuleDiscriminant_constraint;
}

void AdaParser::Discriminant_constraintContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDiscriminant_constraint(this);
}

void AdaParser::Discriminant_constraintContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDiscriminant_constraint(this);
}

AdaParser::Discriminant_constraintContext* AdaParser::discriminant_constraint() {
  Discriminant_constraintContext *_localctx = _tracker.createInstance<Discriminant_constraintContext>(_ctx, getState());
  enterRule(_localctx, 92, AdaParser::RuleDiscriminant_constraint);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(927);
    match(AdaParser::LP);
    setState(928);
    discriminant_association();
    setState(933);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == AdaParser::COMMA) {
      setState(929);
      match(AdaParser::COMMA);
      setState(930);
      discriminant_association();
      setState(935);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(936);
    match(AdaParser::RP);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Discriminant_associationContext ------------------------------------------------------------------

AdaParser::Discriminant_associationContext::Discriminant_associationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::ExpressionContext* AdaParser::Discriminant_associationContext::expression() {
  return getRuleContext<AdaParser::ExpressionContext>(0);
}

std::vector<AdaParser::Selector_nameContext *> AdaParser::Discriminant_associationContext::selector_name() {
  return getRuleContexts<AdaParser::Selector_nameContext>();
}

AdaParser::Selector_nameContext* AdaParser::Discriminant_associationContext::selector_name(size_t i) {
  return getRuleContext<AdaParser::Selector_nameContext>(i);
}

tree::TerminalNode* AdaParser::Discriminant_associationContext::ARROW() {
  return getToken(AdaParser::ARROW, 0);
}

std::vector<tree::TerminalNode *> AdaParser::Discriminant_associationContext::VL() {
  return getTokens(AdaParser::VL);
}

tree::TerminalNode* AdaParser::Discriminant_associationContext::VL(size_t i) {
  return getToken(AdaParser::VL, i);
}


size_t AdaParser::Discriminant_associationContext::getRuleIndex() const {
  return AdaParser::RuleDiscriminant_association;
}

void AdaParser::Discriminant_associationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDiscriminant_association(this);
}

void AdaParser::Discriminant_associationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDiscriminant_association(this);
}

AdaParser::Discriminant_associationContext* AdaParser::discriminant_association() {
  Discriminant_associationContext *_localctx = _tracker.createInstance<Discriminant_associationContext>(_ctx, getState());
  enterRule(_localctx, 94, AdaParser::RuleDiscriminant_association);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(948);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 56, _ctx)) {
    case 1: {
      setState(938);
      selector_name();
      setState(943);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == AdaParser::VL) {
        setState(939);
        match(AdaParser::VL);
        setState(940);
        selector_name();
        setState(945);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(946);
      match(AdaParser::ARROW);
      break;
    }

    default:
      break;
    }
    setState(950);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Record_type_definitionContext ------------------------------------------------------------------

AdaParser::Record_type_definitionContext::Record_type_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Record_definitionContext* AdaParser::Record_type_definitionContext::record_definition() {
  return getRuleContext<AdaParser::Record_definitionContext>(0);
}

tree::TerminalNode* AdaParser::Record_type_definitionContext::TAGGED() {
  return getToken(AdaParser::TAGGED, 0);
}

tree::TerminalNode* AdaParser::Record_type_definitionContext::LIMITED() {
  return getToken(AdaParser::LIMITED, 0);
}

tree::TerminalNode* AdaParser::Record_type_definitionContext::ABSTRACT() {
  return getToken(AdaParser::ABSTRACT, 0);
}


size_t AdaParser::Record_type_definitionContext::getRuleIndex() const {
  return AdaParser::RuleRecord_type_definition;
}

void AdaParser::Record_type_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRecord_type_definition(this);
}

void AdaParser::Record_type_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRecord_type_definition(this);
}

AdaParser::Record_type_definitionContext* AdaParser::record_type_definition() {
  Record_type_definitionContext *_localctx = _tracker.createInstance<Record_type_definitionContext>(_ctx, getState());
  enterRule(_localctx, 96, AdaParser::RuleRecord_type_definition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(956);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::ABSTRACT

    || _la == AdaParser::TAGGED) {
      setState(953);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::ABSTRACT) {
        setState(952);
        match(AdaParser::ABSTRACT);
      }
      setState(955);
      match(AdaParser::TAGGED);
    }
    setState(959);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::LIMITED) {
      setState(958);
      match(AdaParser::LIMITED);
    }
    setState(961);
    record_definition();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Record_definitionContext ------------------------------------------------------------------

AdaParser::Record_definitionContext::Record_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> AdaParser::Record_definitionContext::RECORD() {
  return getTokens(AdaParser::RECORD);
}

tree::TerminalNode* AdaParser::Record_definitionContext::RECORD(size_t i) {
  return getToken(AdaParser::RECORD, i);
}

AdaParser::Component_listContext* AdaParser::Record_definitionContext::component_list() {
  return getRuleContext<AdaParser::Component_listContext>(0);
}

tree::TerminalNode* AdaParser::Record_definitionContext::END() {
  return getToken(AdaParser::END, 0);
}

tree::TerminalNode* AdaParser::Record_definitionContext::NULL_() {
  return getToken(AdaParser::NULL_, 0);
}


size_t AdaParser::Record_definitionContext::getRuleIndex() const {
  return AdaParser::RuleRecord_definition;
}

void AdaParser::Record_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRecord_definition(this);
}

void AdaParser::Record_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRecord_definition(this);
}

AdaParser::Record_definitionContext* AdaParser::record_definition() {
  Record_definitionContext *_localctx = _tracker.createInstance<Record_definitionContext>(_ctx, getState());
  enterRule(_localctx, 98, AdaParser::RuleRecord_definition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(970);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AdaParser::RECORD: {
        enterOuterAlt(_localctx, 1);
        setState(963);
        match(AdaParser::RECORD);
        setState(964);
        component_list();
        setState(965);
        match(AdaParser::END);
        setState(966);
        match(AdaParser::RECORD);
        break;
      }

      case AdaParser::NULL_: {
        enterOuterAlt(_localctx, 2);
        setState(968);
        match(AdaParser::NULL_);
        setState(969);
        match(AdaParser::RECORD);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Component_listContext ------------------------------------------------------------------

AdaParser::Component_listContext::Component_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AdaParser::Component_itemContext *> AdaParser::Component_listContext::component_item() {
  return getRuleContexts<AdaParser::Component_itemContext>();
}

AdaParser::Component_itemContext* AdaParser::Component_listContext::component_item(size_t i) {
  return getRuleContext<AdaParser::Component_itemContext>(i);
}

AdaParser::Variant_partContext* AdaParser::Component_listContext::variant_part() {
  return getRuleContext<AdaParser::Variant_partContext>(0);
}

tree::TerminalNode* AdaParser::Component_listContext::NULL_() {
  return getToken(AdaParser::NULL_, 0);
}

tree::TerminalNode* AdaParser::Component_listContext::SEMI() {
  return getToken(AdaParser::SEMI, 0);
}


size_t AdaParser::Component_listContext::getRuleIndex() const {
  return AdaParser::RuleComponent_list;
}

void AdaParser::Component_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComponent_list(this);
}

void AdaParser::Component_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComponent_list(this);
}

AdaParser::Component_listContext* AdaParser::component_list() {
  Component_listContext *_localctx = _tracker.createInstance<Component_listContext>(_ctx, getState());
  enterRule(_localctx, 100, AdaParser::RuleComponent_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(986);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 63, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(973); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(972);
        component_item();
        setState(975); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == AdaParser::FOR

      || _la == AdaParser::IDENTIFIER_);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(980);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == AdaParser::FOR

      || _la == AdaParser::IDENTIFIER_) {
        setState(977);
        component_item();
        setState(982);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(983);
      variant_part();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(984);
      match(AdaParser::NULL_);
      setState(985);
      match(AdaParser::SEMI);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Component_itemContext ------------------------------------------------------------------

AdaParser::Component_itemContext::Component_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Component_declarationContext* AdaParser::Component_itemContext::component_declaration() {
  return getRuleContext<AdaParser::Component_declarationContext>(0);
}

AdaParser::Aspect_clauseContext* AdaParser::Component_itemContext::aspect_clause() {
  return getRuleContext<AdaParser::Aspect_clauseContext>(0);
}


size_t AdaParser::Component_itemContext::getRuleIndex() const {
  return AdaParser::RuleComponent_item;
}

void AdaParser::Component_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComponent_item(this);
}

void AdaParser::Component_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComponent_item(this);
}

AdaParser::Component_itemContext* AdaParser::component_item() {
  Component_itemContext *_localctx = _tracker.createInstance<Component_itemContext>(_ctx, getState());
  enterRule(_localctx, 102, AdaParser::RuleComponent_item);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(990);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AdaParser::IDENTIFIER_: {
        enterOuterAlt(_localctx, 1);
        setState(988);
        component_declaration();
        break;
      }

      case AdaParser::FOR: {
        enterOuterAlt(_localctx, 2);
        setState(989);
        aspect_clause();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Component_declarationContext ------------------------------------------------------------------

AdaParser::Component_declarationContext::Component_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Defining_identifier_listContext* AdaParser::Component_declarationContext::defining_identifier_list() {
  return getRuleContext<AdaParser::Defining_identifier_listContext>(0);
}

tree::TerminalNode* AdaParser::Component_declarationContext::COLON() {
  return getToken(AdaParser::COLON, 0);
}

AdaParser::Component_definitionContext* AdaParser::Component_declarationContext::component_definition() {
  return getRuleContext<AdaParser::Component_definitionContext>(0);
}

tree::TerminalNode* AdaParser::Component_declarationContext::SEMI() {
  return getToken(AdaParser::SEMI, 0);
}

tree::TerminalNode* AdaParser::Component_declarationContext::ASSIGN() {
  return getToken(AdaParser::ASSIGN, 0);
}

AdaParser::Default_expressionContext* AdaParser::Component_declarationContext::default_expression() {
  return getRuleContext<AdaParser::Default_expressionContext>(0);
}

AdaParser::Aspect_specificationContext* AdaParser::Component_declarationContext::aspect_specification() {
  return getRuleContext<AdaParser::Aspect_specificationContext>(0);
}


size_t AdaParser::Component_declarationContext::getRuleIndex() const {
  return AdaParser::RuleComponent_declaration;
}

void AdaParser::Component_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComponent_declaration(this);
}

void AdaParser::Component_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComponent_declaration(this);
}

AdaParser::Component_declarationContext* AdaParser::component_declaration() {
  Component_declarationContext *_localctx = _tracker.createInstance<Component_declarationContext>(_ctx, getState());
  enterRule(_localctx, 104, AdaParser::RuleComponent_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(992);
    defining_identifier_list();
    setState(993);
    match(AdaParser::COLON);
    setState(994);
    component_definition();
    setState(997);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::ASSIGN) {
      setState(995);
      match(AdaParser::ASSIGN);
      setState(996);
      default_expression();
    }
    setState(1000);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::WITH) {
      setState(999);
      aspect_specification();
    }
    setState(1002);
    match(AdaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Variant_partContext ------------------------------------------------------------------

AdaParser::Variant_partContext::Variant_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> AdaParser::Variant_partContext::CASE() {
  return getTokens(AdaParser::CASE);
}

tree::TerminalNode* AdaParser::Variant_partContext::CASE(size_t i) {
  return getToken(AdaParser::CASE, i);
}

AdaParser::Direct_nameContext* AdaParser::Variant_partContext::direct_name() {
  return getRuleContext<AdaParser::Direct_nameContext>(0);
}

tree::TerminalNode* AdaParser::Variant_partContext::IS() {
  return getToken(AdaParser::IS, 0);
}

tree::TerminalNode* AdaParser::Variant_partContext::END() {
  return getToken(AdaParser::END, 0);
}

tree::TerminalNode* AdaParser::Variant_partContext::SEMI() {
  return getToken(AdaParser::SEMI, 0);
}

std::vector<AdaParser::VariantContext *> AdaParser::Variant_partContext::variant() {
  return getRuleContexts<AdaParser::VariantContext>();
}

AdaParser::VariantContext* AdaParser::Variant_partContext::variant(size_t i) {
  return getRuleContext<AdaParser::VariantContext>(i);
}


size_t AdaParser::Variant_partContext::getRuleIndex() const {
  return AdaParser::RuleVariant_part;
}

void AdaParser::Variant_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariant_part(this);
}

void AdaParser::Variant_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariant_part(this);
}

AdaParser::Variant_partContext* AdaParser::variant_part() {
  Variant_partContext *_localctx = _tracker.createInstance<Variant_partContext>(_ctx, getState());
  enterRule(_localctx, 106, AdaParser::RuleVariant_part);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1004);
    match(AdaParser::CASE);
    setState(1005);
    direct_name();
    setState(1006);
    match(AdaParser::IS);
    setState(1008); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1007);
      variant();
      setState(1010); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == AdaParser::WHEN);
    setState(1012);
    match(AdaParser::END);
    setState(1013);
    match(AdaParser::CASE);
    setState(1014);
    match(AdaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariantContext ------------------------------------------------------------------

AdaParser::VariantContext::VariantContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::VariantContext::WHEN() {
  return getToken(AdaParser::WHEN, 0);
}

AdaParser::Discrete_choice_listContext* AdaParser::VariantContext::discrete_choice_list() {
  return getRuleContext<AdaParser::Discrete_choice_listContext>(0);
}

tree::TerminalNode* AdaParser::VariantContext::ARROW() {
  return getToken(AdaParser::ARROW, 0);
}

AdaParser::Component_listContext* AdaParser::VariantContext::component_list() {
  return getRuleContext<AdaParser::Component_listContext>(0);
}


size_t AdaParser::VariantContext::getRuleIndex() const {
  return AdaParser::RuleVariant;
}

void AdaParser::VariantContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariant(this);
}

void AdaParser::VariantContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariant(this);
}

AdaParser::VariantContext* AdaParser::variant() {
  VariantContext *_localctx = _tracker.createInstance<VariantContext>(_ctx, getState());
  enterRule(_localctx, 108, AdaParser::RuleVariant);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1016);
    match(AdaParser::WHEN);
    setState(1017);
    discrete_choice_list();
    setState(1018);
    match(AdaParser::ARROW);
    setState(1019);
    component_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Discrete_choice_listContext ------------------------------------------------------------------

AdaParser::Discrete_choice_listContext::Discrete_choice_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AdaParser::Discrete_choiceContext *> AdaParser::Discrete_choice_listContext::discrete_choice() {
  return getRuleContexts<AdaParser::Discrete_choiceContext>();
}

AdaParser::Discrete_choiceContext* AdaParser::Discrete_choice_listContext::discrete_choice(size_t i) {
  return getRuleContext<AdaParser::Discrete_choiceContext>(i);
}

std::vector<tree::TerminalNode *> AdaParser::Discrete_choice_listContext::VL() {
  return getTokens(AdaParser::VL);
}

tree::TerminalNode* AdaParser::Discrete_choice_listContext::VL(size_t i) {
  return getToken(AdaParser::VL, i);
}


size_t AdaParser::Discrete_choice_listContext::getRuleIndex() const {
  return AdaParser::RuleDiscrete_choice_list;
}

void AdaParser::Discrete_choice_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDiscrete_choice_list(this);
}

void AdaParser::Discrete_choice_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDiscrete_choice_list(this);
}

AdaParser::Discrete_choice_listContext* AdaParser::discrete_choice_list() {
  Discrete_choice_listContext *_localctx = _tracker.createInstance<Discrete_choice_listContext>(_ctx, getState());
  enterRule(_localctx, 110, AdaParser::RuleDiscrete_choice_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1021);
    discrete_choice();
    setState(1026);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == AdaParser::VL) {
      setState(1022);
      match(AdaParser::VL);
      setState(1023);
      discrete_choice();
      setState(1028);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Discrete_choiceContext ------------------------------------------------------------------

AdaParser::Discrete_choiceContext::Discrete_choiceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Choice_expressionContext* AdaParser::Discrete_choiceContext::choice_expression() {
  return getRuleContext<AdaParser::Choice_expressionContext>(0);
}

AdaParser::Subtype_indicationContext* AdaParser::Discrete_choiceContext::subtype_indication() {
  return getRuleContext<AdaParser::Subtype_indicationContext>(0);
}

AdaParser::RangeContext* AdaParser::Discrete_choiceContext::range() {
  return getRuleContext<AdaParser::RangeContext>(0);
}

tree::TerminalNode* AdaParser::Discrete_choiceContext::OTHERS() {
  return getToken(AdaParser::OTHERS, 0);
}


size_t AdaParser::Discrete_choiceContext::getRuleIndex() const {
  return AdaParser::RuleDiscrete_choice;
}

void AdaParser::Discrete_choiceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDiscrete_choice(this);
}

void AdaParser::Discrete_choiceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDiscrete_choice(this);
}

AdaParser::Discrete_choiceContext* AdaParser::discrete_choice() {
  Discrete_choiceContext *_localctx = _tracker.createInstance<Discrete_choiceContext>(_ctx, getState());
  enterRule(_localctx, 112, AdaParser::RuleDiscrete_choice);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1033);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 69, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1029);
      choice_expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1030);
      subtype_indication();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1031);
      range();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1032);
      match(AdaParser::OTHERS);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Record_extension_partContext ------------------------------------------------------------------

AdaParser::Record_extension_partContext::Record_extension_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Record_extension_partContext::WITH() {
  return getToken(AdaParser::WITH, 0);
}

AdaParser::Record_definitionContext* AdaParser::Record_extension_partContext::record_definition() {
  return getRuleContext<AdaParser::Record_definitionContext>(0);
}


size_t AdaParser::Record_extension_partContext::getRuleIndex() const {
  return AdaParser::RuleRecord_extension_part;
}

void AdaParser::Record_extension_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRecord_extension_part(this);
}

void AdaParser::Record_extension_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRecord_extension_part(this);
}

AdaParser::Record_extension_partContext* AdaParser::record_extension_part() {
  Record_extension_partContext *_localctx = _tracker.createInstance<Record_extension_partContext>(_ctx, getState());
  enterRule(_localctx, 114, AdaParser::RuleRecord_extension_part);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1035);
    match(AdaParser::WITH);
    setState(1036);
    record_definition();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Abstract_subprogram_declarationContext ------------------------------------------------------------------

AdaParser::Abstract_subprogram_declarationContext::Abstract_subprogram_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Subprogram_specificationContext* AdaParser::Abstract_subprogram_declarationContext::subprogram_specification() {
  return getRuleContext<AdaParser::Subprogram_specificationContext>(0);
}

tree::TerminalNode* AdaParser::Abstract_subprogram_declarationContext::IS() {
  return getToken(AdaParser::IS, 0);
}

tree::TerminalNode* AdaParser::Abstract_subprogram_declarationContext::ABSTRACT() {
  return getToken(AdaParser::ABSTRACT, 0);
}

AdaParser::Overriding_indicatorContext* AdaParser::Abstract_subprogram_declarationContext::overriding_indicator() {
  return getRuleContext<AdaParser::Overriding_indicatorContext>(0);
}

AdaParser::Aspect_specificationContext* AdaParser::Abstract_subprogram_declarationContext::aspect_specification() {
  return getRuleContext<AdaParser::Aspect_specificationContext>(0);
}


size_t AdaParser::Abstract_subprogram_declarationContext::getRuleIndex() const {
  return AdaParser::RuleAbstract_subprogram_declaration;
}

void AdaParser::Abstract_subprogram_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAbstract_subprogram_declaration(this);
}

void AdaParser::Abstract_subprogram_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAbstract_subprogram_declaration(this);
}

AdaParser::Abstract_subprogram_declarationContext* AdaParser::abstract_subprogram_declaration() {
  Abstract_subprogram_declarationContext *_localctx = _tracker.createInstance<Abstract_subprogram_declarationContext>(_ctx, getState());
  enterRule(_localctx, 116, AdaParser::RuleAbstract_subprogram_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1039);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::NOT

    || _la == AdaParser::OVERRIDING) {
      setState(1038);
      overriding_indicator();
    }
    setState(1041);
    subprogram_specification();
    setState(1042);
    match(AdaParser::IS);
    setState(1043);
    match(AdaParser::ABSTRACT);
    setState(1045);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::WITH) {
      setState(1044);
      aspect_specification();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Interface_type_definitionContext ------------------------------------------------------------------

AdaParser::Interface_type_definitionContext::Interface_type_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Interface_type_definitionContext::INTERFACE() {
  return getToken(AdaParser::INTERFACE, 0);
}

tree::TerminalNode* AdaParser::Interface_type_definitionContext::AND() {
  return getToken(AdaParser::AND, 0);
}

AdaParser::Interface_listContext* AdaParser::Interface_type_definitionContext::interface_list() {
  return getRuleContext<AdaParser::Interface_listContext>(0);
}

tree::TerminalNode* AdaParser::Interface_type_definitionContext::LIMITED() {
  return getToken(AdaParser::LIMITED, 0);
}

tree::TerminalNode* AdaParser::Interface_type_definitionContext::TASK() {
  return getToken(AdaParser::TASK, 0);
}

tree::TerminalNode* AdaParser::Interface_type_definitionContext::PROTECTED() {
  return getToken(AdaParser::PROTECTED, 0);
}

tree::TerminalNode* AdaParser::Interface_type_definitionContext::SYNCHRONIZED() {
  return getToken(AdaParser::SYNCHRONIZED, 0);
}


size_t AdaParser::Interface_type_definitionContext::getRuleIndex() const {
  return AdaParser::RuleInterface_type_definition;
}

void AdaParser::Interface_type_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterface_type_definition(this);
}

void AdaParser::Interface_type_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterface_type_definition(this);
}

AdaParser::Interface_type_definitionContext* AdaParser::interface_type_definition() {
  Interface_type_definitionContext *_localctx = _tracker.createInstance<Interface_type_definitionContext>(_ctx, getState());
  enterRule(_localctx, 118, AdaParser::RuleInterface_type_definition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1048);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 34) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 34)) & 1342210049) != 0)) {
      setState(1047);
      _la = _input->LA(1);
      if (!(((((_la - 34) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 34)) & 1342210049) != 0))) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(1050);
    match(AdaParser::INTERFACE);
    setState(1053);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::AND) {
      setState(1051);
      match(AdaParser::AND);
      setState(1052);
      interface_list();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Interface_listContext ------------------------------------------------------------------

AdaParser::Interface_listContext::Interface_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AdaParser::Subtype_markContext *> AdaParser::Interface_listContext::subtype_mark() {
  return getRuleContexts<AdaParser::Subtype_markContext>();
}

AdaParser::Subtype_markContext* AdaParser::Interface_listContext::subtype_mark(size_t i) {
  return getRuleContext<AdaParser::Subtype_markContext>(i);
}

std::vector<tree::TerminalNode *> AdaParser::Interface_listContext::AND() {
  return getTokens(AdaParser::AND);
}

tree::TerminalNode* AdaParser::Interface_listContext::AND(size_t i) {
  return getToken(AdaParser::AND, i);
}


size_t AdaParser::Interface_listContext::getRuleIndex() const {
  return AdaParser::RuleInterface_list;
}

void AdaParser::Interface_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterface_list(this);
}

void AdaParser::Interface_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterface_list(this);
}

AdaParser::Interface_listContext* AdaParser::interface_list() {
  Interface_listContext *_localctx = _tracker.createInstance<Interface_listContext>(_ctx, getState());
  enterRule(_localctx, 120, AdaParser::RuleInterface_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1055);
    subtype_mark();
    setState(1060);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == AdaParser::AND) {
      setState(1056);
      match(AdaParser::AND);
      setState(1057);
      subtype_mark();
      setState(1062);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Access_type_definitionContext ------------------------------------------------------------------

AdaParser::Access_type_definitionContext::Access_type_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Access_to_object_definitionContext* AdaParser::Access_type_definitionContext::access_to_object_definition() {
  return getRuleContext<AdaParser::Access_to_object_definitionContext>(0);
}

AdaParser::Null_exclusionContext* AdaParser::Access_type_definitionContext::null_exclusion() {
  return getRuleContext<AdaParser::Null_exclusionContext>(0);
}

AdaParser::Access_to_subprogram_definitionContext* AdaParser::Access_type_definitionContext::access_to_subprogram_definition() {
  return getRuleContext<AdaParser::Access_to_subprogram_definitionContext>(0);
}


size_t AdaParser::Access_type_definitionContext::getRuleIndex() const {
  return AdaParser::RuleAccess_type_definition;
}

void AdaParser::Access_type_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAccess_type_definition(this);
}

void AdaParser::Access_type_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAccess_type_definition(this);
}

AdaParser::Access_type_definitionContext* AdaParser::access_type_definition() {
  Access_type_definitionContext *_localctx = _tracker.createInstance<Access_type_definitionContext>(_ctx, getState());
  enterRule(_localctx, 122, AdaParser::RuleAccess_type_definition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1071);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 77, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1064);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::NOT) {
        setState(1063);
        null_exclusion();
      }
      setState(1066);
      access_to_object_definition();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1068);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::NOT) {
        setState(1067);
        null_exclusion();
      }
      setState(1070);
      access_to_subprogram_definition();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Access_to_object_definitionContext ------------------------------------------------------------------

AdaParser::Access_to_object_definitionContext::Access_to_object_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Access_to_object_definitionContext::ACCESS() {
  return getToken(AdaParser::ACCESS, 0);
}

AdaParser::Subtype_indicationContext* AdaParser::Access_to_object_definitionContext::subtype_indication() {
  return getRuleContext<AdaParser::Subtype_indicationContext>(0);
}

AdaParser::General_access_modifierContext* AdaParser::Access_to_object_definitionContext::general_access_modifier() {
  return getRuleContext<AdaParser::General_access_modifierContext>(0);
}


size_t AdaParser::Access_to_object_definitionContext::getRuleIndex() const {
  return AdaParser::RuleAccess_to_object_definition;
}

void AdaParser::Access_to_object_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAccess_to_object_definition(this);
}

void AdaParser::Access_to_object_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAccess_to_object_definition(this);
}

AdaParser::Access_to_object_definitionContext* AdaParser::access_to_object_definition() {
  Access_to_object_definitionContext *_localctx = _tracker.createInstance<Access_to_object_definitionContext>(_ctx, getState());
  enterRule(_localctx, 124, AdaParser::RuleAccess_to_object_definition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1073);
    match(AdaParser::ACCESS);
    setState(1075);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::ALL

    || _la == AdaParser::CONSTANT) {
      setState(1074);
      general_access_modifier();
    }
    setState(1077);
    subtype_indication();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- General_access_modifierContext ------------------------------------------------------------------

AdaParser::General_access_modifierContext::General_access_modifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::General_access_modifierContext::ALL() {
  return getToken(AdaParser::ALL, 0);
}

tree::TerminalNode* AdaParser::General_access_modifierContext::CONSTANT() {
  return getToken(AdaParser::CONSTANT, 0);
}


size_t AdaParser::General_access_modifierContext::getRuleIndex() const {
  return AdaParser::RuleGeneral_access_modifier;
}

void AdaParser::General_access_modifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGeneral_access_modifier(this);
}

void AdaParser::General_access_modifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGeneral_access_modifier(this);
}

AdaParser::General_access_modifierContext* AdaParser::general_access_modifier() {
  General_access_modifierContext *_localctx = _tracker.createInstance<General_access_modifierContext>(_ctx, getState());
  enterRule(_localctx, 126, AdaParser::RuleGeneral_access_modifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1079);
    _la = _input->LA(1);
    if (!(_la == AdaParser::ALL

    || _la == AdaParser::CONSTANT)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Access_to_subprogram_definitionContext ------------------------------------------------------------------

AdaParser::Access_to_subprogram_definitionContext::Access_to_subprogram_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Access_to_subprogram_definitionContext::ACCESS() {
  return getToken(AdaParser::ACCESS, 0);
}

tree::TerminalNode* AdaParser::Access_to_subprogram_definitionContext::PROCEDURE() {
  return getToken(AdaParser::PROCEDURE, 0);
}

tree::TerminalNode* AdaParser::Access_to_subprogram_definitionContext::PROTECTED() {
  return getToken(AdaParser::PROTECTED, 0);
}

AdaParser::Formal_partContext* AdaParser::Access_to_subprogram_definitionContext::formal_part() {
  return getRuleContext<AdaParser::Formal_partContext>(0);
}

tree::TerminalNode* AdaParser::Access_to_subprogram_definitionContext::FUNCTION() {
  return getToken(AdaParser::FUNCTION, 0);
}

AdaParser::Parameter_and_result_profileContext* AdaParser::Access_to_subprogram_definitionContext::parameter_and_result_profile() {
  return getRuleContext<AdaParser::Parameter_and_result_profileContext>(0);
}


size_t AdaParser::Access_to_subprogram_definitionContext::getRuleIndex() const {
  return AdaParser::RuleAccess_to_subprogram_definition;
}

void AdaParser::Access_to_subprogram_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAccess_to_subprogram_definition(this);
}

void AdaParser::Access_to_subprogram_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAccess_to_subprogram_definition(this);
}

AdaParser::Access_to_subprogram_definitionContext* AdaParser::access_to_subprogram_definition() {
  Access_to_subprogram_definitionContext *_localctx = _tracker.createInstance<Access_to_subprogram_definitionContext>(_ctx, getState());
  enterRule(_localctx, 128, AdaParser::RuleAccess_to_subprogram_definition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1095);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 82, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1081);
      match(AdaParser::ACCESS);
      setState(1083);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::PROTECTED) {
        setState(1082);
        match(AdaParser::PROTECTED);
      }
      setState(1085);
      match(AdaParser::PROCEDURE);
      setState(1087);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::LP) {
        setState(1086);
        formal_part();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1089);
      match(AdaParser::ACCESS);
      setState(1091);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::PROTECTED) {
        setState(1090);
        match(AdaParser::PROTECTED);
      }
      setState(1093);
      match(AdaParser::FUNCTION);
      setState(1094);
      parameter_and_result_profile();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Null_exclusionContext ------------------------------------------------------------------

AdaParser::Null_exclusionContext::Null_exclusionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Null_exclusionContext::NOT() {
  return getToken(AdaParser::NOT, 0);
}

tree::TerminalNode* AdaParser::Null_exclusionContext::NULL_() {
  return getToken(AdaParser::NULL_, 0);
}


size_t AdaParser::Null_exclusionContext::getRuleIndex() const {
  return AdaParser::RuleNull_exclusion;
}

void AdaParser::Null_exclusionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNull_exclusion(this);
}

void AdaParser::Null_exclusionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNull_exclusion(this);
}

AdaParser::Null_exclusionContext* AdaParser::null_exclusion() {
  Null_exclusionContext *_localctx = _tracker.createInstance<Null_exclusionContext>(_ctx, getState());
  enterRule(_localctx, 130, AdaParser::RuleNull_exclusion);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1097);
    match(AdaParser::NOT);
    setState(1098);
    match(AdaParser::NULL_);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Access_definitionContext ------------------------------------------------------------------

AdaParser::Access_definitionContext::Access_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Access_definitionContext::ACCESS() {
  return getToken(AdaParser::ACCESS, 0);
}

AdaParser::Subtype_markContext* AdaParser::Access_definitionContext::subtype_mark() {
  return getRuleContext<AdaParser::Subtype_markContext>(0);
}

AdaParser::Null_exclusionContext* AdaParser::Access_definitionContext::null_exclusion() {
  return getRuleContext<AdaParser::Null_exclusionContext>(0);
}

tree::TerminalNode* AdaParser::Access_definitionContext::CONSTANT() {
  return getToken(AdaParser::CONSTANT, 0);
}

tree::TerminalNode* AdaParser::Access_definitionContext::PROCEDURE() {
  return getToken(AdaParser::PROCEDURE, 0);
}

tree::TerminalNode* AdaParser::Access_definitionContext::PROTECTED() {
  return getToken(AdaParser::PROTECTED, 0);
}

AdaParser::Formal_partContext* AdaParser::Access_definitionContext::formal_part() {
  return getRuleContext<AdaParser::Formal_partContext>(0);
}

tree::TerminalNode* AdaParser::Access_definitionContext::FUNCTION() {
  return getToken(AdaParser::FUNCTION, 0);
}

AdaParser::Parameter_and_result_profileContext* AdaParser::Access_definitionContext::parameter_and_result_profile() {
  return getRuleContext<AdaParser::Parameter_and_result_profileContext>(0);
}


size_t AdaParser::Access_definitionContext::getRuleIndex() const {
  return AdaParser::RuleAccess_definition;
}

void AdaParser::Access_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAccess_definition(this);
}

void AdaParser::Access_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAccess_definition(this);
}

AdaParser::Access_definitionContext* AdaParser::access_definition() {
  Access_definitionContext *_localctx = _tracker.createInstance<Access_definitionContext>(_ctx, getState());
  enterRule(_localctx, 132, AdaParser::RuleAccess_definition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1128);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 90, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1101);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::NOT) {
        setState(1100);
        null_exclusion();
      }
      setState(1103);
      match(AdaParser::ACCESS);
      setState(1105);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::CONSTANT) {
        setState(1104);
        match(AdaParser::CONSTANT);
      }
      setState(1107);
      subtype_mark();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1109);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::NOT) {
        setState(1108);
        null_exclusion();
      }
      setState(1111);
      match(AdaParser::ACCESS);
      setState(1113);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::PROTECTED) {
        setState(1112);
        match(AdaParser::PROTECTED);
      }
      setState(1115);
      match(AdaParser::PROCEDURE);
      setState(1117);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::LP) {
        setState(1116);
        formal_part();
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1120);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::NOT) {
        setState(1119);
        null_exclusion();
      }
      setState(1122);
      match(AdaParser::ACCESS);
      setState(1124);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::PROTECTED) {
        setState(1123);
        match(AdaParser::PROTECTED);
      }
      setState(1126);
      match(AdaParser::FUNCTION);
      setState(1127);
      parameter_and_result_profile();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Incomplete_type_declarationContext ------------------------------------------------------------------

AdaParser::Incomplete_type_declarationContext::Incomplete_type_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Incomplete_type_declarationContext::TYPE() {
  return getToken(AdaParser::TYPE, 0);
}

AdaParser::Defining_identifierContext* AdaParser::Incomplete_type_declarationContext::defining_identifier() {
  return getRuleContext<AdaParser::Defining_identifierContext>(0);
}

tree::TerminalNode* AdaParser::Incomplete_type_declarationContext::SEMI() {
  return getToken(AdaParser::SEMI, 0);
}

AdaParser::Discriminant_partContext* AdaParser::Incomplete_type_declarationContext::discriminant_part() {
  return getRuleContext<AdaParser::Discriminant_partContext>(0);
}

tree::TerminalNode* AdaParser::Incomplete_type_declarationContext::IS() {
  return getToken(AdaParser::IS, 0);
}

tree::TerminalNode* AdaParser::Incomplete_type_declarationContext::TAGGED() {
  return getToken(AdaParser::TAGGED, 0);
}


size_t AdaParser::Incomplete_type_declarationContext::getRuleIndex() const {
  return AdaParser::RuleIncomplete_type_declaration;
}

void AdaParser::Incomplete_type_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIncomplete_type_declaration(this);
}

void AdaParser::Incomplete_type_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIncomplete_type_declaration(this);
}

AdaParser::Incomplete_type_declarationContext* AdaParser::incomplete_type_declaration() {
  Incomplete_type_declarationContext *_localctx = _tracker.createInstance<Incomplete_type_declarationContext>(_ctx, getState());
  enterRule(_localctx, 134, AdaParser::RuleIncomplete_type_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1130);
    match(AdaParser::TYPE);
    setState(1131);
    defining_identifier();
    setState(1133);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::LP) {
      setState(1132);
      discriminant_part();
    }
    setState(1137);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::IS) {
      setState(1135);
      match(AdaParser::IS);
      setState(1136);
      match(AdaParser::TAGGED);
    }
    setState(1139);
    match(AdaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Declarative_partContext ------------------------------------------------------------------

AdaParser::Declarative_partContext::Declarative_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AdaParser::Declarative_itemContext *> AdaParser::Declarative_partContext::declarative_item() {
  return getRuleContexts<AdaParser::Declarative_itemContext>();
}

AdaParser::Declarative_itemContext* AdaParser::Declarative_partContext::declarative_item(size_t i) {
  return getRuleContext<AdaParser::Declarative_itemContext>(i);
}


size_t AdaParser::Declarative_partContext::getRuleIndex() const {
  return AdaParser::RuleDeclarative_part;
}

void AdaParser::Declarative_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeclarative_part(this);
}

void AdaParser::Declarative_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeclarative_part(this);
}

AdaParser::Declarative_partContext* AdaParser::declarative_part() {
  Declarative_partContext *_localctx = _tracker.createInstance<Declarative_partContext>(_ctx, getState());
  enterRule(_localctx, 136, AdaParser::RuleDeclarative_part);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1144);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 26) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 26)) & 36040101386260487) != 0)) {
      setState(1141);
      declarative_item();
      setState(1146);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Declarative_itemContext ------------------------------------------------------------------

AdaParser::Declarative_itemContext::Declarative_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Basic_declarative_itemContext* AdaParser::Declarative_itemContext::basic_declarative_item() {
  return getRuleContext<AdaParser::Basic_declarative_itemContext>(0);
}

AdaParser::BodyContext* AdaParser::Declarative_itemContext::body() {
  return getRuleContext<AdaParser::BodyContext>(0);
}


size_t AdaParser::Declarative_itemContext::getRuleIndex() const {
  return AdaParser::RuleDeclarative_item;
}

void AdaParser::Declarative_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeclarative_item(this);
}

void AdaParser::Declarative_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeclarative_item(this);
}

AdaParser::Declarative_itemContext* AdaParser::declarative_item() {
  Declarative_itemContext *_localctx = _tracker.createInstance<Declarative_itemContext>(_ctx, getState());
  enterRule(_localctx, 138, AdaParser::RuleDeclarative_item);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1149);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 94, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1147);
      basic_declarative_item();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1148);
      body();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Basic_declarative_itemContext ------------------------------------------------------------------

AdaParser::Basic_declarative_itemContext::Basic_declarative_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Basic_declarationContext* AdaParser::Basic_declarative_itemContext::basic_declaration() {
  return getRuleContext<AdaParser::Basic_declarationContext>(0);
}

AdaParser::Aspect_clauseContext* AdaParser::Basic_declarative_itemContext::aspect_clause() {
  return getRuleContext<AdaParser::Aspect_clauseContext>(0);
}

AdaParser::Use_clauseContext* AdaParser::Basic_declarative_itemContext::use_clause() {
  return getRuleContext<AdaParser::Use_clauseContext>(0);
}


size_t AdaParser::Basic_declarative_itemContext::getRuleIndex() const {
  return AdaParser::RuleBasic_declarative_item;
}

void AdaParser::Basic_declarative_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBasic_declarative_item(this);
}

void AdaParser::Basic_declarative_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBasic_declarative_item(this);
}

AdaParser::Basic_declarative_itemContext* AdaParser::basic_declarative_item() {
  Basic_declarative_itemContext *_localctx = _tracker.createInstance<Basic_declarative_itemContext>(_ctx, getState());
  enterRule(_localctx, 140, AdaParser::RuleBasic_declarative_item);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1154);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AdaParser::FUNCTION:
      case AdaParser::GENERIC:
      case AdaParser::NOT:
      case AdaParser::OVERRIDING:
      case AdaParser::PACKAGE:
      case AdaParser::PROCEDURE:
      case AdaParser::PROTECTED:
      case AdaParser::SUBTYPE:
      case AdaParser::TASK:
      case AdaParser::TYPE:
      case AdaParser::IDENTIFIER_: {
        enterOuterAlt(_localctx, 1);
        setState(1151);
        basic_declaration();
        break;
      }

      case AdaParser::FOR: {
        enterOuterAlt(_localctx, 2);
        setState(1152);
        aspect_clause();
        break;
      }

      case AdaParser::USE: {
        enterOuterAlt(_localctx, 3);
        setState(1153);
        use_clause();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BodyContext ------------------------------------------------------------------

AdaParser::BodyContext::BodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Proper_bodyContext* AdaParser::BodyContext::proper_body() {
  return getRuleContext<AdaParser::Proper_bodyContext>(0);
}

AdaParser::Body_stubContext* AdaParser::BodyContext::body_stub() {
  return getRuleContext<AdaParser::Body_stubContext>(0);
}


size_t AdaParser::BodyContext::getRuleIndex() const {
  return AdaParser::RuleBody;
}

void AdaParser::BodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBody(this);
}

void AdaParser::BodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBody(this);
}

AdaParser::BodyContext* AdaParser::body() {
  BodyContext *_localctx = _tracker.createInstance<BodyContext>(_ctx, getState());
  enterRule(_localctx, 142, AdaParser::RuleBody);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1158);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 96, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1156);
      proper_body();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1157);
      body_stub();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Proper_bodyContext ------------------------------------------------------------------

AdaParser::Proper_bodyContext::Proper_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Subprogram_bodyContext* AdaParser::Proper_bodyContext::subprogram_body() {
  return getRuleContext<AdaParser::Subprogram_bodyContext>(0);
}

AdaParser::Package_bodyContext* AdaParser::Proper_bodyContext::package_body() {
  return getRuleContext<AdaParser::Package_bodyContext>(0);
}

AdaParser::Task_bodyContext* AdaParser::Proper_bodyContext::task_body() {
  return getRuleContext<AdaParser::Task_bodyContext>(0);
}

AdaParser::Protected_bodyContext* AdaParser::Proper_bodyContext::protected_body() {
  return getRuleContext<AdaParser::Protected_bodyContext>(0);
}


size_t AdaParser::Proper_bodyContext::getRuleIndex() const {
  return AdaParser::RuleProper_body;
}

void AdaParser::Proper_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProper_body(this);
}

void AdaParser::Proper_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProper_body(this);
}

AdaParser::Proper_bodyContext* AdaParser::proper_body() {
  Proper_bodyContext *_localctx = _tracker.createInstance<Proper_bodyContext>(_ctx, getState());
  enterRule(_localctx, 144, AdaParser::RuleProper_body);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1164);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AdaParser::FUNCTION:
      case AdaParser::NOT:
      case AdaParser::OVERRIDING:
      case AdaParser::PROCEDURE: {
        enterOuterAlt(_localctx, 1);
        setState(1160);
        subprogram_body();
        break;
      }

      case AdaParser::PACKAGE: {
        enterOuterAlt(_localctx, 2);
        setState(1161);
        package_body();
        break;
      }

      case AdaParser::TASK: {
        enterOuterAlt(_localctx, 3);
        setState(1162);
        task_body();
        break;
      }

      case AdaParser::PROTECTED: {
        enterOuterAlt(_localctx, 4);
        setState(1163);
        protected_body();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NameContext ------------------------------------------------------------------

AdaParser::NameContext::NameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Direct_nameContext* AdaParser::NameContext::direct_name() {
  return getRuleContext<AdaParser::Direct_nameContext>(0);
}

AdaParser::Type_conversionContext* AdaParser::NameContext::type_conversion() {
  return getRuleContext<AdaParser::Type_conversionContext>(0);
}

AdaParser::Character_literalContext* AdaParser::NameContext::character_literal() {
  return getRuleContext<AdaParser::Character_literalContext>(0);
}

AdaParser::Qualified_expressionContext* AdaParser::NameContext::qualified_expression() {
  return getRuleContext<AdaParser::Qualified_expressionContext>(0);
}

AdaParser::NameContext* AdaParser::NameContext::name() {
  return getRuleContext<AdaParser::NameContext>(0);
}

tree::TerminalNode* AdaParser::NameContext::DOT() {
  return getToken(AdaParser::DOT, 0);
}

tree::TerminalNode* AdaParser::NameContext::ALL() {
  return getToken(AdaParser::ALL, 0);
}

tree::TerminalNode* AdaParser::NameContext::LP() {
  return getToken(AdaParser::LP, 0);
}

std::vector<AdaParser::ExpressionContext *> AdaParser::NameContext::expression() {
  return getRuleContexts<AdaParser::ExpressionContext>();
}

AdaParser::ExpressionContext* AdaParser::NameContext::expression(size_t i) {
  return getRuleContext<AdaParser::ExpressionContext>(i);
}

tree::TerminalNode* AdaParser::NameContext::RP() {
  return getToken(AdaParser::RP, 0);
}

std::vector<tree::TerminalNode *> AdaParser::NameContext::COMMA() {
  return getTokens(AdaParser::COMMA);
}

tree::TerminalNode* AdaParser::NameContext::COMMA(size_t i) {
  return getToken(AdaParser::COMMA, i);
}

AdaParser::Discrete_rangeContext* AdaParser::NameContext::discrete_range() {
  return getRuleContext<AdaParser::Discrete_rangeContext>(0);
}

AdaParser::Selector_nameContext* AdaParser::NameContext::selector_name() {
  return getRuleContext<AdaParser::Selector_nameContext>(0);
}

tree::TerminalNode* AdaParser::NameContext::SQ() {
  return getToken(AdaParser::SQ, 0);
}

AdaParser::Attribute_designatorContext* AdaParser::NameContext::attribute_designator() {
  return getRuleContext<AdaParser::Attribute_designatorContext>(0);
}

AdaParser::Actual_parameter_partContext* AdaParser::NameContext::actual_parameter_part() {
  return getRuleContext<AdaParser::Actual_parameter_partContext>(0);
}


size_t AdaParser::NameContext::getRuleIndex() const {
  return AdaParser::RuleName;
}

void AdaParser::NameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterName(this);
}

void AdaParser::NameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitName(this);
}


AdaParser::NameContext* AdaParser::name() {
   return name(0);
}

AdaParser::NameContext* AdaParser::name(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  AdaParser::NameContext *_localctx = _tracker.createInstance<NameContext>(_ctx, parentState);
  AdaParser::NameContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 146;
  enterRecursionRule(_localctx, 146, AdaParser::RuleName, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1171);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 98, _ctx)) {
    case 1: {
      setState(1167);
      direct_name();
      break;
    }

    case 2: {
      setState(1168);
      type_conversion();
      break;
    }

    case 3: {
      setState(1169);
      character_literal();
      break;
    }

    case 4: {
      setState(1170);
      qualified_expression();
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(1205);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 101, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(1203);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 100, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<NameContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleName);
          setState(1173);

          if (!(precpred(_ctx, 10))) throw FailedPredicateException(this, "precpred(_ctx, 10)");
          setState(1174);
          match(AdaParser::DOT);
          setState(1175);
          match(AdaParser::ALL);
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<NameContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleName);
          setState(1176);

          if (!(precpred(_ctx, 9))) throw FailedPredicateException(this, "precpred(_ctx, 9)");
          setState(1177);
          match(AdaParser::LP);
          setState(1178);
          expression();
          setState(1183);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == AdaParser::COMMA) {
            setState(1179);
            match(AdaParser::COMMA);
            setState(1180);
            expression();
            setState(1185);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
          setState(1186);
          match(AdaParser::RP);
          break;
        }

        case 3: {
          _localctx = _tracker.createInstance<NameContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleName);
          setState(1188);

          if (!(precpred(_ctx, 8))) throw FailedPredicateException(this, "precpred(_ctx, 8)");
          setState(1189);
          match(AdaParser::LP);
          setState(1190);
          discrete_range();
          setState(1191);
          match(AdaParser::RP);
          break;
        }

        case 4: {
          _localctx = _tracker.createInstance<NameContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleName);
          setState(1193);

          if (!(precpred(_ctx, 7))) throw FailedPredicateException(this, "precpred(_ctx, 7)");
          setState(1194);
          match(AdaParser::DOT);
          setState(1195);
          selector_name();
          break;
        }

        case 5: {
          _localctx = _tracker.createInstance<NameContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleName);
          setState(1196);

          if (!(precpred(_ctx, 6))) throw FailedPredicateException(this, "precpred(_ctx, 6)");
          setState(1197);
          match(AdaParser::SQ);
          setState(1198);
          attribute_designator();
          break;
        }

        case 6: {
          _localctx = _tracker.createInstance<NameContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleName);
          setState(1199);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(1200);
          actual_parameter_part();
          break;
        }

        case 7: {
          _localctx = _tracker.createInstance<NameContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleName);
          setState(1201);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(1202);
          actual_parameter_part();
          break;
        }

        default:
          break;
        } 
      }
      setState(1207);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 101, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- Direct_nameContext ------------------------------------------------------------------

AdaParser::Direct_nameContext::Direct_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::IdentifierContext* AdaParser::Direct_nameContext::identifier() {
  return getRuleContext<AdaParser::IdentifierContext>(0);
}

AdaParser::Operator_symbolContext* AdaParser::Direct_nameContext::operator_symbol() {
  return getRuleContext<AdaParser::Operator_symbolContext>(0);
}


size_t AdaParser::Direct_nameContext::getRuleIndex() const {
  return AdaParser::RuleDirect_name;
}

void AdaParser::Direct_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDirect_name(this);
}

void AdaParser::Direct_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDirect_name(this);
}

AdaParser::Direct_nameContext* AdaParser::direct_name() {
  Direct_nameContext *_localctx = _tracker.createInstance<Direct_nameContext>(_ctx, getState());
  enterRule(_localctx, 148, AdaParser::RuleDirect_name);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1210);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AdaParser::IDENTIFIER_: {
        enterOuterAlt(_localctx, 1);
        setState(1208);
        identifier();
        break;
      }

      case AdaParser::STRING_LITERAL_: {
        enterOuterAlt(_localctx, 2);
        setState(1209);
        operator_symbol();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Selector_nameContext ------------------------------------------------------------------

AdaParser::Selector_nameContext::Selector_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::IdentifierContext* AdaParser::Selector_nameContext::identifier() {
  return getRuleContext<AdaParser::IdentifierContext>(0);
}

AdaParser::Character_literalContext* AdaParser::Selector_nameContext::character_literal() {
  return getRuleContext<AdaParser::Character_literalContext>(0);
}

AdaParser::Operator_symbolContext* AdaParser::Selector_nameContext::operator_symbol() {
  return getRuleContext<AdaParser::Operator_symbolContext>(0);
}


size_t AdaParser::Selector_nameContext::getRuleIndex() const {
  return AdaParser::RuleSelector_name;
}

void AdaParser::Selector_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelector_name(this);
}

void AdaParser::Selector_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelector_name(this);
}

AdaParser::Selector_nameContext* AdaParser::selector_name() {
  Selector_nameContext *_localctx = _tracker.createInstance<Selector_nameContext>(_ctx, getState());
  enterRule(_localctx, 150, AdaParser::RuleSelector_name);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1215);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AdaParser::IDENTIFIER_: {
        enterOuterAlt(_localctx, 1);
        setState(1212);
        identifier();
        break;
      }

      case AdaParser::CHARACTER_LITERAL_: {
        enterOuterAlt(_localctx, 2);
        setState(1213);
        character_literal();
        break;
      }

      case AdaParser::STRING_LITERAL_: {
        enterOuterAlt(_localctx, 3);
        setState(1214);
        operator_symbol();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Attribute_designatorContext ------------------------------------------------------------------

AdaParser::Attribute_designatorContext::Attribute_designatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::IdentifierContext* AdaParser::Attribute_designatorContext::identifier() {
  return getRuleContext<AdaParser::IdentifierContext>(0);
}

tree::TerminalNode* AdaParser::Attribute_designatorContext::LP() {
  return getToken(AdaParser::LP, 0);
}

AdaParser::ExpressionContext* AdaParser::Attribute_designatorContext::expression() {
  return getRuleContext<AdaParser::ExpressionContext>(0);
}

tree::TerminalNode* AdaParser::Attribute_designatorContext::RP() {
  return getToken(AdaParser::RP, 0);
}

tree::TerminalNode* AdaParser::Attribute_designatorContext::ACCESS__() {
  return getToken(AdaParser::ACCESS__, 0);
}

tree::TerminalNode* AdaParser::Attribute_designatorContext::DELTA__() {
  return getToken(AdaParser::DELTA__, 0);
}

tree::TerminalNode* AdaParser::Attribute_designatorContext::DIGITS__() {
  return getToken(AdaParser::DIGITS__, 0);
}

tree::TerminalNode* AdaParser::Attribute_designatorContext::MOD__() {
  return getToken(AdaParser::MOD__, 0);
}


size_t AdaParser::Attribute_designatorContext::getRuleIndex() const {
  return AdaParser::RuleAttribute_designator;
}

void AdaParser::Attribute_designatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAttribute_designator(this);
}

void AdaParser::Attribute_designatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAttribute_designator(this);
}

AdaParser::Attribute_designatorContext* AdaParser::attribute_designator() {
  Attribute_designatorContext *_localctx = _tracker.createInstance<Attribute_designatorContext>(_ctx, getState());
  enterRule(_localctx, 152, AdaParser::RuleAttribute_designator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1228);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AdaParser::IDENTIFIER_: {
        enterOuterAlt(_localctx, 1);
        setState(1217);
        identifier();
        setState(1222);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 104, _ctx)) {
        case 1: {
          setState(1218);
          match(AdaParser::LP);
          setState(1219);
          expression();
          setState(1220);
          match(AdaParser::RP);
          break;
        }

        default:
          break;
        }
        break;
      }

      case AdaParser::ACCESS__: {
        enterOuterAlt(_localctx, 2);
        setState(1224);
        match(AdaParser::ACCESS__);
        break;
      }

      case AdaParser::DELTA__: {
        enterOuterAlt(_localctx, 3);
        setState(1225);
        match(AdaParser::DELTA__);
        break;
      }

      case AdaParser::DIGITS__: {
        enterOuterAlt(_localctx, 4);
        setState(1226);
        match(AdaParser::DIGITS__);
        break;
      }

      case AdaParser::MOD__: {
        enterOuterAlt(_localctx, 5);
        setState(1227);
        match(AdaParser::MOD__);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Range_attribute_referenceContext ------------------------------------------------------------------

AdaParser::Range_attribute_referenceContext::Range_attribute_referenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::NameContext* AdaParser::Range_attribute_referenceContext::name() {
  return getRuleContext<AdaParser::NameContext>(0);
}

tree::TerminalNode* AdaParser::Range_attribute_referenceContext::SQ() {
  return getToken(AdaParser::SQ, 0);
}

AdaParser::Range_attribute_designatorContext* AdaParser::Range_attribute_referenceContext::range_attribute_designator() {
  return getRuleContext<AdaParser::Range_attribute_designatorContext>(0);
}


size_t AdaParser::Range_attribute_referenceContext::getRuleIndex() const {
  return AdaParser::RuleRange_attribute_reference;
}

void AdaParser::Range_attribute_referenceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRange_attribute_reference(this);
}

void AdaParser::Range_attribute_referenceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRange_attribute_reference(this);
}

AdaParser::Range_attribute_referenceContext* AdaParser::range_attribute_reference() {
  Range_attribute_referenceContext *_localctx = _tracker.createInstance<Range_attribute_referenceContext>(_ctx, getState());
  enterRule(_localctx, 154, AdaParser::RuleRange_attribute_reference);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1230);
    name(0);
    setState(1231);
    match(AdaParser::SQ);
    setState(1232);
    range_attribute_designator();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Range_attribute_designatorContext ------------------------------------------------------------------

AdaParser::Range_attribute_designatorContext::Range_attribute_designatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Range_attribute_designatorContext::RANGE_() {
  return getToken(AdaParser::RANGE_, 0);
}

tree::TerminalNode* AdaParser::Range_attribute_designatorContext::LP() {
  return getToken(AdaParser::LP, 0);
}

AdaParser::ExpressionContext* AdaParser::Range_attribute_designatorContext::expression() {
  return getRuleContext<AdaParser::ExpressionContext>(0);
}

tree::TerminalNode* AdaParser::Range_attribute_designatorContext::RP() {
  return getToken(AdaParser::RP, 0);
}


size_t AdaParser::Range_attribute_designatorContext::getRuleIndex() const {
  return AdaParser::RuleRange_attribute_designator;
}

void AdaParser::Range_attribute_designatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRange_attribute_designator(this);
}

void AdaParser::Range_attribute_designatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRange_attribute_designator(this);
}

AdaParser::Range_attribute_designatorContext* AdaParser::range_attribute_designator() {
  Range_attribute_designatorContext *_localctx = _tracker.createInstance<Range_attribute_designatorContext>(_ctx, getState());
  enterRule(_localctx, 156, AdaParser::RuleRange_attribute_designator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1234);
    match(AdaParser::RANGE_);
    setState(1239);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::LP) {
      setState(1235);
      match(AdaParser::LP);
      setState(1236);
      expression();
      setState(1237);
      match(AdaParser::RP);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AggregateContext ------------------------------------------------------------------

AdaParser::AggregateContext::AggregateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Record_aggregateContext* AdaParser::AggregateContext::record_aggregate() {
  return getRuleContext<AdaParser::Record_aggregateContext>(0);
}

AdaParser::Extension_aggregateContext* AdaParser::AggregateContext::extension_aggregate() {
  return getRuleContext<AdaParser::Extension_aggregateContext>(0);
}

AdaParser::Array_aggregateContext* AdaParser::AggregateContext::array_aggregate() {
  return getRuleContext<AdaParser::Array_aggregateContext>(0);
}


size_t AdaParser::AggregateContext::getRuleIndex() const {
  return AdaParser::RuleAggregate;
}

void AdaParser::AggregateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAggregate(this);
}

void AdaParser::AggregateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAggregate(this);
}

AdaParser::AggregateContext* AdaParser::aggregate() {
  AggregateContext *_localctx = _tracker.createInstance<AggregateContext>(_ctx, getState());
  enterRule(_localctx, 158, AdaParser::RuleAggregate);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1244);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 107, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1241);
      record_aggregate();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1242);
      extension_aggregate();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1243);
      array_aggregate();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Record_aggregateContext ------------------------------------------------------------------

AdaParser::Record_aggregateContext::Record_aggregateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Record_aggregateContext::LP() {
  return getToken(AdaParser::LP, 0);
}

AdaParser::Record_component_association_listContext* AdaParser::Record_aggregateContext::record_component_association_list() {
  return getRuleContext<AdaParser::Record_component_association_listContext>(0);
}

tree::TerminalNode* AdaParser::Record_aggregateContext::RP() {
  return getToken(AdaParser::RP, 0);
}


size_t AdaParser::Record_aggregateContext::getRuleIndex() const {
  return AdaParser::RuleRecord_aggregate;
}

void AdaParser::Record_aggregateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRecord_aggregate(this);
}

void AdaParser::Record_aggregateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRecord_aggregate(this);
}

AdaParser::Record_aggregateContext* AdaParser::record_aggregate() {
  Record_aggregateContext *_localctx = _tracker.createInstance<Record_aggregateContext>(_ctx, getState());
  enterRule(_localctx, 160, AdaParser::RuleRecord_aggregate);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1246);
    match(AdaParser::LP);
    setState(1247);
    record_component_association_list();
    setState(1248);
    match(AdaParser::RP);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Record_component_association_listContext ------------------------------------------------------------------

AdaParser::Record_component_association_listContext::Record_component_association_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AdaParser::Record_component_associationContext *> AdaParser::Record_component_association_listContext::record_component_association() {
  return getRuleContexts<AdaParser::Record_component_associationContext>();
}

AdaParser::Record_component_associationContext* AdaParser::Record_component_association_listContext::record_component_association(size_t i) {
  return getRuleContext<AdaParser::Record_component_associationContext>(i);
}

std::vector<tree::TerminalNode *> AdaParser::Record_component_association_listContext::COMMA() {
  return getTokens(AdaParser::COMMA);
}

tree::TerminalNode* AdaParser::Record_component_association_listContext::COMMA(size_t i) {
  return getToken(AdaParser::COMMA, i);
}

tree::TerminalNode* AdaParser::Record_component_association_listContext::NULL_() {
  return getToken(AdaParser::NULL_, 0);
}

tree::TerminalNode* AdaParser::Record_component_association_listContext::RECORD() {
  return getToken(AdaParser::RECORD, 0);
}


size_t AdaParser::Record_component_association_listContext::getRuleIndex() const {
  return AdaParser::RuleRecord_component_association_list;
}

void AdaParser::Record_component_association_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRecord_component_association_list(this);
}

void AdaParser::Record_component_association_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRecord_component_association_list(this);
}

AdaParser::Record_component_association_listContext* AdaParser::record_component_association_list() {
  Record_component_association_listContext *_localctx = _tracker.createInstance<Record_component_association_listContext>(_ctx, getState());
  enterRule(_localctx, 162, AdaParser::RuleRecord_component_association_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1260);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 109, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1250);
      record_component_association();
      setState(1255);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == AdaParser::COMMA) {
        setState(1251);
        match(AdaParser::COMMA);
        setState(1252);
        record_component_association();
        setState(1257);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1258);
      match(AdaParser::NULL_);
      setState(1259);
      match(AdaParser::RECORD);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Record_component_associationContext ------------------------------------------------------------------

AdaParser::Record_component_associationContext::Record_component_associationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::ExpressionContext* AdaParser::Record_component_associationContext::expression() {
  return getRuleContext<AdaParser::ExpressionContext>(0);
}

AdaParser::Component_choice_listContext* AdaParser::Record_component_associationContext::component_choice_list() {
  return getRuleContext<AdaParser::Component_choice_listContext>(0);
}

tree::TerminalNode* AdaParser::Record_component_associationContext::ARROW() {
  return getToken(AdaParser::ARROW, 0);
}

tree::TerminalNode* AdaParser::Record_component_associationContext::BOX() {
  return getToken(AdaParser::BOX, 0);
}


size_t AdaParser::Record_component_associationContext::getRuleIndex() const {
  return AdaParser::RuleRecord_component_association;
}

void AdaParser::Record_component_associationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRecord_component_association(this);
}

void AdaParser::Record_component_associationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRecord_component_association(this);
}

AdaParser::Record_component_associationContext* AdaParser::record_component_association() {
  Record_component_associationContext *_localctx = _tracker.createInstance<Record_component_associationContext>(_ctx, getState());
  enterRule(_localctx, 164, AdaParser::RuleRecord_component_association);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1272);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 111, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1265);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 110, _ctx)) {
      case 1: {
        setState(1262);
        component_choice_list();
        setState(1263);
        match(AdaParser::ARROW);
        break;
      }

      default:
        break;
      }
      setState(1267);
      expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1268);
      component_choice_list();
      setState(1269);
      match(AdaParser::ARROW);
      setState(1270);
      match(AdaParser::BOX);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Component_choice_listContext ------------------------------------------------------------------

AdaParser::Component_choice_listContext::Component_choice_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AdaParser::Selector_nameContext *> AdaParser::Component_choice_listContext::selector_name() {
  return getRuleContexts<AdaParser::Selector_nameContext>();
}

AdaParser::Selector_nameContext* AdaParser::Component_choice_listContext::selector_name(size_t i) {
  return getRuleContext<AdaParser::Selector_nameContext>(i);
}

std::vector<tree::TerminalNode *> AdaParser::Component_choice_listContext::VL() {
  return getTokens(AdaParser::VL);
}

tree::TerminalNode* AdaParser::Component_choice_listContext::VL(size_t i) {
  return getToken(AdaParser::VL, i);
}

tree::TerminalNode* AdaParser::Component_choice_listContext::OTHERS() {
  return getToken(AdaParser::OTHERS, 0);
}


size_t AdaParser::Component_choice_listContext::getRuleIndex() const {
  return AdaParser::RuleComponent_choice_list;
}

void AdaParser::Component_choice_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComponent_choice_list(this);
}

void AdaParser::Component_choice_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComponent_choice_list(this);
}

AdaParser::Component_choice_listContext* AdaParser::component_choice_list() {
  Component_choice_listContext *_localctx = _tracker.createInstance<Component_choice_listContext>(_ctx, getState());
  enterRule(_localctx, 166, AdaParser::RuleComponent_choice_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1283);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AdaParser::IDENTIFIER_:
      case AdaParser::CHARACTER_LITERAL_:
      case AdaParser::STRING_LITERAL_: {
        enterOuterAlt(_localctx, 1);
        setState(1274);
        selector_name();
        setState(1279);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == AdaParser::VL) {
          setState(1275);
          match(AdaParser::VL);
          setState(1276);
          selector_name();
          setState(1281);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case AdaParser::OTHERS: {
        enterOuterAlt(_localctx, 2);
        setState(1282);
        match(AdaParser::OTHERS);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Extension_aggregateContext ------------------------------------------------------------------

AdaParser::Extension_aggregateContext::Extension_aggregateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Extension_aggregateContext::LP() {
  return getToken(AdaParser::LP, 0);
}

AdaParser::Ancestor_partContext* AdaParser::Extension_aggregateContext::ancestor_part() {
  return getRuleContext<AdaParser::Ancestor_partContext>(0);
}

tree::TerminalNode* AdaParser::Extension_aggregateContext::WITH() {
  return getToken(AdaParser::WITH, 0);
}

AdaParser::Record_component_association_listContext* AdaParser::Extension_aggregateContext::record_component_association_list() {
  return getRuleContext<AdaParser::Record_component_association_listContext>(0);
}

tree::TerminalNode* AdaParser::Extension_aggregateContext::RP() {
  return getToken(AdaParser::RP, 0);
}


size_t AdaParser::Extension_aggregateContext::getRuleIndex() const {
  return AdaParser::RuleExtension_aggregate;
}

void AdaParser::Extension_aggregateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExtension_aggregate(this);
}

void AdaParser::Extension_aggregateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExtension_aggregate(this);
}

AdaParser::Extension_aggregateContext* AdaParser::extension_aggregate() {
  Extension_aggregateContext *_localctx = _tracker.createInstance<Extension_aggregateContext>(_ctx, getState());
  enterRule(_localctx, 168, AdaParser::RuleExtension_aggregate);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1285);
    match(AdaParser::LP);
    setState(1286);
    ancestor_part();
    setState(1287);
    match(AdaParser::WITH);
    setState(1288);
    record_component_association_list();
    setState(1289);
    match(AdaParser::RP);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Ancestor_partContext ------------------------------------------------------------------

AdaParser::Ancestor_partContext::Ancestor_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::ExpressionContext* AdaParser::Ancestor_partContext::expression() {
  return getRuleContext<AdaParser::ExpressionContext>(0);
}

AdaParser::Subtype_markContext* AdaParser::Ancestor_partContext::subtype_mark() {
  return getRuleContext<AdaParser::Subtype_markContext>(0);
}


size_t AdaParser::Ancestor_partContext::getRuleIndex() const {
  return AdaParser::RuleAncestor_part;
}

void AdaParser::Ancestor_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAncestor_part(this);
}

void AdaParser::Ancestor_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAncestor_part(this);
}

AdaParser::Ancestor_partContext* AdaParser::ancestor_part() {
  Ancestor_partContext *_localctx = _tracker.createInstance<Ancestor_partContext>(_ctx, getState());
  enterRule(_localctx, 170, AdaParser::RuleAncestor_part);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1293);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 114, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1291);
      expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1292);
      subtype_mark();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Array_aggregateContext ------------------------------------------------------------------

AdaParser::Array_aggregateContext::Array_aggregateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Positional_array_aggregateContext* AdaParser::Array_aggregateContext::positional_array_aggregate() {
  return getRuleContext<AdaParser::Positional_array_aggregateContext>(0);
}

AdaParser::Named_array_aggregateContext* AdaParser::Array_aggregateContext::named_array_aggregate() {
  return getRuleContext<AdaParser::Named_array_aggregateContext>(0);
}


size_t AdaParser::Array_aggregateContext::getRuleIndex() const {
  return AdaParser::RuleArray_aggregate;
}

void AdaParser::Array_aggregateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArray_aggregate(this);
}

void AdaParser::Array_aggregateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArray_aggregate(this);
}

AdaParser::Array_aggregateContext* AdaParser::array_aggregate() {
  Array_aggregateContext *_localctx = _tracker.createInstance<Array_aggregateContext>(_ctx, getState());
  enterRule(_localctx, 172, AdaParser::RuleArray_aggregate);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1297);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 115, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1295);
      positional_array_aggregate();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1296);
      named_array_aggregate();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Positional_array_aggregateContext ------------------------------------------------------------------

AdaParser::Positional_array_aggregateContext::Positional_array_aggregateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Positional_array_aggregateContext::LP() {
  return getToken(AdaParser::LP, 0);
}

std::vector<AdaParser::ExpressionContext *> AdaParser::Positional_array_aggregateContext::expression() {
  return getRuleContexts<AdaParser::ExpressionContext>();
}

AdaParser::ExpressionContext* AdaParser::Positional_array_aggregateContext::expression(size_t i) {
  return getRuleContext<AdaParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> AdaParser::Positional_array_aggregateContext::COMMA() {
  return getTokens(AdaParser::COMMA);
}

tree::TerminalNode* AdaParser::Positional_array_aggregateContext::COMMA(size_t i) {
  return getToken(AdaParser::COMMA, i);
}

tree::TerminalNode* AdaParser::Positional_array_aggregateContext::RP() {
  return getToken(AdaParser::RP, 0);
}

tree::TerminalNode* AdaParser::Positional_array_aggregateContext::OTHERS() {
  return getToken(AdaParser::OTHERS, 0);
}

tree::TerminalNode* AdaParser::Positional_array_aggregateContext::ARROW() {
  return getToken(AdaParser::ARROW, 0);
}

tree::TerminalNode* AdaParser::Positional_array_aggregateContext::BOX() {
  return getToken(AdaParser::BOX, 0);
}


size_t AdaParser::Positional_array_aggregateContext::getRuleIndex() const {
  return AdaParser::RulePositional_array_aggregate;
}

void AdaParser::Positional_array_aggregateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPositional_array_aggregate(this);
}

void AdaParser::Positional_array_aggregateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPositional_array_aggregate(this);
}

AdaParser::Positional_array_aggregateContext* AdaParser::positional_array_aggregate() {
  Positional_array_aggregateContext *_localctx = _tracker.createInstance<Positional_array_aggregateContext>(_ctx, getState());
  enterRule(_localctx, 174, AdaParser::RulePositional_array_aggregate);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1342);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 119, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1299);
      match(AdaParser::LP);
      setState(1300);
      expression();
      setState(1301);
      match(AdaParser::COMMA);
      setState(1302);
      expression();
      setState(1307);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == AdaParser::COMMA) {
        setState(1303);
        match(AdaParser::COMMA);
        setState(1304);
        expression();
        setState(1309);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1310);
      match(AdaParser::RP);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1312);
      match(AdaParser::LP);
      setState(1313);
      expression();
      setState(1318);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 117, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1314);
          match(AdaParser::COMMA);
          setState(1315);
          expression(); 
        }
        setState(1320);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 117, _ctx);
      }
      setState(1321);
      match(AdaParser::COMMA);
      setState(1322);
      match(AdaParser::OTHERS);
      setState(1323);
      match(AdaParser::ARROW);
      setState(1324);
      expression();
      setState(1325);
      match(AdaParser::RP);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1327);
      match(AdaParser::LP);
      setState(1328);
      expression();
      setState(1333);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 118, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1329);
          match(AdaParser::COMMA);
          setState(1330);
          expression(); 
        }
        setState(1335);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 118, _ctx);
      }
      setState(1336);
      match(AdaParser::COMMA);
      setState(1337);
      match(AdaParser::OTHERS);
      setState(1338);
      match(AdaParser::ARROW);
      setState(1339);
      match(AdaParser::BOX);
      setState(1340);
      match(AdaParser::RP);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Named_array_aggregateContext ------------------------------------------------------------------

AdaParser::Named_array_aggregateContext::Named_array_aggregateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Named_array_aggregateContext::LP() {
  return getToken(AdaParser::LP, 0);
}

std::vector<AdaParser::Array_component_associationContext *> AdaParser::Named_array_aggregateContext::array_component_association() {
  return getRuleContexts<AdaParser::Array_component_associationContext>();
}

AdaParser::Array_component_associationContext* AdaParser::Named_array_aggregateContext::array_component_association(size_t i) {
  return getRuleContext<AdaParser::Array_component_associationContext>(i);
}

tree::TerminalNode* AdaParser::Named_array_aggregateContext::RP() {
  return getToken(AdaParser::RP, 0);
}

std::vector<tree::TerminalNode *> AdaParser::Named_array_aggregateContext::COMMA() {
  return getTokens(AdaParser::COMMA);
}

tree::TerminalNode* AdaParser::Named_array_aggregateContext::COMMA(size_t i) {
  return getToken(AdaParser::COMMA, i);
}


size_t AdaParser::Named_array_aggregateContext::getRuleIndex() const {
  return AdaParser::RuleNamed_array_aggregate;
}

void AdaParser::Named_array_aggregateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamed_array_aggregate(this);
}

void AdaParser::Named_array_aggregateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamed_array_aggregate(this);
}

AdaParser::Named_array_aggregateContext* AdaParser::named_array_aggregate() {
  Named_array_aggregateContext *_localctx = _tracker.createInstance<Named_array_aggregateContext>(_ctx, getState());
  enterRule(_localctx, 176, AdaParser::RuleNamed_array_aggregate);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1344);
    match(AdaParser::LP);
    setState(1345);
    array_component_association();
    setState(1350);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == AdaParser::COMMA) {
      setState(1346);
      match(AdaParser::COMMA);
      setState(1347);
      array_component_association();
      setState(1352);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1353);
    match(AdaParser::RP);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Array_component_associationContext ------------------------------------------------------------------

AdaParser::Array_component_associationContext::Array_component_associationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Discrete_choice_listContext* AdaParser::Array_component_associationContext::discrete_choice_list() {
  return getRuleContext<AdaParser::Discrete_choice_listContext>(0);
}

tree::TerminalNode* AdaParser::Array_component_associationContext::ARROW() {
  return getToken(AdaParser::ARROW, 0);
}

AdaParser::ExpressionContext* AdaParser::Array_component_associationContext::expression() {
  return getRuleContext<AdaParser::ExpressionContext>(0);
}

tree::TerminalNode* AdaParser::Array_component_associationContext::BOX() {
  return getToken(AdaParser::BOX, 0);
}


size_t AdaParser::Array_component_associationContext::getRuleIndex() const {
  return AdaParser::RuleArray_component_association;
}

void AdaParser::Array_component_associationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArray_component_association(this);
}

void AdaParser::Array_component_associationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArray_component_association(this);
}

AdaParser::Array_component_associationContext* AdaParser::array_component_association() {
  Array_component_associationContext *_localctx = _tracker.createInstance<Array_component_associationContext>(_ctx, getState());
  enterRule(_localctx, 178, AdaParser::RuleArray_component_association);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1363);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 121, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1355);
      discrete_choice_list();
      setState(1356);
      match(AdaParser::ARROW);
      setState(1357);
      expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1359);
      discrete_choice_list();
      setState(1360);
      match(AdaParser::ARROW);
      setState(1361);
      match(AdaParser::BOX);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionContext ------------------------------------------------------------------

AdaParser::ExpressionContext::ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AdaParser::RelationContext *> AdaParser::ExpressionContext::relation() {
  return getRuleContexts<AdaParser::RelationContext>();
}

AdaParser::RelationContext* AdaParser::ExpressionContext::relation(size_t i) {
  return getRuleContext<AdaParser::RelationContext>(i);
}

std::vector<tree::TerminalNode *> AdaParser::ExpressionContext::AND() {
  return getTokens(AdaParser::AND);
}

tree::TerminalNode* AdaParser::ExpressionContext::AND(size_t i) {
  return getToken(AdaParser::AND, i);
}

std::vector<tree::TerminalNode *> AdaParser::ExpressionContext::THEN() {
  return getTokens(AdaParser::THEN);
}

tree::TerminalNode* AdaParser::ExpressionContext::THEN(size_t i) {
  return getToken(AdaParser::THEN, i);
}

std::vector<tree::TerminalNode *> AdaParser::ExpressionContext::OR() {
  return getTokens(AdaParser::OR);
}

tree::TerminalNode* AdaParser::ExpressionContext::OR(size_t i) {
  return getToken(AdaParser::OR, i);
}

std::vector<tree::TerminalNode *> AdaParser::ExpressionContext::ELSE() {
  return getTokens(AdaParser::ELSE);
}

tree::TerminalNode* AdaParser::ExpressionContext::ELSE(size_t i) {
  return getToken(AdaParser::ELSE, i);
}

std::vector<tree::TerminalNode *> AdaParser::ExpressionContext::XOR() {
  return getTokens(AdaParser::XOR);
}

tree::TerminalNode* AdaParser::ExpressionContext::XOR(size_t i) {
  return getToken(AdaParser::XOR, i);
}


size_t AdaParser::ExpressionContext::getRuleIndex() const {
  return AdaParser::RuleExpression;
}

void AdaParser::ExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpression(this);
}

void AdaParser::ExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpression(this);
}

AdaParser::ExpressionContext* AdaParser::expression() {
  ExpressionContext *_localctx = _tracker.createInstance<ExpressionContext>(_ctx, getState());
  enterRule(_localctx, 180, AdaParser::RuleExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1407);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 127, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1365);
      relation();
      setState(1370);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 122, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1366);
          match(AdaParser::AND);
          setState(1367);
          relation(); 
        }
        setState(1372);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 122, _ctx);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1373);
      relation();
      setState(1379);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 123, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1374);
          match(AdaParser::AND);
          setState(1375);
          match(AdaParser::THEN);
          setState(1376);
          relation(); 
        }
        setState(1381);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 123, _ctx);
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1382);
      relation();
      setState(1387);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 124, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1383);
          match(AdaParser::OR);
          setState(1384);
          relation(); 
        }
        setState(1389);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 124, _ctx);
      }
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1390);
      relation();
      setState(1396);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 125, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1391);
          match(AdaParser::OR);
          setState(1392);
          match(AdaParser::ELSE);
          setState(1393);
          relation(); 
        }
        setState(1398);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 125, _ctx);
      }
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1399);
      relation();
      setState(1404);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 126, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1400);
          match(AdaParser::XOR);
          setState(1401);
          relation(); 
        }
        setState(1406);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 126, _ctx);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Choice_expressionContext ------------------------------------------------------------------

AdaParser::Choice_expressionContext::Choice_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AdaParser::Choice_relationContext *> AdaParser::Choice_expressionContext::choice_relation() {
  return getRuleContexts<AdaParser::Choice_relationContext>();
}

AdaParser::Choice_relationContext* AdaParser::Choice_expressionContext::choice_relation(size_t i) {
  return getRuleContext<AdaParser::Choice_relationContext>(i);
}

std::vector<tree::TerminalNode *> AdaParser::Choice_expressionContext::AND() {
  return getTokens(AdaParser::AND);
}

tree::TerminalNode* AdaParser::Choice_expressionContext::AND(size_t i) {
  return getToken(AdaParser::AND, i);
}

std::vector<tree::TerminalNode *> AdaParser::Choice_expressionContext::OR() {
  return getTokens(AdaParser::OR);
}

tree::TerminalNode* AdaParser::Choice_expressionContext::OR(size_t i) {
  return getToken(AdaParser::OR, i);
}

std::vector<tree::TerminalNode *> AdaParser::Choice_expressionContext::XOR() {
  return getTokens(AdaParser::XOR);
}

tree::TerminalNode* AdaParser::Choice_expressionContext::XOR(size_t i) {
  return getToken(AdaParser::XOR, i);
}

std::vector<tree::TerminalNode *> AdaParser::Choice_expressionContext::THEN() {
  return getTokens(AdaParser::THEN);
}

tree::TerminalNode* AdaParser::Choice_expressionContext::THEN(size_t i) {
  return getToken(AdaParser::THEN, i);
}

std::vector<tree::TerminalNode *> AdaParser::Choice_expressionContext::ELSE() {
  return getTokens(AdaParser::ELSE);
}

tree::TerminalNode* AdaParser::Choice_expressionContext::ELSE(size_t i) {
  return getToken(AdaParser::ELSE, i);
}


size_t AdaParser::Choice_expressionContext::getRuleIndex() const {
  return AdaParser::RuleChoice_expression;
}

void AdaParser::Choice_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterChoice_expression(this);
}

void AdaParser::Choice_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitChoice_expression(this);
}

AdaParser::Choice_expressionContext* AdaParser::choice_expression() {
  Choice_expressionContext *_localctx = _tracker.createInstance<Choice_expressionContext>(_ctx, getState());
  enterRule(_localctx, 182, AdaParser::RuleChoice_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1451);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 133, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1409);
      choice_relation();
      setState(1414);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 128, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1410);
          match(AdaParser::AND);
          setState(1411);
          choice_relation(); 
        }
        setState(1416);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 128, _ctx);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1417);
      choice_relation();
      setState(1422);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 129, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1418);
          match(AdaParser::OR);
          setState(1419);
          choice_relation(); 
        }
        setState(1424);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 129, _ctx);
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1425);
      choice_relation();
      setState(1430);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 130, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1426);
          match(AdaParser::XOR);
          setState(1427);
          choice_relation(); 
        }
        setState(1432);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 130, _ctx);
      }
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1433);
      choice_relation();
      setState(1439);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 131, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1434);
          match(AdaParser::AND);
          setState(1435);
          match(AdaParser::THEN);
          setState(1436);
          choice_relation(); 
        }
        setState(1441);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 131, _ctx);
      }
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1442);
      choice_relation();
      setState(1448);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 132, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1443);
          match(AdaParser::OR);
          setState(1444);
          match(AdaParser::ELSE);
          setState(1445);
          choice_relation(); 
        }
        setState(1450);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 132, _ctx);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Choice_relationContext ------------------------------------------------------------------

AdaParser::Choice_relationContext::Choice_relationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AdaParser::Simple_expressionContext *> AdaParser::Choice_relationContext::simple_expression() {
  return getRuleContexts<AdaParser::Simple_expressionContext>();
}

AdaParser::Simple_expressionContext* AdaParser::Choice_relationContext::simple_expression(size_t i) {
  return getRuleContext<AdaParser::Simple_expressionContext>(i);
}

AdaParser::Relational_operatorContext* AdaParser::Choice_relationContext::relational_operator() {
  return getRuleContext<AdaParser::Relational_operatorContext>(0);
}


size_t AdaParser::Choice_relationContext::getRuleIndex() const {
  return AdaParser::RuleChoice_relation;
}

void AdaParser::Choice_relationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterChoice_relation(this);
}

void AdaParser::Choice_relationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitChoice_relation(this);
}

AdaParser::Choice_relationContext* AdaParser::choice_relation() {
  Choice_relationContext *_localctx = _tracker.createInstance<Choice_relationContext>(_ctx, getState());
  enterRule(_localctx, 184, AdaParser::RuleChoice_relation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1453);
    simple_expression();
    setState(1457);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 134, _ctx)) {
    case 1: {
      setState(1454);
      relational_operator();
      setState(1455);
      simple_expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RelationContext ------------------------------------------------------------------

AdaParser::RelationContext::RelationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AdaParser::Simple_expressionContext *> AdaParser::RelationContext::simple_expression() {
  return getRuleContexts<AdaParser::Simple_expressionContext>();
}

AdaParser::Simple_expressionContext* AdaParser::RelationContext::simple_expression(size_t i) {
  return getRuleContext<AdaParser::Simple_expressionContext>(i);
}

AdaParser::Relational_operatorContext* AdaParser::RelationContext::relational_operator() {
  return getRuleContext<AdaParser::Relational_operatorContext>(0);
}

tree::TerminalNode* AdaParser::RelationContext::IN() {
  return getToken(AdaParser::IN, 0);
}

AdaParser::Membership_choice_listContext* AdaParser::RelationContext::membership_choice_list() {
  return getRuleContext<AdaParser::Membership_choice_listContext>(0);
}

tree::TerminalNode* AdaParser::RelationContext::NOT() {
  return getToken(AdaParser::NOT, 0);
}


size_t AdaParser::RelationContext::getRuleIndex() const {
  return AdaParser::RuleRelation;
}

void AdaParser::RelationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRelation(this);
}

void AdaParser::RelationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRelation(this);
}

AdaParser::RelationContext* AdaParser::relation() {
  RelationContext *_localctx = _tracker.createInstance<RelationContext>(_ctx, getState());
  enterRule(_localctx, 186, AdaParser::RuleRelation);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1472);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 137, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1459);
      simple_expression();
      setState(1463);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 135, _ctx)) {
      case 1: {
        setState(1460);
        relational_operator();
        setState(1461);
        simple_expression();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1465);
      simple_expression();
      setState(1467);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::NOT) {
        setState(1466);
        match(AdaParser::NOT);
      }
      setState(1469);
      match(AdaParser::IN);
      setState(1470);
      membership_choice_list();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Membership_choice_listContext ------------------------------------------------------------------

AdaParser::Membership_choice_listContext::Membership_choice_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AdaParser::Membership_choiceContext *> AdaParser::Membership_choice_listContext::membership_choice() {
  return getRuleContexts<AdaParser::Membership_choiceContext>();
}

AdaParser::Membership_choiceContext* AdaParser::Membership_choice_listContext::membership_choice(size_t i) {
  return getRuleContext<AdaParser::Membership_choiceContext>(i);
}

std::vector<tree::TerminalNode *> AdaParser::Membership_choice_listContext::VL() {
  return getTokens(AdaParser::VL);
}

tree::TerminalNode* AdaParser::Membership_choice_listContext::VL(size_t i) {
  return getToken(AdaParser::VL, i);
}


size_t AdaParser::Membership_choice_listContext::getRuleIndex() const {
  return AdaParser::RuleMembership_choice_list;
}

void AdaParser::Membership_choice_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMembership_choice_list(this);
}

void AdaParser::Membership_choice_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMembership_choice_list(this);
}

AdaParser::Membership_choice_listContext* AdaParser::membership_choice_list() {
  Membership_choice_listContext *_localctx = _tracker.createInstance<Membership_choice_listContext>(_ctx, getState());
  enterRule(_localctx, 188, AdaParser::RuleMembership_choice_list);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1474);
    membership_choice();
    setState(1479);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 138, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1475);
        match(AdaParser::VL);
        setState(1476);
        membership_choice(); 
      }
      setState(1481);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 138, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Membership_choiceContext ------------------------------------------------------------------

AdaParser::Membership_choiceContext::Membership_choiceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Choice_expressionContext* AdaParser::Membership_choiceContext::choice_expression() {
  return getRuleContext<AdaParser::Choice_expressionContext>(0);
}

AdaParser::RangeContext* AdaParser::Membership_choiceContext::range() {
  return getRuleContext<AdaParser::RangeContext>(0);
}

AdaParser::Subtype_markContext* AdaParser::Membership_choiceContext::subtype_mark() {
  return getRuleContext<AdaParser::Subtype_markContext>(0);
}


size_t AdaParser::Membership_choiceContext::getRuleIndex() const {
  return AdaParser::RuleMembership_choice;
}

void AdaParser::Membership_choiceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMembership_choice(this);
}

void AdaParser::Membership_choiceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMembership_choice(this);
}

AdaParser::Membership_choiceContext* AdaParser::membership_choice() {
  Membership_choiceContext *_localctx = _tracker.createInstance<Membership_choiceContext>(_ctx, getState());
  enterRule(_localctx, 190, AdaParser::RuleMembership_choice);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1485);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 139, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1482);
      choice_expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1483);
      range();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1484);
      subtype_mark();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Simple_expressionContext ------------------------------------------------------------------

AdaParser::Simple_expressionContext::Simple_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AdaParser::TermContext *> AdaParser::Simple_expressionContext::term() {
  return getRuleContexts<AdaParser::TermContext>();
}

AdaParser::TermContext* AdaParser::Simple_expressionContext::term(size_t i) {
  return getRuleContext<AdaParser::TermContext>(i);
}

AdaParser::Unary_adding_operatorContext* AdaParser::Simple_expressionContext::unary_adding_operator() {
  return getRuleContext<AdaParser::Unary_adding_operatorContext>(0);
}

std::vector<AdaParser::Binary_adding_operatorContext *> AdaParser::Simple_expressionContext::binary_adding_operator() {
  return getRuleContexts<AdaParser::Binary_adding_operatorContext>();
}

AdaParser::Binary_adding_operatorContext* AdaParser::Simple_expressionContext::binary_adding_operator(size_t i) {
  return getRuleContext<AdaParser::Binary_adding_operatorContext>(i);
}


size_t AdaParser::Simple_expressionContext::getRuleIndex() const {
  return AdaParser::RuleSimple_expression;
}

void AdaParser::Simple_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimple_expression(this);
}

void AdaParser::Simple_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimple_expression(this);
}

AdaParser::Simple_expressionContext* AdaParser::simple_expression() {
  Simple_expressionContext *_localctx = _tracker.createInstance<Simple_expressionContext>(_ctx, getState());
  enterRule(_localctx, 192, AdaParser::RuleSimple_expression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1488);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::PLUS

    || _la == AdaParser::MINUS) {
      setState(1487);
      unary_adding_operator();
    }
    setState(1490);
    term();
    setState(1496);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 141, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1491);
        binary_adding_operator();
        setState(1492);
        term(); 
      }
      setState(1498);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 141, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TermContext ------------------------------------------------------------------

AdaParser::TermContext::TermContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AdaParser::FactorContext *> AdaParser::TermContext::factor() {
  return getRuleContexts<AdaParser::FactorContext>();
}

AdaParser::FactorContext* AdaParser::TermContext::factor(size_t i) {
  return getRuleContext<AdaParser::FactorContext>(i);
}

std::vector<AdaParser::Multiplying_operatorContext *> AdaParser::TermContext::multiplying_operator() {
  return getRuleContexts<AdaParser::Multiplying_operatorContext>();
}

AdaParser::Multiplying_operatorContext* AdaParser::TermContext::multiplying_operator(size_t i) {
  return getRuleContext<AdaParser::Multiplying_operatorContext>(i);
}


size_t AdaParser::TermContext::getRuleIndex() const {
  return AdaParser::RuleTerm;
}

void AdaParser::TermContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTerm(this);
}

void AdaParser::TermContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTerm(this);
}

AdaParser::TermContext* AdaParser::term() {
  TermContext *_localctx = _tracker.createInstance<TermContext>(_ctx, getState());
  enterRule(_localctx, 194, AdaParser::RuleTerm);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1499);
    factor();
    setState(1505);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 142, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1500);
        multiplying_operator();
        setState(1501);
        factor(); 
      }
      setState(1507);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 142, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FactorContext ------------------------------------------------------------------

AdaParser::FactorContext::FactorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AdaParser::PrimaryContext *> AdaParser::FactorContext::primary() {
  return getRuleContexts<AdaParser::PrimaryContext>();
}

AdaParser::PrimaryContext* AdaParser::FactorContext::primary(size_t i) {
  return getRuleContext<AdaParser::PrimaryContext>(i);
}

tree::TerminalNode* AdaParser::FactorContext::EXPON() {
  return getToken(AdaParser::EXPON, 0);
}

tree::TerminalNode* AdaParser::FactorContext::ABS() {
  return getToken(AdaParser::ABS, 0);
}

tree::TerminalNode* AdaParser::FactorContext::NOT() {
  return getToken(AdaParser::NOT, 0);
}


size_t AdaParser::FactorContext::getRuleIndex() const {
  return AdaParser::RuleFactor;
}

void AdaParser::FactorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFactor(this);
}

void AdaParser::FactorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFactor(this);
}

AdaParser::FactorContext* AdaParser::factor() {
  FactorContext *_localctx = _tracker.createInstance<FactorContext>(_ctx, getState());
  enterRule(_localctx, 196, AdaParser::RuleFactor);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1517);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AdaParser::NEW:
      case AdaParser::NULL_:
      case AdaParser::IDENTIFIER_:
      case AdaParser::NUMERIC_LITERAL_:
      case AdaParser::CHARACTER_LITERAL_:
      case AdaParser::STRING_LITERAL_:
      case AdaParser::LP: {
        enterOuterAlt(_localctx, 1);
        setState(1508);
        primary();
        setState(1511);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 143, _ctx)) {
        case 1: {
          setState(1509);
          match(AdaParser::EXPON);
          setState(1510);
          primary();
          break;
        }

        default:
          break;
        }
        break;
      }

      case AdaParser::ABS: {
        enterOuterAlt(_localctx, 2);
        setState(1513);
        match(AdaParser::ABS);
        setState(1514);
        primary();
        break;
      }

      case AdaParser::NOT: {
        enterOuterAlt(_localctx, 3);
        setState(1515);
        match(AdaParser::NOT);
        setState(1516);
        primary();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrimaryContext ------------------------------------------------------------------

AdaParser::PrimaryContext::PrimaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Numeric_literalContext* AdaParser::PrimaryContext::numeric_literal() {
  return getRuleContext<AdaParser::Numeric_literalContext>(0);
}

tree::TerminalNode* AdaParser::PrimaryContext::NULL_() {
  return getToken(AdaParser::NULL_, 0);
}

AdaParser::String_literalContext* AdaParser::PrimaryContext::string_literal() {
  return getRuleContext<AdaParser::String_literalContext>(0);
}

AdaParser::AggregateContext* AdaParser::PrimaryContext::aggregate() {
  return getRuleContext<AdaParser::AggregateContext>(0);
}

AdaParser::NameContext* AdaParser::PrimaryContext::name() {
  return getRuleContext<AdaParser::NameContext>(0);
}

AdaParser::AllocatorContext* AdaParser::PrimaryContext::allocator() {
  return getRuleContext<AdaParser::AllocatorContext>(0);
}

tree::TerminalNode* AdaParser::PrimaryContext::LP() {
  return getToken(AdaParser::LP, 0);
}

AdaParser::ExpressionContext* AdaParser::PrimaryContext::expression() {
  return getRuleContext<AdaParser::ExpressionContext>(0);
}

tree::TerminalNode* AdaParser::PrimaryContext::RP() {
  return getToken(AdaParser::RP, 0);
}

AdaParser::Conditional_expressionContext* AdaParser::PrimaryContext::conditional_expression() {
  return getRuleContext<AdaParser::Conditional_expressionContext>(0);
}

AdaParser::Qualified_expressionContext* AdaParser::PrimaryContext::qualified_expression() {
  return getRuleContext<AdaParser::Qualified_expressionContext>(0);
}


size_t AdaParser::PrimaryContext::getRuleIndex() const {
  return AdaParser::RulePrimary;
}

void AdaParser::PrimaryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimary(this);
}

void AdaParser::PrimaryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimary(this);
}

AdaParser::PrimaryContext* AdaParser::primary() {
  PrimaryContext *_localctx = _tracker.createInstance<PrimaryContext>(_ctx, getState());
  enterRule(_localctx, 198, AdaParser::RulePrimary);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1537);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 145, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1519);
      numeric_literal();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1520);
      match(AdaParser::NULL_);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1521);
      string_literal();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1522);
      aggregate();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1523);
      name(0);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1524);
      allocator();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1525);
      match(AdaParser::LP);
      setState(1526);
      expression();
      setState(1527);
      match(AdaParser::RP);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1529);
      match(AdaParser::LP);
      setState(1530);
      conditional_expression();
      setState(1531);
      match(AdaParser::RP);
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1533);
      match(AdaParser::LP);
      setState(1534);
      qualified_expression();
      setState(1535);
      match(AdaParser::RP);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Logical_operatorContext ------------------------------------------------------------------

AdaParser::Logical_operatorContext::Logical_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Logical_operatorContext::AND() {
  return getToken(AdaParser::AND, 0);
}

tree::TerminalNode* AdaParser::Logical_operatorContext::OR() {
  return getToken(AdaParser::OR, 0);
}

tree::TerminalNode* AdaParser::Logical_operatorContext::XOR() {
  return getToken(AdaParser::XOR, 0);
}


size_t AdaParser::Logical_operatorContext::getRuleIndex() const {
  return AdaParser::RuleLogical_operator;
}

void AdaParser::Logical_operatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLogical_operator(this);
}

void AdaParser::Logical_operatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLogical_operator(this);
}

AdaParser::Logical_operatorContext* AdaParser::logical_operator() {
  Logical_operatorContext *_localctx = _tracker.createInstance<Logical_operatorContext>(_ctx, getState());
  enterRule(_localctx, 200, AdaParser::RuleLogical_operator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1539);
    _la = _input->LA(1);
    if (!(_la == AdaParser::AND

    || _la == AdaParser::OR || _la == AdaParser::XOR)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Relational_operatorContext ------------------------------------------------------------------

AdaParser::Relational_operatorContext::Relational_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Relational_operatorContext::EQ() {
  return getToken(AdaParser::EQ, 0);
}

tree::TerminalNode* AdaParser::Relational_operatorContext::NE() {
  return getToken(AdaParser::NE, 0);
}

tree::TerminalNode* AdaParser::Relational_operatorContext::LE() {
  return getToken(AdaParser::LE, 0);
}

tree::TerminalNode* AdaParser::Relational_operatorContext::GT() {
  return getToken(AdaParser::GT, 0);
}

tree::TerminalNode* AdaParser::Relational_operatorContext::GE() {
  return getToken(AdaParser::GE, 0);
}


size_t AdaParser::Relational_operatorContext::getRuleIndex() const {
  return AdaParser::RuleRelational_operator;
}

void AdaParser::Relational_operatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRelational_operator(this);
}

void AdaParser::Relational_operatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRelational_operator(this);
}

AdaParser::Relational_operatorContext* AdaParser::relational_operator() {
  Relational_operatorContext *_localctx = _tracker.createInstance<Relational_operatorContext>(_ctx, getState());
  enterRule(_localctx, 202, AdaParser::RuleRelational_operator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1541);
    _la = _input->LA(1);
    if (!(((((_la - 104) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 104)) & 14339) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Binary_adding_operatorContext ------------------------------------------------------------------

AdaParser::Binary_adding_operatorContext::Binary_adding_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Binary_adding_operatorContext::PLUS() {
  return getToken(AdaParser::PLUS, 0);
}

tree::TerminalNode* AdaParser::Binary_adding_operatorContext::MINUS() {
  return getToken(AdaParser::MINUS, 0);
}

tree::TerminalNode* AdaParser::Binary_adding_operatorContext::AMPERSAND() {
  return getToken(AdaParser::AMPERSAND, 0);
}


size_t AdaParser::Binary_adding_operatorContext::getRuleIndex() const {
  return AdaParser::RuleBinary_adding_operator;
}

void AdaParser::Binary_adding_operatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBinary_adding_operator(this);
}

void AdaParser::Binary_adding_operatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBinary_adding_operator(this);
}

AdaParser::Binary_adding_operatorContext* AdaParser::binary_adding_operator() {
  Binary_adding_operatorContext *_localctx = _tracker.createInstance<Binary_adding_operatorContext>(_ctx, getState());
  enterRule(_localctx, 204, AdaParser::RuleBinary_adding_operator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1543);
    _la = _input->LA(1);
    if (!(((((_la - 93) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 93)) & 81) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Unary_adding_operatorContext ------------------------------------------------------------------

AdaParser::Unary_adding_operatorContext::Unary_adding_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Unary_adding_operatorContext::PLUS() {
  return getToken(AdaParser::PLUS, 0);
}

tree::TerminalNode* AdaParser::Unary_adding_operatorContext::MINUS() {
  return getToken(AdaParser::MINUS, 0);
}


size_t AdaParser::Unary_adding_operatorContext::getRuleIndex() const {
  return AdaParser::RuleUnary_adding_operator;
}

void AdaParser::Unary_adding_operatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnary_adding_operator(this);
}

void AdaParser::Unary_adding_operatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnary_adding_operator(this);
}

AdaParser::Unary_adding_operatorContext* AdaParser::unary_adding_operator() {
  Unary_adding_operatorContext *_localctx = _tracker.createInstance<Unary_adding_operatorContext>(_ctx, getState());
  enterRule(_localctx, 206, AdaParser::RuleUnary_adding_operator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1545);
    _la = _input->LA(1);
    if (!(_la == AdaParser::PLUS

    || _la == AdaParser::MINUS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Multiplying_operatorContext ------------------------------------------------------------------

AdaParser::Multiplying_operatorContext::Multiplying_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Multiplying_operatorContext::MULT() {
  return getToken(AdaParser::MULT, 0);
}

tree::TerminalNode* AdaParser::Multiplying_operatorContext::DIV() {
  return getToken(AdaParser::DIV, 0);
}

tree::TerminalNode* AdaParser::Multiplying_operatorContext::MOD() {
  return getToken(AdaParser::MOD, 0);
}

tree::TerminalNode* AdaParser::Multiplying_operatorContext::REM() {
  return getToken(AdaParser::REM, 0);
}


size_t AdaParser::Multiplying_operatorContext::getRuleIndex() const {
  return AdaParser::RuleMultiplying_operator;
}

void AdaParser::Multiplying_operatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMultiplying_operator(this);
}

void AdaParser::Multiplying_operatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMultiplying_operator(this);
}

AdaParser::Multiplying_operatorContext* AdaParser::multiplying_operator() {
  Multiplying_operatorContext *_localctx = _tracker.createInstance<Multiplying_operatorContext>(_ctx, getState());
  enterRule(_localctx, 208, AdaParser::RuleMultiplying_operator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1547);
    _la = _input->LA(1);
    if (!(_la == AdaParser::MOD

    || _la == AdaParser::REM || _la == AdaParser::MULT

    || _la == AdaParser::DIV)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Highest_precedence_operatorContext ------------------------------------------------------------------

AdaParser::Highest_precedence_operatorContext::Highest_precedence_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Highest_precedence_operatorContext::EXPON() {
  return getToken(AdaParser::EXPON, 0);
}

tree::TerminalNode* AdaParser::Highest_precedence_operatorContext::ABS() {
  return getToken(AdaParser::ABS, 0);
}

tree::TerminalNode* AdaParser::Highest_precedence_operatorContext::NOT() {
  return getToken(AdaParser::NOT, 0);
}


size_t AdaParser::Highest_precedence_operatorContext::getRuleIndex() const {
  return AdaParser::RuleHighest_precedence_operator;
}

void AdaParser::Highest_precedence_operatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterHighest_precedence_operator(this);
}

void AdaParser::Highest_precedence_operatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitHighest_precedence_operator(this);
}

AdaParser::Highest_precedence_operatorContext* AdaParser::highest_precedence_operator() {
  Highest_precedence_operatorContext *_localctx = _tracker.createInstance<Highest_precedence_operatorContext>(_ctx, getState());
  enterRule(_localctx, 210, AdaParser::RuleHighest_precedence_operator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1549);
    _la = _input->LA(1);
    if (!(_la == AdaParser::ABS

    || _la == AdaParser::NOT || _la == AdaParser::EXPON)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Conditional_expressionContext ------------------------------------------------------------------

AdaParser::Conditional_expressionContext::Conditional_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::If_expressionContext* AdaParser::Conditional_expressionContext::if_expression() {
  return getRuleContext<AdaParser::If_expressionContext>(0);
}

AdaParser::Case_expressionContext* AdaParser::Conditional_expressionContext::case_expression() {
  return getRuleContext<AdaParser::Case_expressionContext>(0);
}


size_t AdaParser::Conditional_expressionContext::getRuleIndex() const {
  return AdaParser::RuleConditional_expression;
}

void AdaParser::Conditional_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConditional_expression(this);
}

void AdaParser::Conditional_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConditional_expression(this);
}

AdaParser::Conditional_expressionContext* AdaParser::conditional_expression() {
  Conditional_expressionContext *_localctx = _tracker.createInstance<Conditional_expressionContext>(_ctx, getState());
  enterRule(_localctx, 212, AdaParser::RuleConditional_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1553);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AdaParser::IF: {
        enterOuterAlt(_localctx, 1);
        setState(1551);
        if_expression();
        break;
      }

      case AdaParser::CASE: {
        enterOuterAlt(_localctx, 2);
        setState(1552);
        case_expression();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- If_expressionContext ------------------------------------------------------------------

AdaParser::If_expressionContext::If_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::If_expressionContext::IF() {
  return getToken(AdaParser::IF, 0);
}

std::vector<AdaParser::ConditionContext *> AdaParser::If_expressionContext::condition() {
  return getRuleContexts<AdaParser::ConditionContext>();
}

AdaParser::ConditionContext* AdaParser::If_expressionContext::condition(size_t i) {
  return getRuleContext<AdaParser::ConditionContext>(i);
}

std::vector<tree::TerminalNode *> AdaParser::If_expressionContext::THEN() {
  return getTokens(AdaParser::THEN);
}

tree::TerminalNode* AdaParser::If_expressionContext::THEN(size_t i) {
  return getToken(AdaParser::THEN, i);
}

std::vector<AdaParser::ExpressionContext *> AdaParser::If_expressionContext::expression() {
  return getRuleContexts<AdaParser::ExpressionContext>();
}

AdaParser::ExpressionContext* AdaParser::If_expressionContext::expression(size_t i) {
  return getRuleContext<AdaParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> AdaParser::If_expressionContext::ELSIF() {
  return getTokens(AdaParser::ELSIF);
}

tree::TerminalNode* AdaParser::If_expressionContext::ELSIF(size_t i) {
  return getToken(AdaParser::ELSIF, i);
}

tree::TerminalNode* AdaParser::If_expressionContext::ELSE() {
  return getToken(AdaParser::ELSE, 0);
}


size_t AdaParser::If_expressionContext::getRuleIndex() const {
  return AdaParser::RuleIf_expression;
}

void AdaParser::If_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIf_expression(this);
}

void AdaParser::If_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIf_expression(this);
}

AdaParser::If_expressionContext* AdaParser::if_expression() {
  If_expressionContext *_localctx = _tracker.createInstance<If_expressionContext>(_ctx, getState());
  enterRule(_localctx, 214, AdaParser::RuleIf_expression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1555);
    match(AdaParser::IF);
    setState(1556);
    condition();
    setState(1557);
    match(AdaParser::THEN);
    setState(1558);
    expression();
    setState(1566);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == AdaParser::ELSIF) {
      setState(1559);
      match(AdaParser::ELSIF);
      setState(1560);
      condition();
      setState(1561);
      match(AdaParser::THEN);
      setState(1562);
      expression();
      setState(1568);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1571);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::ELSE) {
      setState(1569);
      match(AdaParser::ELSE);
      setState(1570);
      expression();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConditionContext ------------------------------------------------------------------

AdaParser::ConditionContext::ConditionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::ExpressionContext* AdaParser::ConditionContext::expression() {
  return getRuleContext<AdaParser::ExpressionContext>(0);
}


size_t AdaParser::ConditionContext::getRuleIndex() const {
  return AdaParser::RuleCondition;
}

void AdaParser::ConditionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCondition(this);
}

void AdaParser::ConditionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCondition(this);
}

AdaParser::ConditionContext* AdaParser::condition() {
  ConditionContext *_localctx = _tracker.createInstance<ConditionContext>(_ctx, getState());
  enterRule(_localctx, 216, AdaParser::RuleCondition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1573);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Case_expressionContext ------------------------------------------------------------------

AdaParser::Case_expressionContext::Case_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Case_expressionContext::CASE() {
  return getToken(AdaParser::CASE, 0);
}

AdaParser::ExpressionContext* AdaParser::Case_expressionContext::expression() {
  return getRuleContext<AdaParser::ExpressionContext>(0);
}

tree::TerminalNode* AdaParser::Case_expressionContext::IS() {
  return getToken(AdaParser::IS, 0);
}

std::vector<AdaParser::Case_expression_alternativeContext *> AdaParser::Case_expressionContext::case_expression_alternative() {
  return getRuleContexts<AdaParser::Case_expression_alternativeContext>();
}

AdaParser::Case_expression_alternativeContext* AdaParser::Case_expressionContext::case_expression_alternative(size_t i) {
  return getRuleContext<AdaParser::Case_expression_alternativeContext>(i);
}

std::vector<tree::TerminalNode *> AdaParser::Case_expressionContext::COMMA() {
  return getTokens(AdaParser::COMMA);
}

tree::TerminalNode* AdaParser::Case_expressionContext::COMMA(size_t i) {
  return getToken(AdaParser::COMMA, i);
}


size_t AdaParser::Case_expressionContext::getRuleIndex() const {
  return AdaParser::RuleCase_expression;
}

void AdaParser::Case_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCase_expression(this);
}

void AdaParser::Case_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCase_expression(this);
}

AdaParser::Case_expressionContext* AdaParser::case_expression() {
  Case_expressionContext *_localctx = _tracker.createInstance<Case_expressionContext>(_ctx, getState());
  enterRule(_localctx, 218, AdaParser::RuleCase_expression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1575);
    match(AdaParser::CASE);
    setState(1576);
    expression();
    setState(1577);
    match(AdaParser::IS);
    setState(1578);
    case_expression_alternative();
    setState(1583);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == AdaParser::COMMA) {
      setState(1579);
      match(AdaParser::COMMA);
      setState(1580);
      case_expression_alternative();
      setState(1585);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Case_expression_alternativeContext ------------------------------------------------------------------

AdaParser::Case_expression_alternativeContext::Case_expression_alternativeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Case_expression_alternativeContext::WHEN() {
  return getToken(AdaParser::WHEN, 0);
}

AdaParser::Discrete_choice_listContext* AdaParser::Case_expression_alternativeContext::discrete_choice_list() {
  return getRuleContext<AdaParser::Discrete_choice_listContext>(0);
}

tree::TerminalNode* AdaParser::Case_expression_alternativeContext::ARROW() {
  return getToken(AdaParser::ARROW, 0);
}

AdaParser::ExpressionContext* AdaParser::Case_expression_alternativeContext::expression() {
  return getRuleContext<AdaParser::ExpressionContext>(0);
}


size_t AdaParser::Case_expression_alternativeContext::getRuleIndex() const {
  return AdaParser::RuleCase_expression_alternative;
}

void AdaParser::Case_expression_alternativeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCase_expression_alternative(this);
}

void AdaParser::Case_expression_alternativeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCase_expression_alternative(this);
}

AdaParser::Case_expression_alternativeContext* AdaParser::case_expression_alternative() {
  Case_expression_alternativeContext *_localctx = _tracker.createInstance<Case_expression_alternativeContext>(_ctx, getState());
  enterRule(_localctx, 220, AdaParser::RuleCase_expression_alternative);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1586);
    match(AdaParser::WHEN);
    setState(1587);
    discrete_choice_list();
    setState(1588);
    match(AdaParser::ARROW);
    setState(1589);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Quantified_expressionContext ------------------------------------------------------------------

AdaParser::Quantified_expressionContext::Quantified_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Quantified_expressionContext::FOR() {
  return getToken(AdaParser::FOR, 0);
}

AdaParser::QuantifierContext* AdaParser::Quantified_expressionContext::quantifier() {
  return getRuleContext<AdaParser::QuantifierContext>(0);
}

AdaParser::Loop_parameter_specificationContext* AdaParser::Quantified_expressionContext::loop_parameter_specification() {
  return getRuleContext<AdaParser::Loop_parameter_specificationContext>(0);
}

tree::TerminalNode* AdaParser::Quantified_expressionContext::ARROW() {
  return getToken(AdaParser::ARROW, 0);
}

AdaParser::PredicateContext* AdaParser::Quantified_expressionContext::predicate() {
  return getRuleContext<AdaParser::PredicateContext>(0);
}

AdaParser::Iterator_specificationContext* AdaParser::Quantified_expressionContext::iterator_specification() {
  return getRuleContext<AdaParser::Iterator_specificationContext>(0);
}


size_t AdaParser::Quantified_expressionContext::getRuleIndex() const {
  return AdaParser::RuleQuantified_expression;
}

void AdaParser::Quantified_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQuantified_expression(this);
}

void AdaParser::Quantified_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQuantified_expression(this);
}

AdaParser::Quantified_expressionContext* AdaParser::quantified_expression() {
  Quantified_expressionContext *_localctx = _tracker.createInstance<Quantified_expressionContext>(_ctx, getState());
  enterRule(_localctx, 222, AdaParser::RuleQuantified_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1603);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 150, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1591);
      match(AdaParser::FOR);
      setState(1592);
      quantifier();
      setState(1593);
      loop_parameter_specification();
      setState(1594);
      match(AdaParser::ARROW);
      setState(1595);
      predicate();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1597);
      match(AdaParser::FOR);
      setState(1598);
      quantifier();
      setState(1599);
      iterator_specification();
      setState(1600);
      match(AdaParser::ARROW);
      setState(1601);
      predicate();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QuantifierContext ------------------------------------------------------------------

AdaParser::QuantifierContext::QuantifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::QuantifierContext::ALL() {
  return getToken(AdaParser::ALL, 0);
}

tree::TerminalNode* AdaParser::QuantifierContext::SOME() {
  return getToken(AdaParser::SOME, 0);
}


size_t AdaParser::QuantifierContext::getRuleIndex() const {
  return AdaParser::RuleQuantifier;
}

void AdaParser::QuantifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQuantifier(this);
}

void AdaParser::QuantifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQuantifier(this);
}

AdaParser::QuantifierContext* AdaParser::quantifier() {
  QuantifierContext *_localctx = _tracker.createInstance<QuantifierContext>(_ctx, getState());
  enterRule(_localctx, 224, AdaParser::RuleQuantifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1605);
    _la = _input->LA(1);
    if (!(_la == AdaParser::ALL

    || _la == AdaParser::SOME)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PredicateContext ------------------------------------------------------------------

AdaParser::PredicateContext::PredicateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::ExpressionContext* AdaParser::PredicateContext::expression() {
  return getRuleContext<AdaParser::ExpressionContext>(0);
}


size_t AdaParser::PredicateContext::getRuleIndex() const {
  return AdaParser::RulePredicate;
}

void AdaParser::PredicateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPredicate(this);
}

void AdaParser::PredicateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPredicate(this);
}

AdaParser::PredicateContext* AdaParser::predicate() {
  PredicateContext *_localctx = _tracker.createInstance<PredicateContext>(_ctx, getState());
  enterRule(_localctx, 226, AdaParser::RulePredicate);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1607);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_conversionContext ------------------------------------------------------------------

AdaParser::Type_conversionContext::Type_conversionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Subtype_markContext* AdaParser::Type_conversionContext::subtype_mark() {
  return getRuleContext<AdaParser::Subtype_markContext>(0);
}

tree::TerminalNode* AdaParser::Type_conversionContext::LP() {
  return getToken(AdaParser::LP, 0);
}

AdaParser::ExpressionContext* AdaParser::Type_conversionContext::expression() {
  return getRuleContext<AdaParser::ExpressionContext>(0);
}

tree::TerminalNode* AdaParser::Type_conversionContext::RP() {
  return getToken(AdaParser::RP, 0);
}

AdaParser::NameContext* AdaParser::Type_conversionContext::name() {
  return getRuleContext<AdaParser::NameContext>(0);
}


size_t AdaParser::Type_conversionContext::getRuleIndex() const {
  return AdaParser::RuleType_conversion;
}

void AdaParser::Type_conversionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_conversion(this);
}

void AdaParser::Type_conversionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_conversion(this);
}

AdaParser::Type_conversionContext* AdaParser::type_conversion() {
  Type_conversionContext *_localctx = _tracker.createInstance<Type_conversionContext>(_ctx, getState());
  enterRule(_localctx, 228, AdaParser::RuleType_conversion);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1619);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 151, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1609);
      subtype_mark();
      setState(1610);
      match(AdaParser::LP);
      setState(1611);
      expression();
      setState(1612);
      match(AdaParser::RP);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1614);
      subtype_mark();
      setState(1615);
      match(AdaParser::LP);
      setState(1616);
      name(0);
      setState(1617);
      match(AdaParser::RP);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Qualified_expressionContext ------------------------------------------------------------------

AdaParser::Qualified_expressionContext::Qualified_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Subtype_markContext* AdaParser::Qualified_expressionContext::subtype_mark() {
  return getRuleContext<AdaParser::Subtype_markContext>(0);
}

tree::TerminalNode* AdaParser::Qualified_expressionContext::SQ() {
  return getToken(AdaParser::SQ, 0);
}

tree::TerminalNode* AdaParser::Qualified_expressionContext::LP() {
  return getToken(AdaParser::LP, 0);
}

AdaParser::ExpressionContext* AdaParser::Qualified_expressionContext::expression() {
  return getRuleContext<AdaParser::ExpressionContext>(0);
}

tree::TerminalNode* AdaParser::Qualified_expressionContext::RP() {
  return getToken(AdaParser::RP, 0);
}

AdaParser::AggregateContext* AdaParser::Qualified_expressionContext::aggregate() {
  return getRuleContext<AdaParser::AggregateContext>(0);
}


size_t AdaParser::Qualified_expressionContext::getRuleIndex() const {
  return AdaParser::RuleQualified_expression;
}

void AdaParser::Qualified_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQualified_expression(this);
}

void AdaParser::Qualified_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQualified_expression(this);
}

AdaParser::Qualified_expressionContext* AdaParser::qualified_expression() {
  Qualified_expressionContext *_localctx = _tracker.createInstance<Qualified_expressionContext>(_ctx, getState());
  enterRule(_localctx, 230, AdaParser::RuleQualified_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1633);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 152, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1621);
      subtype_mark();
      setState(1622);
      match(AdaParser::SQ);
      setState(1623);
      match(AdaParser::LP);
      setState(1624);
      expression();
      setState(1625);
      match(AdaParser::RP);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1627);
      subtype_mark();
      setState(1628);
      match(AdaParser::SQ);
      setState(1629);
      match(AdaParser::LP);
      setState(1630);
      aggregate();
      setState(1631);
      match(AdaParser::RP);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AllocatorContext ------------------------------------------------------------------

AdaParser::AllocatorContext::AllocatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::AllocatorContext::NEW() {
  return getToken(AdaParser::NEW, 0);
}

AdaParser::Subtype_indicationContext* AdaParser::AllocatorContext::subtype_indication() {
  return getRuleContext<AdaParser::Subtype_indicationContext>(0);
}

AdaParser::Subpool_specificationContext* AdaParser::AllocatorContext::subpool_specification() {
  return getRuleContext<AdaParser::Subpool_specificationContext>(0);
}

AdaParser::Qualified_expressionContext* AdaParser::AllocatorContext::qualified_expression() {
  return getRuleContext<AdaParser::Qualified_expressionContext>(0);
}


size_t AdaParser::AllocatorContext::getRuleIndex() const {
  return AdaParser::RuleAllocator;
}

void AdaParser::AllocatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAllocator(this);
}

void AdaParser::AllocatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAllocator(this);
}

AdaParser::AllocatorContext* AdaParser::allocator() {
  AllocatorContext *_localctx = _tracker.createInstance<AllocatorContext>(_ctx, getState());
  enterRule(_localctx, 232, AdaParser::RuleAllocator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1645);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 155, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1635);
      match(AdaParser::NEW);
      setState(1637);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::LP) {
        setState(1636);
        subpool_specification();
      }
      setState(1639);
      subtype_indication();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1640);
      match(AdaParser::NEW);
      setState(1642);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::LP) {
        setState(1641);
        subpool_specification();
      }
      setState(1644);
      qualified_expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Subpool_specificationContext ------------------------------------------------------------------

AdaParser::Subpool_specificationContext::Subpool_specificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Subpool_specificationContext::LP() {
  return getToken(AdaParser::LP, 0);
}

AdaParser::NameContext* AdaParser::Subpool_specificationContext::name() {
  return getRuleContext<AdaParser::NameContext>(0);
}

tree::TerminalNode* AdaParser::Subpool_specificationContext::RP() {
  return getToken(AdaParser::RP, 0);
}


size_t AdaParser::Subpool_specificationContext::getRuleIndex() const {
  return AdaParser::RuleSubpool_specification;
}

void AdaParser::Subpool_specificationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubpool_specification(this);
}

void AdaParser::Subpool_specificationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubpool_specification(this);
}

AdaParser::Subpool_specificationContext* AdaParser::subpool_specification() {
  Subpool_specificationContext *_localctx = _tracker.createInstance<Subpool_specificationContext>(_ctx, getState());
  enterRule(_localctx, 234, AdaParser::RuleSubpool_specification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1647);
    match(AdaParser::LP);
    setState(1648);
    name(0);
    setState(1649);
    match(AdaParser::RP);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Sequence_of_statementsContext ------------------------------------------------------------------

AdaParser::Sequence_of_statementsContext::Sequence_of_statementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AdaParser::StatementContext *> AdaParser::Sequence_of_statementsContext::statement() {
  return getRuleContexts<AdaParser::StatementContext>();
}

AdaParser::StatementContext* AdaParser::Sequence_of_statementsContext::statement(size_t i) {
  return getRuleContext<AdaParser::StatementContext>(i);
}

std::vector<AdaParser::LabelContext *> AdaParser::Sequence_of_statementsContext::label() {
  return getRuleContexts<AdaParser::LabelContext>();
}

AdaParser::LabelContext* AdaParser::Sequence_of_statementsContext::label(size_t i) {
  return getRuleContext<AdaParser::LabelContext>(i);
}


size_t AdaParser::Sequence_of_statementsContext::getRuleIndex() const {
  return AdaParser::RuleSequence_of_statements;
}

void AdaParser::Sequence_of_statementsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSequence_of_statements(this);
}

void AdaParser::Sequence_of_statementsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSequence_of_statements(this);
}

AdaParser::Sequence_of_statementsContext* AdaParser::sequence_of_statements() {
  Sequence_of_statementsContext *_localctx = _tracker.createInstance<Sequence_of_statementsContext>(_ctx, getState());
  enterRule(_localctx, 236, AdaParser::RuleSequence_of_statements);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1652); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1651);
              statement();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1654); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 156, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(1659);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == AdaParser::IDENTIFIER_

    || _la == AdaParser::STRING_LITERAL_) {
      setState(1656);
      label();
      setState(1661);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementContext ------------------------------------------------------------------

AdaParser::StatementContext::StatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Simple_statementContext* AdaParser::StatementContext::simple_statement() {
  return getRuleContext<AdaParser::Simple_statementContext>(0);
}

std::vector<AdaParser::LabelContext *> AdaParser::StatementContext::label() {
  return getRuleContexts<AdaParser::LabelContext>();
}

AdaParser::LabelContext* AdaParser::StatementContext::label(size_t i) {
  return getRuleContext<AdaParser::LabelContext>(i);
}

AdaParser::Compound_statementContext* AdaParser::StatementContext::compound_statement() {
  return getRuleContext<AdaParser::Compound_statementContext>(0);
}


size_t AdaParser::StatementContext::getRuleIndex() const {
  return AdaParser::RuleStatement;
}

void AdaParser::StatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatement(this);
}

void AdaParser::StatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatement(this);
}

AdaParser::StatementContext* AdaParser::statement() {
  StatementContext *_localctx = _tracker.createInstance<StatementContext>(_ctx, getState());
  enterRule(_localctx, 238, AdaParser::RuleStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1676);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 160, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1665);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 158, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1662);
          label(); 
        }
        setState(1667);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 158, _ctx);
      }
      setState(1668);
      simple_statement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1672);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 159, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1669);
          label(); 
        }
        setState(1674);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 159, _ctx);
      }
      setState(1675);
      compound_statement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Simple_statementContext ------------------------------------------------------------------

AdaParser::Simple_statementContext::Simple_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Null_statementContext* AdaParser::Simple_statementContext::null_statement() {
  return getRuleContext<AdaParser::Null_statementContext>(0);
}

AdaParser::Assignment_statementContext* AdaParser::Simple_statementContext::assignment_statement() {
  return getRuleContext<AdaParser::Assignment_statementContext>(0);
}

AdaParser::Exit_statementContext* AdaParser::Simple_statementContext::exit_statement() {
  return getRuleContext<AdaParser::Exit_statementContext>(0);
}

AdaParser::Goto_statementContext* AdaParser::Simple_statementContext::goto_statement() {
  return getRuleContext<AdaParser::Goto_statementContext>(0);
}

AdaParser::Procedure_call_statementContext* AdaParser::Simple_statementContext::procedure_call_statement() {
  return getRuleContext<AdaParser::Procedure_call_statementContext>(0);
}

AdaParser::Simple_return_statementContext* AdaParser::Simple_statementContext::simple_return_statement() {
  return getRuleContext<AdaParser::Simple_return_statementContext>(0);
}

AdaParser::Entry_call_statementContext* AdaParser::Simple_statementContext::entry_call_statement() {
  return getRuleContext<AdaParser::Entry_call_statementContext>(0);
}

AdaParser::Requeue_statementContext* AdaParser::Simple_statementContext::requeue_statement() {
  return getRuleContext<AdaParser::Requeue_statementContext>(0);
}

AdaParser::Delay_statementContext* AdaParser::Simple_statementContext::delay_statement() {
  return getRuleContext<AdaParser::Delay_statementContext>(0);
}

AdaParser::Abort_statementContext* AdaParser::Simple_statementContext::abort_statement() {
  return getRuleContext<AdaParser::Abort_statementContext>(0);
}

AdaParser::Raise_statementContext* AdaParser::Simple_statementContext::raise_statement() {
  return getRuleContext<AdaParser::Raise_statementContext>(0);
}

AdaParser::Qualified_expressionContext* AdaParser::Simple_statementContext::qualified_expression() {
  return getRuleContext<AdaParser::Qualified_expressionContext>(0);
}


size_t AdaParser::Simple_statementContext::getRuleIndex() const {
  return AdaParser::RuleSimple_statement;
}

void AdaParser::Simple_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimple_statement(this);
}

void AdaParser::Simple_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimple_statement(this);
}

AdaParser::Simple_statementContext* AdaParser::simple_statement() {
  Simple_statementContext *_localctx = _tracker.createInstance<Simple_statementContext>(_ctx, getState());
  enterRule(_localctx, 240, AdaParser::RuleSimple_statement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1690);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 161, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1678);
      null_statement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1679);
      assignment_statement();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1680);
      exit_statement();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1681);
      goto_statement();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1682);
      procedure_call_statement();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1683);
      simple_return_statement();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1684);
      entry_call_statement();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1685);
      requeue_statement();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1686);
      delay_statement();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(1687);
      abort_statement();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(1688);
      raise_statement();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(1689);
      qualified_expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Compound_statementContext ------------------------------------------------------------------

AdaParser::Compound_statementContext::Compound_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::If_statementContext* AdaParser::Compound_statementContext::if_statement() {
  return getRuleContext<AdaParser::If_statementContext>(0);
}

AdaParser::Case_statementContext* AdaParser::Compound_statementContext::case_statement() {
  return getRuleContext<AdaParser::Case_statementContext>(0);
}

AdaParser::Loop_statementContext* AdaParser::Compound_statementContext::loop_statement() {
  return getRuleContext<AdaParser::Loop_statementContext>(0);
}

AdaParser::Block_statementContext* AdaParser::Compound_statementContext::block_statement() {
  return getRuleContext<AdaParser::Block_statementContext>(0);
}

AdaParser::Extended_return_statementContext* AdaParser::Compound_statementContext::extended_return_statement() {
  return getRuleContext<AdaParser::Extended_return_statementContext>(0);
}

AdaParser::Accept_statementContext* AdaParser::Compound_statementContext::accept_statement() {
  return getRuleContext<AdaParser::Accept_statementContext>(0);
}

AdaParser::Select_statementContext* AdaParser::Compound_statementContext::select_statement() {
  return getRuleContext<AdaParser::Select_statementContext>(0);
}


size_t AdaParser::Compound_statementContext::getRuleIndex() const {
  return AdaParser::RuleCompound_statement;
}

void AdaParser::Compound_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCompound_statement(this);
}

void AdaParser::Compound_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCompound_statement(this);
}

AdaParser::Compound_statementContext* AdaParser::compound_statement() {
  Compound_statementContext *_localctx = _tracker.createInstance<Compound_statementContext>(_ctx, getState());
  enterRule(_localctx, 242, AdaParser::RuleCompound_statement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1699);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 162, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1692);
      if_statement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1693);
      case_statement();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1694);
      loop_statement();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1695);
      block_statement();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1696);
      extended_return_statement();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1697);
      accept_statement();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1698);
      select_statement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Null_statementContext ------------------------------------------------------------------

AdaParser::Null_statementContext::Null_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Null_statementContext::NULL_() {
  return getToken(AdaParser::NULL_, 0);
}

tree::TerminalNode* AdaParser::Null_statementContext::SEMI() {
  return getToken(AdaParser::SEMI, 0);
}


size_t AdaParser::Null_statementContext::getRuleIndex() const {
  return AdaParser::RuleNull_statement;
}

void AdaParser::Null_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNull_statement(this);
}

void AdaParser::Null_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNull_statement(this);
}

AdaParser::Null_statementContext* AdaParser::null_statement() {
  Null_statementContext *_localctx = _tracker.createInstance<Null_statementContext>(_ctx, getState());
  enterRule(_localctx, 244, AdaParser::RuleNull_statement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1701);
    match(AdaParser::NULL_);
    setState(1702);
    match(AdaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LabelContext ------------------------------------------------------------------

AdaParser::LabelContext::LabelContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Direct_nameContext* AdaParser::LabelContext::direct_name() {
  return getRuleContext<AdaParser::Direct_nameContext>(0);
}


size_t AdaParser::LabelContext::getRuleIndex() const {
  return AdaParser::RuleLabel;
}

void AdaParser::LabelContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLabel(this);
}

void AdaParser::LabelContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLabel(this);
}

AdaParser::LabelContext* AdaParser::label() {
  LabelContext *_localctx = _tracker.createInstance<LabelContext>(_ctx, getState());
  enterRule(_localctx, 246, AdaParser::RuleLabel);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1704);
    direct_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Assignment_statementContext ------------------------------------------------------------------

AdaParser::Assignment_statementContext::Assignment_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::NameContext* AdaParser::Assignment_statementContext::name() {
  return getRuleContext<AdaParser::NameContext>(0);
}

tree::TerminalNode* AdaParser::Assignment_statementContext::ASSIGN() {
  return getToken(AdaParser::ASSIGN, 0);
}

AdaParser::ExpressionContext* AdaParser::Assignment_statementContext::expression() {
  return getRuleContext<AdaParser::ExpressionContext>(0);
}

tree::TerminalNode* AdaParser::Assignment_statementContext::SEMI() {
  return getToken(AdaParser::SEMI, 0);
}


size_t AdaParser::Assignment_statementContext::getRuleIndex() const {
  return AdaParser::RuleAssignment_statement;
}

void AdaParser::Assignment_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssignment_statement(this);
}

void AdaParser::Assignment_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssignment_statement(this);
}

AdaParser::Assignment_statementContext* AdaParser::assignment_statement() {
  Assignment_statementContext *_localctx = _tracker.createInstance<Assignment_statementContext>(_ctx, getState());
  enterRule(_localctx, 248, AdaParser::RuleAssignment_statement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1706);
    name(0);
    setState(1707);
    match(AdaParser::ASSIGN);
    setState(1708);
    expression();
    setState(1709);
    match(AdaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- If_statementContext ------------------------------------------------------------------

AdaParser::If_statementContext::If_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> AdaParser::If_statementContext::IF() {
  return getTokens(AdaParser::IF);
}

tree::TerminalNode* AdaParser::If_statementContext::IF(size_t i) {
  return getToken(AdaParser::IF, i);
}

std::vector<AdaParser::ConditionContext *> AdaParser::If_statementContext::condition() {
  return getRuleContexts<AdaParser::ConditionContext>();
}

AdaParser::ConditionContext* AdaParser::If_statementContext::condition(size_t i) {
  return getRuleContext<AdaParser::ConditionContext>(i);
}

std::vector<tree::TerminalNode *> AdaParser::If_statementContext::THEN() {
  return getTokens(AdaParser::THEN);
}

tree::TerminalNode* AdaParser::If_statementContext::THEN(size_t i) {
  return getToken(AdaParser::THEN, i);
}

std::vector<AdaParser::Sequence_of_statementsContext *> AdaParser::If_statementContext::sequence_of_statements() {
  return getRuleContexts<AdaParser::Sequence_of_statementsContext>();
}

AdaParser::Sequence_of_statementsContext* AdaParser::If_statementContext::sequence_of_statements(size_t i) {
  return getRuleContext<AdaParser::Sequence_of_statementsContext>(i);
}

tree::TerminalNode* AdaParser::If_statementContext::END() {
  return getToken(AdaParser::END, 0);
}

tree::TerminalNode* AdaParser::If_statementContext::SEMI() {
  return getToken(AdaParser::SEMI, 0);
}

std::vector<tree::TerminalNode *> AdaParser::If_statementContext::ELSIF() {
  return getTokens(AdaParser::ELSIF);
}

tree::TerminalNode* AdaParser::If_statementContext::ELSIF(size_t i) {
  return getToken(AdaParser::ELSIF, i);
}

tree::TerminalNode* AdaParser::If_statementContext::ELSE() {
  return getToken(AdaParser::ELSE, 0);
}


size_t AdaParser::If_statementContext::getRuleIndex() const {
  return AdaParser::RuleIf_statement;
}

void AdaParser::If_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIf_statement(this);
}

void AdaParser::If_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIf_statement(this);
}

AdaParser::If_statementContext* AdaParser::if_statement() {
  If_statementContext *_localctx = _tracker.createInstance<If_statementContext>(_ctx, getState());
  enterRule(_localctx, 250, AdaParser::RuleIf_statement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1711);
    match(AdaParser::IF);
    setState(1712);
    condition();
    setState(1713);
    match(AdaParser::THEN);
    setState(1714);
    sequence_of_statements();
    setState(1722);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == AdaParser::ELSIF) {
      setState(1715);
      match(AdaParser::ELSIF);
      setState(1716);
      condition();
      setState(1717);
      match(AdaParser::THEN);
      setState(1718);
      sequence_of_statements();
      setState(1724);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1727);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::ELSE) {
      setState(1725);
      match(AdaParser::ELSE);
      setState(1726);
      sequence_of_statements();
    }
    setState(1729);
    match(AdaParser::END);
    setState(1730);
    match(AdaParser::IF);
    setState(1731);
    match(AdaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Case_statementContext ------------------------------------------------------------------

AdaParser::Case_statementContext::Case_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> AdaParser::Case_statementContext::CASE() {
  return getTokens(AdaParser::CASE);
}

tree::TerminalNode* AdaParser::Case_statementContext::CASE(size_t i) {
  return getToken(AdaParser::CASE, i);
}

AdaParser::ExpressionContext* AdaParser::Case_statementContext::expression() {
  return getRuleContext<AdaParser::ExpressionContext>(0);
}

tree::TerminalNode* AdaParser::Case_statementContext::IS() {
  return getToken(AdaParser::IS, 0);
}

std::vector<AdaParser::Case_statement_alternativeContext *> AdaParser::Case_statementContext::case_statement_alternative() {
  return getRuleContexts<AdaParser::Case_statement_alternativeContext>();
}

AdaParser::Case_statement_alternativeContext* AdaParser::Case_statementContext::case_statement_alternative(size_t i) {
  return getRuleContext<AdaParser::Case_statement_alternativeContext>(i);
}

tree::TerminalNode* AdaParser::Case_statementContext::END() {
  return getToken(AdaParser::END, 0);
}

tree::TerminalNode* AdaParser::Case_statementContext::SEMI() {
  return getToken(AdaParser::SEMI, 0);
}


size_t AdaParser::Case_statementContext::getRuleIndex() const {
  return AdaParser::RuleCase_statement;
}

void AdaParser::Case_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCase_statement(this);
}

void AdaParser::Case_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCase_statement(this);
}

AdaParser::Case_statementContext* AdaParser::case_statement() {
  Case_statementContext *_localctx = _tracker.createInstance<Case_statementContext>(_ctx, getState());
  enterRule(_localctx, 252, AdaParser::RuleCase_statement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1733);
    match(AdaParser::CASE);
    setState(1734);
    expression();
    setState(1735);
    match(AdaParser::IS);
    setState(1736);
    case_statement_alternative();
    setState(1740);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == AdaParser::WHEN) {
      setState(1737);
      case_statement_alternative();
      setState(1742);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1743);
    match(AdaParser::END);
    setState(1744);
    match(AdaParser::CASE);
    setState(1745);
    match(AdaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Case_statement_alternativeContext ------------------------------------------------------------------

AdaParser::Case_statement_alternativeContext::Case_statement_alternativeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Case_statement_alternativeContext::WHEN() {
  return getToken(AdaParser::WHEN, 0);
}

AdaParser::Discrete_choice_listContext* AdaParser::Case_statement_alternativeContext::discrete_choice_list() {
  return getRuleContext<AdaParser::Discrete_choice_listContext>(0);
}

tree::TerminalNode* AdaParser::Case_statement_alternativeContext::ARROW() {
  return getToken(AdaParser::ARROW, 0);
}

AdaParser::Sequence_of_statementsContext* AdaParser::Case_statement_alternativeContext::sequence_of_statements() {
  return getRuleContext<AdaParser::Sequence_of_statementsContext>(0);
}


size_t AdaParser::Case_statement_alternativeContext::getRuleIndex() const {
  return AdaParser::RuleCase_statement_alternative;
}

void AdaParser::Case_statement_alternativeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCase_statement_alternative(this);
}

void AdaParser::Case_statement_alternativeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCase_statement_alternative(this);
}

AdaParser::Case_statement_alternativeContext* AdaParser::case_statement_alternative() {
  Case_statement_alternativeContext *_localctx = _tracker.createInstance<Case_statement_alternativeContext>(_ctx, getState());
  enterRule(_localctx, 254, AdaParser::RuleCase_statement_alternative);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1747);
    match(AdaParser::WHEN);
    setState(1748);
    discrete_choice_list();
    setState(1749);
    match(AdaParser::ARROW);
    setState(1750);
    sequence_of_statements();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Loop_statementContext ------------------------------------------------------------------

AdaParser::Loop_statementContext::Loop_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> AdaParser::Loop_statementContext::LOOP() {
  return getTokens(AdaParser::LOOP);
}

tree::TerminalNode* AdaParser::Loop_statementContext::LOOP(size_t i) {
  return getToken(AdaParser::LOOP, i);
}

AdaParser::Sequence_of_statementsContext* AdaParser::Loop_statementContext::sequence_of_statements() {
  return getRuleContext<AdaParser::Sequence_of_statementsContext>(0);
}

tree::TerminalNode* AdaParser::Loop_statementContext::END() {
  return getToken(AdaParser::END, 0);
}

tree::TerminalNode* AdaParser::Loop_statementContext::SEMI() {
  return getToken(AdaParser::SEMI, 0);
}

AdaParser::Direct_nameContext* AdaParser::Loop_statementContext::direct_name() {
  return getRuleContext<AdaParser::Direct_nameContext>(0);
}

tree::TerminalNode* AdaParser::Loop_statementContext::COLON() {
  return getToken(AdaParser::COLON, 0);
}

AdaParser::Iteration_schemeContext* AdaParser::Loop_statementContext::iteration_scheme() {
  return getRuleContext<AdaParser::Iteration_schemeContext>(0);
}

AdaParser::IdentifierContext* AdaParser::Loop_statementContext::identifier() {
  return getRuleContext<AdaParser::IdentifierContext>(0);
}


size_t AdaParser::Loop_statementContext::getRuleIndex() const {
  return AdaParser::RuleLoop_statement;
}

void AdaParser::Loop_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLoop_statement(this);
}

void AdaParser::Loop_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLoop_statement(this);
}

AdaParser::Loop_statementContext* AdaParser::loop_statement() {
  Loop_statementContext *_localctx = _tracker.createInstance<Loop_statementContext>(_ctx, getState());
  enterRule(_localctx, 256, AdaParser::RuleLoop_statement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1755);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::IDENTIFIER_

    || _la == AdaParser::STRING_LITERAL_) {
      setState(1752);
      direct_name();
      setState(1753);
      match(AdaParser::COLON);
    }
    setState(1758);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::FOR

    || _la == AdaParser::WHILE) {
      setState(1757);
      iteration_scheme();
    }
    setState(1760);
    match(AdaParser::LOOP);
    setState(1761);
    sequence_of_statements();
    setState(1762);
    match(AdaParser::END);
    setState(1763);
    match(AdaParser::LOOP);
    setState(1765);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::IDENTIFIER_) {
      setState(1764);
      identifier();
    }
    setState(1767);
    match(AdaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Iteration_schemeContext ------------------------------------------------------------------

AdaParser::Iteration_schemeContext::Iteration_schemeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Iteration_schemeContext::WHILE() {
  return getToken(AdaParser::WHILE, 0);
}

AdaParser::ConditionContext* AdaParser::Iteration_schemeContext::condition() {
  return getRuleContext<AdaParser::ConditionContext>(0);
}

tree::TerminalNode* AdaParser::Iteration_schemeContext::FOR() {
  return getToken(AdaParser::FOR, 0);
}

AdaParser::Loop_parameter_specificationContext* AdaParser::Iteration_schemeContext::loop_parameter_specification() {
  return getRuleContext<AdaParser::Loop_parameter_specificationContext>(0);
}

AdaParser::Iterator_specificationContext* AdaParser::Iteration_schemeContext::iterator_specification() {
  return getRuleContext<AdaParser::Iterator_specificationContext>(0);
}


size_t AdaParser::Iteration_schemeContext::getRuleIndex() const {
  return AdaParser::RuleIteration_scheme;
}

void AdaParser::Iteration_schemeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIteration_scheme(this);
}

void AdaParser::Iteration_schemeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIteration_scheme(this);
}

AdaParser::Iteration_schemeContext* AdaParser::iteration_scheme() {
  Iteration_schemeContext *_localctx = _tracker.createInstance<Iteration_schemeContext>(_ctx, getState());
  enterRule(_localctx, 258, AdaParser::RuleIteration_scheme);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1775);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 169, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1769);
      match(AdaParser::WHILE);
      setState(1770);
      condition();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1771);
      match(AdaParser::FOR);
      setState(1772);
      loop_parameter_specification();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1773);
      match(AdaParser::FOR);
      setState(1774);
      iterator_specification();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Loop_parameter_specificationContext ------------------------------------------------------------------

AdaParser::Loop_parameter_specificationContext::Loop_parameter_specificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Defining_identifierContext* AdaParser::Loop_parameter_specificationContext::defining_identifier() {
  return getRuleContext<AdaParser::Defining_identifierContext>(0);
}

tree::TerminalNode* AdaParser::Loop_parameter_specificationContext::IN() {
  return getToken(AdaParser::IN, 0);
}

AdaParser::Discrete_subtype_definitionContext* AdaParser::Loop_parameter_specificationContext::discrete_subtype_definition() {
  return getRuleContext<AdaParser::Discrete_subtype_definitionContext>(0);
}

tree::TerminalNode* AdaParser::Loop_parameter_specificationContext::REVERSE() {
  return getToken(AdaParser::REVERSE, 0);
}


size_t AdaParser::Loop_parameter_specificationContext::getRuleIndex() const {
  return AdaParser::RuleLoop_parameter_specification;
}

void AdaParser::Loop_parameter_specificationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLoop_parameter_specification(this);
}

void AdaParser::Loop_parameter_specificationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLoop_parameter_specification(this);
}

AdaParser::Loop_parameter_specificationContext* AdaParser::loop_parameter_specification() {
  Loop_parameter_specificationContext *_localctx = _tracker.createInstance<Loop_parameter_specificationContext>(_ctx, getState());
  enterRule(_localctx, 260, AdaParser::RuleLoop_parameter_specification);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1777);
    defining_identifier();
    setState(1778);
    match(AdaParser::IN);
    setState(1780);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::REVERSE) {
      setState(1779);
      match(AdaParser::REVERSE);
    }
    setState(1782);
    discrete_subtype_definition();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Iterator_specificationContext ------------------------------------------------------------------

AdaParser::Iterator_specificationContext::Iterator_specificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Defining_identifierContext* AdaParser::Iterator_specificationContext::defining_identifier() {
  return getRuleContext<AdaParser::Defining_identifierContext>(0);
}

tree::TerminalNode* AdaParser::Iterator_specificationContext::IN() {
  return getToken(AdaParser::IN, 0);
}

AdaParser::NameContext* AdaParser::Iterator_specificationContext::name() {
  return getRuleContext<AdaParser::NameContext>(0);
}

tree::TerminalNode* AdaParser::Iterator_specificationContext::REVERSE() {
  return getToken(AdaParser::REVERSE, 0);
}

tree::TerminalNode* AdaParser::Iterator_specificationContext::COLON() {
  return getToken(AdaParser::COLON, 0);
}

AdaParser::Subtype_indicationContext* AdaParser::Iterator_specificationContext::subtype_indication() {
  return getRuleContext<AdaParser::Subtype_indicationContext>(0);
}

tree::TerminalNode* AdaParser::Iterator_specificationContext::OF() {
  return getToken(AdaParser::OF, 0);
}


size_t AdaParser::Iterator_specificationContext::getRuleIndex() const {
  return AdaParser::RuleIterator_specification;
}

void AdaParser::Iterator_specificationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIterator_specification(this);
}

void AdaParser::Iterator_specificationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIterator_specification(this);
}

AdaParser::Iterator_specificationContext* AdaParser::iterator_specification() {
  Iterator_specificationContext *_localctx = _tracker.createInstance<Iterator_specificationContext>(_ctx, getState());
  enterRule(_localctx, 262, AdaParser::RuleIterator_specification);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1800);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 173, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1784);
      defining_identifier();
      setState(1785);
      match(AdaParser::IN);
      setState(1787);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::REVERSE) {
        setState(1786);
        match(AdaParser::REVERSE);
      }
      setState(1789);
      name(0);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1791);
      defining_identifier();
      setState(1792);
      match(AdaParser::COLON);
      setState(1793);
      subtype_indication();
      setState(1794);
      match(AdaParser::OF);
      setState(1796);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::REVERSE) {
        setState(1795);
        match(AdaParser::REVERSE);
      }
      setState(1798);
      name(0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Block_statementContext ------------------------------------------------------------------

AdaParser::Block_statementContext::Block_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Block_statementContext::BEGIN() {
  return getToken(AdaParser::BEGIN, 0);
}

AdaParser::Handled_sequence_of_statementsContext* AdaParser::Block_statementContext::handled_sequence_of_statements() {
  return getRuleContext<AdaParser::Handled_sequence_of_statementsContext>(0);
}

tree::TerminalNode* AdaParser::Block_statementContext::END() {
  return getToken(AdaParser::END, 0);
}

tree::TerminalNode* AdaParser::Block_statementContext::SEMI() {
  return getToken(AdaParser::SEMI, 0);
}

AdaParser::Direct_nameContext* AdaParser::Block_statementContext::direct_name() {
  return getRuleContext<AdaParser::Direct_nameContext>(0);
}

tree::TerminalNode* AdaParser::Block_statementContext::COLON() {
  return getToken(AdaParser::COLON, 0);
}

tree::TerminalNode* AdaParser::Block_statementContext::DECLARE() {
  return getToken(AdaParser::DECLARE, 0);
}

AdaParser::Declarative_partContext* AdaParser::Block_statementContext::declarative_part() {
  return getRuleContext<AdaParser::Declarative_partContext>(0);
}

AdaParser::IdentifierContext* AdaParser::Block_statementContext::identifier() {
  return getRuleContext<AdaParser::IdentifierContext>(0);
}


size_t AdaParser::Block_statementContext::getRuleIndex() const {
  return AdaParser::RuleBlock_statement;
}

void AdaParser::Block_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBlock_statement(this);
}

void AdaParser::Block_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBlock_statement(this);
}

AdaParser::Block_statementContext* AdaParser::block_statement() {
  Block_statementContext *_localctx = _tracker.createInstance<Block_statementContext>(_ctx, getState());
  enterRule(_localctx, 264, AdaParser::RuleBlock_statement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1805);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::IDENTIFIER_

    || _la == AdaParser::STRING_LITERAL_) {
      setState(1802);
      direct_name();
      setState(1803);
      match(AdaParser::COLON);
    }
    setState(1809);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::DECLARE) {
      setState(1807);
      match(AdaParser::DECLARE);
      setState(1808);
      declarative_part();
    }
    setState(1811);
    match(AdaParser::BEGIN);
    setState(1812);
    handled_sequence_of_statements();
    setState(1813);
    match(AdaParser::END);
    setState(1815);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::IDENTIFIER_) {
      setState(1814);
      identifier();
    }
    setState(1817);
    match(AdaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Exit_statementContext ------------------------------------------------------------------

AdaParser::Exit_statementContext::Exit_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Exit_statementContext::EXIT() {
  return getToken(AdaParser::EXIT, 0);
}

tree::TerminalNode* AdaParser::Exit_statementContext::SEMI() {
  return getToken(AdaParser::SEMI, 0);
}

AdaParser::NameContext* AdaParser::Exit_statementContext::name() {
  return getRuleContext<AdaParser::NameContext>(0);
}

tree::TerminalNode* AdaParser::Exit_statementContext::WHEN() {
  return getToken(AdaParser::WHEN, 0);
}

AdaParser::ConditionContext* AdaParser::Exit_statementContext::condition() {
  return getRuleContext<AdaParser::ConditionContext>(0);
}


size_t AdaParser::Exit_statementContext::getRuleIndex() const {
  return AdaParser::RuleExit_statement;
}

void AdaParser::Exit_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExit_statement(this);
}

void AdaParser::Exit_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExit_statement(this);
}

AdaParser::Exit_statementContext* AdaParser::exit_statement() {
  Exit_statementContext *_localctx = _tracker.createInstance<Exit_statementContext>(_ctx, getState());
  enterRule(_localctx, 266, AdaParser::RuleExit_statement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1819);
    match(AdaParser::EXIT);
    setState(1821);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 81) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 81)) & 1537) != 0)) {
      setState(1820);
      name(0);
    }
    setState(1825);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::WHEN) {
      setState(1823);
      match(AdaParser::WHEN);
      setState(1824);
      condition();
    }
    setState(1827);
    match(AdaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Goto_statementContext ------------------------------------------------------------------

AdaParser::Goto_statementContext::Goto_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Goto_statementContext::GOTO() {
  return getToken(AdaParser::GOTO, 0);
}

AdaParser::NameContext* AdaParser::Goto_statementContext::name() {
  return getRuleContext<AdaParser::NameContext>(0);
}


size_t AdaParser::Goto_statementContext::getRuleIndex() const {
  return AdaParser::RuleGoto_statement;
}

void AdaParser::Goto_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGoto_statement(this);
}

void AdaParser::Goto_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGoto_statement(this);
}

AdaParser::Goto_statementContext* AdaParser::goto_statement() {
  Goto_statementContext *_localctx = _tracker.createInstance<Goto_statementContext>(_ctx, getState());
  enterRule(_localctx, 268, AdaParser::RuleGoto_statement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1829);
    match(AdaParser::GOTO);
    setState(1830);
    name(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Subprogram_declarationContext ------------------------------------------------------------------

AdaParser::Subprogram_declarationContext::Subprogram_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Subprogram_specificationContext* AdaParser::Subprogram_declarationContext::subprogram_specification() {
  return getRuleContext<AdaParser::Subprogram_specificationContext>(0);
}

tree::TerminalNode* AdaParser::Subprogram_declarationContext::SEMI() {
  return getToken(AdaParser::SEMI, 0);
}

AdaParser::Overriding_indicatorContext* AdaParser::Subprogram_declarationContext::overriding_indicator() {
  return getRuleContext<AdaParser::Overriding_indicatorContext>(0);
}

AdaParser::Aspect_specificationContext* AdaParser::Subprogram_declarationContext::aspect_specification() {
  return getRuleContext<AdaParser::Aspect_specificationContext>(0);
}


size_t AdaParser::Subprogram_declarationContext::getRuleIndex() const {
  return AdaParser::RuleSubprogram_declaration;
}

void AdaParser::Subprogram_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubprogram_declaration(this);
}

void AdaParser::Subprogram_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubprogram_declaration(this);
}

AdaParser::Subprogram_declarationContext* AdaParser::subprogram_declaration() {
  Subprogram_declarationContext *_localctx = _tracker.createInstance<Subprogram_declarationContext>(_ctx, getState());
  enterRule(_localctx, 270, AdaParser::RuleSubprogram_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1833);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::NOT

    || _la == AdaParser::OVERRIDING) {
      setState(1832);
      overriding_indicator();
    }
    setState(1835);
    subprogram_specification();
    setState(1837);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::WITH) {
      setState(1836);
      aspect_specification();
    }
    setState(1839);
    match(AdaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Subprogram_specificationContext ------------------------------------------------------------------

AdaParser::Subprogram_specificationContext::Subprogram_specificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Procedure_specificationContext* AdaParser::Subprogram_specificationContext::procedure_specification() {
  return getRuleContext<AdaParser::Procedure_specificationContext>(0);
}

AdaParser::Function_specificationContext* AdaParser::Subprogram_specificationContext::function_specification() {
  return getRuleContext<AdaParser::Function_specificationContext>(0);
}


size_t AdaParser::Subprogram_specificationContext::getRuleIndex() const {
  return AdaParser::RuleSubprogram_specification;
}

void AdaParser::Subprogram_specificationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubprogram_specification(this);
}

void AdaParser::Subprogram_specificationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubprogram_specification(this);
}

AdaParser::Subprogram_specificationContext* AdaParser::subprogram_specification() {
  Subprogram_specificationContext *_localctx = _tracker.createInstance<Subprogram_specificationContext>(_ctx, getState());
  enterRule(_localctx, 272, AdaParser::RuleSubprogram_specification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1843);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AdaParser::PROCEDURE: {
        enterOuterAlt(_localctx, 1);
        setState(1841);
        procedure_specification();
        break;
      }

      case AdaParser::FUNCTION: {
        enterOuterAlt(_localctx, 2);
        setState(1842);
        function_specification();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Procedure_specificationContext ------------------------------------------------------------------

AdaParser::Procedure_specificationContext::Procedure_specificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Procedure_specificationContext::PROCEDURE() {
  return getToken(AdaParser::PROCEDURE, 0);
}

AdaParser::Defining_program_unit_nameContext* AdaParser::Procedure_specificationContext::defining_program_unit_name() {
  return getRuleContext<AdaParser::Defining_program_unit_nameContext>(0);
}

AdaParser::Formal_partContext* AdaParser::Procedure_specificationContext::formal_part() {
  return getRuleContext<AdaParser::Formal_partContext>(0);
}


size_t AdaParser::Procedure_specificationContext::getRuleIndex() const {
  return AdaParser::RuleProcedure_specification;
}

void AdaParser::Procedure_specificationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProcedure_specification(this);
}

void AdaParser::Procedure_specificationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProcedure_specification(this);
}

AdaParser::Procedure_specificationContext* AdaParser::procedure_specification() {
  Procedure_specificationContext *_localctx = _tracker.createInstance<Procedure_specificationContext>(_ctx, getState());
  enterRule(_localctx, 274, AdaParser::RuleProcedure_specification);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1845);
    match(AdaParser::PROCEDURE);
    setState(1846);
    defining_program_unit_name();
    setState(1848);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::LP) {
      setState(1847);
      formal_part();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Function_specificationContext ------------------------------------------------------------------

AdaParser::Function_specificationContext::Function_specificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Function_specificationContext::FUNCTION() {
  return getToken(AdaParser::FUNCTION, 0);
}

AdaParser::Defining_designatorContext* AdaParser::Function_specificationContext::defining_designator() {
  return getRuleContext<AdaParser::Defining_designatorContext>(0);
}

AdaParser::Parameter_and_result_profileContext* AdaParser::Function_specificationContext::parameter_and_result_profile() {
  return getRuleContext<AdaParser::Parameter_and_result_profileContext>(0);
}


size_t AdaParser::Function_specificationContext::getRuleIndex() const {
  return AdaParser::RuleFunction_specification;
}

void AdaParser::Function_specificationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunction_specification(this);
}

void AdaParser::Function_specificationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunction_specification(this);
}

AdaParser::Function_specificationContext* AdaParser::function_specification() {
  Function_specificationContext *_localctx = _tracker.createInstance<Function_specificationContext>(_ctx, getState());
  enterRule(_localctx, 276, AdaParser::RuleFunction_specification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1850);
    match(AdaParser::FUNCTION);
    setState(1851);
    defining_designator();
    setState(1852);
    parameter_and_result_profile();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DesignatorContext ------------------------------------------------------------------

AdaParser::DesignatorContext::DesignatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::IdentifierContext* AdaParser::DesignatorContext::identifier() {
  return getRuleContext<AdaParser::IdentifierContext>(0);
}

AdaParser::NameContext* AdaParser::DesignatorContext::name() {
  return getRuleContext<AdaParser::NameContext>(0);
}

tree::TerminalNode* AdaParser::DesignatorContext::DOT() {
  return getToken(AdaParser::DOT, 0);
}

AdaParser::Operator_symbolContext* AdaParser::DesignatorContext::operator_symbol() {
  return getRuleContext<AdaParser::Operator_symbolContext>(0);
}


size_t AdaParser::DesignatorContext::getRuleIndex() const {
  return AdaParser::RuleDesignator;
}

void AdaParser::DesignatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDesignator(this);
}

void AdaParser::DesignatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDesignator(this);
}

AdaParser::DesignatorContext* AdaParser::designator() {
  DesignatorContext *_localctx = _tracker.createInstance<DesignatorContext>(_ctx, getState());
  enterRule(_localctx, 278, AdaParser::RuleDesignator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1861);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 184, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1857);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 183, _ctx)) {
      case 1: {
        setState(1854);
        name(0);
        setState(1855);
        match(AdaParser::DOT);
        break;
      }

      default:
        break;
      }
      setState(1859);
      identifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1860);
      operator_symbol();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Defining_designatorContext ------------------------------------------------------------------

AdaParser::Defining_designatorContext::Defining_designatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Defining_program_unit_nameContext* AdaParser::Defining_designatorContext::defining_program_unit_name() {
  return getRuleContext<AdaParser::Defining_program_unit_nameContext>(0);
}

AdaParser::Defining_operator_symbolContext* AdaParser::Defining_designatorContext::defining_operator_symbol() {
  return getRuleContext<AdaParser::Defining_operator_symbolContext>(0);
}


size_t AdaParser::Defining_designatorContext::getRuleIndex() const {
  return AdaParser::RuleDefining_designator;
}

void AdaParser::Defining_designatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDefining_designator(this);
}

void AdaParser::Defining_designatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDefining_designator(this);
}

AdaParser::Defining_designatorContext* AdaParser::defining_designator() {
  Defining_designatorContext *_localctx = _tracker.createInstance<Defining_designatorContext>(_ctx, getState());
  enterRule(_localctx, 280, AdaParser::RuleDefining_designator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1865);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 185, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1863);
      defining_program_unit_name();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1864);
      defining_operator_symbol();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Defining_program_unit_nameContext ------------------------------------------------------------------

AdaParser::Defining_program_unit_nameContext::Defining_program_unit_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Defining_identifierContext* AdaParser::Defining_program_unit_nameContext::defining_identifier() {
  return getRuleContext<AdaParser::Defining_identifierContext>(0);
}

AdaParser::NameContext* AdaParser::Defining_program_unit_nameContext::name() {
  return getRuleContext<AdaParser::NameContext>(0);
}

tree::TerminalNode* AdaParser::Defining_program_unit_nameContext::DOT() {
  return getToken(AdaParser::DOT, 0);
}


size_t AdaParser::Defining_program_unit_nameContext::getRuleIndex() const {
  return AdaParser::RuleDefining_program_unit_name;
}

void AdaParser::Defining_program_unit_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDefining_program_unit_name(this);
}

void AdaParser::Defining_program_unit_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDefining_program_unit_name(this);
}

AdaParser::Defining_program_unit_nameContext* AdaParser::defining_program_unit_name() {
  Defining_program_unit_nameContext *_localctx = _tracker.createInstance<Defining_program_unit_nameContext>(_ctx, getState());
  enterRule(_localctx, 282, AdaParser::RuleDefining_program_unit_name);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1870);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 186, _ctx)) {
    case 1: {
      setState(1867);
      name(0);
      setState(1868);
      match(AdaParser::DOT);
      break;
    }

    default:
      break;
    }
    setState(1872);
    defining_identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Operator_symbolContext ------------------------------------------------------------------

AdaParser::Operator_symbolContext::Operator_symbolContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::String_literalContext* AdaParser::Operator_symbolContext::string_literal() {
  return getRuleContext<AdaParser::String_literalContext>(0);
}


size_t AdaParser::Operator_symbolContext::getRuleIndex() const {
  return AdaParser::RuleOperator_symbol;
}

void AdaParser::Operator_symbolContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOperator_symbol(this);
}

void AdaParser::Operator_symbolContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOperator_symbol(this);
}

AdaParser::Operator_symbolContext* AdaParser::operator_symbol() {
  Operator_symbolContext *_localctx = _tracker.createInstance<Operator_symbolContext>(_ctx, getState());
  enterRule(_localctx, 284, AdaParser::RuleOperator_symbol);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1874);
    string_literal();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Defining_operator_symbolContext ------------------------------------------------------------------

AdaParser::Defining_operator_symbolContext::Defining_operator_symbolContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Operator_symbolContext* AdaParser::Defining_operator_symbolContext::operator_symbol() {
  return getRuleContext<AdaParser::Operator_symbolContext>(0);
}


size_t AdaParser::Defining_operator_symbolContext::getRuleIndex() const {
  return AdaParser::RuleDefining_operator_symbol;
}

void AdaParser::Defining_operator_symbolContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDefining_operator_symbol(this);
}

void AdaParser::Defining_operator_symbolContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDefining_operator_symbol(this);
}

AdaParser::Defining_operator_symbolContext* AdaParser::defining_operator_symbol() {
  Defining_operator_symbolContext *_localctx = _tracker.createInstance<Defining_operator_symbolContext>(_ctx, getState());
  enterRule(_localctx, 286, AdaParser::RuleDefining_operator_symbol);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1876);
    operator_symbol();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Parameter_and_result_profileContext ------------------------------------------------------------------

AdaParser::Parameter_and_result_profileContext::Parameter_and_result_profileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Parameter_and_result_profileContext::RETURN() {
  return getToken(AdaParser::RETURN, 0);
}

AdaParser::Subtype_markContext* AdaParser::Parameter_and_result_profileContext::subtype_mark() {
  return getRuleContext<AdaParser::Subtype_markContext>(0);
}

AdaParser::Formal_partContext* AdaParser::Parameter_and_result_profileContext::formal_part() {
  return getRuleContext<AdaParser::Formal_partContext>(0);
}

AdaParser::Null_exclusionContext* AdaParser::Parameter_and_result_profileContext::null_exclusion() {
  return getRuleContext<AdaParser::Null_exclusionContext>(0);
}

AdaParser::Access_definitionContext* AdaParser::Parameter_and_result_profileContext::access_definition() {
  return getRuleContext<AdaParser::Access_definitionContext>(0);
}


size_t AdaParser::Parameter_and_result_profileContext::getRuleIndex() const {
  return AdaParser::RuleParameter_and_result_profile;
}

void AdaParser::Parameter_and_result_profileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParameter_and_result_profile(this);
}

void AdaParser::Parameter_and_result_profileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParameter_and_result_profile(this);
}

AdaParser::Parameter_and_result_profileContext* AdaParser::parameter_and_result_profile() {
  Parameter_and_result_profileContext *_localctx = _tracker.createInstance<Parameter_and_result_profileContext>(_ctx, getState());
  enterRule(_localctx, 288, AdaParser::RuleParameter_and_result_profile);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1891);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 190, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1879);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::LP) {
        setState(1878);
        formal_part();
      }
      setState(1881);
      match(AdaParser::RETURN);
      setState(1883);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::NOT) {
        setState(1882);
        null_exclusion();
      }
      setState(1885);
      subtype_mark();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1887);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::LP) {
        setState(1886);
        formal_part();
      }
      setState(1889);
      match(AdaParser::RETURN);
      setState(1890);
      access_definition();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Formal_partContext ------------------------------------------------------------------

AdaParser::Formal_partContext::Formal_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Formal_partContext::LP() {
  return getToken(AdaParser::LP, 0);
}

std::vector<AdaParser::Parameter_specificationContext *> AdaParser::Formal_partContext::parameter_specification() {
  return getRuleContexts<AdaParser::Parameter_specificationContext>();
}

AdaParser::Parameter_specificationContext* AdaParser::Formal_partContext::parameter_specification(size_t i) {
  return getRuleContext<AdaParser::Parameter_specificationContext>(i);
}

tree::TerminalNode* AdaParser::Formal_partContext::RP() {
  return getToken(AdaParser::RP, 0);
}

std::vector<tree::TerminalNode *> AdaParser::Formal_partContext::SEMI() {
  return getTokens(AdaParser::SEMI);
}

tree::TerminalNode* AdaParser::Formal_partContext::SEMI(size_t i) {
  return getToken(AdaParser::SEMI, i);
}


size_t AdaParser::Formal_partContext::getRuleIndex() const {
  return AdaParser::RuleFormal_part;
}

void AdaParser::Formal_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFormal_part(this);
}

void AdaParser::Formal_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFormal_part(this);
}

AdaParser::Formal_partContext* AdaParser::formal_part() {
  Formal_partContext *_localctx = _tracker.createInstance<Formal_partContext>(_ctx, getState());
  enterRule(_localctx, 290, AdaParser::RuleFormal_part);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1893);
    match(AdaParser::LP);
    setState(1894);
    parameter_specification();
    setState(1899);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == AdaParser::SEMI) {
      setState(1895);
      match(AdaParser::SEMI);
      setState(1896);
      parameter_specification();
      setState(1901);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1902);
    match(AdaParser::RP);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Parameter_specificationContext ------------------------------------------------------------------

AdaParser::Parameter_specificationContext::Parameter_specificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Defining_identifier_listContext* AdaParser::Parameter_specificationContext::defining_identifier_list() {
  return getRuleContext<AdaParser::Defining_identifier_listContext>(0);
}

tree::TerminalNode* AdaParser::Parameter_specificationContext::COLON() {
  return getToken(AdaParser::COLON, 0);
}

AdaParser::Mode_Context* AdaParser::Parameter_specificationContext::mode_() {
  return getRuleContext<AdaParser::Mode_Context>(0);
}

AdaParser::Subtype_markContext* AdaParser::Parameter_specificationContext::subtype_mark() {
  return getRuleContext<AdaParser::Subtype_markContext>(0);
}

tree::TerminalNode* AdaParser::Parameter_specificationContext::ALIASED() {
  return getToken(AdaParser::ALIASED, 0);
}

AdaParser::Null_exclusionContext* AdaParser::Parameter_specificationContext::null_exclusion() {
  return getRuleContext<AdaParser::Null_exclusionContext>(0);
}

tree::TerminalNode* AdaParser::Parameter_specificationContext::ASSIGN() {
  return getToken(AdaParser::ASSIGN, 0);
}

AdaParser::Default_expressionContext* AdaParser::Parameter_specificationContext::default_expression() {
  return getRuleContext<AdaParser::Default_expressionContext>(0);
}

AdaParser::Access_definitionContext* AdaParser::Parameter_specificationContext::access_definition() {
  return getRuleContext<AdaParser::Access_definitionContext>(0);
}


size_t AdaParser::Parameter_specificationContext::getRuleIndex() const {
  return AdaParser::RuleParameter_specification;
}

void AdaParser::Parameter_specificationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParameter_specification(this);
}

void AdaParser::Parameter_specificationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParameter_specification(this);
}

AdaParser::Parameter_specificationContext* AdaParser::parameter_specification() {
  Parameter_specificationContext *_localctx = _tracker.createInstance<Parameter_specificationContext>(_ctx, getState());
  enterRule(_localctx, 292, AdaParser::RuleParameter_specification);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1925);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 196, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1904);
      defining_identifier_list();
      setState(1905);
      match(AdaParser::COLON);
      setState(1907);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::ALIASED) {
        setState(1906);
        match(AdaParser::ALIASED);
      }
      setState(1909);
      mode_();
      setState(1911);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::NOT) {
        setState(1910);
        null_exclusion();
      }
      setState(1913);
      subtype_mark();
      setState(1916);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::ASSIGN) {
        setState(1914);
        match(AdaParser::ASSIGN);
        setState(1915);
        default_expression();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1918);
      defining_identifier_list();
      setState(1919);
      match(AdaParser::COLON);
      setState(1920);
      access_definition();
      setState(1923);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::ASSIGN) {
        setState(1921);
        match(AdaParser::ASSIGN);
        setState(1922);
        default_expression();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Mode_Context ------------------------------------------------------------------

AdaParser::Mode_Context::Mode_Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Mode_Context::IN() {
  return getToken(AdaParser::IN, 0);
}

tree::TerminalNode* AdaParser::Mode_Context::OUT() {
  return getToken(AdaParser::OUT, 0);
}


size_t AdaParser::Mode_Context::getRuleIndex() const {
  return AdaParser::RuleMode_;
}

void AdaParser::Mode_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMode_(this);
}

void AdaParser::Mode_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMode_(this);
}

AdaParser::Mode_Context* AdaParser::mode_() {
  Mode_Context *_localctx = _tracker.createInstance<Mode_Context>(_ctx, getState());
  enterRule(_localctx, 294, AdaParser::RuleMode_);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1928);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::IN) {
      setState(1927);
      match(AdaParser::IN);
    }
    setState(1931);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::OUT) {
      setState(1930);
      match(AdaParser::OUT);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Subprogram_bodyContext ------------------------------------------------------------------

AdaParser::Subprogram_bodyContext::Subprogram_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Subprogram_specificationContext* AdaParser::Subprogram_bodyContext::subprogram_specification() {
  return getRuleContext<AdaParser::Subprogram_specificationContext>(0);
}

tree::TerminalNode* AdaParser::Subprogram_bodyContext::IS() {
  return getToken(AdaParser::IS, 0);
}

AdaParser::Declarative_partContext* AdaParser::Subprogram_bodyContext::declarative_part() {
  return getRuleContext<AdaParser::Declarative_partContext>(0);
}

tree::TerminalNode* AdaParser::Subprogram_bodyContext::BEGIN() {
  return getToken(AdaParser::BEGIN, 0);
}

AdaParser::Handled_sequence_of_statementsContext* AdaParser::Subprogram_bodyContext::handled_sequence_of_statements() {
  return getRuleContext<AdaParser::Handled_sequence_of_statementsContext>(0);
}

tree::TerminalNode* AdaParser::Subprogram_bodyContext::END() {
  return getToken(AdaParser::END, 0);
}

tree::TerminalNode* AdaParser::Subprogram_bodyContext::SEMI() {
  return getToken(AdaParser::SEMI, 0);
}

AdaParser::Overriding_indicatorContext* AdaParser::Subprogram_bodyContext::overriding_indicator() {
  return getRuleContext<AdaParser::Overriding_indicatorContext>(0);
}

AdaParser::Aspect_specificationContext* AdaParser::Subprogram_bodyContext::aspect_specification() {
  return getRuleContext<AdaParser::Aspect_specificationContext>(0);
}

AdaParser::DesignatorContext* AdaParser::Subprogram_bodyContext::designator() {
  return getRuleContext<AdaParser::DesignatorContext>(0);
}


size_t AdaParser::Subprogram_bodyContext::getRuleIndex() const {
  return AdaParser::RuleSubprogram_body;
}

void AdaParser::Subprogram_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubprogram_body(this);
}

void AdaParser::Subprogram_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubprogram_body(this);
}

AdaParser::Subprogram_bodyContext* AdaParser::subprogram_body() {
  Subprogram_bodyContext *_localctx = _tracker.createInstance<Subprogram_bodyContext>(_ctx, getState());
  enterRule(_localctx, 296, AdaParser::RuleSubprogram_body);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1934);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::NOT

    || _la == AdaParser::OVERRIDING) {
      setState(1933);
      overriding_indicator();
    }
    setState(1936);
    subprogram_specification();
    setState(1938);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::WITH) {
      setState(1937);
      aspect_specification();
    }
    setState(1940);
    match(AdaParser::IS);
    setState(1941);
    declarative_part();
    setState(1942);
    match(AdaParser::BEGIN);
    setState(1943);
    handled_sequence_of_statements();
    setState(1944);
    match(AdaParser::END);
    setState(1946);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 81) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 81)) & 1537) != 0)) {
      setState(1945);
      designator();
    }
    setState(1948);
    match(AdaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Procedure_call_statementContext ------------------------------------------------------------------

AdaParser::Procedure_call_statementContext::Procedure_call_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::NameContext* AdaParser::Procedure_call_statementContext::name() {
  return getRuleContext<AdaParser::NameContext>(0);
}

AdaParser::Actual_parameter_partContext* AdaParser::Procedure_call_statementContext::actual_parameter_part() {
  return getRuleContext<AdaParser::Actual_parameter_partContext>(0);
}

tree::TerminalNode* AdaParser::Procedure_call_statementContext::SEMI() {
  return getToken(AdaParser::SEMI, 0);
}


size_t AdaParser::Procedure_call_statementContext::getRuleIndex() const {
  return AdaParser::RuleProcedure_call_statement;
}

void AdaParser::Procedure_call_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProcedure_call_statement(this);
}

void AdaParser::Procedure_call_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProcedure_call_statement(this);
}

AdaParser::Procedure_call_statementContext* AdaParser::procedure_call_statement() {
  Procedure_call_statementContext *_localctx = _tracker.createInstance<Procedure_call_statementContext>(_ctx, getState());
  enterRule(_localctx, 298, AdaParser::RuleProcedure_call_statement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1955);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 202, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1950);
      name(0);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1951);
      name(0);
      setState(1952);
      actual_parameter_part();
      setState(1953);
      match(AdaParser::SEMI);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Actual_parameter_partContext ------------------------------------------------------------------

AdaParser::Actual_parameter_partContext::Actual_parameter_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Actual_parameter_partContext::LP() {
  return getToken(AdaParser::LP, 0);
}

std::vector<AdaParser::Parameter_associationContext *> AdaParser::Actual_parameter_partContext::parameter_association() {
  return getRuleContexts<AdaParser::Parameter_associationContext>();
}

AdaParser::Parameter_associationContext* AdaParser::Actual_parameter_partContext::parameter_association(size_t i) {
  return getRuleContext<AdaParser::Parameter_associationContext>(i);
}

tree::TerminalNode* AdaParser::Actual_parameter_partContext::RP() {
  return getToken(AdaParser::RP, 0);
}

std::vector<tree::TerminalNode *> AdaParser::Actual_parameter_partContext::COMMA() {
  return getTokens(AdaParser::COMMA);
}

tree::TerminalNode* AdaParser::Actual_parameter_partContext::COMMA(size_t i) {
  return getToken(AdaParser::COMMA, i);
}


size_t AdaParser::Actual_parameter_partContext::getRuleIndex() const {
  return AdaParser::RuleActual_parameter_part;
}

void AdaParser::Actual_parameter_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterActual_parameter_part(this);
}

void AdaParser::Actual_parameter_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitActual_parameter_part(this);
}

AdaParser::Actual_parameter_partContext* AdaParser::actual_parameter_part() {
  Actual_parameter_partContext *_localctx = _tracker.createInstance<Actual_parameter_partContext>(_ctx, getState());
  enterRule(_localctx, 300, AdaParser::RuleActual_parameter_part);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1957);
    match(AdaParser::LP);
    setState(1958);
    parameter_association();
    setState(1963);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == AdaParser::COMMA) {
      setState(1959);
      match(AdaParser::COMMA);
      setState(1960);
      parameter_association();
      setState(1965);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1966);
    match(AdaParser::RP);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Parameter_associationContext ------------------------------------------------------------------

AdaParser::Parameter_associationContext::Parameter_associationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Explicit_actual_parameterContext* AdaParser::Parameter_associationContext::explicit_actual_parameter() {
  return getRuleContext<AdaParser::Explicit_actual_parameterContext>(0);
}

AdaParser::Selector_nameContext* AdaParser::Parameter_associationContext::selector_name() {
  return getRuleContext<AdaParser::Selector_nameContext>(0);
}

tree::TerminalNode* AdaParser::Parameter_associationContext::ARROW() {
  return getToken(AdaParser::ARROW, 0);
}


size_t AdaParser::Parameter_associationContext::getRuleIndex() const {
  return AdaParser::RuleParameter_association;
}

void AdaParser::Parameter_associationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParameter_association(this);
}

void AdaParser::Parameter_associationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParameter_association(this);
}

AdaParser::Parameter_associationContext* AdaParser::parameter_association() {
  Parameter_associationContext *_localctx = _tracker.createInstance<Parameter_associationContext>(_ctx, getState());
  enterRule(_localctx, 302, AdaParser::RuleParameter_association);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1971);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 204, _ctx)) {
    case 1: {
      setState(1968);
      selector_name();
      setState(1969);
      match(AdaParser::ARROW);
      break;
    }

    default:
      break;
    }
    setState(1973);
    explicit_actual_parameter();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Explicit_actual_parameterContext ------------------------------------------------------------------

AdaParser::Explicit_actual_parameterContext::Explicit_actual_parameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::ExpressionContext* AdaParser::Explicit_actual_parameterContext::expression() {
  return getRuleContext<AdaParser::ExpressionContext>(0);
}

AdaParser::NameContext* AdaParser::Explicit_actual_parameterContext::name() {
  return getRuleContext<AdaParser::NameContext>(0);
}


size_t AdaParser::Explicit_actual_parameterContext::getRuleIndex() const {
  return AdaParser::RuleExplicit_actual_parameter;
}

void AdaParser::Explicit_actual_parameterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExplicit_actual_parameter(this);
}

void AdaParser::Explicit_actual_parameterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExplicit_actual_parameter(this);
}

AdaParser::Explicit_actual_parameterContext* AdaParser::explicit_actual_parameter() {
  Explicit_actual_parameterContext *_localctx = _tracker.createInstance<Explicit_actual_parameterContext>(_ctx, getState());
  enterRule(_localctx, 304, AdaParser::RuleExplicit_actual_parameter);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1977);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 205, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1975);
      expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1976);
      name(0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Simple_return_statementContext ------------------------------------------------------------------

AdaParser::Simple_return_statementContext::Simple_return_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Simple_return_statementContext::RETURN() {
  return getToken(AdaParser::RETURN, 0);
}

tree::TerminalNode* AdaParser::Simple_return_statementContext::SEMI() {
  return getToken(AdaParser::SEMI, 0);
}

AdaParser::ExpressionContext* AdaParser::Simple_return_statementContext::expression() {
  return getRuleContext<AdaParser::ExpressionContext>(0);
}


size_t AdaParser::Simple_return_statementContext::getRuleIndex() const {
  return AdaParser::RuleSimple_return_statement;
}

void AdaParser::Simple_return_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimple_return_statement(this);
}

void AdaParser::Simple_return_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimple_return_statement(this);
}

AdaParser::Simple_return_statementContext* AdaParser::simple_return_statement() {
  Simple_return_statementContext *_localctx = _tracker.createInstance<Simple_return_statementContext>(_ctx, getState());
  enterRule(_localctx, 306, AdaParser::RuleSimple_return_statement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1979);
    match(AdaParser::RETURN);
    setState(1981);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 962072674308) != 0) || ((((_la - 81) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 81)) & 337411) != 0)) {
      setState(1980);
      expression();
    }
    setState(1983);
    match(AdaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Extended_return_object_declarationContext ------------------------------------------------------------------

AdaParser::Extended_return_object_declarationContext::Extended_return_object_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Defining_identifierContext* AdaParser::Extended_return_object_declarationContext::defining_identifier() {
  return getRuleContext<AdaParser::Defining_identifierContext>(0);
}

tree::TerminalNode* AdaParser::Extended_return_object_declarationContext::COLON() {
  return getToken(AdaParser::COLON, 0);
}

AdaParser::Return_subtype_indicationContext* AdaParser::Extended_return_object_declarationContext::return_subtype_indication() {
  return getRuleContext<AdaParser::Return_subtype_indicationContext>(0);
}

tree::TerminalNode* AdaParser::Extended_return_object_declarationContext::ALIASED() {
  return getToken(AdaParser::ALIASED, 0);
}

tree::TerminalNode* AdaParser::Extended_return_object_declarationContext::CONSTANT() {
  return getToken(AdaParser::CONSTANT, 0);
}

tree::TerminalNode* AdaParser::Extended_return_object_declarationContext::ASSIGN() {
  return getToken(AdaParser::ASSIGN, 0);
}

AdaParser::ExpressionContext* AdaParser::Extended_return_object_declarationContext::expression() {
  return getRuleContext<AdaParser::ExpressionContext>(0);
}


size_t AdaParser::Extended_return_object_declarationContext::getRuleIndex() const {
  return AdaParser::RuleExtended_return_object_declaration;
}

void AdaParser::Extended_return_object_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExtended_return_object_declaration(this);
}

void AdaParser::Extended_return_object_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExtended_return_object_declaration(this);
}

AdaParser::Extended_return_object_declarationContext* AdaParser::extended_return_object_declaration() {
  Extended_return_object_declarationContext *_localctx = _tracker.createInstance<Extended_return_object_declarationContext>(_ctx, getState());
  enterRule(_localctx, 308, AdaParser::RuleExtended_return_object_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1985);
    defining_identifier();
    setState(1986);
    match(AdaParser::COLON);
    setState(1988);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::ALIASED) {
      setState(1987);
      match(AdaParser::ALIASED);
    }
    setState(1991);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::CONSTANT) {
      setState(1990);
      match(AdaParser::CONSTANT);
    }
    setState(1993);
    return_subtype_indication();
    setState(1996);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::ASSIGN) {
      setState(1994);
      match(AdaParser::ASSIGN);
      setState(1995);
      expression();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Extended_return_statementContext ------------------------------------------------------------------

AdaParser::Extended_return_statementContext::Extended_return_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> AdaParser::Extended_return_statementContext::RETURN() {
  return getTokens(AdaParser::RETURN);
}

tree::TerminalNode* AdaParser::Extended_return_statementContext::RETURN(size_t i) {
  return getToken(AdaParser::RETURN, i);
}

AdaParser::Extended_return_object_declarationContext* AdaParser::Extended_return_statementContext::extended_return_object_declaration() {
  return getRuleContext<AdaParser::Extended_return_object_declarationContext>(0);
}

tree::TerminalNode* AdaParser::Extended_return_statementContext::SEMI() {
  return getToken(AdaParser::SEMI, 0);
}

tree::TerminalNode* AdaParser::Extended_return_statementContext::DO() {
  return getToken(AdaParser::DO, 0);
}

AdaParser::Handled_sequence_of_statementsContext* AdaParser::Extended_return_statementContext::handled_sequence_of_statements() {
  return getRuleContext<AdaParser::Handled_sequence_of_statementsContext>(0);
}

tree::TerminalNode* AdaParser::Extended_return_statementContext::END() {
  return getToken(AdaParser::END, 0);
}


size_t AdaParser::Extended_return_statementContext::getRuleIndex() const {
  return AdaParser::RuleExtended_return_statement;
}

void AdaParser::Extended_return_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExtended_return_statement(this);
}

void AdaParser::Extended_return_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExtended_return_statement(this);
}

AdaParser::Extended_return_statementContext* AdaParser::extended_return_statement() {
  Extended_return_statementContext *_localctx = _tracker.createInstance<Extended_return_statementContext>(_ctx, getState());
  enterRule(_localctx, 310, AdaParser::RuleExtended_return_statement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1998);
    match(AdaParser::RETURN);
    setState(1999);
    extended_return_object_declaration();
    setState(2005);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::DO) {
      setState(2000);
      match(AdaParser::DO);
      setState(2001);
      handled_sequence_of_statements();
      setState(2002);
      match(AdaParser::END);
      setState(2003);
      match(AdaParser::RETURN);
    }
    setState(2007);
    match(AdaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Return_subtype_indicationContext ------------------------------------------------------------------

AdaParser::Return_subtype_indicationContext::Return_subtype_indicationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Subtype_indicationContext* AdaParser::Return_subtype_indicationContext::subtype_indication() {
  return getRuleContext<AdaParser::Subtype_indicationContext>(0);
}

AdaParser::Access_definitionContext* AdaParser::Return_subtype_indicationContext::access_definition() {
  return getRuleContext<AdaParser::Access_definitionContext>(0);
}


size_t AdaParser::Return_subtype_indicationContext::getRuleIndex() const {
  return AdaParser::RuleReturn_subtype_indication;
}

void AdaParser::Return_subtype_indicationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReturn_subtype_indication(this);
}

void AdaParser::Return_subtype_indicationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReturn_subtype_indication(this);
}

AdaParser::Return_subtype_indicationContext* AdaParser::return_subtype_indication() {
  Return_subtype_indicationContext *_localctx = _tracker.createInstance<Return_subtype_indicationContext>(_ctx, getState());
  enterRule(_localctx, 312, AdaParser::RuleReturn_subtype_indication);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2011);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 211, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2009);
      subtype_indication();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2010);
      access_definition();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Null_procedure_declarationContext ------------------------------------------------------------------

AdaParser::Null_procedure_declarationContext::Null_procedure_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Procedure_specificationContext* AdaParser::Null_procedure_declarationContext::procedure_specification() {
  return getRuleContext<AdaParser::Procedure_specificationContext>(0);
}

tree::TerminalNode* AdaParser::Null_procedure_declarationContext::IS() {
  return getToken(AdaParser::IS, 0);
}

tree::TerminalNode* AdaParser::Null_procedure_declarationContext::NULL_() {
  return getToken(AdaParser::NULL_, 0);
}

tree::TerminalNode* AdaParser::Null_procedure_declarationContext::SEMI() {
  return getToken(AdaParser::SEMI, 0);
}

AdaParser::Overriding_indicatorContext* AdaParser::Null_procedure_declarationContext::overriding_indicator() {
  return getRuleContext<AdaParser::Overriding_indicatorContext>(0);
}

AdaParser::Aspect_specificationContext* AdaParser::Null_procedure_declarationContext::aspect_specification() {
  return getRuleContext<AdaParser::Aspect_specificationContext>(0);
}


size_t AdaParser::Null_procedure_declarationContext::getRuleIndex() const {
  return AdaParser::RuleNull_procedure_declaration;
}

void AdaParser::Null_procedure_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNull_procedure_declaration(this);
}

void AdaParser::Null_procedure_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNull_procedure_declaration(this);
}

AdaParser::Null_procedure_declarationContext* AdaParser::null_procedure_declaration() {
  Null_procedure_declarationContext *_localctx = _tracker.createInstance<Null_procedure_declarationContext>(_ctx, getState());
  enterRule(_localctx, 314, AdaParser::RuleNull_procedure_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2014);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::NOT

    || _la == AdaParser::OVERRIDING) {
      setState(2013);
      overriding_indicator();
    }
    setState(2016);
    procedure_specification();
    setState(2017);
    match(AdaParser::IS);
    setState(2018);
    match(AdaParser::NULL_);
    setState(2020);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::WITH) {
      setState(2019);
      aspect_specification();
    }
    setState(2022);
    match(AdaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expression_function_declarationContext ------------------------------------------------------------------

AdaParser::Expression_function_declarationContext::Expression_function_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Function_specificationContext* AdaParser::Expression_function_declarationContext::function_specification() {
  return getRuleContext<AdaParser::Function_specificationContext>(0);
}

tree::TerminalNode* AdaParser::Expression_function_declarationContext::IS() {
  return getToken(AdaParser::IS, 0);
}

tree::TerminalNode* AdaParser::Expression_function_declarationContext::LP() {
  return getToken(AdaParser::LP, 0);
}

AdaParser::ExpressionContext* AdaParser::Expression_function_declarationContext::expression() {
  return getRuleContext<AdaParser::ExpressionContext>(0);
}

tree::TerminalNode* AdaParser::Expression_function_declarationContext::RP() {
  return getToken(AdaParser::RP, 0);
}

tree::TerminalNode* AdaParser::Expression_function_declarationContext::SEMI() {
  return getToken(AdaParser::SEMI, 0);
}

AdaParser::Overriding_indicatorContext* AdaParser::Expression_function_declarationContext::overriding_indicator() {
  return getRuleContext<AdaParser::Overriding_indicatorContext>(0);
}

AdaParser::Aspect_specificationContext* AdaParser::Expression_function_declarationContext::aspect_specification() {
  return getRuleContext<AdaParser::Aspect_specificationContext>(0);
}


size_t AdaParser::Expression_function_declarationContext::getRuleIndex() const {
  return AdaParser::RuleExpression_function_declaration;
}

void AdaParser::Expression_function_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpression_function_declaration(this);
}

void AdaParser::Expression_function_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpression_function_declaration(this);
}

AdaParser::Expression_function_declarationContext* AdaParser::expression_function_declaration() {
  Expression_function_declarationContext *_localctx = _tracker.createInstance<Expression_function_declarationContext>(_ctx, getState());
  enterRule(_localctx, 316, AdaParser::RuleExpression_function_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2025);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::NOT

    || _la == AdaParser::OVERRIDING) {
      setState(2024);
      overriding_indicator();
    }
    setState(2027);
    function_specification();
    setState(2028);
    match(AdaParser::IS);
    setState(2029);
    match(AdaParser::LP);
    setState(2030);
    expression();
    setState(2031);
    match(AdaParser::RP);
    setState(2033);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::WITH) {
      setState(2032);
      aspect_specification();
    }
    setState(2035);
    match(AdaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Package_declarationContext ------------------------------------------------------------------

AdaParser::Package_declarationContext::Package_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Package_specificationContext* AdaParser::Package_declarationContext::package_specification() {
  return getRuleContext<AdaParser::Package_specificationContext>(0);
}

tree::TerminalNode* AdaParser::Package_declarationContext::SEMI() {
  return getToken(AdaParser::SEMI, 0);
}


size_t AdaParser::Package_declarationContext::getRuleIndex() const {
  return AdaParser::RulePackage_declaration;
}

void AdaParser::Package_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPackage_declaration(this);
}

void AdaParser::Package_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPackage_declaration(this);
}

AdaParser::Package_declarationContext* AdaParser::package_declaration() {
  Package_declarationContext *_localctx = _tracker.createInstance<Package_declarationContext>(_ctx, getState());
  enterRule(_localctx, 318, AdaParser::RulePackage_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2037);
    package_specification();
    setState(2038);
    match(AdaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Package_specificationContext ------------------------------------------------------------------

AdaParser::Package_specificationContext::Package_specificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Package_specificationContext::PACKAGE() {
  return getToken(AdaParser::PACKAGE, 0);
}

AdaParser::Defining_program_unit_nameContext* AdaParser::Package_specificationContext::defining_program_unit_name() {
  return getRuleContext<AdaParser::Defining_program_unit_nameContext>(0);
}

tree::TerminalNode* AdaParser::Package_specificationContext::IS() {
  return getToken(AdaParser::IS, 0);
}

tree::TerminalNode* AdaParser::Package_specificationContext::END() {
  return getToken(AdaParser::END, 0);
}

AdaParser::Aspect_specificationContext* AdaParser::Package_specificationContext::aspect_specification() {
  return getRuleContext<AdaParser::Aspect_specificationContext>(0);
}

std::vector<AdaParser::Basic_declarative_itemContext *> AdaParser::Package_specificationContext::basic_declarative_item() {
  return getRuleContexts<AdaParser::Basic_declarative_itemContext>();
}

AdaParser::Basic_declarative_itemContext* AdaParser::Package_specificationContext::basic_declarative_item(size_t i) {
  return getRuleContext<AdaParser::Basic_declarative_itemContext>(i);
}

tree::TerminalNode* AdaParser::Package_specificationContext::PRIVATE() {
  return getToken(AdaParser::PRIVATE, 0);
}

AdaParser::IdentifierContext* AdaParser::Package_specificationContext::identifier() {
  return getRuleContext<AdaParser::IdentifierContext>(0);
}

AdaParser::NameContext* AdaParser::Package_specificationContext::name() {
  return getRuleContext<AdaParser::NameContext>(0);
}

tree::TerminalNode* AdaParser::Package_specificationContext::DOT() {
  return getToken(AdaParser::DOT, 0);
}


size_t AdaParser::Package_specificationContext::getRuleIndex() const {
  return AdaParser::RulePackage_specification;
}

void AdaParser::Package_specificationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPackage_specification(this);
}

void AdaParser::Package_specificationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPackage_specification(this);
}

AdaParser::Package_specificationContext* AdaParser::package_specification() {
  Package_specificationContext *_localctx = _tracker.createInstance<Package_specificationContext>(_ctx, getState());
  enterRule(_localctx, 320, AdaParser::RulePackage_specification);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2040);
    match(AdaParser::PACKAGE);
    setState(2041);
    defining_program_unit_name();
    setState(2043);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::WITH) {
      setState(2042);
      aspect_specification();
    }
    setState(2045);
    match(AdaParser::IS);
    setState(2049);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 26) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 26)) & 36040101386260487) != 0)) {
      setState(2046);
      basic_declarative_item();
      setState(2051);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2059);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::PRIVATE) {
      setState(2052);
      match(AdaParser::PRIVATE);
      setState(2056);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (((((_la - 26) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 26)) & 36040101386260487) != 0)) {
        setState(2053);
        basic_declarative_item();
        setState(2058);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(2061);
    match(AdaParser::END);
    setState(2068);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 81) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 81)) & 1537) != 0)) {
      setState(2065);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 220, _ctx)) {
      case 1: {
        setState(2062);
        name(0);
        setState(2063);
        match(AdaParser::DOT);
        break;
      }

      default:
        break;
      }
      setState(2067);
      identifier();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Package_bodyContext ------------------------------------------------------------------

AdaParser::Package_bodyContext::Package_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Package_bodyContext::PACKAGE() {
  return getToken(AdaParser::PACKAGE, 0);
}

tree::TerminalNode* AdaParser::Package_bodyContext::BODY_() {
  return getToken(AdaParser::BODY_, 0);
}

AdaParser::Defining_program_unit_nameContext* AdaParser::Package_bodyContext::defining_program_unit_name() {
  return getRuleContext<AdaParser::Defining_program_unit_nameContext>(0);
}

tree::TerminalNode* AdaParser::Package_bodyContext::IS() {
  return getToken(AdaParser::IS, 0);
}

AdaParser::Declarative_partContext* AdaParser::Package_bodyContext::declarative_part() {
  return getRuleContext<AdaParser::Declarative_partContext>(0);
}

tree::TerminalNode* AdaParser::Package_bodyContext::END() {
  return getToken(AdaParser::END, 0);
}

tree::TerminalNode* AdaParser::Package_bodyContext::SEMI() {
  return getToken(AdaParser::SEMI, 0);
}

AdaParser::Aspect_specificationContext* AdaParser::Package_bodyContext::aspect_specification() {
  return getRuleContext<AdaParser::Aspect_specificationContext>(0);
}

tree::TerminalNode* AdaParser::Package_bodyContext::BEGIN() {
  return getToken(AdaParser::BEGIN, 0);
}

AdaParser::Handled_sequence_of_statementsContext* AdaParser::Package_bodyContext::handled_sequence_of_statements() {
  return getRuleContext<AdaParser::Handled_sequence_of_statementsContext>(0);
}

AdaParser::IdentifierContext* AdaParser::Package_bodyContext::identifier() {
  return getRuleContext<AdaParser::IdentifierContext>(0);
}

AdaParser::NameContext* AdaParser::Package_bodyContext::name() {
  return getRuleContext<AdaParser::NameContext>(0);
}

tree::TerminalNode* AdaParser::Package_bodyContext::DOT() {
  return getToken(AdaParser::DOT, 0);
}


size_t AdaParser::Package_bodyContext::getRuleIndex() const {
  return AdaParser::RulePackage_body;
}

void AdaParser::Package_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPackage_body(this);
}

void AdaParser::Package_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPackage_body(this);
}

AdaParser::Package_bodyContext* AdaParser::package_body() {
  Package_bodyContext *_localctx = _tracker.createInstance<Package_bodyContext>(_ctx, getState());
  enterRule(_localctx, 322, AdaParser::RulePackage_body);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2070);
    match(AdaParser::PACKAGE);
    setState(2071);
    match(AdaParser::BODY_);
    setState(2072);
    defining_program_unit_name();
    setState(2074);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::WITH) {
      setState(2073);
      aspect_specification();
    }
    setState(2076);
    match(AdaParser::IS);
    setState(2077);
    declarative_part();
    setState(2080);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::BEGIN) {
      setState(2078);
      match(AdaParser::BEGIN);
      setState(2079);
      handled_sequence_of_statements();
    }
    setState(2082);
    match(AdaParser::END);
    setState(2089);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 81) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 81)) & 1537) != 0)) {
      setState(2086);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 224, _ctx)) {
      case 1: {
        setState(2083);
        name(0);
        setState(2084);
        match(AdaParser::DOT);
        break;
      }

      default:
        break;
      }
      setState(2088);
      identifier();
    }
    setState(2091);
    match(AdaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Private_type_declarationContext ------------------------------------------------------------------

AdaParser::Private_type_declarationContext::Private_type_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Private_type_declarationContext::TYPE() {
  return getToken(AdaParser::TYPE, 0);
}

AdaParser::Defining_identifierContext* AdaParser::Private_type_declarationContext::defining_identifier() {
  return getRuleContext<AdaParser::Defining_identifierContext>(0);
}

tree::TerminalNode* AdaParser::Private_type_declarationContext::IS() {
  return getToken(AdaParser::IS, 0);
}

tree::TerminalNode* AdaParser::Private_type_declarationContext::PRIVATE() {
  return getToken(AdaParser::PRIVATE, 0);
}

tree::TerminalNode* AdaParser::Private_type_declarationContext::SEMI() {
  return getToken(AdaParser::SEMI, 0);
}

AdaParser::Discriminant_partContext* AdaParser::Private_type_declarationContext::discriminant_part() {
  return getRuleContext<AdaParser::Discriminant_partContext>(0);
}

tree::TerminalNode* AdaParser::Private_type_declarationContext::TAGGED() {
  return getToken(AdaParser::TAGGED, 0);
}

tree::TerminalNode* AdaParser::Private_type_declarationContext::LIMITED() {
  return getToken(AdaParser::LIMITED, 0);
}

AdaParser::Aspect_specificationContext* AdaParser::Private_type_declarationContext::aspect_specification() {
  return getRuleContext<AdaParser::Aspect_specificationContext>(0);
}

tree::TerminalNode* AdaParser::Private_type_declarationContext::ABSTRACT() {
  return getToken(AdaParser::ABSTRACT, 0);
}


size_t AdaParser::Private_type_declarationContext::getRuleIndex() const {
  return AdaParser::RulePrivate_type_declaration;
}

void AdaParser::Private_type_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrivate_type_declaration(this);
}

void AdaParser::Private_type_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrivate_type_declaration(this);
}

AdaParser::Private_type_declarationContext* AdaParser::private_type_declaration() {
  Private_type_declarationContext *_localctx = _tracker.createInstance<Private_type_declarationContext>(_ctx, getState());
  enterRule(_localctx, 324, AdaParser::RulePrivate_type_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2093);
    match(AdaParser::TYPE);
    setState(2094);
    defining_identifier();
    setState(2096);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::LP) {
      setState(2095);
      discriminant_part();
    }
    setState(2098);
    match(AdaParser::IS);
    setState(2103);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::ABSTRACT

    || _la == AdaParser::TAGGED) {
      setState(2100);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::ABSTRACT) {
        setState(2099);
        match(AdaParser::ABSTRACT);
      }
      setState(2102);
      match(AdaParser::TAGGED);
    }
    setState(2106);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::LIMITED) {
      setState(2105);
      match(AdaParser::LIMITED);
    }
    setState(2108);
    match(AdaParser::PRIVATE);
    setState(2110);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::WITH) {
      setState(2109);
      aspect_specification();
    }
    setState(2112);
    match(AdaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Private_extension_declarationContext ------------------------------------------------------------------

AdaParser::Private_extension_declarationContext::Private_extension_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Private_extension_declarationContext::TYPE() {
  return getToken(AdaParser::TYPE, 0);
}

AdaParser::Defining_identifierContext* AdaParser::Private_extension_declarationContext::defining_identifier() {
  return getRuleContext<AdaParser::Defining_identifierContext>(0);
}

tree::TerminalNode* AdaParser::Private_extension_declarationContext::IS() {
  return getToken(AdaParser::IS, 0);
}

tree::TerminalNode* AdaParser::Private_extension_declarationContext::NEW() {
  return getToken(AdaParser::NEW, 0);
}

AdaParser::Subtype_indicationContext* AdaParser::Private_extension_declarationContext::subtype_indication() {
  return getRuleContext<AdaParser::Subtype_indicationContext>(0);
}

tree::TerminalNode* AdaParser::Private_extension_declarationContext::WITH() {
  return getToken(AdaParser::WITH, 0);
}

tree::TerminalNode* AdaParser::Private_extension_declarationContext::PRIVATE() {
  return getToken(AdaParser::PRIVATE, 0);
}

tree::TerminalNode* AdaParser::Private_extension_declarationContext::SEMI() {
  return getToken(AdaParser::SEMI, 0);
}

tree::TerminalNode* AdaParser::Private_extension_declarationContext::LIMITED() {
  return getToken(AdaParser::LIMITED, 0);
}

tree::TerminalNode* AdaParser::Private_extension_declarationContext::SYNCHRONIZED() {
  return getToken(AdaParser::SYNCHRONIZED, 0);
}

AdaParser::Discriminant_partContext* AdaParser::Private_extension_declarationContext::discriminant_part() {
  return getRuleContext<AdaParser::Discriminant_partContext>(0);
}

tree::TerminalNode* AdaParser::Private_extension_declarationContext::ABSTRACT() {
  return getToken(AdaParser::ABSTRACT, 0);
}

tree::TerminalNode* AdaParser::Private_extension_declarationContext::AND() {
  return getToken(AdaParser::AND, 0);
}

AdaParser::Interface_listContext* AdaParser::Private_extension_declarationContext::interface_list() {
  return getRuleContext<AdaParser::Interface_listContext>(0);
}

AdaParser::Aspect_specificationContext* AdaParser::Private_extension_declarationContext::aspect_specification() {
  return getRuleContext<AdaParser::Aspect_specificationContext>(0);
}


size_t AdaParser::Private_extension_declarationContext::getRuleIndex() const {
  return AdaParser::RulePrivate_extension_declaration;
}

void AdaParser::Private_extension_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrivate_extension_declaration(this);
}

void AdaParser::Private_extension_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrivate_extension_declaration(this);
}

AdaParser::Private_extension_declarationContext* AdaParser::private_extension_declaration() {
  Private_extension_declarationContext *_localctx = _tracker.createInstance<Private_extension_declarationContext>(_ctx, getState());
  enterRule(_localctx, 326, AdaParser::RulePrivate_extension_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2114);
    match(AdaParser::TYPE);
    setState(2115);
    defining_identifier();
    setState(2117);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::LP) {
      setState(2116);
      discriminant_part();
    }
    setState(2119);
    match(AdaParser::IS);
    setState(2121);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::ABSTRACT) {
      setState(2120);
      match(AdaParser::ABSTRACT);
    }
    setState(2123);
    _la = _input->LA(1);
    if (!(_la == AdaParser::LIMITED

    || _la == AdaParser::SYNCHRONIZED)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(2124);
    match(AdaParser::NEW);
    setState(2125);
    subtype_indication();
    setState(2128);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::AND) {
      setState(2126);
      match(AdaParser::AND);
      setState(2127);
      interface_list();
    }
    setState(2130);
    match(AdaParser::WITH);
    setState(2131);
    match(AdaParser::PRIVATE);
    setState(2133);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::WITH) {
      setState(2132);
      aspect_specification();
    }
    setState(2135);
    match(AdaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Overriding_indicatorContext ------------------------------------------------------------------

AdaParser::Overriding_indicatorContext::Overriding_indicatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Overriding_indicatorContext::OVERRIDING() {
  return getToken(AdaParser::OVERRIDING, 0);
}

tree::TerminalNode* AdaParser::Overriding_indicatorContext::NOT() {
  return getToken(AdaParser::NOT, 0);
}


size_t AdaParser::Overriding_indicatorContext::getRuleIndex() const {
  return AdaParser::RuleOverriding_indicator;
}

void AdaParser::Overriding_indicatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOverriding_indicator(this);
}

void AdaParser::Overriding_indicatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOverriding_indicator(this);
}

AdaParser::Overriding_indicatorContext* AdaParser::overriding_indicator() {
  Overriding_indicatorContext *_localctx = _tracker.createInstance<Overriding_indicatorContext>(_ctx, getState());
  enterRule(_localctx, 328, AdaParser::RuleOverriding_indicator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2138);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::NOT) {
      setState(2137);
      match(AdaParser::NOT);
    }
    setState(2140);
    match(AdaParser::OVERRIDING);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Use_clauseContext ------------------------------------------------------------------

AdaParser::Use_clauseContext::Use_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Use_package_clauseContext* AdaParser::Use_clauseContext::use_package_clause() {
  return getRuleContext<AdaParser::Use_package_clauseContext>(0);
}

AdaParser::Use_type_clauseContext* AdaParser::Use_clauseContext::use_type_clause() {
  return getRuleContext<AdaParser::Use_type_clauseContext>(0);
}


size_t AdaParser::Use_clauseContext::getRuleIndex() const {
  return AdaParser::RuleUse_clause;
}

void AdaParser::Use_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUse_clause(this);
}

void AdaParser::Use_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUse_clause(this);
}

AdaParser::Use_clauseContext* AdaParser::use_clause() {
  Use_clauseContext *_localctx = _tracker.createInstance<Use_clauseContext>(_ctx, getState());
  enterRule(_localctx, 330, AdaParser::RuleUse_clause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2144);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 236, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2142);
      use_package_clause();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2143);
      use_type_clause();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Use_package_clauseContext ------------------------------------------------------------------

AdaParser::Use_package_clauseContext::Use_package_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Use_package_clauseContext::USE() {
  return getToken(AdaParser::USE, 0);
}

std::vector<AdaParser::NameContext *> AdaParser::Use_package_clauseContext::name() {
  return getRuleContexts<AdaParser::NameContext>();
}

AdaParser::NameContext* AdaParser::Use_package_clauseContext::name(size_t i) {
  return getRuleContext<AdaParser::NameContext>(i);
}

tree::TerminalNode* AdaParser::Use_package_clauseContext::SEMI() {
  return getToken(AdaParser::SEMI, 0);
}

std::vector<tree::TerminalNode *> AdaParser::Use_package_clauseContext::COMMA() {
  return getTokens(AdaParser::COMMA);
}

tree::TerminalNode* AdaParser::Use_package_clauseContext::COMMA(size_t i) {
  return getToken(AdaParser::COMMA, i);
}


size_t AdaParser::Use_package_clauseContext::getRuleIndex() const {
  return AdaParser::RuleUse_package_clause;
}

void AdaParser::Use_package_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUse_package_clause(this);
}

void AdaParser::Use_package_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUse_package_clause(this);
}

AdaParser::Use_package_clauseContext* AdaParser::use_package_clause() {
  Use_package_clauseContext *_localctx = _tracker.createInstance<Use_package_clauseContext>(_ctx, getState());
  enterRule(_localctx, 332, AdaParser::RuleUse_package_clause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2146);
    match(AdaParser::USE);
    setState(2147);
    name(0);
    setState(2152);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == AdaParser::COMMA) {
      setState(2148);
      match(AdaParser::COMMA);
      setState(2149);
      name(0);
      setState(2154);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2155);
    match(AdaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Use_type_clauseContext ------------------------------------------------------------------

AdaParser::Use_type_clauseContext::Use_type_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Use_type_clauseContext::USE() {
  return getToken(AdaParser::USE, 0);
}

tree::TerminalNode* AdaParser::Use_type_clauseContext::TYPE() {
  return getToken(AdaParser::TYPE, 0);
}

std::vector<AdaParser::Subtype_markContext *> AdaParser::Use_type_clauseContext::subtype_mark() {
  return getRuleContexts<AdaParser::Subtype_markContext>();
}

AdaParser::Subtype_markContext* AdaParser::Use_type_clauseContext::subtype_mark(size_t i) {
  return getRuleContext<AdaParser::Subtype_markContext>(i);
}

tree::TerminalNode* AdaParser::Use_type_clauseContext::SEMI() {
  return getToken(AdaParser::SEMI, 0);
}

tree::TerminalNode* AdaParser::Use_type_clauseContext::ALL() {
  return getToken(AdaParser::ALL, 0);
}

std::vector<tree::TerminalNode *> AdaParser::Use_type_clauseContext::COMMA() {
  return getTokens(AdaParser::COMMA);
}

tree::TerminalNode* AdaParser::Use_type_clauseContext::COMMA(size_t i) {
  return getToken(AdaParser::COMMA, i);
}


size_t AdaParser::Use_type_clauseContext::getRuleIndex() const {
  return AdaParser::RuleUse_type_clause;
}

void AdaParser::Use_type_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUse_type_clause(this);
}

void AdaParser::Use_type_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUse_type_clause(this);
}

AdaParser::Use_type_clauseContext* AdaParser::use_type_clause() {
  Use_type_clauseContext *_localctx = _tracker.createInstance<Use_type_clauseContext>(_ctx, getState());
  enterRule(_localctx, 334, AdaParser::RuleUse_type_clause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2157);
    match(AdaParser::USE);
    setState(2159);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::ALL) {
      setState(2158);
      match(AdaParser::ALL);
    }
    setState(2161);
    match(AdaParser::TYPE);
    setState(2162);
    subtype_mark();
    setState(2167);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == AdaParser::COMMA) {
      setState(2163);
      match(AdaParser::COMMA);
      setState(2164);
      subtype_mark();
      setState(2169);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2170);
    match(AdaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Renaming_declarationContext ------------------------------------------------------------------

AdaParser::Renaming_declarationContext::Renaming_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Object_renaming_declarationContext* AdaParser::Renaming_declarationContext::object_renaming_declaration() {
  return getRuleContext<AdaParser::Object_renaming_declarationContext>(0);
}

AdaParser::Exception_renaming_declarationContext* AdaParser::Renaming_declarationContext::exception_renaming_declaration() {
  return getRuleContext<AdaParser::Exception_renaming_declarationContext>(0);
}

AdaParser::Package_renaming_declarationContext* AdaParser::Renaming_declarationContext::package_renaming_declaration() {
  return getRuleContext<AdaParser::Package_renaming_declarationContext>(0);
}

AdaParser::Subprogram_renaming_declarationContext* AdaParser::Renaming_declarationContext::subprogram_renaming_declaration() {
  return getRuleContext<AdaParser::Subprogram_renaming_declarationContext>(0);
}

AdaParser::Generic_renaming_declarationContext* AdaParser::Renaming_declarationContext::generic_renaming_declaration() {
  return getRuleContext<AdaParser::Generic_renaming_declarationContext>(0);
}


size_t AdaParser::Renaming_declarationContext::getRuleIndex() const {
  return AdaParser::RuleRenaming_declaration;
}

void AdaParser::Renaming_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRenaming_declaration(this);
}

void AdaParser::Renaming_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRenaming_declaration(this);
}

AdaParser::Renaming_declarationContext* AdaParser::renaming_declaration() {
  Renaming_declarationContext *_localctx = _tracker.createInstance<Renaming_declarationContext>(_ctx, getState());
  enterRule(_localctx, 336, AdaParser::RuleRenaming_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2177);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 240, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2172);
      object_renaming_declaration();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2173);
      exception_renaming_declaration();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2174);
      package_renaming_declaration();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2175);
      subprogram_renaming_declaration();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2176);
      generic_renaming_declaration();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Object_renaming_declarationContext ------------------------------------------------------------------

AdaParser::Object_renaming_declarationContext::Object_renaming_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Defining_identifierContext* AdaParser::Object_renaming_declarationContext::defining_identifier() {
  return getRuleContext<AdaParser::Defining_identifierContext>(0);
}

tree::TerminalNode* AdaParser::Object_renaming_declarationContext::COLON() {
  return getToken(AdaParser::COLON, 0);
}

AdaParser::Subtype_markContext* AdaParser::Object_renaming_declarationContext::subtype_mark() {
  return getRuleContext<AdaParser::Subtype_markContext>(0);
}

tree::TerminalNode* AdaParser::Object_renaming_declarationContext::RENAMES() {
  return getToken(AdaParser::RENAMES, 0);
}

AdaParser::NameContext* AdaParser::Object_renaming_declarationContext::name() {
  return getRuleContext<AdaParser::NameContext>(0);
}

tree::TerminalNode* AdaParser::Object_renaming_declarationContext::SEMI() {
  return getToken(AdaParser::SEMI, 0);
}

AdaParser::Null_exclusionContext* AdaParser::Object_renaming_declarationContext::null_exclusion() {
  return getRuleContext<AdaParser::Null_exclusionContext>(0);
}

AdaParser::Aspect_specificationContext* AdaParser::Object_renaming_declarationContext::aspect_specification() {
  return getRuleContext<AdaParser::Aspect_specificationContext>(0);
}

AdaParser::Access_definitionContext* AdaParser::Object_renaming_declarationContext::access_definition() {
  return getRuleContext<AdaParser::Access_definitionContext>(0);
}


size_t AdaParser::Object_renaming_declarationContext::getRuleIndex() const {
  return AdaParser::RuleObject_renaming_declaration;
}

void AdaParser::Object_renaming_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterObject_renaming_declaration(this);
}

void AdaParser::Object_renaming_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitObject_renaming_declaration(this);
}

AdaParser::Object_renaming_declarationContext* AdaParser::object_renaming_declaration() {
  Object_renaming_declarationContext *_localctx = _tracker.createInstance<Object_renaming_declarationContext>(_ctx, getState());
  enterRule(_localctx, 338, AdaParser::RuleObject_renaming_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2202);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 244, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2179);
      defining_identifier();
      setState(2180);
      match(AdaParser::COLON);
      setState(2182);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::NOT) {
        setState(2181);
        null_exclusion();
      }
      setState(2184);
      subtype_mark();
      setState(2185);
      match(AdaParser::RENAMES);
      setState(2186);
      name(0);
      setState(2188);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::WITH) {
        setState(2187);
        aspect_specification();
      }
      setState(2190);
      match(AdaParser::SEMI);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2192);
      defining_identifier();
      setState(2193);
      match(AdaParser::COLON);
      setState(2194);
      access_definition();
      setState(2195);
      match(AdaParser::RENAMES);
      setState(2196);
      name(0);
      setState(2198);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::WITH) {
        setState(2197);
        aspect_specification();
      }
      setState(2200);
      match(AdaParser::SEMI);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Exception_renaming_declarationContext ------------------------------------------------------------------

AdaParser::Exception_renaming_declarationContext::Exception_renaming_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Defining_identifierContext* AdaParser::Exception_renaming_declarationContext::defining_identifier() {
  return getRuleContext<AdaParser::Defining_identifierContext>(0);
}

tree::TerminalNode* AdaParser::Exception_renaming_declarationContext::COLON() {
  return getToken(AdaParser::COLON, 0);
}

tree::TerminalNode* AdaParser::Exception_renaming_declarationContext::EXCEPTION() {
  return getToken(AdaParser::EXCEPTION, 0);
}

tree::TerminalNode* AdaParser::Exception_renaming_declarationContext::RENAMES() {
  return getToken(AdaParser::RENAMES, 0);
}

AdaParser::NameContext* AdaParser::Exception_renaming_declarationContext::name() {
  return getRuleContext<AdaParser::NameContext>(0);
}

tree::TerminalNode* AdaParser::Exception_renaming_declarationContext::SEMI() {
  return getToken(AdaParser::SEMI, 0);
}

AdaParser::Aspect_specificationContext* AdaParser::Exception_renaming_declarationContext::aspect_specification() {
  return getRuleContext<AdaParser::Aspect_specificationContext>(0);
}


size_t AdaParser::Exception_renaming_declarationContext::getRuleIndex() const {
  return AdaParser::RuleException_renaming_declaration;
}

void AdaParser::Exception_renaming_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterException_renaming_declaration(this);
}

void AdaParser::Exception_renaming_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitException_renaming_declaration(this);
}

AdaParser::Exception_renaming_declarationContext* AdaParser::exception_renaming_declaration() {
  Exception_renaming_declarationContext *_localctx = _tracker.createInstance<Exception_renaming_declarationContext>(_ctx, getState());
  enterRule(_localctx, 340, AdaParser::RuleException_renaming_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2204);
    defining_identifier();
    setState(2205);
    match(AdaParser::COLON);
    setState(2206);
    match(AdaParser::EXCEPTION);
    setState(2207);
    match(AdaParser::RENAMES);
    setState(2208);
    name(0);
    setState(2210);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::WITH) {
      setState(2209);
      aspect_specification();
    }
    setState(2212);
    match(AdaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Package_renaming_declarationContext ------------------------------------------------------------------

AdaParser::Package_renaming_declarationContext::Package_renaming_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Package_renaming_declarationContext::PACKAGE() {
  return getToken(AdaParser::PACKAGE, 0);
}

AdaParser::Defining_program_unit_nameContext* AdaParser::Package_renaming_declarationContext::defining_program_unit_name() {
  return getRuleContext<AdaParser::Defining_program_unit_nameContext>(0);
}

tree::TerminalNode* AdaParser::Package_renaming_declarationContext::RENAMES() {
  return getToken(AdaParser::RENAMES, 0);
}

AdaParser::NameContext* AdaParser::Package_renaming_declarationContext::name() {
  return getRuleContext<AdaParser::NameContext>(0);
}

tree::TerminalNode* AdaParser::Package_renaming_declarationContext::SEMI() {
  return getToken(AdaParser::SEMI, 0);
}

AdaParser::Aspect_specificationContext* AdaParser::Package_renaming_declarationContext::aspect_specification() {
  return getRuleContext<AdaParser::Aspect_specificationContext>(0);
}


size_t AdaParser::Package_renaming_declarationContext::getRuleIndex() const {
  return AdaParser::RulePackage_renaming_declaration;
}

void AdaParser::Package_renaming_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPackage_renaming_declaration(this);
}

void AdaParser::Package_renaming_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPackage_renaming_declaration(this);
}

AdaParser::Package_renaming_declarationContext* AdaParser::package_renaming_declaration() {
  Package_renaming_declarationContext *_localctx = _tracker.createInstance<Package_renaming_declarationContext>(_ctx, getState());
  enterRule(_localctx, 342, AdaParser::RulePackage_renaming_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2214);
    match(AdaParser::PACKAGE);
    setState(2215);
    defining_program_unit_name();
    setState(2216);
    match(AdaParser::RENAMES);
    setState(2217);
    name(0);
    setState(2219);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::WITH) {
      setState(2218);
      aspect_specification();
    }
    setState(2221);
    match(AdaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Subprogram_renaming_declarationContext ------------------------------------------------------------------

AdaParser::Subprogram_renaming_declarationContext::Subprogram_renaming_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Subprogram_specificationContext* AdaParser::Subprogram_renaming_declarationContext::subprogram_specification() {
  return getRuleContext<AdaParser::Subprogram_specificationContext>(0);
}

tree::TerminalNode* AdaParser::Subprogram_renaming_declarationContext::RENAMES() {
  return getToken(AdaParser::RENAMES, 0);
}

AdaParser::NameContext* AdaParser::Subprogram_renaming_declarationContext::name() {
  return getRuleContext<AdaParser::NameContext>(0);
}

tree::TerminalNode* AdaParser::Subprogram_renaming_declarationContext::SEMI() {
  return getToken(AdaParser::SEMI, 0);
}

AdaParser::Overriding_indicatorContext* AdaParser::Subprogram_renaming_declarationContext::overriding_indicator() {
  return getRuleContext<AdaParser::Overriding_indicatorContext>(0);
}

AdaParser::Aspect_specificationContext* AdaParser::Subprogram_renaming_declarationContext::aspect_specification() {
  return getRuleContext<AdaParser::Aspect_specificationContext>(0);
}


size_t AdaParser::Subprogram_renaming_declarationContext::getRuleIndex() const {
  return AdaParser::RuleSubprogram_renaming_declaration;
}

void AdaParser::Subprogram_renaming_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubprogram_renaming_declaration(this);
}

void AdaParser::Subprogram_renaming_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubprogram_renaming_declaration(this);
}

AdaParser::Subprogram_renaming_declarationContext* AdaParser::subprogram_renaming_declaration() {
  Subprogram_renaming_declarationContext *_localctx = _tracker.createInstance<Subprogram_renaming_declarationContext>(_ctx, getState());
  enterRule(_localctx, 344, AdaParser::RuleSubprogram_renaming_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2224);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::NOT

    || _la == AdaParser::OVERRIDING) {
      setState(2223);
      overriding_indicator();
    }
    setState(2226);
    subprogram_specification();
    setState(2227);
    match(AdaParser::RENAMES);
    setState(2228);
    name(0);
    setState(2230);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::WITH) {
      setState(2229);
      aspect_specification();
    }
    setState(2232);
    match(AdaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Generic_renaming_declarationContext ------------------------------------------------------------------

AdaParser::Generic_renaming_declarationContext::Generic_renaming_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Generic_renaming_declarationContext::GENERIC() {
  return getToken(AdaParser::GENERIC, 0);
}

tree::TerminalNode* AdaParser::Generic_renaming_declarationContext::PACKAGE() {
  return getToken(AdaParser::PACKAGE, 0);
}

AdaParser::Defining_program_unit_nameContext* AdaParser::Generic_renaming_declarationContext::defining_program_unit_name() {
  return getRuleContext<AdaParser::Defining_program_unit_nameContext>(0);
}

tree::TerminalNode* AdaParser::Generic_renaming_declarationContext::RENAMES() {
  return getToken(AdaParser::RENAMES, 0);
}

AdaParser::NameContext* AdaParser::Generic_renaming_declarationContext::name() {
  return getRuleContext<AdaParser::NameContext>(0);
}

tree::TerminalNode* AdaParser::Generic_renaming_declarationContext::SEMI() {
  return getToken(AdaParser::SEMI, 0);
}

AdaParser::Aspect_specificationContext* AdaParser::Generic_renaming_declarationContext::aspect_specification() {
  return getRuleContext<AdaParser::Aspect_specificationContext>(0);
}

tree::TerminalNode* AdaParser::Generic_renaming_declarationContext::PROCEDURE() {
  return getToken(AdaParser::PROCEDURE, 0);
}

tree::TerminalNode* AdaParser::Generic_renaming_declarationContext::FUNCTION() {
  return getToken(AdaParser::FUNCTION, 0);
}


size_t AdaParser::Generic_renaming_declarationContext::getRuleIndex() const {
  return AdaParser::RuleGeneric_renaming_declaration;
}

void AdaParser::Generic_renaming_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGeneric_renaming_declaration(this);
}

void AdaParser::Generic_renaming_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGeneric_renaming_declaration(this);
}

AdaParser::Generic_renaming_declarationContext* AdaParser::generic_renaming_declaration() {
  Generic_renaming_declarationContext *_localctx = _tracker.createInstance<Generic_renaming_declarationContext>(_ctx, getState());
  enterRule(_localctx, 346, AdaParser::RuleGeneric_renaming_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2264);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 252, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2234);
      match(AdaParser::GENERIC);
      setState(2235);
      match(AdaParser::PACKAGE);
      setState(2236);
      defining_program_unit_name();
      setState(2237);
      match(AdaParser::RENAMES);
      setState(2238);
      name(0);
      setState(2240);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::WITH) {
        setState(2239);
        aspect_specification();
      }
      setState(2242);
      match(AdaParser::SEMI);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2244);
      match(AdaParser::GENERIC);
      setState(2245);
      match(AdaParser::PROCEDURE);
      setState(2246);
      defining_program_unit_name();
      setState(2247);
      match(AdaParser::RENAMES);
      setState(2248);
      name(0);
      setState(2250);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::WITH) {
        setState(2249);
        aspect_specification();
      }
      setState(2252);
      match(AdaParser::SEMI);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2254);
      match(AdaParser::GENERIC);
      setState(2255);
      match(AdaParser::FUNCTION);
      setState(2256);
      defining_program_unit_name();
      setState(2257);
      match(AdaParser::RENAMES);
      setState(2258);
      name(0);
      setState(2260);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::WITH) {
        setState(2259);
        aspect_specification();
      }
      setState(2262);
      match(AdaParser::SEMI);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Task_type_declarationContext ------------------------------------------------------------------

AdaParser::Task_type_declarationContext::Task_type_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Task_type_declarationContext::TASK() {
  return getToken(AdaParser::TASK, 0);
}

tree::TerminalNode* AdaParser::Task_type_declarationContext::TYPE() {
  return getToken(AdaParser::TYPE, 0);
}

AdaParser::Defining_identifierContext* AdaParser::Task_type_declarationContext::defining_identifier() {
  return getRuleContext<AdaParser::Defining_identifierContext>(0);
}

tree::TerminalNode* AdaParser::Task_type_declarationContext::SEMI() {
  return getToken(AdaParser::SEMI, 0);
}

AdaParser::Known_discriminant_partContext* AdaParser::Task_type_declarationContext::known_discriminant_part() {
  return getRuleContext<AdaParser::Known_discriminant_partContext>(0);
}

AdaParser::Aspect_specificationContext* AdaParser::Task_type_declarationContext::aspect_specification() {
  return getRuleContext<AdaParser::Aspect_specificationContext>(0);
}

tree::TerminalNode* AdaParser::Task_type_declarationContext::IS() {
  return getToken(AdaParser::IS, 0);
}

AdaParser::Task_definitionContext* AdaParser::Task_type_declarationContext::task_definition() {
  return getRuleContext<AdaParser::Task_definitionContext>(0);
}

tree::TerminalNode* AdaParser::Task_type_declarationContext::NEW() {
  return getToken(AdaParser::NEW, 0);
}

AdaParser::Interface_listContext* AdaParser::Task_type_declarationContext::interface_list() {
  return getRuleContext<AdaParser::Interface_listContext>(0);
}

tree::TerminalNode* AdaParser::Task_type_declarationContext::WITH() {
  return getToken(AdaParser::WITH, 0);
}


size_t AdaParser::Task_type_declarationContext::getRuleIndex() const {
  return AdaParser::RuleTask_type_declaration;
}

void AdaParser::Task_type_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTask_type_declaration(this);
}

void AdaParser::Task_type_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTask_type_declaration(this);
}

AdaParser::Task_type_declarationContext* AdaParser::task_type_declaration() {
  Task_type_declarationContext *_localctx = _tracker.createInstance<Task_type_declarationContext>(_ctx, getState());
  enterRule(_localctx, 348, AdaParser::RuleTask_type_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2266);
    match(AdaParser::TASK);
    setState(2267);
    match(AdaParser::TYPE);
    setState(2268);
    defining_identifier();
    setState(2270);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::LP) {
      setState(2269);
      known_discriminant_part();
    }
    setState(2273);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::WITH) {
      setState(2272);
      aspect_specification();
    }
    setState(2283);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::IS) {
      setState(2275);
      match(AdaParser::IS);
      setState(2280);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::NEW) {
        setState(2276);
        match(AdaParser::NEW);
        setState(2277);
        interface_list();
        setState(2278);
        match(AdaParser::WITH);
      }
      setState(2282);
      task_definition();
    }
    setState(2285);
    match(AdaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Single_task_declarationContext ------------------------------------------------------------------

AdaParser::Single_task_declarationContext::Single_task_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Single_task_declarationContext::TASK() {
  return getToken(AdaParser::TASK, 0);
}

AdaParser::Defining_identifierContext* AdaParser::Single_task_declarationContext::defining_identifier() {
  return getRuleContext<AdaParser::Defining_identifierContext>(0);
}

tree::TerminalNode* AdaParser::Single_task_declarationContext::SEMI() {
  return getToken(AdaParser::SEMI, 0);
}

AdaParser::Aspect_specificationContext* AdaParser::Single_task_declarationContext::aspect_specification() {
  return getRuleContext<AdaParser::Aspect_specificationContext>(0);
}

tree::TerminalNode* AdaParser::Single_task_declarationContext::IS() {
  return getToken(AdaParser::IS, 0);
}

AdaParser::Task_definitionContext* AdaParser::Single_task_declarationContext::task_definition() {
  return getRuleContext<AdaParser::Task_definitionContext>(0);
}

tree::TerminalNode* AdaParser::Single_task_declarationContext::NEW() {
  return getToken(AdaParser::NEW, 0);
}

AdaParser::Interface_listContext* AdaParser::Single_task_declarationContext::interface_list() {
  return getRuleContext<AdaParser::Interface_listContext>(0);
}

tree::TerminalNode* AdaParser::Single_task_declarationContext::WITH() {
  return getToken(AdaParser::WITH, 0);
}


size_t AdaParser::Single_task_declarationContext::getRuleIndex() const {
  return AdaParser::RuleSingle_task_declaration;
}

void AdaParser::Single_task_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSingle_task_declaration(this);
}

void AdaParser::Single_task_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSingle_task_declaration(this);
}

AdaParser::Single_task_declarationContext* AdaParser::single_task_declaration() {
  Single_task_declarationContext *_localctx = _tracker.createInstance<Single_task_declarationContext>(_ctx, getState());
  enterRule(_localctx, 350, AdaParser::RuleSingle_task_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2287);
    match(AdaParser::TASK);
    setState(2288);
    defining_identifier();
    setState(2290);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::WITH) {
      setState(2289);
      aspect_specification();
    }
    setState(2300);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::IS) {
      setState(2292);
      match(AdaParser::IS);
      setState(2297);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::NEW) {
        setState(2293);
        match(AdaParser::NEW);
        setState(2294);
        interface_list();
        setState(2295);
        match(AdaParser::WITH);
      }
      setState(2299);
      task_definition();
    }
    setState(2302);
    match(AdaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Task_definitionContext ------------------------------------------------------------------

AdaParser::Task_definitionContext::Task_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Task_definitionContext::END() {
  return getToken(AdaParser::END, 0);
}

std::vector<AdaParser::Task_itemContext *> AdaParser::Task_definitionContext::task_item() {
  return getRuleContexts<AdaParser::Task_itemContext>();
}

AdaParser::Task_itemContext* AdaParser::Task_definitionContext::task_item(size_t i) {
  return getRuleContext<AdaParser::Task_itemContext>(i);
}

tree::TerminalNode* AdaParser::Task_definitionContext::PRIVATE() {
  return getToken(AdaParser::PRIVATE, 0);
}

AdaParser::IdentifierContext* AdaParser::Task_definitionContext::identifier() {
  return getRuleContext<AdaParser::IdentifierContext>(0);
}


size_t AdaParser::Task_definitionContext::getRuleIndex() const {
  return AdaParser::RuleTask_definition;
}

void AdaParser::Task_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTask_definition(this);
}

void AdaParser::Task_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTask_definition(this);
}

AdaParser::Task_definitionContext* AdaParser::task_definition() {
  Task_definitionContext *_localctx = _tracker.createInstance<Task_definitionContext>(_ctx, getState());
  enterRule(_localctx, 352, AdaParser::RuleTask_definition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2307);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 17867139448832) != 0)) {
      setState(2304);
      task_item();
      setState(2309);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2317);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::PRIVATE) {
      setState(2310);
      match(AdaParser::PRIVATE);
      setState(2314);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 17867139448832) != 0)) {
        setState(2311);
        task_item();
        setState(2316);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(2319);
    match(AdaParser::END);
    setState(2321);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::IDENTIFIER_) {
      setState(2320);
      identifier();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Task_itemContext ------------------------------------------------------------------

AdaParser::Task_itemContext::Task_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Entry_declarationContext* AdaParser::Task_itemContext::entry_declaration() {
  return getRuleContext<AdaParser::Entry_declarationContext>(0);
}

AdaParser::Aspect_clauseContext* AdaParser::Task_itemContext::aspect_clause() {
  return getRuleContext<AdaParser::Aspect_clauseContext>(0);
}


size_t AdaParser::Task_itemContext::getRuleIndex() const {
  return AdaParser::RuleTask_item;
}

void AdaParser::Task_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTask_item(this);
}

void AdaParser::Task_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTask_item(this);
}

AdaParser::Task_itemContext* AdaParser::task_item() {
  Task_itemContext *_localctx = _tracker.createInstance<Task_itemContext>(_ctx, getState());
  enterRule(_localctx, 354, AdaParser::RuleTask_item);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2325);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AdaParser::ENTRY:
      case AdaParser::NOT:
      case AdaParser::OVERRIDING: {
        enterOuterAlt(_localctx, 1);
        setState(2323);
        entry_declaration();
        break;
      }

      case AdaParser::FOR: {
        enterOuterAlt(_localctx, 2);
        setState(2324);
        aspect_clause();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Task_bodyContext ------------------------------------------------------------------

AdaParser::Task_bodyContext::Task_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Task_bodyContext::TASK() {
  return getToken(AdaParser::TASK, 0);
}

tree::TerminalNode* AdaParser::Task_bodyContext::BODY_() {
  return getToken(AdaParser::BODY_, 0);
}

AdaParser::Defining_identifierContext* AdaParser::Task_bodyContext::defining_identifier() {
  return getRuleContext<AdaParser::Defining_identifierContext>(0);
}

tree::TerminalNode* AdaParser::Task_bodyContext::IS() {
  return getToken(AdaParser::IS, 0);
}

AdaParser::Declarative_partContext* AdaParser::Task_bodyContext::declarative_part() {
  return getRuleContext<AdaParser::Declarative_partContext>(0);
}

tree::TerminalNode* AdaParser::Task_bodyContext::BEGIN() {
  return getToken(AdaParser::BEGIN, 0);
}

AdaParser::Handled_sequence_of_statementsContext* AdaParser::Task_bodyContext::handled_sequence_of_statements() {
  return getRuleContext<AdaParser::Handled_sequence_of_statementsContext>(0);
}

tree::TerminalNode* AdaParser::Task_bodyContext::END() {
  return getToken(AdaParser::END, 0);
}

tree::TerminalNode* AdaParser::Task_bodyContext::SEMI() {
  return getToken(AdaParser::SEMI, 0);
}

AdaParser::Aspect_specificationContext* AdaParser::Task_bodyContext::aspect_specification() {
  return getRuleContext<AdaParser::Aspect_specificationContext>(0);
}

AdaParser::IdentifierContext* AdaParser::Task_bodyContext::identifier() {
  return getRuleContext<AdaParser::IdentifierContext>(0);
}


size_t AdaParser::Task_bodyContext::getRuleIndex() const {
  return AdaParser::RuleTask_body;
}

void AdaParser::Task_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTask_body(this);
}

void AdaParser::Task_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTask_body(this);
}

AdaParser::Task_bodyContext* AdaParser::task_body() {
  Task_bodyContext *_localctx = _tracker.createInstance<Task_bodyContext>(_ctx, getState());
  enterRule(_localctx, 356, AdaParser::RuleTask_body);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2327);
    match(AdaParser::TASK);
    setState(2328);
    match(AdaParser::BODY_);
    setState(2329);
    defining_identifier();
    setState(2331);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::WITH) {
      setState(2330);
      aspect_specification();
    }
    setState(2333);
    match(AdaParser::IS);
    setState(2334);
    declarative_part();
    setState(2335);
    match(AdaParser::BEGIN);
    setState(2336);
    handled_sequence_of_statements();
    setState(2337);
    match(AdaParser::END);
    setState(2339);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::IDENTIFIER_) {
      setState(2338);
      identifier();
    }
    setState(2341);
    match(AdaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Protected_type_declarationContext ------------------------------------------------------------------

AdaParser::Protected_type_declarationContext::Protected_type_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Protected_type_declarationContext::PROTECTED() {
  return getToken(AdaParser::PROTECTED, 0);
}

tree::TerminalNode* AdaParser::Protected_type_declarationContext::TYPE() {
  return getToken(AdaParser::TYPE, 0);
}

AdaParser::Defining_identifierContext* AdaParser::Protected_type_declarationContext::defining_identifier() {
  return getRuleContext<AdaParser::Defining_identifierContext>(0);
}

tree::TerminalNode* AdaParser::Protected_type_declarationContext::IS() {
  return getToken(AdaParser::IS, 0);
}

AdaParser::Protected_definitionContext* AdaParser::Protected_type_declarationContext::protected_definition() {
  return getRuleContext<AdaParser::Protected_definitionContext>(0);
}

tree::TerminalNode* AdaParser::Protected_type_declarationContext::SEMI() {
  return getToken(AdaParser::SEMI, 0);
}

AdaParser::Known_discriminant_partContext* AdaParser::Protected_type_declarationContext::known_discriminant_part() {
  return getRuleContext<AdaParser::Known_discriminant_partContext>(0);
}

AdaParser::Aspect_specificationContext* AdaParser::Protected_type_declarationContext::aspect_specification() {
  return getRuleContext<AdaParser::Aspect_specificationContext>(0);
}

tree::TerminalNode* AdaParser::Protected_type_declarationContext::NEW() {
  return getToken(AdaParser::NEW, 0);
}

AdaParser::Interface_listContext* AdaParser::Protected_type_declarationContext::interface_list() {
  return getRuleContext<AdaParser::Interface_listContext>(0);
}

tree::TerminalNode* AdaParser::Protected_type_declarationContext::WITH() {
  return getToken(AdaParser::WITH, 0);
}


size_t AdaParser::Protected_type_declarationContext::getRuleIndex() const {
  return AdaParser::RuleProtected_type_declaration;
}

void AdaParser::Protected_type_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProtected_type_declaration(this);
}

void AdaParser::Protected_type_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProtected_type_declaration(this);
}

AdaParser::Protected_type_declarationContext* AdaParser::protected_type_declaration() {
  Protected_type_declarationContext *_localctx = _tracker.createInstance<Protected_type_declarationContext>(_ctx, getState());
  enterRule(_localctx, 358, AdaParser::RuleProtected_type_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2343);
    match(AdaParser::PROTECTED);
    setState(2344);
    match(AdaParser::TYPE);
    setState(2345);
    defining_identifier();
    setState(2347);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::LP) {
      setState(2346);
      known_discriminant_part();
    }
    setState(2350);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::WITH) {
      setState(2349);
      aspect_specification();
    }
    setState(2352);
    match(AdaParser::IS);
    setState(2357);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::NEW) {
      setState(2353);
      match(AdaParser::NEW);
      setState(2354);
      interface_list();
      setState(2355);
      match(AdaParser::WITH);
    }
    setState(2359);
    protected_definition();
    setState(2360);
    match(AdaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Single_protected_declarationContext ------------------------------------------------------------------

AdaParser::Single_protected_declarationContext::Single_protected_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Single_protected_declarationContext::PROTECTED() {
  return getToken(AdaParser::PROTECTED, 0);
}

AdaParser::Defining_identifierContext* AdaParser::Single_protected_declarationContext::defining_identifier() {
  return getRuleContext<AdaParser::Defining_identifierContext>(0);
}

tree::TerminalNode* AdaParser::Single_protected_declarationContext::IS() {
  return getToken(AdaParser::IS, 0);
}

AdaParser::Protected_definitionContext* AdaParser::Single_protected_declarationContext::protected_definition() {
  return getRuleContext<AdaParser::Protected_definitionContext>(0);
}

tree::TerminalNode* AdaParser::Single_protected_declarationContext::SEMI() {
  return getToken(AdaParser::SEMI, 0);
}

AdaParser::Aspect_specificationContext* AdaParser::Single_protected_declarationContext::aspect_specification() {
  return getRuleContext<AdaParser::Aspect_specificationContext>(0);
}

tree::TerminalNode* AdaParser::Single_protected_declarationContext::NEW() {
  return getToken(AdaParser::NEW, 0);
}

AdaParser::Interface_listContext* AdaParser::Single_protected_declarationContext::interface_list() {
  return getRuleContext<AdaParser::Interface_listContext>(0);
}

tree::TerminalNode* AdaParser::Single_protected_declarationContext::WITH() {
  return getToken(AdaParser::WITH, 0);
}


size_t AdaParser::Single_protected_declarationContext::getRuleIndex() const {
  return AdaParser::RuleSingle_protected_declaration;
}

void AdaParser::Single_protected_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSingle_protected_declaration(this);
}

void AdaParser::Single_protected_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSingle_protected_declaration(this);
}

AdaParser::Single_protected_declarationContext* AdaParser::single_protected_declaration() {
  Single_protected_declarationContext *_localctx = _tracker.createInstance<Single_protected_declarationContext>(_ctx, getState());
  enterRule(_localctx, 360, AdaParser::RuleSingle_protected_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2362);
    match(AdaParser::PROTECTED);
    setState(2363);
    defining_identifier();
    setState(2365);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::WITH) {
      setState(2364);
      aspect_specification();
    }
    setState(2367);
    match(AdaParser::IS);
    setState(2372);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::NEW) {
      setState(2368);
      match(AdaParser::NEW);
      setState(2369);
      interface_list();
      setState(2370);
      match(AdaParser::WITH);
    }
    setState(2374);
    protected_definition();
    setState(2375);
    match(AdaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Protected_definitionContext ------------------------------------------------------------------

AdaParser::Protected_definitionContext::Protected_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Protected_definitionContext::END() {
  return getToken(AdaParser::END, 0);
}

std::vector<AdaParser::Protected_operation_declarationContext *> AdaParser::Protected_definitionContext::protected_operation_declaration() {
  return getRuleContexts<AdaParser::Protected_operation_declarationContext>();
}

AdaParser::Protected_operation_declarationContext* AdaParser::Protected_definitionContext::protected_operation_declaration(size_t i) {
  return getRuleContext<AdaParser::Protected_operation_declarationContext>(i);
}

tree::TerminalNode* AdaParser::Protected_definitionContext::PRIVATE() {
  return getToken(AdaParser::PRIVATE, 0);
}

AdaParser::IdentifierContext* AdaParser::Protected_definitionContext::identifier() {
  return getRuleContext<AdaParser::IdentifierContext>(0);
}

std::vector<AdaParser::Protected_element_declarationContext *> AdaParser::Protected_definitionContext::protected_element_declaration() {
  return getRuleContexts<AdaParser::Protected_element_declarationContext>();
}

AdaParser::Protected_element_declarationContext* AdaParser::Protected_definitionContext::protected_element_declaration(size_t i) {
  return getRuleContext<AdaParser::Protected_element_declarationContext>(i);
}


size_t AdaParser::Protected_definitionContext::getRuleIndex() const {
  return AdaParser::RuleProtected_definition;
}

void AdaParser::Protected_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProtected_definition(this);
}

void AdaParser::Protected_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProtected_definition(this);
}

AdaParser::Protected_definitionContext* AdaParser::protected_definition() {
  Protected_definitionContext *_localctx = _tracker.createInstance<Protected_definitionContext>(_ctx, getState());
  enterRule(_localctx, 362, AdaParser::RuleProtected_definition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2380);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 299342250377216) != 0)) {
      setState(2377);
      protected_operation_declaration();
      setState(2382);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2390);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::PRIVATE) {
      setState(2383);
      match(AdaParser::PRIVATE);
      setState(2387);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (((((_la - 23) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 23)) & 288230376187396121) != 0)) {
        setState(2384);
        protected_element_declaration();
        setState(2389);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(2392);
    match(AdaParser::END);
    setState(2394);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::IDENTIFIER_) {
      setState(2393);
      identifier();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Protected_operation_declarationContext ------------------------------------------------------------------

AdaParser::Protected_operation_declarationContext::Protected_operation_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Subprogram_declarationContext* AdaParser::Protected_operation_declarationContext::subprogram_declaration() {
  return getRuleContext<AdaParser::Subprogram_declarationContext>(0);
}

AdaParser::Entry_declarationContext* AdaParser::Protected_operation_declarationContext::entry_declaration() {
  return getRuleContext<AdaParser::Entry_declarationContext>(0);
}

AdaParser::Aspect_clauseContext* AdaParser::Protected_operation_declarationContext::aspect_clause() {
  return getRuleContext<AdaParser::Aspect_clauseContext>(0);
}


size_t AdaParser::Protected_operation_declarationContext::getRuleIndex() const {
  return AdaParser::RuleProtected_operation_declaration;
}

void AdaParser::Protected_operation_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProtected_operation_declaration(this);
}

void AdaParser::Protected_operation_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProtected_operation_declaration(this);
}

AdaParser::Protected_operation_declarationContext* AdaParser::protected_operation_declaration() {
  Protected_operation_declarationContext *_localctx = _tracker.createInstance<Protected_operation_declarationContext>(_ctx, getState());
  enterRule(_localctx, 364, AdaParser::RuleProtected_operation_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2399);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 276, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2396);
      subprogram_declaration();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2397);
      entry_declaration();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2398);
      aspect_clause();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Protected_element_declarationContext ------------------------------------------------------------------

AdaParser::Protected_element_declarationContext::Protected_element_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Protected_operation_declarationContext* AdaParser::Protected_element_declarationContext::protected_operation_declaration() {
  return getRuleContext<AdaParser::Protected_operation_declarationContext>(0);
}

AdaParser::Component_declarationContext* AdaParser::Protected_element_declarationContext::component_declaration() {
  return getRuleContext<AdaParser::Component_declarationContext>(0);
}


size_t AdaParser::Protected_element_declarationContext::getRuleIndex() const {
  return AdaParser::RuleProtected_element_declaration;
}

void AdaParser::Protected_element_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProtected_element_declaration(this);
}

void AdaParser::Protected_element_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProtected_element_declaration(this);
}

AdaParser::Protected_element_declarationContext* AdaParser::protected_element_declaration() {
  Protected_element_declarationContext *_localctx = _tracker.createInstance<Protected_element_declarationContext>(_ctx, getState());
  enterRule(_localctx, 366, AdaParser::RuleProtected_element_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2403);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AdaParser::ENTRY:
      case AdaParser::FOR:
      case AdaParser::FUNCTION:
      case AdaParser::NOT:
      case AdaParser::OVERRIDING:
      case AdaParser::PROCEDURE: {
        enterOuterAlt(_localctx, 1);
        setState(2401);
        protected_operation_declaration();
        break;
      }

      case AdaParser::IDENTIFIER_: {
        enterOuterAlt(_localctx, 2);
        setState(2402);
        component_declaration();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Protected_bodyContext ------------------------------------------------------------------

AdaParser::Protected_bodyContext::Protected_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Protected_bodyContext::PROTECTED() {
  return getToken(AdaParser::PROTECTED, 0);
}

tree::TerminalNode* AdaParser::Protected_bodyContext::BODY_() {
  return getToken(AdaParser::BODY_, 0);
}

AdaParser::Defining_identifierContext* AdaParser::Protected_bodyContext::defining_identifier() {
  return getRuleContext<AdaParser::Defining_identifierContext>(0);
}

tree::TerminalNode* AdaParser::Protected_bodyContext::IS() {
  return getToken(AdaParser::IS, 0);
}

tree::TerminalNode* AdaParser::Protected_bodyContext::END() {
  return getToken(AdaParser::END, 0);
}

tree::TerminalNode* AdaParser::Protected_bodyContext::SEMI() {
  return getToken(AdaParser::SEMI, 0);
}

AdaParser::Aspect_specificationContext* AdaParser::Protected_bodyContext::aspect_specification() {
  return getRuleContext<AdaParser::Aspect_specificationContext>(0);
}

std::vector<AdaParser::Protected_operation_itemContext *> AdaParser::Protected_bodyContext::protected_operation_item() {
  return getRuleContexts<AdaParser::Protected_operation_itemContext>();
}

AdaParser::Protected_operation_itemContext* AdaParser::Protected_bodyContext::protected_operation_item(size_t i) {
  return getRuleContext<AdaParser::Protected_operation_itemContext>(i);
}

AdaParser::IdentifierContext* AdaParser::Protected_bodyContext::identifier() {
  return getRuleContext<AdaParser::IdentifierContext>(0);
}


size_t AdaParser::Protected_bodyContext::getRuleIndex() const {
  return AdaParser::RuleProtected_body;
}

void AdaParser::Protected_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProtected_body(this);
}

void AdaParser::Protected_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProtected_body(this);
}

AdaParser::Protected_bodyContext* AdaParser::protected_body() {
  Protected_bodyContext *_localctx = _tracker.createInstance<Protected_bodyContext>(_ctx, getState());
  enterRule(_localctx, 368, AdaParser::RuleProtected_body);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2405);
    match(AdaParser::PROTECTED);
    setState(2406);
    match(AdaParser::BODY_);
    setState(2407);
    defining_identifier();
    setState(2409);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::WITH) {
      setState(2408);
      aspect_specification();
    }
    setState(2411);
    match(AdaParser::IS);
    setState(2415);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 299342250377216) != 0)) {
      setState(2412);
      protected_operation_item();
      setState(2417);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2418);
    match(AdaParser::END);
    setState(2420);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::IDENTIFIER_) {
      setState(2419);
      identifier();
    }
    setState(2422);
    match(AdaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Protected_operation_itemContext ------------------------------------------------------------------

AdaParser::Protected_operation_itemContext::Protected_operation_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Subprogram_declarationContext* AdaParser::Protected_operation_itemContext::subprogram_declaration() {
  return getRuleContext<AdaParser::Subprogram_declarationContext>(0);
}

AdaParser::Subprogram_bodyContext* AdaParser::Protected_operation_itemContext::subprogram_body() {
  return getRuleContext<AdaParser::Subprogram_bodyContext>(0);
}

AdaParser::Entry_bodyContext* AdaParser::Protected_operation_itemContext::entry_body() {
  return getRuleContext<AdaParser::Entry_bodyContext>(0);
}

AdaParser::Aspect_clauseContext* AdaParser::Protected_operation_itemContext::aspect_clause() {
  return getRuleContext<AdaParser::Aspect_clauseContext>(0);
}


size_t AdaParser::Protected_operation_itemContext::getRuleIndex() const {
  return AdaParser::RuleProtected_operation_item;
}

void AdaParser::Protected_operation_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProtected_operation_item(this);
}

void AdaParser::Protected_operation_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProtected_operation_item(this);
}

AdaParser::Protected_operation_itemContext* AdaParser::protected_operation_item() {
  Protected_operation_itemContext *_localctx = _tracker.createInstance<Protected_operation_itemContext>(_ctx, getState());
  enterRule(_localctx, 370, AdaParser::RuleProtected_operation_item);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2428);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 281, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2424);
      subprogram_declaration();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2425);
      subprogram_body();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2426);
      entry_body();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2427);
      aspect_clause();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Entry_declarationContext ------------------------------------------------------------------

AdaParser::Entry_declarationContext::Entry_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Entry_declarationContext::ENTRY() {
  return getToken(AdaParser::ENTRY, 0);
}

AdaParser::Defining_identifierContext* AdaParser::Entry_declarationContext::defining_identifier() {
  return getRuleContext<AdaParser::Defining_identifierContext>(0);
}

tree::TerminalNode* AdaParser::Entry_declarationContext::SEMI() {
  return getToken(AdaParser::SEMI, 0);
}

AdaParser::Overriding_indicatorContext* AdaParser::Entry_declarationContext::overriding_indicator() {
  return getRuleContext<AdaParser::Overriding_indicatorContext>(0);
}

tree::TerminalNode* AdaParser::Entry_declarationContext::LP() {
  return getToken(AdaParser::LP, 0);
}

AdaParser::Discrete_subtype_definitionContext* AdaParser::Entry_declarationContext::discrete_subtype_definition() {
  return getRuleContext<AdaParser::Discrete_subtype_definitionContext>(0);
}

tree::TerminalNode* AdaParser::Entry_declarationContext::RP() {
  return getToken(AdaParser::RP, 0);
}

AdaParser::Formal_partContext* AdaParser::Entry_declarationContext::formal_part() {
  return getRuleContext<AdaParser::Formal_partContext>(0);
}

AdaParser::Aspect_specificationContext* AdaParser::Entry_declarationContext::aspect_specification() {
  return getRuleContext<AdaParser::Aspect_specificationContext>(0);
}


size_t AdaParser::Entry_declarationContext::getRuleIndex() const {
  return AdaParser::RuleEntry_declaration;
}

void AdaParser::Entry_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEntry_declaration(this);
}

void AdaParser::Entry_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEntry_declaration(this);
}

AdaParser::Entry_declarationContext* AdaParser::entry_declaration() {
  Entry_declarationContext *_localctx = _tracker.createInstance<Entry_declarationContext>(_ctx, getState());
  enterRule(_localctx, 372, AdaParser::RuleEntry_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2431);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::NOT

    || _la == AdaParser::OVERRIDING) {
      setState(2430);
      overriding_indicator();
    }
    setState(2433);
    match(AdaParser::ENTRY);
    setState(2434);
    defining_identifier();
    setState(2439);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 283, _ctx)) {
    case 1: {
      setState(2435);
      match(AdaParser::LP);
      setState(2436);
      discrete_subtype_definition();
      setState(2437);
      match(AdaParser::RP);
      break;
    }

    default:
      break;
    }
    setState(2442);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::LP) {
      setState(2441);
      formal_part();
    }
    setState(2445);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::WITH) {
      setState(2444);
      aspect_specification();
    }
    setState(2447);
    match(AdaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Accept_statementContext ------------------------------------------------------------------

AdaParser::Accept_statementContext::Accept_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Accept_statementContext::ACCEPT_() {
  return getToken(AdaParser::ACCEPT_, 0);
}

AdaParser::Entry_direct_nameContext* AdaParser::Accept_statementContext::entry_direct_name() {
  return getRuleContext<AdaParser::Entry_direct_nameContext>(0);
}

tree::TerminalNode* AdaParser::Accept_statementContext::SEMI() {
  return getToken(AdaParser::SEMI, 0);
}

tree::TerminalNode* AdaParser::Accept_statementContext::LP() {
  return getToken(AdaParser::LP, 0);
}

AdaParser::Entry_indexContext* AdaParser::Accept_statementContext::entry_index() {
  return getRuleContext<AdaParser::Entry_indexContext>(0);
}

tree::TerminalNode* AdaParser::Accept_statementContext::RP() {
  return getToken(AdaParser::RP, 0);
}

AdaParser::Formal_partContext* AdaParser::Accept_statementContext::formal_part() {
  return getRuleContext<AdaParser::Formal_partContext>(0);
}

tree::TerminalNode* AdaParser::Accept_statementContext::DO() {
  return getToken(AdaParser::DO, 0);
}

AdaParser::Handled_sequence_of_statementsContext* AdaParser::Accept_statementContext::handled_sequence_of_statements() {
  return getRuleContext<AdaParser::Handled_sequence_of_statementsContext>(0);
}

tree::TerminalNode* AdaParser::Accept_statementContext::END() {
  return getToken(AdaParser::END, 0);
}

AdaParser::Entry_identifierContext* AdaParser::Accept_statementContext::entry_identifier() {
  return getRuleContext<AdaParser::Entry_identifierContext>(0);
}


size_t AdaParser::Accept_statementContext::getRuleIndex() const {
  return AdaParser::RuleAccept_statement;
}

void AdaParser::Accept_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAccept_statement(this);
}

void AdaParser::Accept_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAccept_statement(this);
}

AdaParser::Accept_statementContext* AdaParser::accept_statement() {
  Accept_statementContext *_localctx = _tracker.createInstance<Accept_statementContext>(_ctx, getState());
  enterRule(_localctx, 374, AdaParser::RuleAccept_statement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2449);
    match(AdaParser::ACCEPT_);
    setState(2450);
    entry_direct_name();
    setState(2455);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 286, _ctx)) {
    case 1: {
      setState(2451);
      match(AdaParser::LP);
      setState(2452);
      entry_index();
      setState(2453);
      match(AdaParser::RP);
      break;
    }

    default:
      break;
    }
    setState(2458);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::LP) {
      setState(2457);
      formal_part();
    }
    setState(2466);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::DO) {
      setState(2460);
      match(AdaParser::DO);
      setState(2461);
      handled_sequence_of_statements();
      setState(2462);
      match(AdaParser::END);
      setState(2464);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::IDENTIFIER_) {
        setState(2463);
        entry_identifier();
      }
    }
    setState(2468);
    match(AdaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Entry_direct_nameContext ------------------------------------------------------------------

AdaParser::Entry_direct_nameContext::Entry_direct_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Direct_nameContext* AdaParser::Entry_direct_nameContext::direct_name() {
  return getRuleContext<AdaParser::Direct_nameContext>(0);
}


size_t AdaParser::Entry_direct_nameContext::getRuleIndex() const {
  return AdaParser::RuleEntry_direct_name;
}

void AdaParser::Entry_direct_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEntry_direct_name(this);
}

void AdaParser::Entry_direct_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEntry_direct_name(this);
}

AdaParser::Entry_direct_nameContext* AdaParser::entry_direct_name() {
  Entry_direct_nameContext *_localctx = _tracker.createInstance<Entry_direct_nameContext>(_ctx, getState());
  enterRule(_localctx, 376, AdaParser::RuleEntry_direct_name);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2470);
    direct_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Entry_indexContext ------------------------------------------------------------------

AdaParser::Entry_indexContext::Entry_indexContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::ExpressionContext* AdaParser::Entry_indexContext::expression() {
  return getRuleContext<AdaParser::ExpressionContext>(0);
}


size_t AdaParser::Entry_indexContext::getRuleIndex() const {
  return AdaParser::RuleEntry_index;
}

void AdaParser::Entry_indexContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEntry_index(this);
}

void AdaParser::Entry_indexContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEntry_index(this);
}

AdaParser::Entry_indexContext* AdaParser::entry_index() {
  Entry_indexContext *_localctx = _tracker.createInstance<Entry_indexContext>(_ctx, getState());
  enterRule(_localctx, 378, AdaParser::RuleEntry_index);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2472);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Entry_bodyContext ------------------------------------------------------------------

AdaParser::Entry_bodyContext::Entry_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Entry_bodyContext::ENTRY() {
  return getToken(AdaParser::ENTRY, 0);
}

AdaParser::Defining_identifierContext* AdaParser::Entry_bodyContext::defining_identifier() {
  return getRuleContext<AdaParser::Defining_identifierContext>(0);
}

AdaParser::Entry_body_formal_partContext* AdaParser::Entry_bodyContext::entry_body_formal_part() {
  return getRuleContext<AdaParser::Entry_body_formal_partContext>(0);
}

AdaParser::Entry_barrierContext* AdaParser::Entry_bodyContext::entry_barrier() {
  return getRuleContext<AdaParser::Entry_barrierContext>(0);
}

tree::TerminalNode* AdaParser::Entry_bodyContext::IS() {
  return getToken(AdaParser::IS, 0);
}

AdaParser::Declarative_partContext* AdaParser::Entry_bodyContext::declarative_part() {
  return getRuleContext<AdaParser::Declarative_partContext>(0);
}

tree::TerminalNode* AdaParser::Entry_bodyContext::BEGIN() {
  return getToken(AdaParser::BEGIN, 0);
}

AdaParser::Handled_sequence_of_statementsContext* AdaParser::Entry_bodyContext::handled_sequence_of_statements() {
  return getRuleContext<AdaParser::Handled_sequence_of_statementsContext>(0);
}

tree::TerminalNode* AdaParser::Entry_bodyContext::END() {
  return getToken(AdaParser::END, 0);
}

tree::TerminalNode* AdaParser::Entry_bodyContext::SEMI() {
  return getToken(AdaParser::SEMI, 0);
}

AdaParser::Entry_identifierContext* AdaParser::Entry_bodyContext::entry_identifier() {
  return getRuleContext<AdaParser::Entry_identifierContext>(0);
}


size_t AdaParser::Entry_bodyContext::getRuleIndex() const {
  return AdaParser::RuleEntry_body;
}

void AdaParser::Entry_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEntry_body(this);
}

void AdaParser::Entry_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEntry_body(this);
}

AdaParser::Entry_bodyContext* AdaParser::entry_body() {
  Entry_bodyContext *_localctx = _tracker.createInstance<Entry_bodyContext>(_ctx, getState());
  enterRule(_localctx, 380, AdaParser::RuleEntry_body);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2474);
    match(AdaParser::ENTRY);
    setState(2475);
    defining_identifier();
    setState(2476);
    entry_body_formal_part();
    setState(2477);
    entry_barrier();
    setState(2478);
    match(AdaParser::IS);
    setState(2479);
    declarative_part();
    setState(2480);
    match(AdaParser::BEGIN);
    setState(2481);
    handled_sequence_of_statements();
    setState(2482);
    match(AdaParser::END);
    setState(2484);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::IDENTIFIER_) {
      setState(2483);
      entry_identifier();
    }
    setState(2486);
    match(AdaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Entry_identifierContext ------------------------------------------------------------------

AdaParser::Entry_identifierContext::Entry_identifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::IdentifierContext* AdaParser::Entry_identifierContext::identifier() {
  return getRuleContext<AdaParser::IdentifierContext>(0);
}


size_t AdaParser::Entry_identifierContext::getRuleIndex() const {
  return AdaParser::RuleEntry_identifier;
}

void AdaParser::Entry_identifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEntry_identifier(this);
}

void AdaParser::Entry_identifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEntry_identifier(this);
}

AdaParser::Entry_identifierContext* AdaParser::entry_identifier() {
  Entry_identifierContext *_localctx = _tracker.createInstance<Entry_identifierContext>(_ctx, getState());
  enterRule(_localctx, 382, AdaParser::RuleEntry_identifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2488);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Entry_body_formal_partContext ------------------------------------------------------------------

AdaParser::Entry_body_formal_partContext::Entry_body_formal_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Entry_body_formal_partContext::LP() {
  return getToken(AdaParser::LP, 0);
}

AdaParser::Entry_index_specificationContext* AdaParser::Entry_body_formal_partContext::entry_index_specification() {
  return getRuleContext<AdaParser::Entry_index_specificationContext>(0);
}

tree::TerminalNode* AdaParser::Entry_body_formal_partContext::RP() {
  return getToken(AdaParser::RP, 0);
}

AdaParser::Formal_partContext* AdaParser::Entry_body_formal_partContext::formal_part() {
  return getRuleContext<AdaParser::Formal_partContext>(0);
}


size_t AdaParser::Entry_body_formal_partContext::getRuleIndex() const {
  return AdaParser::RuleEntry_body_formal_part;
}

void AdaParser::Entry_body_formal_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEntry_body_formal_part(this);
}

void AdaParser::Entry_body_formal_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEntry_body_formal_part(this);
}

AdaParser::Entry_body_formal_partContext* AdaParser::entry_body_formal_part() {
  Entry_body_formal_partContext *_localctx = _tracker.createInstance<Entry_body_formal_partContext>(_ctx, getState());
  enterRule(_localctx, 384, AdaParser::RuleEntry_body_formal_part);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2494);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 291, _ctx)) {
    case 1: {
      setState(2490);
      match(AdaParser::LP);
      setState(2491);
      entry_index_specification();
      setState(2492);
      match(AdaParser::RP);
      break;
    }

    default:
      break;
    }
    setState(2497);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::LP) {
      setState(2496);
      formal_part();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Entry_barrierContext ------------------------------------------------------------------

AdaParser::Entry_barrierContext::Entry_barrierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Entry_barrierContext::WHEN() {
  return getToken(AdaParser::WHEN, 0);
}

AdaParser::ConditionContext* AdaParser::Entry_barrierContext::condition() {
  return getRuleContext<AdaParser::ConditionContext>(0);
}


size_t AdaParser::Entry_barrierContext::getRuleIndex() const {
  return AdaParser::RuleEntry_barrier;
}

void AdaParser::Entry_barrierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEntry_barrier(this);
}

void AdaParser::Entry_barrierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEntry_barrier(this);
}

AdaParser::Entry_barrierContext* AdaParser::entry_barrier() {
  Entry_barrierContext *_localctx = _tracker.createInstance<Entry_barrierContext>(_ctx, getState());
  enterRule(_localctx, 386, AdaParser::RuleEntry_barrier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2499);
    match(AdaParser::WHEN);
    setState(2500);
    condition();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Entry_index_specificationContext ------------------------------------------------------------------

AdaParser::Entry_index_specificationContext::Entry_index_specificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Entry_index_specificationContext::FOR() {
  return getToken(AdaParser::FOR, 0);
}

AdaParser::Defining_identifierContext* AdaParser::Entry_index_specificationContext::defining_identifier() {
  return getRuleContext<AdaParser::Defining_identifierContext>(0);
}

tree::TerminalNode* AdaParser::Entry_index_specificationContext::IN() {
  return getToken(AdaParser::IN, 0);
}

AdaParser::Discrete_subtype_definitionContext* AdaParser::Entry_index_specificationContext::discrete_subtype_definition() {
  return getRuleContext<AdaParser::Discrete_subtype_definitionContext>(0);
}


size_t AdaParser::Entry_index_specificationContext::getRuleIndex() const {
  return AdaParser::RuleEntry_index_specification;
}

void AdaParser::Entry_index_specificationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEntry_index_specification(this);
}

void AdaParser::Entry_index_specificationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEntry_index_specification(this);
}

AdaParser::Entry_index_specificationContext* AdaParser::entry_index_specification() {
  Entry_index_specificationContext *_localctx = _tracker.createInstance<Entry_index_specificationContext>(_ctx, getState());
  enterRule(_localctx, 388, AdaParser::RuleEntry_index_specification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2502);
    match(AdaParser::FOR);
    setState(2503);
    defining_identifier();
    setState(2504);
    match(AdaParser::IN);
    setState(2505);
    discrete_subtype_definition();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Entry_call_statementContext ------------------------------------------------------------------

AdaParser::Entry_call_statementContext::Entry_call_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::NameContext* AdaParser::Entry_call_statementContext::name() {
  return getRuleContext<AdaParser::NameContext>(0);
}

tree::TerminalNode* AdaParser::Entry_call_statementContext::SEMI() {
  return getToken(AdaParser::SEMI, 0);
}

AdaParser::Actual_parameter_partContext* AdaParser::Entry_call_statementContext::actual_parameter_part() {
  return getRuleContext<AdaParser::Actual_parameter_partContext>(0);
}


size_t AdaParser::Entry_call_statementContext::getRuleIndex() const {
  return AdaParser::RuleEntry_call_statement;
}

void AdaParser::Entry_call_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEntry_call_statement(this);
}

void AdaParser::Entry_call_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEntry_call_statement(this);
}

AdaParser::Entry_call_statementContext* AdaParser::entry_call_statement() {
  Entry_call_statementContext *_localctx = _tracker.createInstance<Entry_call_statementContext>(_ctx, getState());
  enterRule(_localctx, 390, AdaParser::RuleEntry_call_statement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2507);
    name(0);
    setState(2509);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::LP) {
      setState(2508);
      actual_parameter_part();
    }
    setState(2511);
    match(AdaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Requeue_statementContext ------------------------------------------------------------------

AdaParser::Requeue_statementContext::Requeue_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Requeue_statementContext::REQUEUE() {
  return getToken(AdaParser::REQUEUE, 0);
}

AdaParser::NameContext* AdaParser::Requeue_statementContext::name() {
  return getRuleContext<AdaParser::NameContext>(0);
}

tree::TerminalNode* AdaParser::Requeue_statementContext::SEMI() {
  return getToken(AdaParser::SEMI, 0);
}

tree::TerminalNode* AdaParser::Requeue_statementContext::WITH() {
  return getToken(AdaParser::WITH, 0);
}

tree::TerminalNode* AdaParser::Requeue_statementContext::ABORT() {
  return getToken(AdaParser::ABORT, 0);
}


size_t AdaParser::Requeue_statementContext::getRuleIndex() const {
  return AdaParser::RuleRequeue_statement;
}

void AdaParser::Requeue_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRequeue_statement(this);
}

void AdaParser::Requeue_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRequeue_statement(this);
}

AdaParser::Requeue_statementContext* AdaParser::requeue_statement() {
  Requeue_statementContext *_localctx = _tracker.createInstance<Requeue_statementContext>(_ctx, getState());
  enterRule(_localctx, 392, AdaParser::RuleRequeue_statement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2513);
    match(AdaParser::REQUEUE);
    setState(2514);
    name(0);
    setState(2517);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::WITH) {
      setState(2515);
      match(AdaParser::WITH);
      setState(2516);
      match(AdaParser::ABORT);
    }
    setState(2519);
    match(AdaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Delay_statementContext ------------------------------------------------------------------

AdaParser::Delay_statementContext::Delay_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Delay_until_statementContext* AdaParser::Delay_statementContext::delay_until_statement() {
  return getRuleContext<AdaParser::Delay_until_statementContext>(0);
}

AdaParser::Delay_relative_statementContext* AdaParser::Delay_statementContext::delay_relative_statement() {
  return getRuleContext<AdaParser::Delay_relative_statementContext>(0);
}


size_t AdaParser::Delay_statementContext::getRuleIndex() const {
  return AdaParser::RuleDelay_statement;
}

void AdaParser::Delay_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDelay_statement(this);
}

void AdaParser::Delay_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDelay_statement(this);
}

AdaParser::Delay_statementContext* AdaParser::delay_statement() {
  Delay_statementContext *_localctx = _tracker.createInstance<Delay_statementContext>(_ctx, getState());
  enterRule(_localctx, 394, AdaParser::RuleDelay_statement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2523);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 295, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2521);
      delay_until_statement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2522);
      delay_relative_statement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Delay_until_statementContext ------------------------------------------------------------------

AdaParser::Delay_until_statementContext::Delay_until_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Delay_until_statementContext::DELAY() {
  return getToken(AdaParser::DELAY, 0);
}

tree::TerminalNode* AdaParser::Delay_until_statementContext::UNTIL() {
  return getToken(AdaParser::UNTIL, 0);
}

AdaParser::Delay_expressionContext* AdaParser::Delay_until_statementContext::delay_expression() {
  return getRuleContext<AdaParser::Delay_expressionContext>(0);
}


size_t AdaParser::Delay_until_statementContext::getRuleIndex() const {
  return AdaParser::RuleDelay_until_statement;
}

void AdaParser::Delay_until_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDelay_until_statement(this);
}

void AdaParser::Delay_until_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDelay_until_statement(this);
}

AdaParser::Delay_until_statementContext* AdaParser::delay_until_statement() {
  Delay_until_statementContext *_localctx = _tracker.createInstance<Delay_until_statementContext>(_ctx, getState());
  enterRule(_localctx, 396, AdaParser::RuleDelay_until_statement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2525);
    match(AdaParser::DELAY);
    setState(2526);
    match(AdaParser::UNTIL);
    setState(2527);
    delay_expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Delay_relative_statementContext ------------------------------------------------------------------

AdaParser::Delay_relative_statementContext::Delay_relative_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Delay_relative_statementContext::DELAY() {
  return getToken(AdaParser::DELAY, 0);
}

AdaParser::Delay_expressionContext* AdaParser::Delay_relative_statementContext::delay_expression() {
  return getRuleContext<AdaParser::Delay_expressionContext>(0);
}


size_t AdaParser::Delay_relative_statementContext::getRuleIndex() const {
  return AdaParser::RuleDelay_relative_statement;
}

void AdaParser::Delay_relative_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDelay_relative_statement(this);
}

void AdaParser::Delay_relative_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDelay_relative_statement(this);
}

AdaParser::Delay_relative_statementContext* AdaParser::delay_relative_statement() {
  Delay_relative_statementContext *_localctx = _tracker.createInstance<Delay_relative_statementContext>(_ctx, getState());
  enterRule(_localctx, 398, AdaParser::RuleDelay_relative_statement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2529);
    match(AdaParser::DELAY);
    setState(2530);
    delay_expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Delay_expressionContext ------------------------------------------------------------------

AdaParser::Delay_expressionContext::Delay_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::ExpressionContext* AdaParser::Delay_expressionContext::expression() {
  return getRuleContext<AdaParser::ExpressionContext>(0);
}


size_t AdaParser::Delay_expressionContext::getRuleIndex() const {
  return AdaParser::RuleDelay_expression;
}

void AdaParser::Delay_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDelay_expression(this);
}

void AdaParser::Delay_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDelay_expression(this);
}

AdaParser::Delay_expressionContext* AdaParser::delay_expression() {
  Delay_expressionContext *_localctx = _tracker.createInstance<Delay_expressionContext>(_ctx, getState());
  enterRule(_localctx, 400, AdaParser::RuleDelay_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2532);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Select_statementContext ------------------------------------------------------------------

AdaParser::Select_statementContext::Select_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Selective_acceptContext* AdaParser::Select_statementContext::selective_accept() {
  return getRuleContext<AdaParser::Selective_acceptContext>(0);
}

AdaParser::Timed_entry_callContext* AdaParser::Select_statementContext::timed_entry_call() {
  return getRuleContext<AdaParser::Timed_entry_callContext>(0);
}

AdaParser::Conditional_entry_callContext* AdaParser::Select_statementContext::conditional_entry_call() {
  return getRuleContext<AdaParser::Conditional_entry_callContext>(0);
}

AdaParser::Asynchronous_selectContext* AdaParser::Select_statementContext::asynchronous_select() {
  return getRuleContext<AdaParser::Asynchronous_selectContext>(0);
}


size_t AdaParser::Select_statementContext::getRuleIndex() const {
  return AdaParser::RuleSelect_statement;
}

void AdaParser::Select_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelect_statement(this);
}

void AdaParser::Select_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelect_statement(this);
}

AdaParser::Select_statementContext* AdaParser::select_statement() {
  Select_statementContext *_localctx = _tracker.createInstance<Select_statementContext>(_ctx, getState());
  enterRule(_localctx, 402, AdaParser::RuleSelect_statement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2538);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 296, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2534);
      selective_accept();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2535);
      timed_entry_call();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2536);
      conditional_entry_call();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2537);
      asynchronous_select();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Selective_acceptContext ------------------------------------------------------------------

AdaParser::Selective_acceptContext::Selective_acceptContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> AdaParser::Selective_acceptContext::SELECT() {
  return getTokens(AdaParser::SELECT);
}

tree::TerminalNode* AdaParser::Selective_acceptContext::SELECT(size_t i) {
  return getToken(AdaParser::SELECT, i);
}

std::vector<AdaParser::Select_alternativeContext *> AdaParser::Selective_acceptContext::select_alternative() {
  return getRuleContexts<AdaParser::Select_alternativeContext>();
}

AdaParser::Select_alternativeContext* AdaParser::Selective_acceptContext::select_alternative(size_t i) {
  return getRuleContext<AdaParser::Select_alternativeContext>(i);
}

tree::TerminalNode* AdaParser::Selective_acceptContext::END() {
  return getToken(AdaParser::END, 0);
}

tree::TerminalNode* AdaParser::Selective_acceptContext::SEMI() {
  return getToken(AdaParser::SEMI, 0);
}

std::vector<AdaParser::GuardContext *> AdaParser::Selective_acceptContext::guard() {
  return getRuleContexts<AdaParser::GuardContext>();
}

AdaParser::GuardContext* AdaParser::Selective_acceptContext::guard(size_t i) {
  return getRuleContext<AdaParser::GuardContext>(i);
}

std::vector<tree::TerminalNode *> AdaParser::Selective_acceptContext::OR() {
  return getTokens(AdaParser::OR);
}

tree::TerminalNode* AdaParser::Selective_acceptContext::OR(size_t i) {
  return getToken(AdaParser::OR, i);
}

tree::TerminalNode* AdaParser::Selective_acceptContext::ELSE() {
  return getToken(AdaParser::ELSE, 0);
}

AdaParser::Sequence_of_statementsContext* AdaParser::Selective_acceptContext::sequence_of_statements() {
  return getRuleContext<AdaParser::Sequence_of_statementsContext>(0);
}


size_t AdaParser::Selective_acceptContext::getRuleIndex() const {
  return AdaParser::RuleSelective_accept;
}

void AdaParser::Selective_acceptContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelective_accept(this);
}

void AdaParser::Selective_acceptContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelective_accept(this);
}

AdaParser::Selective_acceptContext* AdaParser::selective_accept() {
  Selective_acceptContext *_localctx = _tracker.createInstance<Selective_acceptContext>(_ctx, getState());
  enterRule(_localctx, 404, AdaParser::RuleSelective_accept);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2540);
    match(AdaParser::SELECT);
    setState(2542);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::WHEN) {
      setState(2541);
      guard();
    }
    setState(2544);
    select_alternative();
    setState(2552);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == AdaParser::OR) {
      setState(2545);
      match(AdaParser::OR);
      setState(2547);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::WHEN) {
        setState(2546);
        guard();
      }
      setState(2549);
      select_alternative();
      setState(2554);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2557);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::ELSE) {
      setState(2555);
      match(AdaParser::ELSE);
      setState(2556);
      sequence_of_statements();
    }
    setState(2559);
    match(AdaParser::END);
    setState(2560);
    match(AdaParser::SELECT);
    setState(2561);
    match(AdaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GuardContext ------------------------------------------------------------------

AdaParser::GuardContext::GuardContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::GuardContext::WHEN() {
  return getToken(AdaParser::WHEN, 0);
}

AdaParser::ConditionContext* AdaParser::GuardContext::condition() {
  return getRuleContext<AdaParser::ConditionContext>(0);
}

tree::TerminalNode* AdaParser::GuardContext::ARROW() {
  return getToken(AdaParser::ARROW, 0);
}


size_t AdaParser::GuardContext::getRuleIndex() const {
  return AdaParser::RuleGuard;
}

void AdaParser::GuardContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGuard(this);
}

void AdaParser::GuardContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGuard(this);
}

AdaParser::GuardContext* AdaParser::guard() {
  GuardContext *_localctx = _tracker.createInstance<GuardContext>(_ctx, getState());
  enterRule(_localctx, 406, AdaParser::RuleGuard);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2563);
    match(AdaParser::WHEN);
    setState(2564);
    condition();
    setState(2565);
    match(AdaParser::ARROW);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Select_alternativeContext ------------------------------------------------------------------

AdaParser::Select_alternativeContext::Select_alternativeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Accept_alternativeContext* AdaParser::Select_alternativeContext::accept_alternative() {
  return getRuleContext<AdaParser::Accept_alternativeContext>(0);
}

AdaParser::Delay_alternativeContext* AdaParser::Select_alternativeContext::delay_alternative() {
  return getRuleContext<AdaParser::Delay_alternativeContext>(0);
}

AdaParser::Terminate_alternativeContext* AdaParser::Select_alternativeContext::terminate_alternative() {
  return getRuleContext<AdaParser::Terminate_alternativeContext>(0);
}


size_t AdaParser::Select_alternativeContext::getRuleIndex() const {
  return AdaParser::RuleSelect_alternative;
}

void AdaParser::Select_alternativeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelect_alternative(this);
}

void AdaParser::Select_alternativeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelect_alternative(this);
}

AdaParser::Select_alternativeContext* AdaParser::select_alternative() {
  Select_alternativeContext *_localctx = _tracker.createInstance<Select_alternativeContext>(_ctx, getState());
  enterRule(_localctx, 408, AdaParser::RuleSelect_alternative);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2570);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AdaParser::ACCEPT_: {
        enterOuterAlt(_localctx, 1);
        setState(2567);
        accept_alternative();
        break;
      }

      case AdaParser::DELAY: {
        enterOuterAlt(_localctx, 2);
        setState(2568);
        delay_alternative();
        break;
      }

      case AdaParser::TERMINATE: {
        enterOuterAlt(_localctx, 3);
        setState(2569);
        terminate_alternative();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Accept_alternativeContext ------------------------------------------------------------------

AdaParser::Accept_alternativeContext::Accept_alternativeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Accept_statementContext* AdaParser::Accept_alternativeContext::accept_statement() {
  return getRuleContext<AdaParser::Accept_statementContext>(0);
}

AdaParser::Sequence_of_statementsContext* AdaParser::Accept_alternativeContext::sequence_of_statements() {
  return getRuleContext<AdaParser::Sequence_of_statementsContext>(0);
}


size_t AdaParser::Accept_alternativeContext::getRuleIndex() const {
  return AdaParser::RuleAccept_alternative;
}

void AdaParser::Accept_alternativeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAccept_alternative(this);
}

void AdaParser::Accept_alternativeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAccept_alternative(this);
}

AdaParser::Accept_alternativeContext* AdaParser::accept_alternative() {
  Accept_alternativeContext *_localctx = _tracker.createInstance<Accept_alternativeContext>(_ctx, getState());
  enterRule(_localctx, 410, AdaParser::RuleAccept_alternative);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2572);
    accept_statement();
    setState(2574);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 397443252942383122) != 0) || ((((_la - 71) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 71)) & 1573889) != 0)) {
      setState(2573);
      sequence_of_statements();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Delay_alternativeContext ------------------------------------------------------------------

AdaParser::Delay_alternativeContext::Delay_alternativeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Delay_statementContext* AdaParser::Delay_alternativeContext::delay_statement() {
  return getRuleContext<AdaParser::Delay_statementContext>(0);
}

AdaParser::Sequence_of_statementsContext* AdaParser::Delay_alternativeContext::sequence_of_statements() {
  return getRuleContext<AdaParser::Sequence_of_statementsContext>(0);
}


size_t AdaParser::Delay_alternativeContext::getRuleIndex() const {
  return AdaParser::RuleDelay_alternative;
}

void AdaParser::Delay_alternativeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDelay_alternative(this);
}

void AdaParser::Delay_alternativeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDelay_alternative(this);
}

AdaParser::Delay_alternativeContext* AdaParser::delay_alternative() {
  Delay_alternativeContext *_localctx = _tracker.createInstance<Delay_alternativeContext>(_ctx, getState());
  enterRule(_localctx, 412, AdaParser::RuleDelay_alternative);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2576);
    delay_statement();
    setState(2578);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 397443252942383122) != 0) || ((((_la - 71) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 71)) & 1573889) != 0)) {
      setState(2577);
      sequence_of_statements();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Terminate_alternativeContext ------------------------------------------------------------------

AdaParser::Terminate_alternativeContext::Terminate_alternativeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Terminate_alternativeContext::TERMINATE() {
  return getToken(AdaParser::TERMINATE, 0);
}

tree::TerminalNode* AdaParser::Terminate_alternativeContext::SEMI() {
  return getToken(AdaParser::SEMI, 0);
}


size_t AdaParser::Terminate_alternativeContext::getRuleIndex() const {
  return AdaParser::RuleTerminate_alternative;
}

void AdaParser::Terminate_alternativeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTerminate_alternative(this);
}

void AdaParser::Terminate_alternativeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTerminate_alternative(this);
}

AdaParser::Terminate_alternativeContext* AdaParser::terminate_alternative() {
  Terminate_alternativeContext *_localctx = _tracker.createInstance<Terminate_alternativeContext>(_ctx, getState());
  enterRule(_localctx, 414, AdaParser::RuleTerminate_alternative);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2580);
    match(AdaParser::TERMINATE);
    setState(2581);
    match(AdaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Timed_entry_callContext ------------------------------------------------------------------

AdaParser::Timed_entry_callContext::Timed_entry_callContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> AdaParser::Timed_entry_callContext::SELECT() {
  return getTokens(AdaParser::SELECT);
}

tree::TerminalNode* AdaParser::Timed_entry_callContext::SELECT(size_t i) {
  return getToken(AdaParser::SELECT, i);
}

AdaParser::Entry_call_alternativeContext* AdaParser::Timed_entry_callContext::entry_call_alternative() {
  return getRuleContext<AdaParser::Entry_call_alternativeContext>(0);
}

tree::TerminalNode* AdaParser::Timed_entry_callContext::OR() {
  return getToken(AdaParser::OR, 0);
}

AdaParser::Delay_alternativeContext* AdaParser::Timed_entry_callContext::delay_alternative() {
  return getRuleContext<AdaParser::Delay_alternativeContext>(0);
}

tree::TerminalNode* AdaParser::Timed_entry_callContext::END() {
  return getToken(AdaParser::END, 0);
}

tree::TerminalNode* AdaParser::Timed_entry_callContext::SEMI() {
  return getToken(AdaParser::SEMI, 0);
}


size_t AdaParser::Timed_entry_callContext::getRuleIndex() const {
  return AdaParser::RuleTimed_entry_call;
}

void AdaParser::Timed_entry_callContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTimed_entry_call(this);
}

void AdaParser::Timed_entry_callContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTimed_entry_call(this);
}

AdaParser::Timed_entry_callContext* AdaParser::timed_entry_call() {
  Timed_entry_callContext *_localctx = _tracker.createInstance<Timed_entry_callContext>(_ctx, getState());
  enterRule(_localctx, 416, AdaParser::RuleTimed_entry_call);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2583);
    match(AdaParser::SELECT);
    setState(2584);
    entry_call_alternative();
    setState(2585);
    match(AdaParser::OR);
    setState(2586);
    delay_alternative();
    setState(2587);
    match(AdaParser::END);
    setState(2588);
    match(AdaParser::SELECT);
    setState(2589);
    match(AdaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Entry_call_alternativeContext ------------------------------------------------------------------

AdaParser::Entry_call_alternativeContext::Entry_call_alternativeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Procedure_or_entry_callContext* AdaParser::Entry_call_alternativeContext::procedure_or_entry_call() {
  return getRuleContext<AdaParser::Procedure_or_entry_callContext>(0);
}

AdaParser::Sequence_of_statementsContext* AdaParser::Entry_call_alternativeContext::sequence_of_statements() {
  return getRuleContext<AdaParser::Sequence_of_statementsContext>(0);
}


size_t AdaParser::Entry_call_alternativeContext::getRuleIndex() const {
  return AdaParser::RuleEntry_call_alternative;
}

void AdaParser::Entry_call_alternativeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEntry_call_alternative(this);
}

void AdaParser::Entry_call_alternativeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEntry_call_alternative(this);
}

AdaParser::Entry_call_alternativeContext* AdaParser::entry_call_alternative() {
  Entry_call_alternativeContext *_localctx = _tracker.createInstance<Entry_call_alternativeContext>(_ctx, getState());
  enterRule(_localctx, 418, AdaParser::RuleEntry_call_alternative);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2591);
    procedure_or_entry_call();
    setState(2593);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 397443252942383122) != 0) || ((((_la - 71) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 71)) & 1573889) != 0)) {
      setState(2592);
      sequence_of_statements();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Procedure_or_entry_callContext ------------------------------------------------------------------

AdaParser::Procedure_or_entry_callContext::Procedure_or_entry_callContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Procedure_call_statementContext* AdaParser::Procedure_or_entry_callContext::procedure_call_statement() {
  return getRuleContext<AdaParser::Procedure_call_statementContext>(0);
}

AdaParser::Entry_call_statementContext* AdaParser::Procedure_or_entry_callContext::entry_call_statement() {
  return getRuleContext<AdaParser::Entry_call_statementContext>(0);
}


size_t AdaParser::Procedure_or_entry_callContext::getRuleIndex() const {
  return AdaParser::RuleProcedure_or_entry_call;
}

void AdaParser::Procedure_or_entry_callContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProcedure_or_entry_call(this);
}

void AdaParser::Procedure_or_entry_callContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProcedure_or_entry_call(this);
}

AdaParser::Procedure_or_entry_callContext* AdaParser::procedure_or_entry_call() {
  Procedure_or_entry_callContext *_localctx = _tracker.createInstance<Procedure_or_entry_callContext>(_ctx, getState());
  enterRule(_localctx, 420, AdaParser::RuleProcedure_or_entry_call);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2597);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 305, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2595);
      procedure_call_statement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2596);
      entry_call_statement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Conditional_entry_callContext ------------------------------------------------------------------

AdaParser::Conditional_entry_callContext::Conditional_entry_callContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> AdaParser::Conditional_entry_callContext::SELECT() {
  return getTokens(AdaParser::SELECT);
}

tree::TerminalNode* AdaParser::Conditional_entry_callContext::SELECT(size_t i) {
  return getToken(AdaParser::SELECT, i);
}

AdaParser::Entry_call_alternativeContext* AdaParser::Conditional_entry_callContext::entry_call_alternative() {
  return getRuleContext<AdaParser::Entry_call_alternativeContext>(0);
}

tree::TerminalNode* AdaParser::Conditional_entry_callContext::ELSE() {
  return getToken(AdaParser::ELSE, 0);
}

AdaParser::Sequence_of_statementsContext* AdaParser::Conditional_entry_callContext::sequence_of_statements() {
  return getRuleContext<AdaParser::Sequence_of_statementsContext>(0);
}

tree::TerminalNode* AdaParser::Conditional_entry_callContext::END() {
  return getToken(AdaParser::END, 0);
}

tree::TerminalNode* AdaParser::Conditional_entry_callContext::SEMI() {
  return getToken(AdaParser::SEMI, 0);
}


size_t AdaParser::Conditional_entry_callContext::getRuleIndex() const {
  return AdaParser::RuleConditional_entry_call;
}

void AdaParser::Conditional_entry_callContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConditional_entry_call(this);
}

void AdaParser::Conditional_entry_callContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConditional_entry_call(this);
}

AdaParser::Conditional_entry_callContext* AdaParser::conditional_entry_call() {
  Conditional_entry_callContext *_localctx = _tracker.createInstance<Conditional_entry_callContext>(_ctx, getState());
  enterRule(_localctx, 422, AdaParser::RuleConditional_entry_call);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2599);
    match(AdaParser::SELECT);
    setState(2600);
    entry_call_alternative();
    setState(2601);
    match(AdaParser::ELSE);
    setState(2602);
    sequence_of_statements();
    setState(2603);
    match(AdaParser::END);
    setState(2604);
    match(AdaParser::SELECT);
    setState(2605);
    match(AdaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Asynchronous_selectContext ------------------------------------------------------------------

AdaParser::Asynchronous_selectContext::Asynchronous_selectContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> AdaParser::Asynchronous_selectContext::SELECT() {
  return getTokens(AdaParser::SELECT);
}

tree::TerminalNode* AdaParser::Asynchronous_selectContext::SELECT(size_t i) {
  return getToken(AdaParser::SELECT, i);
}

AdaParser::Triggering_alternativeContext* AdaParser::Asynchronous_selectContext::triggering_alternative() {
  return getRuleContext<AdaParser::Triggering_alternativeContext>(0);
}

tree::TerminalNode* AdaParser::Asynchronous_selectContext::THEN() {
  return getToken(AdaParser::THEN, 0);
}

tree::TerminalNode* AdaParser::Asynchronous_selectContext::ABORT() {
  return getToken(AdaParser::ABORT, 0);
}

AdaParser::Abortable_partContext* AdaParser::Asynchronous_selectContext::abortable_part() {
  return getRuleContext<AdaParser::Abortable_partContext>(0);
}

tree::TerminalNode* AdaParser::Asynchronous_selectContext::END() {
  return getToken(AdaParser::END, 0);
}

tree::TerminalNode* AdaParser::Asynchronous_selectContext::SEMI() {
  return getToken(AdaParser::SEMI, 0);
}


size_t AdaParser::Asynchronous_selectContext::getRuleIndex() const {
  return AdaParser::RuleAsynchronous_select;
}

void AdaParser::Asynchronous_selectContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAsynchronous_select(this);
}

void AdaParser::Asynchronous_selectContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAsynchronous_select(this);
}

AdaParser::Asynchronous_selectContext* AdaParser::asynchronous_select() {
  Asynchronous_selectContext *_localctx = _tracker.createInstance<Asynchronous_selectContext>(_ctx, getState());
  enterRule(_localctx, 424, AdaParser::RuleAsynchronous_select);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2607);
    match(AdaParser::SELECT);
    setState(2608);
    triggering_alternative();
    setState(2609);
    match(AdaParser::THEN);
    setState(2610);
    match(AdaParser::ABORT);
    setState(2611);
    abortable_part();
    setState(2612);
    match(AdaParser::END);
    setState(2613);
    match(AdaParser::SELECT);
    setState(2614);
    match(AdaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Triggering_alternativeContext ------------------------------------------------------------------

AdaParser::Triggering_alternativeContext::Triggering_alternativeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Triggering_statementContext* AdaParser::Triggering_alternativeContext::triggering_statement() {
  return getRuleContext<AdaParser::Triggering_statementContext>(0);
}

AdaParser::Sequence_of_statementsContext* AdaParser::Triggering_alternativeContext::sequence_of_statements() {
  return getRuleContext<AdaParser::Sequence_of_statementsContext>(0);
}


size_t AdaParser::Triggering_alternativeContext::getRuleIndex() const {
  return AdaParser::RuleTriggering_alternative;
}

void AdaParser::Triggering_alternativeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTriggering_alternative(this);
}

void AdaParser::Triggering_alternativeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTriggering_alternative(this);
}

AdaParser::Triggering_alternativeContext* AdaParser::triggering_alternative() {
  Triggering_alternativeContext *_localctx = _tracker.createInstance<Triggering_alternativeContext>(_ctx, getState());
  enterRule(_localctx, 426, AdaParser::RuleTriggering_alternative);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2616);
    triggering_statement();
    setState(2618);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 397443252942383122) != 0) || ((((_la - 71) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 71)) & 1573889) != 0)) {
      setState(2617);
      sequence_of_statements();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Triggering_statementContext ------------------------------------------------------------------

AdaParser::Triggering_statementContext::Triggering_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Procedure_or_entry_callContext* AdaParser::Triggering_statementContext::procedure_or_entry_call() {
  return getRuleContext<AdaParser::Procedure_or_entry_callContext>(0);
}

AdaParser::Delay_statementContext* AdaParser::Triggering_statementContext::delay_statement() {
  return getRuleContext<AdaParser::Delay_statementContext>(0);
}


size_t AdaParser::Triggering_statementContext::getRuleIndex() const {
  return AdaParser::RuleTriggering_statement;
}

void AdaParser::Triggering_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTriggering_statement(this);
}

void AdaParser::Triggering_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTriggering_statement(this);
}

AdaParser::Triggering_statementContext* AdaParser::triggering_statement() {
  Triggering_statementContext *_localctx = _tracker.createInstance<Triggering_statementContext>(_ctx, getState());
  enterRule(_localctx, 428, AdaParser::RuleTriggering_statement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2622);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AdaParser::IDENTIFIER_:
      case AdaParser::CHARACTER_LITERAL_:
      case AdaParser::STRING_LITERAL_: {
        enterOuterAlt(_localctx, 1);
        setState(2620);
        procedure_or_entry_call();
        break;
      }

      case AdaParser::DELAY: {
        enterOuterAlt(_localctx, 2);
        setState(2621);
        delay_statement();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Abortable_partContext ------------------------------------------------------------------

AdaParser::Abortable_partContext::Abortable_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Sequence_of_statementsContext* AdaParser::Abortable_partContext::sequence_of_statements() {
  return getRuleContext<AdaParser::Sequence_of_statementsContext>(0);
}


size_t AdaParser::Abortable_partContext::getRuleIndex() const {
  return AdaParser::RuleAbortable_part;
}

void AdaParser::Abortable_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAbortable_part(this);
}

void AdaParser::Abortable_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAbortable_part(this);
}

AdaParser::Abortable_partContext* AdaParser::abortable_part() {
  Abortable_partContext *_localctx = _tracker.createInstance<Abortable_partContext>(_ctx, getState());
  enterRule(_localctx, 430, AdaParser::RuleAbortable_part);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2624);
    sequence_of_statements();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Abort_statementContext ------------------------------------------------------------------

AdaParser::Abort_statementContext::Abort_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Abort_statementContext::ABORT() {
  return getToken(AdaParser::ABORT, 0);
}

std::vector<AdaParser::NameContext *> AdaParser::Abort_statementContext::name() {
  return getRuleContexts<AdaParser::NameContext>();
}

AdaParser::NameContext* AdaParser::Abort_statementContext::name(size_t i) {
  return getRuleContext<AdaParser::NameContext>(i);
}

std::vector<tree::TerminalNode *> AdaParser::Abort_statementContext::COMMA() {
  return getTokens(AdaParser::COMMA);
}

tree::TerminalNode* AdaParser::Abort_statementContext::COMMA(size_t i) {
  return getToken(AdaParser::COMMA, i);
}


size_t AdaParser::Abort_statementContext::getRuleIndex() const {
  return AdaParser::RuleAbort_statement;
}

void AdaParser::Abort_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAbort_statement(this);
}

void AdaParser::Abort_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAbort_statement(this);
}

AdaParser::Abort_statementContext* AdaParser::abort_statement() {
  Abort_statementContext *_localctx = _tracker.createInstance<Abort_statementContext>(_ctx, getState());
  enterRule(_localctx, 432, AdaParser::RuleAbort_statement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2626);
    match(AdaParser::ABORT);
    setState(2627);
    name(0);
    setState(2632);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == AdaParser::COMMA) {
      setState(2628);
      match(AdaParser::COMMA);
      setState(2629);
      name(0);
      setState(2634);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CompilationContext ------------------------------------------------------------------

AdaParser::CompilationContext::CompilationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::CompilationContext::EOF() {
  return getToken(AdaParser::EOF, 0);
}

std::vector<AdaParser::Compilation_unitContext *> AdaParser::CompilationContext::compilation_unit() {
  return getRuleContexts<AdaParser::Compilation_unitContext>();
}

AdaParser::Compilation_unitContext* AdaParser::CompilationContext::compilation_unit(size_t i) {
  return getRuleContext<AdaParser::Compilation_unitContext>(i);
}


size_t AdaParser::CompilationContext::getRuleIndex() const {
  return AdaParser::RuleCompilation;
}

void AdaParser::CompilationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCompilation(this);
}

void AdaParser::CompilationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCompilation(this);
}

AdaParser::CompilationContext* AdaParser::compilation() {
  CompilationContext *_localctx = _tracker.createInstance<CompilationContext>(_ctx, getState());
  enterRule(_localctx, 434, AdaParser::RuleCompilation);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2638);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 27) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 27)) & 39586717108355) != 0)) {
      setState(2635);
      compilation_unit();
      setState(2640);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2641);
    match(AdaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Compilation_unitContext ------------------------------------------------------------------

AdaParser::Compilation_unitContext::Compilation_unitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Library_itemContext* AdaParser::Compilation_unitContext::library_item() {
  return getRuleContext<AdaParser::Library_itemContext>(0);
}

AdaParser::SubunitContext* AdaParser::Compilation_unitContext::subunit() {
  return getRuleContext<AdaParser::SubunitContext>(0);
}

std::vector<AdaParser::Context_itemContext *> AdaParser::Compilation_unitContext::context_item() {
  return getRuleContexts<AdaParser::Context_itemContext>();
}

AdaParser::Context_itemContext* AdaParser::Compilation_unitContext::context_item(size_t i) {
  return getRuleContext<AdaParser::Context_itemContext>(i);
}


size_t AdaParser::Compilation_unitContext::getRuleIndex() const {
  return AdaParser::RuleCompilation_unit;
}

void AdaParser::Compilation_unitContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCompilation_unit(this);
}

void AdaParser::Compilation_unitContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCompilation_unit(this);
}

AdaParser::Compilation_unitContext* AdaParser::compilation_unit() {
  Compilation_unitContext *_localctx = _tracker.createInstance<Compilation_unitContext>(_ctx, getState());
  enterRule(_localctx, 436, AdaParser::RuleCompilation_unit);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2646);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 310, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2643);
        context_item(); 
      }
      setState(2648);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 310, _ctx);
    }
    setState(2651);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AdaParser::FUNCTION:
      case AdaParser::GENERIC:
      case AdaParser::NOT:
      case AdaParser::OVERRIDING:
      case AdaParser::PACKAGE:
      case AdaParser::PRIVATE:
      case AdaParser::PROCEDURE: {
        setState(2649);
        library_item();
        break;
      }

      case AdaParser::SEPARATE: {
        setState(2650);
        subunit();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Library_itemContext ------------------------------------------------------------------

AdaParser::Library_itemContext::Library_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Library_unit_declarationContext* AdaParser::Library_itemContext::library_unit_declaration() {
  return getRuleContext<AdaParser::Library_unit_declarationContext>(0);
}

tree::TerminalNode* AdaParser::Library_itemContext::PRIVATE() {
  return getToken(AdaParser::PRIVATE, 0);
}

AdaParser::Library_unit_bodyContext* AdaParser::Library_itemContext::library_unit_body() {
  return getRuleContext<AdaParser::Library_unit_bodyContext>(0);
}

AdaParser::Library_unit_renaming_declarationContext* AdaParser::Library_itemContext::library_unit_renaming_declaration() {
  return getRuleContext<AdaParser::Library_unit_renaming_declarationContext>(0);
}


size_t AdaParser::Library_itemContext::getRuleIndex() const {
  return AdaParser::RuleLibrary_item;
}

void AdaParser::Library_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLibrary_item(this);
}

void AdaParser::Library_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLibrary_item(this);
}

AdaParser::Library_itemContext* AdaParser::library_item() {
  Library_itemContext *_localctx = _tracker.createInstance<Library_itemContext>(_ctx, getState());
  enterRule(_localctx, 438, AdaParser::RuleLibrary_item);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2662);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 314, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2654);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::PRIVATE) {
        setState(2653);
        match(AdaParser::PRIVATE);
      }
      setState(2656);
      library_unit_declaration();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2657);
      library_unit_body();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2659);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::PRIVATE) {
        setState(2658);
        match(AdaParser::PRIVATE);
      }
      setState(2661);
      library_unit_renaming_declaration();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Library_unit_declarationContext ------------------------------------------------------------------

AdaParser::Library_unit_declarationContext::Library_unit_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Subprogram_declarationContext* AdaParser::Library_unit_declarationContext::subprogram_declaration() {
  return getRuleContext<AdaParser::Subprogram_declarationContext>(0);
}

AdaParser::Package_declarationContext* AdaParser::Library_unit_declarationContext::package_declaration() {
  return getRuleContext<AdaParser::Package_declarationContext>(0);
}

AdaParser::Generic_declarationContext* AdaParser::Library_unit_declarationContext::generic_declaration() {
  return getRuleContext<AdaParser::Generic_declarationContext>(0);
}

AdaParser::Generic_instantiationContext* AdaParser::Library_unit_declarationContext::generic_instantiation() {
  return getRuleContext<AdaParser::Generic_instantiationContext>(0);
}


size_t AdaParser::Library_unit_declarationContext::getRuleIndex() const {
  return AdaParser::RuleLibrary_unit_declaration;
}

void AdaParser::Library_unit_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLibrary_unit_declaration(this);
}

void AdaParser::Library_unit_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLibrary_unit_declaration(this);
}

AdaParser::Library_unit_declarationContext* AdaParser::library_unit_declaration() {
  Library_unit_declarationContext *_localctx = _tracker.createInstance<Library_unit_declarationContext>(_ctx, getState());
  enterRule(_localctx, 440, AdaParser::RuleLibrary_unit_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2668);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 315, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2664);
      subprogram_declaration();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2665);
      package_declaration();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2666);
      generic_declaration();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2667);
      generic_instantiation();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Library_unit_renaming_declarationContext ------------------------------------------------------------------

AdaParser::Library_unit_renaming_declarationContext::Library_unit_renaming_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Package_renaming_declarationContext* AdaParser::Library_unit_renaming_declarationContext::package_renaming_declaration() {
  return getRuleContext<AdaParser::Package_renaming_declarationContext>(0);
}

AdaParser::Generic_renaming_declarationContext* AdaParser::Library_unit_renaming_declarationContext::generic_renaming_declaration() {
  return getRuleContext<AdaParser::Generic_renaming_declarationContext>(0);
}

AdaParser::Subprogram_renaming_declarationContext* AdaParser::Library_unit_renaming_declarationContext::subprogram_renaming_declaration() {
  return getRuleContext<AdaParser::Subprogram_renaming_declarationContext>(0);
}


size_t AdaParser::Library_unit_renaming_declarationContext::getRuleIndex() const {
  return AdaParser::RuleLibrary_unit_renaming_declaration;
}

void AdaParser::Library_unit_renaming_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLibrary_unit_renaming_declaration(this);
}

void AdaParser::Library_unit_renaming_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLibrary_unit_renaming_declaration(this);
}

AdaParser::Library_unit_renaming_declarationContext* AdaParser::library_unit_renaming_declaration() {
  Library_unit_renaming_declarationContext *_localctx = _tracker.createInstance<Library_unit_renaming_declarationContext>(_ctx, getState());
  enterRule(_localctx, 442, AdaParser::RuleLibrary_unit_renaming_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2673);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AdaParser::PACKAGE: {
        enterOuterAlt(_localctx, 1);
        setState(2670);
        package_renaming_declaration();
        break;
      }

      case AdaParser::GENERIC: {
        enterOuterAlt(_localctx, 2);
        setState(2671);
        generic_renaming_declaration();
        break;
      }

      case AdaParser::FUNCTION:
      case AdaParser::NOT:
      case AdaParser::OVERRIDING:
      case AdaParser::PROCEDURE: {
        enterOuterAlt(_localctx, 3);
        setState(2672);
        subprogram_renaming_declaration();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Library_unit_bodyContext ------------------------------------------------------------------

AdaParser::Library_unit_bodyContext::Library_unit_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Subprogram_bodyContext* AdaParser::Library_unit_bodyContext::subprogram_body() {
  return getRuleContext<AdaParser::Subprogram_bodyContext>(0);
}

AdaParser::Package_bodyContext* AdaParser::Library_unit_bodyContext::package_body() {
  return getRuleContext<AdaParser::Package_bodyContext>(0);
}


size_t AdaParser::Library_unit_bodyContext::getRuleIndex() const {
  return AdaParser::RuleLibrary_unit_body;
}

void AdaParser::Library_unit_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLibrary_unit_body(this);
}

void AdaParser::Library_unit_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLibrary_unit_body(this);
}

AdaParser::Library_unit_bodyContext* AdaParser::library_unit_body() {
  Library_unit_bodyContext *_localctx = _tracker.createInstance<Library_unit_bodyContext>(_ctx, getState());
  enterRule(_localctx, 444, AdaParser::RuleLibrary_unit_body);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2677);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AdaParser::FUNCTION:
      case AdaParser::NOT:
      case AdaParser::OVERRIDING:
      case AdaParser::PROCEDURE: {
        enterOuterAlt(_localctx, 1);
        setState(2675);
        subprogram_body();
        break;
      }

      case AdaParser::PACKAGE: {
        enterOuterAlt(_localctx, 2);
        setState(2676);
        package_body();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Context_itemContext ------------------------------------------------------------------

AdaParser::Context_itemContext::Context_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::With_clauseContext* AdaParser::Context_itemContext::with_clause() {
  return getRuleContext<AdaParser::With_clauseContext>(0);
}

AdaParser::Use_clauseContext* AdaParser::Context_itemContext::use_clause() {
  return getRuleContext<AdaParser::Use_clauseContext>(0);
}


size_t AdaParser::Context_itemContext::getRuleIndex() const {
  return AdaParser::RuleContext_item;
}

void AdaParser::Context_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterContext_item(this);
}

void AdaParser::Context_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitContext_item(this);
}

AdaParser::Context_itemContext* AdaParser::context_item() {
  Context_itemContext *_localctx = _tracker.createInstance<Context_itemContext>(_ctx, getState());
  enterRule(_localctx, 446, AdaParser::RuleContext_item);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2681);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AdaParser::LIMITED:
      case AdaParser::PRIVATE:
      case AdaParser::WITH: {
        enterOuterAlt(_localctx, 1);
        setState(2679);
        with_clause();
        break;
      }

      case AdaParser::USE: {
        enterOuterAlt(_localctx, 2);
        setState(2680);
        use_clause();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- With_clauseContext ------------------------------------------------------------------

AdaParser::With_clauseContext::With_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Limited_with_clauseContext* AdaParser::With_clauseContext::limited_with_clause() {
  return getRuleContext<AdaParser::Limited_with_clauseContext>(0);
}

AdaParser::Nonlimited_with_clauseContext* AdaParser::With_clauseContext::nonlimited_with_clause() {
  return getRuleContext<AdaParser::Nonlimited_with_clauseContext>(0);
}


size_t AdaParser::With_clauseContext::getRuleIndex() const {
  return AdaParser::RuleWith_clause;
}

void AdaParser::With_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWith_clause(this);
}

void AdaParser::With_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWith_clause(this);
}

AdaParser::With_clauseContext* AdaParser::with_clause() {
  With_clauseContext *_localctx = _tracker.createInstance<With_clauseContext>(_ctx, getState());
  enterRule(_localctx, 448, AdaParser::RuleWith_clause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2685);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AdaParser::LIMITED: {
        enterOuterAlt(_localctx, 1);
        setState(2683);
        limited_with_clause();
        break;
      }

      case AdaParser::PRIVATE:
      case AdaParser::WITH: {
        enterOuterAlt(_localctx, 2);
        setState(2684);
        nonlimited_with_clause();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Limited_with_clauseContext ------------------------------------------------------------------

AdaParser::Limited_with_clauseContext::Limited_with_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Limited_with_clauseContext::LIMITED() {
  return getToken(AdaParser::LIMITED, 0);
}

tree::TerminalNode* AdaParser::Limited_with_clauseContext::WITH() {
  return getToken(AdaParser::WITH, 0);
}

std::vector<AdaParser::NameContext *> AdaParser::Limited_with_clauseContext::name() {
  return getRuleContexts<AdaParser::NameContext>();
}

AdaParser::NameContext* AdaParser::Limited_with_clauseContext::name(size_t i) {
  return getRuleContext<AdaParser::NameContext>(i);
}

tree::TerminalNode* AdaParser::Limited_with_clauseContext::SEMI() {
  return getToken(AdaParser::SEMI, 0);
}

tree::TerminalNode* AdaParser::Limited_with_clauseContext::PRIVATE() {
  return getToken(AdaParser::PRIVATE, 0);
}

std::vector<tree::TerminalNode *> AdaParser::Limited_with_clauseContext::COMMA() {
  return getTokens(AdaParser::COMMA);
}

tree::TerminalNode* AdaParser::Limited_with_clauseContext::COMMA(size_t i) {
  return getToken(AdaParser::COMMA, i);
}


size_t AdaParser::Limited_with_clauseContext::getRuleIndex() const {
  return AdaParser::RuleLimited_with_clause;
}

void AdaParser::Limited_with_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLimited_with_clause(this);
}

void AdaParser::Limited_with_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLimited_with_clause(this);
}

AdaParser::Limited_with_clauseContext* AdaParser::limited_with_clause() {
  Limited_with_clauseContext *_localctx = _tracker.createInstance<Limited_with_clauseContext>(_ctx, getState());
  enterRule(_localctx, 450, AdaParser::RuleLimited_with_clause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2687);
    match(AdaParser::LIMITED);
    setState(2689);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::PRIVATE) {
      setState(2688);
      match(AdaParser::PRIVATE);
    }
    setState(2691);
    match(AdaParser::WITH);
    setState(2692);
    name(0);
    setState(2697);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == AdaParser::COMMA) {
      setState(2693);
      match(AdaParser::COMMA);
      setState(2694);
      name(0);
      setState(2699);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2700);
    match(AdaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Nonlimited_with_clauseContext ------------------------------------------------------------------

AdaParser::Nonlimited_with_clauseContext::Nonlimited_with_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Nonlimited_with_clauseContext::WITH() {
  return getToken(AdaParser::WITH, 0);
}

std::vector<AdaParser::NameContext *> AdaParser::Nonlimited_with_clauseContext::name() {
  return getRuleContexts<AdaParser::NameContext>();
}

AdaParser::NameContext* AdaParser::Nonlimited_with_clauseContext::name(size_t i) {
  return getRuleContext<AdaParser::NameContext>(i);
}

tree::TerminalNode* AdaParser::Nonlimited_with_clauseContext::SEMI() {
  return getToken(AdaParser::SEMI, 0);
}

tree::TerminalNode* AdaParser::Nonlimited_with_clauseContext::PRIVATE() {
  return getToken(AdaParser::PRIVATE, 0);
}

std::vector<tree::TerminalNode *> AdaParser::Nonlimited_with_clauseContext::COMMA() {
  return getTokens(AdaParser::COMMA);
}

tree::TerminalNode* AdaParser::Nonlimited_with_clauseContext::COMMA(size_t i) {
  return getToken(AdaParser::COMMA, i);
}


size_t AdaParser::Nonlimited_with_clauseContext::getRuleIndex() const {
  return AdaParser::RuleNonlimited_with_clause;
}

void AdaParser::Nonlimited_with_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNonlimited_with_clause(this);
}

void AdaParser::Nonlimited_with_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNonlimited_with_clause(this);
}

AdaParser::Nonlimited_with_clauseContext* AdaParser::nonlimited_with_clause() {
  Nonlimited_with_clauseContext *_localctx = _tracker.createInstance<Nonlimited_with_clauseContext>(_ctx, getState());
  enterRule(_localctx, 452, AdaParser::RuleNonlimited_with_clause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2703);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::PRIVATE) {
      setState(2702);
      match(AdaParser::PRIVATE);
    }
    setState(2705);
    match(AdaParser::WITH);
    setState(2706);
    name(0);
    setState(2711);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == AdaParser::COMMA) {
      setState(2707);
      match(AdaParser::COMMA);
      setState(2708);
      name(0);
      setState(2713);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2714);
    match(AdaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Body_stubContext ------------------------------------------------------------------

AdaParser::Body_stubContext::Body_stubContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Subprogram_body_stubContext* AdaParser::Body_stubContext::subprogram_body_stub() {
  return getRuleContext<AdaParser::Subprogram_body_stubContext>(0);
}

AdaParser::Package_body_stubContext* AdaParser::Body_stubContext::package_body_stub() {
  return getRuleContext<AdaParser::Package_body_stubContext>(0);
}

AdaParser::Task_body_stubContext* AdaParser::Body_stubContext::task_body_stub() {
  return getRuleContext<AdaParser::Task_body_stubContext>(0);
}

AdaParser::Protected_body_stubContext* AdaParser::Body_stubContext::protected_body_stub() {
  return getRuleContext<AdaParser::Protected_body_stubContext>(0);
}


size_t AdaParser::Body_stubContext::getRuleIndex() const {
  return AdaParser::RuleBody_stub;
}

void AdaParser::Body_stubContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBody_stub(this);
}

void AdaParser::Body_stubContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBody_stub(this);
}

AdaParser::Body_stubContext* AdaParser::body_stub() {
  Body_stubContext *_localctx = _tracker.createInstance<Body_stubContext>(_ctx, getState());
  enterRule(_localctx, 454, AdaParser::RuleBody_stub);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2720);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AdaParser::FUNCTION:
      case AdaParser::NOT:
      case AdaParser::OVERRIDING:
      case AdaParser::PROCEDURE: {
        enterOuterAlt(_localctx, 1);
        setState(2716);
        subprogram_body_stub();
        break;
      }

      case AdaParser::PACKAGE: {
        enterOuterAlt(_localctx, 2);
        setState(2717);
        package_body_stub();
        break;
      }

      case AdaParser::TASK: {
        enterOuterAlt(_localctx, 3);
        setState(2718);
        task_body_stub();
        break;
      }

      case AdaParser::PROTECTED: {
        enterOuterAlt(_localctx, 4);
        setState(2719);
        protected_body_stub();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Subprogram_body_stubContext ------------------------------------------------------------------

AdaParser::Subprogram_body_stubContext::Subprogram_body_stubContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Subprogram_specificationContext* AdaParser::Subprogram_body_stubContext::subprogram_specification() {
  return getRuleContext<AdaParser::Subprogram_specificationContext>(0);
}

tree::TerminalNode* AdaParser::Subprogram_body_stubContext::IS() {
  return getToken(AdaParser::IS, 0);
}

tree::TerminalNode* AdaParser::Subprogram_body_stubContext::SEPARATE() {
  return getToken(AdaParser::SEPARATE, 0);
}

tree::TerminalNode* AdaParser::Subprogram_body_stubContext::SEMI() {
  return getToken(AdaParser::SEMI, 0);
}

AdaParser::Overriding_indicatorContext* AdaParser::Subprogram_body_stubContext::overriding_indicator() {
  return getRuleContext<AdaParser::Overriding_indicatorContext>(0);
}

AdaParser::Aspect_specificationContext* AdaParser::Subprogram_body_stubContext::aspect_specification() {
  return getRuleContext<AdaParser::Aspect_specificationContext>(0);
}


size_t AdaParser::Subprogram_body_stubContext::getRuleIndex() const {
  return AdaParser::RuleSubprogram_body_stub;
}

void AdaParser::Subprogram_body_stubContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubprogram_body_stub(this);
}

void AdaParser::Subprogram_body_stubContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubprogram_body_stub(this);
}

AdaParser::Subprogram_body_stubContext* AdaParser::subprogram_body_stub() {
  Subprogram_body_stubContext *_localctx = _tracker.createInstance<Subprogram_body_stubContext>(_ctx, getState());
  enterRule(_localctx, 456, AdaParser::RuleSubprogram_body_stub);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2723);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::NOT

    || _la == AdaParser::OVERRIDING) {
      setState(2722);
      overriding_indicator();
    }
    setState(2725);
    subprogram_specification();
    setState(2726);
    match(AdaParser::IS);
    setState(2727);
    match(AdaParser::SEPARATE);
    setState(2729);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::WITH) {
      setState(2728);
      aspect_specification();
    }
    setState(2731);
    match(AdaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Package_body_stubContext ------------------------------------------------------------------

AdaParser::Package_body_stubContext::Package_body_stubContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Package_body_stubContext::PACKAGE() {
  return getToken(AdaParser::PACKAGE, 0);
}

tree::TerminalNode* AdaParser::Package_body_stubContext::BODY_() {
  return getToken(AdaParser::BODY_, 0);
}

AdaParser::Defining_identifierContext* AdaParser::Package_body_stubContext::defining_identifier() {
  return getRuleContext<AdaParser::Defining_identifierContext>(0);
}

tree::TerminalNode* AdaParser::Package_body_stubContext::IS() {
  return getToken(AdaParser::IS, 0);
}

tree::TerminalNode* AdaParser::Package_body_stubContext::SEPARATE() {
  return getToken(AdaParser::SEPARATE, 0);
}

tree::TerminalNode* AdaParser::Package_body_stubContext::SEMI() {
  return getToken(AdaParser::SEMI, 0);
}

AdaParser::Aspect_specificationContext* AdaParser::Package_body_stubContext::aspect_specification() {
  return getRuleContext<AdaParser::Aspect_specificationContext>(0);
}


size_t AdaParser::Package_body_stubContext::getRuleIndex() const {
  return AdaParser::RulePackage_body_stub;
}

void AdaParser::Package_body_stubContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPackage_body_stub(this);
}

void AdaParser::Package_body_stubContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPackage_body_stub(this);
}

AdaParser::Package_body_stubContext* AdaParser::package_body_stub() {
  Package_body_stubContext *_localctx = _tracker.createInstance<Package_body_stubContext>(_ctx, getState());
  enterRule(_localctx, 458, AdaParser::RulePackage_body_stub);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2733);
    match(AdaParser::PACKAGE);
    setState(2734);
    match(AdaParser::BODY_);
    setState(2735);
    defining_identifier();
    setState(2736);
    match(AdaParser::IS);
    setState(2737);
    match(AdaParser::SEPARATE);
    setState(2739);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::WITH) {
      setState(2738);
      aspect_specification();
    }
    setState(2741);
    match(AdaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Task_body_stubContext ------------------------------------------------------------------

AdaParser::Task_body_stubContext::Task_body_stubContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Task_body_stubContext::TASK() {
  return getToken(AdaParser::TASK, 0);
}

tree::TerminalNode* AdaParser::Task_body_stubContext::BODY_() {
  return getToken(AdaParser::BODY_, 0);
}

AdaParser::Defining_identifierContext* AdaParser::Task_body_stubContext::defining_identifier() {
  return getRuleContext<AdaParser::Defining_identifierContext>(0);
}

tree::TerminalNode* AdaParser::Task_body_stubContext::IS() {
  return getToken(AdaParser::IS, 0);
}

tree::TerminalNode* AdaParser::Task_body_stubContext::SEPARATE() {
  return getToken(AdaParser::SEPARATE, 0);
}

tree::TerminalNode* AdaParser::Task_body_stubContext::SEMI() {
  return getToken(AdaParser::SEMI, 0);
}

AdaParser::Aspect_specificationContext* AdaParser::Task_body_stubContext::aspect_specification() {
  return getRuleContext<AdaParser::Aspect_specificationContext>(0);
}


size_t AdaParser::Task_body_stubContext::getRuleIndex() const {
  return AdaParser::RuleTask_body_stub;
}

void AdaParser::Task_body_stubContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTask_body_stub(this);
}

void AdaParser::Task_body_stubContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTask_body_stub(this);
}

AdaParser::Task_body_stubContext* AdaParser::task_body_stub() {
  Task_body_stubContext *_localctx = _tracker.createInstance<Task_body_stubContext>(_ctx, getState());
  enterRule(_localctx, 460, AdaParser::RuleTask_body_stub);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2743);
    match(AdaParser::TASK);
    setState(2744);
    match(AdaParser::BODY_);
    setState(2745);
    defining_identifier();
    setState(2746);
    match(AdaParser::IS);
    setState(2747);
    match(AdaParser::SEPARATE);
    setState(2749);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::WITH) {
      setState(2748);
      aspect_specification();
    }
    setState(2751);
    match(AdaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Protected_body_stubContext ------------------------------------------------------------------

AdaParser::Protected_body_stubContext::Protected_body_stubContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Protected_body_stubContext::PROTECTED() {
  return getToken(AdaParser::PROTECTED, 0);
}

tree::TerminalNode* AdaParser::Protected_body_stubContext::BODY_() {
  return getToken(AdaParser::BODY_, 0);
}

AdaParser::Defining_identifierContext* AdaParser::Protected_body_stubContext::defining_identifier() {
  return getRuleContext<AdaParser::Defining_identifierContext>(0);
}

tree::TerminalNode* AdaParser::Protected_body_stubContext::IS() {
  return getToken(AdaParser::IS, 0);
}

tree::TerminalNode* AdaParser::Protected_body_stubContext::SEPARATE() {
  return getToken(AdaParser::SEPARATE, 0);
}

tree::TerminalNode* AdaParser::Protected_body_stubContext::SEMI() {
  return getToken(AdaParser::SEMI, 0);
}

AdaParser::Aspect_specificationContext* AdaParser::Protected_body_stubContext::aspect_specification() {
  return getRuleContext<AdaParser::Aspect_specificationContext>(0);
}


size_t AdaParser::Protected_body_stubContext::getRuleIndex() const {
  return AdaParser::RuleProtected_body_stub;
}

void AdaParser::Protected_body_stubContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProtected_body_stub(this);
}

void AdaParser::Protected_body_stubContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProtected_body_stub(this);
}

AdaParser::Protected_body_stubContext* AdaParser::protected_body_stub() {
  Protected_body_stubContext *_localctx = _tracker.createInstance<Protected_body_stubContext>(_ctx, getState());
  enterRule(_localctx, 462, AdaParser::RuleProtected_body_stub);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2753);
    match(AdaParser::PROTECTED);
    setState(2754);
    match(AdaParser::BODY_);
    setState(2755);
    defining_identifier();
    setState(2756);
    match(AdaParser::IS);
    setState(2757);
    match(AdaParser::SEPARATE);
    setState(2759);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::WITH) {
      setState(2758);
      aspect_specification();
    }
    setState(2761);
    match(AdaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubunitContext ------------------------------------------------------------------

AdaParser::SubunitContext::SubunitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::SubunitContext::SEPARATE() {
  return getToken(AdaParser::SEPARATE, 0);
}

tree::TerminalNode* AdaParser::SubunitContext::LP() {
  return getToken(AdaParser::LP, 0);
}

AdaParser::NameContext* AdaParser::SubunitContext::name() {
  return getRuleContext<AdaParser::NameContext>(0);
}

tree::TerminalNode* AdaParser::SubunitContext::RP() {
  return getToken(AdaParser::RP, 0);
}

AdaParser::Proper_bodyContext* AdaParser::SubunitContext::proper_body() {
  return getRuleContext<AdaParser::Proper_bodyContext>(0);
}


size_t AdaParser::SubunitContext::getRuleIndex() const {
  return AdaParser::RuleSubunit;
}

void AdaParser::SubunitContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubunit(this);
}

void AdaParser::SubunitContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubunit(this);
}

AdaParser::SubunitContext* AdaParser::subunit() {
  SubunitContext *_localctx = _tracker.createInstance<SubunitContext>(_ctx, getState());
  enterRule(_localctx, 464, AdaParser::RuleSubunit);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2763);
    match(AdaParser::SEPARATE);
    setState(2764);
    match(AdaParser::LP);
    setState(2765);
    name(0);
    setState(2766);
    match(AdaParser::RP);
    setState(2767);
    proper_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Exception_declarationContext ------------------------------------------------------------------

AdaParser::Exception_declarationContext::Exception_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Defining_identifier_listContext* AdaParser::Exception_declarationContext::defining_identifier_list() {
  return getRuleContext<AdaParser::Defining_identifier_listContext>(0);
}

tree::TerminalNode* AdaParser::Exception_declarationContext::COLON() {
  return getToken(AdaParser::COLON, 0);
}

tree::TerminalNode* AdaParser::Exception_declarationContext::EXCEPTION() {
  return getToken(AdaParser::EXCEPTION, 0);
}

tree::TerminalNode* AdaParser::Exception_declarationContext::SEMI() {
  return getToken(AdaParser::SEMI, 0);
}

AdaParser::Aspect_specificationContext* AdaParser::Exception_declarationContext::aspect_specification() {
  return getRuleContext<AdaParser::Aspect_specificationContext>(0);
}


size_t AdaParser::Exception_declarationContext::getRuleIndex() const {
  return AdaParser::RuleException_declaration;
}

void AdaParser::Exception_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterException_declaration(this);
}

void AdaParser::Exception_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitException_declaration(this);
}

AdaParser::Exception_declarationContext* AdaParser::exception_declaration() {
  Exception_declarationContext *_localctx = _tracker.createInstance<Exception_declarationContext>(_ctx, getState());
  enterRule(_localctx, 466, AdaParser::RuleException_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2769);
    defining_identifier_list();
    setState(2770);
    match(AdaParser::COLON);
    setState(2771);
    match(AdaParser::EXCEPTION);
    setState(2773);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::WITH) {
      setState(2772);
      aspect_specification();
    }
    setState(2775);
    match(AdaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Handled_sequence_of_statementsContext ------------------------------------------------------------------

AdaParser::Handled_sequence_of_statementsContext::Handled_sequence_of_statementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Sequence_of_statementsContext* AdaParser::Handled_sequence_of_statementsContext::sequence_of_statements() {
  return getRuleContext<AdaParser::Sequence_of_statementsContext>(0);
}

tree::TerminalNode* AdaParser::Handled_sequence_of_statementsContext::EXCEPTION() {
  return getToken(AdaParser::EXCEPTION, 0);
}

std::vector<AdaParser::Exception_handlerContext *> AdaParser::Handled_sequence_of_statementsContext::exception_handler() {
  return getRuleContexts<AdaParser::Exception_handlerContext>();
}

AdaParser::Exception_handlerContext* AdaParser::Handled_sequence_of_statementsContext::exception_handler(size_t i) {
  return getRuleContext<AdaParser::Exception_handlerContext>(i);
}


size_t AdaParser::Handled_sequence_of_statementsContext::getRuleIndex() const {
  return AdaParser::RuleHandled_sequence_of_statements;
}

void AdaParser::Handled_sequence_of_statementsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterHandled_sequence_of_statements(this);
}

void AdaParser::Handled_sequence_of_statementsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitHandled_sequence_of_statements(this);
}

AdaParser::Handled_sequence_of_statementsContext* AdaParser::handled_sequence_of_statements() {
  Handled_sequence_of_statementsContext *_localctx = _tracker.createInstance<Handled_sequence_of_statementsContext>(_ctx, getState());
  enterRule(_localctx, 468, AdaParser::RuleHandled_sequence_of_statements);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2777);
    sequence_of_statements();
    setState(2784);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::EXCEPTION) {
      setState(2778);
      match(AdaParser::EXCEPTION);
      setState(2780); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(2779);
        exception_handler();
        setState(2782); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == AdaParser::WHEN);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Exception_handlerContext ------------------------------------------------------------------

AdaParser::Exception_handlerContext::Exception_handlerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Exception_handlerContext::WHEN() {
  return getToken(AdaParser::WHEN, 0);
}

std::vector<AdaParser::Exception_choiceContext *> AdaParser::Exception_handlerContext::exception_choice() {
  return getRuleContexts<AdaParser::Exception_choiceContext>();
}

AdaParser::Exception_choiceContext* AdaParser::Exception_handlerContext::exception_choice(size_t i) {
  return getRuleContext<AdaParser::Exception_choiceContext>(i);
}

tree::TerminalNode* AdaParser::Exception_handlerContext::ARROW() {
  return getToken(AdaParser::ARROW, 0);
}

AdaParser::Sequence_of_statementsContext* AdaParser::Exception_handlerContext::sequence_of_statements() {
  return getRuleContext<AdaParser::Sequence_of_statementsContext>(0);
}

AdaParser::Choice_parameter_specificationContext* AdaParser::Exception_handlerContext::choice_parameter_specification() {
  return getRuleContext<AdaParser::Choice_parameter_specificationContext>(0);
}

tree::TerminalNode* AdaParser::Exception_handlerContext::COLON() {
  return getToken(AdaParser::COLON, 0);
}

std::vector<tree::TerminalNode *> AdaParser::Exception_handlerContext::VL() {
  return getTokens(AdaParser::VL);
}

tree::TerminalNode* AdaParser::Exception_handlerContext::VL(size_t i) {
  return getToken(AdaParser::VL, i);
}


size_t AdaParser::Exception_handlerContext::getRuleIndex() const {
  return AdaParser::RuleException_handler;
}

void AdaParser::Exception_handlerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterException_handler(this);
}

void AdaParser::Exception_handlerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitException_handler(this);
}

AdaParser::Exception_handlerContext* AdaParser::exception_handler() {
  Exception_handlerContext *_localctx = _tracker.createInstance<Exception_handlerContext>(_ctx, getState());
  enterRule(_localctx, 470, AdaParser::RuleException_handler);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2786);
    match(AdaParser::WHEN);
    setState(2790);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 333, _ctx)) {
    case 1: {
      setState(2787);
      choice_parameter_specification();
      setState(2788);
      match(AdaParser::COLON);
      break;
    }

    default:
      break;
    }
    setState(2792);
    exception_choice();
    setState(2797);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == AdaParser::VL) {
      setState(2793);
      match(AdaParser::VL);
      setState(2794);
      exception_choice();
      setState(2799);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2800);
    match(AdaParser::ARROW);
    setState(2801);
    sequence_of_statements();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Choice_parameter_specificationContext ------------------------------------------------------------------

AdaParser::Choice_parameter_specificationContext::Choice_parameter_specificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Defining_identifierContext* AdaParser::Choice_parameter_specificationContext::defining_identifier() {
  return getRuleContext<AdaParser::Defining_identifierContext>(0);
}


size_t AdaParser::Choice_parameter_specificationContext::getRuleIndex() const {
  return AdaParser::RuleChoice_parameter_specification;
}

void AdaParser::Choice_parameter_specificationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterChoice_parameter_specification(this);
}

void AdaParser::Choice_parameter_specificationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitChoice_parameter_specification(this);
}

AdaParser::Choice_parameter_specificationContext* AdaParser::choice_parameter_specification() {
  Choice_parameter_specificationContext *_localctx = _tracker.createInstance<Choice_parameter_specificationContext>(_ctx, getState());
  enterRule(_localctx, 472, AdaParser::RuleChoice_parameter_specification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2803);
    defining_identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Exception_choiceContext ------------------------------------------------------------------

AdaParser::Exception_choiceContext::Exception_choiceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::NameContext* AdaParser::Exception_choiceContext::name() {
  return getRuleContext<AdaParser::NameContext>(0);
}

tree::TerminalNode* AdaParser::Exception_choiceContext::OTHERS() {
  return getToken(AdaParser::OTHERS, 0);
}


size_t AdaParser::Exception_choiceContext::getRuleIndex() const {
  return AdaParser::RuleException_choice;
}

void AdaParser::Exception_choiceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterException_choice(this);
}

void AdaParser::Exception_choiceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitException_choice(this);
}

AdaParser::Exception_choiceContext* AdaParser::exception_choice() {
  Exception_choiceContext *_localctx = _tracker.createInstance<Exception_choiceContext>(_ctx, getState());
  enterRule(_localctx, 474, AdaParser::RuleException_choice);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2807);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AdaParser::IDENTIFIER_:
      case AdaParser::CHARACTER_LITERAL_:
      case AdaParser::STRING_LITERAL_: {
        enterOuterAlt(_localctx, 1);
        setState(2805);
        name(0);
        break;
      }

      case AdaParser::OTHERS: {
        enterOuterAlt(_localctx, 2);
        setState(2806);
        match(AdaParser::OTHERS);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Raise_statementContext ------------------------------------------------------------------

AdaParser::Raise_statementContext::Raise_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Raise_statementContext::RAISE() {
  return getToken(AdaParser::RAISE, 0);
}

tree::TerminalNode* AdaParser::Raise_statementContext::SEMI() {
  return getToken(AdaParser::SEMI, 0);
}

AdaParser::NameContext* AdaParser::Raise_statementContext::name() {
  return getRuleContext<AdaParser::NameContext>(0);
}

tree::TerminalNode* AdaParser::Raise_statementContext::WITH() {
  return getToken(AdaParser::WITH, 0);
}

AdaParser::ExpressionContext* AdaParser::Raise_statementContext::expression() {
  return getRuleContext<AdaParser::ExpressionContext>(0);
}


size_t AdaParser::Raise_statementContext::getRuleIndex() const {
  return AdaParser::RuleRaise_statement;
}

void AdaParser::Raise_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRaise_statement(this);
}

void AdaParser::Raise_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRaise_statement(this);
}

AdaParser::Raise_statementContext* AdaParser::raise_statement() {
  Raise_statementContext *_localctx = _tracker.createInstance<Raise_statementContext>(_ctx, getState());
  enterRule(_localctx, 476, AdaParser::RuleRaise_statement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2819);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 337, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2809);
      match(AdaParser::RAISE);
      setState(2810);
      match(AdaParser::SEMI);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2811);
      match(AdaParser::RAISE);
      setState(2812);
      name(0);
      setState(2815);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::WITH) {
        setState(2813);
        match(AdaParser::WITH);
        setState(2814);
        expression();
      }
      setState(2817);
      match(AdaParser::SEMI);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Generic_declarationContext ------------------------------------------------------------------

AdaParser::Generic_declarationContext::Generic_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Generic_subprogram_declarationContext* AdaParser::Generic_declarationContext::generic_subprogram_declaration() {
  return getRuleContext<AdaParser::Generic_subprogram_declarationContext>(0);
}

AdaParser::Generic_package_declarationContext* AdaParser::Generic_declarationContext::generic_package_declaration() {
  return getRuleContext<AdaParser::Generic_package_declarationContext>(0);
}


size_t AdaParser::Generic_declarationContext::getRuleIndex() const {
  return AdaParser::RuleGeneric_declaration;
}

void AdaParser::Generic_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGeneric_declaration(this);
}

void AdaParser::Generic_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGeneric_declaration(this);
}

AdaParser::Generic_declarationContext* AdaParser::generic_declaration() {
  Generic_declarationContext *_localctx = _tracker.createInstance<Generic_declarationContext>(_ctx, getState());
  enterRule(_localctx, 478, AdaParser::RuleGeneric_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2823);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 338, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2821);
      generic_subprogram_declaration();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2822);
      generic_package_declaration();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Generic_subprogram_declarationContext ------------------------------------------------------------------

AdaParser::Generic_subprogram_declarationContext::Generic_subprogram_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Generic_formal_partContext* AdaParser::Generic_subprogram_declarationContext::generic_formal_part() {
  return getRuleContext<AdaParser::Generic_formal_partContext>(0);
}

AdaParser::Subprogram_specificationContext* AdaParser::Generic_subprogram_declarationContext::subprogram_specification() {
  return getRuleContext<AdaParser::Subprogram_specificationContext>(0);
}

tree::TerminalNode* AdaParser::Generic_subprogram_declarationContext::SEMI() {
  return getToken(AdaParser::SEMI, 0);
}

AdaParser::Aspect_specificationContext* AdaParser::Generic_subprogram_declarationContext::aspect_specification() {
  return getRuleContext<AdaParser::Aspect_specificationContext>(0);
}


size_t AdaParser::Generic_subprogram_declarationContext::getRuleIndex() const {
  return AdaParser::RuleGeneric_subprogram_declaration;
}

void AdaParser::Generic_subprogram_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGeneric_subprogram_declaration(this);
}

void AdaParser::Generic_subprogram_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGeneric_subprogram_declaration(this);
}

AdaParser::Generic_subprogram_declarationContext* AdaParser::generic_subprogram_declaration() {
  Generic_subprogram_declarationContext *_localctx = _tracker.createInstance<Generic_subprogram_declarationContext>(_ctx, getState());
  enterRule(_localctx, 480, AdaParser::RuleGeneric_subprogram_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2825);
    generic_formal_part();
    setState(2826);
    subprogram_specification();
    setState(2828);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::WITH) {
      setState(2827);
      aspect_specification();
    }
    setState(2830);
    match(AdaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Generic_package_declarationContext ------------------------------------------------------------------

AdaParser::Generic_package_declarationContext::Generic_package_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Generic_formal_partContext* AdaParser::Generic_package_declarationContext::generic_formal_part() {
  return getRuleContext<AdaParser::Generic_formal_partContext>(0);
}

AdaParser::Package_specificationContext* AdaParser::Generic_package_declarationContext::package_specification() {
  return getRuleContext<AdaParser::Package_specificationContext>(0);
}

tree::TerminalNode* AdaParser::Generic_package_declarationContext::SEMI() {
  return getToken(AdaParser::SEMI, 0);
}


size_t AdaParser::Generic_package_declarationContext::getRuleIndex() const {
  return AdaParser::RuleGeneric_package_declaration;
}

void AdaParser::Generic_package_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGeneric_package_declaration(this);
}

void AdaParser::Generic_package_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGeneric_package_declaration(this);
}

AdaParser::Generic_package_declarationContext* AdaParser::generic_package_declaration() {
  Generic_package_declarationContext *_localctx = _tracker.createInstance<Generic_package_declarationContext>(_ctx, getState());
  enterRule(_localctx, 482, AdaParser::RuleGeneric_package_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2832);
    generic_formal_part();
    setState(2833);
    package_specification();
    setState(2834);
    match(AdaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Generic_formal_partContext ------------------------------------------------------------------

AdaParser::Generic_formal_partContext::Generic_formal_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Generic_formal_partContext::GENERIC() {
  return getToken(AdaParser::GENERIC, 0);
}

std::vector<AdaParser::Generic_formal_parameter_declarationContext *> AdaParser::Generic_formal_partContext::generic_formal_parameter_declaration() {
  return getRuleContexts<AdaParser::Generic_formal_parameter_declarationContext>();
}

AdaParser::Generic_formal_parameter_declarationContext* AdaParser::Generic_formal_partContext::generic_formal_parameter_declaration(size_t i) {
  return getRuleContext<AdaParser::Generic_formal_parameter_declarationContext>(i);
}

std::vector<AdaParser::Use_clauseContext *> AdaParser::Generic_formal_partContext::use_clause() {
  return getRuleContexts<AdaParser::Use_clauseContext>();
}

AdaParser::Use_clauseContext* AdaParser::Generic_formal_partContext::use_clause(size_t i) {
  return getRuleContext<AdaParser::Use_clauseContext>(i);
}


size_t AdaParser::Generic_formal_partContext::getRuleIndex() const {
  return AdaParser::RuleGeneric_formal_part;
}

void AdaParser::Generic_formal_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGeneric_formal_part(this);
}

void AdaParser::Generic_formal_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGeneric_formal_part(this);
}

AdaParser::Generic_formal_partContext* AdaParser::generic_formal_part() {
  Generic_formal_partContext *_localctx = _tracker.createInstance<Generic_formal_partContext>(_ctx, getState());
  enterRule(_localctx, 484, AdaParser::RuleGeneric_formal_part);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2836);
    match(AdaParser::GENERIC);
    setState(2841);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 67) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 67)) & 16421) != 0)) {
      setState(2839);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case AdaParser::TYPE:
        case AdaParser::WITH:
        case AdaParser::IDENTIFIER_: {
          setState(2837);
          generic_formal_parameter_declaration();
          break;
        }

        case AdaParser::USE: {
          setState(2838);
          use_clause();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(2843);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Generic_formal_parameter_declarationContext ------------------------------------------------------------------

AdaParser::Generic_formal_parameter_declarationContext::Generic_formal_parameter_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Formal_object_declarationContext* AdaParser::Generic_formal_parameter_declarationContext::formal_object_declaration() {
  return getRuleContext<AdaParser::Formal_object_declarationContext>(0);
}

AdaParser::Formal_type_declarationContext* AdaParser::Generic_formal_parameter_declarationContext::formal_type_declaration() {
  return getRuleContext<AdaParser::Formal_type_declarationContext>(0);
}

AdaParser::Formal_subprogram_declarationContext* AdaParser::Generic_formal_parameter_declarationContext::formal_subprogram_declaration() {
  return getRuleContext<AdaParser::Formal_subprogram_declarationContext>(0);
}

AdaParser::Formal_package_declarationContext* AdaParser::Generic_formal_parameter_declarationContext::formal_package_declaration() {
  return getRuleContext<AdaParser::Formal_package_declarationContext>(0);
}


size_t AdaParser::Generic_formal_parameter_declarationContext::getRuleIndex() const {
  return AdaParser::RuleGeneric_formal_parameter_declaration;
}

void AdaParser::Generic_formal_parameter_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGeneric_formal_parameter_declaration(this);
}

void AdaParser::Generic_formal_parameter_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGeneric_formal_parameter_declaration(this);
}

AdaParser::Generic_formal_parameter_declarationContext* AdaParser::generic_formal_parameter_declaration() {
  Generic_formal_parameter_declarationContext *_localctx = _tracker.createInstance<Generic_formal_parameter_declarationContext>(_ctx, getState());
  enterRule(_localctx, 486, AdaParser::RuleGeneric_formal_parameter_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2848);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 342, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2844);
      formal_object_declaration();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2845);
      formal_type_declaration();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2846);
      formal_subprogram_declaration();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2847);
      formal_package_declaration();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Generic_instantiationContext ------------------------------------------------------------------

AdaParser::Generic_instantiationContext::Generic_instantiationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Generic_instantiationContext::PACKAGE() {
  return getToken(AdaParser::PACKAGE, 0);
}

AdaParser::Defining_program_unit_nameContext* AdaParser::Generic_instantiationContext::defining_program_unit_name() {
  return getRuleContext<AdaParser::Defining_program_unit_nameContext>(0);
}

tree::TerminalNode* AdaParser::Generic_instantiationContext::IS() {
  return getToken(AdaParser::IS, 0);
}

tree::TerminalNode* AdaParser::Generic_instantiationContext::NEW() {
  return getToken(AdaParser::NEW, 0);
}

AdaParser::NameContext* AdaParser::Generic_instantiationContext::name() {
  return getRuleContext<AdaParser::NameContext>(0);
}

AdaParser::Generic_actual_partContext* AdaParser::Generic_instantiationContext::generic_actual_part() {
  return getRuleContext<AdaParser::Generic_actual_partContext>(0);
}

AdaParser::Aspect_specificationContext* AdaParser::Generic_instantiationContext::aspect_specification() {
  return getRuleContext<AdaParser::Aspect_specificationContext>(0);
}

tree::TerminalNode* AdaParser::Generic_instantiationContext::PROCEDURE() {
  return getToken(AdaParser::PROCEDURE, 0);
}

AdaParser::Overriding_indicatorContext* AdaParser::Generic_instantiationContext::overriding_indicator() {
  return getRuleContext<AdaParser::Overriding_indicatorContext>(0);
}

tree::TerminalNode* AdaParser::Generic_instantiationContext::FUNCTION() {
  return getToken(AdaParser::FUNCTION, 0);
}

AdaParser::Defining_designatorContext* AdaParser::Generic_instantiationContext::defining_designator() {
  return getRuleContext<AdaParser::Defining_designatorContext>(0);
}


size_t AdaParser::Generic_instantiationContext::getRuleIndex() const {
  return AdaParser::RuleGeneric_instantiation;
}

void AdaParser::Generic_instantiationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGeneric_instantiation(this);
}

void AdaParser::Generic_instantiationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGeneric_instantiation(this);
}

AdaParser::Generic_instantiationContext* AdaParser::generic_instantiation() {
  Generic_instantiationContext *_localctx = _tracker.createInstance<Generic_instantiationContext>(_ctx, getState());
  enterRule(_localctx, 488, AdaParser::RuleGeneric_instantiation);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2889);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 351, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2850);
      match(AdaParser::PACKAGE);
      setState(2851);
      defining_program_unit_name();
      setState(2852);
      match(AdaParser::IS);
      setState(2853);
      match(AdaParser::NEW);
      setState(2854);
      name(0);
      setState(2856);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::LP) {
        setState(2855);
        generic_actual_part();
      }
      setState(2859);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 344, _ctx)) {
      case 1: {
        setState(2858);
        aspect_specification();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2862);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::NOT

      || _la == AdaParser::OVERRIDING) {
        setState(2861);
        overriding_indicator();
      }
      setState(2864);
      match(AdaParser::PROCEDURE);
      setState(2865);
      defining_program_unit_name();
      setState(2866);
      match(AdaParser::IS);
      setState(2867);
      match(AdaParser::NEW);
      setState(2868);
      name(0);
      setState(2870);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::LP) {
        setState(2869);
        generic_actual_part();
      }
      setState(2873);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 347, _ctx)) {
      case 1: {
        setState(2872);
        aspect_specification();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2876);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::NOT

      || _la == AdaParser::OVERRIDING) {
        setState(2875);
        overriding_indicator();
      }
      setState(2878);
      match(AdaParser::FUNCTION);
      setState(2879);
      defining_designator();
      setState(2880);
      match(AdaParser::IS);
      setState(2881);
      match(AdaParser::NEW);
      setState(2882);
      name(0);
      setState(2884);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::LP) {
        setState(2883);
        generic_actual_part();
      }
      setState(2887);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 350, _ctx)) {
      case 1: {
        setState(2886);
        aspect_specification();
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Generic_actual_partContext ------------------------------------------------------------------

AdaParser::Generic_actual_partContext::Generic_actual_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Generic_actual_partContext::LP() {
  return getToken(AdaParser::LP, 0);
}

std::vector<AdaParser::Generic_associationContext *> AdaParser::Generic_actual_partContext::generic_association() {
  return getRuleContexts<AdaParser::Generic_associationContext>();
}

AdaParser::Generic_associationContext* AdaParser::Generic_actual_partContext::generic_association(size_t i) {
  return getRuleContext<AdaParser::Generic_associationContext>(i);
}

tree::TerminalNode* AdaParser::Generic_actual_partContext::RP() {
  return getToken(AdaParser::RP, 0);
}

std::vector<tree::TerminalNode *> AdaParser::Generic_actual_partContext::COMMA() {
  return getTokens(AdaParser::COMMA);
}

tree::TerminalNode* AdaParser::Generic_actual_partContext::COMMA(size_t i) {
  return getToken(AdaParser::COMMA, i);
}


size_t AdaParser::Generic_actual_partContext::getRuleIndex() const {
  return AdaParser::RuleGeneric_actual_part;
}

void AdaParser::Generic_actual_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGeneric_actual_part(this);
}

void AdaParser::Generic_actual_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGeneric_actual_part(this);
}

AdaParser::Generic_actual_partContext* AdaParser::generic_actual_part() {
  Generic_actual_partContext *_localctx = _tracker.createInstance<Generic_actual_partContext>(_ctx, getState());
  enterRule(_localctx, 490, AdaParser::RuleGeneric_actual_part);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2891);
    match(AdaParser::LP);
    setState(2892);
    generic_association();
    setState(2897);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == AdaParser::COMMA) {
      setState(2893);
      match(AdaParser::COMMA);
      setState(2894);
      generic_association();
      setState(2899);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2900);
    match(AdaParser::RP);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Generic_associationContext ------------------------------------------------------------------

AdaParser::Generic_associationContext::Generic_associationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Explicit_generic_actual_parameterContext* AdaParser::Generic_associationContext::explicit_generic_actual_parameter() {
  return getRuleContext<AdaParser::Explicit_generic_actual_parameterContext>(0);
}

AdaParser::Selector_nameContext* AdaParser::Generic_associationContext::selector_name() {
  return getRuleContext<AdaParser::Selector_nameContext>(0);
}

tree::TerminalNode* AdaParser::Generic_associationContext::ARROW() {
  return getToken(AdaParser::ARROW, 0);
}


size_t AdaParser::Generic_associationContext::getRuleIndex() const {
  return AdaParser::RuleGeneric_association;
}

void AdaParser::Generic_associationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGeneric_association(this);
}

void AdaParser::Generic_associationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGeneric_association(this);
}

AdaParser::Generic_associationContext* AdaParser::generic_association() {
  Generic_associationContext *_localctx = _tracker.createInstance<Generic_associationContext>(_ctx, getState());
  enterRule(_localctx, 492, AdaParser::RuleGeneric_association);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2905);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 353, _ctx)) {
    case 1: {
      setState(2902);
      selector_name();
      setState(2903);
      match(AdaParser::ARROW);
      break;
    }

    default:
      break;
    }
    setState(2907);
    explicit_generic_actual_parameter();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Explicit_generic_actual_parameterContext ------------------------------------------------------------------

AdaParser::Explicit_generic_actual_parameterContext::Explicit_generic_actual_parameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::ExpressionContext* AdaParser::Explicit_generic_actual_parameterContext::expression() {
  return getRuleContext<AdaParser::ExpressionContext>(0);
}

AdaParser::NameContext* AdaParser::Explicit_generic_actual_parameterContext::name() {
  return getRuleContext<AdaParser::NameContext>(0);
}

AdaParser::Subtype_markContext* AdaParser::Explicit_generic_actual_parameterContext::subtype_mark() {
  return getRuleContext<AdaParser::Subtype_markContext>(0);
}


size_t AdaParser::Explicit_generic_actual_parameterContext::getRuleIndex() const {
  return AdaParser::RuleExplicit_generic_actual_parameter;
}

void AdaParser::Explicit_generic_actual_parameterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExplicit_generic_actual_parameter(this);
}

void AdaParser::Explicit_generic_actual_parameterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExplicit_generic_actual_parameter(this);
}

AdaParser::Explicit_generic_actual_parameterContext* AdaParser::explicit_generic_actual_parameter() {
  Explicit_generic_actual_parameterContext *_localctx = _tracker.createInstance<Explicit_generic_actual_parameterContext>(_ctx, getState());
  enterRule(_localctx, 494, AdaParser::RuleExplicit_generic_actual_parameter);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2912);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 354, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2909);
      expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2910);
      name(0);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2911);
      subtype_mark();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Formal_object_declarationContext ------------------------------------------------------------------

AdaParser::Formal_object_declarationContext::Formal_object_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Defining_identifier_listContext* AdaParser::Formal_object_declarationContext::defining_identifier_list() {
  return getRuleContext<AdaParser::Defining_identifier_listContext>(0);
}

tree::TerminalNode* AdaParser::Formal_object_declarationContext::COLON() {
  return getToken(AdaParser::COLON, 0);
}

AdaParser::Mode_Context* AdaParser::Formal_object_declarationContext::mode_() {
  return getRuleContext<AdaParser::Mode_Context>(0);
}

AdaParser::Subtype_markContext* AdaParser::Formal_object_declarationContext::subtype_mark() {
  return getRuleContext<AdaParser::Subtype_markContext>(0);
}

tree::TerminalNode* AdaParser::Formal_object_declarationContext::SEMI() {
  return getToken(AdaParser::SEMI, 0);
}

AdaParser::Null_exclusionContext* AdaParser::Formal_object_declarationContext::null_exclusion() {
  return getRuleContext<AdaParser::Null_exclusionContext>(0);
}

tree::TerminalNode* AdaParser::Formal_object_declarationContext::ASSIGN() {
  return getToken(AdaParser::ASSIGN, 0);
}

AdaParser::Default_expressionContext* AdaParser::Formal_object_declarationContext::default_expression() {
  return getRuleContext<AdaParser::Default_expressionContext>(0);
}

AdaParser::Aspect_specificationContext* AdaParser::Formal_object_declarationContext::aspect_specification() {
  return getRuleContext<AdaParser::Aspect_specificationContext>(0);
}

AdaParser::Access_definitionContext* AdaParser::Formal_object_declarationContext::access_definition() {
  return getRuleContext<AdaParser::Access_definitionContext>(0);
}


size_t AdaParser::Formal_object_declarationContext::getRuleIndex() const {
  return AdaParser::RuleFormal_object_declaration;
}

void AdaParser::Formal_object_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFormal_object_declaration(this);
}

void AdaParser::Formal_object_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFormal_object_declaration(this);
}

AdaParser::Formal_object_declarationContext* AdaParser::formal_object_declaration() {
  Formal_object_declarationContext *_localctx = _tracker.createInstance<Formal_object_declarationContext>(_ctx, getState());
  enterRule(_localctx, 496, AdaParser::RuleFormal_object_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2941);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 360, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2914);
      defining_identifier_list();
      setState(2915);
      match(AdaParser::COLON);
      setState(2916);
      mode_();
      setState(2918);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::NOT) {
        setState(2917);
        null_exclusion();
      }
      setState(2920);
      subtype_mark();
      setState(2923);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::ASSIGN) {
        setState(2921);
        match(AdaParser::ASSIGN);
        setState(2922);
        default_expression();
      }
      setState(2926);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::WITH) {
        setState(2925);
        aspect_specification();
      }
      setState(2928);
      match(AdaParser::SEMI);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2930);
      defining_identifier_list();
      setState(2931);
      match(AdaParser::COLON);
      setState(2932);
      mode_();
      setState(2933);
      access_definition();
      setState(2936);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::ASSIGN) {
        setState(2934);
        match(AdaParser::ASSIGN);
        setState(2935);
        default_expression();
      }
      setState(2939);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 359, _ctx)) {
      case 1: {
        setState(2938);
        aspect_specification();
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Formal_type_declarationContext ------------------------------------------------------------------

AdaParser::Formal_type_declarationContext::Formal_type_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Formal_complete_type_declarationContext* AdaParser::Formal_type_declarationContext::formal_complete_type_declaration() {
  return getRuleContext<AdaParser::Formal_complete_type_declarationContext>(0);
}

AdaParser::Formal_incomplete_type_declarationContext* AdaParser::Formal_type_declarationContext::formal_incomplete_type_declaration() {
  return getRuleContext<AdaParser::Formal_incomplete_type_declarationContext>(0);
}


size_t AdaParser::Formal_type_declarationContext::getRuleIndex() const {
  return AdaParser::RuleFormal_type_declaration;
}

void AdaParser::Formal_type_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFormal_type_declaration(this);
}

void AdaParser::Formal_type_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFormal_type_declaration(this);
}

AdaParser::Formal_type_declarationContext* AdaParser::formal_type_declaration() {
  Formal_type_declarationContext *_localctx = _tracker.createInstance<Formal_type_declarationContext>(_ctx, getState());
  enterRule(_localctx, 498, AdaParser::RuleFormal_type_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2945);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 361, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2943);
      formal_complete_type_declaration();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2944);
      formal_incomplete_type_declaration();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Formal_complete_type_declarationContext ------------------------------------------------------------------

AdaParser::Formal_complete_type_declarationContext::Formal_complete_type_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Formal_complete_type_declarationContext::TYPE() {
  return getToken(AdaParser::TYPE, 0);
}

AdaParser::Defining_identifierContext* AdaParser::Formal_complete_type_declarationContext::defining_identifier() {
  return getRuleContext<AdaParser::Defining_identifierContext>(0);
}

tree::TerminalNode* AdaParser::Formal_complete_type_declarationContext::IS() {
  return getToken(AdaParser::IS, 0);
}

AdaParser::Formal_type_definitionContext* AdaParser::Formal_complete_type_declarationContext::formal_type_definition() {
  return getRuleContext<AdaParser::Formal_type_definitionContext>(0);
}

tree::TerminalNode* AdaParser::Formal_complete_type_declarationContext::SEMI() {
  return getToken(AdaParser::SEMI, 0);
}

AdaParser::Discriminant_partContext* AdaParser::Formal_complete_type_declarationContext::discriminant_part() {
  return getRuleContext<AdaParser::Discriminant_partContext>(0);
}

AdaParser::Aspect_specificationContext* AdaParser::Formal_complete_type_declarationContext::aspect_specification() {
  return getRuleContext<AdaParser::Aspect_specificationContext>(0);
}


size_t AdaParser::Formal_complete_type_declarationContext::getRuleIndex() const {
  return AdaParser::RuleFormal_complete_type_declaration;
}

void AdaParser::Formal_complete_type_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFormal_complete_type_declaration(this);
}

void AdaParser::Formal_complete_type_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFormal_complete_type_declaration(this);
}

AdaParser::Formal_complete_type_declarationContext* AdaParser::formal_complete_type_declaration() {
  Formal_complete_type_declarationContext *_localctx = _tracker.createInstance<Formal_complete_type_declarationContext>(_ctx, getState());
  enterRule(_localctx, 500, AdaParser::RuleFormal_complete_type_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2947);
    match(AdaParser::TYPE);
    setState(2948);
    defining_identifier();
    setState(2950);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::LP) {
      setState(2949);
      discriminant_part();
    }
    setState(2952);
    match(AdaParser::IS);
    setState(2953);
    formal_type_definition();
    setState(2955);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::WITH) {
      setState(2954);
      aspect_specification();
    }
    setState(2957);
    match(AdaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Formal_incomplete_type_declarationContext ------------------------------------------------------------------

AdaParser::Formal_incomplete_type_declarationContext::Formal_incomplete_type_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Formal_incomplete_type_declarationContext::TYPE() {
  return getToken(AdaParser::TYPE, 0);
}

AdaParser::Defining_identifierContext* AdaParser::Formal_incomplete_type_declarationContext::defining_identifier() {
  return getRuleContext<AdaParser::Defining_identifierContext>(0);
}

tree::TerminalNode* AdaParser::Formal_incomplete_type_declarationContext::SEMI() {
  return getToken(AdaParser::SEMI, 0);
}

AdaParser::Discriminant_partContext* AdaParser::Formal_incomplete_type_declarationContext::discriminant_part() {
  return getRuleContext<AdaParser::Discriminant_partContext>(0);
}

tree::TerminalNode* AdaParser::Formal_incomplete_type_declarationContext::IS() {
  return getToken(AdaParser::IS, 0);
}

tree::TerminalNode* AdaParser::Formal_incomplete_type_declarationContext::TAGGED() {
  return getToken(AdaParser::TAGGED, 0);
}


size_t AdaParser::Formal_incomplete_type_declarationContext::getRuleIndex() const {
  return AdaParser::RuleFormal_incomplete_type_declaration;
}

void AdaParser::Formal_incomplete_type_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFormal_incomplete_type_declaration(this);
}

void AdaParser::Formal_incomplete_type_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFormal_incomplete_type_declaration(this);
}

AdaParser::Formal_incomplete_type_declarationContext* AdaParser::formal_incomplete_type_declaration() {
  Formal_incomplete_type_declarationContext *_localctx = _tracker.createInstance<Formal_incomplete_type_declarationContext>(_ctx, getState());
  enterRule(_localctx, 502, AdaParser::RuleFormal_incomplete_type_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2959);
    match(AdaParser::TYPE);
    setState(2960);
    defining_identifier();
    setState(2962);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::LP) {
      setState(2961);
      discriminant_part();
    }
    setState(2966);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::IS) {
      setState(2964);
      match(AdaParser::IS);
      setState(2965);
      match(AdaParser::TAGGED);
    }
    setState(2968);
    match(AdaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Formal_type_definitionContext ------------------------------------------------------------------

AdaParser::Formal_type_definitionContext::Formal_type_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Formal_private_type_definitionContext* AdaParser::Formal_type_definitionContext::formal_private_type_definition() {
  return getRuleContext<AdaParser::Formal_private_type_definitionContext>(0);
}

AdaParser::Formal_derived_type_definitionContext* AdaParser::Formal_type_definitionContext::formal_derived_type_definition() {
  return getRuleContext<AdaParser::Formal_derived_type_definitionContext>(0);
}

AdaParser::Formal_discrete_type_definitionContext* AdaParser::Formal_type_definitionContext::formal_discrete_type_definition() {
  return getRuleContext<AdaParser::Formal_discrete_type_definitionContext>(0);
}

AdaParser::Formal_signed_integer_type_definitionContext* AdaParser::Formal_type_definitionContext::formal_signed_integer_type_definition() {
  return getRuleContext<AdaParser::Formal_signed_integer_type_definitionContext>(0);
}

AdaParser::Formal_modular_type_definitionContext* AdaParser::Formal_type_definitionContext::formal_modular_type_definition() {
  return getRuleContext<AdaParser::Formal_modular_type_definitionContext>(0);
}

AdaParser::Formal_floating_point_type_definitionContext* AdaParser::Formal_type_definitionContext::formal_floating_point_type_definition() {
  return getRuleContext<AdaParser::Formal_floating_point_type_definitionContext>(0);
}

AdaParser::Formal_ordinary_fixed_point_type_definitionContext* AdaParser::Formal_type_definitionContext::formal_ordinary_fixed_point_type_definition() {
  return getRuleContext<AdaParser::Formal_ordinary_fixed_point_type_definitionContext>(0);
}

AdaParser::Formal_decimal_fixed_point_type_definitionContext* AdaParser::Formal_type_definitionContext::formal_decimal_fixed_point_type_definition() {
  return getRuleContext<AdaParser::Formal_decimal_fixed_point_type_definitionContext>(0);
}

AdaParser::Formal_array_type_definitionContext* AdaParser::Formal_type_definitionContext::formal_array_type_definition() {
  return getRuleContext<AdaParser::Formal_array_type_definitionContext>(0);
}

AdaParser::Formal_access_type_definitionContext* AdaParser::Formal_type_definitionContext::formal_access_type_definition() {
  return getRuleContext<AdaParser::Formal_access_type_definitionContext>(0);
}

AdaParser::Formal_interface_type_definitionContext* AdaParser::Formal_type_definitionContext::formal_interface_type_definition() {
  return getRuleContext<AdaParser::Formal_interface_type_definitionContext>(0);
}


size_t AdaParser::Formal_type_definitionContext::getRuleIndex() const {
  return AdaParser::RuleFormal_type_definition;
}

void AdaParser::Formal_type_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFormal_type_definition(this);
}

void AdaParser::Formal_type_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFormal_type_definition(this);
}

AdaParser::Formal_type_definitionContext* AdaParser::formal_type_definition() {
  Formal_type_definitionContext *_localctx = _tracker.createInstance<Formal_type_definitionContext>(_ctx, getState());
  enterRule(_localctx, 504, AdaParser::RuleFormal_type_definition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2981);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 366, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2970);
      formal_private_type_definition();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2971);
      formal_derived_type_definition();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2972);
      formal_discrete_type_definition();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2973);
      formal_signed_integer_type_definition();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2974);
      formal_modular_type_definition();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(2975);
      formal_floating_point_type_definition();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(2976);
      formal_ordinary_fixed_point_type_definition();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(2977);
      formal_decimal_fixed_point_type_definition();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(2978);
      formal_array_type_definition();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(2979);
      formal_access_type_definition();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(2980);
      formal_interface_type_definition();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Formal_private_type_definitionContext ------------------------------------------------------------------

AdaParser::Formal_private_type_definitionContext::Formal_private_type_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Formal_private_type_definitionContext::PRIVATE() {
  return getToken(AdaParser::PRIVATE, 0);
}

tree::TerminalNode* AdaParser::Formal_private_type_definitionContext::TAGGED() {
  return getToken(AdaParser::TAGGED, 0);
}

tree::TerminalNode* AdaParser::Formal_private_type_definitionContext::LIMITED() {
  return getToken(AdaParser::LIMITED, 0);
}

tree::TerminalNode* AdaParser::Formal_private_type_definitionContext::ABSTRACT() {
  return getToken(AdaParser::ABSTRACT, 0);
}


size_t AdaParser::Formal_private_type_definitionContext::getRuleIndex() const {
  return AdaParser::RuleFormal_private_type_definition;
}

void AdaParser::Formal_private_type_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFormal_private_type_definition(this);
}

void AdaParser::Formal_private_type_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFormal_private_type_definition(this);
}

AdaParser::Formal_private_type_definitionContext* AdaParser::formal_private_type_definition() {
  Formal_private_type_definitionContext *_localctx = _tracker.createInstance<Formal_private_type_definitionContext>(_ctx, getState());
  enterRule(_localctx, 506, AdaParser::RuleFormal_private_type_definition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2987);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::ABSTRACT

    || _la == AdaParser::TAGGED) {
      setState(2984);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::ABSTRACT) {
        setState(2983);
        match(AdaParser::ABSTRACT);
      }
      setState(2986);
      match(AdaParser::TAGGED);
    }
    setState(2990);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::LIMITED) {
      setState(2989);
      match(AdaParser::LIMITED);
    }
    setState(2992);
    match(AdaParser::PRIVATE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Formal_derived_type_definitionContext ------------------------------------------------------------------

AdaParser::Formal_derived_type_definitionContext::Formal_derived_type_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Formal_derived_type_definitionContext::SYNCHRONIZED() {
  return getToken(AdaParser::SYNCHRONIZED, 0);
}

tree::TerminalNode* AdaParser::Formal_derived_type_definitionContext::NEW() {
  return getToken(AdaParser::NEW, 0);
}

AdaParser::Subtype_markContext* AdaParser::Formal_derived_type_definitionContext::subtype_mark() {
  return getRuleContext<AdaParser::Subtype_markContext>(0);
}

tree::TerminalNode* AdaParser::Formal_derived_type_definitionContext::ABSTRACT() {
  return getToken(AdaParser::ABSTRACT, 0);
}

tree::TerminalNode* AdaParser::Formal_derived_type_definitionContext::LIMITED() {
  return getToken(AdaParser::LIMITED, 0);
}

tree::TerminalNode* AdaParser::Formal_derived_type_definitionContext::WITH() {
  return getToken(AdaParser::WITH, 0);
}

tree::TerminalNode* AdaParser::Formal_derived_type_definitionContext::PRIVATE() {
  return getToken(AdaParser::PRIVATE, 0);
}

tree::TerminalNode* AdaParser::Formal_derived_type_definitionContext::AND() {
  return getToken(AdaParser::AND, 0);
}

AdaParser::Interface_listContext* AdaParser::Formal_derived_type_definitionContext::interface_list() {
  return getRuleContext<AdaParser::Interface_listContext>(0);
}


size_t AdaParser::Formal_derived_type_definitionContext::getRuleIndex() const {
  return AdaParser::RuleFormal_derived_type_definition;
}

void AdaParser::Formal_derived_type_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFormal_derived_type_definition(this);
}

void AdaParser::Formal_derived_type_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFormal_derived_type_definition(this);
}

AdaParser::Formal_derived_type_definitionContext* AdaParser::formal_derived_type_definition() {
  Formal_derived_type_definitionContext *_localctx = _tracker.createInstance<Formal_derived_type_definitionContext>(_ctx, getState());
  enterRule(_localctx, 508, AdaParser::RuleFormal_derived_type_definition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2995);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::ABSTRACT) {
      setState(2994);
      match(AdaParser::ABSTRACT);
    }
    setState(2998);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::LIMITED) {
      setState(2997);
      match(AdaParser::LIMITED);
    }
    setState(3000);
    match(AdaParser::SYNCHRONIZED);
    setState(3001);
    match(AdaParser::NEW);
    setState(3002);
    subtype_mark();
    setState(3009);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 373, _ctx)) {
    case 1: {
      setState(3005);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::AND) {
        setState(3003);
        match(AdaParser::AND);
        setState(3004);
        interface_list();
      }
      setState(3007);
      match(AdaParser::WITH);
      setState(3008);
      match(AdaParser::PRIVATE);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Formal_discrete_type_definitionContext ------------------------------------------------------------------

AdaParser::Formal_discrete_type_definitionContext::Formal_discrete_type_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Formal_discrete_type_definitionContext::LP() {
  return getToken(AdaParser::LP, 0);
}

tree::TerminalNode* AdaParser::Formal_discrete_type_definitionContext::BOX() {
  return getToken(AdaParser::BOX, 0);
}

tree::TerminalNode* AdaParser::Formal_discrete_type_definitionContext::RP() {
  return getToken(AdaParser::RP, 0);
}


size_t AdaParser::Formal_discrete_type_definitionContext::getRuleIndex() const {
  return AdaParser::RuleFormal_discrete_type_definition;
}

void AdaParser::Formal_discrete_type_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFormal_discrete_type_definition(this);
}

void AdaParser::Formal_discrete_type_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFormal_discrete_type_definition(this);
}

AdaParser::Formal_discrete_type_definitionContext* AdaParser::formal_discrete_type_definition() {
  Formal_discrete_type_definitionContext *_localctx = _tracker.createInstance<Formal_discrete_type_definitionContext>(_ctx, getState());
  enterRule(_localctx, 510, AdaParser::RuleFormal_discrete_type_definition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3011);
    match(AdaParser::LP);
    setState(3012);
    match(AdaParser::BOX);
    setState(3013);
    match(AdaParser::RP);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Formal_signed_integer_type_definitionContext ------------------------------------------------------------------

AdaParser::Formal_signed_integer_type_definitionContext::Formal_signed_integer_type_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::RangeContext* AdaParser::Formal_signed_integer_type_definitionContext::range() {
  return getRuleContext<AdaParser::RangeContext>(0);
}

tree::TerminalNode* AdaParser::Formal_signed_integer_type_definitionContext::BOX() {
  return getToken(AdaParser::BOX, 0);
}


size_t AdaParser::Formal_signed_integer_type_definitionContext::getRuleIndex() const {
  return AdaParser::RuleFormal_signed_integer_type_definition;
}

void AdaParser::Formal_signed_integer_type_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFormal_signed_integer_type_definition(this);
}

void AdaParser::Formal_signed_integer_type_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFormal_signed_integer_type_definition(this);
}

AdaParser::Formal_signed_integer_type_definitionContext* AdaParser::formal_signed_integer_type_definition() {
  Formal_signed_integer_type_definitionContext *_localctx = _tracker.createInstance<Formal_signed_integer_type_definitionContext>(_ctx, getState());
  enterRule(_localctx, 512, AdaParser::RuleFormal_signed_integer_type_definition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3015);
    range();
    setState(3016);
    match(AdaParser::BOX);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Formal_modular_type_definitionContext ------------------------------------------------------------------

AdaParser::Formal_modular_type_definitionContext::Formal_modular_type_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Formal_modular_type_definitionContext::MOD() {
  return getToken(AdaParser::MOD, 0);
}

tree::TerminalNode* AdaParser::Formal_modular_type_definitionContext::BOX() {
  return getToken(AdaParser::BOX, 0);
}


size_t AdaParser::Formal_modular_type_definitionContext::getRuleIndex() const {
  return AdaParser::RuleFormal_modular_type_definition;
}

void AdaParser::Formal_modular_type_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFormal_modular_type_definition(this);
}

void AdaParser::Formal_modular_type_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFormal_modular_type_definition(this);
}

AdaParser::Formal_modular_type_definitionContext* AdaParser::formal_modular_type_definition() {
  Formal_modular_type_definitionContext *_localctx = _tracker.createInstance<Formal_modular_type_definitionContext>(_ctx, getState());
  enterRule(_localctx, 514, AdaParser::RuleFormal_modular_type_definition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3018);
    match(AdaParser::MOD);
    setState(3019);
    match(AdaParser::BOX);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Formal_floating_point_type_definitionContext ------------------------------------------------------------------

AdaParser::Formal_floating_point_type_definitionContext::Formal_floating_point_type_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Formal_floating_point_type_definitionContext::DIGITS() {
  return getToken(AdaParser::DIGITS, 0);
}

tree::TerminalNode* AdaParser::Formal_floating_point_type_definitionContext::BOX() {
  return getToken(AdaParser::BOX, 0);
}


size_t AdaParser::Formal_floating_point_type_definitionContext::getRuleIndex() const {
  return AdaParser::RuleFormal_floating_point_type_definition;
}

void AdaParser::Formal_floating_point_type_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFormal_floating_point_type_definition(this);
}

void AdaParser::Formal_floating_point_type_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFormal_floating_point_type_definition(this);
}

AdaParser::Formal_floating_point_type_definitionContext* AdaParser::formal_floating_point_type_definition() {
  Formal_floating_point_type_definitionContext *_localctx = _tracker.createInstance<Formal_floating_point_type_definitionContext>(_ctx, getState());
  enterRule(_localctx, 516, AdaParser::RuleFormal_floating_point_type_definition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3021);
    match(AdaParser::DIGITS);
    setState(3022);
    match(AdaParser::BOX);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Formal_ordinary_fixed_point_type_definitionContext ------------------------------------------------------------------

AdaParser::Formal_ordinary_fixed_point_type_definitionContext::Formal_ordinary_fixed_point_type_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Formal_ordinary_fixed_point_type_definitionContext::DELTA() {
  return getToken(AdaParser::DELTA, 0);
}

tree::TerminalNode* AdaParser::Formal_ordinary_fixed_point_type_definitionContext::BOX() {
  return getToken(AdaParser::BOX, 0);
}


size_t AdaParser::Formal_ordinary_fixed_point_type_definitionContext::getRuleIndex() const {
  return AdaParser::RuleFormal_ordinary_fixed_point_type_definition;
}

void AdaParser::Formal_ordinary_fixed_point_type_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFormal_ordinary_fixed_point_type_definition(this);
}

void AdaParser::Formal_ordinary_fixed_point_type_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFormal_ordinary_fixed_point_type_definition(this);
}

AdaParser::Formal_ordinary_fixed_point_type_definitionContext* AdaParser::formal_ordinary_fixed_point_type_definition() {
  Formal_ordinary_fixed_point_type_definitionContext *_localctx = _tracker.createInstance<Formal_ordinary_fixed_point_type_definitionContext>(_ctx, getState());
  enterRule(_localctx, 518, AdaParser::RuleFormal_ordinary_fixed_point_type_definition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3024);
    match(AdaParser::DELTA);
    setState(3025);
    match(AdaParser::BOX);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Formal_decimal_fixed_point_type_definitionContext ------------------------------------------------------------------

AdaParser::Formal_decimal_fixed_point_type_definitionContext::Formal_decimal_fixed_point_type_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Formal_decimal_fixed_point_type_definitionContext::DELTA() {
  return getToken(AdaParser::DELTA, 0);
}

std::vector<tree::TerminalNode *> AdaParser::Formal_decimal_fixed_point_type_definitionContext::BOX() {
  return getTokens(AdaParser::BOX);
}

tree::TerminalNode* AdaParser::Formal_decimal_fixed_point_type_definitionContext::BOX(size_t i) {
  return getToken(AdaParser::BOX, i);
}

tree::TerminalNode* AdaParser::Formal_decimal_fixed_point_type_definitionContext::DIGITS() {
  return getToken(AdaParser::DIGITS, 0);
}


size_t AdaParser::Formal_decimal_fixed_point_type_definitionContext::getRuleIndex() const {
  return AdaParser::RuleFormal_decimal_fixed_point_type_definition;
}

void AdaParser::Formal_decimal_fixed_point_type_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFormal_decimal_fixed_point_type_definition(this);
}

void AdaParser::Formal_decimal_fixed_point_type_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFormal_decimal_fixed_point_type_definition(this);
}

AdaParser::Formal_decimal_fixed_point_type_definitionContext* AdaParser::formal_decimal_fixed_point_type_definition() {
  Formal_decimal_fixed_point_type_definitionContext *_localctx = _tracker.createInstance<Formal_decimal_fixed_point_type_definitionContext>(_ctx, getState());
  enterRule(_localctx, 520, AdaParser::RuleFormal_decimal_fixed_point_type_definition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3027);
    match(AdaParser::DELTA);
    setState(3028);
    match(AdaParser::BOX);
    setState(3029);
    match(AdaParser::DIGITS);
    setState(3030);
    match(AdaParser::BOX);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Formal_array_type_definitionContext ------------------------------------------------------------------

AdaParser::Formal_array_type_definitionContext::Formal_array_type_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Array_type_definitionContext* AdaParser::Formal_array_type_definitionContext::array_type_definition() {
  return getRuleContext<AdaParser::Array_type_definitionContext>(0);
}


size_t AdaParser::Formal_array_type_definitionContext::getRuleIndex() const {
  return AdaParser::RuleFormal_array_type_definition;
}

void AdaParser::Formal_array_type_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFormal_array_type_definition(this);
}

void AdaParser::Formal_array_type_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFormal_array_type_definition(this);
}

AdaParser::Formal_array_type_definitionContext* AdaParser::formal_array_type_definition() {
  Formal_array_type_definitionContext *_localctx = _tracker.createInstance<Formal_array_type_definitionContext>(_ctx, getState());
  enterRule(_localctx, 522, AdaParser::RuleFormal_array_type_definition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3032);
    array_type_definition();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Formal_access_type_definitionContext ------------------------------------------------------------------

AdaParser::Formal_access_type_definitionContext::Formal_access_type_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Access_type_definitionContext* AdaParser::Formal_access_type_definitionContext::access_type_definition() {
  return getRuleContext<AdaParser::Access_type_definitionContext>(0);
}


size_t AdaParser::Formal_access_type_definitionContext::getRuleIndex() const {
  return AdaParser::RuleFormal_access_type_definition;
}

void AdaParser::Formal_access_type_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFormal_access_type_definition(this);
}

void AdaParser::Formal_access_type_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFormal_access_type_definition(this);
}

AdaParser::Formal_access_type_definitionContext* AdaParser::formal_access_type_definition() {
  Formal_access_type_definitionContext *_localctx = _tracker.createInstance<Formal_access_type_definitionContext>(_ctx, getState());
  enterRule(_localctx, 524, AdaParser::RuleFormal_access_type_definition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3034);
    access_type_definition();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Formal_interface_type_definitionContext ------------------------------------------------------------------

AdaParser::Formal_interface_type_definitionContext::Formal_interface_type_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Interface_type_definitionContext* AdaParser::Formal_interface_type_definitionContext::interface_type_definition() {
  return getRuleContext<AdaParser::Interface_type_definitionContext>(0);
}


size_t AdaParser::Formal_interface_type_definitionContext::getRuleIndex() const {
  return AdaParser::RuleFormal_interface_type_definition;
}

void AdaParser::Formal_interface_type_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFormal_interface_type_definition(this);
}

void AdaParser::Formal_interface_type_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFormal_interface_type_definition(this);
}

AdaParser::Formal_interface_type_definitionContext* AdaParser::formal_interface_type_definition() {
  Formal_interface_type_definitionContext *_localctx = _tracker.createInstance<Formal_interface_type_definitionContext>(_ctx, getState());
  enterRule(_localctx, 526, AdaParser::RuleFormal_interface_type_definition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3036);
    interface_type_definition();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Formal_subprogram_declarationContext ------------------------------------------------------------------

AdaParser::Formal_subprogram_declarationContext::Formal_subprogram_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Formal_concrete_subprogram_declarationContext* AdaParser::Formal_subprogram_declarationContext::formal_concrete_subprogram_declaration() {
  return getRuleContext<AdaParser::Formal_concrete_subprogram_declarationContext>(0);
}

AdaParser::Formal_abstract_subprogram_declarationContext* AdaParser::Formal_subprogram_declarationContext::formal_abstract_subprogram_declaration() {
  return getRuleContext<AdaParser::Formal_abstract_subprogram_declarationContext>(0);
}


size_t AdaParser::Formal_subprogram_declarationContext::getRuleIndex() const {
  return AdaParser::RuleFormal_subprogram_declaration;
}

void AdaParser::Formal_subprogram_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFormal_subprogram_declaration(this);
}

void AdaParser::Formal_subprogram_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFormal_subprogram_declaration(this);
}

AdaParser::Formal_subprogram_declarationContext* AdaParser::formal_subprogram_declaration() {
  Formal_subprogram_declarationContext *_localctx = _tracker.createInstance<Formal_subprogram_declarationContext>(_ctx, getState());
  enterRule(_localctx, 528, AdaParser::RuleFormal_subprogram_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3040);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 374, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3038);
      formal_concrete_subprogram_declaration();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3039);
      formal_abstract_subprogram_declaration();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Formal_concrete_subprogram_declarationContext ------------------------------------------------------------------

AdaParser::Formal_concrete_subprogram_declarationContext::Formal_concrete_subprogram_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Formal_concrete_subprogram_declarationContext::WITH() {
  return getToken(AdaParser::WITH, 0);
}

AdaParser::Subprogram_specificationContext* AdaParser::Formal_concrete_subprogram_declarationContext::subprogram_specification() {
  return getRuleContext<AdaParser::Subprogram_specificationContext>(0);
}

tree::TerminalNode* AdaParser::Formal_concrete_subprogram_declarationContext::SEMI() {
  return getToken(AdaParser::SEMI, 0);
}

tree::TerminalNode* AdaParser::Formal_concrete_subprogram_declarationContext::IS() {
  return getToken(AdaParser::IS, 0);
}

AdaParser::Subprogram_defaultContext* AdaParser::Formal_concrete_subprogram_declarationContext::subprogram_default() {
  return getRuleContext<AdaParser::Subprogram_defaultContext>(0);
}

AdaParser::Aspect_specificationContext* AdaParser::Formal_concrete_subprogram_declarationContext::aspect_specification() {
  return getRuleContext<AdaParser::Aspect_specificationContext>(0);
}


size_t AdaParser::Formal_concrete_subprogram_declarationContext::getRuleIndex() const {
  return AdaParser::RuleFormal_concrete_subprogram_declaration;
}

void AdaParser::Formal_concrete_subprogram_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFormal_concrete_subprogram_declaration(this);
}

void AdaParser::Formal_concrete_subprogram_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFormal_concrete_subprogram_declaration(this);
}

AdaParser::Formal_concrete_subprogram_declarationContext* AdaParser::formal_concrete_subprogram_declaration() {
  Formal_concrete_subprogram_declarationContext *_localctx = _tracker.createInstance<Formal_concrete_subprogram_declarationContext>(_ctx, getState());
  enterRule(_localctx, 530, AdaParser::RuleFormal_concrete_subprogram_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3042);
    match(AdaParser::WITH);
    setState(3043);
    subprogram_specification();
    setState(3046);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::IS) {
      setState(3044);
      match(AdaParser::IS);
      setState(3045);
      subprogram_default();
    }
    setState(3049);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::WITH) {
      setState(3048);
      aspect_specification();
    }
    setState(3051);
    match(AdaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Formal_abstract_subprogram_declarationContext ------------------------------------------------------------------

AdaParser::Formal_abstract_subprogram_declarationContext::Formal_abstract_subprogram_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Formal_abstract_subprogram_declarationContext::WITH() {
  return getToken(AdaParser::WITH, 0);
}

AdaParser::Subprogram_specificationContext* AdaParser::Formal_abstract_subprogram_declarationContext::subprogram_specification() {
  return getRuleContext<AdaParser::Subprogram_specificationContext>(0);
}

tree::TerminalNode* AdaParser::Formal_abstract_subprogram_declarationContext::IS() {
  return getToken(AdaParser::IS, 0);
}

tree::TerminalNode* AdaParser::Formal_abstract_subprogram_declarationContext::ABSTRACT() {
  return getToken(AdaParser::ABSTRACT, 0);
}

tree::TerminalNode* AdaParser::Formal_abstract_subprogram_declarationContext::SEMI() {
  return getToken(AdaParser::SEMI, 0);
}

AdaParser::Subprogram_defaultContext* AdaParser::Formal_abstract_subprogram_declarationContext::subprogram_default() {
  return getRuleContext<AdaParser::Subprogram_defaultContext>(0);
}

AdaParser::Aspect_specificationContext* AdaParser::Formal_abstract_subprogram_declarationContext::aspect_specification() {
  return getRuleContext<AdaParser::Aspect_specificationContext>(0);
}


size_t AdaParser::Formal_abstract_subprogram_declarationContext::getRuleIndex() const {
  return AdaParser::RuleFormal_abstract_subprogram_declaration;
}

void AdaParser::Formal_abstract_subprogram_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFormal_abstract_subprogram_declaration(this);
}

void AdaParser::Formal_abstract_subprogram_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFormal_abstract_subprogram_declaration(this);
}

AdaParser::Formal_abstract_subprogram_declarationContext* AdaParser::formal_abstract_subprogram_declaration() {
  Formal_abstract_subprogram_declarationContext *_localctx = _tracker.createInstance<Formal_abstract_subprogram_declarationContext>(_ctx, getState());
  enterRule(_localctx, 532, AdaParser::RuleFormal_abstract_subprogram_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3053);
    match(AdaParser::WITH);
    setState(3054);
    subprogram_specification();
    setState(3055);
    match(AdaParser::IS);
    setState(3056);
    match(AdaParser::ABSTRACT);
    setState(3058);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::NULL_ || ((((_la - 81) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 81)) & 549755815425) != 0)) {
      setState(3057);
      subprogram_default();
    }
    setState(3061);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::WITH) {
      setState(3060);
      aspect_specification();
    }
    setState(3063);
    match(AdaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Subprogram_defaultContext ------------------------------------------------------------------

AdaParser::Subprogram_defaultContext::Subprogram_defaultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::NameContext* AdaParser::Subprogram_defaultContext::name() {
  return getRuleContext<AdaParser::NameContext>(0);
}

tree::TerminalNode* AdaParser::Subprogram_defaultContext::BOX() {
  return getToken(AdaParser::BOX, 0);
}

tree::TerminalNode* AdaParser::Subprogram_defaultContext::NULL_() {
  return getToken(AdaParser::NULL_, 0);
}


size_t AdaParser::Subprogram_defaultContext::getRuleIndex() const {
  return AdaParser::RuleSubprogram_default;
}

void AdaParser::Subprogram_defaultContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubprogram_default(this);
}

void AdaParser::Subprogram_defaultContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubprogram_default(this);
}

AdaParser::Subprogram_defaultContext* AdaParser::subprogram_default() {
  Subprogram_defaultContext *_localctx = _tracker.createInstance<Subprogram_defaultContext>(_ctx, getState());
  enterRule(_localctx, 534, AdaParser::RuleSubprogram_default);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3068);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AdaParser::IDENTIFIER_:
      case AdaParser::CHARACTER_LITERAL_:
      case AdaParser::STRING_LITERAL_: {
        enterOuterAlt(_localctx, 1);
        setState(3065);
        name(0);
        break;
      }

      case AdaParser::BOX: {
        enterOuterAlt(_localctx, 2);
        setState(3066);
        match(AdaParser::BOX);
        break;
      }

      case AdaParser::NULL_: {
        enterOuterAlt(_localctx, 3);
        setState(3067);
        match(AdaParser::NULL_);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Formal_package_declarationContext ------------------------------------------------------------------

AdaParser::Formal_package_declarationContext::Formal_package_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Formal_package_declarationContext::WITH() {
  return getToken(AdaParser::WITH, 0);
}

tree::TerminalNode* AdaParser::Formal_package_declarationContext::PACKAGE() {
  return getToken(AdaParser::PACKAGE, 0);
}

AdaParser::Defining_identifierContext* AdaParser::Formal_package_declarationContext::defining_identifier() {
  return getRuleContext<AdaParser::Defining_identifierContext>(0);
}

tree::TerminalNode* AdaParser::Formal_package_declarationContext::IS() {
  return getToken(AdaParser::IS, 0);
}

tree::TerminalNode* AdaParser::Formal_package_declarationContext::NEW() {
  return getToken(AdaParser::NEW, 0);
}

AdaParser::NameContext* AdaParser::Formal_package_declarationContext::name() {
  return getRuleContext<AdaParser::NameContext>(0);
}

AdaParser::Formal_package_actual_partContext* AdaParser::Formal_package_declarationContext::formal_package_actual_part() {
  return getRuleContext<AdaParser::Formal_package_actual_partContext>(0);
}

tree::TerminalNode* AdaParser::Formal_package_declarationContext::SEMI() {
  return getToken(AdaParser::SEMI, 0);
}

AdaParser::Aspect_specificationContext* AdaParser::Formal_package_declarationContext::aspect_specification() {
  return getRuleContext<AdaParser::Aspect_specificationContext>(0);
}


size_t AdaParser::Formal_package_declarationContext::getRuleIndex() const {
  return AdaParser::RuleFormal_package_declaration;
}

void AdaParser::Formal_package_declarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFormal_package_declaration(this);
}

void AdaParser::Formal_package_declarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFormal_package_declaration(this);
}

AdaParser::Formal_package_declarationContext* AdaParser::formal_package_declaration() {
  Formal_package_declarationContext *_localctx = _tracker.createInstance<Formal_package_declarationContext>(_ctx, getState());
  enterRule(_localctx, 536, AdaParser::RuleFormal_package_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3070);
    match(AdaParser::WITH);
    setState(3071);
    match(AdaParser::PACKAGE);
    setState(3072);
    defining_identifier();
    setState(3073);
    match(AdaParser::IS);
    setState(3074);
    match(AdaParser::NEW);
    setState(3075);
    name(0);
    setState(3076);
    formal_package_actual_part();
    setState(3078);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::WITH) {
      setState(3077);
      aspect_specification();
    }
    setState(3080);
    match(AdaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Formal_package_actual_partContext ------------------------------------------------------------------

AdaParser::Formal_package_actual_partContext::Formal_package_actual_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Formal_package_actual_partContext::LP() {
  return getToken(AdaParser::LP, 0);
}

tree::TerminalNode* AdaParser::Formal_package_actual_partContext::BOX() {
  return getToken(AdaParser::BOX, 0);
}

tree::TerminalNode* AdaParser::Formal_package_actual_partContext::RP() {
  return getToken(AdaParser::RP, 0);
}

tree::TerminalNode* AdaParser::Formal_package_actual_partContext::OTHERS() {
  return getToken(AdaParser::OTHERS, 0);
}

tree::TerminalNode* AdaParser::Formal_package_actual_partContext::ARROW() {
  return getToken(AdaParser::ARROW, 0);
}

AdaParser::Generic_actual_partContext* AdaParser::Formal_package_actual_partContext::generic_actual_part() {
  return getRuleContext<AdaParser::Generic_actual_partContext>(0);
}

std::vector<AdaParser::Formal_package_associationContext *> AdaParser::Formal_package_actual_partContext::formal_package_association() {
  return getRuleContexts<AdaParser::Formal_package_associationContext>();
}

AdaParser::Formal_package_associationContext* AdaParser::Formal_package_actual_partContext::formal_package_association(size_t i) {
  return getRuleContext<AdaParser::Formal_package_associationContext>(i);
}

std::vector<tree::TerminalNode *> AdaParser::Formal_package_actual_partContext::COMMA() {
  return getTokens(AdaParser::COMMA);
}

tree::TerminalNode* AdaParser::Formal_package_actual_partContext::COMMA(size_t i) {
  return getToken(AdaParser::COMMA, i);
}


size_t AdaParser::Formal_package_actual_partContext::getRuleIndex() const {
  return AdaParser::RuleFormal_package_actual_part;
}

void AdaParser::Formal_package_actual_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFormal_package_actual_part(this);
}

void AdaParser::Formal_package_actual_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFormal_package_actual_part(this);
}

AdaParser::Formal_package_actual_partContext* AdaParser::formal_package_actual_part() {
  Formal_package_actual_partContext *_localctx = _tracker.createInstance<Formal_package_actual_partContext>(_ctx, getState());
  enterRule(_localctx, 538, AdaParser::RuleFormal_package_actual_part);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(3109);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 385, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3082);
      match(AdaParser::LP);
      setState(3085);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::OTHERS) {
        setState(3083);
        match(AdaParser::OTHERS);
        setState(3084);
        match(AdaParser::ARROW);
      }
      setState(3087);
      match(AdaParser::BOX);
      setState(3088);
      match(AdaParser::RP);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3090);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::LP) {
        setState(3089);
        generic_actual_part();
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3092);
      match(AdaParser::LP);
      setState(3093);
      formal_package_association();
      setState(3098);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 383, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(3094);
          match(AdaParser::COMMA);
          setState(3095);
          formal_package_association(); 
        }
        setState(3100);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 383, _ctx);
      }
      setState(3105);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::COMMA) {
        setState(3101);
        match(AdaParser::COMMA);
        setState(3102);
        match(AdaParser::OTHERS);
        setState(3103);
        match(AdaParser::ARROW);
        setState(3104);
        match(AdaParser::BOX);
      }
      setState(3107);
      match(AdaParser::RP);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Formal_package_associationContext ------------------------------------------------------------------

AdaParser::Formal_package_associationContext::Formal_package_associationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Generic_associationContext* AdaParser::Formal_package_associationContext::generic_association() {
  return getRuleContext<AdaParser::Generic_associationContext>(0);
}

AdaParser::Selector_nameContext* AdaParser::Formal_package_associationContext::selector_name() {
  return getRuleContext<AdaParser::Selector_nameContext>(0);
}

tree::TerminalNode* AdaParser::Formal_package_associationContext::ARROW() {
  return getToken(AdaParser::ARROW, 0);
}

tree::TerminalNode* AdaParser::Formal_package_associationContext::BOX() {
  return getToken(AdaParser::BOX, 0);
}


size_t AdaParser::Formal_package_associationContext::getRuleIndex() const {
  return AdaParser::RuleFormal_package_association;
}

void AdaParser::Formal_package_associationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFormal_package_association(this);
}

void AdaParser::Formal_package_associationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFormal_package_association(this);
}

AdaParser::Formal_package_associationContext* AdaParser::formal_package_association() {
  Formal_package_associationContext *_localctx = _tracker.createInstance<Formal_package_associationContext>(_ctx, getState());
  enterRule(_localctx, 540, AdaParser::RuleFormal_package_association);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3116);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 386, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3111);
      generic_association();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3112);
      selector_name();
      setState(3113);
      match(AdaParser::ARROW);
      setState(3114);
      match(AdaParser::BOX);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Aspect_clauseContext ------------------------------------------------------------------

AdaParser::Aspect_clauseContext::Aspect_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Attribute_definition_clauseContext* AdaParser::Aspect_clauseContext::attribute_definition_clause() {
  return getRuleContext<AdaParser::Attribute_definition_clauseContext>(0);
}

AdaParser::Enumeration_representation_clauseContext* AdaParser::Aspect_clauseContext::enumeration_representation_clause() {
  return getRuleContext<AdaParser::Enumeration_representation_clauseContext>(0);
}

AdaParser::Record_representation_clauseContext* AdaParser::Aspect_clauseContext::record_representation_clause() {
  return getRuleContext<AdaParser::Record_representation_clauseContext>(0);
}

AdaParser::At_clauseContext* AdaParser::Aspect_clauseContext::at_clause() {
  return getRuleContext<AdaParser::At_clauseContext>(0);
}


size_t AdaParser::Aspect_clauseContext::getRuleIndex() const {
  return AdaParser::RuleAspect_clause;
}

void AdaParser::Aspect_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAspect_clause(this);
}

void AdaParser::Aspect_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAspect_clause(this);
}

AdaParser::Aspect_clauseContext* AdaParser::aspect_clause() {
  Aspect_clauseContext *_localctx = _tracker.createInstance<Aspect_clauseContext>(_ctx, getState());
  enterRule(_localctx, 542, AdaParser::RuleAspect_clause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3122);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 387, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3118);
      attribute_definition_clause();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3119);
      enumeration_representation_clause();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3120);
      record_representation_clause();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(3121);
      at_clause();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Local_nameContext ------------------------------------------------------------------

AdaParser::Local_nameContext::Local_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Direct_nameContext* AdaParser::Local_nameContext::direct_name() {
  return getRuleContext<AdaParser::Direct_nameContext>(0);
}

tree::TerminalNode* AdaParser::Local_nameContext::SQ() {
  return getToken(AdaParser::SQ, 0);
}

AdaParser::Attribute_designatorContext* AdaParser::Local_nameContext::attribute_designator() {
  return getRuleContext<AdaParser::Attribute_designatorContext>(0);
}

AdaParser::NameContext* AdaParser::Local_nameContext::name() {
  return getRuleContext<AdaParser::NameContext>(0);
}


size_t AdaParser::Local_nameContext::getRuleIndex() const {
  return AdaParser::RuleLocal_name;
}

void AdaParser::Local_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLocal_name(this);
}

void AdaParser::Local_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLocal_name(this);
}

AdaParser::Local_nameContext* AdaParser::local_name() {
  Local_nameContext *_localctx = _tracker.createInstance<Local_nameContext>(_ctx, getState());
  enterRule(_localctx, 544, AdaParser::RuleLocal_name);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3130);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 388, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3124);
      direct_name();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3125);
      direct_name();
      setState(3126);
      match(AdaParser::SQ);
      setState(3127);
      attribute_designator();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3129);
      name(0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Aspect_specificationContext ------------------------------------------------------------------

AdaParser::Aspect_specificationContext::Aspect_specificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Aspect_specificationContext::WITH() {
  return getToken(AdaParser::WITH, 0);
}

std::vector<AdaParser::Aspect_markContext *> AdaParser::Aspect_specificationContext::aspect_mark() {
  return getRuleContexts<AdaParser::Aspect_markContext>();
}

AdaParser::Aspect_markContext* AdaParser::Aspect_specificationContext::aspect_mark(size_t i) {
  return getRuleContext<AdaParser::Aspect_markContext>(i);
}

std::vector<tree::TerminalNode *> AdaParser::Aspect_specificationContext::ARROW() {
  return getTokens(AdaParser::ARROW);
}

tree::TerminalNode* AdaParser::Aspect_specificationContext::ARROW(size_t i) {
  return getToken(AdaParser::ARROW, i);
}

std::vector<AdaParser::Aspect_definitionContext *> AdaParser::Aspect_specificationContext::aspect_definition() {
  return getRuleContexts<AdaParser::Aspect_definitionContext>();
}

AdaParser::Aspect_definitionContext* AdaParser::Aspect_specificationContext::aspect_definition(size_t i) {
  return getRuleContext<AdaParser::Aspect_definitionContext>(i);
}

std::vector<tree::TerminalNode *> AdaParser::Aspect_specificationContext::COMMA() {
  return getTokens(AdaParser::COMMA);
}

tree::TerminalNode* AdaParser::Aspect_specificationContext::COMMA(size_t i) {
  return getToken(AdaParser::COMMA, i);
}


size_t AdaParser::Aspect_specificationContext::getRuleIndex() const {
  return AdaParser::RuleAspect_specification;
}

void AdaParser::Aspect_specificationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAspect_specification(this);
}

void AdaParser::Aspect_specificationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAspect_specification(this);
}

AdaParser::Aspect_specificationContext* AdaParser::aspect_specification() {
  Aspect_specificationContext *_localctx = _tracker.createInstance<Aspect_specificationContext>(_ctx, getState());
  enterRule(_localctx, 546, AdaParser::RuleAspect_specification);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3132);
    match(AdaParser::WITH);
    setState(3133);
    aspect_mark();
    setState(3136);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::ARROW) {
      setState(3134);
      match(AdaParser::ARROW);
      setState(3135);
      aspect_definition();
    }
    setState(3146);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == AdaParser::COMMA) {
      setState(3138);
      match(AdaParser::COMMA);
      setState(3139);
      aspect_mark();
      setState(3142);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AdaParser::ARROW) {
        setState(3140);
        match(AdaParser::ARROW);
        setState(3141);
        aspect_definition();
      }
      setState(3148);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Aspect_markContext ------------------------------------------------------------------

AdaParser::Aspect_markContext::Aspect_markContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Aspect_identifierContext* AdaParser::Aspect_markContext::aspect_identifier() {
  return getRuleContext<AdaParser::Aspect_identifierContext>(0);
}

tree::TerminalNode* AdaParser::Aspect_markContext::SQ() {
  return getToken(AdaParser::SQ, 0);
}

tree::TerminalNode* AdaParser::Aspect_markContext::CLASS__() {
  return getToken(AdaParser::CLASS__, 0);
}


size_t AdaParser::Aspect_markContext::getRuleIndex() const {
  return AdaParser::RuleAspect_mark;
}

void AdaParser::Aspect_markContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAspect_mark(this);
}

void AdaParser::Aspect_markContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAspect_mark(this);
}

AdaParser::Aspect_markContext* AdaParser::aspect_mark() {
  Aspect_markContext *_localctx = _tracker.createInstance<Aspect_markContext>(_ctx, getState());
  enterRule(_localctx, 548, AdaParser::RuleAspect_mark);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3149);
    aspect_identifier();
    setState(3152);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::SQ) {
      setState(3150);
      match(AdaParser::SQ);
      setState(3151);
      match(AdaParser::CLASS__);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Aspect_identifierContext ------------------------------------------------------------------

AdaParser::Aspect_identifierContext::Aspect_identifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::IdentifierContext* AdaParser::Aspect_identifierContext::identifier() {
  return getRuleContext<AdaParser::IdentifierContext>(0);
}


size_t AdaParser::Aspect_identifierContext::getRuleIndex() const {
  return AdaParser::RuleAspect_identifier;
}

void AdaParser::Aspect_identifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAspect_identifier(this);
}

void AdaParser::Aspect_identifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAspect_identifier(this);
}

AdaParser::Aspect_identifierContext* AdaParser::aspect_identifier() {
  Aspect_identifierContext *_localctx = _tracker.createInstance<Aspect_identifierContext>(_ctx, getState());
  enterRule(_localctx, 550, AdaParser::RuleAspect_identifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3154);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Aspect_definitionContext ------------------------------------------------------------------

AdaParser::Aspect_definitionContext::Aspect_definitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::NameContext* AdaParser::Aspect_definitionContext::name() {
  return getRuleContext<AdaParser::NameContext>(0);
}

AdaParser::ExpressionContext* AdaParser::Aspect_definitionContext::expression() {
  return getRuleContext<AdaParser::ExpressionContext>(0);
}

AdaParser::IdentifierContext* AdaParser::Aspect_definitionContext::identifier() {
  return getRuleContext<AdaParser::IdentifierContext>(0);
}


size_t AdaParser::Aspect_definitionContext::getRuleIndex() const {
  return AdaParser::RuleAspect_definition;
}

void AdaParser::Aspect_definitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAspect_definition(this);
}

void AdaParser::Aspect_definitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAspect_definition(this);
}

AdaParser::Aspect_definitionContext* AdaParser::aspect_definition() {
  Aspect_definitionContext *_localctx = _tracker.createInstance<Aspect_definitionContext>(_ctx, getState());
  enterRule(_localctx, 552, AdaParser::RuleAspect_definition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3159);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 393, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3156);
      name(0);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3157);
      expression();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3158);
      identifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Attribute_definition_clauseContext ------------------------------------------------------------------

AdaParser::Attribute_definition_clauseContext::Attribute_definition_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Attribute_definition_clauseContext::FOR() {
  return getToken(AdaParser::FOR, 0);
}

AdaParser::Local_nameContext* AdaParser::Attribute_definition_clauseContext::local_name() {
  return getRuleContext<AdaParser::Local_nameContext>(0);
}

tree::TerminalNode* AdaParser::Attribute_definition_clauseContext::SQ() {
  return getToken(AdaParser::SQ, 0);
}

AdaParser::Attribute_designatorContext* AdaParser::Attribute_definition_clauseContext::attribute_designator() {
  return getRuleContext<AdaParser::Attribute_designatorContext>(0);
}

tree::TerminalNode* AdaParser::Attribute_definition_clauseContext::USE() {
  return getToken(AdaParser::USE, 0);
}

AdaParser::ExpressionContext* AdaParser::Attribute_definition_clauseContext::expression() {
  return getRuleContext<AdaParser::ExpressionContext>(0);
}

tree::TerminalNode* AdaParser::Attribute_definition_clauseContext::SEMI() {
  return getToken(AdaParser::SEMI, 0);
}

AdaParser::NameContext* AdaParser::Attribute_definition_clauseContext::name() {
  return getRuleContext<AdaParser::NameContext>(0);
}


size_t AdaParser::Attribute_definition_clauseContext::getRuleIndex() const {
  return AdaParser::RuleAttribute_definition_clause;
}

void AdaParser::Attribute_definition_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAttribute_definition_clause(this);
}

void AdaParser::Attribute_definition_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAttribute_definition_clause(this);
}

AdaParser::Attribute_definition_clauseContext* AdaParser::attribute_definition_clause() {
  Attribute_definition_clauseContext *_localctx = _tracker.createInstance<Attribute_definition_clauseContext>(_ctx, getState());
  enterRule(_localctx, 554, AdaParser::RuleAttribute_definition_clause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3177);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 394, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3161);
      match(AdaParser::FOR);
      setState(3162);
      local_name();
      setState(3163);
      match(AdaParser::SQ);
      setState(3164);
      attribute_designator();
      setState(3165);
      match(AdaParser::USE);
      setState(3166);
      expression();
      setState(3167);
      match(AdaParser::SEMI);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3169);
      match(AdaParser::FOR);
      setState(3170);
      local_name();
      setState(3171);
      match(AdaParser::SQ);
      setState(3172);
      attribute_designator();
      setState(3173);
      match(AdaParser::USE);
      setState(3174);
      name(0);
      setState(3175);
      match(AdaParser::SEMI);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Enumeration_representation_clauseContext ------------------------------------------------------------------

AdaParser::Enumeration_representation_clauseContext::Enumeration_representation_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Enumeration_representation_clauseContext::FOR() {
  return getToken(AdaParser::FOR, 0);
}

AdaParser::Local_nameContext* AdaParser::Enumeration_representation_clauseContext::local_name() {
  return getRuleContext<AdaParser::Local_nameContext>(0);
}

tree::TerminalNode* AdaParser::Enumeration_representation_clauseContext::USE() {
  return getToken(AdaParser::USE, 0);
}

AdaParser::Enumeration_aggregateContext* AdaParser::Enumeration_representation_clauseContext::enumeration_aggregate() {
  return getRuleContext<AdaParser::Enumeration_aggregateContext>(0);
}

tree::TerminalNode* AdaParser::Enumeration_representation_clauseContext::SEMI() {
  return getToken(AdaParser::SEMI, 0);
}


size_t AdaParser::Enumeration_representation_clauseContext::getRuleIndex() const {
  return AdaParser::RuleEnumeration_representation_clause;
}

void AdaParser::Enumeration_representation_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumeration_representation_clause(this);
}

void AdaParser::Enumeration_representation_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumeration_representation_clause(this);
}

AdaParser::Enumeration_representation_clauseContext* AdaParser::enumeration_representation_clause() {
  Enumeration_representation_clauseContext *_localctx = _tracker.createInstance<Enumeration_representation_clauseContext>(_ctx, getState());
  enterRule(_localctx, 556, AdaParser::RuleEnumeration_representation_clause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3179);
    match(AdaParser::FOR);
    setState(3180);
    local_name();
    setState(3181);
    match(AdaParser::USE);
    setState(3182);
    enumeration_aggregate();
    setState(3183);
    match(AdaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Enumeration_aggregateContext ------------------------------------------------------------------

AdaParser::Enumeration_aggregateContext::Enumeration_aggregateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Array_aggregateContext* AdaParser::Enumeration_aggregateContext::array_aggregate() {
  return getRuleContext<AdaParser::Array_aggregateContext>(0);
}


size_t AdaParser::Enumeration_aggregateContext::getRuleIndex() const {
  return AdaParser::RuleEnumeration_aggregate;
}

void AdaParser::Enumeration_aggregateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumeration_aggregate(this);
}

void AdaParser::Enumeration_aggregateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumeration_aggregate(this);
}

AdaParser::Enumeration_aggregateContext* AdaParser::enumeration_aggregate() {
  Enumeration_aggregateContext *_localctx = _tracker.createInstance<Enumeration_aggregateContext>(_ctx, getState());
  enterRule(_localctx, 558, AdaParser::RuleEnumeration_aggregate);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3185);
    array_aggregate();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Record_representation_clauseContext ------------------------------------------------------------------

AdaParser::Record_representation_clauseContext::Record_representation_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Record_representation_clauseContext::FOR() {
  return getToken(AdaParser::FOR, 0);
}

AdaParser::Local_nameContext* AdaParser::Record_representation_clauseContext::local_name() {
  return getRuleContext<AdaParser::Local_nameContext>(0);
}

tree::TerminalNode* AdaParser::Record_representation_clauseContext::USE() {
  return getToken(AdaParser::USE, 0);
}

std::vector<tree::TerminalNode *> AdaParser::Record_representation_clauseContext::RECORD() {
  return getTokens(AdaParser::RECORD);
}

tree::TerminalNode* AdaParser::Record_representation_clauseContext::RECORD(size_t i) {
  return getToken(AdaParser::RECORD, i);
}

tree::TerminalNode* AdaParser::Record_representation_clauseContext::END() {
  return getToken(AdaParser::END, 0);
}

AdaParser::Mod_clauseContext* AdaParser::Record_representation_clauseContext::mod_clause() {
  return getRuleContext<AdaParser::Mod_clauseContext>(0);
}

std::vector<AdaParser::Component_clauseContext *> AdaParser::Record_representation_clauseContext::component_clause() {
  return getRuleContexts<AdaParser::Component_clauseContext>();
}

AdaParser::Component_clauseContext* AdaParser::Record_representation_clauseContext::component_clause(size_t i) {
  return getRuleContext<AdaParser::Component_clauseContext>(i);
}


size_t AdaParser::Record_representation_clauseContext::getRuleIndex() const {
  return AdaParser::RuleRecord_representation_clause;
}

void AdaParser::Record_representation_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRecord_representation_clause(this);
}

void AdaParser::Record_representation_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRecord_representation_clause(this);
}

AdaParser::Record_representation_clauseContext* AdaParser::record_representation_clause() {
  Record_representation_clauseContext *_localctx = _tracker.createInstance<Record_representation_clauseContext>(_ctx, getState());
  enterRule(_localctx, 560, AdaParser::RuleRecord_representation_clause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3187);
    match(AdaParser::FOR);
    setState(3188);
    local_name();
    setState(3189);
    match(AdaParser::USE);
    setState(3190);
    match(AdaParser::RECORD);
    setState(3192);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::AT) {
      setState(3191);
      mod_clause();
    }
    setState(3197);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 81) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 81)) & 1537) != 0)) {
      setState(3194);
      component_clause();
      setState(3199);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(3200);
    match(AdaParser::END);
    setState(3202);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AdaParser::RECORD) {
      setState(3201);
      match(AdaParser::RECORD);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Component_clauseContext ------------------------------------------------------------------

AdaParser::Component_clauseContext::Component_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Component_local_nameContext* AdaParser::Component_clauseContext::component_local_name() {
  return getRuleContext<AdaParser::Component_local_nameContext>(0);
}

tree::TerminalNode* AdaParser::Component_clauseContext::AT() {
  return getToken(AdaParser::AT, 0);
}

AdaParser::PositionContext* AdaParser::Component_clauseContext::position() {
  return getRuleContext<AdaParser::PositionContext>(0);
}

tree::TerminalNode* AdaParser::Component_clauseContext::RANGE_() {
  return getToken(AdaParser::RANGE_, 0);
}

AdaParser::First_bitContext* AdaParser::Component_clauseContext::first_bit() {
  return getRuleContext<AdaParser::First_bitContext>(0);
}

tree::TerminalNode* AdaParser::Component_clauseContext::DOTDOT() {
  return getToken(AdaParser::DOTDOT, 0);
}

AdaParser::Last_bitContext* AdaParser::Component_clauseContext::last_bit() {
  return getRuleContext<AdaParser::Last_bitContext>(0);
}

tree::TerminalNode* AdaParser::Component_clauseContext::SEMI() {
  return getToken(AdaParser::SEMI, 0);
}


size_t AdaParser::Component_clauseContext::getRuleIndex() const {
  return AdaParser::RuleComponent_clause;
}

void AdaParser::Component_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComponent_clause(this);
}

void AdaParser::Component_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComponent_clause(this);
}

AdaParser::Component_clauseContext* AdaParser::component_clause() {
  Component_clauseContext *_localctx = _tracker.createInstance<Component_clauseContext>(_ctx, getState());
  enterRule(_localctx, 562, AdaParser::RuleComponent_clause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3204);
    component_local_name();
    setState(3205);
    match(AdaParser::AT);
    setState(3206);
    position();
    setState(3207);
    match(AdaParser::RANGE_);
    setState(3208);
    first_bit();
    setState(3209);
    match(AdaParser::DOTDOT);
    setState(3210);
    last_bit();
    setState(3211);
    match(AdaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Component_local_nameContext ------------------------------------------------------------------

AdaParser::Component_local_nameContext::Component_local_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::Local_nameContext* AdaParser::Component_local_nameContext::local_name() {
  return getRuleContext<AdaParser::Local_nameContext>(0);
}


size_t AdaParser::Component_local_nameContext::getRuleIndex() const {
  return AdaParser::RuleComponent_local_name;
}

void AdaParser::Component_local_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComponent_local_name(this);
}

void AdaParser::Component_local_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComponent_local_name(this);
}

AdaParser::Component_local_nameContext* AdaParser::component_local_name() {
  Component_local_nameContext *_localctx = _tracker.createInstance<Component_local_nameContext>(_ctx, getState());
  enterRule(_localctx, 564, AdaParser::RuleComponent_local_name);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3213);
    local_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PositionContext ------------------------------------------------------------------

AdaParser::PositionContext::PositionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::ExpressionContext* AdaParser::PositionContext::expression() {
  return getRuleContext<AdaParser::ExpressionContext>(0);
}


size_t AdaParser::PositionContext::getRuleIndex() const {
  return AdaParser::RulePosition;
}

void AdaParser::PositionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPosition(this);
}

void AdaParser::PositionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPosition(this);
}

AdaParser::PositionContext* AdaParser::position() {
  PositionContext *_localctx = _tracker.createInstance<PositionContext>(_ctx, getState());
  enterRule(_localctx, 566, AdaParser::RulePosition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3215);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- First_bitContext ------------------------------------------------------------------

AdaParser::First_bitContext::First_bitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::ExpressionContext* AdaParser::First_bitContext::expression() {
  return getRuleContext<AdaParser::ExpressionContext>(0);
}


size_t AdaParser::First_bitContext::getRuleIndex() const {
  return AdaParser::RuleFirst_bit;
}

void AdaParser::First_bitContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFirst_bit(this);
}

void AdaParser::First_bitContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFirst_bit(this);
}

AdaParser::First_bitContext* AdaParser::first_bit() {
  First_bitContext *_localctx = _tracker.createInstance<First_bitContext>(_ctx, getState());
  enterRule(_localctx, 568, AdaParser::RuleFirst_bit);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3217);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Last_bitContext ------------------------------------------------------------------

AdaParser::Last_bitContext::Last_bitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AdaParser::ExpressionContext* AdaParser::Last_bitContext::expression() {
  return getRuleContext<AdaParser::ExpressionContext>(0);
}


size_t AdaParser::Last_bitContext::getRuleIndex() const {
  return AdaParser::RuleLast_bit;
}

void AdaParser::Last_bitContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLast_bit(this);
}

void AdaParser::Last_bitContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLast_bit(this);
}

AdaParser::Last_bitContext* AdaParser::last_bit() {
  Last_bitContext *_localctx = _tracker.createInstance<Last_bitContext>(_ctx, getState());
  enterRule(_localctx, 570, AdaParser::RuleLast_bit);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3219);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Delta_constraintContext ------------------------------------------------------------------

AdaParser::Delta_constraintContext::Delta_constraintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Delta_constraintContext::DELTA() {
  return getToken(AdaParser::DELTA, 0);
}

AdaParser::ExpressionContext* AdaParser::Delta_constraintContext::expression() {
  return getRuleContext<AdaParser::ExpressionContext>(0);
}

AdaParser::Range_constraintContext* AdaParser::Delta_constraintContext::range_constraint() {
  return getRuleContext<AdaParser::Range_constraintContext>(0);
}


size_t AdaParser::Delta_constraintContext::getRuleIndex() const {
  return AdaParser::RuleDelta_constraint;
}

void AdaParser::Delta_constraintContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDelta_constraint(this);
}

void AdaParser::Delta_constraintContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDelta_constraint(this);
}

AdaParser::Delta_constraintContext* AdaParser::delta_constraint() {
  Delta_constraintContext *_localctx = _tracker.createInstance<Delta_constraintContext>(_ctx, getState());
  enterRule(_localctx, 572, AdaParser::RuleDelta_constraint);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3221);
    match(AdaParser::DELTA);
    setState(3222);
    expression();
    setState(3224);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 398, _ctx)) {
    case 1: {
      setState(3223);
      range_constraint();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- At_clauseContext ------------------------------------------------------------------

AdaParser::At_clauseContext::At_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::At_clauseContext::FOR() {
  return getToken(AdaParser::FOR, 0);
}

AdaParser::Direct_nameContext* AdaParser::At_clauseContext::direct_name() {
  return getRuleContext<AdaParser::Direct_nameContext>(0);
}

tree::TerminalNode* AdaParser::At_clauseContext::USE() {
  return getToken(AdaParser::USE, 0);
}

tree::TerminalNode* AdaParser::At_clauseContext::AT() {
  return getToken(AdaParser::AT, 0);
}

AdaParser::ExpressionContext* AdaParser::At_clauseContext::expression() {
  return getRuleContext<AdaParser::ExpressionContext>(0);
}

tree::TerminalNode* AdaParser::At_clauseContext::SEMI() {
  return getToken(AdaParser::SEMI, 0);
}


size_t AdaParser::At_clauseContext::getRuleIndex() const {
  return AdaParser::RuleAt_clause;
}

void AdaParser::At_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAt_clause(this);
}

void AdaParser::At_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAt_clause(this);
}

AdaParser::At_clauseContext* AdaParser::at_clause() {
  At_clauseContext *_localctx = _tracker.createInstance<At_clauseContext>(_ctx, getState());
  enterRule(_localctx, 574, AdaParser::RuleAt_clause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3226);
    match(AdaParser::FOR);
    setState(3227);
    direct_name();
    setState(3228);
    match(AdaParser::USE);
    setState(3229);
    match(AdaParser::AT);
    setState(3230);
    expression();
    setState(3231);
    match(AdaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Mod_clauseContext ------------------------------------------------------------------

AdaParser::Mod_clauseContext::Mod_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AdaParser::Mod_clauseContext::AT() {
  return getToken(AdaParser::AT, 0);
}

tree::TerminalNode* AdaParser::Mod_clauseContext::MOD() {
  return getToken(AdaParser::MOD, 0);
}

AdaParser::ExpressionContext* AdaParser::Mod_clauseContext::expression() {
  return getRuleContext<AdaParser::ExpressionContext>(0);
}

tree::TerminalNode* AdaParser::Mod_clauseContext::SEMI() {
  return getToken(AdaParser::SEMI, 0);
}


size_t AdaParser::Mod_clauseContext::getRuleIndex() const {
  return AdaParser::RuleMod_clause;
}

void AdaParser::Mod_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMod_clause(this);
}

void AdaParser::Mod_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AdaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMod_clause(this);
}

AdaParser::Mod_clauseContext* AdaParser::mod_clause() {
  Mod_clauseContext *_localctx = _tracker.createInstance<Mod_clauseContext>(_ctx, getState());
  enterRule(_localctx, 576, AdaParser::RuleMod_clause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3233);
    match(AdaParser::AT);
    setState(3234);
    match(AdaParser::MOD);
    setState(3235);
    expression();
    setState(3236);
    match(AdaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool AdaParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 73: return nameSempred(antlrcpp::downCast<NameContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool AdaParser::nameSempred(NameContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return precpred(_ctx, 10);
    case 1: return precpred(_ctx, 9);
    case 2: return precpred(_ctx, 8);
    case 3: return precpred(_ctx, 7);
    case 4: return precpred(_ctx, 6);
    case 5: return precpred(_ctx, 4);
    case 6: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

void AdaParser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  adaparserParserInitialize();
#else
  ::antlr4::internal::call_once(adaparserParserOnceFlag, adaparserParserInitialize);
#endif
}
