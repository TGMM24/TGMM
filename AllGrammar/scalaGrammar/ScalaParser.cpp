
// Generated from Scala.g4 by ANTLR 4.13.0


#include "ScalaListener.h"

#include "ScalaParser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct ScalaParserStaticData final {
  ScalaParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  ScalaParserStaticData(const ScalaParserStaticData&) = delete;
  ScalaParserStaticData(ScalaParserStaticData&&) = delete;
  ScalaParserStaticData& operator=(const ScalaParserStaticData&) = delete;
  ScalaParserStaticData& operator=(ScalaParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag scalaParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
ScalaParserStaticData *scalaParserStaticData = nullptr;

void scalaParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (scalaParserStaticData != nullptr) {
    return;
  }
#else
  assert(scalaParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<ScalaParserStaticData>(
    std::vector<std::string>{
      "literal", "qualId", "ids", "stableId", "classQualifier", "type_", 
      "functionArgTypes", "existentialClause", "existentialDcl", "infixType", 
      "compoundType", "annotType", "simpleType", "typeArgs", "types", "refinement", 
      "refineStat", "typePat", "ascription", "expr", "expr1", "prefixDef", 
      "postfixExpr", "infixExpr", "prefixExpr", "simpleExpr", "simpleExpr1", 
      "exprs", "argumentExprs", "args", "blockExpr", "block", "blockStat", 
      "resultExpr", "enumerators", "generator", "caseClauses", "caseClause", 
      "guard_", "pattern", "pattern1", "pattern2", "pattern3", "simplePattern", 
      "patterns", "typeParamClause", "funTypeParamClause", "variantTypeParam", 
      "typeParam", "paramClauses", "paramClause", "params", "param", "paramType", 
      "classParamClauses", "classParamClause", "classParams", "classParam", 
      "bindings", "binding", "modifier", "localModifier", "accessModifier", 
      "accessQualifier", "annotation", "constrAnnotation", "templateBody", 
      "templateStat", "selfType", "import_", "importExpr", "importSelectors", 
      "importSelector", "dcl", "valDcl", "varDcl", "funDcl", "funSig", "typeDcl", 
      "patVarDef", "def_", "patDef", "varDef", "funDef", "typeDef", "tmplDef", 
      "classDef", "traitDef", "objectDef", "classTemplateOpt", "traitTemplateOpt", 
      "classTemplate", "traitTemplate", "classParents", "traitParents", 
      "constr", "earlyDefs", "earlyDef", "constrExpr", "constrBlock", "selfInvocation", 
      "topStatSeq", "topStat", "packaging", "packageObject", "compilationUnit"
    },
    std::vector<std::string>{
      "", "'-'", "'null'", "'.'", "','", "'this'", "'super'", "'['", "']'", 
      "'=>'", "'('", "')'", "'forSome'", "'{'", "'}'", "'type'", "'val'", 
      "'with'", "'#'", "':'", "'_'", "'*'", "'implicit'", "'if'", "'else'", 
      "'while'", "'try'", "'catch'", "'finally'", "'do'", "'for'", "'yield'", 
      "'throw'", "'return'", "'='", "'match'", "'+'", "'~'", "'!'", "'new'", 
      "'lazy'", "'<-'", "'case'", "'|'", "'@'", "'>:'", "'<:'", "'<%'", 
      "'var'", "'override'", "'abstract'", "'final'", "'sealed'", "'private'", 
      "'protected'", "'import'", "'def'", "'class'", "'object'", "'trait'", 
      "'extends'", "'package'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "Id", "BooleanLiteral", 
      "CharacterLiteral", "SymbolLiteral", "IntegerLiteral", "StringLiteral", 
      "FloatingPointLiteral", "Varid", "BoundVarid", "Paren", "Delim", "Semi", 
      "NL", "NEWLINE", "WS", "COMMENT", "LINE_COMMENT"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,78,1444,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
  	7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,
  	14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,
  	21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,
  	28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,
  	35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,
  	42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,
  	49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,
  	56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
  	63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,
  	70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,
  	77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,
  	84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
  	91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,
  	98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,
  	104,2,105,7,105,1,0,3,0,214,8,0,1,0,1,0,3,0,218,8,0,1,0,1,0,1,0,1,0,1,
  	0,1,0,3,0,226,8,0,1,1,1,1,1,1,5,1,231,8,1,10,1,12,1,234,9,1,1,2,1,2,1,
  	2,5,2,239,8,2,10,2,12,2,242,9,2,1,3,1,3,1,3,1,3,3,3,248,8,3,1,3,1,3,1,
  	3,3,3,253,8,3,1,3,1,3,3,3,257,8,3,3,3,259,8,3,1,3,1,3,1,3,5,3,264,8,3,
  	10,3,12,3,267,9,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,3,5,279,8,5,
  	3,5,281,8,5,1,6,1,6,1,6,1,6,1,6,5,6,288,8,6,10,6,12,6,291,9,6,3,6,293,
  	8,6,1,6,3,6,296,8,6,1,7,1,7,1,7,4,7,301,8,7,11,7,12,7,302,1,7,1,7,1,8,
  	1,8,1,8,1,8,3,8,311,8,8,1,9,1,9,1,9,5,9,316,8,9,10,9,12,9,319,9,9,1,10,
  	1,10,1,10,5,10,324,8,10,10,10,12,10,327,9,10,1,10,3,10,330,8,10,1,10,
  	3,10,333,8,10,1,11,1,11,5,11,337,8,11,10,11,12,11,340,9,11,1,12,1,12,
  	1,12,1,12,3,12,346,8,12,1,12,1,12,1,12,1,12,3,12,352,8,12,1,12,1,12,1,
  	12,1,12,1,12,5,12,359,8,12,10,12,12,12,362,9,12,1,13,1,13,1,13,1,13,1,
  	14,1,14,1,14,5,14,371,8,14,10,14,12,14,374,9,14,1,15,3,15,377,8,15,1,
  	15,1,15,4,15,381,8,15,11,15,12,15,382,1,15,1,15,1,16,1,16,1,16,3,16,390,
  	8,16,1,17,1,17,1,18,1,18,1,18,1,18,4,18,398,8,18,11,18,12,18,399,1,18,
  	1,18,1,18,3,18,405,8,18,1,19,1,19,3,19,409,8,19,1,19,1,19,3,19,413,8,
  	19,1,19,1,19,1,19,3,19,418,8,19,1,20,1,20,1,20,1,20,1,20,5,20,425,8,20,
  	10,20,12,20,428,9,20,1,20,1,20,1,20,3,20,433,8,20,1,20,1,20,1,20,1,20,
  	1,20,5,20,440,8,20,10,20,12,20,443,9,20,1,20,1,20,1,20,1,20,1,20,1,20,
  	3,20,451,8,20,1,20,1,20,3,20,455,8,20,1,20,1,20,1,20,1,20,1,20,1,20,1,
  	20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,473,8,20,1,20,3,
  	20,476,8,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,484,8,20,1,20,1,20,1,20,
  	3,20,489,8,20,3,20,491,8,20,1,20,1,20,3,20,495,8,20,1,20,1,20,1,20,1,
  	20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,507,8,20,1,20,1,20,1,20,1,20,1,
  	20,1,20,3,20,515,8,20,1,21,1,21,1,22,1,22,3,22,521,8,22,1,22,1,22,1,22,
  	5,22,526,8,22,10,22,12,22,529,9,22,1,22,3,22,532,8,22,1,23,1,23,1,23,
  	1,23,1,23,1,23,3,23,540,8,23,1,23,5,23,543,8,23,10,23,12,23,546,9,23,
  	1,24,3,24,549,8,24,1,24,1,24,1,24,3,24,554,8,24,3,24,556,8,24,1,25,1,
  	25,1,25,3,25,561,8,25,1,25,3,25,564,8,25,1,26,1,26,1,26,1,26,1,26,1,26,
  	3,26,572,8,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,582,8,26,1,
  	26,1,26,3,26,586,8,26,1,26,1,26,1,26,1,26,3,26,592,8,26,1,26,1,26,1,26,
  	5,26,597,8,26,10,26,12,26,600,9,26,1,27,1,27,1,27,5,27,605,8,27,10,27,
  	12,27,608,9,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,619,
  	8,28,1,28,3,28,622,8,28,1,29,3,29,625,8,29,1,29,1,29,1,29,3,29,630,8,
  	29,1,29,1,29,3,29,634,8,29,3,29,636,8,29,1,30,1,30,1,30,1,30,1,30,1,30,
  	1,30,1,30,3,30,646,8,30,1,31,4,31,649,8,31,11,31,12,31,650,1,31,3,31,
  	654,8,31,1,32,1,32,5,32,658,8,32,10,32,12,32,661,9,32,1,32,3,32,664,8,
  	32,1,32,1,32,5,32,668,8,32,10,32,12,32,671,9,32,1,32,5,32,674,8,32,10,
  	32,12,32,677,9,32,1,32,1,32,3,32,681,8,32,1,33,1,33,1,33,3,33,686,8,33,
  	1,33,1,33,3,33,690,8,33,1,33,1,33,3,33,694,8,33,1,33,1,33,1,33,3,33,699,
  	8,33,1,34,4,34,702,8,34,11,34,12,34,703,1,35,1,35,1,35,1,35,1,35,1,35,
  	1,35,1,35,5,35,714,8,35,10,35,12,35,717,9,35,1,36,4,36,720,8,36,11,36,
  	12,36,721,1,37,1,37,1,37,3,37,727,8,37,1,37,1,37,1,37,1,38,1,38,1,38,
  	1,39,1,39,1,39,5,39,738,8,39,10,39,12,39,741,9,39,1,40,1,40,1,40,1,40,
  	3,40,747,8,40,1,41,1,41,1,41,3,41,752,8,41,1,41,3,41,755,8,41,1,42,1,
  	42,1,42,1,42,3,42,761,8,42,1,42,5,42,764,8,42,10,42,12,42,767,9,42,3,
  	42,769,8,42,1,43,1,43,1,43,1,43,1,43,1,43,3,43,777,8,43,1,43,3,43,780,
  	8,43,1,43,1,43,1,43,1,43,1,43,3,43,787,8,43,1,43,1,43,3,43,791,8,43,1,
  	43,1,43,1,43,1,43,1,43,1,43,3,43,799,8,43,1,43,3,43,802,8,43,1,44,1,44,
  	1,44,3,44,807,8,44,1,44,1,44,3,44,811,8,44,1,45,1,45,1,45,1,45,5,45,817,
  	8,45,10,45,12,45,820,9,45,1,45,1,45,1,46,1,46,1,46,1,46,5,46,828,8,46,
  	10,46,12,46,831,9,46,1,46,1,46,1,47,5,47,836,8,47,10,47,12,47,839,9,47,
  	1,47,3,47,842,8,47,1,47,1,47,1,48,1,48,3,48,848,8,48,1,48,1,48,3,48,852,
  	8,48,1,48,1,48,3,48,856,8,48,1,48,1,48,5,48,860,8,48,10,48,12,48,863,
  	9,48,1,48,1,48,5,48,867,8,48,10,48,12,48,870,9,48,1,49,5,49,873,8,49,
  	10,49,12,49,876,9,49,1,49,3,49,879,8,49,1,49,1,49,1,49,1,49,1,49,3,49,
  	886,8,49,1,50,3,50,889,8,50,1,50,1,50,3,50,893,8,50,1,50,1,50,1,51,1,
  	51,1,51,5,51,900,8,51,10,51,12,51,903,9,51,1,52,5,52,906,8,52,10,52,12,
  	52,909,9,52,1,52,1,52,1,52,3,52,914,8,52,1,52,1,52,3,52,918,8,52,1,53,
  	1,53,1,53,1,53,1,53,1,53,3,53,926,8,53,1,54,5,54,929,8,54,10,54,12,54,
  	932,9,54,1,54,3,54,935,8,54,1,54,1,54,1,54,1,54,1,54,3,54,942,8,54,1,
  	55,3,55,945,8,55,1,55,1,55,3,55,949,8,55,1,55,1,55,1,56,1,56,1,56,5,56,
  	956,8,56,10,56,12,56,959,9,56,1,57,5,57,962,8,57,10,57,12,57,965,9,57,
  	1,57,5,57,968,8,57,10,57,12,57,971,9,57,1,57,3,57,974,8,57,1,57,1,57,
  	1,57,1,57,1,57,3,57,981,8,57,1,58,1,58,1,58,1,58,5,58,987,8,58,10,58,
  	12,58,990,9,58,1,58,1,58,1,59,1,59,1,59,3,59,997,8,59,1,60,1,60,1,60,
  	3,60,1002,8,60,1,61,1,61,1,62,1,62,3,62,1008,8,62,1,63,1,63,1,63,1,63,
  	1,64,1,64,1,64,5,64,1017,8,64,10,64,12,64,1020,9,64,1,65,1,65,1,65,1,
  	65,1,66,3,66,1027,8,66,1,66,1,66,3,66,1031,8,66,1,66,4,66,1034,8,66,11,
  	66,12,66,1035,1,66,1,66,1,67,1,67,1,67,3,67,1043,8,67,5,67,1045,8,67,
  	10,67,12,67,1048,9,67,1,67,5,67,1051,8,67,10,67,12,67,1054,9,67,1,67,
  	1,67,1,67,3,67,1059,8,67,5,67,1061,8,67,10,67,12,67,1064,9,67,1,67,5,
  	67,1067,8,67,10,67,12,67,1070,9,67,1,67,1,67,3,67,1074,8,67,1,68,1,68,
  	1,68,3,68,1079,8,68,1,68,1,68,1,68,1,68,1,68,1,68,3,68,1087,8,68,1,69,
  	1,69,1,69,1,69,5,69,1093,8,69,10,69,12,69,1096,9,69,1,70,1,70,1,70,1,
  	70,1,70,3,70,1103,8,70,3,70,1105,8,70,1,71,1,71,1,71,1,71,5,71,1111,8,
  	71,10,71,12,71,1114,9,71,1,71,1,71,3,71,1118,8,71,1,71,1,71,1,72,1,72,
  	1,72,3,72,1125,8,72,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,5,73,1135,
  	8,73,10,73,12,73,1138,9,73,1,73,3,73,1141,8,73,1,74,1,74,1,74,1,74,1,
  	75,1,75,1,75,1,75,1,76,1,76,1,76,3,76,1154,8,76,1,77,1,77,3,77,1158,8,
  	77,1,77,1,77,1,78,1,78,3,78,1164,8,78,1,78,1,78,3,78,1168,8,78,1,78,1,
  	78,3,78,1172,8,78,1,79,1,79,1,79,1,79,3,79,1178,8,79,1,80,1,80,1,80,1,
  	80,1,80,5,80,1185,8,80,10,80,12,80,1188,9,80,1,80,1,80,3,80,1192,8,80,
  	1,81,1,81,1,81,5,81,1197,8,81,10,81,12,81,1200,9,81,1,81,1,81,3,81,1204,
  	8,81,1,81,1,81,1,81,1,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,1216,8,82,
  	1,83,1,83,1,83,3,83,1221,8,83,1,83,1,83,1,83,1,83,1,83,3,83,1228,8,83,
  	1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,3,83,1240,8,83,1,83,
  	3,83,1243,8,83,3,83,1245,8,83,1,84,1,84,3,84,1249,8,84,1,84,1,84,1,84,
  	1,85,3,85,1255,8,85,1,85,1,85,1,85,3,85,1260,8,85,1,85,1,85,1,85,1,85,
  	3,85,1266,8,85,1,86,1,86,3,86,1270,8,86,1,86,5,86,1273,8,86,10,86,12,
  	86,1276,9,86,1,86,3,86,1279,8,86,1,86,1,86,1,86,1,87,1,87,3,87,1286,8,
  	87,1,87,1,87,1,88,1,88,1,88,1,89,1,89,1,89,3,89,1296,8,89,1,89,3,89,1299,
  	8,89,3,89,1301,8,89,1,90,1,90,1,90,3,90,1306,8,90,1,90,3,90,1309,8,90,
  	3,90,1311,8,90,1,91,3,91,1314,8,91,1,91,1,91,3,91,1318,8,91,1,92,3,92,
  	1321,8,92,1,92,1,92,3,92,1325,8,92,1,93,1,93,1,93,5,93,1330,8,93,10,93,
  	12,93,1333,9,93,1,94,1,94,1,94,5,94,1338,8,94,10,94,12,94,1341,9,94,1,
  	95,1,95,5,95,1345,8,95,10,95,12,95,1348,9,95,1,96,1,96,4,96,1352,8,96,
  	11,96,12,96,1353,1,96,1,96,1,96,1,97,1,97,3,97,1361,8,97,5,97,1363,8,
  	97,10,97,12,97,1366,9,97,1,97,5,97,1369,8,97,10,97,12,97,1372,9,97,1,
  	97,1,97,1,98,1,98,3,98,1378,8,98,1,99,1,99,1,99,5,99,1383,8,99,10,99,
  	12,99,1386,9,99,1,99,1,99,1,100,1,100,4,100,1392,8,100,11,100,12,100,
  	1393,1,101,4,101,1397,8,101,11,101,12,101,1398,1,102,1,102,3,102,1403,
  	8,102,5,102,1405,8,102,10,102,12,102,1408,9,102,1,102,5,102,1411,8,102,
  	10,102,12,102,1414,9,102,1,102,1,102,1,102,1,102,3,102,1420,8,102,1,103,
  	1,103,1,103,3,103,1425,8,103,1,103,1,103,1,103,1,103,1,104,1,104,1,104,
  	1,104,1,105,1,105,5,105,1437,8,105,10,105,12,105,1440,9,105,1,105,1,105,
  	1,105,0,4,6,24,46,52,106,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,
  	34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,
  	80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,
  	120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,
  	156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,
  	192,194,196,198,200,202,204,206,208,210,0,10,2,0,1,1,36,38,1,0,19,21,
  	2,0,22,22,40,40,3,0,20,20,62,62,70,70,2,0,1,1,36,36,2,0,20,20,62,62,2,
  	0,16,16,48,48,3,0,22,22,40,40,50,52,1,0,53,54,2,0,5,5,62,62,1586,0,225,
  	1,0,0,0,2,227,1,0,0,0,4,235,1,0,0,0,6,258,1,0,0,0,8,268,1,0,0,0,10,280,
  	1,0,0,0,12,295,1,0,0,0,14,297,1,0,0,0,16,310,1,0,0,0,18,312,1,0,0,0,20,
  	332,1,0,0,0,22,334,1,0,0,0,24,351,1,0,0,0,26,363,1,0,0,0,28,367,1,0,0,
  	0,30,376,1,0,0,0,32,389,1,0,0,0,34,391,1,0,0,0,36,404,1,0,0,0,38,417,
  	1,0,0,0,40,514,1,0,0,0,42,516,1,0,0,0,44,518,1,0,0,0,46,533,1,0,0,0,48,
  	548,1,0,0,0,50,563,1,0,0,0,52,581,1,0,0,0,54,601,1,0,0,0,56,621,1,0,0,
  	0,58,635,1,0,0,0,60,645,1,0,0,0,62,648,1,0,0,0,64,680,1,0,0,0,66,698,
  	1,0,0,0,68,701,1,0,0,0,70,705,1,0,0,0,72,719,1,0,0,0,74,723,1,0,0,0,76,
  	731,1,0,0,0,78,734,1,0,0,0,80,746,1,0,0,0,82,754,1,0,0,0,84,768,1,0,0,
  	0,86,801,1,0,0,0,88,810,1,0,0,0,90,812,1,0,0,0,92,823,1,0,0,0,94,837,
  	1,0,0,0,96,845,1,0,0,0,98,874,1,0,0,0,100,888,1,0,0,0,102,896,1,0,0,0,
  	104,907,1,0,0,0,106,925,1,0,0,0,108,930,1,0,0,0,110,944,1,0,0,0,112,952,
  	1,0,0,0,114,963,1,0,0,0,116,982,1,0,0,0,118,993,1,0,0,0,120,1001,1,0,
  	0,0,122,1003,1,0,0,0,124,1005,1,0,0,0,126,1009,1,0,0,0,128,1013,1,0,0,
  	0,130,1021,1,0,0,0,132,1026,1,0,0,0,134,1073,1,0,0,0,136,1086,1,0,0,0,
  	138,1088,1,0,0,0,140,1097,1,0,0,0,142,1106,1,0,0,0,144,1121,1,0,0,0,146,
  	1140,1,0,0,0,148,1142,1,0,0,0,150,1146,1,0,0,0,152,1150,1,0,0,0,154,1155,
  	1,0,0,0,156,1161,1,0,0,0,158,1177,1,0,0,0,160,1191,1,0,0,0,162,1193,1,
  	0,0,0,164,1215,1,0,0,0,166,1244,1,0,0,0,168,1246,1,0,0,0,170,1265,1,0,
  	0,0,172,1267,1,0,0,0,174,1283,1,0,0,0,176,1289,1,0,0,0,178,1300,1,0,0,
  	0,180,1310,1,0,0,0,182,1313,1,0,0,0,184,1320,1,0,0,0,186,1326,1,0,0,0,
  	188,1334,1,0,0,0,190,1342,1,0,0,0,192,1349,1,0,0,0,194,1364,1,0,0,0,196,
  	1377,1,0,0,0,198,1379,1,0,0,0,200,1389,1,0,0,0,202,1396,1,0,0,0,204,1419,
  	1,0,0,0,206,1421,1,0,0,0,208,1430,1,0,0,0,210,1438,1,0,0,0,212,214,5,
  	1,0,0,213,212,1,0,0,0,213,214,1,0,0,0,214,215,1,0,0,0,215,226,5,66,0,
  	0,216,218,5,1,0,0,217,216,1,0,0,0,217,218,1,0,0,0,218,219,1,0,0,0,219,
  	226,5,68,0,0,220,226,5,63,0,0,221,226,5,64,0,0,222,226,5,67,0,0,223,226,
  	5,65,0,0,224,226,5,2,0,0,225,213,1,0,0,0,225,217,1,0,0,0,225,220,1,0,
  	0,0,225,221,1,0,0,0,225,222,1,0,0,0,225,223,1,0,0,0,225,224,1,0,0,0,226,
  	1,1,0,0,0,227,232,5,62,0,0,228,229,5,3,0,0,229,231,5,62,0,0,230,228,1,
  	0,0,0,231,234,1,0,0,0,232,230,1,0,0,0,232,233,1,0,0,0,233,3,1,0,0,0,234,
  	232,1,0,0,0,235,240,5,62,0,0,236,237,5,4,0,0,237,239,5,62,0,0,238,236,
  	1,0,0,0,239,242,1,0,0,0,240,238,1,0,0,0,240,241,1,0,0,0,241,5,1,0,0,0,
  	242,240,1,0,0,0,243,244,6,3,-1,0,244,259,5,62,0,0,245,246,5,62,0,0,246,
  	248,5,3,0,0,247,245,1,0,0,0,247,248,1,0,0,0,248,256,1,0,0,0,249,257,5,
  	5,0,0,250,252,5,6,0,0,251,253,3,8,4,0,252,251,1,0,0,0,252,253,1,0,0,0,
  	253,254,1,0,0,0,254,255,5,3,0,0,255,257,5,62,0,0,256,249,1,0,0,0,256,
  	250,1,0,0,0,257,259,1,0,0,0,258,243,1,0,0,0,258,247,1,0,0,0,259,265,1,
  	0,0,0,260,261,10,2,0,0,261,262,5,3,0,0,262,264,5,62,0,0,263,260,1,0,0,
  	0,264,267,1,0,0,0,265,263,1,0,0,0,265,266,1,0,0,0,266,7,1,0,0,0,267,265,
  	1,0,0,0,268,269,5,7,0,0,269,270,5,62,0,0,270,271,5,8,0,0,271,9,1,0,0,
  	0,272,273,3,12,6,0,273,274,5,9,0,0,274,275,3,10,5,0,275,281,1,0,0,0,276,
  	278,3,18,9,0,277,279,3,14,7,0,278,277,1,0,0,0,278,279,1,0,0,0,279,281,
  	1,0,0,0,280,272,1,0,0,0,280,276,1,0,0,0,281,11,1,0,0,0,282,296,3,18,9,
  	0,283,292,5,10,0,0,284,289,3,106,53,0,285,286,5,4,0,0,286,288,3,106,53,
  	0,287,285,1,0,0,0,288,291,1,0,0,0,289,287,1,0,0,0,289,290,1,0,0,0,290,
  	293,1,0,0,0,291,289,1,0,0,0,292,284,1,0,0,0,292,293,1,0,0,0,293,294,1,
  	0,0,0,294,296,5,11,0,0,295,282,1,0,0,0,295,283,1,0,0,0,296,13,1,0,0,0,
  	297,298,5,12,0,0,298,300,5,13,0,0,299,301,3,16,8,0,300,299,1,0,0,0,301,
  	302,1,0,0,0,302,300,1,0,0,0,302,303,1,0,0,0,303,304,1,0,0,0,304,305,5,
  	14,0,0,305,15,1,0,0,0,306,307,5,15,0,0,307,311,3,156,78,0,308,309,5,16,
  	0,0,309,311,3,148,74,0,310,306,1,0,0,0,310,308,1,0,0,0,311,17,1,0,0,0,
  	312,317,3,20,10,0,313,314,5,62,0,0,314,316,3,20,10,0,315,313,1,0,0,0,
  	316,319,1,0,0,0,317,315,1,0,0,0,317,318,1,0,0,0,318,19,1,0,0,0,319,317,
  	1,0,0,0,320,325,3,22,11,0,321,322,5,17,0,0,322,324,3,22,11,0,323,321,
  	1,0,0,0,324,327,1,0,0,0,325,323,1,0,0,0,325,326,1,0,0,0,326,329,1,0,0,
  	0,327,325,1,0,0,0,328,330,3,30,15,0,329,328,1,0,0,0,329,330,1,0,0,0,330,
  	333,1,0,0,0,331,333,3,30,15,0,332,320,1,0,0,0,332,331,1,0,0,0,333,21,
  	1,0,0,0,334,338,3,24,12,0,335,337,3,128,64,0,336,335,1,0,0,0,337,340,
  	1,0,0,0,338,336,1,0,0,0,338,339,1,0,0,0,339,23,1,0,0,0,340,338,1,0,0,
  	0,341,342,6,12,-1,0,342,345,3,6,3,0,343,344,5,3,0,0,344,346,5,15,0,0,
  	345,343,1,0,0,0,345,346,1,0,0,0,346,352,1,0,0,0,347,348,5,10,0,0,348,
  	349,3,28,14,0,349,350,5,11,0,0,350,352,1,0,0,0,351,341,1,0,0,0,351,347,
  	1,0,0,0,352,360,1,0,0,0,353,354,10,4,0,0,354,359,3,26,13,0,355,356,10,
  	3,0,0,356,357,5,18,0,0,357,359,5,62,0,0,358,353,1,0,0,0,358,355,1,0,0,
  	0,359,362,1,0,0,0,360,358,1,0,0,0,360,361,1,0,0,0,361,25,1,0,0,0,362,
  	360,1,0,0,0,363,364,5,7,0,0,364,365,3,28,14,0,365,366,5,8,0,0,366,27,
  	1,0,0,0,367,372,3,10,5,0,368,369,5,4,0,0,369,371,3,10,5,0,370,368,1,0,
  	0,0,371,374,1,0,0,0,372,370,1,0,0,0,372,373,1,0,0,0,373,29,1,0,0,0,374,
  	372,1,0,0,0,375,377,5,74,0,0,376,375,1,0,0,0,376,377,1,0,0,0,377,378,
  	1,0,0,0,378,380,5,13,0,0,379,381,3,32,16,0,380,379,1,0,0,0,381,382,1,
  	0,0,0,382,380,1,0,0,0,382,383,1,0,0,0,383,384,1,0,0,0,384,385,5,14,0,
  	0,385,31,1,0,0,0,386,390,3,146,73,0,387,388,5,15,0,0,388,390,3,168,84,
  	0,389,386,1,0,0,0,389,387,1,0,0,0,390,33,1,0,0,0,391,392,3,10,5,0,392,
  	35,1,0,0,0,393,394,5,19,0,0,394,405,3,18,9,0,395,397,5,19,0,0,396,398,
  	3,128,64,0,397,396,1,0,0,0,398,399,1,0,0,0,399,397,1,0,0,0,399,400,1,
  	0,0,0,400,405,1,0,0,0,401,402,5,19,0,0,402,403,5,20,0,0,403,405,5,21,
  	0,0,404,393,1,0,0,0,404,395,1,0,0,0,404,401,1,0,0,0,405,37,1,0,0,0,406,
  	413,3,116,58,0,407,409,5,22,0,0,408,407,1,0,0,0,408,409,1,0,0,0,409,410,
  	1,0,0,0,410,413,5,62,0,0,411,413,5,20,0,0,412,406,1,0,0,0,412,408,1,0,
  	0,0,412,411,1,0,0,0,413,414,1,0,0,0,414,415,5,9,0,0,415,418,3,38,19,0,
  	416,418,3,40,20,0,417,412,1,0,0,0,417,416,1,0,0,0,418,39,1,0,0,0,419,
  	420,5,23,0,0,420,421,5,10,0,0,421,422,3,38,19,0,422,426,5,11,0,0,423,
  	425,5,74,0,0,424,423,1,0,0,0,425,428,1,0,0,0,426,424,1,0,0,0,426,427,
  	1,0,0,0,427,429,1,0,0,0,428,426,1,0,0,0,429,432,3,38,19,0,430,431,5,24,
  	0,0,431,433,3,38,19,0,432,430,1,0,0,0,432,433,1,0,0,0,433,515,1,0,0,0,
  	434,435,5,25,0,0,435,436,5,10,0,0,436,437,3,38,19,0,437,441,5,11,0,0,
  	438,440,5,74,0,0,439,438,1,0,0,0,440,443,1,0,0,0,441,439,1,0,0,0,441,
  	442,1,0,0,0,442,444,1,0,0,0,443,441,1,0,0,0,444,445,3,38,19,0,445,515,
  	1,0,0,0,446,447,5,26,0,0,447,450,3,38,19,0,448,449,5,27,0,0,449,451,3,
  	38,19,0,450,448,1,0,0,0,450,451,1,0,0,0,451,454,1,0,0,0,452,453,5,28,
  	0,0,453,455,3,38,19,0,454,452,1,0,0,0,454,455,1,0,0,0,455,515,1,0,0,0,
  	456,457,5,29,0,0,457,458,3,38,19,0,458,459,5,25,0,0,459,460,5,10,0,0,
  	460,461,3,38,19,0,461,462,5,11,0,0,462,515,1,0,0,0,463,472,5,30,0,0,464,
  	465,5,10,0,0,465,466,3,68,34,0,466,467,5,11,0,0,467,473,1,0,0,0,468,469,
  	5,13,0,0,469,470,3,68,34,0,470,471,5,14,0,0,471,473,1,0,0,0,472,464,1,
  	0,0,0,472,468,1,0,0,0,473,475,1,0,0,0,474,476,5,31,0,0,475,474,1,0,0,
  	0,475,476,1,0,0,0,476,477,1,0,0,0,477,478,3,38,19,0,478,515,1,0,0,0,479,
  	480,5,32,0,0,480,515,3,38,19,0,481,483,5,33,0,0,482,484,3,38,19,0,483,
  	482,1,0,0,0,483,484,1,0,0,0,484,515,1,0,0,0,485,491,3,50,25,0,486,488,
  	3,52,26,0,487,489,5,20,0,0,488,487,1,0,0,0,488,489,1,0,0,0,489,491,1,
  	0,0,0,490,485,1,0,0,0,490,486,1,0,0,0,491,492,1,0,0,0,492,493,5,3,0,0,
  	493,495,1,0,0,0,494,490,1,0,0,0,494,495,1,0,0,0,495,496,1,0,0,0,496,497,
  	5,62,0,0,497,498,5,34,0,0,498,515,3,38,19,0,499,500,3,52,26,0,500,501,
  	3,56,28,0,501,502,5,34,0,0,502,503,3,38,19,0,503,515,1,0,0,0,504,506,
  	3,44,22,0,505,507,3,36,18,0,506,505,1,0,0,0,506,507,1,0,0,0,507,515,1,
  	0,0,0,508,509,3,44,22,0,509,510,5,35,0,0,510,511,5,13,0,0,511,512,3,72,
  	36,0,512,513,5,14,0,0,513,515,1,0,0,0,514,419,1,0,0,0,514,434,1,0,0,0,
  	514,446,1,0,0,0,514,456,1,0,0,0,514,463,1,0,0,0,514,479,1,0,0,0,514,481,
  	1,0,0,0,514,494,1,0,0,0,514,499,1,0,0,0,514,504,1,0,0,0,514,508,1,0,0,
  	0,515,41,1,0,0,0,516,517,7,0,0,0,517,43,1,0,0,0,518,520,3,46,23,0,519,
  	521,5,62,0,0,520,519,1,0,0,0,520,521,1,0,0,0,521,527,1,0,0,0,522,523,
  	3,42,21,0,523,524,3,52,26,0,524,526,1,0,0,0,525,522,1,0,0,0,526,529,1,
  	0,0,0,527,525,1,0,0,0,527,528,1,0,0,0,528,531,1,0,0,0,529,527,1,0,0,0,
  	530,532,5,74,0,0,531,530,1,0,0,0,531,532,1,0,0,0,532,45,1,0,0,0,533,534,
  	6,23,-1,0,534,535,3,48,24,0,535,544,1,0,0,0,536,537,10,1,0,0,537,539,
  	5,62,0,0,538,540,5,74,0,0,539,538,1,0,0,0,539,540,1,0,0,0,540,541,1,0,
  	0,0,541,543,3,46,23,2,542,536,1,0,0,0,543,546,1,0,0,0,544,542,1,0,0,0,
  	544,545,1,0,0,0,545,47,1,0,0,0,546,544,1,0,0,0,547,549,3,42,21,0,548,
  	547,1,0,0,0,548,549,1,0,0,0,549,555,1,0,0,0,550,556,3,50,25,0,551,553,
  	3,52,26,0,552,554,5,20,0,0,553,552,1,0,0,0,553,554,1,0,0,0,554,556,1,
  	0,0,0,555,550,1,0,0,0,555,551,1,0,0,0,556,49,1,0,0,0,557,560,5,39,0,0,
  	558,561,3,182,91,0,559,561,3,132,66,0,560,558,1,0,0,0,560,559,1,0,0,0,
  	561,564,1,0,0,0,562,564,3,60,30,0,563,557,1,0,0,0,563,562,1,0,0,0,564,
  	51,1,0,0,0,565,566,6,26,-1,0,566,582,3,0,0,0,567,582,3,6,3,0,568,582,
  	5,20,0,0,569,571,5,10,0,0,570,572,3,54,27,0,571,570,1,0,0,0,571,572,1,
  	0,0,0,572,573,1,0,0,0,573,582,5,11,0,0,574,575,3,50,25,0,575,576,5,3,
  	0,0,576,577,5,62,0,0,577,582,1,0,0,0,578,579,3,50,25,0,579,580,3,26,13,
  	0,580,582,1,0,0,0,581,565,1,0,0,0,581,567,1,0,0,0,581,568,1,0,0,0,581,
  	569,1,0,0,0,581,574,1,0,0,0,581,578,1,0,0,0,582,598,1,0,0,0,583,585,10,
  	4,0,0,584,586,5,20,0,0,585,584,1,0,0,0,585,586,1,0,0,0,586,587,1,0,0,
  	0,587,588,5,3,0,0,588,597,5,62,0,0,589,591,10,2,0,0,590,592,5,20,0,0,
  	591,590,1,0,0,0,591,592,1,0,0,0,592,593,1,0,0,0,593,597,3,26,13,0,594,
  	595,10,1,0,0,595,597,3,56,28,0,596,583,1,0,0,0,596,589,1,0,0,0,596,594,
  	1,0,0,0,597,600,1,0,0,0,598,596,1,0,0,0,598,599,1,0,0,0,599,53,1,0,0,
  	0,600,598,1,0,0,0,601,606,3,38,19,0,602,603,5,4,0,0,603,605,3,38,19,0,
  	604,602,1,0,0,0,605,608,1,0,0,0,606,604,1,0,0,0,606,607,1,0,0,0,607,55,
  	1,0,0,0,608,606,1,0,0,0,609,610,5,10,0,0,610,611,3,58,29,0,611,612,5,
  	11,0,0,612,622,1,0,0,0,613,614,5,13,0,0,614,615,3,58,29,0,615,616,5,14,
  	0,0,616,622,1,0,0,0,617,619,5,74,0,0,618,617,1,0,0,0,618,619,1,0,0,0,
  	619,620,1,0,0,0,620,622,3,60,30,0,621,609,1,0,0,0,621,613,1,0,0,0,621,
  	618,1,0,0,0,622,57,1,0,0,0,623,625,3,54,27,0,624,623,1,0,0,0,624,625,
  	1,0,0,0,625,636,1,0,0,0,626,627,3,54,27,0,627,628,5,4,0,0,628,630,1,0,
  	0,0,629,626,1,0,0,0,629,630,1,0,0,0,630,631,1,0,0,0,631,633,3,44,22,0,
  	632,634,7,1,0,0,633,632,1,0,0,0,633,634,1,0,0,0,634,636,1,0,0,0,635,624,
  	1,0,0,0,635,629,1,0,0,0,636,59,1,0,0,0,637,638,5,13,0,0,638,639,3,72,
  	36,0,639,640,5,14,0,0,640,646,1,0,0,0,641,642,5,13,0,0,642,643,3,62,31,
  	0,643,644,5,14,0,0,644,646,1,0,0,0,645,637,1,0,0,0,645,641,1,0,0,0,646,
  	61,1,0,0,0,647,649,3,64,32,0,648,647,1,0,0,0,649,650,1,0,0,0,650,648,
  	1,0,0,0,650,651,1,0,0,0,651,653,1,0,0,0,652,654,3,66,33,0,653,652,1,0,
  	0,0,653,654,1,0,0,0,654,63,1,0,0,0,655,681,3,138,69,0,656,658,3,128,64,
  	0,657,656,1,0,0,0,658,661,1,0,0,0,659,657,1,0,0,0,659,660,1,0,0,0,660,
  	663,1,0,0,0,661,659,1,0,0,0,662,664,7,2,0,0,663,662,1,0,0,0,663,664,1,
  	0,0,0,664,665,1,0,0,0,665,681,3,160,80,0,666,668,3,128,64,0,667,666,1,
  	0,0,0,668,671,1,0,0,0,669,667,1,0,0,0,669,670,1,0,0,0,670,675,1,0,0,0,
  	671,669,1,0,0,0,672,674,3,122,61,0,673,672,1,0,0,0,674,677,1,0,0,0,675,
  	673,1,0,0,0,675,676,1,0,0,0,676,678,1,0,0,0,677,675,1,0,0,0,678,681,3,
  	170,85,0,679,681,3,40,20,0,680,655,1,0,0,0,680,659,1,0,0,0,680,669,1,
  	0,0,0,680,679,1,0,0,0,681,65,1,0,0,0,682,699,3,40,20,0,683,694,3,116,
  	58,0,684,686,5,22,0,0,685,684,1,0,0,0,685,686,1,0,0,0,686,687,1,0,0,0,
  	687,690,5,62,0,0,688,690,5,20,0,0,689,685,1,0,0,0,689,688,1,0,0,0,690,
  	691,1,0,0,0,691,692,5,19,0,0,692,694,3,20,10,0,693,683,1,0,0,0,693,689,
  	1,0,0,0,694,695,1,0,0,0,695,696,5,9,0,0,696,697,3,62,31,0,697,699,1,0,
  	0,0,698,682,1,0,0,0,698,693,1,0,0,0,699,67,1,0,0,0,700,702,3,70,35,0,
  	701,700,1,0,0,0,702,703,1,0,0,0,703,701,1,0,0,0,703,704,1,0,0,0,704,69,
  	1,0,0,0,705,706,3,80,40,0,706,707,5,41,0,0,707,715,3,38,19,0,708,714,
  	3,76,38,0,709,710,3,80,40,0,710,711,5,34,0,0,711,712,3,38,19,0,712,714,
  	1,0,0,0,713,708,1,0,0,0,713,709,1,0,0,0,714,717,1,0,0,0,715,713,1,0,0,
  	0,715,716,1,0,0,0,716,71,1,0,0,0,717,715,1,0,0,0,718,720,3,74,37,0,719,
  	718,1,0,0,0,720,721,1,0,0,0,721,719,1,0,0,0,721,722,1,0,0,0,722,73,1,
  	0,0,0,723,724,5,42,0,0,724,726,3,78,39,0,725,727,3,76,38,0,726,725,1,
  	0,0,0,726,727,1,0,0,0,727,728,1,0,0,0,728,729,5,9,0,0,729,730,3,62,31,
  	0,730,75,1,0,0,0,731,732,5,23,0,0,732,733,3,44,22,0,733,77,1,0,0,0,734,
  	739,3,80,40,0,735,736,5,43,0,0,736,738,3,80,40,0,737,735,1,0,0,0,738,
  	741,1,0,0,0,739,737,1,0,0,0,739,740,1,0,0,0,740,79,1,0,0,0,741,739,1,
  	0,0,0,742,743,7,3,0,0,743,744,5,19,0,0,744,747,3,34,17,0,745,747,3,82,
  	41,0,746,742,1,0,0,0,746,745,1,0,0,0,747,81,1,0,0,0,748,751,5,62,0,0,
  	749,750,5,44,0,0,750,752,3,84,42,0,751,749,1,0,0,0,751,752,1,0,0,0,752,
  	755,1,0,0,0,753,755,3,84,42,0,754,748,1,0,0,0,754,753,1,0,0,0,755,83,
  	1,0,0,0,756,769,3,86,43,0,757,765,3,86,43,0,758,760,5,62,0,0,759,761,
  	5,74,0,0,760,759,1,0,0,0,760,761,1,0,0,0,761,762,1,0,0,0,762,764,3,86,
  	43,0,763,758,1,0,0,0,764,767,1,0,0,0,765,763,1,0,0,0,765,766,1,0,0,0,
  	766,769,1,0,0,0,767,765,1,0,0,0,768,756,1,0,0,0,768,757,1,0,0,0,769,85,
  	1,0,0,0,770,802,5,20,0,0,771,802,5,69,0,0,772,802,3,0,0,0,773,779,3,6,
  	3,0,774,776,5,10,0,0,775,777,3,88,44,0,776,775,1,0,0,0,776,777,1,0,0,
  	0,777,778,1,0,0,0,778,780,5,11,0,0,779,774,1,0,0,0,779,780,1,0,0,0,780,
  	802,1,0,0,0,781,782,3,6,3,0,782,786,5,10,0,0,783,784,3,88,44,0,784,785,
  	5,4,0,0,785,787,1,0,0,0,786,783,1,0,0,0,786,787,1,0,0,0,787,790,1,0,0,
  	0,788,789,5,62,0,0,789,791,5,44,0,0,790,788,1,0,0,0,790,791,1,0,0,0,791,
  	792,1,0,0,0,792,793,5,20,0,0,793,794,5,21,0,0,794,795,5,11,0,0,795,802,
  	1,0,0,0,796,798,5,10,0,0,797,799,3,88,44,0,798,797,1,0,0,0,798,799,1,
  	0,0,0,799,800,1,0,0,0,800,802,5,11,0,0,801,770,1,0,0,0,801,771,1,0,0,
  	0,801,772,1,0,0,0,801,773,1,0,0,0,801,781,1,0,0,0,801,796,1,0,0,0,802,
  	87,1,0,0,0,803,806,3,78,39,0,804,805,5,4,0,0,805,807,3,88,44,0,806,804,
  	1,0,0,0,806,807,1,0,0,0,807,811,1,0,0,0,808,809,5,20,0,0,809,811,5,21,
  	0,0,810,803,1,0,0,0,810,808,1,0,0,0,811,89,1,0,0,0,812,813,5,7,0,0,813,
  	818,3,94,47,0,814,815,5,4,0,0,815,817,3,94,47,0,816,814,1,0,0,0,817,820,
  	1,0,0,0,818,816,1,0,0,0,818,819,1,0,0,0,819,821,1,0,0,0,820,818,1,0,0,
  	0,821,822,5,8,0,0,822,91,1,0,0,0,823,824,5,7,0,0,824,829,3,96,48,0,825,
  	826,5,4,0,0,826,828,3,96,48,0,827,825,1,0,0,0,828,831,1,0,0,0,829,827,
  	1,0,0,0,829,830,1,0,0,0,830,832,1,0,0,0,831,829,1,0,0,0,832,833,5,8,0,
  	0,833,93,1,0,0,0,834,836,3,128,64,0,835,834,1,0,0,0,836,839,1,0,0,0,837,
  	835,1,0,0,0,837,838,1,0,0,0,838,841,1,0,0,0,839,837,1,0,0,0,840,842,7,
  	4,0,0,841,840,1,0,0,0,841,842,1,0,0,0,842,843,1,0,0,0,843,844,3,96,48,
  	0,844,95,1,0,0,0,845,847,7,5,0,0,846,848,3,90,45,0,847,846,1,0,0,0,847,
  	848,1,0,0,0,848,851,1,0,0,0,849,850,5,45,0,0,850,852,3,10,5,0,851,849,
  	1,0,0,0,851,852,1,0,0,0,852,855,1,0,0,0,853,854,5,46,0,0,854,856,3,10,
  	5,0,855,853,1,0,0,0,855,856,1,0,0,0,856,861,1,0,0,0,857,858,5,47,0,0,
  	858,860,3,10,5,0,859,857,1,0,0,0,860,863,1,0,0,0,861,859,1,0,0,0,861,
  	862,1,0,0,0,862,868,1,0,0,0,863,861,1,0,0,0,864,865,5,19,0,0,865,867,
  	3,10,5,0,866,864,1,0,0,0,867,870,1,0,0,0,868,866,1,0,0,0,868,869,1,0,
  	0,0,869,97,1,0,0,0,870,868,1,0,0,0,871,873,3,100,50,0,872,871,1,0,0,0,
  	873,876,1,0,0,0,874,872,1,0,0,0,874,875,1,0,0,0,875,885,1,0,0,0,876,874,
  	1,0,0,0,877,879,5,74,0,0,878,877,1,0,0,0,878,879,1,0,0,0,879,880,1,0,
  	0,0,880,881,5,10,0,0,881,882,5,22,0,0,882,883,3,102,51,0,883,884,5,11,
  	0,0,884,886,1,0,0,0,885,878,1,0,0,0,885,886,1,0,0,0,886,99,1,0,0,0,887,
  	889,5,74,0,0,888,887,1,0,0,0,888,889,1,0,0,0,889,890,1,0,0,0,890,892,
  	5,10,0,0,891,893,3,102,51,0,892,891,1,0,0,0,892,893,1,0,0,0,893,894,1,
  	0,0,0,894,895,5,11,0,0,895,101,1,0,0,0,896,901,3,104,52,0,897,898,5,4,
  	0,0,898,900,3,104,52,0,899,897,1,0,0,0,900,903,1,0,0,0,901,899,1,0,0,
  	0,901,902,1,0,0,0,902,103,1,0,0,0,903,901,1,0,0,0,904,906,3,128,64,0,
  	905,904,1,0,0,0,906,909,1,0,0,0,907,905,1,0,0,0,907,908,1,0,0,0,908,910,
  	1,0,0,0,909,907,1,0,0,0,910,913,5,62,0,0,911,912,5,19,0,0,912,914,3,106,
  	53,0,913,911,1,0,0,0,913,914,1,0,0,0,914,917,1,0,0,0,915,916,5,34,0,0,
  	916,918,3,38,19,0,917,915,1,0,0,0,917,918,1,0,0,0,918,105,1,0,0,0,919,
  	926,3,10,5,0,920,921,5,9,0,0,921,926,3,10,5,0,922,923,3,10,5,0,923,924,
  	5,21,0,0,924,926,1,0,0,0,925,919,1,0,0,0,925,920,1,0,0,0,925,922,1,0,
  	0,0,926,107,1,0,0,0,927,929,3,110,55,0,928,927,1,0,0,0,929,932,1,0,0,
  	0,930,928,1,0,0,0,930,931,1,0,0,0,931,941,1,0,0,0,932,930,1,0,0,0,933,
  	935,5,74,0,0,934,933,1,0,0,0,934,935,1,0,0,0,935,936,1,0,0,0,936,937,
  	5,10,0,0,937,938,5,22,0,0,938,939,3,112,56,0,939,940,5,11,0,0,940,942,
  	1,0,0,0,941,934,1,0,0,0,941,942,1,0,0,0,942,109,1,0,0,0,943,945,5,74,
  	0,0,944,943,1,0,0,0,944,945,1,0,0,0,945,946,1,0,0,0,946,948,5,10,0,0,
  	947,949,3,112,56,0,948,947,1,0,0,0,948,949,1,0,0,0,949,950,1,0,0,0,950,
  	951,5,11,0,0,951,111,1,0,0,0,952,957,3,114,57,0,953,954,5,4,0,0,954,956,
  	3,114,57,0,955,953,1,0,0,0,956,959,1,0,0,0,957,955,1,0,0,0,957,958,1,
  	0,0,0,958,113,1,0,0,0,959,957,1,0,0,0,960,962,3,128,64,0,961,960,1,0,
  	0,0,962,965,1,0,0,0,963,961,1,0,0,0,963,964,1,0,0,0,964,969,1,0,0,0,965,
  	963,1,0,0,0,966,968,3,120,60,0,967,966,1,0,0,0,968,971,1,0,0,0,969,967,
  	1,0,0,0,969,970,1,0,0,0,970,973,1,0,0,0,971,969,1,0,0,0,972,974,7,6,0,
  	0,973,972,1,0,0,0,973,974,1,0,0,0,974,975,1,0,0,0,975,976,5,62,0,0,976,
  	977,5,19,0,0,977,980,3,106,53,0,978,979,5,34,0,0,979,981,3,38,19,0,980,
  	978,1,0,0,0,980,981,1,0,0,0,981,115,1,0,0,0,982,983,5,10,0,0,983,988,
  	3,118,59,0,984,985,5,4,0,0,985,987,3,118,59,0,986,984,1,0,0,0,987,990,
  	1,0,0,0,988,986,1,0,0,0,988,989,1,0,0,0,989,991,1,0,0,0,990,988,1,0,0,
  	0,991,992,5,11,0,0,992,117,1,0,0,0,993,996,7,5,0,0,994,995,5,19,0,0,995,
  	997,3,10,5,0,996,994,1,0,0,0,996,997,1,0,0,0,997,119,1,0,0,0,998,1002,
  	3,122,61,0,999,1002,3,124,62,0,1000,1002,5,49,0,0,1001,998,1,0,0,0,1001,
  	999,1,0,0,0,1001,1000,1,0,0,0,1002,121,1,0,0,0,1003,1004,7,7,0,0,1004,
  	123,1,0,0,0,1005,1007,7,8,0,0,1006,1008,3,126,63,0,1007,1006,1,0,0,0,
  	1007,1008,1,0,0,0,1008,125,1,0,0,0,1009,1010,5,7,0,0,1010,1011,7,9,0,
  	0,1011,1012,5,8,0,0,1012,127,1,0,0,0,1013,1014,5,44,0,0,1014,1018,3,24,
  	12,0,1015,1017,3,56,28,0,1016,1015,1,0,0,0,1017,1020,1,0,0,0,1018,1016,
  	1,0,0,0,1018,1019,1,0,0,0,1019,129,1,0,0,0,1020,1018,1,0,0,0,1021,1022,
  	5,44,0,0,1022,1023,3,24,12,0,1023,1024,3,56,28,0,1024,131,1,0,0,0,1025,
  	1027,5,74,0,0,1026,1025,1,0,0,0,1026,1027,1,0,0,0,1027,1028,1,0,0,0,1028,
  	1030,5,13,0,0,1029,1031,3,136,68,0,1030,1029,1,0,0,0,1030,1031,1,0,0,
  	0,1031,1033,1,0,0,0,1032,1034,3,134,67,0,1033,1032,1,0,0,0,1034,1035,
  	1,0,0,0,1035,1033,1,0,0,0,1035,1036,1,0,0,0,1036,1037,1,0,0,0,1037,1038,
  	5,14,0,0,1038,133,1,0,0,0,1039,1074,3,138,69,0,1040,1042,3,128,64,0,1041,
  	1043,5,74,0,0,1042,1041,1,0,0,0,1042,1043,1,0,0,0,1043,1045,1,0,0,0,1044,
  	1040,1,0,0,0,1045,1048,1,0,0,0,1046,1044,1,0,0,0,1046,1047,1,0,0,0,1047,
  	1052,1,0,0,0,1048,1046,1,0,0,0,1049,1051,3,120,60,0,1050,1049,1,0,0,0,
  	1051,1054,1,0,0,0,1052,1050,1,0,0,0,1052,1053,1,0,0,0,1053,1055,1,0,0,
  	0,1054,1052,1,0,0,0,1055,1074,3,160,80,0,1056,1058,3,128,64,0,1057,1059,
  	5,74,0,0,1058,1057,1,0,0,0,1058,1059,1,0,0,0,1059,1061,1,0,0,0,1060,1056,
  	1,0,0,0,1061,1064,1,0,0,0,1062,1060,1,0,0,0,1062,1063,1,0,0,0,1063,1068,
  	1,0,0,0,1064,1062,1,0,0,0,1065,1067,3,120,60,0,1066,1065,1,0,0,0,1067,
  	1070,1,0,0,0,1068,1066,1,0,0,0,1068,1069,1,0,0,0,1069,1071,1,0,0,0,1070,
  	1068,1,0,0,0,1071,1074,3,146,73,0,1072,1074,3,38,19,0,1073,1039,1,0,0,
  	0,1073,1046,1,0,0,0,1073,1062,1,0,0,0,1073,1072,1,0,0,0,1074,135,1,0,
  	0,0,1075,1078,5,62,0,0,1076,1077,5,19,0,0,1077,1079,3,10,5,0,1078,1076,
  	1,0,0,0,1078,1079,1,0,0,0,1079,1080,1,0,0,0,1080,1087,5,9,0,0,1081,1082,
  	5,5,0,0,1082,1083,5,19,0,0,1083,1084,3,10,5,0,1084,1085,5,9,0,0,1085,
  	1087,1,0,0,0,1086,1075,1,0,0,0,1086,1081,1,0,0,0,1087,137,1,0,0,0,1088,
  	1089,5,55,0,0,1089,1094,3,140,70,0,1090,1091,5,4,0,0,1091,1093,3,140,
  	70,0,1092,1090,1,0,0,0,1093,1096,1,0,0,0,1094,1092,1,0,0,0,1094,1095,
  	1,0,0,0,1095,139,1,0,0,0,1096,1094,1,0,0,0,1097,1104,3,6,3,0,1098,1102,
  	5,3,0,0,1099,1103,5,62,0,0,1100,1103,5,20,0,0,1101,1103,3,142,71,0,1102,
  	1099,1,0,0,0,1102,1100,1,0,0,0,1102,1101,1,0,0,0,1103,1105,1,0,0,0,1104,
  	1098,1,0,0,0,1104,1105,1,0,0,0,1105,141,1,0,0,0,1106,1112,5,13,0,0,1107,
  	1108,3,144,72,0,1108,1109,5,4,0,0,1109,1111,1,0,0,0,1110,1107,1,0,0,0,
  	1111,1114,1,0,0,0,1112,1110,1,0,0,0,1112,1113,1,0,0,0,1113,1117,1,0,0,
  	0,1114,1112,1,0,0,0,1115,1118,3,144,72,0,1116,1118,5,20,0,0,1117,1115,
  	1,0,0,0,1117,1116,1,0,0,0,1118,1119,1,0,0,0,1119,1120,5,14,0,0,1120,143,
  	1,0,0,0,1121,1124,5,62,0,0,1122,1123,5,9,0,0,1123,1125,7,5,0,0,1124,1122,
  	1,0,0,0,1124,1125,1,0,0,0,1125,145,1,0,0,0,1126,1127,5,16,0,0,1127,1141,
  	3,148,74,0,1128,1129,5,48,0,0,1129,1141,3,150,75,0,1130,1131,5,56,0,0,
  	1131,1141,3,152,76,0,1132,1136,5,15,0,0,1133,1135,5,74,0,0,1134,1133,
  	1,0,0,0,1135,1138,1,0,0,0,1136,1134,1,0,0,0,1136,1137,1,0,0,0,1137,1139,
  	1,0,0,0,1138,1136,1,0,0,0,1139,1141,3,156,78,0,1140,1126,1,0,0,0,1140,
  	1128,1,0,0,0,1140,1130,1,0,0,0,1140,1132,1,0,0,0,1141,147,1,0,0,0,1142,
  	1143,3,4,2,0,1143,1144,5,19,0,0,1144,1145,3,10,5,0,1145,149,1,0,0,0,1146,
  	1147,3,4,2,0,1147,1148,5,19,0,0,1148,1149,3,10,5,0,1149,151,1,0,0,0,1150,
  	1153,3,154,77,0,1151,1152,5,19,0,0,1152,1154,3,10,5,0,1153,1151,1,0,0,
  	0,1153,1154,1,0,0,0,1154,153,1,0,0,0,1155,1157,5,62,0,0,1156,1158,3,92,
  	46,0,1157,1156,1,0,0,0,1157,1158,1,0,0,0,1158,1159,1,0,0,0,1159,1160,
  	3,98,49,0,1160,155,1,0,0,0,1161,1163,5,62,0,0,1162,1164,3,90,45,0,1163,
  	1162,1,0,0,0,1163,1164,1,0,0,0,1164,1167,1,0,0,0,1165,1166,5,45,0,0,1166,
  	1168,3,10,5,0,1167,1165,1,0,0,0,1167,1168,1,0,0,0,1168,1171,1,0,0,0,1169,
  	1170,5,46,0,0,1170,1172,3,10,5,0,1171,1169,1,0,0,0,1171,1172,1,0,0,0,
  	1172,157,1,0,0,0,1173,1174,5,16,0,0,1174,1178,3,162,81,0,1175,1176,5,
  	48,0,0,1176,1178,3,164,82,0,1177,1173,1,0,0,0,1177,1175,1,0,0,0,1178,
  	159,1,0,0,0,1179,1192,3,158,79,0,1180,1181,5,56,0,0,1181,1192,3,166,83,
  	0,1182,1186,5,15,0,0,1183,1185,5,74,0,0,1184,1183,1,0,0,0,1185,1188,1,
  	0,0,0,1186,1184,1,0,0,0,1186,1187,1,0,0,0,1187,1189,1,0,0,0,1188,1186,
  	1,0,0,0,1189,1192,3,168,84,0,1190,1192,3,170,85,0,1191,1179,1,0,0,0,1191,
  	1180,1,0,0,0,1191,1182,1,0,0,0,1191,1190,1,0,0,0,1192,161,1,0,0,0,1193,
  	1198,3,82,41,0,1194,1195,5,4,0,0,1195,1197,3,82,41,0,1196,1194,1,0,0,
  	0,1197,1200,1,0,0,0,1198,1196,1,0,0,0,1198,1199,1,0,0,0,1199,1203,1,0,
  	0,0,1200,1198,1,0,0,0,1201,1202,5,19,0,0,1202,1204,3,10,5,0,1203,1201,
  	1,0,0,0,1203,1204,1,0,0,0,1204,1205,1,0,0,0,1205,1206,5,34,0,0,1206,1207,
  	3,38,19,0,1207,163,1,0,0,0,1208,1216,3,162,81,0,1209,1210,3,4,2,0,1210,
  	1211,5,19,0,0,1211,1212,3,10,5,0,1212,1213,5,34,0,0,1213,1214,5,20,0,
  	0,1214,1216,1,0,0,0,1215,1208,1,0,0,0,1215,1209,1,0,0,0,1216,165,1,0,
  	0,0,1217,1220,3,154,77,0,1218,1219,5,19,0,0,1219,1221,3,10,5,0,1220,1218,
  	1,0,0,0,1220,1221,1,0,0,0,1221,1222,1,0,0,0,1222,1223,5,34,0,0,1223,1224,
  	3,38,19,0,1224,1245,1,0,0,0,1225,1227,3,154,77,0,1226,1228,5,74,0,0,1227,
  	1226,1,0,0,0,1227,1228,1,0,0,0,1228,1229,1,0,0,0,1229,1230,5,13,0,0,1230,
  	1231,3,62,31,0,1231,1232,5,14,0,0,1232,1245,1,0,0,0,1233,1234,5,5,0,0,
  	1234,1235,3,100,50,0,1235,1242,3,98,49,0,1236,1237,5,34,0,0,1237,1243,
  	3,196,98,0,1238,1240,5,74,0,0,1239,1238,1,0,0,0,1239,1240,1,0,0,0,1240,
  	1241,1,0,0,0,1241,1243,3,198,99,0,1242,1236,1,0,0,0,1242,1239,1,0,0,0,
  	1243,1245,1,0,0,0,1244,1217,1,0,0,0,1244,1225,1,0,0,0,1244,1233,1,0,0,
  	0,1245,167,1,0,0,0,1246,1248,5,62,0,0,1247,1249,3,90,45,0,1248,1247,1,
  	0,0,0,1248,1249,1,0,0,0,1249,1250,1,0,0,0,1250,1251,5,34,0,0,1251,1252,
  	3,10,5,0,1252,169,1,0,0,0,1253,1255,5,42,0,0,1254,1253,1,0,0,0,1254,1255,
  	1,0,0,0,1255,1256,1,0,0,0,1256,1257,5,57,0,0,1257,1266,3,172,86,0,1258,
  	1260,5,42,0,0,1259,1258,1,0,0,0,1259,1260,1,0,0,0,1260,1261,1,0,0,0,1261,
  	1262,5,58,0,0,1262,1266,3,176,88,0,1263,1264,5,59,0,0,1264,1266,3,174,
  	87,0,1265,1254,1,0,0,0,1265,1259,1,0,0,0,1265,1263,1,0,0,0,1266,171,1,
  	0,0,0,1267,1269,5,62,0,0,1268,1270,3,90,45,0,1269,1268,1,0,0,0,1269,1270,
  	1,0,0,0,1270,1274,1,0,0,0,1271,1273,3,130,65,0,1272,1271,1,0,0,0,1273,
  	1276,1,0,0,0,1274,1272,1,0,0,0,1274,1275,1,0,0,0,1275,1278,1,0,0,0,1276,
  	1274,1,0,0,0,1277,1279,3,124,62,0,1278,1277,1,0,0,0,1278,1279,1,0,0,0,
  	1279,1280,1,0,0,0,1280,1281,3,108,54,0,1281,1282,3,178,89,0,1282,173,
  	1,0,0,0,1283,1285,5,62,0,0,1284,1286,3,90,45,0,1285,1284,1,0,0,0,1285,
  	1286,1,0,0,0,1286,1287,1,0,0,0,1287,1288,3,180,90,0,1288,175,1,0,0,0,
  	1289,1290,5,62,0,0,1290,1291,3,178,89,0,1291,177,1,0,0,0,1292,1293,5,
  	60,0,0,1293,1301,3,182,91,0,1294,1296,5,60,0,0,1295,1294,1,0,0,0,1295,
  	1296,1,0,0,0,1296,1297,1,0,0,0,1297,1299,3,132,66,0,1298,1295,1,0,0,0,
  	1298,1299,1,0,0,0,1299,1301,1,0,0,0,1300,1292,1,0,0,0,1300,1298,1,0,0,
  	0,1301,179,1,0,0,0,1302,1303,5,60,0,0,1303,1311,3,184,92,0,1304,1306,
  	5,60,0,0,1305,1304,1,0,0,0,1305,1306,1,0,0,0,1306,1307,1,0,0,0,1307,1309,
  	3,132,66,0,1308,1305,1,0,0,0,1308,1309,1,0,0,0,1309,1311,1,0,0,0,1310,
  	1302,1,0,0,0,1310,1308,1,0,0,0,1311,181,1,0,0,0,1312,1314,3,192,96,0,
  	1313,1312,1,0,0,0,1313,1314,1,0,0,0,1314,1315,1,0,0,0,1315,1317,3,186,
  	93,0,1316,1318,3,132,66,0,1317,1316,1,0,0,0,1317,1318,1,0,0,0,1318,183,
  	1,0,0,0,1319,1321,3,192,96,0,1320,1319,1,0,0,0,1320,1321,1,0,0,0,1321,
  	1322,1,0,0,0,1322,1324,3,188,94,0,1323,1325,3,132,66,0,1324,1323,1,0,
  	0,0,1324,1325,1,0,0,0,1325,185,1,0,0,0,1326,1331,3,190,95,0,1327,1328,
  	5,17,0,0,1328,1330,3,22,11,0,1329,1327,1,0,0,0,1330,1333,1,0,0,0,1331,
  	1329,1,0,0,0,1331,1332,1,0,0,0,1332,187,1,0,0,0,1333,1331,1,0,0,0,1334,
  	1339,3,22,11,0,1335,1336,5,17,0,0,1336,1338,3,22,11,0,1337,1335,1,0,0,
  	0,1338,1341,1,0,0,0,1339,1337,1,0,0,0,1339,1340,1,0,0,0,1340,189,1,0,
  	0,0,1341,1339,1,0,0,0,1342,1346,3,22,11,0,1343,1345,3,56,28,0,1344,1343,
  	1,0,0,0,1345,1348,1,0,0,0,1346,1344,1,0,0,0,1346,1347,1,0,0,0,1347,191,
  	1,0,0,0,1348,1346,1,0,0,0,1349,1351,5,13,0,0,1350,1352,3,194,97,0,1351,
  	1350,1,0,0,0,1352,1353,1,0,0,0,1353,1351,1,0,0,0,1353,1354,1,0,0,0,1354,
  	1355,1,0,0,0,1355,1356,5,14,0,0,1356,1357,5,17,0,0,1357,193,1,0,0,0,1358,
  	1360,3,128,64,0,1359,1361,5,74,0,0,1360,1359,1,0,0,0,1360,1361,1,0,0,
  	0,1361,1363,1,0,0,0,1362,1358,1,0,0,0,1363,1366,1,0,0,0,1364,1362,1,0,
  	0,0,1364,1365,1,0,0,0,1365,1370,1,0,0,0,1366,1364,1,0,0,0,1367,1369,3,
  	120,60,0,1368,1367,1,0,0,0,1369,1372,1,0,0,0,1370,1368,1,0,0,0,1370,1371,
  	1,0,0,0,1371,1373,1,0,0,0,1372,1370,1,0,0,0,1373,1374,3,158,79,0,1374,
  	195,1,0,0,0,1375,1378,3,200,100,0,1376,1378,3,198,99,0,1377,1375,1,0,
  	0,0,1377,1376,1,0,0,0,1378,197,1,0,0,0,1379,1380,5,13,0,0,1380,1384,3,
  	200,100,0,1381,1383,3,64,32,0,1382,1381,1,0,0,0,1383,1386,1,0,0,0,1384,
  	1382,1,0,0,0,1384,1385,1,0,0,0,1385,1387,1,0,0,0,1386,1384,1,0,0,0,1387,
  	1388,5,14,0,0,1388,199,1,0,0,0,1389,1391,5,5,0,0,1390,1392,3,56,28,0,
  	1391,1390,1,0,0,0,1392,1393,1,0,0,0,1393,1391,1,0,0,0,1393,1394,1,0,0,
  	0,1394,201,1,0,0,0,1395,1397,3,204,102,0,1396,1395,1,0,0,0,1397,1398,
  	1,0,0,0,1398,1396,1,0,0,0,1398,1399,1,0,0,0,1399,203,1,0,0,0,1400,1402,
  	3,128,64,0,1401,1403,5,74,0,0,1402,1401,1,0,0,0,1402,1403,1,0,0,0,1403,
  	1405,1,0,0,0,1404,1400,1,0,0,0,1405,1408,1,0,0,0,1406,1404,1,0,0,0,1406,
  	1407,1,0,0,0,1407,1412,1,0,0,0,1408,1406,1,0,0,0,1409,1411,3,120,60,0,
  	1410,1409,1,0,0,0,1411,1414,1,0,0,0,1412,1410,1,0,0,0,1412,1413,1,0,0,
  	0,1413,1415,1,0,0,0,1414,1412,1,0,0,0,1415,1420,3,170,85,0,1416,1420,
  	3,138,69,0,1417,1420,3,206,103,0,1418,1420,3,208,104,0,1419,1406,1,0,
  	0,0,1419,1416,1,0,0,0,1419,1417,1,0,0,0,1419,1418,1,0,0,0,1420,205,1,
  	0,0,0,1421,1422,5,61,0,0,1422,1424,3,2,1,0,1423,1425,5,74,0,0,1424,1423,
  	1,0,0,0,1424,1425,1,0,0,0,1425,1426,1,0,0,0,1426,1427,5,13,0,0,1427,1428,
  	3,202,101,0,1428,1429,5,14,0,0,1429,207,1,0,0,0,1430,1431,5,61,0,0,1431,
  	1432,5,58,0,0,1432,1433,3,176,88,0,1433,209,1,0,0,0,1434,1435,5,61,0,
  	0,1435,1437,3,2,1,0,1436,1434,1,0,0,0,1437,1440,1,0,0,0,1438,1436,1,0,
  	0,0,1438,1439,1,0,0,0,1439,1441,1,0,0,0,1440,1438,1,0,0,0,1441,1442,3,
  	202,101,0,1442,211,1,0,0,0,208,213,217,225,232,240,247,252,256,258,265,
  	278,280,289,292,295,302,310,317,325,329,332,338,345,351,358,360,372,376,
  	382,389,399,404,408,412,417,426,432,441,450,454,472,475,483,488,490,494,
  	506,514,520,527,531,539,544,548,553,555,560,563,571,581,585,591,596,598,
  	606,618,621,624,629,633,635,645,650,653,659,663,669,675,680,685,689,693,
  	698,703,713,715,721,726,739,746,751,754,760,765,768,776,779,786,790,798,
  	801,806,810,818,829,837,841,847,851,855,861,868,874,878,885,888,892,901,
  	907,913,917,925,930,934,941,944,948,957,963,969,973,980,988,996,1001,
  	1007,1018,1026,1030,1035,1042,1046,1052,1058,1062,1068,1073,1078,1086,
  	1094,1102,1104,1112,1117,1124,1136,1140,1153,1157,1163,1167,1171,1177,
  	1186,1191,1198,1203,1215,1220,1227,1239,1242,1244,1248,1254,1259,1265,
  	1269,1274,1278,1285,1295,1298,1300,1305,1308,1310,1313,1317,1320,1324,
  	1331,1339,1346,1353,1360,1364,1370,1377,1384,1393,1398,1402,1406,1412,
  	1419,1424,1438
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  scalaParserStaticData = staticData.release();
}

}

ScalaParser::ScalaParser(TokenStream *input) : ScalaParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

ScalaParser::ScalaParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  ScalaParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *scalaParserStaticData->atn, scalaParserStaticData->decisionToDFA, scalaParserStaticData->sharedContextCache, options);
}

ScalaParser::~ScalaParser() {
  delete _interpreter;
}

const atn::ATN& ScalaParser::getATN() const {
  return *scalaParserStaticData->atn;
}

std::string ScalaParser::getGrammarFileName() const {
  return "Scala.g4";
}

const std::vector<std::string>& ScalaParser::getRuleNames() const {
  return scalaParserStaticData->ruleNames;
}

const dfa::Vocabulary& ScalaParser::getVocabulary() const {
  return scalaParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView ScalaParser::getSerializedATN() const {
  return scalaParserStaticData->serializedATN;
}


//----------------- LiteralContext ------------------------------------------------------------------

ScalaParser::LiteralContext::LiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ScalaParser::LiteralContext::IntegerLiteral() {
  return getToken(ScalaParser::IntegerLiteral, 0);
}

tree::TerminalNode* ScalaParser::LiteralContext::FloatingPointLiteral() {
  return getToken(ScalaParser::FloatingPointLiteral, 0);
}

tree::TerminalNode* ScalaParser::LiteralContext::BooleanLiteral() {
  return getToken(ScalaParser::BooleanLiteral, 0);
}

tree::TerminalNode* ScalaParser::LiteralContext::CharacterLiteral() {
  return getToken(ScalaParser::CharacterLiteral, 0);
}

tree::TerminalNode* ScalaParser::LiteralContext::StringLiteral() {
  return getToken(ScalaParser::StringLiteral, 0);
}

tree::TerminalNode* ScalaParser::LiteralContext::SymbolLiteral() {
  return getToken(ScalaParser::SymbolLiteral, 0);
}


size_t ScalaParser::LiteralContext::getRuleIndex() const {
  return ScalaParser::RuleLiteral;
}

void ScalaParser::LiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteral(this);
}

void ScalaParser::LiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteral(this);
}

ScalaParser::LiteralContext* ScalaParser::literal() {
  LiteralContext *_localctx = _tracker.createInstance<LiteralContext>(_ctx, getState());
  enterRule(_localctx, 0, ScalaParser::RuleLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(225);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(213);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ScalaParser::T__0) {
        setState(212);
        match(ScalaParser::T__0);
      }
      setState(215);
      match(ScalaParser::IntegerLiteral);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(217);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ScalaParser::T__0) {
        setState(216);
        match(ScalaParser::T__0);
      }
      setState(219);
      match(ScalaParser::FloatingPointLiteral);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(220);
      match(ScalaParser::BooleanLiteral);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(221);
      match(ScalaParser::CharacterLiteral);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(222);
      match(ScalaParser::StringLiteral);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(223);
      match(ScalaParser::SymbolLiteral);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(224);
      match(ScalaParser::T__1);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QualIdContext ------------------------------------------------------------------

ScalaParser::QualIdContext::QualIdContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> ScalaParser::QualIdContext::Id() {
  return getTokens(ScalaParser::Id);
}

tree::TerminalNode* ScalaParser::QualIdContext::Id(size_t i) {
  return getToken(ScalaParser::Id, i);
}


size_t ScalaParser::QualIdContext::getRuleIndex() const {
  return ScalaParser::RuleQualId;
}

void ScalaParser::QualIdContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQualId(this);
}

void ScalaParser::QualIdContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQualId(this);
}

ScalaParser::QualIdContext* ScalaParser::qualId() {
  QualIdContext *_localctx = _tracker.createInstance<QualIdContext>(_ctx, getState());
  enterRule(_localctx, 2, ScalaParser::RuleQualId);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(227);
    match(ScalaParser::Id);
    setState(232);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ScalaParser::T__2) {
      setState(228);
      match(ScalaParser::T__2);
      setState(229);
      match(ScalaParser::Id);
      setState(234);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdsContext ------------------------------------------------------------------

ScalaParser::IdsContext::IdsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> ScalaParser::IdsContext::Id() {
  return getTokens(ScalaParser::Id);
}

tree::TerminalNode* ScalaParser::IdsContext::Id(size_t i) {
  return getToken(ScalaParser::Id, i);
}


size_t ScalaParser::IdsContext::getRuleIndex() const {
  return ScalaParser::RuleIds;
}

void ScalaParser::IdsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIds(this);
}

void ScalaParser::IdsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIds(this);
}

ScalaParser::IdsContext* ScalaParser::ids() {
  IdsContext *_localctx = _tracker.createInstance<IdsContext>(_ctx, getState());
  enterRule(_localctx, 4, ScalaParser::RuleIds);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(235);
    match(ScalaParser::Id);
    setState(240);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ScalaParser::T__3) {
      setState(236);
      match(ScalaParser::T__3);
      setState(237);
      match(ScalaParser::Id);
      setState(242);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StableIdContext ------------------------------------------------------------------

ScalaParser::StableIdContext::StableIdContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> ScalaParser::StableIdContext::Id() {
  return getTokens(ScalaParser::Id);
}

tree::TerminalNode* ScalaParser::StableIdContext::Id(size_t i) {
  return getToken(ScalaParser::Id, i);
}

ScalaParser::ClassQualifierContext* ScalaParser::StableIdContext::classQualifier() {
  return getRuleContext<ScalaParser::ClassQualifierContext>(0);
}

ScalaParser::StableIdContext* ScalaParser::StableIdContext::stableId() {
  return getRuleContext<ScalaParser::StableIdContext>(0);
}


size_t ScalaParser::StableIdContext::getRuleIndex() const {
  return ScalaParser::RuleStableId;
}

void ScalaParser::StableIdContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStableId(this);
}

void ScalaParser::StableIdContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStableId(this);
}


ScalaParser::StableIdContext* ScalaParser::stableId() {
   return stableId(0);
}

ScalaParser::StableIdContext* ScalaParser::stableId(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  ScalaParser::StableIdContext *_localctx = _tracker.createInstance<StableIdContext>(_ctx, parentState);
  ScalaParser::StableIdContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 6;
  enterRecursionRule(_localctx, 6, ScalaParser::RuleStableId, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(258);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 8, _ctx)) {
    case 1: {
      setState(244);
      match(ScalaParser::Id);
      break;
    }

    case 2: {
      setState(247);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ScalaParser::Id) {
        setState(245);
        match(ScalaParser::Id);
        setState(246);
        match(ScalaParser::T__2);
      }
      setState(256);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case ScalaParser::T__4: {
          setState(249);
          match(ScalaParser::T__4);
          break;
        }

        case ScalaParser::T__5: {
          setState(250);
          match(ScalaParser::T__5);
          setState(252);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == ScalaParser::T__6) {
            setState(251);
            classQualifier();
          }
          setState(254);
          match(ScalaParser::T__2);
          setState(255);
          match(ScalaParser::Id);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(265);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 9, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<StableIdContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleStableId);
        setState(260);

        if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
        setState(261);
        match(ScalaParser::T__2);
        setState(262);
        match(ScalaParser::Id); 
      }
      setState(267);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 9, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- ClassQualifierContext ------------------------------------------------------------------

ScalaParser::ClassQualifierContext::ClassQualifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ScalaParser::ClassQualifierContext::Id() {
  return getToken(ScalaParser::Id, 0);
}


size_t ScalaParser::ClassQualifierContext::getRuleIndex() const {
  return ScalaParser::RuleClassQualifier;
}

void ScalaParser::ClassQualifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassQualifier(this);
}

void ScalaParser::ClassQualifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassQualifier(this);
}

ScalaParser::ClassQualifierContext* ScalaParser::classQualifier() {
  ClassQualifierContext *_localctx = _tracker.createInstance<ClassQualifierContext>(_ctx, getState());
  enterRule(_localctx, 8, ScalaParser::RuleClassQualifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(268);
    match(ScalaParser::T__6);
    setState(269);
    match(ScalaParser::Id);
    setState(270);
    match(ScalaParser::T__7);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_Context ------------------------------------------------------------------

ScalaParser::Type_Context::Type_Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ScalaParser::FunctionArgTypesContext* ScalaParser::Type_Context::functionArgTypes() {
  return getRuleContext<ScalaParser::FunctionArgTypesContext>(0);
}

ScalaParser::Type_Context* ScalaParser::Type_Context::type_() {
  return getRuleContext<ScalaParser::Type_Context>(0);
}

ScalaParser::InfixTypeContext* ScalaParser::Type_Context::infixType() {
  return getRuleContext<ScalaParser::InfixTypeContext>(0);
}

ScalaParser::ExistentialClauseContext* ScalaParser::Type_Context::existentialClause() {
  return getRuleContext<ScalaParser::ExistentialClauseContext>(0);
}


size_t ScalaParser::Type_Context::getRuleIndex() const {
  return ScalaParser::RuleType_;
}

void ScalaParser::Type_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_(this);
}

void ScalaParser::Type_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_(this);
}

ScalaParser::Type_Context* ScalaParser::type_() {
  Type_Context *_localctx = _tracker.createInstance<Type_Context>(_ctx, getState());
  enterRule(_localctx, 10, ScalaParser::RuleType_);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(280);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 11, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(272);
      functionArgTypes();
      setState(273);
      match(ScalaParser::T__8);
      setState(274);
      type_();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(276);
      infixType();
      setState(278);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ScalaParser::T__11) {
        setState(277);
        existentialClause();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionArgTypesContext ------------------------------------------------------------------

ScalaParser::FunctionArgTypesContext::FunctionArgTypesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ScalaParser::InfixTypeContext* ScalaParser::FunctionArgTypesContext::infixType() {
  return getRuleContext<ScalaParser::InfixTypeContext>(0);
}

std::vector<ScalaParser::ParamTypeContext *> ScalaParser::FunctionArgTypesContext::paramType() {
  return getRuleContexts<ScalaParser::ParamTypeContext>();
}

ScalaParser::ParamTypeContext* ScalaParser::FunctionArgTypesContext::paramType(size_t i) {
  return getRuleContext<ScalaParser::ParamTypeContext>(i);
}


size_t ScalaParser::FunctionArgTypesContext::getRuleIndex() const {
  return ScalaParser::RuleFunctionArgTypes;
}

void ScalaParser::FunctionArgTypesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunctionArgTypes(this);
}

void ScalaParser::FunctionArgTypesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunctionArgTypes(this);
}

ScalaParser::FunctionArgTypesContext* ScalaParser::functionArgTypes() {
  FunctionArgTypesContext *_localctx = _tracker.createInstance<FunctionArgTypesContext>(_ctx, getState());
  enterRule(_localctx, 12, ScalaParser::RuleFunctionArgTypes);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(295);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 14, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(282);
      infixType();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(283);
      match(ScalaParser::T__9);
      setState(292);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 4611686018427397728) != 0) || _la == ScalaParser::NL) {
        setState(284);
        paramType();
        setState(289);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == ScalaParser::T__3) {
          setState(285);
          match(ScalaParser::T__3);
          setState(286);
          paramType();
          setState(291);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
      }
      setState(294);
      match(ScalaParser::T__10);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExistentialClauseContext ------------------------------------------------------------------

ScalaParser::ExistentialClauseContext::ExistentialClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ScalaParser::ExistentialDclContext *> ScalaParser::ExistentialClauseContext::existentialDcl() {
  return getRuleContexts<ScalaParser::ExistentialDclContext>();
}

ScalaParser::ExistentialDclContext* ScalaParser::ExistentialClauseContext::existentialDcl(size_t i) {
  return getRuleContext<ScalaParser::ExistentialDclContext>(i);
}


size_t ScalaParser::ExistentialClauseContext::getRuleIndex() const {
  return ScalaParser::RuleExistentialClause;
}

void ScalaParser::ExistentialClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExistentialClause(this);
}

void ScalaParser::ExistentialClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExistentialClause(this);
}

ScalaParser::ExistentialClauseContext* ScalaParser::existentialClause() {
  ExistentialClauseContext *_localctx = _tracker.createInstance<ExistentialClauseContext>(_ctx, getState());
  enterRule(_localctx, 14, ScalaParser::RuleExistentialClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(297);
    match(ScalaParser::T__11);
    setState(298);
    match(ScalaParser::T__12);
    setState(300); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(299);
      existentialDcl();
      setState(302); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == ScalaParser::T__14

    || _la == ScalaParser::T__15);
    setState(304);
    match(ScalaParser::T__13);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExistentialDclContext ------------------------------------------------------------------

ScalaParser::ExistentialDclContext::ExistentialDclContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ScalaParser::TypeDclContext* ScalaParser::ExistentialDclContext::typeDcl() {
  return getRuleContext<ScalaParser::TypeDclContext>(0);
}

ScalaParser::ValDclContext* ScalaParser::ExistentialDclContext::valDcl() {
  return getRuleContext<ScalaParser::ValDclContext>(0);
}


size_t ScalaParser::ExistentialDclContext::getRuleIndex() const {
  return ScalaParser::RuleExistentialDcl;
}

void ScalaParser::ExistentialDclContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExistentialDcl(this);
}

void ScalaParser::ExistentialDclContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExistentialDcl(this);
}

ScalaParser::ExistentialDclContext* ScalaParser::existentialDcl() {
  ExistentialDclContext *_localctx = _tracker.createInstance<ExistentialDclContext>(_ctx, getState());
  enterRule(_localctx, 16, ScalaParser::RuleExistentialDcl);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(310);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ScalaParser::T__14: {
        enterOuterAlt(_localctx, 1);
        setState(306);
        match(ScalaParser::T__14);
        setState(307);
        typeDcl();
        break;
      }

      case ScalaParser::T__15: {
        enterOuterAlt(_localctx, 2);
        setState(308);
        match(ScalaParser::T__15);
        setState(309);
        valDcl();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InfixTypeContext ------------------------------------------------------------------

ScalaParser::InfixTypeContext::InfixTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ScalaParser::CompoundTypeContext *> ScalaParser::InfixTypeContext::compoundType() {
  return getRuleContexts<ScalaParser::CompoundTypeContext>();
}

ScalaParser::CompoundTypeContext* ScalaParser::InfixTypeContext::compoundType(size_t i) {
  return getRuleContext<ScalaParser::CompoundTypeContext>(i);
}

std::vector<tree::TerminalNode *> ScalaParser::InfixTypeContext::Id() {
  return getTokens(ScalaParser::Id);
}

tree::TerminalNode* ScalaParser::InfixTypeContext::Id(size_t i) {
  return getToken(ScalaParser::Id, i);
}


size_t ScalaParser::InfixTypeContext::getRuleIndex() const {
  return ScalaParser::RuleInfixType;
}

void ScalaParser::InfixTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInfixType(this);
}

void ScalaParser::InfixTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInfixType(this);
}

ScalaParser::InfixTypeContext* ScalaParser::infixType() {
  InfixTypeContext *_localctx = _tracker.createInstance<InfixTypeContext>(_ctx, getState());
  enterRule(_localctx, 18, ScalaParser::RuleInfixType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(312);
    compoundType();
    setState(317);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 17, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(313);
        match(ScalaParser::Id);
        setState(314);
        compoundType(); 
      }
      setState(319);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 17, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CompoundTypeContext ------------------------------------------------------------------

ScalaParser::CompoundTypeContext::CompoundTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ScalaParser::AnnotTypeContext *> ScalaParser::CompoundTypeContext::annotType() {
  return getRuleContexts<ScalaParser::AnnotTypeContext>();
}

ScalaParser::AnnotTypeContext* ScalaParser::CompoundTypeContext::annotType(size_t i) {
  return getRuleContext<ScalaParser::AnnotTypeContext>(i);
}

ScalaParser::RefinementContext* ScalaParser::CompoundTypeContext::refinement() {
  return getRuleContext<ScalaParser::RefinementContext>(0);
}


size_t ScalaParser::CompoundTypeContext::getRuleIndex() const {
  return ScalaParser::RuleCompoundType;
}

void ScalaParser::CompoundTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCompoundType(this);
}

void ScalaParser::CompoundTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCompoundType(this);
}

ScalaParser::CompoundTypeContext* ScalaParser::compoundType() {
  CompoundTypeContext *_localctx = _tracker.createInstance<CompoundTypeContext>(_ctx, getState());
  enterRule(_localctx, 20, ScalaParser::RuleCompoundType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(332);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ScalaParser::T__4:
      case ScalaParser::T__5:
      case ScalaParser::T__9:
      case ScalaParser::Id: {
        enterOuterAlt(_localctx, 1);
        setState(320);
        annotType();
        setState(325);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == ScalaParser::T__16) {
          setState(321);
          match(ScalaParser::T__16);
          setState(322);
          annotType();
          setState(327);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(329);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 19, _ctx)) {
        case 1: {
          setState(328);
          refinement();
          break;
        }

        default:
          break;
        }
        break;
      }

      case ScalaParser::T__12:
      case ScalaParser::NL: {
        enterOuterAlt(_localctx, 2);
        setState(331);
        refinement();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnnotTypeContext ------------------------------------------------------------------

ScalaParser::AnnotTypeContext::AnnotTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ScalaParser::SimpleTypeContext* ScalaParser::AnnotTypeContext::simpleType() {
  return getRuleContext<ScalaParser::SimpleTypeContext>(0);
}

std::vector<ScalaParser::AnnotationContext *> ScalaParser::AnnotTypeContext::annotation() {
  return getRuleContexts<ScalaParser::AnnotationContext>();
}

ScalaParser::AnnotationContext* ScalaParser::AnnotTypeContext::annotation(size_t i) {
  return getRuleContext<ScalaParser::AnnotationContext>(i);
}


size_t ScalaParser::AnnotTypeContext::getRuleIndex() const {
  return ScalaParser::RuleAnnotType;
}

void ScalaParser::AnnotTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotType(this);
}

void ScalaParser::AnnotTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotType(this);
}

ScalaParser::AnnotTypeContext* ScalaParser::annotType() {
  AnnotTypeContext *_localctx = _tracker.createInstance<AnnotTypeContext>(_ctx, getState());
  enterRule(_localctx, 22, ScalaParser::RuleAnnotType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(334);
    simpleType(0);
    setState(338);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 21, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(335);
        annotation(); 
      }
      setState(340);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 21, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimpleTypeContext ------------------------------------------------------------------

ScalaParser::SimpleTypeContext::SimpleTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ScalaParser::StableIdContext* ScalaParser::SimpleTypeContext::stableId() {
  return getRuleContext<ScalaParser::StableIdContext>(0);
}

ScalaParser::TypesContext* ScalaParser::SimpleTypeContext::types() {
  return getRuleContext<ScalaParser::TypesContext>(0);
}

ScalaParser::SimpleTypeContext* ScalaParser::SimpleTypeContext::simpleType() {
  return getRuleContext<ScalaParser::SimpleTypeContext>(0);
}

ScalaParser::TypeArgsContext* ScalaParser::SimpleTypeContext::typeArgs() {
  return getRuleContext<ScalaParser::TypeArgsContext>(0);
}

tree::TerminalNode* ScalaParser::SimpleTypeContext::Id() {
  return getToken(ScalaParser::Id, 0);
}


size_t ScalaParser::SimpleTypeContext::getRuleIndex() const {
  return ScalaParser::RuleSimpleType;
}

void ScalaParser::SimpleTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimpleType(this);
}

void ScalaParser::SimpleTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimpleType(this);
}


ScalaParser::SimpleTypeContext* ScalaParser::simpleType() {
   return simpleType(0);
}

ScalaParser::SimpleTypeContext* ScalaParser::simpleType(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  ScalaParser::SimpleTypeContext *_localctx = _tracker.createInstance<SimpleTypeContext>(_ctx, parentState);
  ScalaParser::SimpleTypeContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 24;
  enterRecursionRule(_localctx, 24, ScalaParser::RuleSimpleType, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(351);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ScalaParser::T__4:
      case ScalaParser::T__5:
      case ScalaParser::Id: {
        setState(342);
        stableId(0);
        setState(345);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 22, _ctx)) {
        case 1: {
          setState(343);
          match(ScalaParser::T__2);
          setState(344);
          match(ScalaParser::T__14);
          break;
        }

        default:
          break;
        }
        break;
      }

      case ScalaParser::T__9: {
        setState(347);
        match(ScalaParser::T__9);
        setState(348);
        types();
        setState(349);
        match(ScalaParser::T__10);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    _ctx->stop = _input->LT(-1);
    setState(360);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 25, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(358);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 24, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<SimpleTypeContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleSimpleType);
          setState(353);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(354);
          typeArgs();
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<SimpleTypeContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleSimpleType);
          setState(355);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(356);
          match(ScalaParser::T__17);
          setState(357);
          match(ScalaParser::Id);
          break;
        }

        default:
          break;
        } 
      }
      setState(362);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 25, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- TypeArgsContext ------------------------------------------------------------------

ScalaParser::TypeArgsContext::TypeArgsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ScalaParser::TypesContext* ScalaParser::TypeArgsContext::types() {
  return getRuleContext<ScalaParser::TypesContext>(0);
}


size_t ScalaParser::TypeArgsContext::getRuleIndex() const {
  return ScalaParser::RuleTypeArgs;
}

void ScalaParser::TypeArgsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeArgs(this);
}

void ScalaParser::TypeArgsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeArgs(this);
}

ScalaParser::TypeArgsContext* ScalaParser::typeArgs() {
  TypeArgsContext *_localctx = _tracker.createInstance<TypeArgsContext>(_ctx, getState());
  enterRule(_localctx, 26, ScalaParser::RuleTypeArgs);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(363);
    match(ScalaParser::T__6);
    setState(364);
    types();
    setState(365);
    match(ScalaParser::T__7);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypesContext ------------------------------------------------------------------

ScalaParser::TypesContext::TypesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ScalaParser::Type_Context *> ScalaParser::TypesContext::type_() {
  return getRuleContexts<ScalaParser::Type_Context>();
}

ScalaParser::Type_Context* ScalaParser::TypesContext::type_(size_t i) {
  return getRuleContext<ScalaParser::Type_Context>(i);
}


size_t ScalaParser::TypesContext::getRuleIndex() const {
  return ScalaParser::RuleTypes;
}

void ScalaParser::TypesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypes(this);
}

void ScalaParser::TypesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypes(this);
}

ScalaParser::TypesContext* ScalaParser::types() {
  TypesContext *_localctx = _tracker.createInstance<TypesContext>(_ctx, getState());
  enterRule(_localctx, 28, ScalaParser::RuleTypes);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(367);
    type_();
    setState(372);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ScalaParser::T__3) {
      setState(368);
      match(ScalaParser::T__3);
      setState(369);
      type_();
      setState(374);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RefinementContext ------------------------------------------------------------------

ScalaParser::RefinementContext::RefinementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ScalaParser::RefinementContext::NL() {
  return getToken(ScalaParser::NL, 0);
}

std::vector<ScalaParser::RefineStatContext *> ScalaParser::RefinementContext::refineStat() {
  return getRuleContexts<ScalaParser::RefineStatContext>();
}

ScalaParser::RefineStatContext* ScalaParser::RefinementContext::refineStat(size_t i) {
  return getRuleContext<ScalaParser::RefineStatContext>(i);
}


size_t ScalaParser::RefinementContext::getRuleIndex() const {
  return ScalaParser::RuleRefinement;
}

void ScalaParser::RefinementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRefinement(this);
}

void ScalaParser::RefinementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRefinement(this);
}

ScalaParser::RefinementContext* ScalaParser::refinement() {
  RefinementContext *_localctx = _tracker.createInstance<RefinementContext>(_ctx, getState());
  enterRule(_localctx, 30, ScalaParser::RuleRefinement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(376);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ScalaParser::NL) {
      setState(375);
      match(ScalaParser::NL);
    }
    setState(378);
    match(ScalaParser::T__12);
    setState(380); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(379);
      refineStat();
      setState(382); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 72339069014736896) != 0));
    setState(384);
    match(ScalaParser::T__13);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RefineStatContext ------------------------------------------------------------------

ScalaParser::RefineStatContext::RefineStatContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ScalaParser::DclContext* ScalaParser::RefineStatContext::dcl() {
  return getRuleContext<ScalaParser::DclContext>(0);
}

ScalaParser::TypeDefContext* ScalaParser::RefineStatContext::typeDef() {
  return getRuleContext<ScalaParser::TypeDefContext>(0);
}


size_t ScalaParser::RefineStatContext::getRuleIndex() const {
  return ScalaParser::RuleRefineStat;
}

void ScalaParser::RefineStatContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRefineStat(this);
}

void ScalaParser::RefineStatContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRefineStat(this);
}

ScalaParser::RefineStatContext* ScalaParser::refineStat() {
  RefineStatContext *_localctx = _tracker.createInstance<RefineStatContext>(_ctx, getState());
  enterRule(_localctx, 32, ScalaParser::RuleRefineStat);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(389);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 29, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(386);
      dcl();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(387);
      match(ScalaParser::T__14);
      setState(388);
      typeDef();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypePatContext ------------------------------------------------------------------

ScalaParser::TypePatContext::TypePatContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ScalaParser::Type_Context* ScalaParser::TypePatContext::type_() {
  return getRuleContext<ScalaParser::Type_Context>(0);
}


size_t ScalaParser::TypePatContext::getRuleIndex() const {
  return ScalaParser::RuleTypePat;
}

void ScalaParser::TypePatContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypePat(this);
}

void ScalaParser::TypePatContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypePat(this);
}

ScalaParser::TypePatContext* ScalaParser::typePat() {
  TypePatContext *_localctx = _tracker.createInstance<TypePatContext>(_ctx, getState());
  enterRule(_localctx, 34, ScalaParser::RuleTypePat);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(391);
    type_();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AscriptionContext ------------------------------------------------------------------

ScalaParser::AscriptionContext::AscriptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ScalaParser::InfixTypeContext* ScalaParser::AscriptionContext::infixType() {
  return getRuleContext<ScalaParser::InfixTypeContext>(0);
}

std::vector<ScalaParser::AnnotationContext *> ScalaParser::AscriptionContext::annotation() {
  return getRuleContexts<ScalaParser::AnnotationContext>();
}

ScalaParser::AnnotationContext* ScalaParser::AscriptionContext::annotation(size_t i) {
  return getRuleContext<ScalaParser::AnnotationContext>(i);
}


size_t ScalaParser::AscriptionContext::getRuleIndex() const {
  return ScalaParser::RuleAscription;
}

void ScalaParser::AscriptionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAscription(this);
}

void ScalaParser::AscriptionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAscription(this);
}

ScalaParser::AscriptionContext* ScalaParser::ascription() {
  AscriptionContext *_localctx = _tracker.createInstance<AscriptionContext>(_ctx, getState());
  enterRule(_localctx, 36, ScalaParser::RuleAscription);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(404);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 31, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(393);
      match(ScalaParser::T__18);
      setState(394);
      infixType();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(395);
      match(ScalaParser::T__18);
      setState(397); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(396);
                annotation();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(399); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 30, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(401);
      match(ScalaParser::T__18);
      setState(402);
      match(ScalaParser::T__19);
      setState(403);
      match(ScalaParser::T__20);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExprContext ------------------------------------------------------------------

ScalaParser::ExprContext::ExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ScalaParser::ExprContext* ScalaParser::ExprContext::expr() {
  return getRuleContext<ScalaParser::ExprContext>(0);
}

ScalaParser::BindingsContext* ScalaParser::ExprContext::bindings() {
  return getRuleContext<ScalaParser::BindingsContext>(0);
}

tree::TerminalNode* ScalaParser::ExprContext::Id() {
  return getToken(ScalaParser::Id, 0);
}

ScalaParser::Expr1Context* ScalaParser::ExprContext::expr1() {
  return getRuleContext<ScalaParser::Expr1Context>(0);
}


size_t ScalaParser::ExprContext::getRuleIndex() const {
  return ScalaParser::RuleExpr;
}

void ScalaParser::ExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr(this);
}

void ScalaParser::ExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr(this);
}

ScalaParser::ExprContext* ScalaParser::expr() {
  ExprContext *_localctx = _tracker.createInstance<ExprContext>(_ctx, getState());
  enterRule(_localctx, 38, ScalaParser::RuleExpr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(417);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 34, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(412);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case ScalaParser::T__9: {
          setState(406);
          bindings();
          break;
        }

        case ScalaParser::T__21:
        case ScalaParser::Id: {
          setState(408);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == ScalaParser::T__21) {
            setState(407);
            match(ScalaParser::T__21);
          }
          setState(410);
          match(ScalaParser::Id);
          break;
        }

        case ScalaParser::T__19: {
          setState(411);
          match(ScalaParser::T__19);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(414);
      match(ScalaParser::T__8);
      setState(415);
      expr();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(416);
      expr1();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr1Context ------------------------------------------------------------------

ScalaParser::Expr1Context::Expr1Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ScalaParser::ExprContext *> ScalaParser::Expr1Context::expr() {
  return getRuleContexts<ScalaParser::ExprContext>();
}

ScalaParser::ExprContext* ScalaParser::Expr1Context::expr(size_t i) {
  return getRuleContext<ScalaParser::ExprContext>(i);
}

std::vector<tree::TerminalNode *> ScalaParser::Expr1Context::NL() {
  return getTokens(ScalaParser::NL);
}

tree::TerminalNode* ScalaParser::Expr1Context::NL(size_t i) {
  return getToken(ScalaParser::NL, i);
}

ScalaParser::EnumeratorsContext* ScalaParser::Expr1Context::enumerators() {
  return getRuleContext<ScalaParser::EnumeratorsContext>(0);
}

tree::TerminalNode* ScalaParser::Expr1Context::Id() {
  return getToken(ScalaParser::Id, 0);
}

ScalaParser::SimpleExprContext* ScalaParser::Expr1Context::simpleExpr() {
  return getRuleContext<ScalaParser::SimpleExprContext>(0);
}

ScalaParser::SimpleExpr1Context* ScalaParser::Expr1Context::simpleExpr1() {
  return getRuleContext<ScalaParser::SimpleExpr1Context>(0);
}

ScalaParser::ArgumentExprsContext* ScalaParser::Expr1Context::argumentExprs() {
  return getRuleContext<ScalaParser::ArgumentExprsContext>(0);
}

ScalaParser::PostfixExprContext* ScalaParser::Expr1Context::postfixExpr() {
  return getRuleContext<ScalaParser::PostfixExprContext>(0);
}

ScalaParser::AscriptionContext* ScalaParser::Expr1Context::ascription() {
  return getRuleContext<ScalaParser::AscriptionContext>(0);
}

ScalaParser::CaseClausesContext* ScalaParser::Expr1Context::caseClauses() {
  return getRuleContext<ScalaParser::CaseClausesContext>(0);
}


size_t ScalaParser::Expr1Context::getRuleIndex() const {
  return ScalaParser::RuleExpr1;
}

void ScalaParser::Expr1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr1(this);
}

void ScalaParser::Expr1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr1(this);
}

ScalaParser::Expr1Context* ScalaParser::expr1() {
  Expr1Context *_localctx = _tracker.createInstance<Expr1Context>(_ctx, getState());
  enterRule(_localctx, 40, ScalaParser::RuleExpr1);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(514);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 47, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(419);
      match(ScalaParser::T__22);
      setState(420);
      match(ScalaParser::T__9);
      setState(421);
      expr();
      setState(422);
      match(ScalaParser::T__10);
      setState(426);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == ScalaParser::NL) {
        setState(423);
        match(ScalaParser::NL);
        setState(428);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(429);
      expr();
      setState(432);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 36, _ctx)) {
      case 1: {
        setState(430);
        match(ScalaParser::T__23);
        setState(431);
        expr();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(434);
      match(ScalaParser::T__24);
      setState(435);
      match(ScalaParser::T__9);
      setState(436);
      expr();
      setState(437);
      match(ScalaParser::T__10);
      setState(441);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == ScalaParser::NL) {
        setState(438);
        match(ScalaParser::NL);
        setState(443);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(444);
      expr();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(446);
      match(ScalaParser::T__25);
      setState(447);
      expr();
      setState(450);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 38, _ctx)) {
      case 1: {
        setState(448);
        match(ScalaParser::T__26);
        setState(449);
        expr();
        break;
      }

      default:
        break;
      }
      setState(454);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 39, _ctx)) {
      case 1: {
        setState(452);
        match(ScalaParser::T__27);
        setState(453);
        expr();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(456);
      match(ScalaParser::T__28);
      setState(457);
      expr();
      setState(458);
      match(ScalaParser::T__24);
      setState(459);
      match(ScalaParser::T__9);
      setState(460);
      expr();
      setState(461);
      match(ScalaParser::T__10);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(463);
      match(ScalaParser::T__29);
      setState(472);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case ScalaParser::T__9: {
          setState(464);
          match(ScalaParser::T__9);
          setState(465);
          enumerators();
          setState(466);
          match(ScalaParser::T__10);
          break;
        }

        case ScalaParser::T__12: {
          setState(468);
          match(ScalaParser::T__12);
          setState(469);
          enumerators();
          setState(470);
          match(ScalaParser::T__13);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(475);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ScalaParser::T__30) {
        setState(474);
        match(ScalaParser::T__30);
      }
      setState(477);
      expr();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(479);
      match(ScalaParser::T__31);
      setState(480);
      expr();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(481);
      match(ScalaParser::T__32);
      setState(483);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 42, _ctx)) {
      case 1: {
        setState(482);
        expr();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(494);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 45, _ctx)) {
      case 1: {
        setState(490);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 44, _ctx)) {
        case 1: {
          setState(485);
          simpleExpr();
          break;
        }

        case 2: {
          setState(486);
          simpleExpr1(0);
          setState(488);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == ScalaParser::T__19) {
            setState(487);
            match(ScalaParser::T__19);
          }
          break;
        }

        default:
          break;
        }
        setState(492);
        match(ScalaParser::T__2);
        break;
      }

      default:
        break;
      }
      setState(496);
      match(ScalaParser::Id);
      setState(497);
      match(ScalaParser::T__33);
      setState(498);
      expr();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(499);
      simpleExpr1(0);
      setState(500);
      argumentExprs();
      setState(501);
      match(ScalaParser::T__33);
      setState(502);
      expr();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(504);
      postfixExpr();
      setState(506);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ScalaParser::T__18) {
        setState(505);
        ascription();
      }
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(508);
      postfixExpr();
      setState(509);
      match(ScalaParser::T__34);
      setState(510);
      match(ScalaParser::T__12);
      setState(511);
      caseClauses();
      setState(512);
      match(ScalaParser::T__13);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrefixDefContext ------------------------------------------------------------------

ScalaParser::PrefixDefContext::PrefixDefContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t ScalaParser::PrefixDefContext::getRuleIndex() const {
  return ScalaParser::RulePrefixDef;
}

void ScalaParser::PrefixDefContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrefixDef(this);
}

void ScalaParser::PrefixDefContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrefixDef(this);
}

ScalaParser::PrefixDefContext* ScalaParser::prefixDef() {
  PrefixDefContext *_localctx = _tracker.createInstance<PrefixDefContext>(_ctx, getState());
  enterRule(_localctx, 42, ScalaParser::RulePrefixDef);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(516);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 481036337154) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PostfixExprContext ------------------------------------------------------------------

ScalaParser::PostfixExprContext::PostfixExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ScalaParser::InfixExprContext* ScalaParser::PostfixExprContext::infixExpr() {
  return getRuleContext<ScalaParser::InfixExprContext>(0);
}

tree::TerminalNode* ScalaParser::PostfixExprContext::Id() {
  return getToken(ScalaParser::Id, 0);
}

std::vector<ScalaParser::PrefixDefContext *> ScalaParser::PostfixExprContext::prefixDef() {
  return getRuleContexts<ScalaParser::PrefixDefContext>();
}

ScalaParser::PrefixDefContext* ScalaParser::PostfixExprContext::prefixDef(size_t i) {
  return getRuleContext<ScalaParser::PrefixDefContext>(i);
}

std::vector<ScalaParser::SimpleExpr1Context *> ScalaParser::PostfixExprContext::simpleExpr1() {
  return getRuleContexts<ScalaParser::SimpleExpr1Context>();
}

ScalaParser::SimpleExpr1Context* ScalaParser::PostfixExprContext::simpleExpr1(size_t i) {
  return getRuleContext<ScalaParser::SimpleExpr1Context>(i);
}

tree::TerminalNode* ScalaParser::PostfixExprContext::NL() {
  return getToken(ScalaParser::NL, 0);
}


size_t ScalaParser::PostfixExprContext::getRuleIndex() const {
  return ScalaParser::RulePostfixExpr;
}

void ScalaParser::PostfixExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPostfixExpr(this);
}

void ScalaParser::PostfixExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPostfixExpr(this);
}

ScalaParser::PostfixExprContext* ScalaParser::postfixExpr() {
  PostfixExprContext *_localctx = _tracker.createInstance<PostfixExprContext>(_ctx, getState());
  enterRule(_localctx, 44, ScalaParser::RulePostfixExpr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(518);
    infixExpr(0);
    setState(520);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 48, _ctx)) {
    case 1: {
      setState(519);
      match(ScalaParser::Id);
      break;
    }

    default:
      break;
    }
    setState(527);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 49, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(522);
        prefixDef();
        setState(523);
        simpleExpr1(0); 
      }
      setState(529);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 49, _ctx);
    }
    setState(531);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ScalaParser::NL) {
      setState(530);
      match(ScalaParser::NL);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InfixExprContext ------------------------------------------------------------------

ScalaParser::InfixExprContext::InfixExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ScalaParser::PrefixExprContext* ScalaParser::InfixExprContext::prefixExpr() {
  return getRuleContext<ScalaParser::PrefixExprContext>(0);
}

std::vector<ScalaParser::InfixExprContext *> ScalaParser::InfixExprContext::infixExpr() {
  return getRuleContexts<ScalaParser::InfixExprContext>();
}

ScalaParser::InfixExprContext* ScalaParser::InfixExprContext::infixExpr(size_t i) {
  return getRuleContext<ScalaParser::InfixExprContext>(i);
}

tree::TerminalNode* ScalaParser::InfixExprContext::Id() {
  return getToken(ScalaParser::Id, 0);
}

tree::TerminalNode* ScalaParser::InfixExprContext::NL() {
  return getToken(ScalaParser::NL, 0);
}


size_t ScalaParser::InfixExprContext::getRuleIndex() const {
  return ScalaParser::RuleInfixExpr;
}

void ScalaParser::InfixExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInfixExpr(this);
}

void ScalaParser::InfixExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInfixExpr(this);
}


ScalaParser::InfixExprContext* ScalaParser::infixExpr() {
   return infixExpr(0);
}

ScalaParser::InfixExprContext* ScalaParser::infixExpr(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  ScalaParser::InfixExprContext *_localctx = _tracker.createInstance<InfixExprContext>(_ctx, parentState);
  ScalaParser::InfixExprContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 46;
  enterRecursionRule(_localctx, 46, ScalaParser::RuleInfixExpr, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(534);
    prefixExpr();
    _ctx->stop = _input->LT(-1);
    setState(544);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 52, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<InfixExprContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleInfixExpr);
        setState(536);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(537);
        match(ScalaParser::Id);
        setState(539);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == ScalaParser::NL) {
          setState(538);
          match(ScalaParser::NL);
        }
        setState(541);
        infixExpr(2); 
      }
      setState(546);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 52, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- PrefixExprContext ------------------------------------------------------------------

ScalaParser::PrefixExprContext::PrefixExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ScalaParser::SimpleExprContext* ScalaParser::PrefixExprContext::simpleExpr() {
  return getRuleContext<ScalaParser::SimpleExprContext>(0);
}

ScalaParser::SimpleExpr1Context* ScalaParser::PrefixExprContext::simpleExpr1() {
  return getRuleContext<ScalaParser::SimpleExpr1Context>(0);
}

ScalaParser::PrefixDefContext* ScalaParser::PrefixExprContext::prefixDef() {
  return getRuleContext<ScalaParser::PrefixDefContext>(0);
}


size_t ScalaParser::PrefixExprContext::getRuleIndex() const {
  return ScalaParser::RulePrefixExpr;
}

void ScalaParser::PrefixExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrefixExpr(this);
}

void ScalaParser::PrefixExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrefixExpr(this);
}

ScalaParser::PrefixExprContext* ScalaParser::prefixExpr() {
  PrefixExprContext *_localctx = _tracker.createInstance<PrefixExprContext>(_ctx, getState());
  enterRule(_localctx, 48, ScalaParser::RulePrefixExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(548);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 53, _ctx)) {
    case 1: {
      setState(547);
      prefixDef();
      break;
    }

    default:
      break;
    }
    setState(555);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 55, _ctx)) {
    case 1: {
      setState(550);
      simpleExpr();
      break;
    }

    case 2: {
      setState(551);
      simpleExpr1(0);
      setState(553);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 54, _ctx)) {
      case 1: {
        setState(552);
        match(ScalaParser::T__19);
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimpleExprContext ------------------------------------------------------------------

ScalaParser::SimpleExprContext::SimpleExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ScalaParser::ClassTemplateContext* ScalaParser::SimpleExprContext::classTemplate() {
  return getRuleContext<ScalaParser::ClassTemplateContext>(0);
}

ScalaParser::TemplateBodyContext* ScalaParser::SimpleExprContext::templateBody() {
  return getRuleContext<ScalaParser::TemplateBodyContext>(0);
}

ScalaParser::BlockExprContext* ScalaParser::SimpleExprContext::blockExpr() {
  return getRuleContext<ScalaParser::BlockExprContext>(0);
}


size_t ScalaParser::SimpleExprContext::getRuleIndex() const {
  return ScalaParser::RuleSimpleExpr;
}

void ScalaParser::SimpleExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimpleExpr(this);
}

void ScalaParser::SimpleExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimpleExpr(this);
}

ScalaParser::SimpleExprContext* ScalaParser::simpleExpr() {
  SimpleExprContext *_localctx = _tracker.createInstance<SimpleExprContext>(_ctx, getState());
  enterRule(_localctx, 50, ScalaParser::RuleSimpleExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(563);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ScalaParser::T__38: {
        enterOuterAlt(_localctx, 1);
        setState(557);
        match(ScalaParser::T__38);
        setState(560);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 56, _ctx)) {
        case 1: {
          setState(558);
          classTemplate();
          break;
        }

        case 2: {
          setState(559);
          templateBody();
          break;
        }

        default:
          break;
        }
        break;
      }

      case ScalaParser::T__12: {
        enterOuterAlt(_localctx, 2);
        setState(562);
        blockExpr();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimpleExpr1Context ------------------------------------------------------------------

ScalaParser::SimpleExpr1Context::SimpleExpr1Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ScalaParser::LiteralContext* ScalaParser::SimpleExpr1Context::literal() {
  return getRuleContext<ScalaParser::LiteralContext>(0);
}

ScalaParser::StableIdContext* ScalaParser::SimpleExpr1Context::stableId() {
  return getRuleContext<ScalaParser::StableIdContext>(0);
}

ScalaParser::ExprsContext* ScalaParser::SimpleExpr1Context::exprs() {
  return getRuleContext<ScalaParser::ExprsContext>(0);
}

ScalaParser::SimpleExprContext* ScalaParser::SimpleExpr1Context::simpleExpr() {
  return getRuleContext<ScalaParser::SimpleExprContext>(0);
}

tree::TerminalNode* ScalaParser::SimpleExpr1Context::Id() {
  return getToken(ScalaParser::Id, 0);
}

ScalaParser::TypeArgsContext* ScalaParser::SimpleExpr1Context::typeArgs() {
  return getRuleContext<ScalaParser::TypeArgsContext>(0);
}

ScalaParser::SimpleExpr1Context* ScalaParser::SimpleExpr1Context::simpleExpr1() {
  return getRuleContext<ScalaParser::SimpleExpr1Context>(0);
}

ScalaParser::ArgumentExprsContext* ScalaParser::SimpleExpr1Context::argumentExprs() {
  return getRuleContext<ScalaParser::ArgumentExprsContext>(0);
}


size_t ScalaParser::SimpleExpr1Context::getRuleIndex() const {
  return ScalaParser::RuleSimpleExpr1;
}

void ScalaParser::SimpleExpr1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimpleExpr1(this);
}

void ScalaParser::SimpleExpr1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimpleExpr1(this);
}


ScalaParser::SimpleExpr1Context* ScalaParser::simpleExpr1() {
   return simpleExpr1(0);
}

ScalaParser::SimpleExpr1Context* ScalaParser::simpleExpr1(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  ScalaParser::SimpleExpr1Context *_localctx = _tracker.createInstance<SimpleExpr1Context>(_ctx, parentState);
  ScalaParser::SimpleExpr1Context *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 52;
  enterRecursionRule(_localctx, 52, ScalaParser::RuleSimpleExpr1, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(581);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 59, _ctx)) {
    case 1: {
      setState(566);
      literal();
      break;
    }

    case 2: {
      setState(567);
      stableId(0);
      break;
    }

    case 3: {
      setState(568);
      match(ScalaParser::T__19);
      break;
    }

    case 4: {
      setState(569);
      match(ScalaParser::T__9);
      setState(571);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -4611684973025418138) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 31) != 0)) {
        setState(570);
        exprs();
      }
      setState(573);
      match(ScalaParser::T__10);
      break;
    }

    case 5: {
      setState(574);
      simpleExpr();
      setState(575);
      match(ScalaParser::T__2);
      setState(576);
      match(ScalaParser::Id);
      break;
    }

    case 6: {
      setState(578);
      simpleExpr();
      setState(579);
      typeArgs();
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(598);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 63, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(596);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 62, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<SimpleExpr1Context>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleSimpleExpr1);
          setState(583);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(585);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == ScalaParser::T__19) {
            setState(584);
            match(ScalaParser::T__19);
          }
          setState(587);
          match(ScalaParser::T__2);
          setState(588);
          match(ScalaParser::Id);
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<SimpleExpr1Context>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleSimpleExpr1);
          setState(589);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(591);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == ScalaParser::T__19) {
            setState(590);
            match(ScalaParser::T__19);
          }
          setState(593);
          typeArgs();
          break;
        }

        case 3: {
          _localctx = _tracker.createInstance<SimpleExpr1Context>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleSimpleExpr1);
          setState(594);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(595);
          argumentExprs();
          break;
        }

        default:
          break;
        } 
      }
      setState(600);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 63, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- ExprsContext ------------------------------------------------------------------

ScalaParser::ExprsContext::ExprsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ScalaParser::ExprContext *> ScalaParser::ExprsContext::expr() {
  return getRuleContexts<ScalaParser::ExprContext>();
}

ScalaParser::ExprContext* ScalaParser::ExprsContext::expr(size_t i) {
  return getRuleContext<ScalaParser::ExprContext>(i);
}


size_t ScalaParser::ExprsContext::getRuleIndex() const {
  return ScalaParser::RuleExprs;
}

void ScalaParser::ExprsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExprs(this);
}

void ScalaParser::ExprsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExprs(this);
}

ScalaParser::ExprsContext* ScalaParser::exprs() {
  ExprsContext *_localctx = _tracker.createInstance<ExprsContext>(_ctx, getState());
  enterRule(_localctx, 54, ScalaParser::RuleExprs);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(601);
    expr();
    setState(606);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 64, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(602);
        match(ScalaParser::T__3);
        setState(603);
        expr(); 
      }
      setState(608);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 64, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArgumentExprsContext ------------------------------------------------------------------

ScalaParser::ArgumentExprsContext::ArgumentExprsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ScalaParser::ArgsContext* ScalaParser::ArgumentExprsContext::args() {
  return getRuleContext<ScalaParser::ArgsContext>(0);
}

ScalaParser::BlockExprContext* ScalaParser::ArgumentExprsContext::blockExpr() {
  return getRuleContext<ScalaParser::BlockExprContext>(0);
}

tree::TerminalNode* ScalaParser::ArgumentExprsContext::NL() {
  return getToken(ScalaParser::NL, 0);
}


size_t ScalaParser::ArgumentExprsContext::getRuleIndex() const {
  return ScalaParser::RuleArgumentExprs;
}

void ScalaParser::ArgumentExprsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArgumentExprs(this);
}

void ScalaParser::ArgumentExprsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArgumentExprs(this);
}

ScalaParser::ArgumentExprsContext* ScalaParser::argumentExprs() {
  ArgumentExprsContext *_localctx = _tracker.createInstance<ArgumentExprsContext>(_ctx, getState());
  enterRule(_localctx, 56, ScalaParser::RuleArgumentExprs);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(621);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 66, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(609);
      match(ScalaParser::T__9);
      setState(610);
      args();
      setState(611);
      match(ScalaParser::T__10);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(613);
      match(ScalaParser::T__12);
      setState(614);
      args();
      setState(615);
      match(ScalaParser::T__13);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(618);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ScalaParser::NL) {
        setState(617);
        match(ScalaParser::NL);
      }
      setState(620);
      blockExpr();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArgsContext ------------------------------------------------------------------

ScalaParser::ArgsContext::ArgsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ScalaParser::ExprsContext* ScalaParser::ArgsContext::exprs() {
  return getRuleContext<ScalaParser::ExprsContext>(0);
}

ScalaParser::PostfixExprContext* ScalaParser::ArgsContext::postfixExpr() {
  return getRuleContext<ScalaParser::PostfixExprContext>(0);
}


size_t ScalaParser::ArgsContext::getRuleIndex() const {
  return ScalaParser::RuleArgs;
}

void ScalaParser::ArgsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArgs(this);
}

void ScalaParser::ArgsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArgs(this);
}

ScalaParser::ArgsContext* ScalaParser::args() {
  ArgsContext *_localctx = _tracker.createInstance<ArgsContext>(_ctx, getState());
  enterRule(_localctx, 58, ScalaParser::RuleArgs);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(635);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 70, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(624);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -4611684973025418138) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 31) != 0)) {
        setState(623);
        exprs();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(629);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 68, _ctx)) {
      case 1: {
        setState(626);
        exprs();
        setState(627);
        match(ScalaParser::T__3);
        break;
      }

      default:
        break;
      }
      setState(631);
      postfixExpr();
      setState(633);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 3670016) != 0)) {
        setState(632);
        _la = _input->LA(1);
        if (!((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 3670016) != 0))) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlockExprContext ------------------------------------------------------------------

ScalaParser::BlockExprContext::BlockExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ScalaParser::CaseClausesContext* ScalaParser::BlockExprContext::caseClauses() {
  return getRuleContext<ScalaParser::CaseClausesContext>(0);
}

ScalaParser::BlockContext* ScalaParser::BlockExprContext::block() {
  return getRuleContext<ScalaParser::BlockContext>(0);
}


size_t ScalaParser::BlockExprContext::getRuleIndex() const {
  return ScalaParser::RuleBlockExpr;
}

void ScalaParser::BlockExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBlockExpr(this);
}

void ScalaParser::BlockExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBlockExpr(this);
}

ScalaParser::BlockExprContext* ScalaParser::blockExpr() {
  BlockExprContext *_localctx = _tracker.createInstance<BlockExprContext>(_ctx, getState());
  enterRule(_localctx, 60, ScalaParser::RuleBlockExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(645);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 71, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(637);
      match(ScalaParser::T__12);
      setState(638);
      caseClauses();
      setState(639);
      match(ScalaParser::T__13);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(641);
      match(ScalaParser::T__12);
      setState(642);
      block();
      setState(643);
      match(ScalaParser::T__13);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlockContext ------------------------------------------------------------------

ScalaParser::BlockContext::BlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ScalaParser::BlockStatContext *> ScalaParser::BlockContext::blockStat() {
  return getRuleContexts<ScalaParser::BlockStatContext>();
}

ScalaParser::BlockStatContext* ScalaParser::BlockContext::blockStat(size_t i) {
  return getRuleContext<ScalaParser::BlockStatContext>(i);
}

ScalaParser::ResultExprContext* ScalaParser::BlockContext::resultExpr() {
  return getRuleContext<ScalaParser::ResultExprContext>(0);
}


size_t ScalaParser::BlockContext::getRuleIndex() const {
  return ScalaParser::RuleBlock;
}

void ScalaParser::BlockContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBlock(this);
}

void ScalaParser::BlockContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBlock(this);
}

ScalaParser::BlockContext* ScalaParser::block() {
  BlockContext *_localctx = _tracker.createInstance<BlockContext>(_ctx, getState());
  enterRule(_localctx, 62, ScalaParser::RuleBlock);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(648); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(647);
              blockStat();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(650); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 72, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(653);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -4611684973025418138) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 31) != 0)) {
      setState(652);
      resultExpr();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlockStatContext ------------------------------------------------------------------

ScalaParser::BlockStatContext::BlockStatContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ScalaParser::Import_Context* ScalaParser::BlockStatContext::import_() {
  return getRuleContext<ScalaParser::Import_Context>(0);
}

ScalaParser::Def_Context* ScalaParser::BlockStatContext::def_() {
  return getRuleContext<ScalaParser::Def_Context>(0);
}

std::vector<ScalaParser::AnnotationContext *> ScalaParser::BlockStatContext::annotation() {
  return getRuleContexts<ScalaParser::AnnotationContext>();
}

ScalaParser::AnnotationContext* ScalaParser::BlockStatContext::annotation(size_t i) {
  return getRuleContext<ScalaParser::AnnotationContext>(i);
}

ScalaParser::TmplDefContext* ScalaParser::BlockStatContext::tmplDef() {
  return getRuleContext<ScalaParser::TmplDefContext>(0);
}

std::vector<ScalaParser::LocalModifierContext *> ScalaParser::BlockStatContext::localModifier() {
  return getRuleContexts<ScalaParser::LocalModifierContext>();
}

ScalaParser::LocalModifierContext* ScalaParser::BlockStatContext::localModifier(size_t i) {
  return getRuleContext<ScalaParser::LocalModifierContext>(i);
}

ScalaParser::Expr1Context* ScalaParser::BlockStatContext::expr1() {
  return getRuleContext<ScalaParser::Expr1Context>(0);
}


size_t ScalaParser::BlockStatContext::getRuleIndex() const {
  return ScalaParser::RuleBlockStat;
}

void ScalaParser::BlockStatContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBlockStat(this);
}

void ScalaParser::BlockStatContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBlockStat(this);
}

ScalaParser::BlockStatContext* ScalaParser::blockStat() {
  BlockStatContext *_localctx = _tracker.createInstance<BlockStatContext>(_ctx, getState());
  enterRule(_localctx, 64, ScalaParser::RuleBlockStat);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(680);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 78, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(655);
      import_();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(659);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == ScalaParser::T__43) {
        setState(656);
        annotation();
        setState(661);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(663);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ScalaParser::T__21

      || _la == ScalaParser::T__39) {
        setState(662);
        _la = _input->LA(1);
        if (!(_la == ScalaParser::T__21

        || _la == ScalaParser::T__39)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
      }
      setState(665);
      def_();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(669);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == ScalaParser::T__43) {
        setState(666);
        annotation();
        setState(671);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(675);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 7882398863720448) != 0)) {
        setState(672);
        localModifier();
        setState(677);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(678);
      tmplDef();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(679);
      expr1();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ResultExprContext ------------------------------------------------------------------

ScalaParser::ResultExprContext::ResultExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ScalaParser::Expr1Context* ScalaParser::ResultExprContext::expr1() {
  return getRuleContext<ScalaParser::Expr1Context>(0);
}

ScalaParser::BlockContext* ScalaParser::ResultExprContext::block() {
  return getRuleContext<ScalaParser::BlockContext>(0);
}

ScalaParser::BindingsContext* ScalaParser::ResultExprContext::bindings() {
  return getRuleContext<ScalaParser::BindingsContext>(0);
}

ScalaParser::CompoundTypeContext* ScalaParser::ResultExprContext::compoundType() {
  return getRuleContext<ScalaParser::CompoundTypeContext>(0);
}

tree::TerminalNode* ScalaParser::ResultExprContext::Id() {
  return getToken(ScalaParser::Id, 0);
}


size_t ScalaParser::ResultExprContext::getRuleIndex() const {
  return ScalaParser::RuleResultExpr;
}

void ScalaParser::ResultExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterResultExpr(this);
}

void ScalaParser::ResultExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitResultExpr(this);
}

ScalaParser::ResultExprContext* ScalaParser::resultExpr() {
  ResultExprContext *_localctx = _tracker.createInstance<ResultExprContext>(_ctx, getState());
  enterRule(_localctx, 66, ScalaParser::RuleResultExpr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(698);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 82, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(682);
      expr1();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(693);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case ScalaParser::T__9: {
          setState(683);
          bindings();
          break;
        }

        case ScalaParser::T__19:
        case ScalaParser::T__21:
        case ScalaParser::Id: {
          setState(689);
          _errHandler->sync(this);
          switch (_input->LA(1)) {
            case ScalaParser::T__21:
            case ScalaParser::Id: {
              setState(685);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == ScalaParser::T__21) {
                setState(684);
                match(ScalaParser::T__21);
              }
              setState(687);
              match(ScalaParser::Id);
              break;
            }

            case ScalaParser::T__19: {
              setState(688);
              match(ScalaParser::T__19);
              break;
            }

          default:
            throw NoViableAltException(this);
          }
          setState(691);
          match(ScalaParser::T__18);
          setState(692);
          compoundType();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(695);
      match(ScalaParser::T__8);
      setState(696);
      block();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumeratorsContext ------------------------------------------------------------------

ScalaParser::EnumeratorsContext::EnumeratorsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ScalaParser::GeneratorContext *> ScalaParser::EnumeratorsContext::generator() {
  return getRuleContexts<ScalaParser::GeneratorContext>();
}

ScalaParser::GeneratorContext* ScalaParser::EnumeratorsContext::generator(size_t i) {
  return getRuleContext<ScalaParser::GeneratorContext>(i);
}


size_t ScalaParser::EnumeratorsContext::getRuleIndex() const {
  return ScalaParser::RuleEnumerators;
}

void ScalaParser::EnumeratorsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumerators(this);
}

void ScalaParser::EnumeratorsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumerators(this);
}

ScalaParser::EnumeratorsContext* ScalaParser::enumerators() {
  EnumeratorsContext *_localctx = _tracker.createInstance<EnumeratorsContext>(_ctx, getState());
  enterRule(_localctx, 68, ScalaParser::RuleEnumerators);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(701); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(700);
      generator();
      setState(703); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -4611686018426338202) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 127) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GeneratorContext ------------------------------------------------------------------

ScalaParser::GeneratorContext::GeneratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ScalaParser::Pattern1Context *> ScalaParser::GeneratorContext::pattern1() {
  return getRuleContexts<ScalaParser::Pattern1Context>();
}

ScalaParser::Pattern1Context* ScalaParser::GeneratorContext::pattern1(size_t i) {
  return getRuleContext<ScalaParser::Pattern1Context>(i);
}

std::vector<ScalaParser::ExprContext *> ScalaParser::GeneratorContext::expr() {
  return getRuleContexts<ScalaParser::ExprContext>();
}

ScalaParser::ExprContext* ScalaParser::GeneratorContext::expr(size_t i) {
  return getRuleContext<ScalaParser::ExprContext>(i);
}

std::vector<ScalaParser::Guard_Context *> ScalaParser::GeneratorContext::guard_() {
  return getRuleContexts<ScalaParser::Guard_Context>();
}

ScalaParser::Guard_Context* ScalaParser::GeneratorContext::guard_(size_t i) {
  return getRuleContext<ScalaParser::Guard_Context>(i);
}


size_t ScalaParser::GeneratorContext::getRuleIndex() const {
  return ScalaParser::RuleGenerator;
}

void ScalaParser::GeneratorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGenerator(this);
}

void ScalaParser::GeneratorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGenerator(this);
}

ScalaParser::GeneratorContext* ScalaParser::generator() {
  GeneratorContext *_localctx = _tracker.createInstance<GeneratorContext>(_ctx, getState());
  enterRule(_localctx, 70, ScalaParser::RuleGenerator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(705);
    pattern1();
    setState(706);
    match(ScalaParser::T__40);
    setState(707);
    expr();
    setState(715);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 85, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(713);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case ScalaParser::T__22: {
            setState(708);
            guard_();
            break;
          }

          case ScalaParser::T__0:
          case ScalaParser::T__1:
          case ScalaParser::T__4:
          case ScalaParser::T__5:
          case ScalaParser::T__9:
          case ScalaParser::T__19:
          case ScalaParser::Id:
          case ScalaParser::BooleanLiteral:
          case ScalaParser::CharacterLiteral:
          case ScalaParser::SymbolLiteral:
          case ScalaParser::IntegerLiteral:
          case ScalaParser::StringLiteral:
          case ScalaParser::FloatingPointLiteral:
          case ScalaParser::Varid:
          case ScalaParser::BoundVarid: {
            setState(709);
            pattern1();
            setState(710);
            match(ScalaParser::T__33);
            setState(711);
            expr();
            break;
          }

        default:
          throw NoViableAltException(this);
        } 
      }
      setState(717);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 85, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CaseClausesContext ------------------------------------------------------------------

ScalaParser::CaseClausesContext::CaseClausesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ScalaParser::CaseClauseContext *> ScalaParser::CaseClausesContext::caseClause() {
  return getRuleContexts<ScalaParser::CaseClauseContext>();
}

ScalaParser::CaseClauseContext* ScalaParser::CaseClausesContext::caseClause(size_t i) {
  return getRuleContext<ScalaParser::CaseClauseContext>(i);
}


size_t ScalaParser::CaseClausesContext::getRuleIndex() const {
  return ScalaParser::RuleCaseClauses;
}

void ScalaParser::CaseClausesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCaseClauses(this);
}

void ScalaParser::CaseClausesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCaseClauses(this);
}

ScalaParser::CaseClausesContext* ScalaParser::caseClauses() {
  CaseClausesContext *_localctx = _tracker.createInstance<CaseClausesContext>(_ctx, getState());
  enterRule(_localctx, 72, ScalaParser::RuleCaseClauses);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(719); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(718);
      caseClause();
      setState(721); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == ScalaParser::T__41);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CaseClauseContext ------------------------------------------------------------------

ScalaParser::CaseClauseContext::CaseClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ScalaParser::PatternContext* ScalaParser::CaseClauseContext::pattern() {
  return getRuleContext<ScalaParser::PatternContext>(0);
}

ScalaParser::BlockContext* ScalaParser::CaseClauseContext::block() {
  return getRuleContext<ScalaParser::BlockContext>(0);
}

ScalaParser::Guard_Context* ScalaParser::CaseClauseContext::guard_() {
  return getRuleContext<ScalaParser::Guard_Context>(0);
}


size_t ScalaParser::CaseClauseContext::getRuleIndex() const {
  return ScalaParser::RuleCaseClause;
}

void ScalaParser::CaseClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCaseClause(this);
}

void ScalaParser::CaseClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCaseClause(this);
}

ScalaParser::CaseClauseContext* ScalaParser::caseClause() {
  CaseClauseContext *_localctx = _tracker.createInstance<CaseClauseContext>(_ctx, getState());
  enterRule(_localctx, 74, ScalaParser::RuleCaseClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(723);
    match(ScalaParser::T__41);
    setState(724);
    pattern();
    setState(726);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ScalaParser::T__22) {
      setState(725);
      guard_();
    }
    setState(728);
    match(ScalaParser::T__8);
    setState(729);
    block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Guard_Context ------------------------------------------------------------------

ScalaParser::Guard_Context::Guard_Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ScalaParser::PostfixExprContext* ScalaParser::Guard_Context::postfixExpr() {
  return getRuleContext<ScalaParser::PostfixExprContext>(0);
}


size_t ScalaParser::Guard_Context::getRuleIndex() const {
  return ScalaParser::RuleGuard_;
}

void ScalaParser::Guard_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGuard_(this);
}

void ScalaParser::Guard_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGuard_(this);
}

ScalaParser::Guard_Context* ScalaParser::guard_() {
  Guard_Context *_localctx = _tracker.createInstance<Guard_Context>(_ctx, getState());
  enterRule(_localctx, 76, ScalaParser::RuleGuard_);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(731);
    match(ScalaParser::T__22);
    setState(732);
    postfixExpr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PatternContext ------------------------------------------------------------------

ScalaParser::PatternContext::PatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ScalaParser::Pattern1Context *> ScalaParser::PatternContext::pattern1() {
  return getRuleContexts<ScalaParser::Pattern1Context>();
}

ScalaParser::Pattern1Context* ScalaParser::PatternContext::pattern1(size_t i) {
  return getRuleContext<ScalaParser::Pattern1Context>(i);
}


size_t ScalaParser::PatternContext::getRuleIndex() const {
  return ScalaParser::RulePattern;
}

void ScalaParser::PatternContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPattern(this);
}

void ScalaParser::PatternContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPattern(this);
}

ScalaParser::PatternContext* ScalaParser::pattern() {
  PatternContext *_localctx = _tracker.createInstance<PatternContext>(_ctx, getState());
  enterRule(_localctx, 78, ScalaParser::RulePattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(734);
    pattern1();
    setState(739);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ScalaParser::T__42) {
      setState(735);
      match(ScalaParser::T__42);
      setState(736);
      pattern1();
      setState(741);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Pattern1Context ------------------------------------------------------------------

ScalaParser::Pattern1Context::Pattern1Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ScalaParser::TypePatContext* ScalaParser::Pattern1Context::typePat() {
  return getRuleContext<ScalaParser::TypePatContext>(0);
}

tree::TerminalNode* ScalaParser::Pattern1Context::BoundVarid() {
  return getToken(ScalaParser::BoundVarid, 0);
}

tree::TerminalNode* ScalaParser::Pattern1Context::Id() {
  return getToken(ScalaParser::Id, 0);
}

ScalaParser::Pattern2Context* ScalaParser::Pattern1Context::pattern2() {
  return getRuleContext<ScalaParser::Pattern2Context>(0);
}


size_t ScalaParser::Pattern1Context::getRuleIndex() const {
  return ScalaParser::RulePattern1;
}

void ScalaParser::Pattern1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPattern1(this);
}

void ScalaParser::Pattern1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPattern1(this);
}

ScalaParser::Pattern1Context* ScalaParser::pattern1() {
  Pattern1Context *_localctx = _tracker.createInstance<Pattern1Context>(_ctx, getState());
  enterRule(_localctx, 80, ScalaParser::RulePattern1);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(746);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 89, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(742);
      _la = _input->LA(1);
      if (!(((((_la - 20) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 20)) & 1130297953353729) != 0))) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(743);
      match(ScalaParser::T__18);
      setState(744);
      typePat();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(745);
      pattern2();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Pattern2Context ------------------------------------------------------------------

ScalaParser::Pattern2Context::Pattern2Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ScalaParser::Pattern2Context::Id() {
  return getToken(ScalaParser::Id, 0);
}

ScalaParser::Pattern3Context* ScalaParser::Pattern2Context::pattern3() {
  return getRuleContext<ScalaParser::Pattern3Context>(0);
}


size_t ScalaParser::Pattern2Context::getRuleIndex() const {
  return ScalaParser::RulePattern2;
}

void ScalaParser::Pattern2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPattern2(this);
}

void ScalaParser::Pattern2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPattern2(this);
}

ScalaParser::Pattern2Context* ScalaParser::pattern2() {
  Pattern2Context *_localctx = _tracker.createInstance<Pattern2Context>(_ctx, getState());
  enterRule(_localctx, 82, ScalaParser::RulePattern2);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(754);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 91, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(748);
      match(ScalaParser::Id);
      setState(751);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ScalaParser::T__43) {
        setState(749);
        match(ScalaParser::T__43);
        setState(750);
        pattern3();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(753);
      pattern3();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Pattern3Context ------------------------------------------------------------------

ScalaParser::Pattern3Context::Pattern3Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ScalaParser::SimplePatternContext *> ScalaParser::Pattern3Context::simplePattern() {
  return getRuleContexts<ScalaParser::SimplePatternContext>();
}

ScalaParser::SimplePatternContext* ScalaParser::Pattern3Context::simplePattern(size_t i) {
  return getRuleContext<ScalaParser::SimplePatternContext>(i);
}

std::vector<tree::TerminalNode *> ScalaParser::Pattern3Context::Id() {
  return getTokens(ScalaParser::Id);
}

tree::TerminalNode* ScalaParser::Pattern3Context::Id(size_t i) {
  return getToken(ScalaParser::Id, i);
}

std::vector<tree::TerminalNode *> ScalaParser::Pattern3Context::NL() {
  return getTokens(ScalaParser::NL);
}

tree::TerminalNode* ScalaParser::Pattern3Context::NL(size_t i) {
  return getToken(ScalaParser::NL, i);
}


size_t ScalaParser::Pattern3Context::getRuleIndex() const {
  return ScalaParser::RulePattern3;
}

void ScalaParser::Pattern3Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPattern3(this);
}

void ScalaParser::Pattern3Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPattern3(this);
}

ScalaParser::Pattern3Context* ScalaParser::pattern3() {
  Pattern3Context *_localctx = _tracker.createInstance<Pattern3Context>(_ctx, getState());
  enterRule(_localctx, 84, ScalaParser::RulePattern3);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(768);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 94, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(756);
      simplePattern();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(757);
      simplePattern();
      setState(765);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == ScalaParser::Id) {
        setState(758);
        match(ScalaParser::Id);
        setState(760);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == ScalaParser::NL) {
          setState(759);
          match(ScalaParser::NL);
        }
        setState(762);
        simplePattern();
        setState(767);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimplePatternContext ------------------------------------------------------------------

ScalaParser::SimplePatternContext::SimplePatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ScalaParser::SimplePatternContext::Varid() {
  return getToken(ScalaParser::Varid, 0);
}

ScalaParser::LiteralContext* ScalaParser::SimplePatternContext::literal() {
  return getRuleContext<ScalaParser::LiteralContext>(0);
}

ScalaParser::StableIdContext* ScalaParser::SimplePatternContext::stableId() {
  return getRuleContext<ScalaParser::StableIdContext>(0);
}

ScalaParser::PatternsContext* ScalaParser::SimplePatternContext::patterns() {
  return getRuleContext<ScalaParser::PatternsContext>(0);
}

tree::TerminalNode* ScalaParser::SimplePatternContext::Id() {
  return getToken(ScalaParser::Id, 0);
}


size_t ScalaParser::SimplePatternContext::getRuleIndex() const {
  return ScalaParser::RuleSimplePattern;
}

void ScalaParser::SimplePatternContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimplePattern(this);
}

void ScalaParser::SimplePatternContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimplePattern(this);
}

ScalaParser::SimplePatternContext* ScalaParser::simplePattern() {
  SimplePatternContext *_localctx = _tracker.createInstance<SimplePatternContext>(_ctx, getState());
  enterRule(_localctx, 86, ScalaParser::RuleSimplePattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(801);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 100, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(770);
      match(ScalaParser::T__19);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(771);
      match(ScalaParser::Varid);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(772);
      literal();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(773);
      stableId(0);
      setState(779);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ScalaParser::T__9) {
        setState(774);
        match(ScalaParser::T__9);
        setState(776);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & -4611686018426338202) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & 127) != 0)) {
          setState(775);
          patterns();
        }
        setState(778);
        match(ScalaParser::T__10);
      }
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(781);
      stableId(0);
      setState(782);
      match(ScalaParser::T__9);
      setState(786);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 97, _ctx)) {
      case 1: {
        setState(783);
        patterns();
        setState(784);
        match(ScalaParser::T__3);
        break;
      }

      default:
        break;
      }
      setState(790);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ScalaParser::Id) {
        setState(788);
        match(ScalaParser::Id);
        setState(789);
        match(ScalaParser::T__43);
      }
      setState(792);
      match(ScalaParser::T__19);
      setState(793);
      match(ScalaParser::T__20);
      setState(794);
      match(ScalaParser::T__10);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(796);
      match(ScalaParser::T__9);
      setState(798);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -4611686018426338202) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 127) != 0)) {
        setState(797);
        patterns();
      }
      setState(800);
      match(ScalaParser::T__10);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PatternsContext ------------------------------------------------------------------

ScalaParser::PatternsContext::PatternsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ScalaParser::PatternContext* ScalaParser::PatternsContext::pattern() {
  return getRuleContext<ScalaParser::PatternContext>(0);
}

ScalaParser::PatternsContext* ScalaParser::PatternsContext::patterns() {
  return getRuleContext<ScalaParser::PatternsContext>(0);
}


size_t ScalaParser::PatternsContext::getRuleIndex() const {
  return ScalaParser::RulePatterns;
}

void ScalaParser::PatternsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPatterns(this);
}

void ScalaParser::PatternsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPatterns(this);
}

ScalaParser::PatternsContext* ScalaParser::patterns() {
  PatternsContext *_localctx = _tracker.createInstance<PatternsContext>(_ctx, getState());
  enterRule(_localctx, 88, ScalaParser::RulePatterns);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(810);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 102, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(803);
      pattern();
      setState(806);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 101, _ctx)) {
      case 1: {
        setState(804);
        match(ScalaParser::T__3);
        setState(805);
        patterns();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(808);
      match(ScalaParser::T__19);
      setState(809);
      match(ScalaParser::T__20);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeParamClauseContext ------------------------------------------------------------------

ScalaParser::TypeParamClauseContext::TypeParamClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ScalaParser::VariantTypeParamContext *> ScalaParser::TypeParamClauseContext::variantTypeParam() {
  return getRuleContexts<ScalaParser::VariantTypeParamContext>();
}

ScalaParser::VariantTypeParamContext* ScalaParser::TypeParamClauseContext::variantTypeParam(size_t i) {
  return getRuleContext<ScalaParser::VariantTypeParamContext>(i);
}


size_t ScalaParser::TypeParamClauseContext::getRuleIndex() const {
  return ScalaParser::RuleTypeParamClause;
}

void ScalaParser::TypeParamClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeParamClause(this);
}

void ScalaParser::TypeParamClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeParamClause(this);
}

ScalaParser::TypeParamClauseContext* ScalaParser::typeParamClause() {
  TypeParamClauseContext *_localctx = _tracker.createInstance<TypeParamClauseContext>(_ctx, getState());
  enterRule(_localctx, 90, ScalaParser::RuleTypeParamClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(812);
    match(ScalaParser::T__6);
    setState(813);
    variantTypeParam();
    setState(818);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ScalaParser::T__3) {
      setState(814);
      match(ScalaParser::T__3);
      setState(815);
      variantTypeParam();
      setState(820);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(821);
    match(ScalaParser::T__7);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunTypeParamClauseContext ------------------------------------------------------------------

ScalaParser::FunTypeParamClauseContext::FunTypeParamClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ScalaParser::TypeParamContext *> ScalaParser::FunTypeParamClauseContext::typeParam() {
  return getRuleContexts<ScalaParser::TypeParamContext>();
}

ScalaParser::TypeParamContext* ScalaParser::FunTypeParamClauseContext::typeParam(size_t i) {
  return getRuleContext<ScalaParser::TypeParamContext>(i);
}


size_t ScalaParser::FunTypeParamClauseContext::getRuleIndex() const {
  return ScalaParser::RuleFunTypeParamClause;
}

void ScalaParser::FunTypeParamClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunTypeParamClause(this);
}

void ScalaParser::FunTypeParamClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunTypeParamClause(this);
}

ScalaParser::FunTypeParamClauseContext* ScalaParser::funTypeParamClause() {
  FunTypeParamClauseContext *_localctx = _tracker.createInstance<FunTypeParamClauseContext>(_ctx, getState());
  enterRule(_localctx, 92, ScalaParser::RuleFunTypeParamClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(823);
    match(ScalaParser::T__6);
    setState(824);
    typeParam();
    setState(829);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ScalaParser::T__3) {
      setState(825);
      match(ScalaParser::T__3);
      setState(826);
      typeParam();
      setState(831);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(832);
    match(ScalaParser::T__7);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariantTypeParamContext ------------------------------------------------------------------

ScalaParser::VariantTypeParamContext::VariantTypeParamContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ScalaParser::TypeParamContext* ScalaParser::VariantTypeParamContext::typeParam() {
  return getRuleContext<ScalaParser::TypeParamContext>(0);
}

std::vector<ScalaParser::AnnotationContext *> ScalaParser::VariantTypeParamContext::annotation() {
  return getRuleContexts<ScalaParser::AnnotationContext>();
}

ScalaParser::AnnotationContext* ScalaParser::VariantTypeParamContext::annotation(size_t i) {
  return getRuleContext<ScalaParser::AnnotationContext>(i);
}


size_t ScalaParser::VariantTypeParamContext::getRuleIndex() const {
  return ScalaParser::RuleVariantTypeParam;
}

void ScalaParser::VariantTypeParamContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariantTypeParam(this);
}

void ScalaParser::VariantTypeParamContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariantTypeParam(this);
}

ScalaParser::VariantTypeParamContext* ScalaParser::variantTypeParam() {
  VariantTypeParamContext *_localctx = _tracker.createInstance<VariantTypeParamContext>(_ctx, getState());
  enterRule(_localctx, 94, ScalaParser::RuleVariantTypeParam);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(837);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ScalaParser::T__43) {
      setState(834);
      annotation();
      setState(839);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(841);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ScalaParser::T__0

    || _la == ScalaParser::T__35) {
      setState(840);
      _la = _input->LA(1);
      if (!(_la == ScalaParser::T__0

      || _la == ScalaParser::T__35)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(843);
    typeParam();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeParamContext ------------------------------------------------------------------

ScalaParser::TypeParamContext::TypeParamContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ScalaParser::TypeParamContext::Id() {
  return getToken(ScalaParser::Id, 0);
}

ScalaParser::TypeParamClauseContext* ScalaParser::TypeParamContext::typeParamClause() {
  return getRuleContext<ScalaParser::TypeParamClauseContext>(0);
}

std::vector<ScalaParser::Type_Context *> ScalaParser::TypeParamContext::type_() {
  return getRuleContexts<ScalaParser::Type_Context>();
}

ScalaParser::Type_Context* ScalaParser::TypeParamContext::type_(size_t i) {
  return getRuleContext<ScalaParser::Type_Context>(i);
}


size_t ScalaParser::TypeParamContext::getRuleIndex() const {
  return ScalaParser::RuleTypeParam;
}

void ScalaParser::TypeParamContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeParam(this);
}

void ScalaParser::TypeParamContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeParam(this);
}

ScalaParser::TypeParamContext* ScalaParser::typeParam() {
  TypeParamContext *_localctx = _tracker.createInstance<TypeParamContext>(_ctx, getState());
  enterRule(_localctx, 96, ScalaParser::RuleTypeParam);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(845);
    _la = _input->LA(1);
    if (!(_la == ScalaParser::T__19

    || _la == ScalaParser::Id)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(847);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ScalaParser::T__6) {
      setState(846);
      typeParamClause();
    }
    setState(851);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ScalaParser::T__44) {
      setState(849);
      match(ScalaParser::T__44);
      setState(850);
      type_();
    }
    setState(855);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ScalaParser::T__45) {
      setState(853);
      match(ScalaParser::T__45);
      setState(854);
      type_();
    }
    setState(861);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ScalaParser::T__46) {
      setState(857);
      match(ScalaParser::T__46);
      setState(858);
      type_();
      setState(863);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(868);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ScalaParser::T__18) {
      setState(864);
      match(ScalaParser::T__18);
      setState(865);
      type_();
      setState(870);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParamClausesContext ------------------------------------------------------------------

ScalaParser::ParamClausesContext::ParamClausesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ScalaParser::ParamClauseContext *> ScalaParser::ParamClausesContext::paramClause() {
  return getRuleContexts<ScalaParser::ParamClauseContext>();
}

ScalaParser::ParamClauseContext* ScalaParser::ParamClausesContext::paramClause(size_t i) {
  return getRuleContext<ScalaParser::ParamClauseContext>(i);
}

ScalaParser::ParamsContext* ScalaParser::ParamClausesContext::params() {
  return getRuleContext<ScalaParser::ParamsContext>(0);
}

tree::TerminalNode* ScalaParser::ParamClausesContext::NL() {
  return getToken(ScalaParser::NL, 0);
}


size_t ScalaParser::ParamClausesContext::getRuleIndex() const {
  return ScalaParser::RuleParamClauses;
}

void ScalaParser::ParamClausesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParamClauses(this);
}

void ScalaParser::ParamClausesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParamClauses(this);
}

ScalaParser::ParamClausesContext* ScalaParser::paramClauses() {
  ParamClausesContext *_localctx = _tracker.createInstance<ParamClausesContext>(_ctx, getState());
  enterRule(_localctx, 98, ScalaParser::RuleParamClauses);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(874);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 112, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(871);
        paramClause(); 
      }
      setState(876);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 112, _ctx);
    }
    setState(885);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 114, _ctx)) {
    case 1: {
      setState(878);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ScalaParser::NL) {
        setState(877);
        match(ScalaParser::NL);
      }
      setState(880);
      match(ScalaParser::T__9);
      setState(881);
      match(ScalaParser::T__21);
      setState(882);
      params();
      setState(883);
      match(ScalaParser::T__10);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParamClauseContext ------------------------------------------------------------------

ScalaParser::ParamClauseContext::ParamClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ScalaParser::ParamClauseContext::NL() {
  return getToken(ScalaParser::NL, 0);
}

ScalaParser::ParamsContext* ScalaParser::ParamClauseContext::params() {
  return getRuleContext<ScalaParser::ParamsContext>(0);
}


size_t ScalaParser::ParamClauseContext::getRuleIndex() const {
  return ScalaParser::RuleParamClause;
}

void ScalaParser::ParamClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParamClause(this);
}

void ScalaParser::ParamClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParamClause(this);
}

ScalaParser::ParamClauseContext* ScalaParser::paramClause() {
  ParamClauseContext *_localctx = _tracker.createInstance<ParamClauseContext>(_ctx, getState());
  enterRule(_localctx, 100, ScalaParser::RuleParamClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(888);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ScalaParser::NL) {
      setState(887);
      match(ScalaParser::NL);
    }
    setState(890);
    match(ScalaParser::T__9);
    setState(892);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ScalaParser::T__43

    || _la == ScalaParser::Id) {
      setState(891);
      params();
    }
    setState(894);
    match(ScalaParser::T__10);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParamsContext ------------------------------------------------------------------

ScalaParser::ParamsContext::ParamsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ScalaParser::ParamContext *> ScalaParser::ParamsContext::param() {
  return getRuleContexts<ScalaParser::ParamContext>();
}

ScalaParser::ParamContext* ScalaParser::ParamsContext::param(size_t i) {
  return getRuleContext<ScalaParser::ParamContext>(i);
}


size_t ScalaParser::ParamsContext::getRuleIndex() const {
  return ScalaParser::RuleParams;
}

void ScalaParser::ParamsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParams(this);
}

void ScalaParser::ParamsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParams(this);
}

ScalaParser::ParamsContext* ScalaParser::params() {
  ParamsContext *_localctx = _tracker.createInstance<ParamsContext>(_ctx, getState());
  enterRule(_localctx, 102, ScalaParser::RuleParams);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(896);
    param();
    setState(901);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ScalaParser::T__3) {
      setState(897);
      match(ScalaParser::T__3);
      setState(898);
      param();
      setState(903);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParamContext ------------------------------------------------------------------

ScalaParser::ParamContext::ParamContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ScalaParser::ParamContext::Id() {
  return getToken(ScalaParser::Id, 0);
}

std::vector<ScalaParser::AnnotationContext *> ScalaParser::ParamContext::annotation() {
  return getRuleContexts<ScalaParser::AnnotationContext>();
}

ScalaParser::AnnotationContext* ScalaParser::ParamContext::annotation(size_t i) {
  return getRuleContext<ScalaParser::AnnotationContext>(i);
}

ScalaParser::ParamTypeContext* ScalaParser::ParamContext::paramType() {
  return getRuleContext<ScalaParser::ParamTypeContext>(0);
}

ScalaParser::ExprContext* ScalaParser::ParamContext::expr() {
  return getRuleContext<ScalaParser::ExprContext>(0);
}


size_t ScalaParser::ParamContext::getRuleIndex() const {
  return ScalaParser::RuleParam;
}

void ScalaParser::ParamContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParam(this);
}

void ScalaParser::ParamContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParam(this);
}

ScalaParser::ParamContext* ScalaParser::param() {
  ParamContext *_localctx = _tracker.createInstance<ParamContext>(_ctx, getState());
  enterRule(_localctx, 104, ScalaParser::RuleParam);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(907);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ScalaParser::T__43) {
      setState(904);
      annotation();
      setState(909);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(910);
    match(ScalaParser::Id);
    setState(913);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ScalaParser::T__18) {
      setState(911);
      match(ScalaParser::T__18);
      setState(912);
      paramType();
    }
    setState(917);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ScalaParser::T__33) {
      setState(915);
      match(ScalaParser::T__33);
      setState(916);
      expr();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParamTypeContext ------------------------------------------------------------------

ScalaParser::ParamTypeContext::ParamTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ScalaParser::Type_Context* ScalaParser::ParamTypeContext::type_() {
  return getRuleContext<ScalaParser::Type_Context>(0);
}


size_t ScalaParser::ParamTypeContext::getRuleIndex() const {
  return ScalaParser::RuleParamType;
}

void ScalaParser::ParamTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParamType(this);
}

void ScalaParser::ParamTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParamType(this);
}

ScalaParser::ParamTypeContext* ScalaParser::paramType() {
  ParamTypeContext *_localctx = _tracker.createInstance<ParamTypeContext>(_ctx, getState());
  enterRule(_localctx, 106, ScalaParser::RuleParamType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(925);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 121, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(919);
      type_();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(920);
      match(ScalaParser::T__8);
      setState(921);
      type_();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(922);
      type_();
      setState(923);
      match(ScalaParser::T__20);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassParamClausesContext ------------------------------------------------------------------

ScalaParser::ClassParamClausesContext::ClassParamClausesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ScalaParser::ClassParamClauseContext *> ScalaParser::ClassParamClausesContext::classParamClause() {
  return getRuleContexts<ScalaParser::ClassParamClauseContext>();
}

ScalaParser::ClassParamClauseContext* ScalaParser::ClassParamClausesContext::classParamClause(size_t i) {
  return getRuleContext<ScalaParser::ClassParamClauseContext>(i);
}

ScalaParser::ClassParamsContext* ScalaParser::ClassParamClausesContext::classParams() {
  return getRuleContext<ScalaParser::ClassParamsContext>(0);
}

tree::TerminalNode* ScalaParser::ClassParamClausesContext::NL() {
  return getToken(ScalaParser::NL, 0);
}


size_t ScalaParser::ClassParamClausesContext::getRuleIndex() const {
  return ScalaParser::RuleClassParamClauses;
}

void ScalaParser::ClassParamClausesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassParamClauses(this);
}

void ScalaParser::ClassParamClausesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassParamClauses(this);
}

ScalaParser::ClassParamClausesContext* ScalaParser::classParamClauses() {
  ClassParamClausesContext *_localctx = _tracker.createInstance<ClassParamClausesContext>(_ctx, getState());
  enterRule(_localctx, 108, ScalaParser::RuleClassParamClauses);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(930);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 122, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(927);
        classParamClause(); 
      }
      setState(932);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 122, _ctx);
    }
    setState(941);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 124, _ctx)) {
    case 1: {
      setState(934);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ScalaParser::NL) {
        setState(933);
        match(ScalaParser::NL);
      }
      setState(936);
      match(ScalaParser::T__9);
      setState(937);
      match(ScalaParser::T__21);
      setState(938);
      classParams();
      setState(939);
      match(ScalaParser::T__10);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassParamClauseContext ------------------------------------------------------------------

ScalaParser::ClassParamClauseContext::ClassParamClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ScalaParser::ClassParamClauseContext::NL() {
  return getToken(ScalaParser::NL, 0);
}

ScalaParser::ClassParamsContext* ScalaParser::ClassParamClauseContext::classParams() {
  return getRuleContext<ScalaParser::ClassParamsContext>(0);
}


size_t ScalaParser::ClassParamClauseContext::getRuleIndex() const {
  return ScalaParser::RuleClassParamClause;
}

void ScalaParser::ClassParamClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassParamClause(this);
}

void ScalaParser::ClassParamClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassParamClause(this);
}

ScalaParser::ClassParamClauseContext* ScalaParser::classParamClause() {
  ClassParamClauseContext *_localctx = _tracker.createInstance<ClassParamClauseContext>(_ctx, getState());
  enterRule(_localctx, 110, ScalaParser::RuleClassParamClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(944);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ScalaParser::NL) {
      setState(943);
      match(ScalaParser::NL);
    }
    setState(946);
    match(ScalaParser::T__9);
    setState(948);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 4647452032171573248) != 0)) {
      setState(947);
      classParams();
    }
    setState(950);
    match(ScalaParser::T__10);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassParamsContext ------------------------------------------------------------------

ScalaParser::ClassParamsContext::ClassParamsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ScalaParser::ClassParamContext *> ScalaParser::ClassParamsContext::classParam() {
  return getRuleContexts<ScalaParser::ClassParamContext>();
}

ScalaParser::ClassParamContext* ScalaParser::ClassParamsContext::classParam(size_t i) {
  return getRuleContext<ScalaParser::ClassParamContext>(i);
}


size_t ScalaParser::ClassParamsContext::getRuleIndex() const {
  return ScalaParser::RuleClassParams;
}

void ScalaParser::ClassParamsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassParams(this);
}

void ScalaParser::ClassParamsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassParams(this);
}

ScalaParser::ClassParamsContext* ScalaParser::classParams() {
  ClassParamsContext *_localctx = _tracker.createInstance<ClassParamsContext>(_ctx, getState());
  enterRule(_localctx, 112, ScalaParser::RuleClassParams);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(952);
    classParam();
    setState(957);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ScalaParser::T__3) {
      setState(953);
      match(ScalaParser::T__3);
      setState(954);
      classParam();
      setState(959);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassParamContext ------------------------------------------------------------------

ScalaParser::ClassParamContext::ClassParamContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ScalaParser::ClassParamContext::Id() {
  return getToken(ScalaParser::Id, 0);
}

ScalaParser::ParamTypeContext* ScalaParser::ClassParamContext::paramType() {
  return getRuleContext<ScalaParser::ParamTypeContext>(0);
}

std::vector<ScalaParser::AnnotationContext *> ScalaParser::ClassParamContext::annotation() {
  return getRuleContexts<ScalaParser::AnnotationContext>();
}

ScalaParser::AnnotationContext* ScalaParser::ClassParamContext::annotation(size_t i) {
  return getRuleContext<ScalaParser::AnnotationContext>(i);
}

std::vector<ScalaParser::ModifierContext *> ScalaParser::ClassParamContext::modifier() {
  return getRuleContexts<ScalaParser::ModifierContext>();
}

ScalaParser::ModifierContext* ScalaParser::ClassParamContext::modifier(size_t i) {
  return getRuleContext<ScalaParser::ModifierContext>(i);
}

ScalaParser::ExprContext* ScalaParser::ClassParamContext::expr() {
  return getRuleContext<ScalaParser::ExprContext>(0);
}


size_t ScalaParser::ClassParamContext::getRuleIndex() const {
  return ScalaParser::RuleClassParam;
}

void ScalaParser::ClassParamContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassParam(this);
}

void ScalaParser::ClassParamContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassParam(this);
}

ScalaParser::ClassParamContext* ScalaParser::classParam() {
  ClassParamContext *_localctx = _tracker.createInstance<ClassParamContext>(_ctx, getState());
  enterRule(_localctx, 114, ScalaParser::RuleClassParam);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(963);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ScalaParser::T__43) {
      setState(960);
      annotation();
      setState(965);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(969);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 35466946581364736) != 0)) {
      setState(966);
      modifier();
      setState(971);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(973);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ScalaParser::T__15

    || _la == ScalaParser::T__47) {
      setState(972);
      _la = _input->LA(1);
      if (!(_la == ScalaParser::T__15

      || _la == ScalaParser::T__47)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(975);
    match(ScalaParser::Id);
    setState(976);
    match(ScalaParser::T__18);
    setState(977);
    paramType();
    setState(980);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ScalaParser::T__33) {
      setState(978);
      match(ScalaParser::T__33);
      setState(979);
      expr();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BindingsContext ------------------------------------------------------------------

ScalaParser::BindingsContext::BindingsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ScalaParser::BindingContext *> ScalaParser::BindingsContext::binding() {
  return getRuleContexts<ScalaParser::BindingContext>();
}

ScalaParser::BindingContext* ScalaParser::BindingsContext::binding(size_t i) {
  return getRuleContext<ScalaParser::BindingContext>(i);
}


size_t ScalaParser::BindingsContext::getRuleIndex() const {
  return ScalaParser::RuleBindings;
}

void ScalaParser::BindingsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBindings(this);
}

void ScalaParser::BindingsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBindings(this);
}

ScalaParser::BindingsContext* ScalaParser::bindings() {
  BindingsContext *_localctx = _tracker.createInstance<BindingsContext>(_ctx, getState());
  enterRule(_localctx, 116, ScalaParser::RuleBindings);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(982);
    match(ScalaParser::T__9);
    setState(983);
    binding();
    setState(988);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ScalaParser::T__3) {
      setState(984);
      match(ScalaParser::T__3);
      setState(985);
      binding();
      setState(990);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(991);
    match(ScalaParser::T__10);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BindingContext ------------------------------------------------------------------

ScalaParser::BindingContext::BindingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ScalaParser::BindingContext::Id() {
  return getToken(ScalaParser::Id, 0);
}

ScalaParser::Type_Context* ScalaParser::BindingContext::type_() {
  return getRuleContext<ScalaParser::Type_Context>(0);
}


size_t ScalaParser::BindingContext::getRuleIndex() const {
  return ScalaParser::RuleBinding;
}

void ScalaParser::BindingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBinding(this);
}

void ScalaParser::BindingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBinding(this);
}

ScalaParser::BindingContext* ScalaParser::binding() {
  BindingContext *_localctx = _tracker.createInstance<BindingContext>(_ctx, getState());
  enterRule(_localctx, 118, ScalaParser::RuleBinding);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(993);
    _la = _input->LA(1);
    if (!(_la == ScalaParser::T__19

    || _la == ScalaParser::Id)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(996);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ScalaParser::T__18) {
      setState(994);
      match(ScalaParser::T__18);
      setState(995);
      type_();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModifierContext ------------------------------------------------------------------

ScalaParser::ModifierContext::ModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ScalaParser::LocalModifierContext* ScalaParser::ModifierContext::localModifier() {
  return getRuleContext<ScalaParser::LocalModifierContext>(0);
}

ScalaParser::AccessModifierContext* ScalaParser::ModifierContext::accessModifier() {
  return getRuleContext<ScalaParser::AccessModifierContext>(0);
}


size_t ScalaParser::ModifierContext::getRuleIndex() const {
  return ScalaParser::RuleModifier;
}

void ScalaParser::ModifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModifier(this);
}

void ScalaParser::ModifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModifier(this);
}

ScalaParser::ModifierContext* ScalaParser::modifier() {
  ModifierContext *_localctx = _tracker.createInstance<ModifierContext>(_ctx, getState());
  enterRule(_localctx, 120, ScalaParser::RuleModifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1001);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ScalaParser::T__21:
      case ScalaParser::T__39:
      case ScalaParser::T__49:
      case ScalaParser::T__50:
      case ScalaParser::T__51: {
        enterOuterAlt(_localctx, 1);
        setState(998);
        localModifier();
        break;
      }

      case ScalaParser::T__52:
      case ScalaParser::T__53: {
        enterOuterAlt(_localctx, 2);
        setState(999);
        accessModifier();
        break;
      }

      case ScalaParser::T__48: {
        enterOuterAlt(_localctx, 3);
        setState(1000);
        match(ScalaParser::T__48);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LocalModifierContext ------------------------------------------------------------------

ScalaParser::LocalModifierContext::LocalModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t ScalaParser::LocalModifierContext::getRuleIndex() const {
  return ScalaParser::RuleLocalModifier;
}

void ScalaParser::LocalModifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLocalModifier(this);
}

void ScalaParser::LocalModifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLocalModifier(this);
}

ScalaParser::LocalModifierContext* ScalaParser::localModifier() {
  LocalModifierContext *_localctx = _tracker.createInstance<LocalModifierContext>(_ctx, getState());
  enterRule(_localctx, 122, ScalaParser::RuleLocalModifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1003);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 7882398863720448) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AccessModifierContext ------------------------------------------------------------------

ScalaParser::AccessModifierContext::AccessModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ScalaParser::AccessQualifierContext* ScalaParser::AccessModifierContext::accessQualifier() {
  return getRuleContext<ScalaParser::AccessQualifierContext>(0);
}


size_t ScalaParser::AccessModifierContext::getRuleIndex() const {
  return ScalaParser::RuleAccessModifier;
}

void ScalaParser::AccessModifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAccessModifier(this);
}

void ScalaParser::AccessModifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAccessModifier(this);
}

ScalaParser::AccessModifierContext* ScalaParser::accessModifier() {
  AccessModifierContext *_localctx = _tracker.createInstance<AccessModifierContext>(_ctx, getState());
  enterRule(_localctx, 124, ScalaParser::RuleAccessModifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1005);
    _la = _input->LA(1);
    if (!(_la == ScalaParser::T__52

    || _la == ScalaParser::T__53)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(1007);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ScalaParser::T__6) {
      setState(1006);
      accessQualifier();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AccessQualifierContext ------------------------------------------------------------------

ScalaParser::AccessQualifierContext::AccessQualifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ScalaParser::AccessQualifierContext::Id() {
  return getToken(ScalaParser::Id, 0);
}


size_t ScalaParser::AccessQualifierContext::getRuleIndex() const {
  return ScalaParser::RuleAccessQualifier;
}

void ScalaParser::AccessQualifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAccessQualifier(this);
}

void ScalaParser::AccessQualifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAccessQualifier(this);
}

ScalaParser::AccessQualifierContext* ScalaParser::accessQualifier() {
  AccessQualifierContext *_localctx = _tracker.createInstance<AccessQualifierContext>(_ctx, getState());
  enterRule(_localctx, 126, ScalaParser::RuleAccessQualifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1009);
    match(ScalaParser::T__6);
    setState(1010);
    _la = _input->LA(1);
    if (!(_la == ScalaParser::T__4

    || _la == ScalaParser::Id)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(1011);
    match(ScalaParser::T__7);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnnotationContext ------------------------------------------------------------------

ScalaParser::AnnotationContext::AnnotationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ScalaParser::SimpleTypeContext* ScalaParser::AnnotationContext::simpleType() {
  return getRuleContext<ScalaParser::SimpleTypeContext>(0);
}

std::vector<ScalaParser::ArgumentExprsContext *> ScalaParser::AnnotationContext::argumentExprs() {
  return getRuleContexts<ScalaParser::ArgumentExprsContext>();
}

ScalaParser::ArgumentExprsContext* ScalaParser::AnnotationContext::argumentExprs(size_t i) {
  return getRuleContext<ScalaParser::ArgumentExprsContext>(i);
}


size_t ScalaParser::AnnotationContext::getRuleIndex() const {
  return ScalaParser::RuleAnnotation;
}

void ScalaParser::AnnotationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotation(this);
}

void ScalaParser::AnnotationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotation(this);
}

ScalaParser::AnnotationContext* ScalaParser::annotation() {
  AnnotationContext *_localctx = _tracker.createInstance<AnnotationContext>(_ctx, getState());
  enterRule(_localctx, 128, ScalaParser::RuleAnnotation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1013);
    match(ScalaParser::T__43);
    setState(1014);
    simpleType(0);
    setState(1018);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 136, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1015);
        argumentExprs(); 
      }
      setState(1020);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 136, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstrAnnotationContext ------------------------------------------------------------------

ScalaParser::ConstrAnnotationContext::ConstrAnnotationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ScalaParser::SimpleTypeContext* ScalaParser::ConstrAnnotationContext::simpleType() {
  return getRuleContext<ScalaParser::SimpleTypeContext>(0);
}

ScalaParser::ArgumentExprsContext* ScalaParser::ConstrAnnotationContext::argumentExprs() {
  return getRuleContext<ScalaParser::ArgumentExprsContext>(0);
}


size_t ScalaParser::ConstrAnnotationContext::getRuleIndex() const {
  return ScalaParser::RuleConstrAnnotation;
}

void ScalaParser::ConstrAnnotationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstrAnnotation(this);
}

void ScalaParser::ConstrAnnotationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstrAnnotation(this);
}

ScalaParser::ConstrAnnotationContext* ScalaParser::constrAnnotation() {
  ConstrAnnotationContext *_localctx = _tracker.createInstance<ConstrAnnotationContext>(_ctx, getState());
  enterRule(_localctx, 130, ScalaParser::RuleConstrAnnotation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1021);
    match(ScalaParser::T__43);
    setState(1022);
    simpleType(0);
    setState(1023);
    argumentExprs();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TemplateBodyContext ------------------------------------------------------------------

ScalaParser::TemplateBodyContext::TemplateBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ScalaParser::TemplateBodyContext::NL() {
  return getToken(ScalaParser::NL, 0);
}

ScalaParser::SelfTypeContext* ScalaParser::TemplateBodyContext::selfType() {
  return getRuleContext<ScalaParser::SelfTypeContext>(0);
}

std::vector<ScalaParser::TemplateStatContext *> ScalaParser::TemplateBodyContext::templateStat() {
  return getRuleContexts<ScalaParser::TemplateStatContext>();
}

ScalaParser::TemplateStatContext* ScalaParser::TemplateBodyContext::templateStat(size_t i) {
  return getRuleContext<ScalaParser::TemplateStatContext>(i);
}


size_t ScalaParser::TemplateBodyContext::getRuleIndex() const {
  return ScalaParser::RuleTemplateBody;
}

void ScalaParser::TemplateBodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTemplateBody(this);
}

void ScalaParser::TemplateBodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTemplateBody(this);
}

ScalaParser::TemplateBodyContext* ScalaParser::templateBody() {
  TemplateBodyContext *_localctx = _tracker.createInstance<TemplateBodyContext>(_ctx, getState());
  enterRule(_localctx, 132, ScalaParser::RuleTemplateBody);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1026);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ScalaParser::NL) {
      setState(1025);
      match(ScalaParser::NL);
    }
    setState(1028);
    match(ScalaParser::T__12);
    setState(1030);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 138, _ctx)) {
    case 1: {
      setState(1029);
      selfType();
      break;
    }

    default:
      break;
    }
    setState(1033); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1032);
      templateStat();
      setState(1035); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -3459021853651000218) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 31) != 0));
    setState(1037);
    match(ScalaParser::T__13);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TemplateStatContext ------------------------------------------------------------------

ScalaParser::TemplateStatContext::TemplateStatContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ScalaParser::Import_Context* ScalaParser::TemplateStatContext::import_() {
  return getRuleContext<ScalaParser::Import_Context>(0);
}

ScalaParser::Def_Context* ScalaParser::TemplateStatContext::def_() {
  return getRuleContext<ScalaParser::Def_Context>(0);
}

std::vector<ScalaParser::AnnotationContext *> ScalaParser::TemplateStatContext::annotation() {
  return getRuleContexts<ScalaParser::AnnotationContext>();
}

ScalaParser::AnnotationContext* ScalaParser::TemplateStatContext::annotation(size_t i) {
  return getRuleContext<ScalaParser::AnnotationContext>(i);
}

std::vector<ScalaParser::ModifierContext *> ScalaParser::TemplateStatContext::modifier() {
  return getRuleContexts<ScalaParser::ModifierContext>();
}

ScalaParser::ModifierContext* ScalaParser::TemplateStatContext::modifier(size_t i) {
  return getRuleContext<ScalaParser::ModifierContext>(i);
}

std::vector<tree::TerminalNode *> ScalaParser::TemplateStatContext::NL() {
  return getTokens(ScalaParser::NL);
}

tree::TerminalNode* ScalaParser::TemplateStatContext::NL(size_t i) {
  return getToken(ScalaParser::NL, i);
}

ScalaParser::DclContext* ScalaParser::TemplateStatContext::dcl() {
  return getRuleContext<ScalaParser::DclContext>(0);
}

ScalaParser::ExprContext* ScalaParser::TemplateStatContext::expr() {
  return getRuleContext<ScalaParser::ExprContext>(0);
}


size_t ScalaParser::TemplateStatContext::getRuleIndex() const {
  return ScalaParser::RuleTemplateStat;
}

void ScalaParser::TemplateStatContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTemplateStat(this);
}

void ScalaParser::TemplateStatContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTemplateStat(this);
}

ScalaParser::TemplateStatContext* ScalaParser::templateStat() {
  TemplateStatContext *_localctx = _tracker.createInstance<TemplateStatContext>(_ctx, getState());
  enterRule(_localctx, 134, ScalaParser::RuleTemplateStat);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1073);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 146, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1039);
      import_();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1046);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == ScalaParser::T__43) {
        setState(1040);
        annotation();
        setState(1042);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == ScalaParser::NL) {
          setState(1041);
          match(ScalaParser::NL);
        }
        setState(1048);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1052);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 35466946581364736) != 0)) {
        setState(1049);
        modifier();
        setState(1054);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1055);
      def_();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1062);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == ScalaParser::T__43) {
        setState(1056);
        annotation();
        setState(1058);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == ScalaParser::NL) {
          setState(1057);
          match(ScalaParser::NL);
        }
        setState(1064);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1068);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 35466946581364736) != 0)) {
        setState(1065);
        modifier();
        setState(1070);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1071);
      dcl();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1072);
      expr();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelfTypeContext ------------------------------------------------------------------

ScalaParser::SelfTypeContext::SelfTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ScalaParser::SelfTypeContext::Id() {
  return getToken(ScalaParser::Id, 0);
}

ScalaParser::Type_Context* ScalaParser::SelfTypeContext::type_() {
  return getRuleContext<ScalaParser::Type_Context>(0);
}


size_t ScalaParser::SelfTypeContext::getRuleIndex() const {
  return ScalaParser::RuleSelfType;
}

void ScalaParser::SelfTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelfType(this);
}

void ScalaParser::SelfTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelfType(this);
}

ScalaParser::SelfTypeContext* ScalaParser::selfType() {
  SelfTypeContext *_localctx = _tracker.createInstance<SelfTypeContext>(_ctx, getState());
  enterRule(_localctx, 136, ScalaParser::RuleSelfType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1086);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ScalaParser::Id: {
        enterOuterAlt(_localctx, 1);
        setState(1075);
        match(ScalaParser::Id);
        setState(1078);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == ScalaParser::T__18) {
          setState(1076);
          match(ScalaParser::T__18);
          setState(1077);
          type_();
        }
        setState(1080);
        match(ScalaParser::T__8);
        break;
      }

      case ScalaParser::T__4: {
        enterOuterAlt(_localctx, 2);
        setState(1081);
        match(ScalaParser::T__4);
        setState(1082);
        match(ScalaParser::T__18);
        setState(1083);
        type_();
        setState(1084);
        match(ScalaParser::T__8);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Import_Context ------------------------------------------------------------------

ScalaParser::Import_Context::Import_Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ScalaParser::ImportExprContext *> ScalaParser::Import_Context::importExpr() {
  return getRuleContexts<ScalaParser::ImportExprContext>();
}

ScalaParser::ImportExprContext* ScalaParser::Import_Context::importExpr(size_t i) {
  return getRuleContext<ScalaParser::ImportExprContext>(i);
}


size_t ScalaParser::Import_Context::getRuleIndex() const {
  return ScalaParser::RuleImport_;
}

void ScalaParser::Import_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImport_(this);
}

void ScalaParser::Import_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImport_(this);
}

ScalaParser::Import_Context* ScalaParser::import_() {
  Import_Context *_localctx = _tracker.createInstance<Import_Context>(_ctx, getState());
  enterRule(_localctx, 138, ScalaParser::RuleImport_);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1088);
    match(ScalaParser::T__54);
    setState(1089);
    importExpr();
    setState(1094);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ScalaParser::T__3) {
      setState(1090);
      match(ScalaParser::T__3);
      setState(1091);
      importExpr();
      setState(1096);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ImportExprContext ------------------------------------------------------------------

ScalaParser::ImportExprContext::ImportExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ScalaParser::StableIdContext* ScalaParser::ImportExprContext::stableId() {
  return getRuleContext<ScalaParser::StableIdContext>(0);
}

tree::TerminalNode* ScalaParser::ImportExprContext::Id() {
  return getToken(ScalaParser::Id, 0);
}

ScalaParser::ImportSelectorsContext* ScalaParser::ImportExprContext::importSelectors() {
  return getRuleContext<ScalaParser::ImportSelectorsContext>(0);
}


size_t ScalaParser::ImportExprContext::getRuleIndex() const {
  return ScalaParser::RuleImportExpr;
}

void ScalaParser::ImportExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImportExpr(this);
}

void ScalaParser::ImportExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImportExpr(this);
}

ScalaParser::ImportExprContext* ScalaParser::importExpr() {
  ImportExprContext *_localctx = _tracker.createInstance<ImportExprContext>(_ctx, getState());
  enterRule(_localctx, 140, ScalaParser::RuleImportExpr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1097);
    stableId(0);
    setState(1104);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ScalaParser::T__2) {
      setState(1098);
      match(ScalaParser::T__2);
      setState(1102);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case ScalaParser::Id: {
          setState(1099);
          match(ScalaParser::Id);
          break;
        }

        case ScalaParser::T__19: {
          setState(1100);
          match(ScalaParser::T__19);
          break;
        }

        case ScalaParser::T__12: {
          setState(1101);
          importSelectors();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ImportSelectorsContext ------------------------------------------------------------------

ScalaParser::ImportSelectorsContext::ImportSelectorsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ScalaParser::ImportSelectorContext *> ScalaParser::ImportSelectorsContext::importSelector() {
  return getRuleContexts<ScalaParser::ImportSelectorContext>();
}

ScalaParser::ImportSelectorContext* ScalaParser::ImportSelectorsContext::importSelector(size_t i) {
  return getRuleContext<ScalaParser::ImportSelectorContext>(i);
}


size_t ScalaParser::ImportSelectorsContext::getRuleIndex() const {
  return ScalaParser::RuleImportSelectors;
}

void ScalaParser::ImportSelectorsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImportSelectors(this);
}

void ScalaParser::ImportSelectorsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImportSelectors(this);
}

ScalaParser::ImportSelectorsContext* ScalaParser::importSelectors() {
  ImportSelectorsContext *_localctx = _tracker.createInstance<ImportSelectorsContext>(_ctx, getState());
  enterRule(_localctx, 142, ScalaParser::RuleImportSelectors);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1106);
    match(ScalaParser::T__12);
    setState(1112);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 152, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1107);
        importSelector();
        setState(1108);
        match(ScalaParser::T__3); 
      }
      setState(1114);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 152, _ctx);
    }
    setState(1117);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ScalaParser::Id: {
        setState(1115);
        importSelector();
        break;
      }

      case ScalaParser::T__19: {
        setState(1116);
        match(ScalaParser::T__19);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(1119);
    match(ScalaParser::T__13);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ImportSelectorContext ------------------------------------------------------------------

ScalaParser::ImportSelectorContext::ImportSelectorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> ScalaParser::ImportSelectorContext::Id() {
  return getTokens(ScalaParser::Id);
}

tree::TerminalNode* ScalaParser::ImportSelectorContext::Id(size_t i) {
  return getToken(ScalaParser::Id, i);
}


size_t ScalaParser::ImportSelectorContext::getRuleIndex() const {
  return ScalaParser::RuleImportSelector;
}

void ScalaParser::ImportSelectorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImportSelector(this);
}

void ScalaParser::ImportSelectorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImportSelector(this);
}

ScalaParser::ImportSelectorContext* ScalaParser::importSelector() {
  ImportSelectorContext *_localctx = _tracker.createInstance<ImportSelectorContext>(_ctx, getState());
  enterRule(_localctx, 144, ScalaParser::RuleImportSelector);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1121);
    match(ScalaParser::Id);
    setState(1124);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ScalaParser::T__8) {
      setState(1122);
      match(ScalaParser::T__8);
      setState(1123);
      _la = _input->LA(1);
      if (!(_la == ScalaParser::T__19

      || _la == ScalaParser::Id)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DclContext ------------------------------------------------------------------

ScalaParser::DclContext::DclContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ScalaParser::ValDclContext* ScalaParser::DclContext::valDcl() {
  return getRuleContext<ScalaParser::ValDclContext>(0);
}

ScalaParser::VarDclContext* ScalaParser::DclContext::varDcl() {
  return getRuleContext<ScalaParser::VarDclContext>(0);
}

ScalaParser::FunDclContext* ScalaParser::DclContext::funDcl() {
  return getRuleContext<ScalaParser::FunDclContext>(0);
}

ScalaParser::TypeDclContext* ScalaParser::DclContext::typeDcl() {
  return getRuleContext<ScalaParser::TypeDclContext>(0);
}

std::vector<tree::TerminalNode *> ScalaParser::DclContext::NL() {
  return getTokens(ScalaParser::NL);
}

tree::TerminalNode* ScalaParser::DclContext::NL(size_t i) {
  return getToken(ScalaParser::NL, i);
}


size_t ScalaParser::DclContext::getRuleIndex() const {
  return ScalaParser::RuleDcl;
}

void ScalaParser::DclContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDcl(this);
}

void ScalaParser::DclContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDcl(this);
}

ScalaParser::DclContext* ScalaParser::dcl() {
  DclContext *_localctx = _tracker.createInstance<DclContext>(_ctx, getState());
  enterRule(_localctx, 146, ScalaParser::RuleDcl);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1140);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ScalaParser::T__15: {
        enterOuterAlt(_localctx, 1);
        setState(1126);
        match(ScalaParser::T__15);
        setState(1127);
        valDcl();
        break;
      }

      case ScalaParser::T__47: {
        enterOuterAlt(_localctx, 2);
        setState(1128);
        match(ScalaParser::T__47);
        setState(1129);
        varDcl();
        break;
      }

      case ScalaParser::T__55: {
        enterOuterAlt(_localctx, 3);
        setState(1130);
        match(ScalaParser::T__55);
        setState(1131);
        funDcl();
        break;
      }

      case ScalaParser::T__14: {
        enterOuterAlt(_localctx, 4);
        setState(1132);
        match(ScalaParser::T__14);
        setState(1136);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == ScalaParser::NL) {
          setState(1133);
          match(ScalaParser::NL);
          setState(1138);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(1139);
        typeDcl();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ValDclContext ------------------------------------------------------------------

ScalaParser::ValDclContext::ValDclContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ScalaParser::IdsContext* ScalaParser::ValDclContext::ids() {
  return getRuleContext<ScalaParser::IdsContext>(0);
}

ScalaParser::Type_Context* ScalaParser::ValDclContext::type_() {
  return getRuleContext<ScalaParser::Type_Context>(0);
}


size_t ScalaParser::ValDclContext::getRuleIndex() const {
  return ScalaParser::RuleValDcl;
}

void ScalaParser::ValDclContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterValDcl(this);
}

void ScalaParser::ValDclContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitValDcl(this);
}

ScalaParser::ValDclContext* ScalaParser::valDcl() {
  ValDclContext *_localctx = _tracker.createInstance<ValDclContext>(_ctx, getState());
  enterRule(_localctx, 148, ScalaParser::RuleValDcl);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1142);
    ids();
    setState(1143);
    match(ScalaParser::T__18);
    setState(1144);
    type_();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VarDclContext ------------------------------------------------------------------

ScalaParser::VarDclContext::VarDclContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ScalaParser::IdsContext* ScalaParser::VarDclContext::ids() {
  return getRuleContext<ScalaParser::IdsContext>(0);
}

ScalaParser::Type_Context* ScalaParser::VarDclContext::type_() {
  return getRuleContext<ScalaParser::Type_Context>(0);
}


size_t ScalaParser::VarDclContext::getRuleIndex() const {
  return ScalaParser::RuleVarDcl;
}

void ScalaParser::VarDclContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVarDcl(this);
}

void ScalaParser::VarDclContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVarDcl(this);
}

ScalaParser::VarDclContext* ScalaParser::varDcl() {
  VarDclContext *_localctx = _tracker.createInstance<VarDclContext>(_ctx, getState());
  enterRule(_localctx, 150, ScalaParser::RuleVarDcl);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1146);
    ids();
    setState(1147);
    match(ScalaParser::T__18);
    setState(1148);
    type_();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunDclContext ------------------------------------------------------------------

ScalaParser::FunDclContext::FunDclContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ScalaParser::FunSigContext* ScalaParser::FunDclContext::funSig() {
  return getRuleContext<ScalaParser::FunSigContext>(0);
}

ScalaParser::Type_Context* ScalaParser::FunDclContext::type_() {
  return getRuleContext<ScalaParser::Type_Context>(0);
}


size_t ScalaParser::FunDclContext::getRuleIndex() const {
  return ScalaParser::RuleFunDcl;
}

void ScalaParser::FunDclContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunDcl(this);
}

void ScalaParser::FunDclContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunDcl(this);
}

ScalaParser::FunDclContext* ScalaParser::funDcl() {
  FunDclContext *_localctx = _tracker.createInstance<FunDclContext>(_ctx, getState());
  enterRule(_localctx, 152, ScalaParser::RuleFunDcl);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1150);
    funSig();
    setState(1153);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ScalaParser::T__18) {
      setState(1151);
      match(ScalaParser::T__18);
      setState(1152);
      type_();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunSigContext ------------------------------------------------------------------

ScalaParser::FunSigContext::FunSigContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ScalaParser::FunSigContext::Id() {
  return getToken(ScalaParser::Id, 0);
}

ScalaParser::ParamClausesContext* ScalaParser::FunSigContext::paramClauses() {
  return getRuleContext<ScalaParser::ParamClausesContext>(0);
}

ScalaParser::FunTypeParamClauseContext* ScalaParser::FunSigContext::funTypeParamClause() {
  return getRuleContext<ScalaParser::FunTypeParamClauseContext>(0);
}


size_t ScalaParser::FunSigContext::getRuleIndex() const {
  return ScalaParser::RuleFunSig;
}

void ScalaParser::FunSigContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunSig(this);
}

void ScalaParser::FunSigContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunSig(this);
}

ScalaParser::FunSigContext* ScalaParser::funSig() {
  FunSigContext *_localctx = _tracker.createInstance<FunSigContext>(_ctx, getState());
  enterRule(_localctx, 154, ScalaParser::RuleFunSig);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1155);
    match(ScalaParser::Id);
    setState(1157);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ScalaParser::T__6) {
      setState(1156);
      funTypeParamClause();
    }
    setState(1159);
    paramClauses();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeDclContext ------------------------------------------------------------------

ScalaParser::TypeDclContext::TypeDclContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ScalaParser::TypeDclContext::Id() {
  return getToken(ScalaParser::Id, 0);
}

ScalaParser::TypeParamClauseContext* ScalaParser::TypeDclContext::typeParamClause() {
  return getRuleContext<ScalaParser::TypeParamClauseContext>(0);
}

std::vector<ScalaParser::Type_Context *> ScalaParser::TypeDclContext::type_() {
  return getRuleContexts<ScalaParser::Type_Context>();
}

ScalaParser::Type_Context* ScalaParser::TypeDclContext::type_(size_t i) {
  return getRuleContext<ScalaParser::Type_Context>(i);
}


size_t ScalaParser::TypeDclContext::getRuleIndex() const {
  return ScalaParser::RuleTypeDcl;
}

void ScalaParser::TypeDclContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeDcl(this);
}

void ScalaParser::TypeDclContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeDcl(this);
}

ScalaParser::TypeDclContext* ScalaParser::typeDcl() {
  TypeDclContext *_localctx = _tracker.createInstance<TypeDclContext>(_ctx, getState());
  enterRule(_localctx, 156, ScalaParser::RuleTypeDcl);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1161);
    match(ScalaParser::Id);
    setState(1163);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ScalaParser::T__6) {
      setState(1162);
      typeParamClause();
    }
    setState(1167);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ScalaParser::T__44) {
      setState(1165);
      match(ScalaParser::T__44);
      setState(1166);
      type_();
    }
    setState(1171);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ScalaParser::T__45) {
      setState(1169);
      match(ScalaParser::T__45);
      setState(1170);
      type_();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PatVarDefContext ------------------------------------------------------------------

ScalaParser::PatVarDefContext::PatVarDefContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ScalaParser::PatDefContext* ScalaParser::PatVarDefContext::patDef() {
  return getRuleContext<ScalaParser::PatDefContext>(0);
}

ScalaParser::VarDefContext* ScalaParser::PatVarDefContext::varDef() {
  return getRuleContext<ScalaParser::VarDefContext>(0);
}


size_t ScalaParser::PatVarDefContext::getRuleIndex() const {
  return ScalaParser::RulePatVarDef;
}

void ScalaParser::PatVarDefContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPatVarDef(this);
}

void ScalaParser::PatVarDefContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPatVarDef(this);
}

ScalaParser::PatVarDefContext* ScalaParser::patVarDef() {
  PatVarDefContext *_localctx = _tracker.createInstance<PatVarDefContext>(_ctx, getState());
  enterRule(_localctx, 158, ScalaParser::RulePatVarDef);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1177);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ScalaParser::T__15: {
        enterOuterAlt(_localctx, 1);
        setState(1173);
        match(ScalaParser::T__15);
        setState(1174);
        patDef();
        break;
      }

      case ScalaParser::T__47: {
        enterOuterAlt(_localctx, 2);
        setState(1175);
        match(ScalaParser::T__47);
        setState(1176);
        varDef();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Def_Context ------------------------------------------------------------------

ScalaParser::Def_Context::Def_Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ScalaParser::PatVarDefContext* ScalaParser::Def_Context::patVarDef() {
  return getRuleContext<ScalaParser::PatVarDefContext>(0);
}

ScalaParser::FunDefContext* ScalaParser::Def_Context::funDef() {
  return getRuleContext<ScalaParser::FunDefContext>(0);
}

ScalaParser::TypeDefContext* ScalaParser::Def_Context::typeDef() {
  return getRuleContext<ScalaParser::TypeDefContext>(0);
}

std::vector<tree::TerminalNode *> ScalaParser::Def_Context::NL() {
  return getTokens(ScalaParser::NL);
}

tree::TerminalNode* ScalaParser::Def_Context::NL(size_t i) {
  return getToken(ScalaParser::NL, i);
}

ScalaParser::TmplDefContext* ScalaParser::Def_Context::tmplDef() {
  return getRuleContext<ScalaParser::TmplDefContext>(0);
}


size_t ScalaParser::Def_Context::getRuleIndex() const {
  return ScalaParser::RuleDef_;
}

void ScalaParser::Def_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDef_(this);
}

void ScalaParser::Def_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDef_(this);
}

ScalaParser::Def_Context* ScalaParser::def_() {
  Def_Context *_localctx = _tracker.createInstance<Def_Context>(_ctx, getState());
  enterRule(_localctx, 160, ScalaParser::RuleDef_);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1191);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ScalaParser::T__15:
      case ScalaParser::T__47: {
        enterOuterAlt(_localctx, 1);
        setState(1179);
        patVarDef();
        break;
      }

      case ScalaParser::T__55: {
        enterOuterAlt(_localctx, 2);
        setState(1180);
        match(ScalaParser::T__55);
        setState(1181);
        funDef();
        break;
      }

      case ScalaParser::T__14: {
        enterOuterAlt(_localctx, 3);
        setState(1182);
        match(ScalaParser::T__14);
        setState(1186);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == ScalaParser::NL) {
          setState(1183);
          match(ScalaParser::NL);
          setState(1188);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(1189);
        typeDef();
        break;
      }

      case ScalaParser::T__41:
      case ScalaParser::T__56:
      case ScalaParser::T__57:
      case ScalaParser::T__58: {
        enterOuterAlt(_localctx, 4);
        setState(1190);
        tmplDef();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PatDefContext ------------------------------------------------------------------

ScalaParser::PatDefContext::PatDefContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ScalaParser::Pattern2Context *> ScalaParser::PatDefContext::pattern2() {
  return getRuleContexts<ScalaParser::Pattern2Context>();
}

ScalaParser::Pattern2Context* ScalaParser::PatDefContext::pattern2(size_t i) {
  return getRuleContext<ScalaParser::Pattern2Context>(i);
}

ScalaParser::ExprContext* ScalaParser::PatDefContext::expr() {
  return getRuleContext<ScalaParser::ExprContext>(0);
}

ScalaParser::Type_Context* ScalaParser::PatDefContext::type_() {
  return getRuleContext<ScalaParser::Type_Context>(0);
}


size_t ScalaParser::PatDefContext::getRuleIndex() const {
  return ScalaParser::RulePatDef;
}

void ScalaParser::PatDefContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPatDef(this);
}

void ScalaParser::PatDefContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPatDef(this);
}

ScalaParser::PatDefContext* ScalaParser::patDef() {
  PatDefContext *_localctx = _tracker.createInstance<PatDefContext>(_ctx, getState());
  enterRule(_localctx, 162, ScalaParser::RulePatDef);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1193);
    pattern2();
    setState(1198);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ScalaParser::T__3) {
      setState(1194);
      match(ScalaParser::T__3);
      setState(1195);
      pattern2();
      setState(1200);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1203);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ScalaParser::T__18) {
      setState(1201);
      match(ScalaParser::T__18);
      setState(1202);
      type_();
    }
    setState(1205);
    match(ScalaParser::T__33);
    setState(1206);
    expr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VarDefContext ------------------------------------------------------------------

ScalaParser::VarDefContext::VarDefContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ScalaParser::PatDefContext* ScalaParser::VarDefContext::patDef() {
  return getRuleContext<ScalaParser::PatDefContext>(0);
}

ScalaParser::IdsContext* ScalaParser::VarDefContext::ids() {
  return getRuleContext<ScalaParser::IdsContext>(0);
}

ScalaParser::Type_Context* ScalaParser::VarDefContext::type_() {
  return getRuleContext<ScalaParser::Type_Context>(0);
}


size_t ScalaParser::VarDefContext::getRuleIndex() const {
  return ScalaParser::RuleVarDef;
}

void ScalaParser::VarDefContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVarDef(this);
}

void ScalaParser::VarDefContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVarDef(this);
}

ScalaParser::VarDefContext* ScalaParser::varDef() {
  VarDefContext *_localctx = _tracker.createInstance<VarDefContext>(_ctx, getState());
  enterRule(_localctx, 164, ScalaParser::RuleVarDef);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1215);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 167, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1208);
      patDef();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1209);
      ids();
      setState(1210);
      match(ScalaParser::T__18);
      setState(1211);
      type_();
      setState(1212);
      match(ScalaParser::T__33);
      setState(1213);
      match(ScalaParser::T__19);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunDefContext ------------------------------------------------------------------

ScalaParser::FunDefContext::FunDefContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ScalaParser::FunSigContext* ScalaParser::FunDefContext::funSig() {
  return getRuleContext<ScalaParser::FunSigContext>(0);
}

ScalaParser::ExprContext* ScalaParser::FunDefContext::expr() {
  return getRuleContext<ScalaParser::ExprContext>(0);
}

ScalaParser::Type_Context* ScalaParser::FunDefContext::type_() {
  return getRuleContext<ScalaParser::Type_Context>(0);
}

ScalaParser::BlockContext* ScalaParser::FunDefContext::block() {
  return getRuleContext<ScalaParser::BlockContext>(0);
}

tree::TerminalNode* ScalaParser::FunDefContext::NL() {
  return getToken(ScalaParser::NL, 0);
}

ScalaParser::ParamClauseContext* ScalaParser::FunDefContext::paramClause() {
  return getRuleContext<ScalaParser::ParamClauseContext>(0);
}

ScalaParser::ParamClausesContext* ScalaParser::FunDefContext::paramClauses() {
  return getRuleContext<ScalaParser::ParamClausesContext>(0);
}

ScalaParser::ConstrExprContext* ScalaParser::FunDefContext::constrExpr() {
  return getRuleContext<ScalaParser::ConstrExprContext>(0);
}

ScalaParser::ConstrBlockContext* ScalaParser::FunDefContext::constrBlock() {
  return getRuleContext<ScalaParser::ConstrBlockContext>(0);
}


size_t ScalaParser::FunDefContext::getRuleIndex() const {
  return ScalaParser::RuleFunDef;
}

void ScalaParser::FunDefContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunDef(this);
}

void ScalaParser::FunDefContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunDef(this);
}

ScalaParser::FunDefContext* ScalaParser::funDef() {
  FunDefContext *_localctx = _tracker.createInstance<FunDefContext>(_ctx, getState());
  enterRule(_localctx, 166, ScalaParser::RuleFunDef);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1244);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 172, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1217);
      funSig();
      setState(1220);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ScalaParser::T__18) {
        setState(1218);
        match(ScalaParser::T__18);
        setState(1219);
        type_();
      }
      setState(1222);
      match(ScalaParser::T__33);
      setState(1223);
      expr();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1225);
      funSig();
      setState(1227);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ScalaParser::NL) {
        setState(1226);
        match(ScalaParser::NL);
      }
      setState(1229);
      match(ScalaParser::T__12);
      setState(1230);
      block();
      setState(1231);
      match(ScalaParser::T__13);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1233);
      match(ScalaParser::T__4);
      setState(1234);
      paramClause();
      setState(1235);
      paramClauses();
      setState(1242);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case ScalaParser::T__33: {
          setState(1236);
          match(ScalaParser::T__33);
          setState(1237);
          constrExpr();
          break;
        }

        case ScalaParser::T__12:
        case ScalaParser::NL: {
          setState(1239);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == ScalaParser::NL) {
            setState(1238);
            match(ScalaParser::NL);
          }
          setState(1241);
          constrBlock();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeDefContext ------------------------------------------------------------------

ScalaParser::TypeDefContext::TypeDefContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ScalaParser::TypeDefContext::Id() {
  return getToken(ScalaParser::Id, 0);
}

ScalaParser::Type_Context* ScalaParser::TypeDefContext::type_() {
  return getRuleContext<ScalaParser::Type_Context>(0);
}

ScalaParser::TypeParamClauseContext* ScalaParser::TypeDefContext::typeParamClause() {
  return getRuleContext<ScalaParser::TypeParamClauseContext>(0);
}


size_t ScalaParser::TypeDefContext::getRuleIndex() const {
  return ScalaParser::RuleTypeDef;
}

void ScalaParser::TypeDefContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeDef(this);
}

void ScalaParser::TypeDefContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeDef(this);
}

ScalaParser::TypeDefContext* ScalaParser::typeDef() {
  TypeDefContext *_localctx = _tracker.createInstance<TypeDefContext>(_ctx, getState());
  enterRule(_localctx, 168, ScalaParser::RuleTypeDef);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1246);
    match(ScalaParser::Id);
    setState(1248);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ScalaParser::T__6) {
      setState(1247);
      typeParamClause();
    }
    setState(1250);
    match(ScalaParser::T__33);
    setState(1251);
    type_();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TmplDefContext ------------------------------------------------------------------

ScalaParser::TmplDefContext::TmplDefContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ScalaParser::ClassDefContext* ScalaParser::TmplDefContext::classDef() {
  return getRuleContext<ScalaParser::ClassDefContext>(0);
}

ScalaParser::ObjectDefContext* ScalaParser::TmplDefContext::objectDef() {
  return getRuleContext<ScalaParser::ObjectDefContext>(0);
}

ScalaParser::TraitDefContext* ScalaParser::TmplDefContext::traitDef() {
  return getRuleContext<ScalaParser::TraitDefContext>(0);
}


size_t ScalaParser::TmplDefContext::getRuleIndex() const {
  return ScalaParser::RuleTmplDef;
}

void ScalaParser::TmplDefContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTmplDef(this);
}

void ScalaParser::TmplDefContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTmplDef(this);
}

ScalaParser::TmplDefContext* ScalaParser::tmplDef() {
  TmplDefContext *_localctx = _tracker.createInstance<TmplDefContext>(_ctx, getState());
  enterRule(_localctx, 170, ScalaParser::RuleTmplDef);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1265);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 176, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1254);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ScalaParser::T__41) {
        setState(1253);
        match(ScalaParser::T__41);
      }
      setState(1256);
      match(ScalaParser::T__56);
      setState(1257);
      classDef();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1259);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ScalaParser::T__41) {
        setState(1258);
        match(ScalaParser::T__41);
      }
      setState(1261);
      match(ScalaParser::T__57);
      setState(1262);
      objectDef();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1263);
      match(ScalaParser::T__58);
      setState(1264);
      traitDef();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassDefContext ------------------------------------------------------------------

ScalaParser::ClassDefContext::ClassDefContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ScalaParser::ClassDefContext::Id() {
  return getToken(ScalaParser::Id, 0);
}

ScalaParser::ClassParamClausesContext* ScalaParser::ClassDefContext::classParamClauses() {
  return getRuleContext<ScalaParser::ClassParamClausesContext>(0);
}

ScalaParser::ClassTemplateOptContext* ScalaParser::ClassDefContext::classTemplateOpt() {
  return getRuleContext<ScalaParser::ClassTemplateOptContext>(0);
}

ScalaParser::TypeParamClauseContext* ScalaParser::ClassDefContext::typeParamClause() {
  return getRuleContext<ScalaParser::TypeParamClauseContext>(0);
}

std::vector<ScalaParser::ConstrAnnotationContext *> ScalaParser::ClassDefContext::constrAnnotation() {
  return getRuleContexts<ScalaParser::ConstrAnnotationContext>();
}

ScalaParser::ConstrAnnotationContext* ScalaParser::ClassDefContext::constrAnnotation(size_t i) {
  return getRuleContext<ScalaParser::ConstrAnnotationContext>(i);
}

ScalaParser::AccessModifierContext* ScalaParser::ClassDefContext::accessModifier() {
  return getRuleContext<ScalaParser::AccessModifierContext>(0);
}


size_t ScalaParser::ClassDefContext::getRuleIndex() const {
  return ScalaParser::RuleClassDef;
}

void ScalaParser::ClassDefContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassDef(this);
}

void ScalaParser::ClassDefContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassDef(this);
}

ScalaParser::ClassDefContext* ScalaParser::classDef() {
  ClassDefContext *_localctx = _tracker.createInstance<ClassDefContext>(_ctx, getState());
  enterRule(_localctx, 172, ScalaParser::RuleClassDef);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1267);
    match(ScalaParser::Id);
    setState(1269);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ScalaParser::T__6) {
      setState(1268);
      typeParamClause();
    }
    setState(1274);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 178, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1271);
        constrAnnotation(); 
      }
      setState(1276);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 178, _ctx);
    }
    setState(1278);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 179, _ctx)) {
    case 1: {
      setState(1277);
      accessModifier();
      break;
    }

    default:
      break;
    }
    setState(1280);
    classParamClauses();
    setState(1281);
    classTemplateOpt();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TraitDefContext ------------------------------------------------------------------

ScalaParser::TraitDefContext::TraitDefContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ScalaParser::TraitDefContext::Id() {
  return getToken(ScalaParser::Id, 0);
}

ScalaParser::TraitTemplateOptContext* ScalaParser::TraitDefContext::traitTemplateOpt() {
  return getRuleContext<ScalaParser::TraitTemplateOptContext>(0);
}

ScalaParser::TypeParamClauseContext* ScalaParser::TraitDefContext::typeParamClause() {
  return getRuleContext<ScalaParser::TypeParamClauseContext>(0);
}


size_t ScalaParser::TraitDefContext::getRuleIndex() const {
  return ScalaParser::RuleTraitDef;
}

void ScalaParser::TraitDefContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTraitDef(this);
}

void ScalaParser::TraitDefContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTraitDef(this);
}

ScalaParser::TraitDefContext* ScalaParser::traitDef() {
  TraitDefContext *_localctx = _tracker.createInstance<TraitDefContext>(_ctx, getState());
  enterRule(_localctx, 174, ScalaParser::RuleTraitDef);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1283);
    match(ScalaParser::Id);
    setState(1285);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ScalaParser::T__6) {
      setState(1284);
      typeParamClause();
    }
    setState(1287);
    traitTemplateOpt();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ObjectDefContext ------------------------------------------------------------------

ScalaParser::ObjectDefContext::ObjectDefContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ScalaParser::ObjectDefContext::Id() {
  return getToken(ScalaParser::Id, 0);
}

ScalaParser::ClassTemplateOptContext* ScalaParser::ObjectDefContext::classTemplateOpt() {
  return getRuleContext<ScalaParser::ClassTemplateOptContext>(0);
}


size_t ScalaParser::ObjectDefContext::getRuleIndex() const {
  return ScalaParser::RuleObjectDef;
}

void ScalaParser::ObjectDefContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterObjectDef(this);
}

void ScalaParser::ObjectDefContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitObjectDef(this);
}

ScalaParser::ObjectDefContext* ScalaParser::objectDef() {
  ObjectDefContext *_localctx = _tracker.createInstance<ObjectDefContext>(_ctx, getState());
  enterRule(_localctx, 176, ScalaParser::RuleObjectDef);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1289);
    match(ScalaParser::Id);
    setState(1290);
    classTemplateOpt();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassTemplateOptContext ------------------------------------------------------------------

ScalaParser::ClassTemplateOptContext::ClassTemplateOptContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ScalaParser::ClassTemplateContext* ScalaParser::ClassTemplateOptContext::classTemplate() {
  return getRuleContext<ScalaParser::ClassTemplateContext>(0);
}

ScalaParser::TemplateBodyContext* ScalaParser::ClassTemplateOptContext::templateBody() {
  return getRuleContext<ScalaParser::TemplateBodyContext>(0);
}


size_t ScalaParser::ClassTemplateOptContext::getRuleIndex() const {
  return ScalaParser::RuleClassTemplateOpt;
}

void ScalaParser::ClassTemplateOptContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassTemplateOpt(this);
}

void ScalaParser::ClassTemplateOptContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassTemplateOpt(this);
}

ScalaParser::ClassTemplateOptContext* ScalaParser::classTemplateOpt() {
  ClassTemplateOptContext *_localctx = _tracker.createInstance<ClassTemplateOptContext>(_ctx, getState());
  enterRule(_localctx, 178, ScalaParser::RuleClassTemplateOpt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1300);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 183, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1292);
      match(ScalaParser::T__59);
      setState(1293);
      classTemplate();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1298);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 182, _ctx)) {
      case 1: {
        setState(1295);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == ScalaParser::T__59) {
          setState(1294);
          match(ScalaParser::T__59);
        }
        setState(1297);
        templateBody();
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TraitTemplateOptContext ------------------------------------------------------------------

ScalaParser::TraitTemplateOptContext::TraitTemplateOptContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ScalaParser::TraitTemplateContext* ScalaParser::TraitTemplateOptContext::traitTemplate() {
  return getRuleContext<ScalaParser::TraitTemplateContext>(0);
}

ScalaParser::TemplateBodyContext* ScalaParser::TraitTemplateOptContext::templateBody() {
  return getRuleContext<ScalaParser::TemplateBodyContext>(0);
}


size_t ScalaParser::TraitTemplateOptContext::getRuleIndex() const {
  return ScalaParser::RuleTraitTemplateOpt;
}

void ScalaParser::TraitTemplateOptContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTraitTemplateOpt(this);
}

void ScalaParser::TraitTemplateOptContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTraitTemplateOpt(this);
}

ScalaParser::TraitTemplateOptContext* ScalaParser::traitTemplateOpt() {
  TraitTemplateOptContext *_localctx = _tracker.createInstance<TraitTemplateOptContext>(_ctx, getState());
  enterRule(_localctx, 180, ScalaParser::RuleTraitTemplateOpt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1310);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 186, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1302);
      match(ScalaParser::T__59);
      setState(1303);
      traitTemplate();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1308);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 185, _ctx)) {
      case 1: {
        setState(1305);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == ScalaParser::T__59) {
          setState(1304);
          match(ScalaParser::T__59);
        }
        setState(1307);
        templateBody();
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassTemplateContext ------------------------------------------------------------------

ScalaParser::ClassTemplateContext::ClassTemplateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ScalaParser::ClassParentsContext* ScalaParser::ClassTemplateContext::classParents() {
  return getRuleContext<ScalaParser::ClassParentsContext>(0);
}

ScalaParser::EarlyDefsContext* ScalaParser::ClassTemplateContext::earlyDefs() {
  return getRuleContext<ScalaParser::EarlyDefsContext>(0);
}

ScalaParser::TemplateBodyContext* ScalaParser::ClassTemplateContext::templateBody() {
  return getRuleContext<ScalaParser::TemplateBodyContext>(0);
}


size_t ScalaParser::ClassTemplateContext::getRuleIndex() const {
  return ScalaParser::RuleClassTemplate;
}

void ScalaParser::ClassTemplateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassTemplate(this);
}

void ScalaParser::ClassTemplateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassTemplate(this);
}

ScalaParser::ClassTemplateContext* ScalaParser::classTemplate() {
  ClassTemplateContext *_localctx = _tracker.createInstance<ClassTemplateContext>(_ctx, getState());
  enterRule(_localctx, 182, ScalaParser::RuleClassTemplate);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1313);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ScalaParser::T__12) {
      setState(1312);
      earlyDefs();
    }
    setState(1315);
    classParents();
    setState(1317);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 188, _ctx)) {
    case 1: {
      setState(1316);
      templateBody();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TraitTemplateContext ------------------------------------------------------------------

ScalaParser::TraitTemplateContext::TraitTemplateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ScalaParser::TraitParentsContext* ScalaParser::TraitTemplateContext::traitParents() {
  return getRuleContext<ScalaParser::TraitParentsContext>(0);
}

ScalaParser::EarlyDefsContext* ScalaParser::TraitTemplateContext::earlyDefs() {
  return getRuleContext<ScalaParser::EarlyDefsContext>(0);
}

ScalaParser::TemplateBodyContext* ScalaParser::TraitTemplateContext::templateBody() {
  return getRuleContext<ScalaParser::TemplateBodyContext>(0);
}


size_t ScalaParser::TraitTemplateContext::getRuleIndex() const {
  return ScalaParser::RuleTraitTemplate;
}

void ScalaParser::TraitTemplateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTraitTemplate(this);
}

void ScalaParser::TraitTemplateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTraitTemplate(this);
}

ScalaParser::TraitTemplateContext* ScalaParser::traitTemplate() {
  TraitTemplateContext *_localctx = _tracker.createInstance<TraitTemplateContext>(_ctx, getState());
  enterRule(_localctx, 184, ScalaParser::RuleTraitTemplate);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1320);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ScalaParser::T__12) {
      setState(1319);
      earlyDefs();
    }
    setState(1322);
    traitParents();
    setState(1324);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 190, _ctx)) {
    case 1: {
      setState(1323);
      templateBody();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassParentsContext ------------------------------------------------------------------

ScalaParser::ClassParentsContext::ClassParentsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ScalaParser::ConstrContext* ScalaParser::ClassParentsContext::constr() {
  return getRuleContext<ScalaParser::ConstrContext>(0);
}

std::vector<ScalaParser::AnnotTypeContext *> ScalaParser::ClassParentsContext::annotType() {
  return getRuleContexts<ScalaParser::AnnotTypeContext>();
}

ScalaParser::AnnotTypeContext* ScalaParser::ClassParentsContext::annotType(size_t i) {
  return getRuleContext<ScalaParser::AnnotTypeContext>(i);
}


size_t ScalaParser::ClassParentsContext::getRuleIndex() const {
  return ScalaParser::RuleClassParents;
}

void ScalaParser::ClassParentsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassParents(this);
}

void ScalaParser::ClassParentsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassParents(this);
}

ScalaParser::ClassParentsContext* ScalaParser::classParents() {
  ClassParentsContext *_localctx = _tracker.createInstance<ClassParentsContext>(_ctx, getState());
  enterRule(_localctx, 186, ScalaParser::RuleClassParents);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1326);
    constr();
    setState(1331);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 191, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1327);
        match(ScalaParser::T__16);
        setState(1328);
        annotType(); 
      }
      setState(1333);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 191, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TraitParentsContext ------------------------------------------------------------------

ScalaParser::TraitParentsContext::TraitParentsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ScalaParser::AnnotTypeContext *> ScalaParser::TraitParentsContext::annotType() {
  return getRuleContexts<ScalaParser::AnnotTypeContext>();
}

ScalaParser::AnnotTypeContext* ScalaParser::TraitParentsContext::annotType(size_t i) {
  return getRuleContext<ScalaParser::AnnotTypeContext>(i);
}


size_t ScalaParser::TraitParentsContext::getRuleIndex() const {
  return ScalaParser::RuleTraitParents;
}

void ScalaParser::TraitParentsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTraitParents(this);
}

void ScalaParser::TraitParentsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTraitParents(this);
}

ScalaParser::TraitParentsContext* ScalaParser::traitParents() {
  TraitParentsContext *_localctx = _tracker.createInstance<TraitParentsContext>(_ctx, getState());
  enterRule(_localctx, 188, ScalaParser::RuleTraitParents);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1334);
    annotType();
    setState(1339);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ScalaParser::T__16) {
      setState(1335);
      match(ScalaParser::T__16);
      setState(1336);
      annotType();
      setState(1341);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstrContext ------------------------------------------------------------------

ScalaParser::ConstrContext::ConstrContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ScalaParser::AnnotTypeContext* ScalaParser::ConstrContext::annotType() {
  return getRuleContext<ScalaParser::AnnotTypeContext>(0);
}

std::vector<ScalaParser::ArgumentExprsContext *> ScalaParser::ConstrContext::argumentExprs() {
  return getRuleContexts<ScalaParser::ArgumentExprsContext>();
}

ScalaParser::ArgumentExprsContext* ScalaParser::ConstrContext::argumentExprs(size_t i) {
  return getRuleContext<ScalaParser::ArgumentExprsContext>(i);
}


size_t ScalaParser::ConstrContext::getRuleIndex() const {
  return ScalaParser::RuleConstr;
}

void ScalaParser::ConstrContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstr(this);
}

void ScalaParser::ConstrContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstr(this);
}

ScalaParser::ConstrContext* ScalaParser::constr() {
  ConstrContext *_localctx = _tracker.createInstance<ConstrContext>(_ctx, getState());
  enterRule(_localctx, 190, ScalaParser::RuleConstr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1342);
    annotType();
    setState(1346);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 193, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1343);
        argumentExprs(); 
      }
      setState(1348);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 193, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EarlyDefsContext ------------------------------------------------------------------

ScalaParser::EarlyDefsContext::EarlyDefsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ScalaParser::EarlyDefContext *> ScalaParser::EarlyDefsContext::earlyDef() {
  return getRuleContexts<ScalaParser::EarlyDefContext>();
}

ScalaParser::EarlyDefContext* ScalaParser::EarlyDefsContext::earlyDef(size_t i) {
  return getRuleContext<ScalaParser::EarlyDefContext>(i);
}


size_t ScalaParser::EarlyDefsContext::getRuleIndex() const {
  return ScalaParser::RuleEarlyDefs;
}

void ScalaParser::EarlyDefsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEarlyDefs(this);
}

void ScalaParser::EarlyDefsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEarlyDefs(this);
}

ScalaParser::EarlyDefsContext* ScalaParser::earlyDefs() {
  EarlyDefsContext *_localctx = _tracker.createInstance<EarlyDefsContext>(_ctx, getState());
  enterRule(_localctx, 192, ScalaParser::RuleEarlyDefs);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1349);
    match(ScalaParser::T__12);
    setState(1351); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1350);
      earlyDef();
      setState(1353); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 35766013744185344) != 0));
    setState(1355);
    match(ScalaParser::T__13);
    setState(1356);
    match(ScalaParser::T__16);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EarlyDefContext ------------------------------------------------------------------

ScalaParser::EarlyDefContext::EarlyDefContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ScalaParser::PatVarDefContext* ScalaParser::EarlyDefContext::patVarDef() {
  return getRuleContext<ScalaParser::PatVarDefContext>(0);
}

std::vector<ScalaParser::AnnotationContext *> ScalaParser::EarlyDefContext::annotation() {
  return getRuleContexts<ScalaParser::AnnotationContext>();
}

ScalaParser::AnnotationContext* ScalaParser::EarlyDefContext::annotation(size_t i) {
  return getRuleContext<ScalaParser::AnnotationContext>(i);
}

std::vector<ScalaParser::ModifierContext *> ScalaParser::EarlyDefContext::modifier() {
  return getRuleContexts<ScalaParser::ModifierContext>();
}

ScalaParser::ModifierContext* ScalaParser::EarlyDefContext::modifier(size_t i) {
  return getRuleContext<ScalaParser::ModifierContext>(i);
}

std::vector<tree::TerminalNode *> ScalaParser::EarlyDefContext::NL() {
  return getTokens(ScalaParser::NL);
}

tree::TerminalNode* ScalaParser::EarlyDefContext::NL(size_t i) {
  return getToken(ScalaParser::NL, i);
}


size_t ScalaParser::EarlyDefContext::getRuleIndex() const {
  return ScalaParser::RuleEarlyDef;
}

void ScalaParser::EarlyDefContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEarlyDef(this);
}

void ScalaParser::EarlyDefContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEarlyDef(this);
}

ScalaParser::EarlyDefContext* ScalaParser::earlyDef() {
  EarlyDefContext *_localctx = _tracker.createInstance<EarlyDefContext>(_ctx, getState());
  enterRule(_localctx, 194, ScalaParser::RuleEarlyDef);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1364);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ScalaParser::T__43) {
      setState(1358);
      annotation();
      setState(1360);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ScalaParser::NL) {
        setState(1359);
        match(ScalaParser::NL);
      }
      setState(1366);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1370);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 35466946581364736) != 0)) {
      setState(1367);
      modifier();
      setState(1372);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1373);
    patVarDef();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstrExprContext ------------------------------------------------------------------

ScalaParser::ConstrExprContext::ConstrExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ScalaParser::SelfInvocationContext* ScalaParser::ConstrExprContext::selfInvocation() {
  return getRuleContext<ScalaParser::SelfInvocationContext>(0);
}

ScalaParser::ConstrBlockContext* ScalaParser::ConstrExprContext::constrBlock() {
  return getRuleContext<ScalaParser::ConstrBlockContext>(0);
}


size_t ScalaParser::ConstrExprContext::getRuleIndex() const {
  return ScalaParser::RuleConstrExpr;
}

void ScalaParser::ConstrExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstrExpr(this);
}

void ScalaParser::ConstrExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstrExpr(this);
}

ScalaParser::ConstrExprContext* ScalaParser::constrExpr() {
  ConstrExprContext *_localctx = _tracker.createInstance<ConstrExprContext>(_ctx, getState());
  enterRule(_localctx, 196, ScalaParser::RuleConstrExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1377);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ScalaParser::T__4: {
        enterOuterAlt(_localctx, 1);
        setState(1375);
        selfInvocation();
        break;
      }

      case ScalaParser::T__12: {
        enterOuterAlt(_localctx, 2);
        setState(1376);
        constrBlock();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstrBlockContext ------------------------------------------------------------------

ScalaParser::ConstrBlockContext::ConstrBlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ScalaParser::SelfInvocationContext* ScalaParser::ConstrBlockContext::selfInvocation() {
  return getRuleContext<ScalaParser::SelfInvocationContext>(0);
}

std::vector<ScalaParser::BlockStatContext *> ScalaParser::ConstrBlockContext::blockStat() {
  return getRuleContexts<ScalaParser::BlockStatContext>();
}

ScalaParser::BlockStatContext* ScalaParser::ConstrBlockContext::blockStat(size_t i) {
  return getRuleContext<ScalaParser::BlockStatContext>(i);
}


size_t ScalaParser::ConstrBlockContext::getRuleIndex() const {
  return ScalaParser::RuleConstrBlock;
}

void ScalaParser::ConstrBlockContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstrBlock(this);
}

void ScalaParser::ConstrBlockContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstrBlock(this);
}

ScalaParser::ConstrBlockContext* ScalaParser::constrBlock() {
  ConstrBlockContext *_localctx = _tracker.createInstance<ConstrBlockContext>(_ctx, getState());
  enterRule(_localctx, 198, ScalaParser::RuleConstrBlock);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1379);
    match(ScalaParser::T__12);
    setState(1380);
    selfInvocation();
    setState(1384);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -3486606401368644506) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 31) != 0)) {
      setState(1381);
      blockStat();
      setState(1386);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1387);
    match(ScalaParser::T__13);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelfInvocationContext ------------------------------------------------------------------

ScalaParser::SelfInvocationContext::SelfInvocationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ScalaParser::ArgumentExprsContext *> ScalaParser::SelfInvocationContext::argumentExprs() {
  return getRuleContexts<ScalaParser::ArgumentExprsContext>();
}

ScalaParser::ArgumentExprsContext* ScalaParser::SelfInvocationContext::argumentExprs(size_t i) {
  return getRuleContext<ScalaParser::ArgumentExprsContext>(i);
}


size_t ScalaParser::SelfInvocationContext::getRuleIndex() const {
  return ScalaParser::RuleSelfInvocation;
}

void ScalaParser::SelfInvocationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelfInvocation(this);
}

void ScalaParser::SelfInvocationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelfInvocation(this);
}

ScalaParser::SelfInvocationContext* ScalaParser::selfInvocation() {
  SelfInvocationContext *_localctx = _tracker.createInstance<SelfInvocationContext>(_ctx, getState());
  enterRule(_localctx, 200, ScalaParser::RuleSelfInvocation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1389);
    match(ScalaParser::T__4);
    setState(1391); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1390);
              argumentExprs();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1393); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 200, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TopStatSeqContext ------------------------------------------------------------------

ScalaParser::TopStatSeqContext::TopStatSeqContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ScalaParser::TopStatContext *> ScalaParser::TopStatSeqContext::topStat() {
  return getRuleContexts<ScalaParser::TopStatContext>();
}

ScalaParser::TopStatContext* ScalaParser::TopStatSeqContext::topStat(size_t i) {
  return getRuleContext<ScalaParser::TopStatContext>(i);
}


size_t ScalaParser::TopStatSeqContext::getRuleIndex() const {
  return ScalaParser::RuleTopStatSeq;
}

void ScalaParser::TopStatSeqContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTopStatSeq(this);
}

void ScalaParser::TopStatSeqContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTopStatSeq(this);
}

ScalaParser::TopStatSeqContext* ScalaParser::topStatSeq() {
  TopStatSeqContext *_localctx = _tracker.createInstance<TopStatSeqContext>(_ctx, getState());
  enterRule(_localctx, 202, ScalaParser::RuleTopStatSeq);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1396); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1395);
      topStat();
      setState(1398); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3386167059577569280) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TopStatContext ------------------------------------------------------------------

ScalaParser::TopStatContext::TopStatContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ScalaParser::TmplDefContext* ScalaParser::TopStatContext::tmplDef() {
  return getRuleContext<ScalaParser::TmplDefContext>(0);
}

std::vector<ScalaParser::AnnotationContext *> ScalaParser::TopStatContext::annotation() {
  return getRuleContexts<ScalaParser::AnnotationContext>();
}

ScalaParser::AnnotationContext* ScalaParser::TopStatContext::annotation(size_t i) {
  return getRuleContext<ScalaParser::AnnotationContext>(i);
}

std::vector<ScalaParser::ModifierContext *> ScalaParser::TopStatContext::modifier() {
  return getRuleContexts<ScalaParser::ModifierContext>();
}

ScalaParser::ModifierContext* ScalaParser::TopStatContext::modifier(size_t i) {
  return getRuleContext<ScalaParser::ModifierContext>(i);
}

std::vector<tree::TerminalNode *> ScalaParser::TopStatContext::NL() {
  return getTokens(ScalaParser::NL);
}

tree::TerminalNode* ScalaParser::TopStatContext::NL(size_t i) {
  return getToken(ScalaParser::NL, i);
}

ScalaParser::Import_Context* ScalaParser::TopStatContext::import_() {
  return getRuleContext<ScalaParser::Import_Context>(0);
}

ScalaParser::PackagingContext* ScalaParser::TopStatContext::packaging() {
  return getRuleContext<ScalaParser::PackagingContext>(0);
}

ScalaParser::PackageObjectContext* ScalaParser::TopStatContext::packageObject() {
  return getRuleContext<ScalaParser::PackageObjectContext>(0);
}


size_t ScalaParser::TopStatContext::getRuleIndex() const {
  return ScalaParser::RuleTopStat;
}

void ScalaParser::TopStatContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTopStat(this);
}

void ScalaParser::TopStatContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTopStat(this);
}

ScalaParser::TopStatContext* ScalaParser::topStat() {
  TopStatContext *_localctx = _tracker.createInstance<TopStatContext>(_ctx, getState());
  enterRule(_localctx, 204, ScalaParser::RuleTopStat);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1419);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 205, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1406);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == ScalaParser::T__43) {
        setState(1400);
        annotation();
        setState(1402);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == ScalaParser::NL) {
          setState(1401);
          match(ScalaParser::NL);
        }
        setState(1408);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1412);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 35466946581364736) != 0)) {
        setState(1409);
        modifier();
        setState(1414);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1415);
      tmplDef();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1416);
      import_();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1417);
      packaging();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1418);
      packageObject();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PackagingContext ------------------------------------------------------------------

ScalaParser::PackagingContext::PackagingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ScalaParser::QualIdContext* ScalaParser::PackagingContext::qualId() {
  return getRuleContext<ScalaParser::QualIdContext>(0);
}

ScalaParser::TopStatSeqContext* ScalaParser::PackagingContext::topStatSeq() {
  return getRuleContext<ScalaParser::TopStatSeqContext>(0);
}

tree::TerminalNode* ScalaParser::PackagingContext::NL() {
  return getToken(ScalaParser::NL, 0);
}


size_t ScalaParser::PackagingContext::getRuleIndex() const {
  return ScalaParser::RulePackaging;
}

void ScalaParser::PackagingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPackaging(this);
}

void ScalaParser::PackagingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPackaging(this);
}

ScalaParser::PackagingContext* ScalaParser::packaging() {
  PackagingContext *_localctx = _tracker.createInstance<PackagingContext>(_ctx, getState());
  enterRule(_localctx, 206, ScalaParser::RulePackaging);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1421);
    match(ScalaParser::T__60);
    setState(1422);
    qualId();
    setState(1424);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ScalaParser::NL) {
      setState(1423);
      match(ScalaParser::NL);
    }
    setState(1426);
    match(ScalaParser::T__12);
    setState(1427);
    topStatSeq();
    setState(1428);
    match(ScalaParser::T__13);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PackageObjectContext ------------------------------------------------------------------

ScalaParser::PackageObjectContext::PackageObjectContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ScalaParser::ObjectDefContext* ScalaParser::PackageObjectContext::objectDef() {
  return getRuleContext<ScalaParser::ObjectDefContext>(0);
}


size_t ScalaParser::PackageObjectContext::getRuleIndex() const {
  return ScalaParser::RulePackageObject;
}

void ScalaParser::PackageObjectContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPackageObject(this);
}

void ScalaParser::PackageObjectContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPackageObject(this);
}

ScalaParser::PackageObjectContext* ScalaParser::packageObject() {
  PackageObjectContext *_localctx = _tracker.createInstance<PackageObjectContext>(_ctx, getState());
  enterRule(_localctx, 208, ScalaParser::RulePackageObject);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1430);
    match(ScalaParser::T__60);
    setState(1431);
    match(ScalaParser::T__57);
    setState(1432);
    objectDef();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CompilationUnitContext ------------------------------------------------------------------

ScalaParser::CompilationUnitContext::CompilationUnitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ScalaParser::TopStatSeqContext* ScalaParser::CompilationUnitContext::topStatSeq() {
  return getRuleContext<ScalaParser::TopStatSeqContext>(0);
}

std::vector<ScalaParser::QualIdContext *> ScalaParser::CompilationUnitContext::qualId() {
  return getRuleContexts<ScalaParser::QualIdContext>();
}

ScalaParser::QualIdContext* ScalaParser::CompilationUnitContext::qualId(size_t i) {
  return getRuleContext<ScalaParser::QualIdContext>(i);
}


size_t ScalaParser::CompilationUnitContext::getRuleIndex() const {
  return ScalaParser::RuleCompilationUnit;
}

void ScalaParser::CompilationUnitContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCompilationUnit(this);
}

void ScalaParser::CompilationUnitContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ScalaListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCompilationUnit(this);
}

ScalaParser::CompilationUnitContext* ScalaParser::compilationUnit() {
  CompilationUnitContext *_localctx = _tracker.createInstance<CompilationUnitContext>(_ctx, getState());
  enterRule(_localctx, 210, ScalaParser::RuleCompilationUnit);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1438);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 207, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1434);
        match(ScalaParser::T__60);
        setState(1435);
        qualId(); 
      }
      setState(1440);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 207, _ctx);
    }
    setState(1441);
    topStatSeq();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool ScalaParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 3: return stableIdSempred(antlrcpp::downCast<StableIdContext *>(context), predicateIndex);
    case 12: return simpleTypeSempred(antlrcpp::downCast<SimpleTypeContext *>(context), predicateIndex);
    case 23: return infixExprSempred(antlrcpp::downCast<InfixExprContext *>(context), predicateIndex);
    case 26: return simpleExpr1Sempred(antlrcpp::downCast<SimpleExpr1Context *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool ScalaParser::stableIdSempred(StableIdContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

bool ScalaParser::simpleTypeSempred(SimpleTypeContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 1: return precpred(_ctx, 4);
    case 2: return precpred(_ctx, 3);

  default:
    break;
  }
  return true;
}

bool ScalaParser::infixExprSempred(InfixExprContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 3: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool ScalaParser::simpleExpr1Sempred(SimpleExpr1Context *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 4: return precpred(_ctx, 4);
    case 5: return precpred(_ctx, 2);
    case 6: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

void ScalaParser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  scalaParserInitialize();
#else
  ::antlr4::internal::call_once(scalaParserOnceFlag, scalaParserInitialize);
#endif
}
