
// Generated from JavaParser.g4 by ANTLR 4.11.1


#include "JavaParserListener.h"

#include "JavaParser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct JavaParserStaticData final {
  JavaParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  JavaParserStaticData(const JavaParserStaticData&) = delete;
  JavaParserStaticData(JavaParserStaticData&&) = delete;
  JavaParserStaticData& operator=(const JavaParserStaticData&) = delete;
  JavaParserStaticData& operator=(JavaParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag javaparserParserOnceFlag;
JavaParserStaticData *javaparserParserStaticData = nullptr;

void javaparserParserInitialize() {
  assert(javaparserParserStaticData == nullptr);
  auto staticData = std::make_unique<JavaParserStaticData>(
    std::vector<std::string>{
      "compilationUnit", "packageDeclaration", "importDeclaration", "typeDeclaration", 
      "modifier", "classOrInterfaceModifier", "variableModifier", "classDeclaration", 
      "typeParameters", "typeParameter", "typeBound", "enumDeclaration", 
      "enumConstants", "enumConstant", "enumBodyDeclarations", "interfaceDeclaration", 
      "classBody", "interfaceBody", "classBodyDeclaration", "memberDeclaration", 
      "methodDeclaration", "methodBody", "typeTypeOrVoid", "genericMethodDeclaration", 
      "genericConstructorDeclaration", "constructorDeclaration", "fieldDeclaration", 
      "interfaceBodyDeclaration", "interfaceMemberDeclaration", "constDeclaration", 
      "constantDeclarator", "interfaceMethodDeclaration", "interfaceMethodModifier", 
      "genericInterfaceMethodDeclaration", "interfaceCommonBodyDeclaration", 
      "variableDeclarators", "variableDeclarator", "variableDeclaratorId", 
      "variableInitializer", "arrayInitializer", "classOrInterfaceType", 
      "typeArgument", "qualifiedNameList", "formalParameters", "receiverParameter", 
      "formalParameterList", "formalParameter", "lastFormalParameter", "lambdaLVTIList", 
      "lambdaLVTIParameter", "qualifiedName", "literal", "integerLiteral", 
      "floatLiteral", "altAnnotationQualifiedName", "annotation", "elementValuePairs", 
      "elementValuePair", "elementValue", "elementValueArrayInitializer", 
      "annotationTypeDeclaration", "annotationTypeBody", "annotationTypeElementDeclaration", 
      "annotationTypeElementRest", "annotationMethodOrConstantRest", "annotationMethodRest", 
      "annotationConstantRest", "defaultValue", "moduleDeclaration", "moduleBody", 
      "moduleDirective", "requiresModifier", "recordDeclaration", "recordHeader", 
      "recordComponentList", "recordComponent", "recordBody", "block", "blockStatement", 
      "localVariableDeclaration", "identifier", "typeIdentifier", "localTypeDeclaration", 
      "statement", "catchClause", "catchType", "finallyBlock", "resourceSpecification", 
      "resources", "resource", "switchBlockStatementGroup", "switchLabel", 
      "forControl", "forInit", "enhancedForControl", "parExpression", "expressionList", 
      "methodCall", "expression", "pattern", "lambdaExpression", "lambdaParameters", 
      "lambdaBody", "primary", "switchExpression", "switchLabeledRule", 
      "guardedPattern", "switchRuleOutcome", "classType", "creator", "createdName", 
      "innerCreator", "arrayCreatorRest", "classCreatorRest", "explicitGenericInvocation", 
      "typeArgumentsOrDiamond", "nonWildcardTypeArgumentsOrDiamond", "nonWildcardTypeArguments", 
      "typeList", "typeType", "primitiveType", "typeArguments", "superSuffix", 
      "explicitGenericInvocationSuffix", "arguments"
    },
    std::vector<std::string>{
      "", "'abstract'", "'assert'", "'boolean'", "'break'", "'byte'", "'case'", 
      "'catch'", "'char'", "'class'", "'const'", "'continue'", "'default'", 
      "'do'", "'double'", "'else'", "'enum'", "'extends'", "'final'", "'finally'", 
      "'float'", "'for'", "'if'", "'goto'", "'implements'", "'import'", 
      "'instanceof'", "'int'", "'interface'", "'long'", "'native'", "'new'", 
      "'package'", "'private'", "'protected'", "'public'", "'return'", "'short'", 
      "'static'", "'strictfp'", "'super'", "'switch'", "'synchronized'", 
      "'this'", "'throw'", "'throws'", "'transient'", "'try'", "'void'", 
      "'volatile'", "'while'", "'module'", "'open'", "'requires'", "'exports'", 
      "'opens'", "'to'", "'uses'", "'provides'", "'with'", "'transitive'", 
      "'var'", "'yield'", "'record'", "'sealed'", "'permits'", "'non-sealed'", 
      "", "", "", "", "", "", "", "", "", "", "'null'", "'('", "')'", "'{'", 
      "'}'", "'['", "']'", "';'", "','", "'.'", "'='", "'>'", "'<'", "'!'", 
      "'~'", "'\\u003F'", "':'", "'=='", "'<='", "'>='", "'!='", "'&&'", 
      "'||'", "'++'", "'--'", "'+'", "'-'", "'*'", "'/'", "'&'", "'|'", 
      "'^'", "'%'", "'+='", "'-='", "'*='", "'/='", "'&='", "'|='", "'^='", 
      "'%='", "'<<='", "'>>='", "'>>>='", "'->'", "'::'", "'@'", "'...'"
    },
    std::vector<std::string>{
      "", "ABSTRACT", "ASSERT", "BOOLEAN", "BREAK", "BYTE", "CASE", "CATCH", 
      "CHAR", "CLASS", "CONST", "CONTINUE", "DEFAULT", "DO", "DOUBLE", "ELSE", 
      "ENUM", "EXTENDS", "FINAL", "FINALLY", "FLOAT", "FOR", "IF", "GOTO", 
      "IMPLEMENTS", "IMPORT", "INSTANCEOF", "INT", "INTERFACE", "LONG", 
      "NATIVE", "NEW", "PACKAGE", "PRIVATE", "PROTECTED", "PUBLIC", "RETURN", 
      "SHORT", "STATIC", "STRICTFP", "SUPER", "SWITCH", "SYNCHRONIZED", 
      "THIS", "THROW", "THROWS", "TRANSIENT", "TRY", "VOID", "VOLATILE", 
      "WHILE", "MODULE", "OPEN", "REQUIRES", "EXPORTS", "OPENS", "TO", "USES", 
      "PROVIDES", "WITH", "TRANSITIVE", "VAR", "YIELD", "RECORD", "SEALED", 
      "PERMITS", "NON_SEALED", "DECIMAL_LITERAL", "HEX_LITERAL", "OCT_LITERAL", 
      "BINARY_LITERAL", "FLOAT_LITERAL", "HEX_FLOAT_LITERAL", "BOOL_LITERAL", 
      "CHAR_LITERAL", "STRING_LITERAL", "TEXT_BLOCK", "NULL_LITERAL", "LPAREN", 
      "RPAREN", "LBRACE", "RBRACE", "LBRACK", "RBRACK", "SEMI", "COMMA", 
      "DOT", "ASSIGN", "GT", "LT", "BANG", "TILDE", "QUESTION", "COLON", 
      "EQUAL", "LE", "GE", "NOTEQUAL", "AND", "OR", "INC", "DEC", "ADD", 
      "SUB", "MUL", "DIV", "BITAND", "BITOR", "CARET", "MOD", "ADD_ASSIGN", 
      "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", 
      "XOR_ASSIGN", "MOD_ASSIGN", "LSHIFT_ASSIGN", "RSHIFT_ASSIGN", "URSHIFT_ASSIGN", 
      "ARROW", "COLONCOLON", "AT", "ELLIPSIS", "WS", "COMMENT", "LINE_COMMENT", 
      "IDENTIFIER"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,128,1769,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,
  	7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,
  	7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,
  	7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,
  	7,122,2,123,7,123,2,124,7,124,1,0,3,0,252,8,0,1,0,5,0,255,8,0,10,0,12,
  	0,258,9,0,1,0,5,0,261,8,0,10,0,12,0,264,9,0,1,0,1,0,1,0,3,0,269,8,0,1,
  	1,5,1,272,8,1,10,1,12,1,275,9,1,1,1,1,1,1,1,1,1,1,2,1,2,3,2,283,8,2,1,
  	2,1,2,1,2,3,2,288,8,2,1,2,1,2,1,3,5,3,293,8,3,10,3,12,3,296,9,3,1,3,1,
  	3,1,3,1,3,1,3,3,3,303,8,3,1,3,3,3,306,8,3,1,4,1,4,1,4,1,4,1,4,3,4,313,
  	8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,325,8,5,1,6,1,6,3,6,329,
  	8,6,1,7,1,7,1,7,3,7,334,8,7,1,7,1,7,3,7,338,8,7,1,7,1,7,3,7,342,8,7,1,
  	7,1,7,3,7,346,8,7,1,7,1,7,1,8,1,8,1,8,1,8,5,8,354,8,8,10,8,12,8,357,9,
  	8,1,8,1,8,1,9,5,9,362,8,9,10,9,12,9,365,9,9,1,9,1,9,1,9,5,9,370,8,9,10,
  	9,12,9,373,9,9,1,9,3,9,376,8,9,1,10,1,10,1,10,5,10,381,8,10,10,10,12,
  	10,384,9,10,1,11,1,11,1,11,1,11,3,11,390,8,11,1,11,1,11,3,11,394,8,11,
  	1,11,3,11,397,8,11,1,11,3,11,400,8,11,1,11,1,11,1,12,1,12,1,12,5,12,407,
  	8,12,10,12,12,12,410,9,12,1,13,5,13,413,8,13,10,13,12,13,416,9,13,1,13,
  	1,13,3,13,420,8,13,1,13,3,13,423,8,13,1,14,1,14,5,14,427,8,14,10,14,12,
  	14,430,9,14,1,15,1,15,1,15,3,15,435,8,15,1,15,1,15,3,15,439,8,15,1,15,
  	1,15,3,15,443,8,15,1,15,1,15,1,16,1,16,5,16,449,8,16,10,16,12,16,452,
  	9,16,1,16,1,16,1,17,1,17,5,17,458,8,17,10,17,12,17,461,9,17,1,17,1,17,
  	1,18,1,18,3,18,467,8,18,1,18,1,18,5,18,471,8,18,10,18,12,18,474,9,18,
  	1,18,3,18,477,8,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
  	3,19,489,8,19,1,20,1,20,1,20,1,20,1,20,5,20,496,8,20,10,20,12,20,499,
  	9,20,1,20,1,20,3,20,503,8,20,1,20,1,20,1,21,1,21,3,21,509,8,21,1,22,1,
  	22,3,22,513,8,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,25,3,
  	25,525,8,25,1,25,1,25,1,26,1,26,1,26,1,26,1,27,5,27,534,8,27,10,27,12,
  	27,537,9,27,1,27,1,27,3,27,541,8,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
  	1,28,3,28,551,8,28,1,29,1,29,1,29,1,29,5,29,557,8,29,10,29,12,29,560,
  	9,29,1,29,1,29,1,30,1,30,1,30,5,30,567,8,30,10,30,12,30,570,9,30,1,30,
  	1,30,1,30,1,31,5,31,576,8,31,10,31,12,31,579,9,31,1,31,1,31,1,32,1,32,
  	1,32,1,32,1,32,1,32,3,32,589,8,32,1,33,5,33,592,8,33,10,33,12,33,595,
  	9,33,1,33,1,33,1,33,1,34,5,34,601,8,34,10,34,12,34,604,9,34,1,34,1,34,
  	1,34,1,34,1,34,5,34,611,8,34,10,34,12,34,614,9,34,1,34,1,34,3,34,618,
  	8,34,1,34,1,34,1,35,1,35,1,35,5,35,625,8,35,10,35,12,35,628,9,35,1,36,
  	1,36,1,36,3,36,633,8,36,1,37,1,37,1,37,5,37,638,8,37,10,37,12,37,641,
  	9,37,1,38,1,38,3,38,645,8,38,1,39,1,39,1,39,1,39,5,39,651,8,39,10,39,
  	12,39,654,9,39,1,39,3,39,657,8,39,3,39,659,8,39,1,39,1,39,1,40,1,40,3,
  	40,665,8,40,1,40,1,40,5,40,669,8,40,10,40,12,40,672,9,40,1,40,1,40,3,
  	40,676,8,40,1,41,1,41,5,41,680,8,41,10,41,12,41,683,9,41,1,41,1,41,1,
  	41,3,41,688,8,41,3,41,690,8,41,1,42,1,42,1,42,5,42,695,8,42,10,42,12,
  	42,698,9,42,1,43,1,43,3,43,702,8,43,1,43,1,43,1,43,3,43,707,8,43,1,43,
  	3,43,710,8,43,3,43,712,8,43,1,43,1,43,1,44,1,44,1,44,1,44,5,44,720,8,
  	44,10,44,12,44,723,9,44,1,44,1,44,1,45,1,45,1,45,5,45,730,8,45,10,45,
  	12,45,733,9,45,1,45,1,45,3,45,737,8,45,1,45,3,45,740,8,45,1,46,5,46,743,
  	8,46,10,46,12,46,746,9,46,1,46,1,46,1,46,1,47,5,47,752,8,47,10,47,12,
  	47,755,9,47,1,47,1,47,5,47,759,8,47,10,47,12,47,762,9,47,1,47,1,47,1,
  	47,1,48,1,48,1,48,5,48,770,8,48,10,48,12,48,773,9,48,1,49,5,49,776,8,
  	49,10,49,12,49,779,9,49,1,49,1,49,1,49,1,50,1,50,1,50,5,50,787,8,50,10,
  	50,12,50,790,9,50,1,51,1,51,1,51,1,51,1,51,1,51,1,51,3,51,799,8,51,1,
  	52,1,52,1,53,1,53,1,54,1,54,1,54,5,54,808,8,54,10,54,12,54,811,9,54,1,
  	54,1,54,1,54,1,55,1,55,1,55,3,55,819,8,55,1,55,1,55,1,55,3,55,824,8,55,
  	1,55,3,55,827,8,55,1,56,1,56,1,56,5,56,832,8,56,10,56,12,56,835,9,56,
  	1,57,1,57,1,57,1,57,1,58,1,58,1,58,3,58,844,8,58,1,59,1,59,1,59,1,59,
  	5,59,850,8,59,10,59,12,59,853,9,59,3,59,855,8,59,1,59,3,59,858,8,59,1,
  	59,1,59,1,60,1,60,1,60,1,60,1,60,1,61,1,61,5,61,869,8,61,10,61,12,61,
  	872,9,61,1,61,1,61,1,62,5,62,877,8,62,10,62,12,62,880,9,62,1,62,1,62,
  	3,62,884,8,62,1,63,1,63,1,63,1,63,1,63,1,63,3,63,892,8,63,1,63,1,63,3,
  	63,896,8,63,1,63,1,63,3,63,900,8,63,1,63,1,63,3,63,904,8,63,1,63,1,63,
  	3,63,908,8,63,3,63,910,8,63,1,64,1,64,3,64,914,8,64,1,65,1,65,1,65,1,
  	65,3,65,920,8,65,1,66,1,66,1,67,1,67,1,67,1,68,3,68,928,8,68,1,68,1,68,
  	1,68,1,68,1,69,1,69,5,69,936,8,69,10,69,12,69,939,9,69,1,69,1,69,1,70,
  	1,70,5,70,945,8,70,10,70,12,70,948,9,70,1,70,1,70,1,70,1,70,1,70,1,70,
  	1,70,3,70,957,8,70,1,70,1,70,1,70,1,70,1,70,1,70,3,70,965,8,70,1,70,1,
  	70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,3,70,979,8,70,1,
  	71,1,71,1,72,1,72,1,72,3,72,986,8,72,1,72,1,72,1,72,3,72,991,8,72,1,72,
  	1,72,1,73,1,73,3,73,997,8,73,1,73,1,73,1,74,1,74,1,74,5,74,1004,8,74,
  	10,74,12,74,1007,9,74,1,75,1,75,1,75,1,76,1,76,5,76,1014,8,76,10,76,12,
  	76,1017,9,76,1,76,1,76,1,77,1,77,5,77,1023,8,77,10,77,12,77,1026,9,77,
  	1,77,1,77,1,78,1,78,1,78,1,78,1,78,3,78,1035,8,78,1,79,5,79,1038,8,79,
  	10,79,12,79,1041,9,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,3,79,1051,
  	8,79,1,80,1,80,1,81,1,81,1,82,5,82,1058,8,82,10,82,12,82,1061,9,82,1,
  	82,1,82,1,82,3,82,1066,8,82,1,82,3,82,1069,8,82,1,83,1,83,1,83,1,83,1,
  	83,3,83,1076,8,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,3,83,1085,8,83,1,
  	83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,
  	83,1,83,1,83,1,83,1,83,4,83,1106,8,83,11,83,12,83,1107,1,83,3,83,1111,
  	8,83,1,83,3,83,1114,8,83,1,83,1,83,1,83,1,83,5,83,1120,8,83,10,83,12,
  	83,1123,9,83,1,83,3,83,1126,8,83,1,83,1,83,1,83,1,83,5,83,1132,8,83,10,
  	83,12,83,1135,9,83,1,83,5,83,1138,8,83,10,83,12,83,1141,9,83,1,83,1,83,
  	1,83,1,83,1,83,1,83,1,83,1,83,3,83,1151,8,83,1,83,1,83,1,83,1,83,1,83,
  	1,83,1,83,3,83,1160,8,83,1,83,1,83,1,83,3,83,1165,8,83,1,83,1,83,1,83,
  	1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,3,83,1178,8,83,1,83,1,83,1,83,
  	1,83,3,83,1184,8,83,1,84,1,84,1,84,5,84,1189,8,84,10,84,12,84,1192,9,
  	84,1,84,1,84,1,84,1,84,1,84,1,85,1,85,1,85,5,85,1202,8,85,10,85,12,85,
  	1205,9,85,1,86,1,86,1,86,1,87,1,87,1,87,3,87,1213,8,87,1,87,1,87,1,88,
  	1,88,1,88,5,88,1220,8,88,10,88,12,88,1223,9,88,1,89,5,89,1226,8,89,10,
  	89,12,89,1229,9,89,1,89,1,89,1,89,1,89,1,89,3,89,1236,8,89,1,89,1,89,
  	1,89,1,89,3,89,1242,8,89,1,90,4,90,1245,8,90,11,90,12,90,1246,1,90,4,
  	90,1250,8,90,11,90,12,90,1251,1,91,1,91,1,91,1,91,1,91,1,91,3,91,1260,
  	8,91,1,91,1,91,1,91,3,91,1265,8,91,1,92,1,92,3,92,1269,8,92,1,92,1,92,
  	3,92,1273,8,92,1,92,1,92,3,92,1277,8,92,3,92,1279,8,92,1,93,1,93,3,93,
  	1283,8,93,1,94,5,94,1286,8,94,10,94,12,94,1289,9,94,1,94,1,94,3,94,1293,
  	8,94,1,94,1,94,1,94,1,94,1,95,1,95,1,95,1,95,1,96,1,96,1,96,5,96,1306,
  	8,96,10,96,12,96,1309,9,96,1,97,1,97,1,97,3,97,1314,8,97,1,97,1,97,1,
  	97,1,97,1,97,3,97,1321,8,97,1,97,1,97,1,97,1,97,3,97,1327,8,97,1,97,3,
  	97,1330,8,97,1,98,1,98,1,98,1,98,1,98,1,98,1,98,5,98,1339,8,98,10,98,
  	12,98,1342,9,98,1,98,1,98,1,98,5,98,1347,8,98,10,98,12,98,1350,9,98,1,
  	98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,3,98,1364,8,
  	98,1,98,1,98,3,98,1368,8,98,1,98,1,98,1,98,3,98,1373,8,98,1,98,1,98,3,
  	98,1377,8,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,
  	98,1,98,1,98,3,98,1393,8,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,
  	98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,
  	98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,
  	98,1,98,3,98,1433,8,98,1,98,1,98,1,98,1,98,3,98,1439,8,98,1,98,1,98,1,
  	98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,3,98,1452,8,98,1,98,1,98,1,
  	98,3,98,1457,8,98,1,98,5,98,1460,8,98,10,98,12,98,1463,9,98,1,99,5,99,
  	1466,8,99,10,99,12,99,1469,9,99,1,99,1,99,5,99,1473,8,99,10,99,12,99,
  	1476,9,99,1,99,1,99,1,100,1,100,1,100,1,100,1,101,1,101,1,101,3,101,1487,
  	8,101,1,101,1,101,1,101,1,101,1,101,5,101,1494,8,101,10,101,12,101,1497,
  	9,101,1,101,1,101,1,101,1,101,3,101,1503,8,101,1,101,3,101,1506,8,101,
  	1,102,1,102,3,102,1510,8,102,1,103,1,103,1,103,1,103,1,103,1,103,1,103,
  	1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,3,103,1528,8,103,
  	3,103,1530,8,103,1,104,1,104,1,104,1,104,5,104,1536,8,104,10,104,12,104,
  	1539,9,104,1,104,1,104,1,105,1,105,1,105,1,105,3,105,1547,8,105,1,105,
  	1,105,1,105,1,105,1,105,3,105,1554,8,105,1,106,1,106,1,106,1,106,1,106,
  	1,106,5,106,1562,8,106,10,106,12,106,1565,9,106,1,106,1,106,5,106,1569,
  	8,106,10,106,12,106,1572,9,106,1,106,1,106,1,106,5,106,1577,8,106,10,
  	106,12,106,1580,9,106,3,106,1582,8,106,1,106,1,106,1,106,5,106,1587,8,
  	106,10,106,12,106,1590,9,106,1,107,1,107,5,107,1594,8,107,10,107,12,107,
  	1597,9,107,3,107,1599,8,107,1,108,1,108,1,108,3,108,1604,8,108,1,108,
  	5,108,1607,8,108,10,108,12,108,1610,9,108,1,108,1,108,3,108,1614,8,108,
  	1,109,1,109,1,109,1,109,1,109,1,109,1,109,3,109,1623,8,109,3,109,1625,
  	8,109,1,110,1,110,3,110,1629,8,110,1,110,1,110,1,110,3,110,1634,8,110,
  	5,110,1636,8,110,10,110,12,110,1639,9,110,1,110,3,110,1642,8,110,1,111,
  	1,111,3,111,1646,8,111,1,111,1,111,1,112,1,112,1,112,1,112,5,112,1654,
  	8,112,10,112,12,112,1657,9,112,1,112,1,112,1,112,1,112,1,112,1,112,1,
  	112,5,112,1666,8,112,10,112,12,112,1669,9,112,1,112,1,112,5,112,1673,
  	8,112,10,112,12,112,1676,9,112,3,112,1678,8,112,1,113,1,113,3,113,1682,
  	8,113,1,114,1,114,1,114,1,115,1,115,1,115,3,115,1690,8,115,1,116,1,116,
  	1,116,3,116,1695,8,116,1,117,1,117,1,117,1,117,1,118,1,118,1,118,5,118,
  	1704,8,118,10,118,12,118,1707,9,118,1,119,5,119,1710,8,119,10,119,12,
  	119,1713,9,119,1,119,1,119,3,119,1717,8,119,1,119,5,119,1720,8,119,10,
  	119,12,119,1723,9,119,1,119,1,119,5,119,1727,8,119,10,119,12,119,1730,
  	9,119,1,120,1,120,1,121,1,121,1,121,1,121,5,121,1738,8,121,10,121,12,
  	121,1741,9,121,1,121,1,121,1,122,1,122,1,122,3,122,1748,8,122,1,122,1,
  	122,3,122,1752,8,122,3,122,1754,8,122,1,123,1,123,1,123,1,123,1,123,3,
  	123,1761,8,123,1,124,1,124,3,124,1765,8,124,1,124,1,124,1,124,0,2,196,
  	212,125,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,
  	44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,
  	90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,
  	128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,
  	164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,
  	200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,
  	236,238,240,242,244,246,248,0,16,2,0,17,17,40,40,1,0,67,70,1,0,71,72,
  	2,0,38,38,60,60,2,0,51,65,128,128,3,0,51,60,63,65,128,128,1,0,100,103,
  	1,0,90,91,2,0,104,105,109,109,1,0,102,103,2,0,88,89,95,96,2,0,94,94,97,
  	97,2,0,87,87,110,120,1,0,100,101,2,0,93,93,121,121,8,0,3,3,5,5,8,8,14,
  	14,20,20,27,27,29,29,37,37,1968,0,268,1,0,0,0,2,273,1,0,0,0,4,280,1,0,
  	0,0,6,305,1,0,0,0,8,312,1,0,0,0,10,324,1,0,0,0,12,328,1,0,0,0,14,330,
  	1,0,0,0,16,349,1,0,0,0,18,363,1,0,0,0,20,377,1,0,0,0,22,385,1,0,0,0,24,
  	403,1,0,0,0,26,414,1,0,0,0,28,424,1,0,0,0,30,431,1,0,0,0,32,446,1,0,0,
  	0,34,455,1,0,0,0,36,476,1,0,0,0,38,488,1,0,0,0,40,490,1,0,0,0,42,508,
  	1,0,0,0,44,512,1,0,0,0,46,514,1,0,0,0,48,517,1,0,0,0,50,520,1,0,0,0,52,
  	528,1,0,0,0,54,540,1,0,0,0,56,550,1,0,0,0,58,552,1,0,0,0,60,563,1,0,0,
  	0,62,577,1,0,0,0,64,588,1,0,0,0,66,593,1,0,0,0,68,602,1,0,0,0,70,621,
  	1,0,0,0,72,629,1,0,0,0,74,634,1,0,0,0,76,644,1,0,0,0,78,646,1,0,0,0,80,
  	670,1,0,0,0,82,689,1,0,0,0,84,691,1,0,0,0,86,699,1,0,0,0,88,715,1,0,0,
  	0,90,739,1,0,0,0,92,744,1,0,0,0,94,753,1,0,0,0,96,766,1,0,0,0,98,777,
  	1,0,0,0,100,783,1,0,0,0,102,798,1,0,0,0,104,800,1,0,0,0,106,802,1,0,0,
  	0,108,809,1,0,0,0,110,818,1,0,0,0,112,828,1,0,0,0,114,836,1,0,0,0,116,
  	843,1,0,0,0,118,845,1,0,0,0,120,861,1,0,0,0,122,866,1,0,0,0,124,883,1,
  	0,0,0,126,909,1,0,0,0,128,913,1,0,0,0,130,915,1,0,0,0,132,921,1,0,0,0,
  	134,923,1,0,0,0,136,927,1,0,0,0,138,933,1,0,0,0,140,978,1,0,0,0,142,980,
  	1,0,0,0,144,982,1,0,0,0,146,994,1,0,0,0,148,1000,1,0,0,0,150,1008,1,0,
  	0,0,152,1011,1,0,0,0,154,1020,1,0,0,0,156,1034,1,0,0,0,158,1039,1,0,0,
  	0,160,1052,1,0,0,0,162,1054,1,0,0,0,164,1068,1,0,0,0,166,1183,1,0,0,0,
  	168,1185,1,0,0,0,170,1198,1,0,0,0,172,1206,1,0,0,0,174,1209,1,0,0,0,176,
  	1216,1,0,0,0,178,1241,1,0,0,0,180,1244,1,0,0,0,182,1264,1,0,0,0,184,1278,
  	1,0,0,0,186,1282,1,0,0,0,188,1287,1,0,0,0,190,1298,1,0,0,0,192,1302,1,
  	0,0,0,194,1329,1,0,0,0,196,1376,1,0,0,0,198,1467,1,0,0,0,200,1479,1,0,
  	0,0,202,1505,1,0,0,0,204,1509,1,0,0,0,206,1529,1,0,0,0,208,1531,1,0,0,
  	0,210,1553,1,0,0,0,212,1581,1,0,0,0,214,1598,1,0,0,0,216,1603,1,0,0,0,
  	218,1624,1,0,0,0,220,1641,1,0,0,0,222,1643,1,0,0,0,224,1649,1,0,0,0,226,
  	1679,1,0,0,0,228,1683,1,0,0,0,230,1689,1,0,0,0,232,1694,1,0,0,0,234,1696,
  	1,0,0,0,236,1700,1,0,0,0,238,1711,1,0,0,0,240,1731,1,0,0,0,242,1733,1,
  	0,0,0,244,1753,1,0,0,0,246,1760,1,0,0,0,248,1762,1,0,0,0,250,252,3,2,
  	1,0,251,250,1,0,0,0,251,252,1,0,0,0,252,256,1,0,0,0,253,255,3,4,2,0,254,
  	253,1,0,0,0,255,258,1,0,0,0,256,254,1,0,0,0,256,257,1,0,0,0,257,262,1,
  	0,0,0,258,256,1,0,0,0,259,261,3,6,3,0,260,259,1,0,0,0,261,264,1,0,0,0,
  	262,260,1,0,0,0,262,263,1,0,0,0,263,269,1,0,0,0,264,262,1,0,0,0,265,266,
  	3,136,68,0,266,267,5,0,0,1,267,269,1,0,0,0,268,251,1,0,0,0,268,265,1,
  	0,0,0,269,1,1,0,0,0,270,272,3,110,55,0,271,270,1,0,0,0,272,275,1,0,0,
  	0,273,271,1,0,0,0,273,274,1,0,0,0,274,276,1,0,0,0,275,273,1,0,0,0,276,
  	277,5,32,0,0,277,278,3,100,50,0,278,279,5,84,0,0,279,3,1,0,0,0,280,282,
  	5,25,0,0,281,283,5,38,0,0,282,281,1,0,0,0,282,283,1,0,0,0,283,284,1,0,
  	0,0,284,287,3,100,50,0,285,286,5,86,0,0,286,288,5,104,0,0,287,285,1,0,
  	0,0,287,288,1,0,0,0,288,289,1,0,0,0,289,290,5,84,0,0,290,5,1,0,0,0,291,
  	293,3,10,5,0,292,291,1,0,0,0,293,296,1,0,0,0,294,292,1,0,0,0,294,295,
  	1,0,0,0,295,302,1,0,0,0,296,294,1,0,0,0,297,303,3,14,7,0,298,303,3,22,
  	11,0,299,303,3,30,15,0,300,303,3,120,60,0,301,303,3,144,72,0,302,297,
  	1,0,0,0,302,298,1,0,0,0,302,299,1,0,0,0,302,300,1,0,0,0,302,301,1,0,0,
  	0,303,306,1,0,0,0,304,306,5,84,0,0,305,294,1,0,0,0,305,304,1,0,0,0,306,
  	7,1,0,0,0,307,313,3,10,5,0,308,313,5,30,0,0,309,313,5,42,0,0,310,313,
  	5,46,0,0,311,313,5,49,0,0,312,307,1,0,0,0,312,308,1,0,0,0,312,309,1,0,
  	0,0,312,310,1,0,0,0,312,311,1,0,0,0,313,9,1,0,0,0,314,325,3,110,55,0,
  	315,325,5,35,0,0,316,325,5,34,0,0,317,325,5,33,0,0,318,325,5,38,0,0,319,
  	325,5,1,0,0,320,325,5,18,0,0,321,325,5,39,0,0,322,325,5,64,0,0,323,325,
  	5,66,0,0,324,314,1,0,0,0,324,315,1,0,0,0,324,316,1,0,0,0,324,317,1,0,
  	0,0,324,318,1,0,0,0,324,319,1,0,0,0,324,320,1,0,0,0,324,321,1,0,0,0,324,
  	322,1,0,0,0,324,323,1,0,0,0,325,11,1,0,0,0,326,329,5,18,0,0,327,329,3,
  	110,55,0,328,326,1,0,0,0,328,327,1,0,0,0,329,13,1,0,0,0,330,331,5,9,0,
  	0,331,333,3,160,80,0,332,334,3,16,8,0,333,332,1,0,0,0,333,334,1,0,0,0,
  	334,337,1,0,0,0,335,336,5,17,0,0,336,338,3,238,119,0,337,335,1,0,0,0,
  	337,338,1,0,0,0,338,341,1,0,0,0,339,340,5,24,0,0,340,342,3,236,118,0,
  	341,339,1,0,0,0,341,342,1,0,0,0,342,345,1,0,0,0,343,344,5,65,0,0,344,
  	346,3,236,118,0,345,343,1,0,0,0,345,346,1,0,0,0,346,347,1,0,0,0,347,348,
  	3,32,16,0,348,15,1,0,0,0,349,350,5,89,0,0,350,355,3,18,9,0,351,352,5,
  	85,0,0,352,354,3,18,9,0,353,351,1,0,0,0,354,357,1,0,0,0,355,353,1,0,0,
  	0,355,356,1,0,0,0,356,358,1,0,0,0,357,355,1,0,0,0,358,359,5,88,0,0,359,
  	17,1,0,0,0,360,362,3,110,55,0,361,360,1,0,0,0,362,365,1,0,0,0,363,361,
  	1,0,0,0,363,364,1,0,0,0,364,366,1,0,0,0,365,363,1,0,0,0,366,375,3,160,
  	80,0,367,371,5,17,0,0,368,370,3,110,55,0,369,368,1,0,0,0,370,373,1,0,
  	0,0,371,369,1,0,0,0,371,372,1,0,0,0,372,374,1,0,0,0,373,371,1,0,0,0,374,
  	376,3,20,10,0,375,367,1,0,0,0,375,376,1,0,0,0,376,19,1,0,0,0,377,382,
  	3,238,119,0,378,379,5,106,0,0,379,381,3,238,119,0,380,378,1,0,0,0,381,
  	384,1,0,0,0,382,380,1,0,0,0,382,383,1,0,0,0,383,21,1,0,0,0,384,382,1,
  	0,0,0,385,386,5,16,0,0,386,389,3,160,80,0,387,388,5,24,0,0,388,390,3,
  	236,118,0,389,387,1,0,0,0,389,390,1,0,0,0,390,391,1,0,0,0,391,393,5,80,
  	0,0,392,394,3,24,12,0,393,392,1,0,0,0,393,394,1,0,0,0,394,396,1,0,0,0,
  	395,397,5,85,0,0,396,395,1,0,0,0,396,397,1,0,0,0,397,399,1,0,0,0,398,
  	400,3,28,14,0,399,398,1,0,0,0,399,400,1,0,0,0,400,401,1,0,0,0,401,402,
  	5,81,0,0,402,23,1,0,0,0,403,408,3,26,13,0,404,405,5,85,0,0,405,407,3,
  	26,13,0,406,404,1,0,0,0,407,410,1,0,0,0,408,406,1,0,0,0,408,409,1,0,0,
  	0,409,25,1,0,0,0,410,408,1,0,0,0,411,413,3,110,55,0,412,411,1,0,0,0,413,
  	416,1,0,0,0,414,412,1,0,0,0,414,415,1,0,0,0,415,417,1,0,0,0,416,414,1,
  	0,0,0,417,419,3,160,80,0,418,420,3,248,124,0,419,418,1,0,0,0,419,420,
  	1,0,0,0,420,422,1,0,0,0,421,423,3,32,16,0,422,421,1,0,0,0,422,423,1,0,
  	0,0,423,27,1,0,0,0,424,428,5,84,0,0,425,427,3,36,18,0,426,425,1,0,0,0,
  	427,430,1,0,0,0,428,426,1,0,0,0,428,429,1,0,0,0,429,29,1,0,0,0,430,428,
  	1,0,0,0,431,432,5,28,0,0,432,434,3,160,80,0,433,435,3,16,8,0,434,433,
  	1,0,0,0,434,435,1,0,0,0,435,438,1,0,0,0,436,437,5,17,0,0,437,439,3,236,
  	118,0,438,436,1,0,0,0,438,439,1,0,0,0,439,442,1,0,0,0,440,441,5,65,0,
  	0,441,443,3,236,118,0,442,440,1,0,0,0,442,443,1,0,0,0,443,444,1,0,0,0,
  	444,445,3,34,17,0,445,31,1,0,0,0,446,450,5,80,0,0,447,449,3,36,18,0,448,
  	447,1,0,0,0,449,452,1,0,0,0,450,448,1,0,0,0,450,451,1,0,0,0,451,453,1,
  	0,0,0,452,450,1,0,0,0,453,454,5,81,0,0,454,33,1,0,0,0,455,459,5,80,0,
  	0,456,458,3,54,27,0,457,456,1,0,0,0,458,461,1,0,0,0,459,457,1,0,0,0,459,
  	460,1,0,0,0,460,462,1,0,0,0,461,459,1,0,0,0,462,463,5,81,0,0,463,35,1,
  	0,0,0,464,477,5,84,0,0,465,467,5,38,0,0,466,465,1,0,0,0,466,467,1,0,0,
  	0,467,468,1,0,0,0,468,477,3,154,77,0,469,471,3,8,4,0,470,469,1,0,0,0,
  	471,474,1,0,0,0,472,470,1,0,0,0,472,473,1,0,0,0,473,475,1,0,0,0,474,472,
  	1,0,0,0,475,477,3,38,19,0,476,464,1,0,0,0,476,466,1,0,0,0,476,472,1,0,
  	0,0,477,37,1,0,0,0,478,489,3,144,72,0,479,489,3,40,20,0,480,489,3,46,
  	23,0,481,489,3,52,26,0,482,489,3,50,25,0,483,489,3,48,24,0,484,489,3,
  	30,15,0,485,489,3,120,60,0,486,489,3,14,7,0,487,489,3,22,11,0,488,478,
  	1,0,0,0,488,479,1,0,0,0,488,480,1,0,0,0,488,481,1,0,0,0,488,482,1,0,0,
  	0,488,483,1,0,0,0,488,484,1,0,0,0,488,485,1,0,0,0,488,486,1,0,0,0,488,
  	487,1,0,0,0,489,39,1,0,0,0,490,491,3,44,22,0,491,492,3,160,80,0,492,497,
  	3,86,43,0,493,494,5,82,0,0,494,496,5,83,0,0,495,493,1,0,0,0,496,499,1,
  	0,0,0,497,495,1,0,0,0,497,498,1,0,0,0,498,502,1,0,0,0,499,497,1,0,0,0,
  	500,501,5,45,0,0,501,503,3,84,42,0,502,500,1,0,0,0,502,503,1,0,0,0,503,
  	504,1,0,0,0,504,505,3,42,21,0,505,41,1,0,0,0,506,509,3,154,77,0,507,509,
  	5,84,0,0,508,506,1,0,0,0,508,507,1,0,0,0,509,43,1,0,0,0,510,513,3,238,
  	119,0,511,513,5,48,0,0,512,510,1,0,0,0,512,511,1,0,0,0,513,45,1,0,0,0,
  	514,515,3,16,8,0,515,516,3,40,20,0,516,47,1,0,0,0,517,518,3,16,8,0,518,
  	519,3,50,25,0,519,49,1,0,0,0,520,521,3,160,80,0,521,524,3,86,43,0,522,
  	523,5,45,0,0,523,525,3,84,42,0,524,522,1,0,0,0,524,525,1,0,0,0,525,526,
  	1,0,0,0,526,527,3,154,77,0,527,51,1,0,0,0,528,529,3,238,119,0,529,530,
  	3,70,35,0,530,531,5,84,0,0,531,53,1,0,0,0,532,534,3,8,4,0,533,532,1,0,
  	0,0,534,537,1,0,0,0,535,533,1,0,0,0,535,536,1,0,0,0,536,538,1,0,0,0,537,
  	535,1,0,0,0,538,541,3,56,28,0,539,541,5,84,0,0,540,535,1,0,0,0,540,539,
  	1,0,0,0,541,55,1,0,0,0,542,551,3,58,29,0,543,551,3,62,31,0,544,551,3,
  	66,33,0,545,551,3,30,15,0,546,551,3,120,60,0,547,551,3,14,7,0,548,551,
  	3,22,11,0,549,551,3,144,72,0,550,542,1,0,0,0,550,543,1,0,0,0,550,544,
  	1,0,0,0,550,545,1,0,0,0,550,546,1,0,0,0,550,547,1,0,0,0,550,548,1,0,0,
  	0,550,549,1,0,0,0,551,57,1,0,0,0,552,553,3,238,119,0,553,558,3,60,30,
  	0,554,555,5,85,0,0,555,557,3,60,30,0,556,554,1,0,0,0,557,560,1,0,0,0,
  	558,556,1,0,0,0,558,559,1,0,0,0,559,561,1,0,0,0,560,558,1,0,0,0,561,562,
  	5,84,0,0,562,59,1,0,0,0,563,568,3,160,80,0,564,565,5,82,0,0,565,567,5,
  	83,0,0,566,564,1,0,0,0,567,570,1,0,0,0,568,566,1,0,0,0,568,569,1,0,0,
  	0,569,571,1,0,0,0,570,568,1,0,0,0,571,572,5,87,0,0,572,573,3,76,38,0,
  	573,61,1,0,0,0,574,576,3,64,32,0,575,574,1,0,0,0,576,579,1,0,0,0,577,
  	575,1,0,0,0,577,578,1,0,0,0,578,580,1,0,0,0,579,577,1,0,0,0,580,581,3,
  	68,34,0,581,63,1,0,0,0,582,589,3,110,55,0,583,589,5,35,0,0,584,589,5,
  	1,0,0,585,589,5,12,0,0,586,589,5,38,0,0,587,589,5,39,0,0,588,582,1,0,
  	0,0,588,583,1,0,0,0,588,584,1,0,0,0,588,585,1,0,0,0,588,586,1,0,0,0,588,
  	587,1,0,0,0,589,65,1,0,0,0,590,592,3,64,32,0,591,590,1,0,0,0,592,595,
  	1,0,0,0,593,591,1,0,0,0,593,594,1,0,0,0,594,596,1,0,0,0,595,593,1,0,0,
  	0,596,597,3,16,8,0,597,598,3,68,34,0,598,67,1,0,0,0,599,601,3,110,55,
  	0,600,599,1,0,0,0,601,604,1,0,0,0,602,600,1,0,0,0,602,603,1,0,0,0,603,
  	605,1,0,0,0,604,602,1,0,0,0,605,606,3,44,22,0,606,607,3,160,80,0,607,
  	612,3,86,43,0,608,609,5,82,0,0,609,611,5,83,0,0,610,608,1,0,0,0,611,614,
  	1,0,0,0,612,610,1,0,0,0,612,613,1,0,0,0,613,617,1,0,0,0,614,612,1,0,0,
  	0,615,616,5,45,0,0,616,618,3,84,42,0,617,615,1,0,0,0,617,618,1,0,0,0,
  	618,619,1,0,0,0,619,620,3,42,21,0,620,69,1,0,0,0,621,626,3,72,36,0,622,
  	623,5,85,0,0,623,625,3,72,36,0,624,622,1,0,0,0,625,628,1,0,0,0,626,624,
  	1,0,0,0,626,627,1,0,0,0,627,71,1,0,0,0,628,626,1,0,0,0,629,632,3,74,37,
  	0,630,631,5,87,0,0,631,633,3,76,38,0,632,630,1,0,0,0,632,633,1,0,0,0,
  	633,73,1,0,0,0,634,639,3,160,80,0,635,636,5,82,0,0,636,638,5,83,0,0,637,
  	635,1,0,0,0,638,641,1,0,0,0,639,637,1,0,0,0,639,640,1,0,0,0,640,75,1,
  	0,0,0,641,639,1,0,0,0,642,645,3,78,39,0,643,645,3,196,98,0,644,642,1,
  	0,0,0,644,643,1,0,0,0,645,77,1,0,0,0,646,658,5,80,0,0,647,652,3,76,38,
  	0,648,649,5,85,0,0,649,651,3,76,38,0,650,648,1,0,0,0,651,654,1,0,0,0,
  	652,650,1,0,0,0,652,653,1,0,0,0,653,656,1,0,0,0,654,652,1,0,0,0,655,657,
  	5,85,0,0,656,655,1,0,0,0,656,657,1,0,0,0,657,659,1,0,0,0,658,647,1,0,
  	0,0,658,659,1,0,0,0,659,660,1,0,0,0,660,661,5,81,0,0,661,79,1,0,0,0,662,
  	664,3,160,80,0,663,665,3,242,121,0,664,663,1,0,0,0,664,665,1,0,0,0,665,
  	666,1,0,0,0,666,667,5,86,0,0,667,669,1,0,0,0,668,662,1,0,0,0,669,672,
  	1,0,0,0,670,668,1,0,0,0,670,671,1,0,0,0,671,673,1,0,0,0,672,670,1,0,0,
  	0,673,675,3,162,81,0,674,676,3,242,121,0,675,674,1,0,0,0,675,676,1,0,
  	0,0,676,81,1,0,0,0,677,690,3,238,119,0,678,680,3,110,55,0,679,678,1,0,
  	0,0,680,683,1,0,0,0,681,679,1,0,0,0,681,682,1,0,0,0,682,684,1,0,0,0,683,
  	681,1,0,0,0,684,687,5,92,0,0,685,686,7,0,0,0,686,688,3,238,119,0,687,
  	685,1,0,0,0,687,688,1,0,0,0,688,690,1,0,0,0,689,677,1,0,0,0,689,681,1,
  	0,0,0,690,83,1,0,0,0,691,696,3,100,50,0,692,693,5,85,0,0,693,695,3,100,
  	50,0,694,692,1,0,0,0,695,698,1,0,0,0,696,694,1,0,0,0,696,697,1,0,0,0,
  	697,85,1,0,0,0,698,696,1,0,0,0,699,711,5,78,0,0,700,702,3,88,44,0,701,
  	700,1,0,0,0,701,702,1,0,0,0,702,712,1,0,0,0,703,706,3,88,44,0,704,705,
  	5,85,0,0,705,707,3,90,45,0,706,704,1,0,0,0,706,707,1,0,0,0,707,712,1,
  	0,0,0,708,710,3,90,45,0,709,708,1,0,0,0,709,710,1,0,0,0,710,712,1,0,0,
  	0,711,701,1,0,0,0,711,703,1,0,0,0,711,709,1,0,0,0,712,713,1,0,0,0,713,
  	714,5,79,0,0,714,87,1,0,0,0,715,721,3,238,119,0,716,717,3,160,80,0,717,
  	718,5,86,0,0,718,720,1,0,0,0,719,716,1,0,0,0,720,723,1,0,0,0,721,719,
  	1,0,0,0,721,722,1,0,0,0,722,724,1,0,0,0,723,721,1,0,0,0,724,725,5,43,
  	0,0,725,89,1,0,0,0,726,731,3,92,46,0,727,728,5,85,0,0,728,730,3,92,46,
  	0,729,727,1,0,0,0,730,733,1,0,0,0,731,729,1,0,0,0,731,732,1,0,0,0,732,
  	736,1,0,0,0,733,731,1,0,0,0,734,735,5,85,0,0,735,737,3,94,47,0,736,734,
  	1,0,0,0,736,737,1,0,0,0,737,740,1,0,0,0,738,740,3,94,47,0,739,726,1,0,
  	0,0,739,738,1,0,0,0,740,91,1,0,0,0,741,743,3,12,6,0,742,741,1,0,0,0,743,
  	746,1,0,0,0,744,742,1,0,0,0,744,745,1,0,0,0,745,747,1,0,0,0,746,744,1,
  	0,0,0,747,748,3,238,119,0,748,749,3,74,37,0,749,93,1,0,0,0,750,752,3,
  	12,6,0,751,750,1,0,0,0,752,755,1,0,0,0,753,751,1,0,0,0,753,754,1,0,0,
  	0,754,756,1,0,0,0,755,753,1,0,0,0,756,760,3,238,119,0,757,759,3,110,55,
  	0,758,757,1,0,0,0,759,762,1,0,0,0,760,758,1,0,0,0,760,761,1,0,0,0,761,
  	763,1,0,0,0,762,760,1,0,0,0,763,764,5,124,0,0,764,765,3,74,37,0,765,95,
  	1,0,0,0,766,771,3,98,49,0,767,768,5,85,0,0,768,770,3,98,49,0,769,767,
  	1,0,0,0,770,773,1,0,0,0,771,769,1,0,0,0,771,772,1,0,0,0,772,97,1,0,0,
  	0,773,771,1,0,0,0,774,776,3,12,6,0,775,774,1,0,0,0,776,779,1,0,0,0,777,
  	775,1,0,0,0,777,778,1,0,0,0,778,780,1,0,0,0,779,777,1,0,0,0,780,781,5,
  	61,0,0,781,782,3,160,80,0,782,99,1,0,0,0,783,788,3,160,80,0,784,785,5,
  	86,0,0,785,787,3,160,80,0,786,784,1,0,0,0,787,790,1,0,0,0,788,786,1,0,
  	0,0,788,789,1,0,0,0,789,101,1,0,0,0,790,788,1,0,0,0,791,799,3,104,52,
  	0,792,799,3,106,53,0,793,799,5,74,0,0,794,799,5,75,0,0,795,799,5,73,0,
  	0,796,799,5,77,0,0,797,799,5,76,0,0,798,791,1,0,0,0,798,792,1,0,0,0,798,
  	793,1,0,0,0,798,794,1,0,0,0,798,795,1,0,0,0,798,796,1,0,0,0,798,797,1,
  	0,0,0,799,103,1,0,0,0,800,801,7,1,0,0,801,105,1,0,0,0,802,803,7,2,0,0,
  	803,107,1,0,0,0,804,805,3,160,80,0,805,806,5,86,0,0,806,808,1,0,0,0,807,
  	804,1,0,0,0,808,811,1,0,0,0,809,807,1,0,0,0,809,810,1,0,0,0,810,812,1,
  	0,0,0,811,809,1,0,0,0,812,813,5,123,0,0,813,814,3,160,80,0,814,109,1,
  	0,0,0,815,816,5,123,0,0,816,819,3,100,50,0,817,819,3,108,54,0,818,815,
  	1,0,0,0,818,817,1,0,0,0,819,826,1,0,0,0,820,823,5,78,0,0,821,824,3,112,
  	56,0,822,824,3,116,58,0,823,821,1,0,0,0,823,822,1,0,0,0,823,824,1,0,0,
  	0,824,825,1,0,0,0,825,827,5,79,0,0,826,820,1,0,0,0,826,827,1,0,0,0,827,
  	111,1,0,0,0,828,833,3,114,57,0,829,830,5,85,0,0,830,832,3,114,57,0,831,
  	829,1,0,0,0,832,835,1,0,0,0,833,831,1,0,0,0,833,834,1,0,0,0,834,113,1,
  	0,0,0,835,833,1,0,0,0,836,837,3,160,80,0,837,838,5,87,0,0,838,839,3,116,
  	58,0,839,115,1,0,0,0,840,844,3,196,98,0,841,844,3,110,55,0,842,844,3,
  	118,59,0,843,840,1,0,0,0,843,841,1,0,0,0,843,842,1,0,0,0,844,117,1,0,
  	0,0,845,854,5,80,0,0,846,851,3,116,58,0,847,848,5,85,0,0,848,850,3,116,
  	58,0,849,847,1,0,0,0,850,853,1,0,0,0,851,849,1,0,0,0,851,852,1,0,0,0,
  	852,855,1,0,0,0,853,851,1,0,0,0,854,846,1,0,0,0,854,855,1,0,0,0,855,857,
  	1,0,0,0,856,858,5,85,0,0,857,856,1,0,0,0,857,858,1,0,0,0,858,859,1,0,
  	0,0,859,860,5,81,0,0,860,119,1,0,0,0,861,862,5,123,0,0,862,863,5,28,0,
  	0,863,864,3,160,80,0,864,865,3,122,61,0,865,121,1,0,0,0,866,870,5,80,
  	0,0,867,869,3,124,62,0,868,867,1,0,0,0,869,872,1,0,0,0,870,868,1,0,0,
  	0,870,871,1,0,0,0,871,873,1,0,0,0,872,870,1,0,0,0,873,874,5,81,0,0,874,
  	123,1,0,0,0,875,877,3,8,4,0,876,875,1,0,0,0,877,880,1,0,0,0,878,876,1,
  	0,0,0,878,879,1,0,0,0,879,881,1,0,0,0,880,878,1,0,0,0,881,884,3,126,63,
  	0,882,884,5,84,0,0,883,878,1,0,0,0,883,882,1,0,0,0,884,125,1,0,0,0,885,
  	886,3,238,119,0,886,887,3,128,64,0,887,888,5,84,0,0,888,910,1,0,0,0,889,
  	891,3,14,7,0,890,892,5,84,0,0,891,890,1,0,0,0,891,892,1,0,0,0,892,910,
  	1,0,0,0,893,895,3,30,15,0,894,896,5,84,0,0,895,894,1,0,0,0,895,896,1,
  	0,0,0,896,910,1,0,0,0,897,899,3,22,11,0,898,900,5,84,0,0,899,898,1,0,
  	0,0,899,900,1,0,0,0,900,910,1,0,0,0,901,903,3,120,60,0,902,904,5,84,0,
  	0,903,902,1,0,0,0,903,904,1,0,0,0,904,910,1,0,0,0,905,907,3,144,72,0,
  	906,908,5,84,0,0,907,906,1,0,0,0,907,908,1,0,0,0,908,910,1,0,0,0,909,
  	885,1,0,0,0,909,889,1,0,0,0,909,893,1,0,0,0,909,897,1,0,0,0,909,901,1,
  	0,0,0,909,905,1,0,0,0,910,127,1,0,0,0,911,914,3,130,65,0,912,914,3,132,
  	66,0,913,911,1,0,0,0,913,912,1,0,0,0,914,129,1,0,0,0,915,916,3,160,80,
  	0,916,917,5,78,0,0,917,919,5,79,0,0,918,920,3,134,67,0,919,918,1,0,0,
  	0,919,920,1,0,0,0,920,131,1,0,0,0,921,922,3,70,35,0,922,133,1,0,0,0,923,
  	924,5,12,0,0,924,925,3,116,58,0,925,135,1,0,0,0,926,928,5,52,0,0,927,
  	926,1,0,0,0,927,928,1,0,0,0,928,929,1,0,0,0,929,930,5,51,0,0,930,931,
  	3,100,50,0,931,932,3,138,69,0,932,137,1,0,0,0,933,937,5,80,0,0,934,936,
  	3,140,70,0,935,934,1,0,0,0,936,939,1,0,0,0,937,935,1,0,0,0,937,938,1,
  	0,0,0,938,940,1,0,0,0,939,937,1,0,0,0,940,941,5,81,0,0,941,139,1,0,0,
  	0,942,946,5,53,0,0,943,945,3,142,71,0,944,943,1,0,0,0,945,948,1,0,0,0,
  	946,944,1,0,0,0,946,947,1,0,0,0,947,949,1,0,0,0,948,946,1,0,0,0,949,950,
  	3,100,50,0,950,951,5,84,0,0,951,979,1,0,0,0,952,953,5,54,0,0,953,956,
  	3,100,50,0,954,955,5,56,0,0,955,957,3,100,50,0,956,954,1,0,0,0,956,957,
  	1,0,0,0,957,958,1,0,0,0,958,959,5,84,0,0,959,979,1,0,0,0,960,961,5,55,
  	0,0,961,964,3,100,50,0,962,963,5,56,0,0,963,965,3,100,50,0,964,962,1,
  	0,0,0,964,965,1,0,0,0,965,966,1,0,0,0,966,967,5,84,0,0,967,979,1,0,0,
  	0,968,969,5,57,0,0,969,970,3,100,50,0,970,971,5,84,0,0,971,979,1,0,0,
  	0,972,973,5,58,0,0,973,974,3,100,50,0,974,975,5,59,0,0,975,976,3,100,
  	50,0,976,977,5,84,0,0,977,979,1,0,0,0,978,942,1,0,0,0,978,952,1,0,0,0,
  	978,960,1,0,0,0,978,968,1,0,0,0,978,972,1,0,0,0,979,141,1,0,0,0,980,981,
  	7,3,0,0,981,143,1,0,0,0,982,983,5,63,0,0,983,985,3,160,80,0,984,986,3,
  	16,8,0,985,984,1,0,0,0,985,986,1,0,0,0,986,987,1,0,0,0,987,990,3,146,
  	73,0,988,989,5,24,0,0,989,991,3,236,118,0,990,988,1,0,0,0,990,991,1,0,
  	0,0,991,992,1,0,0,0,992,993,3,152,76,0,993,145,1,0,0,0,994,996,5,78,0,
  	0,995,997,3,148,74,0,996,995,1,0,0,0,996,997,1,0,0,0,997,998,1,0,0,0,
  	998,999,5,79,0,0,999,147,1,0,0,0,1000,1005,3,150,75,0,1001,1002,5,85,
  	0,0,1002,1004,3,150,75,0,1003,1001,1,0,0,0,1004,1007,1,0,0,0,1005,1003,
  	1,0,0,0,1005,1006,1,0,0,0,1006,149,1,0,0,0,1007,1005,1,0,0,0,1008,1009,
  	3,238,119,0,1009,1010,3,160,80,0,1010,151,1,0,0,0,1011,1015,5,80,0,0,
  	1012,1014,3,36,18,0,1013,1012,1,0,0,0,1014,1017,1,0,0,0,1015,1013,1,0,
  	0,0,1015,1016,1,0,0,0,1016,1018,1,0,0,0,1017,1015,1,0,0,0,1018,1019,5,
  	81,0,0,1019,153,1,0,0,0,1020,1024,5,80,0,0,1021,1023,3,156,78,0,1022,
  	1021,1,0,0,0,1023,1026,1,0,0,0,1024,1022,1,0,0,0,1024,1025,1,0,0,0,1025,
  	1027,1,0,0,0,1026,1024,1,0,0,0,1027,1028,5,81,0,0,1028,155,1,0,0,0,1029,
  	1030,3,158,79,0,1030,1031,5,84,0,0,1031,1035,1,0,0,0,1032,1035,3,164,
  	82,0,1033,1035,3,166,83,0,1034,1029,1,0,0,0,1034,1032,1,0,0,0,1034,1033,
  	1,0,0,0,1035,157,1,0,0,0,1036,1038,3,12,6,0,1037,1036,1,0,0,0,1038,1041,
  	1,0,0,0,1039,1037,1,0,0,0,1039,1040,1,0,0,0,1040,1050,1,0,0,0,1041,1039,
  	1,0,0,0,1042,1043,5,61,0,0,1043,1044,3,160,80,0,1044,1045,5,87,0,0,1045,
  	1046,3,196,98,0,1046,1051,1,0,0,0,1047,1048,3,238,119,0,1048,1049,3,70,
  	35,0,1049,1051,1,0,0,0,1050,1042,1,0,0,0,1050,1047,1,0,0,0,1051,159,1,
  	0,0,0,1052,1053,7,4,0,0,1053,161,1,0,0,0,1054,1055,7,5,0,0,1055,163,1,
  	0,0,0,1056,1058,3,10,5,0,1057,1056,1,0,0,0,1058,1061,1,0,0,0,1059,1057,
  	1,0,0,0,1059,1060,1,0,0,0,1060,1065,1,0,0,0,1061,1059,1,0,0,0,1062,1066,
  	3,14,7,0,1063,1066,3,30,15,0,1064,1066,3,144,72,0,1065,1062,1,0,0,0,1065,
  	1063,1,0,0,0,1065,1064,1,0,0,0,1066,1069,1,0,0,0,1067,1069,5,84,0,0,1068,
  	1059,1,0,0,0,1068,1067,1,0,0,0,1069,165,1,0,0,0,1070,1184,3,154,77,0,
  	1071,1072,5,2,0,0,1072,1075,3,196,98,0,1073,1074,5,93,0,0,1074,1076,3,
  	196,98,0,1075,1073,1,0,0,0,1075,1076,1,0,0,0,1076,1077,1,0,0,0,1077,1078,
  	5,84,0,0,1078,1184,1,0,0,0,1079,1080,5,22,0,0,1080,1081,3,190,95,0,1081,
  	1084,3,166,83,0,1082,1083,5,15,0,0,1083,1085,3,166,83,0,1084,1082,1,0,
  	0,0,1084,1085,1,0,0,0,1085,1184,1,0,0,0,1086,1087,5,21,0,0,1087,1088,
  	5,78,0,0,1088,1089,3,184,92,0,1089,1090,5,79,0,0,1090,1091,3,166,83,0,
  	1091,1184,1,0,0,0,1092,1093,5,50,0,0,1093,1094,3,190,95,0,1094,1095,3,
  	166,83,0,1095,1184,1,0,0,0,1096,1097,5,13,0,0,1097,1098,3,166,83,0,1098,
  	1099,5,50,0,0,1099,1100,3,190,95,0,1100,1101,5,84,0,0,1101,1184,1,0,0,
  	0,1102,1103,5,47,0,0,1103,1113,3,154,77,0,1104,1106,3,168,84,0,1105,1104,
  	1,0,0,0,1106,1107,1,0,0,0,1107,1105,1,0,0,0,1107,1108,1,0,0,0,1108,1110,
  	1,0,0,0,1109,1111,3,172,86,0,1110,1109,1,0,0,0,1110,1111,1,0,0,0,1111,
  	1114,1,0,0,0,1112,1114,3,172,86,0,1113,1105,1,0,0,0,1113,1112,1,0,0,0,
  	1114,1184,1,0,0,0,1115,1116,5,47,0,0,1116,1117,3,174,87,0,1117,1121,3,
  	154,77,0,1118,1120,3,168,84,0,1119,1118,1,0,0,0,1120,1123,1,0,0,0,1121,
  	1119,1,0,0,0,1121,1122,1,0,0,0,1122,1125,1,0,0,0,1123,1121,1,0,0,0,1124,
  	1126,3,172,86,0,1125,1124,1,0,0,0,1125,1126,1,0,0,0,1126,1184,1,0,0,0,
  	1127,1128,5,41,0,0,1128,1129,3,190,95,0,1129,1133,5,80,0,0,1130,1132,
  	3,180,90,0,1131,1130,1,0,0,0,1132,1135,1,0,0,0,1133,1131,1,0,0,0,1133,
  	1134,1,0,0,0,1134,1139,1,0,0,0,1135,1133,1,0,0,0,1136,1138,3,182,91,0,
  	1137,1136,1,0,0,0,1138,1141,1,0,0,0,1139,1137,1,0,0,0,1139,1140,1,0,0,
  	0,1140,1142,1,0,0,0,1141,1139,1,0,0,0,1142,1143,5,81,0,0,1143,1184,1,
  	0,0,0,1144,1145,5,42,0,0,1145,1146,3,190,95,0,1146,1147,3,154,77,0,1147,
  	1184,1,0,0,0,1148,1150,5,36,0,0,1149,1151,3,196,98,0,1150,1149,1,0,0,
  	0,1150,1151,1,0,0,0,1151,1152,1,0,0,0,1152,1184,5,84,0,0,1153,1154,5,
  	44,0,0,1154,1155,3,196,98,0,1155,1156,5,84,0,0,1156,1184,1,0,0,0,1157,
  	1159,5,4,0,0,1158,1160,3,160,80,0,1159,1158,1,0,0,0,1159,1160,1,0,0,0,
  	1160,1161,1,0,0,0,1161,1184,5,84,0,0,1162,1164,5,11,0,0,1163,1165,3,160,
  	80,0,1164,1163,1,0,0,0,1164,1165,1,0,0,0,1165,1166,1,0,0,0,1166,1184,
  	5,84,0,0,1167,1168,5,62,0,0,1168,1169,3,196,98,0,1169,1170,5,84,0,0,1170,
  	1184,1,0,0,0,1171,1184,5,84,0,0,1172,1173,3,196,98,0,1173,1174,5,84,0,
  	0,1174,1184,1,0,0,0,1175,1177,3,208,104,0,1176,1178,5,84,0,0,1177,1176,
  	1,0,0,0,1177,1178,1,0,0,0,1178,1184,1,0,0,0,1179,1180,3,160,80,0,1180,
  	1181,5,93,0,0,1181,1182,3,166,83,0,1182,1184,1,0,0,0,1183,1070,1,0,0,
  	0,1183,1071,1,0,0,0,1183,1079,1,0,0,0,1183,1086,1,0,0,0,1183,1092,1,0,
  	0,0,1183,1096,1,0,0,0,1183,1102,1,0,0,0,1183,1115,1,0,0,0,1183,1127,1,
  	0,0,0,1183,1144,1,0,0,0,1183,1148,1,0,0,0,1183,1153,1,0,0,0,1183,1157,
  	1,0,0,0,1183,1162,1,0,0,0,1183,1167,1,0,0,0,1183,1171,1,0,0,0,1183,1172,
  	1,0,0,0,1183,1175,1,0,0,0,1183,1179,1,0,0,0,1184,167,1,0,0,0,1185,1186,
  	5,7,0,0,1186,1190,5,78,0,0,1187,1189,3,12,6,0,1188,1187,1,0,0,0,1189,
  	1192,1,0,0,0,1190,1188,1,0,0,0,1190,1191,1,0,0,0,1191,1193,1,0,0,0,1192,
  	1190,1,0,0,0,1193,1194,3,170,85,0,1194,1195,3,160,80,0,1195,1196,5,79,
  	0,0,1196,1197,3,154,77,0,1197,169,1,0,0,0,1198,1203,3,100,50,0,1199,1200,
  	5,107,0,0,1200,1202,3,100,50,0,1201,1199,1,0,0,0,1202,1205,1,0,0,0,1203,
  	1201,1,0,0,0,1203,1204,1,0,0,0,1204,171,1,0,0,0,1205,1203,1,0,0,0,1206,
  	1207,5,19,0,0,1207,1208,3,154,77,0,1208,173,1,0,0,0,1209,1210,5,78,0,
  	0,1210,1212,3,176,88,0,1211,1213,5,84,0,0,1212,1211,1,0,0,0,1212,1213,
  	1,0,0,0,1213,1214,1,0,0,0,1214,1215,5,79,0,0,1215,175,1,0,0,0,1216,1221,
  	3,178,89,0,1217,1218,5,84,0,0,1218,1220,3,178,89,0,1219,1217,1,0,0,0,
  	1220,1223,1,0,0,0,1221,1219,1,0,0,0,1221,1222,1,0,0,0,1222,177,1,0,0,
  	0,1223,1221,1,0,0,0,1224,1226,3,12,6,0,1225,1224,1,0,0,0,1226,1229,1,
  	0,0,0,1227,1225,1,0,0,0,1227,1228,1,0,0,0,1228,1235,1,0,0,0,1229,1227,
  	1,0,0,0,1230,1231,3,80,40,0,1231,1232,3,74,37,0,1232,1236,1,0,0,0,1233,
  	1234,5,61,0,0,1234,1236,3,160,80,0,1235,1230,1,0,0,0,1235,1233,1,0,0,
  	0,1236,1237,1,0,0,0,1237,1238,5,87,0,0,1238,1239,3,196,98,0,1239,1242,
  	1,0,0,0,1240,1242,3,160,80,0,1241,1227,1,0,0,0,1241,1240,1,0,0,0,1242,
  	179,1,0,0,0,1243,1245,3,182,91,0,1244,1243,1,0,0,0,1245,1246,1,0,0,0,
  	1246,1244,1,0,0,0,1246,1247,1,0,0,0,1247,1249,1,0,0,0,1248,1250,3,156,
  	78,0,1249,1248,1,0,0,0,1250,1251,1,0,0,0,1251,1249,1,0,0,0,1251,1252,
  	1,0,0,0,1252,181,1,0,0,0,1253,1259,5,6,0,0,1254,1260,3,196,98,0,1255,
  	1260,5,128,0,0,1256,1257,3,238,119,0,1257,1258,3,160,80,0,1258,1260,1,
  	0,0,0,1259,1254,1,0,0,0,1259,1255,1,0,0,0,1259,1256,1,0,0,0,1260,1261,
  	1,0,0,0,1261,1265,5,93,0,0,1262,1263,5,12,0,0,1263,1265,5,93,0,0,1264,
  	1253,1,0,0,0,1264,1262,1,0,0,0,1265,183,1,0,0,0,1266,1279,3,188,94,0,
  	1267,1269,3,186,93,0,1268,1267,1,0,0,0,1268,1269,1,0,0,0,1269,1270,1,
  	0,0,0,1270,1272,5,84,0,0,1271,1273,3,196,98,0,1272,1271,1,0,0,0,1272,
  	1273,1,0,0,0,1273,1274,1,0,0,0,1274,1276,5,84,0,0,1275,1277,3,192,96,
  	0,1276,1275,1,0,0,0,1276,1277,1,0,0,0,1277,1279,1,0,0,0,1278,1266,1,0,
  	0,0,1278,1268,1,0,0,0,1279,185,1,0,0,0,1280,1283,3,158,79,0,1281,1283,
  	3,192,96,0,1282,1280,1,0,0,0,1282,1281,1,0,0,0,1283,187,1,0,0,0,1284,
  	1286,3,12,6,0,1285,1284,1,0,0,0,1286,1289,1,0,0,0,1287,1285,1,0,0,0,1287,
  	1288,1,0,0,0,1288,1292,1,0,0,0,1289,1287,1,0,0,0,1290,1293,3,238,119,
  	0,1291,1293,5,61,0,0,1292,1290,1,0,0,0,1292,1291,1,0,0,0,1293,1294,1,
  	0,0,0,1294,1295,3,74,37,0,1295,1296,5,93,0,0,1296,1297,3,196,98,0,1297,
  	189,1,0,0,0,1298,1299,5,78,0,0,1299,1300,3,196,98,0,1300,1301,5,79,0,
  	0,1301,191,1,0,0,0,1302,1307,3,196,98,0,1303,1304,5,85,0,0,1304,1306,
  	3,196,98,0,1305,1303,1,0,0,0,1306,1309,1,0,0,0,1307,1305,1,0,0,0,1307,
  	1308,1,0,0,0,1308,193,1,0,0,0,1309,1307,1,0,0,0,1310,1311,3,160,80,0,
  	1311,1313,5,78,0,0,1312,1314,3,192,96,0,1313,1312,1,0,0,0,1313,1314,1,
  	0,0,0,1314,1315,1,0,0,0,1315,1316,5,79,0,0,1316,1330,1,0,0,0,1317,1318,
  	5,43,0,0,1318,1320,5,78,0,0,1319,1321,3,192,96,0,1320,1319,1,0,0,0,1320,
  	1321,1,0,0,0,1321,1322,1,0,0,0,1322,1330,5,79,0,0,1323,1324,5,40,0,0,
  	1324,1326,5,78,0,0,1325,1327,3,192,96,0,1326,1325,1,0,0,0,1326,1327,1,
  	0,0,0,1327,1328,1,0,0,0,1328,1330,5,79,0,0,1329,1310,1,0,0,0,1329,1317,
  	1,0,0,0,1329,1323,1,0,0,0,1330,195,1,0,0,0,1331,1332,6,98,-1,0,1332,1377,
  	3,206,103,0,1333,1377,3,194,97,0,1334,1335,5,31,0,0,1335,1377,3,218,109,
  	0,1336,1340,5,78,0,0,1337,1339,3,110,55,0,1338,1337,1,0,0,0,1339,1342,
  	1,0,0,0,1340,1338,1,0,0,0,1340,1341,1,0,0,0,1341,1343,1,0,0,0,1342,1340,
  	1,0,0,0,1343,1348,3,238,119,0,1344,1345,5,106,0,0,1345,1347,3,238,119,
  	0,1346,1344,1,0,0,0,1347,1350,1,0,0,0,1348,1346,1,0,0,0,1348,1349,1,0,
  	0,0,1349,1351,1,0,0,0,1350,1348,1,0,0,0,1351,1352,5,79,0,0,1352,1353,
  	3,196,98,22,1353,1377,1,0,0,0,1354,1355,7,6,0,0,1355,1377,3,196,98,20,
  	1356,1357,7,7,0,0,1357,1377,3,196,98,19,1358,1377,3,200,100,0,1359,1377,
  	3,208,104,0,1360,1361,3,238,119,0,1361,1367,5,122,0,0,1362,1364,3,242,
  	121,0,1363,1362,1,0,0,0,1363,1364,1,0,0,0,1364,1365,1,0,0,0,1365,1368,
  	3,160,80,0,1366,1368,5,31,0,0,1367,1363,1,0,0,0,1367,1366,1,0,0,0,1368,
  	1377,1,0,0,0,1369,1370,3,216,108,0,1370,1372,5,122,0,0,1371,1373,3,242,
  	121,0,1372,1371,1,0,0,0,1372,1373,1,0,0,0,1373,1374,1,0,0,0,1374,1375,
  	5,31,0,0,1375,1377,1,0,0,0,1376,1331,1,0,0,0,1376,1333,1,0,0,0,1376,1334,
  	1,0,0,0,1376,1336,1,0,0,0,1376,1354,1,0,0,0,1376,1356,1,0,0,0,1376,1358,
  	1,0,0,0,1376,1359,1,0,0,0,1376,1360,1,0,0,0,1376,1369,1,0,0,0,1377,1461,
  	1,0,0,0,1378,1379,10,18,0,0,1379,1380,7,8,0,0,1380,1460,3,196,98,19,1381,
  	1382,10,17,0,0,1382,1383,7,9,0,0,1383,1460,3,196,98,18,1384,1392,10,16,
  	0,0,1385,1386,5,89,0,0,1386,1393,5,89,0,0,1387,1388,5,88,0,0,1388,1389,
  	5,88,0,0,1389,1393,5,88,0,0,1390,1391,5,88,0,0,1391,1393,5,88,0,0,1392,
  	1385,1,0,0,0,1392,1387,1,0,0,0,1392,1390,1,0,0,0,1393,1394,1,0,0,0,1394,
  	1460,3,196,98,17,1395,1396,10,15,0,0,1396,1397,7,10,0,0,1397,1460,3,196,
  	98,16,1398,1399,10,13,0,0,1399,1400,7,11,0,0,1400,1460,3,196,98,14,1401,
  	1402,10,12,0,0,1402,1403,5,106,0,0,1403,1460,3,196,98,13,1404,1405,10,
  	11,0,0,1405,1406,5,108,0,0,1406,1460,3,196,98,12,1407,1408,10,10,0,0,
  	1408,1409,5,107,0,0,1409,1460,3,196,98,11,1410,1411,10,9,0,0,1411,1412,
  	5,98,0,0,1412,1460,3,196,98,10,1413,1414,10,8,0,0,1414,1415,5,99,0,0,
  	1415,1460,3,196,98,9,1416,1417,10,7,0,0,1417,1418,5,92,0,0,1418,1419,
  	3,196,98,0,1419,1420,5,93,0,0,1420,1421,3,196,98,7,1421,1460,1,0,0,0,
  	1422,1423,10,6,0,0,1423,1424,7,12,0,0,1424,1460,3,196,98,6,1425,1426,
  	10,26,0,0,1426,1438,5,86,0,0,1427,1439,3,160,80,0,1428,1439,3,194,97,
  	0,1429,1439,5,43,0,0,1430,1432,5,31,0,0,1431,1433,3,234,117,0,1432,1431,
  	1,0,0,0,1432,1433,1,0,0,0,1433,1434,1,0,0,0,1434,1439,3,222,111,0,1435,
  	1436,5,40,0,0,1436,1439,3,244,122,0,1437,1439,3,228,114,0,1438,1427,1,
  	0,0,0,1438,1428,1,0,0,0,1438,1429,1,0,0,0,1438,1430,1,0,0,0,1438,1435,
  	1,0,0,0,1438,1437,1,0,0,0,1439,1460,1,0,0,0,1440,1441,10,25,0,0,1441,
  	1442,5,82,0,0,1442,1443,3,196,98,0,1443,1444,5,83,0,0,1444,1460,1,0,0,
  	0,1445,1446,10,21,0,0,1446,1460,7,13,0,0,1447,1448,10,14,0,0,1448,1451,
  	5,26,0,0,1449,1452,3,238,119,0,1450,1452,3,198,99,0,1451,1449,1,0,0,0,
  	1451,1450,1,0,0,0,1452,1460,1,0,0,0,1453,1454,10,3,0,0,1454,1456,5,122,
  	0,0,1455,1457,3,242,121,0,1456,1455,1,0,0,0,1456,1457,1,0,0,0,1457,1458,
  	1,0,0,0,1458,1460,3,160,80,0,1459,1378,1,0,0,0,1459,1381,1,0,0,0,1459,
  	1384,1,0,0,0,1459,1395,1,0,0,0,1459,1398,1,0,0,0,1459,1401,1,0,0,0,1459,
  	1404,1,0,0,0,1459,1407,1,0,0,0,1459,1410,1,0,0,0,1459,1413,1,0,0,0,1459,
  	1416,1,0,0,0,1459,1422,1,0,0,0,1459,1425,1,0,0,0,1459,1440,1,0,0,0,1459,
  	1445,1,0,0,0,1459,1447,1,0,0,0,1459,1453,1,0,0,0,1460,1463,1,0,0,0,1461,
  	1459,1,0,0,0,1461,1462,1,0,0,0,1462,197,1,0,0,0,1463,1461,1,0,0,0,1464,
  	1466,3,12,6,0,1465,1464,1,0,0,0,1466,1469,1,0,0,0,1467,1465,1,0,0,0,1467,
  	1468,1,0,0,0,1468,1470,1,0,0,0,1469,1467,1,0,0,0,1470,1474,3,238,119,
  	0,1471,1473,3,110,55,0,1472,1471,1,0,0,0,1473,1476,1,0,0,0,1474,1472,
  	1,0,0,0,1474,1475,1,0,0,0,1475,1477,1,0,0,0,1476,1474,1,0,0,0,1477,1478,
  	3,160,80,0,1478,199,1,0,0,0,1479,1480,3,202,101,0,1480,1481,5,121,0,0,
  	1481,1482,3,204,102,0,1482,201,1,0,0,0,1483,1506,3,160,80,0,1484,1486,
  	5,78,0,0,1485,1487,3,90,45,0,1486,1485,1,0,0,0,1486,1487,1,0,0,0,1487,
  	1488,1,0,0,0,1488,1506,5,79,0,0,1489,1490,5,78,0,0,1490,1495,3,160,80,
  	0,1491,1492,5,85,0,0,1492,1494,3,160,80,0,1493,1491,1,0,0,0,1494,1497,
  	1,0,0,0,1495,1493,1,0,0,0,1495,1496,1,0,0,0,1496,1498,1,0,0,0,1497,1495,
  	1,0,0,0,1498,1499,5,79,0,0,1499,1506,1,0,0,0,1500,1502,5,78,0,0,1501,
  	1503,3,96,48,0,1502,1501,1,0,0,0,1502,1503,1,0,0,0,1503,1504,1,0,0,0,
  	1504,1506,5,79,0,0,1505,1483,1,0,0,0,1505,1484,1,0,0,0,1505,1489,1,0,
  	0,0,1505,1500,1,0,0,0,1506,203,1,0,0,0,1507,1510,3,196,98,0,1508,1510,
  	3,154,77,0,1509,1507,1,0,0,0,1509,1508,1,0,0,0,1510,205,1,0,0,0,1511,
  	1512,5,78,0,0,1512,1513,3,196,98,0,1513,1514,5,79,0,0,1514,1530,1,0,0,
  	0,1515,1530,5,43,0,0,1516,1530,5,40,0,0,1517,1530,3,102,51,0,1518,1530,
  	3,160,80,0,1519,1520,3,44,22,0,1520,1521,5,86,0,0,1521,1522,5,9,0,0,1522,
  	1530,1,0,0,0,1523,1527,3,234,117,0,1524,1528,3,246,123,0,1525,1526,5,
  	43,0,0,1526,1528,3,248,124,0,1527,1524,1,0,0,0,1527,1525,1,0,0,0,1528,
  	1530,1,0,0,0,1529,1511,1,0,0,0,1529,1515,1,0,0,0,1529,1516,1,0,0,0,1529,
  	1517,1,0,0,0,1529,1518,1,0,0,0,1529,1519,1,0,0,0,1529,1523,1,0,0,0,1530,
  	207,1,0,0,0,1531,1532,5,41,0,0,1532,1533,3,190,95,0,1533,1537,5,80,0,
  	0,1534,1536,3,210,105,0,1535,1534,1,0,0,0,1536,1539,1,0,0,0,1537,1535,
  	1,0,0,0,1537,1538,1,0,0,0,1538,1540,1,0,0,0,1539,1537,1,0,0,0,1540,1541,
  	5,81,0,0,1541,209,1,0,0,0,1542,1546,5,6,0,0,1543,1547,3,192,96,0,1544,
  	1547,5,77,0,0,1545,1547,3,212,106,0,1546,1543,1,0,0,0,1546,1544,1,0,0,
  	0,1546,1545,1,0,0,0,1547,1548,1,0,0,0,1548,1549,7,14,0,0,1549,1554,3,
  	214,107,0,1550,1551,5,12,0,0,1551,1552,7,14,0,0,1552,1554,3,214,107,0,
  	1553,1542,1,0,0,0,1553,1550,1,0,0,0,1554,211,1,0,0,0,1555,1556,6,106,
  	-1,0,1556,1557,5,78,0,0,1557,1558,3,212,106,0,1558,1559,5,79,0,0,1559,
  	1582,1,0,0,0,1560,1562,3,12,6,0,1561,1560,1,0,0,0,1562,1565,1,0,0,0,1563,
  	1561,1,0,0,0,1563,1564,1,0,0,0,1564,1566,1,0,0,0,1565,1563,1,0,0,0,1566,
  	1570,3,238,119,0,1567,1569,3,110,55,0,1568,1567,1,0,0,0,1569,1572,1,0,
  	0,0,1570,1568,1,0,0,0,1570,1571,1,0,0,0,1571,1573,1,0,0,0,1572,1570,1,
  	0,0,0,1573,1578,3,160,80,0,1574,1575,5,98,0,0,1575,1577,3,196,98,0,1576,
  	1574,1,0,0,0,1577,1580,1,0,0,0,1578,1576,1,0,0,0,1578,1579,1,0,0,0,1579,
  	1582,1,0,0,0,1580,1578,1,0,0,0,1581,1555,1,0,0,0,1581,1563,1,0,0,0,1582,
  	1588,1,0,0,0,1583,1584,10,1,0,0,1584,1585,5,98,0,0,1585,1587,3,196,98,
  	0,1586,1583,1,0,0,0,1587,1590,1,0,0,0,1588,1586,1,0,0,0,1588,1589,1,0,
  	0,0,1589,213,1,0,0,0,1590,1588,1,0,0,0,1591,1599,3,154,77,0,1592,1594,
  	3,156,78,0,1593,1592,1,0,0,0,1594,1597,1,0,0,0,1595,1593,1,0,0,0,1595,
  	1596,1,0,0,0,1596,1599,1,0,0,0,1597,1595,1,0,0,0,1598,1591,1,0,0,0,1598,
  	1595,1,0,0,0,1599,215,1,0,0,0,1600,1601,3,80,40,0,1601,1602,5,86,0,0,
  	1602,1604,1,0,0,0,1603,1600,1,0,0,0,1603,1604,1,0,0,0,1604,1608,1,0,0,
  	0,1605,1607,3,110,55,0,1606,1605,1,0,0,0,1607,1610,1,0,0,0,1608,1606,
  	1,0,0,0,1608,1609,1,0,0,0,1609,1611,1,0,0,0,1610,1608,1,0,0,0,1611,1613,
  	3,160,80,0,1612,1614,3,242,121,0,1613,1612,1,0,0,0,1613,1614,1,0,0,0,
  	1614,217,1,0,0,0,1615,1616,3,234,117,0,1616,1617,3,220,110,0,1617,1618,
  	3,226,113,0,1618,1625,1,0,0,0,1619,1622,3,220,110,0,1620,1623,3,224,112,
  	0,1621,1623,3,226,113,0,1622,1620,1,0,0,0,1622,1621,1,0,0,0,1623,1625,
  	1,0,0,0,1624,1615,1,0,0,0,1624,1619,1,0,0,0,1625,219,1,0,0,0,1626,1628,
  	3,160,80,0,1627,1629,3,230,115,0,1628,1627,1,0,0,0,1628,1629,1,0,0,0,
  	1629,1637,1,0,0,0,1630,1631,5,86,0,0,1631,1633,3,160,80,0,1632,1634,3,
  	230,115,0,1633,1632,1,0,0,0,1633,1634,1,0,0,0,1634,1636,1,0,0,0,1635,
  	1630,1,0,0,0,1636,1639,1,0,0,0,1637,1635,1,0,0,0,1637,1638,1,0,0,0,1638,
  	1642,1,0,0,0,1639,1637,1,0,0,0,1640,1642,3,240,120,0,1641,1626,1,0,0,
  	0,1641,1640,1,0,0,0,1642,221,1,0,0,0,1643,1645,3,160,80,0,1644,1646,3,
  	232,116,0,1645,1644,1,0,0,0,1645,1646,1,0,0,0,1646,1647,1,0,0,0,1647,
  	1648,3,226,113,0,1648,223,1,0,0,0,1649,1677,5,82,0,0,1650,1655,5,83,0,
  	0,1651,1652,5,82,0,0,1652,1654,5,83,0,0,1653,1651,1,0,0,0,1654,1657,1,
  	0,0,0,1655,1653,1,0,0,0,1655,1656,1,0,0,0,1656,1658,1,0,0,0,1657,1655,
  	1,0,0,0,1658,1678,3,78,39,0,1659,1660,3,196,98,0,1660,1667,5,83,0,0,1661,
  	1662,5,82,0,0,1662,1663,3,196,98,0,1663,1664,5,83,0,0,1664,1666,1,0,0,
  	0,1665,1661,1,0,0,0,1666,1669,1,0,0,0,1667,1665,1,0,0,0,1667,1668,1,0,
  	0,0,1668,1674,1,0,0,0,1669,1667,1,0,0,0,1670,1671,5,82,0,0,1671,1673,
  	5,83,0,0,1672,1670,1,0,0,0,1673,1676,1,0,0,0,1674,1672,1,0,0,0,1674,1675,
  	1,0,0,0,1675,1678,1,0,0,0,1676,1674,1,0,0,0,1677,1650,1,0,0,0,1677,1659,
  	1,0,0,0,1678,225,1,0,0,0,1679,1681,3,248,124,0,1680,1682,3,32,16,0,1681,
  	1680,1,0,0,0,1681,1682,1,0,0,0,1682,227,1,0,0,0,1683,1684,3,234,117,0,
  	1684,1685,3,246,123,0,1685,229,1,0,0,0,1686,1687,5,89,0,0,1687,1690,5,
  	88,0,0,1688,1690,3,242,121,0,1689,1686,1,0,0,0,1689,1688,1,0,0,0,1690,
  	231,1,0,0,0,1691,1692,5,89,0,0,1692,1695,5,88,0,0,1693,1695,3,234,117,
  	0,1694,1691,1,0,0,0,1694,1693,1,0,0,0,1695,233,1,0,0,0,1696,1697,5,89,
  	0,0,1697,1698,3,236,118,0,1698,1699,5,88,0,0,1699,235,1,0,0,0,1700,1705,
  	3,238,119,0,1701,1702,5,85,0,0,1702,1704,3,238,119,0,1703,1701,1,0,0,
  	0,1704,1707,1,0,0,0,1705,1703,1,0,0,0,1705,1706,1,0,0,0,1706,237,1,0,
  	0,0,1707,1705,1,0,0,0,1708,1710,3,110,55,0,1709,1708,1,0,0,0,1710,1713,
  	1,0,0,0,1711,1709,1,0,0,0,1711,1712,1,0,0,0,1712,1716,1,0,0,0,1713,1711,
  	1,0,0,0,1714,1717,3,80,40,0,1715,1717,3,240,120,0,1716,1714,1,0,0,0,1716,
  	1715,1,0,0,0,1717,1728,1,0,0,0,1718,1720,3,110,55,0,1719,1718,1,0,0,0,
  	1720,1723,1,0,0,0,1721,1719,1,0,0,0,1721,1722,1,0,0,0,1722,1724,1,0,0,
  	0,1723,1721,1,0,0,0,1724,1725,5,82,0,0,1725,1727,5,83,0,0,1726,1721,1,
  	0,0,0,1727,1730,1,0,0,0,1728,1726,1,0,0,0,1728,1729,1,0,0,0,1729,239,
  	1,0,0,0,1730,1728,1,0,0,0,1731,1732,7,15,0,0,1732,241,1,0,0,0,1733,1734,
  	5,89,0,0,1734,1739,3,82,41,0,1735,1736,5,85,0,0,1736,1738,3,82,41,0,1737,
  	1735,1,0,0,0,1738,1741,1,0,0,0,1739,1737,1,0,0,0,1739,1740,1,0,0,0,1740,
  	1742,1,0,0,0,1741,1739,1,0,0,0,1742,1743,5,88,0,0,1743,243,1,0,0,0,1744,
  	1754,3,248,124,0,1745,1747,5,86,0,0,1746,1748,3,242,121,0,1747,1746,1,
  	0,0,0,1747,1748,1,0,0,0,1748,1749,1,0,0,0,1749,1751,3,160,80,0,1750,1752,
  	3,248,124,0,1751,1750,1,0,0,0,1751,1752,1,0,0,0,1752,1754,1,0,0,0,1753,
  	1744,1,0,0,0,1753,1745,1,0,0,0,1754,245,1,0,0,0,1755,1756,5,40,0,0,1756,
  	1761,3,244,122,0,1757,1758,3,160,80,0,1758,1759,3,248,124,0,1759,1761,
  	1,0,0,0,1760,1755,1,0,0,0,1760,1757,1,0,0,0,1761,247,1,0,0,0,1762,1764,
  	5,78,0,0,1763,1765,3,192,96,0,1764,1763,1,0,0,0,1764,1765,1,0,0,0,1765,
  	1766,1,0,0,0,1766,1767,5,79,0,0,1767,249,1,0,0,0,220,251,256,262,268,
  	273,282,287,294,302,305,312,324,328,333,337,341,345,355,363,371,375,382,
  	389,393,396,399,408,414,419,422,428,434,438,442,450,459,466,472,476,488,
  	497,502,508,512,524,535,540,550,558,568,577,588,593,602,612,617,626,632,
  	639,644,652,656,658,664,670,675,681,687,689,696,701,706,709,711,721,731,
  	736,739,744,753,760,771,777,788,798,809,818,823,826,833,843,851,854,857,
  	870,878,883,891,895,899,903,907,909,913,919,927,937,946,956,964,978,985,
  	990,996,1005,1015,1024,1034,1039,1050,1059,1065,1068,1075,1084,1107,1110,
  	1113,1121,1125,1133,1139,1150,1159,1164,1177,1183,1190,1203,1212,1221,
  	1227,1235,1241,1246,1251,1259,1264,1268,1272,1276,1278,1282,1287,1292,
  	1307,1313,1320,1326,1329,1340,1348,1363,1367,1372,1376,1392,1432,1438,
  	1451,1456,1459,1461,1467,1474,1486,1495,1502,1505,1509,1527,1529,1537,
  	1546,1553,1563,1570,1578,1581,1588,1595,1598,1603,1608,1613,1622,1624,
  	1628,1633,1637,1641,1645,1655,1667,1674,1677,1681,1689,1694,1705,1711,
  	1716,1721,1728,1739,1747,1751,1753,1760,1764
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  javaparserParserStaticData = staticData.release();
}

}

JavaParser::JavaParser(TokenStream *input) : JavaParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

JavaParser::JavaParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  JavaParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *javaparserParserStaticData->atn, javaparserParserStaticData->decisionToDFA, javaparserParserStaticData->sharedContextCache, options);
}

JavaParser::~JavaParser() {
  delete _interpreter;
}

const atn::ATN& JavaParser::getATN() const {
  return *javaparserParserStaticData->atn;
}

std::string JavaParser::getGrammarFileName() const {
  return "JavaParser.g4";
}

const std::vector<std::string>& JavaParser::getRuleNames() const {
  return javaparserParserStaticData->ruleNames;
}

const dfa::Vocabulary& JavaParser::getVocabulary() const {
  return javaparserParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView JavaParser::getSerializedATN() const {
  return javaparserParserStaticData->serializedATN;
}


//----------------- CompilationUnitContext ------------------------------------------------------------------

JavaParser::CompilationUnitContext::CompilationUnitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::PackageDeclarationContext* JavaParser::CompilationUnitContext::packageDeclaration() {
  return getRuleContext<JavaParser::PackageDeclarationContext>(0);
}

std::vector<JavaParser::ImportDeclarationContext *> JavaParser::CompilationUnitContext::importDeclaration() {
  return getRuleContexts<JavaParser::ImportDeclarationContext>();
}

JavaParser::ImportDeclarationContext* JavaParser::CompilationUnitContext::importDeclaration(size_t i) {
  return getRuleContext<JavaParser::ImportDeclarationContext>(i);
}

std::vector<JavaParser::TypeDeclarationContext *> JavaParser::CompilationUnitContext::typeDeclaration() {
  return getRuleContexts<JavaParser::TypeDeclarationContext>();
}

JavaParser::TypeDeclarationContext* JavaParser::CompilationUnitContext::typeDeclaration(size_t i) {
  return getRuleContext<JavaParser::TypeDeclarationContext>(i);
}

JavaParser::ModuleDeclarationContext* JavaParser::CompilationUnitContext::moduleDeclaration() {
  return getRuleContext<JavaParser::ModuleDeclarationContext>(0);
}

tree::TerminalNode* JavaParser::CompilationUnitContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::CompilationUnitContext::getRuleIndex() const {
  return JavaParser::RuleCompilationUnit;
}

void JavaParser::CompilationUnitContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCompilationUnit(this);
}

void JavaParser::CompilationUnitContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCompilationUnit(this);
}

JavaParser::CompilationUnitContext* JavaParser::compilationUnit() {
  CompilationUnitContext *_localctx = _tracker.createInstance<CompilationUnitContext>(_ctx, getState());
  enterRule(_localctx, 0, JavaParser::RuleCompilationUnit);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(268);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 3, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(251);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 0, _ctx)) {
      case 1: {
        setState(250);
        packageDeclaration();
        break;
      }

      default:
        break;
      }
      setState(256);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == JavaParser::IMPORT) {
        setState(253);
        importDeclaration();
        setState(258);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(262);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la - 1) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 1)) & -1125457390829311) != 0 || (((_la - 65) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 65)) & -8935141660702539773) != 0) {
        setState(259);
        typeDeclaration();
        setState(264);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(265);
      moduleDeclaration();
      setState(266);
      match(JavaParser::EOF);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PackageDeclarationContext ------------------------------------------------------------------

JavaParser::PackageDeclarationContext::PackageDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::PackageDeclarationContext::PACKAGE() {
  return getToken(JavaParser::PACKAGE, 0);
}

JavaParser::QualifiedNameContext* JavaParser::PackageDeclarationContext::qualifiedName() {
  return getRuleContext<JavaParser::QualifiedNameContext>(0);
}

tree::TerminalNode* JavaParser::PackageDeclarationContext::SEMI() {
  return getToken(JavaParser::SEMI, 0);
}

std::vector<JavaParser::AnnotationContext *> JavaParser::PackageDeclarationContext::annotation() {
  return getRuleContexts<JavaParser::AnnotationContext>();
}

JavaParser::AnnotationContext* JavaParser::PackageDeclarationContext::annotation(size_t i) {
  return getRuleContext<JavaParser::AnnotationContext>(i);
}


size_t JavaParser::PackageDeclarationContext::getRuleIndex() const {
  return JavaParser::RulePackageDeclaration;
}

void JavaParser::PackageDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPackageDeclaration(this);
}

void JavaParser::PackageDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPackageDeclaration(this);
}

JavaParser::PackageDeclarationContext* JavaParser::packageDeclaration() {
  PackageDeclarationContext *_localctx = _tracker.createInstance<PackageDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 2, JavaParser::RulePackageDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(273);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la - 51) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 51)) & 32767) != 0 || _la == JavaParser::AT

    || _la == JavaParser::IDENTIFIER) {
      setState(270);
      annotation();
      setState(275);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(276);
    match(JavaParser::PACKAGE);
    setState(277);
    qualifiedName();
    setState(278);
    match(JavaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ImportDeclarationContext ------------------------------------------------------------------

JavaParser::ImportDeclarationContext::ImportDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::ImportDeclarationContext::IMPORT() {
  return getToken(JavaParser::IMPORT, 0);
}

JavaParser::QualifiedNameContext* JavaParser::ImportDeclarationContext::qualifiedName() {
  return getRuleContext<JavaParser::QualifiedNameContext>(0);
}

tree::TerminalNode* JavaParser::ImportDeclarationContext::SEMI() {
  return getToken(JavaParser::SEMI, 0);
}

tree::TerminalNode* JavaParser::ImportDeclarationContext::STATIC() {
  return getToken(JavaParser::STATIC, 0);
}

tree::TerminalNode* JavaParser::ImportDeclarationContext::DOT() {
  return getToken(JavaParser::DOT, 0);
}

tree::TerminalNode* JavaParser::ImportDeclarationContext::MUL() {
  return getToken(JavaParser::MUL, 0);
}


size_t JavaParser::ImportDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleImportDeclaration;
}

void JavaParser::ImportDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImportDeclaration(this);
}

void JavaParser::ImportDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImportDeclaration(this);
}

JavaParser::ImportDeclarationContext* JavaParser::importDeclaration() {
  ImportDeclarationContext *_localctx = _tracker.createInstance<ImportDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 4, JavaParser::RuleImportDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(280);
    match(JavaParser::IMPORT);
    setState(282);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::STATIC) {
      setState(281);
      match(JavaParser::STATIC);
    }
    setState(284);
    qualifiedName();
    setState(287);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::DOT) {
      setState(285);
      match(JavaParser::DOT);
      setState(286);
      match(JavaParser::MUL);
    }
    setState(289);
    match(JavaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeDeclarationContext ------------------------------------------------------------------

JavaParser::TypeDeclarationContext::TypeDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ClassDeclarationContext* JavaParser::TypeDeclarationContext::classDeclaration() {
  return getRuleContext<JavaParser::ClassDeclarationContext>(0);
}

JavaParser::EnumDeclarationContext* JavaParser::TypeDeclarationContext::enumDeclaration() {
  return getRuleContext<JavaParser::EnumDeclarationContext>(0);
}

JavaParser::InterfaceDeclarationContext* JavaParser::TypeDeclarationContext::interfaceDeclaration() {
  return getRuleContext<JavaParser::InterfaceDeclarationContext>(0);
}

JavaParser::AnnotationTypeDeclarationContext* JavaParser::TypeDeclarationContext::annotationTypeDeclaration() {
  return getRuleContext<JavaParser::AnnotationTypeDeclarationContext>(0);
}

JavaParser::RecordDeclarationContext* JavaParser::TypeDeclarationContext::recordDeclaration() {
  return getRuleContext<JavaParser::RecordDeclarationContext>(0);
}

std::vector<JavaParser::ClassOrInterfaceModifierContext *> JavaParser::TypeDeclarationContext::classOrInterfaceModifier() {
  return getRuleContexts<JavaParser::ClassOrInterfaceModifierContext>();
}

JavaParser::ClassOrInterfaceModifierContext* JavaParser::TypeDeclarationContext::classOrInterfaceModifier(size_t i) {
  return getRuleContext<JavaParser::ClassOrInterfaceModifierContext>(i);
}

tree::TerminalNode* JavaParser::TypeDeclarationContext::SEMI() {
  return getToken(JavaParser::SEMI, 0);
}


size_t JavaParser::TypeDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleTypeDeclaration;
}

void JavaParser::TypeDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeDeclaration(this);
}

void JavaParser::TypeDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeDeclaration(this);
}

JavaParser::TypeDeclarationContext* JavaParser::typeDeclaration() {
  TypeDeclarationContext *_localctx = _tracker.createInstance<TypeDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 6, JavaParser::RuleTypeDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(305);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::ABSTRACT:
      case JavaParser::CLASS:
      case JavaParser::ENUM:
      case JavaParser::FINAL:
      case JavaParser::INTERFACE:
      case JavaParser::PRIVATE:
      case JavaParser::PROTECTED:
      case JavaParser::PUBLIC:
      case JavaParser::STATIC:
      case JavaParser::STRICTFP:
      case JavaParser::MODULE:
      case JavaParser::OPEN:
      case JavaParser::REQUIRES:
      case JavaParser::EXPORTS:
      case JavaParser::OPENS:
      case JavaParser::TO:
      case JavaParser::USES:
      case JavaParser::PROVIDES:
      case JavaParser::WITH:
      case JavaParser::TRANSITIVE:
      case JavaParser::VAR:
      case JavaParser::YIELD:
      case JavaParser::RECORD:
      case JavaParser::SEALED:
      case JavaParser::PERMITS:
      case JavaParser::NON_SEALED:
      case JavaParser::AT:
      case JavaParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(294);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 7, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(291);
            classOrInterfaceModifier(); 
          }
          setState(296);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 7, _ctx);
        }
        setState(302);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case JavaParser::CLASS: {
            setState(297);
            classDeclaration();
            break;
          }

          case JavaParser::ENUM: {
            setState(298);
            enumDeclaration();
            break;
          }

          case JavaParser::INTERFACE: {
            setState(299);
            interfaceDeclaration();
            break;
          }

          case JavaParser::AT: {
            setState(300);
            annotationTypeDeclaration();
            break;
          }

          case JavaParser::RECORD: {
            setState(301);
            recordDeclaration();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        break;
      }

      case JavaParser::SEMI: {
        enterOuterAlt(_localctx, 2);
        setState(304);
        match(JavaParser::SEMI);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModifierContext ------------------------------------------------------------------

JavaParser::ModifierContext::ModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ClassOrInterfaceModifierContext* JavaParser::ModifierContext::classOrInterfaceModifier() {
  return getRuleContext<JavaParser::ClassOrInterfaceModifierContext>(0);
}

tree::TerminalNode* JavaParser::ModifierContext::NATIVE() {
  return getToken(JavaParser::NATIVE, 0);
}

tree::TerminalNode* JavaParser::ModifierContext::SYNCHRONIZED() {
  return getToken(JavaParser::SYNCHRONIZED, 0);
}

tree::TerminalNode* JavaParser::ModifierContext::TRANSIENT() {
  return getToken(JavaParser::TRANSIENT, 0);
}

tree::TerminalNode* JavaParser::ModifierContext::VOLATILE() {
  return getToken(JavaParser::VOLATILE, 0);
}


size_t JavaParser::ModifierContext::getRuleIndex() const {
  return JavaParser::RuleModifier;
}

void JavaParser::ModifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModifier(this);
}

void JavaParser::ModifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModifier(this);
}

JavaParser::ModifierContext* JavaParser::modifier() {
  ModifierContext *_localctx = _tracker.createInstance<ModifierContext>(_ctx, getState());
  enterRule(_localctx, 8, JavaParser::RuleModifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(312);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::ABSTRACT:
      case JavaParser::FINAL:
      case JavaParser::PRIVATE:
      case JavaParser::PROTECTED:
      case JavaParser::PUBLIC:
      case JavaParser::STATIC:
      case JavaParser::STRICTFP:
      case JavaParser::MODULE:
      case JavaParser::OPEN:
      case JavaParser::REQUIRES:
      case JavaParser::EXPORTS:
      case JavaParser::OPENS:
      case JavaParser::TO:
      case JavaParser::USES:
      case JavaParser::PROVIDES:
      case JavaParser::WITH:
      case JavaParser::TRANSITIVE:
      case JavaParser::VAR:
      case JavaParser::YIELD:
      case JavaParser::RECORD:
      case JavaParser::SEALED:
      case JavaParser::PERMITS:
      case JavaParser::NON_SEALED:
      case JavaParser::AT:
      case JavaParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(307);
        classOrInterfaceModifier();
        break;
      }

      case JavaParser::NATIVE: {
        enterOuterAlt(_localctx, 2);
        setState(308);
        match(JavaParser::NATIVE);
        break;
      }

      case JavaParser::SYNCHRONIZED: {
        enterOuterAlt(_localctx, 3);
        setState(309);
        match(JavaParser::SYNCHRONIZED);
        break;
      }

      case JavaParser::TRANSIENT: {
        enterOuterAlt(_localctx, 4);
        setState(310);
        match(JavaParser::TRANSIENT);
        break;
      }

      case JavaParser::VOLATILE: {
        enterOuterAlt(_localctx, 5);
        setState(311);
        match(JavaParser::VOLATILE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassOrInterfaceModifierContext ------------------------------------------------------------------

JavaParser::ClassOrInterfaceModifierContext::ClassOrInterfaceModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::AnnotationContext* JavaParser::ClassOrInterfaceModifierContext::annotation() {
  return getRuleContext<JavaParser::AnnotationContext>(0);
}

tree::TerminalNode* JavaParser::ClassOrInterfaceModifierContext::PUBLIC() {
  return getToken(JavaParser::PUBLIC, 0);
}

tree::TerminalNode* JavaParser::ClassOrInterfaceModifierContext::PROTECTED() {
  return getToken(JavaParser::PROTECTED, 0);
}

tree::TerminalNode* JavaParser::ClassOrInterfaceModifierContext::PRIVATE() {
  return getToken(JavaParser::PRIVATE, 0);
}

tree::TerminalNode* JavaParser::ClassOrInterfaceModifierContext::STATIC() {
  return getToken(JavaParser::STATIC, 0);
}

tree::TerminalNode* JavaParser::ClassOrInterfaceModifierContext::ABSTRACT() {
  return getToken(JavaParser::ABSTRACT, 0);
}

tree::TerminalNode* JavaParser::ClassOrInterfaceModifierContext::FINAL() {
  return getToken(JavaParser::FINAL, 0);
}

tree::TerminalNode* JavaParser::ClassOrInterfaceModifierContext::STRICTFP() {
  return getToken(JavaParser::STRICTFP, 0);
}

tree::TerminalNode* JavaParser::ClassOrInterfaceModifierContext::SEALED() {
  return getToken(JavaParser::SEALED, 0);
}

tree::TerminalNode* JavaParser::ClassOrInterfaceModifierContext::NON_SEALED() {
  return getToken(JavaParser::NON_SEALED, 0);
}


size_t JavaParser::ClassOrInterfaceModifierContext::getRuleIndex() const {
  return JavaParser::RuleClassOrInterfaceModifier;
}

void JavaParser::ClassOrInterfaceModifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassOrInterfaceModifier(this);
}

void JavaParser::ClassOrInterfaceModifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassOrInterfaceModifier(this);
}

JavaParser::ClassOrInterfaceModifierContext* JavaParser::classOrInterfaceModifier() {
  ClassOrInterfaceModifierContext *_localctx = _tracker.createInstance<ClassOrInterfaceModifierContext>(_ctx, getState());
  enterRule(_localctx, 10, JavaParser::RuleClassOrInterfaceModifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(324);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 11, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(314);
      annotation();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(315);
      match(JavaParser::PUBLIC);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(316);
      match(JavaParser::PROTECTED);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(317);
      match(JavaParser::PRIVATE);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(318);
      match(JavaParser::STATIC);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(319);
      match(JavaParser::ABSTRACT);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(320);
      match(JavaParser::FINAL);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(321);
      match(JavaParser::STRICTFP);
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(322);
      match(JavaParser::SEALED);
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(323);
      match(JavaParser::NON_SEALED);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableModifierContext ------------------------------------------------------------------

JavaParser::VariableModifierContext::VariableModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::VariableModifierContext::FINAL() {
  return getToken(JavaParser::FINAL, 0);
}

JavaParser::AnnotationContext* JavaParser::VariableModifierContext::annotation() {
  return getRuleContext<JavaParser::AnnotationContext>(0);
}


size_t JavaParser::VariableModifierContext::getRuleIndex() const {
  return JavaParser::RuleVariableModifier;
}

void JavaParser::VariableModifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariableModifier(this);
}

void JavaParser::VariableModifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariableModifier(this);
}

JavaParser::VariableModifierContext* JavaParser::variableModifier() {
  VariableModifierContext *_localctx = _tracker.createInstance<VariableModifierContext>(_ctx, getState());
  enterRule(_localctx, 12, JavaParser::RuleVariableModifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(328);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::FINAL: {
        enterOuterAlt(_localctx, 1);
        setState(326);
        match(JavaParser::FINAL);
        break;
      }

      case JavaParser::MODULE:
      case JavaParser::OPEN:
      case JavaParser::REQUIRES:
      case JavaParser::EXPORTS:
      case JavaParser::OPENS:
      case JavaParser::TO:
      case JavaParser::USES:
      case JavaParser::PROVIDES:
      case JavaParser::WITH:
      case JavaParser::TRANSITIVE:
      case JavaParser::VAR:
      case JavaParser::YIELD:
      case JavaParser::RECORD:
      case JavaParser::SEALED:
      case JavaParser::PERMITS:
      case JavaParser::AT:
      case JavaParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 2);
        setState(327);
        annotation();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassDeclarationContext ------------------------------------------------------------------

JavaParser::ClassDeclarationContext::ClassDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::ClassDeclarationContext::CLASS() {
  return getToken(JavaParser::CLASS, 0);
}

JavaParser::IdentifierContext* JavaParser::ClassDeclarationContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::ClassBodyContext* JavaParser::ClassDeclarationContext::classBody() {
  return getRuleContext<JavaParser::ClassBodyContext>(0);
}

JavaParser::TypeParametersContext* JavaParser::ClassDeclarationContext::typeParameters() {
  return getRuleContext<JavaParser::TypeParametersContext>(0);
}

tree::TerminalNode* JavaParser::ClassDeclarationContext::EXTENDS() {
  return getToken(JavaParser::EXTENDS, 0);
}

JavaParser::TypeTypeContext* JavaParser::ClassDeclarationContext::typeType() {
  return getRuleContext<JavaParser::TypeTypeContext>(0);
}

tree::TerminalNode* JavaParser::ClassDeclarationContext::IMPLEMENTS() {
  return getToken(JavaParser::IMPLEMENTS, 0);
}

std::vector<JavaParser::TypeListContext *> JavaParser::ClassDeclarationContext::typeList() {
  return getRuleContexts<JavaParser::TypeListContext>();
}

JavaParser::TypeListContext* JavaParser::ClassDeclarationContext::typeList(size_t i) {
  return getRuleContext<JavaParser::TypeListContext>(i);
}

tree::TerminalNode* JavaParser::ClassDeclarationContext::PERMITS() {
  return getToken(JavaParser::PERMITS, 0);
}


size_t JavaParser::ClassDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleClassDeclaration;
}

void JavaParser::ClassDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassDeclaration(this);
}

void JavaParser::ClassDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassDeclaration(this);
}

JavaParser::ClassDeclarationContext* JavaParser::classDeclaration() {
  ClassDeclarationContext *_localctx = _tracker.createInstance<ClassDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 14, JavaParser::RuleClassDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(330);
    match(JavaParser::CLASS);
    setState(331);
    identifier();
    setState(333);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::LT) {
      setState(332);
      typeParameters();
    }
    setState(337);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::EXTENDS) {
      setState(335);
      match(JavaParser::EXTENDS);
      setState(336);
      typeType();
    }
    setState(341);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::IMPLEMENTS) {
      setState(339);
      match(JavaParser::IMPLEMENTS);
      setState(340);
      typeList();
    }
    setState(345);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::PERMITS) {
      setState(343);
      match(JavaParser::PERMITS);
      setState(344);
      typeList();
    }
    setState(347);
    classBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeParametersContext ------------------------------------------------------------------

JavaParser::TypeParametersContext::TypeParametersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::TypeParametersContext::LT() {
  return getToken(JavaParser::LT, 0);
}

std::vector<JavaParser::TypeParameterContext *> JavaParser::TypeParametersContext::typeParameter() {
  return getRuleContexts<JavaParser::TypeParameterContext>();
}

JavaParser::TypeParameterContext* JavaParser::TypeParametersContext::typeParameter(size_t i) {
  return getRuleContext<JavaParser::TypeParameterContext>(i);
}

tree::TerminalNode* JavaParser::TypeParametersContext::GT() {
  return getToken(JavaParser::GT, 0);
}

std::vector<tree::TerminalNode *> JavaParser::TypeParametersContext::COMMA() {
  return getTokens(JavaParser::COMMA);
}

tree::TerminalNode* JavaParser::TypeParametersContext::COMMA(size_t i) {
  return getToken(JavaParser::COMMA, i);
}


size_t JavaParser::TypeParametersContext::getRuleIndex() const {
  return JavaParser::RuleTypeParameters;
}

void JavaParser::TypeParametersContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeParameters(this);
}

void JavaParser::TypeParametersContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeParameters(this);
}

JavaParser::TypeParametersContext* JavaParser::typeParameters() {
  TypeParametersContext *_localctx = _tracker.createInstance<TypeParametersContext>(_ctx, getState());
  enterRule(_localctx, 16, JavaParser::RuleTypeParameters);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(349);
    match(JavaParser::LT);
    setState(350);
    typeParameter();
    setState(355);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::COMMA) {
      setState(351);
      match(JavaParser::COMMA);
      setState(352);
      typeParameter();
      setState(357);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(358);
    match(JavaParser::GT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeParameterContext ------------------------------------------------------------------

JavaParser::TypeParameterContext::TypeParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::TypeParameterContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

std::vector<JavaParser::AnnotationContext *> JavaParser::TypeParameterContext::annotation() {
  return getRuleContexts<JavaParser::AnnotationContext>();
}

JavaParser::AnnotationContext* JavaParser::TypeParameterContext::annotation(size_t i) {
  return getRuleContext<JavaParser::AnnotationContext>(i);
}

tree::TerminalNode* JavaParser::TypeParameterContext::EXTENDS() {
  return getToken(JavaParser::EXTENDS, 0);
}

JavaParser::TypeBoundContext* JavaParser::TypeParameterContext::typeBound() {
  return getRuleContext<JavaParser::TypeBoundContext>(0);
}


size_t JavaParser::TypeParameterContext::getRuleIndex() const {
  return JavaParser::RuleTypeParameter;
}

void JavaParser::TypeParameterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeParameter(this);
}

void JavaParser::TypeParameterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeParameter(this);
}

JavaParser::TypeParameterContext* JavaParser::typeParameter() {
  TypeParameterContext *_localctx = _tracker.createInstance<TypeParameterContext>(_ctx, getState());
  enterRule(_localctx, 18, JavaParser::RuleTypeParameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(363);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 18, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(360);
        annotation(); 
      }
      setState(365);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 18, _ctx);
    }
    setState(366);
    identifier();
    setState(375);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::EXTENDS) {
      setState(367);
      match(JavaParser::EXTENDS);
      setState(371);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 19, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(368);
          annotation(); 
        }
        setState(373);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 19, _ctx);
      }
      setState(374);
      typeBound();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeBoundContext ------------------------------------------------------------------

JavaParser::TypeBoundContext::TypeBoundContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::TypeTypeContext *> JavaParser::TypeBoundContext::typeType() {
  return getRuleContexts<JavaParser::TypeTypeContext>();
}

JavaParser::TypeTypeContext* JavaParser::TypeBoundContext::typeType(size_t i) {
  return getRuleContext<JavaParser::TypeTypeContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::TypeBoundContext::BITAND() {
  return getTokens(JavaParser::BITAND);
}

tree::TerminalNode* JavaParser::TypeBoundContext::BITAND(size_t i) {
  return getToken(JavaParser::BITAND, i);
}


size_t JavaParser::TypeBoundContext::getRuleIndex() const {
  return JavaParser::RuleTypeBound;
}

void JavaParser::TypeBoundContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeBound(this);
}

void JavaParser::TypeBoundContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeBound(this);
}

JavaParser::TypeBoundContext* JavaParser::typeBound() {
  TypeBoundContext *_localctx = _tracker.createInstance<TypeBoundContext>(_ctx, getState());
  enterRule(_localctx, 20, JavaParser::RuleTypeBound);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(377);
    typeType();
    setState(382);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::BITAND) {
      setState(378);
      match(JavaParser::BITAND);
      setState(379);
      typeType();
      setState(384);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumDeclarationContext ------------------------------------------------------------------

JavaParser::EnumDeclarationContext::EnumDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::EnumDeclarationContext::ENUM() {
  return getToken(JavaParser::ENUM, 0);
}

JavaParser::IdentifierContext* JavaParser::EnumDeclarationContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

tree::TerminalNode* JavaParser::EnumDeclarationContext::LBRACE() {
  return getToken(JavaParser::LBRACE, 0);
}

tree::TerminalNode* JavaParser::EnumDeclarationContext::RBRACE() {
  return getToken(JavaParser::RBRACE, 0);
}

tree::TerminalNode* JavaParser::EnumDeclarationContext::IMPLEMENTS() {
  return getToken(JavaParser::IMPLEMENTS, 0);
}

JavaParser::TypeListContext* JavaParser::EnumDeclarationContext::typeList() {
  return getRuleContext<JavaParser::TypeListContext>(0);
}

JavaParser::EnumConstantsContext* JavaParser::EnumDeclarationContext::enumConstants() {
  return getRuleContext<JavaParser::EnumConstantsContext>(0);
}

tree::TerminalNode* JavaParser::EnumDeclarationContext::COMMA() {
  return getToken(JavaParser::COMMA, 0);
}

JavaParser::EnumBodyDeclarationsContext* JavaParser::EnumDeclarationContext::enumBodyDeclarations() {
  return getRuleContext<JavaParser::EnumBodyDeclarationsContext>(0);
}


size_t JavaParser::EnumDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleEnumDeclaration;
}

void JavaParser::EnumDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumDeclaration(this);
}

void JavaParser::EnumDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumDeclaration(this);
}

JavaParser::EnumDeclarationContext* JavaParser::enumDeclaration() {
  EnumDeclarationContext *_localctx = _tracker.createInstance<EnumDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 22, JavaParser::RuleEnumDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(385);
    match(JavaParser::ENUM);
    setState(386);
    identifier();
    setState(389);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::IMPLEMENTS) {
      setState(387);
      match(JavaParser::IMPLEMENTS);
      setState(388);
      typeList();
    }
    setState(391);
    match(JavaParser::LBRACE);
    setState(393);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la - 51) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 51)) & 32767) != 0 || _la == JavaParser::AT

    || _la == JavaParser::IDENTIFIER) {
      setState(392);
      enumConstants();
    }
    setState(396);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::COMMA) {
      setState(395);
      match(JavaParser::COMMA);
    }
    setState(399);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::SEMI) {
      setState(398);
      enumBodyDeclarations();
    }
    setState(401);
    match(JavaParser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumConstantsContext ------------------------------------------------------------------

JavaParser::EnumConstantsContext::EnumConstantsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::EnumConstantContext *> JavaParser::EnumConstantsContext::enumConstant() {
  return getRuleContexts<JavaParser::EnumConstantContext>();
}

JavaParser::EnumConstantContext* JavaParser::EnumConstantsContext::enumConstant(size_t i) {
  return getRuleContext<JavaParser::EnumConstantContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::EnumConstantsContext::COMMA() {
  return getTokens(JavaParser::COMMA);
}

tree::TerminalNode* JavaParser::EnumConstantsContext::COMMA(size_t i) {
  return getToken(JavaParser::COMMA, i);
}


size_t JavaParser::EnumConstantsContext::getRuleIndex() const {
  return JavaParser::RuleEnumConstants;
}

void JavaParser::EnumConstantsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumConstants(this);
}

void JavaParser::EnumConstantsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumConstants(this);
}

JavaParser::EnumConstantsContext* JavaParser::enumConstants() {
  EnumConstantsContext *_localctx = _tracker.createInstance<EnumConstantsContext>(_ctx, getState());
  enterRule(_localctx, 24, JavaParser::RuleEnumConstants);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(403);
    enumConstant();
    setState(408);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 26, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(404);
        match(JavaParser::COMMA);
        setState(405);
        enumConstant(); 
      }
      setState(410);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 26, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumConstantContext ------------------------------------------------------------------

JavaParser::EnumConstantContext::EnumConstantContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::EnumConstantContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

std::vector<JavaParser::AnnotationContext *> JavaParser::EnumConstantContext::annotation() {
  return getRuleContexts<JavaParser::AnnotationContext>();
}

JavaParser::AnnotationContext* JavaParser::EnumConstantContext::annotation(size_t i) {
  return getRuleContext<JavaParser::AnnotationContext>(i);
}

JavaParser::ArgumentsContext* JavaParser::EnumConstantContext::arguments() {
  return getRuleContext<JavaParser::ArgumentsContext>(0);
}

JavaParser::ClassBodyContext* JavaParser::EnumConstantContext::classBody() {
  return getRuleContext<JavaParser::ClassBodyContext>(0);
}


size_t JavaParser::EnumConstantContext::getRuleIndex() const {
  return JavaParser::RuleEnumConstant;
}

void JavaParser::EnumConstantContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumConstant(this);
}

void JavaParser::EnumConstantContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumConstant(this);
}

JavaParser::EnumConstantContext* JavaParser::enumConstant() {
  EnumConstantContext *_localctx = _tracker.createInstance<EnumConstantContext>(_ctx, getState());
  enterRule(_localctx, 26, JavaParser::RuleEnumConstant);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(414);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 27, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(411);
        annotation(); 
      }
      setState(416);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 27, _ctx);
    }
    setState(417);
    identifier();
    setState(419);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::LPAREN) {
      setState(418);
      arguments();
    }
    setState(422);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::LBRACE) {
      setState(421);
      classBody();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumBodyDeclarationsContext ------------------------------------------------------------------

JavaParser::EnumBodyDeclarationsContext::EnumBodyDeclarationsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::EnumBodyDeclarationsContext::SEMI() {
  return getToken(JavaParser::SEMI, 0);
}

std::vector<JavaParser::ClassBodyDeclarationContext *> JavaParser::EnumBodyDeclarationsContext::classBodyDeclaration() {
  return getRuleContexts<JavaParser::ClassBodyDeclarationContext>();
}

JavaParser::ClassBodyDeclarationContext* JavaParser::EnumBodyDeclarationsContext::classBodyDeclaration(size_t i) {
  return getRuleContext<JavaParser::ClassBodyDeclarationContext>(i);
}


size_t JavaParser::EnumBodyDeclarationsContext::getRuleIndex() const {
  return JavaParser::RuleEnumBodyDeclarations;
}

void JavaParser::EnumBodyDeclarationsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumBodyDeclarations(this);
}

void JavaParser::EnumBodyDeclarationsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumBodyDeclarations(this);
}

JavaParser::EnumBodyDeclarationsContext* JavaParser::enumBodyDeclarations() {
  EnumBodyDeclarationsContext *_localctx = _tracker.createInstance<EnumBodyDeclarationsContext>(_ctx, getState());
  enterRule(_localctx, 28, JavaParser::RuleEnumBodyDeclarations);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(424);
    match(JavaParser::SEMI);
    setState(428);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la - 1) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 1)) & -665791937994347) != 0 || (((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & -8935141660685729789) != 0) {
      setState(425);
      classBodyDeclaration();
      setState(430);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceDeclarationContext ------------------------------------------------------------------

JavaParser::InterfaceDeclarationContext::InterfaceDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::InterfaceDeclarationContext::INTERFACE() {
  return getToken(JavaParser::INTERFACE, 0);
}

JavaParser::IdentifierContext* JavaParser::InterfaceDeclarationContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::InterfaceBodyContext* JavaParser::InterfaceDeclarationContext::interfaceBody() {
  return getRuleContext<JavaParser::InterfaceBodyContext>(0);
}

JavaParser::TypeParametersContext* JavaParser::InterfaceDeclarationContext::typeParameters() {
  return getRuleContext<JavaParser::TypeParametersContext>(0);
}

tree::TerminalNode* JavaParser::InterfaceDeclarationContext::EXTENDS() {
  return getToken(JavaParser::EXTENDS, 0);
}

std::vector<JavaParser::TypeListContext *> JavaParser::InterfaceDeclarationContext::typeList() {
  return getRuleContexts<JavaParser::TypeListContext>();
}

JavaParser::TypeListContext* JavaParser::InterfaceDeclarationContext::typeList(size_t i) {
  return getRuleContext<JavaParser::TypeListContext>(i);
}

tree::TerminalNode* JavaParser::InterfaceDeclarationContext::PERMITS() {
  return getToken(JavaParser::PERMITS, 0);
}


size_t JavaParser::InterfaceDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleInterfaceDeclaration;
}

void JavaParser::InterfaceDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterfaceDeclaration(this);
}

void JavaParser::InterfaceDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterfaceDeclaration(this);
}

JavaParser::InterfaceDeclarationContext* JavaParser::interfaceDeclaration() {
  InterfaceDeclarationContext *_localctx = _tracker.createInstance<InterfaceDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 30, JavaParser::RuleInterfaceDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(431);
    match(JavaParser::INTERFACE);
    setState(432);
    identifier();
    setState(434);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::LT) {
      setState(433);
      typeParameters();
    }
    setState(438);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::EXTENDS) {
      setState(436);
      match(JavaParser::EXTENDS);
      setState(437);
      typeList();
    }
    setState(442);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::PERMITS) {
      setState(440);
      match(JavaParser::PERMITS);
      setState(441);
      typeList();
    }
    setState(444);
    interfaceBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassBodyContext ------------------------------------------------------------------

JavaParser::ClassBodyContext::ClassBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::ClassBodyContext::LBRACE() {
  return getToken(JavaParser::LBRACE, 0);
}

tree::TerminalNode* JavaParser::ClassBodyContext::RBRACE() {
  return getToken(JavaParser::RBRACE, 0);
}

std::vector<JavaParser::ClassBodyDeclarationContext *> JavaParser::ClassBodyContext::classBodyDeclaration() {
  return getRuleContexts<JavaParser::ClassBodyDeclarationContext>();
}

JavaParser::ClassBodyDeclarationContext* JavaParser::ClassBodyContext::classBodyDeclaration(size_t i) {
  return getRuleContext<JavaParser::ClassBodyDeclarationContext>(i);
}


size_t JavaParser::ClassBodyContext::getRuleIndex() const {
  return JavaParser::RuleClassBody;
}

void JavaParser::ClassBodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassBody(this);
}

void JavaParser::ClassBodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassBody(this);
}

JavaParser::ClassBodyContext* JavaParser::classBody() {
  ClassBodyContext *_localctx = _tracker.createInstance<ClassBodyContext>(_ctx, getState());
  enterRule(_localctx, 32, JavaParser::RuleClassBody);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(446);
    match(JavaParser::LBRACE);
    setState(450);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la - 1) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 1)) & -665791937994347) != 0 || (((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & -8935141660685729789) != 0) {
      setState(447);
      classBodyDeclaration();
      setState(452);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(453);
    match(JavaParser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceBodyContext ------------------------------------------------------------------

JavaParser::InterfaceBodyContext::InterfaceBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::InterfaceBodyContext::LBRACE() {
  return getToken(JavaParser::LBRACE, 0);
}

tree::TerminalNode* JavaParser::InterfaceBodyContext::RBRACE() {
  return getToken(JavaParser::RBRACE, 0);
}

std::vector<JavaParser::InterfaceBodyDeclarationContext *> JavaParser::InterfaceBodyContext::interfaceBodyDeclaration() {
  return getRuleContexts<JavaParser::InterfaceBodyDeclarationContext>();
}

JavaParser::InterfaceBodyDeclarationContext* JavaParser::InterfaceBodyContext::interfaceBodyDeclaration(size_t i) {
  return getRuleContext<JavaParser::InterfaceBodyDeclarationContext>(i);
}


size_t JavaParser::InterfaceBodyContext::getRuleIndex() const {
  return JavaParser::RuleInterfaceBody;
}

void JavaParser::InterfaceBodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterfaceBody(this);
}

void JavaParser::InterfaceBodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterfaceBody(this);
}

JavaParser::InterfaceBodyContext* JavaParser::interfaceBody() {
  InterfaceBodyContext *_localctx = _tracker.createInstance<InterfaceBodyContext>(_ctx, getState());
  enterRule(_localctx, 34, JavaParser::RuleInterfaceBody);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(455);
    match(JavaParser::LBRACE);
    setState(459);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la - 1) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 1)) & -665791937992299) != 0 || (((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & -8935141660685762557) != 0) {
      setState(456);
      interfaceBodyDeclaration();
      setState(461);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(462);
    match(JavaParser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassBodyDeclarationContext ------------------------------------------------------------------

JavaParser::ClassBodyDeclarationContext::ClassBodyDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::ClassBodyDeclarationContext::SEMI() {
  return getToken(JavaParser::SEMI, 0);
}

JavaParser::BlockContext* JavaParser::ClassBodyDeclarationContext::block() {
  return getRuleContext<JavaParser::BlockContext>(0);
}

tree::TerminalNode* JavaParser::ClassBodyDeclarationContext::STATIC() {
  return getToken(JavaParser::STATIC, 0);
}

JavaParser::MemberDeclarationContext* JavaParser::ClassBodyDeclarationContext::memberDeclaration() {
  return getRuleContext<JavaParser::MemberDeclarationContext>(0);
}

std::vector<JavaParser::ModifierContext *> JavaParser::ClassBodyDeclarationContext::modifier() {
  return getRuleContexts<JavaParser::ModifierContext>();
}

JavaParser::ModifierContext* JavaParser::ClassBodyDeclarationContext::modifier(size_t i) {
  return getRuleContext<JavaParser::ModifierContext>(i);
}


size_t JavaParser::ClassBodyDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleClassBodyDeclaration;
}

void JavaParser::ClassBodyDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassBodyDeclaration(this);
}

void JavaParser::ClassBodyDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassBodyDeclaration(this);
}

JavaParser::ClassBodyDeclarationContext* JavaParser::classBodyDeclaration() {
  ClassBodyDeclarationContext *_localctx = _tracker.createInstance<ClassBodyDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 36, JavaParser::RuleClassBodyDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(476);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 38, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(464);
      match(JavaParser::SEMI);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(466);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::STATIC) {
        setState(465);
        match(JavaParser::STATIC);
      }
      setState(468);
      block();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(472);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 37, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(469);
          modifier(); 
        }
        setState(474);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 37, _ctx);
      }
      setState(475);
      memberDeclaration();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MemberDeclarationContext ------------------------------------------------------------------

JavaParser::MemberDeclarationContext::MemberDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::RecordDeclarationContext* JavaParser::MemberDeclarationContext::recordDeclaration() {
  return getRuleContext<JavaParser::RecordDeclarationContext>(0);
}

JavaParser::MethodDeclarationContext* JavaParser::MemberDeclarationContext::methodDeclaration() {
  return getRuleContext<JavaParser::MethodDeclarationContext>(0);
}

JavaParser::GenericMethodDeclarationContext* JavaParser::MemberDeclarationContext::genericMethodDeclaration() {
  return getRuleContext<JavaParser::GenericMethodDeclarationContext>(0);
}

JavaParser::FieldDeclarationContext* JavaParser::MemberDeclarationContext::fieldDeclaration() {
  return getRuleContext<JavaParser::FieldDeclarationContext>(0);
}

JavaParser::ConstructorDeclarationContext* JavaParser::MemberDeclarationContext::constructorDeclaration() {
  return getRuleContext<JavaParser::ConstructorDeclarationContext>(0);
}

JavaParser::GenericConstructorDeclarationContext* JavaParser::MemberDeclarationContext::genericConstructorDeclaration() {
  return getRuleContext<JavaParser::GenericConstructorDeclarationContext>(0);
}

JavaParser::InterfaceDeclarationContext* JavaParser::MemberDeclarationContext::interfaceDeclaration() {
  return getRuleContext<JavaParser::InterfaceDeclarationContext>(0);
}

JavaParser::AnnotationTypeDeclarationContext* JavaParser::MemberDeclarationContext::annotationTypeDeclaration() {
  return getRuleContext<JavaParser::AnnotationTypeDeclarationContext>(0);
}

JavaParser::ClassDeclarationContext* JavaParser::MemberDeclarationContext::classDeclaration() {
  return getRuleContext<JavaParser::ClassDeclarationContext>(0);
}

JavaParser::EnumDeclarationContext* JavaParser::MemberDeclarationContext::enumDeclaration() {
  return getRuleContext<JavaParser::EnumDeclarationContext>(0);
}


size_t JavaParser::MemberDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleMemberDeclaration;
}

void JavaParser::MemberDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMemberDeclaration(this);
}

void JavaParser::MemberDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMemberDeclaration(this);
}

JavaParser::MemberDeclarationContext* JavaParser::memberDeclaration() {
  MemberDeclarationContext *_localctx = _tracker.createInstance<MemberDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 38, JavaParser::RuleMemberDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(488);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 39, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(478);
      recordDeclaration();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(479);
      methodDeclaration();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(480);
      genericMethodDeclaration();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(481);
      fieldDeclaration();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(482);
      constructorDeclaration();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(483);
      genericConstructorDeclaration();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(484);
      interfaceDeclaration();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(485);
      annotationTypeDeclaration();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(486);
      classDeclaration();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(487);
      enumDeclaration();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MethodDeclarationContext ------------------------------------------------------------------

JavaParser::MethodDeclarationContext::MethodDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::TypeTypeOrVoidContext* JavaParser::MethodDeclarationContext::typeTypeOrVoid() {
  return getRuleContext<JavaParser::TypeTypeOrVoidContext>(0);
}

JavaParser::IdentifierContext* JavaParser::MethodDeclarationContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::FormalParametersContext* JavaParser::MethodDeclarationContext::formalParameters() {
  return getRuleContext<JavaParser::FormalParametersContext>(0);
}

JavaParser::MethodBodyContext* JavaParser::MethodDeclarationContext::methodBody() {
  return getRuleContext<JavaParser::MethodBodyContext>(0);
}

std::vector<tree::TerminalNode *> JavaParser::MethodDeclarationContext::LBRACK() {
  return getTokens(JavaParser::LBRACK);
}

tree::TerminalNode* JavaParser::MethodDeclarationContext::LBRACK(size_t i) {
  return getToken(JavaParser::LBRACK, i);
}

std::vector<tree::TerminalNode *> JavaParser::MethodDeclarationContext::RBRACK() {
  return getTokens(JavaParser::RBRACK);
}

tree::TerminalNode* JavaParser::MethodDeclarationContext::RBRACK(size_t i) {
  return getToken(JavaParser::RBRACK, i);
}

tree::TerminalNode* JavaParser::MethodDeclarationContext::THROWS() {
  return getToken(JavaParser::THROWS, 0);
}

JavaParser::QualifiedNameListContext* JavaParser::MethodDeclarationContext::qualifiedNameList() {
  return getRuleContext<JavaParser::QualifiedNameListContext>(0);
}


size_t JavaParser::MethodDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleMethodDeclaration;
}

void JavaParser::MethodDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethodDeclaration(this);
}

void JavaParser::MethodDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethodDeclaration(this);
}

JavaParser::MethodDeclarationContext* JavaParser::methodDeclaration() {
  MethodDeclarationContext *_localctx = _tracker.createInstance<MethodDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 40, JavaParser::RuleMethodDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(490);
    typeTypeOrVoid();
    setState(491);
    identifier();
    setState(492);
    formalParameters();
    setState(497);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::LBRACK) {
      setState(493);
      match(JavaParser::LBRACK);
      setState(494);
      match(JavaParser::RBRACK);
      setState(499);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(502);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::THROWS) {
      setState(500);
      match(JavaParser::THROWS);
      setState(501);
      qualifiedNameList();
    }
    setState(504);
    methodBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MethodBodyContext ------------------------------------------------------------------

JavaParser::MethodBodyContext::MethodBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::BlockContext* JavaParser::MethodBodyContext::block() {
  return getRuleContext<JavaParser::BlockContext>(0);
}

tree::TerminalNode* JavaParser::MethodBodyContext::SEMI() {
  return getToken(JavaParser::SEMI, 0);
}


size_t JavaParser::MethodBodyContext::getRuleIndex() const {
  return JavaParser::RuleMethodBody;
}

void JavaParser::MethodBodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethodBody(this);
}

void JavaParser::MethodBodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethodBody(this);
}

JavaParser::MethodBodyContext* JavaParser::methodBody() {
  MethodBodyContext *_localctx = _tracker.createInstance<MethodBodyContext>(_ctx, getState());
  enterRule(_localctx, 42, JavaParser::RuleMethodBody);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(508);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::LBRACE: {
        enterOuterAlt(_localctx, 1);
        setState(506);
        block();
        break;
      }

      case JavaParser::SEMI: {
        enterOuterAlt(_localctx, 2);
        setState(507);
        match(JavaParser::SEMI);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeTypeOrVoidContext ------------------------------------------------------------------

JavaParser::TypeTypeOrVoidContext::TypeTypeOrVoidContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::TypeTypeContext* JavaParser::TypeTypeOrVoidContext::typeType() {
  return getRuleContext<JavaParser::TypeTypeContext>(0);
}

tree::TerminalNode* JavaParser::TypeTypeOrVoidContext::VOID() {
  return getToken(JavaParser::VOID, 0);
}


size_t JavaParser::TypeTypeOrVoidContext::getRuleIndex() const {
  return JavaParser::RuleTypeTypeOrVoid;
}

void JavaParser::TypeTypeOrVoidContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeTypeOrVoid(this);
}

void JavaParser::TypeTypeOrVoidContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeTypeOrVoid(this);
}

JavaParser::TypeTypeOrVoidContext* JavaParser::typeTypeOrVoid() {
  TypeTypeOrVoidContext *_localctx = _tracker.createInstance<TypeTypeOrVoidContext>(_ctx, getState());
  enterRule(_localctx, 44, JavaParser::RuleTypeTypeOrVoid);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(512);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::BOOLEAN:
      case JavaParser::BYTE:
      case JavaParser::CHAR:
      case JavaParser::DOUBLE:
      case JavaParser::FLOAT:
      case JavaParser::INT:
      case JavaParser::LONG:
      case JavaParser::SHORT:
      case JavaParser::MODULE:
      case JavaParser::OPEN:
      case JavaParser::REQUIRES:
      case JavaParser::EXPORTS:
      case JavaParser::OPENS:
      case JavaParser::TO:
      case JavaParser::USES:
      case JavaParser::PROVIDES:
      case JavaParser::WITH:
      case JavaParser::TRANSITIVE:
      case JavaParser::VAR:
      case JavaParser::YIELD:
      case JavaParser::RECORD:
      case JavaParser::SEALED:
      case JavaParser::PERMITS:
      case JavaParser::AT:
      case JavaParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(510);
        typeType();
        break;
      }

      case JavaParser::VOID: {
        enterOuterAlt(_localctx, 2);
        setState(511);
        match(JavaParser::VOID);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GenericMethodDeclarationContext ------------------------------------------------------------------

JavaParser::GenericMethodDeclarationContext::GenericMethodDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::TypeParametersContext* JavaParser::GenericMethodDeclarationContext::typeParameters() {
  return getRuleContext<JavaParser::TypeParametersContext>(0);
}

JavaParser::MethodDeclarationContext* JavaParser::GenericMethodDeclarationContext::methodDeclaration() {
  return getRuleContext<JavaParser::MethodDeclarationContext>(0);
}


size_t JavaParser::GenericMethodDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleGenericMethodDeclaration;
}

void JavaParser::GenericMethodDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGenericMethodDeclaration(this);
}

void JavaParser::GenericMethodDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGenericMethodDeclaration(this);
}

JavaParser::GenericMethodDeclarationContext* JavaParser::genericMethodDeclaration() {
  GenericMethodDeclarationContext *_localctx = _tracker.createInstance<GenericMethodDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 46, JavaParser::RuleGenericMethodDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(514);
    typeParameters();
    setState(515);
    methodDeclaration();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GenericConstructorDeclarationContext ------------------------------------------------------------------

JavaParser::GenericConstructorDeclarationContext::GenericConstructorDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::TypeParametersContext* JavaParser::GenericConstructorDeclarationContext::typeParameters() {
  return getRuleContext<JavaParser::TypeParametersContext>(0);
}

JavaParser::ConstructorDeclarationContext* JavaParser::GenericConstructorDeclarationContext::constructorDeclaration() {
  return getRuleContext<JavaParser::ConstructorDeclarationContext>(0);
}


size_t JavaParser::GenericConstructorDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleGenericConstructorDeclaration;
}

void JavaParser::GenericConstructorDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGenericConstructorDeclaration(this);
}

void JavaParser::GenericConstructorDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGenericConstructorDeclaration(this);
}

JavaParser::GenericConstructorDeclarationContext* JavaParser::genericConstructorDeclaration() {
  GenericConstructorDeclarationContext *_localctx = _tracker.createInstance<GenericConstructorDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 48, JavaParser::RuleGenericConstructorDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(517);
    typeParameters();
    setState(518);
    constructorDeclaration();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstructorDeclarationContext ------------------------------------------------------------------

JavaParser::ConstructorDeclarationContext::ConstructorDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::ConstructorDeclarationContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::FormalParametersContext* JavaParser::ConstructorDeclarationContext::formalParameters() {
  return getRuleContext<JavaParser::FormalParametersContext>(0);
}

JavaParser::BlockContext* JavaParser::ConstructorDeclarationContext::block() {
  return getRuleContext<JavaParser::BlockContext>(0);
}

tree::TerminalNode* JavaParser::ConstructorDeclarationContext::THROWS() {
  return getToken(JavaParser::THROWS, 0);
}

JavaParser::QualifiedNameListContext* JavaParser::ConstructorDeclarationContext::qualifiedNameList() {
  return getRuleContext<JavaParser::QualifiedNameListContext>(0);
}


size_t JavaParser::ConstructorDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleConstructorDeclaration;
}

void JavaParser::ConstructorDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstructorDeclaration(this);
}

void JavaParser::ConstructorDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstructorDeclaration(this);
}

JavaParser::ConstructorDeclarationContext* JavaParser::constructorDeclaration() {
  ConstructorDeclarationContext *_localctx = _tracker.createInstance<ConstructorDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 50, JavaParser::RuleConstructorDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(520);
    identifier();
    setState(521);
    formalParameters();
    setState(524);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::THROWS) {
      setState(522);
      match(JavaParser::THROWS);
      setState(523);
      qualifiedNameList();
    }
    setState(526);
    antlrcpp::downCast<ConstructorDeclarationContext *>(_localctx)->constructorBody = block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FieldDeclarationContext ------------------------------------------------------------------

JavaParser::FieldDeclarationContext::FieldDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::TypeTypeContext* JavaParser::FieldDeclarationContext::typeType() {
  return getRuleContext<JavaParser::TypeTypeContext>(0);
}

JavaParser::VariableDeclaratorsContext* JavaParser::FieldDeclarationContext::variableDeclarators() {
  return getRuleContext<JavaParser::VariableDeclaratorsContext>(0);
}

tree::TerminalNode* JavaParser::FieldDeclarationContext::SEMI() {
  return getToken(JavaParser::SEMI, 0);
}


size_t JavaParser::FieldDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleFieldDeclaration;
}

void JavaParser::FieldDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFieldDeclaration(this);
}

void JavaParser::FieldDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFieldDeclaration(this);
}

JavaParser::FieldDeclarationContext* JavaParser::fieldDeclaration() {
  FieldDeclarationContext *_localctx = _tracker.createInstance<FieldDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 52, JavaParser::RuleFieldDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(528);
    typeType();
    setState(529);
    variableDeclarators();
    setState(530);
    match(JavaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceBodyDeclarationContext ------------------------------------------------------------------

JavaParser::InterfaceBodyDeclarationContext::InterfaceBodyDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::InterfaceMemberDeclarationContext* JavaParser::InterfaceBodyDeclarationContext::interfaceMemberDeclaration() {
  return getRuleContext<JavaParser::InterfaceMemberDeclarationContext>(0);
}

std::vector<JavaParser::ModifierContext *> JavaParser::InterfaceBodyDeclarationContext::modifier() {
  return getRuleContexts<JavaParser::ModifierContext>();
}

JavaParser::ModifierContext* JavaParser::InterfaceBodyDeclarationContext::modifier(size_t i) {
  return getRuleContext<JavaParser::ModifierContext>(i);
}

tree::TerminalNode* JavaParser::InterfaceBodyDeclarationContext::SEMI() {
  return getToken(JavaParser::SEMI, 0);
}


size_t JavaParser::InterfaceBodyDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleInterfaceBodyDeclaration;
}

void JavaParser::InterfaceBodyDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterfaceBodyDeclaration(this);
}

void JavaParser::InterfaceBodyDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterfaceBodyDeclaration(this);
}

JavaParser::InterfaceBodyDeclarationContext* JavaParser::interfaceBodyDeclaration() {
  InterfaceBodyDeclarationContext *_localctx = _tracker.createInstance<InterfaceBodyDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 54, JavaParser::RuleInterfaceBodyDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(540);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::ABSTRACT:
      case JavaParser::BOOLEAN:
      case JavaParser::BYTE:
      case JavaParser::CHAR:
      case JavaParser::CLASS:
      case JavaParser::DEFAULT:
      case JavaParser::DOUBLE:
      case JavaParser::ENUM:
      case JavaParser::FINAL:
      case JavaParser::FLOAT:
      case JavaParser::INT:
      case JavaParser::INTERFACE:
      case JavaParser::LONG:
      case JavaParser::NATIVE:
      case JavaParser::PRIVATE:
      case JavaParser::PROTECTED:
      case JavaParser::PUBLIC:
      case JavaParser::SHORT:
      case JavaParser::STATIC:
      case JavaParser::STRICTFP:
      case JavaParser::SYNCHRONIZED:
      case JavaParser::TRANSIENT:
      case JavaParser::VOID:
      case JavaParser::VOLATILE:
      case JavaParser::MODULE:
      case JavaParser::OPEN:
      case JavaParser::REQUIRES:
      case JavaParser::EXPORTS:
      case JavaParser::OPENS:
      case JavaParser::TO:
      case JavaParser::USES:
      case JavaParser::PROVIDES:
      case JavaParser::WITH:
      case JavaParser::TRANSITIVE:
      case JavaParser::VAR:
      case JavaParser::YIELD:
      case JavaParser::RECORD:
      case JavaParser::SEALED:
      case JavaParser::PERMITS:
      case JavaParser::NON_SEALED:
      case JavaParser::LT:
      case JavaParser::AT:
      case JavaParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(535);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 45, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(532);
            modifier(); 
          }
          setState(537);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 45, _ctx);
        }
        setState(538);
        interfaceMemberDeclaration();
        break;
      }

      case JavaParser::SEMI: {
        enterOuterAlt(_localctx, 2);
        setState(539);
        match(JavaParser::SEMI);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceMemberDeclarationContext ------------------------------------------------------------------

JavaParser::InterfaceMemberDeclarationContext::InterfaceMemberDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ConstDeclarationContext* JavaParser::InterfaceMemberDeclarationContext::constDeclaration() {
  return getRuleContext<JavaParser::ConstDeclarationContext>(0);
}

JavaParser::InterfaceMethodDeclarationContext* JavaParser::InterfaceMemberDeclarationContext::interfaceMethodDeclaration() {
  return getRuleContext<JavaParser::InterfaceMethodDeclarationContext>(0);
}

JavaParser::GenericInterfaceMethodDeclarationContext* JavaParser::InterfaceMemberDeclarationContext::genericInterfaceMethodDeclaration() {
  return getRuleContext<JavaParser::GenericInterfaceMethodDeclarationContext>(0);
}

JavaParser::InterfaceDeclarationContext* JavaParser::InterfaceMemberDeclarationContext::interfaceDeclaration() {
  return getRuleContext<JavaParser::InterfaceDeclarationContext>(0);
}

JavaParser::AnnotationTypeDeclarationContext* JavaParser::InterfaceMemberDeclarationContext::annotationTypeDeclaration() {
  return getRuleContext<JavaParser::AnnotationTypeDeclarationContext>(0);
}

JavaParser::ClassDeclarationContext* JavaParser::InterfaceMemberDeclarationContext::classDeclaration() {
  return getRuleContext<JavaParser::ClassDeclarationContext>(0);
}

JavaParser::EnumDeclarationContext* JavaParser::InterfaceMemberDeclarationContext::enumDeclaration() {
  return getRuleContext<JavaParser::EnumDeclarationContext>(0);
}

JavaParser::RecordDeclarationContext* JavaParser::InterfaceMemberDeclarationContext::recordDeclaration() {
  return getRuleContext<JavaParser::RecordDeclarationContext>(0);
}


size_t JavaParser::InterfaceMemberDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleInterfaceMemberDeclaration;
}

void JavaParser::InterfaceMemberDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterfaceMemberDeclaration(this);
}

void JavaParser::InterfaceMemberDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterfaceMemberDeclaration(this);
}

JavaParser::InterfaceMemberDeclarationContext* JavaParser::interfaceMemberDeclaration() {
  InterfaceMemberDeclarationContext *_localctx = _tracker.createInstance<InterfaceMemberDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 56, JavaParser::RuleInterfaceMemberDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(550);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 47, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(542);
      constDeclaration();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(543);
      interfaceMethodDeclaration();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(544);
      genericInterfaceMethodDeclaration();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(545);
      interfaceDeclaration();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(546);
      annotationTypeDeclaration();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(547);
      classDeclaration();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(548);
      enumDeclaration();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(549);
      recordDeclaration();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstDeclarationContext ------------------------------------------------------------------

JavaParser::ConstDeclarationContext::ConstDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::TypeTypeContext* JavaParser::ConstDeclarationContext::typeType() {
  return getRuleContext<JavaParser::TypeTypeContext>(0);
}

std::vector<JavaParser::ConstantDeclaratorContext *> JavaParser::ConstDeclarationContext::constantDeclarator() {
  return getRuleContexts<JavaParser::ConstantDeclaratorContext>();
}

JavaParser::ConstantDeclaratorContext* JavaParser::ConstDeclarationContext::constantDeclarator(size_t i) {
  return getRuleContext<JavaParser::ConstantDeclaratorContext>(i);
}

tree::TerminalNode* JavaParser::ConstDeclarationContext::SEMI() {
  return getToken(JavaParser::SEMI, 0);
}

std::vector<tree::TerminalNode *> JavaParser::ConstDeclarationContext::COMMA() {
  return getTokens(JavaParser::COMMA);
}

tree::TerminalNode* JavaParser::ConstDeclarationContext::COMMA(size_t i) {
  return getToken(JavaParser::COMMA, i);
}


size_t JavaParser::ConstDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleConstDeclaration;
}

void JavaParser::ConstDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstDeclaration(this);
}

void JavaParser::ConstDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstDeclaration(this);
}

JavaParser::ConstDeclarationContext* JavaParser::constDeclaration() {
  ConstDeclarationContext *_localctx = _tracker.createInstance<ConstDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 58, JavaParser::RuleConstDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(552);
    typeType();
    setState(553);
    constantDeclarator();
    setState(558);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::COMMA) {
      setState(554);
      match(JavaParser::COMMA);
      setState(555);
      constantDeclarator();
      setState(560);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(561);
    match(JavaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstantDeclaratorContext ------------------------------------------------------------------

JavaParser::ConstantDeclaratorContext::ConstantDeclaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::ConstantDeclaratorContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

tree::TerminalNode* JavaParser::ConstantDeclaratorContext::ASSIGN() {
  return getToken(JavaParser::ASSIGN, 0);
}

JavaParser::VariableInitializerContext* JavaParser::ConstantDeclaratorContext::variableInitializer() {
  return getRuleContext<JavaParser::VariableInitializerContext>(0);
}

std::vector<tree::TerminalNode *> JavaParser::ConstantDeclaratorContext::LBRACK() {
  return getTokens(JavaParser::LBRACK);
}

tree::TerminalNode* JavaParser::ConstantDeclaratorContext::LBRACK(size_t i) {
  return getToken(JavaParser::LBRACK, i);
}

std::vector<tree::TerminalNode *> JavaParser::ConstantDeclaratorContext::RBRACK() {
  return getTokens(JavaParser::RBRACK);
}

tree::TerminalNode* JavaParser::ConstantDeclaratorContext::RBRACK(size_t i) {
  return getToken(JavaParser::RBRACK, i);
}


size_t JavaParser::ConstantDeclaratorContext::getRuleIndex() const {
  return JavaParser::RuleConstantDeclarator;
}

void JavaParser::ConstantDeclaratorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstantDeclarator(this);
}

void JavaParser::ConstantDeclaratorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstantDeclarator(this);
}

JavaParser::ConstantDeclaratorContext* JavaParser::constantDeclarator() {
  ConstantDeclaratorContext *_localctx = _tracker.createInstance<ConstantDeclaratorContext>(_ctx, getState());
  enterRule(_localctx, 60, JavaParser::RuleConstantDeclarator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(563);
    identifier();
    setState(568);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::LBRACK) {
      setState(564);
      match(JavaParser::LBRACK);
      setState(565);
      match(JavaParser::RBRACK);
      setState(570);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(571);
    match(JavaParser::ASSIGN);
    setState(572);
    variableInitializer();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceMethodDeclarationContext ------------------------------------------------------------------

JavaParser::InterfaceMethodDeclarationContext::InterfaceMethodDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::InterfaceCommonBodyDeclarationContext* JavaParser::InterfaceMethodDeclarationContext::interfaceCommonBodyDeclaration() {
  return getRuleContext<JavaParser::InterfaceCommonBodyDeclarationContext>(0);
}

std::vector<JavaParser::InterfaceMethodModifierContext *> JavaParser::InterfaceMethodDeclarationContext::interfaceMethodModifier() {
  return getRuleContexts<JavaParser::InterfaceMethodModifierContext>();
}

JavaParser::InterfaceMethodModifierContext* JavaParser::InterfaceMethodDeclarationContext::interfaceMethodModifier(size_t i) {
  return getRuleContext<JavaParser::InterfaceMethodModifierContext>(i);
}


size_t JavaParser::InterfaceMethodDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleInterfaceMethodDeclaration;
}

void JavaParser::InterfaceMethodDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterfaceMethodDeclaration(this);
}

void JavaParser::InterfaceMethodDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterfaceMethodDeclaration(this);
}

JavaParser::InterfaceMethodDeclarationContext* JavaParser::interfaceMethodDeclaration() {
  InterfaceMethodDeclarationContext *_localctx = _tracker.createInstance<InterfaceMethodDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 62, JavaParser::RuleInterfaceMethodDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(577);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 50, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(574);
        interfaceMethodModifier(); 
      }
      setState(579);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 50, _ctx);
    }
    setState(580);
    interfaceCommonBodyDeclaration();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceMethodModifierContext ------------------------------------------------------------------

JavaParser::InterfaceMethodModifierContext::InterfaceMethodModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::AnnotationContext* JavaParser::InterfaceMethodModifierContext::annotation() {
  return getRuleContext<JavaParser::AnnotationContext>(0);
}

tree::TerminalNode* JavaParser::InterfaceMethodModifierContext::PUBLIC() {
  return getToken(JavaParser::PUBLIC, 0);
}

tree::TerminalNode* JavaParser::InterfaceMethodModifierContext::ABSTRACT() {
  return getToken(JavaParser::ABSTRACT, 0);
}

tree::TerminalNode* JavaParser::InterfaceMethodModifierContext::DEFAULT() {
  return getToken(JavaParser::DEFAULT, 0);
}

tree::TerminalNode* JavaParser::InterfaceMethodModifierContext::STATIC() {
  return getToken(JavaParser::STATIC, 0);
}

tree::TerminalNode* JavaParser::InterfaceMethodModifierContext::STRICTFP() {
  return getToken(JavaParser::STRICTFP, 0);
}


size_t JavaParser::InterfaceMethodModifierContext::getRuleIndex() const {
  return JavaParser::RuleInterfaceMethodModifier;
}

void JavaParser::InterfaceMethodModifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterfaceMethodModifier(this);
}

void JavaParser::InterfaceMethodModifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterfaceMethodModifier(this);
}

JavaParser::InterfaceMethodModifierContext* JavaParser::interfaceMethodModifier() {
  InterfaceMethodModifierContext *_localctx = _tracker.createInstance<InterfaceMethodModifierContext>(_ctx, getState());
  enterRule(_localctx, 64, JavaParser::RuleInterfaceMethodModifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(588);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::MODULE:
      case JavaParser::OPEN:
      case JavaParser::REQUIRES:
      case JavaParser::EXPORTS:
      case JavaParser::OPENS:
      case JavaParser::TO:
      case JavaParser::USES:
      case JavaParser::PROVIDES:
      case JavaParser::WITH:
      case JavaParser::TRANSITIVE:
      case JavaParser::VAR:
      case JavaParser::YIELD:
      case JavaParser::RECORD:
      case JavaParser::SEALED:
      case JavaParser::PERMITS:
      case JavaParser::AT:
      case JavaParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(582);
        annotation();
        break;
      }

      case JavaParser::PUBLIC: {
        enterOuterAlt(_localctx, 2);
        setState(583);
        match(JavaParser::PUBLIC);
        break;
      }

      case JavaParser::ABSTRACT: {
        enterOuterAlt(_localctx, 3);
        setState(584);
        match(JavaParser::ABSTRACT);
        break;
      }

      case JavaParser::DEFAULT: {
        enterOuterAlt(_localctx, 4);
        setState(585);
        match(JavaParser::DEFAULT);
        break;
      }

      case JavaParser::STATIC: {
        enterOuterAlt(_localctx, 5);
        setState(586);
        match(JavaParser::STATIC);
        break;
      }

      case JavaParser::STRICTFP: {
        enterOuterAlt(_localctx, 6);
        setState(587);
        match(JavaParser::STRICTFP);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GenericInterfaceMethodDeclarationContext ------------------------------------------------------------------

JavaParser::GenericInterfaceMethodDeclarationContext::GenericInterfaceMethodDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::TypeParametersContext* JavaParser::GenericInterfaceMethodDeclarationContext::typeParameters() {
  return getRuleContext<JavaParser::TypeParametersContext>(0);
}

JavaParser::InterfaceCommonBodyDeclarationContext* JavaParser::GenericInterfaceMethodDeclarationContext::interfaceCommonBodyDeclaration() {
  return getRuleContext<JavaParser::InterfaceCommonBodyDeclarationContext>(0);
}

std::vector<JavaParser::InterfaceMethodModifierContext *> JavaParser::GenericInterfaceMethodDeclarationContext::interfaceMethodModifier() {
  return getRuleContexts<JavaParser::InterfaceMethodModifierContext>();
}

JavaParser::InterfaceMethodModifierContext* JavaParser::GenericInterfaceMethodDeclarationContext::interfaceMethodModifier(size_t i) {
  return getRuleContext<JavaParser::InterfaceMethodModifierContext>(i);
}


size_t JavaParser::GenericInterfaceMethodDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleGenericInterfaceMethodDeclaration;
}

void JavaParser::GenericInterfaceMethodDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGenericInterfaceMethodDeclaration(this);
}

void JavaParser::GenericInterfaceMethodDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGenericInterfaceMethodDeclaration(this);
}

JavaParser::GenericInterfaceMethodDeclarationContext* JavaParser::genericInterfaceMethodDeclaration() {
  GenericInterfaceMethodDeclarationContext *_localctx = _tracker.createInstance<GenericInterfaceMethodDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 66, JavaParser::RuleGenericInterfaceMethodDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(593);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la - 1) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 1)) & -1125470410110975) != 0 || (((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & -8935141660703064063) != 0) {
      setState(590);
      interfaceMethodModifier();
      setState(595);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(596);
    typeParameters();
    setState(597);
    interfaceCommonBodyDeclaration();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceCommonBodyDeclarationContext ------------------------------------------------------------------

JavaParser::InterfaceCommonBodyDeclarationContext::InterfaceCommonBodyDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::TypeTypeOrVoidContext* JavaParser::InterfaceCommonBodyDeclarationContext::typeTypeOrVoid() {
  return getRuleContext<JavaParser::TypeTypeOrVoidContext>(0);
}

JavaParser::IdentifierContext* JavaParser::InterfaceCommonBodyDeclarationContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::FormalParametersContext* JavaParser::InterfaceCommonBodyDeclarationContext::formalParameters() {
  return getRuleContext<JavaParser::FormalParametersContext>(0);
}

JavaParser::MethodBodyContext* JavaParser::InterfaceCommonBodyDeclarationContext::methodBody() {
  return getRuleContext<JavaParser::MethodBodyContext>(0);
}

std::vector<JavaParser::AnnotationContext *> JavaParser::InterfaceCommonBodyDeclarationContext::annotation() {
  return getRuleContexts<JavaParser::AnnotationContext>();
}

JavaParser::AnnotationContext* JavaParser::InterfaceCommonBodyDeclarationContext::annotation(size_t i) {
  return getRuleContext<JavaParser::AnnotationContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::InterfaceCommonBodyDeclarationContext::LBRACK() {
  return getTokens(JavaParser::LBRACK);
}

tree::TerminalNode* JavaParser::InterfaceCommonBodyDeclarationContext::LBRACK(size_t i) {
  return getToken(JavaParser::LBRACK, i);
}

std::vector<tree::TerminalNode *> JavaParser::InterfaceCommonBodyDeclarationContext::RBRACK() {
  return getTokens(JavaParser::RBRACK);
}

tree::TerminalNode* JavaParser::InterfaceCommonBodyDeclarationContext::RBRACK(size_t i) {
  return getToken(JavaParser::RBRACK, i);
}

tree::TerminalNode* JavaParser::InterfaceCommonBodyDeclarationContext::THROWS() {
  return getToken(JavaParser::THROWS, 0);
}

JavaParser::QualifiedNameListContext* JavaParser::InterfaceCommonBodyDeclarationContext::qualifiedNameList() {
  return getRuleContext<JavaParser::QualifiedNameListContext>(0);
}


size_t JavaParser::InterfaceCommonBodyDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleInterfaceCommonBodyDeclaration;
}

void JavaParser::InterfaceCommonBodyDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterfaceCommonBodyDeclaration(this);
}

void JavaParser::InterfaceCommonBodyDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterfaceCommonBodyDeclaration(this);
}

JavaParser::InterfaceCommonBodyDeclarationContext* JavaParser::interfaceCommonBodyDeclaration() {
  InterfaceCommonBodyDeclarationContext *_localctx = _tracker.createInstance<InterfaceCommonBodyDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 68, JavaParser::RuleInterfaceCommonBodyDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(602);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 53, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(599);
        annotation(); 
      }
      setState(604);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 53, _ctx);
    }
    setState(605);
    typeTypeOrVoid();
    setState(606);
    identifier();
    setState(607);
    formalParameters();
    setState(612);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::LBRACK) {
      setState(608);
      match(JavaParser::LBRACK);
      setState(609);
      match(JavaParser::RBRACK);
      setState(614);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(617);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::THROWS) {
      setState(615);
      match(JavaParser::THROWS);
      setState(616);
      qualifiedNameList();
    }
    setState(619);
    methodBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableDeclaratorsContext ------------------------------------------------------------------

JavaParser::VariableDeclaratorsContext::VariableDeclaratorsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::VariableDeclaratorContext *> JavaParser::VariableDeclaratorsContext::variableDeclarator() {
  return getRuleContexts<JavaParser::VariableDeclaratorContext>();
}

JavaParser::VariableDeclaratorContext* JavaParser::VariableDeclaratorsContext::variableDeclarator(size_t i) {
  return getRuleContext<JavaParser::VariableDeclaratorContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::VariableDeclaratorsContext::COMMA() {
  return getTokens(JavaParser::COMMA);
}

tree::TerminalNode* JavaParser::VariableDeclaratorsContext::COMMA(size_t i) {
  return getToken(JavaParser::COMMA, i);
}


size_t JavaParser::VariableDeclaratorsContext::getRuleIndex() const {
  return JavaParser::RuleVariableDeclarators;
}

void JavaParser::VariableDeclaratorsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariableDeclarators(this);
}

void JavaParser::VariableDeclaratorsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariableDeclarators(this);
}

JavaParser::VariableDeclaratorsContext* JavaParser::variableDeclarators() {
  VariableDeclaratorsContext *_localctx = _tracker.createInstance<VariableDeclaratorsContext>(_ctx, getState());
  enterRule(_localctx, 70, JavaParser::RuleVariableDeclarators);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(621);
    variableDeclarator();
    setState(626);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::COMMA) {
      setState(622);
      match(JavaParser::COMMA);
      setState(623);
      variableDeclarator();
      setState(628);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableDeclaratorContext ------------------------------------------------------------------

JavaParser::VariableDeclaratorContext::VariableDeclaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::VariableDeclaratorIdContext* JavaParser::VariableDeclaratorContext::variableDeclaratorId() {
  return getRuleContext<JavaParser::VariableDeclaratorIdContext>(0);
}

tree::TerminalNode* JavaParser::VariableDeclaratorContext::ASSIGN() {
  return getToken(JavaParser::ASSIGN, 0);
}

JavaParser::VariableInitializerContext* JavaParser::VariableDeclaratorContext::variableInitializer() {
  return getRuleContext<JavaParser::VariableInitializerContext>(0);
}


size_t JavaParser::VariableDeclaratorContext::getRuleIndex() const {
  return JavaParser::RuleVariableDeclarator;
}

void JavaParser::VariableDeclaratorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariableDeclarator(this);
}

void JavaParser::VariableDeclaratorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariableDeclarator(this);
}

JavaParser::VariableDeclaratorContext* JavaParser::variableDeclarator() {
  VariableDeclaratorContext *_localctx = _tracker.createInstance<VariableDeclaratorContext>(_ctx, getState());
  enterRule(_localctx, 72, JavaParser::RuleVariableDeclarator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(629);
    variableDeclaratorId();
    setState(632);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::ASSIGN) {
      setState(630);
      match(JavaParser::ASSIGN);
      setState(631);
      variableInitializer();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableDeclaratorIdContext ------------------------------------------------------------------

JavaParser::VariableDeclaratorIdContext::VariableDeclaratorIdContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::VariableDeclaratorIdContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

std::vector<tree::TerminalNode *> JavaParser::VariableDeclaratorIdContext::LBRACK() {
  return getTokens(JavaParser::LBRACK);
}

tree::TerminalNode* JavaParser::VariableDeclaratorIdContext::LBRACK(size_t i) {
  return getToken(JavaParser::LBRACK, i);
}

std::vector<tree::TerminalNode *> JavaParser::VariableDeclaratorIdContext::RBRACK() {
  return getTokens(JavaParser::RBRACK);
}

tree::TerminalNode* JavaParser::VariableDeclaratorIdContext::RBRACK(size_t i) {
  return getToken(JavaParser::RBRACK, i);
}


size_t JavaParser::VariableDeclaratorIdContext::getRuleIndex() const {
  return JavaParser::RuleVariableDeclaratorId;
}

void JavaParser::VariableDeclaratorIdContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariableDeclaratorId(this);
}

void JavaParser::VariableDeclaratorIdContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariableDeclaratorId(this);
}

JavaParser::VariableDeclaratorIdContext* JavaParser::variableDeclaratorId() {
  VariableDeclaratorIdContext *_localctx = _tracker.createInstance<VariableDeclaratorIdContext>(_ctx, getState());
  enterRule(_localctx, 74, JavaParser::RuleVariableDeclaratorId);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(634);
    identifier();
    setState(639);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::LBRACK) {
      setState(635);
      match(JavaParser::LBRACK);
      setState(636);
      match(JavaParser::RBRACK);
      setState(641);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableInitializerContext ------------------------------------------------------------------

JavaParser::VariableInitializerContext::VariableInitializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ArrayInitializerContext* JavaParser::VariableInitializerContext::arrayInitializer() {
  return getRuleContext<JavaParser::ArrayInitializerContext>(0);
}

JavaParser::ExpressionContext* JavaParser::VariableInitializerContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}


size_t JavaParser::VariableInitializerContext::getRuleIndex() const {
  return JavaParser::RuleVariableInitializer;
}

void JavaParser::VariableInitializerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariableInitializer(this);
}

void JavaParser::VariableInitializerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariableInitializer(this);
}

JavaParser::VariableInitializerContext* JavaParser::variableInitializer() {
  VariableInitializerContext *_localctx = _tracker.createInstance<VariableInitializerContext>(_ctx, getState());
  enterRule(_localctx, 76, JavaParser::RuleVariableInitializer);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(644);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::LBRACE: {
        enterOuterAlt(_localctx, 1);
        setState(642);
        arrayInitializer();
        break;
      }

      case JavaParser::BOOLEAN:
      case JavaParser::BYTE:
      case JavaParser::CHAR:
      case JavaParser::DOUBLE:
      case JavaParser::FLOAT:
      case JavaParser::INT:
      case JavaParser::LONG:
      case JavaParser::NEW:
      case JavaParser::SHORT:
      case JavaParser::SUPER:
      case JavaParser::SWITCH:
      case JavaParser::THIS:
      case JavaParser::VOID:
      case JavaParser::MODULE:
      case JavaParser::OPEN:
      case JavaParser::REQUIRES:
      case JavaParser::EXPORTS:
      case JavaParser::OPENS:
      case JavaParser::TO:
      case JavaParser::USES:
      case JavaParser::PROVIDES:
      case JavaParser::WITH:
      case JavaParser::TRANSITIVE:
      case JavaParser::VAR:
      case JavaParser::YIELD:
      case JavaParser::RECORD:
      case JavaParser::SEALED:
      case JavaParser::PERMITS:
      case JavaParser::DECIMAL_LITERAL:
      case JavaParser::HEX_LITERAL:
      case JavaParser::OCT_LITERAL:
      case JavaParser::BINARY_LITERAL:
      case JavaParser::FLOAT_LITERAL:
      case JavaParser::HEX_FLOAT_LITERAL:
      case JavaParser::BOOL_LITERAL:
      case JavaParser::CHAR_LITERAL:
      case JavaParser::STRING_LITERAL:
      case JavaParser::TEXT_BLOCK:
      case JavaParser::NULL_LITERAL:
      case JavaParser::LPAREN:
      case JavaParser::LT:
      case JavaParser::BANG:
      case JavaParser::TILDE:
      case JavaParser::INC:
      case JavaParser::DEC:
      case JavaParser::ADD:
      case JavaParser::SUB:
      case JavaParser::AT:
      case JavaParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 2);
        setState(643);
        expression(0);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayInitializerContext ------------------------------------------------------------------

JavaParser::ArrayInitializerContext::ArrayInitializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::ArrayInitializerContext::LBRACE() {
  return getToken(JavaParser::LBRACE, 0);
}

tree::TerminalNode* JavaParser::ArrayInitializerContext::RBRACE() {
  return getToken(JavaParser::RBRACE, 0);
}

std::vector<JavaParser::VariableInitializerContext *> JavaParser::ArrayInitializerContext::variableInitializer() {
  return getRuleContexts<JavaParser::VariableInitializerContext>();
}

JavaParser::VariableInitializerContext* JavaParser::ArrayInitializerContext::variableInitializer(size_t i) {
  return getRuleContext<JavaParser::VariableInitializerContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::ArrayInitializerContext::COMMA() {
  return getTokens(JavaParser::COMMA);
}

tree::TerminalNode* JavaParser::ArrayInitializerContext::COMMA(size_t i) {
  return getToken(JavaParser::COMMA, i);
}


size_t JavaParser::ArrayInitializerContext::getRuleIndex() const {
  return JavaParser::RuleArrayInitializer;
}

void JavaParser::ArrayInitializerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArrayInitializer(this);
}

void JavaParser::ArrayInitializerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArrayInitializer(this);
}

JavaParser::ArrayInitializerContext* JavaParser::arrayInitializer() {
  ArrayInitializerContext *_localctx = _tracker.createInstance<ArrayInitializerContext>(_ctx, getState());
  enterRule(_localctx, 78, JavaParser::RuleArrayInitializer);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(646);
    match(JavaParser::LBRACE);
    setState(658);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la - 3) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 3)) & 9223127275610966053) != 0 || (((_la - 67) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 67)) & 2377900732130013183) != 0) {
      setState(647);
      variableInitializer();
      setState(652);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 60, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(648);
          match(JavaParser::COMMA);
          setState(649);
          variableInitializer(); 
        }
        setState(654);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 60, _ctx);
      }
      setState(656);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::COMMA) {
        setState(655);
        match(JavaParser::COMMA);
      }
    }
    setState(660);
    match(JavaParser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassOrInterfaceTypeContext ------------------------------------------------------------------

JavaParser::ClassOrInterfaceTypeContext::ClassOrInterfaceTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::TypeIdentifierContext* JavaParser::ClassOrInterfaceTypeContext::typeIdentifier() {
  return getRuleContext<JavaParser::TypeIdentifierContext>(0);
}

std::vector<JavaParser::IdentifierContext *> JavaParser::ClassOrInterfaceTypeContext::identifier() {
  return getRuleContexts<JavaParser::IdentifierContext>();
}

JavaParser::IdentifierContext* JavaParser::ClassOrInterfaceTypeContext::identifier(size_t i) {
  return getRuleContext<JavaParser::IdentifierContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::ClassOrInterfaceTypeContext::DOT() {
  return getTokens(JavaParser::DOT);
}

tree::TerminalNode* JavaParser::ClassOrInterfaceTypeContext::DOT(size_t i) {
  return getToken(JavaParser::DOT, i);
}

std::vector<JavaParser::TypeArgumentsContext *> JavaParser::ClassOrInterfaceTypeContext::typeArguments() {
  return getRuleContexts<JavaParser::TypeArgumentsContext>();
}

JavaParser::TypeArgumentsContext* JavaParser::ClassOrInterfaceTypeContext::typeArguments(size_t i) {
  return getRuleContext<JavaParser::TypeArgumentsContext>(i);
}


size_t JavaParser::ClassOrInterfaceTypeContext::getRuleIndex() const {
  return JavaParser::RuleClassOrInterfaceType;
}

void JavaParser::ClassOrInterfaceTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassOrInterfaceType(this);
}

void JavaParser::ClassOrInterfaceTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassOrInterfaceType(this);
}

JavaParser::ClassOrInterfaceTypeContext* JavaParser::classOrInterfaceType() {
  ClassOrInterfaceTypeContext *_localctx = _tracker.createInstance<ClassOrInterfaceTypeContext>(_ctx, getState());
  enterRule(_localctx, 80, JavaParser::RuleClassOrInterfaceType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(670);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 64, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(662);
        identifier();
        setState(664);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == JavaParser::LT) {
          setState(663);
          typeArguments();
        }
        setState(666);
        match(JavaParser::DOT); 
      }
      setState(672);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 64, _ctx);
    }
    setState(673);
    typeIdentifier();
    setState(675);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 65, _ctx)) {
    case 1: {
      setState(674);
      typeArguments();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeArgumentContext ------------------------------------------------------------------

JavaParser::TypeArgumentContext::TypeArgumentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::TypeTypeContext* JavaParser::TypeArgumentContext::typeType() {
  return getRuleContext<JavaParser::TypeTypeContext>(0);
}

tree::TerminalNode* JavaParser::TypeArgumentContext::QUESTION() {
  return getToken(JavaParser::QUESTION, 0);
}

std::vector<JavaParser::AnnotationContext *> JavaParser::TypeArgumentContext::annotation() {
  return getRuleContexts<JavaParser::AnnotationContext>();
}

JavaParser::AnnotationContext* JavaParser::TypeArgumentContext::annotation(size_t i) {
  return getRuleContext<JavaParser::AnnotationContext>(i);
}

tree::TerminalNode* JavaParser::TypeArgumentContext::EXTENDS() {
  return getToken(JavaParser::EXTENDS, 0);
}

tree::TerminalNode* JavaParser::TypeArgumentContext::SUPER() {
  return getToken(JavaParser::SUPER, 0);
}


size_t JavaParser::TypeArgumentContext::getRuleIndex() const {
  return JavaParser::RuleTypeArgument;
}

void JavaParser::TypeArgumentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeArgument(this);
}

void JavaParser::TypeArgumentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeArgument(this);
}

JavaParser::TypeArgumentContext* JavaParser::typeArgument() {
  TypeArgumentContext *_localctx = _tracker.createInstance<TypeArgumentContext>(_ctx, getState());
  enterRule(_localctx, 82, JavaParser::RuleTypeArgument);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(689);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 68, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(677);
      typeType();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(681);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la - 51) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 51)) & 32767) != 0 || _la == JavaParser::AT

      || _la == JavaParser::IDENTIFIER) {
        setState(678);
        annotation();
        setState(683);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(684);
      match(JavaParser::QUESTION);
      setState(687);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::EXTENDS

      || _la == JavaParser::SUPER) {
        setState(685);
        _la = _input->LA(1);
        if (!(_la == JavaParser::EXTENDS

        || _la == JavaParser::SUPER)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(686);
        typeType();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QualifiedNameListContext ------------------------------------------------------------------

JavaParser::QualifiedNameListContext::QualifiedNameListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::QualifiedNameContext *> JavaParser::QualifiedNameListContext::qualifiedName() {
  return getRuleContexts<JavaParser::QualifiedNameContext>();
}

JavaParser::QualifiedNameContext* JavaParser::QualifiedNameListContext::qualifiedName(size_t i) {
  return getRuleContext<JavaParser::QualifiedNameContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::QualifiedNameListContext::COMMA() {
  return getTokens(JavaParser::COMMA);
}

tree::TerminalNode* JavaParser::QualifiedNameListContext::COMMA(size_t i) {
  return getToken(JavaParser::COMMA, i);
}


size_t JavaParser::QualifiedNameListContext::getRuleIndex() const {
  return JavaParser::RuleQualifiedNameList;
}

void JavaParser::QualifiedNameListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQualifiedNameList(this);
}

void JavaParser::QualifiedNameListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQualifiedNameList(this);
}

JavaParser::QualifiedNameListContext* JavaParser::qualifiedNameList() {
  QualifiedNameListContext *_localctx = _tracker.createInstance<QualifiedNameListContext>(_ctx, getState());
  enterRule(_localctx, 84, JavaParser::RuleQualifiedNameList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(691);
    qualifiedName();
    setState(696);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::COMMA) {
      setState(692);
      match(JavaParser::COMMA);
      setState(693);
      qualifiedName();
      setState(698);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FormalParametersContext ------------------------------------------------------------------

JavaParser::FormalParametersContext::FormalParametersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::FormalParametersContext::LPAREN() {
  return getToken(JavaParser::LPAREN, 0);
}

tree::TerminalNode* JavaParser::FormalParametersContext::RPAREN() {
  return getToken(JavaParser::RPAREN, 0);
}

JavaParser::ReceiverParameterContext* JavaParser::FormalParametersContext::receiverParameter() {
  return getRuleContext<JavaParser::ReceiverParameterContext>(0);
}

tree::TerminalNode* JavaParser::FormalParametersContext::COMMA() {
  return getToken(JavaParser::COMMA, 0);
}

JavaParser::FormalParameterListContext* JavaParser::FormalParametersContext::formalParameterList() {
  return getRuleContext<JavaParser::FormalParameterListContext>(0);
}


size_t JavaParser::FormalParametersContext::getRuleIndex() const {
  return JavaParser::RuleFormalParameters;
}

void JavaParser::FormalParametersContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFormalParameters(this);
}

void JavaParser::FormalParametersContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFormalParameters(this);
}

JavaParser::FormalParametersContext* JavaParser::formalParameters() {
  FormalParametersContext *_localctx = _tracker.createInstance<FormalParametersContext>(_ctx, getState());
  enterRule(_localctx, 86, JavaParser::RuleFormalParameters);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(699);
    match(JavaParser::LPAREN);
    setState(711);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 73, _ctx)) {
    case 1: {
      setState(701);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la - 3) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 3)) & 9223090579141953573) != 0 || _la == JavaParser::AT

      || _la == JavaParser::IDENTIFIER) {
        setState(700);
        receiverParameter();
      }
      break;
    }

    case 2: {
      setState(703);
      receiverParameter();
      setState(706);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::COMMA) {
        setState(704);
        match(JavaParser::COMMA);
        setState(705);
        formalParameterList();
      }
      break;
    }

    case 3: {
      setState(709);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la - 3) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 3)) & 9223090579141986341) != 0 || _la == JavaParser::AT

      || _la == JavaParser::IDENTIFIER) {
        setState(708);
        formalParameterList();
      }
      break;
    }

    default:
      break;
    }
    setState(713);
    match(JavaParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReceiverParameterContext ------------------------------------------------------------------

JavaParser::ReceiverParameterContext::ReceiverParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::TypeTypeContext* JavaParser::ReceiverParameterContext::typeType() {
  return getRuleContext<JavaParser::TypeTypeContext>(0);
}

tree::TerminalNode* JavaParser::ReceiverParameterContext::THIS() {
  return getToken(JavaParser::THIS, 0);
}

std::vector<JavaParser::IdentifierContext *> JavaParser::ReceiverParameterContext::identifier() {
  return getRuleContexts<JavaParser::IdentifierContext>();
}

JavaParser::IdentifierContext* JavaParser::ReceiverParameterContext::identifier(size_t i) {
  return getRuleContext<JavaParser::IdentifierContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::ReceiverParameterContext::DOT() {
  return getTokens(JavaParser::DOT);
}

tree::TerminalNode* JavaParser::ReceiverParameterContext::DOT(size_t i) {
  return getToken(JavaParser::DOT, i);
}


size_t JavaParser::ReceiverParameterContext::getRuleIndex() const {
  return JavaParser::RuleReceiverParameter;
}

void JavaParser::ReceiverParameterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReceiverParameter(this);
}

void JavaParser::ReceiverParameterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReceiverParameter(this);
}

JavaParser::ReceiverParameterContext* JavaParser::receiverParameter() {
  ReceiverParameterContext *_localctx = _tracker.createInstance<ReceiverParameterContext>(_ctx, getState());
  enterRule(_localctx, 88, JavaParser::RuleReceiverParameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(715);
    typeType();
    setState(721);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la - 51) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 51)) & 32767) != 0 || _la == JavaParser::IDENTIFIER) {
      setState(716);
      identifier();
      setState(717);
      match(JavaParser::DOT);
      setState(723);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(724);
    match(JavaParser::THIS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FormalParameterListContext ------------------------------------------------------------------

JavaParser::FormalParameterListContext::FormalParameterListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::FormalParameterContext *> JavaParser::FormalParameterListContext::formalParameter() {
  return getRuleContexts<JavaParser::FormalParameterContext>();
}

JavaParser::FormalParameterContext* JavaParser::FormalParameterListContext::formalParameter(size_t i) {
  return getRuleContext<JavaParser::FormalParameterContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::FormalParameterListContext::COMMA() {
  return getTokens(JavaParser::COMMA);
}

tree::TerminalNode* JavaParser::FormalParameterListContext::COMMA(size_t i) {
  return getToken(JavaParser::COMMA, i);
}

JavaParser::LastFormalParameterContext* JavaParser::FormalParameterListContext::lastFormalParameter() {
  return getRuleContext<JavaParser::LastFormalParameterContext>(0);
}


size_t JavaParser::FormalParameterListContext::getRuleIndex() const {
  return JavaParser::RuleFormalParameterList;
}

void JavaParser::FormalParameterListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFormalParameterList(this);
}

void JavaParser::FormalParameterListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFormalParameterList(this);
}

JavaParser::FormalParameterListContext* JavaParser::formalParameterList() {
  FormalParameterListContext *_localctx = _tracker.createInstance<FormalParameterListContext>(_ctx, getState());
  enterRule(_localctx, 90, JavaParser::RuleFormalParameterList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(739);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 77, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(726);
      formalParameter();
      setState(731);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 75, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(727);
          match(JavaParser::COMMA);
          setState(728);
          formalParameter(); 
        }
        setState(733);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 75, _ctx);
      }
      setState(736);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::COMMA) {
        setState(734);
        match(JavaParser::COMMA);
        setState(735);
        lastFormalParameter();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(738);
      lastFormalParameter();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FormalParameterContext ------------------------------------------------------------------

JavaParser::FormalParameterContext::FormalParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::TypeTypeContext* JavaParser::FormalParameterContext::typeType() {
  return getRuleContext<JavaParser::TypeTypeContext>(0);
}

JavaParser::VariableDeclaratorIdContext* JavaParser::FormalParameterContext::variableDeclaratorId() {
  return getRuleContext<JavaParser::VariableDeclaratorIdContext>(0);
}

std::vector<JavaParser::VariableModifierContext *> JavaParser::FormalParameterContext::variableModifier() {
  return getRuleContexts<JavaParser::VariableModifierContext>();
}

JavaParser::VariableModifierContext* JavaParser::FormalParameterContext::variableModifier(size_t i) {
  return getRuleContext<JavaParser::VariableModifierContext>(i);
}


size_t JavaParser::FormalParameterContext::getRuleIndex() const {
  return JavaParser::RuleFormalParameter;
}

void JavaParser::FormalParameterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFormalParameter(this);
}

void JavaParser::FormalParameterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFormalParameter(this);
}

JavaParser::FormalParameterContext* JavaParser::formalParameter() {
  FormalParameterContext *_localctx = _tracker.createInstance<FormalParameterContext>(_ctx, getState());
  enterRule(_localctx, 92, JavaParser::RuleFormalParameter);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(744);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 78, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(741);
        variableModifier(); 
      }
      setState(746);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 78, _ctx);
    }
    setState(747);
    typeType();
    setState(748);
    variableDeclaratorId();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LastFormalParameterContext ------------------------------------------------------------------

JavaParser::LastFormalParameterContext::LastFormalParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::TypeTypeContext* JavaParser::LastFormalParameterContext::typeType() {
  return getRuleContext<JavaParser::TypeTypeContext>(0);
}

tree::TerminalNode* JavaParser::LastFormalParameterContext::ELLIPSIS() {
  return getToken(JavaParser::ELLIPSIS, 0);
}

JavaParser::VariableDeclaratorIdContext* JavaParser::LastFormalParameterContext::variableDeclaratorId() {
  return getRuleContext<JavaParser::VariableDeclaratorIdContext>(0);
}

std::vector<JavaParser::VariableModifierContext *> JavaParser::LastFormalParameterContext::variableModifier() {
  return getRuleContexts<JavaParser::VariableModifierContext>();
}

JavaParser::VariableModifierContext* JavaParser::LastFormalParameterContext::variableModifier(size_t i) {
  return getRuleContext<JavaParser::VariableModifierContext>(i);
}

std::vector<JavaParser::AnnotationContext *> JavaParser::LastFormalParameterContext::annotation() {
  return getRuleContexts<JavaParser::AnnotationContext>();
}

JavaParser::AnnotationContext* JavaParser::LastFormalParameterContext::annotation(size_t i) {
  return getRuleContext<JavaParser::AnnotationContext>(i);
}


size_t JavaParser::LastFormalParameterContext::getRuleIndex() const {
  return JavaParser::RuleLastFormalParameter;
}

void JavaParser::LastFormalParameterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLastFormalParameter(this);
}

void JavaParser::LastFormalParameterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLastFormalParameter(this);
}

JavaParser::LastFormalParameterContext* JavaParser::lastFormalParameter() {
  LastFormalParameterContext *_localctx = _tracker.createInstance<LastFormalParameterContext>(_ctx, getState());
  enterRule(_localctx, 94, JavaParser::RuleLastFormalParameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(753);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 79, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(750);
        variableModifier(); 
      }
      setState(755);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 79, _ctx);
    }
    setState(756);
    typeType();
    setState(760);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la - 51) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 51)) & 32767) != 0 || _la == JavaParser::AT

    || _la == JavaParser::IDENTIFIER) {
      setState(757);
      annotation();
      setState(762);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(763);
    match(JavaParser::ELLIPSIS);
    setState(764);
    variableDeclaratorId();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LambdaLVTIListContext ------------------------------------------------------------------

JavaParser::LambdaLVTIListContext::LambdaLVTIListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::LambdaLVTIParameterContext *> JavaParser::LambdaLVTIListContext::lambdaLVTIParameter() {
  return getRuleContexts<JavaParser::LambdaLVTIParameterContext>();
}

JavaParser::LambdaLVTIParameterContext* JavaParser::LambdaLVTIListContext::lambdaLVTIParameter(size_t i) {
  return getRuleContext<JavaParser::LambdaLVTIParameterContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::LambdaLVTIListContext::COMMA() {
  return getTokens(JavaParser::COMMA);
}

tree::TerminalNode* JavaParser::LambdaLVTIListContext::COMMA(size_t i) {
  return getToken(JavaParser::COMMA, i);
}


size_t JavaParser::LambdaLVTIListContext::getRuleIndex() const {
  return JavaParser::RuleLambdaLVTIList;
}

void JavaParser::LambdaLVTIListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLambdaLVTIList(this);
}

void JavaParser::LambdaLVTIListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLambdaLVTIList(this);
}

JavaParser::LambdaLVTIListContext* JavaParser::lambdaLVTIList() {
  LambdaLVTIListContext *_localctx = _tracker.createInstance<LambdaLVTIListContext>(_ctx, getState());
  enterRule(_localctx, 96, JavaParser::RuleLambdaLVTIList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(766);
    lambdaLVTIParameter();
    setState(771);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::COMMA) {
      setState(767);
      match(JavaParser::COMMA);
      setState(768);
      lambdaLVTIParameter();
      setState(773);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LambdaLVTIParameterContext ------------------------------------------------------------------

JavaParser::LambdaLVTIParameterContext::LambdaLVTIParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::LambdaLVTIParameterContext::VAR() {
  return getToken(JavaParser::VAR, 0);
}

JavaParser::IdentifierContext* JavaParser::LambdaLVTIParameterContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

std::vector<JavaParser::VariableModifierContext *> JavaParser::LambdaLVTIParameterContext::variableModifier() {
  return getRuleContexts<JavaParser::VariableModifierContext>();
}

JavaParser::VariableModifierContext* JavaParser::LambdaLVTIParameterContext::variableModifier(size_t i) {
  return getRuleContext<JavaParser::VariableModifierContext>(i);
}


size_t JavaParser::LambdaLVTIParameterContext::getRuleIndex() const {
  return JavaParser::RuleLambdaLVTIParameter;
}

void JavaParser::LambdaLVTIParameterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLambdaLVTIParameter(this);
}

void JavaParser::LambdaLVTIParameterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLambdaLVTIParameter(this);
}

JavaParser::LambdaLVTIParameterContext* JavaParser::lambdaLVTIParameter() {
  LambdaLVTIParameterContext *_localctx = _tracker.createInstance<LambdaLVTIParameterContext>(_ctx, getState());
  enterRule(_localctx, 98, JavaParser::RuleLambdaLVTIParameter);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(777);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 82, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(774);
        variableModifier(); 
      }
      setState(779);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 82, _ctx);
    }
    setState(780);
    match(JavaParser::VAR);
    setState(781);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QualifiedNameContext ------------------------------------------------------------------

JavaParser::QualifiedNameContext::QualifiedNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::IdentifierContext *> JavaParser::QualifiedNameContext::identifier() {
  return getRuleContexts<JavaParser::IdentifierContext>();
}

JavaParser::IdentifierContext* JavaParser::QualifiedNameContext::identifier(size_t i) {
  return getRuleContext<JavaParser::IdentifierContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::QualifiedNameContext::DOT() {
  return getTokens(JavaParser::DOT);
}

tree::TerminalNode* JavaParser::QualifiedNameContext::DOT(size_t i) {
  return getToken(JavaParser::DOT, i);
}


size_t JavaParser::QualifiedNameContext::getRuleIndex() const {
  return JavaParser::RuleQualifiedName;
}

void JavaParser::QualifiedNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQualifiedName(this);
}

void JavaParser::QualifiedNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQualifiedName(this);
}

JavaParser::QualifiedNameContext* JavaParser::qualifiedName() {
  QualifiedNameContext *_localctx = _tracker.createInstance<QualifiedNameContext>(_ctx, getState());
  enterRule(_localctx, 100, JavaParser::RuleQualifiedName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(783);
    identifier();
    setState(788);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 83, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(784);
        match(JavaParser::DOT);
        setState(785);
        identifier(); 
      }
      setState(790);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 83, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LiteralContext ------------------------------------------------------------------

JavaParser::LiteralContext::LiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IntegerLiteralContext* JavaParser::LiteralContext::integerLiteral() {
  return getRuleContext<JavaParser::IntegerLiteralContext>(0);
}

JavaParser::FloatLiteralContext* JavaParser::LiteralContext::floatLiteral() {
  return getRuleContext<JavaParser::FloatLiteralContext>(0);
}

tree::TerminalNode* JavaParser::LiteralContext::CHAR_LITERAL() {
  return getToken(JavaParser::CHAR_LITERAL, 0);
}

tree::TerminalNode* JavaParser::LiteralContext::STRING_LITERAL() {
  return getToken(JavaParser::STRING_LITERAL, 0);
}

tree::TerminalNode* JavaParser::LiteralContext::BOOL_LITERAL() {
  return getToken(JavaParser::BOOL_LITERAL, 0);
}

tree::TerminalNode* JavaParser::LiteralContext::NULL_LITERAL() {
  return getToken(JavaParser::NULL_LITERAL, 0);
}

tree::TerminalNode* JavaParser::LiteralContext::TEXT_BLOCK() {
  return getToken(JavaParser::TEXT_BLOCK, 0);
}


size_t JavaParser::LiteralContext::getRuleIndex() const {
  return JavaParser::RuleLiteral;
}

void JavaParser::LiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteral(this);
}

void JavaParser::LiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteral(this);
}

JavaParser::LiteralContext* JavaParser::literal() {
  LiteralContext *_localctx = _tracker.createInstance<LiteralContext>(_ctx, getState());
  enterRule(_localctx, 102, JavaParser::RuleLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(798);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::DECIMAL_LITERAL:
      case JavaParser::HEX_LITERAL:
      case JavaParser::OCT_LITERAL:
      case JavaParser::BINARY_LITERAL: {
        enterOuterAlt(_localctx, 1);
        setState(791);
        integerLiteral();
        break;
      }

      case JavaParser::FLOAT_LITERAL:
      case JavaParser::HEX_FLOAT_LITERAL: {
        enterOuterAlt(_localctx, 2);
        setState(792);
        floatLiteral();
        break;
      }

      case JavaParser::CHAR_LITERAL: {
        enterOuterAlt(_localctx, 3);
        setState(793);
        match(JavaParser::CHAR_LITERAL);
        break;
      }

      case JavaParser::STRING_LITERAL: {
        enterOuterAlt(_localctx, 4);
        setState(794);
        match(JavaParser::STRING_LITERAL);
        break;
      }

      case JavaParser::BOOL_LITERAL: {
        enterOuterAlt(_localctx, 5);
        setState(795);
        match(JavaParser::BOOL_LITERAL);
        break;
      }

      case JavaParser::NULL_LITERAL: {
        enterOuterAlt(_localctx, 6);
        setState(796);
        match(JavaParser::NULL_LITERAL);
        break;
      }

      case JavaParser::TEXT_BLOCK: {
        enterOuterAlt(_localctx, 7);
        setState(797);
        match(JavaParser::TEXT_BLOCK);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IntegerLiteralContext ------------------------------------------------------------------

JavaParser::IntegerLiteralContext::IntegerLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::IntegerLiteralContext::DECIMAL_LITERAL() {
  return getToken(JavaParser::DECIMAL_LITERAL, 0);
}

tree::TerminalNode* JavaParser::IntegerLiteralContext::HEX_LITERAL() {
  return getToken(JavaParser::HEX_LITERAL, 0);
}

tree::TerminalNode* JavaParser::IntegerLiteralContext::OCT_LITERAL() {
  return getToken(JavaParser::OCT_LITERAL, 0);
}

tree::TerminalNode* JavaParser::IntegerLiteralContext::BINARY_LITERAL() {
  return getToken(JavaParser::BINARY_LITERAL, 0);
}


size_t JavaParser::IntegerLiteralContext::getRuleIndex() const {
  return JavaParser::RuleIntegerLiteral;
}

void JavaParser::IntegerLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIntegerLiteral(this);
}

void JavaParser::IntegerLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIntegerLiteral(this);
}

JavaParser::IntegerLiteralContext* JavaParser::integerLiteral() {
  IntegerLiteralContext *_localctx = _tracker.createInstance<IntegerLiteralContext>(_ctx, getState());
  enterRule(_localctx, 104, JavaParser::RuleIntegerLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(800);
    _la = _input->LA(1);
    if (!((((_la - 67) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 67)) & 15) != 0)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FloatLiteralContext ------------------------------------------------------------------

JavaParser::FloatLiteralContext::FloatLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::FloatLiteralContext::FLOAT_LITERAL() {
  return getToken(JavaParser::FLOAT_LITERAL, 0);
}

tree::TerminalNode* JavaParser::FloatLiteralContext::HEX_FLOAT_LITERAL() {
  return getToken(JavaParser::HEX_FLOAT_LITERAL, 0);
}


size_t JavaParser::FloatLiteralContext::getRuleIndex() const {
  return JavaParser::RuleFloatLiteral;
}

void JavaParser::FloatLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFloatLiteral(this);
}

void JavaParser::FloatLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFloatLiteral(this);
}

JavaParser::FloatLiteralContext* JavaParser::floatLiteral() {
  FloatLiteralContext *_localctx = _tracker.createInstance<FloatLiteralContext>(_ctx, getState());
  enterRule(_localctx, 106, JavaParser::RuleFloatLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(802);
    _la = _input->LA(1);
    if (!(_la == JavaParser::FLOAT_LITERAL

    || _la == JavaParser::HEX_FLOAT_LITERAL)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AltAnnotationQualifiedNameContext ------------------------------------------------------------------

JavaParser::AltAnnotationQualifiedNameContext::AltAnnotationQualifiedNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::AltAnnotationQualifiedNameContext::AT() {
  return getToken(JavaParser::AT, 0);
}

std::vector<JavaParser::IdentifierContext *> JavaParser::AltAnnotationQualifiedNameContext::identifier() {
  return getRuleContexts<JavaParser::IdentifierContext>();
}

JavaParser::IdentifierContext* JavaParser::AltAnnotationQualifiedNameContext::identifier(size_t i) {
  return getRuleContext<JavaParser::IdentifierContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::AltAnnotationQualifiedNameContext::DOT() {
  return getTokens(JavaParser::DOT);
}

tree::TerminalNode* JavaParser::AltAnnotationQualifiedNameContext::DOT(size_t i) {
  return getToken(JavaParser::DOT, i);
}


size_t JavaParser::AltAnnotationQualifiedNameContext::getRuleIndex() const {
  return JavaParser::RuleAltAnnotationQualifiedName;
}

void JavaParser::AltAnnotationQualifiedNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAltAnnotationQualifiedName(this);
}

void JavaParser::AltAnnotationQualifiedNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAltAnnotationQualifiedName(this);
}

JavaParser::AltAnnotationQualifiedNameContext* JavaParser::altAnnotationQualifiedName() {
  AltAnnotationQualifiedNameContext *_localctx = _tracker.createInstance<AltAnnotationQualifiedNameContext>(_ctx, getState());
  enterRule(_localctx, 108, JavaParser::RuleAltAnnotationQualifiedName);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(809);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la - 51) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 51)) & 32767) != 0 || _la == JavaParser::IDENTIFIER) {
      setState(804);
      identifier();
      setState(805);
      match(JavaParser::DOT);
      setState(811);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(812);
    match(JavaParser::AT);
    setState(813);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnnotationContext ------------------------------------------------------------------

JavaParser::AnnotationContext::AnnotationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::AnnotationContext::AT() {
  return getToken(JavaParser::AT, 0);
}

JavaParser::QualifiedNameContext* JavaParser::AnnotationContext::qualifiedName() {
  return getRuleContext<JavaParser::QualifiedNameContext>(0);
}

JavaParser::AltAnnotationQualifiedNameContext* JavaParser::AnnotationContext::altAnnotationQualifiedName() {
  return getRuleContext<JavaParser::AltAnnotationQualifiedNameContext>(0);
}

tree::TerminalNode* JavaParser::AnnotationContext::LPAREN() {
  return getToken(JavaParser::LPAREN, 0);
}

tree::TerminalNode* JavaParser::AnnotationContext::RPAREN() {
  return getToken(JavaParser::RPAREN, 0);
}

JavaParser::ElementValuePairsContext* JavaParser::AnnotationContext::elementValuePairs() {
  return getRuleContext<JavaParser::ElementValuePairsContext>(0);
}

JavaParser::ElementValueContext* JavaParser::AnnotationContext::elementValue() {
  return getRuleContext<JavaParser::ElementValueContext>(0);
}


size_t JavaParser::AnnotationContext::getRuleIndex() const {
  return JavaParser::RuleAnnotation;
}

void JavaParser::AnnotationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotation(this);
}

void JavaParser::AnnotationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotation(this);
}

JavaParser::AnnotationContext* JavaParser::annotation() {
  AnnotationContext *_localctx = _tracker.createInstance<AnnotationContext>(_ctx, getState());
  enterRule(_localctx, 110, JavaParser::RuleAnnotation);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(818);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 86, _ctx)) {
    case 1: {
      setState(815);
      match(JavaParser::AT);
      setState(816);
      qualifiedName();
      break;
    }

    case 2: {
      setState(817);
      altAnnotationQualifiedName();
      break;
    }

    default:
      break;
    }
    setState(826);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::LPAREN) {
      setState(820);
      match(JavaParser::LPAREN);
      setState(823);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 87, _ctx)) {
      case 1: {
        setState(821);
        elementValuePairs();
        break;
      }

      case 2: {
        setState(822);
        elementValue();
        break;
      }

      default:
        break;
      }
      setState(825);
      match(JavaParser::RPAREN);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementValuePairsContext ------------------------------------------------------------------

JavaParser::ElementValuePairsContext::ElementValuePairsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::ElementValuePairContext *> JavaParser::ElementValuePairsContext::elementValuePair() {
  return getRuleContexts<JavaParser::ElementValuePairContext>();
}

JavaParser::ElementValuePairContext* JavaParser::ElementValuePairsContext::elementValuePair(size_t i) {
  return getRuleContext<JavaParser::ElementValuePairContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::ElementValuePairsContext::COMMA() {
  return getTokens(JavaParser::COMMA);
}

tree::TerminalNode* JavaParser::ElementValuePairsContext::COMMA(size_t i) {
  return getToken(JavaParser::COMMA, i);
}


size_t JavaParser::ElementValuePairsContext::getRuleIndex() const {
  return JavaParser::RuleElementValuePairs;
}

void JavaParser::ElementValuePairsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElementValuePairs(this);
}

void JavaParser::ElementValuePairsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElementValuePairs(this);
}

JavaParser::ElementValuePairsContext* JavaParser::elementValuePairs() {
  ElementValuePairsContext *_localctx = _tracker.createInstance<ElementValuePairsContext>(_ctx, getState());
  enterRule(_localctx, 112, JavaParser::RuleElementValuePairs);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(828);
    elementValuePair();
    setState(833);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::COMMA) {
      setState(829);
      match(JavaParser::COMMA);
      setState(830);
      elementValuePair();
      setState(835);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementValuePairContext ------------------------------------------------------------------

JavaParser::ElementValuePairContext::ElementValuePairContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::ElementValuePairContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

tree::TerminalNode* JavaParser::ElementValuePairContext::ASSIGN() {
  return getToken(JavaParser::ASSIGN, 0);
}

JavaParser::ElementValueContext* JavaParser::ElementValuePairContext::elementValue() {
  return getRuleContext<JavaParser::ElementValueContext>(0);
}


size_t JavaParser::ElementValuePairContext::getRuleIndex() const {
  return JavaParser::RuleElementValuePair;
}

void JavaParser::ElementValuePairContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElementValuePair(this);
}

void JavaParser::ElementValuePairContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElementValuePair(this);
}

JavaParser::ElementValuePairContext* JavaParser::elementValuePair() {
  ElementValuePairContext *_localctx = _tracker.createInstance<ElementValuePairContext>(_ctx, getState());
  enterRule(_localctx, 114, JavaParser::RuleElementValuePair);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(836);
    identifier();
    setState(837);
    match(JavaParser::ASSIGN);
    setState(838);
    elementValue();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementValueContext ------------------------------------------------------------------

JavaParser::ElementValueContext::ElementValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ExpressionContext* JavaParser::ElementValueContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

JavaParser::AnnotationContext* JavaParser::ElementValueContext::annotation() {
  return getRuleContext<JavaParser::AnnotationContext>(0);
}

JavaParser::ElementValueArrayInitializerContext* JavaParser::ElementValueContext::elementValueArrayInitializer() {
  return getRuleContext<JavaParser::ElementValueArrayInitializerContext>(0);
}


size_t JavaParser::ElementValueContext::getRuleIndex() const {
  return JavaParser::RuleElementValue;
}

void JavaParser::ElementValueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElementValue(this);
}

void JavaParser::ElementValueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElementValue(this);
}

JavaParser::ElementValueContext* JavaParser::elementValue() {
  ElementValueContext *_localctx = _tracker.createInstance<ElementValueContext>(_ctx, getState());
  enterRule(_localctx, 116, JavaParser::RuleElementValue);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(843);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 90, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(840);
      expression(0);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(841);
      annotation();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(842);
      elementValueArrayInitializer();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementValueArrayInitializerContext ------------------------------------------------------------------

JavaParser::ElementValueArrayInitializerContext::ElementValueArrayInitializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::ElementValueArrayInitializerContext::LBRACE() {
  return getToken(JavaParser::LBRACE, 0);
}

tree::TerminalNode* JavaParser::ElementValueArrayInitializerContext::RBRACE() {
  return getToken(JavaParser::RBRACE, 0);
}

std::vector<JavaParser::ElementValueContext *> JavaParser::ElementValueArrayInitializerContext::elementValue() {
  return getRuleContexts<JavaParser::ElementValueContext>();
}

JavaParser::ElementValueContext* JavaParser::ElementValueArrayInitializerContext::elementValue(size_t i) {
  return getRuleContext<JavaParser::ElementValueContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::ElementValueArrayInitializerContext::COMMA() {
  return getTokens(JavaParser::COMMA);
}

tree::TerminalNode* JavaParser::ElementValueArrayInitializerContext::COMMA(size_t i) {
  return getToken(JavaParser::COMMA, i);
}


size_t JavaParser::ElementValueArrayInitializerContext::getRuleIndex() const {
  return JavaParser::RuleElementValueArrayInitializer;
}

void JavaParser::ElementValueArrayInitializerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElementValueArrayInitializer(this);
}

void JavaParser::ElementValueArrayInitializerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElementValueArrayInitializer(this);
}

JavaParser::ElementValueArrayInitializerContext* JavaParser::elementValueArrayInitializer() {
  ElementValueArrayInitializerContext *_localctx = _tracker.createInstance<ElementValueArrayInitializerContext>(_ctx, getState());
  enterRule(_localctx, 118, JavaParser::RuleElementValueArrayInitializer);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(845);
    match(JavaParser::LBRACE);
    setState(854);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la - 3) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 3)) & 9223127275610966053) != 0 || (((_la - 67) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 67)) & 2377900732130013183) != 0) {
      setState(846);
      elementValue();
      setState(851);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 91, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(847);
          match(JavaParser::COMMA);
          setState(848);
          elementValue(); 
        }
        setState(853);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 91, _ctx);
      }
    }
    setState(857);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::COMMA) {
      setState(856);
      match(JavaParser::COMMA);
    }
    setState(859);
    match(JavaParser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnnotationTypeDeclarationContext ------------------------------------------------------------------

JavaParser::AnnotationTypeDeclarationContext::AnnotationTypeDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::AnnotationTypeDeclarationContext::AT() {
  return getToken(JavaParser::AT, 0);
}

tree::TerminalNode* JavaParser::AnnotationTypeDeclarationContext::INTERFACE() {
  return getToken(JavaParser::INTERFACE, 0);
}

JavaParser::IdentifierContext* JavaParser::AnnotationTypeDeclarationContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::AnnotationTypeBodyContext* JavaParser::AnnotationTypeDeclarationContext::annotationTypeBody() {
  return getRuleContext<JavaParser::AnnotationTypeBodyContext>(0);
}


size_t JavaParser::AnnotationTypeDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleAnnotationTypeDeclaration;
}

void JavaParser::AnnotationTypeDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotationTypeDeclaration(this);
}

void JavaParser::AnnotationTypeDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotationTypeDeclaration(this);
}

JavaParser::AnnotationTypeDeclarationContext* JavaParser::annotationTypeDeclaration() {
  AnnotationTypeDeclarationContext *_localctx = _tracker.createInstance<AnnotationTypeDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 120, JavaParser::RuleAnnotationTypeDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(861);
    match(JavaParser::AT);
    setState(862);
    match(JavaParser::INTERFACE);
    setState(863);
    identifier();
    setState(864);
    annotationTypeBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnnotationTypeBodyContext ------------------------------------------------------------------

JavaParser::AnnotationTypeBodyContext::AnnotationTypeBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::AnnotationTypeBodyContext::LBRACE() {
  return getToken(JavaParser::LBRACE, 0);
}

tree::TerminalNode* JavaParser::AnnotationTypeBodyContext::RBRACE() {
  return getToken(JavaParser::RBRACE, 0);
}

std::vector<JavaParser::AnnotationTypeElementDeclarationContext *> JavaParser::AnnotationTypeBodyContext::annotationTypeElementDeclaration() {
  return getRuleContexts<JavaParser::AnnotationTypeElementDeclarationContext>();
}

JavaParser::AnnotationTypeElementDeclarationContext* JavaParser::AnnotationTypeBodyContext::annotationTypeElementDeclaration(size_t i) {
  return getRuleContext<JavaParser::AnnotationTypeElementDeclarationContext>(i);
}


size_t JavaParser::AnnotationTypeBodyContext::getRuleIndex() const {
  return JavaParser::RuleAnnotationTypeBody;
}

void JavaParser::AnnotationTypeBodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotationTypeBody(this);
}

void JavaParser::AnnotationTypeBodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotationTypeBody(this);
}

JavaParser::AnnotationTypeBodyContext* JavaParser::annotationTypeBody() {
  AnnotationTypeBodyContext *_localctx = _tracker.createInstance<AnnotationTypeBodyContext>(_ctx, getState());
  enterRule(_localctx, 122, JavaParser::RuleAnnotationTypeBody);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(866);
    match(JavaParser::LBRACE);
    setState(870);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la - 1) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 1)) & -806529426349675) != 0 || (((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & -8935141660702539773) != 0) {
      setState(867);
      annotationTypeElementDeclaration();
      setState(872);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(873);
    match(JavaParser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnnotationTypeElementDeclarationContext ------------------------------------------------------------------

JavaParser::AnnotationTypeElementDeclarationContext::AnnotationTypeElementDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::AnnotationTypeElementRestContext* JavaParser::AnnotationTypeElementDeclarationContext::annotationTypeElementRest() {
  return getRuleContext<JavaParser::AnnotationTypeElementRestContext>(0);
}

std::vector<JavaParser::ModifierContext *> JavaParser::AnnotationTypeElementDeclarationContext::modifier() {
  return getRuleContexts<JavaParser::ModifierContext>();
}

JavaParser::ModifierContext* JavaParser::AnnotationTypeElementDeclarationContext::modifier(size_t i) {
  return getRuleContext<JavaParser::ModifierContext>(i);
}

tree::TerminalNode* JavaParser::AnnotationTypeElementDeclarationContext::SEMI() {
  return getToken(JavaParser::SEMI, 0);
}


size_t JavaParser::AnnotationTypeElementDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleAnnotationTypeElementDeclaration;
}

void JavaParser::AnnotationTypeElementDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotationTypeElementDeclaration(this);
}

void JavaParser::AnnotationTypeElementDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotationTypeElementDeclaration(this);
}

JavaParser::AnnotationTypeElementDeclarationContext* JavaParser::annotationTypeElementDeclaration() {
  AnnotationTypeElementDeclarationContext *_localctx = _tracker.createInstance<AnnotationTypeElementDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 124, JavaParser::RuleAnnotationTypeElementDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(883);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::ABSTRACT:
      case JavaParser::BOOLEAN:
      case JavaParser::BYTE:
      case JavaParser::CHAR:
      case JavaParser::CLASS:
      case JavaParser::DOUBLE:
      case JavaParser::ENUM:
      case JavaParser::FINAL:
      case JavaParser::FLOAT:
      case JavaParser::INT:
      case JavaParser::INTERFACE:
      case JavaParser::LONG:
      case JavaParser::NATIVE:
      case JavaParser::PRIVATE:
      case JavaParser::PROTECTED:
      case JavaParser::PUBLIC:
      case JavaParser::SHORT:
      case JavaParser::STATIC:
      case JavaParser::STRICTFP:
      case JavaParser::SYNCHRONIZED:
      case JavaParser::TRANSIENT:
      case JavaParser::VOLATILE:
      case JavaParser::MODULE:
      case JavaParser::OPEN:
      case JavaParser::REQUIRES:
      case JavaParser::EXPORTS:
      case JavaParser::OPENS:
      case JavaParser::TO:
      case JavaParser::USES:
      case JavaParser::PROVIDES:
      case JavaParser::WITH:
      case JavaParser::TRANSITIVE:
      case JavaParser::VAR:
      case JavaParser::YIELD:
      case JavaParser::RECORD:
      case JavaParser::SEALED:
      case JavaParser::PERMITS:
      case JavaParser::NON_SEALED:
      case JavaParser::AT:
      case JavaParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(878);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 95, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(875);
            modifier(); 
          }
          setState(880);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 95, _ctx);
        }
        setState(881);
        annotationTypeElementRest();
        break;
      }

      case JavaParser::SEMI: {
        enterOuterAlt(_localctx, 2);
        setState(882);
        match(JavaParser::SEMI);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnnotationTypeElementRestContext ------------------------------------------------------------------

JavaParser::AnnotationTypeElementRestContext::AnnotationTypeElementRestContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::TypeTypeContext* JavaParser::AnnotationTypeElementRestContext::typeType() {
  return getRuleContext<JavaParser::TypeTypeContext>(0);
}

JavaParser::AnnotationMethodOrConstantRestContext* JavaParser::AnnotationTypeElementRestContext::annotationMethodOrConstantRest() {
  return getRuleContext<JavaParser::AnnotationMethodOrConstantRestContext>(0);
}

tree::TerminalNode* JavaParser::AnnotationTypeElementRestContext::SEMI() {
  return getToken(JavaParser::SEMI, 0);
}

JavaParser::ClassDeclarationContext* JavaParser::AnnotationTypeElementRestContext::classDeclaration() {
  return getRuleContext<JavaParser::ClassDeclarationContext>(0);
}

JavaParser::InterfaceDeclarationContext* JavaParser::AnnotationTypeElementRestContext::interfaceDeclaration() {
  return getRuleContext<JavaParser::InterfaceDeclarationContext>(0);
}

JavaParser::EnumDeclarationContext* JavaParser::AnnotationTypeElementRestContext::enumDeclaration() {
  return getRuleContext<JavaParser::EnumDeclarationContext>(0);
}

JavaParser::AnnotationTypeDeclarationContext* JavaParser::AnnotationTypeElementRestContext::annotationTypeDeclaration() {
  return getRuleContext<JavaParser::AnnotationTypeDeclarationContext>(0);
}

JavaParser::RecordDeclarationContext* JavaParser::AnnotationTypeElementRestContext::recordDeclaration() {
  return getRuleContext<JavaParser::RecordDeclarationContext>(0);
}


size_t JavaParser::AnnotationTypeElementRestContext::getRuleIndex() const {
  return JavaParser::RuleAnnotationTypeElementRest;
}

void JavaParser::AnnotationTypeElementRestContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotationTypeElementRest(this);
}

void JavaParser::AnnotationTypeElementRestContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotationTypeElementRest(this);
}

JavaParser::AnnotationTypeElementRestContext* JavaParser::annotationTypeElementRest() {
  AnnotationTypeElementRestContext *_localctx = _tracker.createInstance<AnnotationTypeElementRestContext>(_ctx, getState());
  enterRule(_localctx, 126, JavaParser::RuleAnnotationTypeElementRest);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(909);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 102, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(885);
      typeType();
      setState(886);
      annotationMethodOrConstantRest();
      setState(887);
      match(JavaParser::SEMI);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(889);
      classDeclaration();
      setState(891);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 97, _ctx)) {
      case 1: {
        setState(890);
        match(JavaParser::SEMI);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(893);
      interfaceDeclaration();
      setState(895);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 98, _ctx)) {
      case 1: {
        setState(894);
        match(JavaParser::SEMI);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(897);
      enumDeclaration();
      setState(899);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 99, _ctx)) {
      case 1: {
        setState(898);
        match(JavaParser::SEMI);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(901);
      annotationTypeDeclaration();
      setState(903);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 100, _ctx)) {
      case 1: {
        setState(902);
        match(JavaParser::SEMI);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(905);
      recordDeclaration();
      setState(907);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 101, _ctx)) {
      case 1: {
        setState(906);
        match(JavaParser::SEMI);
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnnotationMethodOrConstantRestContext ------------------------------------------------------------------

JavaParser::AnnotationMethodOrConstantRestContext::AnnotationMethodOrConstantRestContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::AnnotationMethodRestContext* JavaParser::AnnotationMethodOrConstantRestContext::annotationMethodRest() {
  return getRuleContext<JavaParser::AnnotationMethodRestContext>(0);
}

JavaParser::AnnotationConstantRestContext* JavaParser::AnnotationMethodOrConstantRestContext::annotationConstantRest() {
  return getRuleContext<JavaParser::AnnotationConstantRestContext>(0);
}


size_t JavaParser::AnnotationMethodOrConstantRestContext::getRuleIndex() const {
  return JavaParser::RuleAnnotationMethodOrConstantRest;
}

void JavaParser::AnnotationMethodOrConstantRestContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotationMethodOrConstantRest(this);
}

void JavaParser::AnnotationMethodOrConstantRestContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotationMethodOrConstantRest(this);
}

JavaParser::AnnotationMethodOrConstantRestContext* JavaParser::annotationMethodOrConstantRest() {
  AnnotationMethodOrConstantRestContext *_localctx = _tracker.createInstance<AnnotationMethodOrConstantRestContext>(_ctx, getState());
  enterRule(_localctx, 128, JavaParser::RuleAnnotationMethodOrConstantRest);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(913);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 103, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(911);
      annotationMethodRest();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(912);
      annotationConstantRest();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnnotationMethodRestContext ------------------------------------------------------------------

JavaParser::AnnotationMethodRestContext::AnnotationMethodRestContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::AnnotationMethodRestContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

tree::TerminalNode* JavaParser::AnnotationMethodRestContext::LPAREN() {
  return getToken(JavaParser::LPAREN, 0);
}

tree::TerminalNode* JavaParser::AnnotationMethodRestContext::RPAREN() {
  return getToken(JavaParser::RPAREN, 0);
}

JavaParser::DefaultValueContext* JavaParser::AnnotationMethodRestContext::defaultValue() {
  return getRuleContext<JavaParser::DefaultValueContext>(0);
}


size_t JavaParser::AnnotationMethodRestContext::getRuleIndex() const {
  return JavaParser::RuleAnnotationMethodRest;
}

void JavaParser::AnnotationMethodRestContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotationMethodRest(this);
}

void JavaParser::AnnotationMethodRestContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotationMethodRest(this);
}

JavaParser::AnnotationMethodRestContext* JavaParser::annotationMethodRest() {
  AnnotationMethodRestContext *_localctx = _tracker.createInstance<AnnotationMethodRestContext>(_ctx, getState());
  enterRule(_localctx, 130, JavaParser::RuleAnnotationMethodRest);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(915);
    identifier();
    setState(916);
    match(JavaParser::LPAREN);
    setState(917);
    match(JavaParser::RPAREN);
    setState(919);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::DEFAULT) {
      setState(918);
      defaultValue();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnnotationConstantRestContext ------------------------------------------------------------------

JavaParser::AnnotationConstantRestContext::AnnotationConstantRestContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::VariableDeclaratorsContext* JavaParser::AnnotationConstantRestContext::variableDeclarators() {
  return getRuleContext<JavaParser::VariableDeclaratorsContext>(0);
}


size_t JavaParser::AnnotationConstantRestContext::getRuleIndex() const {
  return JavaParser::RuleAnnotationConstantRest;
}

void JavaParser::AnnotationConstantRestContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotationConstantRest(this);
}

void JavaParser::AnnotationConstantRestContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotationConstantRest(this);
}

JavaParser::AnnotationConstantRestContext* JavaParser::annotationConstantRest() {
  AnnotationConstantRestContext *_localctx = _tracker.createInstance<AnnotationConstantRestContext>(_ctx, getState());
  enterRule(_localctx, 132, JavaParser::RuleAnnotationConstantRest);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(921);
    variableDeclarators();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DefaultValueContext ------------------------------------------------------------------

JavaParser::DefaultValueContext::DefaultValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::DefaultValueContext::DEFAULT() {
  return getToken(JavaParser::DEFAULT, 0);
}

JavaParser::ElementValueContext* JavaParser::DefaultValueContext::elementValue() {
  return getRuleContext<JavaParser::ElementValueContext>(0);
}


size_t JavaParser::DefaultValueContext::getRuleIndex() const {
  return JavaParser::RuleDefaultValue;
}

void JavaParser::DefaultValueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDefaultValue(this);
}

void JavaParser::DefaultValueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDefaultValue(this);
}

JavaParser::DefaultValueContext* JavaParser::defaultValue() {
  DefaultValueContext *_localctx = _tracker.createInstance<DefaultValueContext>(_ctx, getState());
  enterRule(_localctx, 134, JavaParser::RuleDefaultValue);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(923);
    match(JavaParser::DEFAULT);
    setState(924);
    elementValue();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModuleDeclarationContext ------------------------------------------------------------------

JavaParser::ModuleDeclarationContext::ModuleDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::ModuleDeclarationContext::MODULE() {
  return getToken(JavaParser::MODULE, 0);
}

JavaParser::QualifiedNameContext* JavaParser::ModuleDeclarationContext::qualifiedName() {
  return getRuleContext<JavaParser::QualifiedNameContext>(0);
}

JavaParser::ModuleBodyContext* JavaParser::ModuleDeclarationContext::moduleBody() {
  return getRuleContext<JavaParser::ModuleBodyContext>(0);
}

tree::TerminalNode* JavaParser::ModuleDeclarationContext::OPEN() {
  return getToken(JavaParser::OPEN, 0);
}


size_t JavaParser::ModuleDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleModuleDeclaration;
}

void JavaParser::ModuleDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModuleDeclaration(this);
}

void JavaParser::ModuleDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModuleDeclaration(this);
}

JavaParser::ModuleDeclarationContext* JavaParser::moduleDeclaration() {
  ModuleDeclarationContext *_localctx = _tracker.createInstance<ModuleDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 136, JavaParser::RuleModuleDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(927);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::OPEN) {
      setState(926);
      match(JavaParser::OPEN);
    }
    setState(929);
    match(JavaParser::MODULE);
    setState(930);
    qualifiedName();
    setState(931);
    moduleBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModuleBodyContext ------------------------------------------------------------------

JavaParser::ModuleBodyContext::ModuleBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::ModuleBodyContext::LBRACE() {
  return getToken(JavaParser::LBRACE, 0);
}

tree::TerminalNode* JavaParser::ModuleBodyContext::RBRACE() {
  return getToken(JavaParser::RBRACE, 0);
}

std::vector<JavaParser::ModuleDirectiveContext *> JavaParser::ModuleBodyContext::moduleDirective() {
  return getRuleContexts<JavaParser::ModuleDirectiveContext>();
}

JavaParser::ModuleDirectiveContext* JavaParser::ModuleBodyContext::moduleDirective(size_t i) {
  return getRuleContext<JavaParser::ModuleDirectiveContext>(i);
}


size_t JavaParser::ModuleBodyContext::getRuleIndex() const {
  return JavaParser::RuleModuleBody;
}

void JavaParser::ModuleBodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModuleBody(this);
}

void JavaParser::ModuleBodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModuleBody(this);
}

JavaParser::ModuleBodyContext* JavaParser::moduleBody() {
  ModuleBodyContext *_localctx = _tracker.createInstance<ModuleBodyContext>(_ctx, getState());
  enterRule(_localctx, 138, JavaParser::RuleModuleBody);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(933);
    match(JavaParser::LBRACE);
    setState(937);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 495395959010754560) != 0) {
      setState(934);
      moduleDirective();
      setState(939);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(940);
    match(JavaParser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModuleDirectiveContext ------------------------------------------------------------------

JavaParser::ModuleDirectiveContext::ModuleDirectiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::ModuleDirectiveContext::REQUIRES() {
  return getToken(JavaParser::REQUIRES, 0);
}

std::vector<JavaParser::QualifiedNameContext *> JavaParser::ModuleDirectiveContext::qualifiedName() {
  return getRuleContexts<JavaParser::QualifiedNameContext>();
}

JavaParser::QualifiedNameContext* JavaParser::ModuleDirectiveContext::qualifiedName(size_t i) {
  return getRuleContext<JavaParser::QualifiedNameContext>(i);
}

tree::TerminalNode* JavaParser::ModuleDirectiveContext::SEMI() {
  return getToken(JavaParser::SEMI, 0);
}

std::vector<JavaParser::RequiresModifierContext *> JavaParser::ModuleDirectiveContext::requiresModifier() {
  return getRuleContexts<JavaParser::RequiresModifierContext>();
}

JavaParser::RequiresModifierContext* JavaParser::ModuleDirectiveContext::requiresModifier(size_t i) {
  return getRuleContext<JavaParser::RequiresModifierContext>(i);
}

tree::TerminalNode* JavaParser::ModuleDirectiveContext::EXPORTS() {
  return getToken(JavaParser::EXPORTS, 0);
}

tree::TerminalNode* JavaParser::ModuleDirectiveContext::TO() {
  return getToken(JavaParser::TO, 0);
}

tree::TerminalNode* JavaParser::ModuleDirectiveContext::OPENS() {
  return getToken(JavaParser::OPENS, 0);
}

tree::TerminalNode* JavaParser::ModuleDirectiveContext::USES() {
  return getToken(JavaParser::USES, 0);
}

tree::TerminalNode* JavaParser::ModuleDirectiveContext::PROVIDES() {
  return getToken(JavaParser::PROVIDES, 0);
}

tree::TerminalNode* JavaParser::ModuleDirectiveContext::WITH() {
  return getToken(JavaParser::WITH, 0);
}


size_t JavaParser::ModuleDirectiveContext::getRuleIndex() const {
  return JavaParser::RuleModuleDirective;
}

void JavaParser::ModuleDirectiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModuleDirective(this);
}

void JavaParser::ModuleDirectiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModuleDirective(this);
}

JavaParser::ModuleDirectiveContext* JavaParser::moduleDirective() {
  ModuleDirectiveContext *_localctx = _tracker.createInstance<ModuleDirectiveContext>(_ctx, getState());
  enterRule(_localctx, 140, JavaParser::RuleModuleDirective);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(978);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::REQUIRES: {
        enterOuterAlt(_localctx, 1);
        setState(942);
        match(JavaParser::REQUIRES);
        setState(946);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 107, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(943);
            requiresModifier(); 
          }
          setState(948);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 107, _ctx);
        }
        setState(949);
        qualifiedName();
        setState(950);
        match(JavaParser::SEMI);
        break;
      }

      case JavaParser::EXPORTS: {
        enterOuterAlt(_localctx, 2);
        setState(952);
        match(JavaParser::EXPORTS);
        setState(953);
        qualifiedName();
        setState(956);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == JavaParser::TO) {
          setState(954);
          match(JavaParser::TO);
          setState(955);
          qualifiedName();
        }
        setState(958);
        match(JavaParser::SEMI);
        break;
      }

      case JavaParser::OPENS: {
        enterOuterAlt(_localctx, 3);
        setState(960);
        match(JavaParser::OPENS);
        setState(961);
        qualifiedName();
        setState(964);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == JavaParser::TO) {
          setState(962);
          match(JavaParser::TO);
          setState(963);
          qualifiedName();
        }
        setState(966);
        match(JavaParser::SEMI);
        break;
      }

      case JavaParser::USES: {
        enterOuterAlt(_localctx, 4);
        setState(968);
        match(JavaParser::USES);
        setState(969);
        qualifiedName();
        setState(970);
        match(JavaParser::SEMI);
        break;
      }

      case JavaParser::PROVIDES: {
        enterOuterAlt(_localctx, 5);
        setState(972);
        match(JavaParser::PROVIDES);
        setState(973);
        qualifiedName();
        setState(974);
        match(JavaParser::WITH);
        setState(975);
        qualifiedName();
        setState(976);
        match(JavaParser::SEMI);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RequiresModifierContext ------------------------------------------------------------------

JavaParser::RequiresModifierContext::RequiresModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::RequiresModifierContext::TRANSITIVE() {
  return getToken(JavaParser::TRANSITIVE, 0);
}

tree::TerminalNode* JavaParser::RequiresModifierContext::STATIC() {
  return getToken(JavaParser::STATIC, 0);
}


size_t JavaParser::RequiresModifierContext::getRuleIndex() const {
  return JavaParser::RuleRequiresModifier;
}

void JavaParser::RequiresModifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRequiresModifier(this);
}

void JavaParser::RequiresModifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRequiresModifier(this);
}

JavaParser::RequiresModifierContext* JavaParser::requiresModifier() {
  RequiresModifierContext *_localctx = _tracker.createInstance<RequiresModifierContext>(_ctx, getState());
  enterRule(_localctx, 142, JavaParser::RuleRequiresModifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(980);
    _la = _input->LA(1);
    if (!(_la == JavaParser::STATIC

    || _la == JavaParser::TRANSITIVE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RecordDeclarationContext ------------------------------------------------------------------

JavaParser::RecordDeclarationContext::RecordDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::RecordDeclarationContext::RECORD() {
  return getToken(JavaParser::RECORD, 0);
}

JavaParser::IdentifierContext* JavaParser::RecordDeclarationContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::RecordHeaderContext* JavaParser::RecordDeclarationContext::recordHeader() {
  return getRuleContext<JavaParser::RecordHeaderContext>(0);
}

JavaParser::RecordBodyContext* JavaParser::RecordDeclarationContext::recordBody() {
  return getRuleContext<JavaParser::RecordBodyContext>(0);
}

JavaParser::TypeParametersContext* JavaParser::RecordDeclarationContext::typeParameters() {
  return getRuleContext<JavaParser::TypeParametersContext>(0);
}

tree::TerminalNode* JavaParser::RecordDeclarationContext::IMPLEMENTS() {
  return getToken(JavaParser::IMPLEMENTS, 0);
}

JavaParser::TypeListContext* JavaParser::RecordDeclarationContext::typeList() {
  return getRuleContext<JavaParser::TypeListContext>(0);
}


size_t JavaParser::RecordDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleRecordDeclaration;
}

void JavaParser::RecordDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRecordDeclaration(this);
}

void JavaParser::RecordDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRecordDeclaration(this);
}

JavaParser::RecordDeclarationContext* JavaParser::recordDeclaration() {
  RecordDeclarationContext *_localctx = _tracker.createInstance<RecordDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 144, JavaParser::RuleRecordDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(982);
    match(JavaParser::RECORD);
    setState(983);
    identifier();
    setState(985);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::LT) {
      setState(984);
      typeParameters();
    }
    setState(987);
    recordHeader();
    setState(990);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::IMPLEMENTS) {
      setState(988);
      match(JavaParser::IMPLEMENTS);
      setState(989);
      typeList();
    }
    setState(992);
    recordBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RecordHeaderContext ------------------------------------------------------------------

JavaParser::RecordHeaderContext::RecordHeaderContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::RecordHeaderContext::LPAREN() {
  return getToken(JavaParser::LPAREN, 0);
}

tree::TerminalNode* JavaParser::RecordHeaderContext::RPAREN() {
  return getToken(JavaParser::RPAREN, 0);
}

JavaParser::RecordComponentListContext* JavaParser::RecordHeaderContext::recordComponentList() {
  return getRuleContext<JavaParser::RecordComponentListContext>(0);
}


size_t JavaParser::RecordHeaderContext::getRuleIndex() const {
  return JavaParser::RuleRecordHeader;
}

void JavaParser::RecordHeaderContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRecordHeader(this);
}

void JavaParser::RecordHeaderContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRecordHeader(this);
}

JavaParser::RecordHeaderContext* JavaParser::recordHeader() {
  RecordHeaderContext *_localctx = _tracker.createInstance<RecordHeaderContext>(_ctx, getState());
  enterRule(_localctx, 146, JavaParser::RuleRecordHeader);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(994);
    match(JavaParser::LPAREN);
    setState(996);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la - 3) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 3)) & 9223090579141953573) != 0 || _la == JavaParser::AT

    || _la == JavaParser::IDENTIFIER) {
      setState(995);
      recordComponentList();
    }
    setState(998);
    match(JavaParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RecordComponentListContext ------------------------------------------------------------------

JavaParser::RecordComponentListContext::RecordComponentListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::RecordComponentContext *> JavaParser::RecordComponentListContext::recordComponent() {
  return getRuleContexts<JavaParser::RecordComponentContext>();
}

JavaParser::RecordComponentContext* JavaParser::RecordComponentListContext::recordComponent(size_t i) {
  return getRuleContext<JavaParser::RecordComponentContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::RecordComponentListContext::COMMA() {
  return getTokens(JavaParser::COMMA);
}

tree::TerminalNode* JavaParser::RecordComponentListContext::COMMA(size_t i) {
  return getToken(JavaParser::COMMA, i);
}


size_t JavaParser::RecordComponentListContext::getRuleIndex() const {
  return JavaParser::RuleRecordComponentList;
}

void JavaParser::RecordComponentListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRecordComponentList(this);
}

void JavaParser::RecordComponentListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRecordComponentList(this);
}

JavaParser::RecordComponentListContext* JavaParser::recordComponentList() {
  RecordComponentListContext *_localctx = _tracker.createInstance<RecordComponentListContext>(_ctx, getState());
  enterRule(_localctx, 148, JavaParser::RuleRecordComponentList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1000);
    recordComponent();
    setState(1005);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::COMMA) {
      setState(1001);
      match(JavaParser::COMMA);
      setState(1002);
      recordComponent();
      setState(1007);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RecordComponentContext ------------------------------------------------------------------

JavaParser::RecordComponentContext::RecordComponentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::TypeTypeContext* JavaParser::RecordComponentContext::typeType() {
  return getRuleContext<JavaParser::TypeTypeContext>(0);
}

JavaParser::IdentifierContext* JavaParser::RecordComponentContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}


size_t JavaParser::RecordComponentContext::getRuleIndex() const {
  return JavaParser::RuleRecordComponent;
}

void JavaParser::RecordComponentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRecordComponent(this);
}

void JavaParser::RecordComponentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRecordComponent(this);
}

JavaParser::RecordComponentContext* JavaParser::recordComponent() {
  RecordComponentContext *_localctx = _tracker.createInstance<RecordComponentContext>(_ctx, getState());
  enterRule(_localctx, 150, JavaParser::RuleRecordComponent);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1008);
    typeType();
    setState(1009);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RecordBodyContext ------------------------------------------------------------------

JavaParser::RecordBodyContext::RecordBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::RecordBodyContext::LBRACE() {
  return getToken(JavaParser::LBRACE, 0);
}

tree::TerminalNode* JavaParser::RecordBodyContext::RBRACE() {
  return getToken(JavaParser::RBRACE, 0);
}

std::vector<JavaParser::ClassBodyDeclarationContext *> JavaParser::RecordBodyContext::classBodyDeclaration() {
  return getRuleContexts<JavaParser::ClassBodyDeclarationContext>();
}

JavaParser::ClassBodyDeclarationContext* JavaParser::RecordBodyContext::classBodyDeclaration(size_t i) {
  return getRuleContext<JavaParser::ClassBodyDeclarationContext>(i);
}


size_t JavaParser::RecordBodyContext::getRuleIndex() const {
  return JavaParser::RuleRecordBody;
}

void JavaParser::RecordBodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRecordBody(this);
}

void JavaParser::RecordBodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRecordBody(this);
}

JavaParser::RecordBodyContext* JavaParser::recordBody() {
  RecordBodyContext *_localctx = _tracker.createInstance<RecordBodyContext>(_ctx, getState());
  enterRule(_localctx, 152, JavaParser::RuleRecordBody);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1011);
    match(JavaParser::LBRACE);
    setState(1015);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la - 1) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 1)) & -665791937994347) != 0 || (((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & -8935141660685729789) != 0) {
      setState(1012);
      classBodyDeclaration();
      setState(1017);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1018);
    match(JavaParser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlockContext ------------------------------------------------------------------

JavaParser::BlockContext::BlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::BlockContext::LBRACE() {
  return getToken(JavaParser::LBRACE, 0);
}

tree::TerminalNode* JavaParser::BlockContext::RBRACE() {
  return getToken(JavaParser::RBRACE, 0);
}

std::vector<JavaParser::BlockStatementContext *> JavaParser::BlockContext::blockStatement() {
  return getRuleContexts<JavaParser::BlockStatementContext>();
}

JavaParser::BlockStatementContext* JavaParser::BlockContext::blockStatement(size_t i) {
  return getRuleContext<JavaParser::BlockStatementContext>(i);
}


size_t JavaParser::BlockContext::getRuleIndex() const {
  return JavaParser::RuleBlock;
}

void JavaParser::BlockContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBlock(this);
}

void JavaParser::BlockContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBlock(this);
}

JavaParser::BlockContext* JavaParser::block() {
  BlockContext *_localctx = _tracker.createInstance<BlockContext>(_ctx, getState());
  enterRule(_localctx, 154, JavaParser::RuleBlock);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1020);
    match(JavaParser::LBRACE);
    setState(1024);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la - 1) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 1)) & -334254282492513) != 0 || (((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & -8935141145188974593) != 0) {
      setState(1021);
      blockStatement();
      setState(1026);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1027);
    match(JavaParser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlockStatementContext ------------------------------------------------------------------

JavaParser::BlockStatementContext::BlockStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::LocalVariableDeclarationContext* JavaParser::BlockStatementContext::localVariableDeclaration() {
  return getRuleContext<JavaParser::LocalVariableDeclarationContext>(0);
}

tree::TerminalNode* JavaParser::BlockStatementContext::SEMI() {
  return getToken(JavaParser::SEMI, 0);
}

JavaParser::LocalTypeDeclarationContext* JavaParser::BlockStatementContext::localTypeDeclaration() {
  return getRuleContext<JavaParser::LocalTypeDeclarationContext>(0);
}

JavaParser::StatementContext* JavaParser::BlockStatementContext::statement() {
  return getRuleContext<JavaParser::StatementContext>(0);
}


size_t JavaParser::BlockStatementContext::getRuleIndex() const {
  return JavaParser::RuleBlockStatement;
}

void JavaParser::BlockStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBlockStatement(this);
}

void JavaParser::BlockStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBlockStatement(this);
}

JavaParser::BlockStatementContext* JavaParser::blockStatement() {
  BlockStatementContext *_localctx = _tracker.createInstance<BlockStatementContext>(_ctx, getState());
  enterRule(_localctx, 156, JavaParser::RuleBlockStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1034);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 117, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1029);
      localVariableDeclaration();
      setState(1030);
      match(JavaParser::SEMI);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1032);
      localTypeDeclaration();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1033);
      statement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LocalVariableDeclarationContext ------------------------------------------------------------------

JavaParser::LocalVariableDeclarationContext::LocalVariableDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::LocalVariableDeclarationContext::VAR() {
  return getToken(JavaParser::VAR, 0);
}

JavaParser::IdentifierContext* JavaParser::LocalVariableDeclarationContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

tree::TerminalNode* JavaParser::LocalVariableDeclarationContext::ASSIGN() {
  return getToken(JavaParser::ASSIGN, 0);
}

JavaParser::ExpressionContext* JavaParser::LocalVariableDeclarationContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

JavaParser::TypeTypeContext* JavaParser::LocalVariableDeclarationContext::typeType() {
  return getRuleContext<JavaParser::TypeTypeContext>(0);
}

JavaParser::VariableDeclaratorsContext* JavaParser::LocalVariableDeclarationContext::variableDeclarators() {
  return getRuleContext<JavaParser::VariableDeclaratorsContext>(0);
}

std::vector<JavaParser::VariableModifierContext *> JavaParser::LocalVariableDeclarationContext::variableModifier() {
  return getRuleContexts<JavaParser::VariableModifierContext>();
}

JavaParser::VariableModifierContext* JavaParser::LocalVariableDeclarationContext::variableModifier(size_t i) {
  return getRuleContext<JavaParser::VariableModifierContext>(i);
}


size_t JavaParser::LocalVariableDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleLocalVariableDeclaration;
}

void JavaParser::LocalVariableDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLocalVariableDeclaration(this);
}

void JavaParser::LocalVariableDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLocalVariableDeclaration(this);
}

JavaParser::LocalVariableDeclarationContext* JavaParser::localVariableDeclaration() {
  LocalVariableDeclarationContext *_localctx = _tracker.createInstance<LocalVariableDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 158, JavaParser::RuleLocalVariableDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1039);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 118, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1036);
        variableModifier(); 
      }
      setState(1041);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 118, _ctx);
    }
    setState(1050);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 119, _ctx)) {
    case 1: {
      setState(1042);
      match(JavaParser::VAR);
      setState(1043);
      identifier();
      setState(1044);
      match(JavaParser::ASSIGN);
      setState(1045);
      expression(0);
      break;
    }

    case 2: {
      setState(1047);
      typeType();
      setState(1048);
      variableDeclarators();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdentifierContext ------------------------------------------------------------------

JavaParser::IdentifierContext::IdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::IdentifierContext::IDENTIFIER() {
  return getToken(JavaParser::IDENTIFIER, 0);
}

tree::TerminalNode* JavaParser::IdentifierContext::MODULE() {
  return getToken(JavaParser::MODULE, 0);
}

tree::TerminalNode* JavaParser::IdentifierContext::OPEN() {
  return getToken(JavaParser::OPEN, 0);
}

tree::TerminalNode* JavaParser::IdentifierContext::REQUIRES() {
  return getToken(JavaParser::REQUIRES, 0);
}

tree::TerminalNode* JavaParser::IdentifierContext::EXPORTS() {
  return getToken(JavaParser::EXPORTS, 0);
}

tree::TerminalNode* JavaParser::IdentifierContext::OPENS() {
  return getToken(JavaParser::OPENS, 0);
}

tree::TerminalNode* JavaParser::IdentifierContext::TO() {
  return getToken(JavaParser::TO, 0);
}

tree::TerminalNode* JavaParser::IdentifierContext::USES() {
  return getToken(JavaParser::USES, 0);
}

tree::TerminalNode* JavaParser::IdentifierContext::PROVIDES() {
  return getToken(JavaParser::PROVIDES, 0);
}

tree::TerminalNode* JavaParser::IdentifierContext::WITH() {
  return getToken(JavaParser::WITH, 0);
}

tree::TerminalNode* JavaParser::IdentifierContext::TRANSITIVE() {
  return getToken(JavaParser::TRANSITIVE, 0);
}

tree::TerminalNode* JavaParser::IdentifierContext::YIELD() {
  return getToken(JavaParser::YIELD, 0);
}

tree::TerminalNode* JavaParser::IdentifierContext::SEALED() {
  return getToken(JavaParser::SEALED, 0);
}

tree::TerminalNode* JavaParser::IdentifierContext::PERMITS() {
  return getToken(JavaParser::PERMITS, 0);
}

tree::TerminalNode* JavaParser::IdentifierContext::RECORD() {
  return getToken(JavaParser::RECORD, 0);
}

tree::TerminalNode* JavaParser::IdentifierContext::VAR() {
  return getToken(JavaParser::VAR, 0);
}


size_t JavaParser::IdentifierContext::getRuleIndex() const {
  return JavaParser::RuleIdentifier;
}

void JavaParser::IdentifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIdentifier(this);
}

void JavaParser::IdentifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIdentifier(this);
}

JavaParser::IdentifierContext* JavaParser::identifier() {
  IdentifierContext *_localctx = _tracker.createInstance<IdentifierContext>(_ctx, getState());
  enterRule(_localctx, 160, JavaParser::RuleIdentifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1052);
    _la = _input->LA(1);
    if (!((((_la - 51) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 51)) & 32767) != 0 || _la == JavaParser::IDENTIFIER)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeIdentifierContext ------------------------------------------------------------------

JavaParser::TypeIdentifierContext::TypeIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::TypeIdentifierContext::IDENTIFIER() {
  return getToken(JavaParser::IDENTIFIER, 0);
}

tree::TerminalNode* JavaParser::TypeIdentifierContext::MODULE() {
  return getToken(JavaParser::MODULE, 0);
}

tree::TerminalNode* JavaParser::TypeIdentifierContext::OPEN() {
  return getToken(JavaParser::OPEN, 0);
}

tree::TerminalNode* JavaParser::TypeIdentifierContext::REQUIRES() {
  return getToken(JavaParser::REQUIRES, 0);
}

tree::TerminalNode* JavaParser::TypeIdentifierContext::EXPORTS() {
  return getToken(JavaParser::EXPORTS, 0);
}

tree::TerminalNode* JavaParser::TypeIdentifierContext::OPENS() {
  return getToken(JavaParser::OPENS, 0);
}

tree::TerminalNode* JavaParser::TypeIdentifierContext::TO() {
  return getToken(JavaParser::TO, 0);
}

tree::TerminalNode* JavaParser::TypeIdentifierContext::USES() {
  return getToken(JavaParser::USES, 0);
}

tree::TerminalNode* JavaParser::TypeIdentifierContext::PROVIDES() {
  return getToken(JavaParser::PROVIDES, 0);
}

tree::TerminalNode* JavaParser::TypeIdentifierContext::WITH() {
  return getToken(JavaParser::WITH, 0);
}

tree::TerminalNode* JavaParser::TypeIdentifierContext::TRANSITIVE() {
  return getToken(JavaParser::TRANSITIVE, 0);
}

tree::TerminalNode* JavaParser::TypeIdentifierContext::SEALED() {
  return getToken(JavaParser::SEALED, 0);
}

tree::TerminalNode* JavaParser::TypeIdentifierContext::PERMITS() {
  return getToken(JavaParser::PERMITS, 0);
}

tree::TerminalNode* JavaParser::TypeIdentifierContext::RECORD() {
  return getToken(JavaParser::RECORD, 0);
}


size_t JavaParser::TypeIdentifierContext::getRuleIndex() const {
  return JavaParser::RuleTypeIdentifier;
}

void JavaParser::TypeIdentifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeIdentifier(this);
}

void JavaParser::TypeIdentifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeIdentifier(this);
}

JavaParser::TypeIdentifierContext* JavaParser::typeIdentifier() {
  TypeIdentifierContext *_localctx = _tracker.createInstance<TypeIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 162, JavaParser::RuleTypeIdentifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1054);
    _la = _input->LA(1);
    if (!((((_la - 51) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 51)) & 29695) != 0 || _la == JavaParser::IDENTIFIER)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LocalTypeDeclarationContext ------------------------------------------------------------------

JavaParser::LocalTypeDeclarationContext::LocalTypeDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ClassDeclarationContext* JavaParser::LocalTypeDeclarationContext::classDeclaration() {
  return getRuleContext<JavaParser::ClassDeclarationContext>(0);
}

JavaParser::InterfaceDeclarationContext* JavaParser::LocalTypeDeclarationContext::interfaceDeclaration() {
  return getRuleContext<JavaParser::InterfaceDeclarationContext>(0);
}

JavaParser::RecordDeclarationContext* JavaParser::LocalTypeDeclarationContext::recordDeclaration() {
  return getRuleContext<JavaParser::RecordDeclarationContext>(0);
}

std::vector<JavaParser::ClassOrInterfaceModifierContext *> JavaParser::LocalTypeDeclarationContext::classOrInterfaceModifier() {
  return getRuleContexts<JavaParser::ClassOrInterfaceModifierContext>();
}

JavaParser::ClassOrInterfaceModifierContext* JavaParser::LocalTypeDeclarationContext::classOrInterfaceModifier(size_t i) {
  return getRuleContext<JavaParser::ClassOrInterfaceModifierContext>(i);
}

tree::TerminalNode* JavaParser::LocalTypeDeclarationContext::SEMI() {
  return getToken(JavaParser::SEMI, 0);
}


size_t JavaParser::LocalTypeDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleLocalTypeDeclaration;
}

void JavaParser::LocalTypeDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLocalTypeDeclaration(this);
}

void JavaParser::LocalTypeDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLocalTypeDeclaration(this);
}

JavaParser::LocalTypeDeclarationContext* JavaParser::localTypeDeclaration() {
  LocalTypeDeclarationContext *_localctx = _tracker.createInstance<LocalTypeDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 164, JavaParser::RuleLocalTypeDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1068);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::ABSTRACT:
      case JavaParser::CLASS:
      case JavaParser::FINAL:
      case JavaParser::INTERFACE:
      case JavaParser::PRIVATE:
      case JavaParser::PROTECTED:
      case JavaParser::PUBLIC:
      case JavaParser::STATIC:
      case JavaParser::STRICTFP:
      case JavaParser::MODULE:
      case JavaParser::OPEN:
      case JavaParser::REQUIRES:
      case JavaParser::EXPORTS:
      case JavaParser::OPENS:
      case JavaParser::TO:
      case JavaParser::USES:
      case JavaParser::PROVIDES:
      case JavaParser::WITH:
      case JavaParser::TRANSITIVE:
      case JavaParser::VAR:
      case JavaParser::YIELD:
      case JavaParser::RECORD:
      case JavaParser::SEALED:
      case JavaParser::PERMITS:
      case JavaParser::NON_SEALED:
      case JavaParser::AT:
      case JavaParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(1059);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 120, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(1056);
            classOrInterfaceModifier(); 
          }
          setState(1061);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 120, _ctx);
        }
        setState(1065);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case JavaParser::CLASS: {
            setState(1062);
            classDeclaration();
            break;
          }

          case JavaParser::INTERFACE: {
            setState(1063);
            interfaceDeclaration();
            break;
          }

          case JavaParser::RECORD: {
            setState(1064);
            recordDeclaration();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        break;
      }

      case JavaParser::SEMI: {
        enterOuterAlt(_localctx, 2);
        setState(1067);
        match(JavaParser::SEMI);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementContext ------------------------------------------------------------------

JavaParser::StatementContext::StatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::BlockContext* JavaParser::StatementContext::block() {
  return getRuleContext<JavaParser::BlockContext>(0);
}

tree::TerminalNode* JavaParser::StatementContext::ASSERT() {
  return getToken(JavaParser::ASSERT, 0);
}

std::vector<JavaParser::ExpressionContext *> JavaParser::StatementContext::expression() {
  return getRuleContexts<JavaParser::ExpressionContext>();
}

JavaParser::ExpressionContext* JavaParser::StatementContext::expression(size_t i) {
  return getRuleContext<JavaParser::ExpressionContext>(i);
}

tree::TerminalNode* JavaParser::StatementContext::SEMI() {
  return getToken(JavaParser::SEMI, 0);
}

tree::TerminalNode* JavaParser::StatementContext::COLON() {
  return getToken(JavaParser::COLON, 0);
}

tree::TerminalNode* JavaParser::StatementContext::IF() {
  return getToken(JavaParser::IF, 0);
}

JavaParser::ParExpressionContext* JavaParser::StatementContext::parExpression() {
  return getRuleContext<JavaParser::ParExpressionContext>(0);
}

std::vector<JavaParser::StatementContext *> JavaParser::StatementContext::statement() {
  return getRuleContexts<JavaParser::StatementContext>();
}

JavaParser::StatementContext* JavaParser::StatementContext::statement(size_t i) {
  return getRuleContext<JavaParser::StatementContext>(i);
}

tree::TerminalNode* JavaParser::StatementContext::ELSE() {
  return getToken(JavaParser::ELSE, 0);
}

tree::TerminalNode* JavaParser::StatementContext::FOR() {
  return getToken(JavaParser::FOR, 0);
}

tree::TerminalNode* JavaParser::StatementContext::LPAREN() {
  return getToken(JavaParser::LPAREN, 0);
}

JavaParser::ForControlContext* JavaParser::StatementContext::forControl() {
  return getRuleContext<JavaParser::ForControlContext>(0);
}

tree::TerminalNode* JavaParser::StatementContext::RPAREN() {
  return getToken(JavaParser::RPAREN, 0);
}

tree::TerminalNode* JavaParser::StatementContext::WHILE() {
  return getToken(JavaParser::WHILE, 0);
}

tree::TerminalNode* JavaParser::StatementContext::DO() {
  return getToken(JavaParser::DO, 0);
}

tree::TerminalNode* JavaParser::StatementContext::TRY() {
  return getToken(JavaParser::TRY, 0);
}

JavaParser::FinallyBlockContext* JavaParser::StatementContext::finallyBlock() {
  return getRuleContext<JavaParser::FinallyBlockContext>(0);
}

std::vector<JavaParser::CatchClauseContext *> JavaParser::StatementContext::catchClause() {
  return getRuleContexts<JavaParser::CatchClauseContext>();
}

JavaParser::CatchClauseContext* JavaParser::StatementContext::catchClause(size_t i) {
  return getRuleContext<JavaParser::CatchClauseContext>(i);
}

JavaParser::ResourceSpecificationContext* JavaParser::StatementContext::resourceSpecification() {
  return getRuleContext<JavaParser::ResourceSpecificationContext>(0);
}

tree::TerminalNode* JavaParser::StatementContext::SWITCH() {
  return getToken(JavaParser::SWITCH, 0);
}

tree::TerminalNode* JavaParser::StatementContext::LBRACE() {
  return getToken(JavaParser::LBRACE, 0);
}

tree::TerminalNode* JavaParser::StatementContext::RBRACE() {
  return getToken(JavaParser::RBRACE, 0);
}

std::vector<JavaParser::SwitchBlockStatementGroupContext *> JavaParser::StatementContext::switchBlockStatementGroup() {
  return getRuleContexts<JavaParser::SwitchBlockStatementGroupContext>();
}

JavaParser::SwitchBlockStatementGroupContext* JavaParser::StatementContext::switchBlockStatementGroup(size_t i) {
  return getRuleContext<JavaParser::SwitchBlockStatementGroupContext>(i);
}

std::vector<JavaParser::SwitchLabelContext *> JavaParser::StatementContext::switchLabel() {
  return getRuleContexts<JavaParser::SwitchLabelContext>();
}

JavaParser::SwitchLabelContext* JavaParser::StatementContext::switchLabel(size_t i) {
  return getRuleContext<JavaParser::SwitchLabelContext>(i);
}

tree::TerminalNode* JavaParser::StatementContext::SYNCHRONIZED() {
  return getToken(JavaParser::SYNCHRONIZED, 0);
}

tree::TerminalNode* JavaParser::StatementContext::RETURN() {
  return getToken(JavaParser::RETURN, 0);
}

tree::TerminalNode* JavaParser::StatementContext::THROW() {
  return getToken(JavaParser::THROW, 0);
}

tree::TerminalNode* JavaParser::StatementContext::BREAK() {
  return getToken(JavaParser::BREAK, 0);
}

JavaParser::IdentifierContext* JavaParser::StatementContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

tree::TerminalNode* JavaParser::StatementContext::CONTINUE() {
  return getToken(JavaParser::CONTINUE, 0);
}

tree::TerminalNode* JavaParser::StatementContext::YIELD() {
  return getToken(JavaParser::YIELD, 0);
}

JavaParser::SwitchExpressionContext* JavaParser::StatementContext::switchExpression() {
  return getRuleContext<JavaParser::SwitchExpressionContext>(0);
}


size_t JavaParser::StatementContext::getRuleIndex() const {
  return JavaParser::RuleStatement;
}

void JavaParser::StatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatement(this);
}

void JavaParser::StatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatement(this);
}

JavaParser::StatementContext* JavaParser::statement() {
  StatementContext *_localctx = _tracker.createInstance<StatementContext>(_ctx, getState());
  enterRule(_localctx, 166, JavaParser::RuleStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1183);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 136, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1070);
      antlrcpp::downCast<StatementContext *>(_localctx)->blockLabel = block();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1071);
      match(JavaParser::ASSERT);
      setState(1072);
      expression(0);
      setState(1075);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::COLON) {
        setState(1073);
        match(JavaParser::COLON);
        setState(1074);
        expression(0);
      }
      setState(1077);
      match(JavaParser::SEMI);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1079);
      match(JavaParser::IF);
      setState(1080);
      parExpression();
      setState(1081);
      statement();
      setState(1084);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 124, _ctx)) {
      case 1: {
        setState(1082);
        match(JavaParser::ELSE);
        setState(1083);
        statement();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1086);
      match(JavaParser::FOR);
      setState(1087);
      match(JavaParser::LPAREN);
      setState(1088);
      forControl();
      setState(1089);
      match(JavaParser::RPAREN);
      setState(1090);
      statement();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1092);
      match(JavaParser::WHILE);
      setState(1093);
      parExpression();
      setState(1094);
      statement();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1096);
      match(JavaParser::DO);
      setState(1097);
      statement();
      setState(1098);
      match(JavaParser::WHILE);
      setState(1099);
      parExpression();
      setState(1100);
      match(JavaParser::SEMI);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1102);
      match(JavaParser::TRY);
      setState(1103);
      block();
      setState(1113);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case JavaParser::CATCH: {
          setState(1105); 
          _errHandler->sync(this);
          _la = _input->LA(1);
          do {
            setState(1104);
            catchClause();
            setState(1107); 
            _errHandler->sync(this);
            _la = _input->LA(1);
          } while (_la == JavaParser::CATCH);
          setState(1110);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == JavaParser::FINALLY) {
            setState(1109);
            finallyBlock();
          }
          break;
        }

        case JavaParser::FINALLY: {
          setState(1112);
          finallyBlock();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1115);
      match(JavaParser::TRY);
      setState(1116);
      resourceSpecification();
      setState(1117);
      block();
      setState(1121);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == JavaParser::CATCH) {
        setState(1118);
        catchClause();
        setState(1123);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1125);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::FINALLY) {
        setState(1124);
        finallyBlock();
      }
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1127);
      match(JavaParser::SWITCH);
      setState(1128);
      parExpression();
      setState(1129);
      match(JavaParser::LBRACE);
      setState(1133);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 130, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1130);
          switchBlockStatementGroup(); 
        }
        setState(1135);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 130, _ctx);
      }
      setState(1139);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == JavaParser::CASE

      || _la == JavaParser::DEFAULT) {
        setState(1136);
        switchLabel();
        setState(1141);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1142);
      match(JavaParser::RBRACE);
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(1144);
      match(JavaParser::SYNCHRONIZED);
      setState(1145);
      parExpression();
      setState(1146);
      block();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(1148);
      match(JavaParser::RETURN);
      setState(1150);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la - 3) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 3)) & 9223127275610966053) != 0 || (((_la - 67) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 67)) & 2377900732130004991) != 0) {
        setState(1149);
        expression(0);
      }
      setState(1152);
      match(JavaParser::SEMI);
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(1153);
      match(JavaParser::THROW);
      setState(1154);
      expression(0);
      setState(1155);
      match(JavaParser::SEMI);
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(1157);
      match(JavaParser::BREAK);
      setState(1159);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la - 51) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 51)) & 32767) != 0 || _la == JavaParser::IDENTIFIER) {
        setState(1158);
        identifier();
      }
      setState(1161);
      match(JavaParser::SEMI);
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(1162);
      match(JavaParser::CONTINUE);
      setState(1164);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la - 51) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 51)) & 32767) != 0 || _la == JavaParser::IDENTIFIER) {
        setState(1163);
        identifier();
      }
      setState(1166);
      match(JavaParser::SEMI);
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(1167);
      match(JavaParser::YIELD);
      setState(1168);
      expression(0);
      setState(1169);
      match(JavaParser::SEMI);
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(1171);
      match(JavaParser::SEMI);
      break;
    }

    case 17: {
      enterOuterAlt(_localctx, 17);
      setState(1172);
      antlrcpp::downCast<StatementContext *>(_localctx)->statementExpression = expression(0);
      setState(1173);
      match(JavaParser::SEMI);
      break;
    }

    case 18: {
      enterOuterAlt(_localctx, 18);
      setState(1175);
      switchExpression();
      setState(1177);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 135, _ctx)) {
      case 1: {
        setState(1176);
        match(JavaParser::SEMI);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 19: {
      enterOuterAlt(_localctx, 19);
      setState(1179);
      antlrcpp::downCast<StatementContext *>(_localctx)->identifierLabel = identifier();
      setState(1180);
      match(JavaParser::COLON);
      setState(1181);
      statement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CatchClauseContext ------------------------------------------------------------------

JavaParser::CatchClauseContext::CatchClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::CatchClauseContext::CATCH() {
  return getToken(JavaParser::CATCH, 0);
}

tree::TerminalNode* JavaParser::CatchClauseContext::LPAREN() {
  return getToken(JavaParser::LPAREN, 0);
}

JavaParser::CatchTypeContext* JavaParser::CatchClauseContext::catchType() {
  return getRuleContext<JavaParser::CatchTypeContext>(0);
}

JavaParser::IdentifierContext* JavaParser::CatchClauseContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

tree::TerminalNode* JavaParser::CatchClauseContext::RPAREN() {
  return getToken(JavaParser::RPAREN, 0);
}

JavaParser::BlockContext* JavaParser::CatchClauseContext::block() {
  return getRuleContext<JavaParser::BlockContext>(0);
}

std::vector<JavaParser::VariableModifierContext *> JavaParser::CatchClauseContext::variableModifier() {
  return getRuleContexts<JavaParser::VariableModifierContext>();
}

JavaParser::VariableModifierContext* JavaParser::CatchClauseContext::variableModifier(size_t i) {
  return getRuleContext<JavaParser::VariableModifierContext>(i);
}


size_t JavaParser::CatchClauseContext::getRuleIndex() const {
  return JavaParser::RuleCatchClause;
}

void JavaParser::CatchClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCatchClause(this);
}

void JavaParser::CatchClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCatchClause(this);
}

JavaParser::CatchClauseContext* JavaParser::catchClause() {
  CatchClauseContext *_localctx = _tracker.createInstance<CatchClauseContext>(_ctx, getState());
  enterRule(_localctx, 168, JavaParser::RuleCatchClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1185);
    match(JavaParser::CATCH);
    setState(1186);
    match(JavaParser::LPAREN);
    setState(1190);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 137, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1187);
        variableModifier(); 
      }
      setState(1192);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 137, _ctx);
    }
    setState(1193);
    catchType();
    setState(1194);
    identifier();
    setState(1195);
    match(JavaParser::RPAREN);
    setState(1196);
    block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CatchTypeContext ------------------------------------------------------------------

JavaParser::CatchTypeContext::CatchTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::QualifiedNameContext *> JavaParser::CatchTypeContext::qualifiedName() {
  return getRuleContexts<JavaParser::QualifiedNameContext>();
}

JavaParser::QualifiedNameContext* JavaParser::CatchTypeContext::qualifiedName(size_t i) {
  return getRuleContext<JavaParser::QualifiedNameContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::CatchTypeContext::BITOR() {
  return getTokens(JavaParser::BITOR);
}

tree::TerminalNode* JavaParser::CatchTypeContext::BITOR(size_t i) {
  return getToken(JavaParser::BITOR, i);
}


size_t JavaParser::CatchTypeContext::getRuleIndex() const {
  return JavaParser::RuleCatchType;
}

void JavaParser::CatchTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCatchType(this);
}

void JavaParser::CatchTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCatchType(this);
}

JavaParser::CatchTypeContext* JavaParser::catchType() {
  CatchTypeContext *_localctx = _tracker.createInstance<CatchTypeContext>(_ctx, getState());
  enterRule(_localctx, 170, JavaParser::RuleCatchType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1198);
    qualifiedName();
    setState(1203);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::BITOR) {
      setState(1199);
      match(JavaParser::BITOR);
      setState(1200);
      qualifiedName();
      setState(1205);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FinallyBlockContext ------------------------------------------------------------------

JavaParser::FinallyBlockContext::FinallyBlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::FinallyBlockContext::FINALLY() {
  return getToken(JavaParser::FINALLY, 0);
}

JavaParser::BlockContext* JavaParser::FinallyBlockContext::block() {
  return getRuleContext<JavaParser::BlockContext>(0);
}


size_t JavaParser::FinallyBlockContext::getRuleIndex() const {
  return JavaParser::RuleFinallyBlock;
}

void JavaParser::FinallyBlockContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFinallyBlock(this);
}

void JavaParser::FinallyBlockContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFinallyBlock(this);
}

JavaParser::FinallyBlockContext* JavaParser::finallyBlock() {
  FinallyBlockContext *_localctx = _tracker.createInstance<FinallyBlockContext>(_ctx, getState());
  enterRule(_localctx, 172, JavaParser::RuleFinallyBlock);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1206);
    match(JavaParser::FINALLY);
    setState(1207);
    block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ResourceSpecificationContext ------------------------------------------------------------------

JavaParser::ResourceSpecificationContext::ResourceSpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::ResourceSpecificationContext::LPAREN() {
  return getToken(JavaParser::LPAREN, 0);
}

JavaParser::ResourcesContext* JavaParser::ResourceSpecificationContext::resources() {
  return getRuleContext<JavaParser::ResourcesContext>(0);
}

tree::TerminalNode* JavaParser::ResourceSpecificationContext::RPAREN() {
  return getToken(JavaParser::RPAREN, 0);
}

tree::TerminalNode* JavaParser::ResourceSpecificationContext::SEMI() {
  return getToken(JavaParser::SEMI, 0);
}


size_t JavaParser::ResourceSpecificationContext::getRuleIndex() const {
  return JavaParser::RuleResourceSpecification;
}

void JavaParser::ResourceSpecificationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterResourceSpecification(this);
}

void JavaParser::ResourceSpecificationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitResourceSpecification(this);
}

JavaParser::ResourceSpecificationContext* JavaParser::resourceSpecification() {
  ResourceSpecificationContext *_localctx = _tracker.createInstance<ResourceSpecificationContext>(_ctx, getState());
  enterRule(_localctx, 174, JavaParser::RuleResourceSpecification);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1209);
    match(JavaParser::LPAREN);
    setState(1210);
    resources();
    setState(1212);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::SEMI) {
      setState(1211);
      match(JavaParser::SEMI);
    }
    setState(1214);
    match(JavaParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ResourcesContext ------------------------------------------------------------------

JavaParser::ResourcesContext::ResourcesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::ResourceContext *> JavaParser::ResourcesContext::resource() {
  return getRuleContexts<JavaParser::ResourceContext>();
}

JavaParser::ResourceContext* JavaParser::ResourcesContext::resource(size_t i) {
  return getRuleContext<JavaParser::ResourceContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::ResourcesContext::SEMI() {
  return getTokens(JavaParser::SEMI);
}

tree::TerminalNode* JavaParser::ResourcesContext::SEMI(size_t i) {
  return getToken(JavaParser::SEMI, i);
}


size_t JavaParser::ResourcesContext::getRuleIndex() const {
  return JavaParser::RuleResources;
}

void JavaParser::ResourcesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterResources(this);
}

void JavaParser::ResourcesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitResources(this);
}

JavaParser::ResourcesContext* JavaParser::resources() {
  ResourcesContext *_localctx = _tracker.createInstance<ResourcesContext>(_ctx, getState());
  enterRule(_localctx, 176, JavaParser::RuleResources);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1216);
    resource();
    setState(1221);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 140, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1217);
        match(JavaParser::SEMI);
        setState(1218);
        resource(); 
      }
      setState(1223);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 140, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ResourceContext ------------------------------------------------------------------

JavaParser::ResourceContext::ResourceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::ResourceContext::ASSIGN() {
  return getToken(JavaParser::ASSIGN, 0);
}

JavaParser::ExpressionContext* JavaParser::ResourceContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

JavaParser::ClassOrInterfaceTypeContext* JavaParser::ResourceContext::classOrInterfaceType() {
  return getRuleContext<JavaParser::ClassOrInterfaceTypeContext>(0);
}

JavaParser::VariableDeclaratorIdContext* JavaParser::ResourceContext::variableDeclaratorId() {
  return getRuleContext<JavaParser::VariableDeclaratorIdContext>(0);
}

tree::TerminalNode* JavaParser::ResourceContext::VAR() {
  return getToken(JavaParser::VAR, 0);
}

JavaParser::IdentifierContext* JavaParser::ResourceContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

std::vector<JavaParser::VariableModifierContext *> JavaParser::ResourceContext::variableModifier() {
  return getRuleContexts<JavaParser::VariableModifierContext>();
}

JavaParser::VariableModifierContext* JavaParser::ResourceContext::variableModifier(size_t i) {
  return getRuleContext<JavaParser::VariableModifierContext>(i);
}


size_t JavaParser::ResourceContext::getRuleIndex() const {
  return JavaParser::RuleResource;
}

void JavaParser::ResourceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterResource(this);
}

void JavaParser::ResourceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitResource(this);
}

JavaParser::ResourceContext* JavaParser::resource() {
  ResourceContext *_localctx = _tracker.createInstance<ResourceContext>(_ctx, getState());
  enterRule(_localctx, 178, JavaParser::RuleResource);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1241);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 143, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1227);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 141, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1224);
          variableModifier(); 
        }
        setState(1229);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 141, _ctx);
      }
      setState(1235);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 142, _ctx)) {
      case 1: {
        setState(1230);
        classOrInterfaceType();
        setState(1231);
        variableDeclaratorId();
        break;
      }

      case 2: {
        setState(1233);
        match(JavaParser::VAR);
        setState(1234);
        identifier();
        break;
      }

      default:
        break;
      }
      setState(1237);
      match(JavaParser::ASSIGN);
      setState(1238);
      expression(0);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1240);
      identifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SwitchBlockStatementGroupContext ------------------------------------------------------------------

JavaParser::SwitchBlockStatementGroupContext::SwitchBlockStatementGroupContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::SwitchLabelContext *> JavaParser::SwitchBlockStatementGroupContext::switchLabel() {
  return getRuleContexts<JavaParser::SwitchLabelContext>();
}

JavaParser::SwitchLabelContext* JavaParser::SwitchBlockStatementGroupContext::switchLabel(size_t i) {
  return getRuleContext<JavaParser::SwitchLabelContext>(i);
}

std::vector<JavaParser::BlockStatementContext *> JavaParser::SwitchBlockStatementGroupContext::blockStatement() {
  return getRuleContexts<JavaParser::BlockStatementContext>();
}

JavaParser::BlockStatementContext* JavaParser::SwitchBlockStatementGroupContext::blockStatement(size_t i) {
  return getRuleContext<JavaParser::BlockStatementContext>(i);
}


size_t JavaParser::SwitchBlockStatementGroupContext::getRuleIndex() const {
  return JavaParser::RuleSwitchBlockStatementGroup;
}

void JavaParser::SwitchBlockStatementGroupContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSwitchBlockStatementGroup(this);
}

void JavaParser::SwitchBlockStatementGroupContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSwitchBlockStatementGroup(this);
}

JavaParser::SwitchBlockStatementGroupContext* JavaParser::switchBlockStatementGroup() {
  SwitchBlockStatementGroupContext *_localctx = _tracker.createInstance<SwitchBlockStatementGroupContext>(_ctx, getState());
  enterRule(_localctx, 180, JavaParser::RuleSwitchBlockStatementGroup);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1244); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1243);
      switchLabel();
      setState(1246); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == JavaParser::CASE

    || _la == JavaParser::DEFAULT);
    setState(1249); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1248);
      blockStatement();
      setState(1251); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la - 1) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 1)) & -334254282492513) != 0 || (((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & -8935141145188974593) != 0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SwitchLabelContext ------------------------------------------------------------------

JavaParser::SwitchLabelContext::SwitchLabelContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::SwitchLabelContext::CASE() {
  return getToken(JavaParser::CASE, 0);
}

tree::TerminalNode* JavaParser::SwitchLabelContext::COLON() {
  return getToken(JavaParser::COLON, 0);
}

JavaParser::TypeTypeContext* JavaParser::SwitchLabelContext::typeType() {
  return getRuleContext<JavaParser::TypeTypeContext>(0);
}

JavaParser::ExpressionContext* JavaParser::SwitchLabelContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

tree::TerminalNode* JavaParser::SwitchLabelContext::IDENTIFIER() {
  return getToken(JavaParser::IDENTIFIER, 0);
}

JavaParser::IdentifierContext* JavaParser::SwitchLabelContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

tree::TerminalNode* JavaParser::SwitchLabelContext::DEFAULT() {
  return getToken(JavaParser::DEFAULT, 0);
}


size_t JavaParser::SwitchLabelContext::getRuleIndex() const {
  return JavaParser::RuleSwitchLabel;
}

void JavaParser::SwitchLabelContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSwitchLabel(this);
}

void JavaParser::SwitchLabelContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSwitchLabel(this);
}

JavaParser::SwitchLabelContext* JavaParser::switchLabel() {
  SwitchLabelContext *_localctx = _tracker.createInstance<SwitchLabelContext>(_ctx, getState());
  enterRule(_localctx, 182, JavaParser::RuleSwitchLabel);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1264);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::CASE: {
        enterOuterAlt(_localctx, 1);
        setState(1253);
        match(JavaParser::CASE);
        setState(1259);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 146, _ctx)) {
        case 1: {
          setState(1254);
          antlrcpp::downCast<SwitchLabelContext *>(_localctx)->constantExpression = expression(0);
          break;
        }

        case 2: {
          setState(1255);
          antlrcpp::downCast<SwitchLabelContext *>(_localctx)->enumConstantName = match(JavaParser::IDENTIFIER);
          break;
        }

        case 3: {
          setState(1256);
          typeType();
          setState(1257);
          antlrcpp::downCast<SwitchLabelContext *>(_localctx)->varName = identifier();
          break;
        }

        default:
          break;
        }
        setState(1261);
        match(JavaParser::COLON);
        break;
      }

      case JavaParser::DEFAULT: {
        enterOuterAlt(_localctx, 2);
        setState(1262);
        match(JavaParser::DEFAULT);
        setState(1263);
        match(JavaParser::COLON);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForControlContext ------------------------------------------------------------------

JavaParser::ForControlContext::ForControlContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::EnhancedForControlContext* JavaParser::ForControlContext::enhancedForControl() {
  return getRuleContext<JavaParser::EnhancedForControlContext>(0);
}

std::vector<tree::TerminalNode *> JavaParser::ForControlContext::SEMI() {
  return getTokens(JavaParser::SEMI);
}

tree::TerminalNode* JavaParser::ForControlContext::SEMI(size_t i) {
  return getToken(JavaParser::SEMI, i);
}

JavaParser::ForInitContext* JavaParser::ForControlContext::forInit() {
  return getRuleContext<JavaParser::ForInitContext>(0);
}

JavaParser::ExpressionContext* JavaParser::ForControlContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

JavaParser::ExpressionListContext* JavaParser::ForControlContext::expressionList() {
  return getRuleContext<JavaParser::ExpressionListContext>(0);
}


size_t JavaParser::ForControlContext::getRuleIndex() const {
  return JavaParser::RuleForControl;
}

void JavaParser::ForControlContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterForControl(this);
}

void JavaParser::ForControlContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitForControl(this);
}

JavaParser::ForControlContext* JavaParser::forControl() {
  ForControlContext *_localctx = _tracker.createInstance<ForControlContext>(_ctx, getState());
  enterRule(_localctx, 184, JavaParser::RuleForControl);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1278);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 151, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1266);
      enhancedForControl();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1268);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la - 3) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 3)) & 9223127275610998821) != 0 || (((_la - 67) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 67)) & 2377900732130004991) != 0) {
        setState(1267);
        forInit();
      }
      setState(1270);
      match(JavaParser::SEMI);
      setState(1272);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la - 3) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 3)) & 9223127275610966053) != 0 || (((_la - 67) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 67)) & 2377900732130004991) != 0) {
        setState(1271);
        expression(0);
      }
      setState(1274);
      match(JavaParser::SEMI);
      setState(1276);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la - 3) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 3)) & 9223127275610966053) != 0 || (((_la - 67) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 67)) & 2377900732130004991) != 0) {
        setState(1275);
        antlrcpp::downCast<ForControlContext *>(_localctx)->forUpdate = expressionList();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForInitContext ------------------------------------------------------------------

JavaParser::ForInitContext::ForInitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::LocalVariableDeclarationContext* JavaParser::ForInitContext::localVariableDeclaration() {
  return getRuleContext<JavaParser::LocalVariableDeclarationContext>(0);
}

JavaParser::ExpressionListContext* JavaParser::ForInitContext::expressionList() {
  return getRuleContext<JavaParser::ExpressionListContext>(0);
}


size_t JavaParser::ForInitContext::getRuleIndex() const {
  return JavaParser::RuleForInit;
}

void JavaParser::ForInitContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterForInit(this);
}

void JavaParser::ForInitContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitForInit(this);
}

JavaParser::ForInitContext* JavaParser::forInit() {
  ForInitContext *_localctx = _tracker.createInstance<ForInitContext>(_ctx, getState());
  enterRule(_localctx, 186, JavaParser::RuleForInit);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1282);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 152, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1280);
      localVariableDeclaration();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1281);
      expressionList();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnhancedForControlContext ------------------------------------------------------------------

JavaParser::EnhancedForControlContext::EnhancedForControlContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::VariableDeclaratorIdContext* JavaParser::EnhancedForControlContext::variableDeclaratorId() {
  return getRuleContext<JavaParser::VariableDeclaratorIdContext>(0);
}

tree::TerminalNode* JavaParser::EnhancedForControlContext::COLON() {
  return getToken(JavaParser::COLON, 0);
}

JavaParser::ExpressionContext* JavaParser::EnhancedForControlContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

JavaParser::TypeTypeContext* JavaParser::EnhancedForControlContext::typeType() {
  return getRuleContext<JavaParser::TypeTypeContext>(0);
}

tree::TerminalNode* JavaParser::EnhancedForControlContext::VAR() {
  return getToken(JavaParser::VAR, 0);
}

std::vector<JavaParser::VariableModifierContext *> JavaParser::EnhancedForControlContext::variableModifier() {
  return getRuleContexts<JavaParser::VariableModifierContext>();
}

JavaParser::VariableModifierContext* JavaParser::EnhancedForControlContext::variableModifier(size_t i) {
  return getRuleContext<JavaParser::VariableModifierContext>(i);
}


size_t JavaParser::EnhancedForControlContext::getRuleIndex() const {
  return JavaParser::RuleEnhancedForControl;
}

void JavaParser::EnhancedForControlContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnhancedForControl(this);
}

void JavaParser::EnhancedForControlContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnhancedForControl(this);
}

JavaParser::EnhancedForControlContext* JavaParser::enhancedForControl() {
  EnhancedForControlContext *_localctx = _tracker.createInstance<EnhancedForControlContext>(_ctx, getState());
  enterRule(_localctx, 188, JavaParser::RuleEnhancedForControl);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1287);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 153, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1284);
        variableModifier(); 
      }
      setState(1289);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 153, _ctx);
    }
    setState(1292);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 154, _ctx)) {
    case 1: {
      setState(1290);
      typeType();
      break;
    }

    case 2: {
      setState(1291);
      match(JavaParser::VAR);
      break;
    }

    default:
      break;
    }
    setState(1294);
    variableDeclaratorId();
    setState(1295);
    match(JavaParser::COLON);
    setState(1296);
    expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParExpressionContext ------------------------------------------------------------------

JavaParser::ParExpressionContext::ParExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::ParExpressionContext::LPAREN() {
  return getToken(JavaParser::LPAREN, 0);
}

JavaParser::ExpressionContext* JavaParser::ParExpressionContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

tree::TerminalNode* JavaParser::ParExpressionContext::RPAREN() {
  return getToken(JavaParser::RPAREN, 0);
}


size_t JavaParser::ParExpressionContext::getRuleIndex() const {
  return JavaParser::RuleParExpression;
}

void JavaParser::ParExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParExpression(this);
}

void JavaParser::ParExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParExpression(this);
}

JavaParser::ParExpressionContext* JavaParser::parExpression() {
  ParExpressionContext *_localctx = _tracker.createInstance<ParExpressionContext>(_ctx, getState());
  enterRule(_localctx, 190, JavaParser::RuleParExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1298);
    match(JavaParser::LPAREN);
    setState(1299);
    expression(0);
    setState(1300);
    match(JavaParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionListContext ------------------------------------------------------------------

JavaParser::ExpressionListContext::ExpressionListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::ExpressionContext *> JavaParser::ExpressionListContext::expression() {
  return getRuleContexts<JavaParser::ExpressionContext>();
}

JavaParser::ExpressionContext* JavaParser::ExpressionListContext::expression(size_t i) {
  return getRuleContext<JavaParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::ExpressionListContext::COMMA() {
  return getTokens(JavaParser::COMMA);
}

tree::TerminalNode* JavaParser::ExpressionListContext::COMMA(size_t i) {
  return getToken(JavaParser::COMMA, i);
}


size_t JavaParser::ExpressionListContext::getRuleIndex() const {
  return JavaParser::RuleExpressionList;
}

void JavaParser::ExpressionListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpressionList(this);
}

void JavaParser::ExpressionListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpressionList(this);
}

JavaParser::ExpressionListContext* JavaParser::expressionList() {
  ExpressionListContext *_localctx = _tracker.createInstance<ExpressionListContext>(_ctx, getState());
  enterRule(_localctx, 192, JavaParser::RuleExpressionList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1302);
    expression(0);
    setState(1307);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::COMMA) {
      setState(1303);
      match(JavaParser::COMMA);
      setState(1304);
      expression(0);
      setState(1309);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MethodCallContext ------------------------------------------------------------------

JavaParser::MethodCallContext::MethodCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::MethodCallContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

tree::TerminalNode* JavaParser::MethodCallContext::LPAREN() {
  return getToken(JavaParser::LPAREN, 0);
}

tree::TerminalNode* JavaParser::MethodCallContext::RPAREN() {
  return getToken(JavaParser::RPAREN, 0);
}

JavaParser::ExpressionListContext* JavaParser::MethodCallContext::expressionList() {
  return getRuleContext<JavaParser::ExpressionListContext>(0);
}

tree::TerminalNode* JavaParser::MethodCallContext::THIS() {
  return getToken(JavaParser::THIS, 0);
}

tree::TerminalNode* JavaParser::MethodCallContext::SUPER() {
  return getToken(JavaParser::SUPER, 0);
}


size_t JavaParser::MethodCallContext::getRuleIndex() const {
  return JavaParser::RuleMethodCall;
}

void JavaParser::MethodCallContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMethodCall(this);
}

void JavaParser::MethodCallContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMethodCall(this);
}

JavaParser::MethodCallContext* JavaParser::methodCall() {
  MethodCallContext *_localctx = _tracker.createInstance<MethodCallContext>(_ctx, getState());
  enterRule(_localctx, 194, JavaParser::RuleMethodCall);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1329);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::MODULE:
      case JavaParser::OPEN:
      case JavaParser::REQUIRES:
      case JavaParser::EXPORTS:
      case JavaParser::OPENS:
      case JavaParser::TO:
      case JavaParser::USES:
      case JavaParser::PROVIDES:
      case JavaParser::WITH:
      case JavaParser::TRANSITIVE:
      case JavaParser::VAR:
      case JavaParser::YIELD:
      case JavaParser::RECORD:
      case JavaParser::SEALED:
      case JavaParser::PERMITS:
      case JavaParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(1310);
        identifier();
        setState(1311);
        match(JavaParser::LPAREN);
        setState(1313);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la - 3) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 3)) & 9223127275610966053) != 0 || (((_la - 67) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 67)) & 2377900732130004991) != 0) {
          setState(1312);
          expressionList();
        }
        setState(1315);
        match(JavaParser::RPAREN);
        break;
      }

      case JavaParser::THIS: {
        enterOuterAlt(_localctx, 2);
        setState(1317);
        match(JavaParser::THIS);
        setState(1318);
        match(JavaParser::LPAREN);
        setState(1320);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la - 3) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 3)) & 9223127275610966053) != 0 || (((_la - 67) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 67)) & 2377900732130004991) != 0) {
          setState(1319);
          expressionList();
        }
        setState(1322);
        match(JavaParser::RPAREN);
        break;
      }

      case JavaParser::SUPER: {
        enterOuterAlt(_localctx, 3);
        setState(1323);
        match(JavaParser::SUPER);
        setState(1324);
        match(JavaParser::LPAREN);
        setState(1326);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la - 3) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 3)) & 9223127275610966053) != 0 || (((_la - 67) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 67)) & 2377900732130004991) != 0) {
          setState(1325);
          expressionList();
        }
        setState(1328);
        match(JavaParser::RPAREN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionContext ------------------------------------------------------------------

JavaParser::ExpressionContext::ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::PrimaryContext* JavaParser::ExpressionContext::primary() {
  return getRuleContext<JavaParser::PrimaryContext>(0);
}

JavaParser::MethodCallContext* JavaParser::ExpressionContext::methodCall() {
  return getRuleContext<JavaParser::MethodCallContext>(0);
}

tree::TerminalNode* JavaParser::ExpressionContext::NEW() {
  return getToken(JavaParser::NEW, 0);
}

JavaParser::CreatorContext* JavaParser::ExpressionContext::creator() {
  return getRuleContext<JavaParser::CreatorContext>(0);
}

tree::TerminalNode* JavaParser::ExpressionContext::LPAREN() {
  return getToken(JavaParser::LPAREN, 0);
}

std::vector<JavaParser::TypeTypeContext *> JavaParser::ExpressionContext::typeType() {
  return getRuleContexts<JavaParser::TypeTypeContext>();
}

JavaParser::TypeTypeContext* JavaParser::ExpressionContext::typeType(size_t i) {
  return getRuleContext<JavaParser::TypeTypeContext>(i);
}

tree::TerminalNode* JavaParser::ExpressionContext::RPAREN() {
  return getToken(JavaParser::RPAREN, 0);
}

std::vector<JavaParser::ExpressionContext *> JavaParser::ExpressionContext::expression() {
  return getRuleContexts<JavaParser::ExpressionContext>();
}

JavaParser::ExpressionContext* JavaParser::ExpressionContext::expression(size_t i) {
  return getRuleContext<JavaParser::ExpressionContext>(i);
}

std::vector<JavaParser::AnnotationContext *> JavaParser::ExpressionContext::annotation() {
  return getRuleContexts<JavaParser::AnnotationContext>();
}

JavaParser::AnnotationContext* JavaParser::ExpressionContext::annotation(size_t i) {
  return getRuleContext<JavaParser::AnnotationContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::ExpressionContext::BITAND() {
  return getTokens(JavaParser::BITAND);
}

tree::TerminalNode* JavaParser::ExpressionContext::BITAND(size_t i) {
  return getToken(JavaParser::BITAND, i);
}

tree::TerminalNode* JavaParser::ExpressionContext::ADD() {
  return getToken(JavaParser::ADD, 0);
}

tree::TerminalNode* JavaParser::ExpressionContext::SUB() {
  return getToken(JavaParser::SUB, 0);
}

tree::TerminalNode* JavaParser::ExpressionContext::INC() {
  return getToken(JavaParser::INC, 0);
}

tree::TerminalNode* JavaParser::ExpressionContext::DEC() {
  return getToken(JavaParser::DEC, 0);
}

tree::TerminalNode* JavaParser::ExpressionContext::TILDE() {
  return getToken(JavaParser::TILDE, 0);
}

tree::TerminalNode* JavaParser::ExpressionContext::BANG() {
  return getToken(JavaParser::BANG, 0);
}

JavaParser::LambdaExpressionContext* JavaParser::ExpressionContext::lambdaExpression() {
  return getRuleContext<JavaParser::LambdaExpressionContext>(0);
}

JavaParser::SwitchExpressionContext* JavaParser::ExpressionContext::switchExpression() {
  return getRuleContext<JavaParser::SwitchExpressionContext>(0);
}

tree::TerminalNode* JavaParser::ExpressionContext::COLONCOLON() {
  return getToken(JavaParser::COLONCOLON, 0);
}

JavaParser::IdentifierContext* JavaParser::ExpressionContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::TypeArgumentsContext* JavaParser::ExpressionContext::typeArguments() {
  return getRuleContext<JavaParser::TypeArgumentsContext>(0);
}

JavaParser::ClassTypeContext* JavaParser::ExpressionContext::classType() {
  return getRuleContext<JavaParser::ClassTypeContext>(0);
}

tree::TerminalNode* JavaParser::ExpressionContext::MUL() {
  return getToken(JavaParser::MUL, 0);
}

tree::TerminalNode* JavaParser::ExpressionContext::DIV() {
  return getToken(JavaParser::DIV, 0);
}

tree::TerminalNode* JavaParser::ExpressionContext::MOD() {
  return getToken(JavaParser::MOD, 0);
}

std::vector<tree::TerminalNode *> JavaParser::ExpressionContext::LT() {
  return getTokens(JavaParser::LT);
}

tree::TerminalNode* JavaParser::ExpressionContext::LT(size_t i) {
  return getToken(JavaParser::LT, i);
}

std::vector<tree::TerminalNode *> JavaParser::ExpressionContext::GT() {
  return getTokens(JavaParser::GT);
}

tree::TerminalNode* JavaParser::ExpressionContext::GT(size_t i) {
  return getToken(JavaParser::GT, i);
}

tree::TerminalNode* JavaParser::ExpressionContext::LE() {
  return getToken(JavaParser::LE, 0);
}

tree::TerminalNode* JavaParser::ExpressionContext::GE() {
  return getToken(JavaParser::GE, 0);
}

tree::TerminalNode* JavaParser::ExpressionContext::EQUAL() {
  return getToken(JavaParser::EQUAL, 0);
}

tree::TerminalNode* JavaParser::ExpressionContext::NOTEQUAL() {
  return getToken(JavaParser::NOTEQUAL, 0);
}

tree::TerminalNode* JavaParser::ExpressionContext::CARET() {
  return getToken(JavaParser::CARET, 0);
}

tree::TerminalNode* JavaParser::ExpressionContext::BITOR() {
  return getToken(JavaParser::BITOR, 0);
}

tree::TerminalNode* JavaParser::ExpressionContext::AND() {
  return getToken(JavaParser::AND, 0);
}

tree::TerminalNode* JavaParser::ExpressionContext::OR() {
  return getToken(JavaParser::OR, 0);
}

tree::TerminalNode* JavaParser::ExpressionContext::COLON() {
  return getToken(JavaParser::COLON, 0);
}

tree::TerminalNode* JavaParser::ExpressionContext::QUESTION() {
  return getToken(JavaParser::QUESTION, 0);
}

tree::TerminalNode* JavaParser::ExpressionContext::ASSIGN() {
  return getToken(JavaParser::ASSIGN, 0);
}

tree::TerminalNode* JavaParser::ExpressionContext::ADD_ASSIGN() {
  return getToken(JavaParser::ADD_ASSIGN, 0);
}

tree::TerminalNode* JavaParser::ExpressionContext::SUB_ASSIGN() {
  return getToken(JavaParser::SUB_ASSIGN, 0);
}

tree::TerminalNode* JavaParser::ExpressionContext::MUL_ASSIGN() {
  return getToken(JavaParser::MUL_ASSIGN, 0);
}

tree::TerminalNode* JavaParser::ExpressionContext::DIV_ASSIGN() {
  return getToken(JavaParser::DIV_ASSIGN, 0);
}

tree::TerminalNode* JavaParser::ExpressionContext::AND_ASSIGN() {
  return getToken(JavaParser::AND_ASSIGN, 0);
}

tree::TerminalNode* JavaParser::ExpressionContext::OR_ASSIGN() {
  return getToken(JavaParser::OR_ASSIGN, 0);
}

tree::TerminalNode* JavaParser::ExpressionContext::XOR_ASSIGN() {
  return getToken(JavaParser::XOR_ASSIGN, 0);
}

tree::TerminalNode* JavaParser::ExpressionContext::RSHIFT_ASSIGN() {
  return getToken(JavaParser::RSHIFT_ASSIGN, 0);
}

tree::TerminalNode* JavaParser::ExpressionContext::URSHIFT_ASSIGN() {
  return getToken(JavaParser::URSHIFT_ASSIGN, 0);
}

tree::TerminalNode* JavaParser::ExpressionContext::LSHIFT_ASSIGN() {
  return getToken(JavaParser::LSHIFT_ASSIGN, 0);
}

tree::TerminalNode* JavaParser::ExpressionContext::MOD_ASSIGN() {
  return getToken(JavaParser::MOD_ASSIGN, 0);
}

tree::TerminalNode* JavaParser::ExpressionContext::DOT() {
  return getToken(JavaParser::DOT, 0);
}

tree::TerminalNode* JavaParser::ExpressionContext::THIS() {
  return getToken(JavaParser::THIS, 0);
}

JavaParser::InnerCreatorContext* JavaParser::ExpressionContext::innerCreator() {
  return getRuleContext<JavaParser::InnerCreatorContext>(0);
}

tree::TerminalNode* JavaParser::ExpressionContext::SUPER() {
  return getToken(JavaParser::SUPER, 0);
}

JavaParser::SuperSuffixContext* JavaParser::ExpressionContext::superSuffix() {
  return getRuleContext<JavaParser::SuperSuffixContext>(0);
}

JavaParser::ExplicitGenericInvocationContext* JavaParser::ExpressionContext::explicitGenericInvocation() {
  return getRuleContext<JavaParser::ExplicitGenericInvocationContext>(0);
}

JavaParser::NonWildcardTypeArgumentsContext* JavaParser::ExpressionContext::nonWildcardTypeArguments() {
  return getRuleContext<JavaParser::NonWildcardTypeArgumentsContext>(0);
}

tree::TerminalNode* JavaParser::ExpressionContext::LBRACK() {
  return getToken(JavaParser::LBRACK, 0);
}

tree::TerminalNode* JavaParser::ExpressionContext::RBRACK() {
  return getToken(JavaParser::RBRACK, 0);
}

tree::TerminalNode* JavaParser::ExpressionContext::INSTANCEOF() {
  return getToken(JavaParser::INSTANCEOF, 0);
}

JavaParser::PatternContext* JavaParser::ExpressionContext::pattern() {
  return getRuleContext<JavaParser::PatternContext>(0);
}


size_t JavaParser::ExpressionContext::getRuleIndex() const {
  return JavaParser::RuleExpression;
}

void JavaParser::ExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpression(this);
}

void JavaParser::ExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpression(this);
}


JavaParser::ExpressionContext* JavaParser::expression() {
   return expression(0);
}

JavaParser::ExpressionContext* JavaParser::expression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  JavaParser::ExpressionContext *_localctx = _tracker.createInstance<ExpressionContext>(_ctx, parentState);
  JavaParser::ExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 196;
  enterRecursionRule(_localctx, 196, JavaParser::RuleExpression, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1376);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 165, _ctx)) {
    case 1: {
      setState(1332);
      primary();
      break;
    }

    case 2: {
      setState(1333);
      methodCall();
      break;
    }

    case 3: {
      setState(1334);
      match(JavaParser::NEW);
      setState(1335);
      creator();
      break;
    }

    case 4: {
      setState(1336);
      match(JavaParser::LPAREN);
      setState(1340);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 160, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1337);
          annotation(); 
        }
        setState(1342);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 160, _ctx);
      }
      setState(1343);
      typeType();
      setState(1348);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == JavaParser::BITAND) {
        setState(1344);
        match(JavaParser::BITAND);
        setState(1345);
        typeType();
        setState(1350);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1351);
      match(JavaParser::RPAREN);
      setState(1352);
      expression(22);
      break;
    }

    case 5: {
      setState(1354);
      antlrcpp::downCast<ExpressionContext *>(_localctx)->prefix = _input->LT(1);
      _la = _input->LA(1);
      if (!((((_la - 100) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 100)) & 15) != 0)) {
        antlrcpp::downCast<ExpressionContext *>(_localctx)->prefix = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1355);
      expression(20);
      break;
    }

    case 6: {
      setState(1356);
      antlrcpp::downCast<ExpressionContext *>(_localctx)->prefix = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == JavaParser::BANG

      || _la == JavaParser::TILDE)) {
        antlrcpp::downCast<ExpressionContext *>(_localctx)->prefix = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1357);
      expression(19);
      break;
    }

    case 7: {
      setState(1358);
      lambdaExpression();
      break;
    }

    case 8: {
      setState(1359);
      switchExpression();
      break;
    }

    case 9: {
      setState(1360);
      typeType();
      setState(1361);
      match(JavaParser::COLONCOLON);
      setState(1367);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case JavaParser::MODULE:
        case JavaParser::OPEN:
        case JavaParser::REQUIRES:
        case JavaParser::EXPORTS:
        case JavaParser::OPENS:
        case JavaParser::TO:
        case JavaParser::USES:
        case JavaParser::PROVIDES:
        case JavaParser::WITH:
        case JavaParser::TRANSITIVE:
        case JavaParser::VAR:
        case JavaParser::YIELD:
        case JavaParser::RECORD:
        case JavaParser::SEALED:
        case JavaParser::PERMITS:
        case JavaParser::LT:
        case JavaParser::IDENTIFIER: {
          setState(1363);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == JavaParser::LT) {
            setState(1362);
            typeArguments();
          }
          setState(1365);
          identifier();
          break;
        }

        case JavaParser::NEW: {
          setState(1366);
          match(JavaParser::NEW);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 10: {
      setState(1369);
      classType();
      setState(1370);
      match(JavaParser::COLONCOLON);
      setState(1372);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(1371);
        typeArguments();
      }
      setState(1374);
      match(JavaParser::NEW);
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(1461);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 172, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(1459);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 171, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(1378);

          if (!(precpred(_ctx, 18))) throw FailedPredicateException(this, "precpred(_ctx, 18)");
          setState(1379);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->bop = _input->LT(1);
          _la = _input->LA(1);
          if (!((((_la - 104) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 104)) & 35) != 0)) {
            antlrcpp::downCast<ExpressionContext *>(_localctx)->bop = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(1380);
          expression(19);
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(1381);

          if (!(precpred(_ctx, 17))) throw FailedPredicateException(this, "precpred(_ctx, 17)");
          setState(1382);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->bop = _input->LT(1);
          _la = _input->LA(1);
          if (!(_la == JavaParser::ADD

          || _la == JavaParser::SUB)) {
            antlrcpp::downCast<ExpressionContext *>(_localctx)->bop = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(1383);
          expression(18);
          break;
        }

        case 3: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(1384);

          if (!(precpred(_ctx, 16))) throw FailedPredicateException(this, "precpred(_ctx, 16)");
          setState(1392);
          _errHandler->sync(this);
          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 166, _ctx)) {
          case 1: {
            setState(1385);
            match(JavaParser::LT);
            setState(1386);
            match(JavaParser::LT);
            break;
          }

          case 2: {
            setState(1387);
            match(JavaParser::GT);
            setState(1388);
            match(JavaParser::GT);
            setState(1389);
            match(JavaParser::GT);
            break;
          }

          case 3: {
            setState(1390);
            match(JavaParser::GT);
            setState(1391);
            match(JavaParser::GT);
            break;
          }

          default:
            break;
          }
          setState(1394);
          expression(17);
          break;
        }

        case 4: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(1395);

          if (!(precpred(_ctx, 15))) throw FailedPredicateException(this, "precpred(_ctx, 15)");
          setState(1396);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->bop = _input->LT(1);
          _la = _input->LA(1);
          if (!((((_la - 88) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 88)) & 387) != 0)) {
            antlrcpp::downCast<ExpressionContext *>(_localctx)->bop = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(1397);
          expression(16);
          break;
        }

        case 5: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(1398);

          if (!(precpred(_ctx, 13))) throw FailedPredicateException(this, "precpred(_ctx, 13)");
          setState(1399);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->bop = _input->LT(1);
          _la = _input->LA(1);
          if (!(_la == JavaParser::EQUAL

          || _la == JavaParser::NOTEQUAL)) {
            antlrcpp::downCast<ExpressionContext *>(_localctx)->bop = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(1400);
          expression(14);
          break;
        }

        case 6: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(1401);

          if (!(precpred(_ctx, 12))) throw FailedPredicateException(this, "precpred(_ctx, 12)");
          setState(1402);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->bop = match(JavaParser::BITAND);
          setState(1403);
          expression(13);
          break;
        }

        case 7: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(1404);

          if (!(precpred(_ctx, 11))) throw FailedPredicateException(this, "precpred(_ctx, 11)");
          setState(1405);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->bop = match(JavaParser::CARET);
          setState(1406);
          expression(12);
          break;
        }

        case 8: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(1407);

          if (!(precpred(_ctx, 10))) throw FailedPredicateException(this, "precpred(_ctx, 10)");
          setState(1408);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->bop = match(JavaParser::BITOR);
          setState(1409);
          expression(11);
          break;
        }

        case 9: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(1410);

          if (!(precpred(_ctx, 9))) throw FailedPredicateException(this, "precpred(_ctx, 9)");
          setState(1411);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->bop = match(JavaParser::AND);
          setState(1412);
          expression(10);
          break;
        }

        case 10: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(1413);

          if (!(precpred(_ctx, 8))) throw FailedPredicateException(this, "precpred(_ctx, 8)");
          setState(1414);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->bop = match(JavaParser::OR);
          setState(1415);
          expression(9);
          break;
        }

        case 11: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(1416);

          if (!(precpred(_ctx, 7))) throw FailedPredicateException(this, "precpred(_ctx, 7)");
          setState(1417);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->bop = match(JavaParser::QUESTION);
          setState(1418);
          expression(0);
          setState(1419);
          match(JavaParser::COLON);
          setState(1420);
          expression(7);
          break;
        }

        case 12: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(1422);

          if (!(precpred(_ctx, 6))) throw FailedPredicateException(this, "precpred(_ctx, 6)");
          setState(1423);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->bop = _input->LT(1);
          _la = _input->LA(1);
          if (!((((_la - 87) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 87)) & 17171480577) != 0)) {
            antlrcpp::downCast<ExpressionContext *>(_localctx)->bop = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(1424);
          expression(6);
          break;
        }

        case 13: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(1425);

          if (!(precpred(_ctx, 26))) throw FailedPredicateException(this, "precpred(_ctx, 26)");
          setState(1426);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->bop = match(JavaParser::DOT);
          setState(1438);
          _errHandler->sync(this);
          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 168, _ctx)) {
          case 1: {
            setState(1427);
            identifier();
            break;
          }

          case 2: {
            setState(1428);
            methodCall();
            break;
          }

          case 3: {
            setState(1429);
            match(JavaParser::THIS);
            break;
          }

          case 4: {
            setState(1430);
            match(JavaParser::NEW);
            setState(1432);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == JavaParser::LT) {
              setState(1431);
              nonWildcardTypeArguments();
            }
            setState(1434);
            innerCreator();
            break;
          }

          case 5: {
            setState(1435);
            match(JavaParser::SUPER);
            setState(1436);
            superSuffix();
            break;
          }

          case 6: {
            setState(1437);
            explicitGenericInvocation();
            break;
          }

          default:
            break;
          }
          break;
        }

        case 14: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(1440);

          if (!(precpred(_ctx, 25))) throw FailedPredicateException(this, "precpred(_ctx, 25)");
          setState(1441);
          match(JavaParser::LBRACK);
          setState(1442);
          expression(0);
          setState(1443);
          match(JavaParser::RBRACK);
          break;
        }

        case 15: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(1445);

          if (!(precpred(_ctx, 21))) throw FailedPredicateException(this, "precpred(_ctx, 21)");
          setState(1446);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->postfix = _input->LT(1);
          _la = _input->LA(1);
          if (!(_la == JavaParser::INC

          || _la == JavaParser::DEC)) {
            antlrcpp::downCast<ExpressionContext *>(_localctx)->postfix = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          break;
        }

        case 16: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(1447);

          if (!(precpred(_ctx, 14))) throw FailedPredicateException(this, "precpred(_ctx, 14)");
          setState(1448);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->bop = match(JavaParser::INSTANCEOF);
          setState(1451);
          _errHandler->sync(this);
          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 169, _ctx)) {
          case 1: {
            setState(1449);
            typeType();
            break;
          }

          case 2: {
            setState(1450);
            pattern();
            break;
          }

          default:
            break;
          }
          break;
        }

        case 17: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(1453);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(1454);
          match(JavaParser::COLONCOLON);
          setState(1456);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == JavaParser::LT) {
            setState(1455);
            typeArguments();
          }
          setState(1458);
          identifier();
          break;
        }

        default:
          break;
        } 
      }
      setState(1463);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 172, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- PatternContext ------------------------------------------------------------------

JavaParser::PatternContext::PatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::TypeTypeContext* JavaParser::PatternContext::typeType() {
  return getRuleContext<JavaParser::TypeTypeContext>(0);
}

JavaParser::IdentifierContext* JavaParser::PatternContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

std::vector<JavaParser::VariableModifierContext *> JavaParser::PatternContext::variableModifier() {
  return getRuleContexts<JavaParser::VariableModifierContext>();
}

JavaParser::VariableModifierContext* JavaParser::PatternContext::variableModifier(size_t i) {
  return getRuleContext<JavaParser::VariableModifierContext>(i);
}

std::vector<JavaParser::AnnotationContext *> JavaParser::PatternContext::annotation() {
  return getRuleContexts<JavaParser::AnnotationContext>();
}

JavaParser::AnnotationContext* JavaParser::PatternContext::annotation(size_t i) {
  return getRuleContext<JavaParser::AnnotationContext>(i);
}


size_t JavaParser::PatternContext::getRuleIndex() const {
  return JavaParser::RulePattern;
}

void JavaParser::PatternContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPattern(this);
}

void JavaParser::PatternContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPattern(this);
}

JavaParser::PatternContext* JavaParser::pattern() {
  PatternContext *_localctx = _tracker.createInstance<PatternContext>(_ctx, getState());
  enterRule(_localctx, 198, JavaParser::RulePattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1467);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 173, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1464);
        variableModifier(); 
      }
      setState(1469);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 173, _ctx);
    }
    setState(1470);
    typeType();
    setState(1474);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 174, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1471);
        annotation(); 
      }
      setState(1476);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 174, _ctx);
    }
    setState(1477);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LambdaExpressionContext ------------------------------------------------------------------

JavaParser::LambdaExpressionContext::LambdaExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::LambdaParametersContext* JavaParser::LambdaExpressionContext::lambdaParameters() {
  return getRuleContext<JavaParser::LambdaParametersContext>(0);
}

tree::TerminalNode* JavaParser::LambdaExpressionContext::ARROW() {
  return getToken(JavaParser::ARROW, 0);
}

JavaParser::LambdaBodyContext* JavaParser::LambdaExpressionContext::lambdaBody() {
  return getRuleContext<JavaParser::LambdaBodyContext>(0);
}


size_t JavaParser::LambdaExpressionContext::getRuleIndex() const {
  return JavaParser::RuleLambdaExpression;
}

void JavaParser::LambdaExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLambdaExpression(this);
}

void JavaParser::LambdaExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLambdaExpression(this);
}

JavaParser::LambdaExpressionContext* JavaParser::lambdaExpression() {
  LambdaExpressionContext *_localctx = _tracker.createInstance<LambdaExpressionContext>(_ctx, getState());
  enterRule(_localctx, 200, JavaParser::RuleLambdaExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1479);
    lambdaParameters();
    setState(1480);
    match(JavaParser::ARROW);
    setState(1481);
    lambdaBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LambdaParametersContext ------------------------------------------------------------------

JavaParser::LambdaParametersContext::LambdaParametersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::IdentifierContext *> JavaParser::LambdaParametersContext::identifier() {
  return getRuleContexts<JavaParser::IdentifierContext>();
}

JavaParser::IdentifierContext* JavaParser::LambdaParametersContext::identifier(size_t i) {
  return getRuleContext<JavaParser::IdentifierContext>(i);
}

tree::TerminalNode* JavaParser::LambdaParametersContext::LPAREN() {
  return getToken(JavaParser::LPAREN, 0);
}

tree::TerminalNode* JavaParser::LambdaParametersContext::RPAREN() {
  return getToken(JavaParser::RPAREN, 0);
}

JavaParser::FormalParameterListContext* JavaParser::LambdaParametersContext::formalParameterList() {
  return getRuleContext<JavaParser::FormalParameterListContext>(0);
}

std::vector<tree::TerminalNode *> JavaParser::LambdaParametersContext::COMMA() {
  return getTokens(JavaParser::COMMA);
}

tree::TerminalNode* JavaParser::LambdaParametersContext::COMMA(size_t i) {
  return getToken(JavaParser::COMMA, i);
}

JavaParser::LambdaLVTIListContext* JavaParser::LambdaParametersContext::lambdaLVTIList() {
  return getRuleContext<JavaParser::LambdaLVTIListContext>(0);
}


size_t JavaParser::LambdaParametersContext::getRuleIndex() const {
  return JavaParser::RuleLambdaParameters;
}

void JavaParser::LambdaParametersContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLambdaParameters(this);
}

void JavaParser::LambdaParametersContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLambdaParameters(this);
}

JavaParser::LambdaParametersContext* JavaParser::lambdaParameters() {
  LambdaParametersContext *_localctx = _tracker.createInstance<LambdaParametersContext>(_ctx, getState());
  enterRule(_localctx, 202, JavaParser::RuleLambdaParameters);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1505);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 178, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1483);
      identifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1484);
      match(JavaParser::LPAREN);
      setState(1486);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la - 3) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 3)) & 9223090579141986341) != 0 || _la == JavaParser::AT

      || _la == JavaParser::IDENTIFIER) {
        setState(1485);
        formalParameterList();
      }
      setState(1488);
      match(JavaParser::RPAREN);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1489);
      match(JavaParser::LPAREN);
      setState(1490);
      identifier();
      setState(1495);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == JavaParser::COMMA) {
        setState(1491);
        match(JavaParser::COMMA);
        setState(1492);
        identifier();
        setState(1497);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1498);
      match(JavaParser::RPAREN);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1500);
      match(JavaParser::LPAREN);
      setState(1502);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la - 18) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 18)) & 281466386776065) != 0 || _la == JavaParser::AT

      || _la == JavaParser::IDENTIFIER) {
        setState(1501);
        lambdaLVTIList();
      }
      setState(1504);
      match(JavaParser::RPAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LambdaBodyContext ------------------------------------------------------------------

JavaParser::LambdaBodyContext::LambdaBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ExpressionContext* JavaParser::LambdaBodyContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

JavaParser::BlockContext* JavaParser::LambdaBodyContext::block() {
  return getRuleContext<JavaParser::BlockContext>(0);
}


size_t JavaParser::LambdaBodyContext::getRuleIndex() const {
  return JavaParser::RuleLambdaBody;
}

void JavaParser::LambdaBodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLambdaBody(this);
}

void JavaParser::LambdaBodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLambdaBody(this);
}

JavaParser::LambdaBodyContext* JavaParser::lambdaBody() {
  LambdaBodyContext *_localctx = _tracker.createInstance<LambdaBodyContext>(_ctx, getState());
  enterRule(_localctx, 204, JavaParser::RuleLambdaBody);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1509);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::BOOLEAN:
      case JavaParser::BYTE:
      case JavaParser::CHAR:
      case JavaParser::DOUBLE:
      case JavaParser::FLOAT:
      case JavaParser::INT:
      case JavaParser::LONG:
      case JavaParser::NEW:
      case JavaParser::SHORT:
      case JavaParser::SUPER:
      case JavaParser::SWITCH:
      case JavaParser::THIS:
      case JavaParser::VOID:
      case JavaParser::MODULE:
      case JavaParser::OPEN:
      case JavaParser::REQUIRES:
      case JavaParser::EXPORTS:
      case JavaParser::OPENS:
      case JavaParser::TO:
      case JavaParser::USES:
      case JavaParser::PROVIDES:
      case JavaParser::WITH:
      case JavaParser::TRANSITIVE:
      case JavaParser::VAR:
      case JavaParser::YIELD:
      case JavaParser::RECORD:
      case JavaParser::SEALED:
      case JavaParser::PERMITS:
      case JavaParser::DECIMAL_LITERAL:
      case JavaParser::HEX_LITERAL:
      case JavaParser::OCT_LITERAL:
      case JavaParser::BINARY_LITERAL:
      case JavaParser::FLOAT_LITERAL:
      case JavaParser::HEX_FLOAT_LITERAL:
      case JavaParser::BOOL_LITERAL:
      case JavaParser::CHAR_LITERAL:
      case JavaParser::STRING_LITERAL:
      case JavaParser::TEXT_BLOCK:
      case JavaParser::NULL_LITERAL:
      case JavaParser::LPAREN:
      case JavaParser::LT:
      case JavaParser::BANG:
      case JavaParser::TILDE:
      case JavaParser::INC:
      case JavaParser::DEC:
      case JavaParser::ADD:
      case JavaParser::SUB:
      case JavaParser::AT:
      case JavaParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(1507);
        expression(0);
        break;
      }

      case JavaParser::LBRACE: {
        enterOuterAlt(_localctx, 2);
        setState(1508);
        block();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrimaryContext ------------------------------------------------------------------

JavaParser::PrimaryContext::PrimaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::PrimaryContext::LPAREN() {
  return getToken(JavaParser::LPAREN, 0);
}

JavaParser::ExpressionContext* JavaParser::PrimaryContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

tree::TerminalNode* JavaParser::PrimaryContext::RPAREN() {
  return getToken(JavaParser::RPAREN, 0);
}

tree::TerminalNode* JavaParser::PrimaryContext::THIS() {
  return getToken(JavaParser::THIS, 0);
}

tree::TerminalNode* JavaParser::PrimaryContext::SUPER() {
  return getToken(JavaParser::SUPER, 0);
}

JavaParser::LiteralContext* JavaParser::PrimaryContext::literal() {
  return getRuleContext<JavaParser::LiteralContext>(0);
}

JavaParser::IdentifierContext* JavaParser::PrimaryContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::TypeTypeOrVoidContext* JavaParser::PrimaryContext::typeTypeOrVoid() {
  return getRuleContext<JavaParser::TypeTypeOrVoidContext>(0);
}

tree::TerminalNode* JavaParser::PrimaryContext::DOT() {
  return getToken(JavaParser::DOT, 0);
}

tree::TerminalNode* JavaParser::PrimaryContext::CLASS() {
  return getToken(JavaParser::CLASS, 0);
}

JavaParser::NonWildcardTypeArgumentsContext* JavaParser::PrimaryContext::nonWildcardTypeArguments() {
  return getRuleContext<JavaParser::NonWildcardTypeArgumentsContext>(0);
}

JavaParser::ExplicitGenericInvocationSuffixContext* JavaParser::PrimaryContext::explicitGenericInvocationSuffix() {
  return getRuleContext<JavaParser::ExplicitGenericInvocationSuffixContext>(0);
}

JavaParser::ArgumentsContext* JavaParser::PrimaryContext::arguments() {
  return getRuleContext<JavaParser::ArgumentsContext>(0);
}


size_t JavaParser::PrimaryContext::getRuleIndex() const {
  return JavaParser::RulePrimary;
}

void JavaParser::PrimaryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimary(this);
}

void JavaParser::PrimaryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimary(this);
}

JavaParser::PrimaryContext* JavaParser::primary() {
  PrimaryContext *_localctx = _tracker.createInstance<PrimaryContext>(_ctx, getState());
  enterRule(_localctx, 206, JavaParser::RulePrimary);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1529);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 181, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1511);
      match(JavaParser::LPAREN);
      setState(1512);
      expression(0);
      setState(1513);
      match(JavaParser::RPAREN);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1515);
      match(JavaParser::THIS);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1516);
      match(JavaParser::SUPER);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1517);
      literal();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1518);
      identifier();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1519);
      typeTypeOrVoid();
      setState(1520);
      match(JavaParser::DOT);
      setState(1521);
      match(JavaParser::CLASS);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1523);
      nonWildcardTypeArguments();
      setState(1527);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case JavaParser::SUPER:
        case JavaParser::MODULE:
        case JavaParser::OPEN:
        case JavaParser::REQUIRES:
        case JavaParser::EXPORTS:
        case JavaParser::OPENS:
        case JavaParser::TO:
        case JavaParser::USES:
        case JavaParser::PROVIDES:
        case JavaParser::WITH:
        case JavaParser::TRANSITIVE:
        case JavaParser::VAR:
        case JavaParser::YIELD:
        case JavaParser::RECORD:
        case JavaParser::SEALED:
        case JavaParser::PERMITS:
        case JavaParser::IDENTIFIER: {
          setState(1524);
          explicitGenericInvocationSuffix();
          break;
        }

        case JavaParser::THIS: {
          setState(1525);
          match(JavaParser::THIS);
          setState(1526);
          arguments();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SwitchExpressionContext ------------------------------------------------------------------

JavaParser::SwitchExpressionContext::SwitchExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::SwitchExpressionContext::SWITCH() {
  return getToken(JavaParser::SWITCH, 0);
}

JavaParser::ParExpressionContext* JavaParser::SwitchExpressionContext::parExpression() {
  return getRuleContext<JavaParser::ParExpressionContext>(0);
}

tree::TerminalNode* JavaParser::SwitchExpressionContext::LBRACE() {
  return getToken(JavaParser::LBRACE, 0);
}

tree::TerminalNode* JavaParser::SwitchExpressionContext::RBRACE() {
  return getToken(JavaParser::RBRACE, 0);
}

std::vector<JavaParser::SwitchLabeledRuleContext *> JavaParser::SwitchExpressionContext::switchLabeledRule() {
  return getRuleContexts<JavaParser::SwitchLabeledRuleContext>();
}

JavaParser::SwitchLabeledRuleContext* JavaParser::SwitchExpressionContext::switchLabeledRule(size_t i) {
  return getRuleContext<JavaParser::SwitchLabeledRuleContext>(i);
}


size_t JavaParser::SwitchExpressionContext::getRuleIndex() const {
  return JavaParser::RuleSwitchExpression;
}

void JavaParser::SwitchExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSwitchExpression(this);
}

void JavaParser::SwitchExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSwitchExpression(this);
}

JavaParser::SwitchExpressionContext* JavaParser::switchExpression() {
  SwitchExpressionContext *_localctx = _tracker.createInstance<SwitchExpressionContext>(_ctx, getState());
  enterRule(_localctx, 208, JavaParser::RuleSwitchExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1531);
    match(JavaParser::SWITCH);
    setState(1532);
    parExpression();
    setState(1533);
    match(JavaParser::LBRACE);
    setState(1537);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::CASE

    || _la == JavaParser::DEFAULT) {
      setState(1534);
      switchLabeledRule();
      setState(1539);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1540);
    match(JavaParser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SwitchLabeledRuleContext ------------------------------------------------------------------

JavaParser::SwitchLabeledRuleContext::SwitchLabeledRuleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::SwitchLabeledRuleContext::CASE() {
  return getToken(JavaParser::CASE, 0);
}

JavaParser::SwitchRuleOutcomeContext* JavaParser::SwitchLabeledRuleContext::switchRuleOutcome() {
  return getRuleContext<JavaParser::SwitchRuleOutcomeContext>(0);
}

tree::TerminalNode* JavaParser::SwitchLabeledRuleContext::ARROW() {
  return getToken(JavaParser::ARROW, 0);
}

tree::TerminalNode* JavaParser::SwitchLabeledRuleContext::COLON() {
  return getToken(JavaParser::COLON, 0);
}

JavaParser::ExpressionListContext* JavaParser::SwitchLabeledRuleContext::expressionList() {
  return getRuleContext<JavaParser::ExpressionListContext>(0);
}

tree::TerminalNode* JavaParser::SwitchLabeledRuleContext::NULL_LITERAL() {
  return getToken(JavaParser::NULL_LITERAL, 0);
}

JavaParser::GuardedPatternContext* JavaParser::SwitchLabeledRuleContext::guardedPattern() {
  return getRuleContext<JavaParser::GuardedPatternContext>(0);
}

tree::TerminalNode* JavaParser::SwitchLabeledRuleContext::DEFAULT() {
  return getToken(JavaParser::DEFAULT, 0);
}


size_t JavaParser::SwitchLabeledRuleContext::getRuleIndex() const {
  return JavaParser::RuleSwitchLabeledRule;
}

void JavaParser::SwitchLabeledRuleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSwitchLabeledRule(this);
}

void JavaParser::SwitchLabeledRuleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSwitchLabeledRule(this);
}

JavaParser::SwitchLabeledRuleContext* JavaParser::switchLabeledRule() {
  SwitchLabeledRuleContext *_localctx = _tracker.createInstance<SwitchLabeledRuleContext>(_ctx, getState());
  enterRule(_localctx, 210, JavaParser::RuleSwitchLabeledRule);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1553);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::CASE: {
        enterOuterAlt(_localctx, 1);
        setState(1542);
        match(JavaParser::CASE);
        setState(1546);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 183, _ctx)) {
        case 1: {
          setState(1543);
          expressionList();
          break;
        }

        case 2: {
          setState(1544);
          match(JavaParser::NULL_LITERAL);
          break;
        }

        case 3: {
          setState(1545);
          guardedPattern(0);
          break;
        }

        default:
          break;
        }
        setState(1548);
        _la = _input->LA(1);
        if (!(_la == JavaParser::COLON

        || _la == JavaParser::ARROW)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(1549);
        switchRuleOutcome();
        break;
      }

      case JavaParser::DEFAULT: {
        enterOuterAlt(_localctx, 2);
        setState(1550);
        match(JavaParser::DEFAULT);
        setState(1551);
        _la = _input->LA(1);
        if (!(_la == JavaParser::COLON

        || _la == JavaParser::ARROW)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(1552);
        switchRuleOutcome();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GuardedPatternContext ------------------------------------------------------------------

JavaParser::GuardedPatternContext::GuardedPatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::GuardedPatternContext::LPAREN() {
  return getToken(JavaParser::LPAREN, 0);
}

JavaParser::GuardedPatternContext* JavaParser::GuardedPatternContext::guardedPattern() {
  return getRuleContext<JavaParser::GuardedPatternContext>(0);
}

tree::TerminalNode* JavaParser::GuardedPatternContext::RPAREN() {
  return getToken(JavaParser::RPAREN, 0);
}

JavaParser::TypeTypeContext* JavaParser::GuardedPatternContext::typeType() {
  return getRuleContext<JavaParser::TypeTypeContext>(0);
}

JavaParser::IdentifierContext* JavaParser::GuardedPatternContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

std::vector<JavaParser::VariableModifierContext *> JavaParser::GuardedPatternContext::variableModifier() {
  return getRuleContexts<JavaParser::VariableModifierContext>();
}

JavaParser::VariableModifierContext* JavaParser::GuardedPatternContext::variableModifier(size_t i) {
  return getRuleContext<JavaParser::VariableModifierContext>(i);
}

std::vector<JavaParser::AnnotationContext *> JavaParser::GuardedPatternContext::annotation() {
  return getRuleContexts<JavaParser::AnnotationContext>();
}

JavaParser::AnnotationContext* JavaParser::GuardedPatternContext::annotation(size_t i) {
  return getRuleContext<JavaParser::AnnotationContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::GuardedPatternContext::AND() {
  return getTokens(JavaParser::AND);
}

tree::TerminalNode* JavaParser::GuardedPatternContext::AND(size_t i) {
  return getToken(JavaParser::AND, i);
}

std::vector<JavaParser::ExpressionContext *> JavaParser::GuardedPatternContext::expression() {
  return getRuleContexts<JavaParser::ExpressionContext>();
}

JavaParser::ExpressionContext* JavaParser::GuardedPatternContext::expression(size_t i) {
  return getRuleContext<JavaParser::ExpressionContext>(i);
}


size_t JavaParser::GuardedPatternContext::getRuleIndex() const {
  return JavaParser::RuleGuardedPattern;
}

void JavaParser::GuardedPatternContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGuardedPattern(this);
}

void JavaParser::GuardedPatternContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGuardedPattern(this);
}


JavaParser::GuardedPatternContext* JavaParser::guardedPattern() {
   return guardedPattern(0);
}

JavaParser::GuardedPatternContext* JavaParser::guardedPattern(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  JavaParser::GuardedPatternContext *_localctx = _tracker.createInstance<GuardedPatternContext>(_ctx, parentState);
  JavaParser::GuardedPatternContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 212;
  enterRecursionRule(_localctx, 212, JavaParser::RuleGuardedPattern, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1581);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::LPAREN: {
        setState(1556);
        match(JavaParser::LPAREN);
        setState(1557);
        guardedPattern(0);
        setState(1558);
        match(JavaParser::RPAREN);
        break;
      }

      case JavaParser::BOOLEAN:
      case JavaParser::BYTE:
      case JavaParser::CHAR:
      case JavaParser::DOUBLE:
      case JavaParser::FINAL:
      case JavaParser::FLOAT:
      case JavaParser::INT:
      case JavaParser::LONG:
      case JavaParser::SHORT:
      case JavaParser::MODULE:
      case JavaParser::OPEN:
      case JavaParser::REQUIRES:
      case JavaParser::EXPORTS:
      case JavaParser::OPENS:
      case JavaParser::TO:
      case JavaParser::USES:
      case JavaParser::PROVIDES:
      case JavaParser::WITH:
      case JavaParser::TRANSITIVE:
      case JavaParser::VAR:
      case JavaParser::YIELD:
      case JavaParser::RECORD:
      case JavaParser::SEALED:
      case JavaParser::PERMITS:
      case JavaParser::AT:
      case JavaParser::IDENTIFIER: {
        setState(1563);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 185, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(1560);
            variableModifier(); 
          }
          setState(1565);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 185, _ctx);
        }
        setState(1566);
        typeType();
        setState(1570);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 186, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(1567);
            annotation(); 
          }
          setState(1572);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 186, _ctx);
        }
        setState(1573);
        identifier();
        setState(1578);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 187, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(1574);
            match(JavaParser::AND);
            setState(1575);
            expression(0); 
          }
          setState(1580);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 187, _ctx);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    _ctx->stop = _input->LT(-1);
    setState(1588);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 189, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<GuardedPatternContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleGuardedPattern);
        setState(1583);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(1584);
        match(JavaParser::AND);
        setState(1585);
        expression(0); 
      }
      setState(1590);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 189, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- SwitchRuleOutcomeContext ------------------------------------------------------------------

JavaParser::SwitchRuleOutcomeContext::SwitchRuleOutcomeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::BlockContext* JavaParser::SwitchRuleOutcomeContext::block() {
  return getRuleContext<JavaParser::BlockContext>(0);
}

std::vector<JavaParser::BlockStatementContext *> JavaParser::SwitchRuleOutcomeContext::blockStatement() {
  return getRuleContexts<JavaParser::BlockStatementContext>();
}

JavaParser::BlockStatementContext* JavaParser::SwitchRuleOutcomeContext::blockStatement(size_t i) {
  return getRuleContext<JavaParser::BlockStatementContext>(i);
}


size_t JavaParser::SwitchRuleOutcomeContext::getRuleIndex() const {
  return JavaParser::RuleSwitchRuleOutcome;
}

void JavaParser::SwitchRuleOutcomeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSwitchRuleOutcome(this);
}

void JavaParser::SwitchRuleOutcomeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSwitchRuleOutcome(this);
}

JavaParser::SwitchRuleOutcomeContext* JavaParser::switchRuleOutcome() {
  SwitchRuleOutcomeContext *_localctx = _tracker.createInstance<SwitchRuleOutcomeContext>(_ctx, getState());
  enterRule(_localctx, 214, JavaParser::RuleSwitchRuleOutcome);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1598);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 191, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1591);
      block();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1595);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la - 1) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 1)) & -334254282492513) != 0 || (((_la - 65) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 65)) & -8935141145188974593) != 0) {
        setState(1592);
        blockStatement();
        setState(1597);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassTypeContext ------------------------------------------------------------------

JavaParser::ClassTypeContext::ClassTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::ClassTypeContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::ClassOrInterfaceTypeContext* JavaParser::ClassTypeContext::classOrInterfaceType() {
  return getRuleContext<JavaParser::ClassOrInterfaceTypeContext>(0);
}

tree::TerminalNode* JavaParser::ClassTypeContext::DOT() {
  return getToken(JavaParser::DOT, 0);
}

std::vector<JavaParser::AnnotationContext *> JavaParser::ClassTypeContext::annotation() {
  return getRuleContexts<JavaParser::AnnotationContext>();
}

JavaParser::AnnotationContext* JavaParser::ClassTypeContext::annotation(size_t i) {
  return getRuleContext<JavaParser::AnnotationContext>(i);
}

JavaParser::TypeArgumentsContext* JavaParser::ClassTypeContext::typeArguments() {
  return getRuleContext<JavaParser::TypeArgumentsContext>(0);
}


size_t JavaParser::ClassTypeContext::getRuleIndex() const {
  return JavaParser::RuleClassType;
}

void JavaParser::ClassTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassType(this);
}

void JavaParser::ClassTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassType(this);
}

JavaParser::ClassTypeContext* JavaParser::classType() {
  ClassTypeContext *_localctx = _tracker.createInstance<ClassTypeContext>(_ctx, getState());
  enterRule(_localctx, 216, JavaParser::RuleClassType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1603);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 192, _ctx)) {
    case 1: {
      setState(1600);
      classOrInterfaceType();
      setState(1601);
      match(JavaParser::DOT);
      break;
    }

    default:
      break;
    }
    setState(1608);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 193, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1605);
        annotation(); 
      }
      setState(1610);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 193, _ctx);
    }
    setState(1611);
    identifier();
    setState(1613);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::LT) {
      setState(1612);
      typeArguments();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CreatorContext ------------------------------------------------------------------

JavaParser::CreatorContext::CreatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::NonWildcardTypeArgumentsContext* JavaParser::CreatorContext::nonWildcardTypeArguments() {
  return getRuleContext<JavaParser::NonWildcardTypeArgumentsContext>(0);
}

JavaParser::CreatedNameContext* JavaParser::CreatorContext::createdName() {
  return getRuleContext<JavaParser::CreatedNameContext>(0);
}

JavaParser::ClassCreatorRestContext* JavaParser::CreatorContext::classCreatorRest() {
  return getRuleContext<JavaParser::ClassCreatorRestContext>(0);
}

JavaParser::ArrayCreatorRestContext* JavaParser::CreatorContext::arrayCreatorRest() {
  return getRuleContext<JavaParser::ArrayCreatorRestContext>(0);
}


size_t JavaParser::CreatorContext::getRuleIndex() const {
  return JavaParser::RuleCreator;
}

void JavaParser::CreatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreator(this);
}

void JavaParser::CreatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreator(this);
}

JavaParser::CreatorContext* JavaParser::creator() {
  CreatorContext *_localctx = _tracker.createInstance<CreatorContext>(_ctx, getState());
  enterRule(_localctx, 218, JavaParser::RuleCreator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1624);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::LT: {
        enterOuterAlt(_localctx, 1);
        setState(1615);
        nonWildcardTypeArguments();
        setState(1616);
        createdName();
        setState(1617);
        classCreatorRest();
        break;
      }

      case JavaParser::BOOLEAN:
      case JavaParser::BYTE:
      case JavaParser::CHAR:
      case JavaParser::DOUBLE:
      case JavaParser::FLOAT:
      case JavaParser::INT:
      case JavaParser::LONG:
      case JavaParser::SHORT:
      case JavaParser::MODULE:
      case JavaParser::OPEN:
      case JavaParser::REQUIRES:
      case JavaParser::EXPORTS:
      case JavaParser::OPENS:
      case JavaParser::TO:
      case JavaParser::USES:
      case JavaParser::PROVIDES:
      case JavaParser::WITH:
      case JavaParser::TRANSITIVE:
      case JavaParser::VAR:
      case JavaParser::YIELD:
      case JavaParser::RECORD:
      case JavaParser::SEALED:
      case JavaParser::PERMITS:
      case JavaParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 2);
        setState(1619);
        createdName();
        setState(1622);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case JavaParser::LBRACK: {
            setState(1620);
            arrayCreatorRest();
            break;
          }

          case JavaParser::LPAREN: {
            setState(1621);
            classCreatorRest();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CreatedNameContext ------------------------------------------------------------------

JavaParser::CreatedNameContext::CreatedNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::IdentifierContext *> JavaParser::CreatedNameContext::identifier() {
  return getRuleContexts<JavaParser::IdentifierContext>();
}

JavaParser::IdentifierContext* JavaParser::CreatedNameContext::identifier(size_t i) {
  return getRuleContext<JavaParser::IdentifierContext>(i);
}

std::vector<JavaParser::TypeArgumentsOrDiamondContext *> JavaParser::CreatedNameContext::typeArgumentsOrDiamond() {
  return getRuleContexts<JavaParser::TypeArgumentsOrDiamondContext>();
}

JavaParser::TypeArgumentsOrDiamondContext* JavaParser::CreatedNameContext::typeArgumentsOrDiamond(size_t i) {
  return getRuleContext<JavaParser::TypeArgumentsOrDiamondContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::CreatedNameContext::DOT() {
  return getTokens(JavaParser::DOT);
}

tree::TerminalNode* JavaParser::CreatedNameContext::DOT(size_t i) {
  return getToken(JavaParser::DOT, i);
}

JavaParser::PrimitiveTypeContext* JavaParser::CreatedNameContext::primitiveType() {
  return getRuleContext<JavaParser::PrimitiveTypeContext>(0);
}


size_t JavaParser::CreatedNameContext::getRuleIndex() const {
  return JavaParser::RuleCreatedName;
}

void JavaParser::CreatedNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreatedName(this);
}

void JavaParser::CreatedNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreatedName(this);
}

JavaParser::CreatedNameContext* JavaParser::createdName() {
  CreatedNameContext *_localctx = _tracker.createInstance<CreatedNameContext>(_ctx, getState());
  enterRule(_localctx, 220, JavaParser::RuleCreatedName);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1641);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::MODULE:
      case JavaParser::OPEN:
      case JavaParser::REQUIRES:
      case JavaParser::EXPORTS:
      case JavaParser::OPENS:
      case JavaParser::TO:
      case JavaParser::USES:
      case JavaParser::PROVIDES:
      case JavaParser::WITH:
      case JavaParser::TRANSITIVE:
      case JavaParser::VAR:
      case JavaParser::YIELD:
      case JavaParser::RECORD:
      case JavaParser::SEALED:
      case JavaParser::PERMITS:
      case JavaParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(1626);
        identifier();
        setState(1628);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == JavaParser::LT) {
          setState(1627);
          typeArgumentsOrDiamond();
        }
        setState(1637);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == JavaParser::DOT) {
          setState(1630);
          match(JavaParser::DOT);
          setState(1631);
          identifier();
          setState(1633);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == JavaParser::LT) {
            setState(1632);
            typeArgumentsOrDiamond();
          }
          setState(1639);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case JavaParser::BOOLEAN:
      case JavaParser::BYTE:
      case JavaParser::CHAR:
      case JavaParser::DOUBLE:
      case JavaParser::FLOAT:
      case JavaParser::INT:
      case JavaParser::LONG:
      case JavaParser::SHORT: {
        enterOuterAlt(_localctx, 2);
        setState(1640);
        primitiveType();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InnerCreatorContext ------------------------------------------------------------------

JavaParser::InnerCreatorContext::InnerCreatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::InnerCreatorContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::ClassCreatorRestContext* JavaParser::InnerCreatorContext::classCreatorRest() {
  return getRuleContext<JavaParser::ClassCreatorRestContext>(0);
}

JavaParser::NonWildcardTypeArgumentsOrDiamondContext* JavaParser::InnerCreatorContext::nonWildcardTypeArgumentsOrDiamond() {
  return getRuleContext<JavaParser::NonWildcardTypeArgumentsOrDiamondContext>(0);
}


size_t JavaParser::InnerCreatorContext::getRuleIndex() const {
  return JavaParser::RuleInnerCreator;
}

void JavaParser::InnerCreatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInnerCreator(this);
}

void JavaParser::InnerCreatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInnerCreator(this);
}

JavaParser::InnerCreatorContext* JavaParser::innerCreator() {
  InnerCreatorContext *_localctx = _tracker.createInstance<InnerCreatorContext>(_ctx, getState());
  enterRule(_localctx, 222, JavaParser::RuleInnerCreator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1643);
    identifier();
    setState(1645);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::LT) {
      setState(1644);
      nonWildcardTypeArgumentsOrDiamond();
    }
    setState(1647);
    classCreatorRest();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayCreatorRestContext ------------------------------------------------------------------

JavaParser::ArrayCreatorRestContext::ArrayCreatorRestContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> JavaParser::ArrayCreatorRestContext::LBRACK() {
  return getTokens(JavaParser::LBRACK);
}

tree::TerminalNode* JavaParser::ArrayCreatorRestContext::LBRACK(size_t i) {
  return getToken(JavaParser::LBRACK, i);
}

std::vector<tree::TerminalNode *> JavaParser::ArrayCreatorRestContext::RBRACK() {
  return getTokens(JavaParser::RBRACK);
}

tree::TerminalNode* JavaParser::ArrayCreatorRestContext::RBRACK(size_t i) {
  return getToken(JavaParser::RBRACK, i);
}

JavaParser::ArrayInitializerContext* JavaParser::ArrayCreatorRestContext::arrayInitializer() {
  return getRuleContext<JavaParser::ArrayInitializerContext>(0);
}

std::vector<JavaParser::ExpressionContext *> JavaParser::ArrayCreatorRestContext::expression() {
  return getRuleContexts<JavaParser::ExpressionContext>();
}

JavaParser::ExpressionContext* JavaParser::ArrayCreatorRestContext::expression(size_t i) {
  return getRuleContext<JavaParser::ExpressionContext>(i);
}


size_t JavaParser::ArrayCreatorRestContext::getRuleIndex() const {
  return JavaParser::RuleArrayCreatorRest;
}

void JavaParser::ArrayCreatorRestContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArrayCreatorRest(this);
}

void JavaParser::ArrayCreatorRestContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArrayCreatorRest(this);
}

JavaParser::ArrayCreatorRestContext* JavaParser::arrayCreatorRest() {
  ArrayCreatorRestContext *_localctx = _tracker.createInstance<ArrayCreatorRestContext>(_ctx, getState());
  enterRule(_localctx, 224, JavaParser::RuleArrayCreatorRest);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1649);
    match(JavaParser::LBRACK);
    setState(1677);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::RBRACK: {
        setState(1650);
        match(JavaParser::RBRACK);
        setState(1655);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == JavaParser::LBRACK) {
          setState(1651);
          match(JavaParser::LBRACK);
          setState(1652);
          match(JavaParser::RBRACK);
          setState(1657);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(1658);
        arrayInitializer();
        break;
      }

      case JavaParser::BOOLEAN:
      case JavaParser::BYTE:
      case JavaParser::CHAR:
      case JavaParser::DOUBLE:
      case JavaParser::FLOAT:
      case JavaParser::INT:
      case JavaParser::LONG:
      case JavaParser::NEW:
      case JavaParser::SHORT:
      case JavaParser::SUPER:
      case JavaParser::SWITCH:
      case JavaParser::THIS:
      case JavaParser::VOID:
      case JavaParser::MODULE:
      case JavaParser::OPEN:
      case JavaParser::REQUIRES:
      case JavaParser::EXPORTS:
      case JavaParser::OPENS:
      case JavaParser::TO:
      case JavaParser::USES:
      case JavaParser::PROVIDES:
      case JavaParser::WITH:
      case JavaParser::TRANSITIVE:
      case JavaParser::VAR:
      case JavaParser::YIELD:
      case JavaParser::RECORD:
      case JavaParser::SEALED:
      case JavaParser::PERMITS:
      case JavaParser::DECIMAL_LITERAL:
      case JavaParser::HEX_LITERAL:
      case JavaParser::OCT_LITERAL:
      case JavaParser::BINARY_LITERAL:
      case JavaParser::FLOAT_LITERAL:
      case JavaParser::HEX_FLOAT_LITERAL:
      case JavaParser::BOOL_LITERAL:
      case JavaParser::CHAR_LITERAL:
      case JavaParser::STRING_LITERAL:
      case JavaParser::TEXT_BLOCK:
      case JavaParser::NULL_LITERAL:
      case JavaParser::LPAREN:
      case JavaParser::LT:
      case JavaParser::BANG:
      case JavaParser::TILDE:
      case JavaParser::INC:
      case JavaParser::DEC:
      case JavaParser::ADD:
      case JavaParser::SUB:
      case JavaParser::AT:
      case JavaParser::IDENTIFIER: {
        setState(1659);
        expression(0);
        setState(1660);
        match(JavaParser::RBRACK);
        setState(1667);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 203, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(1661);
            match(JavaParser::LBRACK);
            setState(1662);
            expression(0);
            setState(1663);
            match(JavaParser::RBRACK); 
          }
          setState(1669);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 203, _ctx);
        }
        setState(1674);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 204, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(1670);
            match(JavaParser::LBRACK);
            setState(1671);
            match(JavaParser::RBRACK); 
          }
          setState(1676);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 204, _ctx);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassCreatorRestContext ------------------------------------------------------------------

JavaParser::ClassCreatorRestContext::ClassCreatorRestContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ArgumentsContext* JavaParser::ClassCreatorRestContext::arguments() {
  return getRuleContext<JavaParser::ArgumentsContext>(0);
}

JavaParser::ClassBodyContext* JavaParser::ClassCreatorRestContext::classBody() {
  return getRuleContext<JavaParser::ClassBodyContext>(0);
}


size_t JavaParser::ClassCreatorRestContext::getRuleIndex() const {
  return JavaParser::RuleClassCreatorRest;
}

void JavaParser::ClassCreatorRestContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassCreatorRest(this);
}

void JavaParser::ClassCreatorRestContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassCreatorRest(this);
}

JavaParser::ClassCreatorRestContext* JavaParser::classCreatorRest() {
  ClassCreatorRestContext *_localctx = _tracker.createInstance<ClassCreatorRestContext>(_ctx, getState());
  enterRule(_localctx, 226, JavaParser::RuleClassCreatorRest);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1679);
    arguments();
    setState(1681);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 206, _ctx)) {
    case 1: {
      setState(1680);
      classBody();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExplicitGenericInvocationContext ------------------------------------------------------------------

JavaParser::ExplicitGenericInvocationContext::ExplicitGenericInvocationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::NonWildcardTypeArgumentsContext* JavaParser::ExplicitGenericInvocationContext::nonWildcardTypeArguments() {
  return getRuleContext<JavaParser::NonWildcardTypeArgumentsContext>(0);
}

JavaParser::ExplicitGenericInvocationSuffixContext* JavaParser::ExplicitGenericInvocationContext::explicitGenericInvocationSuffix() {
  return getRuleContext<JavaParser::ExplicitGenericInvocationSuffixContext>(0);
}


size_t JavaParser::ExplicitGenericInvocationContext::getRuleIndex() const {
  return JavaParser::RuleExplicitGenericInvocation;
}

void JavaParser::ExplicitGenericInvocationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExplicitGenericInvocation(this);
}

void JavaParser::ExplicitGenericInvocationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExplicitGenericInvocation(this);
}

JavaParser::ExplicitGenericInvocationContext* JavaParser::explicitGenericInvocation() {
  ExplicitGenericInvocationContext *_localctx = _tracker.createInstance<ExplicitGenericInvocationContext>(_ctx, getState());
  enterRule(_localctx, 228, JavaParser::RuleExplicitGenericInvocation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1683);
    nonWildcardTypeArguments();
    setState(1684);
    explicitGenericInvocationSuffix();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeArgumentsOrDiamondContext ------------------------------------------------------------------

JavaParser::TypeArgumentsOrDiamondContext::TypeArgumentsOrDiamondContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::TypeArgumentsOrDiamondContext::LT() {
  return getToken(JavaParser::LT, 0);
}

tree::TerminalNode* JavaParser::TypeArgumentsOrDiamondContext::GT() {
  return getToken(JavaParser::GT, 0);
}

JavaParser::TypeArgumentsContext* JavaParser::TypeArgumentsOrDiamondContext::typeArguments() {
  return getRuleContext<JavaParser::TypeArgumentsContext>(0);
}


size_t JavaParser::TypeArgumentsOrDiamondContext::getRuleIndex() const {
  return JavaParser::RuleTypeArgumentsOrDiamond;
}

void JavaParser::TypeArgumentsOrDiamondContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeArgumentsOrDiamond(this);
}

void JavaParser::TypeArgumentsOrDiamondContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeArgumentsOrDiamond(this);
}

JavaParser::TypeArgumentsOrDiamondContext* JavaParser::typeArgumentsOrDiamond() {
  TypeArgumentsOrDiamondContext *_localctx = _tracker.createInstance<TypeArgumentsOrDiamondContext>(_ctx, getState());
  enterRule(_localctx, 230, JavaParser::RuleTypeArgumentsOrDiamond);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1689);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 207, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1686);
      match(JavaParser::LT);
      setState(1687);
      match(JavaParser::GT);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1688);
      typeArguments();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NonWildcardTypeArgumentsOrDiamondContext ------------------------------------------------------------------

JavaParser::NonWildcardTypeArgumentsOrDiamondContext::NonWildcardTypeArgumentsOrDiamondContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::NonWildcardTypeArgumentsOrDiamondContext::LT() {
  return getToken(JavaParser::LT, 0);
}

tree::TerminalNode* JavaParser::NonWildcardTypeArgumentsOrDiamondContext::GT() {
  return getToken(JavaParser::GT, 0);
}

JavaParser::NonWildcardTypeArgumentsContext* JavaParser::NonWildcardTypeArgumentsOrDiamondContext::nonWildcardTypeArguments() {
  return getRuleContext<JavaParser::NonWildcardTypeArgumentsContext>(0);
}


size_t JavaParser::NonWildcardTypeArgumentsOrDiamondContext::getRuleIndex() const {
  return JavaParser::RuleNonWildcardTypeArgumentsOrDiamond;
}

void JavaParser::NonWildcardTypeArgumentsOrDiamondContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNonWildcardTypeArgumentsOrDiamond(this);
}

void JavaParser::NonWildcardTypeArgumentsOrDiamondContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNonWildcardTypeArgumentsOrDiamond(this);
}

JavaParser::NonWildcardTypeArgumentsOrDiamondContext* JavaParser::nonWildcardTypeArgumentsOrDiamond() {
  NonWildcardTypeArgumentsOrDiamondContext *_localctx = _tracker.createInstance<NonWildcardTypeArgumentsOrDiamondContext>(_ctx, getState());
  enterRule(_localctx, 232, JavaParser::RuleNonWildcardTypeArgumentsOrDiamond);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1694);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 208, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1691);
      match(JavaParser::LT);
      setState(1692);
      match(JavaParser::GT);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1693);
      nonWildcardTypeArguments();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NonWildcardTypeArgumentsContext ------------------------------------------------------------------

JavaParser::NonWildcardTypeArgumentsContext::NonWildcardTypeArgumentsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::NonWildcardTypeArgumentsContext::LT() {
  return getToken(JavaParser::LT, 0);
}

JavaParser::TypeListContext* JavaParser::NonWildcardTypeArgumentsContext::typeList() {
  return getRuleContext<JavaParser::TypeListContext>(0);
}

tree::TerminalNode* JavaParser::NonWildcardTypeArgumentsContext::GT() {
  return getToken(JavaParser::GT, 0);
}


size_t JavaParser::NonWildcardTypeArgumentsContext::getRuleIndex() const {
  return JavaParser::RuleNonWildcardTypeArguments;
}

void JavaParser::NonWildcardTypeArgumentsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNonWildcardTypeArguments(this);
}

void JavaParser::NonWildcardTypeArgumentsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNonWildcardTypeArguments(this);
}

JavaParser::NonWildcardTypeArgumentsContext* JavaParser::nonWildcardTypeArguments() {
  NonWildcardTypeArgumentsContext *_localctx = _tracker.createInstance<NonWildcardTypeArgumentsContext>(_ctx, getState());
  enterRule(_localctx, 234, JavaParser::RuleNonWildcardTypeArguments);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1696);
    match(JavaParser::LT);
    setState(1697);
    typeList();
    setState(1698);
    match(JavaParser::GT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeListContext ------------------------------------------------------------------

JavaParser::TypeListContext::TypeListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::TypeTypeContext *> JavaParser::TypeListContext::typeType() {
  return getRuleContexts<JavaParser::TypeTypeContext>();
}

JavaParser::TypeTypeContext* JavaParser::TypeListContext::typeType(size_t i) {
  return getRuleContext<JavaParser::TypeTypeContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::TypeListContext::COMMA() {
  return getTokens(JavaParser::COMMA);
}

tree::TerminalNode* JavaParser::TypeListContext::COMMA(size_t i) {
  return getToken(JavaParser::COMMA, i);
}


size_t JavaParser::TypeListContext::getRuleIndex() const {
  return JavaParser::RuleTypeList;
}

void JavaParser::TypeListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeList(this);
}

void JavaParser::TypeListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeList(this);
}

JavaParser::TypeListContext* JavaParser::typeList() {
  TypeListContext *_localctx = _tracker.createInstance<TypeListContext>(_ctx, getState());
  enterRule(_localctx, 236, JavaParser::RuleTypeList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1700);
    typeType();
    setState(1705);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::COMMA) {
      setState(1701);
      match(JavaParser::COMMA);
      setState(1702);
      typeType();
      setState(1707);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeTypeContext ------------------------------------------------------------------

JavaParser::TypeTypeContext::TypeTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ClassOrInterfaceTypeContext* JavaParser::TypeTypeContext::classOrInterfaceType() {
  return getRuleContext<JavaParser::ClassOrInterfaceTypeContext>(0);
}

JavaParser::PrimitiveTypeContext* JavaParser::TypeTypeContext::primitiveType() {
  return getRuleContext<JavaParser::PrimitiveTypeContext>(0);
}

std::vector<JavaParser::AnnotationContext *> JavaParser::TypeTypeContext::annotation() {
  return getRuleContexts<JavaParser::AnnotationContext>();
}

JavaParser::AnnotationContext* JavaParser::TypeTypeContext::annotation(size_t i) {
  return getRuleContext<JavaParser::AnnotationContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::TypeTypeContext::LBRACK() {
  return getTokens(JavaParser::LBRACK);
}

tree::TerminalNode* JavaParser::TypeTypeContext::LBRACK(size_t i) {
  return getToken(JavaParser::LBRACK, i);
}

std::vector<tree::TerminalNode *> JavaParser::TypeTypeContext::RBRACK() {
  return getTokens(JavaParser::RBRACK);
}

tree::TerminalNode* JavaParser::TypeTypeContext::RBRACK(size_t i) {
  return getToken(JavaParser::RBRACK, i);
}


size_t JavaParser::TypeTypeContext::getRuleIndex() const {
  return JavaParser::RuleTypeType;
}

void JavaParser::TypeTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeType(this);
}

void JavaParser::TypeTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeType(this);
}

JavaParser::TypeTypeContext* JavaParser::typeType() {
  TypeTypeContext *_localctx = _tracker.createInstance<TypeTypeContext>(_ctx, getState());
  enterRule(_localctx, 238, JavaParser::RuleTypeType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1711);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 210, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1708);
        annotation(); 
      }
      setState(1713);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 210, _ctx);
    }
    setState(1716);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::MODULE:
      case JavaParser::OPEN:
      case JavaParser::REQUIRES:
      case JavaParser::EXPORTS:
      case JavaParser::OPENS:
      case JavaParser::TO:
      case JavaParser::USES:
      case JavaParser::PROVIDES:
      case JavaParser::WITH:
      case JavaParser::TRANSITIVE:
      case JavaParser::VAR:
      case JavaParser::YIELD:
      case JavaParser::RECORD:
      case JavaParser::SEALED:
      case JavaParser::PERMITS:
      case JavaParser::IDENTIFIER: {
        setState(1714);
        classOrInterfaceType();
        break;
      }

      case JavaParser::BOOLEAN:
      case JavaParser::BYTE:
      case JavaParser::CHAR:
      case JavaParser::DOUBLE:
      case JavaParser::FLOAT:
      case JavaParser::INT:
      case JavaParser::LONG:
      case JavaParser::SHORT: {
        setState(1715);
        primitiveType();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(1728);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 213, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1721);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la - 51) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 51)) & 32767) != 0 || _la == JavaParser::AT

        || _la == JavaParser::IDENTIFIER) {
          setState(1718);
          annotation();
          setState(1723);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(1724);
        match(JavaParser::LBRACK);
        setState(1725);
        match(JavaParser::RBRACK); 
      }
      setState(1730);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 213, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrimitiveTypeContext ------------------------------------------------------------------

JavaParser::PrimitiveTypeContext::PrimitiveTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::PrimitiveTypeContext::BOOLEAN() {
  return getToken(JavaParser::BOOLEAN, 0);
}

tree::TerminalNode* JavaParser::PrimitiveTypeContext::CHAR() {
  return getToken(JavaParser::CHAR, 0);
}

tree::TerminalNode* JavaParser::PrimitiveTypeContext::BYTE() {
  return getToken(JavaParser::BYTE, 0);
}

tree::TerminalNode* JavaParser::PrimitiveTypeContext::SHORT() {
  return getToken(JavaParser::SHORT, 0);
}

tree::TerminalNode* JavaParser::PrimitiveTypeContext::INT() {
  return getToken(JavaParser::INT, 0);
}

tree::TerminalNode* JavaParser::PrimitiveTypeContext::LONG() {
  return getToken(JavaParser::LONG, 0);
}

tree::TerminalNode* JavaParser::PrimitiveTypeContext::FLOAT() {
  return getToken(JavaParser::FLOAT, 0);
}

tree::TerminalNode* JavaParser::PrimitiveTypeContext::DOUBLE() {
  return getToken(JavaParser::DOUBLE, 0);
}


size_t JavaParser::PrimitiveTypeContext::getRuleIndex() const {
  return JavaParser::RulePrimitiveType;
}

void JavaParser::PrimitiveTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimitiveType(this);
}

void JavaParser::PrimitiveTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimitiveType(this);
}

JavaParser::PrimitiveTypeContext* JavaParser::primitiveType() {
  PrimitiveTypeContext *_localctx = _tracker.createInstance<PrimitiveTypeContext>(_ctx, getState());
  enterRule(_localctx, 240, JavaParser::RulePrimitiveType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1731);
    _la = _input->LA(1);
    if (!(((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 138111107368) != 0)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeArgumentsContext ------------------------------------------------------------------

JavaParser::TypeArgumentsContext::TypeArgumentsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::TypeArgumentsContext::LT() {
  return getToken(JavaParser::LT, 0);
}

std::vector<JavaParser::TypeArgumentContext *> JavaParser::TypeArgumentsContext::typeArgument() {
  return getRuleContexts<JavaParser::TypeArgumentContext>();
}

JavaParser::TypeArgumentContext* JavaParser::TypeArgumentsContext::typeArgument(size_t i) {
  return getRuleContext<JavaParser::TypeArgumentContext>(i);
}

tree::TerminalNode* JavaParser::TypeArgumentsContext::GT() {
  return getToken(JavaParser::GT, 0);
}

std::vector<tree::TerminalNode *> JavaParser::TypeArgumentsContext::COMMA() {
  return getTokens(JavaParser::COMMA);
}

tree::TerminalNode* JavaParser::TypeArgumentsContext::COMMA(size_t i) {
  return getToken(JavaParser::COMMA, i);
}


size_t JavaParser::TypeArgumentsContext::getRuleIndex() const {
  return JavaParser::RuleTypeArguments;
}

void JavaParser::TypeArgumentsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeArguments(this);
}

void JavaParser::TypeArgumentsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeArguments(this);
}

JavaParser::TypeArgumentsContext* JavaParser::typeArguments() {
  TypeArgumentsContext *_localctx = _tracker.createInstance<TypeArgumentsContext>(_ctx, getState());
  enterRule(_localctx, 242, JavaParser::RuleTypeArguments);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1733);
    match(JavaParser::LT);
    setState(1734);
    typeArgument();
    setState(1739);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::COMMA) {
      setState(1735);
      match(JavaParser::COMMA);
      setState(1736);
      typeArgument();
      setState(1741);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1742);
    match(JavaParser::GT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SuperSuffixContext ------------------------------------------------------------------

JavaParser::SuperSuffixContext::SuperSuffixContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ArgumentsContext* JavaParser::SuperSuffixContext::arguments() {
  return getRuleContext<JavaParser::ArgumentsContext>(0);
}

tree::TerminalNode* JavaParser::SuperSuffixContext::DOT() {
  return getToken(JavaParser::DOT, 0);
}

JavaParser::IdentifierContext* JavaParser::SuperSuffixContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::TypeArgumentsContext* JavaParser::SuperSuffixContext::typeArguments() {
  return getRuleContext<JavaParser::TypeArgumentsContext>(0);
}


size_t JavaParser::SuperSuffixContext::getRuleIndex() const {
  return JavaParser::RuleSuperSuffix;
}

void JavaParser::SuperSuffixContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSuperSuffix(this);
}

void JavaParser::SuperSuffixContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSuperSuffix(this);
}

JavaParser::SuperSuffixContext* JavaParser::superSuffix() {
  SuperSuffixContext *_localctx = _tracker.createInstance<SuperSuffixContext>(_ctx, getState());
  enterRule(_localctx, 244, JavaParser::RuleSuperSuffix);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1753);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::LPAREN: {
        enterOuterAlt(_localctx, 1);
        setState(1744);
        arguments();
        break;
      }

      case JavaParser::DOT: {
        enterOuterAlt(_localctx, 2);
        setState(1745);
        match(JavaParser::DOT);
        setState(1747);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == JavaParser::LT) {
          setState(1746);
          typeArguments();
        }
        setState(1749);
        identifier();
        setState(1751);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 216, _ctx)) {
        case 1: {
          setState(1750);
          arguments();
          break;
        }

        default:
          break;
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExplicitGenericInvocationSuffixContext ------------------------------------------------------------------

JavaParser::ExplicitGenericInvocationSuffixContext::ExplicitGenericInvocationSuffixContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::ExplicitGenericInvocationSuffixContext::SUPER() {
  return getToken(JavaParser::SUPER, 0);
}

JavaParser::SuperSuffixContext* JavaParser::ExplicitGenericInvocationSuffixContext::superSuffix() {
  return getRuleContext<JavaParser::SuperSuffixContext>(0);
}

JavaParser::IdentifierContext* JavaParser::ExplicitGenericInvocationSuffixContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::ArgumentsContext* JavaParser::ExplicitGenericInvocationSuffixContext::arguments() {
  return getRuleContext<JavaParser::ArgumentsContext>(0);
}


size_t JavaParser::ExplicitGenericInvocationSuffixContext::getRuleIndex() const {
  return JavaParser::RuleExplicitGenericInvocationSuffix;
}

void JavaParser::ExplicitGenericInvocationSuffixContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExplicitGenericInvocationSuffix(this);
}

void JavaParser::ExplicitGenericInvocationSuffixContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExplicitGenericInvocationSuffix(this);
}

JavaParser::ExplicitGenericInvocationSuffixContext* JavaParser::explicitGenericInvocationSuffix() {
  ExplicitGenericInvocationSuffixContext *_localctx = _tracker.createInstance<ExplicitGenericInvocationSuffixContext>(_ctx, getState());
  enterRule(_localctx, 246, JavaParser::RuleExplicitGenericInvocationSuffix);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1760);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::SUPER: {
        enterOuterAlt(_localctx, 1);
        setState(1755);
        match(JavaParser::SUPER);
        setState(1756);
        superSuffix();
        break;
      }

      case JavaParser::MODULE:
      case JavaParser::OPEN:
      case JavaParser::REQUIRES:
      case JavaParser::EXPORTS:
      case JavaParser::OPENS:
      case JavaParser::TO:
      case JavaParser::USES:
      case JavaParser::PROVIDES:
      case JavaParser::WITH:
      case JavaParser::TRANSITIVE:
      case JavaParser::VAR:
      case JavaParser::YIELD:
      case JavaParser::RECORD:
      case JavaParser::SEALED:
      case JavaParser::PERMITS:
      case JavaParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 2);
        setState(1757);
        identifier();
        setState(1758);
        arguments();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArgumentsContext ------------------------------------------------------------------

JavaParser::ArgumentsContext::ArgumentsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::ArgumentsContext::LPAREN() {
  return getToken(JavaParser::LPAREN, 0);
}

tree::TerminalNode* JavaParser::ArgumentsContext::RPAREN() {
  return getToken(JavaParser::RPAREN, 0);
}

JavaParser::ExpressionListContext* JavaParser::ArgumentsContext::expressionList() {
  return getRuleContext<JavaParser::ExpressionListContext>(0);
}


size_t JavaParser::ArgumentsContext::getRuleIndex() const {
  return JavaParser::RuleArguments;
}

void JavaParser::ArgumentsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArguments(this);
}

void JavaParser::ArgumentsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<JavaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArguments(this);
}

JavaParser::ArgumentsContext* JavaParser::arguments() {
  ArgumentsContext *_localctx = _tracker.createInstance<ArgumentsContext>(_ctx, getState());
  enterRule(_localctx, 248, JavaParser::RuleArguments);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1762);
    match(JavaParser::LPAREN);
    setState(1764);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la - 3) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 3)) & 9223127275610966053) != 0 || (((_la - 67) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 67)) & 2377900732130004991) != 0) {
      setState(1763);
      expressionList();
    }
    setState(1766);
    match(JavaParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool JavaParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 98: return expressionSempred(antlrcpp::downCast<ExpressionContext *>(context), predicateIndex);
    case 106: return guardedPatternSempred(antlrcpp::downCast<GuardedPatternContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool JavaParser::expressionSempred(ExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return precpred(_ctx, 18);
    case 1: return precpred(_ctx, 17);
    case 2: return precpred(_ctx, 16);
    case 3: return precpred(_ctx, 15);
    case 4: return precpred(_ctx, 13);
    case 5: return precpred(_ctx, 12);
    case 6: return precpred(_ctx, 11);
    case 7: return precpred(_ctx, 10);
    case 8: return precpred(_ctx, 9);
    case 9: return precpred(_ctx, 8);
    case 10: return precpred(_ctx, 7);
    case 11: return precpred(_ctx, 6);
    case 12: return precpred(_ctx, 26);
    case 13: return precpred(_ctx, 25);
    case 14: return precpred(_ctx, 21);
    case 15: return precpred(_ctx, 14);
    case 16: return precpred(_ctx, 3);

  default:
    break;
  }
  return true;
}

bool JavaParser::guardedPatternSempred(GuardedPatternContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 17: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

void JavaParser::initialize() {
  ::antlr4::internal::call_once(javaparserParserOnceFlag, javaparserParserInitialize);
}
